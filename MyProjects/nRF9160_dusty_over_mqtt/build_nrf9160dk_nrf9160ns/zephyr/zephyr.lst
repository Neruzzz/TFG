
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	2001f0d8 	.word	0x2001f0d8
    c004:	00011511 	.word	0x00011511
    c008:	0001ceb5 	.word	0x0001ceb5
    c00c:	00011541 	.word	0x00011541
    c010:	00011541 	.word	0x00011541
    c014:	00011541 	.word	0x00011541
    c018:	00011541 	.word	0x00011541
    c01c:	00011541 	.word	0x00011541
	...
    c02c:	0001146d 	.word	0x0001146d
    c030:	00011541 	.word	0x00011541
    c034:	00000000 	.word	0x00000000
    c038:	000113bd 	.word	0x000113bd
    c03c:	0001ce81 	.word	0x0001ce81

0000c040 <_irq_vector_table>:
    c040:	000114d1 000114d1 000114d1 000114d1     ................
    c050:	000114d1 000114d1 000114d1 000114d1     ................
    c060:	000114d1 000114d1 000114d1 000114d1     ................
    c070:	000114d1 000114d1 000114d1 000114d1     ................
    c080:	000114d1 000114d1 000114d1 000114d1     ................
    c090:	000114d1 000114d1 000114d1 000114d1     ................
    c0a0:	000114d1 000114d1 000114d1 000114d1     ................
    c0b0:	00013199 0001de35 000114d1 000114d1     .1..5...........
    c0c0:	000114d1 000114d1 000114d1 000114d1     ................
    c0d0:	000114d1 000114d1 000114d1 000114d1     ................
    c0e0:	000114d1 000114d1 000114d1 000114d1     ................
    c0f0:	000114d1 000114d1 000114d1 000114d1     ................
    c100:	000114d1 000114d1 000114d1 000114d1     ................
    c110:	000114d1 000114d1 000114d1 000114d1     ................
    c120:	000114d1 000114d1 000114d1 000114d1     ................
    c130:	000114d1 000114d1 000114d1 000114d1     ................
    c140:	000114d1                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00017c28 00000001 0000c000 0000c000     (|..............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_drsub>:
    c240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c244:	e002      	b.n	c24c <__adddf3>
    c246:	bf00      	nop

0000c248 <__aeabi_dsub>:
    c248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c24c <__adddf3>:
    c24c:	b530      	push	{r4, r5, lr}
    c24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c256:	ea94 0f05 	teq	r4, r5
    c25a:	bf08      	it	eq
    c25c:	ea90 0f02 	teqeq	r0, r2
    c260:	bf1f      	itttt	ne
    c262:	ea54 0c00 	orrsne.w	ip, r4, r0
    c266:	ea55 0c02 	orrsne.w	ip, r5, r2
    c26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c272:	f000 80e2 	beq.w	c43a <__adddf3+0x1ee>
    c276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27e:	bfb8      	it	lt
    c280:	426d      	neglt	r5, r5
    c282:	dd0c      	ble.n	c29e <__adddf3+0x52>
    c284:	442c      	add	r4, r5
    c286:	ea80 0202 	eor.w	r2, r0, r2
    c28a:	ea81 0303 	eor.w	r3, r1, r3
    c28e:	ea82 0000 	eor.w	r0, r2, r0
    c292:	ea83 0101 	eor.w	r1, r3, r1
    c296:	ea80 0202 	eor.w	r2, r0, r2
    c29a:	ea81 0303 	eor.w	r3, r1, r3
    c29e:	2d36      	cmp	r5, #54	; 0x36
    c2a0:	bf88      	it	hi
    c2a2:	bd30      	pophi	{r4, r5, pc}
    c2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b4:	d002      	beq.n	c2bc <__adddf3+0x70>
    c2b6:	4240      	negs	r0, r0
    c2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c8:	d002      	beq.n	c2d0 <__adddf3+0x84>
    c2ca:	4252      	negs	r2, r2
    c2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2d0:	ea94 0f05 	teq	r4, r5
    c2d4:	f000 80a7 	beq.w	c426 <__adddf3+0x1da>
    c2d8:	f1a4 0401 	sub.w	r4, r4, #1
    c2dc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2e0:	db0d      	blt.n	c2fe <__adddf3+0xb2>
    c2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ea:	1880      	adds	r0, r0, r2
    c2ec:	f141 0100 	adc.w	r1, r1, #0
    c2f0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f4:	1880      	adds	r0, r0, r2
    c2f6:	fa43 f305 	asr.w	r3, r3, r5
    c2fa:	4159      	adcs	r1, r3
    c2fc:	e00e      	b.n	c31c <__adddf3+0xd0>
    c2fe:	f1a5 0520 	sub.w	r5, r5, #32
    c302:	f10e 0e20 	add.w	lr, lr, #32
    c306:	2a01      	cmp	r2, #1
    c308:	fa03 fc0e 	lsl.w	ip, r3, lr
    c30c:	bf28      	it	cs
    c30e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c312:	fa43 f305 	asr.w	r3, r3, r5
    c316:	18c0      	adds	r0, r0, r3
    c318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c320:	d507      	bpl.n	c332 <__adddf3+0xe6>
    c322:	f04f 0e00 	mov.w	lr, #0
    c326:	f1dc 0c00 	rsbs	ip, ip, #0
    c32a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32e:	eb6e 0101 	sbc.w	r1, lr, r1
    c332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c336:	d31b      	bcc.n	c370 <__adddf3+0x124>
    c338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c33c:	d30c      	bcc.n	c358 <__adddf3+0x10c>
    c33e:	0849      	lsrs	r1, r1, #1
    c340:	ea5f 0030 	movs.w	r0, r0, rrx
    c344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c348:	f104 0401 	add.w	r4, r4, #1
    c34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c354:	f080 809a 	bcs.w	c48c <__adddf3+0x240>
    c358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c35c:	bf08      	it	eq
    c35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c362:	f150 0000 	adcs.w	r0, r0, #0
    c366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c36a:	ea41 0105 	orr.w	r1, r1, r5
    c36e:	bd30      	pop	{r4, r5, pc}
    c370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c374:	4140      	adcs	r0, r0
    c376:	eb41 0101 	adc.w	r1, r1, r1
    c37a:	3c01      	subs	r4, #1
    c37c:	bf28      	it	cs
    c37e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c382:	d2e9      	bcs.n	c358 <__adddf3+0x10c>
    c384:	f091 0f00 	teq	r1, #0
    c388:	bf04      	itt	eq
    c38a:	4601      	moveq	r1, r0
    c38c:	2000      	moveq	r0, #0
    c38e:	fab1 f381 	clz	r3, r1
    c392:	bf08      	it	eq
    c394:	3320      	addeq	r3, #32
    c396:	f1a3 030b 	sub.w	r3, r3, #11
    c39a:	f1b3 0220 	subs.w	r2, r3, #32
    c39e:	da0c      	bge.n	c3ba <__adddf3+0x16e>
    c3a0:	320c      	adds	r2, #12
    c3a2:	dd08      	ble.n	c3b6 <__adddf3+0x16a>
    c3a4:	f102 0c14 	add.w	ip, r2, #20
    c3a8:	f1c2 020c 	rsb	r2, r2, #12
    c3ac:	fa01 f00c 	lsl.w	r0, r1, ip
    c3b0:	fa21 f102 	lsr.w	r1, r1, r2
    c3b4:	e00c      	b.n	c3d0 <__adddf3+0x184>
    c3b6:	f102 0214 	add.w	r2, r2, #20
    c3ba:	bfd8      	it	le
    c3bc:	f1c2 0c20 	rsble	ip, r2, #32
    c3c0:	fa01 f102 	lsl.w	r1, r1, r2
    c3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c8:	bfdc      	itt	le
    c3ca:	ea41 010c 	orrle.w	r1, r1, ip
    c3ce:	4090      	lslle	r0, r2
    c3d0:	1ae4      	subs	r4, r4, r3
    c3d2:	bfa2      	ittt	ge
    c3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d8:	4329      	orrge	r1, r5
    c3da:	bd30      	popge	{r4, r5, pc}
    c3dc:	ea6f 0404 	mvn.w	r4, r4
    c3e0:	3c1f      	subs	r4, #31
    c3e2:	da1c      	bge.n	c41e <__adddf3+0x1d2>
    c3e4:	340c      	adds	r4, #12
    c3e6:	dc0e      	bgt.n	c406 <__adddf3+0x1ba>
    c3e8:	f104 0414 	add.w	r4, r4, #20
    c3ec:	f1c4 0220 	rsb	r2, r4, #32
    c3f0:	fa20 f004 	lsr.w	r0, r0, r4
    c3f4:	fa01 f302 	lsl.w	r3, r1, r2
    c3f8:	ea40 0003 	orr.w	r0, r0, r3
    c3fc:	fa21 f304 	lsr.w	r3, r1, r4
    c400:	ea45 0103 	orr.w	r1, r5, r3
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f1c4 040c 	rsb	r4, r4, #12
    c40a:	f1c4 0220 	rsb	r2, r4, #32
    c40e:	fa20 f002 	lsr.w	r0, r0, r2
    c412:	fa01 f304 	lsl.w	r3, r1, r4
    c416:	ea40 0003 	orr.w	r0, r0, r3
    c41a:	4629      	mov	r1, r5
    c41c:	bd30      	pop	{r4, r5, pc}
    c41e:	fa21 f004 	lsr.w	r0, r1, r4
    c422:	4629      	mov	r1, r5
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	f094 0f00 	teq	r4, #0
    c42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42e:	bf06      	itte	eq
    c430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c434:	3401      	addeq	r4, #1
    c436:	3d01      	subne	r5, #1
    c438:	e74e      	b.n	c2d8 <__adddf3+0x8c>
    c43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43e:	bf18      	it	ne
    c440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c444:	d029      	beq.n	c49a <__adddf3+0x24e>
    c446:	ea94 0f05 	teq	r4, r5
    c44a:	bf08      	it	eq
    c44c:	ea90 0f02 	teqeq	r0, r2
    c450:	d005      	beq.n	c45e <__adddf3+0x212>
    c452:	ea54 0c00 	orrs.w	ip, r4, r0
    c456:	bf04      	itt	eq
    c458:	4619      	moveq	r1, r3
    c45a:	4610      	moveq	r0, r2
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	ea91 0f03 	teq	r1, r3
    c462:	bf1e      	ittt	ne
    c464:	2100      	movne	r1, #0
    c466:	2000      	movne	r0, #0
    c468:	bd30      	popne	{r4, r5, pc}
    c46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46e:	d105      	bne.n	c47c <__adddf3+0x230>
    c470:	0040      	lsls	r0, r0, #1
    c472:	4149      	adcs	r1, r1
    c474:	bf28      	it	cs
    c476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c47a:	bd30      	pop	{r4, r5, pc}
    c47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c480:	bf3c      	itt	cc
    c482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c486:	bd30      	popcc	{r4, r5, pc}
    c488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c494:	f04f 0000 	mov.w	r0, #0
    c498:	bd30      	pop	{r4, r5, pc}
    c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49e:	bf1a      	itte	ne
    c4a0:	4619      	movne	r1, r3
    c4a2:	4610      	movne	r0, r2
    c4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a8:	bf1c      	itt	ne
    c4aa:	460b      	movne	r3, r1
    c4ac:	4602      	movne	r2, r0
    c4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4b2:	bf06      	itte	eq
    c4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b8:	ea91 0f03 	teqeq	r1, r3
    c4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_ui2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f04f 0500 	mov.w	r5, #0
    c4dc:	f04f 0100 	mov.w	r1, #0
    c4e0:	e750      	b.n	c384 <__adddf3+0x138>
    c4e2:	bf00      	nop

0000c4e4 <__aeabi_i2d>:
    c4e4:	f090 0f00 	teq	r0, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2100      	moveq	r1, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	b530      	push	{r4, r5, lr}
    c4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4fc:	bf48      	it	mi
    c4fe:	4240      	negmi	r0, r0
    c500:	f04f 0100 	mov.w	r1, #0
    c504:	e73e      	b.n	c384 <__adddf3+0x138>
    c506:	bf00      	nop

0000c508 <__aeabi_f2d>:
    c508:	0042      	lsls	r2, r0, #1
    c50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50e:	ea4f 0131 	mov.w	r1, r1, rrx
    c512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c516:	bf1f      	itttt	ne
    c518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c524:	4770      	bxne	lr
    c526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c52a:	bf08      	it	eq
    c52c:	4770      	bxeq	lr
    c52e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c532:	bf04      	itt	eq
    c534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c538:	4770      	bxeq	lr
    c53a:	b530      	push	{r4, r5, lr}
    c53c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c548:	e71c      	b.n	c384 <__adddf3+0x138>
    c54a:	bf00      	nop

0000c54c <__aeabi_ul2d>:
    c54c:	ea50 0201 	orrs.w	r2, r0, r1
    c550:	bf08      	it	eq
    c552:	4770      	bxeq	lr
    c554:	b530      	push	{r4, r5, lr}
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	e00a      	b.n	c572 <__aeabi_l2d+0x16>

0000c55c <__aeabi_l2d>:
    c55c:	ea50 0201 	orrs.w	r2, r0, r1
    c560:	bf08      	it	eq
    c562:	4770      	bxeq	lr
    c564:	b530      	push	{r4, r5, lr}
    c566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c56a:	d502      	bpl.n	c572 <__aeabi_l2d+0x16>
    c56c:	4240      	negs	r0, r0
    c56e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57e:	f43f aed8 	beq.w	c332 <__adddf3+0xe6>
    c582:	f04f 0203 	mov.w	r2, #3
    c586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58a:	bf18      	it	ne
    c58c:	3203      	addne	r2, #3
    c58e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c592:	bf18      	it	ne
    c594:	3203      	addne	r2, #3
    c596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c59a:	f1c2 0320 	rsb	r3, r2, #32
    c59e:	fa00 fc03 	lsl.w	ip, r0, r3
    c5a2:	fa20 f002 	lsr.w	r0, r0, r2
    c5a6:	fa01 fe03 	lsl.w	lr, r1, r3
    c5aa:	ea40 000e 	orr.w	r0, r0, lr
    c5ae:	fa21 f102 	lsr.w	r1, r1, r2
    c5b2:	4414      	add	r4, r2
    c5b4:	e6bd      	b.n	c332 <__adddf3+0xe6>
    c5b6:	bf00      	nop

0000c5b8 <__aeabi_dmul>:
    c5b8:	b570      	push	{r4, r5, r6, lr}
    c5ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c5be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c5c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c5c6:	bf1d      	ittte	ne
    c5c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c5cc:	ea94 0f0c 	teqne	r4, ip
    c5d0:	ea95 0f0c 	teqne	r5, ip
    c5d4:	f000 f8de 	bleq	c794 <__aeabi_dmul+0x1dc>
    c5d8:	442c      	add	r4, r5
    c5da:	ea81 0603 	eor.w	r6, r1, r3
    c5de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c5e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c5e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c5ea:	bf18      	it	ne
    c5ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c5f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c5f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c5f8:	d038      	beq.n	c66c <__aeabi_dmul+0xb4>
    c5fa:	fba0 ce02 	umull	ip, lr, r0, r2
    c5fe:	f04f 0500 	mov.w	r5, #0
    c602:	fbe1 e502 	umlal	lr, r5, r1, r2
    c606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c60a:	fbe0 e503 	umlal	lr, r5, r0, r3
    c60e:	f04f 0600 	mov.w	r6, #0
    c612:	fbe1 5603 	umlal	r5, r6, r1, r3
    c616:	f09c 0f00 	teq	ip, #0
    c61a:	bf18      	it	ne
    c61c:	f04e 0e01 	orrne.w	lr, lr, #1
    c620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c62c:	d204      	bcs.n	c638 <__aeabi_dmul+0x80>
    c62e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c632:	416d      	adcs	r5, r5
    c634:	eb46 0606 	adc.w	r6, r6, r6
    c638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c63c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c64c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c650:	bf88      	it	hi
    c652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c656:	d81e      	bhi.n	c696 <__aeabi_dmul+0xde>
    c658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c65c:	bf08      	it	eq
    c65e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c662:	f150 0000 	adcs.w	r0, r0, #0
    c666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c66a:	bd70      	pop	{r4, r5, r6, pc}
    c66c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c670:	ea46 0101 	orr.w	r1, r6, r1
    c674:	ea40 0002 	orr.w	r0, r0, r2
    c678:	ea81 0103 	eor.w	r1, r1, r3
    c67c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c680:	bfc2      	ittt	gt
    c682:	ebd4 050c 	rsbsgt	r5, r4, ip
    c686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c68a:	bd70      	popgt	{r4, r5, r6, pc}
    c68c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c690:	f04f 0e00 	mov.w	lr, #0
    c694:	3c01      	subs	r4, #1
    c696:	f300 80ab 	bgt.w	c7f0 <__aeabi_dmul+0x238>
    c69a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c69e:	bfde      	ittt	le
    c6a0:	2000      	movle	r0, #0
    c6a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c6a6:	bd70      	pople	{r4, r5, r6, pc}
    c6a8:	f1c4 0400 	rsb	r4, r4, #0
    c6ac:	3c20      	subs	r4, #32
    c6ae:	da35      	bge.n	c71c <__aeabi_dmul+0x164>
    c6b0:	340c      	adds	r4, #12
    c6b2:	dc1b      	bgt.n	c6ec <__aeabi_dmul+0x134>
    c6b4:	f104 0414 	add.w	r4, r4, #20
    c6b8:	f1c4 0520 	rsb	r5, r4, #32
    c6bc:	fa00 f305 	lsl.w	r3, r0, r5
    c6c0:	fa20 f004 	lsr.w	r0, r0, r4
    c6c4:	fa01 f205 	lsl.w	r2, r1, r5
    c6c8:	ea40 0002 	orr.w	r0, r0, r2
    c6cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c6d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c6d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c6d8:	fa21 f604 	lsr.w	r6, r1, r4
    c6dc:	eb42 0106 	adc.w	r1, r2, r6
    c6e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c6e4:	bf08      	it	eq
    c6e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c6ea:	bd70      	pop	{r4, r5, r6, pc}
    c6ec:	f1c4 040c 	rsb	r4, r4, #12
    c6f0:	f1c4 0520 	rsb	r5, r4, #32
    c6f4:	fa00 f304 	lsl.w	r3, r0, r4
    c6f8:	fa20 f005 	lsr.w	r0, r0, r5
    c6fc:	fa01 f204 	lsl.w	r2, r1, r4
    c700:	ea40 0002 	orr.w	r0, r0, r2
    c704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c70c:	f141 0100 	adc.w	r1, r1, #0
    c710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c714:	bf08      	it	eq
    c716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c71a:	bd70      	pop	{r4, r5, r6, pc}
    c71c:	f1c4 0520 	rsb	r5, r4, #32
    c720:	fa00 f205 	lsl.w	r2, r0, r5
    c724:	ea4e 0e02 	orr.w	lr, lr, r2
    c728:	fa20 f304 	lsr.w	r3, r0, r4
    c72c:	fa01 f205 	lsl.w	r2, r1, r5
    c730:	ea43 0302 	orr.w	r3, r3, r2
    c734:	fa21 f004 	lsr.w	r0, r1, r4
    c738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c73c:	fa21 f204 	lsr.w	r2, r1, r4
    c740:	ea20 0002 	bic.w	r0, r0, r2
    c744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c74c:	bf08      	it	eq
    c74e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c752:	bd70      	pop	{r4, r5, r6, pc}
    c754:	f094 0f00 	teq	r4, #0
    c758:	d10f      	bne.n	c77a <__aeabi_dmul+0x1c2>
    c75a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c75e:	0040      	lsls	r0, r0, #1
    c760:	eb41 0101 	adc.w	r1, r1, r1
    c764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c768:	bf08      	it	eq
    c76a:	3c01      	subeq	r4, #1
    c76c:	d0f7      	beq.n	c75e <__aeabi_dmul+0x1a6>
    c76e:	ea41 0106 	orr.w	r1, r1, r6
    c772:	f095 0f00 	teq	r5, #0
    c776:	bf18      	it	ne
    c778:	4770      	bxne	lr
    c77a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c77e:	0052      	lsls	r2, r2, #1
    c780:	eb43 0303 	adc.w	r3, r3, r3
    c784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c788:	bf08      	it	eq
    c78a:	3d01      	subeq	r5, #1
    c78c:	d0f7      	beq.n	c77e <__aeabi_dmul+0x1c6>
    c78e:	ea43 0306 	orr.w	r3, r3, r6
    c792:	4770      	bx	lr
    c794:	ea94 0f0c 	teq	r4, ip
    c798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c79c:	bf18      	it	ne
    c79e:	ea95 0f0c 	teqne	r5, ip
    c7a2:	d00c      	beq.n	c7be <__aeabi_dmul+0x206>
    c7a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c7a8:	bf18      	it	ne
    c7aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c7ae:	d1d1      	bne.n	c754 <__aeabi_dmul+0x19c>
    c7b0:	ea81 0103 	eor.w	r1, r1, r3
    c7b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c7b8:	f04f 0000 	mov.w	r0, #0
    c7bc:	bd70      	pop	{r4, r5, r6, pc}
    c7be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c7c2:	bf06      	itte	eq
    c7c4:	4610      	moveq	r0, r2
    c7c6:	4619      	moveq	r1, r3
    c7c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c7cc:	d019      	beq.n	c802 <__aeabi_dmul+0x24a>
    c7ce:	ea94 0f0c 	teq	r4, ip
    c7d2:	d102      	bne.n	c7da <__aeabi_dmul+0x222>
    c7d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c7d8:	d113      	bne.n	c802 <__aeabi_dmul+0x24a>
    c7da:	ea95 0f0c 	teq	r5, ip
    c7de:	d105      	bne.n	c7ec <__aeabi_dmul+0x234>
    c7e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c7e4:	bf1c      	itt	ne
    c7e6:	4610      	movne	r0, r2
    c7e8:	4619      	movne	r1, r3
    c7ea:	d10a      	bne.n	c802 <__aeabi_dmul+0x24a>
    c7ec:	ea81 0103 	eor.w	r1, r1, r3
    c7f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c7f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c7f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c7fc:	f04f 0000 	mov.w	r0, #0
    c800:	bd70      	pop	{r4, r5, r6, pc}
    c802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c80a:	bd70      	pop	{r4, r5, r6, pc}

0000c80c <__aeabi_ddiv>:
    c80c:	b570      	push	{r4, r5, r6, lr}
    c80e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c81a:	bf1d      	ittte	ne
    c81c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c820:	ea94 0f0c 	teqne	r4, ip
    c824:	ea95 0f0c 	teqne	r5, ip
    c828:	f000 f8a7 	bleq	c97a <__aeabi_ddiv+0x16e>
    c82c:	eba4 0405 	sub.w	r4, r4, r5
    c830:	ea81 0e03 	eor.w	lr, r1, r3
    c834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c838:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c83c:	f000 8088 	beq.w	c950 <__aeabi_ddiv+0x144>
    c840:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c84c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c850:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c85c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c864:	429d      	cmp	r5, r3
    c866:	bf08      	it	eq
    c868:	4296      	cmpeq	r6, r2
    c86a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c86e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c872:	d202      	bcs.n	c87a <__aeabi_ddiv+0x6e>
    c874:	085b      	lsrs	r3, r3, #1
    c876:	ea4f 0232 	mov.w	r2, r2, rrx
    c87a:	1ab6      	subs	r6, r6, r2
    c87c:	eb65 0503 	sbc.w	r5, r5, r3
    c880:	085b      	lsrs	r3, r3, #1
    c882:	ea4f 0232 	mov.w	r2, r2, rrx
    c886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c88a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c88e:	ebb6 0e02 	subs.w	lr, r6, r2
    c892:	eb75 0e03 	sbcs.w	lr, r5, r3
    c896:	bf22      	ittt	cs
    c898:	1ab6      	subcs	r6, r6, r2
    c89a:	4675      	movcs	r5, lr
    c89c:	ea40 000c 	orrcs.w	r0, r0, ip
    c8a0:	085b      	lsrs	r3, r3, #1
    c8a2:	ea4f 0232 	mov.w	r2, r2, rrx
    c8a6:	ebb6 0e02 	subs.w	lr, r6, r2
    c8aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    c8ae:	bf22      	ittt	cs
    c8b0:	1ab6      	subcs	r6, r6, r2
    c8b2:	4675      	movcs	r5, lr
    c8b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c8b8:	085b      	lsrs	r3, r3, #1
    c8ba:	ea4f 0232 	mov.w	r2, r2, rrx
    c8be:	ebb6 0e02 	subs.w	lr, r6, r2
    c8c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    c8c6:	bf22      	ittt	cs
    c8c8:	1ab6      	subcs	r6, r6, r2
    c8ca:	4675      	movcs	r5, lr
    c8cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c8d0:	085b      	lsrs	r3, r3, #1
    c8d2:	ea4f 0232 	mov.w	r2, r2, rrx
    c8d6:	ebb6 0e02 	subs.w	lr, r6, r2
    c8da:	eb75 0e03 	sbcs.w	lr, r5, r3
    c8de:	bf22      	ittt	cs
    c8e0:	1ab6      	subcs	r6, r6, r2
    c8e2:	4675      	movcs	r5, lr
    c8e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c8e8:	ea55 0e06 	orrs.w	lr, r5, r6
    c8ec:	d018      	beq.n	c920 <__aeabi_ddiv+0x114>
    c8ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c8f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c8f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c8fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c8fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c90a:	d1c0      	bne.n	c88e <__aeabi_ddiv+0x82>
    c90c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c910:	d10b      	bne.n	c92a <__aeabi_ddiv+0x11e>
    c912:	ea41 0100 	orr.w	r1, r1, r0
    c916:	f04f 0000 	mov.w	r0, #0
    c91a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c91e:	e7b6      	b.n	c88e <__aeabi_ddiv+0x82>
    c920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c924:	bf04      	itt	eq
    c926:	4301      	orreq	r1, r0
    c928:	2000      	moveq	r0, #0
    c92a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c92e:	bf88      	it	hi
    c930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c934:	f63f aeaf 	bhi.w	c696 <__aeabi_dmul+0xde>
    c938:	ebb5 0c03 	subs.w	ip, r5, r3
    c93c:	bf04      	itt	eq
    c93e:	ebb6 0c02 	subseq.w	ip, r6, r2
    c942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c946:	f150 0000 	adcs.w	r0, r0, #0
    c94a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c94e:	bd70      	pop	{r4, r5, r6, pc}
    c950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c95c:	bfc2      	ittt	gt
    c95e:	ebd4 050c 	rsbsgt	r5, r4, ip
    c962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c966:	bd70      	popgt	{r4, r5, r6, pc}
    c968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c96c:	f04f 0e00 	mov.w	lr, #0
    c970:	3c01      	subs	r4, #1
    c972:	e690      	b.n	c696 <__aeabi_dmul+0xde>
    c974:	ea45 0e06 	orr.w	lr, r5, r6
    c978:	e68d      	b.n	c696 <__aeabi_dmul+0xde>
    c97a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c97e:	ea94 0f0c 	teq	r4, ip
    c982:	bf08      	it	eq
    c984:	ea95 0f0c 	teqeq	r5, ip
    c988:	f43f af3b 	beq.w	c802 <__aeabi_dmul+0x24a>
    c98c:	ea94 0f0c 	teq	r4, ip
    c990:	d10a      	bne.n	c9a8 <__aeabi_ddiv+0x19c>
    c992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c996:	f47f af34 	bne.w	c802 <__aeabi_dmul+0x24a>
    c99a:	ea95 0f0c 	teq	r5, ip
    c99e:	f47f af25 	bne.w	c7ec <__aeabi_dmul+0x234>
    c9a2:	4610      	mov	r0, r2
    c9a4:	4619      	mov	r1, r3
    c9a6:	e72c      	b.n	c802 <__aeabi_dmul+0x24a>
    c9a8:	ea95 0f0c 	teq	r5, ip
    c9ac:	d106      	bne.n	c9bc <__aeabi_ddiv+0x1b0>
    c9ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c9b2:	f43f aefd 	beq.w	c7b0 <__aeabi_dmul+0x1f8>
    c9b6:	4610      	mov	r0, r2
    c9b8:	4619      	mov	r1, r3
    c9ba:	e722      	b.n	c802 <__aeabi_dmul+0x24a>
    c9bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c9c0:	bf18      	it	ne
    c9c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c9c6:	f47f aec5 	bne.w	c754 <__aeabi_dmul+0x19c>
    c9ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c9ce:	f47f af0d 	bne.w	c7ec <__aeabi_dmul+0x234>
    c9d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c9d6:	f47f aeeb 	bne.w	c7b0 <__aeabi_dmul+0x1f8>
    c9da:	e712      	b.n	c802 <__aeabi_dmul+0x24a>

0000c9dc <__gedf2>:
    c9dc:	f04f 3cff 	mov.w	ip, #4294967295
    c9e0:	e006      	b.n	c9f0 <__cmpdf2+0x4>
    c9e2:	bf00      	nop

0000c9e4 <__ledf2>:
    c9e4:	f04f 0c01 	mov.w	ip, #1
    c9e8:	e002      	b.n	c9f0 <__cmpdf2+0x4>
    c9ea:	bf00      	nop

0000c9ec <__cmpdf2>:
    c9ec:	f04f 0c01 	mov.w	ip, #1
    c9f0:	f84d cd04 	str.w	ip, [sp, #-4]!
    c9f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c9f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c9fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    ca00:	bf18      	it	ne
    ca02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    ca06:	d01b      	beq.n	ca40 <__cmpdf2+0x54>
    ca08:	b001      	add	sp, #4
    ca0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    ca0e:	bf0c      	ite	eq
    ca10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    ca14:	ea91 0f03 	teqne	r1, r3
    ca18:	bf02      	ittt	eq
    ca1a:	ea90 0f02 	teqeq	r0, r2
    ca1e:	2000      	moveq	r0, #0
    ca20:	4770      	bxeq	lr
    ca22:	f110 0f00 	cmn.w	r0, #0
    ca26:	ea91 0f03 	teq	r1, r3
    ca2a:	bf58      	it	pl
    ca2c:	4299      	cmppl	r1, r3
    ca2e:	bf08      	it	eq
    ca30:	4290      	cmpeq	r0, r2
    ca32:	bf2c      	ite	cs
    ca34:	17d8      	asrcs	r0, r3, #31
    ca36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    ca3a:	f040 0001 	orr.w	r0, r0, #1
    ca3e:	4770      	bx	lr
    ca40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ca44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ca48:	d102      	bne.n	ca50 <__cmpdf2+0x64>
    ca4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    ca4e:	d107      	bne.n	ca60 <__cmpdf2+0x74>
    ca50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    ca54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ca58:	d1d6      	bne.n	ca08 <__cmpdf2+0x1c>
    ca5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    ca5e:	d0d3      	beq.n	ca08 <__cmpdf2+0x1c>
    ca60:	f85d 0b04 	ldr.w	r0, [sp], #4
    ca64:	4770      	bx	lr
    ca66:	bf00      	nop

0000ca68 <__aeabi_cdrcmple>:
    ca68:	4684      	mov	ip, r0
    ca6a:	4610      	mov	r0, r2
    ca6c:	4662      	mov	r2, ip
    ca6e:	468c      	mov	ip, r1
    ca70:	4619      	mov	r1, r3
    ca72:	4663      	mov	r3, ip
    ca74:	e000      	b.n	ca78 <__aeabi_cdcmpeq>
    ca76:	bf00      	nop

0000ca78 <__aeabi_cdcmpeq>:
    ca78:	b501      	push	{r0, lr}
    ca7a:	f7ff ffb7 	bl	c9ec <__cmpdf2>
    ca7e:	2800      	cmp	r0, #0
    ca80:	bf48      	it	mi
    ca82:	f110 0f00 	cmnmi.w	r0, #0
    ca86:	bd01      	pop	{r0, pc}

0000ca88 <__aeabi_dcmpeq>:
    ca88:	f84d ed08 	str.w	lr, [sp, #-8]!
    ca8c:	f7ff fff4 	bl	ca78 <__aeabi_cdcmpeq>
    ca90:	bf0c      	ite	eq
    ca92:	2001      	moveq	r0, #1
    ca94:	2000      	movne	r0, #0
    ca96:	f85d fb08 	ldr.w	pc, [sp], #8
    ca9a:	bf00      	nop

0000ca9c <__aeabi_dcmplt>:
    ca9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    caa0:	f7ff ffea 	bl	ca78 <__aeabi_cdcmpeq>
    caa4:	bf34      	ite	cc
    caa6:	2001      	movcc	r0, #1
    caa8:	2000      	movcs	r0, #0
    caaa:	f85d fb08 	ldr.w	pc, [sp], #8
    caae:	bf00      	nop

0000cab0 <__aeabi_dcmple>:
    cab0:	f84d ed08 	str.w	lr, [sp, #-8]!
    cab4:	f7ff ffe0 	bl	ca78 <__aeabi_cdcmpeq>
    cab8:	bf94      	ite	ls
    caba:	2001      	movls	r0, #1
    cabc:	2000      	movhi	r0, #0
    cabe:	f85d fb08 	ldr.w	pc, [sp], #8
    cac2:	bf00      	nop

0000cac4 <__aeabi_dcmpge>:
    cac4:	f84d ed08 	str.w	lr, [sp, #-8]!
    cac8:	f7ff ffce 	bl	ca68 <__aeabi_cdrcmple>
    cacc:	bf94      	ite	ls
    cace:	2001      	movls	r0, #1
    cad0:	2000      	movhi	r0, #0
    cad2:	f85d fb08 	ldr.w	pc, [sp], #8
    cad6:	bf00      	nop

0000cad8 <__aeabi_dcmpgt>:
    cad8:	f84d ed08 	str.w	lr, [sp, #-8]!
    cadc:	f7ff ffc4 	bl	ca68 <__aeabi_cdrcmple>
    cae0:	bf34      	ite	cc
    cae2:	2001      	movcc	r0, #1
    cae4:	2000      	movcs	r0, #0
    cae6:	f85d fb08 	ldr.w	pc, [sp], #8
    caea:	bf00      	nop

0000caec <__aeabi_d2f>:
    caec:	ea4f 0241 	mov.w	r2, r1, lsl #1
    caf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    caf4:	bf24      	itt	cs
    caf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    cafa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    cafe:	d90d      	bls.n	cb1c <__aeabi_d2f+0x30>
    cb00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    cb04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    cb08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    cb0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cb10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    cb14:	bf08      	it	eq
    cb16:	f020 0001 	biceq.w	r0, r0, #1
    cb1a:	4770      	bx	lr
    cb1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    cb20:	d121      	bne.n	cb66 <__aeabi_d2f+0x7a>
    cb22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    cb26:	bfbc      	itt	lt
    cb28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    cb2c:	4770      	bxlt	lr
    cb2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cb32:	ea4f 5252 	mov.w	r2, r2, lsr #21
    cb36:	f1c2 0218 	rsb	r2, r2, #24
    cb3a:	f1c2 0c20 	rsb	ip, r2, #32
    cb3e:	fa10 f30c 	lsls.w	r3, r0, ip
    cb42:	fa20 f002 	lsr.w	r0, r0, r2
    cb46:	bf18      	it	ne
    cb48:	f040 0001 	orrne.w	r0, r0, #1
    cb4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cb50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    cb54:	fa03 fc0c 	lsl.w	ip, r3, ip
    cb58:	ea40 000c 	orr.w	r0, r0, ip
    cb5c:	fa23 f302 	lsr.w	r3, r3, r2
    cb60:	ea4f 0343 	mov.w	r3, r3, lsl #1
    cb64:	e7cc      	b.n	cb00 <__aeabi_d2f+0x14>
    cb66:	ea7f 5362 	mvns.w	r3, r2, asr #21
    cb6a:	d107      	bne.n	cb7c <__aeabi_d2f+0x90>
    cb6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    cb70:	bf1e      	ittt	ne
    cb72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    cb76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    cb7a:	4770      	bxne	lr
    cb7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    cb80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    cb84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cb88:	4770      	bx	lr
    cb8a:	bf00      	nop

0000cb8c <__aeabi_ldivmod>:
    cb8c:	b97b      	cbnz	r3, cbae <__aeabi_ldivmod+0x22>
    cb8e:	b972      	cbnz	r2, cbae <__aeabi_ldivmod+0x22>
    cb90:	2900      	cmp	r1, #0
    cb92:	bfbe      	ittt	lt
    cb94:	2000      	movlt	r0, #0
    cb96:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    cb9a:	e006      	blt.n	cbaa <__aeabi_ldivmod+0x1e>
    cb9c:	bf08      	it	eq
    cb9e:	2800      	cmpeq	r0, #0
    cba0:	bf1c      	itt	ne
    cba2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    cba6:	f04f 30ff 	movne.w	r0, #4294967295
    cbaa:	f000 b9b7 	b.w	cf1c <__aeabi_idiv0>
    cbae:	f1ad 0c08 	sub.w	ip, sp, #8
    cbb2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    cbb6:	2900      	cmp	r1, #0
    cbb8:	db09      	blt.n	cbce <__aeabi_ldivmod+0x42>
    cbba:	2b00      	cmp	r3, #0
    cbbc:	db1a      	blt.n	cbf4 <__aeabi_ldivmod+0x68>
    cbbe:	f000 f84d 	bl	cc5c <__udivmoddi4>
    cbc2:	f8dd e004 	ldr.w	lr, [sp, #4]
    cbc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cbca:	b004      	add	sp, #16
    cbcc:	4770      	bx	lr
    cbce:	4240      	negs	r0, r0
    cbd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cbd4:	2b00      	cmp	r3, #0
    cbd6:	db1b      	blt.n	cc10 <__aeabi_ldivmod+0x84>
    cbd8:	f000 f840 	bl	cc5c <__udivmoddi4>
    cbdc:	f8dd e004 	ldr.w	lr, [sp, #4]
    cbe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cbe4:	b004      	add	sp, #16
    cbe6:	4240      	negs	r0, r0
    cbe8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cbec:	4252      	negs	r2, r2
    cbee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cbf2:	4770      	bx	lr
    cbf4:	4252      	negs	r2, r2
    cbf6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cbfa:	f000 f82f 	bl	cc5c <__udivmoddi4>
    cbfe:	f8dd e004 	ldr.w	lr, [sp, #4]
    cc02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cc06:	b004      	add	sp, #16
    cc08:	4240      	negs	r0, r0
    cc0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cc0e:	4770      	bx	lr
    cc10:	4252      	negs	r2, r2
    cc12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cc16:	f000 f821 	bl	cc5c <__udivmoddi4>
    cc1a:	f8dd e004 	ldr.w	lr, [sp, #4]
    cc1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cc22:	b004      	add	sp, #16
    cc24:	4252      	negs	r2, r2
    cc26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cc2a:	4770      	bx	lr

0000cc2c <__aeabi_uldivmod>:
    cc2c:	b953      	cbnz	r3, cc44 <__aeabi_uldivmod+0x18>
    cc2e:	b94a      	cbnz	r2, cc44 <__aeabi_uldivmod+0x18>
    cc30:	2900      	cmp	r1, #0
    cc32:	bf08      	it	eq
    cc34:	2800      	cmpeq	r0, #0
    cc36:	bf1c      	itt	ne
    cc38:	f04f 31ff 	movne.w	r1, #4294967295
    cc3c:	f04f 30ff 	movne.w	r0, #4294967295
    cc40:	f000 b96c 	b.w	cf1c <__aeabi_idiv0>
    cc44:	f1ad 0c08 	sub.w	ip, sp, #8
    cc48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    cc4c:	f000 f806 	bl	cc5c <__udivmoddi4>
    cc50:	f8dd e004 	ldr.w	lr, [sp, #4]
    cc54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cc58:	b004      	add	sp, #16
    cc5a:	4770      	bx	lr

0000cc5c <__udivmoddi4>:
    cc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cc60:	9d08      	ldr	r5, [sp, #32]
    cc62:	4604      	mov	r4, r0
    cc64:	4688      	mov	r8, r1
    cc66:	2b00      	cmp	r3, #0
    cc68:	d17d      	bne.n	cd66 <__udivmoddi4+0x10a>
    cc6a:	428a      	cmp	r2, r1
    cc6c:	4617      	mov	r7, r2
    cc6e:	d93f      	bls.n	ccf0 <__udivmoddi4+0x94>
    cc70:	fab2 f282 	clz	r2, r2
    cc74:	b142      	cbz	r2, cc88 <__udivmoddi4+0x2c>
    cc76:	f1c2 0020 	rsb	r0, r2, #32
    cc7a:	4091      	lsls	r1, r2
    cc7c:	4097      	lsls	r7, r2
    cc7e:	fa24 f000 	lsr.w	r0, r4, r0
    cc82:	4094      	lsls	r4, r2
    cc84:	ea40 0801 	orr.w	r8, r0, r1
    cc88:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    cc8c:	0c23      	lsrs	r3, r4, #16
    cc8e:	fa1f fe87 	uxth.w	lr, r7
    cc92:	fbb8 f6fc 	udiv	r6, r8, ip
    cc96:	fb0c 8116 	mls	r1, ip, r6, r8
    cc9a:	fb06 f00e 	mul.w	r0, r6, lr
    cc9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    cca2:	4298      	cmp	r0, r3
    cca4:	d905      	bls.n	ccb2 <__udivmoddi4+0x56>
    cca6:	18fb      	adds	r3, r7, r3
    cca8:	d202      	bcs.n	ccb0 <__udivmoddi4+0x54>
    ccaa:	4298      	cmp	r0, r3
    ccac:	f200 8124 	bhi.w	cef8 <__udivmoddi4+0x29c>
    ccb0:	3e01      	subs	r6, #1
    ccb2:	1a19      	subs	r1, r3, r0
    ccb4:	b2a3      	uxth	r3, r4
    ccb6:	fbb1 f0fc 	udiv	r0, r1, ip
    ccba:	fb0c 1110 	mls	r1, ip, r0, r1
    ccbe:	fb00 fe0e 	mul.w	lr, r0, lr
    ccc2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    ccc6:	45a6      	cmp	lr, r4
    ccc8:	d905      	bls.n	ccd6 <__udivmoddi4+0x7a>
    ccca:	193c      	adds	r4, r7, r4
    cccc:	d202      	bcs.n	ccd4 <__udivmoddi4+0x78>
    ccce:	45a6      	cmp	lr, r4
    ccd0:	f200 810f 	bhi.w	cef2 <__udivmoddi4+0x296>
    ccd4:	3801      	subs	r0, #1
    ccd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    ccda:	eba4 040e 	sub.w	r4, r4, lr
    ccde:	2600      	movs	r6, #0
    cce0:	b11d      	cbz	r5, ccea <__udivmoddi4+0x8e>
    cce2:	40d4      	lsrs	r4, r2
    cce4:	2300      	movs	r3, #0
    cce6:	e9c5 4300 	strd	r4, r3, [r5]
    ccea:	4631      	mov	r1, r6
    ccec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ccf0:	b902      	cbnz	r2, ccf4 <__udivmoddi4+0x98>
    ccf2:	deff      	udf	#255	; 0xff
    ccf4:	fab2 f282 	clz	r2, r2
    ccf8:	2a00      	cmp	r2, #0
    ccfa:	d150      	bne.n	cd9e <__udivmoddi4+0x142>
    ccfc:	1bcb      	subs	r3, r1, r7
    ccfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cd02:	fa1f f887 	uxth.w	r8, r7
    cd06:	2601      	movs	r6, #1
    cd08:	0c21      	lsrs	r1, r4, #16
    cd0a:	fbb3 fcfe 	udiv	ip, r3, lr
    cd0e:	fb0e 301c 	mls	r0, lr, ip, r3
    cd12:	460b      	mov	r3, r1
    cd14:	fb08 f90c 	mul.w	r9, r8, ip
    cd18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cd1c:	4589      	cmp	r9, r1
    cd1e:	d90a      	bls.n	cd36 <__udivmoddi4+0xda>
    cd20:	1879      	adds	r1, r7, r1
    cd22:	bf2c      	ite	cs
    cd24:	2301      	movcs	r3, #1
    cd26:	2300      	movcc	r3, #0
    cd28:	4589      	cmp	r9, r1
    cd2a:	d902      	bls.n	cd32 <__udivmoddi4+0xd6>
    cd2c:	2b00      	cmp	r3, #0
    cd2e:	f000 80d9 	beq.w	cee4 <__udivmoddi4+0x288>
    cd32:	f10c 3cff 	add.w	ip, ip, #4294967295
    cd36:	eba1 0109 	sub.w	r1, r1, r9
    cd3a:	b2a3      	uxth	r3, r4
    cd3c:	fbb1 f0fe 	udiv	r0, r1, lr
    cd40:	fb0e 1110 	mls	r1, lr, r0, r1
    cd44:	fb08 f800 	mul.w	r8, r8, r0
    cd48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    cd4c:	45a0      	cmp	r8, r4
    cd4e:	d905      	bls.n	cd5c <__udivmoddi4+0x100>
    cd50:	193c      	adds	r4, r7, r4
    cd52:	d202      	bcs.n	cd5a <__udivmoddi4+0xfe>
    cd54:	45a0      	cmp	r8, r4
    cd56:	f200 80c9 	bhi.w	ceec <__udivmoddi4+0x290>
    cd5a:	3801      	subs	r0, #1
    cd5c:	eba4 0408 	sub.w	r4, r4, r8
    cd60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    cd64:	e7bc      	b.n	cce0 <__udivmoddi4+0x84>
    cd66:	428b      	cmp	r3, r1
    cd68:	d909      	bls.n	cd7e <__udivmoddi4+0x122>
    cd6a:	2d00      	cmp	r5, #0
    cd6c:	f000 80b1 	beq.w	ced2 <__udivmoddi4+0x276>
    cd70:	2600      	movs	r6, #0
    cd72:	e9c5 0100 	strd	r0, r1, [r5]
    cd76:	4630      	mov	r0, r6
    cd78:	4631      	mov	r1, r6
    cd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd7e:	fab3 f683 	clz	r6, r3
    cd82:	2e00      	cmp	r6, #0
    cd84:	d146      	bne.n	ce14 <__udivmoddi4+0x1b8>
    cd86:	428b      	cmp	r3, r1
    cd88:	f0c0 80a6 	bcc.w	ced8 <__udivmoddi4+0x27c>
    cd8c:	4282      	cmp	r2, r0
    cd8e:	f240 80a3 	bls.w	ced8 <__udivmoddi4+0x27c>
    cd92:	4630      	mov	r0, r6
    cd94:	2d00      	cmp	r5, #0
    cd96:	d0a8      	beq.n	ccea <__udivmoddi4+0x8e>
    cd98:	e9c5 4800 	strd	r4, r8, [r5]
    cd9c:	e7a5      	b.n	ccea <__udivmoddi4+0x8e>
    cd9e:	4097      	lsls	r7, r2
    cda0:	f1c2 0320 	rsb	r3, r2, #32
    cda4:	fa01 f002 	lsl.w	r0, r1, r2
    cda8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cdac:	40d9      	lsrs	r1, r3
    cdae:	fa24 f303 	lsr.w	r3, r4, r3
    cdb2:	fa1f f887 	uxth.w	r8, r7
    cdb6:	4094      	lsls	r4, r2
    cdb8:	4303      	orrs	r3, r0
    cdba:	fbb1 f0fe 	udiv	r0, r1, lr
    cdbe:	0c1e      	lsrs	r6, r3, #16
    cdc0:	fb0e 1110 	mls	r1, lr, r0, r1
    cdc4:	fb00 fc08 	mul.w	ip, r0, r8
    cdc8:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    cdcc:	458c      	cmp	ip, r1
    cdce:	d909      	bls.n	cde4 <__udivmoddi4+0x188>
    cdd0:	1879      	adds	r1, r7, r1
    cdd2:	bf2c      	ite	cs
    cdd4:	2601      	movcs	r6, #1
    cdd6:	2600      	movcc	r6, #0
    cdd8:	458c      	cmp	ip, r1
    cdda:	d902      	bls.n	cde2 <__udivmoddi4+0x186>
    cddc:	2e00      	cmp	r6, #0
    cdde:	f000 8093 	beq.w	cf08 <__udivmoddi4+0x2ac>
    cde2:	3801      	subs	r0, #1
    cde4:	eba1 010c 	sub.w	r1, r1, ip
    cde8:	b29b      	uxth	r3, r3
    cdea:	fbb1 f6fe 	udiv	r6, r1, lr
    cdee:	fb0e 1116 	mls	r1, lr, r6, r1
    cdf2:	fb06 fc08 	mul.w	ip, r6, r8
    cdf6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    cdfa:	458c      	cmp	ip, r1
    cdfc:	d905      	bls.n	ce0a <__udivmoddi4+0x1ae>
    cdfe:	1879      	adds	r1, r7, r1
    ce00:	d202      	bcs.n	ce08 <__udivmoddi4+0x1ac>
    ce02:	458c      	cmp	ip, r1
    ce04:	f200 8087 	bhi.w	cf16 <__udivmoddi4+0x2ba>
    ce08:	3e01      	subs	r6, #1
    ce0a:	eba1 030c 	sub.w	r3, r1, ip
    ce0e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    ce12:	e779      	b.n	cd08 <__udivmoddi4+0xac>
    ce14:	f1c6 0720 	rsb	r7, r6, #32
    ce18:	fa03 f406 	lsl.w	r4, r3, r6
    ce1c:	fa02 fc06 	lsl.w	ip, r2, r6
    ce20:	fa01 fe06 	lsl.w	lr, r1, r6
    ce24:	40fa      	lsrs	r2, r7
    ce26:	fa20 f807 	lsr.w	r8, r0, r7
    ce2a:	40f9      	lsrs	r1, r7
    ce2c:	fa00 f306 	lsl.w	r3, r0, r6
    ce30:	4322      	orrs	r2, r4
    ce32:	ea48 040e 	orr.w	r4, r8, lr
    ce36:	ea4f 4812 	mov.w	r8, r2, lsr #16
    ce3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    ce3e:	fa1f f982 	uxth.w	r9, r2
    ce42:	fbb1 faf8 	udiv	sl, r1, r8
    ce46:	fb08 111a 	mls	r1, r8, sl, r1
    ce4a:	fb0a f009 	mul.w	r0, sl, r9
    ce4e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    ce52:	4570      	cmp	r0, lr
    ce54:	d90a      	bls.n	ce6c <__udivmoddi4+0x210>
    ce56:	eb12 0e0e 	adds.w	lr, r2, lr
    ce5a:	bf2c      	ite	cs
    ce5c:	2101      	movcs	r1, #1
    ce5e:	2100      	movcc	r1, #0
    ce60:	4570      	cmp	r0, lr
    ce62:	d901      	bls.n	ce68 <__udivmoddi4+0x20c>
    ce64:	2900      	cmp	r1, #0
    ce66:	d052      	beq.n	cf0e <__udivmoddi4+0x2b2>
    ce68:	f10a 3aff 	add.w	sl, sl, #4294967295
    ce6c:	ebae 0e00 	sub.w	lr, lr, r0
    ce70:	b2a4      	uxth	r4, r4
    ce72:	fbbe f0f8 	udiv	r0, lr, r8
    ce76:	fb08 ee10 	mls	lr, r8, r0, lr
    ce7a:	fb00 f909 	mul.w	r9, r0, r9
    ce7e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
    ce82:	45f1      	cmp	r9, lr
    ce84:	d905      	bls.n	ce92 <__udivmoddi4+0x236>
    ce86:	eb12 0e0e 	adds.w	lr, r2, lr
    ce8a:	d201      	bcs.n	ce90 <__udivmoddi4+0x234>
    ce8c:	45f1      	cmp	r9, lr
    ce8e:	d838      	bhi.n	cf02 <__udivmoddi4+0x2a6>
    ce90:	3801      	subs	r0, #1
    ce92:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    ce96:	ebae 0e09 	sub.w	lr, lr, r9
    ce9a:	fba0 890c 	umull	r8, r9, r0, ip
    ce9e:	45ce      	cmp	lr, r9
    cea0:	4641      	mov	r1, r8
    cea2:	464c      	mov	r4, r9
    cea4:	d302      	bcc.n	ceac <__udivmoddi4+0x250>
    cea6:	d106      	bne.n	ceb6 <__udivmoddi4+0x25a>
    cea8:	4543      	cmp	r3, r8
    ceaa:	d204      	bcs.n	ceb6 <__udivmoddi4+0x25a>
    ceac:	3801      	subs	r0, #1
    ceae:	ebb8 010c 	subs.w	r1, r8, ip
    ceb2:	eb69 0402 	sbc.w	r4, r9, r2
    ceb6:	b315      	cbz	r5, cefe <__udivmoddi4+0x2a2>
    ceb8:	1a5a      	subs	r2, r3, r1
    ceba:	eb6e 0e04 	sbc.w	lr, lr, r4
    cebe:	40f2      	lsrs	r2, r6
    cec0:	fa0e f707 	lsl.w	r7, lr, r7
    cec4:	fa2e f306 	lsr.w	r3, lr, r6
    cec8:	2600      	movs	r6, #0
    ceca:	4317      	orrs	r7, r2
    cecc:	e9c5 7300 	strd	r7, r3, [r5]
    ced0:	e70b      	b.n	ccea <__udivmoddi4+0x8e>
    ced2:	462e      	mov	r6, r5
    ced4:	4628      	mov	r0, r5
    ced6:	e708      	b.n	ccea <__udivmoddi4+0x8e>
    ced8:	1a84      	subs	r4, r0, r2
    ceda:	eb61 0103 	sbc.w	r1, r1, r3
    cede:	2001      	movs	r0, #1
    cee0:	4688      	mov	r8, r1
    cee2:	e757      	b.n	cd94 <__udivmoddi4+0x138>
    cee4:	f1ac 0c02 	sub.w	ip, ip, #2
    cee8:	4439      	add	r1, r7
    ceea:	e724      	b.n	cd36 <__udivmoddi4+0xda>
    ceec:	3802      	subs	r0, #2
    ceee:	443c      	add	r4, r7
    cef0:	e734      	b.n	cd5c <__udivmoddi4+0x100>
    cef2:	3802      	subs	r0, #2
    cef4:	443c      	add	r4, r7
    cef6:	e6ee      	b.n	ccd6 <__udivmoddi4+0x7a>
    cef8:	3e02      	subs	r6, #2
    cefa:	443b      	add	r3, r7
    cefc:	e6d9      	b.n	ccb2 <__udivmoddi4+0x56>
    cefe:	462e      	mov	r6, r5
    cf00:	e6f3      	b.n	ccea <__udivmoddi4+0x8e>
    cf02:	3802      	subs	r0, #2
    cf04:	4496      	add	lr, r2
    cf06:	e7c4      	b.n	ce92 <__udivmoddi4+0x236>
    cf08:	3802      	subs	r0, #2
    cf0a:	4439      	add	r1, r7
    cf0c:	e76a      	b.n	cde4 <__udivmoddi4+0x188>
    cf0e:	f1aa 0a02 	sub.w	sl, sl, #2
    cf12:	4496      	add	lr, r2
    cf14:	e7aa      	b.n	ce6c <__udivmoddi4+0x210>
    cf16:	3e02      	subs	r6, #2
    cf18:	4439      	add	r1, r7
    cf1a:	e776      	b.n	ce0a <__udivmoddi4+0x1ae>

0000cf1c <__aeabi_idiv0>:
    cf1c:	4770      	bx	lr
    cf1e:	bf00      	nop

0000cf20 <strcmp>:
    cf20:	f810 2b01 	ldrb.w	r2, [r0], #1
    cf24:	f811 3b01 	ldrb.w	r3, [r1], #1
    cf28:	2a01      	cmp	r2, #1
    cf2a:	bf28      	it	cs
    cf2c:	429a      	cmpcs	r2, r3
    cf2e:	d0f7      	beq.n	cf20 <strcmp>
    cf30:	1ad0      	subs	r0, r2, r3
    cf32:	4770      	bx	lr

0000cf34 <strlen>:
    cf34:	4603      	mov	r3, r0
    cf36:	f813 2b01 	ldrb.w	r2, [r3], #1
    cf3a:	2a00      	cmp	r2, #0
    cf3c:	d1fb      	bne.n	cf36 <strlen+0x2>
    cf3e:	1a18      	subs	r0, r3, r0
    cf40:	3801      	subs	r0, #1
    cf42:	4770      	bx	lr
    cf44:	0000      	movs	r0, r0
	...

0000cf48 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
    cf48:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    cf4c:	4604      	mov	r4, r0
    cf4e:	b09a      	sub	sp, #104	; 0x68
    cf50:	460f      	mov	r7, r1
    cf52:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
    cf54:	2100      	movs	r1, #0
    cf56:	2230      	movs	r2, #48	; 0x30
    cf58:	a802      	add	r0, sp, #8
    cf5a:	f013 fb7b 	bl	20654 <memset>
	int ret = 0;

	if (!ctx || !time) {
    cf5e:	2c00      	cmp	r4, #0
    cf60:	f000 8087 	beq.w	d072 <sntp_query+0x12a>
    cf64:	2e00      	cmp	r6, #0
    cf66:	f000 8084 	beq.w	d072 <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
    cf6a:	231b      	movs	r3, #27
    cf6c:	f88d 3008 	strb.w	r3, [sp, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    cf70:	f013 f94e 	bl	20210 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    cf74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    cf78:	2500      	movs	r5, #0
    cf7a:	fba0 bc03 	umull	fp, ip, r0, r3
    cf7e:	fb03 cc01 	mla	ip, r3, r1, ip
    cf82:	ea4f 30db 	mov.w	r0, fp, lsr #15
	return time / MSEC_PER_SEC;
    cf86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cf8a:	2300      	movs	r3, #0
    cf8c:	4629      	mov	r1, r5
    cf8e:	ea40 404c 	orr.w	r0, r0, ip, lsl #17
    cf92:	f7ff fe4b 	bl	cc2c <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
    cf96:	4a3c      	ldr	r2, [pc, #240]	; (d088 <sntp_query+0x140>)
    cf98:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    cf9a:	0a13      	lsrs	r3, r2, #8
    cf9c:	0211      	lsls	r1, r2, #8
    cf9e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    cfa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    cfa6:	430b      	orrs	r3, r1
    cfa8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    cfac:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
    cfb0:	68e0      	ldr	r0, [r4, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
    cfb2:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    cfb4:	930c      	str	r3, [sp, #48]	; 0x30
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    cfb6:	2230      	movs	r2, #48	; 0x30
    cfb8:	462b      	mov	r3, r5
    cfba:	e9cd 5500 	strd	r5, r5, [sp]
    cfbe:	a902      	add	r1, sp, #8
    cfc0:	f00f fe7a 	bl	1ccb8 <z_impl_zsock_sendto>
	if (ret < 0) {
    cfc4:	2800      	cmp	r0, #0
    cfc6:	db0f      	blt.n	cfe8 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
    cfc8:	4629      	mov	r1, r5
    cfca:	2230      	movs	r2, #48	; 0x30
    cfcc:	a80e      	add	r0, sp, #56	; 0x38
    cfce:	f013 fb41 	bl	20654 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
    cfd2:	68a1      	ldr	r1, [r4, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
    cfd4:	463a      	mov	r2, r7
    cfd6:	4620      	mov	r0, r4
    cfd8:	f003 fcd4 	bl	10984 <z_impl_zsock_poll>
	if (status < 0) {
    cfdc:	42a8      	cmp	r0, r5
    cfde:	da06      	bge.n	cfee <sntp_query+0xa6>
		return -errno;
    cfe0:	f00f ff95 	bl	1cf0e <__errno>
    cfe4:	6800      	ldr	r0, [r0, #0]
    cfe6:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
    cfe8:	b01a      	add	sp, #104	; 0x68
    cfea:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	if (status == 0) {
    cfee:	d037      	beq.n	d060 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
    cff0:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
    cff2:	2230      	movs	r2, #48	; 0x30
    cff4:	462b      	mov	r3, r5
    cff6:	e9cd 5500 	strd	r5, r5, [sp]
    cffa:	a90e      	add	r1, sp, #56	; 0x38
    cffc:	f00f fe8f 	bl	1cd1e <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
    d000:	2800      	cmp	r0, #0
    d002:	dbed      	blt.n	cfe0 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
    d004:	2830      	cmp	r0, #48	; 0x30
    d006:	d12e      	bne.n	d066 <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
    d008:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d00a:	6922      	ldr	r2, [r4, #16]
    d00c:	ba1b      	rev	r3, r3
    d00e:	429a      	cmp	r2, r3
    d010:	d002      	beq.n	d018 <sntp_query+0xd0>
		return -EINVAL;
    d012:	f06f 0015 	mvn.w	r0, #21
    d016:	e7e7      	b.n	cfe8 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
    d018:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    d01c:	f003 0307 	and.w	r3, r3, #7
    d020:	2b04      	cmp	r3, #4
    d022:	d1f6      	bne.n	d012 <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
    d024:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    d028:	b303      	cbz	r3, d06c <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
    d02a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d02c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d02e:	ba1b      	rev	r3, r3
    d030:	ba12      	rev	r2, r2
    d032:	ea53 0102 	orrs.w	r1, r3, r2
    d036:	d0ec      	beq.n	d012 <sntp_query+0xca>
	if (ts & 0x80000000) {
    d038:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
    d03a:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
    d03c:	da0c      	bge.n	d058 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
    d03e:	4a13      	ldr	r2, [pc, #76]	; (d08c <sntp_query+0x144>)
    d040:	4293      	cmp	r3, r2
    d042:	d9e6      	bls.n	d012 <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
    d044:	a10c      	add	r1, pc, #48	; (adr r1, d078 <sntp_query+0x130>)
    d046:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
    d04a:	18c0      	adds	r0, r0, r3
    d04c:	f141 0100 	adc.w	r1, r1, #0
    d050:	e9c6 0100 	strd	r0, r1, [r6]
	return 0;
    d054:	2000      	movs	r0, #0
    d056:	e7c7      	b.n	cfe8 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
    d058:	a109      	add	r1, pc, #36	; (adr r1, d080 <sntp_query+0x138>)
    d05a:	e9d1 0100 	ldrd	r0, r1, [r1]
    d05e:	e7f4      	b.n	d04a <sntp_query+0x102>
		return -ETIMEDOUT;
    d060:	f06f 0073 	mvn.w	r0, #115	; 0x73
    d064:	e7c0      	b.n	cfe8 <sntp_query+0xa0>
		return -EMSGSIZE;
    d066:	f06f 0079 	mvn.w	r0, #121	; 0x79
    d06a:	e7bd      	b.n	cfe8 <sntp_query+0xa0>
		return -EBUSY;
    d06c:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
    d070:	e7ba      	b.n	cfe8 <sntp_query+0xa0>
		return -EFAULT;
    d072:	f06f 000d 	mvn.w	r0, #13
    d076:	e7b7      	b.n	cfe8 <sntp_query+0xa0>
    d078:	7c558180 	.word	0x7c558180
    d07c:	ffffffff 	.word	0xffffffff
    d080:	7c558180 	.word	0x7c558180
    d084:	00000000 	.word	0x00000000
    d088:	83aa7e80 	.word	0x83aa7e80
    d08c:	83aa7e7f 	.word	0x83aa7e7f

0000d090 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
    d090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d094:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
    d098:	460e      	mov	r6, r1
{
    d09a:	b08c      	sub	sp, #48	; 0x30
	if (response == NULL) {
    d09c:	b971      	cbnz	r1, d0bc <at_handler+0x2c>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    d09e:	49aa      	ldr	r1, [pc, #680]	; (d348 <at_handler+0x2b8>)
    d0a0:	4baa      	ldr	r3, [pc, #680]	; (d34c <at_handler+0x2bc>)
		LOG_ERR("Response buffer is NULL-pointer");
    d0a2:	48ab      	ldr	r0, [pc, #684]	; (d350 <at_handler+0x2c0>)
    d0a4:	1ac9      	subs	r1, r1, r3
    d0a6:	08c9      	lsrs	r1, r1, #3
    d0a8:	0189      	lsls	r1, r1, #6
    d0aa:	f041 0101 	orr.w	r1, r1, #1
    d0ae:	f00f faab 	bl	1c608 <log_0>
	}

	if (evt_handler && notify) {
		evt_handler(&evt);
	}
}
    d0b2:	b00c      	add	sp, #48	; 0x30
    d0b4:	ecbd 8b02 	vpop	{d8}
    d0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d0bc:	2700      	movs	r7, #0
    d0be:	4ca5      	ldr	r4, [pc, #660]	; (d354 <at_handler+0x2c4>)
		if (strncmp(at_notifs[i], notif,
    d0c0:	f854 5b04 	ldr.w	r5, [r4], #4
    d0c4:	4628      	mov	r0, r5
    d0c6:	f7ff ff35 	bl	cf34 <strlen>
    d0ca:	4631      	mov	r1, r6
    d0cc:	4602      	mov	r2, r0
    d0ce:	4628      	mov	r0, r5
    d0d0:	f013 fb08 	bl	206e4 <strncmp>
    d0d4:	4605      	mov	r5, r0
    d0d6:	bb60      	cbnz	r0, d132 <at_handler+0xa2>
	switch (notif_type) {
    d0d8:	2f01      	cmp	r7, #1
			*type = i;
    d0da:	b2fb      	uxtb	r3, r7
	switch (notif_type) {
    d0dc:	f000 8113 	beq.w	d306 <at_handler+0x276>
    d0e0:	2b02      	cmp	r3, #2
    d0e2:	f000 8197 	beq.w	d414 <at_handler+0x384>
	size_t len = sizeof(str_buf) - 1;
    d0e6:	f04f 0809 	mov.w	r8, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d0ea:	210a      	movs	r1, #10
    d0ec:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
    d0ee:	f8cd 8008 	str.w	r8, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d0f2:	f011 f951 	bl	1e398 <at_params_list_init>
	if (err) {
    d0f6:	4604      	mov	r4, r0
    d0f8:	b1f8      	cbz	r0, d13a <at_handler+0xaa>
    d0fa:	4a93      	ldr	r2, [pc, #588]	; (d348 <at_handler+0x2b8>)
    d0fc:	4b93      	ldr	r3, [pc, #588]	; (d34c <at_handler+0x2bc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d0fe:	4601      	mov	r1, r0
    d100:	1ad2      	subs	r2, r2, r3
    d102:	08d2      	lsrs	r2, r2, #3
    d104:	0192      	lsls	r2, r2, #6
    d106:	4894      	ldr	r0, [pc, #592]	; (d358 <at_handler+0x2c8>)
    d108:	f042 0201 	orr.w	r2, r2, #1
    d10c:	f00f fa8b 	bl	1c626 <log_1>
    d110:	4b8e      	ldr	r3, [pc, #568]	; (d34c <at_handler+0x2bc>)
    d112:	4d8d      	ldr	r5, [pc, #564]	; (d348 <at_handler+0x2b8>)
			LOG_ERR("Failed to parse notification (error %d): %s",
    d114:	4630      	mov	r0, r6
    d116:	1aed      	subs	r5, r5, r3
    d118:	f002 ffbc 	bl	10094 <log_strdup>
    d11c:	08ed      	lsrs	r5, r5, #3
    d11e:	01ad      	lsls	r5, r5, #6
    d120:	f045 0501 	orr.w	r5, r5, #1
    d124:	4602      	mov	r2, r0
    d126:	462b      	mov	r3, r5
    d128:	4621      	mov	r1, r4
    d12a:	488c      	ldr	r0, [pc, #560]	; (d35c <at_handler+0x2cc>)
    d12c:	f00f fa92 	bl	1c654 <log_2>
			return;
    d130:	e7bf      	b.n	d0b2 <at_handler+0x22>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d132:	3701      	adds	r7, #1
    d134:	2f03      	cmp	r7, #3
    d136:	d1c3      	bne.n	d0c0 <at_handler+0x30>
    d138:	e7bb      	b.n	d0b2 <at_handler+0x22>
	err = at_parser_params_from_str(notification,
    d13a:	4601      	mov	r1, r0
    d13c:	aa07      	add	r2, sp, #28
    d13e:	4630      	mov	r0, r6
    d140:	f011 f902 	bl	1e348 <at_parser_params_from_str>
	if (err) {
    d144:	4604      	mov	r4, r0
    d146:	2800      	cmp	r0, #0
    d148:	d05e      	beq.n	d208 <at_handler+0x178>
    d14a:	4a7f      	ldr	r2, [pc, #508]	; (d348 <at_handler+0x2b8>)
    d14c:	4b7f      	ldr	r3, [pc, #508]	; (d34c <at_handler+0x2bc>)
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
    d14e:	4601      	mov	r1, r0
    d150:	1ad2      	subs	r2, r2, r3
    d152:	08d2      	lsrs	r2, r2, #3
    d154:	0192      	lsls	r2, r2, #6
    d156:	4882      	ldr	r0, [pc, #520]	; (d360 <at_handler+0x2d0>)
    d158:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get registration status, error: %d", err);
    d15c:	f00f fa63 	bl	1c626 <log_1>
	at_params_list_free(&resp_list);
    d160:	a807      	add	r0, sp, #28
    d162:	f011 f94a 	bl	1e3fa <at_params_list_free>
		if (err) {
    d166:	2c00      	cmp	r4, #0
    d168:	d1d2      	bne.n	d110 <at_handler+0x80>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d16a:	f005 07fb 	and.w	r7, r5, #251	; 0xfb
    d16e:	2f01      	cmp	r7, #1
    d170:	d102      	bne.n	d178 <at_handler+0xe8>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d172:	487c      	ldr	r0, [pc, #496]	; (d364 <at_handler+0x2d4>)
    d174:	f00d f9b6 	bl	1a4e4 <z_impl_k_sem_give>
		if (!evt_handler) {
    d178:	4c7b      	ldr	r4, [pc, #492]	; (d368 <at_handler+0x2d8>)
    d17a:	6823      	ldr	r3, [r4, #0]
    d17c:	2b00      	cmp	r3, #0
    d17e:	d098      	beq.n	d0b2 <at_handler+0x22>
		if (reg_status != prev_reg_status) {
    d180:	4a7a      	ldr	r2, [pc, #488]	; (d36c <at_handler+0x2dc>)
    d182:	7811      	ldrb	r1, [r2, #0]
    d184:	42a9      	cmp	r1, r5
    d186:	d007      	beq.n	d198 <at_handler+0x108>
			prev_reg_status = reg_status;
    d188:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d18a:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
    d18c:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d190:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			evt_handler(&evt);
    d194:	a809      	add	r0, sp, #36	; 0x24
    d196:	4798      	blx	r3
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
    d198:	4e75      	ldr	r6, [pc, #468]	; (d370 <at_handler+0x2e0>)
    d19a:	ad03      	add	r5, sp, #12
    d19c:	2208      	movs	r2, #8
    d19e:	4631      	mov	r1, r6
    d1a0:	4628      	mov	r0, r5
    d1a2:	f013 fa3c 	bl	2061e <memcmp>
    d1a6:	b160      	cbz	r0, d1c2 <at_handler+0x132>
			evt.type = LTE_LC_EVT_CELL_UPDATE;
    d1a8:	e895 0003 	ldmia.w	r5, {r0, r1}
    d1ac:	2304      	movs	r3, #4
    d1ae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    d1b2:	ab0c      	add	r3, sp, #48	; 0x30
    d1b4:	e903 0003 	stmdb	r3, {r0, r1}
    d1b8:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
    d1bc:	6823      	ldr	r3, [r4, #0]
    d1be:	a809      	add	r0, sp, #36	; 0x24
    d1c0:	4798      	blx	r3
		if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
    d1c2:	2f01      	cmp	r7, #1
    d1c4:	f47f af75 	bne.w	d0b2 <at_handler+0x22>
		if (memcmp(&psm_cfg, &prev_psm_cfg,
    d1c8:	4e6a      	ldr	r6, [pc, #424]	; (d374 <at_handler+0x2e4>)
    d1ca:	ad05      	add	r5, sp, #20
    d1cc:	2208      	movs	r2, #8
    d1ce:	4631      	mov	r1, r6
    d1d0:	4628      	mov	r0, r5
    d1d2:	f013 fa24 	bl	2061e <memcmp>
    d1d6:	b158      	cbz	r0, d1f0 <at_handler+0x160>
			evt.type = LTE_LC_EVT_PSM_UPDATE;
    d1d8:	e895 0003 	ldmia.w	r5, {r0, r1}
    d1dc:	ab0c      	add	r3, sp, #48	; 0x30
    d1de:	e886 0003 	stmia.w	r6, {r0, r1}
    d1e2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
			memcpy(&evt.psm_cfg, &psm_cfg,
    d1e6:	e903 0003 	stmdb	r3, {r0, r1}
			evt_handler(&evt);
    d1ea:	6823      	ldr	r3, [r4, #0]
    d1ec:	a809      	add	r0, sp, #36	; 0x24
    d1ee:	4798      	blx	r3
	bool notify = false;
    d1f0:	2300      	movs	r3, #0
	if (evt_handler && notify) {
    d1f2:	4a5d      	ldr	r2, [pc, #372]	; (d368 <at_handler+0x2d8>)
    d1f4:	6812      	ldr	r2, [r2, #0]
    d1f6:	2a00      	cmp	r2, #0
    d1f8:	f43f af5b 	beq.w	d0b2 <at_handler+0x22>
    d1fc:	2b00      	cmp	r3, #0
    d1fe:	f43f af58 	beq.w	d0b2 <at_handler+0x22>
		evt_handler(&evt);
    d202:	a809      	add	r0, sp, #36	; 0x24
    d204:	4790      	blx	r2
    d206:	e754      	b.n	d0b2 <at_handler+0x22>
	err = at_params_int_get(&resp_list,
    d208:	2101      	movs	r1, #1
    d20a:	aa01      	add	r2, sp, #4
    d20c:	a807      	add	r0, sp, #28
    d20e:	f011 f982 	bl	1e516 <at_params_int_get>
	if (err) {
    d212:	4604      	mov	r4, r0
    d214:	b148      	cbz	r0, d22a <at_handler+0x19a>
    d216:	4a4c      	ldr	r2, [pc, #304]	; (d348 <at_handler+0x2b8>)
    d218:	4b4c      	ldr	r3, [pc, #304]	; (d34c <at_handler+0x2bc>)
		LOG_ERR("Could not get registration status, error: %d", err);
    d21a:	4601      	mov	r1, r0
    d21c:	1ad2      	subs	r2, r2, r3
    d21e:	08d2      	lsrs	r2, r2, #3
    d220:	0192      	lsls	r2, r2, #6
    d222:	4855      	ldr	r0, [pc, #340]	; (d378 <at_handler+0x2e8>)
    d224:	f042 0201 	orr.w	r2, r2, #1
    d228:	e798      	b.n	d15c <at_handler+0xcc>
	*reg_status = status;
    d22a:	f89d 5004 	ldrb.w	r5, [sp, #4]
	if ((*reg_status != LTE_LC_NW_REG_UICC_FAIL) &&
    d22e:	2d5a      	cmp	r5, #90	; 0x5a
    d230:	d05f      	beq.n	d2f2 <at_handler+0x262>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
    d232:	a807      	add	r0, sp, #28
    d234:	f011 f9a5 	bl	1e582 <at_params_valid_count_get>
	if ((*reg_status != LTE_LC_NW_REG_UICC_FAIL) &&
    d238:	2803      	cmp	r0, #3
    d23a:	d95a      	bls.n	d2f2 <at_handler+0x262>
		err = at_params_string_get(&resp_list,
    d23c:	2102      	movs	r1, #2
    d23e:	ab02      	add	r3, sp, #8
    d240:	aa09      	add	r2, sp, #36	; 0x24
    d242:	a807      	add	r0, sp, #28
    d244:	f011 f97a 	bl	1e53c <at_params_string_get>
		if (err) {
    d248:	4607      	mov	r7, r0
    d24a:	b160      	cbz	r0, d266 <at_handler+0x1d6>
    d24c:	4a3e      	ldr	r2, [pc, #248]	; (d348 <at_handler+0x2b8>)
    d24e:	4b3f      	ldr	r3, [pc, #252]	; (d34c <at_handler+0x2bc>)
			LOG_ERR("Could not get tracking area code, error: %d", err);
    d250:	4601      	mov	r1, r0
    d252:	1ad2      	subs	r2, r2, r3
    d254:	08d2      	lsrs	r2, r2, #3
    d256:	0192      	lsls	r2, r2, #6
    d258:	4848      	ldr	r0, [pc, #288]	; (d37c <at_handler+0x2ec>)
    d25a:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not get cell ID, error: %d", err);
    d25e:	f00f f9e2 	bl	1c626 <log_1>
			goto clean_exit;
    d262:	463c      	mov	r4, r7
    d264:	e77c      	b.n	d160 <at_handler+0xd0>
		str_buf[len] = '\0';
    d266:	9b02      	ldr	r3, [sp, #8]
    d268:	aa0c      	add	r2, sp, #48	; 0x30
    d26a:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
    d26c:	4621      	mov	r1, r4
    d26e:	2210      	movs	r2, #16
    d270:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    d272:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
    d276:	f00d ffd1 	bl	1b21c <strtoul>
		err = at_params_string_get(&resp_list,
    d27a:	2103      	movs	r1, #3
		cell->tac = strtoul(str_buf, NULL, 16);
    d27c:	9004      	str	r0, [sp, #16]
		err = at_params_string_get(&resp_list,
    d27e:	ab02      	add	r3, sp, #8
    d280:	aa09      	add	r2, sp, #36	; 0x24
    d282:	a807      	add	r0, sp, #28
		len = sizeof(str_buf) - 1;
    d284:	f8cd 8008 	str.w	r8, [sp, #8]
		err = at_params_string_get(&resp_list,
    d288:	f011 f958 	bl	1e53c <at_params_string_get>
		if (err) {
    d28c:	4607      	mov	r7, r0
    d28e:	b148      	cbz	r0, d2a4 <at_handler+0x214>
    d290:	4a2d      	ldr	r2, [pc, #180]	; (d348 <at_handler+0x2b8>)
    d292:	4b2e      	ldr	r3, [pc, #184]	; (d34c <at_handler+0x2bc>)
			LOG_ERR("Could not get cell ID, error: %d", err);
    d294:	4601      	mov	r1, r0
    d296:	1ad2      	subs	r2, r2, r3
    d298:	08d2      	lsrs	r2, r2, #3
    d29a:	0192      	lsls	r2, r2, #6
    d29c:	4838      	ldr	r0, [pc, #224]	; (d380 <at_handler+0x2f0>)
    d29e:	f042 0201 	orr.w	r2, r2, #1
    d2a2:	e7dc      	b.n	d25e <at_handler+0x1ce>
		str_buf[len] = '\0';
    d2a4:	2100      	movs	r1, #0
    d2a6:	9b02      	ldr	r3, [sp, #8]
    d2a8:	aa0c      	add	r2, sp, #48	; 0x30
    d2aa:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
    d2ac:	a809      	add	r0, sp, #36	; 0x24
    d2ae:	2210      	movs	r2, #16
		str_buf[len] = '\0';
    d2b0:	f803 1c0c 	strb.w	r1, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
    d2b4:	f00d ffb2 	bl	1b21c <strtoul>
    d2b8:	9003      	str	r0, [sp, #12]
	if (((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d2ba:	f005 07fb 	and.w	r7, r5, #251	; 0xfb
    d2be:	2f01      	cmp	r7, #1
    d2c0:	d11c      	bne.n	d2fc <at_handler+0x26c>
	     (at_params_valid_count_get(&resp_list) > AT_CEREG_TAU_INDEX)) {
    d2c2:	a807      	add	r0, sp, #28
    d2c4:	f011 f95d 	bl	1e582 <at_params_valid_count_get>
	    (*reg_status == LTE_LC_NW_REG_REGISTERED_ROAMING)) &&
    d2c8:	2808      	cmp	r0, #8
    d2ca:	d917      	bls.n	d2fc <at_handler+0x26c>
		err = parse_psm_cfg(&resp_list, true, psm_cfg);
    d2cc:	4639      	mov	r1, r7
    d2ce:	aa05      	add	r2, sp, #20
    d2d0:	a807      	add	r0, sp, #28
    d2d2:	f007 fd57 	bl	14d84 <parse_psm_cfg>
		if (err) {
    d2d6:	4604      	mov	r4, r0
    d2d8:	2800      	cmp	r0, #0
    d2da:	f43f af41 	beq.w	d160 <at_handler+0xd0>
    d2de:	4a1a      	ldr	r2, [pc, #104]	; (d348 <at_handler+0x2b8>)
    d2e0:	4b1a      	ldr	r3, [pc, #104]	; (d34c <at_handler+0x2bc>)
			LOG_ERR("Failed to parse PSM configuration, error: %d",
    d2e2:	4601      	mov	r1, r0
    d2e4:	1ad2      	subs	r2, r2, r3
    d2e6:	08d2      	lsrs	r2, r2, #3
    d2e8:	0192      	lsls	r2, r2, #6
    d2ea:	4826      	ldr	r0, [pc, #152]	; (d384 <at_handler+0x2f4>)
    d2ec:	f042 0201 	orr.w	r2, r2, #1
    d2f0:	e734      	b.n	d15c <at_handler+0xcc>
		cell->tac = UINT32_MAX;
    d2f2:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = UINT32_MAX;
    d2f6:	e9cd 3303 	strd	r3, r3, [sp, #12]
    d2fa:	e7de      	b.n	d2ba <at_handler+0x22a>
		psm_cfg->tau = -1;
    d2fc:	f04f 33ff 	mov.w	r3, #4294967295
		psm_cfg->active_time = -1;
    d300:	e9cd 3305 	strd	r3, r3, [sp, #20]
    d304:	e72c      	b.n	d160 <at_handler+0xd0>
static int parse_rrc_mode(const char *at_response,
			  enum lte_lc_rrc_mode *mode,
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
    d306:	e9cd 0007 	strd	r0, r0, [sp, #28]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
    d30a:	2104      	movs	r1, #4
    d30c:	a807      	add	r0, sp, #28
    d30e:	f011 f843 	bl	1e398 <at_params_list_init>
	if (err) {
    d312:	4604      	mov	r4, r0
    d314:	2800      	cmp	r0, #0
    d316:	d039      	beq.n	d38c <at_handler+0x2fc>
    d318:	4a0b      	ldr	r2, [pc, #44]	; (d348 <at_handler+0x2b8>)
    d31a:	4b0c      	ldr	r3, [pc, #48]	; (d34c <at_handler+0x2bc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d31c:	4601      	mov	r1, r0
    d31e:	1ad2      	subs	r2, r2, r3
    d320:	08d2      	lsrs	r2, r2, #3
    d322:	0192      	lsls	r2, r2, #6
    d324:	480c      	ldr	r0, [pc, #48]	; (d358 <at_handler+0x2c8>)
    d326:	f042 0201 	orr.w	r2, r2, #1
    d32a:	f00f f97c 	bl	1c626 <log_1>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
    d32e:	4621      	mov	r1, r4
    d330:	4a05      	ldr	r2, [pc, #20]	; (d348 <at_handler+0x2b8>)
    d332:	4b06      	ldr	r3, [pc, #24]	; (d34c <at_handler+0x2bc>)
    d334:	4814      	ldr	r0, [pc, #80]	; (d388 <at_handler+0x2f8>)
    d336:	1ad2      	subs	r2, r2, r3
    d338:	08d2      	lsrs	r2, r2, #3
    d33a:	0192      	lsls	r2, r2, #6
    d33c:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Can't parse eDRX, error: %d", err);
    d340:	f00f f971 	bl	1c626 <log_1>
			return;
    d344:	e6b5      	b.n	d0b2 <at_handler+0x22>
    d346:	bf00      	nop
    d348:	00020ea0 	.word	0x00020ea0
    d34c:	00020e58 	.word	0x00020e58
    d350:	00022a84 	.word	0x00022a84
    d354:	00021120 	.word	0x00021120
    d358:	00022aa4 	.word	0x00022aa4
    d35c:	00022ba1 	.word	0x00022ba1
    d360:	00022acd 	.word	0x00022acd
    d364:	2001844c 	.word	0x2001844c
    d368:	20018448 	.word	0x20018448
    d36c:	2001bf6d 	.word	0x2001bf6d
    d370:	20018464 	.word	0x20018464
    d374:	2001846c 	.word	0x2001846c
    d378:	00022afa 	.word	0x00022afa
    d37c:	00022b27 	.word	0x00022b27
    d380:	00022b53 	.word	0x00022b53
    d384:	00022b74 	.word	0x00022b74
    d388:	00022c3d 	.word	0x00022c3d
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d38c:	4601      	mov	r1, r0
    d38e:	aa07      	add	r2, sp, #28
    d390:	4630      	mov	r0, r6
    d392:	f010 ffd9 	bl	1e348 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d396:	4604      	mov	r4, r0
    d398:	b1a0      	cbz	r0, d3c4 <at_handler+0x334>
    d39a:	4a91      	ldr	r2, [pc, #580]	; (d5e0 <at_handler+0x550>)
    d39c:	4b91      	ldr	r3, [pc, #580]	; (d5e4 <at_handler+0x554>)
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
    d39e:	4601      	mov	r1, r0
    d3a0:	1ad2      	subs	r2, r2, r3
    d3a2:	08d2      	lsrs	r2, r2, #3
    d3a4:	0192      	lsls	r2, r2, #6
    d3a6:	4890      	ldr	r0, [pc, #576]	; (d5e8 <at_handler+0x558>)
    d3a8:	f042 0201 	orr.w	r2, r2, #1
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
	if (err) {
		LOG_ERR("Could not get signalling mode, error: %d", err);
    d3ac:	f00f f93b 	bl	1c626 <log_1>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
    d3b0:	a807      	add	r0, sp, #28
    d3b2:	f011 f822 	bl	1e3fa <at_params_list_free>
		if (err) {
    d3b6:	2c00      	cmp	r4, #0
    d3b8:	d1b9      	bne.n	d32e <at_handler+0x29e>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
    d3ba:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d3bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
    d3c0:	2301      	movs	r3, #1
		break;
    d3c2:	e716      	b.n	d1f2 <at_handler+0x162>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
    d3c4:	4639      	mov	r1, r7
    d3c6:	aa05      	add	r2, sp, #20
    d3c8:	a807      	add	r0, sp, #28
    d3ca:	f011 f8a4 	bl	1e516 <at_params_int_get>
	if (err) {
    d3ce:	4604      	mov	r4, r0
    d3d0:	b148      	cbz	r0, d3e6 <at_handler+0x356>
    d3d2:	4a83      	ldr	r2, [pc, #524]	; (d5e0 <at_handler+0x550>)
    d3d4:	4b83      	ldr	r3, [pc, #524]	; (d5e4 <at_handler+0x554>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
    d3d6:	4601      	mov	r1, r0
    d3d8:	1ad2      	subs	r2, r2, r3
    d3da:	08d2      	lsrs	r2, r2, #3
    d3dc:	0192      	lsls	r2, r2, #6
    d3de:	4883      	ldr	r0, [pc, #524]	; (d5ec <at_handler+0x55c>)
    d3e0:	f042 0201 	orr.w	r2, r2, #1
    d3e4:	e7e2      	b.n	d3ac <at_handler+0x31c>
	if (temp_mode == 0) {
    d3e6:	9905      	ldr	r1, [sp, #20]
    d3e8:	b911      	cbnz	r1, d3f0 <at_handler+0x360>
		*mode = LTE_LC_RRC_MODE_IDLE;
    d3ea:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    d3ee:	e7df      	b.n	d3b0 <at_handler+0x320>
	} else if (temp_mode == 1) {
    d3f0:	2901      	cmp	r1, #1
    d3f2:	d102      	bne.n	d3fa <at_handler+0x36a>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
    d3f4:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
    d3f8:	e7da      	b.n	d3b0 <at_handler+0x320>
    d3fa:	4b7a      	ldr	r3, [pc, #488]	; (d5e4 <at_handler+0x554>)
    d3fc:	4a78      	ldr	r2, [pc, #480]	; (d5e0 <at_handler+0x550>)
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
    d3fe:	487c      	ldr	r0, [pc, #496]	; (d5f0 <at_handler+0x560>)
    d400:	1ad2      	subs	r2, r2, r3
    d402:	08d2      	lsrs	r2, r2, #3
    d404:	0192      	lsls	r2, r2, #6
    d406:	f042 0201 	orr.w	r2, r2, #1
    d40a:	f00f f90c 	bl	1c626 <log_1>
		err = -EINVAL;
    d40e:	f06f 0415 	mvn.w	r4, #21
    d412:	e7cd      	b.n	d3b0 <at_handler+0x320>
{
	int err;
	uint8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    d414:	2304      	movs	r3, #4
	switch (sys_mode_current) {
    d416:	4d77      	ldr	r5, [pc, #476]	; (d5f4 <at_handler+0x564>)
	size_t len = sizeof(tmp_buf) - 1;
    d418:	9303      	str	r3, [sp, #12]
    d41a:	782b      	ldrb	r3, [r5, #0]
	struct at_param_list resp_list = {0};
    d41c:	e9cd 0007 	strd	r0, r0, [sp, #28]
	switch (sys_mode_current) {
    d420:	3b01      	subs	r3, #1
    d422:	2b04      	cmp	r3, #4
    d424:	d804      	bhi.n	d430 <at_handler+0x3a0>
    d426:	e8df f003 	tbb	[pc, r3]
    d42a:	2d19      	.short	0x2d19
    d42c:	1903      	.short	0x1903
    d42e:	2d          	.byte	0x2d
    d42f:	00          	.byte	0x00
    d430:	4b6c      	ldr	r3, [pc, #432]	; (d5e4 <at_handler+0x554>)
    d432:	496b      	ldr	r1, [pc, #428]	; (d5e0 <at_handler+0x550>)
		LOG_ERR("No LTE connection available in this system mode");
    d434:	4870      	ldr	r0, [pc, #448]	; (d5f8 <at_handler+0x568>)
    d436:	1ac9      	subs	r1, r1, r3
    d438:	08c9      	lsrs	r1, r1, #3
    d43a:	0189      	lsls	r1, r1, #6
    d43c:	f041 0101 	orr.w	r1, r1, #1
    d440:	f00f f8e2 	bl	1c608 <log_0>
		return -ENOTCONN;
    d444:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    d448:	4a65      	ldr	r2, [pc, #404]	; (d5e0 <at_handler+0x550>)
    d44a:	4b66      	ldr	r3, [pc, #408]	; (d5e4 <at_handler+0x554>)
			LOG_ERR("Can't parse eDRX, error: %d", err);
    d44c:	4621      	mov	r1, r4
    d44e:	1ad2      	subs	r2, r2, r3
    d450:	08d2      	lsrs	r2, r2, #3
    d452:	0192      	lsls	r2, r2, #6
    d454:	4869      	ldr	r0, [pc, #420]	; (d5fc <at_handler+0x56c>)
    d456:	f042 0201 	orr.w	r2, r2, #1
    d45a:	e771      	b.n	d340 <at_handler+0x2b0>
	switch (sys_mode_current) {
    d45c:	ed9f 8a68 	vldr	s16, [pc, #416]	; d600 <at_handler+0x570>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    d460:	2105      	movs	r1, #5
    d462:	a807      	add	r0, sp, #28
    d464:	f010 ff98 	bl	1e398 <at_params_list_init>
	if (err) {
    d468:	4604      	mov	r4, r0
    d46a:	b170      	cbz	r0, d48a <at_handler+0x3fa>
    d46c:	4b5d      	ldr	r3, [pc, #372]	; (d5e4 <at_handler+0x554>)
    d46e:	4a5c      	ldr	r2, [pc, #368]	; (d5e0 <at_handler+0x550>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d470:	4601      	mov	r1, r0
    d472:	1ad2      	subs	r2, r2, r3
    d474:	08d2      	lsrs	r2, r2, #3
    d476:	0192      	lsls	r2, r2, #6
    d478:	4862      	ldr	r0, [pc, #392]	; (d604 <at_handler+0x574>)
    d47a:	f042 0201 	orr.w	r2, r2, #1
    d47e:	f00f f8d2 	bl	1c626 <log_1>
		return err;
    d482:	e7e1      	b.n	d448 <at_handler+0x3b8>
		*ptw_multiplier = 2.56;
    d484:	ed9f 8a60 	vldr	s16, [pc, #384]	; d608 <at_handler+0x578>
    d488:	e7ea      	b.n	d460 <at_handler+0x3d0>
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d48a:	4601      	mov	r1, r0
    d48c:	aa07      	add	r2, sp, #28
    d48e:	4630      	mov	r0, r6
    d490:	f010 ff5a 	bl	1e348 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d494:	4604      	mov	r4, r0
    d496:	b188      	cbz	r0, d4bc <at_handler+0x42c>
    d498:	4a51      	ldr	r2, [pc, #324]	; (d5e0 <at_handler+0x550>)
    d49a:	4b52      	ldr	r3, [pc, #328]	; (d5e4 <at_handler+0x554>)
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
    d49c:	4601      	mov	r1, r0
    d49e:	1ad2      	subs	r2, r2, r3
    d4a0:	08d2      	lsrs	r2, r2, #3
    d4a2:	0192      	lsls	r2, r2, #6
    d4a4:	4859      	ldr	r0, [pc, #356]	; (d60c <at_handler+0x57c>)
    d4a6:	f042 0201 	orr.w	r2, r2, #1
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
				   tmp_buf, &len);
	if (err) {
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    d4aa:	f00f f8bc 	bl	1c626 <log_1>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
    d4ae:	a807      	add	r0, sp, #28
    d4b0:	f010 ffa3 	bl	1e3fa <at_params_list_free>
		if (err) {
    d4b4:	2c00      	cmp	r4, #0
    d4b6:	d1c7      	bne.n	d448 <at_handler+0x3b8>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d4b8:	2302      	movs	r3, #2
    d4ba:	e77f      	b.n	d3bc <at_handler+0x32c>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    d4bc:	2103      	movs	r1, #3
    d4be:	ab03      	add	r3, sp, #12
    d4c0:	aa05      	add	r2, sp, #20
    d4c2:	a807      	add	r0, sp, #28
    d4c4:	f011 f83a 	bl	1e53c <at_params_string_get>
	if (err) {
    d4c8:	4604      	mov	r4, r0
    d4ca:	b148      	cbz	r0, d4e0 <at_handler+0x450>
    d4cc:	4a44      	ldr	r2, [pc, #272]	; (d5e0 <at_handler+0x550>)
    d4ce:	4b45      	ldr	r3, [pc, #276]	; (d5e4 <at_handler+0x554>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    d4d0:	4601      	mov	r1, r0
    d4d2:	1ad2      	subs	r2, r2, r3
    d4d4:	08d2      	lsrs	r2, r2, #3
    d4d6:	0192      	lsls	r2, r2, #6
    d4d8:	484d      	ldr	r0, [pc, #308]	; (d610 <at_handler+0x580>)
    d4da:	f042 0201 	orr.w	r2, r2, #1
    d4de:	e7e4      	b.n	d4aa <at_handler+0x41a>
	tmp_buf[len] = '\0';
    d4e0:	9b03      	ldr	r3, [sp, #12]
    d4e2:	aa0c      	add	r2, sp, #48	; 0x30
    d4e4:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d4e6:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d4e8:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d4ec:	2202      	movs	r2, #2
    d4ee:	a805      	add	r0, sp, #20
    d4f0:	f00d fe94 	bl	1b21c <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    d4f4:	b2c0      	uxtb	r0, r0
    d4f6:	280f      	cmp	r0, #15
    d4f8:	d844      	bhi.n	d584 <at_handler+0x4f4>
	switch (sys_mode_current) {
    d4fa:	782b      	ldrb	r3, [r5, #0]
    d4fc:	3b01      	subs	r3, #1
    d4fe:	2b04      	cmp	r3, #4
    d500:	d828      	bhi.n	d554 <at_handler+0x4c4>
    d502:	e8df f003 	tbb	[pc, r3]
    d506:	2503      	.short	0x2503
    d508:	0327      	.short	0x0327
    d50a:	25          	.byte	0x25
    d50b:	00          	.byte	0x00
		multiplier = edrx_lookup_ltem[idx];
    d50c:	4b41      	ldr	r3, [pc, #260]	; (d614 <at_handler+0x584>)
		multiplier = edrx_lookup_nbiot[idx];
    d50e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d512:	2800      	cmp	r0, #0
    d514:	d034      	beq.n	d580 <at_handler+0x4f0>
    d516:	f7fe ffe5 	bl	c4e4 <__aeabi_i2d>
    d51a:	a32f      	add	r3, pc, #188	; (adr r3, d5d8 <at_handler+0x548>)
    d51c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d520:	f7ff f84a 	bl	c5b8 <__aeabi_dmul>
    d524:	f7ff fae2 	bl	caec <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    d528:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d52a:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d52c:	ab03      	add	r3, sp, #12
    d52e:	aa05      	add	r2, sp, #20
    d530:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
    d532:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d534:	f011 f802 	bl	1e53c <at_params_string_get>
	if (err) {
    d538:	4604      	mov	r4, r0
    d53a:	b330      	cbz	r0, d58a <at_handler+0x4fa>
    d53c:	4a28      	ldr	r2, [pc, #160]	; (d5e0 <at_handler+0x550>)
    d53e:	4b29      	ldr	r3, [pc, #164]	; (d5e4 <at_handler+0x554>)
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    d540:	4601      	mov	r1, r0
    d542:	1ad2      	subs	r2, r2, r3
    d544:	08d2      	lsrs	r2, r2, #3
    d546:	0192      	lsls	r2, r2, #6
    d548:	4833      	ldr	r0, [pc, #204]	; (d618 <at_handler+0x588>)
    d54a:	f042 0201 	orr.w	r2, r2, #1
    d54e:	e7ac      	b.n	d4aa <at_handler+0x41a>
		multiplier = edrx_lookup_nbiot[idx];
    d550:	4b32      	ldr	r3, [pc, #200]	; (d61c <at_handler+0x58c>)
    d552:	e7dc      	b.n	d50e <at_handler+0x47e>
    d554:	4b23      	ldr	r3, [pc, #140]	; (d5e4 <at_handler+0x554>)
    d556:	4922      	ldr	r1, [pc, #136]	; (d5e0 <at_handler+0x550>)
		LOG_ERR("No LTE connection available in this system mode");
    d558:	4827      	ldr	r0, [pc, #156]	; (d5f8 <at_handler+0x568>)
    d55a:	1ac9      	subs	r1, r1, r3
    d55c:	08c9      	lsrs	r1, r1, #3
    d55e:	0189      	lsls	r1, r1, #6
    d560:	f041 0101 	orr.w	r1, r1, #1
    d564:	f00f f850 	bl	1c608 <log_0>
		return -ENOTCONN;
    d568:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    d56c:	4a1c      	ldr	r2, [pc, #112]	; (d5e0 <at_handler+0x550>)
    d56e:	4b1d      	ldr	r3, [pc, #116]	; (d5e4 <at_handler+0x554>)
		LOG_ERR("Failed to get eDRX value, error; %d", err);
    d570:	4621      	mov	r1, r4
    d572:	1ad2      	subs	r2, r2, r3
    d574:	08d2      	lsrs	r2, r2, #3
    d576:	0192      	lsls	r2, r2, #6
    d578:	4829      	ldr	r0, [pc, #164]	; (d620 <at_handler+0x590>)
    d57a:	f042 0201 	orr.w	r2, r2, #1
    d57e:	e794      	b.n	d4aa <at_handler+0x41a>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d580:	4828      	ldr	r0, [pc, #160]	; (d624 <at_handler+0x594>)
    d582:	e7d1      	b.n	d528 <at_handler+0x498>
		return -EINVAL;
    d584:	f06f 0415 	mvn.w	r4, #21
    d588:	e7f0      	b.n	d56c <at_handler+0x4dc>
	tmp_buf[len] = '\0';
    d58a:	9b03      	ldr	r3, [sp, #12]
    d58c:	aa0c      	add	r2, sp, #48	; 0x30
    d58e:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d590:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d592:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d596:	2202      	movs	r2, #2
    d598:	a805      	add	r0, sp, #20
    d59a:	f00d fe3f 	bl	1b21c <strtoul>
	if (idx > 15) {
    d59e:	b2c1      	uxtb	r1, r0
    d5a0:	290f      	cmp	r1, #15
    d5a2:	d90c      	bls.n	d5be <at_handler+0x52e>
    d5a4:	4b0f      	ldr	r3, [pc, #60]	; (d5e4 <at_handler+0x554>)
    d5a6:	4a0e      	ldr	r2, [pc, #56]	; (d5e0 <at_handler+0x550>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
    d5a8:	481f      	ldr	r0, [pc, #124]	; (d628 <at_handler+0x598>)
    d5aa:	1ad2      	subs	r2, r2, r3
    d5ac:	08d2      	lsrs	r2, r2, #3
    d5ae:	0192      	lsls	r2, r2, #6
    d5b0:	f042 0201 	orr.w	r2, r2, #1
    d5b4:	f00f f837 	bl	1c626 <log_1>
		err = -EINVAL;
    d5b8:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
    d5bc:	e777      	b.n	d4ae <at_handler+0x41e>
	idx += 1;
    d5be:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    d5c0:	b2c0      	uxtb	r0, r0
    d5c2:	ee07 0a90 	vmov	s15, r0
    d5c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d5ca:	ee67 7a88 	vmul.f32	s15, s15, s16
    d5ce:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
clean_exit:
    d5d2:	e76c      	b.n	d4ae <at_handler+0x41e>
    d5d4:	f3af 8000 	nop.w
    d5d8:	47ae147b 	.word	0x47ae147b
    d5dc:	40247ae1 	.word	0x40247ae1
    d5e0:	00020ea0 	.word	0x00020ea0
    d5e4:	00020e58 	.word	0x00020e58
    d5e8:	00022bcd 	.word	0x00022bcd
    d5ec:	00022bf8 	.word	0x00022bf8
    d5f0:	00022c21 	.word	0x00022c21
    d5f4:	2001bf73 	.word	0x2001bf73
    d5f8:	00022c64 	.word	0x00022c64
    d5fc:	00022d58 	.word	0x00022d58
    d600:	3fa3d70a 	.word	0x3fa3d70a
    d604:	00022aa4 	.word	0x00022aa4
    d608:	4023d70a 	.word	0x4023d70a
    d60c:	00022c94 	.word	0x00022c94
    d610:	00022cc0 	.word	0x00022cc0
    d614:	000215d8 	.word	0x000215d8
    d618:	00022d10 	.word	0x00022d10
    d61c:	000215f8 	.word	0x000215f8
    d620:	00022cec 	.word	0x00022cec
    d624:	40a3d70a 	.word	0x40a3d70a
    d628:	00022d3b 	.word	0x00022d3b

0000d62c <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
    d62c:	4801      	ldr	r0, [pc, #4]	; (d634 <k_mutex_unlock.constprop.0+0x8>)
    d62e:	f00c bb3f 	b.w	19cb0 <z_impl_k_mutex_unlock>
    d632:	bf00      	nop
    d634:	200147e0 	.word	0x200147e0

0000d638 <init_data_buffer>:
 * License: BSD
 */

#include "data_buff.h"

void init_data_buffer(){
    d638:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    d63a:	f04f 32ff 	mov.w	r2, #4294967295
    d63e:	f04f 33ff 	mov.w	r3, #4294967295
    d642:	4809      	ldr	r0, [pc, #36]	; (d668 <init_data_buffer+0x30>)
    d644:	f00c fabc 	bl	19bc0 <z_impl_k_mutex_lock>
  k_mutex_lock(&my_mutex, K_FOREVER);
  int i;
  for (i=0; i < MAX_DATA_BUF_LENGTH; ++i){
    d648:	2300      	movs	r3, #0
    data_buffer[i].used = 0;
    d64a:	f44f 7431 	mov.w	r4, #708	; 0x2c4
    d64e:	4618      	mov	r0, r3
    d650:	4a06      	ldr	r2, [pc, #24]	; (d66c <init_data_buffer+0x34>)
    d652:	fb04 f103 	mul.w	r1, r4, r3
  for (i=0; i < MAX_DATA_BUF_LENGTH; ++i){
    d656:	3301      	adds	r3, #1
    d658:	2b10      	cmp	r3, #16
    data_buffer[i].used = 0;
    d65a:	5488      	strb	r0, [r1, r2]
  for (i=0; i < MAX_DATA_BUF_LENGTH; ++i){
    d65c:	d1f9      	bne.n	d652 <init_data_buffer+0x1a>
  }
  k_mutex_unlock(&my_mutex);
}
    d65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  k_mutex_unlock(&my_mutex);
    d662:	f7ff bfe3 	b.w	d62c <k_mutex_unlock.constprop.0>
    d666:	bf00      	nop
    d668:	200147e0 	.word	0x200147e0
    d66c:	20015118 	.word	0x20015118

0000d670 <store_to_data_buffer>:

data_buf_item_t* store_to_data_buffer(uint8_t* src_data, size_t len){
    d670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d672:	4607      	mov	r7, r0
    d674:	460d      	mov	r5, r1
    d676:	f04f 32ff 	mov.w	r2, #4294967295
    d67a:	f04f 33ff 	mov.w	r3, #4294967295
    d67e:	4814      	ldr	r0, [pc, #80]	; (d6d0 <store_to_data_buffer+0x60>)
    d680:	f00c fa9e 	bl	19bc0 <z_impl_k_mutex_lock>
  //lock mutex
  k_mutex_lock(&my_mutex, K_FOREVER);
  uint8_t i = 0;
  uint8_t is_free = 0;
  while(i < MAX_DATA_BUF_LENGTH && is_free == 0){
    d684:	2200      	movs	r2, #0
    if (data_buffer[i].used == 0){
    d686:	f44f 7131 	mov.w	r1, #708	; 0x2c4
    d68a:	4c12      	ldr	r4, [pc, #72]	; (d6d4 <store_to_data_buffer+0x64>)
  while(i < MAX_DATA_BUF_LENGTH && is_free == 0){
    d68c:	2a10      	cmp	r2, #16
    d68e:	b2d3      	uxtb	r3, r2
    d690:	d004      	beq.n	d69c <store_to_data_buffer+0x2c>
    if (data_buffer[i].used == 0){
    d692:	fb02 1001 	mla	r0, r2, r1, r1
    d696:	5d00      	ldrb	r0, [r0, r4]
    d698:	1c56      	adds	r6, r2, #1
    d69a:	b928      	cbnz	r0, d6a8 <store_to_data_buffer+0x38>
    } 
    else {
      ++i;
    }
  }
  if (i == MAX_DATA_BUF_LENGTH){
    d69c:	2b10      	cmp	r3, #16
    d69e:	d105      	bne.n	d6ac <store_to_data_buffer+0x3c>
    //Data buffer is FULL
    k_mutex_unlock(&my_mutex);
    d6a0:	f7ff ffc4 	bl	d62c <k_mutex_unlock.constprop.0>
    return (data_buf_item_t*) NULL;
    d6a4:	2000      	movs	r0, #0
    memcpy(data_buffer[i].data, src_data, len);
    data_buffer[i].len = len;
    k_mutex_unlock(&my_mutex);
    return &data_buffer[i];
  }
}
    d6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (data_buffer[i].used == 0){
    d6a8:	4632      	mov	r2, r6
    d6aa:	e7ef      	b.n	d68c <store_to_data_buffer+0x1c>
    data_buffer[i].used = 1;
    d6ac:	f44f 7331 	mov.w	r3, #708	; 0x2c4
    d6b0:	4353      	muls	r3, r2
    d6b2:	2201      	movs	r2, #1
    d6b4:	4808      	ldr	r0, [pc, #32]	; (d6d8 <store_to_data_buffer+0x68>)
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d6b6:	4639      	mov	r1, r7
    d6b8:	18c4      	adds	r4, r0, r3
    d6ba:	54c2      	strb	r2, [r0, r3]
    memcpy(data_buffer[i].data, src_data, len);
    d6bc:	3308      	adds	r3, #8
    d6be:	462a      	mov	r2, r5
    d6c0:	4418      	add	r0, r3
    d6c2:	f012 ffba 	bl	2063a <memcpy>
    data_buffer[i].len = len;
    d6c6:	6065      	str	r5, [r4, #4]
    k_mutex_unlock(&my_mutex);
    d6c8:	f7ff ffb0 	bl	d62c <k_mutex_unlock.constprop.0>
    return &data_buffer[i];
    d6cc:	4620      	mov	r0, r4
    d6ce:	e7ea      	b.n	d6a6 <store_to_data_buffer+0x36>
    d6d0:	200147e0 	.word	0x200147e0
    d6d4:	20014e54 	.word	0x20014e54
    d6d8:	20015118 	.word	0x20015118

0000d6dc <free_data_buffer_item>:

void free_data_buffer_item(data_buf_item_t* item){
    d6dc:	b510      	push	{r4, lr}
    d6de:	4604      	mov	r4, r0
    d6e0:	f04f 32ff 	mov.w	r2, #4294967295
    d6e4:	f04f 33ff 	mov.w	r3, #4294967295
    d6e8:	4806      	ldr	r0, [pc, #24]	; (d704 <free_data_buffer_item+0x28>)
    d6ea:	f00c fa69 	bl	19bc0 <z_impl_k_mutex_lock>
   //lock mutex
   k_mutex_lock(&my_mutex, K_FOREVER);
   item->used = 0;
    d6ee:	4620      	mov	r0, r4
    d6f0:	2100      	movs	r1, #0
    d6f2:	f800 1b08 	strb.w	r1, [r0], #8
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    d6f6:	6862      	ldr	r2, [r4, #4]
    d6f8:	f012 ffac 	bl	20654 <memset>
   memset(item->data, 0, item->len);
   k_mutex_unlock(&my_mutex);
   //unlock mutex
}
    d6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   k_mutex_unlock(&my_mutex);
    d700:	f7ff bf94 	b.w	d62c <k_mutex_unlock.constprop.0>
    d704:	200147e0 	.word	0x200147e0

0000d708 <dn_hdlc_init>:
//=========================== public ==========================================

/**
\brief Setting up the instance.
*/
void dn_hdlc_init(dn_hdlc_rxFrame_cbt rxFrame_cb) {
    d708:	b538      	push	{r3, r4, r5, lr}
    d70a:	4604      	mov	r4, r0
   // reset local variables
   memset(&dn_hdlc_vars,   0, sizeof(dn_hdlc_vars));
    d70c:	4d05      	ldr	r5, [pc, #20]	; (d724 <dn_hdlc_init+0x1c>)
    d70e:	228c      	movs	r2, #140	; 0x8c
    d710:	1d28      	adds	r0, r5, #4
    d712:	2100      	movs	r1, #0
    d714:	f012 ff9e 	bl	20654 <memset>
   
   // store params
   dn_hdlc_vars.rxFrame_cb = rxFrame_cb;
    d718:	602c      	str	r4, [r5, #0]
   
   // initialize UART
   dn_uart_init(dn_hdlc_rxByte);
    d71a:	4803      	ldr	r0, [pc, #12]	; (d728 <dn_hdlc_init+0x20>)
}
    d71c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dn_uart_init(dn_hdlc_rxByte);
    d720:	f000 bc42 	b.w	dfa8 <dn_uart_init>
    d724:	20017d58 	.word	0x20017d58
    d728:	0000d81d 	.word	0x0000d81d

0000d72c <dn_hdlc_outputOpen>:
/**
\brief Start an HDLC frame in the output buffer.
*/
void dn_hdlc_outputOpen() {
   // initialize the value of the CRC
   dn_hdlc_vars.outputCrc = DN_HDLC_CRCINIT;
    d72c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d730:	4b02      	ldr	r3, [pc, #8]	; (d73c <dn_hdlc_outputOpen+0x10>)
   
   // send opening HDLC flag
   dn_uart_txByte(DN_HDLC_FLAG);
    d732:	207e      	movs	r0, #126	; 0x7e
   dn_hdlc_vars.outputCrc = DN_HDLC_CRCINIT;
    d734:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
   dn_uart_txByte(DN_HDLC_FLAG);
    d738:	f000 bc56 	b.w	dfe8 <dn_uart_txByte>
    d73c:	20017d58 	.word	0x20017d58

0000d740 <dn_hdlc_inputOpen>:
/**
\brief Start an HDLC frame in the input buffer.
*/
void dn_hdlc_inputOpen() {
   // reset the input buffer index
   dn_hdlc_vars.inputBufFill = 0;
    d740:	2200      	movs	r2, #0
    d742:	4b03      	ldr	r3, [pc, #12]	; (d750 <dn_hdlc_inputOpen+0x10>)
    d744:	729a      	strb	r2, [r3, #10]
   
   // initialize the value of the CRC
   dn_hdlc_vars.inputCrc = DN_HDLC_CRCINIT;
    d746:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d74a:	811a      	strh	r2, [r3, #8]
}
    d74c:	4770      	bx	lr
    d74e:	bf00      	nop
    d750:	20017d58 	.word	0x20017d58

0000d754 <dn_hdlc_inputClose>:
\brief Finalize the incoming HDLC frame.
*/
void dn_hdlc_inputClose() {
   
   // verify the validity of the frame
   if (dn_hdlc_vars.inputCrc==DN_HDLC_CRCGOOD) {
    d754:	f24f 02b8 	movw	r2, #61624	; 0xf0b8
    d758:	4b05      	ldr	r3, [pc, #20]	; (d770 <dn_hdlc_inputClose+0x1c>)
    d75a:	8919      	ldrh	r1, [r3, #8]
    d75c:	4291      	cmp	r1, r2
      dn_hdlc_vars.inputBufFill    -= 2;
   } else {
      // the CRC is incorrect
      
      // drop the incoming fram
      dn_hdlc_vars.inputBufFill     = 0;
    d75e:	bf11      	iteee	ne
    d760:	2200      	movne	r2, #0
      dn_hdlc_vars.inputBufFill    -= 2;
    d762:	7a9a      	ldrbeq	r2, [r3, #10]
    d764:	3a02      	subeq	r2, #2
    d766:	b2d2      	uxtbeq	r2, r2
    d768:	729a      	strb	r2, [r3, #10]
   }
   
   // reset escaping
   dn_hdlc_vars.inputEscaping = FALSE;
    d76a:	2200      	movs	r2, #0
    d76c:	719a      	strb	r2, [r3, #6]
}
    d76e:	4770      	bx	lr
    d770:	20017d58 	.word	0x20017d58

0000d774 <dn_hdlc_crcIteration>:
\param[in] b   The new byte.

\return The updated CRC running value.
*/
uint16_t dn_hdlc_crcIteration(uint16_t crc, uint8_t b) {
   return (crc >> 8) ^ dn_hdlc_fcstab[(crc ^ b) & 0xff];
    d774:	4041      	eors	r1, r0
    d776:	4b03      	ldr	r3, [pc, #12]	; (d784 <dn_hdlc_crcIteration+0x10>)
    d778:	b2c9      	uxtb	r1, r1
    d77a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
}
    d77e:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
    d782:	4770      	bx	lr
    d784:	000213d8 	.word	0x000213d8

0000d788 <dn_hdlc_outputWrite>:
   dn_hdlc_vars.outputCrc = dn_hdlc_crcIteration(dn_hdlc_vars.outputCrc,b);
    d788:	4a0b      	ldr	r2, [pc, #44]	; (d7b8 <dn_hdlc_outputWrite+0x30>)
void dn_hdlc_outputWrite(uint8_t b) {
    d78a:	b510      	push	{r4, lr}
    d78c:	4604      	mov	r4, r0
   dn_hdlc_vars.outputCrc = dn_hdlc_crcIteration(dn_hdlc_vars.outputCrc,b);
    d78e:	4601      	mov	r1, r0
    d790:	f8b2 008c 	ldrh.w	r0, [r2, #140]	; 0x8c
    d794:	f7ff ffee 	bl	d774 <dn_hdlc_crcIteration>
   if (b==DN_HDLC_FLAG || b==DN_HDLC_ESCAPE) {
    d798:	f1a4 037d 	sub.w	r3, r4, #125	; 0x7d
    d79c:	2b01      	cmp	r3, #1
   dn_hdlc_vars.outputCrc = dn_hdlc_crcIteration(dn_hdlc_vars.outputCrc,b);
    d79e:	f8a2 008c 	strh.w	r0, [r2, #140]	; 0x8c
   if (b==DN_HDLC_FLAG || b==DN_HDLC_ESCAPE) {
    d7a2:	d804      	bhi.n	d7ae <dn_hdlc_outputWrite+0x26>
      dn_uart_txByte(DN_HDLC_ESCAPE);
    d7a4:	207d      	movs	r0, #125	; 0x7d
    d7a6:	f000 fc1f 	bl	dfe8 <dn_uart_txByte>
      b = b^DN_HDLC_ESCAPE_MASK;
    d7aa:	f084 0420 	eor.w	r4, r4, #32
   dn_uart_txByte(b);
    d7ae:	4620      	mov	r0, r4
}
    d7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dn_uart_txByte(b);
    d7b4:	f000 bc18 	b.w	dfe8 <dn_uart_txByte>
    d7b8:	20017d58 	.word	0x20017d58

0000d7bc <dn_hdlc_outputClose>:
   finalCrc   = ~dn_hdlc_vars.outputCrc;
    d7bc:	4b09      	ldr	r3, [pc, #36]	; (d7e4 <dn_hdlc_outputClose+0x28>)
void dn_hdlc_outputClose() {
    d7be:	b510      	push	{r4, lr}
   finalCrc   = ~dn_hdlc_vars.outputCrc;
    d7c0:	f8b3 008c 	ldrh.w	r0, [r3, #140]	; 0x8c
    d7c4:	43c0      	mvns	r0, r0
    d7c6:	b284      	uxth	r4, r0
   dn_hdlc_outputWrite((finalCrc>>0)&0xff);
    d7c8:	b2c0      	uxtb	r0, r0
    d7ca:	f7ff ffdd 	bl	d788 <dn_hdlc_outputWrite>
   dn_hdlc_outputWrite((finalCrc>>8)&0xff);
    d7ce:	0a20      	lsrs	r0, r4, #8
    d7d0:	f7ff ffda 	bl	d788 <dn_hdlc_outputWrite>
   dn_uart_txByte(DN_HDLC_FLAG);
    d7d4:	207e      	movs	r0, #126	; 0x7e
    d7d6:	f000 fc07 	bl	dfe8 <dn_uart_txByte>
}
    d7da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dn_uart_txFlush();
    d7de:	f000 bc0f 	b.w	e000 <dn_uart_txFlush>
    d7e2:	bf00      	nop
    d7e4:	20017d58 	.word	0x20017d58

0000d7e8 <dn_hdlc_inputWrite>:
   if (b==DN_HDLC_ESCAPE) {
    d7e8:	287d      	cmp	r0, #125	; 0x7d
void dn_hdlc_inputWrite(uint8_t b) {
    d7ea:	b508      	push	{r3, lr}
    d7ec:	4a0a      	ldr	r2, [pc, #40]	; (d818 <dn_hdlc_inputWrite+0x30>)
   if (b==DN_HDLC_ESCAPE) {
    d7ee:	d102      	bne.n	d7f6 <dn_hdlc_inputWrite+0xe>
      dn_hdlc_vars.inputEscaping = TRUE;
    d7f0:	2301      	movs	r3, #1
    d7f2:	7193      	strb	r3, [r2, #6]
}
    d7f4:	bd08      	pop	{r3, pc}
      if (dn_hdlc_vars.inputEscaping==TRUE) {
    d7f6:	7993      	ldrb	r3, [r2, #6]
    d7f8:	b11b      	cbz	r3, d802 <dn_hdlc_inputWrite+0x1a>
         dn_hdlc_vars.inputEscaping = FALSE;
    d7fa:	2300      	movs	r3, #0
         b = b^DN_HDLC_ESCAPE_MASK;
    d7fc:	f080 0020 	eor.w	r0, r0, #32
         dn_hdlc_vars.inputEscaping = FALSE;
    d800:	7193      	strb	r3, [r2, #6]
      dn_hdlc_vars.inputBuf[dn_hdlc_vars.inputBufFill] = b;
    d802:	7a93      	ldrb	r3, [r2, #10]
    d804:	18d1      	adds	r1, r2, r3
    d806:	72c8      	strb	r0, [r1, #11]
      dn_hdlc_vars.inputBufFill++;
    d808:	3301      	adds	r3, #1
      dn_hdlc_vars.inputCrc = dn_hdlc_crcIteration(dn_hdlc_vars.inputCrc,b);
    d80a:	4601      	mov	r1, r0
    d80c:	8910      	ldrh	r0, [r2, #8]
      dn_hdlc_vars.inputBufFill++;
    d80e:	7293      	strb	r3, [r2, #10]
      dn_hdlc_vars.inputCrc = dn_hdlc_crcIteration(dn_hdlc_vars.inputCrc,b);
    d810:	f7ff ffb0 	bl	d774 <dn_hdlc_crcIteration>
    d814:	8110      	strh	r0, [r2, #8]
}
    d816:	e7ed      	b.n	d7f4 <dn_hdlc_inputWrite+0xc>
    d818:	20017d58 	.word	0x20017d58

0000d81c <dn_hdlc_rxByte>:
void dn_hdlc_rxByte(uint8_t rxbyte) {
    d81c:	b538      	push	{r3, r4, r5, lr}
         dn_hdlc_vars.busyReceiving==FALSE  &&
    d81e:	4c18      	ldr	r4, [pc, #96]	; (d880 <dn_hdlc_rxByte+0x64>)
void dn_hdlc_rxByte(uint8_t rxbyte) {
    d820:	4605      	mov	r5, r0
   dn_lock();
    d822:	f00e fa9b 	bl	1bd5c <dn_lock>
   if        (
    d826:	7963      	ldrb	r3, [r4, #5]
    d828:	b983      	cbnz	r3, d84c <dn_hdlc_rxByte+0x30>
         dn_hdlc_vars.busyReceiving==FALSE  &&
    d82a:	7923      	ldrb	r3, [r4, #4]
    d82c:	2b7e      	cmp	r3, #126	; 0x7e
    d82e:	d108      	bne.n	d842 <dn_hdlc_rxByte+0x26>
         dn_hdlc_vars.lastRxByte==DN_HDLC_FLAG &&
    d830:	2d7e      	cmp	r5, #126	; 0x7e
    d832:	d006      	beq.n	d842 <dn_hdlc_rxByte+0x26>
      dn_hdlc_vars.busyReceiving       = TRUE;
    d834:	2301      	movs	r3, #1
    d836:	7163      	strb	r3, [r4, #5]
      dn_hdlc_inputOpen();
    d838:	f7ff ff82 	bl	d740 <dn_hdlc_inputOpen>
      dn_hdlc_inputWrite(rxbyte);
    d83c:	4628      	mov	r0, r5
    d83e:	f7ff ffd3 	bl	d7e8 <dn_hdlc_inputWrite>
   dn_hdlc_vars.lastRxByte = rxbyte;
    d842:	7125      	strb	r5, [r4, #4]
}
    d844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dn_unlock();
    d848:	f00e ba89 	b.w	1bd5e <dn_unlock>
         dn_hdlc_vars.busyReceiving==TRUE   &&
    d84c:	2d7e      	cmp	r5, #126	; 0x7e
    d84e:	d00a      	beq.n	d866 <dn_hdlc_rxByte+0x4a>
      dn_hdlc_inputWrite(rxbyte);
    d850:	4628      	mov	r0, r5
    d852:	f7ff ffc9 	bl	d7e8 <dn_hdlc_inputWrite>
      if (dn_hdlc_vars.inputBufFill+1>DN_HDLC_INPUT_BUFFER_SIZE) {
    d856:	7aa3      	ldrb	r3, [r4, #10]
    d858:	3301      	adds	r3, #1
    d85a:	2b80      	cmp	r3, #128	; 0x80
    d85c:	ddf1      	ble.n	d842 <dn_hdlc_rxByte+0x26>
         dn_hdlc_vars.inputBufFill       = 0;
    d85e:	2300      	movs	r3, #0
    d860:	72a3      	strb	r3, [r4, #10]
      dn_hdlc_vars.busyReceiving = FALSE;
    d862:	7163      	strb	r3, [r4, #5]
    d864:	e7ed      	b.n	d842 <dn_hdlc_rxByte+0x26>
      dn_hdlc_inputClose();
    d866:	f7ff ff75 	bl	d754 <dn_hdlc_inputClose>
      if (dn_hdlc_vars.inputBufFill==0) {
    d86a:	7aa1      	ldrb	r1, [r4, #10]
    d86c:	b129      	cbz	r1, d87a <dn_hdlc_rxByte+0x5e>
         dn_hdlc_vars.rxFrame_cb(&dn_hdlc_vars.inputBuf[0],dn_hdlc_vars.inputBufFill);
    d86e:	4620      	mov	r0, r4
    d870:	f850 3b0b 	ldr.w	r3, [r0], #11
    d874:	4798      	blx	r3
         dn_hdlc_vars.inputBufFill=0;
    d876:	2300      	movs	r3, #0
    d878:	72a3      	strb	r3, [r4, #10]
      dn_hdlc_vars.busyReceiving = FALSE;
    d87a:	2300      	movs	r3, #0
    d87c:	e7f1      	b.n	d862 <dn_hdlc_rxByte+0x46>
    d87e:	bf00      	nop
    d880:	20017d58 	.word	0x20017d58

0000d884 <dn_ipmg_rxSerialRequest>:
   uint8_t  notifType;
   uint8_t  subNotifType;
   uint32_t eventId;
   
   // abort if not a notification
   if (cmdId!=CMDID_NOTIFICATION) {
    d884:	2814      	cmp	r0, #20
void dn_ipmg_rxSerialRequest(uint8_t cmdId, uint8_t flags, uint8_t* payload, uint8_t len) {
    d886:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d88a:	4615      	mov	r5, r2
   if (cmdId!=CMDID_NOTIFICATION) {
    d88c:	d140      	bne.n	d910 <dn_ipmg_rxSerialRequest+0x8c>
      return;
   }
   
   // abort no space for notifType
   if (len<DN_MIN_NOTIF_LEN) {
    d88e:	2b00      	cmp	r3, #0
    d890:	d03e      	beq.n	d910 <dn_ipmg_rxSerialRequest+0x8c>
      return;
   }
   
   notifType  = payload[0];
   payload    = &payload[1];
    d892:	4611      	mov	r1, r2
   len       -= 1;
    d894:	b25c      	sxtb	r4, r3
    d896:	f811 3b01 	ldrb.w	r3, [r1], #1
    d89a:	1e66      	subs	r6, r4, #1
    d89c:	3b01      	subs	r3, #1
    d89e:	b2f6      	uxtb	r6, r6
   
   // parse notification
   switch(notifType) {
    d8a0:	2b05      	cmp	r3, #5
    d8a2:	d835      	bhi.n	d910 <dn_ipmg_rxSerialRequest+0x8c>
    d8a4:	e8df f013 	tbh	[pc, r3, lsl #1]
    d8a8:	01440006 	.word	0x01440006
    d8ac:	015c0034 	.word	0x015c0034
    d8b0:	01b4018e 	.word	0x01b4018e
      case DN_NOTIFID_NOTIFEVENT:

         // abort no space for subNotifType
         if (len<DN_MIN_EVENT_LEN) {
    d8b4:	2e04      	cmp	r6, #4
    d8b6:	d92b      	bls.n	d910 <dn_ipmg_rxSerialRequest+0x8c>
            return;
         }
         
         // get subNotifType
         dn_read_uint32_t(&eventId,&payload[0]);
    d8b8:	a801      	add	r0, sp, #4
    d8ba:	f00e fa32 	bl	1bd22 <dn_read_uint32_t>
         subNotifType   = payload[4];
         payload        = &payload[5];
    d8be:	796a      	ldrb	r2, [r5, #5]
         len           -= 5;
    d8c0:	1fa3      	subs	r3, r4, #6
         payload        = &payload[5];
    d8c2:	1da9      	adds	r1, r5, #6
         len           -= 5;
    d8c4:	b2db      	uxtb	r3, r3
         
         switch (subNotifType) {
    d8c6:	2a0e      	cmp	r2, #14
    d8c8:	d822      	bhi.n	d910 <dn_ipmg_rxSerialRequest+0x8c>
    d8ca:	e8df f012 	tbh	[pc, r2, lsl #1]
    d8ce:	000f      	.short	0x000f
    d8d0:	002d0024 	.word	0x002d0024
    d8d4:	004f003e 	.word	0x004f003e
    d8d8:	00710060 	.word	0x00710060
    d8dc:	00210098 	.word	0x00210098
    d8e0:	00bb0021 	.word	0x00bb0021
    d8e4:	00ef00d5 	.word	0x00ef00d5
    d8e8:	01190101 	.word	0x01190101
            case DN_EVENTID_EVENTMOTERESET:
               
               // verify len
               if (len<DN_EVENTMOTERESET_NOTIF_LEN) {
    d8ec:	2b07      	cmp	r3, #7
    d8ee:	d90f      	bls.n	d910 <dn_ipmg_rxSerialRequest+0x8c>
                   return;
               }
               
               // cast notifBuf
               notif_eventMoteReset = (dn_ipmg_eventMoteReset_nt*)dn_ipmg_vars.notifBuf;
    d8f0:	48d3      	ldr	r0, [pc, #844]	; (dc40 <dn_ipmg_rxSerialRequest+0x3bc>)
               
               notif_eventMoteReset->eventId = eventId;
    d8f2:	9a01      	ldr	r2, [sp, #4]
               notif_eventMoteReset = (dn_ipmg_eventMoteReset_nt*)dn_ipmg_vars.notifBuf;
    d8f4:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
               notif_eventMoteReset->eventId = eventId;
    d8f8:	4623      	mov	r3, r4
    d8fa:	f843 2b04 	str.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d8fe:	680a      	ldr	r2, [r1, #0]
    d900:	6062      	str	r2, [r4, #4]
    d902:	684a      	ldr	r2, [r1, #4]
               // parse the notification
               memcpy(&notif_eventMoteReset->macAddress[0],&payload[DN_EVENTMOTERESET_NOTIF_OFFS_MACADDRESS],8);
               
               // call the notif callback
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTMOTERESET);
    d904:	2100      	movs	r1, #0
    d906:	605a      	str	r2, [r3, #4]
    d908:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    d90c:	2001      	movs	r0, #1
         memcpy(&notif_notifHealthReport->macAddress[0],&payload[DN_NOTIFHEALTHREPORT_NOTIF_OFFS_MACADDRESS],8);
         notif_notifHealthReport->payloadLen = len-DN_NOTIFHEALTHREPORT_NOTIF_OFFS_PAYLOAD;
         memcpy(&notif_notifHealthReport->payload[0],&payload[DN_NOTIFHEALTHREPORT_NOTIF_OFFS_PAYLOAD],len-DN_NOTIFHEALTHREPORT_NOTIF_OFFS_PAYLOAD);
         
         // call the notif callback
         dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFHEALTHREPORT,DN_SUBCMDID_NONE);
    d90e:	4798      	blx	r3
         
      default:
         // unknown notifType
         return;
   }
}
    d910:	b002      	add	sp, #8
    d912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               notif_eventNetworkReset = (dn_ipmg_eventNetworkReset_nt*)dn_ipmg_vars.notifBuf;
    d916:	4bca      	ldr	r3, [pc, #808]	; (dc40 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventNetworkReset->eventId = eventId;
    d918:	9901      	ldr	r1, [sp, #4]
    d91a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTNETWORKRESET);
    d91e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
               notif_eventNetworkReset->eventId = eventId;
    d922:	6011      	str	r1, [r2, #0]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTNETWORKRESET);
    d924:	2101      	movs	r1, #1
    d926:	e7f1      	b.n	d90c <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTCOMMANDFINISHED_NOTIF_LEN) {
    d928:	2b04      	cmp	r3, #4
    d92a:	d9f1      	bls.n	d910 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventCommandFinished = (dn_ipmg_eventCommandFinished_nt*)dn_ipmg_vars.notifBuf;
    d92c:	4cc4      	ldr	r4, [pc, #784]	; (dc40 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventCommandFinished->eventId = eventId;
    d92e:	9b01      	ldr	r3, [sp, #4]
               notif_eventCommandFinished = (dn_ipmg_eventCommandFinished_nt*)dn_ipmg_vars.notifBuf;
    d930:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
               notif_eventCommandFinished->eventId = eventId;
    d934:	4630      	mov	r0, r6
    d936:	f840 3b04 	str.w	r3, [r0], #4
               dn_read_uint32_t(&notif_eventCommandFinished->callbackId,&payload[DN_EVENTCOMMANDFINISHED_NOTIF_OFFS_CALLBACKID]);
    d93a:	f00e f9f2 	bl	1bd22 <dn_read_uint32_t>
               notif_eventCommandFinished->rc = payload[DN_EVENTCOMMANDFINISHED_NOTIF_OFFS_RC];
    d93e:	7aab      	ldrb	r3, [r5, #10]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTCOMMANDFINISHED);
    d940:	2102      	movs	r1, #2
               notif_eventCommandFinished->rc = payload[DN_EVENTCOMMANDFINISHED_NOTIF_OFFS_RC];
    d942:	7233      	strb	r3, [r6, #8]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTCOMMANDFINISHED);
    d944:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d948:	e7e0      	b.n	d90c <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTMOTEJOIN_NOTIF_LEN) {
    d94a:	2b07      	cmp	r3, #7
    d94c:	d9e0      	bls.n	d910 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventMoteJoin = (dn_ipmg_eventMoteJoin_nt*)dn_ipmg_vars.notifBuf;
    d94e:	48bc      	ldr	r0, [pc, #752]	; (dc40 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventMoteJoin->eventId = eventId;
    d950:	9a01      	ldr	r2, [sp, #4]
               notif_eventMoteJoin = (dn_ipmg_eventMoteJoin_nt*)dn_ipmg_vars.notifBuf;
    d952:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
               notif_eventMoteJoin->eventId = eventId;
    d956:	4623      	mov	r3, r4
    d958:	f843 2b04 	str.w	r2, [r3], #4
    d95c:	680a      	ldr	r2, [r1, #0]
    d95e:	6062      	str	r2, [r4, #4]
    d960:	684a      	ldr	r2, [r1, #4]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTMOTEJOIN);
    d962:	2103      	movs	r1, #3
    d964:	605a      	str	r2, [r3, #4]
    d966:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    d96a:	e7cf      	b.n	d90c <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTMOTEOPERATIONAL_NOTIF_LEN) {
    d96c:	2b07      	cmp	r3, #7
    d96e:	d9cf      	bls.n	d910 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventMoteOperational = (dn_ipmg_eventMoteOperational_nt*)dn_ipmg_vars.notifBuf;
    d970:	48b3      	ldr	r0, [pc, #716]	; (dc40 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventMoteOperational->eventId = eventId;
    d972:	9a01      	ldr	r2, [sp, #4]
               notif_eventMoteOperational = (dn_ipmg_eventMoteOperational_nt*)dn_ipmg_vars.notifBuf;
    d974:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
               notif_eventMoteOperational->eventId = eventId;
    d978:	4623      	mov	r3, r4
    d97a:	f843 2b04 	str.w	r2, [r3], #4
    d97e:	680a      	ldr	r2, [r1, #0]
    d980:	6062      	str	r2, [r4, #4]
    d982:	684a      	ldr	r2, [r1, #4]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTMOTEOPERATIONAL);
    d984:	2104      	movs	r1, #4
    d986:	605a      	str	r2, [r3, #4]
    d988:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    d98c:	e7be      	b.n	d90c <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTMOTELOST_NOTIF_LEN) {
    d98e:	2b07      	cmp	r3, #7
    d990:	d9be      	bls.n	d910 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventMoteLost = (dn_ipmg_eventMoteLost_nt*)dn_ipmg_vars.notifBuf;
    d992:	48ab      	ldr	r0, [pc, #684]	; (dc40 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventMoteLost->eventId = eventId;
    d994:	9a01      	ldr	r2, [sp, #4]
               notif_eventMoteLost = (dn_ipmg_eventMoteLost_nt*)dn_ipmg_vars.notifBuf;
    d996:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
               notif_eventMoteLost->eventId = eventId;
    d99a:	4623      	mov	r3, r4
    d99c:	f843 2b04 	str.w	r2, [r3], #4
    d9a0:	680a      	ldr	r2, [r1, #0]
    d9a2:	6062      	str	r2, [r4, #4]
    d9a4:	684a      	ldr	r2, [r1, #4]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTMOTELOST);
    d9a6:	2105      	movs	r1, #5
    d9a8:	605a      	str	r2, [r3, #4]
    d9aa:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    d9ae:	e7ad      	b.n	d90c <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTNETWORKTIME_NOTIF_LEN) {
    d9b0:	2b16      	cmp	r3, #22
    d9b2:	d9ad      	bls.n	d910 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventNetworkTime = (dn_ipmg_eventNetworkTime_nt*)dn_ipmg_vars.notifBuf;
    d9b4:	4ea2      	ldr	r6, [pc, #648]	; (dc40 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventNetworkTime->eventId = eventId;
    d9b6:	9b01      	ldr	r3, [sp, #4]
               notif_eventNetworkTime = (dn_ipmg_eventNetworkTime_nt*)dn_ipmg_vars.notifBuf;
    d9b8:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
               notif_eventNetworkTime->eventId = eventId;
    d9bc:	4620      	mov	r0, r4
    d9be:	f840 3b04 	str.w	r3, [r0], #4
               dn_read_uint32_t(&notif_eventNetworkTime->uptime,&payload[DN_EVENTNETWORKTIME_NOTIF_OFFS_UPTIME]);
    d9c2:	f00e f9ae 	bl	1bd22 <dn_read_uint32_t>
    d9c6:	462a      	mov	r2, r5
    d9c8:	f852 3f0a 	ldr.w	r3, [r2, #10]!
               dn_read_uint32_t(&notif_eventNetworkTime->utcUsecs,&payload[DN_EVENTNETWORKTIME_NOTIF_OFFS_UTCUSECS]);
    d9cc:	f105 0112 	add.w	r1, r5, #18
    d9d0:	60a3      	str	r3, [r4, #8]
    d9d2:	6853      	ldr	r3, [r2, #4]
    d9d4:	f104 0010 	add.w	r0, r4, #16
    d9d8:	60e3      	str	r3, [r4, #12]
    d9da:	f00e f9a2 	bl	1bd22 <dn_read_uint32_t>
    d9de:	462b      	mov	r3, r5
    d9e0:	f853 2f16 	ldr.w	r2, [r3, #22]!
               dn_read_uint16_t(&notif_eventNetworkTime->asnOffset,&payload[DN_EVENTNETWORKTIME_NOTIF_OFFS_ASNOFFSET]);
    d9e4:	f105 011b 	add.w	r1, r5, #27
    d9e8:	6162      	str	r2, [r4, #20]
    d9ea:	791b      	ldrb	r3, [r3, #4]
    d9ec:	f104 001a 	add.w	r0, r4, #26
    d9f0:	7623      	strb	r3, [r4, #24]
    d9f2:	f00e f98d 	bl	1bd10 <dn_read_uint16_t>
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTNETWORKTIME);
    d9f6:	2106      	movs	r1, #6
    d9f8:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
    d9fc:	e786      	b.n	d90c <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTPINGRESPONSE_NOTIF_LEN) {
    d9fe:	2b12      	cmp	r3, #18
    da00:	d986      	bls.n	d910 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventPingResponse = (dn_ipmg_eventPingResponse_nt*)dn_ipmg_vars.notifBuf;
    da02:	4e8f      	ldr	r6, [pc, #572]	; (dc40 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventPingResponse->eventId = eventId;
    da04:	9b01      	ldr	r3, [sp, #4]
               notif_eventPingResponse = (dn_ipmg_eventPingResponse_nt*)dn_ipmg_vars.notifBuf;
    da06:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
               notif_eventPingResponse->eventId = eventId;
    da0a:	4620      	mov	r0, r4
    da0c:	f840 3b04 	str.w	r3, [r0], #4
               dn_read_uint32_t(&notif_eventPingResponse->callbackId,&payload[DN_EVENTPINGRESPONSE_NOTIF_OFFS_CALLBACKID]);
    da10:	f00e f987 	bl	1bd22 <dn_read_uint32_t>
    da14:	462a      	mov	r2, r5
    da16:	f852 3f0a 	ldr.w	r3, [r2, #10]!
               dn_read_uint32_t(&notif_eventPingResponse->delay,&payload[DN_EVENTPINGRESPONSE_NOTIF_OFFS_DELAY]);
    da1a:	f105 0112 	add.w	r1, r5, #18
    da1e:	60a3      	str	r3, [r4, #8]
    da20:	6853      	ldr	r3, [r2, #4]
    da22:	f104 0010 	add.w	r0, r4, #16
    da26:	60e3      	str	r3, [r4, #12]
    da28:	f00e f97b 	bl	1bd22 <dn_read_uint32_t>
               dn_read_uint16_t(&notif_eventPingResponse->voltage,&payload[DN_EVENTPINGRESPONSE_NOTIF_OFFS_VOLTAGE]);
    da2c:	f105 0116 	add.w	r1, r5, #22
    da30:	f104 0014 	add.w	r0, r4, #20
    da34:	f00e f96c 	bl	1bd10 <dn_read_uint16_t>
               notif_eventPingResponse->temperature = (int8_t)payload[DN_EVENTPINGRESPONSE_NOTIF_OFFS_TEMPERATURE];
    da38:	7e2b      	ldrb	r3, [r5, #24]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPINGRESPONSE);
    da3a:	2107      	movs	r1, #7
               notif_eventPingResponse->temperature = (int8_t)payload[DN_EVENTPINGRESPONSE_NOTIF_OFFS_TEMPERATURE];
    da3c:	75a3      	strb	r3, [r4, #22]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPINGRESPONSE);
    da3e:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
    da42:	e763      	b.n	d90c <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTPATHCREATE_NOTIF_LEN) {
    da44:	2b10      	cmp	r3, #16
    da46:	f67f af63 	bls.w	d910 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventPathCreate = (dn_ipmg_eventPathCreate_nt*)dn_ipmg_vars.notifBuf;
    da4a:	4c7d      	ldr	r4, [pc, #500]	; (dc40 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventPathCreate->eventId = eventId;
    da4c:	9801      	ldr	r0, [sp, #4]
               notif_eventPathCreate = (dn_ipmg_eventPathCreate_nt*)dn_ipmg_vars.notifBuf;
    da4e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
               notif_eventPathCreate->eventId = eventId;
    da52:	461a      	mov	r2, r3
    da54:	f842 0b04 	str.w	r0, [r2], #4
    da58:	6808      	ldr	r0, [r1, #0]
    da5a:	6058      	str	r0, [r3, #4]
    da5c:	6848      	ldr	r0, [r1, #4]
    da5e:	4629      	mov	r1, r5
    da60:	6050      	str	r0, [r2, #4]
    da62:	f851 2f0e 	ldr.w	r2, [r1, #14]!
    da66:	60da      	str	r2, [r3, #12]
    da68:	684a      	ldr	r2, [r1, #4]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPATHCREATE);
    da6a:	210a      	movs	r1, #10
    da6c:	611a      	str	r2, [r3, #16]
               notif_eventPathCreate->direction = payload[DN_EVENTPATHCREATE_NOTIF_OFFS_DIRECTION];
    da6e:	7daa      	ldrb	r2, [r5, #22]
    da70:	751a      	strb	r2, [r3, #20]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPATHCREATE);
    da72:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    da76:	e749      	b.n	d90c <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTPATHDELETE_NOTIF_LEN) {
    da78:	2b10      	cmp	r3, #16
    da7a:	f67f af49 	bls.w	d910 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventPathDelete = (dn_ipmg_eventPathDelete_nt*)dn_ipmg_vars.notifBuf;
    da7e:	4c70      	ldr	r4, [pc, #448]	; (dc40 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventPathDelete->eventId = eventId;
    da80:	9801      	ldr	r0, [sp, #4]
               notif_eventPathDelete = (dn_ipmg_eventPathDelete_nt*)dn_ipmg_vars.notifBuf;
    da82:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
               notif_eventPathDelete->eventId = eventId;
    da86:	461a      	mov	r2, r3
    da88:	f842 0b04 	str.w	r0, [r2], #4
    da8c:	6808      	ldr	r0, [r1, #0]
    da8e:	6058      	str	r0, [r3, #4]
    da90:	6848      	ldr	r0, [r1, #4]
    da92:	4629      	mov	r1, r5
    da94:	6050      	str	r0, [r2, #4]
    da96:	f851 2f0e 	ldr.w	r2, [r1, #14]!
    da9a:	60da      	str	r2, [r3, #12]
    da9c:	684a      	ldr	r2, [r1, #4]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPATHDELETE);
    da9e:	210b      	movs	r1, #11
    daa0:	611a      	str	r2, [r3, #16]
               notif_eventPathDelete->direction = payload[DN_EVENTPATHDELETE_NOTIF_OFFS_DIRECTION];
    daa2:	7daa      	ldrb	r2, [r5, #22]
    daa4:	751a      	strb	r2, [r3, #20]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPATHDELETE);
    daa6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    daaa:	e72f      	b.n	d90c <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTPACKETSENT_NOTIF_LEN) {
    daac:	2b04      	cmp	r3, #4
    daae:	f67f af2f 	bls.w	d910 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventPacketSent = (dn_ipmg_eventPacketSent_nt*)dn_ipmg_vars.notifBuf;
    dab2:	4c63      	ldr	r4, [pc, #396]	; (dc40 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventPacketSent->eventId = eventId;
    dab4:	9b01      	ldr	r3, [sp, #4]
               notif_eventPacketSent = (dn_ipmg_eventPacketSent_nt*)dn_ipmg_vars.notifBuf;
    dab6:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
               notif_eventPacketSent->eventId = eventId;
    daba:	4630      	mov	r0, r6
    dabc:	f840 3b04 	str.w	r3, [r0], #4
               dn_read_uint32_t(&notif_eventPacketSent->callbackId,&payload[DN_EVENTPACKETSENT_NOTIF_OFFS_CALLBACKID]);
    dac0:	f00e f92f 	bl	1bd22 <dn_read_uint32_t>
               notif_eventPacketSent->rc = payload[DN_EVENTPACKETSENT_NOTIF_OFFS_RC];
    dac4:	7aab      	ldrb	r3, [r5, #10]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPACKETSENT);
    dac6:	210c      	movs	r1, #12
               notif_eventPacketSent->rc = payload[DN_EVENTPACKETSENT_NOTIF_OFFS_RC];
    dac8:	7233      	strb	r3, [r6, #8]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPACKETSENT);
    daca:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    dace:	e71d      	b.n	d90c <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTMOTECREATE_NOTIF_LEN) {
    dad0:	2b09      	cmp	r3, #9
    dad2:	f67f af1d 	bls.w	d910 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventMoteCreate = (dn_ipmg_eventMoteCreate_nt*)dn_ipmg_vars.notifBuf;
    dad6:	4c5a      	ldr	r4, [pc, #360]	; (dc40 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventMoteCreate->eventId = eventId;
    dad8:	9a01      	ldr	r2, [sp, #4]
               notif_eventMoteCreate = (dn_ipmg_eventMoteCreate_nt*)dn_ipmg_vars.notifBuf;
    dada:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
               notif_eventMoteCreate->eventId = eventId;
    dade:	4603      	mov	r3, r0
    dae0:	f843 2b04 	str.w	r2, [r3], #4
    dae4:	680a      	ldr	r2, [r1, #0]
               dn_read_uint16_t(&notif_eventMoteCreate->moteId,&payload[DN_EVENTMOTECREATE_NOTIF_OFFS_MOTEID]);
    dae6:	300c      	adds	r0, #12
    dae8:	f840 2c08 	str.w	r2, [r0, #-8]
    daec:	684a      	ldr	r2, [r1, #4]
    daee:	f105 010e 	add.w	r1, r5, #14
    daf2:	605a      	str	r2, [r3, #4]
    daf4:	f00e f90c 	bl	1bd10 <dn_read_uint16_t>
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTMOTECREATE);
    daf8:	210d      	movs	r1, #13
    dafa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    dafe:	e705      	b.n	d90c <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTMOTEDELETE_NOTIF_LEN) {
    db00:	2b09      	cmp	r3, #9
    db02:	f67f af05 	bls.w	d910 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventMoteDelete = (dn_ipmg_eventMoteDelete_nt*)dn_ipmg_vars.notifBuf;
    db06:	4c4e      	ldr	r4, [pc, #312]	; (dc40 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventMoteDelete->eventId = eventId;
    db08:	9a01      	ldr	r2, [sp, #4]
               notif_eventMoteDelete = (dn_ipmg_eventMoteDelete_nt*)dn_ipmg_vars.notifBuf;
    db0a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
               notif_eventMoteDelete->eventId = eventId;
    db0e:	4603      	mov	r3, r0
    db10:	f843 2b04 	str.w	r2, [r3], #4
    db14:	680a      	ldr	r2, [r1, #0]
               dn_read_uint16_t(&notif_eventMoteDelete->moteId,&payload[DN_EVENTMOTEDELETE_NOTIF_OFFS_MOTEID]);
    db16:	300c      	adds	r0, #12
    db18:	f840 2c08 	str.w	r2, [r0, #-8]
    db1c:	684a      	ldr	r2, [r1, #4]
    db1e:	f105 010e 	add.w	r1, r5, #14
    db22:	605a      	str	r2, [r3, #4]
    db24:	f00e f8f4 	bl	1bd10 <dn_read_uint16_t>
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTMOTEDELETE);
    db28:	210e      	movs	r1, #14
    db2a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    db2e:	e6ed      	b.n	d90c <dn_ipmg_rxSerialRequest+0x88>
         if (len<DN_NOTIFLOG_NOTIF_LEN) {
    db30:	2e07      	cmp	r6, #7
    db32:	f67f aeed 	bls.w	d910 <dn_ipmg_rxSerialRequest+0x8c>
         notif_notifLog = (dn_ipmg_notifLog_nt*)dn_ipmg_vars.notifBuf;
    db36:	4f42      	ldr	r7, [pc, #264]	; (dc40 <dn_ipmg_rxSerialRequest+0x3bc>)
    db38:	680b      	ldr	r3, [r1, #0]
    db3a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
         notif_notifLog->logMsgLen = len-DN_NOTIFLOG_NOTIF_OFFS_LOGMSG;
    db3e:	3c09      	subs	r4, #9
    db40:	6003      	str	r3, [r0, #0]
    db42:	684b      	ldr	r3, [r1, #4]
    db44:	f1a6 0208 	sub.w	r2, r6, #8
    db48:	6043      	str	r3, [r0, #4]
    db4a:	7204      	strb	r4, [r0, #8]
    db4c:	f105 0109 	add.w	r1, r5, #9
    db50:	3009      	adds	r0, #9
    db52:	f012 fd72 	bl	2063a <memcpy>
         dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFLOG,DN_SUBCMDID_NONE);
    db56:	21ff      	movs	r1, #255	; 0xff
    db58:	2002      	movs	r0, #2
    db5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    db5e:	e6d6      	b.n	d90e <dn_ipmg_rxSerialRequest+0x8a>
         if (len<DN_NOTIFDATA_NOTIF_LEN) {
    db60:	2e17      	cmp	r6, #23
    db62:	f67f aed5 	bls.w	d910 <dn_ipmg_rxSerialRequest+0x8c>
         notif_notifData = (dn_ipmg_notifData_nt*)dn_ipmg_vars.notifBuf;
    db66:	f8df 80d8 	ldr.w	r8, [pc, #216]	; dc40 <dn_ipmg_rxSerialRequest+0x3bc>
    db6a:	680b      	ldr	r3, [r1, #0]
    db6c:	f8d8 7090 	ldr.w	r7, [r8, #144]	; 0x90
         notif_notifData->dataLen = len-DN_NOTIFDATA_NOTIF_OFFS_DATA;
    db70:	3c19      	subs	r4, #25
    db72:	603b      	str	r3, [r7, #0]
    db74:	684b      	ldr	r3, [r1, #4]
         dn_read_uint32_t(&notif_notifData->utcUsecs,&payload[DN_NOTIFDATA_NOTIF_OFFS_UTCUSECS]);
    db76:	f107 0008 	add.w	r0, r7, #8
    db7a:	607b      	str	r3, [r7, #4]
    db7c:	f105 0109 	add.w	r1, r5, #9
    db80:	f00e f8cf 	bl	1bd22 <dn_read_uint32_t>
    db84:	462a      	mov	r2, r5
    db86:	f852 3f0d 	ldr.w	r3, [r2, #13]!
         dn_read_uint16_t(&notif_notifData->srcPort,&payload[DN_NOTIFDATA_NOTIF_OFFS_SRCPORT]);
    db8a:	f105 0115 	add.w	r1, r5, #21
    db8e:	60fb      	str	r3, [r7, #12]
    db90:	6853      	ldr	r3, [r2, #4]
    db92:	f107 0014 	add.w	r0, r7, #20
    db96:	613b      	str	r3, [r7, #16]
    db98:	f00e f8ba 	bl	1bd10 <dn_read_uint16_t>
         dn_read_uint16_t(&notif_notifData->dstPort,&payload[DN_NOTIFDATA_NOTIF_OFFS_DSTPORT]);
    db9c:	f105 0117 	add.w	r1, r5, #23
    dba0:	f107 0016 	add.w	r0, r7, #22
    dba4:	f00e f8b4 	bl	1bd10 <dn_read_uint16_t>
    dba8:	f105 0119 	add.w	r1, r5, #25
         notif_notifData->dataLen = len-DN_NOTIFDATA_NOTIF_OFFS_DATA;
    dbac:	763c      	strb	r4, [r7, #24]
    dbae:	f1a6 0218 	sub.w	r2, r6, #24
    dbb2:	f107 0019 	add.w	r0, r7, #25
    dbb6:	f012 fd40 	bl	2063a <memcpy>
         dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFDATA,DN_SUBCMDID_NONE);
    dbba:	21ff      	movs	r1, #255	; 0xff
    dbbc:	2004      	movs	r0, #4
    dbbe:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
    dbc2:	e6a4      	b.n	d90e <dn_ipmg_rxSerialRequest+0x8a>
         if (len<DN_NOTIFIPDATA_NOTIF_LEN) {
    dbc4:	2e13      	cmp	r6, #19
    dbc6:	f67f aea3 	bls.w	d910 <dn_ipmg_rxSerialRequest+0x8c>
         notif_notifIpData = (dn_ipmg_notifIpData_nt*)dn_ipmg_vars.notifBuf;
    dbca:	f8df 8074 	ldr.w	r8, [pc, #116]	; dc40 <dn_ipmg_rxSerialRequest+0x3bc>
    dbce:	680b      	ldr	r3, [r1, #0]
    dbd0:	f8d8 7090 	ldr.w	r7, [r8, #144]	; 0x90
         notif_notifIpData->dataLen = len-DN_NOTIFIPDATA_NOTIF_OFFS_DATA;
    dbd4:	3c15      	subs	r4, #21
    dbd6:	603b      	str	r3, [r7, #0]
    dbd8:	684b      	ldr	r3, [r1, #4]
         dn_read_uint32_t(&notif_notifIpData->utcUsecs,&payload[DN_NOTIFIPDATA_NOTIF_OFFS_UTCUSECS]);
    dbda:	f107 0008 	add.w	r0, r7, #8
    dbde:	607b      	str	r3, [r7, #4]
    dbe0:	f105 0109 	add.w	r1, r5, #9
    dbe4:	f00e f89d 	bl	1bd22 <dn_read_uint32_t>
    dbe8:	462a      	mov	r2, r5
    dbea:	f852 3f0d 	ldr.w	r3, [r2, #13]!
    dbee:	f105 0115 	add.w	r1, r5, #21
    dbf2:	60fb      	str	r3, [r7, #12]
    dbf4:	6853      	ldr	r3, [r2, #4]
    dbf6:	f107 0015 	add.w	r0, r7, #21
    dbfa:	613b      	str	r3, [r7, #16]
         notif_notifIpData->dataLen = len-DN_NOTIFIPDATA_NOTIF_OFFS_DATA;
    dbfc:	753c      	strb	r4, [r7, #20]
    dbfe:	f1a6 0214 	sub.w	r2, r6, #20
    dc02:	f012 fd1a 	bl	2063a <memcpy>
         dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFIPDATA,DN_SUBCMDID_NONE);
    dc06:	21ff      	movs	r1, #255	; 0xff
    dc08:	2005      	movs	r0, #5
    dc0a:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
    dc0e:	e67e      	b.n	d90e <dn_ipmg_rxSerialRequest+0x8a>
         if (len<DN_NOTIFHEALTHREPORT_NOTIF_LEN) {
    dc10:	2e07      	cmp	r6, #7
    dc12:	f67f ae7d 	bls.w	d910 <dn_ipmg_rxSerialRequest+0x8c>
         notif_notifHealthReport = (dn_ipmg_notifHealthReport_nt*)dn_ipmg_vars.notifBuf;
    dc16:	4f0a      	ldr	r7, [pc, #40]	; (dc40 <dn_ipmg_rxSerialRequest+0x3bc>)
    dc18:	680b      	ldr	r3, [r1, #0]
    dc1a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
         notif_notifHealthReport->payloadLen = len-DN_NOTIFHEALTHREPORT_NOTIF_OFFS_PAYLOAD;
    dc1e:	3c09      	subs	r4, #9
    dc20:	6003      	str	r3, [r0, #0]
    dc22:	684b      	ldr	r3, [r1, #4]
    dc24:	f1a6 0208 	sub.w	r2, r6, #8
    dc28:	6043      	str	r3, [r0, #4]
    dc2a:	7204      	strb	r4, [r0, #8]
    dc2c:	f105 0109 	add.w	r1, r5, #9
    dc30:	3009      	adds	r0, #9
    dc32:	f012 fd02 	bl	2063a <memcpy>
         dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFHEALTHREPORT,DN_SUBCMDID_NONE);
    dc36:	21ff      	movs	r1, #255	; 0xff
    dc38:	2006      	movs	r0, #6
    dc3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    dc3e:	e666      	b.n	d90e <dn_ipmg_rxSerialRequest+0x8a>
    dc40:	20017de8 	.word	0x20017de8

0000dc44 <dn_ipmg_subscribe_reply>:
void dn_ipmg_subscribe_reply(uint8_t cmdId, uint8_t rc, uint8_t* payload, uint8_t len) {
    dc44:	b510      	push	{r4, lr}
   if (dn_ipmg_vars.busyTx==FALSE || dn_ipmg_vars.cmdId!=cmdId) {
    dc46:	4c09      	ldr	r4, [pc, #36]	; (dc6c <dn_ipmg_subscribe_reply+0x28>)
    dc48:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
    dc4c:	b162      	cbz	r2, dc68 <dn_ipmg_subscribe_reply+0x24>
    dc4e:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
    dc52:	4282      	cmp	r2, r0
    dc54:	d108      	bne.n	dc68 <dn_ipmg_subscribe_reply+0x24>
   reply->RC = rc;
    dc56:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    dc5a:	7019      	strb	r1, [r3, #0]
   dn_ipmg_vars.replyCb(cmdId);
    dc5c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    dc60:	4798      	blx	r3
   dn_ipmg_vars.busyTx=FALSE;
    dc62:	2300      	movs	r3, #0
    dc64:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
    dc68:	bd10      	pop	{r4, pc}
    dc6a:	bf00      	nop
    dc6c:	20017de8 	.word	0x20017de8

0000dc70 <dn_ipmg_init>:
void dn_ipmg_init(dn_ipmg_notif_cbt notifCb, uint8_t* notifBuf, uint8_t notifBufLen, dn_ipmg_reply_cbt replyCb, dn_ipmg_status_cbt statusCb) {
    dc70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc74:	4680      	mov	r8, r0
    dc76:	460f      	mov	r7, r1
    dc78:	4616      	mov	r6, r2
    dc7a:	461d      	mov	r5, r3
   memset(&dn_ipmg_vars,0,sizeof(dn_ipmg_vars));
    dc7c:	4c09      	ldr	r4, [pc, #36]	; (dca4 <dn_ipmg_init+0x34>)
void dn_ipmg_init(dn_ipmg_notif_cbt notifCb, uint8_t* notifBuf, uint8_t notifBufLen, dn_ipmg_reply_cbt replyCb, dn_ipmg_status_cbt statusCb) {
    dc7e:	f8dd 9020 	ldr.w	r9, [sp, #32]
   memset(&dn_ipmg_vars,0,sizeof(dn_ipmg_vars));
    dc82:	2100      	movs	r1, #0
    dc84:	4620      	mov	r0, r4
    dc86:	2298      	movs	r2, #152	; 0x98
    dc88:	f012 fce4 	bl	20654 <memset>
   dn_serial_mg_init(dn_ipmg_rxSerialRequest, statusCb);
    dc8c:	4649      	mov	r1, r9
   dn_ipmg_vars.notifBuf        = notifBuf;
    dc8e:	e9c4 8723 	strd	r8, r7, [r4, #140]	; 0x8c
   dn_ipmg_vars.notifBufLen     = notifBufLen;
    dc92:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
   dn_ipmg_vars.replyCb         = replyCb;
    dc96:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   dn_serial_mg_init(dn_ipmg_rxSerialRequest, statusCb);
    dc9a:	4803      	ldr	r0, [pc, #12]	; (dca8 <dn_ipmg_init+0x38>)
}
    dc9c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dn_serial_mg_init(dn_ipmg_rxSerialRequest, statusCb);
    dca0:	f000 b848 	b.w	dd34 <dn_serial_mg_init>
    dca4:	20017de8 	.word	0x20017de8
    dca8:	0000d885 	.word	0x0000d885

0000dcac <dn_ipmg_cancelTx>:
void dn_ipmg_cancelTx() {
    dcac:	b508      	push	{r3, lr}
   dn_lock();
    dcae:	f00e f855 	bl	1bd5c <dn_lock>
   dn_ipmg_vars.busyTx=FALSE;
    dcb2:	2200      	movs	r2, #0
    dcb4:	4b03      	ldr	r3, [pc, #12]	; (dcc4 <dn_ipmg_cancelTx+0x18>)
    dcb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
    dcba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   dn_unlock();
    dcbe:	f00e b84e 	b.w	1bd5e <dn_unlock>
    dcc2:	bf00      	nop
    dcc4:	20017de8 	.word	0x20017de8

0000dcc8 <dn_ipmg_subscribe>:
dn_err_t dn_ipmg_subscribe(uint32_t filter, uint32_t unackFilter, dn_ipmg_subscribe_rpt* reply) {
    dcc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   if (dn_ipmg_vars.busyTx) {
    dccc:	4c17      	ldr	r4, [pc, #92]	; (dd2c <dn_ipmg_subscribe+0x64>)
dn_err_t dn_ipmg_subscribe(uint32_t filter, uint32_t unackFilter, dn_ipmg_subscribe_rpt* reply) {
    dcce:	4606      	mov	r6, r0
    dcd0:	460d      	mov	r5, r1
    dcd2:	4617      	mov	r7, r2
   dn_lock();
    dcd4:	f00e f842 	bl	1bd5c <dn_lock>
   if (dn_ipmg_vars.busyTx) {
    dcd8:	f894 9080 	ldrb.w	r9, [r4, #128]	; 0x80
    dcdc:	f1b9 0f00 	cmp.w	r9, #0
    dce0:	d006      	beq.n	dcf0 <dn_ipmg_subscribe+0x28>
      dn_unlock();
    dce2:	f00e f83c 	bl	1bd5e <dn_unlock>
      return DN_ERR_BUSY;
    dce6:	2501      	movs	r5, #1
}
    dce8:	4628      	mov	r0, r5
    dcea:	b003      	add	sp, #12
    dcec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dn_ipmg_vars.cmdId          = CMDID_SUBSCRIBE;
    dcf0:	f04f 0816 	mov.w	r8, #22
   dn_write_uint32_t(&dn_ipmg_vars.outputBuf[DN_SUBSCRIBE_REQ_OFFS_FILTER],filter);
    dcf4:	4631      	mov	r1, r6
    dcf6:	4620      	mov	r0, r4
   dn_ipmg_vars.cmdId          = CMDID_SUBSCRIBE;
    dcf8:	f884 8081 	strb.w	r8, [r4, #129]	; 0x81
   dn_ipmg_vars.replyContents  = (uint8_t*)reply;
    dcfc:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
   dn_write_uint32_t(&dn_ipmg_vars.outputBuf[DN_SUBSCRIBE_REQ_OFFS_FILTER],filter);
    dd00:	f00d fffe 	bl	1bd00 <dn_write_uint32_t>
   dn_write_uint32_t(&dn_ipmg_vars.outputBuf[DN_SUBSCRIBE_REQ_OFFS_UNACKFILTER],unackFilter);
    dd04:	4629      	mov	r1, r5
    dd06:	1d20      	adds	r0, r4, #4
    dd08:	f00d fffa 	bl	1bd00 <dn_write_uint32_t>
   rc = dn_serial_mg_sendRequest(
    dd0c:	4b08      	ldr	r3, [pc, #32]	; (dd30 <dn_ipmg_subscribe+0x68>)
    dd0e:	4622      	mov	r2, r4
    dd10:	9300      	str	r3, [sp, #0]
    dd12:	4649      	mov	r1, r9
    dd14:	2308      	movs	r3, #8
    dd16:	4640      	mov	r0, r8
    dd18:	f000 f866 	bl	dde8 <dn_serial_mg_sendRequest>
   if (rc==DN_ERR_NONE) {
    dd1c:	4605      	mov	r5, r0
    dd1e:	b910      	cbnz	r0, dd26 <dn_ipmg_subscribe+0x5e>
      dn_ipmg_vars.busyTx         = TRUE;
    dd20:	2301      	movs	r3, #1
    dd22:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
   dn_unlock();
    dd26:	f00e f81a 	bl	1bd5e <dn_unlock>
   return rc;
    dd2a:	e7dd      	b.n	dce8 <dn_ipmg_subscribe+0x20>
    dd2c:	20017de8 	.word	0x20017de8
    dd30:	0000dc45 	.word	0x0000dc45

0000dd34 <dn_serial_mg_init>:
/**
\brief Setting up the instance.
*/
void dn_serial_mg_init(dn_serial_request_cbt requestCb, dn_status_change_cbt statusChangeCb) {
   // reset local variables
   memset(&dn_serial_mg_vars, 0, sizeof(dn_serial_mg_vars));
    dd34:	2200      	movs	r2, #0
    dd36:	4b05      	ldr	r3, [pc, #20]	; (dd4c <dn_serial_mg_init+0x18>)
    dd38:	e9c3 2200 	strd	r2, r2, [r3]
   dn_serial_mg_vars.txPacketId      = 0x00;
   dn_serial_mg_vars.rxPacketIdInit  = FALSE;
   dn_serial_mg_vars.rxPacketId      = 0x00;
   
   dn_serial_mg_vars.requestCb       = requestCb;
   dn_serial_mg_vars.statusChangeCb  = statusChangeCb;
    dd3c:	e9c3 0103 	strd	r0, r1, [r3, #12]
   memset(&dn_serial_mg_vars, 0, sizeof(dn_serial_mg_vars));
    dd40:	609a      	str	r2, [r3, #8]
   
   // initialize the HDLC module
   dn_hdlc_init(dn_serial_mg_rxHdlcFrame);
    dd42:	4803      	ldr	r0, [pc, #12]	; (dd50 <dn_serial_mg_init+0x1c>)
   dn_serial_mg_vars.rxPacketIdInit  = FALSE;
    dd44:	805a      	strh	r2, [r3, #2]
   dn_serial_mg_vars.txPacketId      = 0x00;
    dd46:	705a      	strb	r2, [r3, #1]
   dn_hdlc_init(dn_serial_mg_rxHdlcFrame);
    dd48:	f7ff bcde 	b.w	d708 <dn_hdlc_init>
    dd4c:	20017e80 	.word	0x20017e80
    dd50:	0000de39 	.word	0x0000de39

0000dd54 <dn_serial_sendRequestNoCheck>:
   );
}

//=========================== private =========================================

dn_err_t dn_serial_sendRequestNoCheck(uint8_t cmdId, bool isAck, bool shouldBeAcked, uint8_t* payload, uint8_t length, dn_serial_reply_cbt replyCb) {
    dd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   uint8_t i;
   uint8_t control;
   
   // register reply callback
   dn_serial_mg_vars.replyCmdId      = cmdId;
    dd58:	4d14      	ldr	r5, [pc, #80]	; (ddac <dn_serial_sendRequestNoCheck+0x58>)
dn_err_t dn_serial_sendRequestNoCheck(uint8_t cmdId, bool isAck, bool shouldBeAcked, uint8_t* payload, uint8_t length, dn_serial_reply_cbt replyCb) {
    dd5a:	461c      	mov	r4, r3
   dn_serial_mg_vars.replyCb         = replyCb;
    dd5c:	9b07      	ldr	r3, [sp, #28]
dn_err_t dn_serial_sendRequestNoCheck(uint8_t cmdId, bool isAck, bool shouldBeAcked, uint8_t* payload, uint8_t length, dn_serial_reply_cbt replyCb) {
    dd5e:	4680      	mov	r8, r0
   
   // create the control byte
   control         = 0;
   if (isAck==1) {
      control     |= DN_SERIAL_FLAG_ACK;
    dd60:	460e      	mov	r6, r1
dn_err_t dn_serial_sendRequestNoCheck(uint8_t cmdId, bool isAck, bool shouldBeAcked, uint8_t* payload, uint8_t length, dn_serial_reply_cbt replyCb) {
    dd62:	f89d 7018 	ldrb.w	r7, [sp, #24]
   dn_serial_mg_vars.replyCmdId      = cmdId;
    dd66:	7128      	strb	r0, [r5, #4]
   dn_serial_mg_vars.replyCb         = replyCb;
    dd68:	60ab      	str	r3, [r5, #8]
   } else {
      control     |= DN_SERIAL_FLAG_DATA;
   }
   if (shouldBeAcked==1) {
    dd6a:	b10a      	cbz	r2, dd70 <dn_serial_sendRequestNoCheck+0x1c>
      control     |= DN_SERIAL_FLAG_ACKNOWLEDGED;
    dd6c:	f041 0602 	orr.w	r6, r1, #2
   } else {
      control     |= DN_SERIAL_FLAG_UNACKNOWLEDGED;
   }
   
   // send the frame over serial
   dn_hdlc_outputOpen();
    dd70:	f7ff fcdc 	bl	d72c <dn_hdlc_outputOpen>
   dn_hdlc_outputWrite(control);                      // Control
    dd74:	4630      	mov	r0, r6
    dd76:	f7ff fd07 	bl	d788 <dn_hdlc_outputWrite>
   dn_hdlc_outputWrite(cmdId);                        // Packet Type
    dd7a:	4640      	mov	r0, r8
    dd7c:	f7ff fd04 	bl	d788 <dn_hdlc_outputWrite>
   dn_hdlc_outputWrite(dn_serial_mg_vars.txPacketId);    // Seq. Number
    dd80:	7868      	ldrb	r0, [r5, #1]
    dd82:	f7ff fd01 	bl	d788 <dn_hdlc_outputWrite>
   dn_hdlc_outputWrite(length);                       // Payload Length
    dd86:	4638      	mov	r0, r7
    dd88:	f7ff fcfe 	bl	d788 <dn_hdlc_outputWrite>
   for (i=0; i<length; i++) {                         // Payload
    dd8c:	4427      	add	r7, r4
    dd8e:	42bc      	cmp	r4, r7
    dd90:	d107      	bne.n	dda2 <dn_serial_sendRequestNoCheck+0x4e>
      dn_hdlc_outputWrite(payload[i]);
   }
   dn_hdlc_outputClose();
    dd92:	f7ff fd13 	bl	d7bc <dn_hdlc_outputClose>
   
   // increment the txPacketId
   dn_serial_mg_vars.txPacketId++;
    dd96:	786b      	ldrb	r3, [r5, #1]
   
   return DN_ERR_NONE;
}
    dd98:	2000      	movs	r0, #0
   dn_serial_mg_vars.txPacketId++;
    dd9a:	3301      	adds	r3, #1
    dd9c:	706b      	strb	r3, [r5, #1]
}
    dd9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      dn_hdlc_outputWrite(payload[i]);
    dda2:	f814 0b01 	ldrb.w	r0, [r4], #1
    dda6:	f7ff fcef 	bl	d788 <dn_hdlc_outputWrite>
   for (i=0; i<length; i++) {                         // Payload
    ddaa:	e7f0      	b.n	dd8e <dn_serial_sendRequestNoCheck+0x3a>
    ddac:	20017e80 	.word	0x20017e80

0000ddb0 <dn_serial_mg_initiateConnect>:
   payload[0] = DN_API_VERSION;             // version
    ddb0:	2304      	movs	r3, #4
dn_err_t dn_serial_mg_initiateConnect() {
    ddb2:	b530      	push	{r4, r5, lr}
   payload[1] = dn_serial_mg_vars.txPacketId;  // cliSeqNo
    ddb4:	4d0b      	ldr	r5, [pc, #44]	; (dde4 <dn_serial_mg_initiateConnect+0x34>)
dn_err_t dn_serial_mg_initiateConnect() {
    ddb6:	b085      	sub	sp, #20
   payload[0] = DN_API_VERSION;             // version
    ddb8:	f88d 300c 	strb.w	r3, [sp, #12]
   payload[1] = dn_serial_mg_vars.txPacketId;  // cliSeqNo
    ddbc:	786b      	ldrb	r3, [r5, #1]
   payload[2] = 0;                          // mode
    ddbe:	2400      	movs	r4, #0
   payload[1] = dn_serial_mg_vars.txPacketId;  // cliSeqNo
    ddc0:	f88d 300d 	strb.w	r3, [sp, #13]
   dn_serial_sendRequestNoCheck(
    ddc4:	2303      	movs	r3, #3
    ddc6:	4622      	mov	r2, r4
    ddc8:	9300      	str	r3, [sp, #0]
    ddca:	4621      	mov	r1, r4
    ddcc:	ab03      	add	r3, sp, #12
    ddce:	9401      	str	r4, [sp, #4]
    ddd0:	2001      	movs	r0, #1
   payload[2] = 0;                          // mode
    ddd2:	f88d 400e 	strb.w	r4, [sp, #14]
   dn_serial_sendRequestNoCheck(
    ddd6:	f7ff ffbd 	bl	dd54 <dn_serial_sendRequestNoCheck>
   dn_serial_mg_vars.status = DN_SERIAL_ST_HELLO_SENT;
    ddda:	2301      	movs	r3, #1
}
    dddc:	4620      	mov	r0, r4
   dn_serial_mg_vars.status = DN_SERIAL_ST_HELLO_SENT;
    ddde:	702b      	strb	r3, [r5, #0]
}
    dde0:	b005      	add	sp, #20
    dde2:	bd30      	pop	{r4, r5, pc}
    dde4:	20017e80 	.word	0x20017e80

0000dde8 <dn_serial_mg_sendRequest>:
dn_err_t dn_serial_mg_sendRequest(uint8_t cmdId, bool isAck, uint8_t* payload, uint8_t length, dn_serial_reply_cbt replyCb) {
    dde8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   if (dn_serial_mg_vars.status!=DN_SERIAL_ST_CONNECTED) {
    ddea:	4d08      	ldr	r5, [pc, #32]	; (de0c <dn_serial_mg_sendRequest+0x24>)
    ddec:	782d      	ldrb	r5, [r5, #0]
    ddee:	2d02      	cmp	r5, #2
    ddf0:	d109      	bne.n	de06 <dn_serial_mg_sendRequest+0x1e>
   return dn_serial_sendRequestNoCheck(
    ddf2:	9d06      	ldr	r5, [sp, #24]
    ddf4:	e9cd 3500 	strd	r3, r5, [sp]
    ddf8:	4613      	mov	r3, r2
    ddfa:	f081 0201 	eor.w	r2, r1, #1
    ddfe:	f7ff ffa9 	bl	dd54 <dn_serial_sendRequestNoCheck>
}
    de02:	b003      	add	sp, #12
    de04:	bd30      	pop	{r4, r5, pc}
      return DN_ERR_NOT_CONNECTED;
    de06:	2002      	movs	r0, #2
    de08:	e7fb      	b.n	de02 <dn_serial_mg_sendRequest+0x1a>
    de0a:	bf00      	nop
    de0c:	20017e80 	.word	0x20017e80

0000de10 <dn_serial_mg_dispatch_response>:
            break;
      }
   }
}

void dn_serial_mg_dispatch_response(uint8_t cmdId, uint8_t* payload, uint8_t length) {
    de10:	b538      	push	{r3, r4, r5, lr}
   uint8_t rc;
   
   rc = payload[0];
   if (cmdId==dn_serial_mg_vars.replyCmdId && dn_serial_mg_vars.replyCb!=NULL) {
    de12:	4c08      	ldr	r4, [pc, #32]	; (de34 <dn_serial_mg_dispatch_response+0x24>)
    de14:	7923      	ldrb	r3, [r4, #4]
    de16:	4283      	cmp	r3, r0
    de18:	d10a      	bne.n	de30 <dn_serial_mg_dispatch_response+0x20>
    de1a:	68a5      	ldr	r5, [r4, #8]
    de1c:	b145      	cbz	r5, de30 <dn_serial_mg_dispatch_response+0x20>
      
      // call the callback
      (dn_serial_mg_vars.replyCb)(cmdId,rc,&payload[1],length-1);
    de1e:	1e53      	subs	r3, r2, #1
    de20:	460a      	mov	r2, r1
    de22:	b2db      	uxtb	r3, r3
    de24:	f812 1b01 	ldrb.w	r1, [r2], #1
    de28:	47a8      	blx	r5
      
      // reset
      dn_serial_mg_vars.replyCmdId   = 0x00;
    de2a:	2300      	movs	r3, #0
    de2c:	7123      	strb	r3, [r4, #4]
      dn_serial_mg_vars.replyCb      = NULL;
    de2e:	60a3      	str	r3, [r4, #8]
   }
}
    de30:	bd38      	pop	{r3, r4, r5, pc}
    de32:	bf00      	nop
    de34:	20017e80 	.word	0x20017e80

0000de38 <dn_serial_mg_rxHdlcFrame>:
   if (rxFrameLen<4) {
    de38:	2903      	cmp	r1, #3
void dn_serial_mg_rxHdlcFrame(uint8_t* rxFrame, uint8_t rxFrameLen) {
    de3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    de3e:	4681      	mov	r9, r0
   if (rxFrameLen<4) {
    de40:	d963      	bls.n	df0a <dn_serial_mg_rxHdlcFrame+0xd2>
   control    =  rxFrame[0];
    de42:	f890 8000 	ldrb.w	r8, [r0]
   cmdId      =  rxFrame[1];
    de46:	7847      	ldrb	r7, [r0, #1]
   if (isAck) {
    de48:	f018 0601 	ands.w	r6, r8, #1
   length     =  rxFrame[3];
    de4c:	78c5      	ldrb	r5, [r0, #3]
   payload    = &rxFrame[4];
    de4e:	f100 0104 	add.w	r1, r0, #4
   if (isAck) {
    de52:	d008      	beq.n	de66 <dn_serial_mg_rxHdlcFrame+0x2e>
      if (length>0) {
    de54:	2d00      	cmp	r5, #0
    de56:	d058      	beq.n	df0a <dn_serial_mg_rxHdlcFrame+0xd2>
         dn_serial_mg_dispatch_response(cmdId,payload,length);
    de58:	462a      	mov	r2, r5
    de5a:	4638      	mov	r0, r7
}
    de5c:	b003      	add	sp, #12
    de5e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
         dn_serial_mg_dispatch_response(cmdId,payload,length);
    de62:	f7ff bfd5 	b.w	de10 <dn_serial_mg_dispatch_response>
      if (dn_serial_mg_vars.rxPacketIdInit==TRUE && seqNum==dn_serial_mg_vars.rxPacketId) {
    de66:	4c2a      	ldr	r4, [pc, #168]	; (df10 <dn_serial_mg_rxHdlcFrame+0xd8>)
   seqNum     =  rxFrame[2];
    de68:	7883      	ldrb	r3, [r0, #2]
      if (dn_serial_mg_vars.rxPacketIdInit==TRUE && seqNum==dn_serial_mg_vars.rxPacketId) {
    de6a:	78a2      	ldrb	r2, [r4, #2]
    de6c:	b112      	cbz	r2, de74 <dn_serial_mg_rxHdlcFrame+0x3c>
    de6e:	78e2      	ldrb	r2, [r4, #3]
    de70:	429a      	cmp	r2, r3
    de72:	d02b      	beq.n	decc <dn_serial_mg_rxHdlcFrame+0x94>
         dn_serial_mg_vars.rxPacketIdInit   = TRUE;
    de74:	2201      	movs	r2, #1
         dn_serial_mg_vars.rxPacketId       = seqNum;
    de76:	70e3      	strb	r3, [r4, #3]
         dn_serial_mg_vars.rxPacketIdInit   = TRUE;
    de78:	70a2      	strb	r2, [r4, #2]
      if (shouldAck) {
    de7a:	f018 0f02 	tst.w	r8, #2
    de7e:	d014      	beq.n	deaa <dn_serial_mg_rxHdlcFrame+0x72>
    de80:	9101      	str	r1, [sp, #4]
         dn_hdlc_outputOpen();
    de82:	f7ff fc53 	bl	d72c <dn_hdlc_outputOpen>
         dn_hdlc_outputWrite(DN_SERIAL_FLAG_ACK | DN_SERIAL_FLAG_UNACKNOWLEDGED); // Control
    de86:	2001      	movs	r0, #1
    de88:	f7ff fc7e 	bl	d788 <dn_hdlc_outputWrite>
         dn_hdlc_outputWrite(cmdId);                                              // Packet Type
    de8c:	4638      	mov	r0, r7
    de8e:	f7ff fc7b 	bl	d788 <dn_hdlc_outputWrite>
         dn_hdlc_outputWrite(dn_serial_mg_vars.rxPacketId);                       // Seq. Number
    de92:	78e0      	ldrb	r0, [r4, #3]
    de94:	f7ff fc78 	bl	d788 <dn_hdlc_outputWrite>
         dn_hdlc_outputWrite(1);                                                  // Payload Length
    de98:	2001      	movs	r0, #1
    de9a:	f7ff fc75 	bl	d788 <dn_hdlc_outputWrite>
         dn_hdlc_outputWrite(0);                                                  // Payload (RC==0x00)
    de9e:	2000      	movs	r0, #0
    dea0:	f7ff fc72 	bl	d788 <dn_hdlc_outputWrite>
         dn_hdlc_outputClose();
    dea4:	f7ff fc8a 	bl	d7bc <dn_hdlc_outputClose>
    dea8:	9901      	ldr	r1, [sp, #4]
      switch (cmdId) {
    deaa:	2f02      	cmp	r7, #2
    deac:	d010      	beq.n	ded0 <dn_serial_mg_rxHdlcFrame+0x98>
    deae:	2f03      	cmp	r7, #3
    deb0:	d024      	beq.n	defc <dn_serial_mg_rxHdlcFrame+0xc4>
            if (length>0 && dn_serial_mg_vars.requestCb!=NULL && isRepeatId==FALSE) {
    deb2:	b355      	cbz	r5, df0a <dn_serial_mg_rxHdlcFrame+0xd2>
    deb4:	68e4      	ldr	r4, [r4, #12]
    deb6:	b344      	cbz	r4, df0a <dn_serial_mg_rxHdlcFrame+0xd2>
    deb8:	bb3e      	cbnz	r6, df0a <dn_serial_mg_rxHdlcFrame+0xd2>
               dn_serial_mg_vars.requestCb(cmdId,control,payload,length);
    deba:	460a      	mov	r2, r1
    debc:	462b      	mov	r3, r5
    debe:	4641      	mov	r1, r8
    dec0:	4638      	mov	r0, r7
    dec2:	46a4      	mov	ip, r4
}
    dec4:	b003      	add	sp, #12
    dec6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
               dn_serial_mg_vars.requestCb(cmdId,control,payload,length);
    deca:	4760      	bx	ip
         isRepeatId                         = TRUE;
    decc:	2601      	movs	r6, #1
    dece:	e7d4      	b.n	de7a <dn_serial_mg_rxHdlcFrame+0x42>
            if (
    ded0:	2d04      	cmp	r5, #4
    ded2:	d91a      	bls.n	df0a <dn_serial_mg_rxHdlcFrame+0xd2>
                  length>=5 &&
    ded4:	f899 3004 	ldrb.w	r3, [r9, #4]
    ded8:	b9bb      	cbnz	r3, df0a <dn_serial_mg_rxHdlcFrame+0xd2>
                  payload[HELLO_RESP_OFFS_RC]      == 0 &&
    deda:	f899 3005 	ldrb.w	r3, [r9, #5]
    dede:	2b04      	cmp	r3, #4
    dee0:	d113      	bne.n	df0a <dn_serial_mg_rxHdlcFrame+0xd2>
               dn_serial_mg_vars.rxPacketIdInit     = TRUE;
    dee2:	2301      	movs	r3, #1
    dee4:	70a3      	strb	r3, [r4, #2]
               dn_serial_mg_vars.rxPacketId         = payload[HELLO_RESP_OFFS_MGRSEQNO];
    dee6:	f899 3006 	ldrb.w	r3, [r9, #6]
               dn_serial_mg_vars.status = DN_SERIAL_ST_CONNECTED;
    deea:	7027      	strb	r7, [r4, #0]
               dn_serial_mg_vars.rxPacketId         = payload[HELLO_RESP_OFFS_MGRSEQNO];
    deec:	70e3      	strb	r3, [r4, #3]
               if (dn_serial_mg_vars.statusChangeCb) {
    deee:	6923      	ldr	r3, [r4, #16]
    def0:	b15b      	cbz	r3, df0a <dn_serial_mg_rxHdlcFrame+0xd2>
                  dn_serial_mg_vars.statusChangeCb(dn_serial_mg_vars.status);
    def2:	4638      	mov	r0, r7
}
    def4:	b003      	add	sp, #12
    def6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                   dn_serial_mg_vars.statusChangeCb(dn_serial_mg_vars.status);
    defa:	4718      	bx	r3
            if (
    defc:	2d01      	cmp	r5, #1
    defe:	d904      	bls.n	df0a <dn_serial_mg_rxHdlcFrame+0xd2>
               dn_serial_mg_vars.status = DN_SERIAL_ST_DISCONNECTED;
    df00:	2000      	movs	r0, #0
               if (dn_serial_mg_vars.statusChangeCb) {
    df02:	6923      	ldr	r3, [r4, #16]
               dn_serial_mg_vars.status = DN_SERIAL_ST_DISCONNECTED;
    df04:	7020      	strb	r0, [r4, #0]
               if (dn_serial_mg_vars.statusChangeCb) {
    df06:	2b00      	cmp	r3, #0
    df08:	d1f4      	bne.n	def4 <dn_serial_mg_rxHdlcFrame+0xbc>
}
    df0a:	b003      	add	sp, #12
    df0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    df10:	20017e80 	.word	0x20017e80

0000df14 <uart_cb>:
   }

} */

void uart_cb(struct device *x)
{
    df14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df18:	4604      	mov	r4, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
    df1a:	6883      	ldr	r3, [r0, #8]
    df1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    df1e:	b103      	cbz	r3, df22 <uart_cb+0xe>
		return api->irq_update(dev);
    df20:	4798      	blx	r3
	if (api->irq_rx_ready) {
    df22:	68a3      	ldr	r3, [r4, #8]
    df24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    df26:	b173      	cbz	r3, df46 <uart_cb+0x32>
		return api->irq_rx_ready(dev);
    df28:	4620      	mov	r0, r4
    df2a:	4798      	blx	r3
        //mandatory call to start processing interrupts
	uart_irq_update(x);
	int data_length = 0;

        //Check if UART RX buffer has a received char.
	if (uart_irq_rx_ready(x)) {
    df2c:	b158      	cbz	r0, df46 <uart_cb+0x32>
	if (api->fifo_read) {
    df2e:	68a3      	ldr	r3, [r4, #8]
    df30:	699b      	ldr	r3, [r3, #24]
    df32:	b11b      	cbz	r3, df3c <uart_cb+0x28>
		return api->fifo_read(dev, rx_data, size);
    df34:	2201      	movs	r2, #1
    df36:	4620      	mov	r0, r4
    df38:	4917      	ldr	r1, [pc, #92]	; (df98 <uart_cb+0x84>)
    df3a:	4798      	blx	r3
                //Read data from UART FIFO. Returns num of bytes read.
		data_length = uart_fifo_read(x, &uart_rx_buf[0], sizeof(uart_rx_buf[0]));
                //printk("received byte! -> %x\n", uart_rx_buf[0]); 
                dn_uart_vars.ipmt_uart_rxByte_cb(uart_rx_buf[0]);
    df3c:	4b17      	ldr	r3, [pc, #92]	; (df9c <uart_cb+0x88>)
    df3e:	4a16      	ldr	r2, [pc, #88]	; (df98 <uart_cb+0x84>)
    df40:	681b      	ldr	r3, [r3, #0]
    df42:	7810      	ldrb	r0, [r2, #0]
    df44:	4798      	blx	r3
	if (api->irq_tx_ready) {
    df46:	68a3      	ldr	r3, [r4, #8]
    df48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    df4a:	b31b      	cbz	r3, df94 <uart_cb+0x80>
		return api->irq_tx_ready(dev);
    df4c:	4620      	mov	r0, r4
    df4e:	4798      	blx	r3

	}
        //printk("%c\n",uart_rx_buf[0]);

        if (uart_irq_tx_ready(x)) {
    df50:	b300      	cbz	r0, df94 <uart_cb+0x80>
	if (api->fifo_fill) {
    df52:	68a3      	ldr	r3, [r4, #8]
    df54:	4e12      	ldr	r6, [pc, #72]	; (dfa0 <uart_cb+0x8c>)
    df56:	695d      	ldr	r5, [r3, #20]
    df58:	b125      	cbz	r5, df64 <uart_cb+0x50>
		return api->fifo_fill(dev, tx_data, size);
    df5a:	4620      	mov	r0, r4
    df5c:	7832      	ldrb	r2, [r6, #0]
    df5e:	4911      	ldr	r1, [pc, #68]	; (dfa4 <uart_cb+0x90>)
    df60:	47a8      	blx	r5
    df62:	4605      	mov	r5, r0
            //Fill FIFO with data. Returns the num of bytes sent.
            
           /****************VA BIEN ******************************/
            int written = uart_fifo_fill(x, &uart_tx_buf[0], idx_tx_buf);
            while (idx_tx_buf > written) {
		written += uart_fifo_fill(x, &uart_tx_buf[written], idx_tx_buf - written);
    df64:	4f0f      	ldr	r7, [pc, #60]	; (dfa4 <uart_cb+0x90>)
            while (idx_tx_buf > written) {
    df66:	7832      	ldrb	r2, [r6, #0]
    df68:	4295      	cmp	r5, r2
    df6a:	db08      	blt.n	df7e <uart_cb+0x6a>
            }
            idx_tx_buf = 0;
    df6c:	2300      	movs	r3, #0
    df6e:	7033      	strb	r3, [r6, #0]
	if (api->irq_tx_disable) {
    df70:	68a3      	ldr	r3, [r4, #8]
    df72:	6a1b      	ldr	r3, [r3, #32]
    df74:	b173      	cbz	r3, df94 <uart_cb+0x80>
		api->irq_tx_disable(dev);
    df76:	4620      	mov	r0, r4
            uart_irq_tx_disable(x);
            /***************VA BIEN******************************/
           
        }
	
}
    df78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    df7c:	4718      	bx	r3
	if (api->fifo_fill) {
    df7e:	68a3      	ldr	r3, [r4, #8]
    df80:	695b      	ldr	r3, [r3, #20]
    df82:	b12b      	cbz	r3, df90 <uart_cb+0x7c>
		return api->fifo_fill(dev, tx_data, size);
    df84:	4620      	mov	r0, r4
    df86:	1b52      	subs	r2, r2, r5
    df88:	1979      	adds	r1, r7, r5
    df8a:	4798      	blx	r3
		written += uart_fifo_fill(x, &uart_tx_buf[written], idx_tx_buf - written);
    df8c:	4405      	add	r5, r0
    df8e:	e7ea      	b.n	df66 <uart_cb+0x52>
	return 0;
    df90:	4618      	mov	r0, r3
    df92:	e7fb      	b.n	df8c <uart_cb+0x78>
}
    df94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df98:	20019013 	.word	0x20019013
    df9c:	20017e94 	.word	0x20017e94
    dfa0:	20019012 	.word	0x20019012
    dfa4:	20019413 	.word	0x20019413

0000dfa8 <dn_uart_init>:
//=========================== public ==========================================

void dn_uart_init(dn_uart_rxByte_cbt rxByte_cb){
   

    dn_uart_vars.ipmt_uart_rxByte_cb = rxByte_cb;
    dfa8:	4b0b      	ldr	r3, [pc, #44]	; (dfd8 <dn_uart_init+0x30>)
void dn_uart_init(dn_uart_rxByte_cbt rxByte_cb){
    dfaa:	b510      	push	{r4, lr}
    dn_uart_vars.ipmt_uart_rxByte_cb = rxByte_cb;
    dfac:	6018      	str	r0, [r3, #0]
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    dfae:	480b      	ldr	r0, [pc, #44]	; (dfdc <dn_uart_init+0x34>)
    dfb0:	f00b fb5c 	bl	1966c <z_impl_device_get_binding>


    //tell to nrf9160dk which UART is used.
    uart_dev = device_get_binding("UART_1");
    dfb4:	4c0a      	ldr	r4, [pc, #40]	; (dfe0 <dn_uart_init+0x38>)
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    dfb6:	6882      	ldr	r2, [r0, #8]
    dfb8:	6020      	str	r0, [r4, #0]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    dfba:	b122      	cbz	r2, dfc6 <dn_uart_init+0x1e>
    dfbc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dfbe:	b113      	cbz	r3, dfc6 <dn_uart_init+0x1e>
		api->irq_callback_set(dev, cb, user_data);
    dfc0:	2200      	movs	r2, #0
    dfc2:	4908      	ldr	r1, [pc, #32]	; (dfe4 <dn_uart_init+0x3c>)
    dfc4:	4798      	blx	r3
     */
 
    //bind the uart port used with its callback
    uart_irq_callback_set(uart_dev, uart_cb);
    //The callback is called when rx event happens.
    uart_irq_rx_enable(uart_dev);
    dfc6:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable) {
    dfc8:	6883      	ldr	r3, [r0, #8]
    dfca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dfcc:	b113      	cbz	r3, dfd4 <dn_uart_init+0x2c>
    
   

}
    dfce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		api->irq_rx_enable(dev);
    dfd2:	4718      	bx	r3
    dfd4:	bd10      	pop	{r4, pc}
    dfd6:	bf00      	nop
    dfd8:	20017e94 	.word	0x20017e94
    dfdc:	00021618 	.word	0x00021618
    dfe0:	20017e98 	.word	0x20017e98
    dfe4:	0000df15 	.word	0x0000df15

0000dfe8 <dn_uart_txByte>:

void dn_uart_txByte(uint8_t byte){

    //uart_tx(uart_dev, &byte, 1, SYS_FOREVER_MS);

    uart_tx_buf[idx_tx_buf] = byte;
    dfe8:	4a03      	ldr	r2, [pc, #12]	; (dff8 <dn_uart_txByte+0x10>)
    dfea:	4904      	ldr	r1, [pc, #16]	; (dffc <dn_uart_txByte+0x14>)
    dfec:	7813      	ldrb	r3, [r2, #0]
    dfee:	54c8      	strb	r0, [r1, r3]
    ++idx_tx_buf;
    dff0:	3301      	adds	r3, #1
    dff2:	7013      	strb	r3, [r2, #0]
    /****** VA BIEN *******/
    //uart_tx_buf[0] = byte;
    //uart_irq_tx_enable(uart_dev);
    //uart_irq_tx_disable(uart_dev);
    /******* VA BIEN *****/
}
    dff4:	4770      	bx	lr
    dff6:	bf00      	nop
    dff8:	20019012 	.word	0x20019012
    dffc:	20019413 	.word	0x20019413

0000e000 <dn_uart_txFlush>:

void dn_uart_txFlush(){
   uart_irq_tx_enable(uart_dev);
    e000:	4b03      	ldr	r3, [pc, #12]	; (e010 <dn_uart_txFlush+0x10>)
    e002:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable) {
    e004:	6883      	ldr	r3, [r0, #8]
    e006:	69db      	ldr	r3, [r3, #28]
    e008:	b103      	cbz	r3, e00c <dn_uart_txFlush+0xc>
		api->irq_tx_enable(dev);
    e00a:	4718      	bx	r3
   // nothing to do since MSP430 driver is byte-oriented
}
    e00c:	4770      	bx	lr
    e00e:	bf00      	nop
    e010:	20017e98 	.word	0x20017e98

0000e014 <dn_ipmg_reply_cb>:
   k_mutex_unlock(&my_mutex_2);
}

void dn_ipmg_reply_cb(uint8_t cmdId) 
{
   app_vars.replyCb();
    e014:	4b01      	ldr	r3, [pc, #4]	; (e01c <dn_ipmg_reply_cb+0x8>)
    e016:	685b      	ldr	r3, [r3, #4]
    e018:	4718      	bx	r3
    e01a:	bf00      	nop
    e01c:	20017e9c 	.word	0x20017e9c

0000e020 <timer_interrupt>:
}

void timer_interrupt(struct k_timer *dummy)
{
   //Call the callback function set in fsm_scheduleEvent()
   app_vars.fsmCb();
    e020:	4b01      	ldr	r3, [pc, #4]	; (e028 <timer_interrupt+0x8>)
    e022:	681b      	ldr	r3, [r3, #0]
    e024:	4718      	bx	r3
    e026:	bf00      	nop
    e028:	20017e9c 	.word	0x20017e9c

0000e02c <fsm_scheduleEvent>:
   app_vars.fsmCb       = cb;
    e02c:	4b0d      	ldr	r3, [pc, #52]	; (e064 <fsm_scheduleEvent+0x38>)
{   
    e02e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   app_vars.fsmCb       = cb;
    e030:	6019      	str	r1, [r3, #0]
    e032:	f240 34e7 	movw	r4, #999	; 0x3e7
    e036:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    e03a:	2500      	movs	r5, #0
    e03c:	fbe0 4501 	umlal	r4, r5, r0, r1
    e040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e044:	2300      	movs	r3, #0
    e046:	4620      	mov	r0, r4
    e048:	4629      	mov	r1, r5
    e04a:	f7fe fdef 	bl	cc2c <__aeabi_uldivmod>
    e04e:	4602      	mov	r2, r0
    e050:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    e052:	2100      	movs	r1, #0
    e054:	2000      	movs	r0, #0
    e056:	e9cd 0100 	strd	r0, r1, [sp]
    e05a:	4803      	ldr	r0, [pc, #12]	; (e068 <fsm_scheduleEvent+0x3c>)
    e05c:	f00c fd8e 	bl	1ab7c <z_impl_k_timer_start>
}
    e060:	b003      	add	sp, #12
    e062:	bd30      	pop	{r4, r5, pc}
    e064:	20017e9c 	.word	0x20017e9c
    e068:	20014730 	.word	0x20014730

0000e06c <Dusty_thread>:
{
    e06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e070:	b084      	sub	sp, #16
    e072:	af02      	add	r7, sp, #8
   init_data_buffer();
    e074:	f7ff fae0 	bl	d638 <init_data_buffer>
   memset(&app_vars, 0, sizeof(app_vars));
    e078:	f44f 7284 	mov.w	r2, #264	; 0x108
    e07c:	2100      	movs	r1, #0
    e07e:	4821      	ldr	r0, [pc, #132]	; (e104 <Dusty_thread+0x98>)
    e080:	f012 fae8 	bl	20654 <memset>
   dn_ipmg_init(
    e084:	4b20      	ldr	r3, [pc, #128]	; (e108 <Dusty_thread+0x9c>)
    e086:	2280      	movs	r2, #128	; 0x80
    e088:	4920      	ldr	r1, [pc, #128]	; (e10c <Dusty_thread+0xa0>)
    e08a:	4821      	ldr	r0, [pc, #132]	; (e110 <Dusty_thread+0xa4>)
    e08c:	9300      	str	r3, [sp, #0]
    e08e:	4b21      	ldr	r3, [pc, #132]	; (e114 <Dusty_thread+0xa8>)
    e090:	f7ff fdee 	bl	dc70 <dn_ipmg_init>
   fsm_scheduleEvent(CMD_PERIOD, &api_initiateConnect);
    e094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    e098:	491f      	ldr	r1, [pc, #124]	; (e118 <Dusty_thread+0xac>)
    e09a:	f7ff ffc7 	bl	e02c <fsm_scheduleEvent>
    e09e:	4c1f      	ldr	r4, [pc, #124]	; (e11c <Dusty_thread+0xb0>)
    e0a0:	4b1f      	ldr	r3, [pc, #124]	; (e120 <Dusty_thread+0xb4>)
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
    e0a2:	4e20      	ldr	r6, [pc, #128]	; (e124 <Dusty_thread+0xb8>)
    e0a4:	1ae4      	subs	r4, r4, r3
    e0a6:	08e4      	lsrs	r4, r4, #3
        LOG_INF("[DUSTY_Thread] data read from FIFO successfully!");
    e0a8:	01a4      	lsls	r4, r4, #6
    e0aa:	f044 0403 	orr.w	r4, r4, #3
    e0ae:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e0b2:	2300      	movs	r3, #0
    e0b4:	4630      	mov	r0, r6
    e0b6:	1d39      	adds	r1, r7, #4
    e0b8:	f00b fd24 	bl	19b04 <z_impl_k_msgq_get>
      if (ret == SUCCESS){ //success #define
    e0bc:	b245      	sxtb	r5, r0
    e0be:	2d00      	cmp	r5, #0
    e0c0:	d1f5      	bne.n	e0ae <Dusty_thread+0x42>
        LOG_INF("[DUSTY_Thread] data read from FIFO successfully!");
    e0c2:	4621      	mov	r1, r4
    e0c4:	4818      	ldr	r0, [pc, #96]	; (e128 <Dusty_thread+0xbc>)
    e0c6:	f00e fa9f 	bl	1c608 <log_0>
        char rx_data_arr[rx_data.data->len+1];
    e0ca:	6879      	ldr	r1, [r7, #4]
      if (ret == SUCCESS){ //success #define
    e0cc:	46e8      	mov	r8, sp
        char rx_data_arr[rx_data.data->len+1];
    e0ce:	684a      	ldr	r2, [r1, #4]
    e0d0:	3108      	adds	r1, #8
    e0d2:	f102 0308 	add.w	r3, r2, #8
    e0d6:	f023 0307 	bic.w	r3, r3, #7
    e0da:	ebad 0d03 	sub.w	sp, sp, r3
    e0de:	ab02      	add	r3, sp, #8
        rx_data_arr[rx_data.data->len] = ENDSTR;
    e0e0:	549d      	strb	r5, [r3, r2]
    e0e2:	f851 2c04 	ldr.w	r2, [r1, #-4]
    e0e6:	4618      	mov	r0, r3
    e0e8:	f012 faa7 	bl	2063a <memcpy>
        LOG_INF("[DUSTY_Thread] Received from MQTT Thread: %s", log_strdup(rx_data_arr));
    e0ec:	f001 ffd2 	bl	10094 <log_strdup>
    e0f0:	4622      	mov	r2, r4
    e0f2:	4601      	mov	r1, r0
    e0f4:	480d      	ldr	r0, [pc, #52]	; (e12c <Dusty_thread+0xc0>)
    e0f6:	f00e fa96 	bl	1c626 <log_1>
        free_data_buffer_item(rx_data.data);
    e0fa:	6878      	ldr	r0, [r7, #4]
    e0fc:	f7ff faee 	bl	d6dc <free_data_buffer_item>
    e100:	46c5      	mov	sp, r8
   while(1){   
    e102:	e7d4      	b.n	e0ae <Dusty_thread+0x42>
    e104:	20017e9c 	.word	0x20017e9c
    e108:	0000e231 	.word	0x0000e231
    e10c:	20017f24 	.word	0x20017f24
    e110:	0000eae1 	.word	0x0000eae1
    e114:	0000e015 	.word	0x0000e015
    e118:	0000e169 	.word	0x0000e169
    e11c:	00020e58 	.word	0x00020e58
    e120:	00020e58 	.word	0x00020e58
    e124:	20014858 	.word	0x20014858
    e128:	0002161f 	.word	0x0002161f
    e12c:	00021650 	.word	0x00021650

0000e130 <api_response_timeout>:
{
    e130:	b508      	push	{r3, lr}
    e132:	4909      	ldr	r1, [pc, #36]	; (e158 <api_response_timeout+0x28>)
    e134:	4b09      	ldr	r3, [pc, #36]	; (e15c <api_response_timeout+0x2c>)
   LOG_ERR("[DUSTY_Thread] API response timeout! Reconnecting...");
    e136:	480a      	ldr	r0, [pc, #40]	; (e160 <api_response_timeout+0x30>)
    e138:	1ac9      	subs	r1, r1, r3
    e13a:	08c9      	lsrs	r1, r1, #3
    e13c:	0189      	lsls	r1, r1, #6
    e13e:	f041 0101 	orr.w	r1, r1, #1
    e142:	f00e fa61 	bl	1c608 <log_0>
   dn_ipmg_cancelTx();
    e146:	f7ff fdb1 	bl	dcac <dn_ipmg_cancelTx>
}
    e14a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   fsm_scheduleEvent(BACKOFF_AFTER_TIMEOUT,api_initiateConnect);  
    e14e:	2000      	movs	r0, #0
    e150:	4904      	ldr	r1, [pc, #16]	; (e164 <api_response_timeout+0x34>)
    e152:	f7ff bf6b 	b.w	e02c <fsm_scheduleEvent>
    e156:	bf00      	nop
    e158:	00020e58 	.word	0x00020e58
    e15c:	00020e58 	.word	0x00020e58
    e160:	0002167d 	.word	0x0002167d
    e164:	0000e169 	.word	0x0000e169

0000e168 <api_initiateConnect>:
{
    e168:	b508      	push	{r3, lr}
    e16a:	4909      	ldr	r1, [pc, #36]	; (e190 <api_initiateConnect+0x28>)
    e16c:	4b09      	ldr	r3, [pc, #36]	; (e194 <api_initiateConnect+0x2c>)
   LOG_INF("[DUSTY_Thread] Initiating connection...");
    e16e:	480a      	ldr	r0, [pc, #40]	; (e198 <api_initiateConnect+0x30>)
    e170:	1ac9      	subs	r1, r1, r3
    e172:	08c9      	lsrs	r1, r1, #3
    e174:	0189      	lsls	r1, r1, #6
    e176:	f041 0103 	orr.w	r1, r1, #3
    e17a:	f00e fa45 	bl	1c608 <log_0>
   dn_ipmg_initiateConnect();
    e17e:	f00d fde1 	bl	1bd44 <dn_ipmg_initiateConnect>
}
    e182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   fsm_scheduleEvent(
    e186:	2028      	movs	r0, #40	; 0x28
    e188:	4904      	ldr	r1, [pc, #16]	; (e19c <api_initiateConnect+0x34>)
    e18a:	f7ff bf4f 	b.w	e02c <fsm_scheduleEvent>
    e18e:	bf00      	nop
    e190:	00020e58 	.word	0x00020e58
    e194:	00020e58 	.word	0x00020e58
    e198:	000216b2 	.word	0x000216b2
    e19c:	0000e131 	.word	0x0000e131

0000e1a0 <api_subscribe>:
{
    e1a0:	b508      	push	{r3, lr}
    e1a2:	490c      	ldr	r1, [pc, #48]	; (e1d4 <api_subscribe+0x34>)
    e1a4:	4b0c      	ldr	r3, [pc, #48]	; (e1d8 <api_subscribe+0x38>)
   LOG_INF("[DUSTY_Thread] Subscribing to data notifications...");
    e1a6:	480d      	ldr	r0, [pc, #52]	; (e1dc <api_subscribe+0x3c>)
    e1a8:	1ac9      	subs	r1, r1, r3
    e1aa:	08c9      	lsrs	r1, r1, #3
    e1ac:	0189      	lsls	r1, r1, #6
    e1ae:	f041 0103 	orr.w	r1, r1, #3
    e1b2:	f00e fa29 	bl	1c608 <log_0>
   app_vars.replyCb     = cb;
    e1b6:	4b0a      	ldr	r3, [pc, #40]	; (e1e0 <api_subscribe+0x40>)
    e1b8:	4a0a      	ldr	r2, [pc, #40]	; (e1e4 <api_subscribe+0x44>)
   dn_ipmg_subscribe(
    e1ba:	2100      	movs	r1, #0
   app_vars.replyCb     = cb;
    e1bc:	6053      	str	r3, [r2, #4]
   dn_ipmg_subscribe(
    e1be:	f04f 30ff 	mov.w	r0, #4294967295
    e1c2:	3208      	adds	r2, #8
    e1c4:	f7ff fd80 	bl	dcc8 <dn_ipmg_subscribe>
}
    e1c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   fsm_scheduleEvent(
    e1cc:	2028      	movs	r0, #40	; 0x28
    e1ce:	4906      	ldr	r1, [pc, #24]	; (e1e8 <api_subscribe+0x48>)
    e1d0:	f7ff bf2c 	b.w	e02c <fsm_scheduleEvent>
    e1d4:	00020e58 	.word	0x00020e58
    e1d8:	00020e58 	.word	0x00020e58
    e1dc:	000216da 	.word	0x000216da
    e1e0:	0000e205 	.word	0x0000e205
    e1e4:	20017e9c 	.word	0x20017e9c
    e1e8:	0000e131 	.word	0x0000e131

0000e1ec <fsm_cancelEvent>:
{
    e1ec:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
    e1ee:	4803      	ldr	r0, [pc, #12]	; (e1fc <fsm_cancelEvent+0x10>)
    e1f0:	f012 f845 	bl	2027e <z_impl_k_timer_stop>
   app_vars.fsmCb       = NULL;
    e1f4:	2200      	movs	r2, #0
    e1f6:	4b02      	ldr	r3, [pc, #8]	; (e200 <fsm_cancelEvent+0x14>)
    e1f8:	601a      	str	r2, [r3, #0]
}
    e1fa:	bd08      	pop	{r3, pc}
    e1fc:	20014730 	.word	0x20014730
    e200:	20017e9c 	.word	0x20017e9c

0000e204 <api_subscribe_reply>:
{
    e204:	b508      	push	{r3, lr}
   fsm_cancelEvent();
    e206:	f7ff fff1 	bl	e1ec <fsm_cancelEvent>
    e20a:	4b06      	ldr	r3, [pc, #24]	; (e224 <api_subscribe_reply+0x20>)
    e20c:	4906      	ldr	r1, [pc, #24]	; (e228 <api_subscribe_reply+0x24>)
   LOG_INF("[DUSTY_Thread] SUBSCRIBED to data notifications succesfully!\n");
    e20e:	4807      	ldr	r0, [pc, #28]	; (e22c <api_subscribe_reply+0x28>)
    e210:	1ac9      	subs	r1, r1, r3
    e212:	08c9      	lsrs	r1, r1, #3
    e214:	0189      	lsls	r1, r1, #6
    e216:	f041 0103 	orr.w	r1, r1, #3
}
    e21a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   LOG_INF("[DUSTY_Thread] SUBSCRIBED to data notifications succesfully!\n");
    e21e:	f00e b9f3 	b.w	1c608 <log_0>
    e222:	bf00      	nop
    e224:	00020e58 	.word	0x00020e58
    e228:	00020e58 	.word	0x00020e58
    e22c:	0002170e 	.word	0x0002170e

0000e230 <dn_ipmg_status_cb>:
{
    e230:	b510      	push	{r4, lr}
   switch (newStatus) {
    e232:	b198      	cbz	r0, e25c <dn_ipmg_status_cb+0x2c>
    e234:	2802      	cmp	r0, #2
    e236:	d11d      	bne.n	e274 <dn_ipmg_status_cb+0x44>
         fsm_cancelEvent();
    e238:	f7ff ffd8 	bl	e1ec <fsm_cancelEvent>
    e23c:	4b0e      	ldr	r3, [pc, #56]	; (e278 <dn_ipmg_status_cb+0x48>)
    e23e:	490f      	ldr	r1, [pc, #60]	; (e27c <dn_ipmg_status_cb+0x4c>)
         LOG_INF("[DUSTY_Thread] CONNECTED succesfully!");
    e240:	480f      	ldr	r0, [pc, #60]	; (e280 <dn_ipmg_status_cb+0x50>)
    e242:	1ac9      	subs	r1, r1, r3
    e244:	08c9      	lsrs	r1, r1, #3
    e246:	0189      	lsls	r1, r1, #6
    e248:	f041 0103 	orr.w	r1, r1, #3
    e24c:	f00e f9dc 	bl	1c608 <log_0>
         fsm_scheduleEvent(
    e250:	490c      	ldr	r1, [pc, #48]	; (e284 <dn_ipmg_status_cb+0x54>)
    e252:	2000      	movs	r0, #0
}
    e254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
         fsm_scheduleEvent(
    e258:	f7ff bee8 	b.w	e02c <fsm_scheduleEvent>
    e25c:	4b06      	ldr	r3, [pc, #24]	; (e278 <dn_ipmg_status_cb+0x48>)
    e25e:	4907      	ldr	r1, [pc, #28]	; (e27c <dn_ipmg_status_cb+0x4c>)
         LOG_ERR("[DUSTY_Thread] DISCONNECTED! Reconnecting...");
    e260:	4809      	ldr	r0, [pc, #36]	; (e288 <dn_ipmg_status_cb+0x58>)
    e262:	1ac9      	subs	r1, r1, r3
    e264:	08c9      	lsrs	r1, r1, #3
    e266:	0189      	lsls	r1, r1, #6
    e268:	f041 0101 	orr.w	r1, r1, #1
    e26c:	f00e f9cc 	bl	1c608 <log_0>
         fsm_scheduleEvent(
    e270:	4906      	ldr	r1, [pc, #24]	; (e28c <dn_ipmg_status_cb+0x5c>)
    e272:	e7ee      	b.n	e252 <dn_ipmg_status_cb+0x22>
}
    e274:	bd10      	pop	{r4, pc}
    e276:	bf00      	nop
    e278:	00020e58 	.word	0x00020e58
    e27c:	00020e58 	.word	0x00020e58
    e280:	0002174c 	.word	0x0002174c
    e284:	0000e1a1 	.word	0x0000e1a1
    e288:	00021772 	.word	0x00021772
    e28c:	0000e169 	.word	0x0000e169

0000e290 <data_publish>:
 * Then, these data are pushed into the downstream FIFO in order to be managed by the Dusty Thread.
 * While there are no data to be received from a topic, the thread tries to read the upstream FIFO indefinitely 
 * to publish pending information received from the Dusty manager
 */
int data_publish(struct mqtt_client *c, enum mqtt_qos qos, uint8_t *data, size_t len) 
{
    e290:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct mqtt_publish_param param;
  param.message.topic.qos = qos; //qos = 1
  param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    e292:	4d17      	ldr	r5, [pc, #92]	; (e2f0 <data_publish+0x60>)
{
    e294:	b087      	sub	sp, #28
    e296:	4606      	mov	r6, r0
  param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    e298:	4628      	mov	r0, r5
{
    e29a:	4617      	mov	r7, r2
    e29c:	461c      	mov	r4, r3
  param.message.topic.qos = qos; //qos = 1
    e29e:	f88d 1008 	strb.w	r1, [sp, #8]
  param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    e2a2:	9500      	str	r5, [sp, #0]
  param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    e2a4:	f7fe fe46 	bl	cf34 <strlen>
  param.message.payload.data = data;
  param.message.payload.len = len;
    e2a8:	e9cd 7403 	strd	r7, r4, [sp, #12]
  param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    e2ac:	9001      	str	r0, [sp, #4]
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
    e2ae:	f003 ffa7 	bl	12200 <z_impl_sys_rand32_get>
  param.message_id = sys_rand32_get();
  param.dup_flag = MQTT_PUBLISH_FLAG;
    e2b2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    e2b6:	4c0f      	ldr	r4, [pc, #60]	; (e2f4 <data_publish+0x64>)
    e2b8:	f023 0303 	bic.w	r3, r3, #3
    e2bc:	f88d 3016 	strb.w	r3, [sp, #22]
    e2c0:	4b0d      	ldr	r3, [pc, #52]	; (e2f8 <data_publish+0x68>)
  param.message_id = sys_rand32_get();
    e2c2:	f8ad 0014 	strh.w	r0, [sp, #20]
  param.retain_flag = MQTT_PUBLISH_FLAG; //retain = 0
  LOG_INF("[MQTT_Thread] to topic: %s len: %u\n", CONFIG_MQTT_PUB_TOPIC, (unsigned int)strlen(CONFIG_MQTT_PUB_TOPIC));
    e2c6:	4628      	mov	r0, r5
    e2c8:	1ae4      	subs	r4, r4, r3
    e2ca:	f7fe fe33 	bl	cf34 <strlen>
    e2ce:	08e4      	lsrs	r4, r4, #3
    e2d0:	01a4      	lsls	r4, r4, #6
    e2d2:	f044 0403 	orr.w	r4, r4, #3
    e2d6:	4602      	mov	r2, r0
    e2d8:	4623      	mov	r3, r4
    e2da:	4629      	mov	r1, r5
    e2dc:	4807      	ldr	r0, [pc, #28]	; (e2fc <data_publish+0x6c>)
    e2de:	f00e f9b9 	bl	1c654 <log_2>
  return mqtt_publish(c, &param);
    e2e2:	4669      	mov	r1, sp
    e2e4:	4630      	mov	r0, r6
    e2e6:	f00f fa5f 	bl	1d7a8 <mqtt_publish>
}
    e2ea:	b007      	add	sp, #28
    e2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2ee:	bf00      	nop
    e2f0:	0002179f 	.word	0x0002179f
    e2f4:	00020e58 	.word	0x00020e58
    e2f8:	00020e58 	.word	0x00020e58
    e2fc:	000217b2 	.word	0x000217b2

0000e300 <subscribe>:

// Function to subscribe to the configured topic
int subscribe(void) 
{
    e300:	b530      	push	{r4, r5, lr}
  struct mqtt_topic subscribe_topic = {
    e302:	4d12      	ldr	r5, [pc, #72]	; (e34c <subscribe+0x4c>)
{
    e304:	b087      	sub	sp, #28
      .topic = { .utf8 = CONFIG_MQTT_SUB_TOPIC,
                 .size = strlen(CONFIG_MQTT_SUB_TOPIC)},
    e306:	4628      	mov	r0, r5
  struct mqtt_topic subscribe_topic = {
    e308:	9503      	str	r5, [sp, #12]
                 .size = strlen(CONFIG_MQTT_SUB_TOPIC)},
    e30a:	f7fe fe13 	bl	cf34 <strlen>
  struct mqtt_topic subscribe_topic = {
    e30e:	2301      	movs	r3, #1
    e310:	f88d 3014 	strb.w	r3, [sp, #20]
                 .qos = MQTT_QOS_1_AT_LEAST_ONCE};
  const struct mqtt_subscription_list subscription_list = { .list = &subscribe_topic,
    e314:	ab03      	add	r3, sp, #12
    e316:	9301      	str	r3, [sp, #4]
    e318:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e31c:	4c0c      	ldr	r4, [pc, #48]	; (e350 <subscribe+0x50>)
    e31e:	9302      	str	r3, [sp, #8]
    e320:	4b0c      	ldr	r3, [pc, #48]	; (e354 <subscribe+0x54>)
  struct mqtt_topic subscribe_topic = {
    e322:	9004      	str	r0, [sp, #16]
                                                            .list_count = MQTT_SUBSCRIPTION_COUNT,
                                                            .message_id = MQTT_SUBSCRIPTION_MSG_ID};
  LOG_INF("[MQTT_Thread] Subscribing to: %s len %u\n", CONFIG_MQTT_SUB_TOPIC, (unsigned int)strlen(CONFIG_MQTT_SUB_TOPIC));
    e324:	4628      	mov	r0, r5
    e326:	1ae4      	subs	r4, r4, r3
    e328:	f7fe fe04 	bl	cf34 <strlen>
    e32c:	08e4      	lsrs	r4, r4, #3
    e32e:	01a4      	lsls	r4, r4, #6
    e330:	f044 0403 	orr.w	r4, r4, #3
    e334:	4602      	mov	r2, r0
    e336:	4623      	mov	r3, r4
    e338:	4629      	mov	r1, r5
    e33a:	4807      	ldr	r0, [pc, #28]	; (e358 <subscribe+0x58>)
    e33c:	f00e f98a 	bl	1c654 <log_2>
  return mqtt_subscribe(&client, &subscription_list);
    e340:	a901      	add	r1, sp, #4
    e342:	4806      	ldr	r0, [pc, #24]	; (e35c <subscribe+0x5c>)
    e344:	f00f fa9e 	bl	1d884 <mqtt_subscribe>
}
    e348:	b007      	add	sp, #28
    e34a:	bd30      	pop	{r4, r5, pc}
    e34c:	000217d6 	.word	0x000217d6
    e350:	00020e58 	.word	0x00020e58
    e354:	00020e58 	.word	0x00020e58
    e358:	000217e9 	.word	0x000217e9
    e35c:	20017fa4 	.word	0x20017fa4

0000e360 <publish_get_payload>:

// Function to read the published payload.
int publish_get_payload(struct mqtt_client *c, size_t length) 
{
    e360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int8_t err;
  uint8_t *buf = payload_buf;
  uint8_t *end = buf + length;
    e364:	4f1d      	ldr	r7, [pc, #116]	; (e3dc <publish_get_payload+0x7c>)
  if (length > sizeof(payload_buf)) {
    e366:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
{
    e36a:	4605      	mov	r5, r0
  uint8_t *end = buf + length;
    e36c:	eb07 0601 	add.w	r6, r7, r1
  if (length > sizeof(payload_buf)) {
    e370:	d831      	bhi.n	e3d6 <publish_get_payload+0x76>
    e372:	4c1b      	ldr	r4, [pc, #108]	; (e3e0 <publish_get_payload+0x80>)
    e374:	4b1b      	ldr	r3, [pc, #108]	; (e3e4 <publish_get_payload+0x84>)
    int ret = mqtt_read_publish_payload(c, buf, end - buf);
    if (ret < SUCCESS) {
      if (ret != -EAGAIN) {
        return ret;
      }
      LOG_ERR("[MQTT_Thread] mqtt_read_publish_payload: EAGAIN");
    e376:	f8df 8070 	ldr.w	r8, [pc, #112]	; e3e8 <publish_get_payload+0x88>
    e37a:	1ae4      	subs	r4, r4, r3
    e37c:	08e4      	lsrs	r4, r4, #3
    e37e:	01a4      	lsls	r4, r4, #6
    e380:	f044 0401 	orr.w	r4, r4, #1
  while (buf < end) {
    e384:	42b7      	cmp	r7, r6
    e386:	d301      	bcc.n	e38c <publish_get_payload+0x2c>
    if (ret == SUCCESS) {
      return -EIO;
    }
    buf += ret;
  }
  return SUCCESS;
    e388:	2000      	movs	r0, #0
    e38a:	e01a      	b.n	e3c2 <publish_get_payload+0x62>
    int ret = mqtt_read_publish_payload(c, buf, end - buf);
    e38c:	4639      	mov	r1, r7
    e38e:	4628      	mov	r0, r5
    e390:	1bf2      	subs	r2, r6, r7
    e392:	f00f fb25 	bl	1d9e0 <mqtt_read_publish_payload>
    if (ret < SUCCESS) {
    e396:	2800      	cmp	r0, #0
    e398:	da1a      	bge.n	e3d0 <publish_get_payload+0x70>
      if (ret != -EAGAIN) {
    e39a:	f110 0f0b 	cmn.w	r0, #11
    e39e:	d110      	bne.n	e3c2 <publish_get_payload+0x62>
      LOG_ERR("[MQTT_Thread] mqtt_read_publish_payload: EAGAIN");
    e3a0:	4621      	mov	r1, r4
    e3a2:	4640      	mov	r0, r8
    e3a4:	f00e f930 	bl	1c608 <log_0>
	return z_impl_zsock_poll(fds, nfds, timeout);
    e3a8:	f8df 9040 	ldr.w	r9, [pc, #64]	; e3ec <publish_get_payload+0x8c>
    e3ac:	f64e 2260 	movw	r2, #60000	; 0xea60
    e3b0:	2101      	movs	r1, #1
    e3b2:	4648      	mov	r0, r9
    e3b4:	f002 fae6 	bl	10984 <z_impl_zsock_poll>
      if (err > SUCCESS && (fds.revents & POLLIN) == POLLIN) {
    e3b8:	b240      	sxtb	r0, r0
    e3ba:	2800      	cmp	r0, #0
    e3bc:	dc03      	bgt.n	e3c6 <publish_get_payload+0x66>
        return -EIO;
    e3be:	f06f 0004 	mvn.w	r0, #4
}
    e3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (err > SUCCESS && (fds.revents & POLLIN) == POLLIN) {
    e3c6:	f8b9 3006 	ldrh.w	r3, [r9, #6]
    e3ca:	07db      	lsls	r3, r3, #31
    e3cc:	d4da      	bmi.n	e384 <publish_get_payload+0x24>
    e3ce:	e7f6      	b.n	e3be <publish_get_payload+0x5e>
    if (ret == SUCCESS) {
    e3d0:	d0f5      	beq.n	e3be <publish_get_payload+0x5e>
    buf += ret;
    e3d2:	4407      	add	r7, r0
    e3d4:	e7d6      	b.n	e384 <publish_get_payload+0x24>
    return -EMSGSIZE;
    e3d6:	f06f 0079 	mvn.w	r0, #121	; 0x79
    e3da:	e7f2      	b.n	e3c2 <publish_get_payload+0x62>
    e3dc:	20019814 	.word	0x20019814
    e3e0:	00020e58 	.word	0x00020e58
    e3e4:	00020e58 	.word	0x00020e58
    e3e8:	00021812 	.word	0x00021812
    e3ec:	20018008 	.word	0x20018008

0000e3f0 <broker_init>:
  }
}

// Resolves the configured hostname and initializes the MQTT broker structure
void broker_init(void)
{
    e3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3f2:	b09d      	sub	sp, #116	; 0x74
  int err;
  struct addrinfo *result;
  struct addrinfo *addr;
  struct addrinfo hints = {
    e3f4:	2250      	movs	r2, #80	; 0x50
    e3f6:	2100      	movs	r1, #0
    e3f8:	a808      	add	r0, sp, #32
    e3fa:	f012 f92b 	bl	20654 <memset>
    e3fe:	2301      	movs	r3, #1

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
    e400:	2100      	movs	r1, #0
    e402:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    e406:	aa08      	add	r2, sp, #32
    e408:	4820      	ldr	r0, [pc, #128]	; (e48c <broker_init+0x9c>)
    e40a:	ab03      	add	r3, sp, #12
    e40c:	f00e fc14 	bl	1cc38 <zsock_getaddrinfo>
          .ai_family = AF_INET,
          .ai_socktype = SOCK_STREAM
  };
  err = getaddrinfo(CONFIG_MQTT_BROKER_HOSTNAME, NULL, &hints, &result);
  if (err) {
    e410:	4c1f      	ldr	r4, [pc, #124]	; (e490 <broker_init+0xa0>)
    e412:	4a20      	ldr	r2, [pc, #128]	; (e494 <broker_init+0xa4>)
    e414:	4601      	mov	r1, r0
    e416:	1aa4      	subs	r4, r4, r2
    e418:	08e4      	lsrs	r4, r4, #3
    e41a:	b138      	cbz	r0, e42c <broker_init+0x3c>
    LOG_ERR("getaddrinfo failed: %d", err);
    e41c:	01a4      	lsls	r4, r4, #6
    e41e:	481e      	ldr	r0, [pc, #120]	; (e498 <broker_init+0xa8>)
    e420:	f044 0201 	orr.w	r2, r4, #1
    e424:	f00e f8ff 	bl	1c626 <log_1>
    addr = addr->ai_next;
  }
  /* Free the address. */
  freeaddrinfo(result);
 
}
    e428:	b01d      	add	sp, #116	; 0x74
    e42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  addr = result;
    e42c:	01a4      	lsls	r4, r4, #6
    e42e:	9d03      	ldr	r5, [sp, #12]
        LOG_ERR("ai_addrlen = %u should be %u or %u",
    e430:	4f1a      	ldr	r7, [pc, #104]	; (e49c <broker_init+0xac>)
    e432:	f044 0601 	orr.w	r6, r4, #1
  while (addr != NULL) {
    e436:	b1dd      	cbz	r5, e470 <broker_init+0x80>
    if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
    e438:	6969      	ldr	r1, [r5, #20]
    e43a:	2908      	cmp	r1, #8
    e43c:	d11c      	bne.n	e478 <broker_init+0x88>
                ->sin_addr.s_addr;
    e43e:	69ab      	ldr	r3, [r5, #24]
        broker4->sin_addr.s_addr =
    e440:	4917      	ldr	r1, [pc, #92]	; (e4a0 <broker_init+0xb0>)
                ->sin_addr.s_addr;
    e442:	685b      	ldr	r3, [r3, #4]
        broker4->sin_family = AF_INET;
    e444:	2001      	movs	r0, #1
        broker4->sin_addr.s_addr =
    e446:	604b      	str	r3, [r1, #4]
        broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
    e448:	f645 3307 	movw	r3, #23303	; 0x5b07
        broker4->sin_family = AF_INET;
    e44c:	8008      	strh	r0, [r1, #0]
        broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
    e44e:	804b      	strh	r3, [r1, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    e450:	2310      	movs	r3, #16
    e452:	3104      	adds	r1, #4
    e454:	eb0d 0203 	add.w	r2, sp, r3
    e458:	f003 fd02 	bl	11e60 <z_impl_net_addr_ntop>
        LOG_INF("IPv4 Address found %s", log_strdup(ipv4_addr));
    e45c:	a804      	add	r0, sp, #16
    e45e:	f001 fe19 	bl	10094 <log_strdup>
    e462:	f044 0403 	orr.w	r4, r4, #3
    e466:	4601      	mov	r1, r0
    e468:	4622      	mov	r2, r4
    e46a:	480e      	ldr	r0, [pc, #56]	; (e4a4 <broker_init+0xb4>)
    e46c:	f00e f8db 	bl	1c626 <log_1>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
    e470:	9803      	ldr	r0, [sp, #12]
    e472:	f00e fbe3 	bl	1cc3c <zsock_freeaddrinfo>
    e476:	e7d7      	b.n	e428 <broker_init+0x38>
        LOG_ERR("ai_addrlen = %u should be %u or %u",
    e478:	2318      	movs	r3, #24
    e47a:	2208      	movs	r2, #8
    e47c:	4638      	mov	r0, r7
    e47e:	f8ad 6000 	strh.w	r6, [sp]
    e482:	f00e f900 	bl	1c686 <log_3>
    addr = addr->ai_next;
    e486:	682d      	ldr	r5, [r5, #0]
    e488:	e7d5      	b.n	e436 <broker_init+0x46>
    e48a:	bf00      	nop
    e48c:	00021842 	.word	0x00021842
    e490:	00020e58 	.word	0x00020e58
    e494:	00020e58 	.word	0x00020e58
    e498:	00021854 	.word	0x00021854
    e49c:	00021881 	.word	0x00021881
    e4a0:	20018ff0 	.word	0x20018ff0
    e4a4:	0002186b 	.word	0x0002186b

0000e4a8 <client_init>:
  user_name.size = strlen(CONFIG_MQTT_BROKER_USERNAME);
}

// Initialize the MQTT client structure
void client_init(struct mqtt_client *client) 
{
    e4a8:	b510      	push	{r4, lr}
    e4aa:	4604      	mov	r4, r0
  mqtt_client_init(client);
    e4ac:	f00f f920 	bl	1d6f0 <mqtt_client_init>
  broker_init();
    e4b0:	f7ff ff9e 	bl	e3f0 <broker_init>
  // MQTT client configuration 
  client->broker = &broker;
    e4b4:	4b0c      	ldr	r3, [pc, #48]	; (e4e8 <client_init+0x40>)
  client->evt_cb = mqtt_evt_handler;
  client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
    e4b6:	480d      	ldr	r0, [pc, #52]	; (e4ec <client_init+0x44>)
  client->broker = &broker;
    e4b8:	6363      	str	r3, [r4, #52]	; 0x34
  client->evt_cb = mqtt_evt_handler;
    e4ba:	4b0d      	ldr	r3, [pc, #52]	; (e4f0 <client_init+0x48>)
  client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
    e4bc:	62e0      	str	r0, [r4, #44]	; 0x2c
  client->evt_cb = mqtt_evt_handler;
    e4be:	64a3      	str	r3, [r4, #72]	; 0x48
  client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
    e4c0:	f7fe fd38 	bl	cf34 <strlen>
  client->protocol_version = MQTT_VERSION_3_1_1;
    e4c4:	2304      	movs	r3, #4
    e4c6:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
  // MQTT buffers configuration
  client->rx_buf = rx_buffer;
    e4ca:	4b0a      	ldr	r3, [pc, #40]	; (e4f4 <client_init+0x4c>)
  client->rx_buf_size = sizeof(rx_buffer);
  client->tx_buf = tx_buffer;
    e4cc:	4a0a      	ldr	r2, [pc, #40]	; (e4f8 <client_init+0x50>)
  client->rx_buf = rx_buffer;
    e4ce:	64e3      	str	r3, [r4, #76]	; 0x4c
  client->rx_buf_size = sizeof(rx_buffer);
    e4d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  client->tx_buf_size = sizeof(tx_buffer);
    e4d4:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  client->rx_buf_size = sizeof(rx_buffer);
    e4d8:	6523      	str	r3, [r4, #80]	; 0x50
#if CONFIG_MQTT_BROKER_SET_USERNAME_AND_PASSWORD
  set_client_username_pass();
  client->user_name = &user_name;
  client->password = &password;
#else
  client->user_name = NULL;
    e4da:	2300      	movs	r3, #0
  client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
    e4dc:	6320      	str	r0, [r4, #48]	; 0x30
  client->password = NULL;
    e4de:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
  tls_cfg->sec_tag_count = ARRAY_SIZE(sec_tag_list);
  tls_cfg->sec_tag_list = sec_tag_list;
  tls_cfg->hostname = CONFIG_MQTT_BROKER_HOSTNAME;

#else
  client->transport.type = MQTT_TRANSPORT_NON_SECURE;
    e4e2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
#endif
}
    e4e6:	bd10      	pop	{r4, pc}
    e4e8:	20018ff0 	.word	0x20018ff0
    e4ec:	000218a4 	.word	0x000218a4
    e4f0:	0000e7e5 	.word	0x0000e7e5
    e4f4:	20019c14 	.word	0x20019c14
    e4f8:	2001a014 	.word	0x2001a014

0000e4fc <fds_init>:

//Initialize the file descriptor structure used by poll.
int fds_init(struct mqtt_client *c) 
{
  if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
    e4fc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    e500:	b933      	cbnz	r3, e510 <fds_init+0x14>
    fds.fd = c->transport.tcp.sock;
    e502:	6a81      	ldr	r1, [r0, #40]	; 0x28
    e504:	4a04      	ldr	r2, [pc, #16]	; (e518 <fds_init+0x1c>)
#else
    return -ENOTSUP;
#endif
  }
  fds.events = POLLIN;
  return SUCCESS;
    e506:	4618      	mov	r0, r3
    fds.fd = c->transport.tcp.sock;
    e508:	6011      	str	r1, [r2, #0]
  fds.events = POLLIN;
    e50a:	2101      	movs	r1, #1
    e50c:	8091      	strh	r1, [r2, #4]
  return SUCCESS;
    e50e:	4770      	bx	lr
    return -ENOTSUP;
    e510:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    e514:	4770      	bx	lr
    e516:	bf00      	nop
    e518:	20018008 	.word	0x20018008

0000e51c <modem_configure>:

//Configures modem to provide LTE link. Blocks until link is successfully established.
void modem_configure(void)
{
    e51c:	b510      	push	{r4, lr}
    e51e:	4a12      	ldr	r2, [pc, #72]	; (e568 <modem_configure+0x4c>)
    e520:	4c12      	ldr	r4, [pc, #72]	; (e56c <modem_configure+0x50>)
  /* Turn off LTE power saving features for a more responsive demo. Also,
   * request power saving features before network registration. Some
   * networks rejects timer updates after the device has registered to the
   * LTE network.
   */
  LOG_INF("Disabling PSM and eDRX");
    e522:	4813      	ldr	r0, [pc, #76]	; (e570 <modem_configure+0x54>)
    e524:	1aa4      	subs	r4, r4, r2
    e526:	08e4      	lsrs	r4, r4, #3
    e528:	01a4      	lsls	r4, r4, #6
    e52a:	f044 0403 	orr.w	r4, r4, #3
    e52e:	4621      	mov	r1, r4
    e530:	f00e f86a 	bl	1c608 <log_0>
  lte_lc_psm_req(false);
    e534:	2000      	movs	r0, #0
    e536:	f006 fcd1 	bl	14edc <lte_lc_psm_req>
  lte_lc_edrx_req(false);
    e53a:	2000      	movs	r0, #0
    e53c:	f006 ff4a 	bl	153d4 <lte_lc_edrx_req>
    k_sem_take(&carrier_registered, K_FOREVER);
    LOG_INF("Registered!");
#else /* defined(CONFIG_LWM2M_CARRIER) */
    int err;

    LOG_INF("LTE Link Connecting...");
    e540:	4621      	mov	r1, r4
    e542:	480c      	ldr	r0, [pc, #48]	; (e574 <modem_configure+0x58>)
    e544:	f00e f860 	bl	1c608 <log_0>
    err = lte_lc_init_and_connect();
    e548:	f010 f845 	bl	1e5d6 <lte_lc_init_and_connect>
    if (err) {
    e54c:	4601      	mov	r1, r0
    e54e:	b128      	cbz	r0, e55c <modem_configure+0x40>
            LOG_INF("Failed to establish LTE connection: %d", err);
    e550:	4622      	mov	r2, r4
    LOG_INF("LTE Link Connected!");
#endif /* defined(CONFIG_LWM2M_CARRIER) */
  }
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

}
    e552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            LOG_INF("Failed to establish LTE connection: %d", err);
    e556:	4808      	ldr	r0, [pc, #32]	; (e578 <modem_configure+0x5c>)
    e558:	f00e b865 	b.w	1c626 <log_1>
    LOG_INF("LTE Link Connected!");
    e55c:	4621      	mov	r1, r4
}
    e55e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LOG_INF("LTE Link Connected!");
    e562:	4806      	ldr	r0, [pc, #24]	; (e57c <modem_configure+0x60>)
    e564:	f00e b850 	b.w	1c608 <log_0>
    e568:	00020e58 	.word	0x00020e58
    e56c:	00020e58 	.word	0x00020e58
    e570:	000218aa 	.word	0x000218aa
    e574:	000218c1 	.word	0x000218c1
    e578:	000218d8 	.word	0x000218d8
    e57c:	000218ff 	.word	0x000218ff

0000e580 <app_mqtt_connect>:

void app_mqtt_connect(void)
{
    e580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int8_t err;
  int8_t n_attempts = 0;
  while (!connected){
    e584:	4f1c      	ldr	r7, [pc, #112]	; (e5f8 <app_mqtt_connect+0x78>)
    e586:	2500      	movs	r5, #0
    e588:	46b8      	mov	r8, r7
    e58a:	4c1c      	ldr	r4, [pc, #112]	; (e5fc <app_mqtt_connect+0x7c>)
    e58c:	4b1c      	ldr	r3, [pc, #112]	; (e600 <app_mqtt_connect+0x80>)
    LOG_INF("[MQTT_Thread] Attempt #%d to connect MQTT",n_attempts);
    e58e:	f8df 9084 	ldr.w	r9, [pc, #132]	; e614 <app_mqtt_connect+0x94>
    e592:	1ae4      	subs	r4, r4, r3
    e594:	08e4      	lsrs	r4, r4, #3
  while (!connected){
    e596:	783b      	ldrb	r3, [r7, #0]
    e598:	b269      	sxtb	r1, r5
    e59a:	b10b      	cbz	r3, e5a0 <app_mqtt_connect+0x20>
    if (!connected) {
       mqtt_abort(&client);
    }
    ++n_attempts;
  }
}
    e59c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LOG_INF("[MQTT_Thread] Attempt #%d to connect MQTT",n_attempts);
    e5a0:	01a6      	lsls	r6, r4, #6
    e5a2:	4648      	mov	r0, r9
    e5a4:	f046 0203 	orr.w	r2, r6, #3
    e5a8:	f00e f83d 	bl	1c626 <log_1>
    err = mqtt_connect(&client);
    e5ac:	4815      	ldr	r0, [pc, #84]	; (e604 <app_mqtt_connect+0x84>)
    e5ae:	f00f f8b8 	bl	1d722 <mqtt_connect>
    e5b2:	b241      	sxtb	r1, r0
    if (err != SUCCESS) {
    e5b4:	b121      	cbz	r1, e5c0 <app_mqtt_connect+0x40>
      LOG_ERR("[MQTT_Thread] ERROR: mqtt_connect %d", err);
    e5b6:	4814      	ldr	r0, [pc, #80]	; (e608 <app_mqtt_connect+0x88>)
    e5b8:	f046 0201 	orr.w	r2, r6, #1
    e5bc:	f00e f833 	bl	1c626 <log_1>
    err = fds_init(&client);
    e5c0:	4810      	ldr	r0, [pc, #64]	; (e604 <app_mqtt_connect+0x84>)
    e5c2:	f7ff ff9b 	bl	e4fc <fds_init>
    e5c6:	b241      	sxtb	r1, r0
    if (err != SUCCESS) {
    e5c8:	b121      	cbz	r1, e5d4 <app_mqtt_connect+0x54>
      LOG_ERR("[MQTT_Thread] ERROR: fds_init %d", err);
    e5ca:	4810      	ldr	r0, [pc, #64]	; (e60c <app_mqtt_connect+0x8c>)
    e5cc:	f046 0201 	orr.w	r2, r6, #1
    e5d0:	f00e f829 	bl	1c626 <log_1>
    e5d4:	f241 3288 	movw	r2, #5000	; 0x1388
    e5d8:	2101      	movs	r1, #1
    e5da:	480d      	ldr	r0, [pc, #52]	; (e610 <app_mqtt_connect+0x90>)
    e5dc:	f002 f9d2 	bl	10984 <z_impl_zsock_poll>
    mqtt_input(&client);
    e5e0:	4808      	ldr	r0, [pc, #32]	; (e604 <app_mqtt_connect+0x84>)
    e5e2:	f00f f9dc 	bl	1d99e <mqtt_input>
    if (!connected) {
    e5e6:	f898 3000 	ldrb.w	r3, [r8]
    e5ea:	b913      	cbnz	r3, e5f2 <app_mqtt_connect+0x72>
       mqtt_abort(&client);
    e5ec:	4805      	ldr	r0, [pc, #20]	; (e604 <app_mqtt_connect+0x84>)
    e5ee:	f00f f99b 	bl	1d928 <mqtt_abort>
    ++n_attempts;
    e5f2:	3501      	adds	r5, #1
    e5f4:	e7cf      	b.n	e596 <app_mqtt_connect+0x16>
    e5f6:	bf00      	nop
    e5f8:	20019813 	.word	0x20019813
    e5fc:	00020e58 	.word	0x00020e58
    e600:	00020e58 	.word	0x00020e58
    e604:	20017fa4 	.word	0x20017fa4
    e608:	0002193d 	.word	0x0002193d
    e60c:	00021962 	.word	0x00021962
    e610:	20018008 	.word	0x20018008
    e614:	00021913 	.word	0x00021913

0000e618 <MQTT_thread>:

void MQTT_thread(void)
{
    e618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e61c:	4b42      	ldr	r3, [pc, #264]	; (e728 <MQTT_thread+0x110>)
    e61e:	4c43      	ldr	r4, [pc, #268]	; (e72c <MQTT_thread+0x114>)
    e620:	b083      	sub	sp, #12
    e622:	1ae4      	subs	r4, r4, r3
    e624:	08e4      	lsrs	r4, r4, #3
  int cert_err;
  LOG_INF("[MQTT_Thread] The MQTT simple sample started");
    e626:	01a4      	lsls	r4, r4, #6
    e628:	f044 0103 	orr.w	r1, r4, #3
    e62c:	4840      	ldr	r0, [pc, #256]	; (e730 <MQTT_thread+0x118>)
{
    e62e:	af00      	add	r7, sp, #0
  LOG_INF("[MQTT_Thread] The MQTT simple sample started");
    e630:	f00d ffea 	bl	1c608 <log_0>
#endif /* defined(CONFIG_MQTT_LIB_TLS) */

  //Configures modem to provide LTE link. Blocks until link is successfully established.
  //IF SIGNAL COVERAGE IS LOST, DATA BUFFER WILL ONLY HOLD 16 PACKETS.
  //THE REST OF PENDING DATA TO BE ALLOCATED WILL BE LOST.
  modem_configure();
    e634:	f7ff ff72 	bl	e51c <modem_configure>
  //Initialize the MQTT client structure
  client_init(&client);
    e638:	483e      	ldr	r0, [pc, #248]	; (e734 <MQTT_thread+0x11c>)
    e63a:	f7ff ff35 	bl	e4a8 <client_init>
  app_mqtt_connect();
    e63e:	f7ff ff9f 	bl	e580 <app_mqtt_connect>
    e642:	f8df 810c 	ldr.w	r8, [pc, #268]	; e750 <MQTT_thread+0x138>
  int8_t err;
  int8_t retries;
  while (1) {
    err = poll(&fds, 1, MQTT_SENDING_PERIOD);
    if (err < 0) {
      LOG_ERR("[MQTT_Thread] ERROR: poll %d\n", errno);
    e646:	f8df 910c 	ldr.w	r9, [pc, #268]	; e754 <MQTT_thread+0x13c>
    }
    err = mqtt_live(&client);
    e64a:	4e3a      	ldr	r6, [pc, #232]	; (e734 <MQTT_thread+0x11c>)
    e64c:	2101      	movs	r1, #1
    e64e:	2264      	movs	r2, #100	; 0x64
    e650:	4640      	mov	r0, r8
    e652:	f002 f997 	bl	10984 <z_impl_zsock_poll>
    if (err < 0) {
    e656:	0601      	lsls	r1, r0, #24
    e658:	d508      	bpl.n	e66c <MQTT_thread+0x54>
      LOG_ERR("[MQTT_Thread] ERROR: poll %d\n", errno);
    e65a:	f00e fc58 	bl	1cf0e <__errno>
    e65e:	f044 0501 	orr.w	r5, r4, #1
    e662:	6801      	ldr	r1, [r0, #0]
    e664:	462a      	mov	r2, r5
    e666:	4648      	mov	r0, r9
    e668:	f00d ffdd 	bl	1c626 <log_1>
    err = mqtt_live(&client);
    e66c:	4630      	mov	r0, r6
    e66e:	f00f f96f 	bl	1d950 <mqtt_live>
    e672:	b241      	sxtb	r1, r0
    if ((err != 0) && (err != -EAGAIN)) {
    e674:	b139      	cbz	r1, e686 <MQTT_thread+0x6e>
    e676:	f111 0f0b 	cmn.w	r1, #11
    e67a:	d004      	beq.n	e686 <MQTT_thread+0x6e>
      LOG_ERR("[MQTT_Thread] ERROR: mqtt_live %d\n", err);
    e67c:	482e      	ldr	r0, [pc, #184]	; (e738 <MQTT_thread+0x120>)
    e67e:	f044 0201 	orr.w	r2, r4, #1
    e682:	f00d ffd0 	bl	1c626 <log_1>
    }
    err = mqtt_input(&client);
    e686:	4630      	mov	r0, r6
    e688:	f00f f989 	bl	1d99e <mqtt_input>
    e68c:	b241      	sxtb	r1, r0
    if (err < 0) {
    e68e:	2900      	cmp	r1, #0
    e690:	da07      	bge.n	e6a2 <MQTT_thread+0x8a>
      LOG_ERR("[MQTT_Thread] ERROR: mqtt_input %d\n", err);
    e692:	482a      	ldr	r0, [pc, #168]	; (e73c <MQTT_thread+0x124>)
    e694:	f044 0201 	orr.w	r2, r4, #1
    e698:	f00d ffc5 	bl	1c626 <log_1>
      app_mqtt_connect();
    e69c:	f7ff ff70 	bl	e580 <app_mqtt_connect>
    e6a0:	e7d4      	b.n	e64c <MQTT_thread+0x34>
	return z_impl_k_msgq_get(msgq, data, timeout);
    e6a2:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e6a6:	2300      	movs	r3, #0
    e6a8:	4825      	ldr	r0, [pc, #148]	; (e740 <MQTT_thread+0x128>)
    e6aa:	1d39      	adds	r1, r7, #4
    e6ac:	f00b fa2a 	bl	19b04 <z_impl_k_msgq_get>
    }
    else{
      msgq_item_t rx_data;  
      err = k_msgq_get(&Dusty_to_MQTT_msg_q, &rx_data, K_MSEC(MSGQ_WAITING_PERIOD));
      if (err < SUCCESS){
    e6b0:	0602      	lsls	r2, r0, #24
    e6b2:	d4cb      	bmi.n	e64c <MQTT_thread+0x34>
      }
      else{
        LOG_INF("[MQTT_Thread] data read from FIFO successfully!");
#ifdef CONFIG_LOG
        char rx_data_arr[rx_data.data->len+1];
        rx_data_arr[ rx_data.data->len] = ENDSTR;
    e6b4:	2500      	movs	r5, #0
        LOG_INF("[MQTT_Thread] data read from FIFO successfully!");
    e6b6:	4823      	ldr	r0, [pc, #140]	; (e744 <MQTT_thread+0x12c>)
    e6b8:	f044 0103 	orr.w	r1, r4, #3
    e6bc:	f00d ffa4 	bl	1c608 <log_0>
        char rx_data_arr[rx_data.data->len+1];
    e6c0:	6879      	ldr	r1, [r7, #4]
      else{
    e6c2:	46ea      	mov	sl, sp
        char rx_data_arr[rx_data.data->len+1];
    e6c4:	684a      	ldr	r2, [r1, #4]
    e6c6:	3108      	adds	r1, #8
    e6c8:	f102 0308 	add.w	r3, r2, #8
    e6cc:	f023 0307 	bic.w	r3, r3, #7
    e6d0:	ebad 0d03 	sub.w	sp, sp, r3
        rx_data_arr[ rx_data.data->len] = ENDSTR;
    e6d4:	f80d 5002 	strb.w	r5, [sp, r2]
    e6d8:	f851 2c04 	ldr.w	r2, [r1, #-4]
    e6dc:	4668      	mov	r0, sp
    e6de:	f011 ffac 	bl	2063a <memcpy>
        memcpy(rx_data_arr, rx_data.data->data, rx_data.data->len);
#endif
        printk("[MQTT_Thread] Receive from Dusty Thread: %s", rx_data_arr);
    e6e2:	4669      	mov	r1, sp
    e6e4:	4818      	ldr	r0, [pc, #96]	; (e748 <MQTT_thread+0x130>)
    e6e6:	f00d fb7d 	bl	1bde4 <printk>
        //start sending the data buffer through MQTT
        retries = 0;
        while ((err = data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, rx_data.data->data, rx_data.data->len)) < SUCCESS && retries < MQTT_DATA_PUBLISHING_MAX_RETRIES){
    e6ea:	687a      	ldr	r2, [r7, #4]
    e6ec:	2101      	movs	r1, #1
    e6ee:	6853      	ldr	r3, [r2, #4]
    e6f0:	4630      	mov	r0, r6
    e6f2:	3208      	adds	r2, #8
    e6f4:	f7ff fdcc 	bl	e290 <data_publish>
    e6f8:	0603      	lsls	r3, r0, #24
    e6fa:	fa4f fb85 	sxtb.w	fp, r5
    e6fe:	d50b      	bpl.n	e718 <MQTT_thread+0x100>
    e700:	3501      	adds	r5, #1
    e702:	2d04      	cmp	r5, #4
    e704:	d1f1      	bne.n	e6ea <MQTT_thread+0xd2>
          ++retries;
        }
        if (retries == MQTT_DATA_PUBLISHING_MAX_RETRIES){
          // Unable to publish the data
          LOG_ERR("[MQTT_Thread] ERROR publishing data!");
    e706:	4811      	ldr	r0, [pc, #68]	; (e74c <MQTT_thread+0x134>)
    e708:	f044 0101 	orr.w	r1, r4, #1
    e70c:	f00d ff7c 	bl	1c608 <log_0>
          //Disconnects the mqtt client and try to reconnect the next iteration
          mqtt_disconnect(&client);
    e710:	4630      	mov	r0, r6
    e712:	f00f f88e 	bl	1d832 <mqtt_disconnect>
    e716:	e002      	b.n	e71e <MQTT_thread+0x106>
        if (retries == MQTT_DATA_PUBLISHING_MAX_RETRIES){
    e718:	f1bb 0f03 	cmp.w	fp, #3
    e71c:	d0f3      	beq.n	e706 <MQTT_thread+0xee>
        }
        free_data_buffer_item(rx_data.data);
    e71e:	6878      	ldr	r0, [r7, #4]
    e720:	f7fe ffdc 	bl	d6dc <free_data_buffer_item>
    e724:	46d5      	mov	sp, sl
    e726:	e791      	b.n	e64c <MQTT_thread+0x34>
    e728:	00020e58 	.word	0x00020e58
    e72c:	00020e58 	.word	0x00020e58
    e730:	00021983 	.word	0x00021983
    e734:	20017fa4 	.word	0x20017fa4
    e738:	000219ce 	.word	0x000219ce
    e73c:	000219f1 	.word	0x000219f1
    e740:	20014830 	.word	0x20014830
    e744:	00021a15 	.word	0x00021a15
    e748:	00021a45 	.word	0x00021a45
    e74c:	00021a71 	.word	0x00021a71
    e750:	20018008 	.word	0x20018008
    e754:	000219b0 	.word	0x000219b0

0000e758 <comm_DS_error_handling>:
//************************************* HELPERS *************************************************//
//***********************************************************************************************//

//Function to print the errors occurred when dealing with inter-thread communication data structures 
void comm_DS_error_handling(k_tid_t thread_id, int err_code)
{
    e758:	b530      	push	{r4, r5, lr}
    e75a:	460d      	mov	r5, r1
    e75c:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_name_copy(thread_id, buf, size);
    e75e:	2220      	movs	r2, #32
    e760:	4669      	mov	r1, sp
    e762:	f011 fcb4 	bl	200ce <z_impl_k_thread_name_copy>
  char thread_name[THREAD_NAME_LEN];
  k_thread_name_copy(thread_id, thread_name, sizeof(thread_name));
  switch(err_code){
    e766:	4a19      	ldr	r2, [pc, #100]	; (e7cc <comm_DS_error_handling+0x74>)
    e768:	4b19      	ldr	r3, [pc, #100]	; (e7d0 <comm_DS_error_handling+0x78>)
    e76a:	f115 0f23 	cmn.w	r5, #35	; 0x23
    e76e:	eba2 0203 	sub.w	r2, r2, r3
    e772:	ea4f 02d2 	mov.w	r2, r2, lsr #3
    e776:	ea4f 1282 	mov.w	r2, r2, lsl #6
      break;
    case -EAGAIN:
      LOG_ERR("[%s] FIFO Waiting period timed out!",log_strdup(thread_name));
      break;
    default:
      LOG_ERR("[%s] error_code: %d", log_strdup(thread_name),err_code);
    e77a:	4668      	mov	r0, sp
    e77c:	f042 0401 	orr.w	r4, r2, #1
  switch(err_code){
    e780:	d00e      	beq.n	e7a0 <comm_DS_error_handling+0x48>
    e782:	f115 0f0b 	cmn.w	r5, #11
    e786:	d011      	beq.n	e7ac <comm_DS_error_handling+0x54>
    e788:	f115 0f69 	cmn.w	r5, #105	; 0x69
    e78c:	d114      	bne.n	e7b8 <comm_DS_error_handling+0x60>
      LOG_ERR("[%s] data buffer is full!", log_strdup(thread_name));
    e78e:	f001 fc81 	bl	10094 <log_strdup>
    e792:	4622      	mov	r2, r4
    e794:	4601      	mov	r1, r0
    e796:	480f      	ldr	r0, [pc, #60]	; (e7d4 <comm_DS_error_handling+0x7c>)
      LOG_ERR("[%s] FIFO Waiting period timed out!",log_strdup(thread_name));
    e798:	f00d ff45 	bl	1c626 <log_1>
  }
}
    e79c:	b009      	add	sp, #36	; 0x24
    e79e:	bd30      	pop	{r4, r5, pc}
      LOG_ERR("[%s] FIFO is empty or has been purged!",log_strdup(thread_name));
    e7a0:	f001 fc78 	bl	10094 <log_strdup>
    e7a4:	4622      	mov	r2, r4
    e7a6:	4601      	mov	r1, r0
    e7a8:	480b      	ldr	r0, [pc, #44]	; (e7d8 <comm_DS_error_handling+0x80>)
    e7aa:	e7f5      	b.n	e798 <comm_DS_error_handling+0x40>
      LOG_ERR("[%s] FIFO Waiting period timed out!",log_strdup(thread_name));
    e7ac:	f001 fc72 	bl	10094 <log_strdup>
    e7b0:	4622      	mov	r2, r4
    e7b2:	4601      	mov	r1, r0
    e7b4:	4809      	ldr	r0, [pc, #36]	; (e7dc <comm_DS_error_handling+0x84>)
    e7b6:	e7ef      	b.n	e798 <comm_DS_error_handling+0x40>
      LOG_ERR("[%s] error_code: %d", log_strdup(thread_name),err_code);
    e7b8:	f001 fc6c 	bl	10094 <log_strdup>
    e7bc:	4623      	mov	r3, r4
    e7be:	4601      	mov	r1, r0
    e7c0:	462a      	mov	r2, r5
    e7c2:	4807      	ldr	r0, [pc, #28]	; (e7e0 <comm_DS_error_handling+0x88>)
    e7c4:	f00d ff46 	bl	1c654 <log_2>
}
    e7c8:	e7e8      	b.n	e79c <comm_DS_error_handling+0x44>
    e7ca:	bf00      	nop
    e7cc:	00020e58 	.word	0x00020e58
    e7d0:	00020e58 	.word	0x00020e58
    e7d4:	00021a96 	.word	0x00021a96
    e7d8:	00021ab0 	.word	0x00021ab0
    e7dc:	00021ad7 	.word	0x00021ad7
    e7e0:	00021afb 	.word	0x00021afb

0000e7e4 <mqtt_evt_handler>:
{
    e7e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e7e6:	4b45      	ldr	r3, [pc, #276]	; (e8fc <mqtt_evt_handler+0x118>)
    e7e8:	4c45      	ldr	r4, [pc, #276]	; (e900 <mqtt_evt_handler+0x11c>)
    e7ea:	460d      	mov	r5, r1
    e7ec:	1ae4      	subs	r4, r4, r3
  switch (evt->type) {
    e7ee:	7809      	ldrb	r1, [r1, #0]
    e7f0:	08e4      	lsrs	r4, r4, #3
{
    e7f2:	4606      	mov	r6, r0
    e7f4:	01a4      	lsls	r4, r4, #6
    e7f6:	2907      	cmp	r1, #7
    e7f8:	d87b      	bhi.n	e8f2 <mqtt_evt_handler+0x10e>
    e7fa:	e8df f001 	tbb	[pc, r1]
    e7fe:	1804      	.short	0x1804
    e800:	7a7a6422 	.word	0x7a7a6422
    e804:	6f7a      	.short	0x6f7a
    if (evt->result != SUCCESS) {
    e806:	69e9      	ldr	r1, [r5, #28]
    e808:	b129      	cbz	r1, e816 <mqtt_evt_handler+0x32>
      LOG_ERR("[MQTT_Thread] MQTT connect failed %d", evt->result);
    e80a:	483e      	ldr	r0, [pc, #248]	; (e904 <mqtt_evt_handler+0x120>)
    e80c:	f044 0201 	orr.w	r2, r4, #1
    LOG_INF("[MQTT_Thread] default: %d",evt->type);
    e810:	f00d ff09 	bl	1c626 <log_1>
}
    e814:	e009      	b.n	e82a <mqtt_evt_handler+0x46>
    connected = true;
    e816:	2201      	movs	r2, #1
    e818:	4b3b      	ldr	r3, [pc, #236]	; (e908 <mqtt_evt_handler+0x124>)
    LOG_INF("[MQTT_Thread] MQTT client connected!");
    e81a:	483c      	ldr	r0, [pc, #240]	; (e90c <mqtt_evt_handler+0x128>)
    e81c:	f044 0103 	orr.w	r1, r4, #3
    connected = true;
    e820:	701a      	strb	r2, [r3, #0]
    LOG_INF("[MQTT_Thread] MQTT client connected!");
    e822:	f00d fef1 	bl	1c608 <log_0>
    subscribe();
    e826:	f7ff fd6b 	bl	e300 <subscribe>
}
    e82a:	b003      	add	sp, #12
    e82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LOG_ERR("[MQTT_Thread] MQTT client disconnected %d", evt->result);
    e82e:	f044 0201 	orr.w	r2, r4, #1
    e832:	69e9      	ldr	r1, [r5, #28]
    e834:	4836      	ldr	r0, [pc, #216]	; (e910 <mqtt_evt_handler+0x12c>)
    e836:	f00d fef6 	bl	1c626 <log_1>
    connected = false;
    e83a:	2200      	movs	r2, #0
    e83c:	4b32      	ldr	r3, [pc, #200]	; (e908 <mqtt_evt_handler+0x124>)
    e83e:	701a      	strb	r2, [r3, #0]
    break;
    e840:	e7f3      	b.n	e82a <mqtt_evt_handler+0x46>
    LOG_INF("[MQTT_Thread] MQTT PUBLISH result=%d len=%d", evt->result, p->message.payload.len);
    e842:	f044 0703 	orr.w	r7, r4, #3
    e846:	463b      	mov	r3, r7
    e848:	696a      	ldr	r2, [r5, #20]
    e84a:	69e9      	ldr	r1, [r5, #28]
    e84c:	4831      	ldr	r0, [pc, #196]	; (e914 <mqtt_evt_handler+0x130>)
    e84e:	f00d ff01 	bl	1c654 <log_2>
    err = publish_get_payload(c, p->message.payload.len);
    e852:	6969      	ldr	r1, [r5, #20]
    e854:	4630      	mov	r0, r6
    e856:	f7ff fd83 	bl	e360 <publish_get_payload>
    e85a:	b241      	sxtb	r1, r0
    if (err >= SUCCESS) {
    e85c:	2900      	cmp	r1, #0
    e85e:	db1f      	blt.n	e8a0 <mqtt_evt_handler+0xbc>
      data_buf_item_t* ptr_item = store_to_data_buffer(payload_buf, (uint8_t)p->message.payload.len);
    e860:	7d29      	ldrb	r1, [r5, #20]
    e862:	482d      	ldr	r0, [pc, #180]	; (e918 <mqtt_evt_handler+0x134>)
    e864:	f7fe ff04 	bl	d670 <store_to_data_buffer>
      if (ptr_item == NULL){
    e868:	b940      	cbnz	r0, e87c <mqtt_evt_handler+0x98>
	return z_impl_k_current_get();
    e86a:	f00b fe35 	bl	1a4d8 <z_impl_k_current_get>
        comm_DS_error_handling(k_current_get(), err_code);
    e86e:	f06f 0168 	mvn.w	r1, #104	; 0x68
    e872:	f7ff ff71 	bl	e758 <comm_DS_error_handling>
	z_impl_k_yield();
    e876:	f00b fdbf 	bl	1a3f8 <z_impl_k_yield>
}
    e87a:	e7d6      	b.n	e82a <mqtt_evt_handler+0x46>
        msgq_item_t msgq_item = {ptr_item};
    e87c:	9001      	str	r0, [sp, #4]
	return z_impl_k_msgq_put(msgq, data, timeout);
    e87e:	2200      	movs	r2, #0
    e880:	a901      	add	r1, sp, #4
    e882:	2300      	movs	r3, #0
    e884:	4825      	ldr	r0, [pc, #148]	; (e91c <mqtt_evt_handler+0x138>)
    e886:	f00b f8e9 	bl	19a5c <z_impl_k_msgq_put>
        if (ret == SUCCESS){
    e88a:	f010 0fff 	tst.w	r0, #255	; 0xff
          LOG_INF("[DUSTY_Thread] data succesfully written in the message queue!");
    e88e:	bf07      	ittee	eq
    e890:	4639      	moveq	r1, r7
    e892:	4823      	ldreq	r0, [pc, #140]	; (e920 <mqtt_evt_handler+0x13c>)
          LOG_ERR("[MQTT_Thread] ERROR: unable to write data to the message queue!");
    e894:	4823      	ldrne	r0, [pc, #140]	; (e924 <mqtt_evt_handler+0x140>)
    e896:	f044 0101 	orrne.w	r1, r4, #1
    e89a:	f00d feb5 	bl	1c608 <log_0>
    e89e:	e7c4      	b.n	e82a <mqtt_evt_handler+0x46>
      LOG_ERR("[MQTT_Thread] mqtt_read_publish_payload: Failed! %d", err);
    e8a0:	f044 0401 	orr.w	r4, r4, #1
    e8a4:	4622      	mov	r2, r4
    e8a6:	4820      	ldr	r0, [pc, #128]	; (e928 <mqtt_evt_handler+0x144>)
    e8a8:	f00d febd 	bl	1c626 <log_1>
      LOG_ERR("[MQTT_Thread] Disconnecting MQTT client...");
    e8ac:	4621      	mov	r1, r4
    e8ae:	481f      	ldr	r0, [pc, #124]	; (e92c <mqtt_evt_handler+0x148>)
    e8b0:	f00d feaa 	bl	1c608 <log_0>
      err = mqtt_disconnect(c);
    e8b4:	4630      	mov	r0, r6
    e8b6:	f00e ffbc 	bl	1d832 <mqtt_disconnect>
    e8ba:	b241      	sxtb	r1, r0
      if (err) {
    e8bc:	2900      	cmp	r1, #0
    e8be:	d0b4      	beq.n	e82a <mqtt_evt_handler+0x46>
        LOG_ERR("[MQTT_Thread] Could not disconnect: %d", err);
    e8c0:	4622      	mov	r2, r4
    e8c2:	481b      	ldr	r0, [pc, #108]	; (e930 <mqtt_evt_handler+0x14c>)
    e8c4:	e7a4      	b.n	e810 <mqtt_evt_handler+0x2c>
    if (evt->result != SUCCESS) {
    e8c6:	69e9      	ldr	r1, [r5, #28]
    e8c8:	b119      	cbz	r1, e8d2 <mqtt_evt_handler+0xee>
      LOG_ERR("[MQTT_Thread] MQTT PUBACK error %d", evt->result);
    e8ca:	481a      	ldr	r0, [pc, #104]	; (e934 <mqtt_evt_handler+0x150>)
    e8cc:	f044 0201 	orr.w	r2, r4, #1
    e8d0:	e79e      	b.n	e810 <mqtt_evt_handler+0x2c>
    LOG_INF("[MQTT_Thread] PUBACK packet id: %u", evt->param.puback.message_id);
    e8d2:	88a9      	ldrh	r1, [r5, #4]
    e8d4:	4818      	ldr	r0, [pc, #96]	; (e938 <mqtt_evt_handler+0x154>)
    e8d6:	f044 0203 	orr.w	r2, r4, #3
    e8da:	e799      	b.n	e810 <mqtt_evt_handler+0x2c>
    if (evt->result != SUCCESS) {
    e8dc:	69e9      	ldr	r1, [r5, #28]
    e8de:	b119      	cbz	r1, e8e8 <mqtt_evt_handler+0x104>
      LOG_ERR("[MQTT_Thread] MQTT SUBACK error %d", evt->result);
    e8e0:	4816      	ldr	r0, [pc, #88]	; (e93c <mqtt_evt_handler+0x158>)
    e8e2:	f044 0201 	orr.w	r2, r4, #1
    e8e6:	e793      	b.n	e810 <mqtt_evt_handler+0x2c>
    LOG_INF("[MQTT_Thread] SUBACK packet id: %u\n", evt->param.suback.message_id);
    e8e8:	88a9      	ldrh	r1, [r5, #4]
    e8ea:	4815      	ldr	r0, [pc, #84]	; (e940 <mqtt_evt_handler+0x15c>)
    e8ec:	f044 0203 	orr.w	r2, r4, #3
    e8f0:	e78e      	b.n	e810 <mqtt_evt_handler+0x2c>
    LOG_INF("[MQTT_Thread] default: %d",evt->type);
    e8f2:	4814      	ldr	r0, [pc, #80]	; (e944 <mqtt_evt_handler+0x160>)
    e8f4:	f044 0203 	orr.w	r2, r4, #3
    e8f8:	e78a      	b.n	e810 <mqtt_evt_handler+0x2c>
    e8fa:	bf00      	nop
    e8fc:	00020e58 	.word	0x00020e58
    e900:	00020e58 	.word	0x00020e58
    e904:	00021b0f 	.word	0x00021b0f
    e908:	20019813 	.word	0x20019813
    e90c:	00021b34 	.word	0x00021b34
    e910:	00021b59 	.word	0x00021b59
    e914:	00021b83 	.word	0x00021b83
    e918:	20019814 	.word	0x20019814
    e91c:	20014858 	.word	0x20014858
    e920:	00021baf 	.word	0x00021baf
    e924:	00021bed 	.word	0x00021bed
    e928:	00021c2d 	.word	0x00021c2d
    e92c:	00021c61 	.word	0x00021c61
    e930:	00021c8c 	.word	0x00021c8c
    e934:	00021cb3 	.word	0x00021cb3
    e938:	00021cd6 	.word	0x00021cd6
    e93c:	00021cf9 	.word	0x00021cf9
    e940:	00021d1c 	.word	0x00021d1c
    e944:	00021d40 	.word	0x00021d40

0000e948 <convert_dusty_pkt_to_string>:

//Function to convert a notification data from Dusty to string.
void convert_dusty_pkt_to_string(char* name, dn_ipmg_notifData_nt* notifData, char* pkt_str, size_t pkt_str_len) {
    e948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e94c:	b093      	sub	sp, #76	; 0x4c
    e94e:	af08      	add	r7, sp, #32
    e950:	460c      	mov	r4, r1
    e952:	4615      	mov	r5, r2
    e954:	4699      	mov	r9, r3
    e956:	4682      	mov	sl, r0
  
   cJSON *root, *fields, *data_array, *timestamp;

   root = cJSON_CreateObject();
    e958:	f004 fb6a 	bl	13030 <cJSON_CreateObject>
    e95c:	4606      	mov	r6, r0
   fields = cJSON_CreateObject();
    e95e:	f004 fb67 	bl	13030 <cJSON_CreateObject>
    e962:	4680      	mov	r8, r0
   data_array = cJSON_CreateArray();
    e964:	f004 fb58 	bl	13018 <cJSON_CreateArray>

   char macAddr_str[MAC_ADDR_SIZE];
   uint8_t* macAddr_ptr = notifData->macAddress;
   sprintf(macAddr_str, "%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x", macAddr_ptr[0], macAddr_ptr[1], 
    e968:	7ce3      	ldrb	r3, [r4, #19]
    e96a:	2218      	movs	r2, #24
    e96c:	9307      	str	r3, [sp, #28]
    e96e:	7ca3      	ldrb	r3, [r4, #18]
    e970:	2100      	movs	r1, #0
    e972:	9306      	str	r3, [sp, #24]
    e974:	7c63      	ldrb	r3, [r4, #17]
    e976:	f107 0010 	add.w	r0, r7, #16
    e97a:	9305      	str	r3, [sp, #20]
    e97c:	7c23      	ldrb	r3, [r4, #16]
    e97e:	9304      	str	r3, [sp, #16]
    e980:	7be3      	ldrb	r3, [r4, #15]
    e982:	9303      	str	r3, [sp, #12]
    e984:	7ba3      	ldrb	r3, [r4, #14]
    e986:	9302      	str	r3, [sp, #8]
    e988:	7b63      	ldrb	r3, [r4, #13]
    e98a:	9301      	str	r3, [sp, #4]
    e98c:	7b23      	ldrb	r3, [r4, #12]
    e98e:	9300      	str	r3, [sp, #0]
    e990:	4b46      	ldr	r3, [pc, #280]	; (eaac <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4c>)
    e992:	f011 fe67 	bl	20664 <__sprintf_chk>
    e996:	2200      	movs	r2, #0
                                                                   macAddr_ptr[2], macAddr_ptr[3],
                                                                   macAddr_ptr[4], macAddr_ptr[5], 
                                                                   macAddr_ptr[6], macAddr_ptr[7]);

   uint32_t timestamp_doub = 0;
    e998:	4610      	mov	r0, r2
    e99a:	1de1      	adds	r1, r4, #7
   int8_t i;
   for (i = 7; i >= 0; --i){
     const uint32_t byte = (uint32_t)notifData->utcSecs[i];
    e99c:	f811 3901 	ldrb.w	r3, [r1], #-1
     if (byte != 0){
    e9a0:	b10b      	cbz	r3, e9a6 <convert_dusty_pkt_to_string+0x5e>
        timestamp_doub |= (byte << (8*(7-i)));
    e9a2:	4093      	lsls	r3, r2
    e9a4:	4318      	orrs	r0, r3
   for (i = 7; i >= 0; --i){
    e9a6:	3208      	adds	r2, #8
    e9a8:	2a40      	cmp	r2, #64	; 0x40
    e9aa:	d1f7      	bne.n	e99c <convert_dusty_pkt_to_string+0x54>
     }
   }
   char timestamp_str[TIMESTAMP_STR_SIZE];
   itoa(timestamp_doub, timestamp_str, 10);
    e9ac:	220a      	movs	r2, #10
    e9ae:	4639      	mov	r1, r7
    e9b0:	f011 fe25 	bl	205fe <itoa>

   cJSON_AddItemToObject(root, "name", cJSON_CreateString(name));
    e9b4:	4650      	mov	r0, sl
    e9b6:	f004 fb17 	bl	12fe8 <cJSON_CreateString>
    e9ba:	493d      	ldr	r1, [pc, #244]	; (eab0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50>)
    e9bc:	4602      	mov	r2, r0
    e9be:	4630      	mov	r0, r6
    e9c0:	f00f fa35 	bl	1de2e <cJSON_AddItemToObject>
   cJSON_AddItemToObject(root, "fields", fields);
    e9c4:	4642      	mov	r2, r8
    e9c6:	493b      	ldr	r1, [pc, #236]	; (eab4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>)
    e9c8:	4630      	mov	r0, r6
    e9ca:	f00f fa30 	bl	1de2e <cJSON_AddItemToObject>
   cJSON_AddItemToObject(fields, "macAddress", cJSON_CreateString(macAddr_str));
    e9ce:	f107 0010 	add.w	r0, r7, #16
    e9d2:	f004 fb09 	bl	12fe8 <cJSON_CreateString>
    e9d6:	4938      	ldr	r1, [pc, #224]	; (eab8 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>)
    e9d8:	4602      	mov	r2, r0
    e9da:	4640      	mov	r0, r8
    e9dc:	f00f fa27 	bl	1de2e <cJSON_AddItemToObject>
   cJSON_AddItemToObject(root, "gateway",  cJSON_CreateString(GATEWAY_NAME));
    e9e0:	4836      	ldr	r0, [pc, #216]	; (eabc <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    e9e2:	f004 fb01 	bl	12fe8 <cJSON_CreateString>
    e9e6:	4936      	ldr	r1, [pc, #216]	; (eac0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>)
    e9e8:	4602      	mov	r2, r0
    e9ea:	4630      	mov	r0, r6
    e9ec:	f00f fa1f 	bl	1de2e <cJSON_AddItemToObject>
   cJSON_AddItemToObject(root, "timestamp", cJSON_CreateString(timestamp_str));
    e9f0:	4638      	mov	r0, r7
    e9f2:	f004 faf9 	bl	12fe8 <cJSON_CreateString>
    e9f6:	4933      	ldr	r1, [pc, #204]	; (eac4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>)
    e9f8:	4602      	mov	r2, r0
    e9fa:	4630      	mov	r0, r6
    e9fc:	f00f fa17 	bl	1de2e <cJSON_AddItemToObject>
   
   char* uncompleted_json = NULL;
   uncompleted_json = cJSON_Print(root);
    ea00:	4630      	mov	r0, r6
    ea02:	f00f fa11 	bl	1de28 <cJSON_Print>
    ea06:	4680      	mov	r8, r0
__ssp_bos_icheck3(memset, void *, int)
    ea08:	464a      	mov	r2, r9
    ea0a:	2100      	movs	r1, #0
    ea0c:	4628      	mov	r0, r5
    ea0e:	f011 fe21 	bl	20654 <memset>

   memset(pkt_str, 0, pkt_str_len);

   if (uncompleted_json == NULL){
    ea12:	f1b8 0f00 	cmp.w	r8, #0
    ea16:	d12d      	bne.n	ea74 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14>
      printk("uncompleted_json = NULL!\n");
    ea18:	482b      	ldr	r0, [pc, #172]	; (eac8 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x68>)
    ea1a:	f00d f9e3 	bl	1bde4 <printk>
   //Convert the payload to string
   int data_len = notifData->dataLen;
   char data_str[7 + data_len * 4]; 
   uint8_t idx;
   int num_wr_chars = 0;
   for (idx = 0; idx < data_len; ++idx){
    ea1e:	f04f 0b00 	mov.w	fp, #0
   cJSON_Delete(root);
    ea22:	4630      	mov	r0, r6
   int num_wr_chars = 0;
    ea24:	465e      	mov	r6, fp
   cJSON_Delete(root);
    ea26:	f004 fabb 	bl	12fa0 <cJSON_Delete>
   int data_len = notifData->dataLen;
    ea2a:	f894 9018 	ldrb.w	r9, [r4, #24]
   char data_str[7 + data_len * 4]; 
    ea2e:	ea4f 0389 	mov.w	r3, r9, lsl #2
    ea32:	330e      	adds	r3, #14
    ea34:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    ea38:	ebad 0d03 	sub.w	sp, sp, r3
    ea3c:	f10d 0a20 	add.w	sl, sp, #32
   for (idx = 0; idx < data_len; ++idx){
    ea40:	fa5f f28b 	uxtb.w	r2, fp
    ea44:	4591      	cmp	r9, r2
    ea46:	d81b      	bhi.n	ea80 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    ea48:	224e      	movs	r2, #78	; 0x4e
    ea4a:	4641      	mov	r1, r8
    ea4c:	4628      	mov	r0, r5
    ea4e:	f011 fe5b 	bl	20708 <strncpy>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
    ea52:	4628      	mov	r0, r5
    ea54:	491d      	ldr	r1, [pc, #116]	; (eacc <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>)
    ea56:	f011 fe21 	bl	2069c <strcat>
    ea5a:	4651      	mov	r1, sl
    ea5c:	4628      	mov	r0, r5
    ea5e:	f011 fe1d 	bl	2069c <strcat>
    ea62:	4628      	mov	r0, r5
    ea64:	f108 014e 	add.w	r1, r8, #78	; 0x4e
    ea68:	f011 fe18 	bl	2069c <strcat>
   }
   strncpy(pkt_str, uncompleted_json, 78);
   strcat(pkt_str, ",\n\"data\":");
   strcat(pkt_str, data_str);
   strcat(pkt_str, &uncompleted_json[78]);  
}
    ea6c:	372c      	adds	r7, #44	; 0x2c
    ea6e:	46bd      	mov	sp, r7
    ea70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      printk("%c\n",uncompleted_json[77]);
    ea74:	f898 104d 	ldrb.w	r1, [r8, #77]	; 0x4d
    ea78:	4815      	ldr	r0, [pc, #84]	; (ead0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70>)
    ea7a:	f00d f9b3 	bl	1bde4 <printk>
    ea7e:	e7ce      	b.n	ea1e <convert_dusty_pkt_to_string+0xd6>
      if (idx == 0){
    ea80:	eb0a 0006 	add.w	r0, sl, r6
    ea84:	b93a      	cbnz	r2, ea96 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x36>
        num_wr_chars += sprintf(&data_str[num_wr_chars], "[%u", notifData->data[idx]);
    ea86:	7e62      	ldrb	r2, [r4, #25]
    ea88:	4912      	ldr	r1, [pc, #72]	; (ead4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74>)
        num_wr_chars += sprintf(&data_str[num_wr_chars], ",%u]", notifData->data[idx]);
    ea8a:	f00c fa7f 	bl	1af8c <siprintf>
    ea8e:	f10b 0b01 	add.w	fp, fp, #1
    ea92:	4406      	add	r6, r0
   for (idx = 0; idx < data_len; ++idx){
    ea94:	e7d4      	b.n	ea40 <convert_dusty_pkt_to_string+0xf8>
      else if (idx > 0 && idx < data_len-1) {
    ea96:	f109 31ff 	add.w	r1, r9, #4294967295
    ea9a:	458b      	cmp	fp, r1
        num_wr_chars += sprintf(&data_str[num_wr_chars], ",%u", notifData->data[idx]);
    ea9c:	f104 0219 	add.w	r2, r4, #25
    eaa0:	f812 200b 	ldrb.w	r2, [r2, fp]
    eaa4:	bfb4      	ite	lt
    eaa6:	490c      	ldrlt	r1, [pc, #48]	; (ead8 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>)
        num_wr_chars += sprintf(&data_str[num_wr_chars], ",%u]", notifData->data[idx]);
    eaa8:	490c      	ldrge	r1, [pc, #48]	; (eadc <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7c>)
    eaaa:	e7ee      	b.n	ea8a <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a>
    eaac:	00021d5a 	.word	0x00021d5a
    eab0:	00021d82 	.word	0x00021d82
    eab4:	00021d87 	.word	0x00021d87
    eab8:	00021d8e 	.word	0x00021d8e
    eabc:	00021d99 	.word	0x00021d99
    eac0:	00021d9f 	.word	0x00021d9f
    eac4:	00021da7 	.word	0x00021da7
    eac8:	00021db1 	.word	0x00021db1
    eacc:	00021ddc 	.word	0x00021ddc
    ead0:	00021dcb 	.word	0x00021dcb
    ead4:	00021dcf 	.word	0x00021dcf
    ead8:	00021dd3 	.word	0x00021dd3
    eadc:	00021dd7 	.word	0x00021dd7

0000eae0 <dn_ipmg_notif_cb>:
{
    eae0:	b5d0      	push	{r4, r6, r7, lr}
   if (cmdId==DN_NOTIFID_NOTIFDATA) {
    eae2:	2804      	cmp	r0, #4
{
    eae4:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
   if (cmdId==DN_NOTIFID_NOTIFDATA) {
    eae8:	d163      	bne.n	ebb2 <dn_ipmg_notif_cb+0xd2>
      convert_dusty_pkt_to_string("notifData", notifData_notif, &pkt_str, sizeof(pkt_str));
    eaea:	f44f 732f 	mov.w	r3, #700	; 0x2bc
    eaee:	4939      	ldr	r1, [pc, #228]	; (ebd4 <dn_ipmg_notif_cb+0xf4>)
    eaf0:	4839      	ldr	r0, [pc, #228]	; (ebd8 <dn_ipmg_notif_cb+0xf8>)
    eaf2:	aa09      	add	r2, sp, #36	; 0x24
    eaf4:	f7ff ff28 	bl	e948 <convert_dusty_pkt_to_string>
	return z_impl_k_uptime_ticks();
    eaf8:	f011 fb8a 	bl	20210 <z_impl_k_uptime_ticks>
    eafc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    eb00:	460a      	mov	r2, r1
    eb02:	fba0 0103 	umull	r0, r1, r0, r3
    eb06:	fb03 1102 	mla	r1, r3, r2, r1
    eb0a:	0bc3      	lsrs	r3, r0, #15
    eb0c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    eb10:	0bca      	lsrs	r2, r1, #15
      date_time_uptime_to_unix_time_ms(&uptime);
    eb12:	a806      	add	r0, sp, #24
      int64_t uptime = k_uptime_get();
    eb14:	e9cd 3206 	strd	r3, r2, [sp, #24]
      date_time_uptime_to_unix_time_ms(&uptime);
    eb18:	f006 fe66 	bl	157e8 <date_time_uptime_to_unix_time_ms>
      int err = date_time_now(&unix_time_ms);
    eb1c:	a804      	add	r0, sp, #16
    eb1e:	f006 febf 	bl	158a0 <date_time_now>
      printk("Date_time: %i %i\n", (uint32_t)(unix_time_ms/1000000), (uint32_t)(unix_time_ms%1000000));
    eb22:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    eb26:	2300      	movs	r3, #0
    eb28:	4630      	mov	r0, r6
    eb2a:	4639      	mov	r1, r7
    eb2c:	4a2b      	ldr	r2, [pc, #172]	; (ebdc <dn_ipmg_notif_cb+0xfc>)
    eb2e:	f7fe f82d 	bl	cb8c <__aeabi_ldivmod>
    eb32:	2300      	movs	r3, #0
    eb34:	4614      	mov	r4, r2
    eb36:	4630      	mov	r0, r6
    eb38:	4a28      	ldr	r2, [pc, #160]	; (ebdc <dn_ipmg_notif_cb+0xfc>)
    eb3a:	4639      	mov	r1, r7
    eb3c:	f7fe f826 	bl	cb8c <__aeabi_ldivmod>
    eb40:	4622      	mov	r2, r4
    eb42:	4601      	mov	r1, r0
    eb44:	4826      	ldr	r0, [pc, #152]	; (ebe0 <dn_ipmg_notif_cb+0x100>)
    eb46:	f00d f94d 	bl	1bde4 <printk>
    eb4a:	4c26      	ldr	r4, [pc, #152]	; (ebe4 <dn_ipmg_notif_cb+0x104>)
    eb4c:	4b26      	ldr	r3, [pc, #152]	; (ebe8 <dn_ipmg_notif_cb+0x108>)
      LOG_INF("[DUSTY_Thread] data notification received from the manager!");
    eb4e:	4827      	ldr	r0, [pc, #156]	; (ebec <dn_ipmg_notif_cb+0x10c>)
    eb50:	1ae4      	subs	r4, r4, r3
    eb52:	08e4      	lsrs	r4, r4, #3
    eb54:	01a4      	lsls	r4, r4, #6
    eb56:	f044 0403 	orr.w	r4, r4, #3
    eb5a:	4621      	mov	r1, r4
    eb5c:	f00d fd54 	bl	1c608 <log_0>
      msgq_item.data = store_to_data_buffer(&pkt_str, strlen(pkt_str)); 
    eb60:	a809      	add	r0, sp, #36	; 0x24
    eb62:	f7fe f9e7 	bl	cf34 <strlen>
    eb66:	4601      	mov	r1, r0
    eb68:	a809      	add	r0, sp, #36	; 0x24
    eb6a:	f7fe fd81 	bl	d670 <store_to_data_buffer>
    eb6e:	9003      	str	r0, [sp, #12]
      if (msgq_item.data == NULL){
    eb70:	b968      	cbnz	r0, eb8e <dn_ipmg_notif_cb+0xae>
	return z_impl_k_current_get();
    eb72:	f00b fcb1 	bl	1a4d8 <z_impl_k_current_get>
        comm_DS_error_handling(k_current_get(), err_code);
    eb76:	f06f 0168 	mvn.w	r1, #104	; 0x68
          comm_DS_error_handling(k_current_get(), err);
    eb7a:	f7ff fded 	bl	e758 <comm_DS_error_handling>
	z_impl_k_yield();
    eb7e:	f00b fc3b 	bl	1a3f8 <z_impl_k_yield>
	return z_impl_k_mutex_unlock(mutex);
    eb82:	481b      	ldr	r0, [pc, #108]	; (ebf0 <dn_ipmg_notif_cb+0x110>)
    eb84:	f00b f894 	bl	19cb0 <z_impl_k_mutex_unlock>
}
    eb88:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
    eb8c:	bdd0      	pop	{r4, r6, r7, pc}
	return z_impl_k_msgq_put(msgq, data, timeout);
    eb8e:	2200      	movs	r2, #0
    eb90:	a903      	add	r1, sp, #12
    eb92:	2300      	movs	r3, #0
    eb94:	4817      	ldr	r0, [pc, #92]	; (ebf4 <dn_ipmg_notif_cb+0x114>)
    eb96:	f00a ff61 	bl	19a5c <z_impl_k_msgq_put>
        if (err < SUCCESS){
    eb9a:	1e01      	subs	r1, r0, #0
    eb9c:	9101      	str	r1, [sp, #4]
    eb9e:	da03      	bge.n	eba8 <dn_ipmg_notif_cb+0xc8>
	return z_impl_k_current_get();
    eba0:	f00b fc9a 	bl	1a4d8 <z_impl_k_current_get>
          comm_DS_error_handling(k_current_get(), err);
    eba4:	9901      	ldr	r1, [sp, #4]
    eba6:	e7e8      	b.n	eb7a <dn_ipmg_notif_cb+0x9a>
          LOG_INF("[DUSTY_Thread] data succesfully written in the message queue!\n");
    eba8:	4621      	mov	r1, r4
    ebaa:	4813      	ldr	r0, [pc, #76]	; (ebf8 <dn_ipmg_notif_cb+0x118>)
      LOG_INF("[DUSTY_Thread] event notification received from the manager!\n\n");
    ebac:	f00d fd2c 	bl	1c608 <log_0>
    ebb0:	e7e7      	b.n	eb82 <dn_ipmg_notif_cb+0xa2>
   if(cmdId == DN_EVENTID_EVENTCOMMANDFINISHED){
    ebb2:	2802      	cmp	r0, #2
    ebb4:	d00a      	beq.n	ebcc <dn_ipmg_notif_cb+0xec>
   if(cmdId == DN_NOTIFID_NOTIFEVENT){
    ebb6:	2801      	cmp	r0, #1
    ebb8:	d1e3      	bne.n	eb82 <dn_ipmg_notif_cb+0xa2>
    ebba:	490a      	ldr	r1, [pc, #40]	; (ebe4 <dn_ipmg_notif_cb+0x104>)
    ebbc:	4b0a      	ldr	r3, [pc, #40]	; (ebe8 <dn_ipmg_notif_cb+0x108>)
      LOG_INF("[DUSTY_Thread] event notification received from the manager!\n\n");
    ebbe:	480f      	ldr	r0, [pc, #60]	; (ebfc <dn_ipmg_notif_cb+0x11c>)
    ebc0:	1ac9      	subs	r1, r1, r3
    ebc2:	08c9      	lsrs	r1, r1, #3
    ebc4:	0189      	lsls	r1, r1, #6
    ebc6:	f041 0103 	orr.w	r1, r1, #3
    ebca:	e7ef      	b.n	ebac <dn_ipmg_notif_cb+0xcc>
      printk("Net id successfully set to 1229!\n");
    ebcc:	480c      	ldr	r0, [pc, #48]	; (ec00 <dn_ipmg_notif_cb+0x120>)
    ebce:	f00d f909 	bl	1bde4 <printk>
   if(cmdId == DN_NOTIFID_NOTIFEVENT){
    ebd2:	e7d6      	b.n	eb82 <dn_ipmg_notif_cb+0xa2>
    ebd4:	20017f24 	.word	0x20017f24
    ebd8:	00021de6 	.word	0x00021de6
    ebdc:	000f4240 	.word	0x000f4240
    ebe0:	00021df0 	.word	0x00021df0
    ebe4:	00020e58 	.word	0x00020e58
    ebe8:	00020e58 	.word	0x00020e58
    ebec:	00021e02 	.word	0x00021e02
    ebf0:	200147f4 	.word	0x200147f4
    ebf4:	20014830 	.word	0x20014830
    ebf8:	00021e3e 	.word	0x00021e3e
    ebfc:	00021e9f 	.word	0x00021e9f
    ec00:	00021e7d 	.word	0x00021e7d

0000ec04 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    ec04:	2803      	cmp	r0, #3
{
    ec06:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    ec08:	d906      	bls.n	ec18 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
    ec0a:	f00e f980 	bl	1cf0e <__errno>
    ec0e:	2309      	movs	r3, #9
    ec10:	6003      	str	r3, [r0, #0]
    ec12:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
    ec16:	bd08      	pop	{r3, pc}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ec18:	220c      	movs	r2, #12
    ec1a:	4b05      	ldr	r3, [pc, #20]	; (ec30 <_check_fd+0x2c>)
    ec1c:	fb02 3000 	mla	r0, r2, r0, r3
    ec20:	3008      	adds	r0, #8
    ec22:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
    ec26:	2b00      	cmp	r3, #0
    ec28:	d0ef      	beq.n	ec0a <_check_fd+0x6>
	return 0;
    ec2a:	2000      	movs	r0, #0
    ec2c:	e7f3      	b.n	ec16 <_check_fd+0x12>
    ec2e:	bf00      	nop
    ec30:	20018010 	.word	0x20018010

0000ec34 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
    ec34:	b570      	push	{r4, r5, r6, lr}
    ec36:	4604      	mov	r4, r0
    ec38:	460d      	mov	r5, r1
    ec3a:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    ec3c:	f7ff ffe2 	bl	ec04 <_check_fd>
    ec40:	2800      	cmp	r0, #0
    ec42:	db0a      	blt.n	ec5a <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
    ec44:	4a08      	ldr	r2, [pc, #32]	; (ec68 <z_get_fd_obj+0x34>)
    ec46:	b155      	cbz	r5, ec5e <z_get_fd_obj+0x2a>
    ec48:	230c      	movs	r3, #12
    ec4a:	fb03 2304 	mla	r3, r3, r4, r2
    ec4e:	685b      	ldr	r3, [r3, #4]
    ec50:	42ab      	cmp	r3, r5
    ec52:	d004      	beq.n	ec5e <z_get_fd_obj+0x2a>
		errno = err;
    ec54:	f00e f95b 	bl	1cf0e <__errno>
    ec58:	6006      	str	r6, [r0, #0]
		return NULL;
    ec5a:	2000      	movs	r0, #0
    ec5c:	e002      	b.n	ec64 <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
    ec5e:	200c      	movs	r0, #12
    ec60:	4344      	muls	r4, r0
    ec62:	5910      	ldr	r0, [r2, r4]
}
    ec64:	bd70      	pop	{r4, r5, r6, pc}
    ec66:	bf00      	nop
    ec68:	20018010 	.word	0x20018010

0000ec6c <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
    ec6c:	b538      	push	{r3, r4, r5, lr}
    ec6e:	4605      	mov	r5, r0
    ec70:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    ec72:	f7ff ffc7 	bl	ec04 <_check_fd>
    ec76:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
    ec78:	bfa3      	ittte	ge
    ec7a:	230c      	movge	r3, #12
    ec7c:	fb03 f005 	mulge.w	r0, r3, r5
    ec80:	4a03      	ldrge	r2, [pc, #12]	; (ec90 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
    ec82:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
    ec84:	bfa1      	itttt	ge
    ec86:	1813      	addge	r3, r2, r0
    ec88:	685b      	ldrge	r3, [r3, #4]
    ec8a:	6023      	strge	r3, [r4, #0]

	return fd_entry->obj;
    ec8c:	5810      	ldrge	r0, [r2, r0]
}
    ec8e:	bd38      	pop	{r3, r4, r5, pc}
    ec90:	20018010 	.word	0x20018010

0000ec94 <z_reserve_fd>:

int z_reserve_fd(void)
{
    ec94:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    ec96:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
    ec98:	f04f 33ff 	mov.w	r3, #4294967295
    ec9c:	f04f 32ff 	mov.w	r2, #4294967295
    eca0:	4812      	ldr	r0, [pc, #72]	; (ecec <z_reserve_fd+0x58>)
    eca2:	f00a ff8d 	bl	19bc0 <z_impl_k_mutex_lock>
    eca6:	4b12      	ldr	r3, [pc, #72]	; (ecf0 <z_reserve_fd+0x5c>)
    eca8:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
    ecac:	b17a      	cbz	r2, ecce <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    ecae:	3401      	adds	r4, #1
    ecb0:	2c04      	cmp	r4, #4
    ecb2:	f103 030c 	add.w	r3, r3, #12
    ecb6:	d1f7      	bne.n	eca8 <z_reserve_fd+0x14>
	errno = ENFILE;
    ecb8:	f00e f929 	bl	1cf0e <__errno>
    ecbc:	2317      	movs	r3, #23
	return -1;
    ecbe:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
    ecc2:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    ecc4:	4809      	ldr	r0, [pc, #36]	; (ecec <z_reserve_fd+0x58>)
    ecc6:	f00a fff3 	bl	19cb0 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    ecca:	4620      	mov	r0, r4
    eccc:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ecce:	e8d3 1fef 	ldaex	r1, [r3]
    ecd2:	3101      	adds	r1, #1
    ecd4:	e8c3 1fe0 	stlex	r0, r1, [r3]
    ecd8:	2800      	cmp	r0, #0
    ecda:	d1f8      	bne.n	ecce <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
    ecdc:	230c      	movs	r3, #12
    ecde:	4363      	muls	r3, r4
    ece0:	4904      	ldr	r1, [pc, #16]	; (ecf4 <z_reserve_fd+0x60>)
    ece2:	18c8      	adds	r0, r1, r3
    ece4:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
    ece6:	6042      	str	r2, [r0, #4]
    ece8:	e7ec      	b.n	ecc4 <z_reserve_fd+0x30>
    ecea:	bf00      	nop
    ecec:	200147a4 	.word	0x200147a4
    ecf0:	20018018 	.word	0x20018018
    ecf4:	20018010 	.word	0x20018010

0000ecf8 <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
    ecf8:	230c      	movs	r3, #12
{
    ecfa:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
    ecfc:	4358      	muls	r0, r3
    ecfe:	4c02      	ldr	r4, [pc, #8]	; (ed08 <z_finalize_fd+0x10>)
    ed00:	1823      	adds	r3, r4, r0
    ed02:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
    ed04:	605a      	str	r2, [r3, #4]
}
    ed06:	bd10      	pop	{r4, pc}
    ed08:	20018010 	.word	0x20018010

0000ed0c <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
    ed0c:	230c      	movs	r3, #12
    ed0e:	4a0e      	ldr	r2, [pc, #56]	; (ed48 <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
    ed10:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
    ed12:	fb03 2300 	mla	r3, r3, r0, r2
    ed16:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ed18:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
    ed1c:	b191      	cbz	r1, ed44 <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
    ed1e:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    ed20:	e8d3 5fef 	ldaex	r5, [r3]
    ed24:	428d      	cmp	r5, r1
    ed26:	d104      	bne.n	ed32 <z_free_fd+0x26>
    ed28:	e8c3 4fec 	stlex	ip, r4, [r3]
    ed2c:	f1bc 0f00 	cmp.w	ip, #0
    ed30:	d1f6      	bne.n	ed20 <z_free_fd+0x14>
    ed32:	d1f1      	bne.n	ed18 <z_free_fd+0xc>
	if (old_rc != 1) {
    ed34:	2901      	cmp	r1, #1
    ed36:	d105      	bne.n	ed44 <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
    ed38:	230c      	movs	r3, #12
    ed3a:	4358      	muls	r0, r3
    ed3c:	2300      	movs	r3, #0
    ed3e:	1811      	adds	r1, r2, r0
    ed40:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
    ed42:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
    ed44:	bd30      	pop	{r4, r5, pc}
    ed46:	bf00      	nop
    ed48:	20018010 	.word	0x20018010

0000ed4c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    ed4c:	680b      	ldr	r3, [r1, #0]
    ed4e:	3301      	adds	r3, #1
    ed50:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    ed52:	4b01      	ldr	r3, [pc, #4]	; (ed58 <char_out+0xc>)
    ed54:	681b      	ldr	r3, [r3, #0]
    ed56:	4718      	bx	r3
    ed58:	20014500 	.word	0x20014500

0000ed5c <__printk_hook_install>:
	_char_out = fn;
    ed5c:	4b01      	ldr	r3, [pc, #4]	; (ed64 <__printk_hook_install+0x8>)
    ed5e:	6018      	str	r0, [r3, #0]
}
    ed60:	4770      	bx	lr
    ed62:	bf00      	nop
    ed64:	20014500 	.word	0x20014500

0000ed68 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    ed68:	b507      	push	{r0, r1, r2, lr}
    ed6a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    ed6c:	2100      	movs	r1, #0
{
    ed6e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    ed70:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    ed72:	4803      	ldr	r0, [pc, #12]	; (ed80 <vprintk+0x18>)
    ed74:	a901      	add	r1, sp, #4
    ed76:	f000 f9e7 	bl	f148 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    ed7a:	b003      	add	sp, #12
    ed7c:	f85d fb04 	ldr.w	pc, [sp], #4
    ed80:	0000ed4d 	.word	0x0000ed4d

0000ed84 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    ed84:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    ed86:	2500      	movs	r5, #0
{
    ed88:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    ed8a:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    ed8e:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    ed90:	a901      	add	r1, sp, #4
    ed92:	4805      	ldr	r0, [pc, #20]	; (eda8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    ed94:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    ed96:	f000 f9d7 	bl	f148 <cbvprintf>

	if (ctx.count < ctx.max) {
    ed9a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    ed9e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    eda0:	bfb8      	it	lt
    eda2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    eda4:	b005      	add	sp, #20
    eda6:	bd30      	pop	{r4, r5, pc}
    eda8:	0001bdbf 	.word	0x0001bdbf

0000edac <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    edac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    edb0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    edb4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    edb6:	f019 0808 	ands.w	r8, r9, #8
{
    edba:	4693      	mov	fp, r2
	if (processing) {
    edbc:	d00e      	beq.n	eddc <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    edbe:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    edc0:	bf0c      	ite	eq
    edc2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    edc6:	f049 0920 	orrne.w	r9, r9, #32
    edca:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    edce:	f38b 8811 	msr	BASEPRI, fp
    edd2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    edd6:	b003      	add	sp, #12
    edd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    eddc:	f8df a198 	ldr.w	sl, [pc, #408]	; ef78 <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ede0:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    ede4:	2902      	cmp	r1, #2
    ede6:	d107      	bne.n	edf8 <process_event+0x4c>
			evt = process_recheck(mgr);
    ede8:	4620      	mov	r0, r4
    edea:	f00d f815 	bl	1be18 <process_recheck>
		if (evt == EVT_NOP) {
    edee:	2800      	cmp	r0, #0
    edf0:	d0ed      	beq.n	edce <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    edf2:	2801      	cmp	r0, #1
    edf4:	8b23      	ldrh	r3, [r4, #24]
    edf6:	d14d      	bne.n	ee94 <process_event+0xe8>
			res = mgr->last_res;
    edf8:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    edfa:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    edfc:	2f00      	cmp	r7, #0
    edfe:	da15      	bge.n	ee2c <process_event+0x80>
		*clients = mgr->clients;
    ee00:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ee02:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    ee06:	e9c4 8800 	strd	r8, r8, [r4]
    ee0a:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    ee0e:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    ee10:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ee12:	8b21      	ldrh	r1, [r4, #24]
    ee14:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ee18:	454a      	cmp	r2, r9
    ee1a:	d002      	beq.n	ee22 <process_event+0x76>
		if (do_monitors
    ee1c:	68a3      	ldr	r3, [r4, #8]
    ee1e:	2b00      	cmp	r3, #0
    ee20:	d159      	bne.n	eed6 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    ee22:	b90d      	cbnz	r5, ee28 <process_event+0x7c>
		    || (transit != NULL)) {
    ee24:	2e00      	cmp	r6, #0
    ee26:	d071      	beq.n	ef0c <process_event+0x160>
    ee28:	2300      	movs	r3, #0
    ee2a:	e055      	b.n	eed8 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ee2c:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    ee30:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    ee32:	2a01      	cmp	r2, #1
    ee34:	d81f      	bhi.n	ee76 <process_event+0xca>
		*clients = mgr->clients;
    ee36:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    ee3a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    ee3c:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    ee3e:	b289      	uxth	r1, r1
	list->tail = NULL;
    ee40:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    ee44:	d10c      	bne.n	ee60 <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    ee46:	2d00      	cmp	r5, #0
    ee48:	462b      	mov	r3, r5
    ee4a:	bf38      	it	cc
    ee4c:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    ee4e:	b12b      	cbz	r3, ee5c <process_event+0xb0>
				mgr->refs += 1U;
    ee50:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ee52:	681b      	ldr	r3, [r3, #0]
    ee54:	3201      	adds	r2, #1
    ee56:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    ee58:	2b00      	cmp	r3, #0
    ee5a:	d1f8      	bne.n	ee4e <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ee5c:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    ee60:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    ee62:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    ee64:	f00c ffd8 	bl	1be18 <process_recheck>
    ee68:	2800      	cmp	r0, #0
    ee6a:	d0d1      	beq.n	ee10 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ee6c:	8b23      	ldrh	r3, [r4, #24]
    ee6e:	f043 0320 	orr.w	r3, r3, #32
    ee72:	8323      	strh	r3, [r4, #24]
    ee74:	e7cc      	b.n	ee10 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    ee76:	2b04      	cmp	r3, #4
    ee78:	d10a      	bne.n	ee90 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ee7a:	f021 0107 	bic.w	r1, r1, #7
    ee7e:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    ee80:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    ee82:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    ee84:	f00c ffc8 	bl	1be18 <process_recheck>
    ee88:	b110      	cbz	r0, ee90 <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ee8a:	f041 0120 	orr.w	r1, r1, #32
    ee8e:	8321      	strh	r1, [r4, #24]
    ee90:	2500      	movs	r5, #0
    ee92:	e7bd      	b.n	ee10 <process_event+0x64>
		} else if (evt == EVT_START) {
    ee94:	2803      	cmp	r0, #3
    ee96:	d109      	bne.n	eeac <process_event+0x100>
			transit = mgr->transitions->start;
    ee98:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ee9a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    ee9e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    eea0:	f043 0306 	orr.w	r3, r3, #6
}
    eea4:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    eea6:	8323      	strh	r3, [r4, #24]
		res = 0;
    eea8:	462f      	mov	r7, r5
    eeaa:	e7b2      	b.n	ee12 <process_event+0x66>
		} else if (evt == EVT_STOP) {
    eeac:	2804      	cmp	r0, #4
    eeae:	d106      	bne.n	eebe <process_event+0x112>
			transit = mgr->transitions->stop;
    eeb0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    eeb2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    eeb6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    eeb8:	f043 0304 	orr.w	r3, r3, #4
    eebc:	e7f2      	b.n	eea4 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    eebe:	2805      	cmp	r0, #5
    eec0:	d106      	bne.n	eed0 <process_event+0x124>
			transit = mgr->transitions->reset;
    eec2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    eec4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    eec8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    eeca:	f043 0305 	orr.w	r3, r3, #5
    eece:	e7e9      	b.n	eea4 <process_event+0xf8>
    eed0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    eed2:	462e      	mov	r6, r5
    eed4:	e7e8      	b.n	eea8 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    eed6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    eed8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    eedc:	8321      	strh	r1, [r4, #24]
    eede:	f38b 8811 	msr	BASEPRI, fp
    eee2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    eee6:	bb03      	cbnz	r3, ef2a <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    eee8:	2d00      	cmp	r5, #0
    eeea:	d134      	bne.n	ef56 <process_event+0x1aa>
			if (transit != NULL) {
    eeec:	b116      	cbz	r6, eef4 <process_event+0x148>
				transit(mgr, transition_complete);
    eeee:	4651      	mov	r1, sl
    eef0:	4620      	mov	r0, r4
    eef2:	47b0      	blx	r6
	__asm__ volatile(
    eef4:	f04f 0320 	mov.w	r3, #32
    eef8:	f3ef 8b11 	mrs	fp, BASEPRI
    eefc:	f383 8811 	msr	BASEPRI, r3
    ef00:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    ef04:	8b23      	ldrh	r3, [r4, #24]
    ef06:	f023 0308 	bic.w	r3, r3, #8
    ef0a:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    ef0c:	8b23      	ldrh	r3, [r4, #24]
    ef0e:	06da      	lsls	r2, r3, #27
    ef10:	d52a      	bpl.n	ef68 <process_event+0x1bc>
			evt = EVT_COMPLETE;
    ef12:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    ef14:	f023 0310 	bic.w	r3, r3, #16
    ef18:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    ef1a:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    ef1e:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    ef22:	2900      	cmp	r1, #0
    ef24:	f47f af5e 	bne.w	ede4 <process_event+0x38>
out:
    ef28:	e751      	b.n	edce <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ef2a:	68a1      	ldr	r1, [r4, #8]
    ef2c:	2900      	cmp	r1, #0
    ef2e:	d0db      	beq.n	eee8 <process_event+0x13c>
	return node->next;
    ef30:	680b      	ldr	r3, [r1, #0]
    ef32:	2b00      	cmp	r3, #0
    ef34:	bf38      	it	cc
    ef36:	2300      	movcc	r3, #0
    ef38:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
    ef3a:	4620      	mov	r0, r4
    ef3c:	463b      	mov	r3, r7
    ef3e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    ef42:	9201      	str	r2, [sp, #4]
    ef44:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ef46:	9a01      	ldr	r2, [sp, #4]
    ef48:	f1b9 0f00 	cmp.w	r9, #0
    ef4c:	d0cc      	beq.n	eee8 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ef4e:	4649      	mov	r1, r9
    ef50:	f8d9 3000 	ldr.w	r3, [r9]
    ef54:	e7ed      	b.n	ef32 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ef56:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    ef58:	463b      	mov	r3, r7
    ef5a:	4620      	mov	r0, r4
    ef5c:	9201      	str	r2, [sp, #4]
    ef5e:	682d      	ldr	r5, [r5, #0]
    ef60:	f00c ff76 	bl	1be50 <notify_one>
	while (!sys_slist_is_empty(list)) {
    ef64:	9a01      	ldr	r2, [sp, #4]
    ef66:	e7bf      	b.n	eee8 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    ef68:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    ef6c:	bf1e      	ittt	ne
    ef6e:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    ef72:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    ef74:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    ef76:	e7d0      	b.n	ef1a <process_event+0x16e>
    ef78:	0001be7d 	.word	0x0001be7d

0000ef7c <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
    ef7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
    ef80:	f240 746c 	movw	r4, #1900	; 0x76c
    ef84:	2500      	movs	r5, #0
	unsigned int m = tm->tm_mon + 1;
    ef86:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
    ef88:	68c2      	ldr	r2, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
    ef8a:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
    ef8e:	1e53      	subs	r3, r2, #1
    ef90:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
    ef92:	6943      	ldr	r3, [r0, #20]
{
    ef94:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
    ef96:	18e4      	adds	r4, r4, r3
    ef98:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
    ef9c:	f1b9 0f02 	cmp.w	r9, #2
    efa0:	bf8c      	ite	hi
    efa2:	2300      	movhi	r3, #0
    efa4:	2301      	movls	r3, #1
    efa6:	1ae4      	subs	r4, r4, r3
    efa8:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
    efac:	2c00      	cmp	r4, #0
    efae:	f175 0300 	sbcs.w	r3, r5, #0
    efb2:	da54      	bge.n	f05e <timeutil_timegm64+0xe2>
    efb4:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
    efb8:	f44f 72c8 	mov.w	r2, #400	; 0x190
    efbc:	2300      	movs	r3, #0
    efbe:	1820      	adds	r0, r4, r0
    efc0:	f145 31ff 	adc.w	r1, r5, #4294967295
    efc4:	f7fd fde2 	bl	cb8c <__aeabi_ldivmod>
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    efc8:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
    efcc:	4a27      	ldr	r2, [pc, #156]	; (f06c <timeutil_timegm64+0xf0>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
    efce:	4603      	mov	r3, r0
	unsigned int yoe = y - era * 400;
    efd0:	fb02 4200 	mla	r2, r2, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    efd4:	e9d8 0400 	ldrd	r0, r4, [r8]
    efd8:	f8d8 8008 	ldr.w	r8, [r8, #8]
    efdc:	17e5      	asrs	r5, r4, #31
    efde:	fbcc 4508 	smlal	r4, r5, ip, r8
    efe2:	fba4 ab0c 	umull	sl, fp, r4, ip
    efe6:	fb0c bb05 	mla	fp, ip, r5, fp
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    efea:	f1b9 0f02 	cmp.w	r9, #2
    efee:	bf8c      	ite	hi
    eff0:	f06f 0e02 	mvnhi.w	lr, #2
    eff4:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    eff8:	eb1a 0a00 	adds.w	sl, sl, r0
    effc:	eb4b 7be0 	adc.w	fp, fp, r0, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    f000:	f240 106d 	movw	r0, #365	; 0x16d
    f004:	0894      	lsrs	r4, r2, #2
    f006:	fb00 4002 	mla	r0, r0, r2, r4
    f00a:	9c01      	ldr	r4, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    f00c:	44f1      	add	r9, lr
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    f00e:	4420      	add	r0, r4
    f010:	2464      	movs	r4, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    f012:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    f016:	fbb2 f4f4 	udiv	r4, r2, r4
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    f01a:	2205      	movs	r2, #5
    f01c:	fb0e fe09 	mul.w	lr, lr, r9
    f020:	f10e 0e02 	add.w	lr, lr, #2
    f024:	fbbe fef2 	udiv	lr, lr, r2
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    f028:	1b04      	subs	r4, r0, r4
	return era * 146097 + (time_t)doe - 719468;
    f02a:	4811      	ldr	r0, [pc, #68]	; (f070 <timeutil_timegm64+0xf4>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    f02c:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
    f02e:	fba3 2300 	umull	r2, r3, r3, r0
    f032:	fb00 3301 	mla	r3, r0, r1, r3
    f036:	490f      	ldr	r1, [pc, #60]	; (f074 <timeutil_timegm64+0xf8>)
    f038:	1856      	adds	r6, r2, r1
	time += 86400LL * ndays;
    f03a:	490f      	ldr	r1, [pc, #60]	; (f078 <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
    f03c:	f143 37ff 	adc.w	r7, r3, #4294967295
    f040:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
    f044:	fba6 2301 	umull	r2, r3, r6, r1
	return era * 146097 + (time_t)doe - 719468;
    f048:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
    f04c:	fb01 3307 	mla	r3, r1, r7, r3

	return time;
}
    f050:	eb12 000a 	adds.w	r0, r2, sl
    f054:	eb43 010b 	adc.w	r1, r3, fp
    f058:	b003      	add	sp, #12
    f05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
    f05e:	f44f 72c8 	mov.w	r2, #400	; 0x190
    f062:	2300      	movs	r3, #0
    f064:	4620      	mov	r0, r4
    f066:	4629      	mov	r1, r5
    f068:	e7ac      	b.n	efc4 <timeutil_timegm64+0x48>
    f06a:	bf00      	nop
    f06c:	fffffe70 	.word	0xfffffe70
    f070:	00023ab1 	.word	0x00023ab1
    f074:	fff50594 	.word	0xfff50594
    f078:	00015180 	.word	0x00015180

0000f07c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    f07c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f07e:	4602      	mov	r2, r0
    f080:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    f082:	270a      	movs	r7, #10
	size_t val = 0;
    f084:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    f086:	4e07      	ldr	r6, [pc, #28]	; (f0a4 <extract_decimal+0x28>)
    f088:	460c      	mov	r4, r1
    f08a:	7823      	ldrb	r3, [r4, #0]
    f08c:	3101      	adds	r1, #1
    f08e:	5d9d      	ldrb	r5, [r3, r6]
    f090:	076d      	lsls	r5, r5, #29
    f092:	d401      	bmi.n	f098 <extract_decimal+0x1c>
	}
	*str = sp;
    f094:	6014      	str	r4, [r2, #0]
	return val;
}
    f096:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    f098:	fb07 3300 	mla	r3, r7, r0, r3
    f09c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    f0a0:	e7f2      	b.n	f088 <extract_decimal+0xc>
    f0a2:	bf00      	nop
    f0a4:	00023660 	.word	0x00023660

0000f0a8 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    f0a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0ac:	4614      	mov	r4, r2
    f0ae:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    f0b0:	78d3      	ldrb	r3, [r2, #3]
    f0b2:	4a24      	ldr	r2, [pc, #144]	; (f144 <encode_uint+0x9c>)
	switch (specifier) {
    f0b4:	2b6f      	cmp	r3, #111	; 0x6f
    f0b6:	f813 a002 	ldrb.w	sl, [r3, r2]
{
    f0ba:	4606      	mov	r6, r0
    f0bc:	f00a 0203 	and.w	r2, sl, #3
    f0c0:	460f      	mov	r7, r1
    f0c2:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    f0c4:	d02d      	beq.n	f122 <encode_uint+0x7a>
    f0c6:	d828      	bhi.n	f11a <encode_uint+0x72>
		return 16;
    f0c8:	2b58      	cmp	r3, #88	; 0x58
    f0ca:	bf14      	ite	ne
    f0cc:	250a      	movne	r5, #10
    f0ce:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    f0d0:	46aa      	mov	sl, r5
    f0d2:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
    f0d6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    f0da:	4652      	mov	r2, sl
    f0dc:	465b      	mov	r3, fp
    f0de:	4630      	mov	r0, r6
    f0e0:	4639      	mov	r1, r7
    f0e2:	f7fd fda3 	bl	cc2c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    f0e6:	2a09      	cmp	r2, #9
    f0e8:	b2d3      	uxtb	r3, r2
    f0ea:	d81f      	bhi.n	f12c <encode_uint+0x84>
    f0ec:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    f0ee:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    f0f0:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    f0f2:	bf08      	it	eq
    f0f4:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    f0f6:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    f0fa:	d301      	bcc.n	f100 <encode_uint+0x58>
    f0fc:	45c8      	cmp	r8, r9
    f0fe:	d812      	bhi.n	f126 <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    f100:	7823      	ldrb	r3, [r4, #0]
    f102:	069b      	lsls	r3, r3, #26
    f104:	d505      	bpl.n	f112 <encode_uint+0x6a>
		if (radix == 8) {
    f106:	2d08      	cmp	r5, #8
    f108:	d116      	bne.n	f138 <encode_uint+0x90>
			conv->altform_0 = true;
    f10a:	78a3      	ldrb	r3, [r4, #2]
    f10c:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    f110:	70a3      	strb	r3, [r4, #2]
		}
	}

	return bp;
}
    f112:	4640      	mov	r0, r8
    f114:	b003      	add	sp, #12
    f116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    f11a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    f11e:	2b70      	cmp	r3, #112	; 0x70
    f120:	e7d3      	b.n	f0ca <encode_uint+0x22>
	switch (specifier) {
    f122:	2508      	movs	r5, #8
    f124:	e7d4      	b.n	f0d0 <encode_uint+0x28>
		value /= radix;
    f126:	4606      	mov	r6, r0
    f128:	460f      	mov	r7, r1
    f12a:	e7d6      	b.n	f0da <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    f12c:	9a01      	ldr	r2, [sp, #4]
    f12e:	2a01      	cmp	r2, #1
    f130:	bf0c      	ite	eq
    f132:	3337      	addeq	r3, #55	; 0x37
    f134:	3357      	addne	r3, #87	; 0x57
    f136:	e7da      	b.n	f0ee <encode_uint+0x46>
		} else if (radix == 16) {
    f138:	2d10      	cmp	r5, #16
    f13a:	d1ea      	bne.n	f112 <encode_uint+0x6a>
			conv->altform_0c = true;
    f13c:	78a3      	ldrb	r3, [r4, #2]
    f13e:	f043 0310 	orr.w	r3, r3, #16
    f142:	e7e5      	b.n	f110 <encode_uint+0x68>
    f144:	00023660 	.word	0x00023660

0000f148 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    f148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f14c:	4688      	mov	r8, r1
    f14e:	4691      	mov	r9, r2
    f150:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    f152:	2500      	movs	r5, #0
{
    f154:	b0a3      	sub	sp, #140	; 0x8c
    f156:	9006      	str	r0, [sp, #24]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    f158:	f899 0000 	ldrb.w	r0, [r9]
    f15c:	b910      	cbnz	r0, f164 <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
    f15e:	4628      	mov	r0, r5
    f160:	f000 bdae 	b.w	fcc0 <cbvprintf+0xb78>
		if (*fp != '%') {
    f164:	f109 0301 	add.w	r3, r9, #1
    f168:	2825      	cmp	r0, #37	; 0x25
    f16a:	9307      	str	r3, [sp, #28]
    f16c:	d007      	beq.n	f17e <cbvprintf+0x36>
			OUTC(*fp++);
    f16e:	4641      	mov	r1, r8
			OUTC('%');
    f170:	9b06      	ldr	r3, [sp, #24]
    f172:	4798      	blx	r3
    f174:	2800      	cmp	r0, #0
    f176:	f2c0 85a3 	blt.w	fcc0 <cbvprintf+0xb78>
    f17a:	3501      	adds	r5, #1
		if (bps == NULL) {
    f17c:	e224      	b.n	f5c8 <cbvprintf+0x480>
		} state = {
    f17e:	2218      	movs	r2, #24
    f180:	2100      	movs	r1, #0
    f182:	a814      	add	r0, sp, #80	; 0x50
    f184:	f011 fa66 	bl	20654 <memset>
	if (*sp == '%') {
    f188:	f899 3001 	ldrb.w	r3, [r9, #1]
    f18c:	2b25      	cmp	r3, #37	; 0x25
    f18e:	d059      	beq.n	f244 <cbvprintf+0xfc>
    f190:	9a07      	ldr	r2, [sp, #28]
    f192:	4616      	mov	r6, r2
		switch (*sp) {
    f194:	f812 3b01 	ldrb.w	r3, [r2], #1
    f198:	2b2b      	cmp	r3, #43	; 0x2b
    f19a:	f000 808b 	beq.w	f2b4 <cbvprintf+0x16c>
    f19e:	d879      	bhi.n	f294 <cbvprintf+0x14c>
    f1a0:	2b20      	cmp	r3, #32
    f1a2:	f000 808c 	beq.w	f2be <cbvprintf+0x176>
    f1a6:	2b23      	cmp	r3, #35	; 0x23
    f1a8:	f000 808e 	beq.w	f2c8 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
    f1ac:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    f1b0:	f003 0244 	and.w	r2, r3, #68	; 0x44
    f1b4:	2a44      	cmp	r2, #68	; 0x44
    f1b6:	d103      	bne.n	f1c0 <cbvprintf+0x78>
		conv->flag_zero = false;
    f1b8:	f36f 1386 	bfc	r3, #6, #1
    f1bc:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	conv->width_present = true;
    f1c0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    f1c4:	9612      	str	r6, [sp, #72]	; 0x48
    f1c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f1ca:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	if (*sp == '*') {
    f1ce:	7833      	ldrb	r3, [r6, #0]
    f1d0:	2b2a      	cmp	r3, #42	; 0x2a
    f1d2:	d17e      	bne.n	f2d2 <cbvprintf+0x18a>
		conv->width_star = true;
    f1d4:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    f1d8:	f043 0301 	orr.w	r3, r3, #1
    f1dc:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		return ++sp;
    f1e0:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    f1e2:	9312      	str	r3, [sp, #72]	; 0x48
	conv->prec_present = (*sp == '.');
    f1e4:	781a      	ldrb	r2, [r3, #0]
    f1e6:	2a2e      	cmp	r2, #46	; 0x2e
    f1e8:	bf0c      	ite	eq
    f1ea:	2101      	moveq	r1, #1
    f1ec:	2100      	movne	r1, #0
    f1ee:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
    f1f2:	f361 0241 	bfi	r2, r1, #1, #1
    f1f6:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	if (!conv->prec_present) {
    f1fa:	d10b      	bne.n	f214 <cbvprintf+0xcc>
	++sp;
    f1fc:	1c5a      	adds	r2, r3, #1
    f1fe:	9212      	str	r2, [sp, #72]	; 0x48
	if (*sp == '*') {
    f200:	785a      	ldrb	r2, [r3, #1]
    f202:	2a2a      	cmp	r2, #42	; 0x2a
    f204:	d17b      	bne.n	f2fe <cbvprintf+0x1b6>
		conv->prec_star = true;
    f206:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
		return ++sp;
    f20a:	3302      	adds	r3, #2
		conv->prec_star = true;
    f20c:	f042 0204 	orr.w	r2, r2, #4
    f210:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	switch (*sp) {
    f214:	461a      	mov	r2, r3
    f216:	f812 0b01 	ldrb.w	r0, [r2], #1
    f21a:	286c      	cmp	r0, #108	; 0x6c
    f21c:	f000 80cf 	beq.w	f3be <cbvprintf+0x276>
    f220:	d87d      	bhi.n	f31e <cbvprintf+0x1d6>
    f222:	2868      	cmp	r0, #104	; 0x68
    f224:	f000 8084 	beq.w	f330 <cbvprintf+0x1e8>
    f228:	286a      	cmp	r0, #106	; 0x6a
    f22a:	f000 80d2 	beq.w	f3d2 <cbvprintf+0x28a>
    f22e:	284c      	cmp	r0, #76	; 0x4c
    f230:	f000 80d6 	beq.w	f3e0 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
    f234:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
    f238:	f36f 02c6 	bfc	r2, #3, #4
    f23c:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
		break;
    f240:	461a      	mov	r2, r3
    f242:	e080      	b.n	f346 <cbvprintf+0x1fe>
		conv->specifier = *sp++;
    f244:	f109 0202 	add.w	r2, r9, #2
    f248:	9207      	str	r2, [sp, #28]
    f24a:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
		if (conv->width_star) {
    f24e:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    f252:	07de      	lsls	r6, r3, #31
    f254:	f140 816d 	bpl.w	f532 <cbvprintf+0x3ea>
			width = va_arg(ap, int);
    f258:	f854 ab04 	ldr.w	sl, [r4], #4
			if (width < 0) {
    f25c:	f1ba 0f00 	cmp.w	sl, #0
    f260:	da07      	bge.n	f272 <cbvprintf+0x12a>
				conv->flag_dash = true;
    f262:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
				width = -width;
    f266:	f1ca 0a00 	rsb	sl, sl, #0
				conv->flag_dash = true;
    f26a:	f042 0204 	orr.w	r2, r2, #4
    f26e:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
		if (conv->prec_star) {
    f272:	0758      	lsls	r0, r3, #29
    f274:	f140 8166 	bpl.w	f544 <cbvprintf+0x3fc>
			int arg = va_arg(ap, int);
    f278:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    f27c:	2f00      	cmp	r7, #0
    f27e:	f280 8165 	bge.w	f54c <cbvprintf+0x404>
				conv->prec_present = false;
    f282:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    f286:	f36f 0341 	bfc	r3, #1, #1
    f28a:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		int precision = -1;
    f28e:	f04f 37ff 	mov.w	r7, #4294967295
    f292:	e15b      	b.n	f54c <cbvprintf+0x404>
		switch (*sp) {
    f294:	2b2d      	cmp	r3, #45	; 0x2d
    f296:	d006      	beq.n	f2a6 <cbvprintf+0x15e>
    f298:	2b30      	cmp	r3, #48	; 0x30
    f29a:	d187      	bne.n	f1ac <cbvprintf+0x64>
			conv->flag_zero = true;
    f29c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    f2a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f2a4:	e003      	b.n	f2ae <cbvprintf+0x166>
			conv->flag_dash = true;
    f2a6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    f2aa:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    f2ae:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
			break;
    f2b2:	e76e      	b.n	f192 <cbvprintf+0x4a>
			conv->flag_plus = true;
    f2b4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    f2b8:	f043 0308 	orr.w	r3, r3, #8
    f2bc:	e7f7      	b.n	f2ae <cbvprintf+0x166>
			conv->flag_space = true;
    f2be:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    f2c2:	f043 0310 	orr.w	r3, r3, #16
    f2c6:	e7f2      	b.n	f2ae <cbvprintf+0x166>
			conv->flag_hash = true;
    f2c8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    f2cc:	f043 0320 	orr.w	r3, r3, #32
    f2d0:	e7ed      	b.n	f2ae <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
    f2d2:	a812      	add	r0, sp, #72	; 0x48
    f2d4:	f7ff fed2 	bl	f07c <extract_decimal>
	if (sp != wp) {
    f2d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f2da:	42b3      	cmp	r3, r6
    f2dc:	d081      	beq.n	f1e2 <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
    f2de:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
		conv->width_value = width;
    f2e2:	9017      	str	r0, [sp, #92]	; 0x5c
		conv->unsupported |= ((conv->width_value < 0)
    f2e4:	f3c6 0140 	ubfx	r1, r6, #1, #1
    f2e8:	ea41 70d0 	orr.w	r0, r1, r0, lsr #31
    f2ec:	0042      	lsls	r2, r0, #1
    f2ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
    f2f2:	f006 067d 	and.w	r6, r6, #125	; 0x7d
    f2f6:	4332      	orrs	r2, r6
    f2f8:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
    f2fc:	e771      	b.n	f1e2 <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
    f2fe:	a812      	add	r0, sp, #72	; 0x48
    f300:	f7ff febc 	bl	f07c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    f304:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
	conv->prec_value = prec;
    f308:	9018      	str	r0, [sp, #96]	; 0x60
	conv->unsupported |= ((conv->prec_value < 0)
    f30a:	f3c3 0240 	ubfx	r2, r3, #1, #1
    f30e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    f312:	f360 0341 	bfi	r3, r0, #1, #1
    f316:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	return sp;
    f31a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f31c:	e77a      	b.n	f214 <cbvprintf+0xcc>
	switch (*sp) {
    f31e:	2874      	cmp	r0, #116	; 0x74
    f320:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
    f324:	d059      	beq.n	f3da <cbvprintf+0x292>
    f326:	287a      	cmp	r0, #122	; 0x7a
    f328:	d184      	bne.n	f234 <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
    f32a:	460b      	mov	r3, r1
    f32c:	2106      	movs	r1, #6
    f32e:	e041      	b.n	f3b4 <cbvprintf+0x26c>
		if (*++sp == 'h') {
    f330:	7859      	ldrb	r1, [r3, #1]
    f332:	2968      	cmp	r1, #104	; 0x68
    f334:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
    f338:	d13a      	bne.n	f3b0 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
    f33a:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
    f33c:	f362 01c6 	bfi	r1, r2, #3, #4
    f340:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
			++sp;
    f344:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
    f346:	4613      	mov	r3, r2
    f348:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
    f34c:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    f34e:	9307      	str	r3, [sp, #28]
    f350:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
	switch (conv->specifier) {
    f354:	f200 80c5 	bhi.w	f4e2 <cbvprintf+0x39a>
    f358:	2a57      	cmp	r2, #87	; 0x57
    f35a:	d84e      	bhi.n	f3fa <cbvprintf+0x2b2>
    f35c:	2a41      	cmp	r2, #65	; 0x41
    f35e:	d004      	beq.n	f36a <cbvprintf+0x222>
    f360:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    f364:	2b02      	cmp	r3, #2
    f366:	f200 80bc 	bhi.w	f4e2 <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    f36a:	2104      	movs	r1, #4
    f36c:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			|| (conv->specifier == 'A');
    f370:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    f374:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    f378:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    f37c:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
    f380:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
			|| (conv->specifier == 'A');
    f384:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
    f388:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    f38c:	060a      	lsls	r2, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
    f38e:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		conv->specifier_a = (conv->specifier == 'a')
    f392:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
		if (conv->specifier_a
    f396:	b2cb      	uxtb	r3, r1
    f398:	f100 80c9 	bmi.w	f52e <cbvprintf+0x3e6>
		if (conv->length_mod == LENGTH_L) {
    f39c:	f003 0278 	and.w	r2, r3, #120	; 0x78
    f3a0:	2a18      	cmp	r2, #24
    f3a2:	f040 809b 	bne.w	f4dc <cbvprintf+0x394>
			conv->length_mod = LENGTH_NONE;
    f3a6:	f36f 03c6 	bfc	r3, #3, #4
    f3aa:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    f3ae:	e082      	b.n	f4b6 <cbvprintf+0x36e>
			conv->length_mod = LENGTH_H;
    f3b0:	460b      	mov	r3, r1
    f3b2:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
    f3b4:	f361 03c6 	bfi	r3, r1, #3, #4
    f3b8:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    f3bc:	e7c3      	b.n	f346 <cbvprintf+0x1fe>
		if (*++sp == 'l') {
    f3be:	7859      	ldrb	r1, [r3, #1]
    f3c0:	296c      	cmp	r1, #108	; 0x6c
    f3c2:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
    f3c6:	d101      	bne.n	f3cc <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
    f3c8:	2204      	movs	r2, #4
    f3ca:	e7b7      	b.n	f33c <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
    f3cc:	460b      	mov	r3, r1
    f3ce:	2103      	movs	r1, #3
    f3d0:	e7f0      	b.n	f3b4 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
    f3d2:	2105      	movs	r1, #5
    f3d4:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    f3d8:	e7ec      	b.n	f3b4 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
    f3da:	460b      	mov	r3, r1
    f3dc:	2107      	movs	r1, #7
    f3de:	e7e9      	b.n	f3b4 <cbvprintf+0x26c>
		conv->unsupported = true;
    f3e0:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    f3e4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    f3e8:	f023 0302 	bic.w	r3, r3, #2
    f3ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f3f0:	f043 0302 	orr.w	r3, r3, #2
    f3f4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
		break;
    f3f8:	e7a5      	b.n	f346 <cbvprintf+0x1fe>
    f3fa:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    f3fe:	2b20      	cmp	r3, #32
    f400:	d86f      	bhi.n	f4e2 <cbvprintf+0x39a>
    f402:	a101      	add	r1, pc, #4	; (adr r1, f408 <cbvprintf+0x2c0>)
    f404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    f408:	0000f4bb 	.word	0x0000f4bb
    f40c:	0000f4e3 	.word	0x0000f4e3
    f410:	0000f4e3 	.word	0x0000f4e3
    f414:	0000f4e3 	.word	0x0000f4e3
    f418:	0000f4e3 	.word	0x0000f4e3
    f41c:	0000f4e3 	.word	0x0000f4e3
    f420:	0000f4e3 	.word	0x0000f4e3
    f424:	0000f4e3 	.word	0x0000f4e3
    f428:	0000f4e3 	.word	0x0000f4e3
    f42c:	0000f36b 	.word	0x0000f36b
    f430:	0000f4e3 	.word	0x0000f4e3
    f434:	0000f4bb 	.word	0x0000f4bb
    f438:	0000f48d 	.word	0x0000f48d
    f43c:	0000f36b 	.word	0x0000f36b
    f440:	0000f36b 	.word	0x0000f36b
    f444:	0000f36b 	.word	0x0000f36b
    f448:	0000f4e3 	.word	0x0000f4e3
    f44c:	0000f48d 	.word	0x0000f48d
    f450:	0000f4e3 	.word	0x0000f4e3
    f454:	0000f4e3 	.word	0x0000f4e3
    f458:	0000f4e3 	.word	0x0000f4e3
    f45c:	0000f4e3 	.word	0x0000f4e3
    f460:	0000f4f1 	.word	0x0000f4f1
    f464:	0000f4bb 	.word	0x0000f4bb
    f468:	0000f511 	.word	0x0000f511
    f46c:	0000f4e3 	.word	0x0000f4e3
    f470:	0000f4e3 	.word	0x0000f4e3
    f474:	0000f511 	.word	0x0000f511
    f478:	0000f4e3 	.word	0x0000f4e3
    f47c:	0000f4bb 	.word	0x0000f4bb
    f480:	0000f4e3 	.word	0x0000f4e3
    f484:	0000f4e3 	.word	0x0000f4e3
    f488:	0000f4bb 	.word	0x0000f4bb
		conv->specifier_cat = SPECIFIER_SINT;
    f48c:	2101      	movs	r1, #1
    f48e:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		conv->specifier_cat = SPECIFIER_UINT;
    f492:	f361 0302 	bfi	r3, r1, #0, #3
    f496:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
    f49a:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    f49e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    f4a2:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    f4a4:	bf02      	ittt	eq
    f4a6:	f89d 1058 	ldrbeq.w	r1, [sp, #88]	; 0x58
    f4aa:	f041 0101 	orreq.w	r1, r1, #1
    f4ae:	f88d 1058 	strbeq.w	r1, [sp, #88]	; 0x58
		if (conv->specifier == 'c') {
    f4b2:	2a63      	cmp	r2, #99	; 0x63
    f4b4:	d005      	beq.n	f4c2 <cbvprintf+0x37a>
	bool unsupported = false;
    f4b6:	2300      	movs	r3, #0
    f4b8:	e006      	b.n	f4c8 <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_UINT;
    f4ba:	2102      	movs	r1, #2
    f4bc:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    f4c0:	e7e7      	b.n	f492 <cbvprintf+0x34a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    f4c2:	3b00      	subs	r3, #0
    f4c4:	bf18      	it	ne
    f4c6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    f4c8:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    f4cc:	f3c2 0140 	ubfx	r1, r2, #1, #1
    f4d0:	430b      	orrs	r3, r1
    f4d2:	f363 0241 	bfi	r2, r3, #1, #1
    f4d6:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
	return sp;
    f4da:	e6b8      	b.n	f24e <cbvprintf+0x106>
		} else if ((conv->length_mod != LENGTH_NONE)
    f4dc:	f013 0f38 	tst.w	r3, #56	; 0x38
    f4e0:	d0e9      	beq.n	f4b6 <cbvprintf+0x36e>
			conv->invalid = true;
    f4e2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    f4e6:	f043 0301 	orr.w	r3, r3, #1
    f4ea:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    f4ee:	e7e2      	b.n	f4b6 <cbvprintf+0x36e>
		conv->specifier_cat = SPECIFIER_PTR;
    f4f0:	2203      	movs	r2, #3
    f4f2:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    f4f6:	f362 0302 	bfi	r3, r2, #0, #3
    f4fa:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
    f4fe:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    f502:	f003 0378 	and.w	r3, r3, #120	; 0x78
    f506:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
    f50a:	427b      	negs	r3, r7
    f50c:	417b      	adcs	r3, r7
    f50e:	e7db      	b.n	f4c8 <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_PTR;
    f510:	2203      	movs	r2, #3
    f512:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    f516:	f362 0302 	bfi	r3, r2, #0, #3
    f51a:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod != LENGTH_NONE) {
    f51e:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    f522:	f013 0f78 	tst.w	r3, #120	; 0x78
    f526:	bf14      	ite	ne
    f528:	2301      	movne	r3, #1
    f52a:	2300      	moveq	r3, #0
    f52c:	e7cc      	b.n	f4c8 <cbvprintf+0x380>
			unsupported = true;
    f52e:	2301      	movs	r3, #1
    f530:	e7ca      	b.n	f4c8 <cbvprintf+0x380>
		} else if (conv->width_present) {
    f532:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
    f536:	2a00      	cmp	r2, #0
		int width = -1;
    f538:	bfac      	ite	ge
    f53a:	f04f 3aff 	movge.w	sl, #4294967295
			width = conv->width_value;
    f53e:	f8dd a05c 	ldrlt.w	sl, [sp, #92]	; 0x5c
    f542:	e696      	b.n	f272 <cbvprintf+0x12a>
		} else if (conv->prec_present) {
    f544:	0799      	lsls	r1, r3, #30
    f546:	f57f aea2 	bpl.w	f28e <cbvprintf+0x146>
			precision = conv->prec_value;
    f54a:	9f18      	ldr	r7, [sp, #96]	; 0x60
		conv->pad0_value = 0;
    f54c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    f54e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
		    && (conv->specifier_cat == SPECIFIER_FP)
    f552:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    f556:	f003 0307 	and.w	r3, r3, #7
    f55a:	2b04      	cmp	r3, #4
    f55c:	d109      	bne.n	f572 <cbvprintf+0x42a>
		    && !conv->prec_present) {
    f55e:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    f562:	079a      	lsls	r2, r3, #30
    f564:	d405      	bmi.n	f572 <cbvprintf+0x42a>
			if (conv->specifier_a) {
    f566:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
				precision = 6;
    f56a:	2b00      	cmp	r3, #0
    f56c:	bfb4      	ite	lt
    f56e:	270d      	movlt	r7, #13
    f570:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
    f572:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			= (enum length_mod_enum)conv->length_mod;
    f576:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
		enum specifier_cat_enum specifier_cat
    f57a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    f57e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    f580:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    f584:	d136      	bne.n	f5f4 <cbvprintf+0x4ac>
			switch (length_mod) {
    f586:	1ecb      	subs	r3, r1, #3
    f588:	2b04      	cmp	r3, #4
    f58a:	d820      	bhi.n	f5ce <cbvprintf+0x486>
    f58c:	e8df f003 	tbb	[pc, r3]
    f590:	1f070703 	.word	0x1f070703
    f594:	1f          	.byte	0x1f
    f595:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    f596:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    f59a:	17d3      	asrs	r3, r2, #31
    f59c:	e004      	b.n	f5a8 <cbvprintf+0x460>
					(sint_value_type)va_arg(ap, intmax_t);
    f59e:	3407      	adds	r4, #7
    f5a0:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    f5a4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    f5a8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		if (conv->invalid || conv->unsupported) {
    f5ac:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
    f5b0:	07b3      	lsls	r3, r6, #30
    f5b2:	d055      	beq.n	f660 <cbvprintf+0x518>
			OUTS(sp, fp);
    f5b4:	464a      	mov	r2, r9
    f5b6:	4641      	mov	r1, r8
    f5b8:	9b07      	ldr	r3, [sp, #28]
    f5ba:	9806      	ldr	r0, [sp, #24]
    f5bc:	f00c ffe5 	bl	1c58a <outs>
    f5c0:	2800      	cmp	r0, #0
    f5c2:	f2c0 837d 	blt.w	fcc0 <cbvprintf+0xb78>
    f5c6:	4405      	add	r5, r0
			while (pad_len-- > 0) {
    f5c8:	f8dd 901c 	ldr.w	r9, [sp, #28]
    f5cc:	e5c4      	b.n	f158 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    f5ce:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    f5d2:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    f5d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
    f5d8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			if (length_mod == LENGTH_HH) {
    f5dc:	d105      	bne.n	f5ea <cbvprintf+0x4a2>
				value->uint = (unsigned char)value->uint;
    f5de:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
				value->uint = (unsigned short)value->uint;
    f5e2:	9314      	str	r3, [sp, #80]	; 0x50
    f5e4:	2300      	movs	r3, #0
    f5e6:	9315      	str	r3, [sp, #84]	; 0x54
    f5e8:	e7e0      	b.n	f5ac <cbvprintf+0x464>
			} else if (length_mod == LENGTH_H) {
    f5ea:	2902      	cmp	r1, #2
    f5ec:	d1de      	bne.n	f5ac <cbvprintf+0x464>
				value->sint = (short)value->sint;
    f5ee:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
    f5f2:	e7d2      	b.n	f59a <cbvprintf+0x452>
		} else if (specifier_cat == SPECIFIER_UINT) {
    f5f4:	2b02      	cmp	r3, #2
    f5f6:	d123      	bne.n	f640 <cbvprintf+0x4f8>
			switch (length_mod) {
    f5f8:	1ecb      	subs	r3, r1, #3
    f5fa:	2b04      	cmp	r3, #4
    f5fc:	d813      	bhi.n	f626 <cbvprintf+0x4de>
    f5fe:	e8df f003 	tbb	[pc, r3]
    f602:	0a03      	.short	0x0a03
    f604:	120a      	.short	0x120a
    f606:	12          	.byte	0x12
    f607:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    f608:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    f60a:	6822      	ldr	r2, [r4, #0]
    f60c:	1d20      	adds	r0, r4, #4
    f60e:	9214      	str	r2, [sp, #80]	; 0x50
    f610:	9315      	str	r3, [sp, #84]	; 0x54
					(uint_value_type)va_arg(ap, size_t);
    f612:	4604      	mov	r4, r0
    f614:	e7ca      	b.n	f5ac <cbvprintf+0x464>
					(uint_value_type)va_arg(ap,
    f616:	3407      	adds	r4, #7
    f618:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    f61c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    f620:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
				break;
    f624:	e7f5      	b.n	f612 <cbvprintf+0x4ca>
					(uint_value_type)va_arg(ap, size_t);
    f626:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    f62a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    f62c:	9314      	str	r3, [sp, #80]	; 0x50
    f62e:	f04f 0300 	mov.w	r3, #0
    f632:	9315      	str	r3, [sp, #84]	; 0x54
			if (length_mod == LENGTH_HH) {
    f634:	d0d3      	beq.n	f5de <cbvprintf+0x496>
			} else if (length_mod == LENGTH_H) {
    f636:	2902      	cmp	r1, #2
    f638:	d1b8      	bne.n	f5ac <cbvprintf+0x464>
				value->uint = (unsigned short)value->uint;
    f63a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    f63e:	e7d0      	b.n	f5e2 <cbvprintf+0x49a>
		} else if (specifier_cat == SPECIFIER_FP) {
    f640:	2b04      	cmp	r3, #4
    f642:	d107      	bne.n	f654 <cbvprintf+0x50c>
			if (length_mod == LENGTH_UPPER_L) {
    f644:	3407      	adds	r4, #7
    f646:	f024 0407 	bic.w	r4, r4, #7
    f64a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    f64e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    f652:	e7ab      	b.n	f5ac <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_PTR) {
    f654:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    f656:	bf04      	itt	eq
    f658:	f854 3b04 	ldreq.w	r3, [r4], #4
    f65c:	9314      	streq	r3, [sp, #80]	; 0x50
    f65e:	e7a5      	b.n	f5ac <cbvprintf+0x464>
		switch (conv->specifier) {
    f660:	f89d 905b 	ldrb.w	r9, [sp, #91]	; 0x5b
    f664:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    f668:	d8ae      	bhi.n	f5c8 <cbvprintf+0x480>
    f66a:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
    f66e:	f200 80a7 	bhi.w	f7c0 <cbvprintf+0x678>
    f672:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    f676:	f000 80ed 	beq.w	f854 <cbvprintf+0x70c>
    f67a:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
    f67e:	d9a3      	bls.n	f5c8 <cbvprintf+0x480>
    f680:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    f684:	d003      	beq.n	f68e <cbvprintf+0x546>
    f686:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
    f68a:	2b02      	cmp	r3, #2
    f68c:	d89c      	bhi.n	f5c8 <cbvprintf+0x480>
	} u = {
    f68e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	if ((u.u64 & SIGN_MASK) != 0U) {
    f692:	2a00      	cmp	r2, #0
    f694:	f173 0100 	sbcs.w	r1, r3, #0
    f698:	f2c0 8186 	blt.w	f9a8 <cbvprintf+0x860>
	} else if (conv->flag_plus) {
    f69c:	0731      	lsls	r1, r6, #28
    f69e:	f100 8185 	bmi.w	f9ac <cbvprintf+0x864>
		*sign = ' ';
    f6a2:	f016 0610 	ands.w	r6, r6, #16
    f6a6:	bf18      	it	ne
    f6a8:	2620      	movne	r6, #32
	int exp = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    f6aa:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    f6ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
    f6b2:	9204      	str	r2, [sp, #16]
    f6b4:	9305      	str	r3, [sp, #20]
    f6b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f6ba:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	bool is_subnormal = (exp == 0) && (fract != 0);
    f6be:	f1bb 0f00 	cmp.w	fp, #0
    f6c2:	f040 8175 	bne.w	f9b0 <cbvprintf+0x868>
    f6c6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    f6ca:	4313      	orrs	r3, r2
    f6cc:	bf14      	ite	ne
    f6ce:	f04f 0c01 	movne.w	ip, #1
    f6d2:	f04f 0c00 	moveq.w	ip, #0
	if ((exp | fract) != 0) {
    f6d6:	4658      	mov	r0, fp
	fract <<= EXPONENT_BITS;
    f6d8:	9905      	ldr	r1, [sp, #20]
		c = 'f';
    f6da:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
	fract <<= EXPONENT_BITS;
    f6de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    f6e2:	9904      	ldr	r1, [sp, #16]
		c = 'f';
    f6e4:	bf08      	it	eq
    f6e6:	f04f 0966 	moveq.w	r9, #102	; 0x66
	fract <<= EXPONENT_BITS;
    f6ea:	02ca      	lsls	r2, r1, #11
    f6ec:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((exp | fract) != 0) {
    f6f0:	ea4b 0102 	orr.w	r1, fp, r2
    f6f4:	910a      	str	r1, [sp, #40]	; 0x28
    f6f6:	17c1      	asrs	r1, r0, #31
    f6f8:	4319      	orrs	r1, r3
    f6fa:	910b      	str	r1, [sp, #44]	; 0x2c
    f6fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    f700:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
    f702:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if ((exp | fract) != 0) {
    f706:	f000 81c7 	beq.w	fa98 <cbvprintf+0x950>
		if (is_subnormal) {
    f70a:	f1bc 0f00 	cmp.w	ip, #0
    f70e:	f040 8187 	bne.w	fa20 <cbvprintf+0x8d8>
		fract |= BIT_63;
    f712:	9b10      	ldr	r3, [sp, #64]	; 0x40
		fract *= 5U;
    f714:	2105      	movs	r1, #5
		fract |= BIT_63;
    f716:	9302      	str	r3, [sp, #8]
    f718:	9b11      	ldr	r3, [sp, #68]	; 0x44
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    f71a:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
    f71e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f722:	9303      	str	r3, [sp, #12]
    f724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f728:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    f72c:	2300      	movs	r3, #0
    f72e:	461a      	mov	r2, r3
	while (exp < -2) {
    f730:	f11b 0f02 	cmn.w	fp, #2
    f734:	f2c0 817d 	blt.w	fa32 <cbvprintf+0x8ea>
    f738:	b11b      	cbz	r3, f742 <cbvprintf+0x5fa>
    f73a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f73e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	while (exp > 0) {
    f742:	e9dd 3110 	ldrd	r3, r1, [sp, #64]	; 0x40
    f746:	f1bb 0f00 	cmp.w	fp, #0
    f74a:	f300 818d 	bgt.w	fa68 <cbvprintf+0x920>
	fract >>= (4 - exp);
    f74e:	9911      	ldr	r1, [sp, #68]	; 0x44
    f750:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f752:	f1cb 0004 	rsb	r0, fp, #4
    f756:	f10b 0b1c 	add.w	fp, fp, #28
    f75a:	fa01 fb0b 	lsl.w	fp, r1, fp
    f75e:	f1a0 0c20 	sub.w	ip, r0, #32
    f762:	40c3      	lsrs	r3, r0
    f764:	fa21 fc0c 	lsr.w	ip, r1, ip
    f768:	ea43 030b 	orr.w	r3, r3, fp
    f76c:	ea43 030c 	orr.w	r3, r3, ip
    f770:	40c1      	lsrs	r1, r0
    f772:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	if ((c == 'g') || (c == 'G')) {
    f776:	f009 03df 	and.w	r3, r9, #223	; 0xdf
    f77a:	2b47      	cmp	r3, #71	; 0x47
    f77c:	f040 8193 	bne.w	faa6 <cbvprintf+0x95e>
		if (decexp < (-4 + 1) || decexp > precision) {
    f780:	1cd0      	adds	r0, r2, #3
    f782:	db02      	blt.n	f78a <cbvprintf+0x642>
    f784:	4297      	cmp	r7, r2
    f786:	f280 818a 	bge.w	fa9e <cbvprintf+0x956>
			c += 'e' - 'g';  /* e or E */
    f78a:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
    f78e:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    f790:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
    f794:	dd00      	ble.n	f798 <cbvprintf+0x650>
				precision--;
    f796:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
    f798:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    f79c:	0699      	lsls	r1, r3, #26
    f79e:	f100 8182 	bmi.w	faa6 <cbvprintf+0x95e>
    f7a2:	2f00      	cmp	r7, #0
    f7a4:	bfd4      	ite	le
    f7a6:	2300      	movle	r3, #0
    f7a8:	2301      	movgt	r3, #1
	if (c == 'f') {
    f7aa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
    f7ae:	930c      	str	r3, [sp, #48]	; 0x30
	if (c == 'f') {
    f7b0:	f040 817b 	bne.w	faaa <cbvprintf+0x962>
		if (decimals < 0) {
    f7b4:	19d3      	adds	r3, r2, r7
    f7b6:	f140 8179 	bpl.w	faac <cbvprintf+0x964>
			decimals = 0;
    f7ba:	f04f 0b00 	mov.w	fp, #0
    f7be:	e179      	b.n	fab4 <cbvprintf+0x96c>
    f7c0:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
    f7c4:	2b20      	cmp	r3, #32
    f7c6:	f63f aeff 	bhi.w	f5c8 <cbvprintf+0x480>
    f7ca:	a201      	add	r2, pc, #4	; (adr r2, f7d0 <cbvprintf+0x688>)
    f7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f7d0:	0000f949 	.word	0x0000f949
    f7d4:	0000f5c9 	.word	0x0000f5c9
    f7d8:	0000f5c9 	.word	0x0000f5c9
    f7dc:	0000f5c9 	.word	0x0000f5c9
    f7e0:	0000f5c9 	.word	0x0000f5c9
    f7e4:	0000f5c9 	.word	0x0000f5c9
    f7e8:	0000f5c9 	.word	0x0000f5c9
    f7ec:	0000f5c9 	.word	0x0000f5c9
    f7f0:	0000f5c9 	.word	0x0000f5c9
    f7f4:	0000f68f 	.word	0x0000f68f
    f7f8:	0000f5c9 	.word	0x0000f5c9
    f7fc:	0000f881 	.word	0x0000f881
    f800:	0000f8e9 	.word	0x0000f8e9
    f804:	0000f68f 	.word	0x0000f68f
    f808:	0000f68f 	.word	0x0000f68f
    f80c:	0000f68f 	.word	0x0000f68f
    f810:	0000f5c9 	.word	0x0000f5c9
    f814:	0000f8e9 	.word	0x0000f8e9
    f818:	0000f5c9 	.word	0x0000f5c9
    f81c:	0000f5c9 	.word	0x0000f5c9
    f820:	0000f5c9 	.word	0x0000f5c9
    f824:	0000f5c9 	.word	0x0000f5c9
    f828:	0000f97f 	.word	0x0000f97f
    f82c:	0000f949 	.word	0x0000f949
    f830:	0000f94d 	.word	0x0000f94d
    f834:	0000f5c9 	.word	0x0000f5c9
    f838:	0000f5c9 	.word	0x0000f5c9
    f83c:	0000f85b 	.word	0x0000f85b
    f840:	0000f5c9 	.word	0x0000f5c9
    f844:	0000f949 	.word	0x0000f949
    f848:	0000f5c9 	.word	0x0000f5c9
    f84c:	0000f5c9 	.word	0x0000f5c9
    f850:	0000f949 	.word	0x0000f949
			OUTC('%');
    f854:	4641      	mov	r1, r8
    f856:	4648      	mov	r0, r9
    f858:	e48a      	b.n	f170 <cbvprintf+0x28>
			if (precision >= 0) {
    f85a:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    f85c:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
			if (precision >= 0) {
    f860:	db0a      	blt.n	f878 <cbvprintf+0x730>
				len = strnlen(bps, precision);
    f862:	4639      	mov	r1, r7
    f864:	4648      	mov	r0, r9
    f866:	f010 ff62 	bl	2072e <strnlen>
		char sign = 0;
    f86a:	2600      	movs	r6, #0
			bpe = bps + len;
    f86c:	eb09 0b00 	add.w	fp, r9, r0
		if (bps == NULL) {
    f870:	f1b9 0f00 	cmp.w	r9, #0
    f874:	d10c      	bne.n	f890 <cbvprintf+0x748>
    f876:	e6a7      	b.n	f5c8 <cbvprintf+0x480>
				len = strlen(bps);
    f878:	4648      	mov	r0, r9
    f87a:	f7fd fb5b 	bl	cf34 <strlen>
    f87e:	e7f4      	b.n	f86a <cbvprintf+0x722>
		char sign = 0;
    f880:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    f882:	9b14      	ldr	r3, [sp, #80]	; 0x50
			bpe = buf + 1;
    f884:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    f888:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				bps = encode_float(value->dbl, conv, precision,
    f88c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
		size_t nj_len = (bpe - bps);
    f890:	ebab 0209 	sub.w	r2, fp, r9
		if (sign != 0) {
    f894:	b106      	cbz	r6, f898 <cbvprintf+0x750>
			nj_len += 1U;
    f896:	3201      	adds	r2, #1
		if (conv->altform_0c) {
    f898:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
    f89c:	06c3      	lsls	r3, r0, #27
    f89e:	f140 81ff 	bpl.w	fca0 <cbvprintf+0xb58>
			nj_len += 2U;
    f8a2:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
    f8a4:	9917      	ldr	r1, [sp, #92]	; 0x5c
		if (conv->pad_fp) {
    f8a6:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    f8a8:	440a      	add	r2, r1
			nj_len += conv->pad0_pre_exp;
    f8aa:	bf44      	itt	mi
    f8ac:	9918      	ldrmi	r1, [sp, #96]	; 0x60
    f8ae:	1852      	addmi	r2, r2, r1
		if (width > 0) {
    f8b0:	f1ba 0f00 	cmp.w	sl, #0
    f8b4:	f340 8211 	ble.w	fcda <cbvprintf+0xb92>
			width -= (int)nj_len;
    f8b8:	ebaa 0a02 	sub.w	sl, sl, r2
			if (!conv->flag_dash) {
    f8bc:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    f8c0:	0751      	lsls	r1, r2, #29
    f8c2:	f3c2 0780 	ubfx	r7, r2, #2, #1
    f8c6:	f100 8208 	bmi.w	fcda <cbvprintf+0xb92>
				if (conv->flag_zero) {
    f8ca:	0653      	lsls	r3, r2, #25
    f8cc:	f140 81fb 	bpl.w	fcc6 <cbvprintf+0xb7e>
					if (sign != 0) {
    f8d0:	b146      	cbz	r6, f8e4 <cbvprintf+0x79c>
						OUTC(sign);
    f8d2:	4641      	mov	r1, r8
    f8d4:	4630      	mov	r0, r6
    f8d6:	9b06      	ldr	r3, [sp, #24]
    f8d8:	4798      	blx	r3
    f8da:	2800      	cmp	r0, #0
    f8dc:	f2c0 81f0 	blt.w	fcc0 <cbvprintf+0xb78>
						sign = 0;
    f8e0:	463e      	mov	r6, r7
						OUTC(sign);
    f8e2:	3501      	adds	r5, #1
					pad = '0';
    f8e4:	2730      	movs	r7, #48	; 0x30
    f8e6:	e1ef      	b.n	fcc8 <cbvprintf+0xb80>
			if (conv->flag_plus) {
    f8e8:	0730      	lsls	r0, r6, #28
    f8ea:	d42b      	bmi.n	f944 <cbvprintf+0x7fc>
				sign = ' ';
    f8ec:	f016 0610 	ands.w	r6, r6, #16
    f8f0:	bf18      	it	ne
    f8f2:	2620      	movne	r6, #32
			if (value->sint < 0) {
    f8f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    f8f8:	2a00      	cmp	r2, #0
    f8fa:	f173 0100 	sbcs.w	r1, r3, #0
    f8fe:	da05      	bge.n	f90c <cbvprintf+0x7c4>
				sign = '-';
    f900:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    f902:	4252      	negs	r2, r2
    f904:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    f908:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			bps = encode_uint(value->uint, conv, buf, bpe);
    f90c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f910:	f10d 0385 	add.w	r3, sp, #133	; 0x85
    f914:	9300      	str	r3, [sp, #0]
    f916:	aa16      	add	r2, sp, #88	; 0x58
    f918:	ab1b      	add	r3, sp, #108	; 0x6c
    f91a:	f7ff fbc5 	bl	f0a8 <encode_uint>
    f91e:	4681      	mov	r9, r0
			if (precision >= 0) {
    f920:	2f00      	cmp	r7, #0
    f922:	f10d 0385 	add.w	r3, sp, #133	; 0x85
    f926:	db0b      	blt.n	f940 <cbvprintf+0x7f8>
				conv->flag_zero = false;
    f928:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
				size_t len = bpe - bps;
    f92c:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
    f930:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    f934:	4297      	cmp	r7, r2
				conv->flag_zero = false;
    f936:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
				if (len < (size_t)precision) {
    f93a:	d901      	bls.n	f940 <cbvprintf+0x7f8>
					conv->pad0_value = precision - (int)len;
    f93c:	1abf      	subs	r7, r7, r2
    f93e:	9717      	str	r7, [sp, #92]	; 0x5c
		const char *bpe = buf + sizeof(buf);
    f940:	469b      	mov	fp, r3
    f942:	e795      	b.n	f870 <cbvprintf+0x728>
				sign = '+';
    f944:	262b      	movs	r6, #43	; 0x2b
    f946:	e7d5      	b.n	f8f4 <cbvprintf+0x7ac>
		switch (conv->specifier) {
    f948:	2600      	movs	r6, #0
    f94a:	e7df      	b.n	f90c <cbvprintf+0x7c4>
			if (value->ptr != NULL) {
    f94c:	9814      	ldr	r0, [sp, #80]	; 0x50
    f94e:	2800      	cmp	r0, #0
    f950:	f000 81a0 	beq.w	fc94 <cbvprintf+0xb4c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    f954:	f10d 0385 	add.w	r3, sp, #133	; 0x85
    f958:	9300      	str	r3, [sp, #0]
    f95a:	2100      	movs	r1, #0
    f95c:	ab1b      	add	r3, sp, #108	; 0x6c
    f95e:	aa16      	add	r2, sp, #88	; 0x58
    f960:	f7ff fba2 	bl	f0a8 <encode_uint>
				conv->altform_0c = true;
    f964:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
				bps = encode_uint((uintptr_t)value->ptr, conv,
    f968:	4681      	mov	r9, r0
				conv->altform_0c = true;
    f96a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    f96e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    f972:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    f976:	2600      	movs	r6, #0
				conv->altform_0c = true;
    f978:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
				goto prec_int_pad0;
    f97c:	e7d0      	b.n	f920 <cbvprintf+0x7d8>
				store_count(conv, value->ptr, count);
    f97e:	9b14      	ldr	r3, [sp, #80]	; 0x50
	switch ((enum length_mod_enum)conv->length_mod) {
    f980:	2907      	cmp	r1, #7
    f982:	f63f ae21 	bhi.w	f5c8 <cbvprintf+0x480>
    f986:	e8df f001 	tbb	[pc, r1]
    f98a:	040d      	.short	0x040d
    f98c:	08080d06 	.word	0x08080d06
    f990:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    f992:	701d      	strb	r5, [r3, #0]
		break;
    f994:	e618      	b.n	f5c8 <cbvprintf+0x480>
		*(short *)dp = (short)count;
    f996:	801d      	strh	r5, [r3, #0]
		break;
    f998:	e616      	b.n	f5c8 <cbvprintf+0x480>
		*(intmax_t *)dp = (intmax_t)count;
    f99a:	4628      	mov	r0, r5
    f99c:	17e9      	asrs	r1, r5, #31
    f99e:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    f9a2:	e611      	b.n	f5c8 <cbvprintf+0x480>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    f9a4:	601d      	str	r5, [r3, #0]
		break;
    f9a6:	e60f      	b.n	f5c8 <cbvprintf+0x480>
		*sign = '-';
    f9a8:	262d      	movs	r6, #45	; 0x2d
    f9aa:	e67e      	b.n	f6aa <cbvprintf+0x562>
		*sign = '+';
    f9ac:	262b      	movs	r6, #43	; 0x2b
    f9ae:	e67c      	b.n	f6aa <cbvprintf+0x562>
	if (exp == BIT_MASK(EXPONENT_BITS)) {
    f9b0:	f240 73ff 	movw	r3, #2047	; 0x7ff
    f9b4:	459b      	cmp	fp, r3
    f9b6:	d12e      	bne.n	fa16 <cbvprintf+0x8ce>
		if (fract == 0) {
    f9b8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    f9bc:	4bba      	ldr	r3, [pc, #744]	; (fca8 <cbvprintf+0xb60>)
    f9be:	430a      	orrs	r2, r1
    f9c0:	f819 3003 	ldrb.w	r3, [r9, r3]
    f9c4:	f003 0303 	and.w	r3, r3, #3
    f9c8:	d117      	bne.n	f9fa <cbvprintf+0x8b2>
			if (isupper((int)c)) {
    f9ca:	2b01      	cmp	r3, #1
				*buf++ = 'I';
    f9cc:	bf0b      	itete	eq
    f9ce:	f644 6349 	movweq	r3, #20041	; 0x4e49
				*buf++ = 'i';
    f9d2:	f646 6369 	movwne	r3, #28265	; 0x6e69
				*buf++ = 'I';
    f9d6:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'i';
    f9da:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'F';
    f9de:	bf0c      	ite	eq
    f9e0:	2346      	moveq	r3, #70	; 0x46
				*buf++ = 'f';
    f9e2:	2366      	movne	r3, #102	; 0x66
				*buf++ = 'n';
    f9e4:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
		conv->flag_zero = false;
    f9e8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		*bpe = buf;
    f9ec:	f10d 0b6f 	add.w	fp, sp, #111	; 0x6f
		conv->flag_zero = false;
    f9f0:	f36f 1386 	bfc	r3, #6, #1
    f9f4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		return bps;
    f9f8:	e748      	b.n	f88c <cbvprintf+0x744>
			if (isupper((int)c)) {
    f9fa:	2b01      	cmp	r3, #1
				*buf++ = 'N';
    f9fc:	bf0b      	itete	eq
    f9fe:	f244 134e 	movweq	r3, #16718	; 0x414e
				*buf++ = 'n';
    fa02:	f246 136e 	movwne	r3, #24942	; 0x616e
				*buf++ = 'N';
    fa06:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'n';
    fa0a:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'N';
    fa0e:	bf0c      	ite	eq
    fa10:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'n';
    fa12:	236e      	movne	r3, #110	; 0x6e
    fa14:	e7e6      	b.n	f9e4 <cbvprintf+0x89c>
	bool is_subnormal = (exp == 0) && (fract != 0);
    fa16:	f04f 0c00 	mov.w	ip, #0
    fa1a:	e65c      	b.n	f6d6 <cbvprintf+0x58e>
				exp--;
    fa1c:	f10b 3bff 	add.w	fp, fp, #4294967295
			while (((fract <<= 1) & BIT_63) == 0) {
    fa20:	1892      	adds	r2, r2, r2
    fa22:	415b      	adcs	r3, r3
    fa24:	2a00      	cmp	r2, #0
    fa26:	f173 0100 	sbcs.w	r1, r3, #0
    fa2a:	daf7      	bge.n	fa1c <cbvprintf+0x8d4>
    fa2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    fa30:	e66f      	b.n	f712 <cbvprintf+0x5ca>
			fract >>= 1;
    fa32:	9b02      	ldr	r3, [sp, #8]
    fa34:	9803      	ldr	r0, [sp, #12]
    fa36:	085b      	lsrs	r3, r3, #1
    fa38:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    fa3c:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    fa3e:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
    fa42:	46de      	mov	lr, fp
			fract >>= 1;
    fa44:	e9cd 3002 	strd	r3, r0, [sp, #8]
			exp++;
    fa48:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    fa4c:	d2f1      	bcs.n	fa32 <cbvprintf+0x8ea>
		fract *= 5U;
    fa4e:	fba3 bc01 	umull	fp, ip, r3, r1
    fa52:	4348      	muls	r0, r1
    fa54:	e9cd bc02 	strd	fp, ip, [sp, #8]
    fa58:	9b03      	ldr	r3, [sp, #12]
		exp++;
    fa5a:	f10e 0b02 	add.w	fp, lr, #2
		fract *= 5U;
    fa5e:	18c3      	adds	r3, r0, r3
    fa60:	9303      	str	r3, [sp, #12]
		decexp--;
    fa62:	3a01      	subs	r2, #1
    fa64:	2301      	movs	r3, #1
    fa66:	e663      	b.n	f730 <cbvprintf+0x5e8>
		fract += 2;
    fa68:	3302      	adds	r3, #2
    fa6a:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    fa6e:	a810      	add	r0, sp, #64	; 0x40
		fract += 2;
    fa70:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
    fa74:	920c      	str	r2, [sp, #48]	; 0x30
		_ldiv5(&fract);
    fa76:	f00c fd52 	bl	1c51e <_ldiv5>
		exp--;
    fa7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
		decexp++;
    fa7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		exp--;
    fa80:	f10b 3bff 	add.w	fp, fp, #4294967295
		decexp++;
    fa84:	3201      	adds	r2, #1
			fract <<= 1;
    fa86:	1800      	adds	r0, r0, r0
    fa88:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    fa8a:	2800      	cmp	r0, #0
    fa8c:	f171 0300 	sbcs.w	r3, r1, #0
			exp--;
    fa90:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (!(fract & BIT_63));
    fa94:	daf7      	bge.n	fa86 <cbvprintf+0x93e>
    fa96:	e652      	b.n	f73e <cbvprintf+0x5f6>
    fa98:	2200      	movs	r2, #0
    fa9a:	4693      	mov	fp, r2
    fa9c:	e657      	b.n	f74e <cbvprintf+0x606>
			c = 'f';
    fa9e:	f04f 0966 	mov.w	r9, #102	; 0x66
			precision -= decexp;
    faa2:	1abf      	subs	r7, r7, r2
    faa4:	e678      	b.n	f798 <cbvprintf+0x650>
	bool prune_zero = false;
    faa6:	2300      	movs	r3, #0
    faa8:	e67f      	b.n	f7aa <cbvprintf+0x662>
		decimals = precision + 1;
    faaa:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
    faac:	2b10      	cmp	r3, #16
    faae:	bfa8      	it	ge
    fab0:	2310      	movge	r3, #16
    fab2:	469b      	mov	fp, r3
    fab4:	2110      	movs	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
    fab6:	2000      	movs	r0, #0
    fab8:	910f      	str	r1, [sp, #60]	; 0x3c
    faba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    fabe:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (decimals--) {
    fac2:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
    fac6:	f10b 3bff 	add.w	fp, fp, #4294967295
    faca:	f1bb 3fff 	cmp.w	fp, #4294967295
    face:	d11f      	bne.n	fb10 <cbvprintf+0x9c8>
	fract += round;
    fad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fad2:	18cb      	adds	r3, r1, r3
    fad4:	9308      	str	r3, [sp, #32]
    fad6:	9b11      	ldr	r3, [sp, #68]	; 0x44
	if (fract >= BIT64(60)) {
    fad8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
	fract += round;
    fadc:	eb40 0303 	adc.w	r3, r0, r3
	if (fract >= BIT64(60)) {
    fae0:	f04f 30ff 	mov.w	r0, #4294967295
	fract += round;
    fae4:	9309      	str	r3, [sp, #36]	; 0x24
	if (fract >= BIT64(60)) {
    fae6:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
    faea:	4561      	cmp	r1, ip
    faec:	bf08      	it	eq
    faee:	4558      	cmpeq	r0, fp
    faf0:	d31a      	bcc.n	fb28 <cbvprintf+0x9e0>
	fract += round;
    faf2:	4658      	mov	r0, fp
    faf4:	4661      	mov	r1, ip
    faf6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	if (c == 'f') {
    fafa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
    fafe:	d153      	bne.n	fba8 <cbvprintf+0xa60>
		if (decexp > 0) {
    fb00:	2a00      	cmp	r2, #0
    fb02:	dc20      	bgt.n	fb46 <cbvprintf+0x9fe>
			*buf++ = '0';
    fb04:	2330      	movs	r3, #48	; 0x30
    fb06:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
    fb0a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    fb0e:	e02b      	b.n	fb68 <cbvprintf+0xa20>
	*v >>= 1;
    fb10:	0849      	lsrs	r1, r1, #1
    fb12:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    fb16:	0840      	lsrs	r0, r0, #1
    fb18:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
	_ldiv5(v);
    fb1c:	a812      	add	r0, sp, #72	; 0x48
    fb1e:	920d      	str	r2, [sp, #52]	; 0x34
    fb20:	f00c fcfd 	bl	1c51e <_ldiv5>
    fb24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
}
    fb26:	e7cc      	b.n	fac2 <cbvprintf+0x97a>
	*v >>= 1;
    fb28:	9b08      	ldr	r3, [sp, #32]
    fb2a:	920d      	str	r2, [sp, #52]	; 0x34
    fb2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fb2e:	085b      	lsrs	r3, r3, #1
    fb30:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
    fb34:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
    fb36:	a810      	add	r0, sp, #64	; 0x40
	*v >>= 1;
    fb38:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	_ldiv5(v);
    fb3c:	f00c fcef 	bl	1c51e <_ldiv5>
		decexp++;
    fb40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    fb42:	3201      	adds	r2, #1
    fb44:	e7d9      	b.n	fafa <cbvprintf+0x9b2>
	char *buf = bps;
    fb46:	f10d 0b6c 	add.w	fp, sp, #108	; 0x6c
			while (decexp > 0 && digit_count > 0) {
    fb4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    fb4c:	2900      	cmp	r1, #0
    fb4e:	dd09      	ble.n	fb64 <cbvprintf+0xa1c>
				*buf++ = _get_digit(&fract, &digit_count);
    fb50:	a90f      	add	r1, sp, #60	; 0x3c
    fb52:	a810      	add	r0, sp, #64	; 0x40
    fb54:	920d      	str	r2, [sp, #52]	; 0x34
    fb56:	f00c fd01 	bl	1c55c <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    fb5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
				*buf++ = _get_digit(&fract, &digit_count);
    fb5c:	f80b 0b01 	strb.w	r0, [fp], #1
			while (decexp > 0 && digit_count > 0) {
    fb60:	3a01      	subs	r2, #1
    fb62:	d1f2      	bne.n	fb4a <cbvprintf+0xa02>
			conv->pad0_value = decexp;
    fb64:	9217      	str	r2, [sp, #92]	; 0x5c
			decexp = 0;
    fb66:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
    fb68:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
    fb6c:	0688      	lsls	r0, r1, #26
    fb6e:	d401      	bmi.n	fb74 <cbvprintf+0xa2c>
    fb70:	2f00      	cmp	r7, #0
    fb72:	dd3f      	ble.n	fbf4 <cbvprintf+0xaac>
			*buf++ = '.';
    fb74:	465b      	mov	r3, fp
    fb76:	212e      	movs	r1, #46	; 0x2e
    fb78:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
    fb7c:	b192      	cbz	r2, fba4 <cbvprintf+0xa5c>
    fb7e:	2f00      	cmp	r7, #0
    fb80:	dd76      	ble.n	fc70 <cbvprintf+0xb28>
			conv->pad0_value = -decexp;
    fb82:	4251      	negs	r1, r2
    fb84:	42b9      	cmp	r1, r7
    fb86:	bfa8      	it	ge
    fb88:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    fb8a:	2900      	cmp	r1, #0
			conv->pad0_value = -decexp;
    fb8c:	9117      	str	r1, [sp, #92]	; 0x5c
			precision -= conv->pad0_value;
    fb8e:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    fb92:	bfd4      	ite	le
    fb94:	2100      	movle	r1, #0
    fb96:	2101      	movgt	r1, #1
    fb98:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
    fb9c:	f361 1045 	bfi	r0, r1, #5, #1
    fba0:	f88d 005a 	strb.w	r0, [sp, #90]	; 0x5a
			*buf++ = '.';
    fba4:	469b      	mov	fp, r3
    fba6:	e020      	b.n	fbea <cbvprintf+0xaa2>
		*buf = _get_digit(&fract, &digit_count);
    fba8:	a90f      	add	r1, sp, #60	; 0x3c
    fbaa:	a810      	add	r0, sp, #64	; 0x40
    fbac:	920d      	str	r2, [sp, #52]	; 0x34
    fbae:	f00c fcd5 	bl	1c55c <_get_digit>
		if (*buf++ != '0') {
    fbb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		if (conv->flag_hash || (precision > 0)) {
    fbb4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		if (*buf++ != '0') {
    fbb8:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    fbba:	bf18      	it	ne
    fbbc:	f102 32ff 	addne.w	r2, r2, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    fbc0:	0699      	lsls	r1, r3, #26
		*buf = _get_digit(&fract, &digit_count);
    fbc2:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
		if (conv->flag_hash || (precision > 0)) {
    fbc6:	d401      	bmi.n	fbcc <cbvprintf+0xa84>
    fbc8:	2f00      	cmp	r7, #0
    fbca:	dd53      	ble.n	fc74 <cbvprintf+0xb2c>
			*buf++ = '.';
    fbcc:	232e      	movs	r3, #46	; 0x2e
    fbce:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
    fbd2:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
    fbd6:	e7e5      	b.n	fba4 <cbvprintf+0xa5c>
		*buf++ = _get_digit(&fract, &digit_count);
    fbd8:	a90f      	add	r1, sp, #60	; 0x3c
    fbda:	a810      	add	r0, sp, #64	; 0x40
    fbdc:	920d      	str	r2, [sp, #52]	; 0x34
    fbde:	f00c fcbd 	bl	1c55c <_get_digit>
    fbe2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    fbe4:	f80b 0b01 	strb.w	r0, [fp], #1
		precision--;
    fbe8:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
    fbea:	2f00      	cmp	r7, #0
    fbec:	dd02      	ble.n	fbf4 <cbvprintf+0xaac>
    fbee:	990f      	ldr	r1, [sp, #60]	; 0x3c
    fbf0:	2900      	cmp	r1, #0
    fbf2:	dcf1      	bgt.n	fbd8 <cbvprintf+0xa90>
	if (prune_zero) {
    fbf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fbf6:	2b00      	cmp	r3, #0
    fbf8:	d13f      	bne.n	fc7a <cbvprintf+0xb32>
	conv->pad0_pre_exp = precision;
    fbfa:	9718      	str	r7, [sp, #96]	; 0x60
	if ((c == 'e') || (c == 'E')) {
    fbfc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
    fc00:	2945      	cmp	r1, #69	; 0x45
    fc02:	d123      	bne.n	fc4c <cbvprintf+0xb04>
		if (decexp < 0) {
    fc04:	2a00      	cmp	r2, #0
			*buf++ = '-';
    fc06:	bfb4      	ite	lt
    fc08:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
    fc0a:	212b      	movge	r1, #43	; 0x2b
		*buf++ = c;
    fc0c:	4658      	mov	r0, fp
			decexp = -decexp;
    fc0e:	bfb8      	it	lt
    fc10:	4252      	neglt	r2, r2
		if (decexp >= 100) {
    fc12:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
    fc14:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
    fc18:	f88b 1001 	strb.w	r1, [fp, #1]
		if (decexp >= 100) {
    fc1c:	dd0a      	ble.n	fc34 <cbvprintf+0xaec>
			*buf++ = (decexp / 100) + '0';
    fc1e:	2764      	movs	r7, #100	; 0x64
    fc20:	fb92 f1f7 	sdiv	r1, r2, r7
			decexp %= 100;
    fc24:	fb07 2211 	mls	r2, r7, r1, r2
			*buf++ = (decexp / 100) + '0';
    fc28:	f101 0c30 	add.w	ip, r1, #48	; 0x30
    fc2c:	f10b 0003 	add.w	r0, fp, #3
    fc30:	f88b c002 	strb.w	ip, [fp, #2]
		*buf++ = (decexp / 10) + '0';
    fc34:	270a      	movs	r7, #10
    fc36:	fb92 f1f7 	sdiv	r1, r2, r7
    fc3a:	4683      	mov	fp, r0
		*buf++ = (decexp % 10) + '0';
    fc3c:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
    fc40:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    fc44:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    fc46:	f80b cb02 	strb.w	ip, [fp], #2
		*buf++ = (decexp % 10) + '0';
    fc4a:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
    fc4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    fc4e:	2a00      	cmp	r2, #0
    fc50:	dc1e      	bgt.n	fc90 <cbvprintf+0xb48>
    fc52:	9a18      	ldr	r2, [sp, #96]	; 0x60
    fc54:	2a00      	cmp	r2, #0
    fc56:	bfd4      	ite	le
    fc58:	2200      	movle	r2, #0
    fc5a:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
    fc5c:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
    fc60:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
    fc64:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
    fc66:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	*buf = 0;
    fc6a:	f88b 2000 	strb.w	r2, [fp]
	return bps;
    fc6e:	e60d      	b.n	f88c <cbvprintf+0x744>
			*buf++ = '.';
    fc70:	469b      	mov	fp, r3
    fc72:	e7bf      	b.n	fbf4 <cbvprintf+0xaac>
		if (*buf++ != '0') {
    fc74:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
    fc78:	e7bc      	b.n	fbf4 <cbvprintf+0xaac>
		conv->pad0_pre_exp = 0;
    fc7a:	2100      	movs	r1, #0
    fc7c:	9118      	str	r1, [sp, #96]	; 0x60
		while (*--buf == '0') {
    fc7e:	4658      	mov	r0, fp
    fc80:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
    fc84:	2930      	cmp	r1, #48	; 0x30
    fc86:	d0fa      	beq.n	fc7e <cbvprintf+0xb36>
		if (*buf != '.') {
    fc88:	292e      	cmp	r1, #46	; 0x2e
    fc8a:	bf18      	it	ne
    fc8c:	4683      	movne	fp, r0
    fc8e:	e7b5      	b.n	fbfc <cbvprintf+0xab4>
		|| (conv->pad0_pre_exp > 0);
    fc90:	2201      	movs	r2, #1
    fc92:	e7e3      	b.n	fc5c <cbvprintf+0xb14>
			bpe = bps + 5;
    fc94:	f8df b014 	ldr.w	fp, [pc, #20]	; fcac <cbvprintf+0xb64>
		char sign = 0;
    fc98:	4606      	mov	r6, r0
			bps = "(nil)";
    fc9a:	f1ab 0905 	sub.w	r9, fp, #5
    fc9e:	e5f7      	b.n	f890 <cbvprintf+0x748>
		} else if (conv->altform_0) {
    fca0:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
    fca2:	bf48      	it	mi
    fca4:	3201      	addmi	r2, #1
    fca6:	e5fd      	b.n	f8a4 <cbvprintf+0x75c>
    fca8:	00023660 	.word	0x00023660
    fcac:	00021f00 	.word	0x00021f00
    fcb0:	930c      	str	r3, [sp, #48]	; 0x30
					OUTC(pad);
    fcb2:	4641      	mov	r1, r8
    fcb4:	9b06      	ldr	r3, [sp, #24]
    fcb6:	4638      	mov	r0, r7
    fcb8:	4798      	blx	r3
    fcba:	2800      	cmp	r0, #0
    fcbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fcbe:	da05      	bge.n	fccc <cbvprintf+0xb84>
#undef OUTS
#undef OUTC
}
    fcc0:	b023      	add	sp, #140	; 0x8c
    fcc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    fcc6:	2720      	movs	r7, #32
    fcc8:	eb0a 0305 	add.w	r3, sl, r5
    fccc:	4652      	mov	r2, sl
				while (width-- > 0) {
    fcce:	2a00      	cmp	r2, #0
    fcd0:	eba3 050a 	sub.w	r5, r3, sl
    fcd4:	f10a 3aff 	add.w	sl, sl, #4294967295
    fcd8:	dcea      	bgt.n	fcb0 <cbvprintf+0xb68>
		if (sign != 0) {
    fcda:	b136      	cbz	r6, fcea <cbvprintf+0xba2>
			OUTC(sign);
    fcdc:	4641      	mov	r1, r8
    fcde:	4630      	mov	r0, r6
    fce0:	9b06      	ldr	r3, [sp, #24]
    fce2:	4798      	blx	r3
    fce4:	2800      	cmp	r0, #0
    fce6:	dbeb      	blt.n	fcc0 <cbvprintf+0xb78>
    fce8:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    fcea:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
    fcee:	0650      	lsls	r0, r2, #25
    fcf0:	d57c      	bpl.n	fdec <cbvprintf+0xca4>
			if (conv->specifier_a) {
    fcf2:	f99d 2059 	ldrsb.w	r2, [sp, #89]	; 0x59
    fcf6:	2a00      	cmp	r2, #0
    fcf8:	db2b      	blt.n	fd52 <cbvprintf+0xc0a>
    fcfa:	eba5 0509 	sub.w	r5, r5, r9
    fcfe:	464e      	mov	r6, r9
				while (isdigit((int)*cp)) {
    fd00:	f899 0000 	ldrb.w	r0, [r9]
    fd04:	4b59      	ldr	r3, [pc, #356]	; (fe6c <cbvprintf+0xd24>)
    fd06:	19af      	adds	r7, r5, r6
    fd08:	5cc2      	ldrb	r2, [r0, r3]
    fd0a:	f109 0901 	add.w	r9, r9, #1
    fd0e:	0751      	lsls	r1, r2, #29
    fd10:	d43f      	bmi.n	fd92 <cbvprintf+0xc4a>
				if (!conv->pad_postdp) {
    fd12:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
				pad_len = conv->pad0_value;
    fd16:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
				if (!conv->pad_postdp) {
    fd1a:	0692      	lsls	r2, r2, #26
    fd1c:	d408      	bmi.n	fd30 <cbvprintf+0xbe8>
    fd1e:	eb09 0507 	add.w	r5, r9, r7
    fd22:	464a      	mov	r2, r9
					while (pad_len-- > 0) {
    fd24:	2a00      	cmp	r2, #0
    fd26:	eba5 0709 	sub.w	r7, r5, r9
    fd2a:	f109 39ff 	add.w	r9, r9, #4294967295
    fd2e:	dc36      	bgt.n	fd9e <cbvprintf+0xc56>
				if (*cp == '.') {
    fd30:	7830      	ldrb	r0, [r6, #0]
    fd32:	282e      	cmp	r0, #46	; 0x2e
    fd34:	d10a      	bne.n	fd4c <cbvprintf+0xc04>
					OUTC(*cp++);
    fd36:	4641      	mov	r1, r8
    fd38:	9b06      	ldr	r3, [sp, #24]
    fd3a:	4798      	blx	r3
						OUTC('0');
    fd3c:	2800      	cmp	r0, #0
    fd3e:	dbbf      	blt.n	fcc0 <cbvprintf+0xb78>
					while (pad_len-- > 0) {
    fd40:	f1b9 0f00 	cmp.w	r9, #0
						OUTC('0');
    fd44:	f107 0701 	add.w	r7, r7, #1
					while (pad_len-- > 0) {
    fd48:	dc30      	bgt.n	fdac <cbvprintf+0xc64>
					OUTC(*cp++);
    fd4a:	3601      	adds	r6, #1
    fd4c:	46b1      	mov	r9, r6
    fd4e:	1bbf      	subs	r7, r7, r6
    fd50:	e039      	b.n	fdc6 <cbvprintf+0xc7e>
    fd52:	eba5 0709 	sub.w	r7, r5, r9
    fd56:	464d      	mov	r5, r9
    fd58:	eb07 0609 	add.w	r6, r7, r9
				while (*cp != 'p') {
    fd5c:	f819 0b01 	ldrb.w	r0, [r9], #1
    fd60:	2870      	cmp	r0, #112	; 0x70
    fd62:	d110      	bne.n	fd86 <cbvprintf+0xc3e>
			while (pad_len-- > 0) {
    fd64:	9f18      	ldr	r7, [sp, #96]	; 0x60
    fd66:	4437      	add	r7, r6
    fd68:	1bba      	subs	r2, r7, r6
    fd6a:	2a00      	cmp	r2, #0
    fd6c:	dc35      	bgt.n	fdda <cbvprintf+0xc92>
			OUTS(cp, bpe);
    fd6e:	465b      	mov	r3, fp
    fd70:	462a      	mov	r2, r5
    fd72:	4641      	mov	r1, r8
    fd74:	9806      	ldr	r0, [sp, #24]
    fd76:	f00c fc08 	bl	1c58a <outs>
    fd7a:	2800      	cmp	r0, #0
    fd7c:	dba0      	blt.n	fcc0 <cbvprintf+0xb78>
    fd7e:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    fd80:	4605      	mov	r5, r0
    fd82:	4482      	add	sl, r0
    fd84:	e06c      	b.n	fe60 <cbvprintf+0xd18>
					OUTC(*cp++);
    fd86:	4641      	mov	r1, r8
    fd88:	9b06      	ldr	r3, [sp, #24]
    fd8a:	4798      	blx	r3
    fd8c:	2800      	cmp	r0, #0
    fd8e:	dae2      	bge.n	fd56 <cbvprintf+0xc0e>
    fd90:	e796      	b.n	fcc0 <cbvprintf+0xb78>
					OUTC(*cp++);
    fd92:	4641      	mov	r1, r8
    fd94:	9b06      	ldr	r3, [sp, #24]
    fd96:	4798      	blx	r3
    fd98:	2800      	cmp	r0, #0
    fd9a:	dab0      	bge.n	fcfe <cbvprintf+0xbb6>
    fd9c:	e790      	b.n	fcc0 <cbvprintf+0xb78>
						OUTC('0');
    fd9e:	4641      	mov	r1, r8
    fda0:	2030      	movs	r0, #48	; 0x30
    fda2:	9b06      	ldr	r3, [sp, #24]
    fda4:	4798      	blx	r3
    fda6:	2800      	cmp	r0, #0
    fda8:	dabb      	bge.n	fd22 <cbvprintf+0xbda>
    fdaa:	e789      	b.n	fcc0 <cbvprintf+0xb78>
						OUTC('0');
    fdac:	4641      	mov	r1, r8
    fdae:	2030      	movs	r0, #48	; 0x30
    fdb0:	9b06      	ldr	r3, [sp, #24]
    fdb2:	4798      	blx	r3
    fdb4:	f109 39ff 	add.w	r9, r9, #4294967295
    fdb8:	e7c0      	b.n	fd3c <cbvprintf+0xbf4>
					OUTC(*cp++);
    fdba:	4641      	mov	r1, r8
    fdbc:	9b06      	ldr	r3, [sp, #24]
    fdbe:	4798      	blx	r3
    fdc0:	2800      	cmp	r0, #0
    fdc2:	f6ff af7d 	blt.w	fcc0 <cbvprintf+0xb78>
				while (isdigit((int)*cp)) {
    fdc6:	4b29      	ldr	r3, [pc, #164]	; (fe6c <cbvprintf+0xd24>)
    fdc8:	464d      	mov	r5, r9
    fdca:	eb07 0609 	add.w	r6, r7, r9
    fdce:	f819 0b01 	ldrb.w	r0, [r9], #1
    fdd2:	5cc2      	ldrb	r2, [r0, r3]
    fdd4:	0753      	lsls	r3, r2, #29
    fdd6:	d4f0      	bmi.n	fdba <cbvprintf+0xc72>
    fdd8:	e7c4      	b.n	fd64 <cbvprintf+0xc1c>
				OUTC('0');
    fdda:	4641      	mov	r1, r8
    fddc:	2030      	movs	r0, #48	; 0x30
    fdde:	9b06      	ldr	r3, [sp, #24]
    fde0:	4798      	blx	r3
    fde2:	2800      	cmp	r0, #0
    fde4:	f6ff af6c 	blt.w	fcc0 <cbvprintf+0xb78>
    fde8:	3601      	adds	r6, #1
    fdea:	e7bd      	b.n	fd68 <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
    fdec:	06d1      	lsls	r1, r2, #27
    fdee:	d401      	bmi.n	fdf4 <cbvprintf+0xcac>
    fdf0:	0712      	lsls	r2, r2, #28
    fdf2:	d507      	bpl.n	fe04 <cbvprintf+0xcbc>
				OUTC('0');
    fdf4:	4641      	mov	r1, r8
    fdf6:	2030      	movs	r0, #48	; 0x30
    fdf8:	9b06      	ldr	r3, [sp, #24]
    fdfa:	4798      	blx	r3
    fdfc:	2800      	cmp	r0, #0
    fdfe:	f6ff af5f 	blt.w	fcc0 <cbvprintf+0xb78>
    fe02:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    fe04:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
    fe08:	06d3      	lsls	r3, r2, #27
    fe0a:	d508      	bpl.n	fe1e <cbvprintf+0xcd6>
				OUTC(conv->specifier);
    fe0c:	4641      	mov	r1, r8
    fe0e:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
    fe12:	9b06      	ldr	r3, [sp, #24]
    fe14:	4798      	blx	r3
    fe16:	2800      	cmp	r0, #0
    fe18:	f6ff af52 	blt.w	fcc0 <cbvprintf+0xb78>
    fe1c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    fe1e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    fe20:	442f      	add	r7, r5
    fe22:	1b7a      	subs	r2, r7, r5
    fe24:	2a00      	cmp	r2, #0
    fe26:	dc0a      	bgt.n	fe3e <cbvprintf+0xcf6>
			OUTS(bps, bpe);
    fe28:	465b      	mov	r3, fp
    fe2a:	464a      	mov	r2, r9
    fe2c:	4641      	mov	r1, r8
    fe2e:	9806      	ldr	r0, [sp, #24]
    fe30:	f00c fbab 	bl	1c58a <outs>
    fe34:	2800      	cmp	r0, #0
    fe36:	f6ff af43 	blt.w	fcc0 <cbvprintf+0xb78>
    fe3a:	4428      	add	r0, r5
    fe3c:	e7a0      	b.n	fd80 <cbvprintf+0xc38>
				OUTC('0');
    fe3e:	4641      	mov	r1, r8
    fe40:	2030      	movs	r0, #48	; 0x30
    fe42:	9b06      	ldr	r3, [sp, #24]
    fe44:	4798      	blx	r3
    fe46:	2800      	cmp	r0, #0
    fe48:	f6ff af3a 	blt.w	fcc0 <cbvprintf+0xb78>
    fe4c:	3501      	adds	r5, #1
    fe4e:	e7e8      	b.n	fe22 <cbvprintf+0xcda>
			OUTC(' ');
    fe50:	4641      	mov	r1, r8
    fe52:	2020      	movs	r0, #32
    fe54:	9b06      	ldr	r3, [sp, #24]
    fe56:	4798      	blx	r3
    fe58:	2800      	cmp	r0, #0
    fe5a:	f6ff af31 	blt.w	fcc0 <cbvprintf+0xb78>
    fe5e:	3501      	adds	r5, #1
		while (width > 0) {
    fe60:	ebaa 0305 	sub.w	r3, sl, r5
    fe64:	2b00      	cmp	r3, #0
    fe66:	dcf3      	bgt.n	fe50 <cbvprintf+0xd08>
    fe68:	f7ff bbae 	b.w	f5c8 <cbvprintf+0x480>
    fe6c:	00023660 	.word	0x00023660

0000fe70 <nordicsemi_nrf91_init>:
    fe70:	f04f 0220 	mov.w	r2, #32
    fe74:	f3ef 8311 	mrs	r3, BASEPRI
    fe78:	f382 8811 	msr	BASEPRI, r2
    fe7c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    fe80:	2101      	movs	r1, #1
    fe82:	4a04      	ldr	r2, [pc, #16]	; (fe94 <nordicsemi_nrf91_init+0x24>)
    fe84:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    fe88:	f383 8811 	msr	BASEPRI, r3
    fe8c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    fe90:	2000      	movs	r0, #0
    fe92:	4770      	bx	lr
    fe94:	40039000 	.word	0x40039000

0000fe98 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    fe98:	b120      	cbz	r0, fea4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    fe9a:	4b03      	ldr	r3, [pc, #12]	; (fea8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    fe9c:	0180      	lsls	r0, r0, #6
    fe9e:	f043 0301 	orr.w	r3, r3, #1
    fea2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    fea4:	4770      	bx	lr
    fea6:	bf00      	nop
    fea8:	00020f40 	.word	0x00020f40

0000feac <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    feac:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    feae:	2200      	movs	r2, #0
{
    feb0:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    feb2:	490f      	ldr	r1, [pc, #60]	; (fef0 <enable_logger+0x44>)
    feb4:	480f      	ldr	r0, [pc, #60]	; (fef4 <enable_logger+0x48>)
    feb6:	f010 f9d6 	bl	20266 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    feba:	2200      	movs	r2, #0
    febc:	2300      	movs	r3, #0
    febe:	2400      	movs	r4, #0
    fec0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    fec4:	230e      	movs	r3, #14
    fec6:	4d0c      	ldr	r5, [pc, #48]	; (fef8 <enable_logger+0x4c>)
    fec8:	e9cd 3403 	strd	r3, r4, [sp, #12]
    fecc:	f44f 7240 	mov.w	r2, #768	; 0x300
    fed0:	4628      	mov	r0, r5
    fed2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    fed6:	4b09      	ldr	r3, [pc, #36]	; (fefc <enable_logger+0x50>)
    fed8:	4909      	ldr	r1, [pc, #36]	; (ff00 <enable_logger+0x54>)
    feda:	9400      	str	r4, [sp, #0]
    fedc:	f00a fb9a 	bl	1a614 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    fee0:	4908      	ldr	r1, [pc, #32]	; (ff04 <enable_logger+0x58>)
    fee2:	4628      	mov	r0, r5
    fee4:	f010 f8ee 	bl	200c4 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    fee8:	4620      	mov	r0, r4
    feea:	b009      	add	sp, #36	; 0x24
    feec:	bd30      	pop	{r4, r5, pc}
    feee:	bf00      	nop
    fef0:	0000ff09 	.word	0x0000ff09
    fef4:	20014ac8 	.word	0x20014ac8
    fef8:	20014b00 	.word	0x20014b00
    fefc:	0001033d 	.word	0x0001033d
    ff00:	2001d1d8 	.word	0x2001d1d8
    ff04:	00021f05 	.word	0x00021f05

0000ff08 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    ff08:	4801      	ldr	r0, [pc, #4]	; (ff10 <log_process_thread_timer_expiry_fn+0x8>)
    ff0a:	f00a baeb 	b.w	1a4e4 <z_impl_k_sem_give>
    ff0e:	bf00      	nop
    ff10:	200148e8 	.word	0x200148e8

0000ff14 <z_log_get_s_mask>:
{
    ff14:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff16:	4605      	mov	r5, r0
	uint32_t mask = 0;
    ff18:	2000      	movs	r0, #0
				mask |= BIT(arg);
    ff1a:	2701      	movs	r7, #1
	uint32_t arg = 0;
    ff1c:	4603      	mov	r3, r0
	bool arm = false;
    ff1e:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
    ff20:	4e0d      	ldr	r6, [pc, #52]	; (ff58 <z_log_get_s_mask+0x44>)
	while ((curr = *str++) && arg < nargs) {
    ff22:	f815 4b01 	ldrb.w	r4, [r5], #1
    ff26:	b10c      	cbz	r4, ff2c <z_log_get_s_mask+0x18>
    ff28:	428b      	cmp	r3, r1
    ff2a:	d300      	bcc.n	ff2e <z_log_get_s_mask+0x1a>
}
    ff2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    ff2e:	2c25      	cmp	r4, #37	; 0x25
    ff30:	d102      	bne.n	ff38 <z_log_get_s_mask+0x24>
			arm = !arm;
    ff32:	f082 0201 	eor.w	r2, r2, #1
    ff36:	e7f4      	b.n	ff22 <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
    ff38:	2a00      	cmp	r2, #0
    ff3a:	d0f2      	beq.n	ff22 <z_log_get_s_mask+0xe>
    ff3c:	f814 c006 	ldrb.w	ip, [r4, r6]
    ff40:	f01c 0f03 	tst.w	ip, #3
    ff44:	d0ed      	beq.n	ff22 <z_log_get_s_mask+0xe>
			if (curr == 's') {
    ff46:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    ff48:	bf04      	itt	eq
    ff4a:	fa07 f203 	lsleq.w	r2, r7, r3
    ff4e:	4310      	orreq	r0, r2
			arg++;
    ff50:	3301      	adds	r3, #1
			arm = false;
    ff52:	2200      	movs	r2, #0
    ff54:	e7e5      	b.n	ff22 <z_log_get_s_mask+0xe>
    ff56:	bf00      	nop
    ff58:	00023660 	.word	0x00023660

0000ff5c <log_core_init>:
{
    ff5c:	b508      	push	{r3, lr}
		log_msg_pool_init();
    ff5e:	f000 fa4b 	bl	103f8 <log_msg_pool_init>
		log_list_init(&list);
    ff62:	4809      	ldr	r0, [pc, #36]	; (ff88 <log_core_init+0x2c>)
    ff64:	f00c fb2d 	bl	1c5c2 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    ff68:	2304      	movs	r3, #4
    ff6a:	2234      	movs	r2, #52	; 0x34
    ff6c:	4907      	ldr	r1, [pc, #28]	; (ff8c <log_core_init+0x30>)
    ff6e:	4808      	ldr	r0, [pc, #32]	; (ff90 <log_core_init+0x34>)
    ff70:	f00f fee9 	bl	1fd46 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    ff74:	4b07      	ldr	r3, [pc, #28]	; (ff94 <log_core_init+0x38>)
    ff76:	4a08      	ldr	r2, [pc, #32]	; (ff98 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    ff78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    ff7c:	601a      	str	r2, [r3, #0]
}
    ff7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    ff82:	f000 bc85 	b.w	10890 <log_output_timestamp_freq_set>
    ff86:	bf00      	nop
    ff88:	2001804c 	.word	0x2001804c
    ff8c:	2001fe98 	.word	0x2001fe98
    ff90:	20018054 	.word	0x20018054
    ff94:	20014504 	.word	0x20014504
    ff98:	0001c601 	.word	0x0001c601

0000ff9c <dropped_notify>:
{
    ff9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ff9e:	2500      	movs	r5, #0
    ffa0:	4b0c      	ldr	r3, [pc, #48]	; (ffd4 <dropped_notify+0x38>)
    ffa2:	e8d3 7fef 	ldaex	r7, [r3]
    ffa6:	e8c3 5fe2 	stlex	r2, r5, [r3]
    ffaa:	2a00      	cmp	r2, #0
    ffac:	d1f9      	bne.n	ffa2 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    ffae:	4c0a      	ldr	r4, [pc, #40]	; (ffd8 <dropped_notify+0x3c>)
    ffb0:	4e0a      	ldr	r6, [pc, #40]	; (ffdc <dropped_notify+0x40>)
    ffb2:	1b36      	subs	r6, r6, r4
    ffb4:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    ffb6:	42b5      	cmp	r5, r6
    ffb8:	db00      	blt.n	ffbc <dropped_notify+0x20>
}
    ffba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    ffbc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ffbe:	795b      	ldrb	r3, [r3, #5]
    ffc0:	b12b      	cbz	r3, ffce <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    ffc2:	6823      	ldr	r3, [r4, #0]
    ffc4:	68db      	ldr	r3, [r3, #12]
    ffc6:	b113      	cbz	r3, ffce <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    ffc8:	4639      	mov	r1, r7
    ffca:	4620      	mov	r0, r4
    ffcc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    ffce:	3501      	adds	r5, #1
    ffd0:	3410      	adds	r4, #16
    ffd2:	e7f0      	b.n	ffb6 <dropped_notify+0x1a>
    ffd4:	20018044 	.word	0x20018044
    ffd8:	00020ee0 	.word	0x00020ee0
    ffdc:	00020ef0 	.word	0x00020ef0

0000ffe0 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ffe0:	4b04      	ldr	r3, [pc, #16]	; (fff4 <log_dropped+0x14>)
    ffe2:	e8d3 2fef 	ldaex	r2, [r3]
    ffe6:	3201      	adds	r2, #1
    ffe8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ffec:	2900      	cmp	r1, #0
    ffee:	d1f8      	bne.n	ffe2 <log_dropped+0x2>
}
    fff0:	4770      	bx	lr
    fff2:	bf00      	nop
    fff4:	20018044 	.word	0x20018044

0000fff8 <log_source_name_get>:
    fff8:	4a04      	ldr	r2, [pc, #16]	; (1000c <log_source_name_get+0x14>)
    fffa:	4b05      	ldr	r3, [pc, #20]	; (10010 <log_source_name_get+0x18>)
    fffc:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    fffe:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   10002:	bf34      	ite	cc
   10004:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   10008:	2000      	movcs	r0, #0
}
   1000a:	4770      	bx	lr
   1000c:	00020e58 	.word	0x00020e58
   10010:	00020ee0 	.word	0x00020ee0

00010014 <log_backend_enable>:
	id += backend - log_backend_get(0);
   10014:	4b09      	ldr	r3, [pc, #36]	; (1003c <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
   10016:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   10018:	1ac3      	subs	r3, r0, r3
   1001a:	111b      	asrs	r3, r3, #4
   1001c:	3301      	adds	r3, #1
{
   1001e:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
   10020:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
   10022:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
   10024:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
   10026:	4c06      	ldr	r4, [pc, #24]	; (10040 <log_backend_enable+0x2c>)
   10028:	715a      	strb	r2, [r3, #5]
   1002a:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   1002c:	6019      	str	r1, [r3, #0]
   1002e:	b912      	cbnz	r2, 10036 <log_backend_enable+0x22>
   10030:	4804      	ldr	r0, [pc, #16]	; (10044 <log_backend_enable+0x30>)
   10032:	f00a fa57 	bl	1a4e4 <z_impl_k_sem_give>
	backend_attached = true;
   10036:	2301      	movs	r3, #1
   10038:	7023      	strb	r3, [r4, #0]
}
   1003a:	bd10      	pop	{r4, pc}
   1003c:	00020ee0 	.word	0x00020ee0
   10040:	2001a414 	.word	0x2001a414
   10044:	200148e8 	.word	0x200148e8

00010048 <log_init>:
{
   10048:	b570      	push	{r4, r5, r6, lr}
   1004a:	4b0f      	ldr	r3, [pc, #60]	; (10088 <log_init+0x40>)
   1004c:	e8d3 5fef 	ldaex	r5, [r3]
   10050:	1c6a      	adds	r2, r5, #1
   10052:	e8c3 2fe1 	stlex	r1, r2, [r3]
   10056:	2900      	cmp	r1, #0
   10058:	d1f8      	bne.n	1004c <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
   1005a:	b92d      	cbnz	r5, 10068 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
   1005c:	4c0b      	ldr	r4, [pc, #44]	; (1008c <log_init+0x44>)
   1005e:	4e0c      	ldr	r6, [pc, #48]	; (10090 <log_init+0x48>)
   10060:	1b36      	subs	r6, r6, r4
   10062:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   10064:	42b5      	cmp	r5, r6
   10066:	db00      	blt.n	1006a <log_init+0x22>
}
   10068:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   1006a:	7b23      	ldrb	r3, [r4, #12]
   1006c:	b143      	cbz	r3, 10080 <log_init+0x38>
			if (backend->api->init != NULL) {
   1006e:	6823      	ldr	r3, [r4, #0]
   10070:	695b      	ldr	r3, [r3, #20]
   10072:	b103      	cbz	r3, 10076 <log_init+0x2e>
				backend->api->init();
   10074:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   10076:	2204      	movs	r2, #4
   10078:	2100      	movs	r1, #0
   1007a:	4620      	mov	r0, r4
   1007c:	f7ff ffca 	bl	10014 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   10080:	3501      	adds	r5, #1
   10082:	3410      	adds	r4, #16
   10084:	e7ee      	b.n	10064 <log_init+0x1c>
   10086:	bf00      	nop
   10088:	20018048 	.word	0x20018048
   1008c:	00020ee0 	.word	0x00020ee0
   10090:	00020ef0 	.word	0x00020ef0

00010094 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   10094:	4b15      	ldr	r3, [pc, #84]	; (100ec <log_strdup+0x58>)
{
   10096:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   10098:	4298      	cmp	r0, r3
{
   1009a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   1009c:	d302      	bcc.n	100a4 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   1009e:	4b14      	ldr	r3, [pc, #80]	; (100f0 <log_strdup+0x5c>)
   100a0:	4298      	cmp	r0, r3
   100a2:	d31d      	bcc.n	100e0 <log_strdup+0x4c>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   100a4:	2200      	movs	r2, #0
   100a6:	2300      	movs	r3, #0
   100a8:	4812      	ldr	r0, [pc, #72]	; (100f4 <log_strdup+0x60>)
   100aa:	a901      	add	r1, sp, #4
   100ac:	f009 fc78 	bl	199a0 <k_mem_slab_alloc>
	if (err != 0) {
   100b0:	4605      	mov	r5, r0
   100b2:	b9c0      	cbnz	r0, 100e6 <log_strdup+0x52>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   100b4:	2201      	movs	r2, #1
   100b6:	9b01      	ldr	r3, [sp, #4]
   100b8:	e8d3 1fef 	ldaex	r1, [r3]
   100bc:	e8c3 2fe0 	stlex	r0, r2, [r3]
   100c0:	2800      	cmp	r0, #0
   100c2:	d1f9      	bne.n	100b8 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   100c4:	9e01      	ldr	r6, [sp, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   100c6:	222d      	movs	r2, #45	; 0x2d
   100c8:	1d33      	adds	r3, r6, #4
   100ca:	4618      	mov	r0, r3
   100cc:	4621      	mov	r1, r4
   100ce:	f010 fb1b 	bl	20708 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   100d2:	227e      	movs	r2, #126	; 0x7e
   100d4:	4603      	mov	r3, r0
   100d6:	f886 2031 	strb.w	r2, [r6, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   100da:	f886 5032 	strb.w	r5, [r6, #50]	; 0x32
	return dup->buf;
   100de:	461c      	mov	r4, r3
}
   100e0:	4620      	mov	r0, r4
   100e2:	b002      	add	sp, #8
   100e4:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   100e6:	4b04      	ldr	r3, [pc, #16]	; (100f8 <log_strdup+0x64>)
   100e8:	e7f9      	b.n	100de <log_strdup+0x4a>
   100ea:	bf00      	nop
   100ec:	00020b9c 	.word	0x00020b9c
   100f0:	000237d8 	.word	0x000237d8
   100f4:	20018054 	.word	0x20018054
   100f8:	00021f0d 	.word	0x00021f0d

000100fc <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   100fc:	b148      	cbz	r0, 10112 <log_is_strdup+0x16>
   100fe:	4b05      	ldr	r3, [pc, #20]	; (10114 <log_is_strdup+0x18>)
   10100:	4298      	cmp	r0, r3
   10102:	d305      	bcc.n	10110 <log_is_strdup+0x14>
   10104:	33d0      	adds	r3, #208	; 0xd0
   10106:	4298      	cmp	r0, r3
   10108:	bf2c      	ite	cs
   1010a:	2000      	movcs	r0, #0
   1010c:	2001      	movcc	r0, #1
   1010e:	4770      	bx	lr
   10110:	2000      	movs	r0, #0
}
   10112:	4770      	bx	lr
   10114:	2001fe98 	.word	0x2001fe98

00010118 <z_impl_log_process>:
{
   10118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   1011c:	4b4a      	ldr	r3, [pc, #296]	; (10248 <z_impl_log_process+0x130>)
{
   1011e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   10120:	781b      	ldrb	r3, [r3, #0]
{
   10122:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
   10124:	b903      	cbnz	r3, 10128 <z_impl_log_process+0x10>
   10126:	b340      	cbz	r0, 1017a <z_impl_log_process+0x62>
	__asm__ volatile(
   10128:	f04f 0320 	mov.w	r3, #32
   1012c:	f3ef 8611 	mrs	r6, BASEPRI
   10130:	f383 8811 	msr	BASEPRI, r3
   10134:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   10138:	4844      	ldr	r0, [pc, #272]	; (1024c <z_impl_log_process+0x134>)
   1013a:	f00c fa52 	bl	1c5e2 <log_list_head_get>
   1013e:	4605      	mov	r5, r0
	__asm__ volatile(
   10140:	f386 8811 	msr	BASEPRI, r6
   10144:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   10148:	b158      	cbz	r0, 10162 <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1014a:	4b41      	ldr	r3, [pc, #260]	; (10250 <z_impl_log_process+0x138>)
   1014c:	e8d3 2fef 	ldaex	r2, [r3]
   10150:	3a01      	subs	r2, #1
   10152:	e8c3 2fe1 	stlex	r1, r2, [r3]
   10156:	2900      	cmp	r1, #0
   10158:	d1f8      	bne.n	1014c <z_impl_log_process+0x34>
	if (!bypass) {
   1015a:	b194      	cbz	r4, 10182 <z_impl_log_process+0x6a>
	log_msg_put(msg);
   1015c:	4628      	mov	r0, r5
   1015e:	f00c fb3d 	bl	1c7dc <log_msg_put>
	if (!bypass && dropped_cnt) {
   10162:	b924      	cbnz	r4, 1016e <z_impl_log_process+0x56>
   10164:	4b3b      	ldr	r3, [pc, #236]	; (10254 <z_impl_log_process+0x13c>)
   10166:	681b      	ldr	r3, [r3, #0]
   10168:	b10b      	cbz	r3, 1016e <z_impl_log_process+0x56>
		dropped_notify();
   1016a:	f7ff ff17 	bl	ff9c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   1016e:	4837      	ldr	r0, [pc, #220]	; (1024c <z_impl_log_process+0x134>)
   10170:	f00c fa35 	bl	1c5de <log_list_head_peek>
   10174:	1e04      	subs	r4, r0, #0
   10176:	bf18      	it	ne
   10178:	2401      	movne	r4, #1
}
   1017a:	4620      	mov	r0, r4
   1017c:	b005      	add	sp, #20
   1017e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   10182:	4b35      	ldr	r3, [pc, #212]	; (10258 <z_impl_log_process+0x140>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   10184:	781b      	ldrb	r3, [r3, #0]
   10186:	b9cb      	cbnz	r3, 101bc <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10188:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   1018a:	07db      	lsls	r3, r3, #31
   1018c:	d416      	bmi.n	101bc <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
   1018e:	f00c fb34 	bl	1c7fa <log_msg_str_get>
   10192:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   10194:	4628      	mov	r0, r5
   10196:	f00c faff 	bl	1c798 <log_msg_nargs_get>
   1019a:	4601      	mov	r1, r0
   1019c:	4640      	mov	r0, r8
   1019e:	f7ff feb9 	bl	ff14 <z_log_get_s_mask>
   101a2:	4606      	mov	r6, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   101a4:	4f2d      	ldr	r7, [pc, #180]	; (1025c <z_impl_log_process+0x144>)
   101a6:	4b2e      	ldr	r3, [pc, #184]	; (10260 <z_impl_log_process+0x148>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   101a8:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 1027c <z_impl_log_process+0x164>
   101ac:	1bdb      	subs	r3, r3, r7
   101ae:	08db      	lsrs	r3, r3, #3
   101b0:	9303      	str	r3, [sp, #12]
   101b2:	4b2c      	ldr	r3, [pc, #176]	; (10264 <z_impl_log_process+0x14c>)
   101b4:	1bdb      	subs	r3, r3, r7
   101b6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   101ba:	b936      	cbnz	r6, 101ca <z_impl_log_process+0xb2>
   101bc:	4e2a      	ldr	r6, [pc, #168]	; (10268 <z_impl_log_process+0x150>)
   101be:	4f2b      	ldr	r7, [pc, #172]	; (1026c <z_impl_log_process+0x154>)
   101c0:	f04f 0800 	mov.w	r8, #0
   101c4:	1bbf      	subs	r7, r7, r6
   101c6:	113f      	asrs	r7, r7, #4
   101c8:	e03a      	b.n	10240 <z_impl_log_process+0x128>
		idx = 31 - __builtin_clz(mask);
   101ca:	fab6 f186 	clz	r1, r6
   101ce:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   101d2:	4649      	mov	r1, r9
   101d4:	4628      	mov	r0, r5
   101d6:	f00c fae2 	bl	1c79e <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   101da:	4b25      	ldr	r3, [pc, #148]	; (10270 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
   101dc:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   101de:	4298      	cmp	r0, r3
   101e0:	d302      	bcc.n	101e8 <z_impl_log_process+0xd0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   101e2:	4a24      	ldr	r2, [pc, #144]	; (10274 <z_impl_log_process+0x15c>)
   101e4:	4290      	cmp	r0, r2
   101e6:	d31a      	bcc.n	1021e <z_impl_log_process+0x106>
   101e8:	4608      	mov	r0, r1
   101ea:	f7ff ff87 	bl	100fc <log_is_strdup>
   101ee:	4602      	mov	r2, r0
   101f0:	b9a8      	cbnz	r0, 1021e <z_impl_log_process+0x106>
   101f2:	4b21      	ldr	r3, [pc, #132]	; (10278 <z_impl_log_process+0x160>)
   101f4:	4299      	cmp	r1, r3
   101f6:	d012      	beq.n	1021e <z_impl_log_process+0x106>
	return msg->hdr.ids.source_id;
   101f8:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   101fa:	9903      	ldr	r1, [sp, #12]
   101fc:	f3c3 1389 	ubfx	r3, r3, #6, #10
   10200:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   10202:	bf38      	it	cc
   10204:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   10208:	ea4f 138a 	mov.w	r3, sl, lsl #6
   1020c:	f043 0301 	orr.w	r3, r3, #1
   10210:	f8ad 3000 	strh.w	r3, [sp]
   10214:	4649      	mov	r1, r9
   10216:	4643      	mov	r3, r8
   10218:	4658      	mov	r0, fp
   1021a:	f00c fa34 	bl	1c686 <log_3>
		mask &= ~BIT(idx);
   1021e:	2301      	movs	r3, #1
   10220:	fa03 f109 	lsl.w	r1, r3, r9
   10224:	ea26 0601 	bic.w	r6, r6, r1
   10228:	e7c7      	b.n	101ba <z_impl_log_process+0xa2>
	return backend->cb->active;
   1022a:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   1022c:	795b      	ldrb	r3, [r3, #5]
   1022e:	b123      	cbz	r3, 1023a <z_impl_log_process+0x122>
	backend->api->put(backend, msg);
   10230:	6833      	ldr	r3, [r6, #0]
   10232:	4629      	mov	r1, r5
   10234:	4630      	mov	r0, r6
   10236:	681b      	ldr	r3, [r3, #0]
   10238:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   1023a:	f108 0801 	add.w	r8, r8, #1
   1023e:	3610      	adds	r6, #16
   10240:	45b8      	cmp	r8, r7
   10242:	dbf2      	blt.n	1022a <z_impl_log_process+0x112>
   10244:	e78a      	b.n	1015c <z_impl_log_process+0x44>
   10246:	bf00      	nop
   10248:	2001a414 	.word	0x2001a414
   1024c:	2001804c 	.word	0x2001804c
   10250:	20018040 	.word	0x20018040
   10254:	20018044 	.word	0x20018044
   10258:	2001a415 	.word	0x2001a415
   1025c:	00020e58 	.word	0x00020e58
   10260:	00020ee0 	.word	0x00020ee0
   10264:	00020e98 	.word	0x00020e98
   10268:	00020ee0 	.word	0x00020ee0
   1026c:	00020ef0 	.word	0x00020ef0
   10270:	00020b9c 	.word	0x00020b9c
   10274:	000237d8 	.word	0x000237d8
   10278:	00021f0d 	.word	0x00021f0d
   1027c:	00021f27 	.word	0x00021f27

00010280 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   10280:	4b27      	ldr	r3, [pc, #156]	; (10320 <msg_finalize+0xa0>)
{
   10282:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   10284:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   10286:	8141      	strh	r1, [r0, #10]
{
   10288:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   1028a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1028c:	4d25      	ldr	r5, [pc, #148]	; (10324 <msg_finalize+0xa4>)
   1028e:	60e0      	str	r0, [r4, #12]
   10290:	e8d5 3fef 	ldaex	r3, [r5]
   10294:	3301      	adds	r3, #1
   10296:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1029a:	2a00      	cmp	r2, #0
   1029c:	d1f8      	bne.n	10290 <msg_finalize+0x10>
	__asm__ volatile(
   1029e:	f04f 0320 	mov.w	r3, #32
   102a2:	f3ef 8611 	mrs	r6, BASEPRI
   102a6:	f383 8811 	msr	BASEPRI, r3
   102aa:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   102ae:	481e      	ldr	r0, [pc, #120]	; (10328 <msg_finalize+0xa8>)
   102b0:	4621      	mov	r1, r4
   102b2:	f00c f98a 	bl	1c5ca <log_list_add_tail>
	__asm__ volatile(
   102b6:	f386 8811 	msr	BASEPRI, r6
   102ba:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   102be:	4b1b      	ldr	r3, [pc, #108]	; (1032c <msg_finalize+0xac>)
   102c0:	781b      	ldrb	r3, [r3, #0]
   102c2:	b183      	cbz	r3, 102e6 <msg_finalize+0x66>
	__asm__ volatile(
   102c4:	f04f 0320 	mov.w	r3, #32
   102c8:	f3ef 8411 	mrs	r4, BASEPRI
   102cc:	f383 8811 	msr	BASEPRI, r3
   102d0:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   102d4:	2000      	movs	r0, #0
   102d6:	f7ff ff1f 	bl	10118 <z_impl_log_process>
	__asm__ volatile(
   102da:	f384 8811 	msr	BASEPRI, r4
   102de:	f3bf 8f6f 	isb	sy
}
   102e2:	b002      	add	sp, #8
   102e4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   102e6:	4a12      	ldr	r2, [pc, #72]	; (10330 <msg_finalize+0xb0>)
   102e8:	682b      	ldr	r3, [r5, #0]
   102ea:	6812      	ldr	r2, [r2, #0]
   102ec:	2a00      	cmp	r2, #0
   102ee:	d0f8      	beq.n	102e2 <msg_finalize+0x62>
   102f0:	2b01      	cmp	r3, #1
   102f2:	d10a      	bne.n	1030a <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   102f4:	2200      	movs	r2, #0
   102f6:	2300      	movs	r3, #0
   102f8:	480e      	ldr	r0, [pc, #56]	; (10334 <msg_finalize+0xb4>)
   102fa:	e9cd 2300 	strd	r2, r3, [sp]
   102fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   10302:	2300      	movs	r3, #0
   10304:	f00a fc3a 	bl	1ab7c <z_impl_k_timer_start>
   10308:	e7eb      	b.n	102e2 <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   1030a:	2b0a      	cmp	r3, #10
   1030c:	d1e9      	bne.n	102e2 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   1030e:	4809      	ldr	r0, [pc, #36]	; (10334 <msg_finalize+0xb4>)
   10310:	f00f ffb5 	bl	2027e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   10314:	4808      	ldr	r0, [pc, #32]	; (10338 <msg_finalize+0xb8>)
}
   10316:	b002      	add	sp, #8
   10318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1031c:	f00a b8e2 	b.w	1a4e4 <z_impl_k_sem_give>
   10320:	20014504 	.word	0x20014504
   10324:	20018040 	.word	0x20018040
   10328:	2001804c 	.word	0x2001804c
   1032c:	2001a415 	.word	0x2001a415
   10330:	20018070 	.word	0x20018070
   10334:	20014ac8 	.word	0x20014ac8
   10338:	200148e8 	.word	0x200148e8

0001033c <log_process_thread_func>:
{
   1033c:	b510      	push	{r4, lr}
	log_init();
   1033e:	f7ff fe83 	bl	10048 <log_init>
	return z_impl_k_current_get();
   10342:	f00a f8c9 	bl	1a4d8 <z_impl_k_current_get>
	proc_tid = process_tid;
   10346:	4b0c      	ldr	r3, [pc, #48]	; (10378 <log_process_thread_func+0x3c>)
   10348:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1034a:	b130      	cbz	r0, 1035a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   1034c:	4b0b      	ldr	r3, [pc, #44]	; (1037c <log_process_thread_func+0x40>)
	    process_tid &&
   1034e:	681b      	ldr	r3, [r3, #0]
   10350:	2b09      	cmp	r3, #9
   10352:	dd02      	ble.n	1035a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   10354:	480a      	ldr	r0, [pc, #40]	; (10380 <log_process_thread_func+0x44>)
   10356:	f00a f8c5 	bl	1a4e4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   1035a:	4c09      	ldr	r4, [pc, #36]	; (10380 <log_process_thread_func+0x44>)
   1035c:	2000      	movs	r0, #0
   1035e:	f7ff fedb 	bl	10118 <z_impl_log_process>
		if (log_process(false) == false) {
   10362:	2800      	cmp	r0, #0
   10364:	d1fa      	bne.n	1035c <log_process_thread_func+0x20>
   10366:	f04f 32ff 	mov.w	r2, #4294967295
   1036a:	f04f 33ff 	mov.w	r3, #4294967295
   1036e:	4620      	mov	r0, r4
   10370:	f00a f8de 	bl	1a530 <z_impl_k_sem_take>
   10374:	e7f2      	b.n	1035c <log_process_thread_func+0x20>
   10376:	bf00      	nop
   10378:	20018070 	.word	0x20018070
   1037c:	20018040 	.word	0x20018040
   10380:	200148e8 	.word	0x200148e8

00010384 <z_impl_log_panic>:
{
   10384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   10386:	4f0e      	ldr	r7, [pc, #56]	; (103c0 <z_impl_log_panic+0x3c>)
   10388:	783d      	ldrb	r5, [r7, #0]
   1038a:	b975      	cbnz	r5, 103aa <z_impl_log_panic+0x26>
	log_init();
   1038c:	f7ff fe5c 	bl	10048 <log_init>
	return __log_backends_end - __log_backends_start;
   10390:	4c0c      	ldr	r4, [pc, #48]	; (103c4 <z_impl_log_panic+0x40>)
   10392:	4e0d      	ldr	r6, [pc, #52]	; (103c8 <z_impl_log_panic+0x44>)
   10394:	1b36      	subs	r6, r6, r4
   10396:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   10398:	42b5      	cmp	r5, r6
   1039a:	db07      	blt.n	103ac <z_impl_log_panic+0x28>
   1039c:	2000      	movs	r0, #0
   1039e:	f7ff febb 	bl	10118 <z_impl_log_process>
		while (log_process(false) == true) {
   103a2:	2800      	cmp	r0, #0
   103a4:	d1fa      	bne.n	1039c <z_impl_log_panic+0x18>
	panic_mode = true;
   103a6:	2301      	movs	r3, #1
   103a8:	703b      	strb	r3, [r7, #0]
}
   103aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   103ac:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   103ae:	795b      	ldrb	r3, [r3, #5]
   103b0:	b11b      	cbz	r3, 103ba <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   103b2:	6823      	ldr	r3, [r4, #0]
   103b4:	4620      	mov	r0, r4
   103b6:	691b      	ldr	r3, [r3, #16]
   103b8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   103ba:	3501      	adds	r5, #1
   103bc:	3410      	adds	r4, #16
   103be:	e7eb      	b.n	10398 <z_impl_log_panic+0x14>
   103c0:	2001a415 	.word	0x2001a415
   103c4:	00020ee0 	.word	0x00020ee0
   103c8:	00020ef0 	.word	0x00020ef0

000103cc <log_free>:
{
   103cc:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   103ce:	3804      	subs	r0, #4
   103d0:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   103d2:	e8d0 3fef 	ldaex	r3, [r0]
   103d6:	1e5a      	subs	r2, r3, #1
   103d8:	e8c0 2fe1 	stlex	r1, r2, [r0]
   103dc:	2900      	cmp	r1, #0
   103de:	d1f8      	bne.n	103d2 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   103e0:	2b01      	cmp	r3, #1
   103e2:	d103      	bne.n	103ec <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   103e4:	4803      	ldr	r0, [pc, #12]	; (103f4 <log_free+0x28>)
   103e6:	a901      	add	r1, sp, #4
   103e8:	f009 fb0c 	bl	19a04 <k_mem_slab_free>
}
   103ec:	b003      	add	sp, #12
   103ee:	f85d fb04 	ldr.w	pc, [sp], #4
   103f2:	bf00      	nop
   103f4:	20018054 	.word	0x20018054

000103f8 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   103f8:	2320      	movs	r3, #32
   103fa:	4902      	ldr	r1, [pc, #8]	; (10404 <log_msg_pool_init+0xc>)
   103fc:	461a      	mov	r2, r3
   103fe:	4802      	ldr	r0, [pc, #8]	; (10408 <log_msg_pool_init+0x10>)
   10400:	f00f bca1 	b.w	1fd46 <k_mem_slab_init>
   10404:	2001ff68 	.word	0x2001ff68
   10408:	20018074 	.word	0x20018074

0001040c <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   1040c:	2300      	movs	r3, #0
{
   1040e:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   10410:	4d09      	ldr	r5, [pc, #36]	; (10438 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   10412:	9301      	str	r3, [sp, #4]
   10414:	2001      	movs	r0, #1
   10416:	f7ff fe7f 	bl	10118 <z_impl_log_process>
   1041a:	4604      	mov	r4, r0
			log_dropped();
   1041c:	f7ff fde0 	bl	ffe0 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   10420:	2200      	movs	r2, #0
   10422:	2300      	movs	r3, #0
   10424:	4628      	mov	r0, r5
   10426:	a901      	add	r1, sp, #4
   10428:	f009 faba 	bl	199a0 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   1042c:	b108      	cbz	r0, 10432 <log_msg_no_space_handle+0x26>
   1042e:	2c00      	cmp	r4, #0
   10430:	d1f0      	bne.n	10414 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   10432:	9801      	ldr	r0, [sp, #4]
   10434:	b003      	add	sp, #12
   10436:	bd30      	pop	{r4, r5, pc}
   10438:	20018074 	.word	0x20018074

0001043c <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   1043c:	2300      	movs	r3, #0
{
   1043e:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   10440:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   10442:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   10444:	4806      	ldr	r0, [pc, #24]	; (10460 <log_msg_chunk_alloc+0x24>)
   10446:	2300      	movs	r3, #0
   10448:	a901      	add	r1, sp, #4
   1044a:	f009 faa9 	bl	199a0 <k_mem_slab_alloc>
	if (err != 0) {
   1044e:	b110      	cbz	r0, 10456 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   10450:	f7ff ffdc 	bl	1040c <log_msg_no_space_handle>
   10454:	9001      	str	r0, [sp, #4]
}
   10456:	9801      	ldr	r0, [sp, #4]
   10458:	b003      	add	sp, #12
   1045a:	f85d fb04 	ldr.w	pc, [sp], #4
   1045e:	bf00      	nop
   10460:	20018074 	.word	0x20018074

00010464 <msg_free>:
{
   10464:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10466:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   10468:	7a45      	ldrb	r5, [r0, #9]
{
   1046a:	b085      	sub	sp, #20
   1046c:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   1046e:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   10470:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   10474:	d41c      	bmi.n	104b0 <msg_free+0x4c>
   10476:	b1dd      	cbz	r5, 104b0 <msg_free+0x4c>
		uint32_t smask = 0;
   10478:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   1047a:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   1047c:	4631      	mov	r1, r6
   1047e:	9801      	ldr	r0, [sp, #4]
   10480:	f00c f98d 	bl	1c79e <log_msg_arg_get>
   10484:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   10486:	f7ff fe39 	bl	100fc <log_is_strdup>
   1048a:	b170      	cbz	r0, 104aa <msg_free+0x46>
				if (smask == 0) {
   1048c:	b934      	cbnz	r4, 1049c <msg_free+0x38>
					smask = z_log_get_s_mask(
   1048e:	9b01      	ldr	r3, [sp, #4]
   10490:	4629      	mov	r1, r5
   10492:	6918      	ldr	r0, [r3, #16]
   10494:	f7ff fd3e 	bl	ff14 <z_log_get_s_mask>
					if (smask == 0) {
   10498:	4604      	mov	r4, r0
   1049a:	b148      	cbz	r0, 104b0 <msg_free+0x4c>
				if (smask & BIT(i)) {
   1049c:	fa24 f306 	lsr.w	r3, r4, r6
   104a0:	07d9      	lsls	r1, r3, #31
   104a2:	d502      	bpl.n	104aa <msg_free+0x46>
					log_free(buf);
   104a4:	4638      	mov	r0, r7
   104a6:	f7ff ff91 	bl	103cc <log_free>
		for (i = 0; i < nargs; i++) {
   104aa:	3601      	adds	r6, #1
   104ac:	42ae      	cmp	r6, r5
   104ae:	d3e5      	bcc.n	1047c <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   104b0:	9b01      	ldr	r3, [sp, #4]
   104b2:	7a1a      	ldrb	r2, [r3, #8]
   104b4:	0792      	lsls	r2, r2, #30
   104b6:	d504      	bpl.n	104c2 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   104b8:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   104ba:	4c08      	ldr	r4, [pc, #32]	; (104dc <msg_free+0x78>)
   104bc:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   104be:	9b03      	ldr	r3, [sp, #12]
   104c0:	b92b      	cbnz	r3, 104ce <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   104c2:	4806      	ldr	r0, [pc, #24]	; (104dc <msg_free+0x78>)
   104c4:	a901      	add	r1, sp, #4
   104c6:	f009 fa9d 	bl	19a04 <k_mem_slab_free>
}
   104ca:	b005      	add	sp, #20
   104cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   104ce:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   104d0:	4620      	mov	r0, r4
   104d2:	a903      	add	r1, sp, #12
   104d4:	f009 fa96 	bl	19a04 <k_mem_slab_free>
		cont = next;
   104d8:	9503      	str	r5, [sp, #12]
   104da:	e7f0      	b.n	104be <msg_free+0x5a>
   104dc:	20018074 	.word	0x20018074

000104e0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   104e0:	b40e      	push	{r1, r2, r3}
   104e2:	b503      	push	{r0, r1, lr}
   104e4:	ab03      	add	r3, sp, #12
   104e6:	f853 2b04 	ldr.w	r2, [r3], #4
   104ea:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   104ec:	4804      	ldr	r0, [pc, #16]	; (10500 <print_formatted+0x20>)
	va_start(args, fmt);
   104ee:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   104f0:	f7fe fe2a 	bl	f148 <cbvprintf>
	va_end(args);

	return length;
}
   104f4:	b002      	add	sp, #8
   104f6:	f85d eb04 	ldr.w	lr, [sp], #4
   104fa:	b003      	add	sp, #12
   104fc:	4770      	bx	lr
   104fe:	bf00      	nop
   10500:	0001cba3 	.word	0x0001cba3

00010504 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   10504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   10508:	f011 0402 	ands.w	r4, r1, #2
{
   1050c:	b085      	sub	sp, #20
   1050e:	4606      	mov	r6, r0
   10510:	4690      	mov	r8, r2
   10512:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   10516:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1051a:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   1051e:	d007      	beq.n	10530 <prefix_print+0x2c>
	if (!format) {
   10520:	f011 0f44 	tst.w	r1, #68	; 0x44
   10524:	d137      	bne.n	10596 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   10526:	461a      	mov	r2, r3
   10528:	4932      	ldr	r1, [pc, #200]	; (105f4 <prefix_print+0xf0>)
   1052a:	f7ff ffd9 	bl	104e0 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   1052e:	4604      	mov	r4, r0
	if (color) {
   10530:	f1b9 0f00 	cmp.w	r9, #0
   10534:	d00a      	beq.n	1054c <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
   10536:	4b30      	ldr	r3, [pc, #192]	; (105f8 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   10538:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   1053a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   1053e:	4b2f      	ldr	r3, [pc, #188]	; (105fc <prefix_print+0xf8>)
   10540:	492f      	ldr	r1, [pc, #188]	; (10600 <prefix_print+0xfc>)
   10542:	2a00      	cmp	r2, #0
   10544:	bf08      	it	eq
   10546:	461a      	moveq	r2, r3
   10548:	f7ff ffca 	bl	104e0 <print_formatted>
	if (level_on) {
   1054c:	b13d      	cbz	r5, 1055e <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   1054e:	4b2d      	ldr	r3, [pc, #180]	; (10604 <prefix_print+0x100>)
   10550:	4630      	mov	r0, r6
   10552:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   10556:	492c      	ldr	r1, [pc, #176]	; (10608 <prefix_print+0x104>)
   10558:	f7ff ffc2 	bl	104e0 <print_formatted>
   1055c:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   1055e:	f1b8 0f00 	cmp.w	r8, #0
   10562:	d044      	beq.n	105ee <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   10564:	2301      	movs	r3, #1
   10566:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   1056a:	4b28      	ldr	r3, [pc, #160]	; (1060c <prefix_print+0x108>)
   1056c:	f017 0f10 	tst.w	r7, #16
   10570:	4f27      	ldr	r7, [pc, #156]	; (10610 <prefix_print+0x10c>)
   10572:	bf18      	it	ne
   10574:	461f      	movne	r7, r3
   10576:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   1057a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   1057e:	f7ff fd3b 	bl	fff8 <log_source_name_get>
   10582:	4639      	mov	r1, r7
   10584:	4602      	mov	r2, r0
   10586:	4630      	mov	r0, r6
   10588:	f7ff ffaa 	bl	104e0 <print_formatted>
   1058c:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   1058e:	4420      	add	r0, r4
   10590:	b005      	add	sp, #20
   10592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   10596:	4a1f      	ldr	r2, [pc, #124]	; (10614 <prefix_print+0x110>)
   10598:	6811      	ldr	r1, [r2, #0]
   1059a:	b331      	cbz	r1, 105ea <prefix_print+0xe6>
		timestamp /= timestamp_div;
   1059c:	4a1e      	ldr	r2, [pc, #120]	; (10618 <prefix_print+0x114>)
   1059e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   105a2:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   105a4:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   105a8:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
   105ac:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   105b0:	fbb4 f2fe 	udiv	r2, r4, lr
   105b4:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   105b8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   105bc:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   105c0:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   105c4:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   105c8:	fb01 441b 	mls	r4, r1, fp, r4
   105cc:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   105d0:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   105d4:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   105d8:	e9cd b101 	strd	fp, r1, [sp, #4]
   105dc:	fb0a e113 	mls	r1, sl, r3, lr
   105e0:	9100      	str	r1, [sp, #0]
   105e2:	490e      	ldr	r1, [pc, #56]	; (1061c <prefix_print+0x118>)
   105e4:	f7ff ff7c 	bl	104e0 <print_formatted>
   105e8:	e7a1      	b.n	1052e <prefix_print+0x2a>
		length = 0;
   105ea:	4608      	mov	r0, r1
   105ec:	e79f      	b.n	1052e <prefix_print+0x2a>
	total += print_formatted(log_output,
   105ee:	4f08      	ldr	r7, [pc, #32]	; (10610 <prefix_print+0x10c>)
   105f0:	e7c1      	b.n	10576 <prefix_print+0x72>
   105f2:	bf00      	nop
   105f4:	00021f78 	.word	0x00021f78
   105f8:	00020f48 	.word	0x00020f48
   105fc:	00021f6a 	.word	0x00021f6a
   10600:	00022bca 	.word	0x00022bca
   10604:	00020f5c 	.word	0x00020f5c
   10608:	00021f9d 	.word	0x00021f9d
   1060c:	00021f74 	.word	0x00021f74
   10610:	00021f6f 	.word	0x00021f6f
   10614:	20018090 	.word	0x20018090
   10618:	20018094 	.word	0x20018094
   1061c:	00021f81 	.word	0x00021f81

00010620 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   10620:	b538      	push	{r3, r4, r5, lr}
   10622:	460c      	mov	r4, r1
	if (color) {
   10624:	07e1      	lsls	r1, r4, #31
{
   10626:	4605      	mov	r5, r0
	if (color) {
   10628:	d503      	bpl.n	10632 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   1062a:	4a08      	ldr	r2, [pc, #32]	; (1064c <postfix_print+0x2c>)
   1062c:	4908      	ldr	r1, [pc, #32]	; (10650 <postfix_print+0x30>)
   1062e:	f7ff ff57 	bl	104e0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   10632:	06e2      	lsls	r2, r4, #27
   10634:	d408      	bmi.n	10648 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   10636:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   10638:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   1063a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   1063e:	bf4c      	ite	mi
   10640:	4904      	ldrmi	r1, [pc, #16]	; (10654 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   10642:	4905      	ldrpl	r1, [pc, #20]	; (10658 <postfix_print+0x38>)
   10644:	f7ff bf4c 	b.w	104e0 <print_formatted>
}
   10648:	bd38      	pop	{r3, r4, r5, pc}
   1064a:	bf00      	nop
   1064c:	00021f6a 	.word	0x00021f6a
   10650:	00022bca 	.word	0x00022bca
   10654:	00021edc 	.word	0x00021edc
   10658:	0002346b 	.word	0x0002346b

0001065c <hexdump_line_print>:
{
   1065c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10660:	461d      	mov	r5, r3
   10662:	9b08      	ldr	r3, [sp, #32]
   10664:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   10666:	06da      	lsls	r2, r3, #27
{
   10668:	4604      	mov	r4, r0
   1066a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1066c:	d405      	bmi.n	1067a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1066e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   10670:	bf4c      	ite	mi
   10672:	492b      	ldrmi	r1, [pc, #172]	; (10720 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   10674:	492b      	ldrpl	r1, [pc, #172]	; (10724 <hexdump_line_print+0xc8>)
   10676:	f7ff ff33 	bl	104e0 <print_formatted>
{
   1067a:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   1067e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 1072c <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   10682:	45a8      	cmp	r8, r5
   10684:	db2d      	blt.n	106e2 <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   10686:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   10688:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 10730 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   1068c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 10734 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   10690:	f8df a098 	ldr.w	sl, [pc, #152]	; 1072c <hexdump_line_print+0xd0>
		if (i < length) {
   10694:	42bd      	cmp	r5, r7
   10696:	d232      	bcs.n	106fe <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   10698:	4649      	mov	r1, r9
   1069a:	4620      	mov	r0, r4
   1069c:	5d72      	ldrb	r2, [r6, r5]
   1069e:	f7ff ff1f 	bl	104e0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   106a2:	3501      	adds	r5, #1
   106a4:	2d10      	cmp	r5, #16
   106a6:	d123      	bne.n	106f0 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   106a8:	4620      	mov	r0, r4
   106aa:	491f      	ldr	r1, [pc, #124]	; (10728 <hexdump_line_print+0xcc>)
   106ac:	f7ff ff18 	bl	104e0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   106b0:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   106b2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1072c <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   106b6:	f8df 9080 	ldr.w	r9, [pc, #128]	; 10738 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
   106ba:	f8df a080 	ldr.w	sl, [pc, #128]	; 1073c <hexdump_line_print+0xe0>
		if (i < length) {
   106be:	42af      	cmp	r7, r5
   106c0:	d929      	bls.n	10716 <hexdump_line_print+0xba>
			char c = (char)data[i];
   106c2:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   106c4:	4651      	mov	r1, sl
   106c6:	f812 3009 	ldrb.w	r3, [r2, r9]
   106ca:	4620      	mov	r0, r4
   106cc:	f013 0f97 	tst.w	r3, #151	; 0x97
   106d0:	bf08      	it	eq
   106d2:	222e      	moveq	r2, #46	; 0x2e
   106d4:	f7ff ff04 	bl	104e0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   106d8:	3501      	adds	r5, #1
   106da:	2d10      	cmp	r5, #16
   106dc:	d114      	bne.n	10708 <hexdump_line_print+0xac>
}
   106de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   106e2:	4649      	mov	r1, r9
   106e4:	4620      	mov	r0, r4
   106e6:	f7ff fefb 	bl	104e0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   106ea:	f108 0801 	add.w	r8, r8, #1
   106ee:	e7c8      	b.n	10682 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   106f0:	076a      	lsls	r2, r5, #29
   106f2:	d1cf      	bne.n	10694 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   106f4:	4651      	mov	r1, sl
   106f6:	4620      	mov	r0, r4
   106f8:	f7ff fef2 	bl	104e0 <print_formatted>
   106fc:	e7ca      	b.n	10694 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   106fe:	4641      	mov	r1, r8
   10700:	4620      	mov	r0, r4
   10702:	f7ff feed 	bl	104e0 <print_formatted>
   10706:	e7cc      	b.n	106a2 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   10708:	076b      	lsls	r3, r5, #29
   1070a:	d1d8      	bne.n	106be <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   1070c:	4641      	mov	r1, r8
   1070e:	4620      	mov	r0, r4
   10710:	f7ff fee6 	bl	104e0 <print_formatted>
   10714:	e7d3      	b.n	106be <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   10716:	4641      	mov	r1, r8
   10718:	4620      	mov	r0, r4
   1071a:	f7ff fee1 	bl	104e0 <print_formatted>
   1071e:	e7db      	b.n	106d8 <hexdump_line_print+0x7c>
   10720:	00021edc 	.word	0x00021edc
   10724:	0002346b 	.word	0x0002346b
   10728:	00021fad 	.word	0x00021fad
   1072c:	00021fab 	.word	0x00021fab
   10730:	00021fa9 	.word	0x00021fa9
   10734:	00021fa3 	.word	0x00021fa3
   10738:	00023660 	.word	0x00023660
   1073c:	00021faf 	.word	0x00021faf

00010740 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   10740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   10744:	7a8b      	ldrb	r3, [r1, #10]
   10746:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   10748:	f013 0807 	ands.w	r8, r3, #7
{
   1074c:	4605      	mov	r5, r0
   1074e:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10750:	7a0a      	ldrb	r2, [r1, #8]
   10752:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   10754:	d021      	beq.n	1079a <log_output_msg_process+0x5a>
   10756:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   10758:	8949      	ldrh	r1, [r1, #10]
   1075a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1075e:	f3c1 1189 	ubfx	r1, r1, #6, #10
   10762:	e9cd 8300 	strd	r8, r3, [sp]
   10766:	9102      	str	r1, [sp, #8]
   10768:	68f3      	ldr	r3, [r6, #12]
   1076a:	4639      	mov	r1, r7
   1076c:	f002 0201 	and.w	r2, r2, #1
   10770:	f7ff fec8 	bl	10504 <prefix_print>
   10774:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10776:	7a34      	ldrb	r4, [r6, #8]
   10778:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   1077a:	f014 0401 	ands.w	r4, r4, #1
   1077e:	d00e      	beq.n	1079e <log_output_msg_process+0x5e>
		std_print(msg, log_output);
   10780:	4629      	mov	r1, r5
   10782:	4630      	mov	r0, r6
   10784:	f00c f8a3 	bl	1c8ce <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   10788:	f1b8 0f00 	cmp.w	r8, #0
   1078c:	d02b      	beq.n	107e6 <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
   1078e:	4642      	mov	r2, r8
   10790:	4639      	mov	r1, r7
   10792:	4628      	mov	r0, r5
   10794:	f7ff ff44 	bl	10620 <postfix_print>
   10798:	e025      	b.n	107e6 <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   1079a:	46c1      	mov	r9, r8
   1079c:	e7eb      	b.n	10776 <log_output_msg_process+0x36>
	} else if (raw_string) {
   1079e:	f1b8 0f00 	cmp.w	r8, #0
   107a2:	d126      	bne.n	107f2 <log_output_msg_process+0xb2>
	size_t offset = 0;
   107a4:	4627      	mov	r7, r4
		length = log_output->size;
   107a6:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   107a8:	aa06      	add	r2, sp, #24
		length = log_output->size;
   107aa:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   107ac:	4630      	mov	r0, r6
   107ae:	463b      	mov	r3, r7
   107b0:	68a9      	ldr	r1, [r5, #8]
   107b2:	f00c f878 	bl	1c8a6 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   107b6:	9a06      	ldr	r2, [sp, #24]
   107b8:	686b      	ldr	r3, [r5, #4]
   107ba:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   107bc:	b13a      	cbz	r2, 107ce <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
   107be:	68ab      	ldr	r3, [r5, #8]
   107c0:	4413      	add	r3, r2
   107c2:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   107c6:	f1a4 030a 	sub.w	r3, r4, #10
   107ca:	425c      	negs	r4, r3
   107cc:	415c      	adcs	r4, r3
		log_output_flush(log_output);
   107ce:	4628      	mov	r0, r5
   107d0:	f00c f9da 	bl	1cb88 <log_output_flush>
		offset += length;
   107d4:	9b06      	ldr	r3, [sp, #24]
   107d6:	441f      	add	r7, r3
	} while (length > 0);
   107d8:	2b00      	cmp	r3, #0
   107da:	d1e4      	bne.n	107a6 <log_output_msg_process+0x66>
	if (eol) {
   107dc:	b11c      	cbz	r4, 107e6 <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
   107de:	4628      	mov	r0, r5
   107e0:	4913      	ldr	r1, [pc, #76]	; (10830 <log_output_msg_process+0xf0>)
   107e2:	f7ff fe7d 	bl	104e0 <print_formatted>
	}

	log_output_flush(log_output);
   107e6:	4628      	mov	r0, r5
   107e8:	f00c f9ce 	bl	1cb88 <log_output_flush>
}
   107ec:	b00a      	add	sp, #40	; 0x28
   107ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   107f2:	4630      	mov	r0, r6
   107f4:	f00c f801 	bl	1c7fa <log_msg_str_get>
   107f8:	490e      	ldr	r1, [pc, #56]	; (10834 <log_output_msg_process+0xf4>)
   107fa:	4602      	mov	r2, r0
   107fc:	4628      	mov	r0, r5
   107fe:	f7ff fe6f 	bl	104e0 <print_formatted>
		length = sizeof(buf);
   10802:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   10806:	aa05      	add	r2, sp, #20
   10808:	4623      	mov	r3, r4
   1080a:	4630      	mov	r0, r6
   1080c:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   1080e:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   10812:	f00c f848 	bl	1c8a6 <log_msg_hexdump_data_get>
		if (length) {
   10816:	9a05      	ldr	r2, [sp, #20]
   10818:	2a00      	cmp	r2, #0
   1081a:	d0b8      	beq.n	1078e <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
   1081c:	464b      	mov	r3, r9
   1081e:	4628      	mov	r0, r5
   10820:	9700      	str	r7, [sp, #0]
   10822:	a906      	add	r1, sp, #24
   10824:	f7ff ff1a 	bl	1065c <hexdump_line_print>
			offset += length;
   10828:	9b05      	ldr	r3, [sp, #20]
   1082a:	441c      	add	r4, r3
		length = sizeof(buf);
   1082c:	e7eb      	b.n	10806 <log_output_msg_process+0xc6>
   1082e:	bf00      	nop
   10830:	00021fb2 	.word	0x00021fb2
   10834:	00022bca 	.word	0x00022bca

00010838 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   10838:	f242 730f 	movw	r3, #9999	; 0x270f
{
   1083c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1083e:	428b      	cmp	r3, r1
   10840:	bf28      	it	cs
   10842:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
   10844:	6805      	ldr	r5, [r0, #0]
{
   10846:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   10848:	2105      	movs	r1, #5
   1084a:	4668      	mov	r0, sp
   1084c:	4a0d      	ldr	r2, [pc, #52]	; (10884 <log_output_dropped_process+0x4c>)
   1084e:	f00b fad6 	bl	1bdfe <snprintk>
   10852:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   10854:	6863      	ldr	r3, [r4, #4]
   10856:	4628      	mov	r0, r5
   10858:	220b      	movs	r2, #11
   1085a:	685b      	ldr	r3, [r3, #4]
   1085c:	490a      	ldr	r1, [pc, #40]	; (10888 <log_output_dropped_process+0x50>)
   1085e:	f00c f829 	bl	1c8b4 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
   10862:	6863      	ldr	r3, [r4, #4]
   10864:	4632      	mov	r2, r6
   10866:	4669      	mov	r1, sp
   10868:	4628      	mov	r0, r5
   1086a:	685b      	ldr	r3, [r3, #4]
   1086c:	f00c f822 	bl	1c8b4 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   10870:	6863      	ldr	r3, [r4, #4]
   10872:	221b      	movs	r2, #27
   10874:	4628      	mov	r0, r5
   10876:	685b      	ldr	r3, [r3, #4]
   10878:	4904      	ldr	r1, [pc, #16]	; (1088c <log_output_dropped_process+0x54>)
   1087a:	f00c f81b 	bl	1c8b4 <buffer_write>
		     log_output->control_block->ctx);
}
   1087e:	b002      	add	sp, #8
   10880:	bd70      	pop	{r4, r5, r6, pc}
   10882:	bf00      	nop
   10884:	00021c5e 	.word	0x00021c5e
   10888:	00021ff0 	.word	0x00021ff0
   1088c:	00021fd4 	.word	0x00021fd4

00010890 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   10890:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   10892:	2100      	movs	r1, #0
	timestamp_div = 1U;
   10894:	4a07      	ldr	r2, [pc, #28]	; (108b4 <log_output_timestamp_freq_set+0x24>)
{
   10896:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   10898:	4c07      	ldr	r4, [pc, #28]	; (108b8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   1089a:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   1089c:	42a0      	cmp	r0, r4
   1089e:	d804      	bhi.n	108aa <log_output_timestamp_freq_set+0x1a>
   108a0:	b101      	cbz	r1, 108a4 <log_output_timestamp_freq_set+0x14>
   108a2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   108a4:	4b05      	ldr	r3, [pc, #20]	; (108bc <log_output_timestamp_freq_set+0x2c>)
   108a6:	6018      	str	r0, [r3, #0]
}
   108a8:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   108aa:	2101      	movs	r1, #1
		frequency /= 2U;
   108ac:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   108ae:	005b      	lsls	r3, r3, #1
   108b0:	e7f4      	b.n	1089c <log_output_timestamp_freq_set+0xc>
   108b2:	bf00      	nop
   108b4:	20018094 	.word	0x20018094
   108b8:	000f4240 	.word	0x000f4240
   108bc:	20018090 	.word	0x20018090

000108c0 <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   108c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108c2:	460d      	mov	r5, r1
   108c4:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
   108c6:	4f06      	ldr	r7, [pc, #24]	; (108e0 <char_out+0x20>)
   108c8:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
   108ca:	42b4      	cmp	r4, r6
   108cc:	d101      	bne.n	108d2 <char_out+0x12>
	}

	return length;
}
   108ce:	4628      	mov	r0, r5
   108d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
   108d2:	6838      	ldr	r0, [r7, #0]
   108d4:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   108d8:	6883      	ldr	r3, [r0, #8]
   108da:	685b      	ldr	r3, [r3, #4]
   108dc:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   108de:	e7f4      	b.n	108ca <char_out+0xa>
   108e0:	200180ac 	.word	0x200180ac

000108e4 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   108e4:	4801      	ldr	r0, [pc, #4]	; (108ec <panic+0x8>)
   108e6:	f00c b94f 	b.w	1cb88 <log_output_flush>
   108ea:	bf00      	nop
   108ec:	00020f88 	.word	0x00020f88

000108f0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
   108f0:	4801      	ldr	r0, [pc, #4]	; (108f8 <dropped+0x8>)
   108f2:	f7ff bfa1 	b.w	10838 <log_output_dropped_process>
   108f6:	bf00      	nop
   108f8:	00020f88 	.word	0x00020f88

000108fc <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
   108fc:	b508      	push	{r3, lr}
   108fe:	4803      	ldr	r0, [pc, #12]	; (1090c <log_backend_uart_init+0x10>)
   10900:	f008 feb4 	bl	1966c <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   10904:	4b02      	ldr	r3, [pc, #8]	; (10910 <log_backend_uart_init+0x14>)
   10906:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
   10908:	bd08      	pop	{r3, pc}
   1090a:	bf00      	nop
   1090c:	00021ffc 	.word	0x00021ffc
   10910:	200180ac 	.word	0x200180ac

00010914 <put>:
{
   10914:	b510      	push	{r4, lr}
   10916:	460c      	mov	r4, r1
	log_msg_get(msg);
   10918:	4608      	mov	r0, r1
   1091a:	f00b ff34 	bl	1c786 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
   1091e:	4621      	mov	r1, r4
   10920:	4804      	ldr	r0, [pc, #16]	; (10934 <put+0x20>)
   10922:	220f      	movs	r2, #15
   10924:	f7ff ff0c 	bl	10740 <log_output_msg_process>
	log_msg_put(msg);
   10928:	4620      	mov	r0, r4
}
   1092a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1092e:	f00b bf55 	b.w	1c7dc <log_msg_put>
   10932:	bf00      	nop
   10934:	00020f88 	.word	0x00020f88

00010938 <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   10938:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1093a:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1093c:	4c0f      	ldr	r4, [pc, #60]	; (1097c <z_impl_zsock_socket+0x44>)
   1093e:	4e10      	ldr	r6, [pc, #64]	; (10980 <z_impl_zsock_socket+0x48>)
   10940:	42b4      	cmp	r4, r6
   10942:	d307      	bcc.n	10954 <z_impl_zsock_socket+0x1c>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   10944:	f00c fae3 	bl	1cf0e <__errno>
   10948:	236a      	movs	r3, #106	; 0x6a
   1094a:	6003      	str	r3, [r0, #0]
	return -1;
}
   1094c:	f04f 30ff 	mov.w	r0, #4294967295
   10950:	b002      	add	sp, #8
   10952:	bd70      	pop	{r4, r5, r6, pc}
		if (sock_family->family != family &&
   10954:	6823      	ldr	r3, [r4, #0]
   10956:	42ab      	cmp	r3, r5
   10958:	d000      	beq.n	1095c <z_impl_zsock_socket+0x24>
   1095a:	b96b      	cbnz	r3, 10978 <z_impl_zsock_socket+0x40>
		if (!sock_family->is_supported(family, type, proto)) {
   1095c:	4628      	mov	r0, r5
   1095e:	6863      	ldr	r3, [r4, #4]
   10960:	e9cd 1200 	strd	r1, r2, [sp]
   10964:	4798      	blx	r3
   10966:	e9dd 1200 	ldrd	r1, r2, [sp]
   1096a:	b128      	cbz	r0, 10978 <z_impl_zsock_socket+0x40>
		return sock_family->handler(family, type, proto);
   1096c:	4628      	mov	r0, r5
   1096e:	68a3      	ldr	r3, [r4, #8]
}
   10970:	b002      	add	sp, #8
   10972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return sock_family->handler(family, type, proto);
   10976:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   10978:	340c      	adds	r4, #12
   1097a:	e7e1      	b.n	10940 <z_impl_zsock_socket+0x8>
   1097c:	00020e4c 	.word	0x00020e4c
   10980:	00020e58 	.word	0x00020e58

00010984 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   10984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   10988:	1e14      	subs	r4, r2, #0
{
   1098a:	b09b      	sub	sp, #108	; 0x6c
   1098c:	4606      	mov	r6, r0
   1098e:	9103      	str	r1, [sp, #12]
	if (poll_timeout < 0) {
   10990:	db30      	blt.n	109f4 <z_impl_zsock_poll+0x70>
   10992:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   10996:	f240 30e7 	movw	r0, #999	; 0x3e7
   1099a:	2100      	movs	r1, #0
   1099c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   109a0:	2300      	movs	r3, #0
   109a2:	fbc5 0104 	smlal	r0, r1, r5, r4
   109a6:	f7fc f941 	bl	cc2c <__aeabi_uldivmod>
   109aa:	4682      	mov	sl, r0
   109ac:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   109ae:	2500      	movs	r5, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   109b0:	4650      	mov	r0, sl
   109b2:	4659      	mov	r1, fp
   109b4:	f00f fc2e 	bl	20214 <z_timeout_end_calc>

	pev = poll_events;
   109b8:	ab0b      	add	r3, sp, #44	; 0x2c
   109ba:	9309      	str	r3, [sp, #36]	; 0x24
	const struct fd_op_vtable *offl_vtable = NULL;
   109bc:	462f      	mov	r7, r5
	for (pfd = fds, i = nfds; i--; pfd++) {
   109be:	4633      	mov	r3, r6
	bool offload = false;
   109c0:	46a8      	mov	r8, r5
	end = z_timeout_end_calc(timeout);
   109c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
	for (pfd = fds, i = nfds; i--; pfd++) {
   109c6:	f8dd 900c 	ldr.w	r9, [sp, #12]
   109ca:	f1b9 0f00 	cmp.w	r9, #0
   109ce:	d118      	bne.n	10a02 <z_impl_zsock_poll+0x7e>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   109d0:	f1b8 0f00 	cmp.w	r8, #0
   109d4:	d049      	beq.n	10a6a <z_impl_zsock_poll+0xe6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   109d6:	9b03      	ldr	r3, [sp, #12]
   109d8:	9401      	str	r4, [sp, #4]
   109da:	9300      	str	r3, [sp, #0]
   109dc:	f44f 7282 	mov.w	r2, #260	; 0x104
   109e0:	4633      	mov	r3, r6
   109e2:	4629      	mov	r1, r5
   109e4:	4638      	mov	r0, r7
   109e6:	f00c f92b 	bl	1cc40 <z_fdtable_call_ioctl>
   109ea:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   109ec:	4620      	mov	r0, r4
   109ee:	b01b      	add	sp, #108	; 0x6c
   109f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   109f4:	f04f 3aff 	mov.w	sl, #4294967295
   109f8:	f04f 3bff 	mov.w	fp, #4294967295
		poll_timeout = SYS_FOREVER_MS;
   109fc:	f04f 34ff 	mov.w	r4, #4294967295
   10a00:	e7d5      	b.n	109ae <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
   10a02:	6818      	ldr	r0, [r3, #0]
   10a04:	2800      	cmp	r0, #0
   10a06:	db2c      	blt.n	10a62 <z_impl_zsock_poll+0xde>
	ctx = z_get_fd_obj_and_vtable(sock,
   10a08:	a90a      	add	r1, sp, #40	; 0x28
   10a0a:	9306      	str	r3, [sp, #24]
   10a0c:	f7fe f92e 	bl	ec6c <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   10a10:	9b06      	ldr	r3, [sp, #24]
   10a12:	4601      	mov	r1, r0
   10a14:	b328      	cbz	r0, 10a62 <z_impl_zsock_poll+0xde>
		result = z_fdtable_call_ioctl(vtable, ctx,
   10a16:	aa1a      	add	r2, sp, #104	; 0x68
   10a18:	9201      	str	r2, [sp, #4]
   10a1a:	aa09      	add	r2, sp, #36	; 0x24
   10a1c:	9200      	str	r2, [sp, #0]
   10a1e:	9006      	str	r0, [sp, #24]
   10a20:	f44f 7281 	mov.w	r2, #258	; 0x102
   10a24:	980a      	ldr	r0, [sp, #40]	; 0x28
   10a26:	9307      	str	r3, [sp, #28]
   10a28:	f00c f90a 	bl	1cc40 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   10a2c:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   10a30:	4602      	mov	r2, r0
		if (result == -EALREADY) {
   10a32:	9b07      	ldr	r3, [sp, #28]
   10a34:	d011      	beq.n	10a5a <z_impl_zsock_poll+0xd6>
		} else if (result == -EXDEV) {
   10a36:	f110 0f12 	cmn.w	r0, #18
   10a3a:	9906      	ldr	r1, [sp, #24]
   10a3c:	d105      	bne.n	10a4a <z_impl_zsock_poll+0xc6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   10a3e:	b90f      	cbnz	r7, 10a44 <z_impl_zsock_poll+0xc0>
				offl_vtable = vtable;
   10a40:	460d      	mov	r5, r1
   10a42:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			offload = true;
   10a44:	f04f 0801 	mov.w	r8, #1
   10a48:	e00b      	b.n	10a62 <z_impl_zsock_poll+0xde>
		} else if (result != 0) {
   10a4a:	b150      	cbz	r0, 10a62 <z_impl_zsock_poll+0xde>
   10a4c:	9203      	str	r2, [sp, #12]
				errno = -result;
   10a4e:	f00c fa5e 	bl	1cf0e <__errno>
   10a52:	9a03      	ldr	r2, [sp, #12]
   10a54:	4252      	negs	r2, r2
   10a56:	6002      	str	r2, [r0, #0]
				return -1;
   10a58:	e03e      	b.n	10ad8 <z_impl_zsock_poll+0x154>
			timeout = K_NO_WAIT;
   10a5a:	f04f 0a00 	mov.w	sl, #0
   10a5e:	f04f 0b00 	mov.w	fp, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
   10a62:	3308      	adds	r3, #8
   10a64:	f109 39ff 	add.w	r9, r9, #4294967295
   10a68:	e7af      	b.n	109ca <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   10a6a:	ea5a 030b 	orrs.w	r3, sl, fp
   10a6e:	d016      	beq.n	10a9e <z_impl_zsock_poll+0x11a>
   10a70:	f1bb 3fff 	cmp.w	fp, #4294967295
   10a74:	bf08      	it	eq
   10a76:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   10a7a:	d010      	beq.n	10a9e <z_impl_zsock_poll+0x11a>
		int64_t remaining = end - z_tick_get();
   10a7c:	f00a f83e 	bl	1aafc <z_tick_get>
   10a80:	9b04      	ldr	r3, [sp, #16]
   10a82:	ebb3 0a00 	subs.w	sl, r3, r0
   10a86:	9b05      	ldr	r3, [sp, #20]
   10a88:	eb63 0b01 	sbc.w	fp, r3, r1
   10a8c:	f1ba 0f00 	cmp.w	sl, #0
   10a90:	f17b 0300 	sbcs.w	r3, fp, #0
   10a94:	bfbc      	itt	lt
   10a96:	f04f 0a00 	movlt.w	sl, #0
   10a9a:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
   10a9e:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   10aa2:	9909      	ldr	r1, [sp, #36]	; 0x24
   10aa4:	ac0b      	add	r4, sp, #44	; 0x2c
   10aa6:	4b34      	ldr	r3, [pc, #208]	; (10b78 <z_impl_zsock_poll+0x1f4>)
   10aa8:	1b09      	subs	r1, r1, r4
   10aaa:	1089      	asrs	r1, r1, #2
   10aac:	4359      	muls	r1, r3
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   10aae:	465b      	mov	r3, fp
   10ab0:	4652      	mov	r2, sl
   10ab2:	4620      	mov	r0, r4
   10ab4:	f00a f8be 	bl	1ac34 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   10ab8:	f100 030b 	add.w	r3, r0, #11
   10abc:	2b0b      	cmp	r3, #11
   10abe:	4607      	mov	r7, r0
   10ac0:	d806      	bhi.n	10ad0 <z_impl_zsock_poll+0x14c>
   10ac2:	f640 0581 	movw	r5, #2177	; 0x881
   10ac6:	40dd      	lsrs	r5, r3
   10ac8:	43ed      	mvns	r5, r5
   10aca:	f015 0501 	ands.w	r5, r5, #1
   10ace:	d006      	beq.n	10ade <z_impl_zsock_poll+0x15a>
			errno = -ret;
   10ad0:	f00c fa1d 	bl	1cf0e <__errno>
   10ad4:	427f      	negs	r7, r7
   10ad6:	6007      	str	r7, [r0, #0]
			return -1;
   10ad8:	f04f 34ff 	mov.w	r4, #4294967295
   10adc:	e786      	b.n	109ec <z_impl_zsock_poll+0x68>
		pev = poll_events;
   10ade:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   10ae0:	46b0      	mov	r8, r6
		ret = 0;
   10ae2:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
   10ae4:	9f03      	ldr	r7, [sp, #12]
   10ae6:	b9ef      	cbnz	r7, 10b24 <z_impl_zsock_poll+0x1a0>
		if (retry) {
   10ae8:	2d00      	cmp	r5, #0
   10aea:	f43f af7f 	beq.w	109ec <z_impl_zsock_poll+0x68>
			if (ret > 0) {
   10aee:	2c00      	cmp	r4, #0
   10af0:	f73f af7c 	bgt.w	109ec <z_impl_zsock_poll+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10af4:	ea5a 030b 	orrs.w	r3, sl, fp
   10af8:	f43f af78 	beq.w	109ec <z_impl_zsock_poll+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10afc:	f1bb 3fff 	cmp.w	fp, #4294967295
   10b00:	bf08      	it	eq
   10b02:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   10b06:	d0cc      	beq.n	10aa2 <z_impl_zsock_poll+0x11e>
				int64_t remaining = end - z_tick_get();
   10b08:	f009 fff8 	bl	1aafc <z_tick_get>
   10b0c:	9b04      	ldr	r3, [sp, #16]
   10b0e:	ebb3 0a00 	subs.w	sl, r3, r0
   10b12:	9b05      	ldr	r3, [sp, #20]
   10b14:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   10b18:	f1ba 0f01 	cmp.w	sl, #1
   10b1c:	f17b 0300 	sbcs.w	r3, fp, #0
   10b20:	dabf      	bge.n	10aa2 <z_impl_zsock_poll+0x11e>
   10b22:	e763      	b.n	109ec <z_impl_zsock_poll+0x68>
			if (pfd->fd < 0) {
   10b24:	f8d8 0000 	ldr.w	r0, [r8]
			pfd->revents = 0;
   10b28:	f8a8 9006 	strh.w	r9, [r8, #6]
			if (pfd->fd < 0) {
   10b2c:	2800      	cmp	r0, #0
   10b2e:	db1c      	blt.n	10b6a <z_impl_zsock_poll+0x1e6>
	ctx = z_get_fd_obj_and_vtable(sock,
   10b30:	a90a      	add	r1, sp, #40	; 0x28
   10b32:	f7fe f89b 	bl	ec6c <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   10b36:	4601      	mov	r1, r0
   10b38:	b920      	cbnz	r0, 10b44 <z_impl_zsock_poll+0x1c0>
				pfd->revents = ZSOCK_POLLNVAL;
   10b3a:	2220      	movs	r2, #32
   10b3c:	f8a8 2006 	strh.w	r2, [r8, #6]
				ret++;
   10b40:	3401      	adds	r4, #1
   10b42:	e012      	b.n	10b6a <z_impl_zsock_poll+0x1e6>
			result = z_fdtable_call_ioctl(vtable, ctx,
   10b44:	ab09      	add	r3, sp, #36	; 0x24
   10b46:	f240 1203 	movw	r2, #259	; 0x103
   10b4a:	9300      	str	r3, [sp, #0]
   10b4c:	980a      	ldr	r0, [sp, #40]	; 0x28
   10b4e:	4643      	mov	r3, r8
   10b50:	f00c f876 	bl	1cc40 <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   10b54:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   10b58:	4602      	mov	r2, r0
			if (result == -EAGAIN) {
   10b5a:	d00a      	beq.n	10b72 <z_impl_zsock_poll+0x1ee>
			} else if (result != 0) {
   10b5c:	2800      	cmp	r0, #0
   10b5e:	f47f af75 	bne.w	10a4c <z_impl_zsock_poll+0xc8>
			if (pfd->revents != 0) {
   10b62:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   10b66:	2a00      	cmp	r2, #0
   10b68:	d1ea      	bne.n	10b40 <z_impl_zsock_poll+0x1bc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   10b6a:	f108 0808 	add.w	r8, r8, #8
   10b6e:	3f01      	subs	r7, #1
   10b70:	e7b9      	b.n	10ae6 <z_impl_zsock_poll+0x162>
				retry = true;
   10b72:	2501      	movs	r5, #1
   10b74:	e7f9      	b.n	10b6a <z_impl_zsock_poll+0x1e6>
   10b76:	bf00      	nop
   10b78:	cccccccd 	.word	0xcccccccd

00010b7c <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   10b7c:	4b01      	ldr	r3, [pc, #4]	; (10b84 <socket_offload_dns_register+0x8>)
   10b7e:	6018      	str	r0, [r3, #0]
}
   10b80:	4770      	bx	lr
   10b82:	bf00      	nop
   10b84:	200180b0 	.word	0x200180b0

00010b88 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   10b88:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
   10b8a:	4c03      	ldr	r4, [pc, #12]	; (10b98 <socket_offload_getaddrinfo+0x10>)
   10b8c:	6824      	ldr	r4, [r4, #0]
   10b8e:	6824      	ldr	r4, [r4, #0]
   10b90:	46a4      	mov	ip, r4
}
   10b92:	f85d 4b04 	ldr.w	r4, [sp], #4
	return dns_offload->getaddrinfo(node, service, hints, res);
   10b96:	4760      	bx	ip
   10b98:	200180b0 	.word	0x200180b0

00010b9c <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
   10b9c:	4b01      	ldr	r3, [pc, #4]	; (10ba4 <socket_offload_freeaddrinfo+0x8>)
   10b9e:	681b      	ldr	r3, [r3, #0]
   10ba0:	685b      	ldr	r3, [r3, #4]
   10ba2:	4718      	bx	r3
   10ba4:	200180b0 	.word	0x200180b0

00010ba8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   10ba8:	b508      	push	{r3, lr}
   10baa:	4806      	ldr	r0, [pc, #24]	; (10bc4 <uart_console_init+0x1c>)
   10bac:	f008 fd5e 	bl	1966c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   10bb0:	4b05      	ldr	r3, [pc, #20]	; (10bc8 <uart_console_init+0x20>)
   10bb2:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   10bb4:	4805      	ldr	r0, [pc, #20]	; (10bcc <uart_console_init+0x24>)
   10bb6:	f001 f8d9 	bl	11d6c <__stdout_hook_install>
	__printk_hook_install(console_out);
   10bba:	4804      	ldr	r0, [pc, #16]	; (10bcc <uart_console_init+0x24>)
   10bbc:	f7fe f8ce 	bl	ed5c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   10bc0:	2000      	movs	r0, #0
   10bc2:	bd08      	pop	{r3, pc}
   10bc4:	00021ffc 	.word	0x00021ffc
   10bc8:	200180b4 	.word	0x200180b4
   10bcc:	00010bd1 	.word	0x00010bd1

00010bd0 <console_out>:
	if ('\n' == c) {
   10bd0:	280a      	cmp	r0, #10
{
   10bd2:	b538      	push	{r3, r4, r5, lr}
   10bd4:	4604      	mov	r4, r0
   10bd6:	4d07      	ldr	r5, [pc, #28]	; (10bf4 <console_out+0x24>)
	if ('\n' == c) {
   10bd8:	d104      	bne.n	10be4 <console_out+0x14>
   10bda:	6828      	ldr	r0, [r5, #0]
   10bdc:	6883      	ldr	r3, [r0, #8]
   10bde:	210d      	movs	r1, #13
   10be0:	685b      	ldr	r3, [r3, #4]
   10be2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   10be4:	6828      	ldr	r0, [r5, #0]
   10be6:	6883      	ldr	r3, [r0, #8]
   10be8:	b2e1      	uxtb	r1, r4
   10bea:	685b      	ldr	r3, [r3, #4]
   10bec:	4798      	blx	r3
}
   10bee:	4620      	mov	r0, r4
   10bf0:	bd38      	pop	{r3, r4, r5, pc}
   10bf2:	bf00      	nop
   10bf4:	200180b4 	.word	0x200180b4

00010bf8 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   10bf8:	b570      	push	{r4, r5, r6, lr}
   10bfa:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
   10bfc:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
   10bfe:	480d      	ldr	r0, [pc, #52]	; (10c34 <onoff_stop+0x3c>)
{
   10c00:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
   10c02:	1a23      	subs	r3, r4, r0
   10c04:	109a      	asrs	r2, r3, #2
   10c06:	4b0c      	ldr	r3, [pc, #48]	; (10c38 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
   10c08:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   10c0a:	4353      	muls	r3, r2
   10c0c:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   10c0e:	435d      	muls	r5, r3
   10c10:	f105 0340 	add.w	r3, r5, #64	; 0x40
   10c14:	4418      	add	r0, r3
   10c16:	f00c f8a8 	bl	1cd6a <set_off_state>
	if (err < 0) {
   10c1a:	1e01      	subs	r1, r0, #0
   10c1c:	db04      	blt.n	10c28 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   10c1e:	4b07      	ldr	r3, [pc, #28]	; (10c3c <onoff_stop+0x44>)
   10c20:	442b      	add	r3, r5
   10c22:	685b      	ldr	r3, [r3, #4]
   10c24:	4798      	blx	r3
	return 0;
   10c26:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   10c28:	4620      	mov	r0, r4
   10c2a:	4633      	mov	r3, r6
}
   10c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   10c30:	4718      	bx	r3
   10c32:	bf00      	nop
   10c34:	200180c8 	.word	0x200180c8
   10c38:	b6db6db7 	.word	0xb6db6db7
   10c3c:	00020fac 	.word	0x00020fac

00010c40 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   10c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   10c44:	4c0f      	ldr	r4, [pc, #60]	; (10c84 <onoff_start+0x44>)
   10c46:	4d10      	ldr	r5, [pc, #64]	; (10c88 <onoff_start+0x48>)
   10c48:	1b03      	subs	r3, r0, r4
   10c4a:	109b      	asrs	r3, r3, #2
   10c4c:	435d      	muls	r5, r3
   10c4e:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   10c50:	250c      	movs	r5, #12
   10c52:	435d      	muls	r5, r3
{
   10c54:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   10c56:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   10c5a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   10c5c:	4420      	add	r0, r4
   10c5e:	2140      	movs	r1, #64	; 0x40
   10c60:	f00c f89c 	bl	1cd9c <set_starting_state>
	if (err < 0) {
   10c64:	1e01      	subs	r1, r0, #0
   10c66:	db08      	blt.n	10c7a <onoff_start+0x3a>
	subdata->cb = cb;
   10c68:	4b08      	ldr	r3, [pc, #32]	; (10c8c <onoff_start+0x4c>)
   10c6a:	442c      	add	r4, r5
	subdata->user_data = user_data;
   10c6c:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   10c70:	4b07      	ldr	r3, [pc, #28]	; (10c90 <onoff_start+0x50>)
   10c72:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   10c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   10c78:	4718      	bx	r3
		notify(mgr, err);
   10c7a:	4638      	mov	r0, r7
   10c7c:	4633      	mov	r3, r6
}
   10c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   10c82:	4718      	bx	r3
   10c84:	200180c8 	.word	0x200180c8
   10c88:	b6db6db7 	.word	0xb6db6db7
   10c8c:	0001cdff 	.word	0x0001cdff
   10c90:	00020fac 	.word	0x00020fac

00010c94 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   10c94:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   10c96:	2200      	movs	r2, #0
   10c98:	2101      	movs	r1, #1
{
   10c9a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   10c9c:	2005      	movs	r0, #5
   10c9e:	f000 fa83 	bl	111a8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   10ca2:	2005      	movs	r0, #5
   10ca4:	f000 fa62 	bl	1116c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   10ca8:	480f      	ldr	r0, [pc, #60]	; (10ce8 <clk_init+0x54>)
   10caa:	f008 faeb 	bl	19284 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   10cae:	4b0f      	ldr	r3, [pc, #60]	; (10cec <clk_init+0x58>)
   10cb0:	4298      	cmp	r0, r3
   10cb2:	d115      	bne.n	10ce0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   10cb4:	f00e ffcb 	bl	1fc4e <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   10cb8:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   10cba:	490d      	ldr	r1, [pc, #52]	; (10cf0 <clk_init+0x5c>)
   10cbc:	4630      	mov	r0, r6
   10cbe:	f00b f8fb 	bl	1beb8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   10cc2:	2800      	cmp	r0, #0
   10cc4:	db0b      	blt.n	10cde <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   10cc6:	2501      	movs	r5, #1
   10cc8:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   10cca:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   10ccc:	4908      	ldr	r1, [pc, #32]	; (10cf0 <clk_init+0x5c>)
   10cce:	f104 001c 	add.w	r0, r4, #28
   10cd2:	f00b f8f1 	bl	1beb8 <onoff_manager_init>
		if (err < 0) {
   10cd6:	2800      	cmp	r0, #0
   10cd8:	db01      	blt.n	10cde <clk_init+0x4a>
	}

	return 0;
   10cda:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   10cdc:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   10cde:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   10ce0:	f06f 0004 	mvn.w	r0, #4
   10ce4:	e7fb      	b.n	10cde <clk_init+0x4a>
   10ce6:	bf00      	nop
   10ce8:	00010d31 	.word	0x00010d31
   10cec:	0bad0000 	.word	0x0bad0000
   10cf0:	00020fc4 	.word	0x00020fc4

00010cf4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   10cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   10cf6:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   10cf8:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   10cfa:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   10cfc:	434b      	muls	r3, r1
   10cfe:	480a      	ldr	r0, [pc, #40]	; (10d28 <clkstarted_handle.constprop.0+0x34>)
   10d00:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   10d02:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   10d04:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   10d08:	4418      	add	r0, r3
	sub_data->cb = NULL;
   10d0a:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
   10d0c:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   10d0e:	f00c f863 	bl	1cdd8 <set_on_state>
	if (callback) {
   10d12:	b135      	cbz	r5, 10d22 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   10d14:	462b      	mov	r3, r5
   10d16:	9a01      	ldr	r2, [sp, #4]
   10d18:	4804      	ldr	r0, [pc, #16]	; (10d2c <clkstarted_handle.constprop.0+0x38>)
}
   10d1a:	b002      	add	sp, #8
   10d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   10d20:	4718      	bx	r3
}
   10d22:	b002      	add	sp, #8
   10d24:	bd70      	pop	{r4, r5, r6, pc}
   10d26:	bf00      	nop
   10d28:	200180c8 	.word	0x200180c8
   10d2c:	20014628 	.word	0x20014628

00010d30 <clock_event_handler>:
	switch (event) {
   10d30:	b110      	cbz	r0, 10d38 <clock_event_handler+0x8>
   10d32:	2801      	cmp	r0, #1
   10d34:	d004      	beq.n	10d40 <clock_event_handler+0x10>
   10d36:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   10d38:	4b03      	ldr	r3, [pc, #12]	; (10d48 <clock_event_handler+0x18>)
   10d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   10d3c:	075b      	lsls	r3, r3, #29
   10d3e:	d101      	bne.n	10d44 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   10d40:	f7ff bfd8 	b.w	10cf4 <clkstarted_handle.constprop.0>
}
   10d44:	4770      	bx	lr
   10d46:	bf00      	nop
   10d48:	200180c8 	.word	0x200180c8

00010d4c <generic_hfclk_start>:
{
   10d4c:	b508      	push	{r3, lr}
	__asm__ volatile(
   10d4e:	f04f 0320 	mov.w	r3, #32
   10d52:	f3ef 8111 	mrs	r1, BASEPRI
   10d56:	f383 8811 	msr	BASEPRI, r3
   10d5a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   10d5e:	4a11      	ldr	r2, [pc, #68]	; (10da4 <generic_hfclk_start+0x58>)
   10d60:	6813      	ldr	r3, [r2, #0]
   10d62:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   10d66:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   10d6a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   10d6c:	d00b      	beq.n	10d86 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   10d6e:	4a0e      	ldr	r2, [pc, #56]	; (10da8 <generic_hfclk_start+0x5c>)
   10d70:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   10d74:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   10d78:	f013 0301 	ands.w	r3, r3, #1
   10d7c:	d003      	beq.n	10d86 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   10d7e:	480b      	ldr	r0, [pc, #44]	; (10dac <generic_hfclk_start+0x60>)
   10d80:	f00c f82a 	bl	1cdd8 <set_on_state>
			already_started = true;
   10d84:	2301      	movs	r3, #1
	__asm__ volatile(
   10d86:	f381 8811 	msr	BASEPRI, r1
   10d8a:	f3bf 8f6f 	isb	sy
	if (already_started) {
   10d8e:	b123      	cbz	r3, 10d9a <generic_hfclk_start+0x4e>
}
   10d90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   10d94:	2000      	movs	r0, #0
   10d96:	f7ff bfad 	b.w	10cf4 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   10d9a:	2001      	movs	r0, #1
}
   10d9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10da0:	f008 ba80 	b.w	192a4 <nrfx_clock_start>
   10da4:	20018118 	.word	0x20018118
   10da8:	40005000 	.word	0x40005000
   10dac:	20018108 	.word	0x20018108

00010db0 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10db0:	4b07      	ldr	r3, [pc, #28]	; (10dd0 <generic_hfclk_stop+0x20>)
   10db2:	e8d3 2fef 	ldaex	r2, [r3]
   10db6:	f022 0102 	bic.w	r1, r2, #2
   10dba:	e8c3 1fe0 	stlex	r0, r1, [r3]
   10dbe:	2800      	cmp	r0, #0
   10dc0:	d1f7      	bne.n	10db2 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   10dc2:	07d3      	lsls	r3, r2, #31
   10dc4:	d402      	bmi.n	10dcc <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   10dc6:	2001      	movs	r0, #1
   10dc8:	f008 ba9e 	b.w	19308 <nrfx_clock_stop>
}
   10dcc:	4770      	bx	lr
   10dce:	bf00      	nop
   10dd0:	20018118 	.word	0x20018118

00010dd4 <api_blocking_start>:
{
   10dd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10dd6:	2200      	movs	r2, #0
   10dd8:	2301      	movs	r3, #1
   10dda:	e9cd 2302 	strd	r2, r3, [sp, #8]
   10dde:	ab04      	add	r3, sp, #16
   10de0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   10de4:	4a09      	ldr	r2, [pc, #36]	; (10e0c <api_blocking_start+0x38>)
   10de6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10de8:	f8cd d000 	str.w	sp, [sp]
   10dec:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   10df0:	f00c f82c 	bl	1ce4c <api_start>
	if (err < 0) {
   10df4:	2800      	cmp	r0, #0
   10df6:	db05      	blt.n	10e04 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   10df8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   10dfc:	2300      	movs	r3, #0
   10dfe:	4668      	mov	r0, sp
   10e00:	f009 fb96 	bl	1a530 <z_impl_k_sem_take>
}
   10e04:	b007      	add	sp, #28
   10e06:	f85d fb04 	ldr.w	pc, [sp], #4
   10e0a:	bf00      	nop
   10e0c:	0001ce1f 	.word	0x0001ce1f

00010e10 <z_nrf_clock_control_lf_on>:
{
   10e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10e14:	2201      	movs	r2, #1
   10e16:	4607      	mov	r7, r0
   10e18:	4936      	ldr	r1, [pc, #216]	; (10ef4 <z_nrf_clock_control_lf_on+0xe4>)
   10e1a:	e8d1 3fef 	ldaex	r3, [r1]
   10e1e:	e8c1 2fe0 	stlex	r0, r2, [r1]
   10e22:	2800      	cmp	r0, #0
   10e24:	d1f9      	bne.n	10e1a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   10e26:	b933      	cbnz	r3, 10e36 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   10e28:	4933      	ldr	r1, [pc, #204]	; (10ef8 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
   10e2a:	4834      	ldr	r0, [pc, #208]	; (10efc <z_nrf_clock_control_lf_on+0xec>)
   10e2c:	604b      	str	r3, [r1, #4]
   10e2e:	60cb      	str	r3, [r1, #12]
   10e30:	608a      	str	r2, [r1, #8]
   10e32:	f00b f854 	bl	1bede <onoff_request>
	switch (start_mode) {
   10e36:	1e7b      	subs	r3, r7, #1
   10e38:	2b01      	cmp	r3, #1
   10e3a:	d82e      	bhi.n	10e9a <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   10e3c:	2f01      	cmp	r7, #1
   10e3e:	d106      	bne.n	10e4e <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   10e40:	4b2f      	ldr	r3, [pc, #188]	; (10f00 <z_nrf_clock_control_lf_on+0xf0>)
   10e42:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   10e46:	f003 0303 	and.w	r3, r3, #3
   10e4a:	2b02      	cmp	r3, #2
   10e4c:	d025      	beq.n	10e9a <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10e4e:	f00f f92f 	bl	200b0 <k_is_in_isr>
   10e52:	4604      	mov	r4, r0
   10e54:	b918      	cbnz	r0, 10e5e <z_nrf_clock_control_lf_on+0x4e>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   10e56:	4b2b      	ldr	r3, [pc, #172]	; (10f04 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
   10e58:	781b      	ldrb	r3, [r3, #0]
   10e5a:	2b00      	cmp	r3, #0
   10e5c:	d144      	bne.n	10ee8 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
   10e5e:	f04f 0320 	mov.w	r3, #32
   10e62:	f3ef 8611 	mrs	r6, BASEPRI
   10e66:	f383 8811 	msr	BASEPRI, r3
   10e6a:	f3bf 8f6f 	isb	sy
   10e6e:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   10e70:	4d23      	ldr	r5, [pc, #140]	; (10f00 <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   10e72:	f8df 809c 	ldr.w	r8, [pc, #156]	; 10f10 <z_nrf_clock_control_lf_on+0x100>
   10e76:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   10e78:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   10e7c:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   10e80:	03d2      	lsls	r2, r2, #15
   10e82:	d50c      	bpl.n	10e9e <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   10e84:	f003 0303 	and.w	r3, r3, #3
   10e88:	2b02      	cmp	r3, #2
   10e8a:	d001      	beq.n	10e90 <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   10e8c:	2f01      	cmp	r7, #1
   10e8e:	d106      	bne.n	10e9e <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
   10e90:	b334      	cbz	r4, 10ee0 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   10e92:	f386 8811 	msr	BASEPRI, r6
   10e96:	f3bf 8f6f 	isb	sy
}
   10e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   10e9e:	b1d4      	cbz	r4, 10ed6 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   10ea0:	4630      	mov	r0, r6
   10ea2:	f000 fb07 	bl	114b4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   10ea6:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   10eaa:	b2db      	uxtb	r3, r3
   10eac:	2b01      	cmp	r3, #1
   10eae:	d1e3      	bne.n	10e78 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   10eb0:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   10eb4:	2a00      	cmp	r2, #0
   10eb6:	d0df      	beq.n	10e78 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10eb8:	2200      	movs	r2, #0
   10eba:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   10ebe:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   10ec2:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10ec4:	2120      	movs	r1, #32
   10ec6:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   10eca:	4a0f      	ldr	r2, [pc, #60]	; (10f08 <z_nrf_clock_control_lf_on+0xf8>)
   10ecc:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10ed0:	4a0e      	ldr	r2, [pc, #56]	; (10f0c <z_nrf_clock_control_lf_on+0xfc>)
   10ed2:	6013      	str	r3, [r2, #0]
}
   10ed4:	e7d0      	b.n	10e78 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
   10ed6:	2100      	movs	r1, #0
   10ed8:	2021      	movs	r0, #33	; 0x21
   10eda:	f009 fadb 	bl	1a494 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   10ede:	e7e2      	b.n	10ea6 <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
   10ee0:	2302      	movs	r3, #2
   10ee2:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   10ee6:	e7d8      	b.n	10e9a <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
   10ee8:	2202      	movs	r2, #2
   10eea:	4b05      	ldr	r3, [pc, #20]	; (10f00 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
   10eec:	4606      	mov	r6, r0
   10eee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   10ef2:	e7bd      	b.n	10e70 <z_nrf_clock_control_lf_on+0x60>
   10ef4:	2001811c 	.word	0x2001811c
   10ef8:	200180b8 	.word	0x200180b8
   10efc:	200180e4 	.word	0x200180e4
   10f00:	40005000 	.word	0x40005000
   10f04:	2001c1c6 	.word	0x2001c1c6
   10f08:	e000e100 	.word	0xe000e100
   10f0c:	40005008 	.word	0x40005008
   10f10:	40005104 	.word	0x40005104

00010f14 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   10f14:	4a04      	ldr	r2, [pc, #16]	; (10f28 <sys_clock_timeout_handler+0x14>)
   10f16:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   10f18:	1ac9      	subs	r1, r1, r3
   10f1a:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   10f1e:	4403      	add	r3, r0
   10f20:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   10f22:	f009 bd81 	b.w	1aa28 <z_clock_announce>
   10f26:	bf00      	nop
   10f28:	2001812c 	.word	0x2001812c

00010f2c <set_absolute_alarm>:
{
   10f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   10f30:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10f34:	f04f 0900 	mov.w	r9, #0
   10f38:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   10f3a:	f100 0450 	add.w	r4, r0, #80	; 0x50
   10f3e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
   10f42:	00a4      	lsls	r4, r4, #2
   10f44:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
   10f48:	b2a4      	uxth	r4, r4
   10f4a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
   10f4e:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   10f52:	f8df 806c 	ldr.w	r8, [pc, #108]	; 10fc0 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   10f56:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10f5a:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   10f5e:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   10f60:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   10f64:	eba3 030a 	sub.w	r3, r3, sl
   10f68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   10f6c:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   10f70:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   10f72:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   10f76:	d102      	bne.n	10f7e <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
   10f78:	2013      	movs	r0, #19
   10f7a:	f00f f89f 	bl	200bc <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   10f7e:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   10f82:	1aab      	subs	r3, r5, r2
   10f84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   10f88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   10f8c:	bf88      	it	hi
   10f8e:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10f90:	f8c4 9000 	str.w	r9, [r4]
   10f94:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   10f96:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   10f9a:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   10f9e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   10fa2:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   10fa6:	459a      	cmp	sl, r3
   10fa8:	d006      	beq.n	10fb8 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
   10faa:	1aeb      	subs	r3, r5, r3
   10fac:	3b02      	subs	r3, #2
   10fae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   10fb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   10fb6:	d801      	bhi.n	10fbc <set_absolute_alarm+0x90>
}
   10fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   10fbc:	462b      	mov	r3, r5
   10fbe:	e7cf      	b.n	10f60 <set_absolute_alarm+0x34>
   10fc0:	40015000 	.word	0x40015000

00010fc4 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   10fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
   10fc6:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10fc8:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10fca:	4e0f      	ldr	r6, [pc, #60]	; (11008 <rtc_nrf_isr+0x44>)
   10fcc:	4b0f      	ldr	r3, [pc, #60]	; (1100c <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
   10fce:	4a10      	ldr	r2, [pc, #64]	; (11010 <rtc_nrf_isr+0x4c>)
   10fd0:	4618      	mov	r0, r3
   10fd2:	681d      	ldr	r5, [r3, #0]
   10fd4:	b104      	cbz	r4, 10fd8 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   10fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10fd8:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   10fdc:	03c9      	lsls	r1, r1, #15
   10fde:	d5fa      	bpl.n	10fd6 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10fe0:	6831      	ldr	r1, [r6, #0]
   10fe2:	2900      	cmp	r1, #0
   10fe4:	d0f7      	beq.n	10fd6 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10fe6:	6034      	str	r4, [r6, #0]
   10fe8:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   10fea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   10fee:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
   10ff2:	2401      	movs	r4, #1
    return p_reg->CC[ch];
   10ff4:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
   10ff8:	b125      	cbz	r5, 11004 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
   10ffa:	2000      	movs	r0, #0
   10ffc:	685a      	ldr	r2, [r3, #4]
   10ffe:	601f      	str	r7, [r3, #0]
   11000:	47a8      	blx	r5
   11002:	e7e3      	b.n	10fcc <rtc_nrf_isr+0x8>
   11004:	6005      	str	r5, [r0, #0]
}
   11006:	e7e6      	b.n	10fd6 <rtc_nrf_isr+0x12>
   11008:	40015140 	.word	0x40015140
   1100c:	20018120 	.word	0x20018120
   11010:	40015000 	.word	0x40015000

00011014 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
   11014:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   11016:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   11018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1101c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   11020:	4d0d      	ldr	r5, [pc, #52]	; (11058 <z_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   11022:	2101      	movs	r1, #1
   11024:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   11028:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   1102c:	4b0b      	ldr	r3, [pc, #44]	; (1105c <z_clock_driver_init+0x48>)
   1102e:	2015      	movs	r0, #21
   11030:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   11034:	4622      	mov	r2, r4
   11036:	f000 f8b7 	bl	111a8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1103a:	2015      	movs	r0, #21
   1103c:	f000 f896 	bl	1116c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   11040:	2301      	movs	r3, #1
   11042:	4a07      	ldr	r2, [pc, #28]	; (11060 <z_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   11044:	2002      	movs	r0, #2
   11046:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   11048:	4a06      	ldr	r2, [pc, #24]	; (11064 <z_clock_driver_init+0x50>)
   1104a:	602b      	str	r3, [r5, #0]
   1104c:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   1104e:	f7ff fedf 	bl	10e10 <z_nrf_clock_control_lf_on>

	return 0;
}
   11052:	4620      	mov	r0, r4
   11054:	bd38      	pop	{r3, r4, r5, pc}
   11056:	bf00      	nop
   11058:	40015000 	.word	0x40015000
   1105c:	e000e100 	.word	0xe000e100
   11060:	40015008 	.word	0x40015008
   11064:	20018128 	.word	0x20018128

00011068 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   11068:	4b13      	ldr	r3, [pc, #76]	; (110b8 <z_clock_set_timeout+0x50>)
   1106a:	f1b0 3fff 	cmp.w	r0, #4294967295
   1106e:	bf08      	it	eq
   11070:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   11072:	3801      	subs	r0, #1
   11074:	2800      	cmp	r0, #0
   11076:	dd1c      	ble.n	110b2 <z_clock_set_timeout+0x4a>
   11078:	4298      	cmp	r0, r3
   1107a:	bfa8      	it	ge
   1107c:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   1107e:	4b0f      	ldr	r3, [pc, #60]	; (110bc <z_clock_set_timeout+0x54>)
   11080:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   11084:	4b0e      	ldr	r3, [pc, #56]	; (110c0 <z_clock_set_timeout+0x58>)
   11086:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   11088:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   1108a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1108e:	bf18      	it	ne
   11090:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
   11092:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   11096:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
   11098:	4a0a      	ldr	r2, [pc, #40]	; (110c4 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1109a:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   1109c:	480a      	ldr	r0, [pc, #40]	; (110c8 <z_clock_set_timeout+0x60>)
   1109e:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   110a0:	2000      	movs	r0, #0
   110a2:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   110a4:	4a04      	ldr	r2, [pc, #16]	; (110b8 <z_clock_set_timeout+0x50>)
   110a6:	4293      	cmp	r3, r2
   110a8:	bf94      	ite	ls
   110aa:	18c9      	addls	r1, r1, r3
   110ac:	1889      	addhi	r1, r1, r2
   110ae:	f7ff bf3d 	b.w	10f2c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   110b2:	2000      	movs	r0, #0
   110b4:	e7e3      	b.n	1107e <z_clock_set_timeout+0x16>
   110b6:	bf00      	nop
   110b8:	007fffff 	.word	0x007fffff
   110bc:	40015000 	.word	0x40015000
   110c0:	2001812c 	.word	0x2001812c
   110c4:	20018120 	.word	0x20018120
   110c8:	00010f15 	.word	0x00010f15

000110cc <z_clock_elapsed>:
	__asm__ volatile(
   110cc:	f04f 0220 	mov.w	r2, #32
   110d0:	f3ef 8311 	mrs	r3, BASEPRI
   110d4:	f382 8811 	msr	BASEPRI, r2
   110d8:	f3bf 8f6f 	isb	sy
   110dc:	4a06      	ldr	r2, [pc, #24]	; (110f8 <z_clock_elapsed+0x2c>)
   110de:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   110e2:	4a06      	ldr	r2, [pc, #24]	; (110fc <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   110e4:	6812      	ldr	r2, [r2, #0]
   110e6:	1a80      	subs	r0, r0, r2
   110e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   110ec:	f383 8811 	msr	BASEPRI, r3
   110f0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   110f4:	4770      	bx	lr
   110f6:	bf00      	nop
   110f8:	40015000 	.word	0x40015000
   110fc:	2001812c 	.word	0x2001812c

00011100 <z_timer_cycle_get_32>:
	__asm__ volatile(
   11100:	f04f 0320 	mov.w	r3, #32
   11104:	f3ef 8211 	mrs	r2, BASEPRI
   11108:	f383 8811 	msr	BASEPRI, r3
   1110c:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   11110:	4906      	ldr	r1, [pc, #24]	; (1112c <z_timer_cycle_get_32+0x2c>)
   11112:	4b07      	ldr	r3, [pc, #28]	; (11130 <z_timer_cycle_get_32+0x30>)
   11114:	6808      	ldr	r0, [r1, #0]
   11116:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   1111a:	f382 8811 	msr	BASEPRI, r2
   1111e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   11122:	1a1b      	subs	r3, r3, r0
   11124:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   11128:	4418      	add	r0, r3
   1112a:	4770      	bx	lr
   1112c:	2001812c 	.word	0x2001812c
   11130:	40015000 	.word	0x40015000

00011134 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   11134:	4a0a      	ldr	r2, [pc, #40]	; (11160 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   11136:	490b      	ldr	r1, [pc, #44]	; (11164 <arch_swap+0x30>)
	_current->arch.basepri = key;
   11138:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1113a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1113c:	67d8      	str	r0, [r3, #124]	; 0x7c
	_current->arch.swap_return_value = _k_neg_eagain;
   1113e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11142:	4909      	ldr	r1, [pc, #36]	; (11168 <arch_swap+0x34>)
   11144:	684b      	ldr	r3, [r1, #4]
   11146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1114a:	604b      	str	r3, [r1, #4]
   1114c:	2300      	movs	r3, #0
   1114e:	f383 8811 	msr	BASEPRI, r3
   11152:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   11156:	6893      	ldr	r3, [r2, #8]
}
   11158:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   1115c:	4770      	bx	lr
   1115e:	bf00      	nop
   11160:	200187a0 	.word	0x200187a0
   11164:	00021360 	.word	0x00021360
   11168:	e000ed00 	.word	0xe000ed00

0001116c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1116c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   1116e:	2b00      	cmp	r3, #0
   11170:	db08      	blt.n	11184 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11172:	2201      	movs	r2, #1
   11174:	f000 001f 	and.w	r0, r0, #31
   11178:	fa02 f000 	lsl.w	r0, r2, r0
   1117c:	4a02      	ldr	r2, [pc, #8]	; (11188 <arch_irq_enable+0x1c>)
   1117e:	095b      	lsrs	r3, r3, #5
   11180:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   11184:	4770      	bx	lr
   11186:	bf00      	nop
   11188:	e000e100 	.word	0xe000e100

0001118c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1118c:	4b05      	ldr	r3, [pc, #20]	; (111a4 <arch_irq_is_enabled+0x18>)
   1118e:	0942      	lsrs	r2, r0, #5
   11190:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11194:	2301      	movs	r3, #1
   11196:	f000 001f 	and.w	r0, r0, #31
   1119a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1119e:	4010      	ands	r0, r2
   111a0:	4770      	bx	lr
   111a2:	bf00      	nop
   111a4:	e000e100 	.word	0xe000e100

000111a8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   111a8:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   111aa:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   111ac:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   111b0:	bfac      	ite	ge
   111b2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   111b6:	4b06      	ldrlt	r3, [pc, #24]	; (111d0 <z_arm_irq_priority_set+0x28>)
   111b8:	ea4f 1141 	mov.w	r1, r1, lsl #5
   111bc:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   111be:	bfab      	itete	ge
   111c0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   111c4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   111c8:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   111cc:	5419      	strblt	r1, [r3, r0]
}
   111ce:	4770      	bx	lr
   111d0:	e000ed14 	.word	0xe000ed14

000111d4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   111d4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   111d6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   111d8:	4b04      	ldr	r3, [pc, #16]	; (111ec <_arch_isr_direct_pm+0x18>)
   111da:	6a58      	ldr	r0, [r3, #36]	; 0x24
   111dc:	b118      	cbz	r0, 111e6 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   111de:	2200      	movs	r2, #0
   111e0:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
   111e2:	f00e fd3f 	bl	1fc64 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   111e6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   111e8:	bd08      	pop	{r3, pc}
   111ea:	bf00      	nop
   111ec:	200187a0 	.word	0x200187a0

000111f0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   111f0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   111f4:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   111f6:	490c      	ldr	r1, [pc, #48]	; (11228 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
   111f8:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   111fc:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   111fe:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   11202:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   11206:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   11208:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   1120c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   11210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   11214:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   11218:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1121a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1121c:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   1121e:	67c3      	str	r3, [r0, #124]	; 0x7c

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   11220:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11224:	4770      	bx	lr
   11226:	bf00      	nop
   11228:	0001bf99 	.word	0x0001bf99

0001122c <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   1122c:	b508      	push	{r3, lr}
   1122e:	4604      	mov	r4, r0
   11230:	460e      	mov	r6, r1
   11232:	4615      	mov	r5, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   11234:	2300      	movs	r3, #0
   11236:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1123a:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   1123e:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   11242:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   11246:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
   1124a:	f000 fbef 	bl	11a2c <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1124e:	4b09      	ldr	r3, [pc, #36]	; (11274 <arch_switch_to_main_thread+0x48>)
   11250:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   11252:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   11254:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11258:	4628      	mov	r0, r5
   1125a:	f386 8809 	msr	PSP, r6
   1125e:	2100      	movs	r1, #0
   11260:	b663      	cpsie	if
   11262:	f381 8811 	msr	BASEPRI, r1
   11266:	f3bf 8f6f 	isb	sy
   1126a:	2200      	movs	r2, #0
   1126c:	2300      	movs	r3, #0
   1126e:	f00a fe93 	bl	1bf98 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   11272:	bf00      	nop
   11274:	200187a0 	.word	0x200187a0

00011278 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   11278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1127c:	4606      	mov	r6, r0

	if (esf != NULL) {
   1127e:	460d      	mov	r5, r1
{
   11280:	b08b      	sub	sp, #44	; 0x2c
	if (esf != NULL) {
   11282:	2900      	cmp	r1, #0
   11284:	d054      	beq.n	11330 <z_arm_fatal_error+0xb8>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   11286:	4b2e      	ldr	r3, [pc, #184]	; (11340 <z_arm_fatal_error+0xc8>)
   11288:	4c2e      	ldr	r4, [pc, #184]	; (11344 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1128a:	482f      	ldr	r0, [pc, #188]	; (11348 <z_arm_fatal_error+0xd0>)
   1128c:	1ae4      	subs	r4, r4, r3
   1128e:	08e4      	lsrs	r4, r4, #3
   11290:	01a4      	lsls	r4, r4, #6
   11292:	f044 0401 	orr.w	r4, r4, #1
   11296:	f8ad 4000 	strh.w	r4, [sp]
   1129a:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   1129e:	6809      	ldr	r1, [r1, #0]
   112a0:	f00b f9f1 	bl	1c686 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   112a4:	f8ad 4000 	strh.w	r4, [sp]
   112a8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   112ac:	68e9      	ldr	r1, [r5, #12]
   112ae:	4827      	ldr	r0, [pc, #156]	; (1134c <z_arm_fatal_error+0xd4>)
   112b0:	f00b f9e9 	bl	1c686 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   112b4:	4622      	mov	r2, r4
   112b6:	69e9      	ldr	r1, [r5, #28]
   112b8:	4825      	ldr	r0, [pc, #148]	; (11350 <z_arm_fatal_error+0xd8>)
   112ba:	f00b f9b4 	bl	1c626 <log_1>
	for (int i = 0; i < 16; i += 4) {
   112be:	46a8      	mov	r8, r5
   112c0:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   112c2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1135c <z_arm_fatal_error+0xe4>
   112c6:	edd8 7a08 	vldr	s15, [r8, #32]
   112ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   112ce:	edcd 7a03 	vstr	s15, [sp, #12]
   112d2:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   112d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   112da:	edcd 7a05 	vstr	s15, [sp, #20]
   112de:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   112e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   112e6:	edcd 7a07 	vstr	s15, [sp, #28]
   112ea:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   112ee:	2208      	movs	r2, #8
   112f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   112f4:	1c7b      	adds	r3, r7, #1
   112f6:	9304      	str	r3, [sp, #16]
   112f8:	1cbb      	adds	r3, r7, #2
   112fa:	9306      	str	r3, [sp, #24]
   112fc:	1cfb      	adds	r3, r7, #3
   112fe:	9702      	str	r7, [sp, #8]
   11300:	9308      	str	r3, [sp, #32]
   11302:	4648      	mov	r0, r9
   11304:	4623      	mov	r3, r4
   11306:	eb0d 0102 	add.w	r1, sp, r2
	for (int i = 0; i < 16; i += 4) {
   1130a:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   1130c:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   11310:	f00b f9d8 	bl	1c6c4 <log_n>
	for (int i = 0; i < 16; i += 4) {
   11314:	2f10      	cmp	r7, #16
   11316:	f108 0810 	add.w	r8, r8, #16
   1131a:	d1d4      	bne.n	112c6 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   1131c:	4622      	mov	r2, r4
   1131e:	6e29      	ldr	r1, [r5, #96]	; 0x60
   11320:	480c      	ldr	r0, [pc, #48]	; (11354 <z_arm_fatal_error+0xdc>)
   11322:	f00b f980 	bl	1c626 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   11326:	4622      	mov	r2, r4
   11328:	69a9      	ldr	r1, [r5, #24]
   1132a:	480b      	ldr	r0, [pc, #44]	; (11358 <z_arm_fatal_error+0xe0>)
   1132c:	f00b f97b 	bl	1c626 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   11330:	4629      	mov	r1, r5
   11332:	4630      	mov	r0, r6
   11334:	f008 f9c8 	bl	196c8 <z_fatal_error>
}
   11338:	b00b      	add	sp, #44	; 0x2c
   1133a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1133e:	bf00      	nop
   11340:	00020e58 	.word	0x00020e58
   11344:	00020ec0 	.word	0x00020ec0
   11348:	00022044 	.word	0x00022044
   1134c:	00022073 	.word	0x00022073
   11350:	000220a2 	.word	0x000220a2
   11354:	000220f4 	.word	0x000220f4
   11358:	00022103 	.word	0x00022103
   1135c:	000220b1 	.word	0x000220b1

00011360 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11360:	4a14      	ldr	r2, [pc, #80]	; (113b4 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   11362:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11364:	4b14      	ldr	r3, [pc, #80]	; (113b8 <z_arm_prep_c+0x58>)
   11366:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1136a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1136c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11370:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   11374:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11378:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1137c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   11380:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11384:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   11388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   1138c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   11390:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   11394:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11398:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1139c:	2300      	movs	r3, #0
   1139e:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   113a2:	f008 fa23 	bl	197ec <z_bss_zero>
	z_data_copy();
   113a6:	f009 fa47 	bl	1a838 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   113aa:	f000 fb11 	bl	119d0 <z_arm_interrupt_init>
	z_cstart();
   113ae:	f008 fa41 	bl	19834 <z_cstart>
   113b2:	bf00      	nop
   113b4:	0000c000 	.word	0x0000c000
   113b8:	e000ed00 	.word	0xe000ed00

000113bc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   113bc:	4929      	ldr	r1, [pc, #164]	; (11464 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   113be:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   113c0:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   113c4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   113c6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   113ca:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   113ce:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   113d2:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   113d6:	d004      	beq.n	113e2 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   113d8:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   113dc:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   113e0:	e007      	b.n	113f2 <out_fp_endif>

000113e2 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   113e2:	f102 0084 	add.w	r0, r2, #132	; 0x84
    vstmia r0, {s16-s31}
   113e6:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   113ea:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   113ee:	f050 0004 	orrs.w	r0, r0, #4

000113f2 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   113f2:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   113f6:	2020      	movs	r0, #32
    msr BASEPRI, r0
   113f8:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   113fc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   11400:	4f19      	ldr	r7, [pc, #100]	; (11468 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   11402:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   11406:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
   11408:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1140a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1140c:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
   1140e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   11410:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   11412:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   11416:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   1141a:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   1141e:	d105      	bne.n	1142c <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   11420:	2300      	movs	r3, #0
    vmsr fpscr, r3
   11422:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   11426:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   1142a:	e005      	b.n	11438 <in_fp_endif>

0001142c <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   1142c:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   11430:	f102 0084 	add.w	r0, r2, #132	; 0x84
    vldmia r0, {s16-s31}
   11434:	ec90 8a10 	vldmia	r0, {s16-s31}

00011438 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   11438:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   1143c:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   11440:	f383 8814 	msr	CONTROL, r3
    isb
   11444:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   11448:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   1144c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   11450:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   11454:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   11458:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1145a:	f00b fd23 	bl	1cea4 <configure_builtin_stack_guard>
    pop {r2, lr}
   1145e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   11462:	4770      	bx	lr
    ldr r1, =_kernel
   11464:	200187a0 	.word	0x200187a0
    ldr v4, =_SCS_ICSR
   11468:	e000ed04 	.word	0xe000ed04

0001146c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   1146c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   11470:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   11472:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   11476:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1147a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1147c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   11480:	2902      	cmp	r1, #2
    beq _oops
   11482:	d0ff      	beq.n	11484 <_oops>

00011484 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   11484:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   11486:	f00b fd11 	bl	1ceac <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1148a:	bd01      	pop	{r0, pc}

0001148c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1148c:	4901      	ldr	r1, [pc, #4]	; (11494 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1148e:	2210      	movs	r2, #16
	str	r2, [r1]
   11490:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   11492:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   11494:	e000ed10 	.word	0xe000ed10

00011498 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   11498:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1149a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1149c:	f380 8811 	msr	BASEPRI, r0
	isb
   114a0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   114a4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   114a8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   114aa:	b662      	cpsie	i
	isb
   114ac:	f3bf 8f6f 	isb	sy

	bx	lr
   114b0:	4770      	bx	lr
   114b2:	bf00      	nop

000114b4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   114b4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   114b6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   114b8:	f381 8811 	msr	BASEPRI, r1

	wfe
   114bc:	bf20      	wfe

	msr	BASEPRI, r0
   114be:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   114c2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   114c4:	4770      	bx	lr
   114c6:	bf00      	nop

000114c8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   114c8:	bf30      	wfi
    b z_SysNmiOnReset
   114ca:	f7ff bffd 	b.w	114c8 <z_SysNmiOnReset>
   114ce:	bf00      	nop

000114d0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   114d0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   114d2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   114d4:	4a0b      	ldr	r2, [pc, #44]	; (11504 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   114d6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
   114d8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   114da:	bf1e      	ittt	ne
	movne	r1, #0
   114dc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   114de:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
   114e0:	f00e fbc0 	blne	1fc64 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   114e4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   114e6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   114ea:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   114ee:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   114f2:	4905      	ldr	r1, [pc, #20]	; (11508 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   114f4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   114f6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   114f8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   114fa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   114fe:	4903      	ldr	r1, [pc, #12]	; (1150c <_isr_wrapper+0x3c>)
	bx r1
   11500:	4708      	bx	r1
   11502:	0000      	.short	0x0000
	ldr r2, =_kernel
   11504:	200187a0 	.word	0x200187a0
	ldr r1, =_sw_isr_table
   11508:	00020c44 	.word	0x00020c44
	ldr r1, =z_arm_int_exit
   1150c:	00011555 	.word	0x00011555

00011510 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   11510:	f00b f855 	bl	1c5be <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11514:	2020      	movs	r0, #32
    msr BASEPRI, r0
   11516:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1151a:	4808      	ldr	r0, [pc, #32]	; (1153c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1151c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   11520:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11522:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11526:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1152a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1152c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1152e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11532:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11536:	f7ff ff13 	bl	11360 <z_arm_prep_c>
   1153a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   1153c:	2001f218 	.word	0x2001f218

00011540 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   11540:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11544:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11548:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1154a:	4672      	mov	r2, lr
	bl z_arm_fault
   1154c:	f000 f94e 	bl	117ec <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   11550:	bd01      	pop	{r0, pc}
   11552:	bf00      	nop

00011554 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   11554:	4b04      	ldr	r3, [pc, #16]	; (11568 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   11556:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   11558:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
   1155a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1155c:	d003      	beq.n	11566 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1155e:	4903      	ldr	r1, [pc, #12]	; (1156c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   11560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11564:	600a      	str	r2, [r1, #0]

00011566 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   11566:	4770      	bx	lr
	ldr r3, =_kernel
   11568:	200187a0 	.word	0x200187a0
	ldr r1, =_SCS_ICSR
   1156c:	e000ed04 	.word	0xe000ed04

00011570 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   11570:	b570      	push	{r4, r5, r6, lr}
   11572:	4b28      	ldr	r3, [pc, #160]	; (11614 <usage_fault.isra.0+0xa4>)
   11574:	4c28      	ldr	r4, [pc, #160]	; (11618 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11576:	4d29      	ldr	r5, [pc, #164]	; (1161c <usage_fault.isra.0+0xac>)
   11578:	1ae4      	subs	r4, r4, r3
   1157a:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   1157c:	01a4      	lsls	r4, r4, #6
   1157e:	f044 0601 	orr.w	r6, r4, #1
   11582:	4631      	mov	r1, r6
   11584:	4826      	ldr	r0, [pc, #152]	; (11620 <usage_fault.isra.0+0xb0>)
   11586:	f00b f83f 	bl	1c608 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1158a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1158c:	0193      	lsls	r3, r2, #6
   1158e:	d503      	bpl.n	11598 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   11590:	4631      	mov	r1, r6
   11592:	4824      	ldr	r0, [pc, #144]	; (11624 <usage_fault.isra.0+0xb4>)
   11594:	f00b f838 	bl	1c608 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11598:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1159a:	01dd      	lsls	r5, r3, #7
   1159c:	d504      	bpl.n	115a8 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   1159e:	4822      	ldr	r0, [pc, #136]	; (11628 <usage_fault.isra.0+0xb8>)
   115a0:	f044 0101 	orr.w	r1, r4, #1
   115a4:	f00b f830 	bl	1c608 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   115a8:	4d1c      	ldr	r5, [pc, #112]	; (1161c <usage_fault.isra.0+0xac>)
   115aa:	6aae      	ldr	r6, [r5, #40]	; 0x28
   115ac:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   115b0:	d005      	beq.n	115be <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   115b2:	481e      	ldr	r0, [pc, #120]	; (1162c <usage_fault.isra.0+0xbc>)
   115b4:	f044 0101 	orr.w	r1, r4, #1
   115b8:	f00b f826 	bl	1c608 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   115bc:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   115be:	6aab      	ldr	r3, [r5, #40]	; 0x28
   115c0:	0318      	lsls	r0, r3, #12
   115c2:	d504      	bpl.n	115ce <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   115c4:	481a      	ldr	r0, [pc, #104]	; (11630 <usage_fault.isra.0+0xc0>)
   115c6:	f044 0101 	orr.w	r1, r4, #1
   115ca:	f00b f81d 	bl	1c608 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   115ce:	4d13      	ldr	r5, [pc, #76]	; (1161c <usage_fault.isra.0+0xac>)
   115d0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   115d2:	0351      	lsls	r1, r2, #13
   115d4:	d504      	bpl.n	115e0 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   115d6:	4817      	ldr	r0, [pc, #92]	; (11634 <usage_fault.isra.0+0xc4>)
   115d8:	f044 0101 	orr.w	r1, r4, #1
   115dc:	f00b f814 	bl	1c608 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   115e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   115e2:	039a      	lsls	r2, r3, #14
   115e4:	d504      	bpl.n	115f0 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   115e6:	4814      	ldr	r0, [pc, #80]	; (11638 <usage_fault.isra.0+0xc8>)
   115e8:	f044 0101 	orr.w	r1, r4, #1
   115ec:	f00b f80c 	bl	1c608 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   115f0:	4d0a      	ldr	r5, [pc, #40]	; (1161c <usage_fault.isra.0+0xac>)
   115f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   115f4:	03db      	lsls	r3, r3, #15
   115f6:	d504      	bpl.n	11602 <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   115f8:	4810      	ldr	r0, [pc, #64]	; (1163c <usage_fault.isra.0+0xcc>)
   115fa:	f044 0101 	orr.w	r1, r4, #1
   115fe:	f00b f803 	bl	1c608 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11602:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   11604:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11606:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1160a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1160e:	62ab      	str	r3, [r5, #40]	; 0x28
}
   11610:	bd70      	pop	{r4, r5, r6, pc}
   11612:	bf00      	nop
   11614:	00020e58 	.word	0x00020e58
   11618:	00020ec0 	.word	0x00020ec0
   1161c:	e000ed00 	.word	0xe000ed00
   11620:	00022131 	.word	0x00022131
   11624:	00022149 	.word	0x00022149
   11628:	0002215c 	.word	0x0002215c
   1162c:	00022176 	.word	0x00022176
   11630:	000221a0 	.word	0x000221a0
   11634:	000221be 	.word	0x000221be
   11638:	000221e3 	.word	0x000221e3
   1163c:	000221fd 	.word	0x000221fd

00011640 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11644:	4b28      	ldr	r3, [pc, #160]	; (116e8 <mem_manage_fault.isra.0+0xa8>)
   11646:	4c29      	ldr	r4, [pc, #164]	; (116ec <mem_manage_fault.isra.0+0xac>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11648:	4d29      	ldr	r5, [pc, #164]	; (116f0 <mem_manage_fault.isra.0+0xb0>)
   1164a:	1ae4      	subs	r4, r4, r3
   1164c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   1164e:	01a4      	lsls	r4, r4, #6
   11650:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11654:	4607      	mov	r7, r0
   11656:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   11658:	4826      	ldr	r0, [pc, #152]	; (116f4 <mem_manage_fault.isra.0+0xb4>)
   1165a:	4641      	mov	r1, r8
   1165c:	f00a ffd4 	bl	1c608 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11660:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11662:	06d0      	lsls	r0, r2, #27
   11664:	d503      	bpl.n	1166e <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   11666:	4641      	mov	r1, r8
   11668:	4823      	ldr	r0, [pc, #140]	; (116f8 <mem_manage_fault.isra.0+0xb8>)
   1166a:	f00a ffcd 	bl	1c608 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1166e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11670:	0719      	lsls	r1, r3, #28
   11672:	d504      	bpl.n	1167e <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   11674:	4821      	ldr	r0, [pc, #132]	; (116fc <mem_manage_fault.isra.0+0xbc>)
   11676:	f044 0101 	orr.w	r1, r4, #1
   1167a:	f00a ffc5 	bl	1c608 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1167e:	4d1c      	ldr	r5, [pc, #112]	; (116f0 <mem_manage_fault.isra.0+0xb0>)
   11680:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11682:	079a      	lsls	r2, r3, #30
   11684:	d512      	bpl.n	116ac <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   11686:	f044 0801 	orr.w	r8, r4, #1
   1168a:	4641      	mov	r1, r8
   1168c:	481c      	ldr	r0, [pc, #112]	; (11700 <mem_manage_fault.isra.0+0xc0>)
   1168e:	f00a ffbb 	bl	1c608 <log_0>
		uint32_t temp = SCB->MMFAR;
   11692:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   11694:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11696:	061b      	lsls	r3, r3, #24
   11698:	d508      	bpl.n	116ac <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1169a:	4642      	mov	r2, r8
   1169c:	4819      	ldr	r0, [pc, #100]	; (11704 <mem_manage_fault.isra.0+0xc4>)
   1169e:	f00a ffc2 	bl	1c626 <log_1>
			if (from_hard_fault) {
   116a2:	b11f      	cbz	r7, 116ac <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   116a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   116a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   116aa:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   116ac:	4d10      	ldr	r5, [pc, #64]	; (116f0 <mem_manage_fault.isra.0+0xb0>)
   116ae:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   116b0:	07d0      	lsls	r0, r2, #31
   116b2:	d504      	bpl.n	116be <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   116b4:	4814      	ldr	r0, [pc, #80]	; (11708 <mem_manage_fault.isra.0+0xc8>)
   116b6:	f044 0101 	orr.w	r1, r4, #1
   116ba:	f00a ffa5 	bl	1c608 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   116be:	6aab      	ldr	r3, [r5, #40]	; 0x28
   116c0:	0699      	lsls	r1, r3, #26
   116c2:	d504      	bpl.n	116ce <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   116c4:	4811      	ldr	r0, [pc, #68]	; (1170c <mem_manage_fault.isra.0+0xcc>)
   116c6:	f044 0101 	orr.w	r1, r4, #1
   116ca:	f00a ff9d 	bl	1c608 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   116ce:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   116d0:	4b07      	ldr	r3, [pc, #28]	; (116f0 <mem_manage_fault.isra.0+0xb0>)
   116d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116d4:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   116d6:	bf58      	it	pl
   116d8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   116da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116dc:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   116e0:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   116e2:	7030      	strb	r0, [r6, #0]
}
   116e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   116e8:	00020e58 	.word	0x00020e58
   116ec:	00020ec0 	.word	0x00020ec0
   116f0:	e000ed00 	.word	0xe000ed00
   116f4:	00022228 	.word	0x00022228
   116f8:	0002223e 	.word	0x0002223e
   116fc:	00022271 	.word	0x00022271
   11700:	00022284 	.word	0x00022284
   11704:	0002229c 	.word	0x0002229c
   11708:	000222b2 	.word	0x000222b2
   1170c:	000222d1 	.word	0x000222d1

00011710 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   11710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11714:	4b2a      	ldr	r3, [pc, #168]	; (117c0 <bus_fault.isra.0+0xb0>)
   11716:	4c2b      	ldr	r4, [pc, #172]	; (117c4 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   11718:	4d2b      	ldr	r5, [pc, #172]	; (117c8 <bus_fault.isra.0+0xb8>)
   1171a:	1ae4      	subs	r4, r4, r3
   1171c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   1171e:	01a4      	lsls	r4, r4, #6
   11720:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   11724:	4607      	mov	r7, r0
   11726:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   11728:	4828      	ldr	r0, [pc, #160]	; (117cc <bus_fault.isra.0+0xbc>)
   1172a:	4641      	mov	r1, r8
   1172c:	f00a ff6c 	bl	1c608 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   11730:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11732:	04d1      	lsls	r1, r2, #19
   11734:	d503      	bpl.n	1173e <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   11736:	4641      	mov	r1, r8
   11738:	4825      	ldr	r0, [pc, #148]	; (117d0 <bus_fault.isra.0+0xc0>)
   1173a:	f00a ff65 	bl	1c608 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1173e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11740:	051a      	lsls	r2, r3, #20
   11742:	d504      	bpl.n	1174e <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   11744:	4823      	ldr	r0, [pc, #140]	; (117d4 <bus_fault.isra.0+0xc4>)
   11746:	f044 0101 	orr.w	r1, r4, #1
   1174a:	f00a ff5d 	bl	1c608 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1174e:	4d1e      	ldr	r5, [pc, #120]	; (117c8 <bus_fault.isra.0+0xb8>)
   11750:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11752:	059b      	lsls	r3, r3, #22
   11754:	d512      	bpl.n	1177c <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   11756:	f044 0801 	orr.w	r8, r4, #1
   1175a:	4641      	mov	r1, r8
   1175c:	481e      	ldr	r0, [pc, #120]	; (117d8 <bus_fault.isra.0+0xc8>)
   1175e:	f00a ff53 	bl	1c608 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   11762:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   11764:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11766:	0418      	lsls	r0, r3, #16
   11768:	d508      	bpl.n	1177c <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1176a:	4642      	mov	r2, r8
   1176c:	481b      	ldr	r0, [pc, #108]	; (117dc <bus_fault.isra.0+0xcc>)
   1176e:	f00a ff5a 	bl	1c626 <log_1>
			if (from_hard_fault) {
   11772:	b11f      	cbz	r7, 1177c <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   11774:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11776:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1177a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1177c:	4d12      	ldr	r5, [pc, #72]	; (117c8 <bus_fault.isra.0+0xb8>)
   1177e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11780:	0559      	lsls	r1, r3, #21
   11782:	d504      	bpl.n	1178e <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   11784:	4816      	ldr	r0, [pc, #88]	; (117e0 <bus_fault.isra.0+0xd0>)
   11786:	f044 0101 	orr.w	r1, r4, #1
   1178a:	f00a ff3d 	bl	1c608 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1178e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11790:	05da      	lsls	r2, r3, #23
   11792:	d50d      	bpl.n	117b0 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   11794:	4813      	ldr	r0, [pc, #76]	; (117e4 <bus_fault.isra.0+0xd4>)
   11796:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1179a:	f00a ff35 	bl	1c608 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   1179e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   117a0:	4a09      	ldr	r2, [pc, #36]	; (117c8 <bus_fault.isra.0+0xb8>)
   117a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   117a4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   117a8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   117aa:	7030      	strb	r0, [r6, #0]
}
   117ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   117b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   117b2:	049b      	lsls	r3, r3, #18
   117b4:	d5f3      	bpl.n	1179e <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   117b6:	480c      	ldr	r0, [pc, #48]	; (117e8 <bus_fault.isra.0+0xd8>)
   117b8:	f044 0101 	orr.w	r1, r4, #1
   117bc:	e7ed      	b.n	1179a <bus_fault.isra.0+0x8a>
   117be:	bf00      	nop
   117c0:	00020e58 	.word	0x00020e58
   117c4:	00020ec0 	.word	0x00020ec0
   117c8:	e000ed00 	.word	0xe000ed00
   117cc:	00022300 	.word	0x00022300
   117d0:	00022316 	.word	0x00022316
   117d4:	00022271 	.word	0x00022271
   117d8:	00022327 	.word	0x00022327
   117dc:	00022340 	.word	0x00022340
   117e0:	00022355 	.word	0x00022355
   117e4:	00022370 	.word	0x00022370
   117e8:	000222d1 	.word	0x000222d1

000117ec <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   117ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   117f0:	4b5a      	ldr	r3, [pc, #360]	; (1195c <z_arm_fault+0x170>)
{
   117f2:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   117f4:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   117f8:	460f      	mov	r7, r1
   117fa:	4614      	mov	r4, r2
   117fc:	2500      	movs	r5, #0
   117fe:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11800:	f3c8 0608 	ubfx	r6, r8, #0, #9
   11804:	f385 8811 	msr	BASEPRI, r5
   11808:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1180c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   11810:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   11814:	d123      	bne.n	1185e <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   11816:	07d0      	lsls	r0, r2, #31
   11818:	d421      	bmi.n	1185e <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1181a:	0651      	lsls	r1, r2, #25
   1181c:	d403      	bmi.n	11826 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1181e:	0722      	lsls	r2, r4, #28
   11820:	d40e      	bmi.n	11840 <z_arm_fault+0x54>
			*nested_exc = true;
   11822:	2501      	movs	r5, #1
   11824:	e00e      	b.n	11844 <z_arm_fault+0x58>
   11826:	494e      	ldr	r1, [pc, #312]	; (11960 <z_arm_fault+0x174>)
   11828:	4b4e      	ldr	r3, [pc, #312]	; (11964 <z_arm_fault+0x178>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   1182a:	484f      	ldr	r0, [pc, #316]	; (11968 <z_arm_fault+0x17c>)
   1182c:	1a5b      	subs	r3, r3, r1
   1182e:	08db      	lsrs	r3, r3, #3
   11830:	019b      	lsls	r3, r3, #6
   11832:	f043 0101 	orr.w	r1, r3, #1
   11836:	f00a fee7 	bl	1c608 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1183a:	f014 0504 	ands.w	r5, r4, #4
   1183e:	d001      	beq.n	11844 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   11840:	46b9      	mov	r9, r7
	*nested_exc = false;
   11842:	2500      	movs	r5, #0
	*recoverable = false;
   11844:	2300      	movs	r3, #0
   11846:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   1184a:	1ef3      	subs	r3, r6, #3
   1184c:	2b09      	cmp	r3, #9
   1184e:	d86c      	bhi.n	1192a <z_arm_fault+0x13e>
   11850:	e8df f003 	tbb	[pc, r3]
   11854:	3e5e5a07 	.word	0x3e5e5a07
   11858:	6b6b6b6b 	.word	0x6b6b6b6b
   1185c:	626b      	.short	0x626b
		return NULL;
   1185e:	46a9      	mov	r9, r5
   11860:	e7f0      	b.n	11844 <z_arm_fault+0x58>
	*recoverable = false;
   11862:	f04f 0800 	mov.w	r8, #0
   11866:	4b3e      	ldr	r3, [pc, #248]	; (11960 <z_arm_fault+0x174>)
   11868:	4e3e      	ldr	r6, [pc, #248]	; (11964 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   1186a:	4840      	ldr	r0, [pc, #256]	; (1196c <z_arm_fault+0x180>)
   1186c:	1af6      	subs	r6, r6, r3
   1186e:	08f6      	lsrs	r6, r6, #3
   11870:	01b6      	lsls	r6, r6, #6
   11872:	f046 0601 	orr.w	r6, r6, #1
   11876:	4631      	mov	r1, r6
   11878:	f00a fec6 	bl	1c608 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1187c:	4b37      	ldr	r3, [pc, #220]	; (1195c <z_arm_fault+0x170>)
	*recoverable = false;
   1187e:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11882:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   11884:	f014 0402 	ands.w	r4, r4, #2
   11888:	d005      	beq.n	11896 <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   1188a:	4631      	mov	r1, r6
   1188c:	4838      	ldr	r0, [pc, #224]	; (11970 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
   1188e:	f00a febb 	bl	1c608 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11892:	2400      	movs	r4, #0
}
   11894:	e01f      	b.n	118d6 <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11898:	005b      	lsls	r3, r3, #1
   1189a:	d51c      	bpl.n	118d6 <z_arm_fault+0xea>
		PR_EXC("  Fault escalation (see below)");
   1189c:	4631      	mov	r1, r6
   1189e:	4835      	ldr	r0, [pc, #212]	; (11974 <z_arm_fault+0x188>)
   118a0:	f00a feb2 	bl	1c608 <log_0>
		if (SCB_MMFSR != 0) {
   118a4:	4b34      	ldr	r3, [pc, #208]	; (11978 <z_arm_fault+0x18c>)
   118a6:	781b      	ldrb	r3, [r3, #0]
   118a8:	b12b      	cbz	r3, 118b6 <z_arm_fault+0xca>
			reason = mem_manage_fault(esf, 1, recoverable);
   118aa:	2001      	movs	r0, #1
   118ac:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   118b0:	f7ff fec6 	bl	11640 <mem_manage_fault.isra.0>
   118b4:	e00e      	b.n	118d4 <z_arm_fault+0xe8>
		} else if (SCB_BFSR != 0) {
   118b6:	4b31      	ldr	r3, [pc, #196]	; (1197c <z_arm_fault+0x190>)
   118b8:	781b      	ldrb	r3, [r3, #0]
   118ba:	b12b      	cbz	r3, 118c8 <z_arm_fault+0xdc>
			reason = bus_fault(esf, 1, recoverable);
   118bc:	2001      	movs	r0, #1
   118be:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   118c2:	f7ff ff25 	bl	11710 <bus_fault.isra.0>
   118c6:	e005      	b.n	118d4 <z_arm_fault+0xe8>
		} else if (SCB_UFSR != 0) {
   118c8:	4b2d      	ldr	r3, [pc, #180]	; (11980 <z_arm_fault+0x194>)
   118ca:	881b      	ldrh	r3, [r3, #0]
   118cc:	b29b      	uxth	r3, r3
   118ce:	b113      	cbz	r3, 118d6 <z_arm_fault+0xea>
			reason = usage_fault(esf);
   118d0:	f7ff fe4e 	bl	11570 <usage_fault.isra.0>
   118d4:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   118d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   118da:	b993      	cbnz	r3, 11902 <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   118dc:	2268      	movs	r2, #104	; 0x68
   118de:	4649      	mov	r1, r9
   118e0:	a802      	add	r0, sp, #8
   118e2:	f00e feaa 	bl	2063a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   118e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   118e8:	b39d      	cbz	r5, 11952 <z_arm_fault+0x166>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   118ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
   118ee:	b922      	cbnz	r2, 118fa <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   118f0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   118f4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   118f8:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   118fa:	4620      	mov	r0, r4
   118fc:	a902      	add	r1, sp, #8
   118fe:	f7ff fcbb 	bl	11278 <z_arm_fatal_error>
}
   11902:	b01d      	add	sp, #116	; 0x74
   11904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   11908:	2000      	movs	r0, #0
   1190a:	f10d 0107 	add.w	r1, sp, #7
   1190e:	e7cf      	b.n	118b0 <z_arm_fault+0xc4>
		reason = bus_fault(esf, 0, recoverable);
   11910:	2000      	movs	r0, #0
   11912:	f10d 0107 	add.w	r1, sp, #7
   11916:	e7d4      	b.n	118c2 <z_arm_fault+0xd6>
   11918:	4912      	ldr	r1, [pc, #72]	; (11964 <z_arm_fault+0x178>)
   1191a:	4b11      	ldr	r3, [pc, #68]	; (11960 <z_arm_fault+0x174>)
	PR_FAULT_INFO(
   1191c:	4819      	ldr	r0, [pc, #100]	; (11984 <z_arm_fault+0x198>)
   1191e:	1ac9      	subs	r1, r1, r3
   11920:	08c9      	lsrs	r1, r1, #3
   11922:	0189      	lsls	r1, r1, #6
   11924:	f041 0101 	orr.w	r1, r1, #1
   11928:	e7b1      	b.n	1188e <z_arm_fault+0xa2>
   1192a:	4a0d      	ldr	r2, [pc, #52]	; (11960 <z_arm_fault+0x174>)
   1192c:	4b0d      	ldr	r3, [pc, #52]	; (11964 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** %s %d) *****",
   1192e:	4816      	ldr	r0, [pc, #88]	; (11988 <z_arm_fault+0x19c>)
   11930:	1a9b      	subs	r3, r3, r2
   11932:	08db      	lsrs	r3, r3, #3
   11934:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   11938:	ea4f 1383 	mov.w	r3, r3, lsl #6
   1193c:	4913      	ldr	r1, [pc, #76]	; (1198c <z_arm_fault+0x1a0>)
   1193e:	f043 0301 	orr.w	r3, r3, #1
   11942:	bf18      	it	ne
   11944:	4601      	movne	r1, r0
   11946:	f1a6 0210 	sub.w	r2, r6, #16
   1194a:	4811      	ldr	r0, [pc, #68]	; (11990 <z_arm_fault+0x1a4>)
   1194c:	f00a fe82 	bl	1c654 <log_2>
   11950:	e79f      	b.n	11892 <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11952:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11956:	f023 0301 	bic.w	r3, r3, #1
   1195a:	e7cd      	b.n	118f8 <z_arm_fault+0x10c>
   1195c:	e000ed00 	.word	0xe000ed00
   11960:	00020e58 	.word	0x00020e58
   11964:	00020ec0 	.word	0x00020ec0
   11968:	00022388 	.word	0x00022388
   1196c:	000223ab 	.word	0x000223ab
   11970:	000223c2 	.word	0x000223c2
   11974:	000223e3 	.word	0x000223e3
   11978:	e000ed28 	.word	0xe000ed28
   1197c:	e000ed29 	.word	0xe000ed29
   11980:	e000ed2a 	.word	0xe000ed2a
   11984:	00022402 	.word	0x00022402
   11988:	0002244d 	.word	0x0002244d
   1198c:	00022438 	.word	0x00022438
   11990:	00022466 	.word	0x00022466

00011994 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11994:	4b04      	ldr	r3, [pc, #16]	; (119a8 <z_arm_fault_init+0x14>)
   11996:	695a      	ldr	r2, [r3, #20]
   11998:	f042 0210 	orr.w	r2, r2, #16
   1199c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1199e:	695a      	ldr	r2, [r3, #20]
   119a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   119a4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   119a6:	4770      	bx	lr
   119a8:	e000ed00 	.word	0xe000ed00

000119ac <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   119ac:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   119b0:	4905      	ldr	r1, [pc, #20]	; (119c8 <sys_arch_reboot+0x1c>)
   119b2:	4b06      	ldr	r3, [pc, #24]	; (119cc <sys_arch_reboot+0x20>)
   119b4:	68ca      	ldr	r2, [r1, #12]
   119b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   119ba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   119bc:	60cb      	str	r3, [r1, #12]
   119be:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   119c2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   119c4:	e7fd      	b.n	119c2 <sys_arch_reboot+0x16>
   119c6:	bf00      	nop
   119c8:	e000ed00 	.word	0xe000ed00
   119cc:	05fa0004 	.word	0x05fa0004

000119d0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   119d0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   119d2:	2120      	movs	r1, #32
   119d4:	4803      	ldr	r0, [pc, #12]	; (119e4 <z_arm_interrupt_init+0x14>)
   119d6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   119d8:	3301      	adds	r3, #1
   119da:	2b41      	cmp	r3, #65	; 0x41
   119dc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   119e0:	d1f9      	bne.n	119d6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   119e2:	4770      	bx	lr
   119e4:	e000e100 	.word	0xe000e100

000119e8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   119e8:	b508      	push	{r3, lr}
	if (_current == thread) {
   119ea:	4b0e      	ldr	r3, [pc, #56]	; (11a24 <z_impl_k_thread_abort+0x3c>)
   119ec:	689b      	ldr	r3, [r3, #8]
   119ee:	4283      	cmp	r3, r0
   119f0:	d107      	bne.n	11a02 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   119f2:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   119f6:	b193      	cbz	r3, 11a1e <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   119f8:	4a0b      	ldr	r2, [pc, #44]	; (11a28 <z_impl_k_thread_abort+0x40>)
   119fa:	6853      	ldr	r3, [r2, #4]
   119fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11a00:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   11a02:	f008 fb99 	bl	1a138 <z_thread_single_abort>
	__asm__ volatile(
   11a06:	f04f 0320 	mov.w	r3, #32
   11a0a:	f3ef 8011 	mrs	r0, BASEPRI
   11a0e:	f383 8811 	msr	BASEPRI, r3
   11a12:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   11a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   11a1a:	f00e ba67 	b.w	1feec <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   11a1e:	f008 fe83 	bl	1a728 <z_self_abort>
   11a22:	bf00      	nop
   11a24:	200187a0 	.word	0x200187a0
   11a28:	e000ed00 	.word	0xe000ed00

00011a2c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   11a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11a2e:	4c09      	ldr	r4, [pc, #36]	; (11a54 <z_arm_configure_static_mpu_regions+0x28>)
   11a30:	4a09      	ldr	r2, [pc, #36]	; (11a58 <z_arm_configure_static_mpu_regions+0x2c>)
   11a32:	4623      	mov	r3, r4
   11a34:	2101      	movs	r1, #1
   11a36:	4809      	ldr	r0, [pc, #36]	; (11a5c <z_arm_configure_static_mpu_regions+0x30>)
   11a38:	f000 f938 	bl	11cac <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11a3c:	2300      	movs	r3, #0
   11a3e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   11a40:	4b07      	ldr	r3, [pc, #28]	; (11a60 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11a42:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11a44:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11a46:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11a48:	9301      	str	r3, [sp, #4]
   11a4a:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11a4c:	f000 f938 	bl	11cc0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   11a50:	b004      	add	sp, #16
   11a52:	bd10      	pop	{r4, pc}
   11a54:	20040000 	.word	0x20040000
   11a58:	20014500 	.word	0x20014500
   11a5c:	00020fd0 	.word	0x00020fd0
   11a60:	20014938 	.word	0x20014938

00011a64 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   11a64:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11a66:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   11a68:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11a6a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   11a6e:	f004 031f 	and.w	r3, r4, #31
   11a72:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11a74:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11a76:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11a78:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   11a7c:	4904      	ldr	r1, [pc, #16]	; (11a90 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11a7e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   11a82:	f043 0301 	orr.w	r3, r3, #1
   11a86:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   11a88:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   11a8a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   11a8c:	bd10      	pop	{r4, pc}
   11a8e:	bf00      	nop
   11a90:	e000ed90 	.word	0xe000ed90

00011a94 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   11a94:	280f      	cmp	r0, #15
{
   11a96:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
   11a98:	d90d      	bls.n	11ab6 <region_allocate_and_init+0x22>
   11a9a:	4b08      	ldr	r3, [pc, #32]	; (11abc <region_allocate_and_init+0x28>)
   11a9c:	4a08      	ldr	r2, [pc, #32]	; (11ac0 <region_allocate_and_init+0x2c>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   11a9e:	4601      	mov	r1, r0
   11aa0:	1ad2      	subs	r2, r2, r3
   11aa2:	08d2      	lsrs	r2, r2, #3
   11aa4:	0192      	lsls	r2, r2, #6
   11aa6:	4807      	ldr	r0, [pc, #28]	; (11ac4 <region_allocate_and_init+0x30>)
   11aa8:	f042 0201 	orr.w	r2, r2, #1
   11aac:	f00a fdbb 	bl	1c626 <log_1>
		return -EINVAL;
   11ab0:	f06f 0015 	mvn.w	r0, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   11ab4:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   11ab6:	f7ff ffd5 	bl	11a64 <region_init>
	return index;
   11aba:	e7fb      	b.n	11ab4 <region_allocate_and_init+0x20>
   11abc:	00020e58 	.word	0x00020e58
   11ac0:	00020ea8 	.word	0x00020ea8
   11ac4:	0002247d 	.word	0x0002247d

00011ac8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11acc:	4689      	mov	r9, r1
   11ace:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11ad0:	4606      	mov	r6, r0
   11ad2:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   11ad6:	4d54      	ldr	r5, [pc, #336]	; (11c28 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11ad8:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   11ada:	45c8      	cmp	r8, r9
   11adc:	da33      	bge.n	11b46 <mpu_configure_regions_and_partition.constprop.0+0x7e>
		if (regions[i].size == 0U) {
   11ade:	f8d6 a004 	ldr.w	sl, [r6, #4]
   11ae2:	f1ba 0f00 	cmp.w	sl, #0
   11ae6:	d04d      	beq.n	11b84 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
   11ae8:	f1ba 0f1f 	cmp.w	sl, #31
   11aec:	d91e      	bls.n	11b2c <mpu_configure_regions_and_partition.constprop.0+0x64>
		&&
   11aee:	f01a 0f1f 	tst.w	sl, #31
   11af2:	d11b      	bne.n	11b2c <mpu_configure_regions_and_partition.constprop.0+0x64>
		((part->start &
   11af4:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   11af8:	f01b 0f1f 	tst.w	fp, #31
   11afc:	d116      	bne.n	11b2c <mpu_configure_regions_and_partition.constprop.0+0x64>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11afe:	4658      	mov	r0, fp
   11b00:	f00b f9f8 	bl	1cef4 <arm_cmse_mpu_region_get>
   11b04:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11b06:	eb0a 000b 	add.w	r0, sl, fp
   11b0a:	3801      	subs	r0, #1
   11b0c:	f00b f9f2 	bl	1cef4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11b10:	4287      	cmp	r7, r0
   11b12:	d01c      	beq.n	11b4e <mpu_configure_regions_and_partition.constprop.0+0x86>
	return -EINVAL;
   11b14:	f06f 0715 	mvn.w	r7, #21
   11b18:	4a44      	ldr	r2, [pc, #272]	; (11c2c <mpu_configure_regions_and_partition.constprop.0+0x164>)
   11b1a:	4b45      	ldr	r3, [pc, #276]	; (11c30 <mpu_configure_regions_and_partition.constprop.0+0x168>)
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   11b1c:	4639      	mov	r1, r7
   11b1e:	1ad2      	subs	r2, r2, r3
   11b20:	08d2      	lsrs	r2, r2, #3
   11b22:	0192      	lsls	r2, r2, #6
   11b24:	4843      	ldr	r0, [pc, #268]	; (11c34 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   11b26:	f042 0201 	orr.w	r2, r2, #1
   11b2a:	e008      	b.n	11b3e <mpu_configure_regions_and_partition.constprop.0+0x76>
			LOG_ERR("Partition %u: sanity check failed.", i);
   11b2c:	4641      	mov	r1, r8
   11b2e:	4a3f      	ldr	r2, [pc, #252]	; (11c2c <mpu_configure_regions_and_partition.constprop.0+0x164>)
   11b30:	4b3f      	ldr	r3, [pc, #252]	; (11c30 <mpu_configure_regions_and_partition.constprop.0+0x168>)
   11b32:	4841      	ldr	r0, [pc, #260]	; (11c38 <mpu_configure_regions_and_partition.constprop.0+0x170>)
   11b34:	1ad2      	subs	r2, r2, r3
   11b36:	08d2      	lsrs	r2, r2, #3
   11b38:	0192      	lsls	r2, r2, #6
   11b3a:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   11b3e:	f00a fd72 	bl	1c626 <log_1>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   11b42:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   11b46:	4620      	mov	r0, r4
   11b48:	b005      	add	sp, #20
   11b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   11b4e:	f117 0f16 	cmn.w	r7, #22
   11b52:	d0e1      	beq.n	11b18 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
   11b54:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   11b56:	42bb      	cmp	r3, r7
   11b58:	dbde      	blt.n	11b18 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   11b5a:	60af      	str	r7, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   11b5c:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
   11b5e:	60af      	str	r7, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   11b60:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   11b62:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   11b66:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   11b6a:	e9d6 3200 	ldrd	r3, r2, [r6]
   11b6e:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   11b70:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   11b72:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   11b76:	d11a      	bne.n	11bae <mpu_configure_regions_and_partition.constprop.0+0xe6>
   11b78:	45d3      	cmp	fp, sl
   11b7a:	d107      	bne.n	11b8c <mpu_configure_regions_and_partition.constprop.0+0xc4>
			mpu_configure_region(u_reg_index, &regions[i]);
   11b7c:	4631      	mov	r1, r6
   11b7e:	b2f8      	uxtb	r0, r7
   11b80:	f00b f99f 	bl	1cec2 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   11b84:	f108 0801 	add.w	r8, r8, #1
   11b88:	360c      	adds	r6, #12
   11b8a:	e7a6      	b.n	11ada <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   11b8c:	4631      	mov	r1, r6
	MPU->RNR = index;
   11b8e:	60af      	str	r7, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   11b90:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   11b92:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   11b96:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   11b9a:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   11b9c:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
   11b9e:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   11ba0:	f00b f98f 	bl	1cec2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11ba4:	f110 0f16 	cmn.w	r0, #22
   11ba8:	d0cb      	beq.n	11b42 <mpu_configure_regions_and_partition.constprop.0+0x7a>
			reg_index++;
   11baa:	1c44      	adds	r4, r0, #1
   11bac:	e7ea      	b.n	11b84 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		} else if (reg_last == u_reg_last) {
   11bae:	3b01      	subs	r3, #1
   11bb0:	45d3      	cmp	fp, sl
   11bb2:	b2e0      	uxtb	r0, r4
   11bb4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   11bb8:	60af      	str	r7, [r5, #8]
		} else if (reg_last == u_reg_last) {
   11bba:	d106      	bne.n	11bca <mpu_configure_regions_and_partition.constprop.0+0x102>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   11bbc:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   11bbe:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   11bc0:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   11bc4:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   11bc6:	612b      	str	r3, [r5, #16]
			reg_index =
   11bc8:	e7ea      	b.n	11ba0 <mpu_configure_regions_and_partition.constprop.0+0xd8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   11bca:	6929      	ldr	r1, [r5, #16]
   11bcc:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   11bd0:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   11bd2:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   11bd4:	4631      	mov	r1, r6
   11bd6:	f00b f974 	bl	1cec2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11bda:	f110 0f16 	cmn.w	r0, #22
   11bde:	d0b0      	beq.n	11b42 <mpu_configure_regions_and_partition.constprop.0+0x7a>
	MPU->RNR = index;
   11be0:	60af      	str	r7, [r5, #8]
	attr->rbar = MPU->RBAR &
   11be2:	68ea      	ldr	r2, [r5, #12]
   11be4:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   11be8:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   11bec:	f362 0304 	bfi	r3, r2, #0, #5
   11bf0:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   11bf4:	692b      	ldr	r3, [r5, #16]
   11bf6:	f89d 2008 	ldrb.w	r2, [sp, #8]
   11bfa:	085b      	lsrs	r3, r3, #1
   11bfc:	f363 1247 	bfi	r2, r3, #5, #3
   11c00:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
   11c04:	e9d6 3200 	ldrd	r3, r2, [r6]
   11c08:	4413      	add	r3, r2
   11c0a:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   11c0c:	f023 031f 	bic.w	r3, r3, #31
   11c10:	445b      	add	r3, fp
   11c12:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   11c16:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   11c18:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   11c1c:	4669      	mov	r1, sp
   11c1e:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   11c20:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   11c22:	f7ff ff37 	bl	11a94 <region_allocate_and_init>
   11c26:	e7bd      	b.n	11ba4 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   11c28:	e000ed90 	.word	0xe000ed90
   11c2c:	00020ea8 	.word	0x00020ea8
   11c30:	00020e58 	.word	0x00020e58
   11c34:	000224c6 	.word	0x000224c6
   11c38:	000224a3 	.word	0x000224a3

00011c3c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11c3c:	2205      	movs	r2, #5
   11c3e:	4b03      	ldr	r3, [pc, #12]	; (11c4c <arm_core_mpu_enable+0x10>)
   11c40:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   11c42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11c46:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11c4a:	4770      	bx	lr
   11c4c:	e000ed90 	.word	0xe000ed90

00011c50 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   11c50:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11c54:	2200      	movs	r2, #0
   11c56:	4b01      	ldr	r3, [pc, #4]	; (11c5c <arm_core_mpu_disable+0xc>)
   11c58:	605a      	str	r2, [r3, #4]
}
   11c5a:	4770      	bx	lr
   11c5c:	e000ed90 	.word	0xe000ed90

00011c60 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   11c60:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11c62:	4c0e      	ldr	r4, [pc, #56]	; (11c9c <arm_mpu_init+0x3c>)
   11c64:	6825      	ldr	r5, [r4, #0]
   11c66:	2d10      	cmp	r5, #16
   11c68:	d814      	bhi.n	11c94 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   11c6a:	f7ff fff1 	bl	11c50 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11c6e:	2000      	movs	r0, #0
	MPU->MAIR0 =
   11c70:	4b0b      	ldr	r3, [pc, #44]	; (11ca0 <arm_mpu_init+0x40>)
   11c72:	4a0c      	ldr	r2, [pc, #48]	; (11ca4 <arm_mpu_init+0x44>)
   11c74:	631a      	str	r2, [r3, #48]	; 0x30
   11c76:	4285      	cmp	r5, r0
   11c78:	d105      	bne.n	11c86 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   11c7a:	4b0b      	ldr	r3, [pc, #44]	; (11ca8 <arm_mpu_init+0x48>)
   11c7c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   11c7e:	f7ff ffdd 	bl	11c3c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   11c82:	2000      	movs	r0, #0
}
   11c84:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   11c86:	6861      	ldr	r1, [r4, #4]
   11c88:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   11c8c:	f7ff feea 	bl	11a64 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11c90:	3001      	adds	r0, #1
   11c92:	e7f0      	b.n	11c76 <arm_mpu_init+0x16>
		return -1;
   11c94:	f04f 30ff 	mov.w	r0, #4294967295
   11c98:	e7f4      	b.n	11c84 <arm_mpu_init+0x24>
   11c9a:	bf00      	nop
   11c9c:	00020fdc 	.word	0x00020fdc
   11ca0:	e000ed90 	.word	0xe000ed90
   11ca4:	0044ffaa 	.word	0x0044ffaa
   11ca8:	2001a417 	.word	0x2001a417

00011cac <arm_core_mpu_configure_static_mpu_regions>:
{
   11cac:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11cae:	4c03      	ldr	r4, [pc, #12]	; (11cbc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   11cb0:	7822      	ldrb	r2, [r4, #0]
   11cb2:	f7ff ff09 	bl	11ac8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11cb6:	7020      	strb	r0, [r4, #0]
}
   11cb8:	bd10      	pop	{r4, pc}
   11cba:	bf00      	nop
   11cbc:	2001a417 	.word	0x2001a417

00011cc0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   11cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cc4:	4d26      	ldr	r5, [pc, #152]	; (11d60 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   11cc6:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11cc8:	4606      	mov	r6, r0
   11cca:	f04f 0800 	mov.w	r8, #0
   11cce:	46ab      	mov	fp, r5
	MPU->RNR = index;
   11cd0:	4f24      	ldr	r7, [pc, #144]	; (11d64 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11cd2:	45d0      	cmp	r8, sl
   11cd4:	da1b      	bge.n	11d0e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   11cd6:	f8d6 9004 	ldr.w	r9, [r6, #4]
   11cda:	f1b9 0f00 	cmp.w	r9, #0
   11cde:	d039      	beq.n	11d54 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   11ce0:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11ce2:	4608      	mov	r0, r1
   11ce4:	9101      	str	r1, [sp, #4]
   11ce6:	f00b f905 	bl	1cef4 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11cea:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11cec:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11cee:	eb09 0001 	add.w	r0, r9, r1
   11cf2:	3801      	subs	r0, #1
   11cf4:	f00b f8fe 	bl	1cef4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11cf8:	4284      	cmp	r4, r0
   11cfa:	f04f 0214 	mov.w	r2, #20
   11cfe:	4b1a      	ldr	r3, [pc, #104]	; (11d68 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   11d00:	d008      	beq.n	11d14 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   11d02:	f06f 0315 	mvn.w	r3, #21
   11d06:	fb02 f808 	mul.w	r8, r2, r8
   11d0a:	f84b 3008 	str.w	r3, [fp, r8]
}
   11d0e:	b003      	add	sp, #12
   11d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   11d14:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   11d18:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   11d1a:	d0f8      	beq.n	11d0e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   11d1c:	7819      	ldrb	r1, [r3, #0]
   11d1e:	42a1      	cmp	r1, r4
   11d20:	ddf5      	ble.n	11d0e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   11d22:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   11d26:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   11d28:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   11d2a:	68fc      	ldr	r4, [r7, #12]
   11d2c:	f100 0108 	add.w	r1, r0, #8
   11d30:	7b00      	ldrb	r0, [r0, #12]
   11d32:	f364 0004 	bfi	r0, r4, #0, #5
   11d36:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   11d38:	6938      	ldr	r0, [r7, #16]
   11d3a:	790c      	ldrb	r4, [r1, #4]
   11d3c:	0840      	lsrs	r0, r0, #1
   11d3e:	f360 1447 	bfi	r4, r0, #5, #3
   11d42:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   11d44:	68f9      	ldr	r1, [r7, #12]
   11d46:	f021 011f 	bic.w	r1, r1, #31
   11d4a:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   11d4c:	6939      	ldr	r1, [r7, #16]
   11d4e:	f021 011f 	bic.w	r1, r1, #31
   11d52:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11d54:	f108 0801 	add.w	r8, r8, #1
   11d58:	3514      	adds	r5, #20
   11d5a:	360c      	adds	r6, #12
   11d5c:	e7b9      	b.n	11cd2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   11d5e:	bf00      	nop
   11d60:	20018130 	.word	0x20018130
   11d64:	e000ed90 	.word	0xe000ed90
   11d68:	2001a417 	.word	0x2001a417

00011d6c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   11d6c:	4b01      	ldr	r3, [pc, #4]	; (11d74 <__stdout_hook_install+0x8>)
   11d6e:	6018      	str	r0, [r3, #0]
}
   11d70:	4770      	bx	lr
   11d72:	bf00      	nop
   11d74:	20014508 	.word	0x20014508

00011d78 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   11d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d7a:	460d      	mov	r5, r1
   11d7c:	4f09      	ldr	r7, [pc, #36]	; (11da4 <z_impl_zephyr_write_stdout+0x2c>)
   11d7e:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   11d80:	f1c0 0401 	rsb	r4, r0, #1
   11d84:	19a3      	adds	r3, r4, r6
   11d86:	429d      	cmp	r5, r3
   11d88:	dc01      	bgt.n	11d8e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   11d8a:	4628      	mov	r0, r5
   11d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   11d8e:	7873      	ldrb	r3, [r6, #1]
   11d90:	2b0a      	cmp	r3, #10
   11d92:	d102      	bne.n	11d9a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   11d94:	200d      	movs	r0, #13
   11d96:	683b      	ldr	r3, [r7, #0]
   11d98:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   11d9a:	683b      	ldr	r3, [r7, #0]
   11d9c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   11da0:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   11da2:	e7ef      	b.n	11d84 <z_impl_zephyr_write_stdout+0xc>
   11da4:	20014508 	.word	0x20014508

00011da8 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   11da8:	b510      	push	{r4, lr}
   11daa:	4604      	mov	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   11dac:	f04f 32ff 	mov.w	r2, #4294967295
   11db0:	f04f 33ff 	mov.w	r3, #4294967295
   11db4:	480a      	ldr	r0, [pc, #40]	; (11de0 <_sbrk+0x38>)
   11db6:	f00a f8e0 	bl	1bf7a <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11dba:	490a      	ldr	r1, [pc, #40]	; (11de4 <_sbrk+0x3c>)
   11dbc:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   11dbe:	18e0      	adds	r0, r4, r3
   11dc0:	4c09      	ldr	r4, [pc, #36]	; (11de8 <_sbrk+0x40>)
   11dc2:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   11dc6:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   11dca:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   11dcc:	bf2e      	itee	cs
   11dce:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11dd2:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   11dd4:	6008      	strcc	r0, [r1, #0]
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   11dd6:	4802      	ldr	r0, [pc, #8]	; (11de0 <_sbrk+0x38>)
   11dd8:	f00a f8ca 	bl	1bf70 <sys_sem_give>

	return ret;
}
   11ddc:	4620      	mov	r0, r4
   11dde:	bd10      	pop	{r4, pc}
   11de0:	200148d0 	.word	0x200148d0
   11de4:	20018144 	.word	0x20018144
   11de8:	200204b0 	.word	0x200204b0

00011dec <__chk_fail>:
	return z_impl_zephyr_write_stdout(buf, nbytes);
   11dec:	211d      	movs	r1, #29
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   11dee:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   11df0:	4804      	ldr	r0, [pc, #16]	; (11e04 <__chk_fail+0x18>)
   11df2:	f7ff ffc1 	bl	11d78 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   11df6:	4040      	eors	r0, r0
   11df8:	f380 8811 	msr	BASEPRI, r0
   11dfc:	f04f 0003 	mov.w	r0, #3
   11e00:	df02      	svc	2
	CODE_UNREACHABLE;
   11e02:	bf00      	nop
   11e04:	000224e9 	.word	0x000224e9

00011e08 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   11e08:	b538      	push	{r3, r4, r5, lr}
   11e0a:	4c08      	ldr	r4, [pc, #32]	; (11e2c <net_if_init+0x24>)

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   11e0c:	4d08      	ldr	r5, [pc, #32]	; (11e30 <net_if_init+0x28>)
   11e0e:	42ac      	cmp	r4, r5
   11e10:	4620      	mov	r0, r4
   11e12:	d300      	bcc.n	11e16 <net_if_init+0xe>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   11e14:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   11e16:	6803      	ldr	r3, [r0, #0]
   11e18:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   11e1a:	681b      	ldr	r3, [r3, #0]
   11e1c:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   11e1e:	2b00      	cmp	r3, #0
   11e20:	d0f5      	beq.n	11e0e <net_if_init+0x6>
   11e22:	681b      	ldr	r3, [r3, #0]
   11e24:	2b00      	cmp	r3, #0
   11e26:	d0f2      	beq.n	11e0e <net_if_init+0x6>
	api->init(iface);
   11e28:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   11e2a:	e7f0      	b.n	11e0e <net_if_init+0x6>
   11e2c:	20014918 	.word	0x20014918
   11e30:	2001491c 	.word	0x2001491c

00011e34 <net_if_post_init>:

void net_if_post_init(void)
{
   11e34:	b538      	push	{r3, r4, r5, lr}
   11e36:	4c08      	ldr	r4, [pc, #32]	; (11e58 <net_if_post_init+0x24>)
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   11e38:	4d08      	ldr	r5, [pc, #32]	; (11e5c <net_if_post_init+0x28>)
   11e3a:	42ac      	cmp	r4, r5
   11e3c:	4620      	mov	r0, r4
   11e3e:	d300      	bcc.n	11e42 <net_if_post_init+0xe>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   11e40:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11e42:	6803      	ldr	r3, [r0, #0]
   11e44:	3404      	adds	r4, #4
   11e46:	330c      	adds	r3, #12
   11e48:	e8d3 3faf 	lda	r3, [r3]
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   11e4c:	071b      	lsls	r3, r3, #28
   11e4e:	d4f4      	bmi.n	11e3a <net_if_post_init+0x6>
			net_if_up(iface);
   11e50:	f00b f878 	bl	1cf44 <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   11e54:	e7f1      	b.n	11e3a <net_if_post_init+0x6>
   11e56:	bf00      	nop
   11e58:	20014918 	.word	0x20014918
   11e5c:	2001491c 	.word	0x2001491c

00011e60 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   11e60:	2300      	movs	r3, #0
{
   11e62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   11e66:	2802      	cmp	r0, #2
{
   11e68:	b089      	sub	sp, #36	; 0x24
   11e6a:	4607      	mov	r7, r0
   11e6c:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   11e6e:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   11e72:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   11e74:	d13e      	bne.n	11ef4 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   11e76:	a806      	add	r0, sp, #24
   11e78:	9105      	str	r1, [sp, #20]
   11e7a:	4601      	mov	r1, r0
{
   11e7c:	461a      	mov	r2, r3
   11e7e:	e006      	b.n	11e8e <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   11e80:	780c      	ldrb	r4, [r1, #0]
   11e82:	3201      	adds	r2, #1
   11e84:	3401      	adds	r4, #1
   11e86:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   11e88:	b2d4      	uxtb	r4, r2
   11e8a:	2c07      	cmp	r4, #7
   11e8c:	d804      	bhi.n	11e98 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   11e8e:	9c04      	ldr	r4, [sp, #16]
   11e90:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   11e94:	2c00      	cmp	r4, #0
   11e96:	d0f3      	beq.n	11e80 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   11e98:	3301      	adds	r3, #1
   11e9a:	2b08      	cmp	r3, #8
   11e9c:	f101 0101 	add.w	r1, r1, #1
   11ea0:	d1ec      	bne.n	11e7c <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   11ea2:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   11ea6:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   11eaa:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   11eac:	f810 2b01 	ldrb.w	r2, [r0], #1
   11eb0:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   11eb2:	bf88      	it	hi
   11eb4:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   11eb8:	f103 0301 	add.w	r3, r3, #1
   11ebc:	b2db      	uxtb	r3, r3
				pos = i;
   11ebe:	bf88      	it	hi
   11ec0:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   11ec2:	2b08      	cmp	r3, #8
   11ec4:	d1f2      	bne.n	11eac <z_impl_net_addr_ntop+0x4c>
		len = 8;
   11ec6:	469b      	mov	fp, r3
   11ec8:	f1b9 0f01 	cmp.w	r9, #1
   11ecc:	f04f 033a 	mov.w	r3, #58	; 0x3a
   11ed0:	bf08      	it	eq
   11ed2:	f04f 38ff 	moveq.w	r8, #4294967295
   11ed6:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   11ed8:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   11eda:	4634      	mov	r4, r6
   11edc:	460d      	mov	r5, r1
   11ede:	455d      	cmp	r5, fp
   11ee0:	db17      	blt.n	11f12 <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   11ee2:	42b4      	cmp	r4, r6
   11ee4:	d008      	beq.n	11ef8 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   11ee6:	2300      	movs	r3, #0
   11ee8:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   11eea:	bf0c      	ite	eq
   11eec:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   11ef0:	7023      	strbne	r3, [r4, #0]
   11ef2:	e002      	b.n	11efa <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   11ef4:	2801      	cmp	r0, #1
   11ef6:	d004      	beq.n	11f02 <z_impl_net_addr_ntop+0xa2>
		return NULL;
   11ef8:	2600      	movs	r6, #0
	}

	return dst;
}
   11efa:	4630      	mov	r0, r6
   11efc:	b009      	add	sp, #36	; 0x24
   11efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   11f02:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   11f04:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   11f08:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   11f0c:	4681      	mov	r9, r0
		delim = '.';
   11f0e:	9303      	str	r3, [sp, #12]
   11f10:	e7e2      	b.n	11ed8 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   11f12:	f1bb 0f04 	cmp.w	fp, #4
   11f16:	d13b      	bne.n	11f90 <z_impl_net_addr_ntop+0x130>
			value = (uint32_t)addr->s4_addr[i];
   11f18:	9b04      	ldr	r3, [sp, #16]
   11f1a:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   11f1c:	b94a      	cbnz	r2, 11f32 <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   11f1e:	2330      	movs	r3, #48	; 0x30
   11f20:	4620      	mov	r0, r4
   11f22:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   11f26:	9b03      	ldr	r3, [sp, #12]
   11f28:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   11f2a:	3501      	adds	r5, #1
   11f2c:	4604      	mov	r4, r0
   11f2e:	b2ed      	uxtb	r5, r5
   11f30:	e7d5      	b.n	11ede <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   11f32:	f04f 0e09 	mov.w	lr, #9
   11f36:	f04f 0a00 	mov.w	sl, #0
   11f3a:	e9cd 2401 	strd	r2, r4, [sp, #4]
   11f3e:	483a      	ldr	r0, [pc, #232]	; (12028 <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   11f40:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   11f44:	45f2      	cmp	sl, lr
		value = value % divisor;
   11f46:	fbbc f2f0 	udiv	r2, ip, r0
   11f4a:	fb00 c212 	mls	r2, r0, r2, ip
   11f4e:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   11f50:	dc01      	bgt.n	11f56 <z_impl_net_addr_ntop+0xf6>
   11f52:	4584      	cmp	ip, r0
   11f54:	d308      	bcc.n	11f68 <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   11f56:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   11f5a:	46f2      	mov	sl, lr
   11f5c:	9b02      	ldr	r3, [sp, #8]
   11f5e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   11f62:	f803 cb01 	strb.w	ip, [r3], #1
   11f66:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   11f68:	220a      	movs	r2, #10
   11f6a:	f10e 3eff 	add.w	lr, lr, #4294967295
   11f6e:	f1be 3fff 	cmp.w	lr, #4294967295
   11f72:	fbb0 f0f2 	udiv	r0, r0, r2
   11f76:	d1e3      	bne.n	11f40 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   11f78:	f04f 0200 	mov.w	r2, #0
   11f7c:	9b02      	ldr	r3, [sp, #8]
   11f7e:	701a      	strb	r2, [r3, #0]
	return buf - start;
   11f80:	1b1b      	subs	r3, r3, r4
			ptr += l;
   11f82:	b2da      	uxtb	r2, r3
   11f84:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   11f88:	1c58      	adds	r0, r3, #1
   11f8a:	9b03      	ldr	r3, [sp, #12]
   11f8c:	54a3      	strb	r3, [r4, r2]
			continue;
   11f8e:	e7cc      	b.n	11f2a <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   11f90:	45a8      	cmp	r8, r5
   11f92:	d110      	bne.n	11fb6 <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   11f94:	b911      	cbnz	r1, 11f9c <z_impl_net_addr_ntop+0x13c>
   11f96:	f1b8 0f00 	cmp.w	r8, #0
   11f9a:	d102      	bne.n	11fa2 <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   11f9c:	233a      	movs	r3, #58	; 0x3a
   11f9e:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   11fa2:	233a      	movs	r3, #58	; 0x3a
   11fa4:	4620      	mov	r0, r4
   11fa6:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   11faa:	f109 33ff 	add.w	r3, r9, #4294967295
   11fae:	441d      	add	r5, r3
			needcolon = false;
   11fb0:	2100      	movs	r1, #0
			i += longest - 1U;
   11fb2:	b2ed      	uxtb	r5, r5
			continue;
   11fb4:	e7b9      	b.n	11f2a <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   11fb6:	b111      	cbz	r1, 11fbe <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   11fb8:	233a      	movs	r3, #58	; 0x3a
   11fba:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   11fbe:	9b05      	ldr	r3, [sp, #20]
   11fc0:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   11fc4:	0219      	lsls	r1, r3, #8
   11fc6:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   11fca:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   11fce:	b20a      	sxth	r2, r1
		bh = value >> 8;
   11fd0:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   11fd4:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   11fd8:	d016      	beq.n	12008 <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   11fda:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   11fdc:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   11fde:	d90b      	bls.n	11ff8 <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   11fe0:	2300      	movs	r3, #0
   11fe2:	2261      	movs	r2, #97	; 0x61
   11fe4:	4620      	mov	r0, r4
   11fe6:	f00a ffde 	bl	1cfa6 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   11fea:	2301      	movs	r3, #1
   11fec:	2261      	movs	r2, #97	; 0x61
   11fee:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   11ff0:	f00a ffd9 	bl	1cfa6 <net_byte_to_hex>
		needcolon = true;
   11ff4:	2101      	movs	r1, #1
   11ff6:	e798      	b.n	11f2a <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   11ff8:	b25b      	sxtb	r3, r3
   11ffa:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   11ffc:	bf94      	ite	ls
   11ffe:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   12000:	3357      	addhi	r3, #87	; 0x57
   12002:	1c60      	adds	r0, r4, #1
   12004:	7023      	strb	r3, [r4, #0]
   12006:	e7f0      	b.n	11fea <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   12008:	f1ba 0f0f 	cmp.w	sl, #15
   1200c:	d903      	bls.n	12016 <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1200e:	2261      	movs	r2, #97	; 0x61
   12010:	4651      	mov	r1, sl
   12012:	4620      	mov	r0, r4
   12014:	e7ec      	b.n	11ff0 <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   12016:	b253      	sxtb	r3, r2
   12018:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   1201c:	bf94      	ite	ls
   1201e:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   12020:	3357      	addhi	r3, #87	; 0x57
   12022:	1c60      	adds	r0, r4, #1
   12024:	7023      	strb	r3, [r4, #0]
   12026:	e7e5      	b.n	11ff4 <z_impl_net_addr_ntop+0x194>
   12028:	3b9aca00 	.word	0x3b9aca00

0001202c <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   1202c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   12030:	680d      	ldr	r5, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   12032:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   12036:	4b3b      	ldr	r3, [pc, #236]	; (12124 <connect_request_encode+0xf8>)
   12038:	4a3b      	ldr	r2, [pc, #236]	; (12128 <connect_request_encode+0xfc>)
{
   1203a:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1203c:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   12040:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   12042:	2804      	cmp	r0, #4
   12044:	bf0c      	ite	eq
   12046:	4610      	moveq	r0, r2
   12048:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1204a:	600d      	str	r5, [r1, #0]
{
   1204c:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1204e:	f00b f891 	bl	1d174 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   12052:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   12056:	4603      	mov	r3, r0
   12058:	b938      	cbnz	r0, 1206a <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1205a:	e9d8 2000 	ldrd	r2, r0, [r8]
   1205e:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   12060:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   12064:	d104      	bne.n	12070 <connect_request_encode+0x44>
		return -ENOMEM;
   12066:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   1206a:	4618      	mov	r0, r3
   1206c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   12070:	1c50      	adds	r0, r2, #1
   12072:	f8c8 0000 	str.w	r0, [r8]
   12076:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   12078:	e9d8 6200 	ldrd	r6, r2, [r8]
   1207c:	4296      	cmp	r6, r2
   1207e:	d0f2      	beq.n	12066 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   12080:	1c72      	adds	r2, r6, #1
   12082:	f8c8 2000 	str.w	r2, [r8]
   12086:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   12088:	4641      	mov	r1, r8
   1208a:	f8b7 005c 	ldrh.w	r0, [r7, #92]	; 0x5c
   1208e:	f00b f85f 	bl	1d150 <pack_uint16>
	if (err_code != 0) {
   12092:	4603      	mov	r3, r0
   12094:	2800      	cmp	r0, #0
   12096:	d1e8      	bne.n	1206a <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   12098:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1209c:	f00b f86a 	bl	1d174 <pack_utf8_str>
	if (err_code != 0) {
   120a0:	4603      	mov	r3, r0
   120a2:	2800      	cmp	r0, #0
   120a4:	d1e1      	bne.n	1206a <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   120a6:	6c38      	ldr	r0, [r7, #64]	; 0x40
	uint8_t connect_flags = client->clean_session << 1;
   120a8:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   120aa:	b1d8      	cbz	r0, 120e4 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   120ac:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   120b0:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   120b4:	f003 0301 	and.w	r3, r3, #1
   120b8:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   120bc:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   120be:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   120c0:	00db      	lsls	r3, r3, #3
   120c2:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   120c6:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   120c8:	f00b f854 	bl	1d174 <pack_utf8_str>
		if (err_code != 0) {
   120cc:	4603      	mov	r3, r0
   120ce:	2800      	cmp	r0, #0
   120d0:	d1cb      	bne.n	1206a <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   120d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
			err_code = pack_utf8_str(client->will_message, buf);
   120d4:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   120d6:	b30b      	cbz	r3, 1211c <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   120d8:	4618      	mov	r0, r3
   120da:	f00b f84b 	bl	1d174 <pack_utf8_str>
			if (err_code != 0) {
   120de:	4603      	mov	r3, r0
   120e0:	2800      	cmp	r0, #0
   120e2:	d1c2      	bne.n	1206a <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   120e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   120e6:	b138      	cbz	r0, 120f8 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   120e8:	4641      	mov	r1, r8
   120ea:	f00b f843 	bl	1d174 <pack_utf8_str>
		if (err_code != 0) {
   120ee:	4603      	mov	r3, r0
   120f0:	2800      	cmp	r0, #0
   120f2:	d1ba      	bne.n	1206a <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   120f4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   120f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   120fa:	b138      	cbz	r0, 1210c <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   120fc:	4641      	mov	r1, r8
   120fe:	f00b f839 	bl	1d174 <pack_utf8_str>
		if (err_code != 0) {
   12102:	4603      	mov	r3, r0
   12104:	2800      	cmp	r0, #0
   12106:	d1b0      	bne.n	1206a <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   12108:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   1210c:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   1210e:	4642      	mov	r2, r8
   12110:	4629      	mov	r1, r5
}
   12112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   12116:	2010      	movs	r0, #16
   12118:	f00b b847 	b.w	1d1aa <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   1211c:	f00b f818 	bl	1d150 <pack_uint16>
   12120:	e7dd      	b.n	120de <connect_request_encode+0xb2>
   12122:	bf00      	nop
   12124:	00021004 	.word	0x00021004
   12128:	0002100c 	.word	0x0002100c

0001212c <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   1212c:	e9d0 2300 	ldrd	r2, r3, [r0]
   12130:	1a9b      	subs	r3, r3, r2
   12132:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12134:	bf81      	itttt	hi
   12136:	4b05      	ldrhi	r3, [pc, #20]	; (1214c <disconnect_encode+0x20>)
   12138:	881b      	ldrhhi	r3, [r3, #0]
   1213a:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   1213c:	6803      	ldrhi	r3, [r0, #0]
   1213e:	bf83      	ittte	hi
   12140:	3302      	addhi	r3, #2
   12142:	6043      	strhi	r3, [r0, #4]

	return 0;
   12144:	2000      	movhi	r0, #0
		return -ENOMEM;
   12146:	f06f 000b 	mvnls.w	r0, #11
}
   1214a:	4770      	bx	lr
   1214c:	0002251e 	.word	0x0002251e

00012150 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   12150:	e9d0 2300 	ldrd	r2, r3, [r0]
   12154:	1a9b      	subs	r3, r3, r2
   12156:	2b01      	cmp	r3, #1
   12158:	bf81      	itttt	hi
   1215a:	4b05      	ldrhi	r3, [pc, #20]	; (12170 <ping_request_encode+0x20>)
   1215c:	881b      	ldrhhi	r3, [r3, #0]
   1215e:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   12160:	6803      	ldrhi	r3, [r0, #0]
   12162:	bf83      	ittte	hi
   12164:	3302      	addhi	r3, #2
   12166:	6043      	strhi	r3, [r0, #4]

	return 0;
   12168:	2000      	movhi	r0, #0
		return -ENOMEM;
   1216a:	f06f 000b 	mvnls.w	r0, #11
}
   1216e:	4770      	bx	lr
   12170:	00022520 	.word	0x00022520

00012174 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   12174:	2314      	movs	r3, #20
   12176:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1217a:	4353      	muls	r3, r2
   1217c:	4a01      	ldr	r2, [pc, #4]	; (12184 <mqtt_transport_connect+0x10>)
   1217e:	58d3      	ldr	r3, [r2, r3]
   12180:	4718      	bx	r3
   12182:	bf00      	nop
   12184:	00021014 	.word	0x00021014

00012188 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   12188:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1218a:	2514      	movs	r5, #20
   1218c:	4c03      	ldr	r4, [pc, #12]	; (1219c <mqtt_transport_write+0x14>)
   1218e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   12192:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   12196:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   12198:	685b      	ldr	r3, [r3, #4]
   1219a:	4718      	bx	r3
   1219c:	00021014 	.word	0x00021014

000121a0 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   121a0:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   121a2:	2414      	movs	r4, #20
   121a4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   121a8:	4a03      	ldr	r2, [pc, #12]	; (121b8 <mqtt_transport_write_msg+0x18>)
   121aa:	fb04 2303 	mla	r3, r4, r3, r2
}
   121ae:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   121b2:	689b      	ldr	r3, [r3, #8]
   121b4:	4718      	bx	r3
   121b6:	bf00      	nop
   121b8:	00021014 	.word	0x00021014

000121bc <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   121bc:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   121be:	2614      	movs	r6, #20
   121c0:	4d04      	ldr	r5, [pc, #16]	; (121d4 <mqtt_transport_read+0x18>)
   121c2:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   121c6:	fb06 5404 	mla	r4, r6, r4, r5
   121ca:	68e4      	ldr	r4, [r4, #12]
   121cc:	46a4      	mov	ip, r4
							 shall_block);
}
   121ce:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   121d0:	4760      	bx	ip
   121d2:	bf00      	nop
   121d4:	00021014 	.word	0x00021014

000121d8 <sys_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   121d8:	68c2      	ldr	r2, [r0, #12]
{
   121da:	b508      	push	{r3, lr}
	if (mutex->kernel_mutex.lock_count == 0) {
   121dc:	b142      	cbz	r2, 121f0 <sys_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   121de:	4b07      	ldr	r3, [pc, #28]	; (121fc <sys_mutex_unlock+0x24>)
   121e0:	6882      	ldr	r2, [r0, #8]
   121e2:	689b      	ldr	r3, [r3, #8]
   121e4:	429a      	cmp	r2, r3
   121e6:	d106      	bne.n	121f6 <sys_mutex_unlock+0x1e>
	return z_impl_k_mutex_unlock(mutex);
   121e8:	f007 fd62 	bl	19cb0 <z_impl_k_mutex_unlock>
		return -EPERM;
	}

	k_mutex_unlock(&mutex->kernel_mutex);
	return 0;
   121ec:	2000      	movs	r0, #0
}
   121ee:	bd08      	pop	{r3, pc}
		return -EINVAL;
   121f0:	f06f 0015 	mvn.w	r0, #21
   121f4:	e7fb      	b.n	121ee <sys_mutex_unlock+0x16>
		return -EPERM;
   121f6:	f04f 30ff 	mov.w	r0, #4294967295
   121fa:	e7f8      	b.n	121ee <sys_mutex_unlock+0x16>
   121fc:	200187a0 	.word	0x200187a0

00012200 <z_impl_sys_rand32_get>:

static const struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
uint32_t z_impl_sys_rand32_get(void)
{
   12200:	b513      	push	{r0, r1, r4, lr}
	const struct device *dev = entropy_driver;
   12202:	4c0a      	ldr	r4, [pc, #40]	; (1222c <z_impl_sys_rand32_get+0x2c>)
   12204:	6820      	ldr	r0, [r4, #0]
	uint32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   12206:	b918      	cbnz	r0, 12210 <z_impl_sys_rand32_get+0x10>
   12208:	4809      	ldr	r0, [pc, #36]	; (12230 <z_impl_sys_rand32_get+0x30>)
   1220a:	f007 fa2f 	bl	1966c <z_impl_device_get_binding>
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		__ASSERT((dev != NULL),
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
   1220e:	6020      	str	r0, [r4, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   12210:	2204      	movs	r2, #4
   12212:	6883      	ldr	r3, [r0, #8]
   12214:	eb0d 0102 	add.w	r1, sp, r2
   12218:	681b      	ldr	r3, [r3, #0]
   1221a:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (uint8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   1221c:	2800      	cmp	r0, #0
   1221e:	da02      	bge.n	12226 <z_impl_sys_rand32_get+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   12220:	f7fe ff6e 	bl	11100 <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   12224:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   12226:	9801      	ldr	r0, [sp, #4]
   12228:	b002      	add	sp, #8
   1222a:	bd10      	pop	{r4, pc}
   1222c:	20018148 	.word	0x20018148
   12230:	00022529 	.word	0x00022529

00012234 <nrf_gpio_cfg_sense_set>:

NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   12234:	4a06      	ldr	r2, [pc, #24]	; (12250 <nrf_gpio_cfg_sense_set+0x1c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   12236:	f000 001f 	and.w	r0, r0, #31
   1223a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1223e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   12242:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   12246:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1224a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   1224e:	4770      	bx	lr
   12250:	40842500 	.word	0x40842500

00012254 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   12254:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   12256:	4b09      	ldr	r3, [pc, #36]	; (1227c <gpio_nrfx_init+0x28>)
   12258:	781a      	ldrb	r2, [r3, #0]
   1225a:	b96a      	cbnz	r2, 12278 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1225c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1225e:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   12260:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   12262:	2105      	movs	r1, #5
   12264:	f7fe ffa0 	bl	111a8 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   12268:	2031      	movs	r0, #49	; 0x31
   1226a:	f7fe ff7f 	bl	1116c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1226e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   12272:	4b03      	ldr	r3, [pc, #12]	; (12280 <gpio_nrfx_init+0x2c>)
   12274:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   12278:	2000      	movs	r0, #0
   1227a:	bd08      	pop	{r3, pc}
   1227c:	2001a418 	.word	0x2001a418
   12280:	40031000 	.word	0x40031000

00012284 <gpio_nrfx_pin_interrupt_configure>:
{
   12284:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12288:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1228a:	6841      	ldr	r1, [r0, #4]
   1228c:	f006 071f 	and.w	r7, r6, #31
   12290:	7a09      	ldrb	r1, [r1, #8]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   12292:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
   12296:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1229a:	ea47 1741 	orr.w	r7, r7, r1, lsl #5
   1229e:	d10a      	bne.n	122b6 <gpio_nrfx_pin_interrupt_configure+0x32>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   122a0:	4862      	ldr	r0, [pc, #392]	; (1242c <gpio_nrfx_pin_interrupt_configure+0x1a8>)
    *p_pin = pin_number & 0x1F;
   122a2:	f007 011f 	and.w	r1, r7, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   122a6:	3180      	adds	r1, #128	; 0x80
   122a8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   122ac:	07c9      	lsls	r1, r1, #31
   122ae:	d508      	bpl.n	122c2 <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
   122b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   122b4:	e09d      	b.n	123f2 <gpio_nrfx_pin_interrupt_configure+0x16e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   122b6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   122ba:	f8d8 100c 	ldr.w	r1, [r8, #12]
   122be:	f000 809b 	beq.w	123f8 <gpio_nrfx_pin_interrupt_configure+0x174>
   122c2:	2101      	movs	r1, #1
   122c4:	f8d8 000c 	ldr.w	r0, [r8, #12]
   122c8:	40b1      	lsls	r1, r6
   122ca:	4301      	orrs	r1, r0
   122cc:	f8c8 100c 	str.w	r1, [r8, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   122d0:	2101      	movs	r1, #1
   122d2:	f8d8 0014 	ldr.w	r0, [r8, #20]
   122d6:	40b1      	lsls	r1, r6
   122d8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   122dc:	bf0c      	ite	eq
   122de:	4308      	orreq	r0, r1
   122e0:	4388      	bicne	r0, r1
   122e2:	f8c8 0014 	str.w	r0, [r8, #20]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   122e6:	2000      	movs	r0, #0
   122e8:	f8d8 2018 	ldr.w	r2, [r8, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   122ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   122f0:	bf0c      	ite	eq
   122f2:	430a      	orreq	r2, r1
   122f4:	438a      	bicne	r2, r1
   122f6:	f8c8 2018 	str.w	r2, [r8, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   122fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
   122fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   12302:	4d4b      	ldr	r5, [pc, #300]	; (12430 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
   12304:	bf0c      	ite	eq
   12306:	4311      	orreq	r1, r2
   12308:	ea22 0101 	bicne.w	r1, r2, r1
   1230c:	f8c8 1010 	str.w	r1, [r8, #16]
   12310:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   12314:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   12316:	f500 72a2 	add.w	r2, r0, #324	; 0x144
   1231a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   1231e:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   12322:	4297      	cmp	r7, r2
   12324:	d16d      	bne.n	12402 <gpio_nrfx_pin_interrupt_configure+0x17e>
		    && (intenset & BIT(i))) {
   12326:	fa23 f200 	lsr.w	r2, r3, r0
   1232a:	07d2      	lsls	r2, r2, #31
   1232c:	d569      	bpl.n	12402 <gpio_nrfx_pin_interrupt_configure+0x17e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1232e:	0083      	lsls	r3, r0, #2
   12330:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12334:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   12338:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1233c:	f022 0201 	bic.w	r2, r2, #1
   12340:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   12344:	2301      	movs	r3, #1
   12346:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   12348:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1234c:	b2c0      	uxtb	r0, r0
   1234e:	f007 f86d 	bl	1942c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   12352:	4638      	mov	r0, r7
   12354:	2100      	movs	r1, #0
   12356:	f7ff ff6d 	bl	12234 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1235a:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1235e:	40f0      	lsrs	r0, r6
   12360:	f010 0001 	ands.w	r0, r0, #1
   12364:	d045      	beq.n	123f2 <gpio_nrfx_pin_interrupt_configure+0x16e>
		if (data->trig_edge & BIT(pin)) {
   12366:	f8d8 0014 	ldr.w	r0, [r8, #20]
   1236a:	40f0      	lsrs	r0, r6
   1236c:	f010 0401 	ands.w	r4, r0, #1
   12370:	d04e      	beq.n	12410 <gpio_nrfx_pin_interrupt_configure+0x18c>
			if (data->double_edge & BIT(pin)) {
   12372:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   12376:	f10d 0007 	add.w	r0, sp, #7
			if (data->double_edge & BIT(pin)) {
   1237a:	40f3      	lsrs	r3, r6
   1237c:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1237e:	bf57      	itett	pl
   12380:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   12384:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   12386:	fa21 f606 	lsrpl.w	r6, r1, r6
   1238a:	f006 0601 	andpl.w	r6, r6, #1
   1238e:	bf5c      	itt	pl
   12390:	f1c6 0602 	rsbpl	r6, r6, #2
   12394:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   12396:	f007 f86b 	bl	19470 <nrfx_gpiote_channel_alloc>
   1239a:	4b26      	ldr	r3, [pc, #152]	; (12434 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   1239c:	4298      	cmp	r0, r3
   1239e:	d134      	bne.n	1240a <gpio_nrfx_pin_interrupt_configure+0x186>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   123a0:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   123a4:	023f      	lsls	r7, r7, #8
   123a6:	008b      	lsls	r3, r1, #2
   123a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   123ac:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   123b0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   123b4:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   123b8:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   123bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   123c0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   123c4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   123c8:	0088      	lsls	r0, r1, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   123ca:	4317      	orrs	r7, r2
    return ((uint32_t)p_reg + event);
   123cc:	4a1a      	ldr	r2, [pc, #104]	; (12438 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   123ce:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    return ((uint32_t)p_reg + event);
   123d2:	4402      	add	r2, r0
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   123d4:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   123d6:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   123da:	6010      	str	r0, [r2, #0]
   123dc:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   123de:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   123e2:	f042 0201 	orr.w	r2, r2, #1
   123e6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   123ea:	2301      	movs	r3, #1
   123ec:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
   123ee:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
   123f2:	b002      	add	sp, #8
   123f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   123f8:	2001      	movs	r0, #1
   123fa:	40b0      	lsls	r0, r6
   123fc:	ea21 0100 	bic.w	r1, r1, r0
   12400:	e764      	b.n	122cc <gpio_nrfx_pin_interrupt_configure+0x48>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   12402:	3001      	adds	r0, #1
   12404:	2808      	cmp	r0, #8
   12406:	d186      	bne.n	12316 <gpio_nrfx_pin_interrupt_configure+0x92>
   12408:	e7a3      	b.n	12352 <gpio_nrfx_pin_interrupt_configure+0xce>
		return -ENODEV;
   1240a:	f06f 0012 	mvn.w	r0, #18
   1240e:	e7f0      	b.n	123f2 <gpio_nrfx_pin_interrupt_configure+0x16e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   12410:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   12414:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   12416:	40f1      	lsrs	r1, r6
   12418:	f001 0101 	and.w	r1, r1, #1
   1241c:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   12420:	b2c9      	uxtb	r1, r1
   12422:	f7ff ff07 	bl	12234 <nrf_gpio_cfg_sense_set>
	int res = 0;
   12426:	4620      	mov	r0, r4
   12428:	e7e3      	b.n	123f2 <gpio_nrfx_pin_interrupt_configure+0x16e>
   1242a:	bf00      	nop
   1242c:	40842500 	.word	0x40842500
   12430:	40031000 	.word	0x40031000
   12434:	0bad0000 	.word	0x0bad0000
   12438:	40031100 	.word	0x40031100

0001243c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1243c:	4b28      	ldr	r3, [pc, #160]	; (124e0 <gpio_nrfx_config+0xa4>)
{
   1243e:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12440:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   12442:	4828      	ldr	r0, [pc, #160]	; (124e4 <gpio_nrfx_config+0xa8>)
   12444:	4013      	ands	r3, r2
   12446:	4283      	cmp	r3, r0
   12448:	d03b      	beq.n	124c2 <gpio_nrfx_config+0x86>
   1244a:	d80d      	bhi.n	12468 <gpio_nrfx_config+0x2c>
   1244c:	2b06      	cmp	r3, #6
   1244e:	d015      	beq.n	1247c <gpio_nrfx_config+0x40>
   12450:	d805      	bhi.n	1245e <gpio_nrfx_config+0x22>
   12452:	b19b      	cbz	r3, 1247c <gpio_nrfx_config+0x40>
   12454:	2b02      	cmp	r3, #2
   12456:	d036      	beq.n	124c6 <gpio_nrfx_config+0x8a>
   12458:	f06f 0015 	mvn.w	r0, #21
   1245c:	e030      	b.n	124c0 <gpio_nrfx_config+0x84>
   1245e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   12462:	d1f9      	bne.n	12458 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   12464:	2301      	movs	r3, #1
   12466:	e009      	b.n	1247c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   12468:	481f      	ldr	r0, [pc, #124]	; (124e8 <gpio_nrfx_config+0xac>)
   1246a:	4283      	cmp	r3, r0
   1246c:	d02d      	beq.n	124ca <gpio_nrfx_config+0x8e>
   1246e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   12472:	d02c      	beq.n	124ce <gpio_nrfx_config+0x92>
   12474:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   12478:	d1ee      	bne.n	12458 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1247a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1247c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   1247e:	bf4c      	ite	mi
   12480:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   12482:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   12486:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1248a:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   1248e:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   12492:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   12496:	d006      	beq.n	124a6 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   12498:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1249c:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1249e:	d018      	beq.n	124d2 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
   124a0:	2201      	movs	r2, #1
   124a2:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   124a4:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   124a6:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   124aa:	2000      	movs	r0, #0
   124ac:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
   124b0:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   124b4:	4a0d      	ldr	r2, [pc, #52]	; (124ec <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   124b6:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   124ba:	3180      	adds	r1, #128	; 0x80
   124bc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   124c0:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   124c2:	2307      	movs	r3, #7
   124c4:	e7da      	b.n	1247c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   124c6:	2304      	movs	r3, #4
   124c8:	e7d8      	b.n	1247c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   124ca:	2305      	movs	r3, #5
   124cc:	e7d6      	b.n	1247c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   124ce:	2303      	movs	r3, #3
   124d0:	e7d4      	b.n	1247c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   124d2:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   124d4:	bf42      	ittt	mi
   124d6:	2201      	movmi	r2, #1
   124d8:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   124da:	60f2      	strmi	r2, [r6, #12]
}
   124dc:	e7e3      	b.n	124a6 <gpio_nrfx_config+0x6a>
   124de:	bf00      	nop
   124e0:	00f00006 	.word	0x00f00006
   124e4:	00100006 	.word	0x00100006
   124e8:	00400002 	.word	0x00400002
   124ec:	40842500 	.word	0x40842500

000124f0 <gpiote_event_handler>:
{
   124f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   124f4:	4f3f      	ldr	r7, [pc, #252]	; (125f4 <gpiote_event_handler+0x104>)
   124f6:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   124f8:	2e00      	cmp	r6, #0
   124fa:	d04f      	beq.n	1259c <gpiote_event_handler+0xac>
	uint32_t bit = 1U << pin;
   124fc:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   12500:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   12504:	4b3c      	ldr	r3, [pc, #240]	; (125f8 <gpiote_event_handler+0x108>)
   12506:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   12508:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1250c:	430a      	orrs	r2, r1
   1250e:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   12512:	4a3a      	ldr	r2, [pc, #232]	; (125fc <gpiote_event_handler+0x10c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   12514:	691b      	ldr	r3, [r3, #16]
   12516:	6914      	ldr	r4, [r2, #16]
   12518:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   1251a:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   1251e:	bb75      	cbnz	r5, 1257e <gpiote_event_handler+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   12520:	603d      	str	r5, [r7, #0]
   12522:	683b      	ldr	r3, [r7, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   12524:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   12526:	2501      	movs	r5, #1
   12528:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   1252a:	4835      	ldr	r0, [pc, #212]	; (12600 <gpiote_event_handler+0x110>)
   1252c:	4935      	ldr	r1, [pc, #212]	; (12604 <gpiote_event_handler+0x114>)
   1252e:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   12532:	fa05 fc03 	lsl.w	ip, r5, r3
   12536:	ea1c 0f02 	tst.w	ip, r2
   1253a:	d00f      	beq.n	1255c <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1253c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   12540:	b162      	cbz	r2, 1255c <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   12542:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   12546:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1254a:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1254e:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   12552:	fa05 f202 	lsl.w	r2, r5, r2
   12556:	4314      	orrs	r4, r2
   12558:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1255c:	3301      	adds	r3, #1
   1255e:	2b08      	cmp	r3, #8
   12560:	d1e5      	bne.n	1252e <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   12562:	b9ec      	cbnz	r4, 125a0 <gpiote_event_handler+0xb0>
	if (port_event) {
   12564:	b14e      	cbz	r6, 1257a <gpiote_event_handler+0x8a>
	uint32_t bit = 1U << pin;
   12566:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   12568:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   1256a:	4d23      	ldr	r5, [pc, #140]	; (125f8 <gpiote_event_handler+0x108>)
   1256c:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1256e:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   12572:	430a      	orrs	r2, r1
   12574:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   12578:	bb54      	cbnz	r4, 125d0 <gpiote_event_handler+0xe0>
}
   1257a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
   1257e:	ea15 0f08 	tst.w	r5, r8
   12582:	d006      	beq.n	12592 <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   12584:	2100      	movs	r1, #0
   12586:	f009 001f 	and.w	r0, r9, #31
   1258a:	f7ff fe53 	bl	12234 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1258e:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   12592:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   12596:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1259a:	e7c0      	b.n	1251e <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1259c:	4634      	mov	r4, r6
   1259e:	e7c1      	b.n	12524 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   125a0:	4b15      	ldr	r3, [pc, #84]	; (125f8 <gpiote_event_handler+0x108>)
   125a2:	6859      	ldr	r1, [r3, #4]
   125a4:	2900      	cmp	r1, #0
   125a6:	d0dd      	beq.n	12564 <gpiote_event_handler+0x74>
	return node->next;
   125a8:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   125aa:	4f17      	ldr	r7, [pc, #92]	; (12608 <gpiote_event_handler+0x118>)
   125ac:	2d00      	cmp	r5, #0
   125ae:	bf38      	it	cc
   125b0:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   125b2:	688a      	ldr	r2, [r1, #8]
   125b4:	4022      	ands	r2, r4
   125b6:	d002      	beq.n	125be <gpiote_event_handler+0xce>
			cb->handler(port, cb, cb->pin_mask & pins);
   125b8:	4638      	mov	r0, r7
   125ba:	684b      	ldr	r3, [r1, #4]
   125bc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   125be:	2d00      	cmp	r5, #0
   125c0:	d0d0      	beq.n	12564 <gpiote_event_handler+0x74>
   125c2:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   125c4:	4629      	mov	r1, r5
   125c6:	2b00      	cmp	r3, #0
   125c8:	bf38      	it	cc
   125ca:	2300      	movcc	r3, #0
   125cc:	461d      	mov	r5, r3
   125ce:	e7f0      	b.n	125b2 <gpiote_event_handler+0xc2>
		if (level_pins & bit) {
   125d0:	4226      	tst	r6, r4
   125d2:	d00c      	beq.n	125ee <gpiote_event_handler+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   125d4:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   125d6:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   125da:	40f9      	lsrs	r1, r7
   125dc:	f001 0101 	and.w	r1, r1, #1
   125e0:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   125e4:	b2c9      	uxtb	r1, r1
   125e6:	f7ff fe25 	bl	12234 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   125ea:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   125ee:	3701      	adds	r7, #1
		bit <<= 1;
   125f0:	0076      	lsls	r6, r6, #1
   125f2:	e7c1      	b.n	12578 <gpiote_event_handler+0x88>
   125f4:	4003117c 	.word	0x4003117c
   125f8:	2001814c 	.word	0x2001814c
   125fc:	40842500 	.word	0x40842500
   12600:	40031000 	.word	0x40031000
   12604:	40031100 	.word	0x40031100
   12608:	20014678 	.word	0x20014678

0001260c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1260c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1260e:	794b      	ldrb	r3, [r1, #5]
   12610:	2b01      	cmp	r3, #1
   12612:	d029      	beq.n	12668 <uarte_nrfx_configure+0x5c>
   12614:	2b03      	cmp	r3, #3
   12616:	d124      	bne.n	12662 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   12618:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1261a:	798b      	ldrb	r3, [r1, #6]
   1261c:	2b03      	cmp	r3, #3
   1261e:	d120      	bne.n	12662 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   12620:	79cc      	ldrb	r4, [r1, #7]
   12622:	b124      	cbz	r4, 1262e <uarte_nrfx_configure+0x22>
   12624:	2c01      	cmp	r4, #1
   12626:	d11c      	bne.n	12662 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   12628:	6843      	ldr	r3, [r0, #4]
   1262a:	791b      	ldrb	r3, [r3, #4]
   1262c:	b1cb      	cbz	r3, 12662 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1262e:	790a      	ldrb	r2, [r1, #4]
   12630:	b112      	cbz	r2, 12638 <uarte_nrfx_configure+0x2c>
   12632:	2a02      	cmp	r2, #2
   12634:	d115      	bne.n	12662 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   12636:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   12638:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1263a:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1263c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   12640:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   12642:	d065      	beq.n	12710 <uarte_nrfx_configure+0x104>
   12644:	d82d      	bhi.n	126a2 <uarte_nrfx_configure+0x96>
   12646:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1264a:	d064      	beq.n	12716 <uarte_nrfx_configure+0x10a>
   1264c:	d816      	bhi.n	1267c <uarte_nrfx_configure+0x70>
   1264e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   12652:	d062      	beq.n	1271a <uarte_nrfx_configure+0x10e>
   12654:	d80a      	bhi.n	1266c <uarte_nrfx_configure+0x60>
   12656:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1265a:	d061      	beq.n	12720 <uarte_nrfx_configure+0x114>
   1265c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   12660:	d061      	beq.n	12726 <uarte_nrfx_configure+0x11a>
   12662:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12666:	e052      	b.n	1270e <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   12668:	2600      	movs	r6, #0
   1266a:	e7d6      	b.n	1261a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1266c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   12670:	d05c      	beq.n	1272c <uarte_nrfx_configure+0x120>
   12672:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   12676:	d1f4      	bne.n	12662 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   12678:	4b37      	ldr	r3, [pc, #220]	; (12758 <uarte_nrfx_configure+0x14c>)
   1267a:	e03c      	b.n	126f6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1267c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   12680:	d057      	beq.n	12732 <uarte_nrfx_configure+0x126>
   12682:	d807      	bhi.n	12694 <uarte_nrfx_configure+0x88>
   12684:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   12688:	d055      	beq.n	12736 <uarte_nrfx_configure+0x12a>
   1268a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1268e:	d1e8      	bne.n	12662 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   12690:	4b32      	ldr	r3, [pc, #200]	; (1275c <uarte_nrfx_configure+0x150>)
   12692:	e030      	b.n	126f6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   12694:	f647 2712 	movw	r7, #31250	; 0x7a12
   12698:	42bb      	cmp	r3, r7
   1269a:	d1e2      	bne.n	12662 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1269c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   126a0:	e029      	b.n	126f6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   126a2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   126a6:	d048      	beq.n	1273a <uarte_nrfx_configure+0x12e>
   126a8:	d813      	bhi.n	126d2 <uarte_nrfx_configure+0xc6>
   126aa:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   126ae:	d047      	beq.n	12740 <uarte_nrfx_configure+0x134>
   126b0:	d809      	bhi.n	126c6 <uarte_nrfx_configure+0xba>
   126b2:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   126b6:	42bb      	cmp	r3, r7
   126b8:	d044      	beq.n	12744 <uarte_nrfx_configure+0x138>
   126ba:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   126be:	d1d0      	bne.n	12662 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   126c0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   126c4:	e017      	b.n	126f6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   126c6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   126ca:	d1ca      	bne.n	12662 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   126cc:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   126d0:	e011      	b.n	126f6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   126d2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   126d6:	d038      	beq.n	1274a <uarte_nrfx_configure+0x13e>
   126d8:	d808      	bhi.n	126ec <uarte_nrfx_configure+0xe0>
   126da:	4f21      	ldr	r7, [pc, #132]	; (12760 <uarte_nrfx_configure+0x154>)
   126dc:	42bb      	cmp	r3, r7
   126de:	d037      	beq.n	12750 <uarte_nrfx_configure+0x144>
   126e0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   126e4:	d1bd      	bne.n	12662 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   126e6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   126ea:	e004      	b.n	126f6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   126ec:	4f1d      	ldr	r7, [pc, #116]	; (12764 <uarte_nrfx_configure+0x158>)
   126ee:	42bb      	cmp	r3, r7
   126f0:	d1b7      	bne.n	12662 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   126f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   126f6:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   126fa:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   126fc:	4334      	orrs	r4, r6
   126fe:	4322      	orrs	r2, r4
   12700:	3304      	adds	r3, #4
   12702:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   12704:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   12708:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1270c:	2000      	movs	r0, #0
}
   1270e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   12710:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   12714:	e7ef      	b.n	126f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   12716:	4b14      	ldr	r3, [pc, #80]	; (12768 <uarte_nrfx_configure+0x15c>)
   12718:	e7ed      	b.n	126f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1271a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1271e:	e7ea      	b.n	126f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   12720:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   12724:	e7e7      	b.n	126f6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   12726:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1272a:	e7e4      	b.n	126f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1272c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   12730:	e7e1      	b.n	126f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   12732:	4b0e      	ldr	r3, [pc, #56]	; (1276c <uarte_nrfx_configure+0x160>)
   12734:	e7df      	b.n	126f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   12736:	4b0e      	ldr	r3, [pc, #56]	; (12770 <uarte_nrfx_configure+0x164>)
   12738:	e7dd      	b.n	126f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1273a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1273e:	e7da      	b.n	126f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   12740:	4b0c      	ldr	r3, [pc, #48]	; (12774 <uarte_nrfx_configure+0x168>)
   12742:	e7d8      	b.n	126f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   12744:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   12748:	e7d5      	b.n	126f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1274a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1274e:	e7d2      	b.n	126f6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   12750:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   12754:	e7cf      	b.n	126f6 <uarte_nrfx_configure+0xea>
   12756:	bf00      	nop
   12758:	0013b000 	.word	0x0013b000
   1275c:	004ea000 	.word	0x004ea000
   12760:	0003d090 	.word	0x0003d090
   12764:	000f4240 	.word	0x000f4240
   12768:	00275000 	.word	0x00275000
   1276c:	0075c000 	.word	0x0075c000
   12770:	003af000 	.word	0x003af000
   12774:	013a9000 	.word	0x013a9000

00012778 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   12778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1277c:	4606      	mov	r6, r0
   1277e:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   12780:	68c7      	ldr	r7, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12782:	f00d fc95 	bl	200b0 <k_is_in_isr>
   12786:	b9b8      	cbnz	r0, 127b8 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   12788:	4b28      	ldr	r3, [pc, #160]	; (1282c <uarte_nrfx_poll_out+0xb4>)
   1278a:	781b      	ldrb	r3, [r3, #0]
   1278c:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   12790:	6872      	ldr	r2, [r6, #4]
   12792:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   12794:	b193      	cbz	r3, 127bc <uarte_nrfx_poll_out+0x44>
   12796:	f04f 0320 	mov.w	r3, #32
   1279a:	f3ef 8411 	mrs	r4, BASEPRI
   1279e:	f383 8811 	msr	BASEPRI, r3
   127a2:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   127a6:	4630      	mov	r0, r6
   127a8:	f00b f9b8 	bl	1db1c <is_tx_ready>
   127ac:	bb38      	cbnz	r0, 127fe <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   127ae:	f384 8811 	msr	BASEPRI, r4
   127b2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   127b6:	e7ee      	b.n	12796 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   127b8:	2301      	movs	r3, #1
   127ba:	e7e9      	b.n	12790 <uarte_nrfx_poll_out+0x18>
   127bc:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   127be:	4630      	mov	r0, r6
   127c0:	f00b f9ac 	bl	1db1c <is_tx_ready>
   127c4:	b970      	cbnz	r0, 127e4 <uarte_nrfx_poll_out+0x6c>
   127c6:	2001      	movs	r0, #1
   127c8:	f00d fa3f 	bl	1fc4a <nrfx_busy_wait>
   127cc:	3c01      	subs	r4, #1
   127ce:	d1f6      	bne.n	127be <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   127d0:	2100      	movs	r1, #0
   127d2:	2021      	movs	r0, #33	; 0x21
   127d4:	f007 fe5e 	bl	1a494 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   127d8:	e7f0      	b.n	127bc <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   127da:	f384 8811 	msr	BASEPRI, r4
   127de:	f3bf 8f6f 	isb	sy
}
   127e2:	e7f5      	b.n	127d0 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   127e4:	f04f 0320 	mov.w	r3, #32
   127e8:	f3ef 8411 	mrs	r4, BASEPRI
   127ec:	f383 8811 	msr	BASEPRI, r3
   127f0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   127f4:	4630      	mov	r0, r6
   127f6:	f00b f991 	bl	1db1c <is_tx_ready>
   127fa:	2800      	cmp	r0, #0
   127fc:	d0ed      	beq.n	127da <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   127fe:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12800:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   12802:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   12806:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1280a:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1280e:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   12812:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   12816:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   1281a:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1281e:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   12820:	f384 8811 	msr	BASEPRI, r4
   12824:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   12828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1282c:	2001c1c6 	.word	0x2001c1c6

00012830 <uarte_instance_init.isra.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   12830:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
   12834:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   12836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1283a:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   1283c:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
   1283e:	460f      	mov	r7, r1
   12840:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
   12844:	4605      	mov	r5, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
   12846:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
   12848:	6808      	ldr	r0, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1284a:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
   1284c:	4b41      	ldr	r3, [pc, #260]	; (12954 <uarte_instance_init.isra.0+0x124>)
    *p_pin = pin_number & 0x1F;
   1284e:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12852:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
   12854:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12856:	2103      	movs	r1, #3
   12858:	3280      	adds	r2, #128	; 0x80
   1285a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1285e:	687a      	ldr	r2, [r7, #4]
   12860:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
   12862:	bf1e      	ittt	ne
   12864:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12868:	3180      	addne	r1, #128	; 0x80
   1286a:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1286e:	68b9      	ldr	r1, [r7, #8]
    p_reg->PSEL.TXD = pseltxd;
   12870:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   12874:	1c48      	adds	r0, r1, #1
   12876:	bf18      	it	ne
   12878:	2000      	movne	r0, #0
    p_reg->PSEL.RXD = pselrxd;
   1287a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
   1287e:	bf1e      	ittt	ne
   12880:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12884:	3280      	addne	r2, #128	; 0x80
   12886:	f843 0022 	strne.w	r0, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1288a:	68f8      	ldr	r0, [r7, #12]
   1288c:	1c42      	adds	r2, r0, #1
   1288e:	d00c      	beq.n	128aa <uarte_instance_init.isra.0+0x7a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12890:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
   12894:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12898:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
   1289c:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   128a0:	f04f 0c03 	mov.w	ip, #3
   128a4:	3280      	adds	r2, #128	; 0x80
   128a6:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   128aa:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   128ae:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   128b2:	68e9      	ldr	r1, [r5, #12]
   128b4:	4628      	mov	r0, r5
   128b6:	3104      	adds	r1, #4
   128b8:	f7ff fea8 	bl	1260c <uarte_nrfx_configure>
	if (err) {
   128bc:	4680      	mov	r8, r0
   128be:	b9a8      	cbnz	r0, 128ec <uarte_instance_init.isra.0+0xbc>

#ifdef CONFIG_PM_DEVICE
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
   128c0:	686b      	ldr	r3, [r5, #4]
   128c2:	799b      	ldrb	r3, [r3, #6]
   128c4:	b313      	cbz	r3, 1290c <uarte_instance_init.isra.0+0xdc>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   128c6:	f106 0016 	add.w	r0, r6, #22
   128ca:	f006 fd91 	bl	193f0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   128ce:	4b22      	ldr	r3, [pc, #136]	; (12958 <uarte_instance_init.isra.0+0x128>)
   128d0:	4298      	cmp	r0, r3
   128d2:	d00e      	beq.n	128f2 <uarte_instance_init.isra.0+0xc2>
   128d4:	4b21      	ldr	r3, [pc, #132]	; (1295c <uarte_instance_init.isra.0+0x12c>)
   128d6:	4922      	ldr	r1, [pc, #136]	; (12960 <uarte_instance_init.isra.0+0x130>)
		LOG_ERR("Failed to allocate PPI Channel");
   128d8:	4822      	ldr	r0, [pc, #136]	; (12964 <uarte_instance_init.isra.0+0x134>)
   128da:	1ac9      	subs	r1, r1, r3
   128dc:	08c9      	lsrs	r1, r1, #3
   128de:	0189      	lsls	r1, r1, #6
   128e0:	f041 0101 	orr.w	r1, r1, #1
   128e4:	f009 fe90 	bl	1c608 <log_0>
		return -EIO;
   128e8:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   128ec:	4640      	mov	r0, r8
   128ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   128f2:	7db3      	ldrb	r3, [r6, #22]
   128f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   128f8:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   128fc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   12900:	2301      	movs	r3, #1
   12902:	7db2      	ldrb	r2, [r6, #22]
   12904:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   12906:	4a18      	ldr	r2, [pc, #96]	; (12968 <uarte_instance_init.isra.0+0x138>)
   12908:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1290c:	2308      	movs	r3, #8
   1290e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   12912:	687b      	ldr	r3, [r7, #4]
   12914:	3301      	adds	r3, #1
   12916:	d00c      	beq.n	12932 <uarte_instance_init.isra.0+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12918:	2300      	movs	r3, #0
   1291a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1291e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   12922:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   12926:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1292a:	2301      	movs	r3, #1
   1292c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12930:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   12932:	686b      	ldr	r3, [r5, #4]
   12934:	799b      	ldrb	r3, [r3, #6]
   12936:	b91b      	cbnz	r3, 12940 <uarte_instance_init.isra.0+0x110>
    p_reg->INTENSET = mask;
   12938:	f44f 7380 	mov.w	r3, #256	; 0x100
   1293c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   12940:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   12942:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   12944:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   12948:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1294c:	2301      	movs	r3, #1
   1294e:	60a3      	str	r3, [r4, #8]
   12950:	60e3      	str	r3, [r4, #12]
	return 0;
   12952:	e7cb      	b.n	128ec <uarte_instance_init.isra.0+0xbc>
   12954:	40842500 	.word	0x40842500
   12958:	0bad0000 	.word	0x0bad0000
   1295c:	00020e58 	.word	0x00020e58
   12960:	00020ed8 	.word	0x00020ed8
   12964:	0002253e 	.word	0x0002253e
   12968:	40017000 	.word	0x40017000

0001296c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1296c:	b530      	push	{r4, r5, lr}
   1296e:	b085      	sub	sp, #20
   12970:	466c      	mov	r4, sp
   12972:	4605      	mov	r5, r0
   12974:	4b08      	ldr	r3, [pc, #32]	; (12998 <uarte_0_init+0x2c>)
   12976:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   12978:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1297c:	2200      	movs	r2, #0
   1297e:	2101      	movs	r1, #1
   12980:	2008      	movs	r0, #8
   12982:	f7fe fc11 	bl	111a8 <z_arm_irq_priority_set>
   12986:	2008      	movs	r0, #8
   12988:	f7fe fbf0 	bl	1116c <arch_irq_enable>
   1298c:	4621      	mov	r1, r4
   1298e:	4628      	mov	r0, r5
   12990:	f7ff ff4e 	bl	12830 <uarte_instance_init.isra.0>
   12994:	b005      	add	sp, #20
   12996:	bd30      	pop	{r4, r5, pc}
   12998:	00020ef0 	.word	0x00020ef0

0001299c <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1299c:	b530      	push	{r4, r5, lr}
   1299e:	b085      	sub	sp, #20
   129a0:	466c      	mov	r4, sp
   129a2:	4605      	mov	r5, r0
   129a4:	4b08      	ldr	r3, [pc, #32]	; (129c8 <uarte_1_init+0x2c>)
   129a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   129a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   129ac:	2200      	movs	r2, #0
   129ae:	2101      	movs	r1, #1
   129b0:	2009      	movs	r0, #9
   129b2:	f7fe fbf9 	bl	111a8 <z_arm_irq_priority_set>
   129b6:	2009      	movs	r0, #9
   129b8:	f7fe fbd8 	bl	1116c <arch_irq_enable>
   129bc:	4621      	mov	r1, r4
   129be:	4628      	mov	r0, r5
   129c0:	f7ff ff36 	bl	12830 <uarte_instance_init.isra.0>
   129c4:	b005      	add	sp, #20
   129c6:	bd30      	pop	{r4, r5, pc}
   129c8:	00020f00 	.word	0x00020f00

000129cc <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
   129cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129d0:	4605      	mov	r5, r0
    unsigned char *output_pointer = NULL;
    size_t output_length = 0;
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;

    if (output_buffer == NULL)
   129d2:	460f      	mov	r7, r1
{
   129d4:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   129d6:	b919      	cbnz	r1, 129e0 <print_string_ptr+0x14>
    {
        return false;
   129d8:	2000      	movs	r0, #0
    }
    output[output_length + 1] = '\"';
    output[output_length + 2] = '\0';

    return true;
}
   129da:	b005      	add	sp, #20
   129dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   129e0:	4b4e      	ldr	r3, [pc, #312]	; (12b1c <print_string_ptr+0x150>)
   129e2:	881a      	ldrh	r2, [r3, #0]
   129e4:	789b      	ldrb	r3, [r3, #2]
   129e6:	f8ad 200c 	strh.w	r2, [sp, #12]
   129ea:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   129ee:	b340      	cbz	r0, 12a42 <print_string_ptr+0x76>
   129f0:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   129f2:	f04f 0b00 	mov.w	fp, #0
   129f6:	2001      	movs	r0, #1
   129f8:	4c49      	ldr	r4, [pc, #292]	; (12b20 <print_string_ptr+0x154>)
   129fa:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   129fc:	f811 3b01 	ldrb.w	r3, [r1], #1
   12a00:	bb6b      	cbnz	r3, 12a5e <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   12a02:	ebaa 0a05 	sub.w	sl, sl, r5
   12a06:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   12a08:	4638      	mov	r0, r7
   12a0a:	f10a 0103 	add.w	r1, sl, #3
   12a0e:	f00b f9ca 	bl	1dda6 <ensure>
    if (output == NULL)
   12a12:	4606      	mov	r6, r0
   12a14:	2800      	cmp	r0, #0
   12a16:	d0df      	beq.n	129d8 <print_string_ptr+0xc>
    if (escape_characters == 0)
   12a18:	2322      	movs	r3, #34	; 0x22
   12a1a:	1c44      	adds	r4, r0, #1
   12a1c:	f10a 0901 	add.w	r9, sl, #1
   12a20:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   12a24:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   12a26:	f1bb 0f00 	cmp.w	fp, #0
   12a2a:	d12e      	bne.n	12a8a <print_string_ptr+0xbe>
   12a2c:	4652      	mov	r2, sl
   12a2e:	4629      	mov	r1, r5
   12a30:	4620      	mov	r0, r4
   12a32:	f00d fe02 	bl	2063a <memcpy>
        output[output_length + 1] = '\"';
   12a36:	2322      	movs	r3, #34	; 0x22
   12a38:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   12a3c:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   12a40:	e00b      	b.n	12a5a <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   12a42:	2103      	movs	r1, #3
   12a44:	4638      	mov	r0, r7
   12a46:	f00b f9ae 	bl	1dda6 <ensure>
        if (output == NULL)
   12a4a:	2800      	cmp	r0, #0
   12a4c:	d0c4      	beq.n	129d8 <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   12a4e:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   12a52:	a903      	add	r1, sp, #12
   12a54:	1ad2      	subs	r2, r2, r3
   12a56:	f00d fe57 	bl	20708 <strncpy>
    return true;
   12a5a:	2001      	movs	r0, #1
   12a5c:	e7bd      	b.n	129da <print_string_ptr+0xe>
        switch (*input_pointer)
   12a5e:	2b22      	cmp	r3, #34	; 0x22
   12a60:	d80b      	bhi.n	12a7a <print_string_ptr+0xae>
   12a62:	2b07      	cmp	r3, #7
   12a64:	d90c      	bls.n	12a80 <print_string_ptr+0xb4>
   12a66:	f1a3 0208 	sub.w	r2, r3, #8
   12a6a:	b2d2      	uxtb	r2, r2
   12a6c:	fa00 f202 	lsl.w	r2, r0, r2
   12a70:	4222      	tst	r2, r4
   12a72:	d005      	beq.n	12a80 <print_string_ptr+0xb4>
                escape_characters++;
   12a74:	f10b 0b01 	add.w	fp, fp, #1
                break;
   12a78:	e7bf      	b.n	129fa <print_string_ptr+0x2e>
        switch (*input_pointer)
   12a7a:	2b5c      	cmp	r3, #92	; 0x5c
   12a7c:	d1bd      	bne.n	129fa <print_string_ptr+0x2e>
   12a7e:	e7f9      	b.n	12a74 <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   12a80:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   12a82:	bf98      	it	ls
   12a84:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   12a88:	e7b7      	b.n	129fa <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   12a8a:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   12a8e:	f04f 0b74 	mov.w	fp, #116	; 0x74
   12a92:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   12a94:	4a23      	ldr	r2, [pc, #140]	; (12b24 <print_string_ptr+0x158>)
   12a96:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   12a98:	9901      	ldr	r1, [sp, #4]
   12a9a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   12a9e:	9101      	str	r1, [sp, #4]
   12aa0:	b92b      	cbnz	r3, 12aae <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   12aa2:	2222      	movs	r2, #34	; 0x22
   12aa4:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   12aa8:	f806 3008 	strb.w	r3, [r6, r8]
   12aac:	e7d5      	b.n	12a5a <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   12aae:	2b1f      	cmp	r3, #31
   12ab0:	d907      	bls.n	12ac2 <print_string_ptr+0xf6>
   12ab2:	2b22      	cmp	r3, #34	; 0x22
   12ab4:	d005      	beq.n	12ac2 <print_string_ptr+0xf6>
   12ab6:	2b5c      	cmp	r3, #92	; 0x5c
   12ab8:	d003      	beq.n	12ac2 <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   12aba:	4620      	mov	r0, r4
   12abc:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   12abe:	1c44      	adds	r4, r0, #1
   12ac0:	e7ea      	b.n	12a98 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   12ac2:	4620      	mov	r0, r4
            switch (*input_pointer)
   12ac4:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   12ac6:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   12aca:	781b      	ldrb	r3, [r3, #0]
   12acc:	2b0d      	cmp	r3, #13
   12ace:	d80a      	bhi.n	12ae6 <print_string_ptr+0x11a>
   12ad0:	2b07      	cmp	r3, #7
   12ad2:	d919      	bls.n	12b08 <print_string_ptr+0x13c>
   12ad4:	f1a3 0108 	sub.w	r1, r3, #8
   12ad8:	2905      	cmp	r1, #5
   12ada:	d815      	bhi.n	12b08 <print_string_ptr+0x13c>
   12adc:	e8df f001 	tbb	[pc, r1]
   12ae0:	140d1109 	.word	0x140d1109
   12ae4:	0f0b      	.short	0x0f0b
   12ae6:	2b22      	cmp	r3, #34	; 0x22
   12ae8:	d001      	beq.n	12aee <print_string_ptr+0x122>
   12aea:	2b5c      	cmp	r3, #92	; 0x5c
   12aec:	d10c      	bne.n	12b08 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   12aee:	7063      	strb	r3, [r4, #1]
                    break;
   12af0:	e7e5      	b.n	12abe <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   12af2:	2362      	movs	r3, #98	; 0x62
   12af4:	e7fb      	b.n	12aee <print_string_ptr+0x122>
                    *output_pointer = 'f';
   12af6:	2366      	movs	r3, #102	; 0x66
   12af8:	e7f9      	b.n	12aee <print_string_ptr+0x122>
                    *output_pointer = 'n';
   12afa:	236e      	movs	r3, #110	; 0x6e
   12afc:	e7f7      	b.n	12aee <print_string_ptr+0x122>
                    *output_pointer = 'r';
   12afe:	2372      	movs	r3, #114	; 0x72
   12b00:	e7f5      	b.n	12aee <print_string_ptr+0x122>
                    *output_pointer = 't';
   12b02:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   12b06:	e7da      	b.n	12abe <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   12b08:	6839      	ldr	r1, [r7, #0]
   12b0a:	687d      	ldr	r5, [r7, #4]
   12b0c:	1a41      	subs	r1, r0, r1
   12b0e:	1a69      	subs	r1, r5, r1
   12b10:	f008 fa08 	bl	1af24 <sniprintf>
                    output_pointer += 4;
   12b14:	4a03      	ldr	r2, [pc, #12]	; (12b24 <print_string_ptr+0x158>)
   12b16:	1d60      	adds	r0, r4, #5
                    break;
   12b18:	e7d1      	b.n	12abe <print_string_ptr+0xf2>
   12b1a:	bf00      	nop
   12b1c:	00022573 	.word	0x00022573
   12b20:	04000037 	.word	0x04000037
   12b24:	0002256d 	.word	0x0002256d

00012b28 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
   12b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12b2c:	460c      	mov	r4, r1
    unsigned char *output = NULL;

    if ((item == NULL) || (output_buffer == NULL))
   12b2e:	4606      	mov	r6, r0
{
   12b30:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   12b32:	b908      	cbnz	r0, 12b38 <print_value+0x10>
    {
        return false;
    }

    switch ((item->type) & 0xFF)
   12b34:	2500      	movs	r5, #0
   12b36:	e06f      	b.n	12c18 <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   12b38:	2900      	cmp	r1, #0
   12b3a:	d0fb      	beq.n	12b34 <print_value+0xc>
    switch ((item->type) & 0xFF)
   12b3c:	7b05      	ldrb	r5, [r0, #12]
   12b3e:	2d10      	cmp	r5, #16
   12b40:	f000 80cc 	beq.w	12cdc <print_value+0x1b4>
   12b44:	dc18      	bgt.n	12b78 <print_value+0x50>
   12b46:	1e6b      	subs	r3, r5, #1
   12b48:	2b07      	cmp	r3, #7
   12b4a:	d8f3      	bhi.n	12b34 <print_value+0xc>
   12b4c:	2b07      	cmp	r3, #7
   12b4e:	d8f1      	bhi.n	12b34 <print_value+0xc>
   12b50:	a201      	add	r2, pc, #4	; (adr r2, 12b58 <print_value+0x30>)
   12b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12b56:	bf00      	nop
   12b58:	00012bf5 	.word	0x00012bf5
   12b5c:	00012c21 	.word	0x00012c21
   12b60:	00012b35 	.word	0x00012b35
   12b64:	00012bcd 	.word	0x00012bcd
   12b68:	00012b35 	.word	0x00012b35
   12b6c:	00012b35 	.word	0x00012b35
   12b70:	00012b35 	.word	0x00012b35
   12b74:	00012c25 	.word	0x00012c25
   12b78:	2d40      	cmp	r5, #64	; 0x40
   12b7a:	f000 80dd 	beq.w	12d38 <print_value+0x210>
   12b7e:	2d80      	cmp	r5, #128	; 0x80
   12b80:	f000 8098 	beq.w	12cb4 <print_value+0x18c>
   12b84:	2d20      	cmp	r5, #32
   12b86:	d1d5      	bne.n	12b34 <print_value+0xc>

        case cJSON_String:
            return print_string(item, output_buffer);

        case cJSON_Array:
            return print_array(item, output_buffer);
   12b88:	6886      	ldr	r6, [r0, #8]
        return false;
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
   12b8a:	2101      	movs	r1, #1
   12b8c:	4620      	mov	r0, r4
   12b8e:	f00b f90a 	bl	1dda6 <ensure>
    if (output_pointer == NULL)
   12b92:	2800      	cmp	r0, #0
   12b94:	d0ce      	beq.n	12b34 <print_value+0xc>
    {
        return false;
    }

    *output_pointer = '[';
   12b96:	235b      	movs	r3, #91	; 0x5b
            output_pointer = ensure(output_buffer, length + 1);
            if (output_pointer == NULL)
            {
                return false;
            }
            *output_pointer++ = ',';
   12b98:	272c      	movs	r7, #44	; 0x2c
            if(output_buffer->format)
            {
                *output_pointer++ = ' ';
            }
            *output_pointer = '\0';
   12b9a:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   12b9e:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   12ba0:	68a3      	ldr	r3, [r4, #8]
   12ba2:	3301      	adds	r3, #1
   12ba4:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   12ba6:	68e3      	ldr	r3, [r4, #12]
   12ba8:	3301      	adds	r3, #1
   12baa:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   12bac:	2e00      	cmp	r6, #0
   12bae:	f040 809a 	bne.w	12ce6 <print_value+0x1be>
            output_buffer->offset += length;
        }
        current_element = current_element->next;
    }

    output_pointer = ensure(output_buffer, 2);
   12bb2:	2102      	movs	r1, #2
   12bb4:	4620      	mov	r0, r4
   12bb6:	f00b f8f6 	bl	1dda6 <ensure>
    if (output_pointer == NULL)
   12bba:	2800      	cmp	r0, #0
   12bbc:	d0ba      	beq.n	12b34 <print_value+0xc>
    {
        return false;
    }
    *output_pointer++ = ']';
   12bbe:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   12bc0:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   12bc2:	7003      	strb	r3, [r0, #0]
            *output_pointer++ = '\t';
        }
    }
    *output_pointer++ = '}';
    *output_pointer = '\0';
    output_buffer->depth--;
   12bc4:	68e3      	ldr	r3, [r4, #12]
   12bc6:	3b01      	subs	r3, #1
   12bc8:	60e3      	str	r3, [r4, #12]
   12bca:	e011      	b.n	12bf0 <print_value+0xc8>
            const char buff[] = "null";
   12bcc:	4ba8      	ldr	r3, [pc, #672]	; (12e70 <print_value+0x348>)
            const char buff[] = "true";
   12bce:	6818      	ldr	r0, [r3, #0]
   12bd0:	791b      	ldrb	r3, [r3, #4]
   12bd2:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   12bd4:	2105      	movs	r1, #5
   12bd6:	4620      	mov	r0, r4
            const char buff[] = "true";
   12bd8:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   12bdc:	f00b f8e3 	bl	1dda6 <ensure>
            if (output == NULL)
   12be0:	4605      	mov	r5, r0
   12be2:	b1c8      	cbz	r0, 12c18 <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   12be4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   12be8:	a907      	add	r1, sp, #28
   12bea:	1ad2      	subs	r2, r2, r3
   12bec:	f00d fd8c 	bl	20708 <strncpy>

    return true;
   12bf0:	2501      	movs	r5, #1
   12bf2:	e011      	b.n	12c18 <print_value+0xf0>
            const char buff[] = "false";
   12bf4:	4b9f      	ldr	r3, [pc, #636]	; (12e74 <print_value+0x34c>)
            output = ensure(output_buffer, sizeof(buff));
   12bf6:	2106      	movs	r1, #6
            const char buff[] = "false";
   12bf8:	6818      	ldr	r0, [r3, #0]
   12bfa:	889b      	ldrh	r3, [r3, #4]
   12bfc:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   12bfe:	4620      	mov	r0, r4
            const char buff[] = "false";
   12c00:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   12c04:	f00b f8cf 	bl	1dda6 <ensure>
            if (output == NULL)
   12c08:	2800      	cmp	r0, #0
   12c0a:	d093      	beq.n	12b34 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   12c0c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   12c10:	a907      	add	r1, sp, #28
   12c12:	1ad2      	subs	r2, r2, r3
   12c14:	f00d fd78 	bl	20708 <strncpy>
}
   12c18:	4628      	mov	r0, r5
   12c1a:	b00f      	add	sp, #60	; 0x3c
   12c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   12c20:	4b95      	ldr	r3, [pc, #596]	; (12e78 <print_value+0x350>)
   12c22:	e7d4      	b.n	12bce <print_value+0xa6>
    if ((d * 0) != 0)
   12c24:	2200      	movs	r2, #0
    double d = item->valuedouble;
   12c26:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   12c2a:	2300      	movs	r3, #0
   12c2c:	4640      	mov	r0, r8
   12c2e:	4649      	mov	r1, r9
   12c30:	f7f9 fcc2 	bl	c5b8 <__aeabi_dmul>
   12c34:	2200      	movs	r2, #0
   12c36:	2300      	movs	r3, #0
   12c38:	f7f9 ff26 	bl	ca88 <__aeabi_dcmpeq>
   12c3c:	ae07      	add	r6, sp, #28
   12c3e:	b9b8      	cbnz	r0, 12c70 <print_value+0x148>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   12c40:	4630      	mov	r0, r6
   12c42:	498b      	ldr	r1, [pc, #556]	; (12e70 <print_value+0x348>)
   12c44:	f00d fd46 	bl	206d4 <strcpy>
   12c48:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   12c4a:	4620      	mov	r0, r4
   12c4c:	1c69      	adds	r1, r5, #1
   12c4e:	f00b f8aa 	bl	1dda6 <ensure>
    if (output_pointer == NULL)
   12c52:	2800      	cmp	r0, #0
   12c54:	f43f af6e 	beq.w	12b34 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   12c58:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   12c5a:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   12c5c:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   12c5e:	3301      	adds	r3, #1
   12c60:	429d      	cmp	r5, r3
   12c62:	d1fa      	bne.n	12c5a <print_value+0x132>
    output_pointer[i] = '\0';
   12c64:	2300      	movs	r3, #0
   12c66:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   12c68:	68a0      	ldr	r0, [r4, #8]
   12c6a:	4428      	add	r0, r5
   12c6c:	60a0      	str	r0, [r4, #8]
    return true;
   12c6e:	e7bf      	b.n	12bf0 <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   12c70:	211a      	movs	r1, #26
   12c72:	4a82      	ldr	r2, [pc, #520]	; (12e7c <print_value+0x354>)
   12c74:	4630      	mov	r0, r6
   12c76:	e9cd 8900 	strd	r8, r9, [sp]
   12c7a:	f008 f953 	bl	1af24 <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   12c7e:	4980      	ldr	r1, [pc, #512]	; (12e80 <print_value+0x358>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   12c80:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   12c82:	aa04      	add	r2, sp, #16
   12c84:	4630      	mov	r0, r6
   12c86:	f008 f9a1 	bl	1afcc <siscanf>
   12c8a:	2801      	cmp	r0, #1
   12c8c:	d106      	bne.n	12c9c <print_value+0x174>
   12c8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   12c92:	4640      	mov	r0, r8
   12c94:	4649      	mov	r1, r9
   12c96:	f7f9 fef7 	bl	ca88 <__aeabi_dcmpeq>
   12c9a:	b938      	cbnz	r0, 12cac <print_value+0x184>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   12c9c:	211a      	movs	r1, #26
   12c9e:	4630      	mov	r0, r6
   12ca0:	e9cd 8900 	strd	r8, r9, [sp]
   12ca4:	4a77      	ldr	r2, [pc, #476]	; (12e84 <print_value+0x35c>)
   12ca6:	f008 f93d 	bl	1af24 <sniprintf>
   12caa:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   12cac:	2d19      	cmp	r5, #25
   12cae:	f73f af41 	bgt.w	12b34 <print_value+0xc>
   12cb2:	e7ca      	b.n	12c4a <print_value+0x122>
            if (item->valuestring == NULL)
   12cb4:	6900      	ldr	r0, [r0, #16]
   12cb6:	2800      	cmp	r0, #0
   12cb8:	f43f af3c 	beq.w	12b34 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   12cbc:	f7fa f93a 	bl	cf34 <strlen>
   12cc0:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   12cc2:	4611      	mov	r1, r2
   12cc4:	4620      	mov	r0, r4
   12cc6:	9203      	str	r2, [sp, #12]
   12cc8:	f00b f86d 	bl	1dda6 <ensure>
            if (output == NULL)
   12ccc:	2800      	cmp	r0, #0
   12cce:	f43f af31 	beq.w	12b34 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12cd2:	9a03      	ldr	r2, [sp, #12]
   12cd4:	6931      	ldr	r1, [r6, #16]
   12cd6:	f00d fcb0 	bl	2063a <memcpy>
   12cda:	e789      	b.n	12bf0 <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   12cdc:	6900      	ldr	r0, [r0, #16]
   12cde:	f7ff fe75 	bl	129cc <print_string_ptr>
   12ce2:	4605      	mov	r5, r0
            return print_string(item, output_buffer);
   12ce4:	e798      	b.n	12c18 <print_value+0xf0>
        if (!print_value(current_element, output_buffer))
   12ce6:	4621      	mov	r1, r4
   12ce8:	4630      	mov	r0, r6
   12cea:	f7ff ff1d 	bl	12b28 <print_value>
   12cee:	2800      	cmp	r0, #0
   12cf0:	f43f af20 	beq.w	12b34 <print_value+0xc>
        update_offset(output_buffer);
   12cf4:	4620      	mov	r0, r4
   12cf6:	f00b f82d 	bl	1dd54 <update_offset>
        if (current_element->next)
   12cfa:	6833      	ldr	r3, [r6, #0]
   12cfc:	b1bb      	cbz	r3, 12d2e <print_value+0x206>
            length = (size_t) (output_buffer->format ? 2 : 1);
   12cfe:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   12d00:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   12d02:	2b00      	cmp	r3, #0
   12d04:	bf14      	ite	ne
   12d06:	f04f 0902 	movne.w	r9, #2
   12d0a:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   12d0e:	f109 0101 	add.w	r1, r9, #1
   12d12:	f00b f848 	bl	1dda6 <ensure>
            if (output_pointer == NULL)
   12d16:	2800      	cmp	r0, #0
   12d18:	f43f af0c 	beq.w	12b34 <print_value+0xc>
            *output_pointer++ = ',';
   12d1c:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   12d1e:	6963      	ldr	r3, [r4, #20]
   12d20:	b93b      	cbnz	r3, 12d32 <print_value+0x20a>
            *output_pointer++ = ',';
   12d22:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   12d24:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   12d28:	68a3      	ldr	r3, [r4, #8]
   12d2a:	444b      	add	r3, r9
   12d2c:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   12d2e:	6836      	ldr	r6, [r6, #0]
   12d30:	e73c      	b.n	12bac <print_value+0x84>
                *output_pointer++ = ' ';
   12d32:	1c83      	adds	r3, r0, #2
   12d34:	7045      	strb	r5, [r0, #1]
   12d36:	e7f5      	b.n	12d24 <print_value+0x1fc>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   12d38:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   12d3a:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   12d3c:	2b00      	cmp	r3, #0
   12d3e:	bf14      	ite	ne
   12d40:	2702      	movne	r7, #2
   12d42:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   12d44:	4620      	mov	r0, r4
   12d46:	1c79      	adds	r1, r7, #1
   12d48:	f00b f82d 	bl	1dda6 <ensure>
    if (output_pointer == NULL)
   12d4c:	2800      	cmp	r0, #0
   12d4e:	f43f aef1 	beq.w	12b34 <print_value+0xc>
    *output_pointer++ = '{';
   12d52:	237b      	movs	r3, #123	; 0x7b
   12d54:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   12d56:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   12d58:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   12d5a:	3201      	adds	r2, #1
   12d5c:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   12d5e:	b10b      	cbz	r3, 12d64 <print_value+0x23c>
        *output_pointer++ = '\n';
   12d60:	230a      	movs	r3, #10
   12d62:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   12d64:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   12d66:	2609      	movs	r6, #9
    output_buffer->offset += length;
   12d68:	443b      	add	r3, r7
        *output_pointer++ = ':';
   12d6a:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   12d6c:	60a3      	str	r3, [r4, #8]
    while (current_item)
   12d6e:	6963      	ldr	r3, [r4, #20]
   12d70:	b995      	cbnz	r5, 12d98 <print_value+0x270>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   12d72:	2b00      	cmp	r3, #0
   12d74:	d06f      	beq.n	12e56 <print_value+0x32e>
   12d76:	68e1      	ldr	r1, [r4, #12]
   12d78:	3101      	adds	r1, #1
   12d7a:	4620      	mov	r0, r4
   12d7c:	f00b f813 	bl	1dda6 <ensure>
    if (output_pointer == NULL)
   12d80:	2800      	cmp	r0, #0
   12d82:	f43f aed7 	beq.w	12b34 <print_value+0xc>
    if (output_buffer->format)
   12d86:	6963      	ldr	r3, [r4, #20]
   12d88:	2b00      	cmp	r3, #0
   12d8a:	d16e      	bne.n	12e6a <print_value+0x342>
   12d8c:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   12d8e:	227d      	movs	r2, #125	; 0x7d
   12d90:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   12d92:	2200      	movs	r2, #0
   12d94:	705a      	strb	r2, [r3, #1]
   12d96:	e715      	b.n	12bc4 <print_value+0x9c>
        if (output_buffer->format)
   12d98:	b173      	cbz	r3, 12db8 <print_value+0x290>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   12d9a:	4620      	mov	r0, r4
   12d9c:	68e1      	ldr	r1, [r4, #12]
   12d9e:	f00b f802 	bl	1dda6 <ensure>
            if (output_pointer == NULL)
   12da2:	2800      	cmp	r0, #0
   12da4:	f43f aec6 	beq.w	12b34 <print_value+0xc>
   12da8:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   12daa:	68e1      	ldr	r1, [r4, #12]
   12dac:	1a13      	subs	r3, r2, r0
   12dae:	428b      	cmp	r3, r1
   12db0:	d34e      	bcc.n	12e50 <print_value+0x328>
            output_buffer->offset += output_buffer->depth;
   12db2:	68a3      	ldr	r3, [r4, #8]
   12db4:	440b      	add	r3, r1
   12db6:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   12db8:	4621      	mov	r1, r4
   12dba:	6a28      	ldr	r0, [r5, #32]
   12dbc:	f7ff fe06 	bl	129cc <print_string_ptr>
   12dc0:	2800      	cmp	r0, #0
   12dc2:	f43f aeb7 	beq.w	12b34 <print_value+0xc>
        update_offset(output_buffer);
   12dc6:	4620      	mov	r0, r4
   12dc8:	f00a ffc4 	bl	1dd54 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   12dcc:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   12dce:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   12dd0:	2b00      	cmp	r3, #0
   12dd2:	bf14      	ite	ne
   12dd4:	f04f 0802 	movne.w	r8, #2
   12dd8:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   12ddc:	4641      	mov	r1, r8
   12dde:	f00a ffe2 	bl	1dda6 <ensure>
        if (output_pointer == NULL)
   12de2:	2800      	cmp	r0, #0
   12de4:	f43f aea6 	beq.w	12b34 <print_value+0xc>
        *output_pointer++ = ':';
   12de8:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   12dea:	6963      	ldr	r3, [r4, #20]
   12dec:	b103      	cbz	r3, 12df0 <print_value+0x2c8>
            *output_pointer++ = '\t';
   12dee:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   12df0:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   12df2:	4621      	mov	r1, r4
        output_buffer->offset += length;
   12df4:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   12df6:	4628      	mov	r0, r5
        output_buffer->offset += length;
   12df8:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   12dfa:	f7ff fe95 	bl	12b28 <print_value>
   12dfe:	2800      	cmp	r0, #0
   12e00:	f43f ae98 	beq.w	12b34 <print_value+0xc>
        update_offset(output_buffer);
   12e04:	4620      	mov	r0, r4
   12e06:	f00a ffa5 	bl	1dd54 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   12e0a:	682b      	ldr	r3, [r5, #0]
   12e0c:	6962      	ldr	r2, [r4, #20]
   12e0e:	3b00      	subs	r3, #0
   12e10:	bf18      	it	ne
   12e12:	2301      	movne	r3, #1
   12e14:	2a00      	cmp	r2, #0
   12e16:	bf0c      	ite	eq
   12e18:	4698      	moveq	r8, r3
   12e1a:	f103 0801 	addne.w	r8, r3, #1
        output_pointer = ensure(output_buffer, length + 1);
   12e1e:	4620      	mov	r0, r4
   12e20:	f108 0101 	add.w	r1, r8, #1
   12e24:	f00a ffbf 	bl	1dda6 <ensure>
        if (output_pointer == NULL)
   12e28:	2800      	cmp	r0, #0
   12e2a:	f43f ae83 	beq.w	12b34 <print_value+0xc>
        if (current_item->next)
   12e2e:	682b      	ldr	r3, [r5, #0]
   12e30:	b113      	cbz	r3, 12e38 <print_value+0x310>
            *output_pointer++ = ',';
   12e32:	232c      	movs	r3, #44	; 0x2c
   12e34:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   12e38:	6963      	ldr	r3, [r4, #20]
   12e3a:	b113      	cbz	r3, 12e42 <print_value+0x31a>
            *output_pointer++ = '\n';
   12e3c:	230a      	movs	r3, #10
   12e3e:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   12e42:	2300      	movs	r3, #0
   12e44:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   12e46:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   12e48:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   12e4a:	4443      	add	r3, r8
   12e4c:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   12e4e:	e78e      	b.n	12d6e <print_value+0x246>
                *output_pointer++ = '\t';
   12e50:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   12e54:	e7a9      	b.n	12daa <print_value+0x282>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   12e56:	2102      	movs	r1, #2
   12e58:	e78f      	b.n	12d7a <print_value+0x252>
            *output_pointer++ = '\t';
   12e5a:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   12e5e:	68e2      	ldr	r2, [r4, #12]
   12e60:	1a19      	subs	r1, r3, r0
   12e62:	3a01      	subs	r2, #1
   12e64:	4291      	cmp	r1, r2
   12e66:	d3f8      	bcc.n	12e5a <print_value+0x332>
   12e68:	e791      	b.n	12d8e <print_value+0x266>
   12e6a:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   12e6c:	2509      	movs	r5, #9
   12e6e:	e7f6      	b.n	12e5e <print_value+0x336>
   12e70:	00022576 	.word	0x00022576
   12e74:	0002258d 	.word	0x0002258d
   12e78:	00022593 	.word	0x00022593
   12e7c:	0002257b 	.word	0x0002257b
   12e80:	00022582 	.word	0x00022582
   12e84:	00022586 	.word	0x00022586

00012e88 <cJSON_strdup.isra.0.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   12e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   12e8a:	4605      	mov	r5, r0
   12e8c:	b180      	cbz	r0, 12eb0 <cJSON_strdup.isra.0.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   12e8e:	f7fa f851 	bl	cf34 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   12e92:	4b08      	ldr	r3, [pc, #32]	; (12eb4 <cJSON_strdup.isra.0.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   12e94:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   12e96:	4610      	mov	r0, r2
   12e98:	681b      	ldr	r3, [r3, #0]
   12e9a:	9201      	str	r2, [sp, #4]
   12e9c:	4798      	blx	r3
    if (copy == NULL)
   12e9e:	4604      	mov	r4, r0
   12ea0:	b118      	cbz	r0, 12eaa <cJSON_strdup.isra.0.constprop.0+0x22>
   12ea2:	4629      	mov	r1, r5
   12ea4:	9a01      	ldr	r2, [sp, #4]
   12ea6:	f00d fbc8 	bl	2063a <memcpy>
}
   12eaa:	4620      	mov	r0, r4
   12eac:	b003      	add	sp, #12
   12eae:	bd30      	pop	{r4, r5, pc}
        return NULL;
   12eb0:	4604      	mov	r4, r0
   12eb2:	e7fa      	b.n	12eaa <cJSON_strdup.isra.0.constprop.0+0x22>
   12eb4:	20014564 	.word	0x20014564

00012eb8 <add_item_to_object.constprop.0>:
#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   12eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12eba:	460d      	mov	r5, r1
   12ebc:	4614      	mov	r4, r2
{
    char *new_key = NULL;
    int new_type = cJSON_Invalid;

    if ((object == NULL) || (string == NULL) || (item == NULL))
   12ebe:	4607      	mov	r7, r0
   12ec0:	b1f0      	cbz	r0, 12f00 <add_item_to_object.constprop.0+0x48>
   12ec2:	b1e9      	cbz	r1, 12f00 <add_item_to_object.constprop.0+0x48>
   12ec4:	b1e2      	cbz	r2, 12f00 <add_item_to_object.constprop.0+0x48>
    {
        return false;
    }

    if (constant_key)
   12ec6:	b193      	cbz	r3, 12eee <add_item_to_object.constprop.0+0x36>
    {
        new_key = (char*)cast_away_const(string);
        new_type = item->type | cJSON_StringIsConst;
   12ec8:	68d6      	ldr	r6, [r2, #12]
   12eca:	f446 7600 	orr.w	r6, r6, #512	; 0x200
        }

        new_type = item->type & ~cJSON_StringIsConst;
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   12ece:	68e3      	ldr	r3, [r4, #12]
   12ed0:	059b      	lsls	r3, r3, #22
   12ed2:	d404      	bmi.n	12ede <add_item_to_object.constprop.0+0x26>
   12ed4:	6a20      	ldr	r0, [r4, #32]
   12ed6:	b110      	cbz	r0, 12ede <add_item_to_object.constprop.0+0x26>
    {
        hooks->deallocate(item->string);
   12ed8:	4b0a      	ldr	r3, [pc, #40]	; (12f04 <add_item_to_object.constprop.0+0x4c>)
   12eda:	685b      	ldr	r3, [r3, #4]
   12edc:	4798      	blx	r3
    }

    item->string = new_key;
    item->type = new_type;

    return add_item_to_array(object, item);
   12ede:	4621      	mov	r1, r4
   12ee0:	4638      	mov	r0, r7
    item->string = new_key;
   12ee2:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   12ee4:	60e6      	str	r6, [r4, #12]
}
   12ee6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   12eea:	f00a bf40 	b.w	1dd6e <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   12eee:	4608      	mov	r0, r1
   12ef0:	f7ff ffca 	bl	12e88 <cJSON_strdup.isra.0.constprop.0>
        if (new_key == NULL)
   12ef4:	4605      	mov	r5, r0
   12ef6:	b118      	cbz	r0, 12f00 <add_item_to_object.constprop.0+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   12ef8:	68e6      	ldr	r6, [r4, #12]
   12efa:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   12efe:	e7e6      	b.n	12ece <add_item_to_object.constprop.0+0x16>
}
   12f00:	2000      	movs	r0, #0
   12f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f04:	20014564 	.word	0x20014564

00012f08 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   12f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   12f0a:	4d24      	ldr	r5, [pc, #144]	; (12f9c <print.constprop.0+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   12f0c:	b08b      	sub	sp, #44	; 0x2c
   12f0e:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   12f10:	2224      	movs	r2, #36	; 0x24
   12f12:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   12f14:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   12f16:	a801      	add	r0, sp, #4
   12f18:	f00d fb9c 	bl	20654 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   12f1c:	682b      	ldr	r3, [r5, #0]
   12f1e:	f44f 7080 	mov.w	r0, #256	; 0x100
   12f22:	4798      	blx	r3
    buffer->length = default_buffer_size;
   12f24:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   12f28:	4603      	mov	r3, r0
    buffer->format = format;
   12f2a:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   12f2c:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   12f2e:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   12f30:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   12f32:	462f      	mov	r7, r5
   12f34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   12f38:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   12f3c:	b17b      	cbz	r3, 12f5e <print.constprop.0+0x56>
    if (!print_value(item, buffer))
   12f3e:	4620      	mov	r0, r4
   12f40:	a901      	add	r1, sp, #4
   12f42:	f7ff fdf1 	bl	12b28 <print_value>
   12f46:	b150      	cbz	r0, 12f5e <print.constprop.0+0x56>
    update_offset(buffer);
   12f48:	a801      	add	r0, sp, #4
   12f4a:	f00a ff03 	bl	1dd54 <update_offset>
    if (hooks->reallocate != NULL)
   12f4e:	68ae      	ldr	r6, [r5, #8]
   12f50:	9903      	ldr	r1, [sp, #12]
   12f52:	b15e      	cbz	r6, 12f6c <print.constprop.0+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   12f54:	9801      	ldr	r0, [sp, #4]
   12f56:	3101      	adds	r1, #1
   12f58:	47b0      	blx	r6
        if (printed == NULL) {
   12f5a:	4604      	mov	r4, r0
   12f5c:	b9d0      	cbnz	r0, 12f94 <print.constprop.0+0x8c>
    if (buffer->buffer != NULL)
   12f5e:	9c01      	ldr	r4, [sp, #4]
   12f60:	b1c4      	cbz	r4, 12f94 <print.constprop.0+0x8c>
        hooks->deallocate(buffer->buffer);
   12f62:	4620      	mov	r0, r4
   12f64:	687b      	ldr	r3, [r7, #4]
   12f66:	4798      	blx	r3
    return NULL;
   12f68:	2400      	movs	r4, #0
   12f6a:	e013      	b.n	12f94 <print.constprop.0+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   12f6c:	682b      	ldr	r3, [r5, #0]
   12f6e:	1c48      	adds	r0, r1, #1
   12f70:	4798      	blx	r3
        if (printed == NULL)
   12f72:	4604      	mov	r4, r0
   12f74:	2800      	cmp	r0, #0
   12f76:	d0f2      	beq.n	12f5e <print.constprop.0+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   12f78:	9a03      	ldr	r2, [sp, #12]
   12f7a:	9b02      	ldr	r3, [sp, #8]
   12f7c:	3201      	adds	r2, #1
   12f7e:	429a      	cmp	r2, r3
   12f80:	bf28      	it	cs
   12f82:	461a      	movcs	r2, r3
   12f84:	9901      	ldr	r1, [sp, #4]
   12f86:	f00d fb58 	bl	2063a <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   12f8a:	9b03      	ldr	r3, [sp, #12]
   12f8c:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   12f8e:	686b      	ldr	r3, [r5, #4]
   12f90:	9801      	ldr	r0, [sp, #4]
   12f92:	4798      	blx	r3
}
   12f94:	4620      	mov	r0, r4
   12f96:	b00b      	add	sp, #44	; 0x2c
   12f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f9a:	bf00      	nop
   12f9c:	20014564 	.word	0x20014564

00012fa0 <cJSON_Delete>:
{
   12fa0:	b570      	push	{r4, r5, r6, lr}
   12fa2:	4604      	mov	r4, r0
   12fa4:	4d0f      	ldr	r5, [pc, #60]	; (12fe4 <cJSON_Delete+0x44>)
    while (item != NULL)
   12fa6:	b904      	cbnz	r4, 12faa <cJSON_Delete+0xa>
}
   12fa8:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   12faa:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   12fac:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   12fae:	05d9      	lsls	r1, r3, #23
   12fb0:	d403      	bmi.n	12fba <cJSON_Delete+0x1a>
   12fb2:	68a0      	ldr	r0, [r4, #8]
   12fb4:	b968      	cbnz	r0, 12fd2 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   12fb6:	6920      	ldr	r0, [r4, #16]
   12fb8:	b988      	cbnz	r0, 12fde <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   12fba:	68e3      	ldr	r3, [r4, #12]
   12fbc:	059b      	lsls	r3, r3, #22
   12fbe:	d403      	bmi.n	12fc8 <cJSON_Delete+0x28>
   12fc0:	6a20      	ldr	r0, [r4, #32]
   12fc2:	b108      	cbz	r0, 12fc8 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   12fc4:	686b      	ldr	r3, [r5, #4]
   12fc6:	4798      	blx	r3
        global_hooks.deallocate(item);
   12fc8:	4620      	mov	r0, r4
   12fca:	686b      	ldr	r3, [r5, #4]
   12fcc:	4798      	blx	r3
        item = next;
   12fce:	4634      	mov	r4, r6
   12fd0:	e7e9      	b.n	12fa6 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   12fd2:	f7ff ffe5 	bl	12fa0 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   12fd6:	68e3      	ldr	r3, [r4, #12]
   12fd8:	05da      	lsls	r2, r3, #23
   12fda:	d5ec      	bpl.n	12fb6 <cJSON_Delete+0x16>
   12fdc:	e7ed      	b.n	12fba <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   12fde:	686b      	ldr	r3, [r5, #4]
   12fe0:	4798      	blx	r3
   12fe2:	e7ea      	b.n	12fba <cJSON_Delete+0x1a>
   12fe4:	20014564 	.word	0x20014564

00012fe8 <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   12fe8:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   12fea:	4b0a      	ldr	r3, [pc, #40]	; (13014 <cJSON_CreateString+0x2c>)
{
   12fec:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   12fee:	6818      	ldr	r0, [r3, #0]
   12ff0:	f00a fecd 	bl	1dd8e <cJSON_New_Item.isra.0>
    if(item)
   12ff4:	4604      	mov	r4, r0
   12ff6:	b158      	cbz	r0, 13010 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   12ff8:	2310      	movs	r3, #16
   12ffa:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   12ffc:	4628      	mov	r0, r5
   12ffe:	f7ff ff43 	bl	12e88 <cJSON_strdup.isra.0.constprop.0>
   13002:	4605      	mov	r5, r0
   13004:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   13006:	b918      	cbnz	r0, 13010 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   13008:	4620      	mov	r0, r4
   1300a:	f7ff ffc9 	bl	12fa0 <cJSON_Delete>
            return NULL;
   1300e:	462c      	mov	r4, r5
        }
    }

    return item;
}
   13010:	4620      	mov	r0, r4
   13012:	bd38      	pop	{r3, r4, r5, pc}
   13014:	20014564 	.word	0x20014564

00013018 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   13018:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1301a:	4b04      	ldr	r3, [pc, #16]	; (1302c <cJSON_CreateArray+0x14>)
   1301c:	6818      	ldr	r0, [r3, #0]
   1301e:	f00a feb6 	bl	1dd8e <cJSON_New_Item.isra.0>
    if(item)
   13022:	b108      	cbz	r0, 13028 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   13024:	2320      	movs	r3, #32
   13026:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   13028:	bd08      	pop	{r3, pc}
   1302a:	bf00      	nop
   1302c:	20014564 	.word	0x20014564

00013030 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   13030:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   13032:	4b04      	ldr	r3, [pc, #16]	; (13044 <cJSON_CreateObject+0x14>)
   13034:	6818      	ldr	r0, [r3, #0]
   13036:	f00a feaa 	bl	1dd8e <cJSON_New_Item.isra.0>
    if (item)
   1303a:	b108      	cbz	r0, 13040 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   1303c:	2340      	movs	r3, #64	; 0x40
   1303e:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   13040:	bd08      	pop	{r3, pc}
   13042:	bf00      	nop
   13044:	20014564 	.word	0x20014564

00013048 <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   13048:	b538      	push	{r3, r4, r5, lr}
	if (!first_time_init) {
   1304a:	4d19      	ldr	r5, [pc, #100]	; (130b0 <_nrf_modem_lib_init+0x68>)
   1304c:	4c19      	ldr	r4, [pc, #100]	; (130b4 <_nrf_modem_lib_init+0x6c>)
   1304e:	782b      	ldrb	r3, [r5, #0]
   13050:	b933      	cbnz	r3, 13060 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   13052:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   13056:	4818      	ldr	r0, [pc, #96]	; (130b8 <_nrf_modem_lib_init+0x70>)
   13058:	f00c fe90 	bl	1fd7c <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   1305c:	2301      	movs	r3, #1
   1305e:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   13060:	2200      	movs	r2, #0
   13062:	202a      	movs	r0, #42	; 0x2a
   13064:	4611      	mov	r1, r2
   13066:	f7fe f89f 	bl	111a8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   1306a:	2100      	movs	r1, #0
   1306c:	4813      	ldr	r0, [pc, #76]	; (130bc <_nrf_modem_lib_init+0x74>)
   1306e:	f006 f815 	bl	1909c <nrf_modem_init>
   13072:	4b13      	ldr	r3, [pc, #76]	; (130c0 <_nrf_modem_lib_init+0x78>)
   13074:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   13076:	f04f 32ff 	mov.w	r2, #4294967295
   1307a:	f04f 33ff 	mov.w	r3, #4294967295
   1307e:	480e      	ldr	r0, [pc, #56]	; (130b8 <_nrf_modem_lib_init+0x70>)
   13080:	f006 fd9e 	bl	19bc0 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   13084:	6820      	ldr	r0, [r4, #0]
   13086:	b170      	cbz	r0, 130a6 <_nrf_modem_lib_init+0x5e>
	return node->next;
   13088:	6804      	ldr	r4, [r0, #0]
   1308a:	2c00      	cmp	r4, #0
   1308c:	bf38      	it	cc
   1308e:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   13090:	3004      	adds	r0, #4
   13092:	f007 fa27 	bl	1a4e4 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   13096:	b134      	cbz	r4, 130a6 <_nrf_modem_lib_init+0x5e>
   13098:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1309a:	4620      	mov	r0, r4
   1309c:	2b00      	cmp	r3, #0
   1309e:	bf38      	it	cc
   130a0:	2300      	movcc	r3, #0
   130a2:	461c      	mov	r4, r3
   130a4:	e7f4      	b.n	13090 <_nrf_modem_lib_init+0x48>
	return z_impl_k_mutex_unlock(mutex);
   130a6:	4804      	ldr	r0, [pc, #16]	; (130b8 <_nrf_modem_lib_init+0x70>)
   130a8:	f006 fe02 	bl	19cb0 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   130ac:	2000      	movs	r0, #0
   130ae:	bd38      	pop	{r3, r4, r5, pc}
   130b0:	2001a459 	.word	0x2001a459
   130b4:	2001816c 	.word	0x2001816c
   130b8:	20018174 	.word	0x20018174
   130bc:	000210bc 	.word	0x000210bc
   130c0:	20018168 	.word	0x20018168

000130c4 <nrf_modem_lib_shutdown_wait>:

void nrf_modem_lib_shutdown_wait(void)
{
   130c4:	b530      	push	{r4, r5, lr}
   130c6:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   130c8:	2201      	movs	r2, #1
   130ca:	2100      	movs	r1, #0
   130cc:	a802      	add	r0, sp, #8
   130ce:	f00c ffdf 	bl	20090 <z_impl_k_sem_init>
   130d2:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   130d4:	f04f 33ff 	mov.w	r3, #4294967295
   130d8:	f04f 32ff 	mov.w	r2, #4294967295
   130dc:	481c      	ldr	r0, [pc, #112]	; (13150 <nrf_modem_lib_shutdown_wait+0x8c>)
   130de:	f006 fd6f 	bl	19bc0 <z_impl_k_mutex_lock>
	parent->next = child;
   130e2:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   130e4:	4c1b      	ldr	r4, [pc, #108]	; (13154 <nrf_modem_lib_shutdown_wait+0x90>)
	parent->next = child;
   130e6:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   130e8:	6863      	ldr	r3, [r4, #4]
   130ea:	bb2b      	cbnz	r3, 13138 <nrf_modem_lib_shutdown_wait+0x74>
	list->head = node;
   130ec:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   130f0:	4817      	ldr	r0, [pc, #92]	; (13150 <nrf_modem_lib_shutdown_wait+0x8c>)
   130f2:	f006 fddd 	bl	19cb0 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   130f6:	f04f 32ff 	mov.w	r2, #4294967295
   130fa:	f04f 33ff 	mov.w	r3, #4294967295
   130fe:	a802      	add	r0, sp, #8
   13100:	f007 fa16 	bl	1a530 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   13104:	f04f 32ff 	mov.w	r2, #4294967295
   13108:	f04f 33ff 	mov.w	r3, #4294967295
   1310c:	4810      	ldr	r0, [pc, #64]	; (13150 <nrf_modem_lib_shutdown_wait+0x8c>)
   1310e:	f006 fd57 	bl	19bc0 <z_impl_k_mutex_lock>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13112:	2200      	movs	r2, #0
   13114:	6823      	ldr	r3, [r4, #0]
   13116:	b153      	cbz	r3, 1312e <nrf_modem_lib_shutdown_wait+0x6a>
   13118:	42ab      	cmp	r3, r5
   1311a:	d116      	bne.n	1314a <nrf_modem_lib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   1311c:	9901      	ldr	r1, [sp, #4]
   1311e:	b972      	cbnz	r2, 1313e <nrf_modem_lib_shutdown_wait+0x7a>
   13120:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   13122:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   13124:	429a      	cmp	r2, r3
   13126:	d100      	bne.n	1312a <nrf_modem_lib_shutdown_wait+0x66>
	list->tail = node;
   13128:	6061      	str	r1, [r4, #4]
	parent->next = child;
   1312a:	2300      	movs	r3, #0
   1312c:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   1312e:	4808      	ldr	r0, [pc, #32]	; (13150 <nrf_modem_lib_shutdown_wait+0x8c>)
   13130:	f006 fdbe 	bl	19cb0 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   13134:	b009      	add	sp, #36	; 0x24
   13136:	bd30      	pop	{r4, r5, pc}
   13138:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1313a:	6065      	str	r5, [r4, #4]
}
   1313c:	e7d8      	b.n	130f0 <nrf_modem_lib_shutdown_wait+0x2c>
	parent->next = child;
   1313e:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   13140:	6861      	ldr	r1, [r4, #4]
   13142:	4299      	cmp	r1, r3
	list->tail = node;
   13144:	bf08      	it	eq
   13146:	6062      	streq	r2, [r4, #4]
}
   13148:	e7ef      	b.n	1312a <nrf_modem_lib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1314a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1314c:	681b      	ldr	r3, [r3, #0]
   1314e:	e7e2      	b.n	13116 <nrf_modem_lib_shutdown_wait+0x52>
   13150:	20018174 	.word	0x20018174
   13154:	2001816c 	.word	0x2001816c

00013158 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   13158:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1315a:	4c0d      	ldr	r4, [pc, #52]	; (13190 <thread_monitor_entry_get+0x38>)
{
   1315c:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1315e:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   13160:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   13162:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   13164:	4b0b      	ldr	r3, [pc, #44]	; (13194 <thread_monitor_entry_get+0x3c>)
   13166:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   13168:	6801      	ldr	r1, [r0, #0]
   1316a:	4291      	cmp	r1, r2
   1316c:	d00e      	beq.n	1318c <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   1316e:	b151      	cbz	r1, 13186 <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   13170:	6841      	ldr	r1, [r0, #4]
   13172:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   13174:	42b1      	cmp	r1, r6
   13176:	bfc4      	itt	gt
   13178:	4604      	movgt	r4, r0
   1317a:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1317c:	3d01      	subs	r5, #1
   1317e:	f100 0008 	add.w	r0, r0, #8
   13182:	d1f1      	bne.n	13168 <thread_monitor_entry_get+0x10>
   13184:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   13186:	3b01      	subs	r3, #1
	new_entry->id = id;
   13188:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1318a:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   1318c:	bd70      	pop	{r4, r5, r6, pc}
   1318e:	bf00      	nop
   13190:	200183b0 	.word	0x200183b0
   13194:	2001838c 	.word	0x2001838c

00013198 <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   13198:	4668      	mov	r0, sp
   1319a:	f020 0107 	bic.w	r1, r0, #7
   1319e:	468d      	mov	sp, r1
   131a0:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   131a2:	4b0f      	ldr	r3, [pc, #60]	; (131e0 <rpc_proxy_irq_handler+0x48>)
   131a4:	e8d3 2fef 	ldaex	r2, [r3]
   131a8:	3201      	adds	r2, #1
   131aa:	e8c3 2fe1 	stlex	r1, r2, [r3]
   131ae:	2900      	cmp	r1, #0
   131b0:	d1f8      	bne.n	131a4 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_os_application_irq_handler();
   131b2:	f002 fd93 	bl	15cdc <nrf_modem_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   131b6:	4b0b      	ldr	r3, [pc, #44]	; (131e4 <rpc_proxy_irq_handler+0x4c>)
   131b8:	681c      	ldr	r4, [r3, #0]
   131ba:	2c00      	cmp	r4, #0
   131bc:	bf38      	it	cc
   131be:	2400      	movcc	r4, #0
   131c0:	b12c      	cbz	r4, 131ce <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   131c2:	1d20      	adds	r0, r4, #4
   131c4:	f007 f98e 	bl	1a4e4 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   131c8:	6824      	ldr	r4, [r4, #0]
   131ca:	2c00      	cmp	r4, #0
   131cc:	d1f8      	bne.n	131c0 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   131ce:	f7fe f801 	bl	111d4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   131d2:	f7fe f9bf 	bl	11554 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   131d6:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   131da:	4685      	mov	sp, r0
   131dc:	4770      	bx	lr
   131de:	bf00      	nop
   131e0:	2001838c 	.word	0x2001838c
   131e4:	200183a8 	.word	0x200183a8

000131e8 <nrf_modem_os_timedwait>:
{
   131e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131ec:	460c      	mov	r4, r1
   131ee:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   131f0:	f00d f80e 	bl	20210 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   131f4:	6823      	ldr	r3, [r4, #0]
   131f6:	4680      	mov	r8, r0
   131f8:	2b00      	cmp	r3, #0
   131fa:	468a      	mov	sl, r1
   131fc:	d103      	bne.n	13206 <nrf_modem_os_timedwait+0x1e>
	z_impl_k_yield();
   131fe:	f007 f8fb 	bl	1a3f8 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   13202:	203c      	movs	r0, #60	; 0x3c
   13204:	e091      	b.n	1332a <nrf_modem_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   13206:	bfbc      	itt	lt
   13208:	f04f 33ff 	movlt.w	r3, #4294967295
   1320c:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1320e:	2201      	movs	r2, #1
   13210:	2100      	movs	r1, #0
   13212:	a802      	add	r0, sp, #8
   13214:	f00c ff3c 	bl	20090 <z_impl_k_sem_init>
   13218:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   1321a:	f04f 0320 	mov.w	r3, #32
   1321e:	f3ef 8b11 	mrs	fp, BASEPRI
   13222:	f383 8811 	msr	BASEPRI, r3
   13226:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1322a:	f007 f955 	bl	1a4d8 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1322e:	f7ff ff93 	bl	13158 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   13232:	4947      	ldr	r1, [pc, #284]	; (13350 <nrf_modem_os_timedwait+0x168>)
   13234:	6843      	ldr	r3, [r0, #4]
   13236:	680a      	ldr	r2, [r1, #0]
   13238:	4689      	mov	r9, r1
   1323a:	4293      	cmp	r3, r2
   1323c:	f04f 0300 	mov.w	r3, #0
   13240:	d108      	bne.n	13254 <nrf_modem_os_timedwait+0x6c>
	parent->next = child;
   13242:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   13244:	4b43      	ldr	r3, [pc, #268]	; (13354 <nrf_modem_os_timedwait+0x16c>)
   13246:	685a      	ldr	r2, [r3, #4]
   13248:	2a00      	cmp	r2, #0
   1324a:	d171      	bne.n	13330 <nrf_modem_os_timedwait+0x148>
	list->head = node;
   1324c:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   13250:	2301      	movs	r3, #1
}
   13252:	e000      	b.n	13256 <nrf_modem_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   13254:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   13256:	f38b 8811 	msr	BASEPRI, fp
   1325a:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   1325e:	2b00      	cmp	r3, #0
   13260:	d062      	beq.n	13328 <nrf_modem_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   13262:	6823      	ldr	r3, [r4, #0]
   13264:	1c5a      	adds	r2, r3, #1
   13266:	d066      	beq.n	13336 <nrf_modem_os_timedwait+0x14e>
   13268:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1326c:	f240 30e7 	movw	r0, #999	; 0x3e7
   13270:	2100      	movs	r1, #0
   13272:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   13276:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1327a:	2300      	movs	r3, #0
   1327c:	fbce 010c 	smlal	r0, r1, lr, ip
   13280:	f7f9 fcd4 	bl	cc2c <__aeabi_uldivmod>
   13284:	4602      	mov	r2, r0
   13286:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   13288:	a802      	add	r0, sp, #8
   1328a:	f007 f951 	bl	1a530 <z_impl_k_sem_take>
	__asm__ volatile(
   1328e:	f04f 0320 	mov.w	r3, #32
   13292:	f3ef 8b11 	mrs	fp, BASEPRI
   13296:	f383 8811 	msr	BASEPRI, r3
   1329a:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1329e:	2000      	movs	r0, #0
   132a0:	4b2c      	ldr	r3, [pc, #176]	; (13354 <nrf_modem_os_timedwait+0x16c>)
   132a2:	681a      	ldr	r2, [r3, #0]
   132a4:	b15a      	cbz	r2, 132be <nrf_modem_os_timedwait+0xd6>
   132a6:	42aa      	cmp	r2, r5
   132a8:	d14f      	bne.n	1334a <nrf_modem_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   132aa:	9d01      	ldr	r5, [sp, #4]
   132ac:	2800      	cmp	r0, #0
   132ae:	d146      	bne.n	1333e <nrf_modem_os_timedwait+0x156>
   132b0:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   132b2:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   132b4:	4291      	cmp	r1, r2
   132b6:	d100      	bne.n	132ba <nrf_modem_os_timedwait+0xd2>
	list->tail = node;
   132b8:	605d      	str	r5, [r3, #4]
	parent->next = child;
   132ba:	2300      	movs	r3, #0
   132bc:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   132be:	f007 f90b 	bl	1a4d8 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   132c2:	f7ff ff49 	bl	13158 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   132c6:	f8d9 3000 	ldr.w	r3, [r9]
   132ca:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   132cc:	f38b 8811 	msr	BASEPRI, fp
   132d0:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   132d4:	6825      	ldr	r5, [r4, #0]
   132d6:	1c6b      	adds	r3, r5, #1
   132d8:	d026      	beq.n	13328 <nrf_modem_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   132da:	f00c ff99 	bl	20210 <z_impl_k_uptime_ticks>
   132de:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   132e2:	468e      	mov	lr, r1
   132e4:	fba8 890c 	umull	r8, r9, r8, ip
   132e8:	fba0 010c 	umull	r0, r1, r0, ip
   132ec:	fb0c 990a 	mla	r9, ip, sl, r9
   132f0:	fb0c 110e 	mla	r1, ip, lr, r1
   132f4:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   132f8:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   132fc:	1952      	adds	r2, r2, r5
   132fe:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   13302:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   13306:	0bc5      	lsrs	r5, r0, #15
   13308:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   1330c:	1b56      	subs	r6, r2, r5
   1330e:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   13312:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   13316:	2e00      	cmp	r6, #0
   13318:	f177 0300 	sbcs.w	r3, r7, #0
   1331c:	bfb8      	it	lt
   1331e:	2600      	movlt	r6, #0
   13320:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   13322:	2e00      	cmp	r6, #0
   13324:	f43f af6d 	beq.w	13202 <nrf_modem_os_timedwait+0x1a>
	return 0;
   13328:	2000      	movs	r0, #0
}
   1332a:	b009      	add	sp, #36	; 0x24
   1332c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13330:	6015      	str	r5, [r2, #0]
	list->tail = node;
   13332:	605d      	str	r5, [r3, #4]
   13334:	e78c      	b.n	13250 <nrf_modem_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   13336:	f04f 32ff 	mov.w	r2, #4294967295
   1333a:	4613      	mov	r3, r2
   1333c:	e7a4      	b.n	13288 <nrf_modem_os_timedwait+0xa0>
	parent->next = child;
   1333e:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   13340:	6859      	ldr	r1, [r3, #4]
   13342:	4291      	cmp	r1, r2
	list->tail = node;
   13344:	bf08      	it	eq
   13346:	6058      	streq	r0, [r3, #4]
}
   13348:	e7b7      	b.n	132ba <nrf_modem_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1334a:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1334c:	6812      	ldr	r2, [r2, #0]
   1334e:	e7a9      	b.n	132a4 <nrf_modem_os_timedwait+0xbc>
   13350:	2001838c 	.word	0x2001838c
   13354:	200183a8 	.word	0x200183a8

00013358 <nrf_modem_os_errno_set>:
	switch (err_code) {
   13358:	283c      	cmp	r0, #60	; 0x3c
{
   1335a:	4601      	mov	r1, r0
   1335c:	b508      	push	{r3, lr}
	switch (err_code) {
   1335e:	f300 808f 	bgt.w	13480 <nrf_modem_os_errno_set+0x128>
   13362:	2800      	cmp	r0, #0
   13364:	dc0d      	bgt.n	13382 <nrf_modem_os_errno_set+0x2a>
   13366:	4bb2      	ldr	r3, [pc, #712]	; (13630 <nrf_modem_os_errno_set+0x2d8>)
   13368:	4ab2      	ldr	r2, [pc, #712]	; (13634 <nrf_modem_os_errno_set+0x2dc>)
		LOG_ERR("Untranslated errno %d set by nrf_modem_lib!", err_code);
   1336a:	48b3      	ldr	r0, [pc, #716]	; (13638 <nrf_modem_os_errno_set+0x2e0>)
   1336c:	1ad2      	subs	r2, r2, r3
   1336e:	08d2      	lsrs	r2, r2, #3
   13370:	0192      	lsls	r2, r2, #6
   13372:	f042 0201 	orr.w	r2, r2, #1
   13376:	f009 f956 	bl	1c626 <log_1>
		errno = 0xBAADBAAD;
   1337a:	f009 fdc8 	bl	1cf0e <__errno>
   1337e:	4baf      	ldr	r3, [pc, #700]	; (1363c <nrf_modem_os_errno_set+0x2e4>)
   13380:	e0bf      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
   13382:	1e43      	subs	r3, r0, #1
   13384:	2b3b      	cmp	r3, #59	; 0x3b
   13386:	d8ee      	bhi.n	13366 <nrf_modem_os_errno_set+0xe>
   13388:	a201      	add	r2, pc, #4	; (adr r2, 13390 <nrf_modem_os_errno_set+0x38>)
   1338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1338e:	bf00      	nop
   13390:	000134fd 	.word	0x000134fd
   13394:	00013507 	.word	0x00013507
   13398:	00013367 	.word	0x00013367
   1339c:	00013367 	.word	0x00013367
   133a0:	0001350f 	.word	0x0001350f
   133a4:	00013367 	.word	0x00013367
   133a8:	00013367 	.word	0x00013367
   133ac:	00013517 	.word	0x00013517
   133b0:	0001351f 	.word	0x0001351f
   133b4:	00013367 	.word	0x00013367
   133b8:	00013367 	.word	0x00013367
   133bc:	00013527 	.word	0x00013527
   133c0:	0001352f 	.word	0x0001352f
   133c4:	00013537 	.word	0x00013537
   133c8:	00013367 	.word	0x00013367
   133cc:	00013367 	.word	0x00013367
   133d0:	00013367 	.word	0x00013367
   133d4:	00013367 	.word	0x00013367
   133d8:	00013367 	.word	0x00013367
   133dc:	00013367 	.word	0x00013367
   133e0:	00013367 	.word	0x00013367
   133e4:	0001353f 	.word	0x0001353f
   133e8:	00013367 	.word	0x00013367
   133ec:	00013547 	.word	0x00013547
   133f0:	00013367 	.word	0x00013367
   133f4:	00013367 	.word	0x00013367
   133f8:	00013367 	.word	0x00013367
   133fc:	00013367 	.word	0x00013367
   13400:	00013367 	.word	0x00013367
   13404:	00013367 	.word	0x00013367
   13408:	00013367 	.word	0x00013367
   1340c:	00013367 	.word	0x00013367
   13410:	00013367 	.word	0x00013367
   13414:	00013367 	.word	0x00013367
   13418:	0001354f 	.word	0x0001354f
   1341c:	00013367 	.word	0x00013367
   13420:	00013557 	.word	0x00013557
   13424:	00013367 	.word	0x00013367
   13428:	00013367 	.word	0x00013367
   1342c:	0001361f 	.word	0x0001361f
   13430:	0001355f 	.word	0x0001355f
   13434:	00013567 	.word	0x00013567
   13438:	0001356f 	.word	0x0001356f
   1343c:	00013577 	.word	0x00013577
   13440:	0001357f 	.word	0x0001357f
   13444:	00013367 	.word	0x00013367
   13448:	00013587 	.word	0x00013587
   1344c:	0001358f 	.word	0x0001358f
   13450:	00013367 	.word	0x00013367
   13454:	00013597 	.word	0x00013597
   13458:	0001359f 	.word	0x0001359f
   1345c:	000135a7 	.word	0x000135a7
   13460:	00013627 	.word	0x00013627
   13464:	000135af 	.word	0x000135af
   13468:	00013367 	.word	0x00013367
   1346c:	000135b7 	.word	0x000135b7
   13470:	000135bf 	.word	0x000135bf
   13474:	00013367 	.word	0x00013367
   13478:	00013367 	.word	0x00013367
   1347c:	000135c7 	.word	0x000135c7
	switch (err_code) {
   13480:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   13484:	2b18      	cmp	r3, #24
   13486:	f63f af6e 	bhi.w	13366 <nrf_modem_os_errno_set+0xe>
   1348a:	2b18      	cmp	r3, #24
   1348c:	f63f af6b 	bhi.w	13366 <nrf_modem_os_errno_set+0xe>
   13490:	a201      	add	r2, pc, #4	; (adr r2, 13498 <nrf_modem_os_errno_set+0x140>)
   13492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13496:	bf00      	nop
   13498:	000135cf 	.word	0x000135cf
   1349c:	00013367 	.word	0x00013367
   134a0:	00013367 	.word	0x00013367
   134a4:	00013367 	.word	0x00013367
   134a8:	00013367 	.word	0x00013367
   134ac:	00013367 	.word	0x00013367
   134b0:	00013367 	.word	0x00013367
   134b4:	000135d7 	.word	0x000135d7
   134b8:	00013367 	.word	0x00013367
   134bc:	000135e7 	.word	0x000135e7
   134c0:	000135df 	.word	0x000135df
   134c4:	00013367 	.word	0x00013367
   134c8:	00013367 	.word	0x00013367
   134cc:	00013367 	.word	0x00013367
   134d0:	00013367 	.word	0x00013367
   134d4:	00013367 	.word	0x00013367
   134d8:	00013367 	.word	0x00013367
   134dc:	00013367 	.word	0x00013367
   134e0:	00013367 	.word	0x00013367
   134e4:	00013367 	.word	0x00013367
   134e8:	000135ef 	.word	0x000135ef
   134ec:	000135f7 	.word	0x000135f7
   134f0:	00013601 	.word	0x00013601
   134f4:	0001360b 	.word	0x0001360b
   134f8:	00013615 	.word	0x00013615
		errno = EPERM;
   134fc:	f009 fd07 	bl	1cf0e <__errno>
   13500:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   13502:	6003      	str	r3, [r0, #0]
}
   13504:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   13506:	f009 fd02 	bl	1cf0e <__errno>
   1350a:	2302      	movs	r3, #2
   1350c:	e7f9      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EIO;
   1350e:	f009 fcfe 	bl	1cf0e <__errno>
   13512:	2305      	movs	r3, #5
   13514:	e7f5      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = ENOEXEC;
   13516:	f009 fcfa 	bl	1cf0e <__errno>
   1351a:	2308      	movs	r3, #8
   1351c:	e7f1      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EBADF;
   1351e:	f009 fcf6 	bl	1cf0e <__errno>
   13522:	2309      	movs	r3, #9
   13524:	e7ed      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = ENOMEM;
   13526:	f009 fcf2 	bl	1cf0e <__errno>
   1352a:	230c      	movs	r3, #12
   1352c:	e7e9      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EACCES;
   1352e:	f009 fcee 	bl	1cf0e <__errno>
   13532:	230d      	movs	r3, #13
   13534:	e7e5      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EFAULT;
   13536:	f009 fcea 	bl	1cf0e <__errno>
   1353a:	230e      	movs	r3, #14
   1353c:	e7e1      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EINVAL;
   1353e:	f009 fce6 	bl	1cf0e <__errno>
   13542:	2316      	movs	r3, #22
   13544:	e7dd      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EMFILE;
   13546:	f009 fce2 	bl	1cf0e <__errno>
   1354a:	2318      	movs	r3, #24
   1354c:	e7d9      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EAGAIN;
   1354e:	f009 fcde 	bl	1cf0e <__errno>
   13552:	230b      	movs	r3, #11
   13554:	e7d5      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EDOM;
   13556:	f009 fcda 	bl	1cf0e <__errno>
   1355a:	2321      	movs	r3, #33	; 0x21
   1355c:	e7d1      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EPROTOTYPE;
   1355e:	f009 fcd6 	bl	1cf0e <__errno>
   13562:	236b      	movs	r3, #107	; 0x6b
   13564:	e7cd      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = ENOPROTOOPT;
   13566:	f009 fcd2 	bl	1cf0e <__errno>
   1356a:	236d      	movs	r3, #109	; 0x6d
   1356c:	e7c9      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EPROTONOSUPPORT;
   1356e:	f009 fcce 	bl	1cf0e <__errno>
   13572:	237b      	movs	r3, #123	; 0x7b
   13574:	e7c5      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = ESOCKTNOSUPPORT;
   13576:	f009 fcca 	bl	1cf0e <__errno>
   1357a:	237c      	movs	r3, #124	; 0x7c
   1357c:	e7c1      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EOPNOTSUPP;
   1357e:	f009 fcc6 	bl	1cf0e <__errno>
   13582:	235f      	movs	r3, #95	; 0x5f
   13584:	e7bd      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EAFNOSUPPORT;
   13586:	f009 fcc2 	bl	1cf0e <__errno>
   1358a:	236a      	movs	r3, #106	; 0x6a
   1358c:	e7b9      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EADDRINUSE;
   1358e:	f009 fcbe 	bl	1cf0e <__errno>
   13592:	2370      	movs	r3, #112	; 0x70
   13594:	e7b5      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = ENETDOWN;
   13596:	f009 fcba 	bl	1cf0e <__errno>
   1359a:	2373      	movs	r3, #115	; 0x73
   1359c:	e7b1      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = ENETUNREACH;
   1359e:	f009 fcb6 	bl	1cf0e <__errno>
   135a2:	2372      	movs	r3, #114	; 0x72
   135a4:	e7ad      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = ENETRESET;
   135a6:	f009 fcb2 	bl	1cf0e <__errno>
   135aa:	237e      	movs	r3, #126	; 0x7e
   135ac:	e7a9      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = ECONNRESET;
   135ae:	f009 fcae 	bl	1cf0e <__errno>
   135b2:	2368      	movs	r3, #104	; 0x68
   135b4:	e7a5      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EISCONN;
   135b6:	f009 fcaa 	bl	1cf0e <__errno>
   135ba:	237f      	movs	r3, #127	; 0x7f
   135bc:	e7a1      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = ENOTCONN;
   135be:	f009 fca6 	bl	1cf0e <__errno>
   135c2:	2380      	movs	r3, #128	; 0x80
   135c4:	e79d      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = ETIMEDOUT;
   135c6:	f009 fca2 	bl	1cf0e <__errno>
   135ca:	2374      	movs	r3, #116	; 0x74
   135cc:	e799      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = ENOBUFS;
   135ce:	f009 fc9e 	bl	1cf0e <__errno>
   135d2:	2369      	movs	r3, #105	; 0x69
   135d4:	e795      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EHOSTDOWN;
   135d6:	f009 fc9a 	bl	1cf0e <__errno>
   135da:	2375      	movs	r3, #117	; 0x75
   135dc:	e791      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EINPROGRESS;
   135de:	f009 fc96 	bl	1cf0e <__errno>
   135e2:	2377      	movs	r3, #119	; 0x77
   135e4:	e78d      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EALREADY;
   135e6:	f009 fc92 	bl	1cf0e <__errno>
   135ea:	2378      	movs	r3, #120	; 0x78
   135ec:	e789      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = ECANCELED;
   135ee:	f009 fc8e 	bl	1cf0e <__errno>
   135f2:	238c      	movs	r3, #140	; 0x8c
   135f4:	e785      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = ENOKEY;
   135f6:	f009 fc8a 	bl	1cf0e <__errno>
   135fa:	f240 73d1 	movw	r3, #2001	; 0x7d1
   135fe:	e780      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EKEYEXPIRED;
   13600:	f009 fc85 	bl	1cf0e <__errno>
   13604:	f240 73d2 	movw	r3, #2002	; 0x7d2
   13608:	e77b      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EKEYREVOKED;
   1360a:	f009 fc80 	bl	1cf0e <__errno>
   1360e:	f240 73d3 	movw	r3, #2003	; 0x7d3
   13612:	e776      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EKEYREJECTED;
   13614:	f009 fc7b 	bl	1cf0e <__errno>
   13618:	f240 73d4 	movw	r3, #2004	; 0x7d4
   1361c:	e771      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = EMSGSIZE;
   1361e:	f009 fc76 	bl	1cf0e <__errno>
   13622:	237a      	movs	r3, #122	; 0x7a
   13624:	e76d      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
		errno = ECONNABORTED;
   13626:	f009 fc72 	bl	1cf0e <__errno>
   1362a:	2371      	movs	r3, #113	; 0x71
   1362c:	e769      	b.n	13502 <nrf_modem_os_errno_set+0x1aa>
   1362e:	bf00      	nop
   13630:	00020e58 	.word	0x00020e58
   13634:	00020eb8 	.word	0x00020eb8
   13638:	00022598 	.word	0x00022598
   1363c:	baadbaad 	.word	0xbaadbaad

00013640 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13644:	4b01      	ldr	r3, [pc, #4]	; (1364c <nrf_modem_os_application_irq_set+0xc>)
   13646:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1364a:	4770      	bx	lr
   1364c:	e000e100 	.word	0xe000e100

00013650 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13654:	4b01      	ldr	r3, [pc, #4]	; (1365c <nrf_modem_os_application_irq_clear+0xc>)
   13656:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1365a:	4770      	bx	lr
   1365c:	e000e100 	.word	0xe000e100

00013660 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13660:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   13664:	4b01      	ldr	r3, [pc, #4]	; (1366c <nrf_modem_os_trace_irq_set+0xc>)
   13666:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1366a:	4770      	bx	lr
   1366c:	e000e100 	.word	0xe000e100

00013670 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13670:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   13674:	4b01      	ldr	r3, [pc, #4]	; (1367c <nrf_modem_os_trace_irq_clear+0xc>)
   13676:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1367a:	4770      	bx	lr
   1367c:	e000e100 	.word	0xe000e100

00013680 <nrf_modem_os_alloc>:
	nrfx_uarte_init(&uarte_inst, &config, NULL);
#endif
}

void *nrf_modem_os_alloc(size_t bytes)
{
   13680:	b507      	push	{r0, r1, r2, lr}
   13682:	4602      	mov	r2, r0
	return k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   13684:	2100      	movs	r1, #0
   13686:	2000      	movs	r0, #0
   13688:	e9cd 0100 	strd	r0, r1, [sp]
   1368c:	2104      	movs	r1, #4
   1368e:	4803      	ldr	r0, [pc, #12]	; (1369c <nrf_modem_os_alloc+0x1c>)
   13690:	f00c faf5 	bl	1fc7e <k_heap_aligned_alloc>
	} else {
		heap_diag.failed_allocs++;
	}
#endif
	return addr;
}
   13694:	b003      	add	sp, #12
   13696:	f85d fb04 	ldr.w	pc, [sp], #4
   1369a:	bf00      	nop
   1369c:	2001477c 	.word	0x2001477c

000136a0 <nrf_modem_os_free>:

void nrf_modem_os_free(void *mem)
{
   136a0:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   136a2:	4801      	ldr	r0, [pc, #4]	; (136a8 <nrf_modem_os_free+0x8>)
   136a4:	f00c bb32 	b.w	1fd0c <k_heap_free>
   136a8:	2001477c 	.word	0x2001477c

000136ac <nrf_modem_os_shm_tx_alloc>:
	LOG_INF("free(%p)", mem);
#endif
}

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   136ac:	b507      	push	{r0, r1, r2, lr}
   136ae:	4602      	mov	r2, r0
   136b0:	2100      	movs	r1, #0
   136b2:	2000      	movs	r0, #0
   136b4:	e9cd 0100 	strd	r0, r1, [sp]
   136b8:	2104      	movs	r1, #4
   136ba:	4803      	ldr	r0, [pc, #12]	; (136c8 <nrf_modem_os_shm_tx_alloc+0x1c>)
   136bc:	f00c fadf 	bl	1fc7e <k_heap_aligned_alloc>
	} else {
		shmem_diag.failed_allocs++;
	}
#endif
	return addr;
}
   136c0:	b003      	add	sp, #12
   136c2:	f85d fb04 	ldr.w	pc, [sp], #4
   136c6:	bf00      	nop
   136c8:	20018394 	.word	0x20018394

000136cc <nrf_modem_os_shm_tx_free>:

void nrf_modem_os_shm_tx_free(void *mem)
{
   136cc:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   136ce:	4801      	ldr	r0, [pc, #4]	; (136d4 <nrf_modem_os_shm_tx_free+0x8>)
   136d0:	f00c bb1c 	b.w	1fd0c <k_heap_free>
   136d4:	20018394 	.word	0x20018394

000136d8 <nrf_modem_os_init>:
}
#endif

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   136d8:	b510      	push	{r4, lr}
	list->head = NULL;
   136da:	2400      	movs	r4, #0
   136dc:	4b0c      	ldr	r3, [pc, #48]	; (13710 <nrf_modem_os_init+0x38>)
	list->tail = NULL;
   136de:	e9c3 4400 	strd	r4, r4, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   136e2:	4b0c      	ldr	r3, [pc, #48]	; (13714 <nrf_modem_os_init+0x3c>)
   136e4:	e8d3 2fef 	ldaex	r2, [r3]
   136e8:	e8c3 4fe1 	stlex	r1, r4, [r3]
   136ec:	2900      	cmp	r1, #0
   136ee:	d1f9      	bne.n	136e4 <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   136f0:	f00a fbba 	bl	1de68 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
   136f4:	f00a fbad 	bl	1de52 <trace_task_create>

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   136f8:	4b07      	ldr	r3, [pc, #28]	; (13718 <nrf_modem_os_init+0x40>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   136fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	memset(&heap_diag, 0x00, sizeof(heap_diag));
   136fe:	601c      	str	r4, [r3, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   13700:	4b06      	ldr	r3, [pc, #24]	; (1371c <nrf_modem_os_init+0x44>)
	k_heap_init(&shmem_heap,
   13702:	4907      	ldr	r1, [pc, #28]	; (13720 <nrf_modem_os_init+0x48>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   13704:	601c      	str	r4, [r3, #0]
	k_heap_init(&shmem_heap,
   13706:	4807      	ldr	r0, [pc, #28]	; (13724 <nrf_modem_os_init+0x4c>)
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_delayed_work_init(&heap_task.work, diag_task);
	k_delayed_work_submit(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   13708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_heap_init(&shmem_heap,
   1370c:	f00c baae 	b.w	1fc6c <k_heap_init>
   13710:	200183a8 	.word	0x200183a8
   13714:	2001838c 	.word	0x2001838c
   13718:	20018188 	.word	0x20018188
   1371c:	20018390 	.word	0x20018390
   13720:	200104e8 	.word	0x200104e8
   13724:	20018394 	.word	0x20018394

00013728 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   13728:	f240 2302 	movw	r3, #514	; 0x202
   1372c:	4298      	cmp	r0, r3
   1372e:	f000 8093 	beq.w	13858 <z_to_nrf_optname+0x130>
   13732:	dc07      	bgt.n	13744 <z_to_nrf_optname+0x1c>
   13734:	2801      	cmp	r0, #1
   13736:	d04d      	beq.n	137d4 <z_to_nrf_optname+0xac>
   13738:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1373c:	d034      	beq.n	137a8 <z_to_nrf_optname+0x80>
   1373e:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   13742:	4770      	bx	lr
	switch (z_in_level) {
   13744:	f240 2303 	movw	r3, #515	; 0x203
   13748:	4298      	cmp	r0, r3
   1374a:	d1f8      	bne.n	1373e <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   1374c:	3901      	subs	r1, #1
   1374e:	2913      	cmp	r1, #19
   13750:	d8f5      	bhi.n	1373e <z_to_nrf_optname+0x16>
   13752:	a301      	add	r3, pc, #4	; (adr r3, 13758 <z_to_nrf_optname+0x30>)
   13754:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   13758:	00013867 	.word	0x00013867
   1375c:	00013841 	.word	0x00013841
   13760:	00013845 	.word	0x00013845
   13764:	000137e5 	.word	0x000137e5
   13768:	00013849 	.word	0x00013849
   1376c:	0001384d 	.word	0x0001384d
   13770:	00013851 	.word	0x00013851
   13774:	0001373f 	.word	0x0001373f
   13778:	0001373f 	.word	0x0001373f
   1377c:	0001373f 	.word	0x0001373f
   13780:	0001373f 	.word	0x0001373f
   13784:	0001373f 	.word	0x0001373f
   13788:	0001373f 	.word	0x0001373f
   1378c:	0001373f 	.word	0x0001373f
   13790:	0001373f 	.word	0x0001373f
   13794:	0001373f 	.word	0x0001373f
   13798:	0001373f 	.word	0x0001373f
   1379c:	0001373f 	.word	0x0001373f
   137a0:	0001373f 	.word	0x0001373f
   137a4:	00013855 	.word	0x00013855
		switch (z_in_optname) {
   137a8:	3901      	subs	r1, #1
   137aa:	2907      	cmp	r1, #7
   137ac:	d8c7      	bhi.n	1373e <z_to_nrf_optname+0x16>
   137ae:	a301      	add	r3, pc, #4	; (adr r3, 137b4 <z_to_nrf_optname+0x8c>)
   137b0:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   137b4:	00013841 	.word	0x00013841
   137b8:	00013849 	.word	0x00013849
   137bc:	0001384d 	.word	0x0001384d
   137c0:	00013851 	.word	0x00013851
   137c4:	000137e5 	.word	0x000137e5
   137c8:	00013867 	.word	0x00013867
   137cc:	0001373f 	.word	0x0001373f
   137d0:	00013845 	.word	0x00013845
		switch (z_in_optname) {
   137d4:	2920      	cmp	r1, #32
   137d6:	dcb2      	bgt.n	1373e <z_to_nrf_optname+0x16>
   137d8:	2913      	cmp	r1, #19
   137da:	dc05      	bgt.n	137e8 <z_to_nrf_optname+0xc0>
   137dc:	2902      	cmp	r1, #2
   137de:	d027      	beq.n	13830 <z_to_nrf_optname+0x108>
   137e0:	2904      	cmp	r1, #4
   137e2:	d1ac      	bne.n	1373e <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   137e4:	2304      	movs	r3, #4
   137e6:	e03f      	b.n	13868 <z_to_nrf_optname+0x140>
   137e8:	3914      	subs	r1, #20
   137ea:	290c      	cmp	r1, #12
   137ec:	d8a7      	bhi.n	1373e <z_to_nrf_optname+0x16>
   137ee:	a301      	add	r3, pc, #4	; (adr r3, 137f4 <z_to_nrf_optname+0xcc>)
   137f0:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   137f4:	00013855 	.word	0x00013855
   137f8:	00013829 	.word	0x00013829
   137fc:	0001373f 	.word	0x0001373f
   13800:	0001373f 	.word	0x0001373f
   13804:	0001373f 	.word	0x0001373f
   13808:	0001382d 	.word	0x0001382d
   1380c:	0001373f 	.word	0x0001373f
   13810:	0001373f 	.word	0x0001373f
   13814:	0001373f 	.word	0x0001373f
   13818:	0001373f 	.word	0x0001373f
   1381c:	00013835 	.word	0x00013835
   13820:	00013839 	.word	0x00013839
   13824:	0001383d 	.word	0x0001383d
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   13828:	2315      	movs	r3, #21
   1382a:	e01d      	b.n	13868 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   1382c:	2319      	movs	r3, #25
   1382e:	e01b      	b.n	13868 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   13830:	2328      	movs	r3, #40	; 0x28
   13832:	e019      	b.n	13868 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   13834:	231e      	movs	r3, #30
   13836:	e017      	b.n	13868 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_IP_ECHO_REPLY;
   13838:	231f      	movs	r3, #31
   1383a:	e015      	b.n	13868 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   1383c:	2320      	movs	r3, #32
   1383e:	e013      	b.n	13868 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   13840:	2302      	movs	r3, #2
   13842:	e011      	b.n	13868 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   13844:	2303      	movs	r3, #3
   13846:	e00f      	b.n	13868 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   13848:	2305      	movs	r3, #5
   1384a:	e00d      	b.n	13868 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   1384c:	2306      	movs	r3, #6
   1384e:	e00b      	b.n	13868 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   13850:	2307      	movs	r3, #7
   13852:	e009      	b.n	13868 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   13854:	2314      	movs	r3, #20
   13856:	e007      	b.n	13868 <z_to_nrf_optname+0x140>
		switch (z_in_optname) {
   13858:	2902      	cmp	r1, #2
   1385a:	d0f1      	beq.n	13840 <z_to_nrf_optname+0x118>
   1385c:	2903      	cmp	r1, #3
   1385e:	d0f1      	beq.n	13844 <z_to_nrf_optname+0x11c>
   13860:	2901      	cmp	r1, #1
   13862:	f47f af6c 	bne.w	1373e <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   13866:	2301      	movs	r3, #1
	int retval = 0;
   13868:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   1386a:	6013      	str	r3, [r2, #0]
			break;
   1386c:	4770      	bx	lr
   1386e:	bf00      	nop

00013870 <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   13870:	f240 1303 	movw	r3, #259	; 0x103
{
   13874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   13878:	4299      	cmp	r1, r3
{
   1387a:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   1387c:	f000 8097 	beq.w	139ae <nrf91_socket_offload_ioctl+0x13e>
   13880:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   13884:	d005      	beq.n	13892 <nrf91_socket_offload_ioctl+0x22>
   13886:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   1388a:	d171      	bne.n	13970 <nrf91_socket_offload_ioctl+0x100>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   1388c:	f06f 0411 	mvn.w	r4, #17
   13890:	e01d      	b.n	138ce <nrf91_socket_offload_ioctl+0x5e>
	for (int i = 0; i < nfds; i++) {
   13892:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   13896:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   1389a:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   1389c:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   138a0:	4668      	mov	r0, sp
   138a2:	2240      	movs	r2, #64	; 0x40
   138a4:	f00c fed6 	bl	20654 <memset>
	for (int i = 0; i < nfds; i++) {
   138a8:	466e      	mov	r6, sp
   138aa:	4655      	mov	r5, sl
   138ac:	4657      	mov	r7, sl
	int retval = 0;
   138ae:	4644      	mov	r4, r8
		tmp[i].events = 0;
   138b0:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   138b2:	4940      	ldr	r1, [pc, #256]	; (139b4 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   138b4:	45c1      	cmp	r9, r8
   138b6:	dc0e      	bgt.n	138d6 <nrf91_socket_offload_ioctl+0x66>
	if (retval > 0) {
   138b8:	2c00      	cmp	r4, #0
   138ba:	dc08      	bgt.n	138ce <nrf91_socket_offload_ioctl+0x5e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   138bc:	465a      	mov	r2, fp
   138be:	4649      	mov	r1, r9
   138c0:	4668      	mov	r0, sp
   138c2:	f00c f98d 	bl	1fbe0 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   138c6:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   138c8:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   138ca:	4599      	cmp	r9, r3
   138cc:	dc28      	bgt.n	13920 <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   138ce:	4620      	mov	r0, r4
   138d0:	b011      	add	sp, #68	; 0x44
   138d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   138d6:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   138d8:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   138da:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   138dc:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   138de:	da05      	bge.n	138ec <nrf91_socket_offload_ioctl+0x7c>
			tmp[i].fd = fds[i].fd;
   138e0:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   138e2:	f108 0801 	add.w	r8, r8, #1
   138e6:	3608      	adds	r6, #8
   138e8:	3708      	adds	r7, #8
   138ea:	e7e3      	b.n	138b4 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   138ec:	2286      	movs	r2, #134	; 0x86
   138ee:	f7fb f9a1 	bl	ec34 <z_get_fd_obj>
			if (obj != NULL) {
   138f2:	2300      	movs	r3, #0
   138f4:	492f      	ldr	r1, [pc, #188]	; (139b4 <nrf91_socket_offload_ioctl+0x144>)
   138f6:	b178      	cbz	r0, 13918 <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   138f8:	3801      	subs	r0, #1
   138fa:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   138fc:	88b8      	ldrh	r0, [r7, #4]
   138fe:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   13900:	bf42      	ittt	mi
   13902:	88b2      	ldrhmi	r2, [r6, #4]
   13904:	f042 0201 	orrmi.w	r2, r2, #1
   13908:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   1390a:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   1390c:	bf42      	ittt	mi
   1390e:	88b2      	ldrhmi	r2, [r6, #4]
   13910:	f042 0202 	orrmi.w	r2, r2, #2
   13914:	80b2      	strhmi	r2, [r6, #4]
   13916:	e7e4      	b.n	138e2 <nrf91_socket_offload_ioctl+0x72>
				fds[i].revents = POLLNVAL;
   13918:	2220      	movs	r2, #32
				retval++;
   1391a:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   1391c:	80fa      	strh	r2, [r7, #6]
				retval++;
   1391e:	e7ed      	b.n	138fc <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   13920:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   13924:	2a00      	cmp	r2, #0
   13926:	db20      	blt.n	1396a <nrf91_socket_offload_ioctl+0xfa>
		if (tmp[i].revents & NRF_POLLIN) {
   13928:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   1392c:	88d2      	ldrh	r2, [r2, #6]
   1392e:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   13930:	bf42      	ittt	mi
   13932:	88e9      	ldrhmi	r1, [r5, #6]
   13934:	f041 0101 	orrmi.w	r1, r1, #1
   13938:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   1393a:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   1393c:	bf42      	ittt	mi
   1393e:	88e9      	ldrhmi	r1, [r5, #6]
   13940:	f041 0104 	orrmi.w	r1, r1, #4
   13944:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   13946:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   13948:	bf42      	ittt	mi
   1394a:	88e9      	ldrhmi	r1, [r5, #6]
   1394c:	f041 0108 	orrmi.w	r1, r1, #8
   13950:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   13952:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   13954:	bf42      	ittt	mi
   13956:	88e9      	ldrhmi	r1, [r5, #6]
   13958:	f041 0120 	orrmi.w	r1, r1, #32
   1395c:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   1395e:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   13960:	bf42      	ittt	mi
   13962:	88ea      	ldrhmi	r2, [r5, #6]
   13964:	f042 0210 	orrmi.w	r2, r2, #16
   13968:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   1396a:	3301      	adds	r3, #1
   1396c:	3508      	adds	r5, #8
   1396e:	e7ac      	b.n	138ca <nrf91_socket_offload_ioctl+0x5a>
	switch (cmd) {
   13970:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   13972:	f100 30ff 	add.w	r0, r0, #4294967295
	switch (cmd) {
   13976:	d00b      	beq.n	13990 <nrf91_socket_offload_ioctl+0x120>
   13978:	2904      	cmp	r1, #4
   1397a:	d111      	bne.n	139a0 <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   1397c:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1397e:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   13982:	d10d      	bne.n	139a0 <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   13984:	2101      	movs	r1, #1
   13986:	1392      	asrs	r2, r2, #14
   13988:	f00c f92c 	bl	1fbe4 <nrf_fcntl>
   1398c:	4604      	mov	r4, r0
		break;
   1398e:	e79e      	b.n	138ce <nrf91_socket_offload_ioctl+0x5e>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   13990:	2200      	movs	r2, #0
   13992:	2102      	movs	r1, #2
   13994:	f00c f926 	bl	1fbe4 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   13998:	0380      	lsls	r0, r0, #14
   1399a:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   1399e:	e796      	b.n	138ce <nrf91_socket_offload_ioctl+0x5e>
	errno = EINVAL;
   139a0:	f009 fab5 	bl	1cf0e <__errno>
   139a4:	2316      	movs	r3, #22
	return retval;
   139a6:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   139aa:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   139ac:	e78f      	b.n	138ce <nrf91_socket_offload_ioctl+0x5e>
	switch (request) {
   139ae:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   139b2:	e78c      	b.n	138ce <nrf91_socket_offload_ioctl+0x5e>
   139b4:	000210e8 	.word	0x000210e8

000139b8 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   139b8:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   139ba:	4b03      	ldr	r3, [pc, #12]	; (139c8 <nrf91_socket_iface_init+0x10>)
   139bc:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   139be:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   139c0:	4802      	ldr	r0, [pc, #8]	; (139cc <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   139c2:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   139c4:	f7fd b8da 	b.w	10b7c <socket_offload_dns_register>
   139c8:	20018400 	.word	0x20018400
   139cc:	000210e0 	.word	0x000210e0

000139d0 <nrf91_socket_offload_accept>:
{
   139d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139d4:	b08a      	sub	sp, #40	; 0x28
   139d6:	4607      	mov	r7, r0
   139d8:	460c      	mov	r4, r1
   139da:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   139dc:	f7fb f95a 	bl	ec94 <z_reserve_fd>
   139e0:	4606      	mov	r6, r0
	if (fd < 0) {
   139e2:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   139e4:	f107 30ff 	add.w	r0, r7, #4294967295
	if (fd < 0) {
   139e8:	da05      	bge.n	139f6 <nrf91_socket_offload_accept+0x26>
	return -1;
   139ea:	f04f 36ff 	mov.w	r6, #4294967295
}
   139ee:	4630      	mov	r0, r6
   139f0:	b00a      	add	sp, #40	; 0x28
   139f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   139f6:	b31c      	cbz	r4, 13a40 <nrf91_socket_offload_accept+0x70>
   139f8:	b32d      	cbz	r5, 13a46 <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   139fa:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   139fc:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   139fe:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   13a00:	bf0c      	ite	eq
   13a02:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   13a04:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   13a06:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   13a08:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   13a0a:	4639      	mov	r1, r7
   13a0c:	f00c f88a 	bl	1fb24 <nrf_accept>
	if (new_sd < 0) {
   13a10:	f1b0 0800 	subs.w	r8, r0, #0
   13a14:	dbe9      	blt.n	139ea <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   13a16:	b164      	cbz	r4, 13a32 <nrf91_socket_offload_accept+0x62>
   13a18:	b15d      	cbz	r5, 13a32 <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   13a1a:	687b      	ldr	r3, [r7, #4]
   13a1c:	2b02      	cmp	r3, #2
   13a1e:	d115      	bne.n	13a4c <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   13a20:	2308      	movs	r3, #8
   13a22:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   13a24:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   13a28:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   13a2a:	2301      	movs	r3, #1
   13a2c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   13a2e:	9b04      	ldr	r3, [sp, #16]
   13a30:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   13a32:	4630      	mov	r0, r6
   13a34:	4a0c      	ldr	r2, [pc, #48]	; (13a68 <nrf91_socket_offload_accept+0x98>)
   13a36:	f108 0101 	add.w	r1, r8, #1
   13a3a:	f7fb f95d 	bl	ecf8 <z_finalize_fd>
	return fd;
   13a3e:	e7d6      	b.n	139ee <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   13a40:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   13a42:	4627      	mov	r7, r4
   13a44:	e7e1      	b.n	13a0a <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   13a46:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   13a48:	462f      	mov	r7, r5
   13a4a:	e7de      	b.n	13a0a <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   13a4c:	2b0a      	cmp	r3, #10
   13a4e:	d106      	bne.n	13a5e <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   13a50:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   13a52:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   13a54:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   13a56:	a901      	add	r1, sp, #4
   13a58:	f00a fb09 	bl	1e06e <nrf_to_z_ipv6>
   13a5c:	e7e9      	b.n	13a32 <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   13a5e:	4630      	mov	r0, r6
   13a60:	f7fb f954 	bl	ed0c <z_free_fd>
   13a64:	e7c1      	b.n	139ea <nrf91_socket_offload_accept+0x1a>
   13a66:	bf00      	nop
   13a68:	000210e8 	.word	0x000210e8

00013a6c <nrf91_socket_offload_sendmsg>:
{
   13a6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13a70:	4680      	mov	r8, r0
   13a72:	4691      	mov	r9, r2
	if (msg == NULL) {
   13a74:	460c      	mov	r4, r1
   13a76:	b1f9      	cbz	r1, 13ab8 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   13a78:	2300      	movs	r3, #0
	ssize_t len = 0;
   13a7a:	461a      	mov	r2, r3
   13a7c:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   13a7e:	4283      	cmp	r3, r0
   13a80:	d124      	bne.n	13acc <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   13a82:	2a80      	cmp	r2, #128	; 0x80
   13a84:	d86d      	bhi.n	13b62 <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   13a86:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   13a88:	f04f 32ff 	mov.w	r2, #4294967295
   13a8c:	f04f 33ff 	mov.w	r3, #4294967295
   13a90:	4836      	ldr	r0, [pc, #216]	; (13b6c <nrf91_socket_offload_sendmsg+0x100>)
   13a92:	f006 f895 	bl	19bc0 <z_impl_k_mutex_lock>
		len = 0;
   13a96:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   13a98:	4e35      	ldr	r6, [pc, #212]	; (13b70 <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   13a9a:	68e3      	ldr	r3, [r4, #12]
   13a9c:	429d      	cmp	r5, r3
   13a9e:	d31c      	bcc.n	13ada <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   13aa0:	2600      	movs	r6, #0
		ret = 0;
   13aa2:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   13aa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 13b70 <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   13aa8:	42b7      	cmp	r7, r6
   13aaa:	dd01      	ble.n	13ab0 <nrf91_socket_offload_sendmsg+0x44>
   13aac:	2d00      	cmp	r5, #0
   13aae:	da25      	bge.n	13afc <nrf91_socket_offload_sendmsg+0x90>
	return z_impl_k_mutex_unlock(mutex);
   13ab0:	482e      	ldr	r0, [pc, #184]	; (13b6c <nrf91_socket_offload_sendmsg+0x100>)
   13ab2:	f006 f8fd 	bl	19cb0 <z_impl_k_mutex_unlock>
		return ret;
   13ab6:	e005      	b.n	13ac4 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   13ab8:	f009 fa29 	bl	1cf0e <__errno>
   13abc:	2316      	movs	r3, #22
		return -1;
   13abe:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   13ac2:	6003      	str	r3, [r0, #0]
}
   13ac4:	4628      	mov	r0, r5
   13ac6:	b002      	add	sp, #8
   13ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   13acc:	68a1      	ldr	r1, [r4, #8]
   13ace:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   13ad2:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   13ad4:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   13ad6:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   13ad8:	e7d1      	b.n	13a7e <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   13ada:	68a1      	ldr	r1, [r4, #8]
   13adc:	19f0      	adds	r0, r6, r7
   13ade:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   13ae2:	685a      	ldr	r2, [r3, #4]
   13ae4:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   13ae8:	f00c fda7 	bl	2063a <memcpy>
			len += msg->msg_iov[i].iov_len;
   13aec:	68a3      	ldr	r3, [r4, #8]
   13aee:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   13af2:	4453      	add	r3, sl
   13af4:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   13af6:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   13af8:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   13afa:	e7ce      	b.n	13a9a <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   13afc:	6863      	ldr	r3, [r4, #4]
   13afe:	1bba      	subs	r2, r7, r6
   13b00:	9301      	str	r3, [sp, #4]
   13b02:	6823      	ldr	r3, [r4, #0]
   13b04:	eb0a 0106 	add.w	r1, sl, r6
   13b08:	9300      	str	r3, [sp, #0]
   13b0a:	4640      	mov	r0, r8
   13b0c:	464b      	mov	r3, r9
   13b0e:	f00a fb1a 	bl	1e146 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   13b12:	1e05      	subs	r5, r0, #0
				offset += ret;
   13b14:	bfc8      	it	gt
   13b16:	1976      	addgt	r6, r6, r5
   13b18:	e7c6      	b.n	13aa8 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   13b1a:	68a3      	ldr	r3, [r4, #8]
   13b1c:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   13b20:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   13b24:	685b      	ldr	r3, [r3, #4]
   13b26:	b133      	cbz	r3, 13b36 <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   13b28:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   13b2a:	68a3      	ldr	r3, [r4, #8]
   13b2c:	eb03 020a 	add.w	r2, r3, sl
   13b30:	6852      	ldr	r2, [r2, #4]
   13b32:	4297      	cmp	r7, r2
   13b34:	d304      	bcc.n	13b40 <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   13b36:	3601      	adds	r6, #1
   13b38:	68e3      	ldr	r3, [r4, #12]
   13b3a:	429e      	cmp	r6, r3
   13b3c:	d3ed      	bcc.n	13b1a <nrf91_socket_offload_sendmsg+0xae>
   13b3e:	e7c1      	b.n	13ac4 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   13b40:	f853 100a 	ldr.w	r1, [r3, sl]
   13b44:	6863      	ldr	r3, [r4, #4]
   13b46:	4640      	mov	r0, r8
   13b48:	9301      	str	r3, [sp, #4]
   13b4a:	6823      	ldr	r3, [r4, #0]
   13b4c:	1bd2      	subs	r2, r2, r7
   13b4e:	9300      	str	r3, [sp, #0]
   13b50:	4439      	add	r1, r7
   13b52:	464b      	mov	r3, r9
   13b54:	f00a faf7 	bl	1e146 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   13b58:	1e03      	subs	r3, r0, #0
   13b5a:	db05      	blt.n	13b68 <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   13b5c:	441f      	add	r7, r3
			len += ret;
   13b5e:	441d      	add	r5, r3
   13b60:	e7e3      	b.n	13b2a <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   13b62:	2600      	movs	r6, #0
	len = 0;
   13b64:	4635      	mov	r5, r6
   13b66:	e7e7      	b.n	13b38 <nrf91_socket_offload_sendmsg+0xcc>
			ret = nrf91_socket_offload_sendto(obj,
   13b68:	461d      	mov	r5, r3
   13b6a:	e7ab      	b.n	13ac4 <nrf91_socket_offload_sendmsg+0x58>
   13b6c:	2001481c 	.word	0x2001481c
   13b70:	2001a45a 	.word	0x2001a45a

00013b74 <nrf91_socket_offload_getaddrinfo>:
{
   13b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13b78:	4614      	mov	r4, r2
   13b7a:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   13b7c:	2100      	movs	r1, #0
{
   13b7e:	b093      	sub	sp, #76	; 0x4c
   13b80:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   13b82:	2220      	movs	r2, #32
   13b84:	a802      	add	r0, sp, #8
{
   13b86:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   13b88:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   13b8a:	f00c fd63 	bl	20654 <memset>
	if (hints != NULL) {
   13b8e:	b194      	cbz	r4, 13bb6 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   13b90:	4620      	mov	r0, r4
   13b92:	a902      	add	r1, sp, #8
   13b94:	f00a fa46 	bl	1e024 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   13b98:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   13b9c:	f000 80e3 	beq.w	13d66 <nrf91_socket_offload_getaddrinfo+0x1f2>
		} else if (error == -EAFNOSUPPORT) {
   13ba0:	306a      	adds	r0, #106	; 0x6a
   13ba2:	f000 80e3 	beq.w	13d6c <nrf91_socket_offload_getaddrinfo+0x1f8>
		if (hints->ai_next != NULL) {
   13ba6:	6820      	ldr	r0, [r4, #0]
   13ba8:	b120      	cbz	r0, 13bb4 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   13baa:	ac0a      	add	r4, sp, #40	; 0x28
   13bac:	4621      	mov	r1, r4
   13bae:	f00a fa39 	bl	1e024 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   13bb2:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   13bb4:	ac02      	add	r4, sp, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   13bb6:	f04f 32ff 	mov.w	r2, #4294967295
   13bba:	f04f 33ff 	mov.w	r3, #4294967295
   13bbe:	486d      	ldr	r0, [pc, #436]	; (13d74 <nrf91_socket_offload_getaddrinfo+0x200>)
   13bc0:	f005 fffe 	bl	19bc0 <z_impl_k_mutex_lock>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   13bc4:	4628      	mov	r0, r5
   13bc6:	4622      	mov	r2, r4
   13bc8:	4631      	mov	r1, r6
   13bca:	ab01      	add	r3, sp, #4
   13bcc:	f00c f804 	bl	1fbd8 <nrf_getaddrinfo>
	if (retval != 0) {
   13bd0:	4605      	mov	r5, r0
   13bd2:	b318      	cbz	r0, 13c1c <nrf91_socket_offload_getaddrinfo+0xa8>
	switch (nrf_error) {
   13bd4:	282f      	cmp	r0, #47	; 0x2f
   13bd6:	f000 80c0 	beq.w	13d5a <nrf91_socket_offload_getaddrinfo+0x1e6>
   13bda:	dc0f      	bgt.n	13bfc <nrf91_socket_offload_getaddrinfo+0x88>
   13bdc:	280c      	cmp	r0, #12
   13bde:	f000 80bf 	beq.w	13d60 <nrf91_socket_offload_getaddrinfo+0x1ec>
		return DNS_EAI_AGAIN;
   13be2:	2823      	cmp	r0, #35	; 0x23
   13be4:	bf14      	ite	ne
   13be6:	f06f 050a 	mvnne.w	r5, #10
   13bea:	f06f 0502 	mvneq.w	r5, #2
	return z_impl_k_mutex_unlock(mutex);
   13bee:	4861      	ldr	r0, [pc, #388]	; (13d74 <nrf91_socket_offload_getaddrinfo+0x200>)
   13bf0:	f006 f85e 	bl	19cb0 <z_impl_k_mutex_unlock>
}
   13bf4:	4628      	mov	r0, r5
   13bf6:	b013      	add	sp, #76	; 0x4c
   13bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   13bfc:	2833      	cmp	r0, #51	; 0x33
   13bfe:	d006      	beq.n	13c0e <nrf91_socket_offload_getaddrinfo+0x9a>
		return DNS_EAI_INPROGRESS;
   13c00:	2873      	cmp	r0, #115	; 0x73
   13c02:	bf14      	ite	ne
   13c04:	f06f 050a 	mvnne.w	r5, #10
   13c08:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   13c0c:	e7ef      	b.n	13bee <nrf91_socket_offload_getaddrinfo+0x7a>
		errno = ENETUNREACH;
   13c0e:	f009 f97e 	bl	1cf0e <__errno>
   13c12:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   13c14:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   13c18:	6003      	str	r3, [r0, #0]
   13c1a:	e7e8      	b.n	13bee <nrf91_socket_offload_getaddrinfo+0x7a>
	struct zsock_addrinfo *latest_z_res = NULL;
   13c1c:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   13c1e:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   13c20:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   13c22:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   13c24:	b91e      	cbnz	r6, 13c2e <nrf91_socket_offload_getaddrinfo+0xba>
	nrf_freeaddrinfo(nrf_res);
   13c26:	9801      	ldr	r0, [sp, #4]
   13c28:	f00b ffd8 	bl	1fbdc <nrf_freeaddrinfo>
   13c2c:	e7df      	b.n	13bee <nrf91_socket_offload_getaddrinfo+0x7a>
	return k_aligned_alloc(sizeof(void *), size);
   13c2e:	2150      	movs	r1, #80	; 0x50
   13c30:	2004      	movs	r0, #4
   13c32:	f007 f883 	bl	1ad3c <k_aligned_alloc>
		if (next_z_res == NULL) {
   13c36:	4604      	mov	r4, r0
   13c38:	2800      	cmp	r0, #0
   13c3a:	f000 8083 	beq.w	13d44 <nrf91_socket_offload_getaddrinfo+0x1d0>
	family = nrf_to_z_family(nrf_in->ai_family);
   13c3e:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   13c40:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   13c42:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   13c44:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   13c48:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   13c4c:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   13c50:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   13c52:	dc23      	bgt.n	13c9c <nrf91_socket_offload_getaddrinfo+0x128>
   13c54:	2900      	cmp	r1, #0
   13c56:	dd23      	ble.n	13ca0 <nrf91_socket_offload_getaddrinfo+0x12c>
   13c58:	1e4b      	subs	r3, r1, #1
   13c5a:	2b09      	cmp	r3, #9
   13c5c:	d820      	bhi.n	13ca0 <nrf91_socket_offload_getaddrinfo+0x12c>
   13c5e:	e8df f003 	tbb	[pc, r3]
   13c62:	2905      	.short	0x2905
   13c64:	1f251f1f 	.word	0x1f251f1f
   13c68:	271f1f1f 	.word	0x271f1f1f
		return AF_LOCAL;
   13c6c:	2306      	movs	r3, #6
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   13c6e:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   13c70:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   13c72:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   13c76:	d04c      	beq.n	13d12 <nrf91_socket_offload_getaddrinfo+0x19e>
   13c78:	dc26      	bgt.n	13cc8 <nrf91_socket_offload_getaddrinfo+0x154>
   13c7a:	2a02      	cmp	r2, #2
   13c7c:	d04d      	beq.n	13d1a <nrf91_socket_offload_getaddrinfo+0x1a6>
   13c7e:	dc1d      	bgt.n	13cbc <nrf91_socket_offload_getaddrinfo+0x148>
   13c80:	b372      	cbz	r2, 13ce0 <nrf91_socket_offload_getaddrinfo+0x16c>
   13c82:	2a01      	cmp	r2, #1
   13c84:	d04b      	beq.n	13d1e <nrf91_socket_offload_getaddrinfo+0x1aa>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   13c86:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   13c8a:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   13c8c:	2300      	movs	r3, #0
   13c8e:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   13c90:	4620      	mov	r0, r4
   13c92:	f00c fc75 	bl	20580 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   13c96:	f06f 0506 	mvn.w	r5, #6
   13c9a:	e055      	b.n	13d48 <nrf91_socket_offload_getaddrinfo+0x1d4>
	switch (nrf_family) {
   13c9c:	2966      	cmp	r1, #102	; 0x66
   13c9e:	d00b      	beq.n	13cb8 <nrf91_socket_offload_getaddrinfo+0x144>
			k_free(next_z_res);
   13ca0:	4620      	mov	r0, r4
   13ca2:	f00c fc6d 	bl	20580 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   13ca6:	f06f 0508 	mvn.w	r5, #8
   13caa:	e04d      	b.n	13d48 <nrf91_socket_offload_getaddrinfo+0x1d4>
		return AF_PACKET;
   13cac:	2303      	movs	r3, #3
   13cae:	e7de      	b.n	13c6e <nrf91_socket_offload_getaddrinfo+0xfa>
		return AF_INET6;
   13cb0:	2302      	movs	r3, #2
   13cb2:	e7dc      	b.n	13c6e <nrf91_socket_offload_getaddrinfo+0xfa>
	switch (nrf_family) {
   13cb4:	2301      	movs	r3, #1
   13cb6:	e7da      	b.n	13c6e <nrf91_socket_offload_getaddrinfo+0xfa>
		return AF_LTE;
   13cb8:	460b      	mov	r3, r1
   13cba:	e7d8      	b.n	13c6e <nrf91_socket_offload_getaddrinfo+0xfa>
	switch (proto) {
   13cbc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   13cc0:	d1e1      	bne.n	13c86 <nrf91_socket_offload_getaddrinfo+0x112>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   13cc2:	f44f 7381 	mov.w	r3, #258	; 0x102
   13cc6:	e026      	b.n	13d16 <nrf91_socket_offload_getaddrinfo+0x1a2>
	switch (proto) {
   13cc8:	f240 2302 	movw	r3, #514	; 0x202
   13ccc:	429a      	cmp	r2, r3
   13cce:	d007      	beq.n	13ce0 <nrf91_socket_offload_getaddrinfo+0x16c>
   13cd0:	f240 2303 	movw	r3, #515	; 0x203
   13cd4:	429a      	cmp	r2, r3
   13cd6:	d003      	beq.n	13ce0 <nrf91_socket_offload_getaddrinfo+0x16c>
   13cd8:	f240 2301 	movw	r3, #513	; 0x201
   13cdc:	429a      	cmp	r2, r3
   13cde:	d1d2      	bne.n	13c86 <nrf91_socket_offload_getaddrinfo+0x112>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   13ce0:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   13ce2:	2902      	cmp	r1, #2
   13ce4:	d11d      	bne.n	13d22 <nrf91_socket_offload_getaddrinfo+0x1ae>
   13ce6:	2108      	movs	r1, #8
   13ce8:	2004      	movs	r0, #4
   13cea:	f007 f827 	bl	1ad3c <k_aligned_alloc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   13cee:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   13cf0:	b328      	cbz	r0, 13d3e <nrf91_socket_offload_getaddrinfo+0x1ca>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   13cf2:	2308      	movs	r3, #8
   13cf4:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   13cf6:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   13cf8:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   13cfa:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   13cfc:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   13cfe:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   13d00:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   13d02:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   13d04:	f1b8 0f00 	cmp.w	r8, #0
   13d08:	d124      	bne.n	13d54 <nrf91_socket_offload_getaddrinfo+0x1e0>
			*res = next_z_res;
   13d0a:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   13d0c:	46a0      	mov	r8, r4
   13d0e:	69f6      	ldr	r6, [r6, #28]
   13d10:	e788      	b.n	13c24 <nrf91_socket_offload_getaddrinfo+0xb0>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   13d12:	f240 1311 	movw	r3, #273	; 0x111
   13d16:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   13d18:	e7e3      	b.n	13ce2 <nrf91_socket_offload_getaddrinfo+0x16e>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   13d1a:	2311      	movs	r3, #17
   13d1c:	e7fb      	b.n	13d16 <nrf91_socket_offload_getaddrinfo+0x1a2>
   13d1e:	2306      	movs	r3, #6
   13d20:	e7f9      	b.n	13d16 <nrf91_socket_offload_getaddrinfo+0x1a2>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   13d22:	290a      	cmp	r1, #10
   13d24:	d1b4      	bne.n	13c90 <nrf91_socket_offload_getaddrinfo+0x11c>
   13d26:	2118      	movs	r1, #24
   13d28:	2004      	movs	r0, #4
   13d2a:	f007 f807 	bl	1ad3c <k_aligned_alloc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   13d2e:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   13d30:	b128      	cbz	r0, 13d3e <nrf91_socket_offload_getaddrinfo+0x1ca>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   13d32:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   13d34:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   13d36:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   13d38:	f00a f999 	bl	1e06e <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   13d3c:	e7e2      	b.n	13d04 <nrf91_socket_offload_getaddrinfo+0x190>
			k_free(next_z_res);
   13d3e:	4620      	mov	r0, r4
   13d40:	f00c fc1e 	bl	20580 <k_free>
			retval = DNS_EAI_MEMORY;
   13d44:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   13d48:	6838      	ldr	r0, [r7, #0]
   13d4a:	f00a f95e 	bl	1e00a <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   13d4e:	2300      	movs	r3, #0
   13d50:	603b      	str	r3, [r7, #0]
   13d52:	e768      	b.n	13c26 <nrf91_socket_offload_getaddrinfo+0xb2>
			latest_z_res->ai_next = next_z_res;
   13d54:	f8c8 4000 	str.w	r4, [r8]
   13d58:	e7d8      	b.n	13d0c <nrf91_socket_offload_getaddrinfo+0x198>
		return DNS_EAI_NONAME;
   13d5a:	f06f 0501 	mvn.w	r5, #1
   13d5e:	e746      	b.n	13bee <nrf91_socket_offload_getaddrinfo+0x7a>
		return DNS_EAI_MEMORY;
   13d60:	f06f 0509 	mvn.w	r5, #9
   13d64:	e743      	b.n	13bee <nrf91_socket_offload_getaddrinfo+0x7a>
			return DNS_EAI_SOCKTYPE;
   13d66:	f06f 0506 	mvn.w	r5, #6
   13d6a:	e743      	b.n	13bf4 <nrf91_socket_offload_getaddrinfo+0x80>
			return DNS_EAI_ADDRFAMILY;
   13d6c:	f06f 0508 	mvn.w	r5, #8
   13d70:	e740      	b.n	13bf4 <nrf91_socket_offload_getaddrinfo+0x80>
   13d72:	bf00      	nop
   13d74:	200147b8 	.word	0x200147b8

00013d78 <nrf91_socket_create>:
{
   13d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d7a:	4606      	mov	r6, r0
   13d7c:	460d      	mov	r5, r1
   13d7e:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   13d80:	f7fa ff88 	bl	ec94 <z_reserve_fd>
	if (fd < 0) {
   13d84:	1e04      	subs	r4, r0, #0
   13d86:	db0d      	blt.n	13da4 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   13d88:	b2b0      	uxth	r0, r6
   13d8a:	f00a f88c 	bl	1dea6 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   13d8e:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   13d92:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   13d94:	d109      	bne.n	13daa <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   13d96:	f009 f8ba 	bl	1cf0e <__errno>
   13d9a:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   13d9c:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   13d9e:	4620      	mov	r0, r4
   13da0:	f7fa ffb4 	bl	ed0c <z_free_fd>
		return -1;
   13da4:	f04f 34ff 	mov.w	r4, #4294967295
   13da8:	e01b      	b.n	13de2 <nrf91_socket_create+0x6a>
	switch (socktype) {
   13daa:	2d03      	cmp	r5, #3
   13dac:	d003      	beq.n	13db6 <nrf91_socket_create+0x3e>
   13dae:	2d04      	cmp	r5, #4
   13db0:	bf08      	it	eq
   13db2:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   13db6:	4638      	mov	r0, r7
   13db8:	f00a f891 	bl	1dede <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   13dbc:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   13dc0:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   13dc2:	d103      	bne.n	13dcc <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   13dc4:	f009 f8a3 	bl	1cf0e <__errno>
   13dc8:	237b      	movs	r3, #123	; 0x7b
   13dca:	e7e7      	b.n	13d9c <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   13dcc:	4629      	mov	r1, r5
   13dce:	4630      	mov	r0, r6
   13dd0:	f00b fe32 	bl	1fa38 <nrf_socket>
	if (sd < 0) {
   13dd4:	1e01      	subs	r1, r0, #0
   13dd6:	dbe2      	blt.n	13d9e <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   13dd8:	4620      	mov	r0, r4
   13dda:	4a03      	ldr	r2, [pc, #12]	; (13de8 <nrf91_socket_create+0x70>)
   13ddc:	3101      	adds	r1, #1
   13dde:	f7fa ff8b 	bl	ecf8 <z_finalize_fd>
}
   13de2:	4620      	mov	r0, r4
   13de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13de6:	bf00      	nop
   13de8:	000210e8 	.word	0x000210e8

00013dec <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   13dec:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   13dee:	f240 2201 	movw	r2, #513	; 0x201
   13df2:	2102      	movs	r1, #2
   13df4:	2066      	movs	r0, #102	; 0x66
   13df6:	f7fc fd9f 	bl	10938 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   13dfa:	4b05      	ldr	r3, [pc, #20]	; (13e10 <open_socket+0x24>)
   13dfc:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   13dfe:	3001      	adds	r0, #1
   13e00:	d104      	bne.n	13e0c <open_socket+0x20>
		return -errno;
   13e02:	f009 f884 	bl	1cf0e <__errno>
   13e06:	6800      	ldr	r0, [r0, #0]
   13e08:	4240      	negs	r0, r0
	}

	return 0;
}
   13e0a:	bd08      	pop	{r3, pc}
	return 0;
   13e0c:	2000      	movs	r0, #0
   13e0e:	e7fc      	b.n	13e0a <open_socket+0x1e>
   13e10:	20018404 	.word	0x20018404

00013e14 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   13e14:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   13e16:	4d17      	ldr	r5, [pc, #92]	; (13e74 <at_cmd_driver_init+0x60>)
{
   13e18:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   13e1a:	782b      	ldrb	r3, [r5, #0]
   13e1c:	bb43      	cbnz	r3, 13e70 <at_cmd_driver_init+0x5c>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   13e1e:	f7ff ffe5 	bl	13dec <open_socket>
	if (err) {
   13e22:	4604      	mov	r4, r0
   13e24:	b168      	cbz	r0, 13e42 <at_cmd_driver_init+0x2e>
   13e26:	4a14      	ldr	r2, [pc, #80]	; (13e78 <at_cmd_driver_init+0x64>)
   13e28:	4b14      	ldr	r3, [pc, #80]	; (13e7c <at_cmd_driver_init+0x68>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   13e2a:	4601      	mov	r1, r0
   13e2c:	1ad2      	subs	r2, r2, r3
   13e2e:	08d2      	lsrs	r2, r2, #3
   13e30:	0192      	lsls	r2, r2, #6
   13e32:	4813      	ldr	r0, [pc, #76]	; (13e80 <at_cmd_driver_init+0x6c>)
   13e34:	f042 0201 	orr.w	r2, r2, #1
   13e38:	f008 fbf5 	bl	1c626 <log_1>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   13e3c:	4620      	mov	r0, r4
   13e3e:	b009      	add	sp, #36	; 0x24
   13e40:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13e42:	2200      	movs	r2, #0
   13e44:	2300      	movs	r3, #0
   13e46:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13e4a:	230a      	movs	r3, #10
   13e4c:	e9cd 0000 	strd	r0, r0, [sp]
   13e50:	e9cd 0302 	strd	r0, r3, [sp, #8]
   13e54:	9004      	str	r0, [sp, #16]
   13e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13e5a:	4b0a      	ldr	r3, [pc, #40]	; (13e84 <at_cmd_driver_init+0x70>)
   13e5c:	490a      	ldr	r1, [pc, #40]	; (13e88 <at_cmd_driver_init+0x74>)
   13e5e:	480b      	ldr	r0, [pc, #44]	; (13e8c <at_cmd_driver_init+0x78>)
   13e60:	f006 fbd8 	bl	1a614 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   13e64:	490a      	ldr	r1, [pc, #40]	; (13e90 <at_cmd_driver_init+0x7c>)
   13e66:	f00c f92d 	bl	200c4 <z_impl_k_thread_name_set>
	initialized = true;
   13e6a:	2301      	movs	r3, #1
   13e6c:	702b      	strb	r3, [r5, #0]
	return 0;
   13e6e:	e7e5      	b.n	13e3c <at_cmd_driver_init+0x28>
		return 0;
   13e70:	2400      	movs	r4, #0
   13e72:	e7e3      	b.n	13e3c <at_cmd_driver_init+0x28>
   13e74:	2001af66 	.word	0x2001af66
   13e78:	00020e60 	.word	0x00020e60
   13e7c:	00020e58 	.word	0x00020e58
   13e80:	000225f3 	.word	0x000225f3
   13e84:	00013fb5 	.word	0x00013fb5
   13e88:	2001d4d8 	.word	0x2001d4d8
   13e8c:	20014bc8 	.word	0x20014bc8
   13e90:	00022615 	.word	0x00022615

00013e94 <complete_cmd>:
{
   13e94:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   13e96:	4c08      	ldr	r4, [pc, #32]	; (13eb8 <complete_cmd+0x24>)
   13e98:	f04f 32ff 	mov.w	r2, #4294967295
   13e9c:	f04f 33ff 	mov.w	r3, #4294967295
   13ea0:	4620      	mov	r0, r4
   13ea2:	f005 fe8d 	bl	19bc0 <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   13ea6:	2200      	movs	r2, #0
   13ea8:	4b04      	ldr	r3, [pc, #16]	; (13ebc <complete_cmd+0x28>)
   13eaa:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   13eac:	4620      	mov	r0, r4
}
   13eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13eb2:	f005 befd 	b.w	19cb0 <z_impl_k_mutex_unlock>
   13eb6:	bf00      	nop
   13eb8:	20014790 	.word	0x20014790
   13ebc:	20018408 	.word	0x20018408

00013ec0 <load_cmd_and_write>:
{
   13ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ec4:	b086      	sub	sp, #24
		if (current_cmd.cmd != NULL ||
   13ec6:	4e32      	ldr	r6, [pc, #200]	; (13f90 <load_cmd_and_write+0xd0>)
	return z_impl_k_mutex_lock(mutex, timeout);
   13ec8:	f04f 33ff 	mov.w	r3, #4294967295
   13ecc:	4637      	mov	r7, r6
   13ece:	f04f 32ff 	mov.w	r2, #4294967295
   13ed2:	4830      	ldr	r0, [pc, #192]	; (13f94 <load_cmd_and_write+0xd4>)
   13ed4:	f005 fe74 	bl	19bc0 <z_impl_k_mutex_lock>
   13ed8:	4d2f      	ldr	r5, [pc, #188]	; (13f98 <load_cmd_and_write+0xd8>)
   13eda:	4b30      	ldr	r3, [pc, #192]	; (13f9c <load_cmd_and_write+0xdc>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   13edc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 13fb0 <load_cmd_and_write+0xf0>
   13ee0:	1aed      	subs	r5, r5, r3
   13ee2:	08ed      	lsrs	r5, r5, #3
   13ee4:	6833      	ldr	r3, [r6, #0]
   13ee6:	2b00      	cmp	r3, #0
   13ee8:	d14b      	bne.n	13f82 <load_cmd_and_write+0xc2>
   13eea:	2200      	movs	r2, #0
   13eec:	2300      	movs	r3, #0
   13eee:	4631      	mov	r1, r6
   13ef0:	4640      	mov	r0, r8
   13ef2:	f005 fe07 	bl	19b04 <z_impl_k_msgq_get>
   13ef6:	4604      	mov	r4, r0
   13ef8:	2800      	cmp	r0, #0
   13efa:	d142      	bne.n	13f82 <load_cmd_and_write+0xc2>
		ret = at_write(current_cmd.cmd);
   13efc:	6831      	ldr	r1, [r6, #0]
	int bytes_to_send = strlen(cmd);
   13efe:	4608      	mov	r0, r1
   13f00:	9103      	str	r1, [sp, #12]
   13f02:	f7f9 f817 	bl	cf34 <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   13f06:	4b26      	ldr	r3, [pc, #152]	; (13fa0 <load_cmd_and_write+0xe0>)
	int bytes_to_send = strlen(cmd);
   13f08:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   13f0a:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   13f0c:	9903      	ldr	r1, [sp, #12]
   13f0e:	4623      	mov	r3, r4
   13f10:	e9cd 4400 	strd	r4, r4, [sp]
   13f14:	9202      	str	r2, [sp, #8]
   13f16:	f008 fecf 	bl	1ccb8 <z_impl_zsock_sendto>
   13f1a:	4601      	mov	r1, r0
	if (bytes_sent == -1) {
   13f1c:	1c48      	adds	r0, r1, #1
   13f1e:	9a02      	ldr	r2, [sp, #8]
   13f20:	d126      	bne.n	13f70 <load_cmd_and_write+0xb0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   13f22:	f008 fff4 	bl	1cf0e <__errno>
   13f26:	01ac      	lsls	r4, r5, #6
   13f28:	f044 0401 	orr.w	r4, r4, #1
   13f2c:	4622      	mov	r2, r4
   13f2e:	6801      	ldr	r1, [r0, #0]
   13f30:	481c      	ldr	r0, [pc, #112]	; (13fa4 <load_cmd_and_write+0xe4>)
   13f32:	f008 fb78 	bl	1c626 <log_1>
		return -errno;
   13f36:	f008 ffea 	bl	1cf0e <__errno>
   13f3a:	6804      	ldr	r4, [r0, #0]
   13f3c:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   13f3e:	7c3b      	ldrb	r3, [r7, #16]
   13f40:	07da      	lsls	r2, r3, #31
   13f42:	d502      	bpl.n	13f4a <load_cmd_and_write+0x8a>
			k_free(current_cmd.cmd);
   13f44:	6838      	ldr	r0, [r7, #0]
   13f46:	f00c fb1b 	bl	20580 <k_free>
		if (ret != 0) {
   13f4a:	b1d4      	cbz	r4, 13f82 <load_cmd_and_write+0xc2>
			resp.state = AT_CMD_ERROR_WRITE;
   13f4c:	2305      	movs	r3, #5
   13f4e:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   13f52:	7c3b      	ldrb	r3, [r7, #16]
			resp.code = ret;
   13f54:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   13f56:	079b      	lsls	r3, r3, #30
   13f58:	d507      	bpl.n	13f6a <load_cmd_and_write+0xaa>
	return z_impl_k_msgq_put(msgq, data, timeout);
   13f5a:	f04f 32ff 	mov.w	r2, #4294967295
   13f5e:	f04f 33ff 	mov.w	r3, #4294967295
   13f62:	4811      	ldr	r0, [pc, #68]	; (13fa8 <load_cmd_and_write+0xe8>)
   13f64:	a904      	add	r1, sp, #16
   13f66:	f005 fd79 	bl	19a5c <z_impl_k_msgq_put>
			complete_cmd();
   13f6a:	f7ff ff93 	bl	13e94 <complete_cmd>
	} while (ret != 0);
   13f6e:	e7b9      	b.n	13ee4 <load_cmd_and_write+0x24>
	if (bytes_sent != bytes_to_send) {
   13f70:	428a      	cmp	r2, r1
   13f72:	d0e4      	beq.n	13f3e <load_cmd_and_write+0x7e>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   13f74:	01ab      	lsls	r3, r5, #6
   13f76:	480d      	ldr	r0, [pc, #52]	; (13fac <load_cmd_and_write+0xec>)
   13f78:	f043 0302 	orr.w	r3, r3, #2
   13f7c:	f008 fb6a 	bl	1c654 <log_2>
   13f80:	e7dd      	b.n	13f3e <load_cmd_and_write+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   13f82:	4804      	ldr	r0, [pc, #16]	; (13f94 <load_cmd_and_write+0xd4>)
   13f84:	f005 fe94 	bl	19cb0 <z_impl_k_mutex_unlock>
}
   13f88:	b006      	add	sp, #24
   13f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f8e:	bf00      	nop
   13f90:	20018408 	.word	0x20018408
   13f94:	20014790 	.word	0x20014790
   13f98:	00020e60 	.word	0x00020e60
   13f9c:	00020e58 	.word	0x00020e58
   13fa0:	20018404 	.word	0x20018404
   13fa4:	0002262a 	.word	0x0002262a
   13fa8:	200148a8 	.word	0x200148a8
   13fac:	0002264d 	.word	0x0002264d
   13fb0:	20014880 	.word	0x20014880

00013fb4 <socket_thread_fn>:
{
   13fb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   13fb8:	f8df 9260 	ldr.w	r9, [pc, #608]	; 1421c <socket_thread_fn+0x268>
   13fbc:	4f83      	ldr	r7, [pc, #524]	; (141cc <socket_thread_fn+0x218>)
   13fbe:	46ca      	mov	sl, r9
   13fc0:	4b83      	ldr	r3, [pc, #524]	; (141d0 <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   13fc2:	4e84      	ldr	r6, [pc, #528]	; (141d4 <socket_thread_fn+0x220>)
   13fc4:	1aff      	subs	r7, r7, r3
   13fc6:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   13fc8:	f7ff ff7a 	bl	13ec0 <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   13fcc:	f8d9 0000 	ldr.w	r0, [r9]
   13fd0:	2500      	movs	r5, #0
   13fd2:	f640 228c 	movw	r2, #2700	; 0xa8c
   13fd6:	462b      	mov	r3, r5
   13fd8:	e9cd 5500 	strd	r5, r5, [sp]
   13fdc:	497d      	ldr	r1, [pc, #500]	; (141d4 <socket_thread_fn+0x220>)
   13fde:	f008 fe9e 	bl	1cd1e <z_impl_zsock_recvfrom>
		ret.code  = 0;
   13fe2:	4c7d      	ldr	r4, [pc, #500]	; (141d8 <socket_thread_fn+0x224>)
		if (bytes_read < 0) {
   13fe4:	f1b0 0800 	subs.w	r8, r0, #0
		ret.code  = 0;
   13fe8:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   13fea:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   13fec:	da6c      	bge.n	140c8 <socket_thread_fn+0x114>
			if (errno == EHOSTDOWN) {
   13fee:	f008 ff8e 	bl	1cf0e <__errno>
   13ff2:	6803      	ldr	r3, [r0, #0]
   13ff4:	2b75      	cmp	r3, #117	; 0x75
   13ff6:	d122      	bne.n	1403e <socket_thread_fn+0x8a>
   13ff8:	2301      	movs	r3, #1
   13ffa:	4c78      	ldr	r4, [pc, #480]	; (141dc <socket_thread_fn+0x228>)
   13ffc:	e8d4 2fef 	ldaex	r2, [r4]
   14000:	e8c4 3fe1 	stlex	r1, r3, [r4]
   14004:	2900      	cmp	r1, #0
   14006:	d1f9      	bne.n	13ffc <socket_thread_fn+0x48>
				close(common_socket_fd);
   14008:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   1400c:	f008 fe27 	bl	1cc5e <z_impl_zsock_close>
				nrf_modem_lib_shutdown_wait();
   14010:	f7ff f858 	bl	130c4 <nrf_modem_lib_shutdown_wait>
   14014:	e8d4 3fef 	ldaex	r3, [r4]
   14018:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1401c:	2a00      	cmp	r2, #0
   1401e:	d1f9      	bne.n	14014 <socket_thread_fn+0x60>
				if (open_socket() != 0) {
   14020:	f7ff fee4 	bl	13dec <open_socket>
   14024:	2800      	cmp	r0, #0
   14026:	d0cf      	beq.n	13fc8 <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   14028:	f008 ff71 	bl	1cf0e <__errno>
   1402c:	01bc      	lsls	r4, r7, #6
   1402e:	f044 0401 	orr.w	r4, r4, #1
   14032:	6801      	ldr	r1, [r0, #0]
   14034:	4622      	mov	r2, r4
   14036:	486a      	ldr	r0, [pc, #424]	; (141e0 <socket_thread_fn+0x22c>)
   14038:	f008 faf5 	bl	1c626 <log_1>
   1403c:	e7c4      	b.n	13fc8 <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   1403e:	f008 ff66 	bl	1cf0e <__errno>
   14042:	01bd      	lsls	r5, r7, #6
   14044:	f045 0801 	orr.w	r8, r5, #1
   14048:	6801      	ldr	r1, [r0, #0]
   1404a:	4642      	mov	r2, r8
   1404c:	4865      	ldr	r0, [pc, #404]	; (141e4 <socket_thread_fn+0x230>)
   1404e:	f008 faea 	bl	1c626 <log_1>
			if ((close(common_socket_fd) == 0) &&
   14052:	f8d9 0000 	ldr.w	r0, [r9]
   14056:	f008 fe02 	bl	1cc5e <z_impl_zsock_close>
   1405a:	bb28      	cbnz	r0, 140a8 <socket_thread_fn+0xf4>
			    (open_socket() == 0)) {
   1405c:	f7ff fec6 	bl	13dec <open_socket>
			if ((close(common_socket_fd) == 0) &&
   14060:	bb10      	cbnz	r0, 140a8 <socket_thread_fn+0xf4>
				LOG_INF("AT socket recovered");
   14062:	4861      	ldr	r0, [pc, #388]	; (141e8 <socket_thread_fn+0x234>)
   14064:	f045 0103 	orr.w	r1, r5, #3
   14068:	f008 face 	bl	1c608 <log_0>
				ret.state = AT_CMD_ERROR_READ;
   1406c:	2306      	movs	r3, #6
   1406e:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   14070:	f008 ff4d 	bl	1cf0e <__errno>
   14074:	6803      	ldr	r3, [r0, #0]
   14076:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   14078:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   1407a:	4b5c      	ldr	r3, [pc, #368]	; (141ec <socket_thread_fn+0x238>)
   1407c:	681a      	ldr	r2, [r3, #0]
   1407e:	b16a      	cbz	r2, 1409c <socket_thread_fn+0xe8>
   14080:	7c1b      	ldrb	r3, [r3, #16]
   14082:	079b      	lsls	r3, r3, #30
   14084:	d50a      	bpl.n	1409c <socket_thread_fn+0xe8>
		    current_cmd.flags & AT_CMD_SYNC &&
   14086:	7923      	ldrb	r3, [r4, #4]
   14088:	2b07      	cmp	r3, #7
   1408a:	d09d      	beq.n	13fc8 <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   1408c:	f04f 32ff 	mov.w	r2, #4294967295
   14090:	f04f 33ff 	mov.w	r3, #4294967295
   14094:	4950      	ldr	r1, [pc, #320]	; (141d8 <socket_thread_fn+0x224>)
   14096:	4856      	ldr	r0, [pc, #344]	; (141f0 <socket_thread_fn+0x23c>)
   14098:	f005 fce0 	bl	19a5c <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   1409c:	7923      	ldrb	r3, [r4, #4]
   1409e:	2b07      	cmp	r3, #7
   140a0:	d092      	beq.n	13fc8 <socket_thread_fn+0x14>
			complete_cmd();
   140a2:	f7ff fef7 	bl	13e94 <complete_cmd>
   140a6:	e78f      	b.n	13fc8 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   140a8:	f008 ff31 	bl	1cf0e <__errno>
   140ac:	f045 0501 	orr.w	r5, r5, #1
   140b0:	6801      	ldr	r1, [r0, #0]
   140b2:	462a      	mov	r2, r5
   140b4:	484f      	ldr	r0, [pc, #316]	; (141f4 <socket_thread_fn+0x240>)
   140b6:	f008 fab6 	bl	1c626 <log_1>
			close(common_socket_fd);
   140ba:	f8da 0000 	ldr.w	r0, [sl]
}
   140be:	b002      	add	sp, #8
   140c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   140c4:	f008 bdcb 	b.w	1cc5e <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   140c8:	d10a      	bne.n	140e0 <socket_thread_fn+0x12c>
			LOG_ERR("AT message empty");
   140ca:	01b9      	lsls	r1, r7, #6
   140cc:	484a      	ldr	r0, [pc, #296]	; (141f8 <socket_thread_fn+0x244>)
   140ce:	f041 0101 	orr.w	r1, r1, #1
   140d2:	f008 fa99 	bl	1c608 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   140d6:	2306      	movs	r3, #6
   140d8:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   140da:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   140de:	e7cb      	b.n	14078 <socket_thread_fn+0xc4>
		} else if (buf[bytes_read - 1] != '\0') {
   140e0:	eb06 0308 	add.w	r3, r6, r8
   140e4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   140e8:	b153      	cbz	r3, 14100 <socket_thread_fn+0x14c>
			LOG_ERR("AT message too large for reception buffer or "
   140ea:	01b9      	lsls	r1, r7, #6
   140ec:	4843      	ldr	r0, [pc, #268]	; (141fc <socket_thread_fn+0x248>)
   140ee:	f041 0101 	orr.w	r1, r1, #1
   140f2:	f008 fa89 	bl	1c608 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   140f6:	2306      	movs	r3, #6
   140f8:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   140fa:	f06f 0368 	mvn.w	r3, #104	; 0x68
   140fe:	e7bb      	b.n	14078 <socket_thread_fn+0xc4>
	ret->state = AT_CMD_NOTIFICATION;
   14100:	2307      	movs	r3, #7
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   14102:	483f      	ldr	r0, [pc, #252]	; (14200 <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   14104:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   14106:	f7f8 ff15 	bl	cf34 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   1410a:	f1a8 0505 	sub.w	r5, r8, #5
   1410e:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   14110:	4602      	mov	r2, r0
   14112:	493b      	ldr	r1, [pc, #236]	; (14200 <socket_thread_fn+0x24c>)
   14114:	4628      	mov	r0, r5
   14116:	f00c fae5 	bl	206e4 <strncmp>
		if (match) {
   1411a:	b9c0      	cbnz	r0, 1414e <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   1411c:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1411e:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   14120:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   14122:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   14124:	3201      	adds	r2, #1
   14126:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   14128:	4d30      	ldr	r5, [pc, #192]	; (141ec <socket_thread_fn+0x238>)
   1412a:	682b      	ldr	r3, [r5, #0]
   1412c:	2b00      	cmp	r3, #0
   1412e:	d043      	beq.n	141b8 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   14130:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   14132:	2800      	cmp	r0, #0
   14134:	d040      	beq.n	141b8 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   14136:	7923      	ldrb	r3, [r4, #4]
   14138:	2b07      	cmp	r3, #7
   1413a:	d12e      	bne.n	1419a <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   1413c:	4b31      	ldr	r3, [pc, #196]	; (14204 <socket_thread_fn+0x250>)
   1413e:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   14140:	b913      	cbnz	r3, 14148 <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   14142:	68ab      	ldr	r3, [r5, #8]
   14144:	2b00      	cmp	r3, #0
   14146:	d098      	beq.n	1407a <socket_thread_fn+0xc6>
			current_cmd.callback(buf);
   14148:	4630      	mov	r0, r6
   1414a:	4798      	blx	r3
   1414c:	e795      	b.n	1407a <socket_thread_fn+0xc6>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   1414e:	4630      	mov	r0, r6
   14150:	492d      	ldr	r1, [pc, #180]	; (14208 <socket_thread_fn+0x254>)
   14152:	f00c faf9 	bl	20748 <strstr>
		if (tmpstr) {
   14156:	4605      	mov	r5, r0
   14158:	b128      	cbz	r0, 14166 <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   1415a:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1415c:	482b      	ldr	r0, [pc, #172]	; (1420c <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   1415e:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   14160:	f00c fa31 	bl	205c6 <atoi>
   14164:	e7db      	b.n	1411e <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   14166:	4630      	mov	r0, r6
   14168:	4929      	ldr	r1, [pc, #164]	; (14210 <socket_thread_fn+0x25c>)
   1416a:	f00c faed 	bl	20748 <strstr>
		if (tmpstr) {
   1416e:	4605      	mov	r5, r0
   14170:	b108      	cbz	r0, 14176 <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   14172:	2303      	movs	r3, #3
   14174:	e7f2      	b.n	1415c <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   14176:	4827      	ldr	r0, [pc, #156]	; (14214 <socket_thread_fn+0x260>)
   14178:	f7f8 fedc 	bl	cf34 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   1417c:	f1a8 0508 	sub.w	r5, r8, #8
   14180:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   14182:	4602      	mov	r2, r0
   14184:	4923      	ldr	r1, [pc, #140]	; (14214 <socket_thread_fn+0x260>)
   14186:	4628      	mov	r0, r5
   14188:	f00c faac 	bl	206e4 <strncmp>
		if (match) {
   1418c:	b9c0      	cbnz	r0, 141c0 <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   1418e:	2301      	movs	r3, #1
   14190:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   14192:	f06f 0307 	mvn.w	r3, #7
   14196:	6023      	str	r3, [r4, #0]
			break;
   14198:	e7c2      	b.n	14120 <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   1419a:	68eb      	ldr	r3, [r5, #12]
   1419c:	429a      	cmp	r2, r3
   1419e:	d908      	bls.n	141b2 <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   141a0:	01b9      	lsls	r1, r7, #6
   141a2:	481d      	ldr	r0, [pc, #116]	; (14218 <socket_thread_fn+0x264>)
   141a4:	f041 0101 	orr.w	r1, r1, #1
   141a8:	f008 fa2e 	bl	1c608 <log_0>
				ret.code  = -EMSGSIZE;
   141ac:	f06f 0379 	mvn.w	r3, #121	; 0x79
   141b0:	e762      	b.n	14078 <socket_thread_fn+0xc4>
   141b2:	4631      	mov	r1, r6
   141b4:	f00c fa41 	bl	2063a <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   141b8:	7923      	ldrb	r3, [r4, #4]
   141ba:	2b07      	cmp	r3, #7
   141bc:	d1c1      	bne.n	14142 <socket_thread_fn+0x18e>
   141be:	e7bd      	b.n	1413c <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   141c0:	4630      	mov	r0, r6
   141c2:	f7f8 feb7 	bl	cf34 <strlen>
   141c6:	1c42      	adds	r2, r0, #1
   141c8:	e7ae      	b.n	14128 <socket_thread_fn+0x174>
   141ca:	bf00      	nop
   141cc:	00020e60 	.word	0x00020e60
   141d0:	00020e58 	.word	0x00020e58
   141d4:	2001a4da 	.word	0x2001a4da
   141d8:	20018420 	.word	0x20018420
   141dc:	20018428 	.word	0x20018428
   141e0:	0002267f 	.word	0x0002267f
   141e4:	000226ba 	.word	0x000226ba
   141e8:	000226dc 	.word	0x000226dc
   141ec:	20018408 	.word	0x20018408
   141f0:	200148a8 	.word	0x200148a8
   141f4:	000226f0 	.word	0x000226f0
   141f8:	00022727 	.word	0x00022727
   141fc:	00022738 	.word	0x00022738
   14200:	00022783 	.word	0x00022783
   14204:	2001841c 	.word	0x2001841c
   14208:	00022788 	.word	0x00022788
   1420c:	2001a4e5 	.word	0x2001a4e5
   14210:	00022794 	.word	0x00022794
   14214:	000227a0 	.word	0x000227a0
   14218:	000227a8 	.word	0x000227a8
   1421c:	20018404 	.word	0x20018404

00014220 <at_cmd_write>:
{
   14220:	b530      	push	{r4, r5, lr}
   14222:	461c      	mov	r4, r3
   14224:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14226:	4b32      	ldr	r3, [pc, #200]	; (142f0 <at_cmd_write+0xd0>)
   14228:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   1422c:	2b01      	cmp	r3, #1
   1422e:	d05c      	beq.n	142ea <at_cmd_write+0xca>
	if (cmd == NULL) {
   14230:	b160      	cbz	r0, 1424c <at_cmd_write+0x2c>
   14232:	1e45      	subs	r5, r0, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   14234:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   14238:	b9d3      	cbnz	r3, 14270 <at_cmd_write+0x50>
   1423a:	492e      	ldr	r1, [pc, #184]	; (142f4 <at_cmd_write+0xd4>)
   1423c:	4b2e      	ldr	r3, [pc, #184]	; (142f8 <at_cmd_write+0xd8>)
		LOG_ERR("Invalid command");
   1423e:	482f      	ldr	r0, [pc, #188]	; (142fc <at_cmd_write+0xdc>)
   14240:	1ac9      	subs	r1, r1, r3
   14242:	08c9      	lsrs	r1, r1, #3
   14244:	0189      	lsls	r1, r1, #6
   14246:	f041 0101 	orr.w	r1, r1, #1
   1424a:	e007      	b.n	1425c <at_cmd_write+0x3c>
   1424c:	4929      	ldr	r1, [pc, #164]	; (142f4 <at_cmd_write+0xd4>)
   1424e:	4b2a      	ldr	r3, [pc, #168]	; (142f8 <at_cmd_write+0xd8>)
		LOG_ERR("cmd is NULL");
   14250:	482b      	ldr	r0, [pc, #172]	; (14300 <at_cmd_write+0xe0>)
   14252:	1ac9      	subs	r1, r1, r3
   14254:	08c9      	lsrs	r1, r1, #3
   14256:	0189      	lsls	r1, r1, #6
   14258:	f041 0101 	orr.w	r1, r1, #1
   1425c:	f008 f9d4 	bl	1c608 <log_0>
		if (state) {
   14260:	b91c      	cbnz	r4, 1426a <at_cmd_write+0x4a>
		return -EINVAL;
   14262:	f06f 0015 	mvn.w	r0, #21
}
   14266:	b009      	add	sp, #36	; 0x24
   14268:	bd30      	pop	{r4, r5, pc}
			*state = AT_CMD_ERROR_QUEUE;
   1426a:	2304      	movs	r3, #4
   1426c:	7023      	strb	r3, [r4, #0]
   1426e:	e7f8      	b.n	14262 <at_cmd_write+0x42>
		if (*c > ' ') {
   14270:	2b20      	cmp	r3, #32
   14272:	d9df      	bls.n	14234 <at_cmd_write+0x14>
	command.callback = NULL;
   14274:	2300      	movs	r3, #0
   14276:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   14278:	2302      	movs	r3, #2
	command.resp = buf;
   1427a:	e9cd 0103 	strd	r0, r1, [sp, #12]
	command.resp_size = buf_len;
   1427e:	9206      	str	r2, [sp, #24]
	command.flags = AT_CMD_SYNC;
   14280:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   14284:	f04f 32ff 	mov.w	r2, #4294967295
   14288:	f04f 33ff 	mov.w	r3, #4294967295
   1428c:	481d      	ldr	r0, [pc, #116]	; (14304 <at_cmd_write+0xe4>)
   1428e:	f005 fc97 	bl	19bc0 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   14292:	f04f 32ff 	mov.w	r2, #4294967295
   14296:	a903      	add	r1, sp, #12
   14298:	f04f 33ff 	mov.w	r3, #4294967295
   1429c:	481a      	ldr	r0, [pc, #104]	; (14308 <at_cmd_write+0xe8>)
   1429e:	f005 fbdd 	bl	19a5c <z_impl_k_msgq_put>
   142a2:	4601      	mov	r1, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   142a4:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   142a6:	b170      	cbz	r0, 142c6 <at_cmd_write+0xa6>
   142a8:	4a12      	ldr	r2, [pc, #72]	; (142f4 <at_cmd_write+0xd4>)
   142aa:	4b13      	ldr	r3, [pc, #76]	; (142f8 <at_cmd_write+0xd8>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   142ac:	4817      	ldr	r0, [pc, #92]	; (1430c <at_cmd_write+0xec>)
   142ae:	1ad2      	subs	r2, r2, r3
   142b0:	08d2      	lsrs	r2, r2, #3
   142b2:	0192      	lsls	r2, r2, #6
   142b4:	f042 0201 	orr.w	r2, r2, #1
   142b8:	f008 f9b5 	bl	1c626 <log_1>
		if (state) {
   142bc:	b10c      	cbz	r4, 142c2 <at_cmd_write+0xa2>
			*state = AT_CMD_ERROR_QUEUE;
   142be:	2304      	movs	r3, #4
		*state = ret.state;
   142c0:	7023      	strb	r3, [r4, #0]
	return ret.code;
   142c2:	9801      	ldr	r0, [sp, #4]
   142c4:	e7cf      	b.n	14266 <at_cmd_write+0x46>
	load_cmd_and_write();
   142c6:	f7ff fdfb 	bl	13ec0 <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   142ca:	f04f 32ff 	mov.w	r2, #4294967295
   142ce:	f04f 33ff 	mov.w	r3, #4294967295
   142d2:	a901      	add	r1, sp, #4
   142d4:	480e      	ldr	r0, [pc, #56]	; (14310 <at_cmd_write+0xf0>)
   142d6:	f005 fc15 	bl	19b04 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   142da:	480a      	ldr	r0, [pc, #40]	; (14304 <at_cmd_write+0xe4>)
   142dc:	f005 fce8 	bl	19cb0 <z_impl_k_mutex_unlock>
	if (state) {
   142e0:	2c00      	cmp	r4, #0
   142e2:	d0ee      	beq.n	142c2 <at_cmd_write+0xa2>
		*state = ret.state;
   142e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   142e8:	e7ea      	b.n	142c0 <at_cmd_write+0xa0>
		return -EHOSTDOWN;
   142ea:	f06f 0074 	mvn.w	r0, #116	; 0x74
   142ee:	e7ba      	b.n	14266 <at_cmd_write+0x46>
   142f0:	20018428 	.word	0x20018428
   142f4:	00020e60 	.word	0x00020e60
   142f8:	00020e58 	.word	0x00020e58
   142fc:	000227d5 	.word	0x000227d5
   14300:	000227c9 	.word	0x000227c9
   14304:	20014808 	.word	0x20014808
   14308:	20014880 	.word	0x20014880
   1430c:	000227e5 	.word	0x000227e5
   14310:	200148a8 	.word	0x200148a8

00014314 <at_cmd_set_notification_handler>:
{
   14314:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   14316:	4c09      	ldr	r4, [pc, #36]	; (1433c <at_cmd_set_notification_handler+0x28>)
{
   14318:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   1431a:	6821      	ldr	r1, [r4, #0]
   1431c:	b159      	cbz	r1, 14336 <at_cmd_set_notification_handler+0x22>
   1431e:	4281      	cmp	r1, r0
   14320:	d009      	beq.n	14336 <at_cmd_set_notification_handler+0x22>
   14322:	4a07      	ldr	r2, [pc, #28]	; (14340 <at_cmd_set_notification_handler+0x2c>)
   14324:	4b07      	ldr	r3, [pc, #28]	; (14344 <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   14326:	4808      	ldr	r0, [pc, #32]	; (14348 <at_cmd_set_notification_handler+0x34>)
   14328:	1ad2      	subs	r2, r2, r3
   1432a:	08d2      	lsrs	r2, r2, #3
   1432c:	0192      	lsls	r2, r2, #6
   1432e:	f042 0202 	orr.w	r2, r2, #2
   14332:	f008 f978 	bl	1c626 <log_1>
	notification_handler = handler;
   14336:	6025      	str	r5, [r4, #0]
}
   14338:	bd38      	pop	{r3, r4, r5, pc}
   1433a:	bf00      	nop
   1433c:	2001841c 	.word	0x2001841c
   14340:	00020e60 	.word	0x00020e60
   14344:	00020e58 	.word	0x00020e58
   14348:	00022805 	.word	0x00022805

0001434c <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1434c:	4b0f      	ldr	r3, [pc, #60]	; (1438c <find_node+0x40>)
{
   1434e:	b570      	push	{r4, r5, r6, lr}
   14350:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   14352:	6818      	ldr	r0, [r3, #0]
   14354:	b170      	cbz	r0, 14374 <find_node+0x28>
	return node->next;
   14356:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14358:	4603      	mov	r3, r0
   1435a:	2d00      	cmp	r5, #0
   1435c:	4628      	mov	r0, r5
   1435e:	bf38      	it	cc
   14360:	2000      	movcc	r0, #0
   14362:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   14364:	685e      	ldr	r6, [r3, #4]
   14366:	428e      	cmp	r6, r1
   14368:	d105      	bne.n	14376 <find_node+0x2a>
   1436a:	689e      	ldr	r6, [r3, #8]
   1436c:	4296      	cmp	r6, r2
   1436e:	d102      	bne.n	14376 <find_node+0x2a>
			*prev_out = prev;
			return curr;
   14370:	4618      	mov	r0, r3
			*prev_out = prev;
   14372:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   14374:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   14376:	2800      	cmp	r0, #0
   14378:	d0fc      	beq.n	14374 <find_node+0x28>
	return node->next;
   1437a:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1437c:	461d      	mov	r5, r3
   1437e:	2e00      	cmp	r6, #0
   14380:	4603      	mov	r3, r0
   14382:	4630      	mov	r0, r6
   14384:	bf38      	it	cc
   14386:	2000      	movcc	r0, #0
   14388:	e7ec      	b.n	14364 <find_node+0x18>
   1438a:	bf00      	nop
   1438c:	2001842c 	.word	0x2001842c

00014390 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   14390:	4a0c      	ldr	r2, [pc, #48]	; (143c4 <module_init+0x34>)
{
   14392:	b508      	push	{r3, lr}
	if (initialized) {
   14394:	7813      	ldrb	r3, [r2, #0]
   14396:	b15b      	cbz	r3, 143b0 <module_init+0x20>
   14398:	490b      	ldr	r1, [pc, #44]	; (143c8 <module_init+0x38>)
   1439a:	4b0c      	ldr	r3, [pc, #48]	; (143cc <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   1439c:	480c      	ldr	r0, [pc, #48]	; (143d0 <module_init+0x40>)
   1439e:	1ac9      	subs	r1, r1, r3
   143a0:	08c9      	lsrs	r1, r1, #3
   143a2:	0189      	lsls	r1, r1, #6
   143a4:	f041 0102 	orr.w	r1, r1, #2
   143a8:	f008 f92e 	bl	1c608 <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   143ac:	2000      	movs	r0, #0
   143ae:	bd08      	pop	{r3, pc}
	initialized = true;
   143b0:	2101      	movs	r1, #1
   143b2:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   143b4:	4a07      	ldr	r2, [pc, #28]	; (143d4 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   143b6:	4808      	ldr	r0, [pc, #32]	; (143d8 <module_init+0x48>)
	list->tail = NULL;
   143b8:	e9c2 3300 	strd	r3, r3, [r2]
   143bc:	f7ff ffaa 	bl	14314 <at_cmd_set_notification_handler>
	return 0;
   143c0:	e7f4      	b.n	143ac <module_init+0x1c>
   143c2:	bf00      	nop
   143c4:	2001af67 	.word	0x2001af67
   143c8:	00020e70 	.word	0x00020e70
   143cc:	00020e58 	.word	0x00020e58
   143d0:	00022835 	.word	0x00022835
   143d4:	2001842c 	.word	0x2001842c
   143d8:	000143e9 	.word	0x000143e9

000143dc <k_mutex_unlock.constprop.0>:
   143dc:	4801      	ldr	r0, [pc, #4]	; (143e4 <k_mutex_unlock.constprop.0+0x8>)
   143de:	f005 bc67 	b.w	19cb0 <z_impl_k_mutex_unlock>
   143e2:	bf00      	nop
   143e4:	200147cc 	.word	0x200147cc

000143e8 <notif_dispatch>:
{
   143e8:	b538      	push	{r3, r4, r5, lr}
   143ea:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   143ec:	f04f 33ff 	mov.w	r3, #4294967295
   143f0:	f04f 32ff 	mov.w	r2, #4294967295
   143f4:	480d      	ldr	r0, [pc, #52]	; (1442c <notif_dispatch+0x44>)
   143f6:	f005 fbe3 	bl	19bc0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   143fa:	4b0d      	ldr	r3, [pc, #52]	; (14430 <notif_dispatch+0x48>)
   143fc:	681b      	ldr	r3, [r3, #0]
   143fe:	b91b      	cbnz	r3, 14408 <notif_dispatch+0x20>
}
   14400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   14404:	f7ff bfea 	b.w	143dc <k_mutex_unlock.constprop.0>
	return node->next;
   14408:	681c      	ldr	r4, [r3, #0]
   1440a:	2c00      	cmp	r4, #0
   1440c:	bf38      	it	cc
   1440e:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   14410:	4629      	mov	r1, r5
   14412:	689a      	ldr	r2, [r3, #8]
   14414:	6858      	ldr	r0, [r3, #4]
   14416:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   14418:	2c00      	cmp	r4, #0
   1441a:	d0f1      	beq.n	14400 <notif_dispatch+0x18>
   1441c:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1441e:	4623      	mov	r3, r4
   14420:	2a00      	cmp	r2, #0
   14422:	bf38      	it	cc
   14424:	2200      	movcc	r2, #0
   14426:	4614      	mov	r4, r2
   14428:	e7f2      	b.n	14410 <notif_dispatch+0x28>
   1442a:	bf00      	nop
   1442c:	200147cc 	.word	0x200147cc
   14430:	2001842c 	.word	0x2001842c

00014434 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   14434:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14436:	4606      	mov	r6, r0
	if (handler == NULL) {
   14438:	460d      	mov	r5, r1
   1443a:	b979      	cbnz	r1, 1445c <at_notif_register_handler+0x28>
   1443c:	4a1e      	ldr	r2, [pc, #120]	; (144b8 <at_notif_register_handler+0x84>)
   1443e:	4b1f      	ldr	r3, [pc, #124]	; (144bc <at_notif_register_handler+0x88>)
   14440:	1a9b      	subs	r3, r3, r2
   14442:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   14444:	019b      	lsls	r3, r3, #6
   14446:	460a      	mov	r2, r1
   14448:	f043 0301 	orr.w	r3, r3, #1
   1444c:	4601      	mov	r1, r0
   1444e:	481c      	ldr	r0, [pc, #112]	; (144c0 <at_notif_register_handler+0x8c>)
   14450:	f008 f900 	bl	1c654 <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   14454:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   14458:	b002      	add	sp, #8
   1445a:	bd70      	pop	{r4, r5, r6, pc}
   1445c:	f04f 32ff 	mov.w	r2, #4294967295
   14460:	f04f 33ff 	mov.w	r3, #4294967295
   14464:	4817      	ldr	r0, [pc, #92]	; (144c4 <at_notif_register_handler+0x90>)
   14466:	f005 fbab 	bl	19bc0 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   1446a:	462a      	mov	r2, r5
   1446c:	4631      	mov	r1, r6
   1446e:	a801      	add	r0, sp, #4
   14470:	f7ff ff6c 	bl	1434c <find_node>
   14474:	4604      	mov	r4, r0
   14476:	b118      	cbz	r0, 14480 <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   14478:	f7ff ffb0 	bl	143dc <k_mutex_unlock.constprop.0>
		return 0;
   1447c:	2000      	movs	r0, #0
   1447e:	e7eb      	b.n	14458 <at_notif_register_handler+0x24>
   14480:	210c      	movs	r1, #12
   14482:	2004      	movs	r0, #4
   14484:	f006 fc5a 	bl	1ad3c <k_aligned_alloc>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   14488:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   1448a:	b920      	cbnz	r0, 14496 <at_notif_register_handler+0x62>
		k_mutex_unlock(&list_mtx);
   1448c:	f7ff ffa6 	bl	143dc <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   14490:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14494:	e7e0      	b.n	14458 <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   14496:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   14498:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1449a:	4a0b      	ldr	r2, [pc, #44]	; (144c8 <at_notif_register_handler+0x94>)
   1449c:	6044      	str	r4, [r0, #4]
   1449e:	6084      	str	r4, [r0, #8]
	parent->next = child;
   144a0:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   144a2:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   144a4:	e9c3 6501 	strd	r6, r5, [r3, #4]
   144a8:	b911      	cbnz	r1, 144b0 <at_notif_register_handler+0x7c>
	list->head = node;
   144aa:	e9c2 3300 	strd	r3, r3, [r2]
}
   144ae:	e7e3      	b.n	14478 <at_notif_register_handler+0x44>
	parent->next = child;
   144b0:	600b      	str	r3, [r1, #0]
	list->tail = node;
   144b2:	6053      	str	r3, [r2, #4]
}
   144b4:	e7e0      	b.n	14478 <at_notif_register_handler+0x44>
   144b6:	bf00      	nop
   144b8:	00020e58 	.word	0x00020e58
   144bc:	00020e70 	.word	0x00020e70
   144c0:	00022858 	.word	0x00022858
   144c4:	200147cc 	.word	0x200147cc
   144c8:	2001842c 	.word	0x2001842c

000144cc <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   144cc:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   144ce:	4d05      	ldr	r5, [pc, #20]	; (144e4 <write_uart_string+0x18>)
   144d0:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   144d2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   144d6:	b901      	cbnz	r1, 144da <write_uart_string+0xe>
	}
}
   144d8:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   144da:	6828      	ldr	r0, [r5, #0]
   144dc:	6883      	ldr	r3, [r0, #8]
   144de:	685b      	ldr	r3, [r3, #4]
   144e0:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   144e2:	e7f6      	b.n	144d2 <write_uart_string+0x6>
   144e4:	20018444 	.word	0x20018444

000144e8 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   144e8:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   144ea:	4921      	ldr	r1, [pc, #132]	; (14570 <cmd_send+0x88>)
{
   144ec:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   144ee:	4608      	mov	r0, r1
   144f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   144f4:	f10d 030b 	add.w	r3, sp, #11
   144f8:	f7ff fe92 	bl	14220 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   144fc:	1e01      	subs	r1, r0, #0
   144fe:	da0e      	bge.n	1451e <cmd_send+0x36>
   14500:	4b1c      	ldr	r3, [pc, #112]	; (14574 <cmd_send+0x8c>)
   14502:	4a1d      	ldr	r2, [pc, #116]	; (14578 <cmd_send+0x90>)
		LOG_ERR("Error while processing AT command: %d", err);
   14504:	481d      	ldr	r0, [pc, #116]	; (1457c <cmd_send+0x94>)
   14506:	1ad2      	subs	r2, r2, r3
   14508:	08d2      	lsrs	r2, r2, #3
   1450a:	0192      	lsls	r2, r2, #6
   1450c:	f042 0201 	orr.w	r2, r2, #1
   14510:	f008 f889 	bl	1c626 <log_1>
		state = AT_CMD_ERROR;
   14514:	2301      	movs	r3, #1
   14516:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   1451a:	4819      	ldr	r0, [pc, #100]	; (14580 <cmd_send+0x98>)
   1451c:	e012      	b.n	14544 <cmd_send+0x5c>
	switch (state) {
   1451e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14522:	2b03      	cmp	r3, #3
   14524:	d810      	bhi.n	14548 <cmd_send+0x60>
   14526:	a201      	add	r2, pc, #4	; (adr r2, 1452c <cmd_send+0x44>)
   14528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1452c:	0001453d 	.word	0x0001453d
   14530:	0001451b 	.word	0x0001451b
   14534:	00014557 	.word	0x00014557
   14538:	00014569 	.word	0x00014569
		write_uart_string(at_buf);
   1453c:	480c      	ldr	r0, [pc, #48]	; (14570 <cmd_send+0x88>)
   1453e:	f7ff ffc5 	bl	144cc <write_uart_string>
		write_uart_string(OK_STR);
   14542:	4810      	ldr	r0, [pc, #64]	; (14584 <cmd_send+0x9c>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   14544:	f7ff ffc2 	bl	144cc <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   14548:	4b0f      	ldr	r3, [pc, #60]	; (14588 <cmd_send+0xa0>)
   1454a:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   1454c:	f009 fedd 	bl	1e30a <z_impl_uart_irq_rx_enable>
}
   14550:	b00b      	add	sp, #44	; 0x2c
   14552:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   14556:	4b0d      	ldr	r3, [pc, #52]	; (1458c <cmd_send+0xa4>)
   14558:	9100      	str	r1, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   1455a:	2219      	movs	r2, #25
   1455c:	2100      	movs	r1, #0
   1455e:	a803      	add	r0, sp, #12
   14560:	f00c f880 	bl	20664 <__sprintf_chk>
		write_uart_string(str);
   14564:	a803      	add	r0, sp, #12
   14566:	e7ed      	b.n	14544 <cmd_send+0x5c>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   14568:	4b09      	ldr	r3, [pc, #36]	; (14590 <cmd_send+0xa8>)
   1456a:	9100      	str	r1, [sp, #0]
   1456c:	e7f5      	b.n	1455a <cmd_send+0x72>
   1456e:	bf00      	nop
   14570:	2001af68 	.word	0x2001af68
   14574:	00020e58 	.word	0x00020e58
   14578:	00020e68 	.word	0x00020e68
   1457c:	00022892 	.word	0x00022892
   14580:	000227a0 	.word	0x000227a0
   14584:	00022783 	.word	0x00022783
   14588:	20018444 	.word	0x20018444
   1458c:	000228b8 	.word	0x000228b8
   14590:	000228c9 	.word	0x000228c9

00014594 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   14594:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14598:	4604      	mov	r4, r0
	if (api->irq_update) {
   1459a:	6883      	ldr	r3, [r0, #8]
   1459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1459e:	b103      	cbz	r3, 145a2 <isr+0xe>
		return api->irq_update(dev);
   145a0:	4798      	blx	r3
	if (api->irq_rx_ready) {
   145a2:	68a3      	ldr	r3, [r4, #8]
   145a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   145a6:	b1bb      	cbz	r3, 145d8 <isr+0x44>
		return api->irq_rx_ready(dev);
   145a8:	4620      	mov	r0, r4
   145aa:	4798      	blx	r3

	uint8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   145ac:	b1a0      	cbz	r0, 145d8 <isr+0x44>
   145ae:	f8df 8140 	ldr.w	r8, [pc, #320]	; 146f0 <isr+0x15c>
   145b2:	4e44      	ldr	r6, [pc, #272]	; (146c4 <isr+0x130>)
   145b4:	4647      	mov	r7, r8
   145b6:	4b44      	ldr	r3, [pc, #272]	; (146c8 <isr+0x134>)
		if (at_cmd_len > 0) {
   145b8:	4d44      	ldr	r5, [pc, #272]	; (146cc <isr+0x138>)
   145ba:	1af6      	subs	r6, r6, r3
   145bc:	08f6      	lsrs	r6, r6, #3
   145be:	e8d8 3faf 	lda	r3, [r8]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   145c2:	07db      	lsls	r3, r3, #31
   145c4:	d408      	bmi.n	145d8 <isr+0x44>
	if (api->fifo_read) {
   145c6:	68a3      	ldr	r3, [r4, #8]
   145c8:	699b      	ldr	r3, [r3, #24]
   145ca:	b12b      	cbz	r3, 145d8 <isr+0x44>
		return api->fifo_read(dev, rx_data, size);
   145cc:	2201      	movs	r2, #1
   145ce:	4620      	mov	r0, r4
   145d0:	f10d 0107 	add.w	r1, sp, #7
   145d4:	4798      	blx	r3
   145d6:	b910      	cbnz	r0, 145de <isr+0x4a>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   145d8:	b002      	add	sp, #8
   145da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uart_rx_handler(character);
   145de:	f89d 1007 	ldrb.w	r1, [sp, #7]
	switch (character) {
   145e2:	2908      	cmp	r1, #8
   145e4:	d001      	beq.n	145ea <isr+0x56>
   145e6:	297f      	cmp	r1, #127	; 0x7f
   145e8:	d105      	bne.n	145f6 <isr+0x62>
		if (at_cmd_len > 0) {
   145ea:	682b      	ldr	r3, [r5, #0]
   145ec:	2b00      	cmp	r3, #0
   145ee:	d0e6      	beq.n	145be <isr+0x2a>
			at_cmd_len--;
   145f0:	3b01      	subs	r3, #1
   145f2:	602b      	str	r3, [r5, #0]
   145f4:	e7e3      	b.n	145be <isr+0x2a>
	if (!inside_quotes) {
   145f6:	4836      	ldr	r0, [pc, #216]	; (146d0 <isr+0x13c>)
   145f8:	7803      	ldrb	r3, [r0, #0]
   145fa:	b993      	cbnz	r3, 14622 <isr+0x8e>
		switch (character) {
   145fc:	290a      	cmp	r1, #10
   145fe:	d01e      	beq.n	1463e <isr+0xaa>
   14600:	290d      	cmp	r1, #13
   14602:	d00a      	beq.n	1461a <isr+0x86>
   14604:	b969      	cbnz	r1, 14622 <isr+0x8e>
			if (term_mode == MODE_NULL_TERM) {
   14606:	4b33      	ldr	r3, [pc, #204]	; (146d4 <isr+0x140>)
   14608:	781b      	ldrb	r3, [r3, #0]
   1460a:	b3a3      	cbz	r3, 14676 <isr+0xe2>
			LOG_WRN("Ignored null; would terminate string early.");
   1460c:	01b1      	lsls	r1, r6, #6
   1460e:	4832      	ldr	r0, [pc, #200]	; (146d8 <isr+0x144>)
   14610:	f041 0102 	orr.w	r1, r1, #2
   14614:	f007 fff8 	bl	1c608 <log_0>
			return;
   14618:	e7d1      	b.n	145be <isr+0x2a>
			if (term_mode == MODE_CR) {
   1461a:	4a2e      	ldr	r2, [pc, #184]	; (146d4 <isr+0x140>)
   1461c:	7812      	ldrb	r2, [r2, #0]
   1461e:	2a01      	cmp	r2, #1
			    at_cmd_len > 0 &&
   14620:	d029      	beq.n	14676 <isr+0xe2>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   14622:	f8d5 c000 	ldr.w	ip, [r5]
   14626:	f10c 0201 	add.w	r2, ip, #1
   1462a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   1462e:	d317      	bcc.n	14660 <isr+0xcc>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   14630:	01b2      	lsls	r2, r6, #6
   14632:	482a      	ldr	r0, [pc, #168]	; (146dc <isr+0x148>)
   14634:	f042 0201 	orr.w	r2, r2, #1
   14638:	f007 fff5 	bl	1c626 <log_1>
		return;
   1463c:	e7bf      	b.n	145be <isr+0x2a>
			if (term_mode == MODE_LF) {
   1463e:	4a25      	ldr	r2, [pc, #148]	; (146d4 <isr+0x140>)
   14640:	7812      	ldrb	r2, [r2, #0]
   14642:	2a02      	cmp	r2, #2
   14644:	d017      	beq.n	14676 <isr+0xe2>
			if (term_mode == MODE_CR_LF &&
   14646:	2a03      	cmp	r2, #3
   14648:	d1eb      	bne.n	14622 <isr+0x8e>
   1464a:	f8d5 c000 	ldr.w	ip, [r5]
   1464e:	f1bc 0f00 	cmp.w	ip, #0
   14652:	d0e6      	beq.n	14622 <isr+0x8e>
			    at_buf[at_cmd_len - 1] == '\r') {
   14654:	4a22      	ldr	r2, [pc, #136]	; (146e0 <isr+0x14c>)
   14656:	4462      	add	r2, ip
			    at_cmd_len > 0 &&
   14658:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   1465c:	2a0d      	cmp	r2, #13
   1465e:	e7df      	b.n	14620 <isr+0x8c>
	at_buf[at_cmd_len] = character;
   14660:	f8df e07c 	ldr.w	lr, [pc, #124]	; 146e0 <isr+0x14c>
	if (character == '"') {
   14664:	2922      	cmp	r1, #34	; 0x22
	at_buf[at_cmd_len] = character;
   14666:	f80e 100c 	strb.w	r1, [lr, ip]
	at_cmd_len++;
   1466a:	602a      	str	r2, [r5, #0]
	if (character == '"') {
   1466c:	d1a7      	bne.n	145be <isr+0x2a>
	if (!inside_quotes) {
   1466e:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   14672:	7003      	strb	r3, [r0, #0]
   14674:	e7a3      	b.n	145be <isr+0x2a>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   14676:	2200      	movs	r2, #0
   14678:	6829      	ldr	r1, [r5, #0]
   1467a:	4b19      	ldr	r3, [pc, #100]	; (146e0 <isr+0x14c>)
	inside_quotes = false;
   1467c:	7002      	strb	r2, [r0, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   1467e:	545a      	strb	r2, [r3, r1]
	at_cmd_len = 0;
   14680:	4619      	mov	r1, r3
   14682:	602a      	str	r2, [r5, #0]
		if (*c > ' ') {
   14684:	f813 2b01 	ldrb.w	r2, [r3], #1
   14688:	2a20      	cmp	r2, #32
   1468a:	d802      	bhi.n	14692 <isr+0xfe>
		} else if (*c == '\0') {
   1468c:	2a00      	cmp	r2, #0
   1468e:	d1f9      	bne.n	14684 <isr+0xf0>
   14690:	e795      	b.n	145be <isr+0x2a>
	if (at_buf[0]) {
   14692:	780b      	ldrb	r3, [r1, #0]
   14694:	2b00      	cmp	r3, #0
   14696:	d092      	beq.n	145be <isr+0x2a>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   14698:	4b12      	ldr	r3, [pc, #72]	; (146e4 <isr+0x150>)
   1469a:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   1469c:	6883      	ldr	r3, [r0, #8]
   1469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   146a0:	b103      	cbz	r3, 146a4 <isr+0x110>
		api->irq_rx_disable(dev);
   146a2:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   146a4:	e8d7 3fef 	ldaex	r3, [r7]
   146a8:	f043 0201 	orr.w	r2, r3, #1
   146ac:	e8c7 2fe1 	stlex	r1, r2, [r7]
   146b0:	2900      	cmp	r1, #0
   146b2:	d1f7      	bne.n	146a4 <isr+0x110>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   146b4:	07da      	lsls	r2, r3, #31
   146b6:	d482      	bmi.n	145be <isr+0x2a>
		k_queue_append(&work_q->queue, work);
   146b8:	490b      	ldr	r1, [pc, #44]	; (146e8 <isr+0x154>)
   146ba:	480c      	ldr	r0, [pc, #48]	; (146ec <isr+0x158>)
   146bc:	f00b fbe2 	bl	1fe84 <k_queue_append>
   146c0:	e77d      	b.n	145be <isr+0x2a>
   146c2:	bf00      	nop
   146c4:	00020e68 	.word	0x00020e68
   146c8:	00020e58 	.word	0x00020e58
   146cc:	20018434 	.word	0x20018434
   146d0:	2001bf68 	.word	0x2001bf68
   146d4:	2001bf69 	.word	0x2001bf69
   146d8:	000228da 	.word	0x000228da
   146dc:	00022906 	.word	0x00022906
   146e0:	2001af68 	.word	0x2001af68
   146e4:	20018444 	.word	0x20018444
   146e8:	20018438 	.word	0x20018438
   146ec:	20014c90 	.word	0x20014c90
   146f0:	20018440 	.word	0x20018440

000146f4 <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   146f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   146f8:	2201      	movs	r2, #1
   146fa:	4b49      	ldr	r3, [pc, #292]	; (14820 <at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   146fc:	2000      	movs	r0, #0
   146fe:	4949      	ldr	r1, [pc, #292]	; (14824 <at_host_init+0x130>)
		term_mode = mode;
   14700:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   14702:	f7ff fe97 	bl	14434 <at_notif_register_handler>
	if (err != 0) {
   14706:	4c48      	ldr	r4, [pc, #288]	; (14828 <at_host_init+0x134>)
   14708:	4a48      	ldr	r2, [pc, #288]	; (1482c <at_host_init+0x138>)
   1470a:	4606      	mov	r6, r0
   1470c:	1aa4      	subs	r4, r4, r2
   1470e:	08e4      	lsrs	r4, r4, #3
   14710:	b150      	cbz	r0, 14728 <at_host_init+0x34>
		LOG_ERR("Can't register handler err=%d", err);
   14712:	01a2      	lsls	r2, r4, #6
   14714:	4601      	mov	r1, r0
   14716:	f042 0201 	orr.w	r2, r2, #1
   1471a:	4845      	ldr	r0, [pc, #276]	; (14830 <at_host_init+0x13c>)
   1471c:	f007 ff83 	bl	1c626 <log_1>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   14720:	4630      	mov	r0, r6
   14722:	b003      	add	sp, #12
   14724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14728:	4842      	ldr	r0, [pc, #264]	; (14834 <at_host_init+0x140>)
   1472a:	f004 ff9f 	bl	1966c <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   1472e:	4d42      	ldr	r5, [pc, #264]	; (14838 <at_host_init+0x144>)
   14730:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   14732:	b988      	cbnz	r0, 14758 <at_host_init+0x64>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   14734:	01a2      	lsls	r2, r4, #6
   14736:	493f      	ldr	r1, [pc, #252]	; (14834 <at_host_init+0x140>)
   14738:	4840      	ldr	r0, [pc, #256]	; (1483c <at_host_init+0x148>)
   1473a:	f042 0201 	orr.w	r2, r2, #1
   1473e:	f007 ff72 	bl	1c626 <log_1>
		return -EINVAL;
   14742:	f06f 0115 	mvn.w	r1, #21
		LOG_ERR("UART could not be initialized: %d", err);
   14746:	01a2      	lsls	r2, r4, #6
   14748:	483d      	ldr	r0, [pc, #244]	; (14840 <at_host_init+0x14c>)
   1474a:	f042 0201 	orr.w	r2, r2, #1
   1474e:	f007 ff6a 	bl	1c626 <log_1>
		return -EFAULT;
   14752:	f06f 060d 	mvn.w	r6, #13
   14756:	e7e3      	b.n	14720 <at_host_init+0x2c>
	return z_impl_k_uptime_ticks();
   14758:	f00b fd5a 	bl	20210 <z_impl_k_uptime_ticks>
   1475c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14760:	460a      	mov	r2, r1
   14762:	fba0 0103 	umull	r0, r1, r0, r3
   14766:	fb03 1102 	mla	r1, r3, r2, r1
   1476a:	ea4f 38d0 	mov.w	r8, r0, lsr #15
   1476e:	ea4f 1984 	mov.w	r9, r4, lsl #6
			LOG_INF("UART check failed: %d. "
   14772:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 1485c <at_host_init+0x168>
   14776:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   1477a:	f049 0a03 	orr.w	sl, r9, #3
		err = uart_err_check(uart_dev);
   1477e:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   14780:	6883      	ldr	r3, [r0, #8]
   14782:	689b      	ldr	r3, [r3, #8]
   14784:	b393      	cbz	r3, 147ec <at_host_init+0xf8>
		return api->err_check(dev);
   14786:	4798      	blx	r3
		if (err) {
   14788:	4607      	mov	r7, r0
   1478a:	b378      	cbz	r0, 147ec <at_host_init+0xf8>
   1478c:	f00b fd40 	bl	20210 <z_impl_k_uptime_ticks>
   14790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14794:	460a      	mov	r2, r1
   14796:	fba0 0103 	umull	r0, r1, r0, r3
   1479a:	fb03 1102 	mla	r1, r3, r2, r1
   1479e:	0bc3      	lsrs	r3, r0, #15
   147a0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   147a4:	eba3 0308 	sub.w	r3, r3, r8
   147a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   147ac:	d908      	bls.n	147c0 <at_host_init+0xcc>
				LOG_ERR("UART check failed: %d. "
   147ae:	4639      	mov	r1, r7
   147b0:	4824      	ldr	r0, [pc, #144]	; (14844 <at_host_init+0x150>)
   147b2:	f049 0201 	orr.w	r2, r9, #1
   147b6:	f007 ff36 	bl	1c626 <log_1>
				return -EIO;
   147ba:	f06f 0104 	mvn.w	r1, #4
   147be:	e7c2      	b.n	14746 <at_host_init+0x52>
			LOG_INF("UART check failed: %d. "
   147c0:	4652      	mov	r2, sl
   147c2:	4639      	mov	r1, r7
   147c4:	4658      	mov	r0, fp
   147c6:	f007 ff2e 	bl	1c626 <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   147ca:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   147cc:	6883      	ldr	r3, [r0, #8]
   147ce:	699b      	ldr	r3, [r3, #24]
   147d0:	b92b      	cbnz	r3, 147de <at_host_init+0xea>
	return z_impl_k_sleep(timeout);
   147d2:	2100      	movs	r1, #0
   147d4:	f44f 70a4 	mov.w	r0, #328	; 0x148
   147d8:	f005 fe5c 	bl	1a494 <z_impl_k_sleep>
	} while (err);
   147dc:	e7cf      	b.n	1477e <at_host_init+0x8a>
		return api->fifo_read(dev, rx_data, size);
   147de:	2201      	movs	r2, #1
   147e0:	f10d 0107 	add.w	r1, sp, #7
   147e4:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   147e6:	2800      	cmp	r0, #0
   147e8:	d1ef      	bne.n	147ca <at_host_init+0xd6>
   147ea:	e7f2      	b.n	147d2 <at_host_init+0xde>
	uart_irq_callback_set(uart_dev, isr);
   147ec:	6828      	ldr	r0, [r5, #0]
	const struct uart_driver_api *api =
   147ee:	6883      	ldr	r3, [r0, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   147f0:	b123      	cbz	r3, 147fc <at_host_init+0x108>
   147f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   147f4:	b113      	cbz	r3, 147fc <at_host_init+0x108>
		api->irq_callback_set(dev, cb, user_data);
   147f6:	2200      	movs	r2, #0
   147f8:	4913      	ldr	r1, [pc, #76]	; (14848 <at_host_init+0x154>)
   147fa:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   147fc:	2200      	movs	r2, #0
   147fe:	4b13      	ldr	r3, [pc, #76]	; (1484c <at_host_init+0x158>)
   14800:	4913      	ldr	r1, [pc, #76]	; (14850 <at_host_init+0x15c>)
   14802:	601a      	str	r2, [r3, #0]
   14804:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   14808:	4812      	ldr	r0, [pc, #72]	; (14854 <at_host_init+0x160>)
   1480a:	230a      	movs	r3, #10
   1480c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14810:	4911      	ldr	r1, [pc, #68]	; (14858 <at_host_init+0x164>)
   14812:	f005 ff9d 	bl	1a750 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   14816:	6828      	ldr	r0, [r5, #0]
   14818:	f009 fd77 	bl	1e30a <z_impl_uart_irq_rx_enable>
	return err;
   1481c:	e780      	b.n	14720 <at_host_init+0x2c>
   1481e:	bf00      	nop
   14820:	2001bf69 	.word	0x2001bf69
   14824:	0001e315 	.word	0x0001e315
   14828:	00020e68 	.word	0x00020e68
   1482c:	00020e58 	.word	0x00020e58
   14830:	00022926 	.word	0x00022926
   14834:	00021ffc 	.word	0x00021ffc
   14838:	20018444 	.word	0x20018444
   1483c:	00022944 	.word	0x00022944
   14840:	000229bf 	.word	0x000229bf
   14844:	00022954 	.word	0x00022954
   14848:	00014595 	.word	0x00014595
   1484c:	20018438 	.word	0x20018438
   14850:	000144e9 	.word	0x000144e9
   14854:	20014c90 	.word	0x20014c90
   14858:	2001d8d8 	.word	0x2001d8d8
   1485c:	0002298a 	.word	0x0002298a

00014860 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   14860:	4b06      	ldr	r3, [pc, #24]	; (1487c <is_valid_notification_char+0x1c>)
   14862:	5cc3      	ldrb	r3, [r0, r3]
   14864:	f003 0303 	and.w	r3, r3, #3
   14868:	2b02      	cmp	r3, #2
   1486a:	bf08      	it	eq
   1486c:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   1486e:	3841      	subs	r0, #65	; 0x41
   14870:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   14872:	2819      	cmp	r0, #25
   14874:	bf8c      	ite	hi
   14876:	2000      	movhi	r0, #0
   14878:	2001      	movls	r0, #1
   1487a:	4770      	bx	lr
   1487c:	00023660 	.word	0x00023660

00014880 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   14880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   14884:	6805      	ldr	r5, [r0, #0]
{
   14886:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   14888:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1488a:	782b      	ldrb	r3, [r5, #0]
{
   1488c:	4680      	mov	r8, r0
   1488e:	460f      	mov	r7, r1
   14890:	4616      	mov	r6, r2
   14892:	2b00      	cmp	r3, #0
   14894:	f000 80d3 	beq.w	14a3e <at_parse_process_element+0x1be>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   14898:	4b6a      	ldr	r3, [pc, #424]	; (14a44 <at_parse_process_element+0x1c4>)
   1489a:	781c      	ldrb	r4, [r3, #0]
   1489c:	2c06      	cmp	r4, #6
   1489e:	d110      	bne.n	148c2 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   148a0:	1c6b      	adds	r3, r5, #1
   148a2:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   148a4:	9a00      	ldr	r2, [sp, #0]
   148a6:	7810      	ldrb	r0, [r2, #0]
   148a8:	f7ff ffda 	bl	14860 <is_valid_notification_char>
   148ac:	b930      	cbnz	r0, 148bc <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   148ae:	1b53      	subs	r3, r2, r5

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   148b0:	462a      	mov	r2, r5
   148b2:	4639      	mov	r1, r7
   148b4:	4630      	mov	r0, r6
   148b6:	f009 fde6 	bl	1e486 <at_params_string_put>
   148ba:	e028      	b.n	1490e <at_parse_process_element+0x8e>
			tmpstr++;
   148bc:	3201      	adds	r2, #1
   148be:	9200      	str	r2, [sp, #0]
   148c0:	e7f0      	b.n	148a4 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   148c2:	2c07      	cmp	r4, #7
   148c4:	d11e      	bne.n	14904 <at_parse_process_element+0x84>
		skip_command_prefix(&tmpstr);
   148c6:	4668      	mov	r0, sp
   148c8:	f009 fd30 	bl	1e32c <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   148cc:	9a00      	ldr	r2, [sp, #0]
   148ce:	7810      	ldrb	r0, [r2, #0]
   148d0:	f7ff ffc6 	bl	14860 <is_valid_notification_char>
   148d4:	b978      	cbnz	r0, 148f6 <at_parse_process_element+0x76>
		at_params_string_put(list, index, start_ptr,
   148d6:	1b53      	subs	r3, r2, r5
   148d8:	4639      	mov	r1, r7
   148da:	462a      	mov	r2, r5
   148dc:	4630      	mov	r0, r6
   148de:	f009 fdd2 	bl	1e486 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   148e2:	9b00      	ldr	r3, [sp, #0]
   148e4:	781a      	ldrb	r2, [r3, #0]
   148e6:	2a3d      	cmp	r2, #61	; 0x3d
   148e8:	d108      	bne.n	148fc <at_parse_process_element+0x7c>
   148ea:	785a      	ldrb	r2, [r3, #1]
   148ec:	2a3f      	cmp	r2, #63	; 0x3f
   148ee:	d10e      	bne.n	1490e <at_parse_process_element+0x8e>
			tmpstr += 2;
   148f0:	3302      	adds	r3, #2
		tmpstr++;
   148f2:	9300      	str	r3, [sp, #0]
   148f4:	e00b      	b.n	1490e <at_parse_process_element+0x8e>
			tmpstr++;
   148f6:	3201      	adds	r2, #1
   148f8:	9200      	str	r2, [sp, #0]
   148fa:	e7e7      	b.n	148cc <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   148fc:	2a3f      	cmp	r2, #63	; 0x3f
   148fe:	d106      	bne.n	1490e <at_parse_process_element+0x8e>
		tmpstr++;
   14900:	3301      	adds	r3, #1
   14902:	e7f6      	b.n	148f2 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   14904:	2c08      	cmp	r4, #8
   14906:	d109      	bne.n	1491c <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   14908:	4610      	mov	r0, r2
   1490a:	f009 fd97 	bl	1e43c <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   1490e:	2000      	movs	r0, #0
	*str = tmpstr;
   14910:	9b00      	ldr	r3, [sp, #0]
   14912:	f8c8 3000 	str.w	r3, [r8]
}
   14916:	b023      	add	sp, #140	; 0x8c
   14918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (state == STRING) {
   1491c:	2c02      	cmp	r4, #2
   1491e:	d111      	bne.n	14944 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   14920:	9a00      	ldr	r2, [sp, #0]
   14922:	7811      	ldrb	r1, [r2, #0]
   14924:	4608      	mov	r0, r1
   14926:	f009 fcf8 	bl	1e31a <is_lfcr>
   1492a:	b918      	cbnz	r0, 14934 <at_parse_process_element+0xb4>
   1492c:	b111      	cbz	r1, 14934 <at_parse_process_element+0xb4>
			tmpstr++;
   1492e:	3201      	adds	r2, #1
   14930:	9200      	str	r2, [sp, #0]
   14932:	e7f5      	b.n	14920 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   14934:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   14936:	462a      	mov	r2, r5
   14938:	4639      	mov	r1, r7
   1493a:	4630      	mov	r0, r6
   1493c:	f009 fda3 	bl	1e486 <at_params_string_put>
		tmpstr++;
   14940:	9b00      	ldr	r3, [sp, #0]
   14942:	e7dd      	b.n	14900 <at_parse_process_element+0x80>
	} else if (state == QUOTED_STRING) {
   14944:	2c03      	cmp	r4, #3
   14946:	d109      	bne.n	1495c <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   14948:	9b00      	ldr	r3, [sp, #0]
   1494a:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   1494c:	2a22      	cmp	r2, #34	; 0x22
   1494e:	d003      	beq.n	14958 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   14950:	b112      	cbz	r2, 14958 <at_parse_process_element+0xd8>
			tmpstr++;
   14952:	3301      	adds	r3, #1
   14954:	9300      	str	r3, [sp, #0]
   14956:	e7f7      	b.n	14948 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   14958:	1b5b      	subs	r3, r3, r5
   1495a:	e7ec      	b.n	14936 <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   1495c:	2c01      	cmp	r4, #1
   1495e:	d13c      	bne.n	149da <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   14960:	4628      	mov	r0, r5
   14962:	220a      	movs	r2, #10
   14964:	a901      	add	r1, sp, #4
   14966:	f006 fc59 	bl	1b21c <strtoul>
		tmpstr = next;
   1496a:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1496c:	4d36      	ldr	r5, [pc, #216]	; (14a48 <at_parse_process_element+0x1c8>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1496e:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   14970:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   14972:	9800      	ldr	r0, [sp, #0]
   14974:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   14976:	2b29      	cmp	r3, #41	; 0x29
   14978:	d028      	beq.n	149cc <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1497a:	b33b      	cbz	r3, 149cc <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1497c:	3b2c      	subs	r3, #44	; 0x2c
   1497e:	b2db      	uxtb	r3, r3
   14980:	3001      	adds	r0, #1
   14982:	2b11      	cmp	r3, #17
				tmparray[i++] =
   14984:	9000      	str	r0, [sp, #0]
   14986:	d803      	bhi.n	14990 <at_parse_process_element+0x110>
   14988:	fa25 f303 	lsr.w	r3, r5, r3
   1498c:	07db      	lsls	r3, r3, #31
   1498e:	d408      	bmi.n	149a2 <at_parse_process_element+0x122>
				tmpstr++;
   14990:	46a1      	mov	r9, r4
   14992:	e004      	b.n	1499e <at_parse_process_element+0x11e>
					tmpstr = next;
   14994:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   14996:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   1499a:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1499c:	d015      	beq.n	149ca <at_parse_process_element+0x14a>
				tmpstr++;
   1499e:	464c      	mov	r4, r9
   149a0:	e7e7      	b.n	14972 <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   149a2:	220a      	movs	r2, #10
   149a4:	a901      	add	r1, sp, #4
   149a6:	f006 fc39 	bl	1b21c <strtoul>
				tmparray[i++] =
   149aa:	ab22      	add	r3, sp, #136	; 0x88
   149ac:	f104 0901 	add.w	r9, r4, #1
   149b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   149b4:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   149b8:	9800      	ldr	r0, [sp, #0]
   149ba:	f7f8 fabb 	bl	cf34 <strlen>
   149be:	4604      	mov	r4, r0
   149c0:	9801      	ldr	r0, [sp, #4]
   149c2:	f7f8 fab7 	bl	cf34 <strlen>
   149c6:	4284      	cmp	r4, r0
   149c8:	d1e4      	bne.n	14994 <at_parse_process_element+0x114>
   149ca:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   149cc:	4639      	mov	r1, r7
   149ce:	4630      	mov	r0, r6
   149d0:	00a3      	lsls	r3, r4, #2
   149d2:	aa02      	add	r2, sp, #8
   149d4:	f009 fd7b 	bl	1e4ce <at_params_array_put>
   149d8:	e7b2      	b.n	14940 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   149da:	2c04      	cmp	r4, #4
   149dc:	d117      	bne.n	14a0e <at_parse_process_element+0x18e>
		int32_t value = (int32_t)strtol(tmpstr, &next, 10);
   149de:	220a      	movs	r2, #10
   149e0:	4628      	mov	r0, r5
   149e2:	a902      	add	r1, sp, #8
   149e4:	f006 fb96 	bl	1b114 <strtol>
		tmpstr = next;
   149e8:	9b02      	ldr	r3, [sp, #8]
		int32_t value = (int32_t)strtol(tmpstr, &next, 10);
   149ea:	4602      	mov	r2, r0
		tmpstr = next;
   149ec:	9300      	str	r3, [sp, #0]
		if ((value <= SHRT_MAX) && (value >= SHRT_MIN)) {
   149ee:	f500 4300 	add.w	r3, r0, #32768	; 0x8000
   149f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   149f6:	d205      	bcs.n	14a04 <at_parse_process_element+0x184>
			at_params_short_put(list, index, (int16_t)value);
   149f8:	b202      	sxth	r2, r0
   149fa:	4639      	mov	r1, r7
   149fc:	4630      	mov	r0, r6
   149fe:	f009 fd0a 	bl	1e416 <at_params_short_put>
   14a02:	e784      	b.n	1490e <at_parse_process_element+0x8e>
			at_params_int_put(list, index, value);
   14a04:	4639      	mov	r1, r7
   14a06:	4630      	mov	r0, r6
   14a08:	f009 fd2a 	bl	1e460 <at_params_int_put>
   14a0c:	e77f      	b.n	1490e <at_parse_process_element+0x8e>
	} else if (state == SMS_PDU) {
   14a0e:	2c05      	cmp	r4, #5
   14a10:	d10b      	bne.n	14a2a <at_parse_process_element+0x1aa>
		while (isxdigit((int)*tmpstr)) {
   14a12:	490e      	ldr	r1, [pc, #56]	; (14a4c <at_parse_process_element+0x1cc>)
   14a14:	9b00      	ldr	r3, [sp, #0]
   14a16:	781a      	ldrb	r2, [r3, #0]
   14a18:	5c52      	ldrb	r2, [r2, r1]
   14a1a:	f012 0f44 	tst.w	r2, #68	; 0x44
   14a1e:	d101      	bne.n	14a24 <at_parse_process_element+0x1a4>
		at_params_string_put(list, index, start_ptr,
   14a20:	1b5b      	subs	r3, r3, r5
   14a22:	e745      	b.n	148b0 <at_parse_process_element+0x30>
			tmpstr++;
   14a24:	3301      	adds	r3, #1
   14a26:	9300      	str	r3, [sp, #0]
   14a28:	e7f4      	b.n	14a14 <at_parse_process_element+0x194>
	} else if (state == CLAC) {
   14a2a:	2c09      	cmp	r4, #9
   14a2c:	f47f af6f 	bne.w	1490e <at_parse_process_element+0x8e>
		while (!is_terminated(*tmpstr)) {
   14a30:	9b00      	ldr	r3, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   14a32:	781a      	ldrb	r2, [r3, #0]
   14a34:	2a00      	cmp	r2, #0
   14a36:	d0f3      	beq.n	14a20 <at_parse_process_element+0x1a0>
			tmpstr++;
   14a38:	3301      	adds	r3, #1
   14a3a:	9300      	str	r3, [sp, #0]
   14a3c:	e7f8      	b.n	14a30 <at_parse_process_element+0x1b0>
		return -1;
   14a3e:	f04f 30ff 	mov.w	r0, #4294967295
   14a42:	e768      	b.n	14916 <at_parse_process_element+0x96>
   14a44:	2001bf6b 	.word	0x2001bf6b
   14a48:	00024001 	.word	0x00024001
   14a4c:	00023660 	.word	0x00023660

00014a50 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   14a50:	b510      	push	{r4, lr}
   14a52:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   14a54:	f7f8 fa6e 	bl	cf34 <strlen>
   14a58:	2801      	cmp	r0, #1
   14a5a:	d922      	bls.n	14aa2 <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   14a5c:	7821      	ldrb	r1, [r4, #0]
   14a5e:	4b13      	ldr	r3, [pc, #76]	; (14aac <is_command+0x5c>)
   14a60:	5cca      	ldrb	r2, [r1, r3]
   14a62:	f002 0203 	and.w	r2, r2, #3
   14a66:	2a02      	cmp	r2, #2
   14a68:	bf08      	it	eq
   14a6a:	3920      	subeq	r1, #32
   14a6c:	2941      	cmp	r1, #65	; 0x41
   14a6e:	461a      	mov	r2, r3
   14a70:	d117      	bne.n	14aa2 <is_command+0x52>
   14a72:	7863      	ldrb	r3, [r4, #1]
   14a74:	5cd2      	ldrb	r2, [r2, r3]
   14a76:	f002 0203 	and.w	r2, r2, #3
   14a7a:	2a02      	cmp	r2, #2
   14a7c:	bf08      	it	eq
   14a7e:	3b20      	subeq	r3, #32
   14a80:	2b54      	cmp	r3, #84	; 0x54
   14a82:	d10e      	bne.n	14aa2 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   14a84:	78a2      	ldrb	r2, [r4, #2]
   14a86:	2a25      	cmp	r2, #37	; 0x25
   14a88:	d00d      	beq.n	14aa6 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   14a8a:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   14a8e:	2b23      	cmp	r3, #35	; 0x23
   14a90:	d009      	beq.n	14aa6 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   14a92:	4610      	mov	r0, r2
   14a94:	f009 fc41 	bl	1e31a <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   14a98:	b910      	cbnz	r0, 14aa0 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   14a9a:	fab2 f082 	clz	r0, r2
   14a9e:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   14aa0:	bd10      	pop	{r4, pc}
		return false;
   14aa2:	2000      	movs	r0, #0
   14aa4:	e7fc      	b.n	14aa0 <is_command+0x50>
		return true;
   14aa6:	2001      	movs	r0, #1
   14aa8:	e7fa      	b.n	14aa0 <is_command+0x50>
   14aaa:	bf00      	nop
   14aac:	00023660 	.word	0x00023660

00014ab0 <at_parse_detect_type>:
{
   14ab0:	b570      	push	{r4, r5, r6, lr}
   14ab2:	4605      	mov	r5, r0
	const char *tmpstr = *str;
   14ab4:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   14ab6:	4e5e      	ldr	r6, [pc, #376]	; (14c30 <at_parse_detect_type+0x180>)
   14ab8:	2900      	cmp	r1, #0
   14aba:	d137      	bne.n	14b2c <at_parse_detect_type+0x7c>
   14abc:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   14abe:	2b2b      	cmp	r3, #43	; 0x2b
   14ac0:	d001      	beq.n	14ac6 <at_parse_detect_type+0x16>
   14ac2:	2b25      	cmp	r3, #37	; 0x25
   14ac4:	d132      	bne.n	14b2c <at_parse_detect_type+0x7c>
	state = new_state;
   14ac6:	2206      	movs	r2, #6
   14ac8:	4b5a      	ldr	r3, [pc, #360]	; (14c34 <at_parse_detect_type+0x184>)
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   14aca:	4620      	mov	r0, r4
	state = new_state;
   14acc:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   14ace:	495a      	ldr	r1, [pc, #360]	; (14c38 <at_parse_detect_type+0x188>)
   14ad0:	2205      	movs	r2, #5
   14ad2:	f00b fe07 	bl	206e4 <strncmp>
   14ad6:	b920      	cbnz	r0, 14ae2 <at_parse_detect_type+0x32>
			retval = true;
   14ad8:	2301      	movs	r3, #1
	state = new_state;
   14ada:	7033      	strb	r3, [r6, #0]
	return 0;
   14adc:	2000      	movs	r0, #0
	*str = tmpstr;
   14ade:	602c      	str	r4, [r5, #0]
}
   14ae0:	bd70      	pop	{r4, r5, r6, pc}
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   14ae2:	2205      	movs	r2, #5
   14ae4:	4620      	mov	r0, r4
   14ae6:	4955      	ldr	r1, [pc, #340]	; (14c3c <at_parse_detect_type+0x18c>)
   14ae8:	f00b fdfc 	bl	206e4 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   14aec:	2800      	cmp	r0, #0
   14aee:	d0f3      	beq.n	14ad8 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   14af0:	220b      	movs	r2, #11
   14af2:	4620      	mov	r0, r4
   14af4:	4952      	ldr	r1, [pc, #328]	; (14c40 <at_parse_detect_type+0x190>)
   14af6:	f00b fdf5 	bl	206e4 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   14afa:	2800      	cmp	r0, #0
   14afc:	d0ec      	beq.n	14ad8 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   14afe:	220a      	movs	r2, #10
   14b00:	4620      	mov	r0, r4
   14b02:	4950      	ldr	r1, [pc, #320]	; (14c44 <at_parse_detect_type+0x194>)
   14b04:	f00b fdee 	bl	206e4 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   14b08:	2800      	cmp	r0, #0
   14b0a:	d0e5      	beq.n	14ad8 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   14b0c:	220b      	movs	r2, #11
   14b0e:	4620      	mov	r0, r4
   14b10:	494d      	ldr	r1, [pc, #308]	; (14c48 <at_parse_detect_type+0x198>)
   14b12:	f00b fde7 	bl	206e4 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   14b16:	2800      	cmp	r0, #0
   14b18:	d0de      	beq.n	14ad8 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   14b1a:	2207      	movs	r2, #7
   14b1c:	4620      	mov	r0, r4
   14b1e:	494b      	ldr	r1, [pc, #300]	; (14c4c <at_parse_detect_type+0x19c>)
   14b20:	f00b fde0 	bl	206e4 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   14b24:	fab0 f380 	clz	r3, r0
   14b28:	095b      	lsrs	r3, r3, #5
	return retval;
   14b2a:	e7d6      	b.n	14ada <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   14b2c:	7833      	ldrb	r3, [r6, #0]
   14b2e:	b11b      	cbz	r3, 14b38 <at_parse_detect_type+0x88>
	state = new_state;
   14b30:	2202      	movs	r2, #2
   14b32:	4b40      	ldr	r3, [pc, #256]	; (14c34 <at_parse_detect_type+0x184>)
   14b34:	701a      	strb	r2, [r3, #0]
}
   14b36:	e7d1      	b.n	14adc <at_parse_detect_type+0x2c>
	} else if ((index == 0) && is_clac(tmpstr)) {
   14b38:	2900      	cmp	r1, #0
   14b3a:	d168      	bne.n	14c0e <at_parse_detect_type+0x15e>
 * @retval true  If the string is a CLAC response
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	if (strlen(str) < 4) {
   14b3c:	4620      	mov	r0, r4
   14b3e:	f7f8 f9f9 	bl	cf34 <strlen>
   14b42:	2803      	cmp	r0, #3
   14b44:	4e3b      	ldr	r6, [pc, #236]	; (14c34 <at_parse_detect_type+0x184>)
   14b46:	d95b      	bls.n	14c00 <at_parse_detect_type+0x150>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   14b48:	7822      	ldrb	r2, [r4, #0]
   14b4a:	4b41      	ldr	r3, [pc, #260]	; (14c50 <at_parse_detect_type+0x1a0>)
   14b4c:	5cd1      	ldrb	r1, [r2, r3]
   14b4e:	f001 0103 	and.w	r1, r1, #3
   14b52:	2902      	cmp	r1, #2
   14b54:	bf08      	it	eq
   14b56:	3a20      	subeq	r2, #32
   14b58:	2a41      	cmp	r2, #65	; 0x41
   14b5a:	d151      	bne.n	14c00 <at_parse_detect_type+0x150>
   14b5c:	7862      	ldrb	r2, [r4, #1]
   14b5e:	5c99      	ldrb	r1, [r3, r2]
   14b60:	f001 0103 	and.w	r1, r1, #3
   14b64:	2902      	cmp	r1, #2
   14b66:	bf08      	it	eq
   14b68:	3a20      	subeq	r2, #32
   14b6a:	2a54      	cmp	r2, #84	; 0x54
   14b6c:	d148      	bne.n	14c00 <at_parse_detect_type+0x150>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   14b6e:	78a2      	ldrb	r2, [r4, #2]
   14b70:	5c99      	ldrb	r1, [r3, r2]
   14b72:	f001 0103 	and.w	r1, r1, #3
   14b76:	2902      	cmp	r1, #2
   14b78:	bf08      	it	eq
   14b7a:	3a20      	subeq	r2, #32
   14b7c:	2a2b      	cmp	r2, #43	; 0x2b
   14b7e:	d00a      	beq.n	14b96 <at_parse_detect_type+0xe6>
   14b80:	2a25      	cmp	r2, #37	; 0x25
   14b82:	d13d      	bne.n	14c00 <at_parse_detect_type+0x150>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   14b84:	78e2      	ldrb	r2, [r4, #3]
   14b86:	5c9b      	ldrb	r3, [r3, r2]
   14b88:	f003 0303 	and.w	r3, r3, #3
   14b8c:	2b02      	cmp	r3, #2
   14b8e:	bf08      	it	eq
   14b90:	3a20      	subeq	r2, #32
   14b92:	2a58      	cmp	r2, #88	; 0x58
   14b94:	d034      	beq.n	14c00 <at_parse_detect_type+0x150>
	state = new_state;
   14b96:	2309      	movs	r3, #9
   14b98:	e79f      	b.n	14ada <at_parse_detect_type+0x2a>
   14b9a:	2307      	movs	r3, #7
   14b9c:	e79d      	b.n	14ada <at_parse_detect_type+0x2a>
	if (chr == '"') {
   14b9e:	2a22      	cmp	r2, #34	; 0x22
   14ba0:	d006      	beq.n	14bb0 <at_parse_detect_type+0x100>
	if (chr == '(') {
   14ba2:	2a28      	cmp	r2, #40	; 0x28
   14ba4:	d109      	bne.n	14bba <at_parse_detect_type+0x10a>
   14ba6:	2201      	movs	r2, #1
   14ba8:	4b22      	ldr	r3, [pc, #136]	; (14c34 <at_parse_detect_type+0x184>)
		tmpstr++;
   14baa:	4414      	add	r4, r2
	state = new_state;
   14bac:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   14bae:	e795      	b.n	14adc <at_parse_detect_type+0x2c>
	state = new_state;
   14bb0:	2203      	movs	r2, #3
   14bb2:	4b20      	ldr	r3, [pc, #128]	; (14c34 <at_parse_detect_type+0x184>)
		tmpstr++;
   14bb4:	3401      	adds	r4, #1
	state = new_state;
   14bb6:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   14bb8:	e790      	b.n	14adc <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   14bba:	4610      	mov	r0, r2
   14bbc:	f009 fbad 	bl	1e31a <is_lfcr>
   14bc0:	b178      	cbz	r0, 14be2 <at_parse_detect_type+0x132>
   14bc2:	491c      	ldr	r1, [pc, #112]	; (14c34 <at_parse_detect_type+0x184>)
   14bc4:	7808      	ldrb	r0, [r1, #0]
   14bc6:	2804      	cmp	r0, #4
   14bc8:	d108      	bne.n	14bdc <at_parse_detect_type+0x12c>
		while (is_lfcr(*tmpstr)) {
   14bca:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   14bce:	f009 fba4 	bl	1e31a <is_lfcr>
   14bd2:	2800      	cmp	r0, #0
   14bd4:	d1f9      	bne.n	14bca <at_parse_detect_type+0x11a>
	state = new_state;
   14bd6:	2305      	movs	r3, #5
   14bd8:	700b      	strb	r3, [r1, #0]
}
   14bda:	e77f      	b.n	14adc <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   14bdc:	2808      	cmp	r0, #8
   14bde:	f43f af7d 	beq.w	14adc <at_parse_detect_type+0x2c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   14be2:	3a2c      	subs	r2, #44	; 0x2c
   14be4:	b2d2      	uxtb	r2, r2
   14be6:	2a11      	cmp	r2, #17
   14be8:	d807      	bhi.n	14bfa <at_parse_detect_type+0x14a>
   14bea:	4b1a      	ldr	r3, [pc, #104]	; (14c54 <at_parse_detect_type+0x1a4>)
   14bec:	fa23 f202 	lsr.w	r2, r3, r2
   14bf0:	07d3      	lsls	r3, r2, #31
   14bf2:	d502      	bpl.n	14bfa <at_parse_detect_type+0x14a>
	state = new_state;
   14bf4:	2208      	movs	r2, #8
   14bf6:	4b0f      	ldr	r3, [pc, #60]	; (14c34 <at_parse_detect_type+0x184>)
   14bf8:	e79c      	b.n	14b34 <at_parse_detect_type+0x84>
		return -1;
   14bfa:	f04f 30ff 	mov.w	r0, #4294967295
   14bfe:	e76f      	b.n	14ae0 <at_parse_detect_type+0x30>
	} else if ((index == 0) && is_command(tmpstr)) {
   14c00:	4620      	mov	r0, r4
   14c02:	f7ff ff25 	bl	14a50 <is_command>
   14c06:	2800      	cmp	r0, #0
   14c08:	d1c7      	bne.n	14b9a <at_parse_detect_type+0xea>
	state = new_state;
   14c0a:	2302      	movs	r3, #2
   14c0c:	e765      	b.n	14ada <at_parse_detect_type+0x2a>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   14c0e:	7822      	ldrb	r2, [r4, #0]
   14c10:	dd03      	ble.n	14c1a <at_parse_detect_type+0x16a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   14c12:	2a2b      	cmp	r2, #43	; 0x2b
   14c14:	d0f1      	beq.n	14bfa <at_parse_detect_type+0x14a>
   14c16:	2a25      	cmp	r2, #37	; 0x25
   14c18:	d0ef      	beq.n	14bfa <at_parse_detect_type+0x14a>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   14c1a:	4b0d      	ldr	r3, [pc, #52]	; (14c50 <at_parse_detect_type+0x1a0>)
   14c1c:	5cd3      	ldrb	r3, [r2, r3]
   14c1e:	0759      	lsls	r1, r3, #29
   14c20:	d403      	bmi.n	14c2a <at_parse_detect_type+0x17a>
   14c22:	2a2d      	cmp	r2, #45	; 0x2d
   14c24:	d001      	beq.n	14c2a <at_parse_detect_type+0x17a>
   14c26:	2a2b      	cmp	r2, #43	; 0x2b
   14c28:	d1b9      	bne.n	14b9e <at_parse_detect_type+0xee>
	state = new_state;
   14c2a:	2204      	movs	r2, #4
   14c2c:	4b01      	ldr	r3, [pc, #4]	; (14c34 <at_parse_detect_type+0x184>)
   14c2e:	e781      	b.n	14b34 <at_parse_detect_type+0x84>
   14c30:	2001bf6a 	.word	0x2001bf6a
   14c34:	2001bf6b 	.word	0x2001bf6b
   14c38:	000229e9 	.word	0x000229e9
   14c3c:	000229ef 	.word	0x000229ef
   14c40:	000229f5 	.word	0x000229f5
   14c44:	00022a01 	.word	0x00022a01
   14c48:	00022a0c 	.word	0x00022a0c
   14c4c:	00022a18 	.word	0x00022a18
   14c50:	00023660 	.word	0x00023660
   14c54:	00024001 	.word	0x00024001

00014c58 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   14c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c5c:	4688      	mov	r8, r1
   14c5e:	4616      	mov	r6, r2
   14c60:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   14c62:	4604      	mov	r4, r0
   14c64:	2800      	cmp	r0, #0
   14c66:	f000 8081 	beq.w	14d6c <at_parser_max_params_from_str+0x114>
   14c6a:	2a00      	cmp	r2, #0
   14c6c:	d07e      	beq.n	14d6c <at_parser_max_params_from_str+0x114>
   14c6e:	6853      	ldr	r3, [r2, #4]
   14c70:	2b00      	cmp	r3, #0
   14c72:	d07b      	beq.n	14d6c <at_parser_max_params_from_str+0x114>
	state = IDLE;
   14c74:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   14c76:	4610      	mov	r0, r2
   14c78:	f009 fba1 	bl	1e3be <at_params_list_clear>
	const char *str = *at_params_str;
   14c7c:	9401      	str	r4, [sp, #4]
	int index = 0;
   14c7e:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   14c80:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   14c82:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 14d7c <at_parser_max_params_from_str+0x124>
	max_params_count = MIN(max_params_count, list->param_count);
   14c86:	429f      	cmp	r7, r3
   14c88:	bf28      	it	cs
   14c8a:	461f      	movcs	r7, r3
	state = IDLE;
   14c8c:	4b39      	ldr	r3, [pc, #228]	; (14d74 <at_parser_max_params_from_str+0x11c>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   14c8e:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 14d80 <at_parser_max_params_from_str+0x128>
   14c92:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   14c94:	4b38      	ldr	r3, [pc, #224]	; (14d78 <at_parser_max_params_from_str+0x120>)
   14c96:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   14c98:	9b01      	ldr	r3, [sp, #4]
   14c9a:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   14c9c:	2a00      	cmp	r2, #0
   14c9e:	d04b      	beq.n	14d38 <at_parser_max_params_from_str+0xe0>
   14ca0:	42a7      	cmp	r7, r4
   14ca2:	d949      	bls.n	14d38 <at_parser_max_params_from_str+0xe0>
		if (isspace((int)*str)) {
   14ca4:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   14ca8:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   14caa:	0711      	lsls	r1, r2, #28
			str++;
   14cac:	bf48      	it	mi
   14cae:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   14cb0:	4621      	mov	r1, r4
			str++;
   14cb2:	bf48      	it	mi
   14cb4:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   14cb6:	f7ff fefb 	bl	14ab0 <at_parse_detect_type>
   14cba:	1c42      	adds	r2, r0, #1
   14cbc:	d03c      	beq.n	14d38 <at_parser_max_params_from_str+0xe0>
		if (at_parse_process_element(&str, index, list) == -1) {
   14cbe:	4632      	mov	r2, r6
   14cc0:	4621      	mov	r1, r4
   14cc2:	a801      	add	r0, sp, #4
   14cc4:	f7ff fddc 	bl	14880 <at_parse_process_element>
   14cc8:	1c43      	adds	r3, r0, #1
   14cca:	d035      	beq.n	14d38 <at_parser_max_params_from_str+0xe0>
		if (is_separator(*str)) {
   14ccc:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   14cce:	781a      	ldrb	r2, [r3, #0]
   14cd0:	3a2c      	subs	r2, #44	; 0x2c
   14cd2:	b2d2      	uxtb	r2, r2
   14cd4:	2a11      	cmp	r2, #17
   14cd6:	d81a      	bhi.n	14d0e <at_parser_max_params_from_str+0xb6>
   14cd8:	fa2a f202 	lsr.w	r2, sl, r2
   14cdc:	07d1      	lsls	r1, r2, #31
   14cde:	d516      	bpl.n	14d0e <at_parser_max_params_from_str+0xb6>
			if (is_lfcr(*(str + 1))) {
   14ce0:	7858      	ldrb	r0, [r3, #1]
   14ce2:	f009 fb1a 	bl	1e31a <is_lfcr>
   14ce6:	b178      	cbz	r0, 14d08 <at_parser_max_params_from_str+0xb0>
				index++;
   14ce8:	3401      	adds	r4, #1
				if (index == max_params) {
   14cea:	42bc      	cmp	r4, r7
   14cec:	d039      	beq.n	14d62 <at_parser_max_params_from_str+0x10a>
				if (at_parse_detect_type(&str, index) == -1) {
   14cee:	4621      	mov	r1, r4
   14cf0:	a801      	add	r0, sp, #4
   14cf2:	f7ff fedd 	bl	14ab0 <at_parse_detect_type>
   14cf6:	1c42      	adds	r2, r0, #1
   14cf8:	d01e      	beq.n	14d38 <at_parser_max_params_from_str+0xe0>
				if (at_parse_process_element(&str, index,
   14cfa:	4632      	mov	r2, r6
   14cfc:	4621      	mov	r1, r4
   14cfe:	a801      	add	r0, sp, #4
   14d00:	f7ff fdbe 	bl	14880 <at_parse_process_element>
   14d04:	1c43      	adds	r3, r0, #1
   14d06:	d017      	beq.n	14d38 <at_parser_max_params_from_str+0xe0>
			str++;
   14d08:	9b01      	ldr	r3, [sp, #4]
   14d0a:	3301      	adds	r3, #1
   14d0c:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   14d0e:	9a01      	ldr	r2, [sp, #4]
   14d10:	7810      	ldrb	r0, [r2, #0]
   14d12:	f009 fb02 	bl	1e31a <is_lfcr>
   14d16:	b1f8      	cbz	r0, 14d58 <at_parser_max_params_from_str+0x100>
   14d18:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   14d1a:	7811      	ldrb	r1, [r2, #0]
   14d1c:	4693      	mov	fp, r2
   14d1e:	4608      	mov	r0, r1
   14d20:	3201      	adds	r2, #1
   14d22:	f009 fafa 	bl	1e31a <is_lfcr>
   14d26:	2800      	cmp	r0, #0
   14d28:	d1f7      	bne.n	14d1a <at_parser_max_params_from_str+0xc2>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   14d2a:	b119      	cbz	r1, 14d34 <at_parser_max_params_from_str+0xdc>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   14d2c:	292b      	cmp	r1, #43	; 0x2b
   14d2e:	d001      	beq.n	14d34 <at_parser_max_params_from_str+0xdc>
   14d30:	2925      	cmp	r1, #37	; 0x25
   14d32:	d111      	bne.n	14d58 <at_parser_max_params_from_str+0x100>
				str += i;
   14d34:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   14d38:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   14d3a:	b9a5      	cbnz	r5, 14d66 <at_parser_max_params_from_str+0x10e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   14d3c:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   14d3e:	2a00      	cmp	r2, #0
   14d40:	bf0c      	ite	eq
   14d42:	2000      	moveq	r0, #0
   14d44:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   14d48:	f1b8 0f00 	cmp.w	r8, #0
   14d4c:	d001      	beq.n	14d52 <at_parser_max_params_from_str+0xfa>
		*next_param_str = (char *)at_params_str;
   14d4e:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   14d52:	b003      	add	sp, #12
   14d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   14d58:	3401      	adds	r4, #1
			oversized = true;
   14d5a:	42bc      	cmp	r4, r7
   14d5c:	bf08      	it	eq
   14d5e:	2501      	moveq	r5, #1
   14d60:	e79a      	b.n	14c98 <at_parser_max_params_from_str+0x40>
					oversized = true;
   14d62:	4605      	mov	r5, r0
   14d64:	e7e8      	b.n	14d38 <at_parser_max_params_from_str+0xe0>
		return -E2BIG;
   14d66:	f06f 0006 	mvn.w	r0, #6
   14d6a:	e7ed      	b.n	14d48 <at_parser_max_params_from_str+0xf0>
		return -EINVAL;
   14d6c:	f06f 0015 	mvn.w	r0, #21
   14d70:	e7ef      	b.n	14d52 <at_parser_max_params_from_str+0xfa>
   14d72:	bf00      	nop
   14d74:	2001bf6b 	.word	0x2001bf6b
   14d78:	2001bf6a 	.word	0x2001bf6a
   14d7c:	00023660 	.word	0x00023660
   14d80:	00024001 	.word	0x00024001

00014d84 <parse_psm_cfg>:
	char timer_str[9] = {0};
   14d84:	2300      	movs	r3, #0
{
   14d86:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d88:	b089      	sub	sp, #36	; 0x24
	char timer_str[9] = {0};
   14d8a:	e9cd 3305 	strd	r3, r3, [sp, #20]
   14d8e:	f88d 301c 	strb.w	r3, [sp, #28]
	char unit_str[4] = {0};
   14d92:	9303      	str	r3, [sp, #12]
	size_t timer_str_len = sizeof(timer_str) - 1;
   14d94:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   14d96:	2900      	cmp	r1, #0
	err = at_params_string_get(at_params,
   14d98:	bf14      	ite	ne
   14d9a:	2108      	movne	r1, #8
   14d9c:	2109      	moveq	r1, #9
	size_t timer_str_len = sizeof(timer_str) - 1;
   14d9e:	9304      	str	r3, [sp, #16]
{
   14da0:	4615      	mov	r5, r2
	err = at_params_string_get(at_params,
   14da2:	ab04      	add	r3, sp, #16
   14da4:	aa05      	add	r2, sp, #20
{
   14da6:	4606      	mov	r6, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   14da8:	bf14      	ite	ne
   14daa:	2707      	movne	r7, #7
   14dac:	2708      	moveq	r7, #8
	err = at_params_string_get(at_params,
   14dae:	f009 fbc5 	bl	1e53c <at_params_string_get>
	if (err) {
   14db2:	4601      	mov	r1, r0
   14db4:	b170      	cbz	r0, 14dd4 <parse_psm_cfg+0x50>
   14db6:	4b34      	ldr	r3, [pc, #208]	; (14e88 <parse_psm_cfg+0x104>)
   14db8:	4a34      	ldr	r2, [pc, #208]	; (14e8c <parse_psm_cfg+0x108>)
		LOG_ERR("Could not get TAU, error: %d", err);
   14dba:	4835      	ldr	r0, [pc, #212]	; (14e90 <parse_psm_cfg+0x10c>)
   14dbc:	1ad2      	subs	r2, r2, r3
   14dbe:	08d2      	lsrs	r2, r2, #3
   14dc0:	0192      	lsls	r2, r2, #6
   14dc2:	f042 0201 	orr.w	r2, r2, #1
   14dc6:	9101      	str	r1, [sp, #4]
   14dc8:	f007 fc2d 	bl	1c626 <log_1>
		return err;
   14dcc:	9901      	ldr	r1, [sp, #4]
}
   14dce:	4608      	mov	r0, r1
   14dd0:	b009      	add	sp, #36	; 0x24
   14dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   14dd4:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   14dd6:	9001      	str	r0, [sp, #4]
	memcpy(unit_str, timer_str, unit_str_len);
   14dd8:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   14ddc:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   14dde:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   14de0:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   14de2:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   14de6:	f006 fa19 	bl	1b21c <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   14dea:	2807      	cmp	r0, #7
   14dec:	9901      	ldr	r1, [sp, #4]
   14dee:	d90c      	bls.n	14e0a <parse_psm_cfg+0x86>
   14df0:	4926      	ldr	r1, [pc, #152]	; (14e8c <parse_psm_cfg+0x108>)
   14df2:	4b25      	ldr	r3, [pc, #148]	; (14e88 <parse_psm_cfg+0x104>)
		LOG_ERR("Unable to parse periodic TAU string");
   14df4:	4827      	ldr	r0, [pc, #156]	; (14e94 <parse_psm_cfg+0x110>)
   14df6:	1ac9      	subs	r1, r1, r3
   14df8:	08c9      	lsrs	r1, r1, #3
   14dfa:	0189      	lsls	r1, r1, #6
   14dfc:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to parse active time string");
   14e00:	f007 fc02 	bl	1c608 <log_0>
		return err;
   14e04:	f06f 0115 	mvn.w	r1, #21
   14e08:	e7e1      	b.n	14dce <parse_psm_cfg+0x4a>
	timer_unit = t3412_lookup[lut_idx];
   14e0a:	4b23      	ldr	r3, [pc, #140]	; (14e98 <parse_psm_cfg+0x114>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   14e0c:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   14e0e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   14e12:	f10d 0017 	add.w	r0, sp, #23
   14e16:	f006 fa01 	bl	1b21c <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   14e1a:	b30c      	cbz	r4, 14e60 <parse_psm_cfg+0xdc>
   14e1c:	4344      	muls	r4, r0
	err = at_params_string_get(at_params,
   14e1e:	4639      	mov	r1, r7
   14e20:	4630      	mov	r0, r6
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   14e22:	602c      	str	r4, [r5, #0]
	err = at_params_string_get(at_params,
   14e24:	ab04      	add	r3, sp, #16
   14e26:	aa05      	add	r2, sp, #20
   14e28:	f009 fb88 	bl	1e53c <at_params_string_get>
	if (err) {
   14e2c:	4601      	mov	r1, r0
   14e2e:	2800      	cmp	r0, #0
   14e30:	d1c1      	bne.n	14db6 <parse_psm_cfg+0x32>
	memcpy(unit_str, timer_str, unit_str_len);
   14e32:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   14e34:	9001      	str	r0, [sp, #4]
	memcpy(unit_str, timer_str, unit_str_len);
   14e36:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   14e3a:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   14e3c:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   14e3e:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   14e40:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   14e44:	f006 f9ea 	bl	1b21c <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   14e48:	2807      	cmp	r0, #7
   14e4a:	9901      	ldr	r1, [sp, #4]
   14e4c:	d90b      	bls.n	14e66 <parse_psm_cfg+0xe2>
   14e4e:	490f      	ldr	r1, [pc, #60]	; (14e8c <parse_psm_cfg+0x108>)
   14e50:	4b0d      	ldr	r3, [pc, #52]	; (14e88 <parse_psm_cfg+0x104>)
		LOG_ERR("Unable to parse active time string");
   14e52:	4812      	ldr	r0, [pc, #72]	; (14e9c <parse_psm_cfg+0x118>)
   14e54:	1ac9      	subs	r1, r1, r3
   14e56:	08c9      	lsrs	r1, r1, #3
   14e58:	0189      	lsls	r1, r1, #6
   14e5a:	f041 0101 	orr.w	r1, r1, #1
   14e5e:	e7cf      	b.n	14e00 <parse_psm_cfg+0x7c>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   14e60:	f04f 34ff 	mov.w	r4, #4294967295
   14e64:	e7db      	b.n	14e1e <parse_psm_cfg+0x9a>
	timer_unit = t3324_lookup[lut_idx];
   14e66:	4b0e      	ldr	r3, [pc, #56]	; (14ea0 <parse_psm_cfg+0x11c>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   14e68:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   14e6a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   14e6e:	f10d 0017 	add.w	r0, sp, #23
   14e72:	9101      	str	r1, [sp, #4]
   14e74:	f006 f9d2 	bl	1b21c <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   14e78:	9901      	ldr	r1, [sp, #4]
   14e7a:	b114      	cbz	r4, 14e82 <parse_psm_cfg+0xfe>
   14e7c:	4360      	muls	r0, r4
   14e7e:	6068      	str	r0, [r5, #4]
	return 0;
   14e80:	e7a5      	b.n	14dce <parse_psm_cfg+0x4a>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   14e82:	f04f 30ff 	mov.w	r0, #4294967295
   14e86:	e7fa      	b.n	14e7e <parse_psm_cfg+0xfa>
   14e88:	00020e58 	.word	0x00020e58
   14e8c:	00020ea0 	.word	0x00020ea0
   14e90:	00022a20 	.word	0x00022a20
   14e94:	00022a3d 	.word	0x00022a3d
   14e98:	00021164 	.word	0x00021164
   14e9c:	00022a61 	.word	0x00022a61
   14ea0:	00021144 	.word	0x00021144

00014ea4 <lte_lc_offline>:
{
   14ea4:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   14ea6:	2300      	movs	r3, #0
   14ea8:	4804      	ldr	r0, [pc, #16]	; (14ebc <lte_lc_offline+0x18>)
   14eaa:	461a      	mov	r2, r3
   14eac:	4619      	mov	r1, r3
   14eae:	f7ff f9b7 	bl	14220 <at_cmd_write>
   14eb2:	2800      	cmp	r0, #0
}
   14eb4:	bf18      	it	ne
   14eb6:	f06f 0004 	mvnne.w	r0, #4
   14eba:	bd08      	pop	{r3, pc}
   14ebc:	0002326e 	.word	0x0002326e

00014ec0 <lte_lc_normal>:
{
   14ec0:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   14ec2:	2300      	movs	r3, #0
   14ec4:	4804      	ldr	r0, [pc, #16]	; (14ed8 <lte_lc_normal+0x18>)
   14ec6:	461a      	mov	r2, r3
   14ec8:	4619      	mov	r1, r3
   14eca:	f7ff f9a9 	bl	14220 <at_cmd_write>
   14ece:	2800      	cmp	r0, #0
}
   14ed0:	bf18      	it	ne
   14ed2:	f06f 0004 	mvnne.w	r0, #4
   14ed6:	bd08      	pop	{r3, pc}
   14ed8:	00023264 	.word	0x00023264

00014edc <lte_lc_psm_req>:
{
   14edc:	b510      	push	{r4, lr}
	if (enable) {
   14ede:	4603      	mov	r3, r0
{
   14ee0:	b08c      	sub	sp, #48	; 0x30
	if (enable) {
   14ee2:	2800      	cmp	r0, #0
   14ee4:	d036      	beq.n	14f54 <lte_lc_psm_req+0x78>
		if (strlen(psm_param_rptau) == 8 &&
   14ee6:	481d      	ldr	r0, [pc, #116]	; (14f5c <lte_lc_psm_req+0x80>)
   14ee8:	f7f8 f824 	bl	cf34 <strlen>
   14eec:	2808      	cmp	r0, #8
   14eee:	d118      	bne.n	14f22 <lte_lc_psm_req+0x46>
		    strlen(psm_param_rat) == 8) {
   14ef0:	4c1b      	ldr	r4, [pc, #108]	; (14f60 <lte_lc_psm_req+0x84>)
   14ef2:	4620      	mov	r0, r4
   14ef4:	f7f8 f81e 	bl	cf34 <strlen>
		if (strlen(psm_param_rptau) == 8 &&
   14ef8:	2808      	cmp	r0, #8
   14efa:	d112      	bne.n	14f22 <lte_lc_psm_req+0x46>
			snprintf(psm_req, sizeof(psm_req),
   14efc:	2128      	movs	r1, #40	; 0x28
   14efe:	4b17      	ldr	r3, [pc, #92]	; (14f5c <lte_lc_psm_req+0x80>)
   14f00:	4a18      	ldr	r2, [pc, #96]	; (14f64 <lte_lc_psm_req+0x88>)
   14f02:	9400      	str	r4, [sp, #0]
   14f04:	a802      	add	r0, sp, #8
   14f06:	f006 f80d 	bl	1af24 <sniprintf>
		err = at_cmd_write(psm_req, NULL, 0, NULL);
   14f0a:	2300      	movs	r3, #0
   14f0c:	461a      	mov	r2, r3
   14f0e:	4619      	mov	r1, r3
   14f10:	a802      	add	r0, sp, #8
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   14f12:	f7ff f985 	bl	14220 <at_cmd_write>
		return -EIO;
   14f16:	2800      	cmp	r0, #0
}
   14f18:	bf18      	it	ne
   14f1a:	f06f 0004 	mvnne.w	r0, #4
   14f1e:	b00c      	add	sp, #48	; 0x30
   14f20:	bd10      	pop	{r4, pc}
		} else if (strlen(psm_param_rptau) == 8) {
   14f22:	480e      	ldr	r0, [pc, #56]	; (14f5c <lte_lc_psm_req+0x80>)
   14f24:	f7f8 f806 	bl	cf34 <strlen>
   14f28:	2808      	cmp	r0, #8
   14f2a:	d106      	bne.n	14f3a <lte_lc_psm_req+0x5e>
			snprintf(psm_req, sizeof(psm_req),
   14f2c:	4b0b      	ldr	r3, [pc, #44]	; (14f5c <lte_lc_psm_req+0x80>)
   14f2e:	4a0e      	ldr	r2, [pc, #56]	; (14f68 <lte_lc_psm_req+0x8c>)
			snprintf(psm_req, sizeof(psm_req),
   14f30:	2128      	movs	r1, #40	; 0x28
   14f32:	a802      	add	r0, sp, #8
   14f34:	f005 fff6 	bl	1af24 <sniprintf>
   14f38:	e7e7      	b.n	14f0a <lte_lc_psm_req+0x2e>
		} else if (strlen(psm_param_rat) == 8) {
   14f3a:	4809      	ldr	r0, [pc, #36]	; (14f60 <lte_lc_psm_req+0x84>)
   14f3c:	f7f7 fffa 	bl	cf34 <strlen>
   14f40:	2808      	cmp	r0, #8
   14f42:	d102      	bne.n	14f4a <lte_lc_psm_req+0x6e>
			snprintf(psm_req, sizeof(psm_req),
   14f44:	4b06      	ldr	r3, [pc, #24]	; (14f60 <lte_lc_psm_req+0x84>)
   14f46:	4a09      	ldr	r2, [pc, #36]	; (14f6c <lte_lc_psm_req+0x90>)
   14f48:	e7f2      	b.n	14f30 <lte_lc_psm_req+0x54>
			snprintf(psm_req, sizeof(psm_req),
   14f4a:	4909      	ldr	r1, [pc, #36]	; (14f70 <lte_lc_psm_req+0x94>)
   14f4c:	a802      	add	r0, sp, #8
   14f4e:	f00b fbc1 	bl	206d4 <strcpy>
   14f52:	e7da      	b.n	14f0a <lte_lc_psm_req+0x2e>
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   14f54:	4602      	mov	r2, r0
   14f56:	4601      	mov	r1, r0
   14f58:	4806      	ldr	r0, [pc, #24]	; (14f74 <lte_lc_psm_req+0x98>)
   14f5a:	e7da      	b.n	14f12 <lte_lc_psm_req+0x36>
   14f5c:	2001461e 	.word	0x2001461e
   14f60:	20014615 	.word	0x20014615
   14f64:	00022d74 	.word	0x00022d74
   14f68:	00022d8b 	.word	0x00022d8b
   14f6c:	00022d9d 	.word	0x00022d9d
   14f70:	00022db0 	.word	0x00022db0
   14f74:	00023278 	.word	0x00023278

00014f78 <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   14f78:	b530      	push	{r4, r5, lr}
	int err, len;
	char cmd[50];

	switch (mode) {
   14f7a:	4605      	mov	r5, r0
{
   14f7c:	b08f      	sub	sp, #60	; 0x3c
	switch (mode) {
   14f7e:	2800      	cmp	r0, #0
   14f80:	d040      	beq.n	15004 <lte_lc_system_mode_set+0x8c>
   14f82:	1e43      	subs	r3, r0, #1
   14f84:	2b04      	cmp	r3, #4
   14f86:	d90e      	bls.n	14fa6 <lte_lc_system_mode_set+0x2e>
   14f88:	4b1f      	ldr	r3, [pc, #124]	; (15008 <lte_lc_system_mode_set+0x90>)
   14f8a:	4920      	ldr	r1, [pc, #128]	; (1500c <lte_lc_system_mode_set+0x94>)
	case LTE_LC_SYSTEM_MODE_NBIOT:
	case LTE_LC_SYSTEM_MODE_NBIOT_GPS:
	case LTE_LC_SYSTEM_MODE_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested");
   14f8c:	4820      	ldr	r0, [pc, #128]	; (15010 <lte_lc_system_mode_set+0x98>)
   14f8e:	1ac9      	subs	r1, r1, r3
   14f90:	08c9      	lsrs	r1, r1, #3
   14f92:	0189      	lsls	r1, r1, #6
   14f94:	f041 0101 	orr.w	r1, r1, #1
   14f98:	f007 fb36 	bl	1c608 <log_0>
		return -EINVAL;
   14f9c:	f06f 0415 	mvn.w	r4, #21

	sys_mode_current = mode;
	sys_mode_target = mode;

	return err;
}
   14fa0:	4620      	mov	r0, r4
   14fa2:	b00f      	add	sp, #60	; 0x3c
   14fa4:	bd30      	pop	{r4, r5, pc}
	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   14fa6:	4b1b      	ldr	r3, [pc, #108]	; (15014 <lte_lc_system_mode_set+0x9c>)
   14fa8:	2132      	movs	r1, #50	; 0x32
   14faa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   14fae:	4a1a      	ldr	r2, [pc, #104]	; (15018 <lte_lc_system_mode_set+0xa0>)
   14fb0:	a801      	add	r0, sp, #4
   14fb2:	f006 ff24 	bl	1bdfe <snprintk>
	if (len < 0) {
   14fb6:	2800      	cmp	r0, #0
   14fb8:	da0c      	bge.n	14fd4 <lte_lc_system_mode_set+0x5c>
   14fba:	4b13      	ldr	r3, [pc, #76]	; (15008 <lte_lc_system_mode_set+0x90>)
   14fbc:	4913      	ldr	r1, [pc, #76]	; (1500c <lte_lc_system_mode_set+0x94>)
		LOG_ERR("Could not construct system mode command");
   14fbe:	4817      	ldr	r0, [pc, #92]	; (1501c <lte_lc_system_mode_set+0xa4>)
   14fc0:	1ac9      	subs	r1, r1, r3
   14fc2:	08c9      	lsrs	r1, r1, #3
   14fc4:	0189      	lsls	r1, r1, #6
   14fc6:	f041 0101 	orr.w	r1, r1, #1
   14fca:	f007 fb1d 	bl	1c608 <log_0>
		return -EFAULT;
   14fce:	f06f 040d 	mvn.w	r4, #13
   14fd2:	e7e5      	b.n	14fa0 <lte_lc_system_mode_set+0x28>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   14fd4:	2300      	movs	r3, #0
   14fd6:	a801      	add	r0, sp, #4
   14fd8:	461a      	mov	r2, r3
   14fda:	4619      	mov	r1, r3
   14fdc:	f7ff f920 	bl	14220 <at_cmd_write>
	if (err) {
   14fe0:	4604      	mov	r4, r0
   14fe2:	b150      	cbz	r0, 14ffa <lte_lc_system_mode_set+0x82>
   14fe4:	4a09      	ldr	r2, [pc, #36]	; (1500c <lte_lc_system_mode_set+0x94>)
   14fe6:	4b08      	ldr	r3, [pc, #32]	; (15008 <lte_lc_system_mode_set+0x90>)
		LOG_ERR("Could not send AT command, error: %d", err);
   14fe8:	4601      	mov	r1, r0
   14fea:	1ad2      	subs	r2, r2, r3
   14fec:	08d2      	lsrs	r2, r2, #3
   14fee:	0192      	lsls	r2, r2, #6
   14ff0:	480b      	ldr	r0, [pc, #44]	; (15020 <lte_lc_system_mode_set+0xa8>)
   14ff2:	f042 0201 	orr.w	r2, r2, #1
   14ff6:	f007 fb16 	bl	1c626 <log_1>
	sys_mode_current = mode;
   14ffa:	4b0a      	ldr	r3, [pc, #40]	; (15024 <lte_lc_system_mode_set+0xac>)
   14ffc:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   14ffe:	4b0a      	ldr	r3, [pc, #40]	; (15028 <lte_lc_system_mode_set+0xb0>)
   15000:	701d      	strb	r5, [r3, #0]
	return err;
   15002:	e7cd      	b.n	14fa0 <lte_lc_system_mode_set+0x28>
	switch (mode) {
   15004:	4604      	mov	r4, r0
   15006:	e7cb      	b.n	14fa0 <lte_lc_system_mode_set+0x28>
   15008:	00020e58 	.word	0x00020e58
   1500c:	00020ea0 	.word	0x00020ea0
   15010:	00022e67 	.word	0x00022e67
   15014:	0002112c 	.word	0x0002112c
   15018:	00022e85 	.word	0x00022e85
   1501c:	00022e98 	.word	0x00022e98
   15020:	00022ec0 	.word	0x00022ec0
   15024:	2001bf73 	.word	0x2001bf73
   15028:	20014627 	.word	0x20014627

0001502c <w_lte_lc_connect>:
{
   1502c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!is_initialized) {
   15030:	4b23      	ldr	r3, [pc, #140]	; (150c0 <w_lte_lc_connect+0x94>)
   15032:	4c24      	ldr	r4, [pc, #144]	; (150c4 <w_lte_lc_connect+0x98>)
   15034:	4924      	ldr	r1, [pc, #144]	; (150c8 <w_lte_lc_connect+0x9c>)
   15036:	781b      	ldrb	r3, [r3, #0]
   15038:	1a64      	subs	r4, r4, r1
{
   1503a:	4605      	mov	r5, r0
   1503c:	08e4      	lsrs	r4, r4, #3
	if (!is_initialized) {
   1503e:	b94b      	cbnz	r3, 15054 <w_lte_lc_connect+0x28>
		LOG_ERR("The LTE link controller is not initialized");
   15040:	01a1      	lsls	r1, r4, #6
   15042:	4822      	ldr	r0, [pc, #136]	; (150cc <w_lte_lc_connect+0xa0>)
   15044:	f041 0101 	orr.w	r1, r1, #1
   15048:	f007 fade 	bl	1c608 <log_0>
		return -EPERM;
   1504c:	f04f 30ff 	mov.w	r0, #4294967295
}
   15050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   15054:	2201      	movs	r2, #1
   15056:	2100      	movs	r1, #0
   15058:	481d      	ldr	r0, [pc, #116]	; (150d0 <w_lte_lc_connect+0xa4>)
   1505a:	f00b f819 	bl	20090 <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(sys_mode_target);
   1505e:	4e1d      	ldr	r6, [pc, #116]	; (150d4 <w_lte_lc_connect+0xa8>)
	return z_impl_k_sem_take(sem, timeout);
   15060:	4f1b      	ldr	r7, [pc, #108]	; (150d0 <w_lte_lc_connect+0xa4>)
			LOG_INF("Network connection attempt timed out");
   15062:	f8df 8078 	ldr.w	r8, [pc, #120]	; 150dc <w_lte_lc_connect+0xb0>
		err = lte_lc_system_mode_set(sys_mode_target);
   15066:	7830      	ldrb	r0, [r6, #0]
   15068:	f7ff ff86 	bl	14f78 <lte_lc_system_mode_set>
		if (err) {
   1506c:	2800      	cmp	r0, #0
   1506e:	d1ef      	bne.n	15050 <w_lte_lc_connect+0x24>
		err = lte_lc_normal();
   15070:	f7ff ff26 	bl	14ec0 <lte_lc_normal>
		if (err || !blocking) {
   15074:	2800      	cmp	r0, #0
   15076:	d1eb      	bne.n	15050 <w_lte_lc_connect+0x24>
   15078:	2d00      	cmp	r5, #0
   1507a:	d0e9      	beq.n	15050 <w_lte_lc_connect+0x24>
   1507c:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   15080:	2300      	movs	r3, #0
   15082:	4638      	mov	r0, r7
   15084:	f005 fa54 	bl	1a530 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   15088:	f110 0f0b 	cmn.w	r0, #11
   1508c:	d1e0      	bne.n	15050 <w_lte_lc_connect+0x24>
			LOG_INF("Network connection attempt timed out");
   1508e:	ea4f 1984 	mov.w	r9, r4, lsl #6
   15092:	f049 0903 	orr.w	r9, r9, #3
   15096:	4649      	mov	r1, r9
   15098:	4640      	mov	r0, r8
   1509a:	f007 fab5 	bl	1c608 <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   1509e:	7833      	ldrb	r3, [r6, #0]
   150a0:	2b01      	cmp	r3, #1
   150a2:	d10a      	bne.n	150ba <w_lte_lc_connect+0x8e>
				sys_mode_target = sys_mode_fallback;
   150a4:	2302      	movs	r3, #2
   150a6:	7033      	strb	r3, [r6, #0]
				err = lte_lc_offline();
   150a8:	f7ff fefc 	bl	14ea4 <lte_lc_offline>
				if (err) {
   150ac:	2800      	cmp	r0, #0
   150ae:	d1cf      	bne.n	15050 <w_lte_lc_connect+0x24>
				LOG_INF("Using fallback network mode");
   150b0:	4649      	mov	r1, r9
   150b2:	4809      	ldr	r0, [pc, #36]	; (150d8 <w_lte_lc_connect+0xac>)
   150b4:	f007 faa8 	bl	1c608 <log_0>
	} while (retry);
   150b8:	e7d5      	b.n	15066 <w_lte_lc_connect+0x3a>
				err = -ETIMEDOUT;
   150ba:	f06f 0073 	mvn.w	r0, #115	; 0x73
   150be:	e7c7      	b.n	15050 <w_lte_lc_connect+0x24>
   150c0:	2001bf6c 	.word	0x2001bf6c
   150c4:	00020ea0 	.word	0x00020ea0
   150c8:	00020e58 	.word	0x00020e58
   150cc:	00022ee5 	.word	0x00022ee5
   150d0:	2001844c 	.word	0x2001844c
   150d4:	20014627 	.word	0x20014627
   150d8:	00022f35 	.word	0x00022f35
   150dc:	00022f10 	.word	0x00022f10

000150e0 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   150e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   150e4:	2400      	movs	r4, #0
{
   150e6:	b090      	sub	sp, #64	; 0x40
   150e8:	4605      	mov	r5, r0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   150ea:	221a      	movs	r2, #26
   150ec:	4621      	mov	r1, r4
   150ee:	a809      	add	r0, sp, #36	; 0x24
	struct at_param_list resp_list = {0};
   150f0:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   150f4:	9408      	str	r4, [sp, #32]
   150f6:	f00b faad 	bl	20654 <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   150fa:	230d      	movs	r3, #13
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   150fc:	e9cd 4404 	strd	r4, r4, [sp, #16]
   15100:	9406      	str	r4, [sp, #24]
   15102:	f88d 401c 	strb.w	r4, [sp, #28]
	size_t response_prefix_len = sizeof(response_prefix);
   15106:	9300      	str	r3, [sp, #0]

	if (mode == NULL) {
   15108:	2d00      	cmp	r5, #0
   1510a:	f000 80ad 	beq.w	15268 <lte_lc_system_mode_get+0x188>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   1510e:	4623      	mov	r3, r4
   15110:	221e      	movs	r2, #30
   15112:	4857      	ldr	r0, [pc, #348]	; (15270 <lte_lc_system_mode_get+0x190>)
   15114:	a908      	add	r1, sp, #32
   15116:	f7ff f883 	bl	14220 <at_cmd_write>
			   NULL);
	if (err) {
   1511a:	4604      	mov	r4, r0
   1511c:	b168      	cbz	r0, 1513a <lte_lc_system_mode_get+0x5a>
   1511e:	4955      	ldr	r1, [pc, #340]	; (15274 <lte_lc_system_mode_get+0x194>)
   15120:	4b55      	ldr	r3, [pc, #340]	; (15278 <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not send AT command");
   15122:	4856      	ldr	r0, [pc, #344]	; (1527c <lte_lc_system_mode_get+0x19c>)
   15124:	1ac9      	subs	r1, r1, r3
   15126:	08c9      	lsrs	r1, r1, #3
   15128:	0189      	lsls	r1, r1, #6
   1512a:	f041 0101 	orr.w	r1, r1, #1
   1512e:	f007 fa6b 	bl	1c608 <log_0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   15132:	4620      	mov	r0, r4
   15134:	b010      	add	sp, #64	; 0x40
   15136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   1513a:	2105      	movs	r1, #5
   1513c:	a802      	add	r0, sp, #8
   1513e:	f009 f92b 	bl	1e398 <at_params_list_init>
	if (err) {
   15142:	4604      	mov	r4, r0
   15144:	b158      	cbz	r0, 1515e <lte_lc_system_mode_get+0x7e>
   15146:	4b4c      	ldr	r3, [pc, #304]	; (15278 <lte_lc_system_mode_get+0x198>)
   15148:	4a4a      	ldr	r2, [pc, #296]	; (15274 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could init AT params list, error: %d", err);
   1514a:	4601      	mov	r1, r0
   1514c:	1ad2      	subs	r2, r2, r3
   1514e:	08d2      	lsrs	r2, r2, #3
   15150:	0192      	lsls	r2, r2, #6
   15152:	484b      	ldr	r0, [pc, #300]	; (15280 <lte_lc_system_mode_get+0x1a0>)
   15154:	f042 0201 	orr.w	r2, r2, #1
   15158:	f007 fa65 	bl	1c626 <log_1>
		return err;
   1515c:	e7e9      	b.n	15132 <lte_lc_system_mode_get+0x52>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   1515e:	4601      	mov	r1, r0
   15160:	2305      	movs	r3, #5
   15162:	aa02      	add	r2, sp, #8
   15164:	a808      	add	r0, sp, #32
   15166:	f7ff fd77 	bl	14c58 <at_parser_max_params_from_str>
	if (err) {
   1516a:	4604      	mov	r4, r0
   1516c:	b158      	cbz	r0, 15186 <lte_lc_system_mode_get+0xa6>
   1516e:	4a41      	ldr	r2, [pc, #260]	; (15274 <lte_lc_system_mode_get+0x194>)
   15170:	4b41      	ldr	r3, [pc, #260]	; (15278 <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not parse AT response, error: %d", err);
   15172:	4601      	mov	r1, r0
   15174:	1ad2      	subs	r2, r2, r3
   15176:	08d2      	lsrs	r2, r2, #3
   15178:	0192      	lsls	r2, r2, #6
   1517a:	4842      	ldr	r0, [pc, #264]	; (15284 <lte_lc_system_mode_get+0x1a4>)
   1517c:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   15180:	f007 fa51 	bl	1c626 <log_1>
			goto clean_exit;
   15184:	e013      	b.n	151ae <lte_lc_system_mode_get+0xce>
	err = at_params_string_get(&resp_list,
   15186:	4601      	mov	r1, r0
   15188:	466b      	mov	r3, sp
   1518a:	aa04      	add	r2, sp, #16
   1518c:	a802      	add	r0, sp, #8
   1518e:	f009 f9d5 	bl	1e53c <at_params_string_get>
	if (err) {
   15192:	4606      	mov	r6, r0
   15194:	b178      	cbz	r0, 151b6 <lte_lc_system_mode_get+0xd6>
   15196:	4b38      	ldr	r3, [pc, #224]	; (15278 <lte_lc_system_mode_get+0x198>)
   15198:	4a36      	ldr	r2, [pc, #216]	; (15274 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   1519a:	4601      	mov	r1, r0
   1519c:	1ad2      	subs	r2, r2, r3
   1519e:	08d2      	lsrs	r2, r2, #3
   151a0:	0192      	lsls	r2, r2, #6
   151a2:	4839      	ldr	r0, [pc, #228]	; (15288 <lte_lc_system_mode_get+0x1a8>)
   151a4:	f042 0201 	orr.w	r2, r2, #1
   151a8:	f007 fa3d 	bl	1c626 <log_1>
		goto clean_exit;
   151ac:	4634      	mov	r4, r6
	at_params_list_free(&resp_list);
   151ae:	a802      	add	r0, sp, #8
   151b0:	f009 f923 	bl	1e3fa <at_params_list_free>
	return err;
   151b4:	e7bd      	b.n	15132 <lte_lc_system_mode_get+0x52>
	if (!response_is_valid(response_prefix, response_prefix_len,
   151b6:	4a35      	ldr	r2, [pc, #212]	; (1528c <lte_lc_system_mode_get+0x1ac>)
   151b8:	9900      	ldr	r1, [sp, #0]
   151ba:	a804      	add	r0, sp, #16
   151bc:	f009 f9f6 	bl	1e5ac <response_is_valid>
   151c0:	b960      	cbnz	r0, 151dc <lte_lc_system_mode_get+0xfc>
   151c2:	4b2d      	ldr	r3, [pc, #180]	; (15278 <lte_lc_system_mode_get+0x198>)
   151c4:	492b      	ldr	r1, [pc, #172]	; (15274 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid XSYSTEMMODE response");
   151c6:	4832      	ldr	r0, [pc, #200]	; (15290 <lte_lc_system_mode_get+0x1b0>)
   151c8:	1ac9      	subs	r1, r1, r3
   151ca:	08c9      	lsrs	r1, r1, #3
   151cc:	0189      	lsls	r1, r1, #6
   151ce:	f041 0101 	orr.w	r1, r1, #1
   151d2:	f007 fa19 	bl	1c608 <log_0>
		err = -EIO;
   151d6:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   151da:	e7e8      	b.n	151ae <lte_lc_system_mode_get+0xce>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT - 1; i++) {
   151dc:	2701      	movs	r7, #1
		bitmask = param ? bitmask | BIT(i) : bitmask;
   151de:	46b8      	mov	r8, r7
		err = at_params_int_get(&resp_list, i, &param);
   151e0:	4639      	mov	r1, r7
   151e2:	aa01      	add	r2, sp, #4
   151e4:	a802      	add	r0, sp, #8
   151e6:	f009 f996 	bl	1e516 <at_params_int_get>
		if (err) {
   151ea:	4604      	mov	r4, r0
   151ec:	b148      	cbz	r0, 15202 <lte_lc_system_mode_get+0x122>
   151ee:	4a21      	ldr	r2, [pc, #132]	; (15274 <lte_lc_system_mode_get+0x194>)
   151f0:	4b21      	ldr	r3, [pc, #132]	; (15278 <lte_lc_system_mode_get+0x198>)
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   151f2:	4601      	mov	r1, r0
   151f4:	1ad2      	subs	r2, r2, r3
   151f6:	08d2      	lsrs	r2, r2, #3
   151f8:	0192      	lsls	r2, r2, #6
   151fa:	4826      	ldr	r0, [pc, #152]	; (15294 <lte_lc_system_mode_get+0x1b4>)
   151fc:	f042 0201 	orr.w	r2, r2, #1
   15200:	e7be      	b.n	15180 <lte_lc_system_mode_get+0xa0>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   15202:	9b01      	ldr	r3, [sp, #4]
   15204:	b113      	cbz	r3, 1520c <lte_lc_system_mode_get+0x12c>
   15206:	fa08 f307 	lsl.w	r3, r8, r7
   1520a:	431e      	orrs	r6, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT - 1; i++) {
   1520c:	3701      	adds	r7, #1
   1520e:	2f04      	cmp	r7, #4
   15210:	d1e6      	bne.n	151e0 <lte_lc_system_mode_get+0x100>
	switch (bitmask) {
   15212:	2e0c      	cmp	r6, #12
   15214:	d81b      	bhi.n	1524e <lte_lc_system_mode_get+0x16e>
   15216:	e8df f006 	tbb	[pc, r6]
   1521a:	1a07      	.short	0x1a07
   1521c:	1a121a10 	.word	0x1a121a10
   15220:	1a141a1a 	.word	0x1a141a1a
   15224:	1a16      	.short	0x1a16
   15226:	18          	.byte	0x18
   15227:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   15228:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   1522a:	702b      	strb	r3, [r5, #0]
	if (sys_mode_current != *mode) {
   1522c:	4b1a      	ldr	r3, [pc, #104]	; (15298 <lte_lc_system_mode_get+0x1b8>)
   1522e:	782a      	ldrb	r2, [r5, #0]
   15230:	7819      	ldrb	r1, [r3, #0]
   15232:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   15234:	bf18      	it	ne
   15236:	701a      	strbne	r2, [r3, #0]
   15238:	e7b9      	b.n	151ae <lte_lc_system_mode_get+0xce>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   1523a:	2301      	movs	r3, #1
   1523c:	e7f5      	b.n	1522a <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   1523e:	2302      	movs	r3, #2
   15240:	e7f3      	b.n	1522a <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   15242:	2303      	movs	r3, #3
   15244:	e7f1      	b.n	1522a <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   15246:	2304      	movs	r3, #4
   15248:	e7ef      	b.n	1522a <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   1524a:	2305      	movs	r3, #5
   1524c:	e7ed      	b.n	1522a <lte_lc_system_mode_get+0x14a>
   1524e:	4b0a      	ldr	r3, [pc, #40]	; (15278 <lte_lc_system_mode_get+0x198>)
   15250:	4908      	ldr	r1, [pc, #32]	; (15274 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid system mode, assuming parsing error");
   15252:	4812      	ldr	r0, [pc, #72]	; (1529c <lte_lc_system_mode_get+0x1bc>)
   15254:	1ac9      	subs	r1, r1, r3
   15256:	08c9      	lsrs	r1, r1, #3
   15258:	0189      	lsls	r1, r1, #6
   1525a:	f041 0101 	orr.w	r1, r1, #1
   1525e:	f007 f9d3 	bl	1c608 <log_0>
		err = -EFAULT;
   15262:	f06f 040d 	mvn.w	r4, #13
		goto clean_exit;
   15266:	e7a2      	b.n	151ae <lte_lc_system_mode_get+0xce>
		return -EINVAL;
   15268:	f06f 0415 	mvn.w	r4, #21
   1526c:	e761      	b.n	15132 <lte_lc_system_mode_get+0x52>
   1526e:	bf00      	nop
   15270:	00022f51 	.word	0x00022f51
   15274:	00020ea0 	.word	0x00020ea0
   15278:	00020e58 	.word	0x00020e58
   1527c:	00022f61 	.word	0x00022f61
   15280:	00022f7b 	.word	0x00022f7b
   15284:	00022fa0 	.word	0x00022fa0
   15288:	00022de2 	.word	0x00022de2
   1528c:	00022fc7 	.word	0x00022fc7
   15290:	00022fd4 	.word	0x00022fd4
   15294:	00022ff1 	.word	0x00022ff1
   15298:	2001bf73 	.word	0x2001bf73
   1529c:	00023019 	.word	0x00023019

000152a0 <w_lte_lc_init>:
{
   152a0:	b570      	push	{r4, r5, r6, lr}
	if (is_initialized) {
   152a2:	4e3c      	ldr	r6, [pc, #240]	; (15394 <w_lte_lc_init+0xf4>)
{
   152a4:	b08e      	sub	sp, #56	; 0x38
	if (is_initialized) {
   152a6:	7831      	ldrb	r1, [r6, #0]
   152a8:	2900      	cmp	r1, #0
   152aa:	d16c      	bne.n	15386 <w_lte_lc_init+0xe6>
	err = lte_lc_system_mode_get(&sys_mode_current);
   152ac:	4d3a      	ldr	r5, [pc, #232]	; (15398 <w_lte_lc_init+0xf8>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   152ae:	2201      	movs	r2, #1
   152b0:	483a      	ldr	r0, [pc, #232]	; (1539c <w_lte_lc_init+0xfc>)
   152b2:	f00a feed 	bl	20090 <z_impl_k_sem_init>
   152b6:	4628      	mov	r0, r5
   152b8:	f7ff ff12 	bl	150e0 <lte_lc_system_mode_get>
	if (err) {
   152bc:	4604      	mov	r4, r0
   152be:	b168      	cbz	r0, 152dc <w_lte_lc_init+0x3c>
   152c0:	4a37      	ldr	r2, [pc, #220]	; (153a0 <w_lte_lc_init+0x100>)
   152c2:	4b38      	ldr	r3, [pc, #224]	; (153a4 <w_lte_lc_init+0x104>)
		LOG_ERR("Could not get current system mode, error: %d", err);
   152c4:	4601      	mov	r1, r0
   152c6:	1ad2      	subs	r2, r2, r3
   152c8:	08d2      	lsrs	r2, r2, #3
   152ca:	0192      	lsls	r2, r2, #6
   152cc:	4836      	ldr	r0, [pc, #216]	; (153a8 <w_lte_lc_init+0x108>)
   152ce:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Can't register AT handler, error: %d", err);
   152d2:	f007 f9a8 	bl	1c626 <log_1>
}
   152d6:	4620      	mov	r0, r4
   152d8:	b00e      	add	sp, #56	; 0x38
   152da:	bd70      	pop	{r4, r5, r6, pc}
	err = at_notif_register_handler(NULL, at_handler);
   152dc:	4933      	ldr	r1, [pc, #204]	; (153ac <w_lte_lc_init+0x10c>)
   152de:	f7ff f8a9 	bl	14434 <at_notif_register_handler>
	if (err) {
   152e2:	4604      	mov	r4, r0
   152e4:	b148      	cbz	r0, 152fa <w_lte_lc_init+0x5a>
   152e6:	4a2e      	ldr	r2, [pc, #184]	; (153a0 <w_lte_lc_init+0x100>)
   152e8:	4b2e      	ldr	r3, [pc, #184]	; (153a4 <w_lte_lc_init+0x104>)
		LOG_ERR("Can't register AT handler, error: %d", err);
   152ea:	4601      	mov	r1, r0
   152ec:	1ad2      	subs	r2, r2, r3
   152ee:	08d2      	lsrs	r2, r2, #3
   152f0:	0192      	lsls	r2, r2, #6
   152f2:	482f      	ldr	r0, [pc, #188]	; (153b0 <w_lte_lc_init+0x110>)
   152f4:	f042 0201 	orr.w	r2, r2, #1
   152f8:	e7eb      	b.n	152d2 <w_lte_lc_init+0x32>
	if (sys_mode_current != sys_mode_target) {
   152fa:	4b2e      	ldr	r3, [pc, #184]	; (153b4 <w_lte_lc_init+0x114>)
   152fc:	7818      	ldrb	r0, [r3, #0]
   152fe:	782b      	ldrb	r3, [r5, #0]
   15300:	4283      	cmp	r3, r0
   15302:	d00d      	beq.n	15320 <w_lte_lc_init+0x80>
		err = lte_lc_system_mode_set(sys_mode_target);
   15304:	f7ff fe38 	bl	14f78 <lte_lc_system_mode_set>
		if (err) {
   15308:	4604      	mov	r4, r0
   1530a:	b148      	cbz	r0, 15320 <w_lte_lc_init+0x80>
   1530c:	4a24      	ldr	r2, [pc, #144]	; (153a0 <w_lte_lc_init+0x100>)
   1530e:	4b25      	ldr	r3, [pc, #148]	; (153a4 <w_lte_lc_init+0x104>)
			LOG_ERR("Could not set system mode, error: %d", err);
   15310:	4601      	mov	r1, r0
   15312:	1ad2      	subs	r2, r2, r3
   15314:	08d2      	lsrs	r2, r2, #3
   15316:	0192      	lsls	r2, r2, #6
   15318:	4827      	ldr	r0, [pc, #156]	; (153b8 <w_lte_lc_init+0x118>)
   1531a:	f042 0201 	orr.w	r2, r2, #1
   1531e:	e7d8      	b.n	152d2 <w_lte_lc_init+0x32>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   15320:	2300      	movs	r3, #0
   15322:	4826      	ldr	r0, [pc, #152]	; (153bc <w_lte_lc_init+0x11c>)
   15324:	461a      	mov	r2, r3
   15326:	4619      	mov	r1, r3
   15328:	f7fe ff7a 	bl	14220 <at_cmd_write>
   1532c:	4604      	mov	r4, r0
   1532e:	bb68      	cbnz	r0, 1538c <w_lte_lc_init+0xec>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   15330:	4602      	mov	r2, r0
   15332:	4603      	mov	r3, r0
   15334:	4601      	mov	r1, r0
   15336:	4822      	ldr	r0, [pc, #136]	; (153c0 <w_lte_lc_init+0x120>)
   15338:	f7fe ff72 	bl	14220 <at_cmd_write>
	if (err) {
   1533c:	4602      	mov	r2, r0
   1533e:	b1f8      	cbz	r0, 15380 <w_lte_lc_init+0xe0>
   15340:	4b18      	ldr	r3, [pc, #96]	; (153a4 <w_lte_lc_init+0x104>)
   15342:	4d17      	ldr	r5, [pc, #92]	; (153a0 <w_lte_lc_init+0x100>)
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   15344:	491e      	ldr	r1, [pc, #120]	; (153c0 <w_lte_lc_init+0x120>)
   15346:	1aed      	subs	r5, r5, r3
   15348:	08ed      	lsrs	r5, r5, #3
   1534a:	01ad      	lsls	r5, r5, #6
   1534c:	f045 0502 	orr.w	r5, r5, #2
   15350:	462b      	mov	r3, r5
   15352:	481c      	ldr	r0, [pc, #112]	; (153c4 <w_lte_lc_init+0x124>)
   15354:	f007 f97e 	bl	1c654 <log_2>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   15358:	462a      	mov	r2, r5
   1535a:	4919      	ldr	r1, [pc, #100]	; (153c0 <w_lte_lc_init+0x120>)
   1535c:	481a      	ldr	r0, [pc, #104]	; (153c8 <w_lte_lc_init+0x128>)
   1535e:	f007 f962 	bl	1c626 <log_1>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   15362:	4623      	mov	r3, r4
   15364:	2232      	movs	r2, #50	; 0x32
   15366:	4819      	ldr	r0, [pc, #100]	; (153cc <w_lte_lc_init+0x12c>)
   15368:	a901      	add	r1, sp, #4
   1536a:	f7fe ff59 	bl	14220 <at_cmd_write>
		if (err == 0) {
   1536e:	b938      	cbnz	r0, 15380 <w_lte_lc_init+0xe0>
			LOG_WRN("Current modem firmware version: %s",
   15370:	a801      	add	r0, sp, #4
   15372:	f7fa fe8f 	bl	10094 <log_strdup>
   15376:	462a      	mov	r2, r5
   15378:	4601      	mov	r1, r0
   1537a:	4815      	ldr	r0, [pc, #84]	; (153d0 <w_lte_lc_init+0x130>)
   1537c:	f007 f953 	bl	1c626 <log_1>
	is_initialized = true;
   15380:	2301      	movs	r3, #1
   15382:	7033      	strb	r3, [r6, #0]
	return 0;
   15384:	e7a7      	b.n	152d6 <w_lte_lc_init+0x36>
		return -EALREADY;
   15386:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1538a:	e7a4      	b.n	152d6 <w_lte_lc_init+0x36>
		return -EIO;
   1538c:	f06f 0404 	mvn.w	r4, #4
   15390:	e7a1      	b.n	152d6 <w_lte_lc_init+0x36>
   15392:	bf00      	nop
   15394:	2001bf6c 	.word	0x2001bf6c
   15398:	2001bf73 	.word	0x2001bf73
   1539c:	2001844c 	.word	0x2001844c
   153a0:	00020ea0 	.word	0x00020ea0
   153a4:	00020e58 	.word	0x00020e58
   153a8:	00023045 	.word	0x00023045
   153ac:	0000d091 	.word	0x0000d091
   153b0:	00023072 	.word	0x00023072
   153b4:	20014627 	.word	0x20014627
   153b8:	00023097 	.word	0x00023097
   153bc:	00023242 	.word	0x00023242
   153c0:	0002324d 	.word	0x0002324d
   153c4:	000230bc 	.word	0x000230bc
   153c8:	000230ee 	.word	0x000230ee
   153cc:	00023119 	.word	0x00023119
   153d0:	00023121 	.word	0x00023121

000153d4 <lte_lc_edrx_req>:
{
   153d4:	b570      	push	{r4, r5, r6, lr}
	if (sys_mode_current == LTE_LC_SYSTEM_MODE_NONE) {
   153d6:	4e46      	ldr	r6, [pc, #280]	; (154f0 <lte_lc_edrx_req+0x11c>)
{
   153d8:	4605      	mov	r5, r0
	if (sys_mode_current == LTE_LC_SYSTEM_MODE_NONE) {
   153da:	7833      	ldrb	r3, [r6, #0]
{
   153dc:	b08a      	sub	sp, #40	; 0x28
	if (sys_mode_current == LTE_LC_SYSTEM_MODE_NONE) {
   153de:	2b00      	cmp	r3, #0
   153e0:	d045      	beq.n	1546e <lte_lc_edrx_req+0x9a>
	switch (sys_mode_current) {
   153e2:	7831      	ldrb	r1, [r6, #0]
   153e4:	1e4b      	subs	r3, r1, #1
   153e6:	2b04      	cmp	r3, #4
   153e8:	d84a      	bhi.n	15480 <lte_lc_edrx_req+0xac>
   153ea:	e8df f003 	tbb	[pc, r3]
   153ee:	0356      	.short	0x0356
   153f0:	5649      	.short	0x5649
   153f2:	03          	.byte	0x03
   153f3:	00          	.byte	0x00
   153f4:	2605      	movs	r6, #5
	if (enable) {
   153f6:	2d00      	cmp	r5, #0
   153f8:	d058      	beq.n	154ac <lte_lc_edrx_req+0xd8>
		if (strlen(edrx_param) == 4) {
   153fa:	4c3e      	ldr	r4, [pc, #248]	; (154f4 <lte_lc_edrx_req+0x120>)
   153fc:	4620      	mov	r0, r4
   153fe:	f7f7 fd99 	bl	cf34 <strlen>
   15402:	2804      	cmp	r0, #4
   15404:	d14b      	bne.n	1549e <lte_lc_edrx_req+0xca>
			snprintf(req, sizeof(req),
   15406:	4633      	mov	r3, r6
   15408:	2119      	movs	r1, #25
   1540a:	4a3b      	ldr	r2, [pc, #236]	; (154f8 <lte_lc_edrx_req+0x124>)
   1540c:	9400      	str	r4, [sp, #0]
   1540e:	a803      	add	r0, sp, #12
   15410:	f005 fd88 	bl	1af24 <sniprintf>
		err = at_cmd_write(req, NULL, 0, NULL);
   15414:	2300      	movs	r3, #0
   15416:	a803      	add	r0, sp, #12
   15418:	461a      	mov	r2, r3
   1541a:	4619      	mov	r1, r3
   1541c:	f7fe ff00 	bl	14220 <at_cmd_write>
	if (err) {
   15420:	4604      	mov	r4, r0
   15422:	2800      	cmp	r0, #0
   15424:	d14b      	bne.n	154be <lte_lc_edrx_req+0xea>
		if (strlen(ptw_param) == 4) {
   15426:	4c35      	ldr	r4, [pc, #212]	; (154fc <lte_lc_edrx_req+0x128>)
   15428:	4620      	mov	r0, r4
   1542a:	f7f7 fd83 	bl	cf34 <strlen>
   1542e:	2804      	cmp	r0, #4
   15430:	d156      	bne.n	154e0 <lte_lc_edrx_req+0x10c>
			snprintf(req, sizeof(req),
   15432:	4633      	mov	r3, r6
   15434:	2119      	movs	r1, #25
   15436:	4a32      	ldr	r2, [pc, #200]	; (15500 <lte_lc_edrx_req+0x12c>)
   15438:	9400      	str	r4, [sp, #0]
   1543a:	a803      	add	r0, sp, #12
   1543c:	f005 fd72 	bl	1af24 <sniprintf>
		err = at_cmd_write(req, NULL, 0, NULL);
   15440:	2300      	movs	r3, #0
   15442:	a803      	add	r0, sp, #12
   15444:	461a      	mov	r2, r3
   15446:	4619      	mov	r1, r3
   15448:	f7fe feea 	bl	14220 <at_cmd_write>
		if (err) {
   1544c:	4604      	mov	r4, r0
   1544e:	b1a0      	cbz	r0, 1547a <lte_lc_edrx_req+0xa6>
   15450:	4b2c      	ldr	r3, [pc, #176]	; (15504 <lte_lc_edrx_req+0x130>)
   15452:	4d2d      	ldr	r5, [pc, #180]	; (15508 <lte_lc_edrx_req+0x134>)
			LOG_ERR("Failed to request PTW (%s), error: %d",
   15454:	a803      	add	r0, sp, #12
   15456:	1aed      	subs	r5, r5, r3
   15458:	f7fa fe1c 	bl	10094 <log_strdup>
   1545c:	08ed      	lsrs	r5, r5, #3
   1545e:	01ad      	lsls	r5, r5, #6
   15460:	f045 0501 	orr.w	r5, r5, #1
   15464:	4601      	mov	r1, r0
   15466:	462b      	mov	r3, r5
   15468:	4622      	mov	r2, r4
   1546a:	4828      	ldr	r0, [pc, #160]	; (1550c <lte_lc_edrx_req+0x138>)
   1546c:	e035      	b.n	154da <lte_lc_edrx_req+0x106>
		err = lte_lc_system_mode_get(&sys_mode_current);
   1546e:	4630      	mov	r0, r6
   15470:	f7ff fe36 	bl	150e0 <lte_lc_system_mode_get>
		if (err) {
   15474:	4604      	mov	r4, r0
   15476:	2800      	cmp	r0, #0
   15478:	d0b3      	beq.n	153e2 <lte_lc_edrx_req+0xe>
}
   1547a:	4620      	mov	r0, r4
   1547c:	b00a      	add	sp, #40	; 0x28
   1547e:	bd70      	pop	{r4, r5, r6, pc}
   15480:	4b20      	ldr	r3, [pc, #128]	; (15504 <lte_lc_edrx_req+0x130>)
   15482:	4a21      	ldr	r2, [pc, #132]	; (15508 <lte_lc_edrx_req+0x134>)
		LOG_ERR("Cannot request eDRX for this system mode (%d)",
   15484:	4822      	ldr	r0, [pc, #136]	; (15510 <lte_lc_edrx_req+0x13c>)
   15486:	1ad2      	subs	r2, r2, r3
   15488:	08d2      	lsrs	r2, r2, #3
   1548a:	0192      	lsls	r2, r2, #6
   1548c:	f042 0201 	orr.w	r2, r2, #1
   15490:	f007 f8c9 	bl	1c626 <log_1>
		return -EOPNOTSUPP;
   15494:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   15498:	e7ef      	b.n	1547a <lte_lc_edrx_req+0xa6>
		actt = AT_CEDRXS_ACTT_WB;
   1549a:	2604      	movs	r6, #4
   1549c:	e7ab      	b.n	153f6 <lte_lc_edrx_req+0x22>
			snprintf(req, sizeof(req),
   1549e:	4633      	mov	r3, r6
   154a0:	2119      	movs	r1, #25
   154a2:	4a1c      	ldr	r2, [pc, #112]	; (15514 <lte_lc_edrx_req+0x140>)
   154a4:	a803      	add	r0, sp, #12
   154a6:	f005 fd3d 	bl	1af24 <sniprintf>
   154aa:	e7b3      	b.n	15414 <lte_lc_edrx_req+0x40>
		err = at_cmd_write(edrx_disable, NULL, 0, NULL);
   154ac:	462b      	mov	r3, r5
   154ae:	462a      	mov	r2, r5
   154b0:	4629      	mov	r1, r5
   154b2:	4819      	ldr	r0, [pc, #100]	; (15518 <lte_lc_edrx_req+0x144>)
   154b4:	f7fe feb4 	bl	14220 <at_cmd_write>
	if (err) {
   154b8:	4604      	mov	r4, r0
   154ba:	2800      	cmp	r0, #0
   154bc:	d0dd      	beq.n	1547a <lte_lc_edrx_req+0xa6>
   154be:	4a11      	ldr	r2, [pc, #68]	; (15504 <lte_lc_edrx_req+0x130>)
   154c0:	4b11      	ldr	r3, [pc, #68]	; (15508 <lte_lc_edrx_req+0x134>)
		LOG_ERR("Failed to %s eDRX, error: %d",
   154c2:	4816      	ldr	r0, [pc, #88]	; (1551c <lte_lc_edrx_req+0x148>)
   154c4:	1a9b      	subs	r3, r3, r2
   154c6:	4622      	mov	r2, r4
   154c8:	4915      	ldr	r1, [pc, #84]	; (15520 <lte_lc_edrx_req+0x14c>)
   154ca:	08db      	lsrs	r3, r3, #3
   154cc:	2d00      	cmp	r5, #0
   154ce:	bf08      	it	eq
   154d0:	4601      	moveq	r1, r0
   154d2:	019b      	lsls	r3, r3, #6
   154d4:	4813      	ldr	r0, [pc, #76]	; (15524 <lte_lc_edrx_req+0x150>)
   154d6:	f043 0301 	orr.w	r3, r3, #1
			LOG_ERR("Failed to request PTW (%s), error: %d",
   154da:	f007 f8bb 	bl	1c654 <log_2>
			return err;
   154de:	e7cc      	b.n	1547a <lte_lc_edrx_req+0xa6>
			snprintf(req, sizeof(req),
   154e0:	4633      	mov	r3, r6
   154e2:	2119      	movs	r1, #25
   154e4:	4a10      	ldr	r2, [pc, #64]	; (15528 <lte_lc_edrx_req+0x154>)
   154e6:	a803      	add	r0, sp, #12
   154e8:	f005 fd1c 	bl	1af24 <sniprintf>
   154ec:	e7a8      	b.n	15440 <lte_lc_edrx_req+0x6c>
   154ee:	bf00      	nop
   154f0:	2001bf73 	.word	0x2001bf73
   154f4:	20014610 	.word	0x20014610
   154f8:	00023172 	.word	0x00023172
   154fc:	2001bf6e 	.word	0x2001bf6e
   15500:	000231c1 	.word	0x000231c1
   15504:	00020e58 	.word	0x00020e58
   15508:	00020ea0 	.word	0x00020ea0
   1550c:	000231de 	.word	0x000231de
   15510:	00023144 	.word	0x00023144
   15514:	00023186 	.word	0x00023186
   15518:	00023258 	.word	0x00023258
   1551c:	0002319c 	.word	0x0002319c
   15520:	00023195 	.word	0x00023195
   15524:	000231a4 	.word	0x000231a4
   15528:	000231d2 	.word	0x000231d2

0001552c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1552c:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1552e:	f7fa ff29 	bl	10384 <z_impl_log_panic>
   15532:	4b06      	ldr	r3, [pc, #24]	; (1554c <k_sys_fatal_error_handler+0x20>)
   15534:	4906      	ldr	r1, [pc, #24]	; (15550 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   15536:	4807      	ldr	r0, [pc, #28]	; (15554 <k_sys_fatal_error_handler+0x28>)
   15538:	1ac9      	subs	r1, r1, r3
   1553a:	08c9      	lsrs	r1, r1, #3
   1553c:	0189      	lsls	r1, r1, #6
   1553e:	f041 0101 	orr.w	r1, r1, #1
   15542:	f007 f861 	bl	1c608 <log_0>
	sys_arch_reboot(0);
   15546:	2000      	movs	r0, #0
   15548:	f7fc fa30 	bl	119ac <sys_arch_reboot>

	CODE_UNREACHABLE;
   1554c:	00020e58 	.word	0x00020e58
   15550:	00020e90 	.word	0x00020e90
   15554:	00023282 	.word	0x00023282

00015558 <date_time_notify_event.constprop.0>:

static void date_time_notify_event(const struct date_time_evt *evt)
{
	__ASSERT(evt != NULL, "Library event not found");

	if (app_evt_handler != NULL) {
   15558:	4b02      	ldr	r3, [pc, #8]	; (15564 <date_time_notify_event.constprop.0+0xc>)
   1555a:	681b      	ldr	r3, [r3, #0]
   1555c:	b10b      	cbz	r3, 15562 <date_time_notify_event.constprop.0+0xa>
		app_evt_handler(evt);
   1555e:	4802      	ldr	r0, [pc, #8]	; (15568 <date_time_notify_event.constprop.0+0x10>)
   15560:	4718      	bx	r3
	}
}
   15562:	4770      	bx	lr
   15564:	20018474 	.word	0x20018474
   15568:	2001bf74 	.word	0x2001bf74

0001556c <new_date_time_get>:

	return 0;
}

static void new_date_time_get(void)
{
   1556c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (time_aux.last_date_time_update == 0 ||
   15570:	4e78      	ldr	r6, [pc, #480]	; (15754 <new_date_time_get+0x1e8>)
   15572:	4c79      	ldr	r4, [pc, #484]	; (15758 <new_date_time_get+0x1ec>)
   15574:	4637      	mov	r7, r6
   15576:	4b79      	ldr	r3, [pc, #484]	; (1575c <new_date_time_get+0x1f0>)
{
   15578:	b095      	sub	sp, #84	; 0x54
   1557a:	1ae4      	subs	r4, r4, r3
   1557c:	08e4      	lsrs	r4, r4, #3
	return z_impl_k_sem_take(sem, timeout);
   1557e:	f04f 33ff 	mov.w	r3, #4294967295
   15582:	f04f 32ff 	mov.w	r2, #4294967295
   15586:	4876      	ldr	r0, [pc, #472]	; (15760 <new_date_time_get+0x1f4>)
   15588:	f004 ffd2 	bl	1a530 <z_impl_k_sem_take>
	if (time_aux.last_date_time_update == 0 ||
   1558c:	68b3      	ldr	r3, [r6, #8]
   1558e:	2b00      	cmp	r3, #0
   15590:	f040 808c 	bne.w	156ac <new_date_time_get+0x140>
{
   15594:	f04f 0900 	mov.w	r9, #0
   15598:	4d72      	ldr	r5, [pc, #456]	; (15764 <new_date_time_get+0x1f8>)
		hints.ai_family = AF_INET;
   1559a:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 1578c <new_date_time_get+0x220>
	err = sntp_query(&sntp_ctx, timeout, time);
   1559e:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 15784 <new_date_time_get+0x218>
	hints.ai_socktype = SOCK_DGRAM;
   155a2:	2302      	movs	r3, #2
   155a4:	2201      	movs	r2, #1
   155a6:	e9c8 2302 	strd	r2, r3, [r8, #8]
	hints.ai_protocol = 0;
   155aa:	2300      	movs	r3, #0
   155ac:	f8c8 3010 	str.w	r3, [r8, #16]
	if (server->addr == NULL) {
   155b0:	686b      	ldr	r3, [r5, #4]
   155b2:	2b00      	cmp	r3, #0
   155b4:	f040 8090 	bne.w	156d8 <new_date_time_get+0x16c>
	return zsock_getaddrinfo(host, service, hints, res);
   155b8:	496b      	ldr	r1, [pc, #428]	; (15768 <new_date_time_get+0x1fc>)
   155ba:	4642      	mov	r2, r8
   155bc:	6828      	ldr	r0, [r5, #0]
   155be:	1d2b      	adds	r3, r5, #4
   155c0:	f007 fb3a 	bl	1cc38 <zsock_getaddrinfo>
		if (err) {
   155c4:	4601      	mov	r1, r0
   155c6:	2800      	cmp	r0, #0
   155c8:	f000 8086 	beq.w	156d8 <new_date_time_get+0x16c>
			LOG_WRN("getaddrinfo, error: %d", err);
   155cc:	01a2      	lsls	r2, r4, #6
   155ce:	4867      	ldr	r0, [pc, #412]	; (1576c <new_date_time_get+0x200>)
   155d0:	f042 0202 	orr.w	r2, r2, #2
   155d4:	f007 f827 	bl	1c626 <log_1>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   155d8:	f109 0901 	add.w	r9, r9, #1
   155dc:	f1b9 0f05 	cmp.w	r9, #5
   155e0:	f105 0508 	add.w	r5, r5, #8
   155e4:	d1dd      	bne.n	155a2 <new_date_time_get+0x36>
	LOG_WRN("Not getting time from any NTP server");
   155e6:	01a1      	lsls	r1, r4, #6
   155e8:	4861      	ldr	r0, [pc, #388]	; (15770 <new_date_time_get+0x204>)
   155ea:	f041 0102 	orr.w	r1, r1, #2
   155ee:	f007 f80b 	bl	1c608 <log_0>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   155f2:	2300      	movs	r3, #0
   155f4:	2221      	movs	r2, #33	; 0x21
   155f6:	485f      	ldr	r0, [pc, #380]	; (15774 <new_date_time_get+0x208>)
   155f8:	a902      	add	r1, sp, #8
   155fa:	f7fe fe11 	bl	14220 <at_cmd_write>
	if (err) {
   155fe:	2800      	cmp	r0, #0
   15600:	f040 80a5 	bne.w	1574e <new_date_time_get+0x1e2>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   15604:	2520      	movs	r5, #32
   15606:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   1560a:	f244 0109 	movw	r1, #16393	; 0x4009
			buf[i] = ' ';
   1560e:	4628      	mov	r0, r5
   15610:	aa02      	add	r2, sp, #8
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   15612:	f812 3b01 	ldrb.w	r3, [r2], #1
   15616:	3b2c      	subs	r3, #44	; 0x2c
   15618:	b2db      	uxtb	r3, r3
   1561a:	2b0e      	cmp	r3, #14
   1561c:	d805      	bhi.n	1562a <new_date_time_get+0xbe>
   1561e:	fa21 f303 	lsr.w	r3, r1, r3
   15622:	07db      	lsls	r3, r3, #31
			buf[i] = ' ';
   15624:	bf48      	it	mi
   15626:	f802 0c01 	strbmi.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   1562a:	3d01      	subs	r5, #1
   1562c:	d1f1      	bne.n	15612 <new_date_time_get+0xa6>
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   1562e:	220a      	movs	r2, #10
	char *ptr_index = &buf[8];
   15630:	a804      	add	r0, sp, #16
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   15632:	a901      	add	r1, sp, #4
	char *ptr_index = &buf[8];
   15634:	9001      	str	r0, [sp, #4]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   15636:	f005 fd6d 	bl	1b114 <strtol>
   1563a:	3064      	adds	r0, #100	; 0x64
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   1563c:	220a      	movs	r2, #10
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   1563e:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   15640:	a901      	add	r1, sp, #4
   15642:	9801      	ldr	r0, [sp, #4]
   15644:	f005 fd66 	bl	1b114 <strtol>
   15648:	3801      	subs	r0, #1
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   1564a:	220a      	movs	r2, #10
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   1564c:	900f      	str	r0, [sp, #60]	; 0x3c
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   1564e:	a901      	add	r1, sp, #4
   15650:	9801      	ldr	r0, [sp, #4]
   15652:	f005 fd5f 	bl	1b114 <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   15656:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   15658:	900e      	str	r0, [sp, #56]	; 0x38
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   1565a:	a901      	add	r1, sp, #4
   1565c:	9801      	ldr	r0, [sp, #4]
   1565e:	f005 fd59 	bl	1b114 <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   15662:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   15664:	900d      	str	r0, [sp, #52]	; 0x34
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   15666:	a901      	add	r1, sp, #4
   15668:	9801      	ldr	r0, [sp, #4]
   1566a:	f005 fd53 	bl	1b114 <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   1566e:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   15670:	900c      	str	r0, [sp, #48]	; 0x30
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   15672:	a901      	add	r1, sp, #4
   15674:	9801      	ldr	r0, [sp, #4]
   15676:	f005 fd4d 	bl	1b114 <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   1567a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   1567c:	900b      	str	r0, [sp, #44]	; 0x2c
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   1567e:	2b73      	cmp	r3, #115	; 0x73
   15680:	d065      	beq.n	1574e <new_date_time_get+0x1e2>
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(&date_time) * 1000;
   15682:	a80b      	add	r0, sp, #44	; 0x2c
   15684:	f7f9 fc7a 	bl	ef7c <timeutil_timegm64>
   15688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1568c:	460a      	mov	r2, r1
   1568e:	fba0 0103 	umull	r0, r1, r0, r3
   15692:	fb03 1102 	mla	r1, r3, r2, r1
   15696:	e9c7 0100 	strd	r0, r1, [r7]
	time_aux.last_date_time_update = k_uptime_get();
   1569a:	f008 ffa6 	bl	1e5ea <k_uptime_get>
		LOG_DBG("Fallback on cellular network time");

		err = time_modem_get();
		if (err == 0) {
			LOG_DBG("Time from cellular network obtained");
			initial_valid_time = true;
   1569e:	2201      	movs	r2, #1
   156a0:	4b35      	ldr	r3, [pc, #212]	; (15778 <new_date_time_get+0x20c>)
	time_aux.last_date_time_update = k_uptime_get();
   156a2:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   156a4:	701a      	strb	r2, [r3, #0]
			evt.type = DATE_TIME_OBTAINED_MODEM;
   156a6:	4b35      	ldr	r3, [pc, #212]	; (1577c <new_date_time_get+0x210>)
   156a8:	701d      	strb	r5, [r3, #0]
			date_time_notify_event(&evt);
   156aa:	e03e      	b.n	1572a <new_date_time_get+0x1be>
	if (time_aux.last_date_time_update == 0 ||
   156ac:	e9d6 2300 	ldrd	r2, r3, [r6]
   156b0:	4313      	orrs	r3, r2
   156b2:	f43f af6f 	beq.w	15594 <new_date_time_get+0x28>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   156b6:	f008 ff98 	bl	1e5ea <k_uptime_get>
   156ba:	68b3      	ldr	r3, [r6, #8]
   156bc:	f247 5230 	movw	r2, #30000	; 0x7530
   156c0:	1ac0      	subs	r0, r0, r3
   156c2:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
   156c6:	2300      	movs	r3, #0
   156c8:	4282      	cmp	r2, r0
   156ca:	418b      	sbcs	r3, r1
   156cc:	f6ff af62 	blt.w	15594 <new_date_time_get+0x28>
			initial_valid_time = true;
   156d0:	2201      	movs	r2, #1
   156d2:	4b29      	ldr	r3, [pc, #164]	; (15778 <new_date_time_get+0x20c>)

		LOG_DBG("Not getting cellular network time");
#endif
		LOG_DBG("Not getting time from any time source");

		evt.type = DATE_TIME_NOT_OBTAINED;
   156d4:	701a      	strb	r2, [r3, #0]
   156d6:	e028      	b.n	1572a <new_date_time_get+0x1be>
	err = sntp_init(&sntp_ctx, server->addr->ai_addr,
   156d8:	686b      	ldr	r3, [r5, #4]
   156da:	a80b      	add	r0, sp, #44	; 0x2c
   156dc:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   156e0:	f007 fa76 	bl	1cbd0 <sntp_init>
	if (err) {
   156e4:	4682      	mov	sl, r0
   156e6:	b318      	cbz	r0, 15730 <new_date_time_get+0x1c4>
		LOG_WRN("sntp_init, error: %d", err);
   156e8:	4601      	mov	r1, r0
   156ea:	01a2      	lsls	r2, r4, #6
   156ec:	4824      	ldr	r0, [pc, #144]	; (15780 <new_date_time_get+0x214>)
   156ee:	f042 0202 	orr.w	r2, r2, #2
		LOG_WRN("sntp_query, error: %d", err);
   156f2:	f006 ff98 	bl	1c626 <log_1>
	sntp_close(&sntp_ctx);
   156f6:	a80b      	add	r0, sp, #44	; 0x2c
   156f8:	f007 fa99 	bl	1cc2e <sntp_close>
		if (err) {
   156fc:	f1ba 0f00 	cmp.w	sl, #0
   15700:	f47f af6a 	bne.w	155d8 <new_date_time_get+0x6c>
		time_aux.date_time_utc = (int64_t)sntp_time.seconds * 1000;
   15704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   15708:	4b1e      	ldr	r3, [pc, #120]	; (15784 <new_date_time_get+0x218>)
   1570a:	681a      	ldr	r2, [r3, #0]
   1570c:	6858      	ldr	r0, [r3, #4]
   1570e:	fba2 2301 	umull	r2, r3, r2, r1
   15712:	fb01 3300 	mla	r3, r1, r0, r3
   15716:	e9c7 2300 	strd	r2, r3, [r7]
		time_aux.last_date_time_update = k_uptime_get();
   1571a:	f008 ff66 	bl	1e5ea <k_uptime_get>
			initial_valid_time = true;
   1571e:	2301      	movs	r3, #1
   15720:	4a15      	ldr	r2, [pc, #84]	; (15778 <new_date_time_get+0x20c>)
		time_aux.last_date_time_update = k_uptime_get();
   15722:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   15724:	7013      	strb	r3, [r2, #0]
			evt.type = DATE_TIME_OBTAINED_NTP;
   15726:	4a15      	ldr	r2, [pc, #84]	; (1577c <new_date_time_get+0x210>)
   15728:	7013      	strb	r3, [r2, #0]
		date_time_notify_event(&evt);
   1572a:	f7ff ff15 	bl	15558 <date_time_notify_event.constprop.0>
   1572e:	e726      	b.n	1557e <new_date_time_get+0x12>
	err = sntp_query(&sntp_ctx, timeout, time);
   15730:	465a      	mov	r2, fp
   15732:	f241 3188 	movw	r1, #5000	; 0x1388
   15736:	a80b      	add	r0, sp, #44	; 0x2c
   15738:	f7f7 fc06 	bl	cf48 <sntp_query>
	if (err) {
   1573c:	4682      	mov	sl, r0
   1573e:	2800      	cmp	r0, #0
   15740:	d0d9      	beq.n	156f6 <new_date_time_get+0x18a>
		LOG_WRN("sntp_query, error: %d", err);
   15742:	01a2      	lsls	r2, r4, #6
   15744:	4601      	mov	r1, r0
   15746:	f042 0202 	orr.w	r2, r2, #2
   1574a:	480f      	ldr	r0, [pc, #60]	; (15788 <new_date_time_get+0x21c>)
   1574c:	e7d1      	b.n	156f2 <new_date_time_get+0x186>
		evt.type = DATE_TIME_NOT_OBTAINED;
   1574e:	2203      	movs	r2, #3
   15750:	4b0a      	ldr	r3, [pc, #40]	; (1577c <new_date_time_get+0x210>)
   15752:	e7bf      	b.n	156d4 <new_date_time_get+0x168>
   15754:	20014e48 	.word	0x20014e48
   15758:	00020e80 	.word	0x00020e80
   1575c:	00020e58 	.word	0x00020e58
   15760:	20014900 	.word	0x20014900
   15764:	20014574 	.word	0x20014574
   15768:	0002329f 	.word	0x0002329f
   1576c:	000232a3 	.word	0x000232a3
   15770:	000232e5 	.word	0x000232e5
   15774:	0002330a 	.word	0x0002330a
   15778:	2001bf75 	.word	0x2001bf75
   1577c:	2001bf74 	.word	0x2001bf74
   15780:	000232ba 	.word	0x000232ba
   15784:	20014e38 	.word	0x20014e38
   15788:	000232cf 	.word	0x000232cf
   1578c:	20018478 	.word	0x20018478

00015790 <date_time_init>:
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

static int date_time_init(const struct device *unused)
{
   15790:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   15792:	4c08      	ldr	r4, [pc, #32]	; (157b4 <date_time_init+0x24>)
   15794:	2230      	movs	r2, #48	; 0x30
   15796:	2100      	movs	r1, #0
   15798:	4620      	mov	r0, r4
   1579a:	f00a ff5b 	bl	20654 <memset>
   1579e:	4b06      	ldr	r3, [pc, #24]	; (157b8 <date_time_init+0x28>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   157a0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   157a4:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   157a6:	4621      	mov	r1, r4
   157a8:	2300      	movs	r3, #0
   157aa:	4804      	ldr	r0, [pc, #16]	; (157bc <date_time_init+0x2c>)
   157ac:	f004 fff8 	bl	1a7a0 <k_delayed_work_submit_to_queue>
	k_delayed_work_init(&time_work, date_time_handler);
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));

	return 0;
}
   157b0:	2000      	movs	r0, #0
   157b2:	bd10      	pop	{r4, pc}
   157b4:	20014e58 	.word	0x20014e58
   157b8:	000157c1 	.word	0x000157c1
   157bc:	20015030 	.word	0x20015030

000157c0 <date_time_handler>:
{
   157c0:	b510      	push	{r4, lr}
	z_impl_k_sem_give(sem);
   157c2:	4806      	ldr	r0, [pc, #24]	; (157dc <date_time_handler+0x1c>)
   157c4:	f004 fe8e 	bl	1a4e4 <z_impl_k_sem_give>
}
   157c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   157cc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   157d0:	2300      	movs	r3, #0
   157d2:	4903      	ldr	r1, [pc, #12]	; (157e0 <date_time_handler+0x20>)
   157d4:	4803      	ldr	r0, [pc, #12]	; (157e4 <date_time_handler+0x24>)
   157d6:	f004 bfe3 	b.w	1a7a0 <k_delayed_work_submit_to_queue>
   157da:	bf00      	nop
   157dc:	20014900 	.word	0x20014900
   157e0:	20014e58 	.word	0x20014e58
   157e4:	20015030 	.word	0x20015030

000157e8 <date_time_uptime_to_unix_time_ms>:

	return 0;
}

int date_time_uptime_to_unix_time_ms(int64_t *uptime)
{
   157e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t uptime_prev = *uptime;
   157ec:	6803      	ldr	r3, [r0, #0]
{
   157ee:	4604      	mov	r4, r0
	int64_t uptime_prev = *uptime;
   157f0:	9300      	str	r3, [sp, #0]
   157f2:	6843      	ldr	r3, [r0, #4]
   157f4:	9301      	str	r3, [sp, #4]

	if (!initial_valid_time) {
   157f6:	4b23      	ldr	r3, [pc, #140]	; (15884 <date_time_uptime_to_unix_time_ms+0x9c>)
   157f8:	781b      	ldrb	r3, [r3, #0]
   157fa:	b973      	cbnz	r3, 1581a <date_time_uptime_to_unix_time_ms+0x32>
   157fc:	4b22      	ldr	r3, [pc, #136]	; (15888 <date_time_uptime_to_unix_time_ms+0xa0>)
   157fe:	4923      	ldr	r1, [pc, #140]	; (1588c <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Valid time not currently available");
   15800:	4823      	ldr	r0, [pc, #140]	; (15890 <date_time_uptime_to_unix_time_ms+0xa8>)
   15802:	1ac9      	subs	r1, r1, r3
   15804:	08c9      	lsrs	r1, r1, #3
   15806:	0189      	lsls	r1, r1, #6
   15808:	f041 0102 	orr.w	r1, r1, #2
   1580c:	f006 fefc 	bl	1c608 <log_0>
		return -ENODATA;
   15810:	f06f 003c 	mvn.w	r0, #60	; 0x3c
		*uptime = uptime_prev;
		return -EINVAL;
	}

	return 0;
}
   15814:	b003      	add	sp, #12
   15816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;
   1581a:	4d1e      	ldr	r5, [pc, #120]	; (15894 <date_time_uptime_to_unix_time_ms+0xac>)
   1581c:	68a9      	ldr	r1, [r5, #8]
   1581e:	e9d5 6700 	ldrd	r6, r7, [r5]
   15822:	1a72      	subs	r2, r6, r1
   15824:	eb67 73e1 	sbc.w	r3, r7, r1, asr #31
   15828:	9900      	ldr	r1, [sp, #0]
   1582a:	eb12 0801 	adds.w	r8, r2, r1
   1582e:	9901      	ldr	r1, [sp, #4]
   15830:	eb43 0901 	adc.w	r9, r3, r1
   15834:	e9c0 8900 	strd	r8, r9, [r0]
	    (k_uptime_get() - time_aux.last_date_time_update)) {
   15838:	f008 fed7 	bl	1e5ea <k_uptime_get>
   1583c:	68ab      	ldr	r3, [r5, #8]
	if (*uptime > time_aux.date_time_utc +
   1583e:	1af6      	subs	r6, r6, r3
   15840:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
   15844:	eb16 0a00 	adds.w	sl, r6, r0
   15848:	eb47 0b01 	adc.w	fp, r7, r1
   1584c:	45c2      	cmp	sl, r8
   1584e:	eb7b 0309 	sbcs.w	r3, fp, r9
   15852:	da15      	bge.n	15880 <date_time_uptime_to_unix_time_ms+0x98>
   15854:	4b0c      	ldr	r3, [pc, #48]	; (15888 <date_time_uptime_to_unix_time_ms+0xa0>)
   15856:	4d0d      	ldr	r5, [pc, #52]	; (1588c <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Uptime to large or previously converted");
   15858:	480f      	ldr	r0, [pc, #60]	; (15898 <date_time_uptime_to_unix_time_ms+0xb0>)
   1585a:	1aed      	subs	r5, r5, r3
   1585c:	08ed      	lsrs	r5, r5, #3
   1585e:	01ad      	lsls	r5, r5, #6
   15860:	f045 0502 	orr.w	r5, r5, #2
   15864:	4629      	mov	r1, r5
   15866:	f006 fecf 	bl	1c608 <log_0>
		LOG_WRN("Clear variable or set a new uptime");
   1586a:	480c      	ldr	r0, [pc, #48]	; (1589c <date_time_uptime_to_unix_time_ms+0xb4>)
   1586c:	4629      	mov	r1, r5
   1586e:	f006 fecb 	bl	1c608 <log_0>
		*uptime = uptime_prev;
   15872:	9b00      	ldr	r3, [sp, #0]
		return -EINVAL;
   15874:	f06f 0015 	mvn.w	r0, #21
		*uptime = uptime_prev;
   15878:	6023      	str	r3, [r4, #0]
   1587a:	9b01      	ldr	r3, [sp, #4]
   1587c:	6063      	str	r3, [r4, #4]
		return -EINVAL;
   1587e:	e7c9      	b.n	15814 <date_time_uptime_to_unix_time_ms+0x2c>
	return 0;
   15880:	2000      	movs	r0, #0
   15882:	e7c7      	b.n	15814 <date_time_uptime_to_unix_time_ms+0x2c>
   15884:	2001bf75 	.word	0x2001bf75
   15888:	00020e58 	.word	0x00020e58
   1588c:	00020e80 	.word	0x00020e80
   15890:	00023313 	.word	0x00023313
   15894:	20014e48 	.word	0x20014e48
   15898:	00023336 	.word	0x00023336
   1589c:	0002335e 	.word	0x0002335e

000158a0 <date_time_now>:

int date_time_now(int64_t *unix_time_ms)
{
   158a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;
	int64_t unix_time_ms_prev = *unix_time_ms;
   158a2:	e9d0 4500 	ldrd	r4, r5, [r0]
{
   158a6:	4606      	mov	r6, r0

	*unix_time_ms = k_uptime_get();
   158a8:	f008 fe9f 	bl	1e5ea <k_uptime_get>
   158ac:	e9c6 0100 	strd	r0, r1, [r6]

	err = date_time_uptime_to_unix_time_ms(unix_time_ms);
   158b0:	4630      	mov	r0, r6
   158b2:	f7ff ff99 	bl	157e8 <date_time_uptime_to_unix_time_ms>
	if (err) {
   158b6:	4607      	mov	r7, r0
   158b8:	b160      	cbz	r0, 158d4 <date_time_now+0x34>
   158ba:	4b07      	ldr	r3, [pc, #28]	; (158d8 <date_time_now+0x38>)
   158bc:	4a07      	ldr	r2, [pc, #28]	; (158dc <date_time_now+0x3c>)
		LOG_WRN("date_time_uptime_to_unix_time_ms, error: %d", err);
   158be:	4601      	mov	r1, r0
   158c0:	1ad2      	subs	r2, r2, r3
   158c2:	08d2      	lsrs	r2, r2, #3
   158c4:	0192      	lsls	r2, r2, #6
   158c6:	4806      	ldr	r0, [pc, #24]	; (158e0 <date_time_now+0x40>)
   158c8:	f042 0202 	orr.w	r2, r2, #2
   158cc:	f006 feab 	bl	1c626 <log_1>
		*unix_time_ms = unix_time_ms_prev;
   158d0:	e9c6 4500 	strd	r4, r5, [r6]
	}

	return err;
}
   158d4:	4638      	mov	r0, r7
   158d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   158d8:	00020e58 	.word	0x00020e58
   158dc:	00020e80 	.word	0x00020e80
   158e0:	00023381 	.word	0x00023381

000158e4 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   158e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   158e8:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   158ea:	4c21      	ldr	r4, [pc, #132]	; (15970 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   158ec:	4e21      	ldr	r6, [pc, #132]	; (15974 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   158ee:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   158f2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1597c <check_ext_api_requests+0x98>
{
   158f6:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   158f8:	45a8      	cmp	r8, r5
   158fa:	d803      	bhi.n	15904 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   158fc:	2000      	movs	r0, #0
   158fe:	b005      	add	sp, #20
   15900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   15904:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15906:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1590a:	681f      	ldr	r7, [r3, #0]
   1590c:	ab01      	add	r3, sp, #4
   1590e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   15912:	220c      	movs	r2, #12
   15914:	4619      	mov	r1, r3
   15916:	4638      	mov	r0, r7
   15918:	f00a fe81 	bl	2061e <memcmp>
   1591c:	b990      	cbnz	r0, 15944 <check_ext_api_requests+0x60>
   1591e:	b18f      	cbz	r7, 15944 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   15920:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   15922:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   15924:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   15926:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   15928:	4291      	cmp	r1, r2
   1592a:	d10b      	bne.n	15944 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   1592c:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   1592e:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   15930:	4291      	cmp	r1, r2
   15932:	d807      	bhi.n	15944 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   15934:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   15936:	4291      	cmp	r1, r2
   15938:	d904      	bls.n	15944 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   1593a:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1593c:	695b      	ldr	r3, [r3, #20]
   1593e:	ea32 0303 	bics.w	r3, r2, r3
   15942:	d00a      	beq.n	1595a <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   15944:	6a27      	ldr	r7, [r4, #32]
   15946:	b167      	cbz	r7, 15962 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   15948:	480b      	ldr	r0, [pc, #44]	; (15978 <check_ext_api_requests+0x94>)
   1594a:	f006 fa4b 	bl	1bde4 <printk>
			k_panic();
   1594e:	4040      	eors	r0, r0
   15950:	f380 8811 	msr	BASEPRI, r0
   15954:	f04f 0004 	mov.w	r0, #4
   15958:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1595a:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1595c:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   1595e:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15960:	e7ca      	b.n	158f8 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   15962:	4648      	mov	r0, r9
   15964:	f006 fa3e 	bl	1bde4 <printk>
			*ext_api_req->ext_api = NULL;
   15968:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1596a:	601f      	str	r7, [r3, #0]
   1596c:	e7f5      	b.n	1595a <check_ext_api_requests+0x76>
   1596e:	bf00      	nop
   15970:	0000c23c 	.word	0x0000c23c
   15974:	00020f10 	.word	0x00020f10
   15978:	00023412 	.word	0x00023412
   1597c:	0002343b 	.word	0x0002343b

00015980 <rpc_handle_data_message>:
   15980:	6803      	ldr	r3, [r0, #0]
   15982:	b510      	push	{r4, lr}
   15984:	b29b      	uxth	r3, r3
   15986:	2b04      	cmp	r3, #4
   15988:	d009      	beq.n	1599e <rpc_handle_data_message+0x1e>
   1598a:	2b03      	cmp	r3, #3
   1598c:	d010      	beq.n	159b0 <rpc_handle_data_message+0x30>
   1598e:	2b06      	cmp	r3, #6
   15990:	d010      	beq.n	159b4 <rpc_handle_data_message+0x34>
   15992:	2b07      	cmp	r3, #7
   15994:	d010      	beq.n	159b8 <rpc_handle_data_message+0x38>
   15996:	6880      	ldr	r0, [r0, #8]
   15998:	b980      	cbnz	r0, 159bc <rpc_handle_data_message+0x3c>
   1599a:	2000      	movs	r0, #0
   1599c:	bd10      	pop	{r4, pc}
   1599e:	2300      	movs	r3, #0
   159a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   159a4:	4a07      	ldr	r2, [pc, #28]	; (159c4 <rpc_handle_data_message+0x44>)
   159a6:	2100      	movs	r1, #0
   159a8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   159ac:	685b      	ldr	r3, [r3, #4]
   159ae:	4718      	bx	r3
   159b0:	2301      	movs	r3, #1
   159b2:	e7f5      	b.n	159a0 <rpc_handle_data_message+0x20>
   159b4:	2302      	movs	r3, #2
   159b6:	e7f3      	b.n	159a0 <rpc_handle_data_message+0x20>
   159b8:	2303      	movs	r3, #3
   159ba:	e7f1      	b.n	159a0 <rpc_handle_data_message+0x20>
   159bc:	f008 fe8d 	bl	1e6da <rpc_transport_data_free>
   159c0:	e7eb      	b.n	1599a <rpc_handle_data_message+0x1a>
   159c2:	bf00      	nop
   159c4:	00021184 	.word	0x00021184

000159c8 <ipc_trace_init>:
   159c8:	4b01      	ldr	r3, [pc, #4]	; (159d0 <ipc_trace_init+0x8>)
   159ca:	6018      	str	r0, [r3, #0]
   159cc:	4770      	bx	lr
   159ce:	bf00      	nop
   159d0:	200184d4 	.word	0x200184d4

000159d4 <nrf_modem_os_trace_irq_handler>:
   159d4:	b508      	push	{r3, lr}
   159d6:	4b11      	ldr	r3, [pc, #68]	; (15a1c <nrf_modem_os_trace_irq_handler+0x48>)
   159d8:	781b      	ldrb	r3, [r3, #0]
   159da:	b90b      	cbnz	r3, 159e0 <nrf_modem_os_trace_irq_handler+0xc>
   159dc:	f7fd fe48 	bl	13670 <nrf_modem_os_trace_irq_clear>
   159e0:	4b0f      	ldr	r3, [pc, #60]	; (15a20 <nrf_modem_os_trace_irq_handler+0x4c>)
   159e2:	6818      	ldr	r0, [r3, #0]
   159e4:	b128      	cbz	r0, 159f2 <nrf_modem_os_trace_irq_handler+0x1e>
   159e6:	6882      	ldr	r2, [r0, #8]
   159e8:	6843      	ldr	r3, [r0, #4]
   159ea:	429a      	cmp	r2, r3
   159ec:	d001      	beq.n	159f2 <nrf_modem_os_trace_irq_handler+0x1e>
   159ee:	f008 fe78 	bl	1e6e2 <trace_write>
   159f2:	4b0c      	ldr	r3, [pc, #48]	; (15a24 <nrf_modem_os_trace_irq_handler+0x50>)
   159f4:	6818      	ldr	r0, [r3, #0]
   159f6:	b128      	cbz	r0, 15a04 <nrf_modem_os_trace_irq_handler+0x30>
   159f8:	6882      	ldr	r2, [r0, #8]
   159fa:	6843      	ldr	r3, [r0, #4]
   159fc:	429a      	cmp	r2, r3
   159fe:	d001      	beq.n	15a04 <nrf_modem_os_trace_irq_handler+0x30>
   15a00:	f008 fe6f 	bl	1e6e2 <trace_write>
   15a04:	4b08      	ldr	r3, [pc, #32]	; (15a28 <nrf_modem_os_trace_irq_handler+0x54>)
   15a06:	6818      	ldr	r0, [r3, #0]
   15a08:	b138      	cbz	r0, 15a1a <nrf_modem_os_trace_irq_handler+0x46>
   15a0a:	6882      	ldr	r2, [r0, #8]
   15a0c:	6843      	ldr	r3, [r0, #4]
   15a0e:	429a      	cmp	r2, r3
   15a10:	d003      	beq.n	15a1a <nrf_modem_os_trace_irq_handler+0x46>
   15a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   15a16:	f008 be64 	b.w	1e6e2 <trace_write>
   15a1a:	bd08      	pop	{r3, pc}
   15a1c:	2001bf76 	.word	0x2001bf76
   15a20:	200184d0 	.word	0x200184d0
   15a24:	200184c8 	.word	0x200184c8
   15a28:	200184cc 	.word	0x200184cc

00015a2c <ipc_trace_handle>:
   15a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a30:	4b43      	ldr	r3, [pc, #268]	; (15b40 <ipc_trace_handle+0x114>)
   15a32:	681b      	ldr	r3, [r3, #0]
   15a34:	6919      	ldr	r1, [r3, #16]
   15a36:	f8d3 a014 	ldr.w	sl, [r3, #20]
   15a3a:	7c1a      	ldrb	r2, [r3, #16]
   15a3c:	2200      	movs	r2, #0
   15a3e:	741a      	strb	r2, [r3, #16]
   15a40:	7c58      	ldrb	r0, [r3, #17]
   15a42:	745a      	strb	r2, [r3, #17]
   15a44:	7c98      	ldrb	r0, [r3, #18]
   15a46:	749a      	strb	r2, [r3, #18]
   15a48:	7cd8      	ldrb	r0, [r3, #19]
   15a4a:	74da      	strb	r2, [r3, #19]
   15a4c:	7d18      	ldrb	r0, [r3, #20]
   15a4e:	751a      	strb	r2, [r3, #20]
   15a50:	7d58      	ldrb	r0, [r3, #21]
   15a52:	755a      	strb	r2, [r3, #21]
   15a54:	7d98      	ldrb	r0, [r3, #22]
   15a56:	759a      	strb	r2, [r3, #22]
   15a58:	7dd8      	ldrb	r0, [r3, #23]
   15a5a:	75da      	strb	r2, [r3, #23]
   15a5c:	2900      	cmp	r1, #0
   15a5e:	d033      	beq.n	15ac8 <ipc_trace_handle+0x9c>
   15a60:	3901      	subs	r1, #1
   15a62:	2903      	cmp	r1, #3
   15a64:	d830      	bhi.n	15ac8 <ipc_trace_handle+0x9c>
   15a66:	e8df f001 	tbb	[pc, r1]
   15a6a:	6502      	.short	0x6502
   15a6c:	534c      	.short	0x534c
   15a6e:	4a35      	ldr	r2, [pc, #212]	; (15b44 <ipc_trace_handle+0x118>)
   15a70:	7811      	ldrb	r1, [r2, #0]
   15a72:	b109      	cbz	r1, 15a78 <ipc_trace_handle+0x4c>
   15a74:	2100      	movs	r1, #0
   15a76:	7011      	strb	r1, [r2, #0]
   15a78:	2200      	movs	r2, #0
   15a7a:	4691      	mov	r9, r2
   15a7c:	4617      	mov	r7, r2
   15a7e:	4614      	mov	r4, r2
   15a80:	4d31      	ldr	r5, [pc, #196]	; (15b48 <ipc_trace_handle+0x11c>)
   15a82:	4932      	ldr	r1, [pc, #200]	; (15b4c <ipc_trace_handle+0x120>)
   15a84:	4832      	ldr	r0, [pc, #200]	; (15b50 <ipc_trace_handle+0x124>)
   15a86:	f8d5 e000 	ldr.w	lr, [r5]
   15a8a:	f8d1 8000 	ldr.w	r8, [r1]
   15a8e:	6806      	ldr	r6, [r0, #0]
   15a90:	f8da b008 	ldr.w	fp, [sl, #8]
   15a94:	9501      	str	r5, [sp, #4]
   15a96:	45a3      	cmp	fp, r4
   15a98:	d119      	bne.n	15ace <ipc_trace_handle+0xa2>
   15a9a:	b107      	cbz	r7, 15a9e <ipc_trace_handle+0x72>
   15a9c:	6006      	str	r6, [r0, #0]
   15a9e:	f1b9 0f00 	cmp.w	r9, #0
   15aa2:	d001      	beq.n	15aa8 <ipc_trace_handle+0x7c>
   15aa4:	f8c1 8000 	str.w	r8, [r1]
   15aa8:	b112      	cbz	r2, 15ab0 <ipc_trace_handle+0x84>
   15aaa:	9a01      	ldr	r2, [sp, #4]
   15aac:	f8c2 e000 	str.w	lr, [r2]
   15ab0:	7a1a      	ldrb	r2, [r3, #8]
   15ab2:	2101      	movs	r1, #1
   15ab4:	2200      	movs	r2, #0
   15ab6:	7219      	strb	r1, [r3, #8]
   15ab8:	7a59      	ldrb	r1, [r3, #9]
   15aba:	725a      	strb	r2, [r3, #9]
   15abc:	7a99      	ldrb	r1, [r3, #10]
   15abe:	729a      	strb	r2, [r3, #10]
   15ac0:	7ada      	ldrb	r2, [r3, #11]
   15ac2:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   15ac6:	72da      	strb	r2, [r3, #11]
   15ac8:	b003      	add	sp, #12
   15aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ace:	1ca5      	adds	r5, r4, #2
   15ad0:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   15ad4:	686d      	ldr	r5, [r5, #4]
   15ad6:	f895 c000 	ldrb.w	ip, [r5]
   15ada:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   15ade:	d009      	beq.n	15af4 <ipc_trace_handle+0xc8>
   15ae0:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   15ae4:	d00a      	beq.n	15afc <ipc_trace_handle+0xd0>
   15ae6:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   15aea:	bf04      	itt	eq
   15aec:	462e      	moveq	r6, r5
   15aee:	2701      	moveq	r7, #1
   15af0:	3401      	adds	r4, #1
   15af2:	e7d0      	b.n	15a96 <ipc_trace_handle+0x6a>
   15af4:	46a8      	mov	r8, r5
   15af6:	f04f 0901 	mov.w	r9, #1
   15afa:	e7f9      	b.n	15af0 <ipc_trace_handle+0xc4>
   15afc:	46ae      	mov	lr, r5
   15afe:	2201      	movs	r2, #1
   15b00:	e7f6      	b.n	15af0 <ipc_trace_handle+0xc4>
   15b02:	2101      	movs	r1, #1
   15b04:	4a0f      	ldr	r2, [pc, #60]	; (15b44 <ipc_trace_handle+0x118>)
   15b06:	7011      	strb	r1, [r2, #0]
   15b08:	7a1a      	ldrb	r2, [r3, #8]
   15b0a:	2103      	movs	r1, #3
   15b0c:	2200      	movs	r2, #0
   15b0e:	e7d2      	b.n	15ab6 <ipc_trace_handle+0x8a>
   15b10:	7a19      	ldrb	r1, [r3, #8]
   15b12:	2104      	movs	r1, #4
   15b14:	7219      	strb	r1, [r3, #8]
   15b16:	7a59      	ldrb	r1, [r3, #9]
   15b18:	725a      	strb	r2, [r3, #9]
   15b1a:	7a99      	ldrb	r1, [r3, #10]
   15b1c:	729a      	strb	r2, [r3, #10]
   15b1e:	7ad9      	ldrb	r1, [r3, #11]
   15b20:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   15b24:	72d9      	strb	r1, [r3, #11]
   15b26:	4b07      	ldr	r3, [pc, #28]	; (15b44 <ipc_trace_handle+0x118>)
   15b28:	701a      	strb	r2, [r3, #0]
   15b2a:	b003      	add	sp, #12
   15b2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b30:	f7ff bf50 	b.w	159d4 <nrf_modem_os_trace_irq_handler>
   15b34:	b003      	add	sp, #12
   15b36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b3a:	f7fd bd91 	b.w	13660 <nrf_modem_os_trace_irq_set>
   15b3e:	bf00      	nop
   15b40:	200184d4 	.word	0x200184d4
   15b44:	2001bf76 	.word	0x2001bf76
   15b48:	200184cc 	.word	0x200184cc
   15b4c:	200184c8 	.word	0x200184c8
   15b50:	200184d0 	.word	0x200184d0

00015b54 <rpc_trace_coredump_in_progress>:
   15b54:	4b01      	ldr	r3, [pc, #4]	; (15b5c <rpc_trace_coredump_in_progress+0x8>)
   15b56:	7818      	ldrb	r0, [r3, #0]
   15b58:	4770      	bx	lr
   15b5a:	bf00      	nop
   15b5c:	2001bf76 	.word	0x2001bf76

00015b60 <handle_modem_rpc_msg>:
   15b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b64:	4606      	mov	r6, r0
   15b66:	460f      	mov	r7, r1
   15b68:	2500      	movs	r5, #0
   15b6a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 15be0 <handle_modem_rpc_msg+0x80>
   15b6e:	6833      	ldr	r3, [r6, #0]
   15b70:	42ab      	cmp	r3, r5
   15b72:	d801      	bhi.n	15b78 <handle_modem_rpc_msg+0x18>
   15b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15b78:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   15b7c:	68a3      	ldr	r3, [r4, #8]
   15b7e:	b1fb      	cbz	r3, 15bc0 <handle_modem_rpc_msg+0x60>
   15b80:	6863      	ldr	r3, [r4, #4]
   15b82:	b2db      	uxtb	r3, r3
   15b84:	2b01      	cmp	r3, #1
   15b86:	d11b      	bne.n	15bc0 <handle_modem_rpc_msg+0x60>
   15b88:	6862      	ldr	r2, [r4, #4]
   15b8a:	f8b8 3000 	ldrh.w	r3, [r8]
   15b8e:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   15b92:	d115      	bne.n	15bc0 <handle_modem_rpc_msg+0x60>
   15b94:	2f02      	cmp	r7, #2
   15b96:	68a0      	ldr	r0, [r4, #8]
   15b98:	d114      	bne.n	15bc4 <handle_modem_rpc_msg+0x64>
   15b9a:	f7ff fef1 	bl	15980 <rpc_handle_data_message>
   15b9e:	2802      	cmp	r0, #2
   15ba0:	d00e      	beq.n	15bc0 <handle_modem_rpc_msg+0x60>
   15ba2:	2801      	cmp	r0, #1
   15ba4:	d113      	bne.n	15bce <handle_modem_rpc_msg+0x6e>
   15ba6:	6863      	ldr	r3, [r4, #4]
   15ba8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15bac:	f043 0302 	orr.w	r3, r3, #2
   15bb0:	6063      	str	r3, [r4, #4]
   15bb2:	f8b8 3000 	ldrh.w	r3, [r8]
   15bb6:	3301      	adds	r3, #1
   15bb8:	f8a8 3000 	strh.w	r3, [r8]
   15bbc:	f7fd fd40 	bl	13640 <nrf_modem_os_application_irq_set>
   15bc0:	3501      	adds	r5, #1
   15bc2:	e7d4      	b.n	15b6e <handle_modem_rpc_msg+0xe>
   15bc4:	6801      	ldr	r1, [r0, #0]
   15bc6:	0c09      	lsrs	r1, r1, #16
   15bc8:	f008 fd1d 	bl	1e606 <rpc_handle_ctrl_message>
   15bcc:	e7e7      	b.n	15b9e <handle_modem_rpc_msg+0x3e>
   15bce:	2800      	cmp	r0, #0
   15bd0:	d1ef      	bne.n	15bb2 <handle_modem_rpc_msg+0x52>
   15bd2:	6863      	ldr	r3, [r4, #4]
   15bd4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15bd8:	f043 0303 	orr.w	r3, r3, #3
   15bdc:	e7e8      	b.n	15bb0 <handle_modem_rpc_msg+0x50>
   15bde:	bf00      	nop
   15be0:	20019008 	.word	0x20019008

00015be4 <rpc_transport_ipc_data_msg_send>:
   15be4:	4b11      	ldr	r3, [pc, #68]	; (15c2c <rpc_transport_ipc_data_msg_send+0x48>)
   15be6:	b530      	push	{r4, r5, lr}
   15be8:	7819      	ldrb	r1, [r3, #0]
   15bea:	b9e1      	cbnz	r1, 15c26 <rpc_transport_ipc_data_msg_send+0x42>
   15bec:	4b10      	ldr	r3, [pc, #64]	; (15c30 <rpc_transport_ipc_data_msg_send+0x4c>)
   15bee:	4a11      	ldr	r2, [pc, #68]	; (15c34 <rpc_transport_ipc_data_msg_send+0x50>)
   15bf0:	681b      	ldr	r3, [r3, #0]
   15bf2:	6812      	ldr	r2, [r2, #0]
   15bf4:	1ac0      	subs	r0, r0, r3
   15bf6:	f3c0 1389 	ubfx	r3, r0, #6, #10
   15bfa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15bfe:	4d0e      	ldr	r5, [pc, #56]	; (15c38 <rpc_transport_ipc_data_msg_send+0x54>)
   15c00:	685a      	ldr	r2, [r3, #4]
   15c02:	882c      	ldrh	r4, [r5, #0]
   15c04:	b292      	uxth	r2, r2
   15c06:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   15c0a:	605a      	str	r2, [r3, #4]
   15c0c:	685a      	ldr	r2, [r3, #4]
   15c0e:	4608      	mov	r0, r1
   15c10:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15c14:	f042 0201 	orr.w	r2, r2, #1
   15c18:	605a      	str	r2, [r3, #4]
   15c1a:	2201      	movs	r2, #1
   15c1c:	4b07      	ldr	r3, [pc, #28]	; (15c3c <rpc_transport_ipc_data_msg_send+0x58>)
   15c1e:	3401      	adds	r4, #1
   15c20:	802c      	strh	r4, [r5, #0]
   15c22:	601a      	str	r2, [r3, #0]
   15c24:	bd30      	pop	{r4, r5, pc}
   15c26:	f04f 30ff 	mov.w	r0, #4294967295
   15c2a:	e7fb      	b.n	15c24 <rpc_transport_ipc_data_msg_send+0x40>
   15c2c:	2001bf78 	.word	0x2001bf78
   15c30:	200184f0 	.word	0x200184f0
   15c34:	200184f4 	.word	0x200184f4
   15c38:	2001900a 	.word	0x2001900a
   15c3c:	4002a00c 	.word	0x4002a00c

00015c40 <rpc_transport_ipc_ctrl_msg_send>:
   15c40:	4b0e      	ldr	r3, [pc, #56]	; (15c7c <rpc_transport_ipc_ctrl_msg_send+0x3c>)
   15c42:	490f      	ldr	r1, [pc, #60]	; (15c80 <rpc_transport_ipc_ctrl_msg_send+0x40>)
   15c44:	681b      	ldr	r3, [r3, #0]
   15c46:	880a      	ldrh	r2, [r1, #0]
   15c48:	1ac0      	subs	r0, r0, r3
   15c4a:	f3c0 1389 	ubfx	r3, r0, #6, #10
   15c4e:	480d      	ldr	r0, [pc, #52]	; (15c84 <rpc_transport_ipc_ctrl_msg_send+0x44>)
   15c50:	6800      	ldr	r0, [r0, #0]
   15c52:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   15c56:	6843      	ldr	r3, [r0, #4]
   15c58:	b29b      	uxth	r3, r3
   15c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   15c5e:	3201      	adds	r2, #1
   15c60:	800a      	strh	r2, [r1, #0]
   15c62:	2201      	movs	r2, #1
   15c64:	6043      	str	r3, [r0, #4]
   15c66:	6843      	ldr	r3, [r0, #4]
   15c68:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15c6c:	f043 0301 	orr.w	r3, r3, #1
   15c70:	6043      	str	r3, [r0, #4]
   15c72:	4b05      	ldr	r3, [pc, #20]	; (15c88 <rpc_transport_ipc_ctrl_msg_send+0x48>)
   15c74:	2000      	movs	r0, #0
   15c76:	601a      	str	r2, [r3, #0]
   15c78:	4770      	bx	lr
   15c7a:	bf00      	nop
   15c7c:	200184e8 	.word	0x200184e8
   15c80:	2001900a 	.word	0x2001900a
   15c84:	200184ec 	.word	0x200184ec
   15c88:	4002a004 	.word	0x4002a004

00015c8c <rpc_transport_ipc_data_msg_alloc>:
   15c8c:	4b05      	ldr	r3, [pc, #20]	; (15ca4 <rpc_transport_ipc_data_msg_alloc+0x18>)
   15c8e:	781b      	ldrb	r3, [r3, #0]
   15c90:	b933      	cbnz	r3, 15ca0 <rpc_transport_ipc_data_msg_alloc+0x14>
   15c92:	4b05      	ldr	r3, [pc, #20]	; (15ca8 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   15c94:	2202      	movs	r2, #2
   15c96:	6819      	ldr	r1, [r3, #0]
   15c98:	4b04      	ldr	r3, [pc, #16]	; (15cac <rpc_transport_ipc_data_msg_alloc+0x20>)
   15c9a:	6818      	ldr	r0, [r3, #0]
   15c9c:	f008 bd60 	b.w	1e760 <rpc_transport_ipc_msg_alloc>
   15ca0:	2000      	movs	r0, #0
   15ca2:	4770      	bx	lr
   15ca4:	2001bf78 	.word	0x2001bf78
   15ca8:	200184f0 	.word	0x200184f0
   15cac:	200184f4 	.word	0x200184f4

00015cb0 <rpc_transport_ipc_ctrl_msg_alloc>:
   15cb0:	4b03      	ldr	r3, [pc, #12]	; (15cc0 <rpc_transport_ipc_ctrl_msg_alloc+0x10>)
   15cb2:	2201      	movs	r2, #1
   15cb4:	6819      	ldr	r1, [r3, #0]
   15cb6:	4b03      	ldr	r3, [pc, #12]	; (15cc4 <rpc_transport_ipc_ctrl_msg_alloc+0x14>)
   15cb8:	6818      	ldr	r0, [r3, #0]
   15cba:	f008 bd51 	b.w	1e760 <rpc_transport_ipc_msg_alloc>
   15cbe:	bf00      	nop
   15cc0:	200184e8 	.word	0x200184e8
   15cc4:	200184ec 	.word	0x200184ec

00015cc8 <rpc_transport_ipc_data_alloc>:
   15cc8:	4b03      	ldr	r3, [pc, #12]	; (15cd8 <rpc_transport_ipc_data_alloc+0x10>)
   15cca:	781b      	ldrb	r3, [r3, #0]
   15ccc:	b90b      	cbnz	r3, 15cd2 <rpc_transport_ipc_data_alloc+0xa>
   15cce:	f7fd bced 	b.w	136ac <nrf_modem_os_shm_tx_alloc>
   15cd2:	2000      	movs	r0, #0
   15cd4:	4770      	bx	lr
   15cd6:	bf00      	nop
   15cd8:	2001bf78 	.word	0x2001bf78

00015cdc <nrf_modem_os_application_irq_handler>:
   15cdc:	b510      	push	{r4, lr}
   15cde:	4c06      	ldr	r4, [pc, #24]	; (15cf8 <nrf_modem_os_application_irq_handler+0x1c>)
   15ce0:	f7fd fcb6 	bl	13650 <nrf_modem_os_application_irq_clear>
   15ce4:	6820      	ldr	r0, [r4, #0]
   15ce6:	2101      	movs	r1, #1
   15ce8:	f7ff ff3a 	bl	15b60 <handle_modem_rpc_msg>
   15cec:	6860      	ldr	r0, [r4, #4]
   15cee:	2102      	movs	r1, #2
   15cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15cf4:	f7ff bf34 	b.w	15b60 <handle_modem_rpc_msg>
   15cf8:	200184dc 	.word	0x200184dc

00015cfc <rpc_transport_ipc_msg_free>:
   15cfc:	2300      	movs	r3, #0
   15cfe:	4911      	ldr	r1, [pc, #68]	; (15d44 <rpc_transport_ipc_msg_free+0x48>)
   15d00:	b530      	push	{r4, r5, lr}
   15d02:	680a      	ldr	r2, [r1, #0]
   15d04:	6814      	ldr	r4, [r2, #0]
   15d06:	42a3      	cmp	r3, r4
   15d08:	d10b      	bne.n	15d22 <rpc_transport_ipc_msg_free+0x26>
   15d0a:	2300      	movs	r3, #0
   15d0c:	684a      	ldr	r2, [r1, #4]
   15d0e:	6811      	ldr	r1, [r2, #0]
   15d10:	428b      	cmp	r3, r1
   15d12:	d015      	beq.n	15d40 <rpc_transport_ipc_msg_free+0x44>
   15d14:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   15d18:	68a4      	ldr	r4, [r4, #8]
   15d1a:	42a0      	cmp	r0, r4
   15d1c:	d008      	beq.n	15d30 <rpc_transport_ipc_msg_free+0x34>
   15d1e:	3301      	adds	r3, #1
   15d20:	e7f6      	b.n	15d10 <rpc_transport_ipc_msg_free+0x14>
   15d22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   15d26:	68ad      	ldr	r5, [r5, #8]
   15d28:	42a8      	cmp	r0, r5
   15d2a:	d001      	beq.n	15d30 <rpc_transport_ipc_msg_free+0x34>
   15d2c:	3301      	adds	r3, #1
   15d2e:	e7ea      	b.n	15d06 <rpc_transport_ipc_msg_free+0xa>
   15d30:	00db      	lsls	r3, r3, #3
   15d32:	3304      	adds	r3, #4
   15d34:	58d1      	ldr	r1, [r2, r3]
   15d36:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   15d3a:	f041 0103 	orr.w	r1, r1, #3
   15d3e:	50d1      	str	r1, [r2, r3]
   15d40:	bd30      	pop	{r4, r5, pc}
   15d42:	bf00      	nop
   15d44:	200184dc 	.word	0x200184dc

00015d48 <rpc_transport_ipc_data_free>:
   15d48:	4b0d      	ldr	r3, [pc, #52]	; (15d80 <rpc_transport_ipc_data_free+0x38>)
   15d4a:	b510      	push	{r4, lr}
   15d4c:	681b      	ldr	r3, [r3, #0]
   15d4e:	4604      	mov	r4, r0
   15d50:	4298      	cmp	r0, r3
   15d52:	d30a      	bcc.n	15d6a <rpc_transport_ipc_data_free+0x22>
   15d54:	4b0b      	ldr	r3, [pc, #44]	; (15d84 <rpc_transport_ipc_data_free+0x3c>)
   15d56:	681b      	ldr	r3, [r3, #0]
   15d58:	4298      	cmp	r0, r3
   15d5a:	d206      	bcs.n	15d6a <rpc_transport_ipc_data_free+0x22>
   15d5c:	f7ff ffa8 	bl	15cb0 <rpc_transport_ipc_ctrl_msg_alloc>
   15d60:	b938      	cbnz	r0, 15d72 <rpc_transport_ipc_data_free+0x2a>
   15d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15d66:	f7fd bc6b 	b.w	13640 <nrf_modem_os_application_irq_set>
   15d6a:	4620      	mov	r0, r4
   15d6c:	f7fd fcae 	bl	136cc <nrf_modem_os_shm_tx_free>
   15d70:	e7f7      	b.n	15d62 <rpc_transport_ipc_data_free+0x1a>
   15d72:	4a05      	ldr	r2, [pc, #20]	; (15d88 <rpc_transport_ipc_data_free+0x40>)
   15d74:	6084      	str	r4, [r0, #8]
   15d76:	6002      	str	r2, [r0, #0]
   15d78:	f7ff ff62 	bl	15c40 <rpc_transport_ipc_ctrl_msg_send>
   15d7c:	e7f1      	b.n	15d62 <rpc_transport_ipc_data_free+0x1a>
   15d7e:	bf00      	nop
   15d80:	200184fc 	.word	0x200184fc
   15d84:	200184f8 	.word	0x200184f8
   15d88:	00020001 	.word	0x00020001

00015d8c <rpc_transport_ipc_init>:
   15d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d90:	2200      	movs	r2, #0
   15d92:	b095      	sub	sp, #84	; 0x54
   15d94:	4605      	mov	r5, r0
   15d96:	494f      	ldr	r1, [pc, #316]	; (15ed4 <rpc_transport_ipc_init+0x148>)
   15d98:	7900      	ldrb	r0, [r0, #4]
   15d9a:	f003 fba1 	bl	194e0 <nrfx_ipc_init>
   15d9e:	2238      	movs	r2, #56	; 0x38
   15da0:	2100      	movs	r1, #0
   15da2:	a803      	add	r0, sp, #12
   15da4:	f00a fc56 	bl	20654 <memset>
   15da8:	2302      	movs	r3, #2
   15daa:	9304      	str	r3, [sp, #16]
   15dac:	2308      	movs	r3, #8
   15dae:	9306      	str	r3, [sp, #24]
   15db0:	2320      	movs	r3, #32
   15db2:	9308      	str	r3, [sp, #32]
   15db4:	2301      	movs	r3, #1
   15db6:	930b      	str	r3, [sp, #44]	; 0x2c
   15db8:	2304      	movs	r3, #4
   15dba:	930d      	str	r3, [sp, #52]	; 0x34
   15dbc:	2310      	movs	r3, #16
   15dbe:	f04f 0c40 	mov.w	ip, #64	; 0x40
   15dc2:	930f      	str	r3, [sp, #60]	; 0x3c
   15dc4:	2380      	movs	r3, #128	; 0x80
   15dc6:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   15dca:	23d5      	movs	r3, #213	; 0xd5
   15dcc:	a803      	add	r0, sp, #12
   15dce:	9313      	str	r3, [sp, #76]	; 0x4c
   15dd0:	f003 fb9e 	bl	19510 <nrfx_ipc_config_load>
   15dd4:	682b      	ldr	r3, [r5, #0]
   15dd6:	2100      	movs	r1, #0
   15dd8:	685a      	ldr	r2, [r3, #4]
   15dda:	6818      	ldr	r0, [r3, #0]
   15ddc:	f00a fc3a 	bl	20654 <memset>
   15de0:	682a      	ldr	r2, [r5, #0]
   15de2:	6814      	ldr	r4, [r2, #0]
   15de4:	69d3      	ldr	r3, [r2, #28]
   15de6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   15dea:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   15dee:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   15df2:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   15df6:	f104 0920 	add.w	r9, r4, #32
   15dfa:	2b00      	cmp	r3, #0
   15dfc:	d065      	beq.n	15eca <rpc_transport_ipc_init+0x13e>
   15dfe:	f104 0840 	add.w	r8, r4, #64	; 0x40
   15e02:	4935      	ldr	r1, [pc, #212]	; (15ed8 <rpc_transport_ipc_init+0x14c>)
   15e04:	f8c1 9000 	str.w	r9, [r1]
   15e08:	b13b      	cbz	r3, 15e1a <rpc_transport_ipc_init+0x8e>
   15e0a:	6992      	ldr	r2, [r2, #24]
   15e0c:	4640      	mov	r0, r8
   15e0e:	f8c8 2004 	str.w	r2, [r8, #4]
   15e12:	f8c8 3000 	str.w	r3, [r8]
   15e16:	f7ff fdd7 	bl	159c8 <ipc_trace_init>
   15e1a:	6828      	ldr	r0, [r5, #0]
   15e1c:	4d2f      	ldr	r5, [pc, #188]	; (15edc <rpc_transport_ipc_init+0x150>)
   15e1e:	2300      	movs	r3, #0
   15e20:	602f      	str	r7, [r5, #0]
   15e22:	4d2f      	ldr	r5, [pc, #188]	; (15ee0 <rpc_transport_ipc_init+0x154>)
   15e24:	2101      	movs	r1, #1
   15e26:	602e      	str	r6, [r5, #0]
   15e28:	2508      	movs	r5, #8
   15e2a:	6902      	ldr	r2, [r0, #16]
   15e2c:	6940      	ldr	r0, [r0, #20]
   15e2e:	7023      	strb	r3, [r4, #0]
   15e30:	7063      	strb	r3, [r4, #1]
   15e32:	70a1      	strb	r1, [r4, #2]
   15e34:	70e3      	strb	r3, [r4, #3]
   15e36:	6062      	str	r2, [r4, #4]
   15e38:	60a0      	str	r0, [r4, #8]
   15e3a:	60e6      	str	r6, [r4, #12]
   15e3c:	6127      	str	r7, [r4, #16]
   15e3e:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
   15e42:	f8c4 9014 	str.w	r9, [r4, #20]
   15e46:	f8c4 8018 	str.w	r8, [r4, #24]
   15e4a:	707b      	strb	r3, [r7, #1]
   15e4c:	70bb      	strb	r3, [r7, #2]
   15e4e:	70fb      	strb	r3, [r7, #3]
   15e50:	2714      	movs	r7, #20
   15e52:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
   15e56:	4d23      	ldr	r5, [pc, #140]	; (15ee4 <rpc_transport_ipc_init+0x158>)
   15e58:	7073      	strb	r3, [r6, #1]
   15e5a:	f8c5 b000 	str.w	fp, [r5]
   15e5e:	4d22      	ldr	r5, [pc, #136]	; (15ee8 <rpc_transport_ipc_init+0x15c>)
   15e60:	70b3      	strb	r3, [r6, #2]
   15e62:	f8c5 a000 	str.w	sl, [r5]
   15e66:	4d21      	ldr	r5, [pc, #132]	; (15eec <rpc_transport_ipc_init+0x160>)
   15e68:	70f3      	strb	r3, [r6, #3]
   15e6a:	602a      	str	r2, [r5, #0]
   15e6c:	4402      	add	r2, r0
   15e6e:	4820      	ldr	r0, [pc, #128]	; (15ef0 <rpc_transport_ipc_init+0x164>)
   15e70:	4d20      	ldr	r5, [pc, #128]	; (15ef4 <rpc_transport_ipc_init+0x168>)
   15e72:	6002      	str	r2, [r0, #0]
   15e74:	4a20      	ldr	r2, [pc, #128]	; (15ef8 <rpc_transport_ipc_init+0x16c>)
   15e76:	4e21      	ldr	r6, [pc, #132]	; (15efc <rpc_transport_ipc_init+0x170>)
   15e78:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   15e7c:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   15e80:	4c1f      	ldr	r4, [pc, #124]	; (15f00 <rpc_transport_ipc_init+0x174>)
   15e82:	7029      	strb	r1, [r5, #0]
   15e84:	491f      	ldr	r1, [pc, #124]	; (15f04 <rpc_transport_ipc_init+0x178>)
   15e86:	6023      	str	r3, [r4, #0]
   15e88:	9302      	str	r3, [sp, #8]
   15e8a:	600b      	str	r3, [r1, #0]
   15e8c:	680b      	ldr	r3, [r1, #0]
   15e8e:	9302      	str	r3, [sp, #8]
   15e90:	9b02      	ldr	r3, [sp, #8]
   15e92:	2000      	movs	r0, #0
   15e94:	a901      	add	r1, sp, #4
   15e96:	9701      	str	r7, [sp, #4]
   15e98:	f7fd f9a6 	bl	131e8 <nrf_modem_os_timedwait>
   15e9c:	9b01      	ldr	r3, [sp, #4]
   15e9e:	3b14      	subs	r3, #20
   15ea0:	441e      	add	r6, r3
   15ea2:	782b      	ldrb	r3, [r5, #0]
   15ea4:	2b01      	cmp	r3, #1
   15ea6:	d104      	bne.n	15eb2 <rpc_transport_ipc_init+0x126>
   15ea8:	2e00      	cmp	r6, #0
   15eaa:	d1f2      	bne.n	15e92 <rpc_transport_ipc_init+0x106>
   15eac:	f06f 033b 	mvn.w	r3, #59	; 0x3b
   15eb0:	6023      	str	r3, [r4, #0]
   15eb2:	6824      	ldr	r4, [r4, #0]
   15eb4:	b95c      	cbnz	r4, 15ece <rpc_transport_ipc_init+0x142>
   15eb6:	4b14      	ldr	r3, [pc, #80]	; (15f08 <rpc_transport_ipc_init+0x17c>)
   15eb8:	701c      	strb	r4, [r3, #0]
   15eba:	4b14      	ldr	r3, [pc, #80]	; (15f0c <rpc_transport_ipc_init+0x180>)
   15ebc:	801c      	strh	r4, [r3, #0]
   15ebe:	4b14      	ldr	r3, [pc, #80]	; (15f10 <rpc_transport_ipc_init+0x184>)
   15ec0:	801c      	strh	r4, [r3, #0]
   15ec2:	4620      	mov	r0, r4
   15ec4:	b015      	add	sp, #84	; 0x54
   15ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eca:	4698      	mov	r8, r3
   15ecc:	e799      	b.n	15e02 <rpc_transport_ipc_init+0x76>
   15ece:	f003 fb3f 	bl	19550 <nrfx_ipc_uninit>
   15ed2:	e7f6      	b.n	15ec2 <rpc_transport_ipc_init+0x136>
   15ed4:	00015f15 	.word	0x00015f15
   15ed8:	200184e4 	.word	0x200184e4
   15edc:	200184f4 	.word	0x200184f4
   15ee0:	200184ec 	.word	0x200184ec
   15ee4:	200184f0 	.word	0x200184f0
   15ee8:	200184e8 	.word	0x200184e8
   15eec:	200184fc 	.word	0x200184fc
   15ef0:	200184f8 	.word	0x200184f8
   15ef4:	2001bf77 	.word	0x2001bf77
   15ef8:	4002a000 	.word	0x4002a000
   15efc:	000249f0 	.word	0x000249f0
   15f00:	200184d8 	.word	0x200184d8
   15f04:	40005610 	.word	0x40005610
   15f08:	2001bf78 	.word	0x2001bf78
   15f0c:	2001900a 	.word	0x2001900a
   15f10:	20019008 	.word	0x20019008

00015f14 <ipc_irq_handler>:
   15f14:	b570      	push	{r4, r5, r6, lr}
   15f16:	4604      	mov	r4, r0
   15f18:	0620      	lsls	r0, r4, #24
   15f1a:	d50c      	bpl.n	15f36 <ipc_irq_handler+0x22>
   15f1c:	f7ff fd86 	bl	15a2c <ipc_trace_handle>
   15f20:	f7ff fe18 	bl	15b54 <rpc_trace_coredump_in_progress>
   15f24:	b138      	cbz	r0, 15f36 <ipc_irq_handler+0x22>
   15f26:	22e0      	movs	r2, #224	; 0xe0
   15f28:	4b3f      	ldr	r3, [pc, #252]	; (16028 <ipc_irq_handler+0x114>)
   15f2a:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   15f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   15f32:	605a      	str	r2, [r3, #4]
   15f34:	bd70      	pop	{r4, r5, r6, pc}
   15f36:	07e1      	lsls	r1, r4, #31
   15f38:	d548      	bpl.n	15fcc <ipc_irq_handler+0xb8>
   15f3a:	f248 0202 	movw	r2, #32770	; 0x8002
   15f3e:	4b3b      	ldr	r3, [pc, #236]	; (1602c <ipc_irq_handler+0x118>)
   15f40:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   15f44:	4293      	cmp	r3, r2
   15f46:	d035      	beq.n	15fb4 <ipc_irq_handler+0xa0>
   15f48:	d81b      	bhi.n	15f82 <ipc_irq_handler+0x6e>
   15f4a:	f243 0232 	movw	r2, #12338	; 0x3032
   15f4e:	4293      	cmp	r3, r2
   15f50:	d036      	beq.n	15fc0 <ipc_irq_handler+0xac>
   15f52:	d80b      	bhi.n	15f6c <ipc_irq_handler+0x58>
   15f54:	3b01      	subs	r3, #1
   15f56:	2b01      	cmp	r3, #1
   15f58:	d8ec      	bhi.n	15f34 <ipc_irq_handler+0x20>
   15f5a:	2203      	movs	r2, #3
   15f5c:	200e      	movs	r0, #14
   15f5e:	4b34      	ldr	r3, [pc, #208]	; (16030 <ipc_irq_handler+0x11c>)
   15f60:	701a      	strb	r2, [r3, #0]
   15f62:	4b34      	ldr	r3, [pc, #208]	; (16034 <ipc_irq_handler+0x120>)
   15f64:	6018      	str	r0, [r3, #0]
   15f66:	f009 fcef 	bl	1f948 <rpc_transport_ipc_fault_handler>
   15f6a:	e7e3      	b.n	15f34 <ipc_irq_handler+0x20>
   15f6c:	f248 0201 	movw	r2, #32769	; 0x8001
   15f70:	4293      	cmp	r3, r2
   15f72:	d1df      	bne.n	15f34 <ipc_irq_handler+0x20>
   15f74:	2203      	movs	r2, #3
   15f76:	4b2e      	ldr	r3, [pc, #184]	; (16030 <ipc_irq_handler+0x11c>)
   15f78:	701a      	strb	r2, [r3, #0]
   15f7a:	2216      	movs	r2, #22
   15f7c:	4b2d      	ldr	r3, [pc, #180]	; (16034 <ipc_irq_handler+0x120>)
   15f7e:	601a      	str	r2, [r3, #0]
   15f80:	e7d8      	b.n	15f34 <ipc_irq_handler+0x20>
   15f82:	4a2d      	ldr	r2, [pc, #180]	; (16038 <ipc_irq_handler+0x124>)
   15f84:	4293      	cmp	r3, r2
   15f86:	d80c      	bhi.n	15fa2 <ipc_irq_handler+0x8e>
   15f88:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   15f8c:	d80c      	bhi.n	15fa8 <ipc_irq_handler+0x94>
   15f8e:	f248 0203 	movw	r2, #32771	; 0x8003
   15f92:	4293      	cmp	r3, r2
   15f94:	d1ce      	bne.n	15f34 <ipc_irq_handler+0x20>
   15f96:	2203      	movs	r2, #3
   15f98:	4b25      	ldr	r3, [pc, #148]	; (16030 <ipc_irq_handler+0x11c>)
   15f9a:	701a      	strb	r2, [r3, #0]
   15f9c:	220c      	movs	r2, #12
   15f9e:	4b25      	ldr	r3, [pc, #148]	; (16034 <ipc_irq_handler+0x120>)
   15fa0:	e7ed      	b.n	15f7e <ipc_irq_handler+0x6a>
   15fa2:	4a26      	ldr	r2, [pc, #152]	; (1603c <ipc_irq_handler+0x128>)
   15fa4:	4293      	cmp	r3, r2
   15fa6:	d1c5      	bne.n	15f34 <ipc_irq_handler+0x20>
   15fa8:	2103      	movs	r1, #3
   15faa:	4a21      	ldr	r2, [pc, #132]	; (16030 <ipc_irq_handler+0x11c>)
   15fac:	7011      	strb	r1, [r2, #0]
   15fae:	4a21      	ldr	r2, [pc, #132]	; (16034 <ipc_irq_handler+0x120>)
   15fb0:	6013      	str	r3, [r2, #0]
   15fb2:	e7bf      	b.n	15f34 <ipc_irq_handler+0x20>
   15fb4:	2203      	movs	r2, #3
   15fb6:	4b1e      	ldr	r3, [pc, #120]	; (16030 <ipc_irq_handler+0x11c>)
   15fb8:	701a      	strb	r2, [r3, #0]
   15fba:	222d      	movs	r2, #45	; 0x2d
   15fbc:	4b1d      	ldr	r3, [pc, #116]	; (16034 <ipc_irq_handler+0x120>)
   15fbe:	e7de      	b.n	15f7e <ipc_irq_handler+0x6a>
   15fc0:	2203      	movs	r2, #3
   15fc2:	4b1b      	ldr	r3, [pc, #108]	; (16030 <ipc_irq_handler+0x11c>)
   15fc4:	701a      	strb	r2, [r3, #0]
   15fc6:	2205      	movs	r2, #5
   15fc8:	4b1a      	ldr	r3, [pc, #104]	; (16034 <ipc_irq_handler+0x120>)
   15fca:	e7d8      	b.n	15f7e <ipc_irq_handler+0x6a>
   15fcc:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   15fd0:	d003      	beq.n	15fda <ipc_irq_handler+0xc6>
   15fd2:	2202      	movs	r2, #2
   15fd4:	4b16      	ldr	r3, [pc, #88]	; (16030 <ipc_irq_handler+0x11c>)
   15fd6:	701a      	strb	r2, [r3, #0]
   15fd8:	e7ac      	b.n	15f34 <ipc_irq_handler+0x20>
   15fda:	0762      	lsls	r2, r4, #29
   15fdc:	d505      	bpl.n	15fea <ipc_irq_handler+0xd6>
   15fde:	4b14      	ldr	r3, [pc, #80]	; (16030 <ipc_irq_handler+0x11c>)
   15fe0:	781a      	ldrb	r2, [r3, #0]
   15fe2:	461e      	mov	r6, r3
   15fe4:	b93a      	cbnz	r2, 15ff6 <ipc_irq_handler+0xe2>
   15fe6:	f7fd fb2b 	bl	13640 <nrf_modem_os_application_irq_set>
   15fea:	06e3      	lsls	r3, r4, #27
   15fec:	d5a2      	bpl.n	15f34 <ipc_irq_handler+0x20>
   15fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15ff2:	f7fd bb25 	b.w	13640 <nrf_modem_os_application_irq_set>
   15ff6:	2a01      	cmp	r2, #1
   15ff8:	d1f7      	bne.n	15fea <ipc_irq_handler+0xd6>
   15ffa:	4a11      	ldr	r2, [pc, #68]	; (16040 <ipc_irq_handler+0x12c>)
   15ffc:	4811      	ldr	r0, [pc, #68]	; (16044 <ipc_irq_handler+0x130>)
   15ffe:	6812      	ldr	r2, [r2, #0]
   16000:	6891      	ldr	r1, [r2, #8]
   16002:	6041      	str	r1, [r0, #4]
   16004:	6852      	ldr	r2, [r2, #4]
   16006:	6002      	str	r2, [r0, #0]
   16008:	b101      	cbz	r1, 1600c <ipc_irq_handler+0xf8>
   1600a:	b92a      	cbnz	r2, 16018 <ipc_irq_handler+0x104>
   1600c:	2303      	movs	r3, #3
   1600e:	2216      	movs	r2, #22
   16010:	7033      	strb	r3, [r6, #0]
   16012:	4b08      	ldr	r3, [pc, #32]	; (16034 <ipc_irq_handler+0x120>)
   16014:	601a      	str	r2, [r3, #0]
   16016:	e7e8      	b.n	15fea <ipc_irq_handler+0xd6>
   16018:	6809      	ldr	r1, [r1, #0]
   1601a:	2910      	cmp	r1, #16
   1601c:	d8f6      	bhi.n	1600c <ipc_irq_handler+0xf8>
   1601e:	6812      	ldr	r2, [r2, #0]
   16020:	2a10      	cmp	r2, #16
   16022:	d8f3      	bhi.n	1600c <ipc_irq_handler+0xf8>
   16024:	701d      	strb	r5, [r3, #0]
   16026:	e7e0      	b.n	15fea <ipc_irq_handler+0xd6>
   16028:	e000e100 	.word	0xe000e100
   1602c:	4002a000 	.word	0x4002a000
   16030:	2001bf77 	.word	0x2001bf77
   16034:	200184d8 	.word	0x200184d8
   16038:	04400004 	.word	0x04400004
   1603c:	05500001 	.word	0x05500001
   16040:	200184e4 	.word	0x200184e4
   16044:	200184dc 	.word	0x200184dc

00016048 <interface_init>:
   16048:	b508      	push	{r3, lr}
   1604a:	f44f 72b4 	mov.w	r2, #360	; 0x168
   1604e:	2100      	movs	r1, #0
   16050:	4802      	ldr	r0, [pc, #8]	; (1605c <interface_init+0x14>)
   16052:	f00a faff 	bl	20654 <memset>
   16056:	2000      	movs	r0, #0
   16058:	bd08      	pop	{r3, pc}
   1605a:	bf00      	nop
   1605c:	20018500 	.word	0x20018500

00016060 <interface_socket_allocate>:
   16060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16062:	4606      	mov	r6, r0
   16064:	2400      	movs	r4, #0
   16066:	2728      	movs	r7, #40	; 0x28
   16068:	4b0f      	ldr	r3, [pc, #60]	; (160a8 <interface_socket_allocate+0x48>)
   1606a:	fb07 f004 	mul.w	r0, r7, r4
   1606e:	181d      	adds	r5, r3, r0
   16070:	5818      	ldr	r0, [r3, r0]
   16072:	b988      	cbnz	r0, 16098 <interface_socket_allocate+0x38>
   16074:	f04f 37ff 	mov.w	r7, #4294967295
   16078:	2301      	movs	r3, #1
   1607a:	4628      	mov	r0, r5
   1607c:	61af      	str	r7, [r5, #24]
   1607e:	602b      	str	r3, [r5, #0]
   16080:	f008 fd7d 	bl	1eb7e <packet_handler_alloc_and_init>
   16084:	b168      	cbz	r0, 160a2 <interface_socket_allocate+0x42>
   16086:	4628      	mov	r0, r5
   16088:	f008 fd90 	bl	1ebac <socket_free>
   1608c:	200c      	movs	r0, #12
   1608e:	f7fd f963 	bl	13358 <nrf_modem_os_errno_set>
   16092:	f04f 34ff 	mov.w	r4, #4294967295
   16096:	e005      	b.n	160a4 <interface_socket_allocate+0x44>
   16098:	3401      	adds	r4, #1
   1609a:	2c09      	cmp	r4, #9
   1609c:	d1e5      	bne.n	1606a <interface_socket_allocate+0xa>
   1609e:	2069      	movs	r0, #105	; 0x69
   160a0:	e7f5      	b.n	1608e <interface_socket_allocate+0x2e>
   160a2:	6035      	str	r5, [r6, #0]
   160a4:	4620      	mov	r0, r4
   160a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   160a8:	20018500 	.word	0x20018500

000160ac <interface_socket_free>:
   160ac:	2808      	cmp	r0, #8
   160ae:	d805      	bhi.n	160bc <interface_socket_free+0x10>
   160b0:	2228      	movs	r2, #40	; 0x28
   160b2:	4b03      	ldr	r3, [pc, #12]	; (160c0 <interface_socket_free+0x14>)
   160b4:	fb02 3000 	mla	r0, r2, r0, r3
   160b8:	f008 bd78 	b.w	1ebac <socket_free>
   160bc:	4770      	bx	lr
   160be:	bf00      	nop
   160c0:	20018500 	.word	0x20018500

000160c4 <interface_socket_packet_handler_update>:
   160c4:	2808      	cmp	r0, #8
   160c6:	b570      	push	{r4, r5, r6, lr}
   160c8:	d812      	bhi.n	160f0 <interface_socket_packet_handler_update+0x2c>
   160ca:	2328      	movs	r3, #40	; 0x28
   160cc:	4358      	muls	r0, r3
   160ce:	4c09      	ldr	r4, [pc, #36]	; (160f4 <interface_socket_packet_handler_update+0x30>)
   160d0:	5823      	ldr	r3, [r4, r0]
   160d2:	1825      	adds	r5, r4, r0
   160d4:	b163      	cbz	r3, 160f0 <interface_socket_packet_handler_update+0x2c>
   160d6:	4628      	mov	r0, r5
   160d8:	69ee      	ldr	r6, [r5, #28]
   160da:	f008 fd50 	bl	1eb7e <packet_handler_alloc_and_init>
   160de:	4604      	mov	r4, r0
   160e0:	b920      	cbnz	r0, 160ec <interface_socket_packet_handler_update+0x28>
   160e2:	4630      	mov	r0, r6
   160e4:	f009 fc12 	bl	1f90c <packet_handler_delete>
   160e8:	4620      	mov	r0, r4
   160ea:	bd70      	pop	{r4, r5, r6, pc}
   160ec:	61ee      	str	r6, [r5, #28]
   160ee:	e7fb      	b.n	160e8 <interface_socket_packet_handler_update+0x24>
   160f0:	2402      	movs	r4, #2
   160f2:	e7f9      	b.n	160e8 <interface_socket_packet_handler_update+0x24>
   160f4:	20018500 	.word	0x20018500

000160f8 <interface_socket_wait>:
   160f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   160fc:	4615      	mov	r5, r2
   160fe:	2228      	movs	r2, #40	; 0x28
   16100:	4350      	muls	r0, r2
   16102:	461e      	mov	r6, r3
   16104:	4b0e      	ldr	r3, [pc, #56]	; (16140 <interface_socket_wait+0x48>)
   16106:	460c      	mov	r4, r1
   16108:	181f      	adds	r7, r3, r0
   1610a:	581b      	ldr	r3, [r3, r0]
   1610c:	402b      	ands	r3, r5
   1610e:	428b      	cmp	r3, r1
   16110:	d102      	bne.n	16118 <interface_socket_wait+0x20>
   16112:	2000      	movs	r0, #0
   16114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16118:	687b      	ldr	r3, [r7, #4]
   1611a:	2b00      	cmp	r3, #0
   1611c:	d1f9      	bne.n	16112 <interface_socket_wait+0x1a>
   1611e:	46b8      	mov	r8, r7
   16120:	f8d8 3000 	ldr.w	r3, [r8]
   16124:	402b      	ands	r3, r5
   16126:	42a3      	cmp	r3, r4
   16128:	d0f3      	beq.n	16112 <interface_socket_wait+0x1a>
   1612a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1612e:	2b00      	cmp	r3, #0
   16130:	d1ef      	bne.n	16112 <interface_socket_wait+0x1a>
   16132:	4631      	mov	r1, r6
   16134:	4638      	mov	r0, r7
   16136:	f7fd f857 	bl	131e8 <nrf_modem_os_timedwait>
   1613a:	2800      	cmp	r0, #0
   1613c:	d0f0      	beq.n	16120 <interface_socket_wait+0x28>
   1613e:	e7e9      	b.n	16114 <interface_socket_wait+0x1c>
   16140:	20018500 	.word	0x20018500

00016144 <interface_from_internal_id_search>:
   16144:	4b0a      	ldr	r3, [pc, #40]	; (16170 <interface_from_internal_id_search+0x2c>)
   16146:	4602      	mov	r2, r0
   16148:	b530      	push	{r4, r5, lr}
   1614a:	2000      	movs	r0, #0
   1614c:	461c      	mov	r4, r3
   1614e:	2128      	movs	r1, #40	; 0x28
   16150:	fb01 f500 	mul.w	r5, r1, r0
   16154:	5965      	ldr	r5, [r4, r5]
   16156:	b115      	cbz	r5, 1615e <interface_from_internal_id_search+0x1a>
   16158:	699d      	ldr	r5, [r3, #24]
   1615a:	4295      	cmp	r5, r2
   1615c:	d006      	beq.n	1616c <interface_from_internal_id_search+0x28>
   1615e:	3001      	adds	r0, #1
   16160:	2809      	cmp	r0, #9
   16162:	f103 0328 	add.w	r3, r3, #40	; 0x28
   16166:	d1f3      	bne.n	16150 <interface_from_internal_id_search+0xc>
   16168:	f04f 30ff 	mov.w	r0, #4294967295
   1616c:	bd30      	pop	{r4, r5, pc}
   1616e:	bf00      	nop
   16170:	20018500 	.word	0x20018500

00016174 <interface_socket_from_handle_get>:
   16174:	2808      	cmp	r0, #8
   16176:	d809      	bhi.n	1618c <interface_socket_from_handle_get+0x18>
   16178:	2328      	movs	r3, #40	; 0x28
   1617a:	4358      	muls	r0, r3
   1617c:	4a04      	ldr	r2, [pc, #16]	; (16190 <interface_socket_from_handle_get+0x1c>)
   1617e:	1813      	adds	r3, r2, r0
   16180:	5812      	ldr	r2, [r2, r0]
   16182:	2a00      	cmp	r2, #0
   16184:	bf14      	ite	ne
   16186:	4618      	movne	r0, r3
   16188:	2000      	moveq	r0, #0
   1618a:	4770      	bx	lr
   1618c:	2000      	movs	r0, #0
   1618e:	4770      	bx	lr
   16190:	20018500 	.word	0x20018500

00016194 <interface_socket_setopt>:
   16194:	2808      	cmp	r0, #8
   16196:	b538      	push	{r3, r4, r5, lr}
   16198:	d82c      	bhi.n	161f4 <interface_socket_setopt+0x60>
   1619a:	2428      	movs	r4, #40	; 0x28
   1619c:	4360      	muls	r0, r4
   1619e:	4d16      	ldr	r5, [pc, #88]	; (161f8 <interface_socket_setopt+0x64>)
   161a0:	182c      	adds	r4, r5, r0
   161a2:	5828      	ldr	r0, [r5, r0]
   161a4:	b330      	cbz	r0, 161f4 <interface_socket_setopt+0x60>
   161a6:	2901      	cmp	r1, #1
   161a8:	d005      	beq.n	161b6 <interface_socket_setopt+0x22>
   161aa:	202a      	movs	r0, #42	; 0x2a
   161ac:	f7fd f8d4 	bl	13358 <nrf_modem_os_errno_set>
   161b0:	f04f 30ff 	mov.w	r0, #4294967295
   161b4:	e01b      	b.n	161ee <interface_socket_setopt+0x5a>
   161b6:	f1a2 0114 	sub.w	r1, r2, #20
   161ba:	2901      	cmp	r1, #1
   161bc:	d8f5      	bhi.n	161aa <interface_socket_setopt+0x16>
   161be:	9904      	ldr	r1, [sp, #16]
   161c0:	2908      	cmp	r1, #8
   161c2:	d115      	bne.n	161f0 <interface_socket_setopt+0x5c>
   161c4:	b1a3      	cbz	r3, 161f0 <interface_socket_setopt+0x5c>
   161c6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   161ca:	6858      	ldr	r0, [r3, #4]
   161cc:	2100      	movs	r1, #0
   161ce:	fbb0 f0f5 	udiv	r0, r0, r5
   161d2:	681b      	ldr	r3, [r3, #0]
   161d4:	fbe5 0103 	umlal	r0, r1, r5, r3
   161d8:	2901      	cmp	r1, #1
   161da:	bf08      	it	eq
   161dc:	2800      	cmpeq	r0, #0
   161de:	d301      	bcc.n	161e4 <interface_socket_setopt+0x50>
   161e0:	2025      	movs	r0, #37	; 0x25
   161e2:	e7e3      	b.n	161ac <interface_socket_setopt+0x18>
   161e4:	2a14      	cmp	r2, #20
   161e6:	bf0c      	ite	eq
   161e8:	6220      	streq	r0, [r4, #32]
   161ea:	6260      	strne	r0, [r4, #36]	; 0x24
   161ec:	2000      	movs	r0, #0
   161ee:	bd38      	pop	{r3, r4, r5, pc}
   161f0:	2016      	movs	r0, #22
   161f2:	e7db      	b.n	161ac <interface_socket_setopt+0x18>
   161f4:	2009      	movs	r0, #9
   161f6:	e7d9      	b.n	161ac <interface_socket_setopt+0x18>
   161f8:	20018500 	.word	0x20018500

000161fc <interface_socket_getopt>:
   161fc:	b570      	push	{r4, r5, r6, lr}
   161fe:	2808      	cmp	r0, #8
   16200:	9d04      	ldr	r5, [sp, #16]
   16202:	d832      	bhi.n	1626a <interface_socket_getopt+0x6e>
   16204:	2428      	movs	r4, #40	; 0x28
   16206:	4360      	muls	r0, r4
   16208:	4e19      	ldr	r6, [pc, #100]	; (16270 <interface_socket_getopt+0x74>)
   1620a:	1834      	adds	r4, r6, r0
   1620c:	5830      	ldr	r0, [r6, r0]
   1620e:	b360      	cbz	r0, 1626a <interface_socket_getopt+0x6e>
   16210:	2901      	cmp	r1, #1
   16212:	d005      	beq.n	16220 <interface_socket_getopt+0x24>
   16214:	202a      	movs	r0, #42	; 0x2a
   16216:	f7fd f89f 	bl	13358 <nrf_modem_os_errno_set>
   1621a:	f04f 30ff 	mov.w	r0, #4294967295
   1621e:	e00c      	b.n	1623a <interface_socket_getopt+0x3e>
   16220:	b103      	cbz	r3, 16224 <interface_socket_getopt+0x28>
   16222:	b90d      	cbnz	r5, 16228 <interface_socket_getopt+0x2c>
   16224:	2016      	movs	r0, #22
   16226:	e7f6      	b.n	16216 <interface_socket_getopt+0x1a>
   16228:	2a04      	cmp	r2, #4
   1622a:	d107      	bne.n	1623c <interface_socket_getopt+0x40>
   1622c:	682a      	ldr	r2, [r5, #0]
   1622e:	2a04      	cmp	r2, #4
   16230:	d1f8      	bne.n	16224 <interface_socket_getopt+0x28>
   16232:	2000      	movs	r0, #0
   16234:	6862      	ldr	r2, [r4, #4]
   16236:	601a      	str	r2, [r3, #0]
   16238:	6060      	str	r0, [r4, #4]
   1623a:	bd70      	pop	{r4, r5, r6, pc}
   1623c:	f1a2 0114 	sub.w	r1, r2, #20
   16240:	2901      	cmp	r1, #1
   16242:	d8e7      	bhi.n	16214 <interface_socket_getopt+0x18>
   16244:	6829      	ldr	r1, [r5, #0]
   16246:	2908      	cmp	r1, #8
   16248:	d1ec      	bne.n	16224 <interface_socket_getopt+0x28>
   1624a:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   1624e:	2a14      	cmp	r2, #20
   16250:	bf18      	it	ne
   16252:	4608      	movne	r0, r1
   16254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16258:	fbb0 f1f2 	udiv	r1, r0, r2
   1625c:	6019      	str	r1, [r3, #0]
   1625e:	fb02 0111 	mls	r1, r2, r1, r0
   16262:	434a      	muls	r2, r1
   16264:	2000      	movs	r0, #0
   16266:	605a      	str	r2, [r3, #4]
   16268:	e7e7      	b.n	1623a <interface_socket_getopt+0x3e>
   1626a:	2009      	movs	r0, #9
   1626c:	e7d3      	b.n	16216 <interface_socket_getopt+0x1a>
   1626e:	bf00      	nop
   16270:	20018500 	.word	0x20018500

00016274 <interface_socket_fcntl>:
   16274:	2808      	cmp	r0, #8
   16276:	b510      	push	{r4, lr}
   16278:	d82c      	bhi.n	162d4 <interface_socket_fcntl+0x60>
   1627a:	2328      	movs	r3, #40	; 0x28
   1627c:	4343      	muls	r3, r0
   1627e:	4c16      	ldr	r4, [pc, #88]	; (162d8 <interface_socket_fcntl+0x64>)
   16280:	58e0      	ldr	r0, [r4, r3]
   16282:	b338      	cbz	r0, 162d4 <interface_socket_fcntl+0x60>
   16284:	2901      	cmp	r1, #1
   16286:	d11d      	bne.n	162c4 <interface_socket_fcntl+0x50>
   16288:	f012 0001 	ands.w	r0, r2, #1
   1628c:	58e2      	ldr	r2, [r4, r3]
   1628e:	d004      	beq.n	1629a <interface_socket_fcntl+0x26>
   16290:	2000      	movs	r0, #0
   16292:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   16296:	50e2      	str	r2, [r4, r3]
   16298:	bd10      	pop	{r4, pc}
   1629a:	0092      	lsls	r2, r2, #2
   1629c:	d407      	bmi.n	162ae <interface_socket_fcntl+0x3a>
   1629e:	58e2      	ldr	r2, [r4, r3]
   162a0:	b292      	uxth	r2, r2
   162a2:	2a0a      	cmp	r2, #10
   162a4:	d003      	beq.n	162ae <interface_socket_fcntl+0x3a>
   162a6:	58e2      	ldr	r2, [r4, r3]
   162a8:	b292      	uxth	r2, r2
   162aa:	2a0b      	cmp	r2, #11
   162ac:	d105      	bne.n	162ba <interface_socket_fcntl+0x46>
   162ae:	2023      	movs	r0, #35	; 0x23
   162b0:	f7fd f852 	bl	13358 <nrf_modem_os_errno_set>
   162b4:	f04f 30ff 	mov.w	r0, #4294967295
   162b8:	e7ee      	b.n	16298 <interface_socket_fcntl+0x24>
   162ba:	58e2      	ldr	r2, [r4, r3]
   162bc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   162c0:	50e2      	str	r2, [r4, r3]
   162c2:	e7e9      	b.n	16298 <interface_socket_fcntl+0x24>
   162c4:	2902      	cmp	r1, #2
   162c6:	d103      	bne.n	162d0 <interface_socket_fcntl+0x5c>
   162c8:	58e0      	ldr	r0, [r4, r3]
   162ca:	f3c0 7000 	ubfx	r0, r0, #28, #1
   162ce:	e7e3      	b.n	16298 <interface_socket_fcntl+0x24>
   162d0:	2016      	movs	r0, #22
   162d2:	e7ed      	b.n	162b0 <interface_socket_fcntl+0x3c>
   162d4:	2009      	movs	r0, #9
   162d6:	e7eb      	b.n	162b0 <interface_socket_fcntl+0x3c>
   162d8:	20018500 	.word	0x20018500

000162dc <rpc_error_to_nrf_errno>:
   162dc:	2810      	cmp	r0, #16
   162de:	bf9a      	itte	ls
   162e0:	4b01      	ldrls	r3, [pc, #4]	; (162e8 <rpc_error_to_nrf_errno+0xc>)
   162e2:	5618      	ldrsbls	r0, [r3, r0]
   162e4:	202d      	movhi	r0, #45	; 0x2d
   162e6:	4770      	bx	lr
   162e8:	0002346e 	.word	0x0002346e

000162ec <ip_interface_init>:
   162ec:	b510      	push	{r4, lr}
   162ee:	2400      	movs	r4, #0
   162f0:	4b06      	ldr	r3, [pc, #24]	; (1630c <ip_interface_init+0x20>)
   162f2:	2224      	movs	r2, #36	; 0x24
   162f4:	601c      	str	r4, [r3, #0]
   162f6:	4b06      	ldr	r3, [pc, #24]	; (16310 <ip_interface_init+0x24>)
   162f8:	4621      	mov	r1, r4
   162fa:	4806      	ldr	r0, [pc, #24]	; (16314 <ip_interface_init+0x28>)
   162fc:	601c      	str	r4, [r3, #0]
   162fe:	f00a f9a9 	bl	20654 <memset>
   16302:	2201      	movs	r2, #1
   16304:	4b04      	ldr	r3, [pc, #16]	; (16318 <ip_interface_init+0x2c>)
   16306:	4620      	mov	r0, r4
   16308:	701a      	strb	r2, [r3, #0]
   1630a:	bd10      	pop	{r4, pc}
   1630c:	20018678 	.word	0x20018678
   16310:	20018674 	.word	0x20018674
   16314:	2001867c 	.word	0x2001867c
   16318:	2001bf79 	.word	0x2001bf79

0001631c <ip_interface_open>:
   1631c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1631e:	2300      	movs	r3, #0
   16320:	f04f 34ff 	mov.w	r4, #4294967295
   16324:	e9cd 3400 	strd	r3, r4, [sp]
   16328:	4b3c      	ldr	r3, [pc, #240]	; (1641c <ip_interface_open+0x100>)
   1632a:	4607      	mov	r7, r0
   1632c:	781b      	ldrb	r3, [r3, #0]
   1632e:	460d      	mov	r5, r1
   16330:	4616      	mov	r6, r2
   16332:	b92b      	cbnz	r3, 16340 <ip_interface_open+0x24>
   16334:	2070      	movs	r0, #112	; 0x70
   16336:	f7fd f80f 	bl	13358 <nrf_modem_os_errno_set>
   1633a:	4620      	mov	r0, r4
   1633c:	b003      	add	sp, #12
   1633e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16340:	f020 0308 	bic.w	r3, r0, #8
   16344:	2b02      	cmp	r3, #2
   16346:	d003      	beq.n	16350 <ip_interface_open+0x34>
   16348:	2805      	cmp	r0, #5
   1634a:	d001      	beq.n	16350 <ip_interface_open+0x34>
   1634c:	202f      	movs	r0, #47	; 0x2f
   1634e:	e7f2      	b.n	16336 <ip_interface_open+0x1a>
   16350:	1e6b      	subs	r3, r5, #1
   16352:	2b02      	cmp	r3, #2
   16354:	d905      	bls.n	16362 <ip_interface_open+0x46>
   16356:	2016      	movs	r0, #22
   16358:	f7fc fffe 	bl	13358 <nrf_modem_os_errno_set>
   1635c:	f04f 34ff 	mov.w	r4, #4294967295
   16360:	e7eb      	b.n	1633a <ip_interface_open+0x1e>
   16362:	b15e      	cbz	r6, 1637c <ip_interface_open+0x60>
   16364:	2d01      	cmp	r5, #1
   16366:	d103      	bne.n	16370 <ip_interface_open+0x54>
   16368:	2e01      	cmp	r6, #1
   1636a:	d105      	bne.n	16378 <ip_interface_open+0x5c>
   1636c:	2602      	movs	r6, #2
   1636e:	e00a      	b.n	16386 <ip_interface_open+0x6a>
   16370:	2d02      	cmp	r5, #2
   16372:	d1fb      	bne.n	1636c <ip_interface_open+0x50>
   16374:	2e02      	cmp	r6, #2
   16376:	d006      	beq.n	16386 <ip_interface_open+0x6a>
   16378:	2029      	movs	r0, #41	; 0x29
   1637a:	e7ed      	b.n	16358 <ip_interface_open+0x3c>
   1637c:	2d01      	cmp	r5, #1
   1637e:	d010      	beq.n	163a2 <ip_interface_open+0x86>
   16380:	2d03      	cmp	r5, #3
   16382:	bf18      	it	ne
   16384:	2602      	movne	r6, #2
   16386:	4629      	mov	r1, r5
   16388:	4668      	mov	r0, sp
   1638a:	4a25      	ldr	r2, [pc, #148]	; (16420 <ip_interface_open+0x104>)
   1638c:	f7ff fe68 	bl	16060 <interface_socket_allocate>
   16390:	9b00      	ldr	r3, [sp, #0]
   16392:	4604      	mov	r4, r0
   16394:	b93b      	cbnz	r3, 163a6 <ip_interface_open+0x8a>
   16396:	2669      	movs	r6, #105	; 0x69
   16398:	4620      	mov	r0, r4
   1639a:	f7ff fe87 	bl	160ac <interface_socket_free>
   1639e:	4630      	mov	r0, r6
   163a0:	e7da      	b.n	16358 <ip_interface_open+0x3c>
   163a2:	462e      	mov	r6, r5
   163a4:	e7ef      	b.n	16386 <ip_interface_open+0x6a>
   163a6:	f04f 31ff 	mov.w	r1, #4294967295
   163aa:	e9c3 7503 	strd	r7, r5, [r3, #12]
   163ae:	615e      	str	r6, [r3, #20]
   163b0:	f247 0201 	movw	r2, #28673	; 0x7001
   163b4:	2300      	movs	r3, #0
   163b6:	f008 fc4a 	bl	1ec4e <ip_interface_request_create>
   163ba:	4601      	mov	r1, r0
   163bc:	2800      	cmp	r0, #0
   163be:	d0ea      	beq.n	16396 <ip_interface_open+0x7a>
   163c0:	6883      	ldr	r3, [r0, #8]
   163c2:	2f05      	cmp	r7, #5
   163c4:	f103 030c 	add.w	r3, r3, #12
   163c8:	6083      	str	r3, [r0, #8]
   163ca:	d003      	beq.n	163d4 <ip_interface_open+0xb8>
   163cc:	2f0a      	cmp	r7, #10
   163ce:	bf0c      	ite	eq
   163d0:	2702      	moveq	r7, #2
   163d2:	2701      	movne	r7, #1
   163d4:	61ce      	str	r6, [r1, #28]
   163d6:	2301      	movs	r3, #1
   163d8:	f247 0201 	movw	r2, #28673	; 0x7001
   163dc:	9800      	ldr	r0, [sp, #0]
   163de:	614f      	str	r7, [r1, #20]
   163e0:	618d      	str	r5, [r1, #24]
   163e2:	f008 fc4c 	bl	1ec7e <ip_interface_request_send>
   163e6:	4606      	mov	r6, r0
   163e8:	2800      	cmp	r0, #0
   163ea:	d1d5      	bne.n	16398 <ip_interface_open+0x7c>
   163ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
   163f0:	2102      	movs	r1, #2
   163f2:	4620      	mov	r0, r4
   163f4:	ab01      	add	r3, sp, #4
   163f6:	f008 fc55 	bl	1eca4 <ip_interface_wait>
   163fa:	4606      	mov	r6, r0
   163fc:	2800      	cmp	r0, #0
   163fe:	d1cb      	bne.n	16398 <ip_interface_open+0x7c>
   16400:	3d02      	subs	r5, #2
   16402:	2d01      	cmp	r5, #1
   16404:	d899      	bhi.n	1633a <ip_interface_open+0x1e>
   16406:	9b00      	ldr	r3, [sp, #0]
   16408:	681a      	ldr	r2, [r3, #0]
   1640a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1640e:	601a      	str	r2, [r3, #0]
   16410:	681a      	ldr	r2, [r3, #0]
   16412:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   16416:	601a      	str	r2, [r3, #0]
   16418:	e78f      	b.n	1633a <ip_interface_open+0x1e>
   1641a:	bf00      	nop
   1641c:	2001bf79 	.word	0x2001bf79
   16420:	0001ebed 	.word	0x0001ebed

00016424 <ip_interface_close>:
   16424:	f04f 33ff 	mov.w	r3, #4294967295
   16428:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1642a:	4605      	mov	r5, r0
   1642c:	9301      	str	r3, [sp, #4]
   1642e:	f7ff fea1 	bl	16174 <interface_socket_from_handle_get>
   16432:	4604      	mov	r4, r0
   16434:	b3a0      	cbz	r0, 164a0 <ip_interface_close+0x7c>
   16436:	6981      	ldr	r1, [r0, #24]
   16438:	6806      	ldr	r6, [r0, #0]
   1643a:	2300      	movs	r3, #0
   1643c:	f247 0209 	movw	r2, #28681	; 0x7009
   16440:	4628      	mov	r0, r5
   16442:	f008 fc04 	bl	1ec4e <ip_interface_request_create>
   16446:	4601      	mov	r1, r0
   16448:	b388      	cbz	r0, 164ae <ip_interface_close+0x8a>
   1644a:	6823      	ldr	r3, [r4, #0]
   1644c:	4620      	mov	r0, r4
   1644e:	0c1b      	lsrs	r3, r3, #16
   16450:	041b      	lsls	r3, r3, #16
   16452:	f043 030d 	orr.w	r3, r3, #13
   16456:	6023      	str	r3, [r4, #0]
   16458:	6823      	ldr	r3, [r4, #0]
   1645a:	f247 0209 	movw	r2, #28681	; 0x7009
   1645e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   16462:	6023      	str	r3, [r4, #0]
   16464:	6823      	ldr	r3, [r4, #0]
   16466:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1646a:	6023      	str	r3, [r4, #0]
   1646c:	4633      	mov	r3, r6
   1646e:	f008 fc06 	bl	1ec7e <ip_interface_request_send>
   16472:	4604      	mov	r4, r0
   16474:	b9a8      	cbnz	r0, 164a2 <ip_interface_close+0x7e>
   16476:	4e0f      	ldr	r6, [pc, #60]	; (164b4 <ip_interface_close+0x90>)
   16478:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1647c:	210e      	movs	r1, #14
   1647e:	4628      	mov	r0, r5
   16480:	ab01      	add	r3, sp, #4
   16482:	f008 fc0f 	bl	1eca4 <ip_interface_wait>
   16486:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
   1648a:	b118      	cbz	r0, 16494 <ip_interface_close+0x70>
   1648c:	f008 f9e4 	bl	1e858 <rpc_ip_client_message_free>
   16490:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
   16494:	4628      	mov	r0, r5
   16496:	f7ff fe09 	bl	160ac <interface_socket_free>
   1649a:	4620      	mov	r0, r4
   1649c:	b002      	add	sp, #8
   1649e:	bd70      	pop	{r4, r5, r6, pc}
   164a0:	2409      	movs	r4, #9
   164a2:	4620      	mov	r0, r4
   164a4:	f7fc ff58 	bl	13358 <nrf_modem_os_errno_set>
   164a8:	f04f 34ff 	mov.w	r4, #4294967295
   164ac:	e7f5      	b.n	1649a <ip_interface_close+0x76>
   164ae:	240c      	movs	r4, #12
   164b0:	e7f7      	b.n	164a2 <ip_interface_close+0x7e>
   164b2:	bf00      	nop
   164b4:	2001867c 	.word	0x2001867c

000164b8 <ip_interface_sendto>:
   164b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164bc:	4698      	mov	r8, r3
   164be:	2300      	movs	r3, #0
   164c0:	b089      	sub	sp, #36	; 0x24
   164c2:	4606      	mov	r6, r0
   164c4:	4689      	mov	r9, r1
   164c6:	4615      	mov	r5, r2
   164c8:	9305      	str	r3, [sp, #20]
   164ca:	f7ff fe53 	bl	16174 <interface_socket_from_handle_get>
   164ce:	4604      	mov	r4, r0
   164d0:	2800      	cmp	r0, #0
   164d2:	f000 80e2 	beq.w	1669a <ip_interface_sendto+0x1e2>
   164d6:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   164da:	f300 80e1 	bgt.w	166a0 <ip_interface_sendto+0x1e8>
   164de:	6903      	ldr	r3, [r0, #16]
   164e0:	2b01      	cmp	r3, #1
   164e2:	d103      	bne.n	164ec <ip_interface_sendto+0x34>
   164e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   164e6:	2a00      	cmp	r2, #0
   164e8:	f040 80dd 	bne.w	166a6 <ip_interface_sendto+0x1ee>
   164ec:	6822      	ldr	r2, [r4, #0]
   164ee:	0391      	lsls	r1, r2, #14
   164f0:	d428      	bmi.n	16544 <ip_interface_sendto+0x8c>
   164f2:	6822      	ldr	r2, [r4, #0]
   164f4:	0092      	lsls	r2, r2, #2
   164f6:	d409      	bmi.n	1650c <ip_interface_sendto+0x54>
   164f8:	2b01      	cmp	r3, #1
   164fa:	d103      	bne.n	16504 <ip_interface_sendto+0x4c>
   164fc:	6823      	ldr	r3, [r4, #0]
   164fe:	b29b      	uxth	r3, r3
   16500:	2b05      	cmp	r3, #5
   16502:	d103      	bne.n	1650c <ip_interface_sendto+0x54>
   16504:	6823      	ldr	r3, [r4, #0]
   16506:	031f      	lsls	r7, r3, #12
   16508:	f140 80d0 	bpl.w	166ac <ip_interface_sendto+0x1f4>
   1650c:	6823      	ldr	r3, [r4, #0]
   1650e:	0318      	lsls	r0, r3, #12
   16510:	f140 80cf 	bpl.w	166b2 <ip_interface_sendto+0x1fa>
   16514:	f8d4 b008 	ldr.w	fp, [r4, #8]
   16518:	f1bb 0f00 	cmp.w	fp, #0
   1651c:	f000 80cf 	beq.w	166be <ip_interface_sendto+0x206>
   16520:	4658      	mov	r0, fp
   16522:	f7fc ff19 	bl	13358 <nrf_modem_os_errno_set>
   16526:	f04f 35ff 	mov.w	r5, #4294967295
   1652a:	4c72      	ldr	r4, [pc, #456]	; (166f4 <ip_interface_sendto+0x23c>)
   1652c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   16530:	b120      	cbz	r0, 1653c <ip_interface_sendto+0x84>
   16532:	f008 f991 	bl	1e858 <rpc_ip_client_message_free>
   16536:	2300      	movs	r3, #0
   16538:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   1653c:	4628      	mov	r0, r5
   1653e:	b009      	add	sp, #36	; 0x24
   16540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16544:	f1b8 0f00 	cmp.w	r8, #0
   16548:	d03a      	beq.n	165c0 <ip_interface_sendto+0x108>
   1654a:	f018 0f02 	tst.w	r8, #2
   1654e:	f000 80b3 	beq.w	166b8 <ip_interface_sendto+0x200>
   16552:	2700      	movs	r7, #0
   16554:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16556:	f247 0a06 	movw	sl, #28678	; 0x7006
   1655a:	2b00      	cmp	r3, #0
   1655c:	bf08      	it	eq
   1655e:	f04f 33ff 	moveq.w	r3, #4294967295
   16562:	9306      	str	r3, [sp, #24]
   16564:	0433      	lsls	r3, r6, #16
   16566:	9303      	str	r3, [sp, #12]
   16568:	4629      	mov	r1, r5
   1656a:	a805      	add	r0, sp, #20
   1656c:	f008 f94e 	bl	1e80c <rpc_ip_client_request_alloc>
   16570:	280c      	cmp	r0, #12
   16572:	f040 80b9 	bne.w	166e8 <ip_interface_sendto+0x230>
   16576:	2f00      	cmp	r7, #0
   16578:	f000 8086 	beq.w	16688 <ip_interface_sendto+0x1d0>
   1657c:	9b06      	ldr	r3, [sp, #24]
   1657e:	3301      	adds	r3, #1
   16580:	d0f2      	beq.n	16568 <ip_interface_sendto+0xb0>
   16582:	230a      	movs	r3, #10
   16584:	2000      	movs	r0, #0
   16586:	a907      	add	r1, sp, #28
   16588:	9307      	str	r3, [sp, #28]
   1658a:	f7fc fe2d 	bl	131e8 <nrf_modem_os_timedwait>
   1658e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   16592:	4413      	add	r3, r2
   16594:	3b0a      	subs	r3, #10
   16596:	2b00      	cmp	r3, #0
   16598:	9306      	str	r3, [sp, #24]
   1659a:	dce5      	bgt.n	16568 <ip_interface_sendto+0xb0>
   1659c:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
   165a0:	6822      	ldr	r2, [r4, #0]
   165a2:	0313      	lsls	r3, r2, #12
   165a4:	d4b8      	bmi.n	16518 <ip_interface_sendto+0x60>
   165a6:	6822      	ldr	r2, [r4, #0]
   165a8:	b292      	uxth	r2, r2
   165aa:	2a0d      	cmp	r2, #13
   165ac:	d0b4      	beq.n	16518 <ip_interface_sendto+0x60>
   165ae:	6822      	ldr	r2, [r4, #0]
   165b0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   165b4:	6022      	str	r2, [r4, #0]
   165b6:	6822      	ldr	r2, [r4, #0]
   165b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   165bc:	6022      	str	r2, [r4, #0]
   165be:	e7ab      	b.n	16518 <ip_interface_sendto+0x60>
   165c0:	6827      	ldr	r7, [r4, #0]
   165c2:	f087 5780 	eor.w	r7, r7, #268435456	; 0x10000000
   165c6:	f3c7 7700 	ubfx	r7, r7, #28, #1
   165ca:	e7c3      	b.n	16554 <ip_interface_sendto+0x9c>
   165cc:	f04f 020c 	mov.w	r2, #12
   165d0:	9b05      	ldr	r3, [sp, #20]
   165d2:	721a      	strb	r2, [r3, #8]
   165d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   165d6:	7258      	strb	r0, [r3, #9]
   165d8:	7298      	strb	r0, [r3, #10]
   165da:	72d8      	strb	r0, [r3, #11]
   165dc:	2a00      	cmp	r2, #0
   165de:	d056      	beq.n	1668e <ip_interface_sendto+0x1d6>
   165e0:	f103 021c 	add.w	r2, r3, #28
   165e4:	9201      	str	r2, [sp, #4]
   165e6:	f103 0218 	add.w	r2, r3, #24
   165ea:	9200      	str	r2, [sp, #0]
   165ec:	68e0      	ldr	r0, [r4, #12]
   165ee:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
   165f2:	331a      	adds	r3, #26
   165f4:	f008 fb06 	bl	1ec04 <ip_addr_parse>
   165f8:	9a05      	ldr	r2, [sp, #20]
   165fa:	4683      	mov	fp, r0
   165fc:	2800      	cmp	r0, #0
   165fe:	d16b      	bne.n	166d8 <ip_interface_sendto+0x220>
   16600:	f247 0a07 	movw	sl, #28679	; 0x7007
   16604:	6893      	ldr	r3, [r2, #8]
   16606:	8b51      	ldrh	r1, [r2, #26]
   16608:	3304      	adds	r3, #4
   1660a:	440b      	add	r3, r1
   1660c:	f8c2 8014 	str.w	r8, [r2, #20]
   16610:	6093      	str	r3, [r2, #8]
   16612:	69a2      	ldr	r2, [r4, #24]
   16614:	9b05      	ldr	r3, [sp, #20]
   16616:	611a      	str	r2, [r3, #16]
   16618:	9a03      	ldr	r2, [sp, #12]
   1661a:	605d      	str	r5, [r3, #4]
   1661c:	ea4a 0202 	orr.w	r2, sl, r2
   16620:	60da      	str	r2, [r3, #12]
   16622:	f1b9 0f00 	cmp.w	r9, #0
   16626:	d004      	beq.n	16632 <ip_interface_sendto+0x17a>
   16628:	462a      	mov	r2, r5
   1662a:	4649      	mov	r1, r9
   1662c:	6818      	ldr	r0, [r3, #0]
   1662e:	f00a f804 	bl	2063a <memcpy>
   16632:	6823      	ldr	r3, [r4, #0]
   16634:	6822      	ldr	r2, [r4, #0]
   16636:	4620      	mov	r0, r4
   16638:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   1663c:	6022      	str	r2, [r4, #0]
   1663e:	6822      	ldr	r2, [r4, #0]
   16640:	9905      	ldr	r1, [sp, #20]
   16642:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   16646:	6022      	str	r2, [r4, #0]
   16648:	4652      	mov	r2, sl
   1664a:	f008 fb18 	bl	1ec7e <ip_interface_request_send>
   1664e:	4683      	mov	fp, r0
   16650:	2800      	cmp	r0, #0
   16652:	d1a5      	bne.n	165a0 <ip_interface_sendto+0xe8>
   16654:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   16658:	4630      	mov	r0, r6
   1665a:	4611      	mov	r1, r2
   1665c:	ab06      	add	r3, sp, #24
   1665e:	f008 fb21 	bl	1eca4 <ip_interface_wait>
   16662:	4683      	mov	fp, r0
   16664:	2800      	cmp	r0, #0
   16666:	d09b      	beq.n	165a0 <ip_interface_sendto+0xe8>
   16668:	6822      	ldr	r2, [r4, #0]
   1666a:	0311      	lsls	r1, r2, #12
   1666c:	d412      	bmi.n	16694 <ip_interface_sendto+0x1dc>
   1666e:	283c      	cmp	r0, #60	; 0x3c
   16670:	d096      	beq.n	165a0 <ip_interface_sendto+0xe8>
   16672:	280c      	cmp	r0, #12
   16674:	d194      	bne.n	165a0 <ip_interface_sendto+0xe8>
   16676:	4b1f      	ldr	r3, [pc, #124]	; (166f4 <ip_interface_sendto+0x23c>)
   16678:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   1667c:	b108      	cbz	r0, 16682 <ip_interface_sendto+0x1ca>
   1667e:	f008 f8eb 	bl	1e858 <rpc_ip_client_message_free>
   16682:	2f00      	cmp	r7, #0
   16684:	f47f af70 	bne.w	16568 <ip_interface_sendto+0xb0>
   16688:	f04f 0b23 	mov.w	fp, #35	; 0x23
   1668c:	e788      	b.n	165a0 <ip_interface_sendto+0xe8>
   1668e:	f8c3 8014 	str.w	r8, [r3, #20]
   16692:	e7be      	b.n	16612 <ip_interface_sendto+0x15a>
   16694:	f8d4 b008 	ldr.w	fp, [r4, #8]
   16698:	e782      	b.n	165a0 <ip_interface_sendto+0xe8>
   1669a:	f04f 0b09 	mov.w	fp, #9
   1669e:	e73f      	b.n	16520 <ip_interface_sendto+0x68>
   166a0:	f04f 0b28 	mov.w	fp, #40	; 0x28
   166a4:	e73c      	b.n	16520 <ip_interface_sendto+0x68>
   166a6:	f04f 0b38 	mov.w	fp, #56	; 0x38
   166aa:	e739      	b.n	16520 <ip_interface_sendto+0x68>
   166ac:	f04f 0b23 	mov.w	fp, #35	; 0x23
   166b0:	e736      	b.n	16520 <ip_interface_sendto+0x68>
   166b2:	f04f 0b39 	mov.w	fp, #57	; 0x39
   166b6:	e733      	b.n	16520 <ip_interface_sendto+0x68>
   166b8:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   166bc:	e730      	b.n	16520 <ip_interface_sendto+0x68>
   166be:	6823      	ldr	r3, [r4, #0]
   166c0:	011a      	lsls	r2, r3, #4
   166c2:	bf55      	itete	pl
   166c4:	4b0b      	ldrpl	r3, [pc, #44]	; (166f4 <ip_interface_sendto+0x23c>)
   166c6:	6823      	ldrmi	r3, [r4, #0]
   166c8:	f853 3026 	ldrpl.w	r3, [r3, r6, lsl #2]
   166cc:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   166d0:	bf54      	ite	pl
   166d2:	699d      	ldrpl	r5, [r3, #24]
   166d4:	6023      	strmi	r3, [r4, #0]
   166d6:	e728      	b.n	1652a <ip_interface_sendto+0x72>
   166d8:	6810      	ldr	r0, [r2, #0]
   166da:	b108      	cbz	r0, 166e0 <ip_interface_sendto+0x228>
   166dc:	f008 f8c4 	bl	1e868 <rpc_ip_client_data_free>
   166e0:	9805      	ldr	r0, [sp, #20]
   166e2:	f008 f8b9 	bl	1e858 <rpc_ip_client_message_free>
   166e6:	e75b      	b.n	165a0 <ip_interface_sendto+0xe8>
   166e8:	2800      	cmp	r0, #0
   166ea:	f43f af6f 	beq.w	165cc <ip_interface_sendto+0x114>
   166ee:	f04f 0b0c 	mov.w	fp, #12
   166f2:	e755      	b.n	165a0 <ip_interface_sendto+0xe8>
   166f4:	2001867c 	.word	0x2001867c

000166f8 <ip_interface_socketoption_get>:
   166f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166fc:	461c      	mov	r4, r3
   166fe:	f04f 33ff 	mov.w	r3, #4294967295
   16702:	9301      	str	r3, [sp, #4]
   16704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16706:	4607      	mov	r7, r0
   16708:	460d      	mov	r5, r1
   1670a:	4693      	mov	fp, r2
   1670c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   16710:	2b00      	cmp	r3, #0
   16712:	d06a      	beq.n	167ea <ip_interface_socketoption_get+0xf2>
   16714:	f8d8 3000 	ldr.w	r3, [r8]
   16718:	2b00      	cmp	r3, #0
   1671a:	d066      	beq.n	167ea <ip_interface_socketoption_get+0xf2>
   1671c:	680b      	ldr	r3, [r1, #0]
   1671e:	025e      	lsls	r6, r3, #9
   16720:	d465      	bmi.n	167ee <ip_interface_socketoption_get+0xf6>
   16722:	680b      	ldr	r3, [r1, #0]
   16724:	0219      	lsls	r1, r3, #8
   16726:	d462      	bmi.n	167ee <ip_interface_socketoption_get+0xf6>
   16728:	682b      	ldr	r3, [r5, #0]
   1672a:	01da      	lsls	r2, r3, #7
   1672c:	d45f      	bmi.n	167ee <ip_interface_socketoption_get+0xf6>
   1672e:	682b      	ldr	r3, [r5, #0]
   16730:	019b      	lsls	r3, r3, #6
   16732:	d45c      	bmi.n	167ee <ip_interface_socketoption_get+0xf6>
   16734:	f8d5 a000 	ldr.w	sl, [r5]
   16738:	682b      	ldr	r3, [r5, #0]
   1673a:	f247 0204 	movw	r2, #28676	; 0x7004
   1673e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   16742:	602b      	str	r3, [r5, #0]
   16744:	f8d8 3000 	ldr.w	r3, [r8]
   16748:	69a9      	ldr	r1, [r5, #24]
   1674a:	f008 fa80 	bl	1ec4e <ip_interface_request_create>
   1674e:	4606      	mov	r6, r0
   16750:	2800      	cmp	r0, #0
   16752:	d048      	beq.n	167e6 <ip_interface_socketoption_get+0xee>
   16754:	6883      	ldr	r3, [r0, #8]
   16756:	f8c0 b014 	str.w	fp, [r0, #20]
   1675a:	3308      	adds	r3, #8
   1675c:	6083      	str	r3, [r0, #8]
   1675e:	6184      	str	r4, [r0, #24]
   16760:	4601      	mov	r1, r0
   16762:	f8d0 b000 	ldr.w	fp, [r0]
   16766:	4653      	mov	r3, sl
   16768:	f247 0204 	movw	r2, #28676	; 0x7004
   1676c:	4628      	mov	r0, r5
   1676e:	f008 fa86 	bl	1ec7e <ip_interface_request_send>
   16772:	4604      	mov	r4, r0
   16774:	bb20      	cbnz	r0, 167c0 <ip_interface_socketoption_get+0xc8>
   16776:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1677a:	4638      	mov	r0, r7
   1677c:	4611      	mov	r1, r2
   1677e:	ab01      	add	r3, sp, #4
   16780:	f008 fa90 	bl	1eca4 <ip_interface_wait>
   16784:	4604      	mov	r4, r0
   16786:	b9d8      	cbnz	r0, 167c0 <ip_interface_socketoption_get+0xc8>
   16788:	4b1a      	ldr	r3, [pc, #104]	; (167f4 <ip_interface_socketoption_get+0xfc>)
   1678a:	f8d8 2000 	ldr.w	r2, [r8]
   1678e:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
   16792:	4699      	mov	r9, r3
   16794:	b1f9      	cbz	r1, 167d6 <ip_interface_socketoption_get+0xde>
   16796:	6848      	ldr	r0, [r1, #4]
   16798:	4290      	cmp	r0, r2
   1679a:	d81a      	bhi.n	167d2 <ip_interface_socketoption_get+0xda>
   1679c:	6809      	ldr	r1, [r1, #0]
   1679e:	b1c1      	cbz	r1, 167d2 <ip_interface_socketoption_get+0xda>
   167a0:	4602      	mov	r2, r0
   167a2:	980c      	ldr	r0, [sp, #48]	; 0x30
   167a4:	f009 ff49 	bl	2063a <memcpy>
   167a8:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
   167ac:	6852      	ldr	r2, [r2, #4]
   167ae:	f8c8 2000 	str.w	r2, [r8]
   167b2:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   167b6:	f008 f84f 	bl	1e858 <rpc_ip_client_message_free>
   167ba:	2200      	movs	r2, #0
   167bc:	f849 2027 	str.w	r2, [r9, r7, lsl #2]
   167c0:	4658      	mov	r0, fp
   167c2:	f008 f851 	bl	1e868 <rpc_ip_client_data_free>
   167c6:	f8c5 a000 	str.w	sl, [r5]
   167ca:	4620      	mov	r0, r4
   167cc:	b003      	add	sp, #12
   167ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167d2:	2416      	movs	r4, #22
   167d4:	e7ed      	b.n	167b2 <ip_interface_socketoption_get+0xba>
   167d6:	4659      	mov	r1, fp
   167d8:	980c      	ldr	r0, [sp, #48]	; 0x30
   167da:	f009 ff2e 	bl	2063a <memcpy>
   167de:	6873      	ldr	r3, [r6, #4]
   167e0:	f8c8 3000 	str.w	r3, [r8]
   167e4:	e7ec      	b.n	167c0 <ip_interface_socketoption_get+0xc8>
   167e6:	240c      	movs	r4, #12
   167e8:	e7ed      	b.n	167c6 <ip_interface_socketoption_get+0xce>
   167ea:	2416      	movs	r4, #22
   167ec:	e7ed      	b.n	167ca <ip_interface_socketoption_get+0xd2>
   167ee:	2423      	movs	r4, #35	; 0x23
   167f0:	e7eb      	b.n	167ca <ip_interface_socketoption_get+0xd2>
   167f2:	bf00      	nop
   167f4:	2001867c 	.word	0x2001867c

000167f8 <ip_interface_bind>:
   167f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   167fc:	f04f 33ff 	mov.w	r3, #4294967295
   16800:	4607      	mov	r7, r0
   16802:	4690      	mov	r8, r2
   16804:	460e      	mov	r6, r1
   16806:	9303      	str	r3, [sp, #12]
   16808:	2900      	cmp	r1, #0
   1680a:	d04e      	beq.n	168aa <ip_interface_bind+0xb2>
   1680c:	2a00      	cmp	r2, #0
   1680e:	d04c      	beq.n	168aa <ip_interface_bind+0xb2>
   16810:	f7ff fcb0 	bl	16174 <interface_socket_from_handle_get>
   16814:	4604      	mov	r4, r0
   16816:	2800      	cmp	r0, #0
   16818:	d049      	beq.n	168ae <ip_interface_bind+0xb6>
   1681a:	6803      	ldr	r3, [r0, #0]
   1681c:	b29b      	uxth	r3, r3
   1681e:	2b02      	cmp	r3, #2
   16820:	d145      	bne.n	168ae <ip_interface_bind+0xb6>
   16822:	6981      	ldr	r1, [r0, #24]
   16824:	2300      	movs	r3, #0
   16826:	f247 0205 	movw	r2, #28677	; 0x7005
   1682a:	4638      	mov	r0, r7
   1682c:	f008 fa0f 	bl	1ec4e <ip_interface_request_create>
   16830:	4605      	mov	r5, r0
   16832:	2800      	cmp	r0, #0
   16834:	d03d      	beq.n	168b2 <ip_interface_bind+0xba>
   16836:	6883      	ldr	r3, [r0, #8]
   16838:	4642      	mov	r2, r8
   1683a:	3304      	adds	r3, #4
   1683c:	6083      	str	r3, [r0, #8]
   1683e:	f100 0318 	add.w	r3, r0, #24
   16842:	9301      	str	r3, [sp, #4]
   16844:	f100 0314 	add.w	r3, r0, #20
   16848:	9300      	str	r3, [sp, #0]
   1684a:	4631      	mov	r1, r6
   1684c:	f100 0316 	add.w	r3, r0, #22
   16850:	68e0      	ldr	r0, [r4, #12]
   16852:	f008 f9d7 	bl	1ec04 <ip_addr_parse>
   16856:	bb08      	cbnz	r0, 1689c <ip_interface_bind+0xa4>
   16858:	68ab      	ldr	r3, [r5, #8]
   1685a:	8aea      	ldrh	r2, [r5, #22]
   1685c:	4e16      	ldr	r6, [pc, #88]	; (168b8 <ip_interface_bind+0xc0>)
   1685e:	4413      	add	r3, r2
   16860:	60ab      	str	r3, [r5, #8]
   16862:	6823      	ldr	r3, [r4, #0]
   16864:	f247 0205 	movw	r2, #28677	; 0x7005
   16868:	4033      	ands	r3, r6
   1686a:	f043 0303 	orr.w	r3, r3, #3
   1686e:	6023      	str	r3, [r4, #0]
   16870:	6823      	ldr	r3, [r4, #0]
   16872:	4629      	mov	r1, r5
   16874:	4033      	ands	r3, r6
   16876:	4620      	mov	r0, r4
   16878:	f043 0302 	orr.w	r3, r3, #2
   1687c:	f008 f9ff 	bl	1ec7e <ip_interface_request_send>
   16880:	b960      	cbnz	r0, 1689c <ip_interface_bind+0xa4>
   16882:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16886:	2104      	movs	r1, #4
   16888:	4638      	mov	r0, r7
   1688a:	ab03      	add	r3, sp, #12
   1688c:	f008 fa0a 	bl	1eca4 <ip_interface_wait>
   16890:	b140      	cbz	r0, 168a4 <ip_interface_bind+0xac>
   16892:	6823      	ldr	r3, [r4, #0]
   16894:	4033      	ands	r3, r6
   16896:	f043 0302 	orr.w	r3, r3, #2
   1689a:	6023      	str	r3, [r4, #0]
   1689c:	f7fc fd5c 	bl	13358 <nrf_modem_os_errno_set>
   168a0:	f04f 30ff 	mov.w	r0, #4294967295
   168a4:	b004      	add	sp, #16
   168a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   168aa:	2016      	movs	r0, #22
   168ac:	e7f6      	b.n	1689c <ip_interface_bind+0xa4>
   168ae:	2009      	movs	r0, #9
   168b0:	e7f4      	b.n	1689c <ip_interface_bind+0xa4>
   168b2:	200c      	movs	r0, #12
   168b4:	e7f2      	b.n	1689c <ip_interface_bind+0xa4>
   168b6:	bf00      	nop
   168b8:	ffff0000 	.word	0xffff0000

000168bc <ip_interface_listen>:
   168bc:	f04f 33ff 	mov.w	r3, #4294967295
   168c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   168c2:	4605      	mov	r5, r0
   168c4:	9301      	str	r3, [sp, #4]
   168c6:	f7ff fc55 	bl	16174 <interface_socket_from_handle_get>
   168ca:	4604      	mov	r4, r0
   168cc:	2800      	cmp	r0, #0
   168ce:	d03c      	beq.n	1694a <ip_interface_listen+0x8e>
   168d0:	6803      	ldr	r3, [r0, #0]
   168d2:	b29b      	uxth	r3, r3
   168d4:	2b04      	cmp	r3, #4
   168d6:	d003      	beq.n	168e0 <ip_interface_listen+0x24>
   168d8:	6803      	ldr	r3, [r0, #0]
   168da:	b29b      	uxth	r3, r3
   168dc:	2b0b      	cmp	r3, #11
   168de:	d134      	bne.n	1694a <ip_interface_listen+0x8e>
   168e0:	2100      	movs	r1, #0
   168e2:	4628      	mov	r0, r5
   168e4:	4a1c      	ldr	r2, [pc, #112]	; (16958 <ip_interface_listen+0x9c>)
   168e6:	f7ff fbed 	bl	160c4 <interface_socket_packet_handler_update>
   168ea:	4603      	mov	r3, r0
   168ec:	bb78      	cbnz	r0, 1694e <ip_interface_listen+0x92>
   168ee:	69a1      	ldr	r1, [r4, #24]
   168f0:	f247 0208 	movw	r2, #28680	; 0x7008
   168f4:	4628      	mov	r0, r5
   168f6:	f008 f9aa 	bl	1ec4e <ip_interface_request_create>
   168fa:	4601      	mov	r1, r0
   168fc:	b348      	cbz	r0, 16952 <ip_interface_listen+0x96>
   168fe:	6883      	ldr	r3, [r0, #8]
   16900:	4e16      	ldr	r6, [pc, #88]	; (1695c <ip_interface_listen+0xa0>)
   16902:	3304      	adds	r3, #4
   16904:	6083      	str	r3, [r0, #8]
   16906:	6823      	ldr	r3, [r4, #0]
   16908:	f247 0208 	movw	r2, #28680	; 0x7008
   1690c:	4033      	ands	r3, r6
   1690e:	f043 0306 	orr.w	r3, r3, #6
   16912:	6023      	str	r3, [r4, #0]
   16914:	6823      	ldr	r3, [r4, #0]
   16916:	4620      	mov	r0, r4
   16918:	4033      	ands	r3, r6
   1691a:	f043 0304 	orr.w	r3, r3, #4
   1691e:	f008 f9ae 	bl	1ec7e <ip_interface_request_send>
   16922:	b960      	cbnz	r0, 1693e <ip_interface_listen+0x82>
   16924:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16928:	2107      	movs	r1, #7
   1692a:	4628      	mov	r0, r5
   1692c:	ab01      	add	r3, sp, #4
   1692e:	f008 f9b9 	bl	1eca4 <ip_interface_wait>
   16932:	b140      	cbz	r0, 16946 <ip_interface_listen+0x8a>
   16934:	6823      	ldr	r3, [r4, #0]
   16936:	4033      	ands	r3, r6
   16938:	f043 0304 	orr.w	r3, r3, #4
   1693c:	6023      	str	r3, [r4, #0]
   1693e:	f7fc fd0b 	bl	13358 <nrf_modem_os_errno_set>
   16942:	f04f 30ff 	mov.w	r0, #4294967295
   16946:	b002      	add	sp, #8
   16948:	bd70      	pop	{r4, r5, r6, pc}
   1694a:	2009      	movs	r0, #9
   1694c:	e7f7      	b.n	1693e <ip_interface_listen+0x82>
   1694e:	2023      	movs	r0, #35	; 0x23
   16950:	e7f5      	b.n	1693e <ip_interface_listen+0x82>
   16952:	200c      	movs	r0, #12
   16954:	e7f3      	b.n	1693e <ip_interface_listen+0x82>
   16956:	bf00      	nop
   16958:	0001ebed 	.word	0x0001ebed
   1695c:	ffff0000 	.word	0xffff0000

00016960 <ip_interface_accept>:
   16960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16964:	f04f 33ff 	mov.w	r3, #4294967295
   16968:	2600      	movs	r6, #0
   1696a:	4680      	mov	r8, r0
   1696c:	460f      	mov	r7, r1
   1696e:	4692      	mov	sl, r2
   16970:	e9cd 6300 	strd	r6, r3, [sp]
   16974:	f7ff fbfe 	bl	16174 <interface_socket_from_handle_get>
   16978:	4604      	mov	r4, r0
   1697a:	2800      	cmp	r0, #0
   1697c:	f000 80b2 	beq.w	16ae4 <ip_interface_accept+0x184>
   16980:	6803      	ldr	r3, [r0, #0]
   16982:	b29b      	uxth	r3, r3
   16984:	2b07      	cmp	r3, #7
   16986:	f040 80b0 	bne.w	16aea <ip_interface_accept+0x18a>
   1698a:	6803      	ldr	r3, [r0, #0]
   1698c:	f013 5980 	ands.w	r9, r3, #268435456	; 0x10000000
   16990:	d165      	bne.n	16a5e <ip_interface_accept+0xfe>
   16992:	6803      	ldr	r3, [r0, #0]
   16994:	03db      	lsls	r3, r3, #15
   16996:	d466      	bmi.n	16a66 <ip_interface_accept+0x106>
   16998:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1699c:	4640      	mov	r0, r8
   1699e:	4611      	mov	r1, r2
   169a0:	ab01      	add	r3, sp, #4
   169a2:	f008 f97f 	bl	1eca4 <ip_interface_wait>
   169a6:	4605      	mov	r5, r0
   169a8:	6826      	ldr	r6, [r4, #0]
   169aa:	f416 3680 	ands.w	r6, r6, #65536	; 0x10000
   169ae:	d05c      	beq.n	16a6a <ip_interface_accept+0x10a>
   169b0:	4668      	mov	r0, sp
   169b2:	4a59      	ldr	r2, [pc, #356]	; (16b18 <ip_interface_accept+0x1b8>)
   169b4:	6921      	ldr	r1, [r4, #16]
   169b6:	f7ff fb53 	bl	16060 <interface_socket_allocate>
   169ba:	9b00      	ldr	r3, [sp, #0]
   169bc:	4606      	mov	r6, r0
   169be:	2b00      	cmp	r3, #0
   169c0:	f000 8095 	beq.w	16aee <ip_interface_accept+0x18e>
   169c4:	6962      	ldr	r2, [r4, #20]
   169c6:	69a1      	ldr	r1, [r4, #24]
   169c8:	615a      	str	r2, [r3, #20]
   169ca:	68e2      	ldr	r2, [r4, #12]
   169cc:	4640      	mov	r0, r8
   169ce:	60da      	str	r2, [r3, #12]
   169d0:	6922      	ldr	r2, [r4, #16]
   169d2:	611a      	str	r2, [r3, #16]
   169d4:	2300      	movs	r3, #0
   169d6:	f247 020c 	movw	r2, #28684	; 0x700c
   169da:	f008 f938 	bl	1ec4e <ip_interface_request_create>
   169de:	4601      	mov	r1, r0
   169e0:	2800      	cmp	r0, #0
   169e2:	f000 8084 	beq.w	16aee <ip_interface_accept+0x18e>
   169e6:	6823      	ldr	r3, [r4, #0]
   169e8:	f8df b134 	ldr.w	fp, [pc, #308]	; 16b20 <ip_interface_accept+0x1c0>
   169ec:	f247 020c 	movw	r2, #28684	; 0x700c
   169f0:	ea03 030b 	and.w	r3, r3, fp
   169f4:	f043 0308 	orr.w	r3, r3, #8
   169f8:	6023      	str	r3, [r4, #0]
   169fa:	6823      	ldr	r3, [r4, #0]
   169fc:	4620      	mov	r0, r4
   169fe:	ea03 030b 	and.w	r3, r3, fp
   16a02:	f043 0307 	orr.w	r3, r3, #7
   16a06:	f008 f93a 	bl	1ec7e <ip_interface_request_send>
   16a0a:	4605      	mov	r5, r0
   16a0c:	b9d0      	cbnz	r0, 16a44 <ip_interface_accept+0xe4>
   16a0e:	6823      	ldr	r3, [r4, #0]
   16a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16a14:	ea23 0309 	bic.w	r3, r3, r9
   16a18:	6023      	str	r3, [r4, #0]
   16a1a:	2109      	movs	r1, #9
   16a1c:	ab01      	add	r3, sp, #4
   16a1e:	4640      	mov	r0, r8
   16a20:	f008 f940 	bl	1eca4 <ip_interface_wait>
   16a24:	6823      	ldr	r3, [r4, #0]
   16a26:	4605      	mov	r5, r0
   16a28:	ea43 0309 	orr.w	r3, r3, r9
   16a2c:	6023      	str	r3, [r4, #0]
   16a2e:	b1f0      	cbz	r0, 16a6e <ip_interface_accept+0x10e>
   16a30:	6823      	ldr	r3, [r4, #0]
   16a32:	ea03 030b 	and.w	r3, r3, fp
   16a36:	f043 0307 	orr.w	r3, r3, #7
   16a3a:	6023      	str	r3, [r4, #0]
   16a3c:	6823      	ldr	r3, [r4, #0]
   16a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   16a42:	6023      	str	r3, [r4, #0]
   16a44:	9b00      	ldr	r3, [sp, #0]
   16a46:	b113      	cbz	r3, 16a4e <ip_interface_accept+0xee>
   16a48:	4630      	mov	r0, r6
   16a4a:	f7ff fb2f 	bl	160ac <interface_socket_free>
   16a4e:	4628      	mov	r0, r5
   16a50:	f7fc fc82 	bl	13358 <nrf_modem_os_errno_set>
   16a54:	f04f 30ff 	mov.w	r0, #4294967295
   16a58:	b003      	add	sp, #12
   16a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a5e:	2523      	movs	r5, #35	; 0x23
   16a60:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
   16a64:	e7a0      	b.n	169a8 <ip_interface_accept+0x48>
   16a66:	2509      	movs	r5, #9
   16a68:	e79e      	b.n	169a8 <ip_interface_accept+0x48>
   16a6a:	2d00      	cmp	r5, #0
   16a6c:	d1ea      	bne.n	16a44 <ip_interface_accept+0xe4>
   16a6e:	4d2b      	ldr	r5, [pc, #172]	; (16b1c <ip_interface_accept+0x1bc>)
   16a70:	9b00      	ldr	r3, [sp, #0]
   16a72:	f855 1028 	ldr.w	r1, [r5, r8, lsl #2]
   16a76:	698a      	ldr	r2, [r1, #24]
   16a78:	619a      	str	r2, [r3, #24]
   16a7a:	b197      	cbz	r7, 16aa2 <ip_interface_accept+0x142>
   16a7c:	68db      	ldr	r3, [r3, #12]
   16a7e:	2b0a      	cmp	r3, #10
   16a80:	d137      	bne.n	16af2 <ip_interface_accept+0x192>
   16a82:	f8da 2000 	ldr.w	r2, [sl]
   16a86:	2a24      	cmp	r2, #36	; 0x24
   16a88:	d10b      	bne.n	16aa2 <ip_interface_accept+0x142>
   16a8a:	703a      	strb	r2, [r7, #0]
   16a8c:	607b      	str	r3, [r7, #4]
   16a8e:	7f4a      	ldrb	r2, [r1, #29]
   16a90:	7f0b      	ldrb	r3, [r1, #28]
   16a92:	3120      	adds	r1, #32
   16a94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16a98:	2210      	movs	r2, #16
   16a9a:	813b      	strh	r3, [r7, #8]
   16a9c:	18b8      	adds	r0, r7, r2
   16a9e:	f009 fdcc 	bl	2063a <memcpy>
   16aa2:	9b00      	ldr	r3, [sp, #0]
   16aa4:	491e      	ldr	r1, [pc, #120]	; (16b20 <ip_interface_accept+0x1c0>)
   16aa6:	681a      	ldr	r2, [r3, #0]
   16aa8:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
   16aac:	400a      	ands	r2, r1
   16aae:	f042 0205 	orr.w	r2, r2, #5
   16ab2:	601a      	str	r2, [r3, #0]
   16ab4:	681a      	ldr	r2, [r3, #0]
   16ab6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   16aba:	601a      	str	r2, [r3, #0]
   16abc:	681a      	ldr	r2, [r3, #0]
   16abe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   16ac2:	601a      	str	r2, [r3, #0]
   16ac4:	6823      	ldr	r3, [r4, #0]
   16ac6:	400b      	ands	r3, r1
   16ac8:	f043 0307 	orr.w	r3, r3, #7
   16acc:	6023      	str	r3, [r4, #0]
   16ace:	6823      	ldr	r3, [r4, #0]
   16ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   16ad4:	6023      	str	r3, [r4, #0]
   16ad6:	f007 febf 	bl	1e858 <rpc_ip_client_message_free>
   16ada:	2300      	movs	r3, #0
   16adc:	4630      	mov	r0, r6
   16ade:	f845 3028 	str.w	r3, [r5, r8, lsl #2]
   16ae2:	e7b9      	b.n	16a58 <ip_interface_accept+0xf8>
   16ae4:	2509      	movs	r5, #9
   16ae6:	4606      	mov	r6, r0
   16ae8:	e7ac      	b.n	16a44 <ip_interface_accept+0xe4>
   16aea:	2509      	movs	r5, #9
   16aec:	e7aa      	b.n	16a44 <ip_interface_accept+0xe4>
   16aee:	250c      	movs	r5, #12
   16af0:	e7a8      	b.n	16a44 <ip_interface_accept+0xe4>
   16af2:	2b02      	cmp	r3, #2
   16af4:	d1d5      	bne.n	16aa2 <ip_interface_accept+0x142>
   16af6:	f8da 2000 	ldr.w	r2, [sl]
   16afa:	2a10      	cmp	r2, #16
   16afc:	d1d1      	bne.n	16aa2 <ip_interface_accept+0x142>
   16afe:	703a      	strb	r2, [r7, #0]
   16b00:	607b      	str	r3, [r7, #4]
   16b02:	7f4a      	ldrb	r2, [r1, #29]
   16b04:	7f0b      	ldrb	r3, [r1, #28]
   16b06:	f107 000c 	add.w	r0, r7, #12
   16b0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16b0e:	813b      	strh	r3, [r7, #8]
   16b10:	2204      	movs	r2, #4
   16b12:	3120      	adds	r1, #32
   16b14:	e7c3      	b.n	16a9e <ip_interface_accept+0x13e>
   16b16:	bf00      	nop
   16b18:	0001ebed 	.word	0x0001ebed
   16b1c:	2001867c 	.word	0x2001867c
   16b20:	ffff0000 	.word	0xffff0000

00016b24 <ip_interface_getaddrinfo>:
   16b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b28:	2601      	movs	r6, #1
   16b2a:	4607      	mov	r7, r0
   16b2c:	4608      	mov	r0, r1
   16b2e:	2100      	movs	r1, #0
   16b30:	b085      	sub	sp, #20
   16b32:	4614      	mov	r4, r2
   16b34:	9300      	str	r3, [sp, #0]
   16b36:	4a5e      	ldr	r2, [pc, #376]	; (16cb0 <ip_interface_getaddrinfo+0x18c>)
   16b38:	4b5e      	ldr	r3, [pc, #376]	; (16cb4 <ip_interface_getaddrinfo+0x190>)
   16b3a:	6016      	str	r6, [r2, #0]
   16b3c:	601e      	str	r6, [r3, #0]
   16b3e:	4e5e      	ldr	r6, [pc, #376]	; (16cb8 <ip_interface_getaddrinfo+0x194>)
   16b40:	4d5e      	ldr	r5, [pc, #376]	; (16cbc <ip_interface_getaddrinfo+0x198>)
   16b42:	7836      	ldrb	r6, [r6, #0]
   16b44:	469b      	mov	fp, r3
   16b46:	8029      	strh	r1, [r5, #0]
   16b48:	9201      	str	r2, [sp, #4]
   16b4a:	2e00      	cmp	r6, #0
   16b4c:	f000 80a9 	beq.w	16ca2 <ip_interface_getaddrinfo+0x17e>
   16b50:	b150      	cbz	r0, 16b68 <ip_interface_getaddrinfo+0x44>
   16b52:	220a      	movs	r2, #10
   16b54:	f004 fade 	bl	1b114 <strtol>
   16b58:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   16b5c:	1e42      	subs	r2, r0, #1
   16b5e:	429a      	cmp	r2, r3
   16b60:	f200 80a1 	bhi.w	16ca6 <ip_interface_getaddrinfo+0x182>
   16b64:	ba40      	rev16	r0, r0
   16b66:	8028      	strh	r0, [r5, #0]
   16b68:	4e55      	ldr	r6, [pc, #340]	; (16cc0 <ip_interface_getaddrinfo+0x19c>)
   16b6a:	f8d6 a000 	ldr.w	sl, [r6]
   16b6e:	f1ba 0f00 	cmp.w	sl, #0
   16b72:	f040 809a 	bne.w	16caa <ip_interface_getaddrinfo+0x186>
   16b76:	4953      	ldr	r1, [pc, #332]	; (16cc4 <ip_interface_getaddrinfo+0x1a0>)
   16b78:	4a53      	ldr	r2, [pc, #332]	; (16cc8 <ip_interface_getaddrinfo+0x1a4>)
   16b7a:	4689      	mov	r9, r1
   16b7c:	4690      	mov	r8, r2
   16b7e:	f8c1 a000 	str.w	sl, [r1]
   16b82:	f8c2 a000 	str.w	sl, [r2]
   16b86:	b11f      	cbz	r7, 16b90 <ip_interface_getaddrinfo+0x6c>
   16b88:	4638      	mov	r0, r7
   16b8a:	f7f6 f9d3 	bl	cf34 <strlen>
   16b8e:	4682      	mov	sl, r0
   16b90:	2c00      	cmp	r4, #0
   16b92:	d142      	bne.n	16c1a <ip_interface_getaddrinfo+0xf6>
   16b94:	f04f 31ff 	mov.w	r1, #4294967295
   16b98:	4653      	mov	r3, sl
   16b9a:	f247 020d 	movw	r2, #28685	; 0x700d
   16b9e:	4608      	mov	r0, r1
   16ba0:	f008 f855 	bl	1ec4e <ip_interface_request_create>
   16ba4:	4605      	mov	r5, r0
   16ba6:	2800      	cmp	r0, #0
   16ba8:	d074      	beq.n	16c94 <ip_interface_getaddrinfo+0x170>
   16baa:	2c00      	cmp	r4, #0
   16bac:	d064      	beq.n	16c78 <ip_interface_getaddrinfo+0x154>
   16bae:	6862      	ldr	r2, [r4, #4]
   16bb0:	f022 0108 	bic.w	r1, r2, #8
   16bb4:	2902      	cmp	r1, #2
   16bb6:	d049      	beq.n	16c4c <ip_interface_getaddrinfo+0x128>
   16bb8:	2a05      	cmp	r2, #5
   16bba:	d047      	beq.n	16c4c <ip_interface_getaddrinfo+0x128>
   16bbc:	202f      	movs	r0, #47	; 0x2f
   16bbe:	f7fc fbcb 	bl	13358 <nrf_modem_os_errno_set>
   16bc2:	f04f 34ff 	mov.w	r4, #4294967295
   16bc6:	68aa      	ldr	r2, [r5, #8]
   16bc8:	3210      	adds	r2, #16
   16bca:	60aa      	str	r2, [r5, #8]
   16bcc:	b12f      	cbz	r7, 16bda <ip_interface_getaddrinfo+0xb6>
   16bce:	6828      	ldr	r0, [r5, #0]
   16bd0:	b118      	cbz	r0, 16bda <ip_interface_getaddrinfo+0xb6>
   16bd2:	4652      	mov	r2, sl
   16bd4:	4639      	mov	r1, r7
   16bd6:	f009 fd30 	bl	2063a <memcpy>
   16bda:	2c00      	cmp	r4, #0
   16bdc:	d15c      	bne.n	16c98 <ip_interface_getaddrinfo+0x174>
   16bde:	2301      	movs	r3, #1
   16be0:	f247 010d 	movw	r1, #28685	; 0x700d
   16be4:	4628      	mov	r0, r5
   16be6:	6033      	str	r3, [r6, #0]
   16be8:	f007 fe22 	bl	1e830 <rpc_ip_client_request_send>
   16bec:	2800      	cmp	r0, #0
   16bee:	d156      	bne.n	16c9e <ip_interface_getaddrinfo+0x17a>
   16bf0:	f04f 33ff 	mov.w	r3, #4294967295
   16bf4:	9303      	str	r3, [sp, #12]
   16bf6:	4628      	mov	r0, r5
   16bf8:	a903      	add	r1, sp, #12
   16bfa:	f7fc faf5 	bl	131e8 <nrf_modem_os_timedwait>
   16bfe:	6833      	ldr	r3, [r6, #0]
   16c00:	2b01      	cmp	r3, #1
   16c02:	d0f8      	beq.n	16bf6 <ip_interface_getaddrinfo+0xd2>
   16c04:	f8d8 3000 	ldr.w	r3, [r8]
   16c08:	2b00      	cmp	r3, #0
   16c0a:	d03b      	beq.n	16c84 <ip_interface_getaddrinfo+0x160>
   16c0c:	f8d8 4000 	ldr.w	r4, [r8]
   16c10:	2c00      	cmp	r4, #0
   16c12:	d03b      	beq.n	16c8c <ip_interface_getaddrinfo+0x168>
   16c14:	2300      	movs	r3, #0
   16c16:	6033      	str	r3, [r6, #0]
   16c18:	e038      	b.n	16c8c <ip_interface_getaddrinfo+0x168>
   16c1a:	69e2      	ldr	r2, [r4, #28]
   16c1c:	2a00      	cmp	r2, #0
   16c1e:	d0b9      	beq.n	16b94 <ip_interface_getaddrinfo+0x70>
   16c20:	6851      	ldr	r1, [r2, #4]
   16c22:	2966      	cmp	r1, #102	; 0x66
   16c24:	d1b6      	bne.n	16b94 <ip_interface_getaddrinfo+0x70>
   16c26:	6891      	ldr	r1, [r2, #8]
   16c28:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   16c2c:	d1b2      	bne.n	16b94 <ip_interface_getaddrinfo+0x70>
   16c2e:	f240 2102 	movw	r1, #514	; 0x202
   16c32:	68d0      	ldr	r0, [r2, #12]
   16c34:	4288      	cmp	r0, r1
   16c36:	d1ad      	bne.n	16b94 <ip_interface_getaddrinfo+0x70>
   16c38:	6991      	ldr	r1, [r2, #24]
   16c3a:	2900      	cmp	r1, #0
   16c3c:	d0aa      	beq.n	16b94 <ip_interface_getaddrinfo+0x70>
   16c3e:	6860      	ldr	r0, [r4, #4]
   16c40:	f002 f910 	bl	18e64 <pdn_interface_pdn_id_get>
   16c44:	1c43      	adds	r3, r0, #1
   16c46:	d0a5      	beq.n	16b94 <ip_interface_getaddrinfo+0x70>
   16c48:	4601      	mov	r1, r0
   16c4a:	e7a5      	b.n	16b98 <ip_interface_getaddrinfo+0x74>
   16c4c:	68a1      	ldr	r1, [r4, #8]
   16c4e:	2902      	cmp	r1, #2
   16c50:	bf08      	it	eq
   16c52:	9b01      	ldreq	r3, [sp, #4]
   16c54:	f8cb 1000 	str.w	r1, [fp]
   16c58:	bf08      	it	eq
   16c5a:	6019      	streq	r1, [r3, #0]
   16c5c:	2a05      	cmp	r2, #5
   16c5e:	d003      	beq.n	16c68 <ip_interface_getaddrinfo+0x144>
   16c60:	2a0a      	cmp	r2, #10
   16c62:	bf0c      	ite	eq
   16c64:	2202      	moveq	r2, #2
   16c66:	2201      	movne	r2, #1
   16c68:	61aa      	str	r2, [r5, #24]
   16c6a:	68e2      	ldr	r2, [r4, #12]
   16c6c:	61e9      	str	r1, [r5, #28]
   16c6e:	622a      	str	r2, [r5, #32]
   16c70:	6822      	ldr	r2, [r4, #0]
   16c72:	2400      	movs	r4, #0
   16c74:	616a      	str	r2, [r5, #20]
   16c76:	e7a6      	b.n	16bc6 <ip_interface_getaddrinfo+0xa2>
   16c78:	2210      	movs	r2, #16
   16c7a:	4621      	mov	r1, r4
   16c7c:	3014      	adds	r0, #20
   16c7e:	f009 fce9 	bl	20654 <memset>
   16c82:	e7a0      	b.n	16bc6 <ip_interface_getaddrinfo+0xa2>
   16c84:	f8d9 3000 	ldr.w	r3, [r9]
   16c88:	9a00      	ldr	r2, [sp, #0]
   16c8a:	6013      	str	r3, [r2, #0]
   16c8c:	4620      	mov	r0, r4
   16c8e:	b005      	add	sp, #20
   16c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c94:	240c      	movs	r4, #12
   16c96:	e7bd      	b.n	16c14 <ip_interface_getaddrinfo+0xf0>
   16c98:	f04f 34ff 	mov.w	r4, #4294967295
   16c9c:	e7ba      	b.n	16c14 <ip_interface_getaddrinfo+0xf0>
   16c9e:	2423      	movs	r4, #35	; 0x23
   16ca0:	e7b8      	b.n	16c14 <ip_interface_getaddrinfo+0xf0>
   16ca2:	2470      	movs	r4, #112	; 0x70
   16ca4:	e7f2      	b.n	16c8c <ip_interface_getaddrinfo+0x168>
   16ca6:	2416      	movs	r4, #22
   16ca8:	e7f0      	b.n	16c8c <ip_interface_getaddrinfo+0x168>
   16caa:	2473      	movs	r4, #115	; 0x73
   16cac:	e7ee      	b.n	16c8c <ip_interface_getaddrinfo+0x168>
   16cae:	bf00      	nop
   16cb0:	20018668 	.word	0x20018668
   16cb4:	2001866c 	.word	0x2001866c
   16cb8:	2001bf79 	.word	0x2001bf79
   16cbc:	2001900c 	.word	0x2001900c
   16cc0:	20018674 	.word	0x20018674
   16cc4:	20018678 	.word	0x20018678
   16cc8:	20018670 	.word	0x20018670

00016ccc <ip_interface_freeaddrinfo>:
   16ccc:	b538      	push	{r3, r4, r5, lr}
   16cce:	4d0a      	ldr	r5, [pc, #40]	; (16cf8 <ip_interface_freeaddrinfo+0x2c>)
   16cd0:	4604      	mov	r4, r0
   16cd2:	682a      	ldr	r2, [r5, #0]
   16cd4:	2a02      	cmp	r2, #2
   16cd6:	d10e      	bne.n	16cf6 <ip_interface_freeaddrinfo+0x2a>
   16cd8:	b148      	cbz	r0, 16cee <ip_interface_freeaddrinfo+0x22>
   16cda:	6940      	ldr	r0, [r0, #20]
   16cdc:	f7fc fce0 	bl	136a0 <nrf_modem_os_free>
   16ce0:	69a0      	ldr	r0, [r4, #24]
   16ce2:	b108      	cbz	r0, 16ce8 <ip_interface_freeaddrinfo+0x1c>
   16ce4:	f7fc fcdc 	bl	136a0 <nrf_modem_os_free>
   16ce8:	4620      	mov	r0, r4
   16cea:	f7fc fcd9 	bl	136a0 <nrf_modem_os_free>
   16cee:	2300      	movs	r3, #0
   16cf0:	4a02      	ldr	r2, [pc, #8]	; (16cfc <ip_interface_freeaddrinfo+0x30>)
   16cf2:	602b      	str	r3, [r5, #0]
   16cf4:	6013      	str	r3, [r2, #0]
   16cf6:	bd38      	pop	{r3, r4, r5, pc}
   16cf8:	20018674 	.word	0x20018674
   16cfc:	20018670 	.word	0x20018670

00016d00 <rpc_ip_event_handler>:
   16d00:	f248 030d 	movw	r3, #32781	; 0x800d
   16d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d08:	4299      	cmp	r1, r3
   16d0a:	4604      	mov	r4, r0
   16d0c:	460e      	mov	r6, r1
   16d0e:	b089      	sub	sp, #36	; 0x24
   16d10:	d038      	beq.n	16d84 <rpc_ip_event_handler+0x84>
   16d12:	f248 030f 	movw	r3, #32783	; 0x800f
   16d16:	4299      	cmp	r1, r3
   16d18:	f000 80c8 	beq.w	16eac <rpc_ip_event_handler+0x1ac>
   16d1c:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   16d20:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   16d24:	68c0      	ldr	r0, [r0, #12]
   16d26:	f040 80ce 	bne.w	16ec6 <rpc_ip_event_handler+0x1c6>
   16d2a:	f7ff fa0b 	bl	16144 <interface_from_internal_id_search>
   16d2e:	4607      	mov	r7, r0
   16d30:	4638      	mov	r0, r7
   16d32:	f7ff fa1f 	bl	16174 <interface_socket_from_handle_get>
   16d36:	4605      	mov	r5, r0
   16d38:	2800      	cmp	r0, #0
   16d3a:	d056      	beq.n	16dea <rpc_ip_event_handler+0xea>
   16d3c:	4601      	mov	r1, r0
   16d3e:	4633      	mov	r3, r6
   16d40:	4622      	mov	r2, r4
   16d42:	4638      	mov	r0, r7
   16d44:	f000 fd94 	bl	17870 <tls_rpc_ip_event_handler>
   16d48:	2800      	cmp	r0, #0
   16d4a:	f000 80ba 	beq.w	16ec2 <rpc_ip_event_handler+0x1c2>
   16d4e:	f248 030c 	movw	r3, #32780	; 0x800c
   16d52:	429e      	cmp	r6, r3
   16d54:	f200 80b9 	bhi.w	16eca <rpc_ip_event_handler+0x1ca>
   16d58:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   16d5c:	d945      	bls.n	16dea <rpc_ip_event_handler+0xea>
   16d5e:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   16d62:	3e01      	subs	r6, #1
   16d64:	2e0b      	cmp	r6, #11
   16d66:	d840      	bhi.n	16dea <rpc_ip_event_handler+0xea>
   16d68:	e8df f016 	tbh	[pc, r6, lsl #1]
   16d6c:	013e00f1 	.word	0x013e00f1
   16d70:	01f501e6 	.word	0x01f501e6
   16d74:	01b9012f 	.word	0x01b9012f
   16d78:	015d01b9 	.word	0x015d01b9
   16d7c:	003f00ff 	.word	0x003f00ff
   16d80:	0188003f 	.word	0x0188003f
   16d84:	4baf      	ldr	r3, [pc, #700]	; (17044 <rpc_ip_event_handler+0x344>)
   16d86:	681a      	ldr	r2, [r3, #0]
   16d88:	9303      	str	r3, [sp, #12]
   16d8a:	2a01      	cmp	r2, #1
   16d8c:	d12d      	bne.n	16dea <rpc_ip_event_handler+0xea>
   16d8e:	6943      	ldr	r3, [r0, #20]
   16d90:	2b00      	cmp	r3, #0
   16d92:	f040 8083 	bne.w	16e9c <rpc_ip_event_handler+0x19c>
   16d96:	f8d0 9018 	ldr.w	r9, [r0, #24]
   16d9a:	f8d0 a000 	ldr.w	sl, [r0]
   16d9e:	ea4f 1349 	mov.w	r3, r9, lsl #5
   16da2:	4618      	mov	r0, r3
   16da4:	9301      	str	r3, [sp, #4]
   16da6:	f7fc fc6b 	bl	13680 <nrf_modem_os_alloc>
   16daa:	4680      	mov	r8, r0
   16dac:	b310      	cbz	r0, 16df4 <rpc_ip_event_handler+0xf4>
   16dae:	2024      	movs	r0, #36	; 0x24
   16db0:	fb00 f009 	mul.w	r0, r0, r9
   16db4:	f7fc fc64 	bl	13680 <nrf_modem_os_alloc>
   16db8:	b1f0      	cbz	r0, 16df8 <rpc_ip_event_handler+0xf8>
   16dba:	4605      	mov	r5, r0
   16dbc:	2704      	movs	r7, #4
   16dbe:	eb00 03c9 	add.w	r3, r0, r9, lsl #3
   16dc2:	f108 0620 	add.w	r6, r8, #32
   16dc6:	9302      	str	r3, [sp, #8]
   16dc8:	9b02      	ldr	r3, [sp, #8]
   16dca:	42ab      	cmp	r3, r5
   16dcc:	d118      	bne.n	16e00 <rpc_ip_event_handler+0x100>
   16dce:	f1b9 0f00 	cmp.w	r9, #0
   16dd2:	d004      	beq.n	16dde <rpc_ip_event_handler+0xde>
   16dd4:	2200      	movs	r2, #0
   16dd6:	9b01      	ldr	r3, [sp, #4]
   16dd8:	4443      	add	r3, r8
   16dda:	f843 2c04 	str.w	r2, [r3, #-4]
   16dde:	4b9a      	ldr	r3, [pc, #616]	; (17048 <rpc_ip_event_handler+0x348>)
   16de0:	f8c3 8000 	str.w	r8, [r3]
   16de4:	2302      	movs	r3, #2
   16de6:	9a03      	ldr	r2, [sp, #12]
   16de8:	6013      	str	r3, [r2, #0]
   16dea:	6820      	ldr	r0, [r4, #0]
   16dec:	2800      	cmp	r0, #0
   16dee:	f040 8173 	bne.w	170d8 <rpc_ip_event_handler+0x3d8>
   16df2:	e066      	b.n	16ec2 <rpc_ip_event_handler+0x1c2>
   16df4:	f7fc fc54 	bl	136a0 <nrf_modem_os_free>
   16df8:	220c      	movs	r2, #12
   16dfa:	4b94      	ldr	r3, [pc, #592]	; (1704c <rpc_ip_event_handler+0x34c>)
   16dfc:	601a      	str	r2, [r3, #0]
   16dfe:	e7ee      	b.n	16dde <rpc_ip_event_handler+0xde>
   16e00:	f85a 3007 	ldr.w	r3, [sl, r7]
   16e04:	f846 3c20 	str.w	r3, [r6, #-32]
   16e08:	eb0a 0307 	add.w	r3, sl, r7
   16e0c:	685a      	ldr	r2, [r3, #4]
   16e0e:	f8b3 b012 	ldrh.w	fp, [r3, #18]
   16e12:	2a02      	cmp	r2, #2
   16e14:	bf0c      	ite	eq
   16e16:	220a      	moveq	r2, #10
   16e18:	2202      	movne	r2, #2
   16e1a:	f846 2c1c 	str.w	r2, [r6, #-28]
   16e1e:	4a8c      	ldr	r2, [pc, #560]	; (17050 <rpc_ip_event_handler+0x350>)
   16e20:	3714      	adds	r7, #20
   16e22:	6812      	ldr	r2, [r2, #0]
   16e24:	eb0a 0107 	add.w	r1, sl, r7
   16e28:	f846 2c18 	str.w	r2, [r6, #-24]
   16e2c:	4a89      	ldr	r2, [pc, #548]	; (17054 <rpc_ip_event_handler+0x354>)
   16e2e:	6812      	ldr	r2, [r2, #0]
   16e30:	f846 2c14 	str.w	r2, [r6, #-20]
   16e34:	8a1a      	ldrh	r2, [r3, #16]
   16e36:	4b88      	ldr	r3, [pc, #544]	; (17058 <rpc_ip_event_handler+0x358>)
   16e38:	2a04      	cmp	r2, #4
   16e3a:	881b      	ldrh	r3, [r3, #0]
   16e3c:	f846 2c10 	str.w	r2, [r6, #-16]
   16e40:	f846 5c0c 	str.w	r5, [r6, #-12]
   16e44:	d122      	bne.n	16e8c <rpc_ip_event_handler+0x18c>
   16e46:	2002      	movs	r0, #2
   16e48:	6068      	str	r0, [r5, #4]
   16e4a:	2010      	movs	r0, #16
   16e4c:	812b      	strh	r3, [r5, #8]
   16e4e:	7028      	strb	r0, [r5, #0]
   16e50:	f105 000c 	add.w	r0, r5, #12
   16e54:	f009 fbf1 	bl	2063a <memcpy>
   16e58:	f856 3c10 	ldr.w	r3, [r6, #-16]
   16e5c:	f10b 0001 	add.w	r0, fp, #1
   16e60:	441f      	add	r7, r3
   16e62:	f7fc fc0d 	bl	13680 <nrf_modem_os_alloc>
   16e66:	f846 0c08 	str.w	r0, [r6, #-8]
   16e6a:	b148      	cbz	r0, 16e80 <rpc_ip_event_handler+0x180>
   16e6c:	465a      	mov	r2, fp
   16e6e:	eb0a 0107 	add.w	r1, sl, r7
   16e72:	f009 fbe2 	bl	2063a <memcpy>
   16e76:	2200      	movs	r2, #0
   16e78:	f856 3c08 	ldr.w	r3, [r6, #-8]
   16e7c:	f803 200b 	strb.w	r2, [r3, fp]
   16e80:	f846 6c04 	str.w	r6, [r6, #-4]
   16e84:	445f      	add	r7, fp
   16e86:	3620      	adds	r6, #32
   16e88:	3508      	adds	r5, #8
   16e8a:	e79d      	b.n	16dc8 <rpc_ip_event_handler+0xc8>
   16e8c:	200a      	movs	r0, #10
   16e8e:	6068      	str	r0, [r5, #4]
   16e90:	2024      	movs	r0, #36	; 0x24
   16e92:	812b      	strh	r3, [r5, #8]
   16e94:	7028      	strb	r0, [r5, #0]
   16e96:	f105 0010 	add.w	r0, r5, #16
   16e9a:	e7db      	b.n	16e54 <rpc_ip_event_handler+0x154>
   16e9c:	2b10      	cmp	r3, #16
   16e9e:	bf8e      	itee	hi
   16ea0:	232d      	movhi	r3, #45	; 0x2d
   16ea2:	4a6e      	ldrls	r2, [pc, #440]	; (1705c <rpc_ip_event_handler+0x35c>)
   16ea4:	56d3      	ldrsbls	r3, [r2, r3]
   16ea6:	4a69      	ldr	r2, [pc, #420]	; (1704c <rpc_ip_event_handler+0x34c>)
   16ea8:	6013      	str	r3, [r2, #0]
   16eaa:	e79b      	b.n	16de4 <rpc_ip_event_handler+0xe4>
   16eac:	6943      	ldr	r3, [r0, #20]
   16eae:	2b10      	cmp	r3, #16
   16eb0:	bf8e      	itee	hi
   16eb2:	232d      	movhi	r3, #45	; 0x2d
   16eb4:	4a69      	ldrls	r2, [pc, #420]	; (1705c <rpc_ip_event_handler+0x35c>)
   16eb6:	56d3      	ldrsbls	r3, [r2, r3]
   16eb8:	4a69      	ldr	r2, [pc, #420]	; (17060 <rpc_ip_event_handler+0x360>)
   16eba:	6013      	str	r3, [r2, #0]
   16ebc:	2201      	movs	r2, #1
   16ebe:	4b69      	ldr	r3, [pc, #420]	; (17064 <rpc_ip_event_handler+0x364>)
   16ec0:	701a      	strb	r2, [r3, #0]
   16ec2:	2000      	movs	r0, #0
   16ec4:	e04e      	b.n	16f64 <rpc_ip_event_handler+0x264>
   16ec6:	0c07      	lsrs	r7, r0, #16
   16ec8:	e732      	b.n	16d30 <rpc_ip_event_handler+0x30>
   16eca:	f249 0302 	movw	r3, #36866	; 0x9002
   16ece:	429e      	cmp	r6, r3
   16ed0:	f000 80ca 	beq.w	17068 <rpc_ip_event_handler+0x368>
   16ed4:	f249 0303 	movw	r3, #36867	; 0x9003
   16ed8:	429e      	cmp	r6, r3
   16eda:	d055      	beq.n	16f88 <rpc_ip_event_handler+0x288>
   16edc:	f249 0301 	movw	r3, #36865	; 0x9001
   16ee0:	429e      	cmp	r6, r3
   16ee2:	d182      	bne.n	16dea <rpc_ip_event_handler+0xea>
   16ee4:	682e      	ldr	r6, [r5, #0]
   16ee6:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   16eea:	f000 80f4 	beq.w	170d6 <rpc_ip_event_handler+0x3d6>
   16eee:	68a3      	ldr	r3, [r4, #8]
   16ef0:	2b04      	cmp	r3, #4
   16ef2:	f240 80ed 	bls.w	170d0 <rpc_ip_event_handler+0x3d0>
   16ef6:	8a66      	ldrh	r6, [r4, #18]
   16ef8:	2e00      	cmp	r6, #0
   16efa:	f000 80ea 	beq.w	170d2 <rpc_ip_event_handler+0x3d2>
   16efe:	2024      	movs	r0, #36	; 0x24
   16f00:	f7fc fbbe 	bl	13680 <nrf_modem_os_alloc>
   16f04:	4607      	mov	r7, r0
   16f06:	b300      	cbz	r0, 16f4a <rpc_ip_event_handler+0x24a>
   16f08:	8a62      	ldrh	r2, [r4, #18]
   16f0a:	2a10      	cmp	r2, #16
   16f0c:	f040 80c9 	bne.w	170a2 <rpc_ip_event_handler+0x3a2>
   16f10:	230a      	movs	r3, #10
   16f12:	2624      	movs	r6, #36	; 0x24
   16f14:	6043      	str	r3, [r0, #4]
   16f16:	7006      	strb	r6, [r0, #0]
   16f18:	7c61      	ldrb	r1, [r4, #17]
   16f1a:	7c23      	ldrb	r3, [r4, #16]
   16f1c:	3010      	adds	r0, #16
   16f1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   16f22:	f820 3c08 	strh.w	r3, [r0, #-8]
   16f26:	f104 0114 	add.w	r1, r4, #20
   16f2a:	f009 fb86 	bl	2063a <memcpy>
   16f2e:	6822      	ldr	r2, [r4, #0]
   16f30:	69e8      	ldr	r0, [r5, #28]
   16f32:	9204      	str	r2, [sp, #16]
   16f34:	6803      	ldr	r3, [r0, #0]
   16f36:	6862      	ldr	r2, [r4, #4]
   16f38:	685b      	ldr	r3, [r3, #4]
   16f3a:	e9cd 2705 	strd	r2, r7, [sp, #20]
   16f3e:	9607      	str	r6, [sp, #28]
   16f40:	a904      	add	r1, sp, #16
   16f42:	4798      	blx	r3
   16f44:	3001      	adds	r0, #1
   16f46:	f040 8094 	bne.w	17072 <rpc_ip_event_handler+0x372>
   16f4a:	2002      	movs	r0, #2
   16f4c:	e00a      	b.n	16f64 <rpc_ip_event_handler+0x264>
   16f4e:	682b      	ldr	r3, [r5, #0]
   16f50:	2b01      	cmp	r3, #1
   16f52:	d1b6      	bne.n	16ec2 <rpc_ip_event_handler+0x1c2>
   16f54:	6960      	ldr	r0, [r4, #20]
   16f56:	2800      	cmp	r0, #0
   16f58:	f040 80f8 	bne.w	1714c <rpc_ip_event_handler+0x44c>
   16f5c:	2302      	movs	r3, #2
   16f5e:	602b      	str	r3, [r5, #0]
   16f60:	69a3      	ldr	r3, [r4, #24]
   16f62:	61ab      	str	r3, [r5, #24]
   16f64:	b009      	add	sp, #36	; 0x24
   16f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f6a:	682b      	ldr	r3, [r5, #0]
   16f6c:	b29b      	uxth	r3, r3
   16f6e:	2b0d      	cmp	r3, #13
   16f70:	d1a7      	bne.n	16ec2 <rpc_ip_event_handler+0x1c2>
   16f72:	6960      	ldr	r0, [r4, #20]
   16f74:	2800      	cmp	r0, #0
   16f76:	f040 80e9 	bne.w	1714c <rpc_ip_event_handler+0x44c>
   16f7a:	682b      	ldr	r3, [r5, #0]
   16f7c:	0c1b      	lsrs	r3, r3, #16
   16f7e:	041b      	lsls	r3, r3, #16
   16f80:	f043 030e 	orr.w	r3, r3, #14
   16f84:	602b      	str	r3, [r5, #0]
   16f86:	e7ed      	b.n	16f64 <rpc_ip_event_handler+0x264>
   16f88:	682b      	ldr	r3, [r5, #0]
   16f8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   16f8e:	602b      	str	r3, [r5, #0]
   16f90:	682b      	ldr	r3, [r5, #0]
   16f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   16f96:	602b      	str	r3, [r5, #0]
   16f98:	682b      	ldr	r3, [r5, #0]
   16f9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   16f9e:	602b      	str	r3, [r5, #0]
   16fa0:	682b      	ldr	r3, [r5, #0]
   16fa2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   16fa6:	602b      	str	r3, [r5, #0]
   16fa8:	6923      	ldr	r3, [r4, #16]
   16faa:	2b6c      	cmp	r3, #108	; 0x6c
   16fac:	d107      	bne.n	16fbe <rpc_ip_event_handler+0x2be>
   16fae:	682b      	ldr	r3, [r5, #0]
   16fb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   16fb4:	602b      	str	r3, [r5, #0]
   16fb6:	2339      	movs	r3, #57	; 0x39
   16fb8:	606b      	str	r3, [r5, #4]
   16fba:	60ab      	str	r3, [r5, #8]
   16fbc:	e781      	b.n	16ec2 <rpc_ip_event_handler+0x1c2>
   16fbe:	2b10      	cmp	r3, #16
   16fc0:	bf96      	itet	ls
   16fc2:	4a26      	ldrls	r2, [pc, #152]	; (1705c <rpc_ip_event_handler+0x35c>)
   16fc4:	232d      	movhi	r3, #45	; 0x2d
   16fc6:	56d3      	ldrsbls	r3, [r2, r3]
   16fc8:	e7f6      	b.n	16fb8 <rpc_ip_event_handler+0x2b8>
   16fca:	682b      	ldr	r3, [r5, #0]
   16fcc:	b29b      	uxth	r3, r3
   16fce:	2b03      	cmp	r3, #3
   16fd0:	f47f af77 	bne.w	16ec2 <rpc_ip_event_handler+0x1c2>
   16fd4:	6960      	ldr	r0, [r4, #20]
   16fd6:	2800      	cmp	r0, #0
   16fd8:	f040 80b8 	bne.w	1714c <rpc_ip_event_handler+0x44c>
   16fdc:	682b      	ldr	r3, [r5, #0]
   16fde:	0c1b      	lsrs	r3, r3, #16
   16fe0:	041b      	lsls	r3, r3, #16
   16fe2:	f043 0304 	orr.w	r3, r3, #4
   16fe6:	e7cd      	b.n	16f84 <rpc_ip_event_handler+0x284>
   16fe8:	682b      	ldr	r3, [r5, #0]
   16fea:	0098      	lsls	r0, r3, #2
   16fec:	f57f af69 	bpl.w	16ec2 <rpc_ip_event_handler+0x1c2>
   16ff0:	682b      	ldr	r3, [r5, #0]
   16ff2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   16ff6:	602b      	str	r3, [r5, #0]
   16ff8:	6960      	ldr	r0, [r4, #20]
   16ffa:	b968      	cbnz	r0, 17018 <rpc_ip_event_handler+0x318>
   16ffc:	682b      	ldr	r3, [r5, #0]
   16ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17002:	602b      	str	r3, [r5, #0]
   17004:	682b      	ldr	r3, [r5, #0]
   17006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1700a:	602b      	str	r3, [r5, #0]
   1700c:	682b      	ldr	r3, [r5, #0]
   1700e:	0c1b      	lsrs	r3, r3, #16
   17010:	041b      	lsls	r3, r3, #16
   17012:	f043 0305 	orr.w	r3, r3, #5
   17016:	e7b5      	b.n	16f84 <rpc_ip_event_handler+0x284>
   17018:	2810      	cmp	r0, #16
   1701a:	f200 808b 	bhi.w	17134 <rpc_ip_event_handler+0x434>
   1701e:	4b0f      	ldr	r3, [pc, #60]	; (1705c <rpc_ip_event_handler+0x35c>)
   17020:	561b      	ldrsb	r3, [r3, r0]
   17022:	606b      	str	r3, [r5, #4]
   17024:	e076      	b.n	17114 <rpc_ip_event_handler+0x414>
   17026:	682b      	ldr	r3, [r5, #0]
   17028:	b29b      	uxth	r3, r3
   1702a:	2b06      	cmp	r3, #6
   1702c:	f47f af49 	bne.w	16ec2 <rpc_ip_event_handler+0x1c2>
   17030:	6960      	ldr	r0, [r4, #20]
   17032:	2800      	cmp	r0, #0
   17034:	f040 808a 	bne.w	1714c <rpc_ip_event_handler+0x44c>
   17038:	682b      	ldr	r3, [r5, #0]
   1703a:	0c1b      	lsrs	r3, r3, #16
   1703c:	041b      	lsls	r3, r3, #16
   1703e:	f043 0307 	orr.w	r3, r3, #7
   17042:	e79f      	b.n	16f84 <rpc_ip_event_handler+0x284>
   17044:	20018674 	.word	0x20018674
   17048:	20018678 	.word	0x20018678
   1704c:	20018670 	.word	0x20018670
   17050:	2001866c 	.word	0x2001866c
   17054:	20018668 	.word	0x20018668
   17058:	2001900c 	.word	0x2001900c
   1705c:	0002346e 	.word	0x0002346e
   17060:	200186a0 	.word	0x200186a0
   17064:	2001bf7a 	.word	0x2001bf7a
   17068:	682b      	ldr	r3, [r5, #0]
   1706a:	b29b      	uxth	r3, r3
   1706c:	2b07      	cmp	r3, #7
   1706e:	f47f af28 	bne.w	16ec2 <rpc_ip_event_handler+0x1c2>
   17072:	682b      	ldr	r3, [r5, #0]
   17074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17078:	602b      	str	r3, [r5, #0]
   1707a:	e722      	b.n	16ec2 <rpc_ip_event_handler+0x1c2>
   1707c:	682b      	ldr	r3, [r5, #0]
   1707e:	b29b      	uxth	r3, r3
   17080:	2b08      	cmp	r3, #8
   17082:	f47f af1e 	bne.w	16ec2 <rpc_ip_event_handler+0x1c2>
   17086:	6963      	ldr	r3, [r4, #20]
   17088:	2b00      	cmp	r3, #0
   1708a:	d174      	bne.n	17176 <rpc_ip_event_handler+0x476>
   1708c:	4b3d      	ldr	r3, [pc, #244]	; (17184 <rpc_ip_event_handler+0x484>)
   1708e:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   17092:	682b      	ldr	r3, [r5, #0]
   17094:	0c1b      	lsrs	r3, r3, #16
   17096:	041b      	lsls	r3, r3, #16
   17098:	f043 0309 	orr.w	r3, r3, #9
   1709c:	602b      	str	r3, [r5, #0]
   1709e:	2001      	movs	r0, #1
   170a0:	e760      	b.n	16f64 <rpc_ip_event_handler+0x264>
   170a2:	2a04      	cmp	r2, #4
   170a4:	d10d      	bne.n	170c2 <rpc_ip_event_handler+0x3c2>
   170a6:	2302      	movs	r3, #2
   170a8:	2610      	movs	r6, #16
   170aa:	6043      	str	r3, [r0, #4]
   170ac:	7006      	strb	r6, [r0, #0]
   170ae:	7c61      	ldrb	r1, [r4, #17]
   170b0:	7c23      	ldrb	r3, [r4, #16]
   170b2:	300c      	adds	r0, #12
   170b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   170b8:	f820 3c04 	strh.w	r3, [r0, #-4]
   170bc:	f104 0114 	add.w	r1, r4, #20
   170c0:	e733      	b.n	16f2a <rpc_ip_event_handler+0x22a>
   170c2:	6820      	ldr	r0, [r4, #0]
   170c4:	f007 fbd0 	bl	1e868 <rpc_ip_client_data_free>
   170c8:	4638      	mov	r0, r7
   170ca:	f7fc fae9 	bl	136a0 <nrf_modem_os_free>
   170ce:	e6f8      	b.n	16ec2 <rpc_ip_event_handler+0x1c2>
   170d0:	2600      	movs	r6, #0
   170d2:	4637      	mov	r7, r6
   170d4:	e72b      	b.n	16f2e <rpc_ip_event_handler+0x22e>
   170d6:	6820      	ldr	r0, [r4, #0]
   170d8:	f007 fbc6 	bl	1e868 <rpc_ip_client_data_free>
   170dc:	e6f1      	b.n	16ec2 <rpc_ip_event_handler+0x1c2>
   170de:	682b      	ldr	r3, [r5, #0]
   170e0:	0299      	lsls	r1, r3, #10
   170e2:	f57f aeee 	bpl.w	16ec2 <rpc_ip_event_handler+0x1c2>
   170e6:	6963      	ldr	r3, [r4, #20]
   170e8:	b93b      	cbnz	r3, 170fa <rpc_ip_event_handler+0x3fa>
   170ea:	682b      	ldr	r3, [r5, #0]
   170ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   170f0:	602b      	str	r3, [r5, #0]
   170f2:	4b24      	ldr	r3, [pc, #144]	; (17184 <rpc_ip_event_handler+0x484>)
   170f4:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   170f8:	e7d1      	b.n	1709e <rpc_ip_event_handler+0x39e>
   170fa:	2b6b      	cmp	r3, #107	; 0x6b
   170fc:	d10e      	bne.n	1711c <rpc_ip_event_handler+0x41c>
   170fe:	692b      	ldr	r3, [r5, #16]
   17100:	220c      	movs	r2, #12
   17102:	2b01      	cmp	r3, #1
   17104:	d105      	bne.n	17112 <rpc_ip_event_handler+0x412>
   17106:	682b      	ldr	r3, [r5, #0]
   17108:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   1710c:	602b      	str	r3, [r5, #0]
   1710e:	606a      	str	r2, [r5, #4]
   17110:	e6d7      	b.n	16ec2 <rpc_ip_event_handler+0x1c2>
   17112:	606a      	str	r2, [r5, #4]
   17114:	682b      	ldr	r3, [r5, #0]
   17116:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1711a:	e7ad      	b.n	17078 <rpc_ip_event_handler+0x378>
   1711c:	f023 0202 	bic.w	r2, r3, #2
   17120:	2a01      	cmp	r2, #1
   17122:	d102      	bne.n	1712a <rpc_ip_event_handler+0x42a>
   17124:	230c      	movs	r3, #12
   17126:	606b      	str	r3, [r5, #4]
   17128:	e6cb      	b.n	16ec2 <rpc_ip_event_handler+0x1c2>
   1712a:	2b10      	cmp	r3, #16
   1712c:	d802      	bhi.n	17134 <rpc_ip_event_handler+0x434>
   1712e:	4a16      	ldr	r2, [pc, #88]	; (17188 <rpc_ip_event_handler+0x488>)
   17130:	56d3      	ldrsb	r3, [r2, r3]
   17132:	e776      	b.n	17022 <rpc_ip_event_handler+0x322>
   17134:	232d      	movs	r3, #45	; 0x2d
   17136:	e774      	b.n	17022 <rpc_ip_event_handler+0x322>
   17138:	682b      	ldr	r3, [r5, #0]
   1713a:	025a      	lsls	r2, r3, #9
   1713c:	f57f aec1 	bpl.w	16ec2 <rpc_ip_event_handler+0x1c2>
   17140:	6960      	ldr	r0, [r4, #20]
   17142:	b918      	cbnz	r0, 1714c <rpc_ip_event_handler+0x44c>
   17144:	682b      	ldr	r3, [r5, #0]
   17146:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1714a:	e71b      	b.n	16f84 <rpc_ip_event_handler+0x284>
   1714c:	2810      	cmp	r0, #16
   1714e:	d817      	bhi.n	17180 <rpc_ip_event_handler+0x480>
   17150:	4b0d      	ldr	r3, [pc, #52]	; (17188 <rpc_ip_event_handler+0x488>)
   17152:	561b      	ldrsb	r3, [r3, r0]
   17154:	e7e7      	b.n	17126 <rpc_ip_event_handler+0x426>
   17156:	682b      	ldr	r3, [r5, #0]
   17158:	01db      	lsls	r3, r3, #7
   1715a:	f57f aeb2 	bpl.w	16ec2 <rpc_ip_event_handler+0x1c2>
   1715e:	6963      	ldr	r3, [r4, #20]
   17160:	b94b      	cbnz	r3, 17176 <rpc_ip_event_handler+0x476>
   17162:	6820      	ldr	r0, [r4, #0]
   17164:	b118      	cbz	r0, 1716e <rpc_ip_event_handler+0x46e>
   17166:	2001      	movs	r0, #1
   17168:	4b06      	ldr	r3, [pc, #24]	; (17184 <rpc_ip_event_handler+0x484>)
   1716a:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1716e:	682b      	ldr	r3, [r5, #0]
   17170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   17174:	e706      	b.n	16f84 <rpc_ip_event_handler+0x284>
   17176:	2b10      	cmp	r3, #16
   17178:	d802      	bhi.n	17180 <rpc_ip_event_handler+0x480>
   1717a:	4a03      	ldr	r2, [pc, #12]	; (17188 <rpc_ip_event_handler+0x488>)
   1717c:	56d3      	ldrsb	r3, [r2, r3]
   1717e:	e7d2      	b.n	17126 <rpc_ip_event_handler+0x426>
   17180:	232d      	movs	r3, #45	; 0x2d
   17182:	e7d0      	b.n	17126 <rpc_ip_event_handler+0x426>
   17184:	2001867c 	.word	0x2001867c
   17188:	0002346e 	.word	0x0002346e

0001718c <hostname_free>:
   1718c:	b538      	push	{r3, r4, r5, lr}
   1718e:	4c07      	ldr	r4, [pc, #28]	; (171ac <hostname_free+0x20>)
   17190:	4605      	mov	r5, r0
   17192:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   17196:	b138      	cbz	r0, 171a8 <hostname_free+0x1c>
   17198:	f7fc fa82 	bl	136a0 <nrf_modem_os_free>
   1719c:	2300      	movs	r3, #0
   1719e:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   171a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   171a6:	6063      	str	r3, [r4, #4]
   171a8:	bd38      	pop	{r3, r4, r5, pc}
   171aa:	bf00      	nop
   171ac:	200186a4 	.word	0x200186a4

000171b0 <secure_socket_attach_initiate>:
   171b0:	f04f 33ff 	mov.w	r3, #4294967295
   171b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   171b8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 17248 <secure_socket_attach_initiate+0x98>
   171bc:	9301      	str	r3, [sp, #4]
   171be:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   171c2:	460c      	mov	r4, r1
   171c4:	4616      	mov	r6, r2
   171c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   171ca:	f247 0281 	movw	r2, #28801	; 0x7081
   171ce:	6989      	ldr	r1, [r1, #24]
   171d0:	4607      	mov	r7, r0
   171d2:	f007 fd3c 	bl	1ec4e <ip_interface_request_create>
   171d6:	4605      	mov	r5, r0
   171d8:	b378      	cbz	r0, 1723a <secure_socket_attach_initiate+0x8a>
   171da:	f8d9 2004 	ldr.w	r2, [r9, #4]
   171de:	b122      	cbz	r2, 171ea <secure_socket_attach_initiate+0x3a>
   171e0:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   171e4:	6800      	ldr	r0, [r0, #0]
   171e6:	f009 fa28 	bl	2063a <memcpy>
   171ea:	2224      	movs	r2, #36	; 0x24
   171ec:	4915      	ldr	r1, [pc, #84]	; (17244 <secure_socket_attach_initiate+0x94>)
   171ee:	f105 0014 	add.w	r0, r5, #20
   171f2:	fb02 1107 	mla	r1, r2, r7, r1
   171f6:	f009 fa20 	bl	2063a <memcpy>
   171fa:	68ab      	ldr	r3, [r5, #8]
   171fc:	f247 0281 	movw	r2, #28801	; 0x7081
   17200:	3324      	adds	r3, #36	; 0x24
   17202:	60ab      	str	r3, [r5, #8]
   17204:	6823      	ldr	r3, [r4, #0]
   17206:	4629      	mov	r1, r5
   17208:	0c1b      	lsrs	r3, r3, #16
   1720a:	041b      	lsls	r3, r3, #16
   1720c:	f043 030a 	orr.w	r3, r3, #10
   17210:	6023      	str	r3, [r4, #0]
   17212:	4620      	mov	r0, r4
   17214:	4633      	mov	r3, r6
   17216:	f007 fd32 	bl	1ec7e <ip_interface_request_send>
   1721a:	b958      	cbnz	r0, 17234 <secure_socket_attach_initiate+0x84>
   1721c:	6823      	ldr	r3, [r4, #0]
   1721e:	00db      	lsls	r3, r3, #3
   17220:	d40d      	bmi.n	1723e <secure_socket_attach_initiate+0x8e>
   17222:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17226:	210b      	movs	r1, #11
   17228:	4638      	mov	r0, r7
   1722a:	ab01      	add	r3, sp, #4
   1722c:	f007 fd3a 	bl	1eca4 <ip_interface_wait>
   17230:	b100      	cbz	r0, 17234 <secure_socket_attach_initiate+0x84>
   17232:	6026      	str	r6, [r4, #0]
   17234:	b003      	add	sp, #12
   17236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1723a:	200c      	movs	r0, #12
   1723c:	e7fa      	b.n	17234 <secure_socket_attach_initiate+0x84>
   1723e:	2073      	movs	r0, #115	; 0x73
   17240:	e7f8      	b.n	17234 <secure_socket_attach_initiate+0x84>
   17242:	bf00      	nop
   17244:	2001bf7c 	.word	0x2001bf7c
   17248:	200186a4 	.word	0x200186a4

0001724c <tls_interface_init>:
   1724c:	2201      	movs	r2, #1
   1724e:	4b02      	ldr	r3, [pc, #8]	; (17258 <tls_interface_init+0xc>)
   17250:	2000      	movs	r0, #0
   17252:	701a      	strb	r2, [r3, #0]
   17254:	4770      	bx	lr
   17256:	bf00      	nop
   17258:	2001bf7b 	.word	0x2001bf7b

0001725c <tls_interface_open>:
   1725c:	b538      	push	{r3, r4, r5, lr}
   1725e:	4b1e      	ldr	r3, [pc, #120]	; (172d8 <tls_interface_open+0x7c>)
   17260:	4615      	mov	r5, r2
   17262:	781b      	ldrb	r3, [r3, #0]
   17264:	b92b      	cbnz	r3, 17272 <tls_interface_open+0x16>
   17266:	2070      	movs	r0, #112	; 0x70
   17268:	f7fc f876 	bl	13358 <nrf_modem_os_errno_set>
   1726c:	f04f 34ff 	mov.w	r4, #4294967295
   17270:	e02b      	b.n	172ca <tls_interface_open+0x6e>
   17272:	1e4b      	subs	r3, r1, #1
   17274:	2b01      	cmp	r3, #1
   17276:	d809      	bhi.n	1728c <tls_interface_open+0x30>
   17278:	b952      	cbnz	r2, 17290 <tls_interface_open+0x34>
   1727a:	2901      	cmp	r1, #1
   1727c:	bf0b      	itete	eq
   1727e:	2201      	moveq	r2, #1
   17280:	2202      	movne	r2, #2
   17282:	f44f 7582 	moveq.w	r5, #260	; 0x104
   17286:	f44f 7587 	movne.w	r5, #270	; 0x10e
   1728a:	e007      	b.n	1729c <tls_interface_open+0x40>
   1728c:	2029      	movs	r0, #41	; 0x29
   1728e:	e7eb      	b.n	17268 <tls_interface_open+0xc>
   17290:	2901      	cmp	r1, #1
   17292:	d11c      	bne.n	172ce <tls_interface_open+0x72>
   17294:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   17298:	d1f8      	bne.n	1728c <tls_interface_open+0x30>
   1729a:	460a      	mov	r2, r1
   1729c:	f7ff f83e 	bl	1631c <ip_interface_open>
   172a0:	1e04      	subs	r4, r0, #0
   172a2:	dbe3      	blt.n	1726c <tls_interface_open+0x10>
   172a4:	2224      	movs	r2, #36	; 0x24
   172a6:	480d      	ldr	r0, [pc, #52]	; (172dc <tls_interface_open+0x80>)
   172a8:	490d      	ldr	r1, [pc, #52]	; (172e0 <tls_interface_open+0x84>)
   172aa:	fb02 0004 	mla	r0, r2, r4, r0
   172ae:	f009 f9c4 	bl	2063a <memcpy>
   172b2:	4620      	mov	r0, r4
   172b4:	f7fe ff5e 	bl	16174 <interface_socket_from_handle_get>
   172b8:	6803      	ldr	r3, [r0, #0]
   172ba:	6145      	str	r5, [r0, #20]
   172bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   172c0:	6003      	str	r3, [r0, #0]
   172c2:	6803      	ldr	r3, [r0, #0]
   172c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   172c8:	6003      	str	r3, [r0, #0]
   172ca:	4620      	mov	r0, r4
   172cc:	bd38      	pop	{r3, r4, r5, pc}
   172ce:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   172d2:	d1db      	bne.n	1728c <tls_interface_open+0x30>
   172d4:	2202      	movs	r2, #2
   172d6:	e7e1      	b.n	1729c <tls_interface_open+0x40>
   172d8:	2001bf7b 	.word	0x2001bf7b
   172dc:	2001bf7c 	.word	0x2001bf7c
   172e0:	0002347f 	.word	0x0002347f

000172e4 <tls_interface_sendto>:
   172e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172e8:	b085      	sub	sp, #20
   172ea:	4606      	mov	r6, r0
   172ec:	4691      	mov	r9, r2
   172ee:	461f      	mov	r7, r3
   172f0:	9103      	str	r1, [sp, #12]
   172f2:	f7fe ff3f 	bl	16174 <interface_socket_from_handle_get>
   172f6:	4605      	mov	r5, r0
   172f8:	2800      	cmp	r0, #0
   172fa:	d06c      	beq.n	173d6 <tls_interface_sendto+0xf2>
   172fc:	f04f 0a24 	mov.w	sl, #36	; 0x24
   17300:	07bb      	lsls	r3, r7, #30
   17302:	bf48      	it	mi
   17304:	2300      	movmi	r3, #0
   17306:	f04f 0400 	mov.w	r4, #0
   1730a:	f04f 3bff 	mov.w	fp, #4294967295
   1730e:	bf58      	it	pl
   17310:	6803      	ldrpl	r3, [r0, #0]
   17312:	fb0a fa06 	mul.w	sl, sl, r6
   17316:	bf5c      	itt	pl
   17318:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   1731c:	f3c3 7300 	ubfxpl	r3, r3, #28, #1
   17320:	9302      	str	r3, [sp, #8]
   17322:	6829      	ldr	r1, [r5, #0]
   17324:	eba9 0804 	sub.w	r8, r9, r4
   17328:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
   1732c:	b289      	uxth	r1, r1
   1732e:	bfa8      	it	ge
   17330:	f44f 6800 	movge.w	r8, #2048	; 0x800
   17334:	290c      	cmp	r1, #12
   17336:	d110      	bne.n	1735a <tls_interface_sendto+0x76>
   17338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1733a:	9903      	ldr	r1, [sp, #12]
   1733c:	9301      	str	r3, [sp, #4]
   1733e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17340:	4642      	mov	r2, r8
   17342:	9300      	str	r3, [sp, #0]
   17344:	4630      	mov	r0, r6
   17346:	463b      	mov	r3, r7
   17348:	4421      	add	r1, r4
   1734a:	f7ff f8b5 	bl	164b8 <ip_interface_sendto>
   1734e:	f1b0 0b00 	subs.w	fp, r0, #0
   17352:	da32      	bge.n	173ba <tls_interface_sendto+0xd6>
   17354:	f04f 34ff 	mov.w	r4, #4294967295
   17358:	e034      	b.n	173c4 <tls_interface_sendto+0xe0>
   1735a:	6829      	ldr	r1, [r5, #0]
   1735c:	b289      	uxth	r1, r1
   1735e:	290b      	cmp	r1, #11
   17360:	d109      	bne.n	17376 <tls_interface_sendto+0x92>
   17362:	4b22      	ldr	r3, [pc, #136]	; (173ec <tls_interface_sendto+0x108>)
   17364:	f813 200a 	ldrb.w	r2, [r3, sl]
   17368:	2a02      	cmp	r2, #2
   1736a:	d036      	beq.n	173da <tls_interface_sendto+0xf6>
   1736c:	692a      	ldr	r2, [r5, #16]
   1736e:	2a01      	cmp	r2, #1
   17370:	d135      	bne.n	173de <tls_interface_sendto+0xfa>
   17372:	202a      	movs	r0, #42	; 0x2a
   17374:	e02c      	b.n	173d0 <tls_interface_sendto+0xec>
   17376:	4628      	mov	r0, r5
   17378:	f007 ff63 	bl	1f242 <attach_trigger_condition_verify>
   1737c:	b398      	cbz	r0, 173e6 <tls_interface_sendto+0x102>
   1737e:	4b1b      	ldr	r3, [pc, #108]	; (173ec <tls_interface_sendto+0x108>)
   17380:	f813 100a 	ldrb.w	r1, [r3, sl]
   17384:	2902      	cmp	r1, #2
   17386:	d110      	bne.n	173aa <tls_interface_sendto+0xc6>
   17388:	4629      	mov	r1, r5
   1738a:	4630      	mov	r0, r6
   1738c:	f007 ff70 	bl	1f270 <secure_client_socket>
   17390:	b970      	cbnz	r0, 173b0 <tls_interface_sendto+0xcc>
   17392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17394:	9903      	ldr	r1, [sp, #12]
   17396:	9301      	str	r3, [sp, #4]
   17398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1739a:	4642      	mov	r2, r8
   1739c:	9300      	str	r3, [sp, #0]
   1739e:	4630      	mov	r0, r6
   173a0:	463b      	mov	r3, r7
   173a2:	4421      	add	r1, r4
   173a4:	f7ff f888 	bl	164b8 <ip_interface_sendto>
   173a8:	4683      	mov	fp, r0
   173aa:	f1bb 0f00 	cmp.w	fp, #0
   173ae:	e7d0      	b.n	17352 <tls_interface_sendto+0x6e>
   173b0:	f1bb 3fff 	cmp.w	fp, #4294967295
   173b4:	d00a      	beq.n	173cc <tls_interface_sendto+0xe8>
   173b6:	2800      	cmp	r0, #0
   173b8:	dc0a      	bgt.n	173d0 <tls_interface_sendto+0xec>
   173ba:	9b02      	ldr	r3, [sp, #8]
   173bc:	445c      	add	r4, fp
   173be:	b10b      	cbz	r3, 173c4 <tls_interface_sendto+0xe0>
   173c0:	45a1      	cmp	r9, r4
   173c2:	dcae      	bgt.n	17322 <tls_interface_sendto+0x3e>
   173c4:	4620      	mov	r0, r4
   173c6:	b005      	add	sp, #20
   173c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173cc:	2800      	cmp	r0, #0
   173ce:	ddc1      	ble.n	17354 <tls_interface_sendto+0x70>
   173d0:	f7fb ffc2 	bl	13358 <nrf_modem_os_errno_set>
   173d4:	e7be      	b.n	17354 <tls_interface_sendto+0x70>
   173d6:	2009      	movs	r0, #9
   173d8:	e7fa      	b.n	173d0 <tls_interface_sendto+0xec>
   173da:	2023      	movs	r0, #35	; 0x23
   173dc:	e7f8      	b.n	173d0 <tls_interface_sendto+0xec>
   173de:	f1bb 3fff 	cmp.w	fp, #4294967295
   173e2:	d1ea      	bne.n	173ba <tls_interface_sendto+0xd6>
   173e4:	e7b6      	b.n	17354 <tls_interface_sendto+0x70>
   173e6:	2039      	movs	r0, #57	; 0x39
   173e8:	e7f2      	b.n	173d0 <tls_interface_sendto+0xec>
   173ea:	bf00      	nop
   173ec:	2001bf7c 	.word	0x2001bf7c

000173f0 <tls_interface_recvfrom>:
   173f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   173f2:	460d      	mov	r5, r1
   173f4:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   173f8:	4604      	mov	r4, r0
   173fa:	e9cd 3200 	strd	r3, r2, [sp]
   173fe:	f7fe feb9 	bl	16174 <interface_socket_from_handle_get>
   17402:	4601      	mov	r1, r0
   17404:	b388      	cbz	r0, 1746a <tls_interface_recvfrom+0x7a>
   17406:	e9dd 3200 	ldrd	r3, r2, [sp]
   1740a:	f8d0 c000 	ldr.w	ip, [r0]
   1740e:	fa1f fc8c 	uxth.w	ip, ip
   17412:	f1bc 0f0c 	cmp.w	ip, #12
   17416:	d006      	beq.n	17426 <tls_interface_recvfrom+0x36>
   17418:	f8d0 c000 	ldr.w	ip, [r0]
   1741c:	fa1f fc8c 	uxth.w	ip, ip
   17420:	f1bc 0f0d 	cmp.w	ip, #13
   17424:	d108      	bne.n	17438 <tls_interface_recvfrom+0x48>
   17426:	4629      	mov	r1, r5
   17428:	4620      	mov	r0, r4
   1742a:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1742e:	b003      	add	sp, #12
   17430:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   17434:	f007 bc46 	b.w	1ecc4 <ip_interface_recvfrom>
   17438:	e9cd 2300 	strd	r2, r3, [sp]
   1743c:	f007 ff01 	bl	1f242 <attach_trigger_condition_verify>
   17440:	b1b8      	cbz	r0, 17472 <tls_interface_recvfrom+0x82>
   17442:	2024      	movs	r0, #36	; 0x24
   17444:	4360      	muls	r0, r4
   17446:	f8df c030 	ldr.w	ip, [pc, #48]	; 17478 <tls_interface_recvfrom+0x88>
   1744a:	f81c 0000 	ldrb.w	r0, [ip, r0]
   1744e:	2802      	cmp	r0, #2
   17450:	d10f      	bne.n	17472 <tls_interface_recvfrom+0x82>
   17452:	4620      	mov	r0, r4
   17454:	f007 ff0c 	bl	1f270 <secure_client_socket>
   17458:	e9dd 2300 	ldrd	r2, r3, [sp]
   1745c:	2800      	cmp	r0, #0
   1745e:	d0e2      	beq.n	17426 <tls_interface_recvfrom+0x36>
   17460:	dc04      	bgt.n	1746c <tls_interface_recvfrom+0x7c>
   17462:	f04f 30ff 	mov.w	r0, #4294967295
   17466:	b003      	add	sp, #12
   17468:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1746a:	2009      	movs	r0, #9
   1746c:	f7fb ff74 	bl	13358 <nrf_modem_os_errno_set>
   17470:	e7f7      	b.n	17462 <tls_interface_recvfrom+0x72>
   17472:	2023      	movs	r0, #35	; 0x23
   17474:	e7fa      	b.n	1746c <tls_interface_recvfrom+0x7c>
   17476:	bf00      	nop
   17478:	2001bf7c 	.word	0x2001bf7c

0001747c <tls_interface_bind>:
   1747c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1747e:	4604      	mov	r4, r0
   17480:	e9cd 2100 	strd	r2, r1, [sp]
   17484:	f7fe fe76 	bl	16174 <interface_socket_from_handle_get>
   17488:	4605      	mov	r5, r0
   1748a:	b1e0      	cbz	r0, 174c6 <tls_interface_bind+0x4a>
   1748c:	6803      	ldr	r3, [r0, #0]
   1748e:	b29b      	uxth	r3, r3
   17490:	2b02      	cmp	r3, #2
   17492:	d11a      	bne.n	174ca <tls_interface_bind+0x4e>
   17494:	e9dd 2100 	ldrd	r2, r1, [sp]
   17498:	4620      	mov	r0, r4
   1749a:	f7ff f9ad 	bl	167f8 <ip_interface_bind>
   1749e:	b950      	cbnz	r0, 174b6 <tls_interface_bind+0x3a>
   174a0:	2324      	movs	r3, #36	; 0x24
   174a2:	4363      	muls	r3, r4
   174a4:	4a0a      	ldr	r2, [pc, #40]	; (174d0 <tls_interface_bind+0x54>)
   174a6:	5cd3      	ldrb	r3, [r2, r3]
   174a8:	2b01      	cmp	r3, #1
   174aa:	d10a      	bne.n	174c2 <tls_interface_bind+0x46>
   174ac:	2204      	movs	r2, #4
   174ae:	4629      	mov	r1, r5
   174b0:	4620      	mov	r0, r4
   174b2:	f7ff fe7d 	bl	171b0 <secure_socket_attach_initiate>
   174b6:	2800      	cmp	r0, #0
   174b8:	dd03      	ble.n	174c2 <tls_interface_bind+0x46>
   174ba:	f7fb ff4d 	bl	13358 <nrf_modem_os_errno_set>
   174be:	f04f 30ff 	mov.w	r0, #4294967295
   174c2:	b003      	add	sp, #12
   174c4:	bd30      	pop	{r4, r5, pc}
   174c6:	2009      	movs	r0, #9
   174c8:	e7f7      	b.n	174ba <tls_interface_bind+0x3e>
   174ca:	202d      	movs	r0, #45	; 0x2d
   174cc:	e7f5      	b.n	174ba <tls_interface_bind+0x3e>
   174ce:	bf00      	nop
   174d0:	2001bf7c 	.word	0x2001bf7c

000174d4 <tls_interface_connect>:
   174d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   174d6:	4605      	mov	r5, r0
   174d8:	e9cd 2100 	strd	r2, r1, [sp]
   174dc:	f7fe fe4a 	bl	16174 <interface_socket_from_handle_get>
   174e0:	4604      	mov	r4, r0
   174e2:	b1f8      	cbz	r0, 17524 <tls_interface_connect+0x50>
   174e4:	2324      	movs	r3, #36	; 0x24
   174e6:	436b      	muls	r3, r5
   174e8:	4810      	ldr	r0, [pc, #64]	; (1752c <tls_interface_connect+0x58>)
   174ea:	5cc3      	ldrb	r3, [r0, r3]
   174ec:	2b02      	cmp	r3, #2
   174ee:	d11b      	bne.n	17528 <tls_interface_connect+0x54>
   174f0:	e9dd 2100 	ldrd	r2, r1, [sp]
   174f4:	6823      	ldr	r3, [r4, #0]
   174f6:	b29b      	uxth	r3, r3
   174f8:	2b02      	cmp	r3, #2
   174fa:	d003      	beq.n	17504 <tls_interface_connect+0x30>
   174fc:	6823      	ldr	r3, [r4, #0]
   174fe:	b29b      	uxth	r3, r3
   17500:	2b04      	cmp	r3, #4
   17502:	d111      	bne.n	17528 <tls_interface_connect+0x54>
   17504:	4628      	mov	r0, r5
   17506:	f007 fce5 	bl	1eed4 <ip_interface_connect>
   1750a:	b918      	cbnz	r0, 17514 <tls_interface_connect+0x40>
   1750c:	4621      	mov	r1, r4
   1750e:	4628      	mov	r0, r5
   17510:	f007 feae 	bl	1f270 <secure_client_socket>
   17514:	2800      	cmp	r0, #0
   17516:	dd03      	ble.n	17520 <tls_interface_connect+0x4c>
   17518:	f7fb ff1e 	bl	13358 <nrf_modem_os_errno_set>
   1751c:	f04f 30ff 	mov.w	r0, #4294967295
   17520:	b003      	add	sp, #12
   17522:	bd30      	pop	{r4, r5, pc}
   17524:	2009      	movs	r0, #9
   17526:	e7f7      	b.n	17518 <tls_interface_connect+0x44>
   17528:	202d      	movs	r0, #45	; 0x2d
   1752a:	e7f5      	b.n	17518 <tls_interface_connect+0x44>
   1752c:	2001bf7c 	.word	0x2001bf7c

00017530 <tls_interface_listen>:
   17530:	b538      	push	{r3, r4, r5, lr}
   17532:	4604      	mov	r4, r0
   17534:	460d      	mov	r5, r1
   17536:	f7fe fe1d 	bl	16174 <interface_socket_from_handle_get>
   1753a:	2800      	cmp	r0, #0
   1753c:	d034      	beq.n	175a8 <tls_interface_listen+0x78>
   1753e:	6803      	ldr	r3, [r0, #0]
   17540:	00db      	lsls	r3, r3, #3
   17542:	d433      	bmi.n	175ac <tls_interface_listen+0x7c>
   17544:	6903      	ldr	r3, [r0, #16]
   17546:	2b01      	cmp	r3, #1
   17548:	d130      	bne.n	175ac <tls_interface_listen+0x7c>
   1754a:	6803      	ldr	r3, [r0, #0]
   1754c:	b29b      	uxth	r3, r3
   1754e:	2b04      	cmp	r3, #4
   17550:	d105      	bne.n	1755e <tls_interface_listen+0x2e>
   17552:	2324      	movs	r3, #36	; 0x24
   17554:	4363      	muls	r3, r4
   17556:	4a16      	ldr	r2, [pc, #88]	; (175b0 <tls_interface_listen+0x80>)
   17558:	5cd3      	ldrb	r3, [r2, r3]
   1755a:	2b02      	cmp	r3, #2
   1755c:	d009      	beq.n	17572 <tls_interface_listen+0x42>
   1755e:	6803      	ldr	r3, [r0, #0]
   17560:	b29b      	uxth	r3, r3
   17562:	2b0b      	cmp	r3, #11
   17564:	d122      	bne.n	175ac <tls_interface_listen+0x7c>
   17566:	2324      	movs	r3, #36	; 0x24
   17568:	4363      	muls	r3, r4
   1756a:	4a11      	ldr	r2, [pc, #68]	; (175b0 <tls_interface_listen+0x80>)
   1756c:	5cd3      	ldrb	r3, [r2, r3]
   1756e:	2b01      	cmp	r3, #1
   17570:	d11c      	bne.n	175ac <tls_interface_listen+0x7c>
   17572:	2324      	movs	r3, #36	; 0x24
   17574:	2101      	movs	r1, #1
   17576:	4363      	muls	r3, r4
   17578:	4a0d      	ldr	r2, [pc, #52]	; (175b0 <tls_interface_listen+0x80>)
   1757a:	54d1      	strb	r1, [r2, r3]
   1757c:	6803      	ldr	r3, [r0, #0]
   1757e:	2b0b      	cmp	r3, #11
   17580:	d10a      	bne.n	17598 <tls_interface_listen+0x68>
   17582:	4629      	mov	r1, r5
   17584:	4620      	mov	r0, r4
   17586:	f7ff f999 	bl	168bc <ip_interface_listen>
   1758a:	2800      	cmp	r0, #0
   1758c:	dd03      	ble.n	17596 <tls_interface_listen+0x66>
   1758e:	f7fb fee3 	bl	13358 <nrf_modem_os_errno_set>
   17592:	f04f 30ff 	mov.w	r0, #4294967295
   17596:	bd38      	pop	{r3, r4, r5, pc}
   17598:	4601      	mov	r1, r0
   1759a:	6802      	ldr	r2, [r0, #0]
   1759c:	4620      	mov	r0, r4
   1759e:	f7ff fe07 	bl	171b0 <secure_socket_attach_initiate>
   175a2:	2800      	cmp	r0, #0
   175a4:	d0ed      	beq.n	17582 <tls_interface_listen+0x52>
   175a6:	e7f0      	b.n	1758a <tls_interface_listen+0x5a>
   175a8:	2009      	movs	r0, #9
   175aa:	e7f0      	b.n	1758e <tls_interface_listen+0x5e>
   175ac:	202d      	movs	r0, #45	; 0x2d
   175ae:	e7ee      	b.n	1758e <tls_interface_listen+0x5e>
   175b0:	2001bf7c 	.word	0x2001bf7c

000175b4 <tls_interface_accept>:
   175b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   175b8:	b086      	sub	sp, #24
   175ba:	4606      	mov	r6, r0
   175bc:	f04f 34ff 	mov.w	r4, #4294967295
   175c0:	e9cd 2102 	strd	r2, r1, [sp, #8]
   175c4:	9301      	str	r3, [sp, #4]
   175c6:	f7fe fdd5 	bl	16174 <interface_socket_from_handle_get>
   175ca:	9405      	str	r4, [sp, #20]
   175cc:	2800      	cmp	r0, #0
   175ce:	d048      	beq.n	17662 <tls_interface_accept+0xae>
   175d0:	6805      	ldr	r5, [r0, #0]
   175d2:	b2ad      	uxth	r5, r5
   175d4:	2d07      	cmp	r5, #7
   175d6:	d144      	bne.n	17662 <tls_interface_accept+0xae>
   175d8:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   175dc:	6800      	ldr	r0, [r0, #0]
   175de:	9903      	ldr	r1, [sp, #12]
   175e0:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
   175e4:	d006      	beq.n	175f4 <tls_interface_accept+0x40>
   175e6:	202d      	movs	r0, #45	; 0x2d
   175e8:	f7fb feb6 	bl	13358 <nrf_modem_os_errno_set>
   175ec:	4620      	mov	r0, r4
   175ee:	b006      	add	sp, #24
   175f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   175f4:	4630      	mov	r0, r6
   175f6:	f7ff f9b3 	bl	16960 <ip_interface_accept>
   175fa:	1e04      	subs	r4, r0, #0
   175fc:	db2b      	blt.n	17656 <tls_interface_accept+0xa2>
   175fe:	f7fe fdb9 	bl	16174 <interface_socket_from_handle_get>
   17602:	2224      	movs	r2, #36	; 0x24
   17604:	6803      	ldr	r3, [r0, #0]
   17606:	fb02 f804 	mul.w	r8, r2, r4
   1760a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1760e:	6003      	str	r3, [r0, #0]
   17610:	6803      	ldr	r3, [r0, #0]
   17612:	4f15      	ldr	r7, [pc, #84]	; (17668 <tls_interface_accept+0xb4>)
   17614:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17618:	4605      	mov	r5, r0
   1761a:	fb02 7106 	mla	r1, r2, r6, r7
   1761e:	6003      	str	r3, [r0, #0]
   17620:	eb07 0008 	add.w	r0, r7, r8
   17624:	f009 f809 	bl	2063a <memcpy>
   17628:	2302      	movs	r3, #2
   1762a:	f807 3008 	strb.w	r3, [r7, r8]
   1762e:	682b      	ldr	r3, [r5, #0]
   17630:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17634:	0c1b      	lsrs	r3, r3, #16
   17636:	041b      	lsls	r3, r3, #16
   17638:	f043 030b 	orr.w	r3, r3, #11
   1763c:	602b      	str	r3, [r5, #0]
   1763e:	210c      	movs	r1, #12
   17640:	4620      	mov	r0, r4
   17642:	ab05      	add	r3, sp, #20
   17644:	f007 fb2e 	bl	1eca4 <ip_interface_wait>
   17648:	4605      	mov	r5, r0
   1764a:	2800      	cmp	r0, #0
   1764c:	d0ce      	beq.n	175ec <tls_interface_accept+0x38>
   1764e:	4620      	mov	r0, r4
   17650:	f7fe fee8 	bl	16424 <ip_interface_close>
   17654:	462c      	mov	r4, r5
   17656:	4620      	mov	r0, r4
   17658:	f7fb fe7e 	bl	13358 <nrf_modem_os_errno_set>
   1765c:	f04f 34ff 	mov.w	r4, #4294967295
   17660:	e7c4      	b.n	175ec <tls_interface_accept+0x38>
   17662:	2409      	movs	r4, #9
   17664:	e7f7      	b.n	17656 <tls_interface_accept+0xa2>
   17666:	bf00      	nop
   17668:	2001bf7c 	.word	0x2001bf7c

0001766c <tls_interface_setopt>:
   1766c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1766e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   17672:	4606      	mov	r6, r0
   17674:	4614      	mov	r4, r2
   17676:	461f      	mov	r7, r3
   17678:	9d08      	ldr	r5, [sp, #32]
   1767a:	d004      	beq.n	17686 <tls_interface_setopt+0x1a>
   1767c:	b003      	add	sp, #12
   1767e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   17682:	f007 bd24 	b.w	1f0ce <ip_interface_setopt>
   17686:	b92b      	cbnz	r3, 17694 <tls_interface_setopt+0x28>
   17688:	200e      	movs	r0, #14
   1768a:	f7fb fe65 	bl	13358 <nrf_modem_os_errno_set>
   1768e:	f04f 30ff 	mov.w	r0, #4294967295
   17692:	e021      	b.n	176d8 <tls_interface_setopt+0x6c>
   17694:	f7fe fd6e 	bl	16174 <interface_socket_from_handle_get>
   17698:	4601      	mov	r1, r0
   1769a:	2800      	cmp	r0, #0
   1769c:	d06d      	beq.n	1777a <tls_interface_setopt+0x10e>
   1769e:	6803      	ldr	r3, [r0, #0]
   176a0:	b29b      	uxth	r3, r3
   176a2:	2b02      	cmp	r3, #2
   176a4:	d007      	beq.n	176b6 <tls_interface_setopt+0x4a>
   176a6:	6803      	ldr	r3, [r0, #0]
   176a8:	b29b      	uxth	r3, r3
   176aa:	2b04      	cmp	r3, #4
   176ac:	d003      	beq.n	176b6 <tls_interface_setopt+0x4a>
   176ae:	6803      	ldr	r3, [r0, #0]
   176b0:	b29b      	uxth	r3, r3
   176b2:	2b05      	cmp	r3, #5
   176b4:	d161      	bne.n	1777a <tls_interface_setopt+0x10e>
   176b6:	1e62      	subs	r2, r4, #1
   176b8:	2a05      	cmp	r2, #5
   176ba:	d860      	bhi.n	1777e <tls_interface_setopt+0x112>
   176bc:	e8df f002 	tbb	[pc, r2]
   176c0:	34162203 	.word	0x34162203
   176c4:	513f      	.short	0x513f
   176c6:	2d04      	cmp	r5, #4
   176c8:	d15b      	bne.n	17782 <tls_interface_setopt+0x116>
   176ca:	6838      	ldr	r0, [r7, #0]
   176cc:	b930      	cbnz	r0, 176dc <tls_interface_setopt+0x70>
   176ce:	2324      	movs	r3, #36	; 0x24
   176d0:	2202      	movs	r2, #2
   176d2:	435e      	muls	r6, r3
   176d4:	4b2d      	ldr	r3, [pc, #180]	; (1778c <tls_interface_setopt+0x120>)
   176d6:	559a      	strb	r2, [r3, r6]
   176d8:	b003      	add	sp, #12
   176da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   176dc:	2801      	cmp	r0, #1
   176de:	d150      	bne.n	17782 <tls_interface_setopt+0x116>
   176e0:	2324      	movs	r3, #36	; 0x24
   176e2:	435e      	muls	r6, r3
   176e4:	4b29      	ldr	r3, [pc, #164]	; (1778c <tls_interface_setopt+0x120>)
   176e6:	5598      	strb	r0, [r3, r6]
   176e8:	2000      	movs	r0, #0
   176ea:	e7f5      	b.n	176d8 <tls_interface_setopt+0x6c>
   176ec:	2d01      	cmp	r5, #1
   176ee:	d148      	bne.n	17782 <tls_interface_setopt+0x116>
   176f0:	2024      	movs	r0, #36	; 0x24
   176f2:	783b      	ldrb	r3, [r7, #0]
   176f4:	4a25      	ldr	r2, [pc, #148]	; (1778c <tls_interface_setopt+0x120>)
   176f6:	3b00      	subs	r3, #0
   176f8:	bf18      	it	ne
   176fa:	2301      	movne	r3, #1
   176fc:	fb00 2606 	mla	r6, r0, r6, r2
   17700:	7073      	strb	r3, [r6, #1]
   17702:	e7f1      	b.n	176e8 <tls_interface_setopt+0x7c>
   17704:	2d03      	cmp	r5, #3
   17706:	d93c      	bls.n	17782 <tls_interface_setopt+0x116>
   17708:	f015 0403 	ands.w	r4, r5, #3
   1770c:	d139      	bne.n	17782 <tls_interface_setopt+0x116>
   1770e:	2324      	movs	r3, #36	; 0x24
   17710:	435e      	muls	r6, r3
   17712:	481e      	ldr	r0, [pc, #120]	; (1778c <tls_interface_setopt+0x120>)
   17714:	08aa      	lsrs	r2, r5, #2
   17716:	1983      	adds	r3, r0, r6
   17718:	70da      	strb	r2, [r3, #3]
   1771a:	4639      	mov	r1, r7
   1771c:	462a      	mov	r2, r5
   1771e:	3604      	adds	r6, #4
   17720:	4430      	add	r0, r6
   17722:	f008 ff8a 	bl	2063a <memcpy>
   17726:	e7df      	b.n	176e8 <tls_interface_setopt+0x7c>
   17728:	2d04      	cmp	r5, #4
   1772a:	d12a      	bne.n	17782 <tls_interface_setopt+0x116>
   1772c:	683b      	ldr	r3, [r7, #0]
   1772e:	2b02      	cmp	r3, #2
   17730:	d827      	bhi.n	17782 <tls_interface_setopt+0x116>
   17732:	2024      	movs	r0, #36	; 0x24
   17734:	4a15      	ldr	r2, [pc, #84]	; (1778c <tls_interface_setopt+0x120>)
   17736:	fb00 2606 	mla	r6, r0, r6, r2
   1773a:	70b3      	strb	r3, [r6, #2]
   1773c:	e7d4      	b.n	176e8 <tls_interface_setopt+0x7c>
   1773e:	4630      	mov	r0, r6
   17740:	f7ff fd24 	bl	1718c <hostname_free>
   17744:	2d00      	cmp	r5, #0
   17746:	d0cf      	beq.n	176e8 <tls_interface_setopt+0x7c>
   17748:	4628      	mov	r0, r5
   1774a:	f7fb ff99 	bl	13680 <nrf_modem_os_alloc>
   1774e:	4b10      	ldr	r3, [pc, #64]	; (17790 <tls_interface_setopt+0x124>)
   17750:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   17754:	b1b8      	cbz	r0, 17786 <tls_interface_setopt+0x11a>
   17756:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   1775a:	462a      	mov	r2, r5
   1775c:	4639      	mov	r1, r7
   1775e:	6075      	str	r5, [r6, #4]
   17760:	e7df      	b.n	17722 <tls_interface_setopt+0xb6>
   17762:	f247 0301 	movw	r3, #28673	; 0x7001
   17766:	f44f 7280 	mov.w	r2, #256	; 0x100
   1776a:	4630      	mov	r0, r6
   1776c:	e9cd 7500 	strd	r7, r5, [sp]
   17770:	f007 fc45 	bl	1effe <ip_interface_socketoption_send>
   17774:	2800      	cmp	r0, #0
   17776:	d0b7      	beq.n	176e8 <tls_interface_setopt+0x7c>
   17778:	e787      	b.n	1768a <tls_interface_setopt+0x1e>
   1777a:	2009      	movs	r0, #9
   1777c:	e785      	b.n	1768a <tls_interface_setopt+0x1e>
   1777e:	202a      	movs	r0, #42	; 0x2a
   17780:	e783      	b.n	1768a <tls_interface_setopt+0x1e>
   17782:	2016      	movs	r0, #22
   17784:	e781      	b.n	1768a <tls_interface_setopt+0x1e>
   17786:	200c      	movs	r0, #12
   17788:	e77f      	b.n	1768a <tls_interface_setopt+0x1e>
   1778a:	bf00      	nop
   1778c:	2001bf7c 	.word	0x2001bf7c
   17790:	200186a4 	.word	0x200186a4

00017794 <tls_interface_getopt>:
   17794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17796:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1779a:	4604      	mov	r4, r0
   1779c:	4617      	mov	r7, r2
   1779e:	461d      	mov	r5, r3
   177a0:	9e08      	ldr	r6, [sp, #32]
   177a2:	d004      	beq.n	177ae <tls_interface_getopt+0x1a>
   177a4:	b003      	add	sp, #12
   177a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   177aa:	f007 bd03 	b.w	1f1b4 <ip_interface_getopt>
   177ae:	2b00      	cmp	r3, #0
   177b0:	d054      	beq.n	1785c <tls_interface_getopt+0xc8>
   177b2:	2e00      	cmp	r6, #0
   177b4:	d052      	beq.n	1785c <tls_interface_getopt+0xc8>
   177b6:	f7fe fcdd 	bl	16174 <interface_socket_from_handle_get>
   177ba:	4601      	mov	r1, r0
   177bc:	2800      	cmp	r0, #0
   177be:	d04f      	beq.n	17860 <tls_interface_getopt+0xcc>
   177c0:	1e7a      	subs	r2, r7, #1
   177c2:	2a05      	cmp	r2, #5
   177c4:	d84e      	bhi.n	17864 <tls_interface_getopt+0xd0>
   177c6:	e8df f002 	tbb	[pc, r2]
   177ca:	1b03      	.short	0x1b03
   177cc:	3f4d360f 	.word	0x3f4d360f
   177d0:	6833      	ldr	r3, [r6, #0]
   177d2:	2b04      	cmp	r3, #4
   177d4:	d148      	bne.n	17868 <tls_interface_getopt+0xd4>
   177d6:	2024      	movs	r0, #36	; 0x24
   177d8:	4344      	muls	r4, r0
   177da:	4b24      	ldr	r3, [pc, #144]	; (1786c <tls_interface_getopt+0xd8>)
   177dc:	5d1b      	ldrb	r3, [r3, r4]
   177de:	1e59      	subs	r1, r3, #1
   177e0:	424b      	negs	r3, r1
   177e2:	414b      	adcs	r3, r1
   177e4:	602b      	str	r3, [r5, #0]
   177e6:	e008      	b.n	177fa <tls_interface_getopt+0x66>
   177e8:	6833      	ldr	r3, [r6, #0]
   177ea:	2b01      	cmp	r3, #1
   177ec:	d13c      	bne.n	17868 <tls_interface_getopt+0xd4>
   177ee:	2024      	movs	r0, #36	; 0x24
   177f0:	491e      	ldr	r1, [pc, #120]	; (1786c <tls_interface_getopt+0xd8>)
   177f2:	fb00 1404 	mla	r4, r0, r4, r1
   177f6:	7863      	ldrb	r3, [r4, #1]
   177f8:	702b      	strb	r3, [r5, #0]
   177fa:	2000      	movs	r0, #0
   177fc:	b003      	add	sp, #12
   177fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17800:	2224      	movs	r2, #36	; 0x24
   17802:	491a      	ldr	r1, [pc, #104]	; (1786c <tls_interface_getopt+0xd8>)
   17804:	6833      	ldr	r3, [r6, #0]
   17806:	fb02 1204 	mla	r2, r2, r4, r1
   1780a:	78d0      	ldrb	r0, [r2, #3]
   1780c:	079a      	lsls	r2, r3, #30
   1780e:	bf14      	ite	ne
   17810:	2300      	movne	r3, #0
   17812:	089b      	lsreq	r3, r3, #2
   17814:	4283      	cmp	r3, r0
   17816:	bf28      	it	cs
   17818:	4603      	movcs	r3, r0
   1781a:	009a      	lsls	r2, r3, #2
   1781c:	b143      	cbz	r3, 17830 <tls_interface_getopt+0x9c>
   1781e:	2024      	movs	r0, #36	; 0x24
   17820:	fb00 1104 	mla	r1, r0, r4, r1
   17824:	6032      	str	r2, [r6, #0]
   17826:	4628      	mov	r0, r5
   17828:	3104      	adds	r1, #4
   1782a:	f008 ff06 	bl	2063a <memcpy>
   1782e:	e7e4      	b.n	177fa <tls_interface_getopt+0x66>
   17830:	b9d0      	cbnz	r0, 17868 <tls_interface_getopt+0xd4>
   17832:	6030      	str	r0, [r6, #0]
   17834:	e7e2      	b.n	177fc <tls_interface_getopt+0x68>
   17836:	6833      	ldr	r3, [r6, #0]
   17838:	2b04      	cmp	r3, #4
   1783a:	d115      	bne.n	17868 <tls_interface_getopt+0xd4>
   1783c:	2024      	movs	r0, #36	; 0x24
   1783e:	490b      	ldr	r1, [pc, #44]	; (1786c <tls_interface_getopt+0xd8>)
   17840:	fb00 1404 	mla	r4, r0, r4, r1
   17844:	78a3      	ldrb	r3, [r4, #2]
   17846:	e7cd      	b.n	177e4 <tls_interface_getopt+0x50>
   17848:	f247 0301 	movw	r3, #28673	; 0x7001
   1784c:	f44f 7280 	mov.w	r2, #256	; 0x100
   17850:	4620      	mov	r0, r4
   17852:	e9cd 5600 	strd	r5, r6, [sp]
   17856:	f7fe ff4f 	bl	166f8 <ip_interface_socketoption_get>
   1785a:	e7cf      	b.n	177fc <tls_interface_getopt+0x68>
   1785c:	200e      	movs	r0, #14
   1785e:	e7cd      	b.n	177fc <tls_interface_getopt+0x68>
   17860:	2009      	movs	r0, #9
   17862:	e7cb      	b.n	177fc <tls_interface_getopt+0x68>
   17864:	202a      	movs	r0, #42	; 0x2a
   17866:	e7c9      	b.n	177fc <tls_interface_getopt+0x68>
   17868:	2016      	movs	r0, #22
   1786a:	e7c7      	b.n	177fc <tls_interface_getopt+0x68>
   1786c:	2001bf7c 	.word	0x2001bf7c

00017870 <tls_rpc_ip_event_handler>:
   17870:	b570      	push	{r4, r5, r6, lr}
   17872:	460c      	mov	r4, r1
   17874:	f248 0181 	movw	r1, #32897	; 0x8081
   17878:	428b      	cmp	r3, r1
   1787a:	4606      	mov	r6, r0
   1787c:	d035      	beq.n	178ea <tls_rpc_ip_event_handler+0x7a>
   1787e:	f249 0182 	movw	r1, #36994	; 0x9082
   17882:	428b      	cmp	r3, r1
   17884:	d040      	beq.n	17908 <tls_rpc_ip_event_handler+0x98>
   17886:	f248 0102 	movw	r1, #32770	; 0x8002
   1788a:	428b      	cmp	r3, r1
   1788c:	d161      	bne.n	17952 <tls_rpc_ip_event_handler+0xe2>
   1788e:	2c00      	cmp	r4, #0
   17890:	d05f      	beq.n	17952 <tls_rpc_ip_event_handler+0xe2>
   17892:	6963      	ldr	r3, [r4, #20]
   17894:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   17898:	d002      	beq.n	178a0 <tls_rpc_ip_event_handler+0x30>
   1789a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1789e:	d158      	bne.n	17952 <tls_rpc_ip_event_handler+0xe2>
   178a0:	6823      	ldr	r3, [r4, #0]
   178a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   178a6:	6023      	str	r3, [r4, #0]
   178a8:	6955      	ldr	r5, [r2, #20]
   178aa:	2d00      	cmp	r5, #0
   178ac:	d14d      	bne.n	1794a <tls_rpc_ip_event_handler+0xda>
   178ae:	6823      	ldr	r3, [r4, #0]
   178b0:	0c1b      	lsrs	r3, r3, #16
   178b2:	041b      	lsls	r3, r3, #16
   178b4:	f043 0305 	orr.w	r3, r3, #5
   178b8:	6023      	str	r3, [r4, #0]
   178ba:	6823      	ldr	r3, [r4, #0]
   178bc:	00db      	lsls	r3, r3, #3
   178be:	d401      	bmi.n	178c4 <tls_rpc_ip_event_handler+0x54>
   178c0:	2000      	movs	r0, #0
   178c2:	e020      	b.n	17906 <tls_rpc_ip_event_handler+0x96>
   178c4:	2324      	movs	r3, #36	; 0x24
   178c6:	4373      	muls	r3, r6
   178c8:	4a23      	ldr	r2, [pc, #140]	; (17958 <tls_rpc_ip_event_handler+0xe8>)
   178ca:	5cd3      	ldrb	r3, [r2, r3]
   178cc:	2b02      	cmp	r3, #2
   178ce:	d1f7      	bne.n	178c0 <tls_rpc_ip_event_handler+0x50>
   178d0:	4621      	mov	r1, r4
   178d2:	4630      	mov	r0, r6
   178d4:	f007 fccc 	bl	1f270 <secure_client_socket>
   178d8:	2800      	cmp	r0, #0
   178da:	d0f1      	beq.n	178c0 <tls_rpc_ip_event_handler+0x50>
   178dc:	2873      	cmp	r0, #115	; 0x73
   178de:	d0ef      	beq.n	178c0 <tls_rpc_ip_event_handler+0x50>
   178e0:	6060      	str	r0, [r4, #4]
   178e2:	6823      	ldr	r3, [r4, #0]
   178e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   178e8:	e02d      	b.n	17946 <tls_rpc_ip_event_handler+0xd6>
   178ea:	2c00      	cmp	r4, #0
   178ec:	d0e8      	beq.n	178c0 <tls_rpc_ip_event_handler+0x50>
   178ee:	6823      	ldr	r3, [r4, #0]
   178f0:	b29b      	uxth	r3, r3
   178f2:	2b0a      	cmp	r3, #10
   178f4:	d1e4      	bne.n	178c0 <tls_rpc_ip_event_handler+0x50>
   178f6:	6950      	ldr	r0, [r2, #20]
   178f8:	bb40      	cbnz	r0, 1794c <tls_rpc_ip_event_handler+0xdc>
   178fa:	6823      	ldr	r3, [r4, #0]
   178fc:	0c1b      	lsrs	r3, r3, #16
   178fe:	041b      	lsls	r3, r3, #16
   17900:	f043 030b 	orr.w	r3, r3, #11
   17904:	6023      	str	r3, [r4, #0]
   17906:	bd70      	pop	{r4, r5, r6, pc}
   17908:	2c00      	cmp	r4, #0
   1790a:	d0d9      	beq.n	178c0 <tls_rpc_ip_event_handler+0x50>
   1790c:	6823      	ldr	r3, [r4, #0]
   1790e:	b29b      	uxth	r3, r3
   17910:	2b0b      	cmp	r3, #11
   17912:	d1d5      	bne.n	178c0 <tls_rpc_ip_event_handler+0x50>
   17914:	6915      	ldr	r5, [r2, #16]
   17916:	b9c5      	cbnz	r5, 1794a <tls_rpc_ip_event_handler+0xda>
   17918:	6823      	ldr	r3, [r4, #0]
   1791a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1791e:	6023      	str	r3, [r4, #0]
   17920:	f7ff fc34 	bl	1718c <hostname_free>
   17924:	6823      	ldr	r3, [r4, #0]
   17926:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1792a:	6023      	str	r3, [r4, #0]
   1792c:	6823      	ldr	r3, [r4, #0]
   1792e:	0c1b      	lsrs	r3, r3, #16
   17930:	041b      	lsls	r3, r3, #16
   17932:	f043 030c 	orr.w	r3, r3, #12
   17936:	6023      	str	r3, [r4, #0]
   17938:	6823      	ldr	r3, [r4, #0]
   1793a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1793e:	6023      	str	r3, [r4, #0]
   17940:	6823      	ldr	r3, [r4, #0]
   17942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17946:	6023      	str	r3, [r4, #0]
   17948:	e7ba      	b.n	178c0 <tls_rpc_ip_event_handler+0x50>
   1794a:	4628      	mov	r0, r5
   1794c:	f7fe fcc6 	bl	162dc <rpc_error_to_nrf_errno>
   17950:	e7c6      	b.n	178e0 <tls_rpc_ip_event_handler+0x70>
   17952:	2001      	movs	r0, #1
   17954:	e7d7      	b.n	17906 <tls_rpc_ip_event_handler+0x96>
   17956:	bf00      	nop
   17958:	2001bf7c 	.word	0x2001bf7c

0001795c <at_interface_init>:
   1795c:	2201      	movs	r2, #1
   1795e:	4b02      	ldr	r3, [pc, #8]	; (17968 <at_interface_init+0xc>)
   17960:	2000      	movs	r0, #0
   17962:	701a      	strb	r2, [r3, #0]
   17964:	4770      	bx	lr
   17966:	bf00      	nop
   17968:	2001c0c0 	.word	0x2001c0c0

0001796c <at_interface_open>:
   1796c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17970:	f04f 0800 	mov.w	r8, #0
   17974:	4b19      	ldr	r3, [pc, #100]	; (179dc <at_interface_open+0x70>)
   17976:	4607      	mov	r7, r0
   17978:	781b      	ldrb	r3, [r3, #0]
   1797a:	460d      	mov	r5, r1
   1797c:	4616      	mov	r6, r2
   1797e:	f8cd 800c 	str.w	r8, [sp, #12]
   17982:	b943      	cbnz	r3, 17996 <at_interface_open+0x2a>
   17984:	2070      	movs	r0, #112	; 0x70
   17986:	f7fb fce7 	bl	13358 <nrf_modem_os_errno_set>
   1798a:	f04f 34ff 	mov.w	r4, #4294967295
   1798e:	4620      	mov	r0, r4
   17990:	b004      	add	sp, #16
   17992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17996:	2902      	cmp	r1, #2
   17998:	d001      	beq.n	1799e <at_interface_open+0x32>
   1799a:	2029      	movs	r0, #41	; 0x29
   1799c:	e7f3      	b.n	17986 <at_interface_open+0x1a>
   1799e:	4a10      	ldr	r2, [pc, #64]	; (179e0 <at_interface_open+0x74>)
   179a0:	a803      	add	r0, sp, #12
   179a2:	f7fe fb5d 	bl	16060 <interface_socket_allocate>
   179a6:	9b03      	ldr	r3, [sp, #12]
   179a8:	4604      	mov	r4, r0
   179aa:	2b00      	cmp	r3, #0
   179ac:	d0ef      	beq.n	1798e <at_interface_open+0x22>
   179ae:	e9c3 7503 	strd	r7, r5, [r3, #12]
   179b2:	615e      	str	r6, [r3, #20]
   179b4:	4642      	mov	r2, r8
   179b6:	9500      	str	r5, [sp, #0]
   179b8:	2305      	movs	r3, #5
   179ba:	4641      	mov	r1, r8
   179bc:	f007 fcb6 	bl	1f32c <send_message>
   179c0:	4605      	mov	r5, r0
   179c2:	b120      	cbz	r0, 179ce <at_interface_open+0x62>
   179c4:	4620      	mov	r0, r4
   179c6:	f7fe fb71 	bl	160ac <interface_socket_free>
   179ca:	4628      	mov	r0, r5
   179cc:	e7db      	b.n	17986 <at_interface_open+0x1a>
   179ce:	9a03      	ldr	r2, [sp, #12]
   179d0:	6813      	ldr	r3, [r2, #0]
   179d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   179d6:	6013      	str	r3, [r2, #0]
   179d8:	e7d9      	b.n	1798e <at_interface_open+0x22>
   179da:	bf00      	nop
   179dc:	2001c0c0 	.word	0x2001c0c0
   179e0:	0001f307 	.word	0x0001f307

000179e4 <rpc_dfu_message_send>:
   179e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   179e6:	4605      	mov	r5, r0
   179e8:	460e      	mov	r6, r1
   179ea:	4668      	mov	r0, sp
   179ec:	4611      	mov	r1, r2
   179ee:	4614      	mov	r4, r2
   179f0:	f006 ff46 	bl	1e880 <rpc_dfu_client_request_alloc>
   179f4:	b138      	cbz	r0, 17a06 <rpc_dfu_message_send+0x22>
   179f6:	200c      	movs	r0, #12
   179f8:	f7fb fcae 	bl	13358 <nrf_modem_os_errno_set>
   179fc:	f04f 34ff 	mov.w	r4, #4294967295
   17a00:	4620      	mov	r0, r4
   17a02:	b002      	add	sp, #8
   17a04:	bd70      	pop	{r4, r5, r6, pc}
   17a06:	b12c      	cbz	r4, 17a14 <rpc_dfu_message_send+0x30>
   17a08:	9b00      	ldr	r3, [sp, #0]
   17a0a:	4622      	mov	r2, r4
   17a0c:	4631      	mov	r1, r6
   17a0e:	6818      	ldr	r0, [r3, #0]
   17a10:	f008 fe13 	bl	2063a <memcpy>
   17a14:	4a1c      	ldr	r2, [pc, #112]	; (17a88 <rpc_dfu_message_send+0xa4>)
   17a16:	9800      	ldr	r0, [sp, #0]
   17a18:	8813      	ldrh	r3, [r2, #0]
   17a1a:	2d03      	cmp	r5, #3
   17a1c:	f103 0301 	add.w	r3, r3, #1
   17a20:	b29b      	uxth	r3, r3
   17a22:	8013      	strh	r3, [r2, #0]
   17a24:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   17a28:	60c3      	str	r3, [r0, #12]
   17a2a:	f04f 0300 	mov.w	r3, #0
   17a2e:	bf0a      	itet	eq
   17a30:	4a16      	ldreq	r2, [pc, #88]	; (17a8c <rpc_dfu_message_send+0xa8>)
   17a32:	2204      	movne	r2, #4
   17a34:	6812      	ldreq	r2, [r2, #0]
   17a36:	7243      	strb	r3, [r0, #9]
   17a38:	bf04      	itt	eq
   17a3a:	6102      	streq	r2, [r0, #16]
   17a3c:	2208      	moveq	r2, #8
   17a3e:	7283      	strb	r3, [r0, #10]
   17a40:	72c3      	strb	r3, [r0, #11]
   17a42:	2300      	movs	r3, #0
   17a44:	4e12      	ldr	r6, [pc, #72]	; (17a90 <rpc_dfu_message_send+0xac>)
   17a46:	6044      	str	r4, [r0, #4]
   17a48:	4629      	mov	r1, r5
   17a4a:	7202      	strb	r2, [r0, #8]
   17a4c:	6033      	str	r3, [r6, #0]
   17a4e:	f006 ff29 	bl	1e8a4 <rpc_dfu_client_request_send>
   17a52:	4604      	mov	r4, r0
   17a54:	b140      	cbz	r0, 17a68 <rpc_dfu_message_send+0x84>
   17a56:	9b00      	ldr	r3, [sp, #0]
   17a58:	6818      	ldr	r0, [r3, #0]
   17a5a:	b108      	cbz	r0, 17a60 <rpc_dfu_message_send+0x7c>
   17a5c:	f006 ff3c 	bl	1e8d8 <rpc_dfu_client_data_free>
   17a60:	9800      	ldr	r0, [sp, #0]
   17a62:	f006 ff31 	bl	1e8c8 <rpc_dfu_client_message_free>
   17a66:	e7c6      	b.n	179f6 <rpc_dfu_message_send+0x12>
   17a68:	f04f 33ff 	mov.w	r3, #4294967295
   17a6c:	4d09      	ldr	r5, [pc, #36]	; (17a94 <rpc_dfu_message_send+0xb0>)
   17a6e:	9301      	str	r3, [sp, #4]
   17a70:	6833      	ldr	r3, [r6, #0]
   17a72:	2b00      	cmp	r3, #0
   17a74:	d1c4      	bne.n	17a00 <rpc_dfu_message_send+0x1c>
   17a76:	4628      	mov	r0, r5
   17a78:	a901      	add	r1, sp, #4
   17a7a:	f7fb fbb5 	bl	131e8 <nrf_modem_os_timedwait>
   17a7e:	2800      	cmp	r0, #0
   17a80:	d0f6      	beq.n	17a70 <rpc_dfu_message_send+0x8c>
   17a82:	203c      	movs	r0, #60	; 0x3c
   17a84:	e7b8      	b.n	179f8 <rpc_dfu_message_send+0x14>
   17a86:	bf00      	nop
   17a88:	2001900e 	.word	0x2001900e
   17a8c:	200186ec 	.word	0x200186ec
   17a90:	200186f0 	.word	0x200186f0
   17a94:	200186e4 	.word	0x200186e4

00017a98 <rpc_dfu_event_handler>:
   17a98:	b508      	push	{r3, lr}
   17a9a:	4b08      	ldr	r3, [pc, #32]	; (17abc <rpc_dfu_event_handler+0x24>)
   17a9c:	68c2      	ldr	r2, [r0, #12]
   17a9e:	881b      	ldrh	r3, [r3, #0]
   17aa0:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   17aa4:	d103      	bne.n	17aae <rpc_dfu_event_handler+0x16>
   17aa6:	4b06      	ldr	r3, [pc, #24]	; (17ac0 <rpc_dfu_event_handler+0x28>)
   17aa8:	6018      	str	r0, [r3, #0]
   17aaa:	2001      	movs	r0, #1
   17aac:	bd08      	pop	{r3, pc}
   17aae:	6800      	ldr	r0, [r0, #0]
   17ab0:	2800      	cmp	r0, #0
   17ab2:	d0fb      	beq.n	17aac <rpc_dfu_event_handler+0x14>
   17ab4:	f006 ff10 	bl	1e8d8 <rpc_dfu_client_data_free>
   17ab8:	2000      	movs	r0, #0
   17aba:	e7f7      	b.n	17aac <rpc_dfu_event_handler+0x14>
   17abc:	2001900e 	.word	0x2001900e
   17ac0:	200186f0 	.word	0x200186f0

00017ac4 <mfu_interface_init>:
   17ac4:	2000      	movs	r0, #0
   17ac6:	2201      	movs	r2, #1
   17ac8:	4b04      	ldr	r3, [pc, #16]	; (17adc <mfu_interface_init+0x18>)
   17aca:	8018      	strh	r0, [r3, #0]
   17acc:	4b04      	ldr	r3, [pc, #16]	; (17ae0 <mfu_interface_init+0x1c>)
   17ace:	6018      	str	r0, [r3, #0]
   17ad0:	4b04      	ldr	r3, [pc, #16]	; (17ae4 <mfu_interface_init+0x20>)
   17ad2:	6018      	str	r0, [r3, #0]
   17ad4:	4b04      	ldr	r3, [pc, #16]	; (17ae8 <mfu_interface_init+0x24>)
   17ad6:	601a      	str	r2, [r3, #0]
   17ad8:	4770      	bx	lr
   17ada:	bf00      	nop
   17adc:	2001900e 	.word	0x2001900e
   17ae0:	200186f0 	.word	0x200186f0
   17ae4:	200186ec 	.word	0x200186ec
   17ae8:	200186e4 	.word	0x200186e4

00017aec <mfu_interface_open>:
   17aec:	b508      	push	{r3, lr}
   17aee:	4b07      	ldr	r3, [pc, #28]	; (17b0c <mfu_interface_open+0x20>)
   17af0:	681a      	ldr	r2, [r3, #0]
   17af2:	2a01      	cmp	r2, #1
   17af4:	d005      	beq.n	17b02 <mfu_interface_open+0x16>
   17af6:	2001      	movs	r0, #1
   17af8:	f7fb fc2e 	bl	13358 <nrf_modem_os_errno_set>
   17afc:	f04f 30ff 	mov.w	r0, #4294967295
   17b00:	bd08      	pop	{r3, pc}
   17b02:	2202      	movs	r2, #2
   17b04:	4802      	ldr	r0, [pc, #8]	; (17b10 <mfu_interface_open+0x24>)
   17b06:	601a      	str	r2, [r3, #0]
   17b08:	e7fa      	b.n	17b00 <mfu_interface_open+0x14>
   17b0a:	bf00      	nop
   17b0c:	200186e4 	.word	0x200186e4
   17b10:	49765432 	.word	0x49765432

00017b14 <mfu_interface_close>:
   17b14:	b538      	push	{r3, r4, r5, lr}
   17b16:	4c11      	ldr	r4, [pc, #68]	; (17b5c <mfu_interface_close+0x48>)
   17b18:	6822      	ldr	r2, [r4, #0]
   17b1a:	1e91      	subs	r1, r2, #2
   17b1c:	2901      	cmp	r1, #1
   17b1e:	d905      	bls.n	17b2c <mfu_interface_close+0x18>
   17b20:	2001      	movs	r0, #1
   17b22:	f7fb fc19 	bl	13358 <nrf_modem_os_errno_set>
   17b26:	f04f 30ff 	mov.w	r0, #4294967295
   17b2a:	e015      	b.n	17b58 <mfu_interface_close+0x44>
   17b2c:	2a03      	cmp	r2, #3
   17b2e:	d110      	bne.n	17b52 <mfu_interface_close+0x3e>
   17b30:	2200      	movs	r2, #0
   17b32:	2006      	movs	r0, #6
   17b34:	4611      	mov	r1, r2
   17b36:	f7ff ff55 	bl	179e4 <rpc_dfu_message_send>
   17b3a:	2800      	cmp	r0, #0
   17b3c:	d1f3      	bne.n	17b26 <mfu_interface_close+0x12>
   17b3e:	4b08      	ldr	r3, [pc, #32]	; (17b60 <mfu_interface_close+0x4c>)
   17b40:	6818      	ldr	r0, [r3, #0]
   17b42:	6905      	ldr	r5, [r0, #16]
   17b44:	f006 fec0 	bl	1e8c8 <rpc_dfu_client_message_free>
   17b48:	b11d      	cbz	r5, 17b52 <mfu_interface_close+0x3e>
   17b4a:	4b06      	ldr	r3, [pc, #24]	; (17b64 <mfu_interface_close+0x50>)
   17b4c:	2008      	movs	r0, #8
   17b4e:	601d      	str	r5, [r3, #0]
   17b50:	e7e7      	b.n	17b22 <mfu_interface_close+0xe>
   17b52:	2301      	movs	r3, #1
   17b54:	2000      	movs	r0, #0
   17b56:	6023      	str	r3, [r4, #0]
   17b58:	bd38      	pop	{r3, r4, r5, pc}
   17b5a:	bf00      	nop
   17b5c:	200186e4 	.word	0x200186e4
   17b60:	200186f0 	.word	0x200186f0
   17b64:	200186e8 	.word	0x200186e8

00017b68 <mfu_interface_sendto>:
   17b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b6a:	4e1f      	ldr	r6, [pc, #124]	; (17be8 <mfu_interface_sendto+0x80>)
   17b6c:	460d      	mov	r5, r1
   17b6e:	6831      	ldr	r1, [r6, #0]
   17b70:	4614      	mov	r4, r2
   17b72:	1e88      	subs	r0, r1, #2
   17b74:	2801      	cmp	r0, #1
   17b76:	9a06      	ldr	r2, [sp, #24]
   17b78:	d903      	bls.n	17b82 <mfu_interface_sendto+0x1a>
   17b7a:	2001      	movs	r0, #1
   17b7c:	f7fb fbec 	bl	13358 <nrf_modem_os_errno_set>
   17b80:	e010      	b.n	17ba4 <mfu_interface_sendto+0x3c>
   17b82:	b105      	cbz	r5, 17b86 <mfu_interface_sendto+0x1e>
   17b84:	b90c      	cbnz	r4, 17b8a <mfu_interface_sendto+0x22>
   17b86:	2016      	movs	r0, #22
   17b88:	e7f8      	b.n	17b7c <mfu_interface_sendto+0x14>
   17b8a:	b10b      	cbz	r3, 17b90 <mfu_interface_sendto+0x28>
   17b8c:	202d      	movs	r0, #45	; 0x2d
   17b8e:	e7f5      	b.n	17b7c <mfu_interface_sendto+0x14>
   17b90:	b10a      	cbz	r2, 17b96 <mfu_interface_sendto+0x2e>
   17b92:	2038      	movs	r0, #56	; 0x38
   17b94:	e7f2      	b.n	17b7c <mfu_interface_sendto+0x14>
   17b96:	2902      	cmp	r1, #2
   17b98:	d114      	bne.n	17bc4 <mfu_interface_sendto+0x5c>
   17b9a:	4611      	mov	r1, r2
   17b9c:	2003      	movs	r0, #3
   17b9e:	f7ff ff21 	bl	179e4 <rpc_dfu_message_send>
   17ba2:	b118      	cbz	r0, 17bac <mfu_interface_sendto+0x44>
   17ba4:	f04f 34ff 	mov.w	r4, #4294967295
   17ba8:	4620      	mov	r0, r4
   17baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17bac:	4b0f      	ldr	r3, [pc, #60]	; (17bec <mfu_interface_sendto+0x84>)
   17bae:	6818      	ldr	r0, [r3, #0]
   17bb0:	6907      	ldr	r7, [r0, #16]
   17bb2:	f006 fe89 	bl	1e8c8 <rpc_dfu_client_message_free>
   17bb6:	b11f      	cbz	r7, 17bc0 <mfu_interface_sendto+0x58>
   17bb8:	4b0d      	ldr	r3, [pc, #52]	; (17bf0 <mfu_interface_sendto+0x88>)
   17bba:	601f      	str	r7, [r3, #0]
   17bbc:	2008      	movs	r0, #8
   17bbe:	e7dd      	b.n	17b7c <mfu_interface_sendto+0x14>
   17bc0:	2303      	movs	r3, #3
   17bc2:	6033      	str	r3, [r6, #0]
   17bc4:	4622      	mov	r2, r4
   17bc6:	4629      	mov	r1, r5
   17bc8:	2004      	movs	r0, #4
   17bca:	f7ff ff0b 	bl	179e4 <rpc_dfu_message_send>
   17bce:	2800      	cmp	r0, #0
   17bd0:	d1e8      	bne.n	17ba4 <mfu_interface_sendto+0x3c>
   17bd2:	4b06      	ldr	r3, [pc, #24]	; (17bec <mfu_interface_sendto+0x84>)
   17bd4:	6818      	ldr	r0, [r3, #0]
   17bd6:	6905      	ldr	r5, [r0, #16]
   17bd8:	f006 fe76 	bl	1e8c8 <rpc_dfu_client_message_free>
   17bdc:	2d00      	cmp	r5, #0
   17bde:	d0e3      	beq.n	17ba8 <mfu_interface_sendto+0x40>
   17be0:	4b03      	ldr	r3, [pc, #12]	; (17bf0 <mfu_interface_sendto+0x88>)
   17be2:	601d      	str	r5, [r3, #0]
   17be4:	e7ea      	b.n	17bbc <mfu_interface_sendto+0x54>
   17be6:	bf00      	nop
   17be8:	200186e4 	.word	0x200186e4
   17bec:	200186f0 	.word	0x200186f0
   17bf0:	200186e8 	.word	0x200186e8

00017bf4 <mfu_interface_setopt>:
   17bf4:	481d      	ldr	r0, [pc, #116]	; (17c6c <_flash_used+0x44>)
   17bf6:	b510      	push	{r4, lr}
   17bf8:	6800      	ldr	r0, [r0, #0]
   17bfa:	3802      	subs	r0, #2
   17bfc:	2801      	cmp	r0, #1
   17bfe:	d905      	bls.n	17c0c <mfu_interface_setopt+0x18>
   17c00:	2001      	movs	r0, #1
   17c02:	f7fb fba9 	bl	13358 <nrf_modem_os_errno_set>
   17c06:	f04f 30ff 	mov.w	r0, #4294967295
   17c0a:	e026      	b.n	17c5a <_flash_used+0x32>
   17c0c:	f240 2003 	movw	r0, #515	; 0x203
   17c10:	4281      	cmp	r1, r0
   17c12:	d001      	beq.n	17c18 <mfu_interface_setopt+0x24>
   17c14:	2016      	movs	r0, #22
   17c16:	e7f4      	b.n	17c02 <mfu_interface_setopt+0xe>
   17c18:	3a04      	subs	r2, #4
   17c1a:	2a03      	cmp	r2, #3
   17c1c:	d81e      	bhi.n	17c5c <_flash_used+0x34>
   17c1e:	e8df f002 	tbb	[pc, r2]
   17c22:	021f      	.short	0x021f
   17c24:	1321      	.short	0x1321
   17c26:	2007      	movs	r0, #7
   17c28:	2200      	movs	r2, #0
   17c2a:	4611      	mov	r1, r2
   17c2c:	f7ff feda 	bl	179e4 <rpc_dfu_message_send>
   17c30:	2800      	cmp	r0, #0
   17c32:	d1e8      	bne.n	17c06 <mfu_interface_setopt+0x12>
   17c34:	4b0e      	ldr	r3, [pc, #56]	; (17c70 <_flash_used+0x48>)
   17c36:	6818      	ldr	r0, [r3, #0]
   17c38:	6904      	ldr	r4, [r0, #16]
   17c3a:	f006 fe45 	bl	1e8c8 <rpc_dfu_client_message_free>
   17c3e:	b19c      	cbz	r4, 17c68 <_flash_used+0x40>
   17c40:	4b0c      	ldr	r3, [pc, #48]	; (17c74 <_flash_used+0x4c>)
   17c42:	2008      	movs	r0, #8
   17c44:	601c      	str	r4, [r3, #0]
   17c46:	e7dc      	b.n	17c02 <mfu_interface_setopt+0xe>
   17c48:	2b00      	cmp	r3, #0
   17c4a:	d0e3      	beq.n	17c14 <mfu_interface_setopt+0x20>
   17c4c:	9a02      	ldr	r2, [sp, #8]
   17c4e:	2a04      	cmp	r2, #4
   17c50:	d1e0      	bne.n	17c14 <mfu_interface_setopt+0x20>
   17c52:	2000      	movs	r0, #0
   17c54:	681a      	ldr	r2, [r3, #0]
   17c56:	4b08      	ldr	r3, [pc, #32]	; (17c78 <_flash_used+0x50>)
   17c58:	601a      	str	r2, [r3, #0]
   17c5a:	bd10      	pop	{r4, pc}
   17c5c:	202a      	movs	r0, #42	; 0x2a
   17c5e:	e7d0      	b.n	17c02 <mfu_interface_setopt+0xe>
   17c60:	2005      	movs	r0, #5
   17c62:	e7e1      	b.n	17c28 <_flash_used>
   17c64:	2008      	movs	r0, #8
   17c66:	e7df      	b.n	17c28 <_flash_used>
   17c68:	4620      	mov	r0, r4
   17c6a:	e7f6      	b.n	17c5a <_flash_used+0x32>
   17c6c:	200186e4 	.word	0x200186e4
   17c70:	200186f0 	.word	0x200186f0
   17c74:	200186e8 	.word	0x200186e8
   17c78:	200186ec 	.word	0x200186ec

00017c7c <mfu_interface_getopt>:
   17c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17c7e:	461e      	mov	r6, r3
   17c80:	f240 2303 	movw	r3, #515	; 0x203
   17c84:	4299      	cmp	r1, r3
   17c86:	9d06      	ldr	r5, [sp, #24]
   17c88:	d101      	bne.n	17c8e <mfu_interface_getopt+0x12>
   17c8a:	b106      	cbz	r6, 17c8e <mfu_interface_getopt+0x12>
   17c8c:	b92d      	cbnz	r5, 17c9a <mfu_interface_getopt+0x1e>
   17c8e:	2016      	movs	r0, #22
   17c90:	f7fb fb62 	bl	13358 <nrf_modem_os_errno_set>
   17c94:	f04f 30ff 	mov.w	r0, #4294967295
   17c98:	e019      	b.n	17cce <mfu_interface_getopt+0x52>
   17c9a:	4b22      	ldr	r3, [pc, #136]	; (17d24 <mfu_interface_getopt+0xa8>)
   17c9c:	681b      	ldr	r3, [r3, #0]
   17c9e:	3b02      	subs	r3, #2
   17ca0:	2b01      	cmp	r3, #1
   17ca2:	d901      	bls.n	17ca8 <mfu_interface_getopt+0x2c>
   17ca4:	2001      	movs	r0, #1
   17ca6:	e7f3      	b.n	17c90 <mfu_interface_getopt+0x14>
   17ca8:	2a07      	cmp	r2, #7
   17caa:	d02b      	beq.n	17d04 <mfu_interface_getopt+0x88>
   17cac:	dc05      	bgt.n	17cba <mfu_interface_getopt+0x3e>
   17cae:	2a01      	cmp	r2, #1
   17cb0:	d00e      	beq.n	17cd0 <mfu_interface_getopt+0x54>
   17cb2:	2a02      	cmp	r2, #2
   17cb4:	d023      	beq.n	17cfe <mfu_interface_getopt+0x82>
   17cb6:	202a      	movs	r0, #42	; 0x2a
   17cb8:	e7ea      	b.n	17c90 <mfu_interface_getopt+0x14>
   17cba:	2a14      	cmp	r2, #20
   17cbc:	d1fb      	bne.n	17cb6 <mfu_interface_getopt+0x3a>
   17cbe:	682b      	ldr	r3, [r5, #0]
   17cc0:	2b04      	cmp	r3, #4
   17cc2:	d1e4      	bne.n	17c8e <mfu_interface_getopt+0x12>
   17cc4:	2000      	movs	r0, #0
   17cc6:	4b18      	ldr	r3, [pc, #96]	; (17d28 <mfu_interface_getopt+0xac>)
   17cc8:	681a      	ldr	r2, [r3, #0]
   17cca:	6018      	str	r0, [r3, #0]
   17ccc:	6032      	str	r2, [r6, #0]
   17cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17cd0:	682b      	ldr	r3, [r5, #0]
   17cd2:	2b24      	cmp	r3, #36	; 0x24
   17cd4:	d1db      	bne.n	17c8e <mfu_interface_getopt+0x12>
   17cd6:	4610      	mov	r0, r2
   17cd8:	2200      	movs	r2, #0
   17cda:	4611      	mov	r1, r2
   17cdc:	f7ff fe82 	bl	179e4 <rpc_dfu_message_send>
   17ce0:	2800      	cmp	r0, #0
   17ce2:	d1d7      	bne.n	17c94 <mfu_interface_getopt+0x18>
   17ce4:	4f11      	ldr	r7, [pc, #68]	; (17d2c <mfu_interface_getopt+0xb0>)
   17ce6:	6839      	ldr	r1, [r7, #0]
   17ce8:	690c      	ldr	r4, [r1, #16]
   17cea:	b184      	cbz	r4, 17d0e <mfu_interface_getopt+0x92>
   17cec:	4b0e      	ldr	r3, [pc, #56]	; (17d28 <mfu_interface_getopt+0xac>)
   17cee:	2008      	movs	r0, #8
   17cf0:	601c      	str	r4, [r3, #0]
   17cf2:	f7fb fb31 	bl	13358 <nrf_modem_os_errno_set>
   17cf6:	6838      	ldr	r0, [r7, #0]
   17cf8:	f006 fde6 	bl	1e8c8 <rpc_dfu_client_message_free>
   17cfc:	e7ca      	b.n	17c94 <mfu_interface_getopt+0x18>
   17cfe:	682b      	ldr	r3, [r5, #0]
   17d00:	2b04      	cmp	r3, #4
   17d02:	e7e7      	b.n	17cd4 <mfu_interface_getopt+0x58>
   17d04:	682b      	ldr	r3, [r5, #0]
   17d06:	2b04      	cmp	r3, #4
   17d08:	d1c1      	bne.n	17c8e <mfu_interface_getopt+0x12>
   17d0a:	2009      	movs	r0, #9
   17d0c:	e7e4      	b.n	17cd8 <mfu_interface_getopt+0x5c>
   17d0e:	682a      	ldr	r2, [r5, #0]
   17d10:	3114      	adds	r1, #20
   17d12:	4630      	mov	r0, r6
   17d14:	f008 fc91 	bl	2063a <memcpy>
   17d18:	6838      	ldr	r0, [r7, #0]
   17d1a:	f006 fdd5 	bl	1e8c8 <rpc_dfu_client_message_free>
   17d1e:	4620      	mov	r0, r4
   17d20:	e7d5      	b.n	17cce <mfu_interface_getopt+0x52>
   17d22:	bf00      	nop
   17d24:	200186e4 	.word	0x200186e4
   17d28:	200186e8 	.word	0x200186e8
   17d2c:	200186f0 	.word	0x200186f0

00017d30 <send_message>:
   17d30:	b5f0      	push	{r4, r5, r6, r7, lr}
   17d32:	b085      	sub	sp, #20
   17d34:	4606      	mov	r6, r0
   17d36:	460f      	mov	r7, r1
   17d38:	a803      	add	r0, sp, #12
   17d3a:	4611      	mov	r1, r2
   17d3c:	9201      	str	r2, [sp, #4]
   17d3e:	f006 fdd7 	bl	1e8f0 <rpc_gnss_client_request_alloc>
   17d42:	9b03      	ldr	r3, [sp, #12]
   17d44:	4604      	mov	r4, r0
   17d46:	b958      	cbnz	r0, 17d60 <send_message+0x30>
   17d48:	9a01      	ldr	r2, [sp, #4]
   17d4a:	b98b      	cbnz	r3, 17d70 <send_message+0x40>
   17d4c:	9803      	ldr	r0, [sp, #12]
   17d4e:	f006 fdf5 	bl	1e93c <rpc_gnss_client_message_free>
   17d52:	2023      	movs	r0, #35	; 0x23
   17d54:	f7fb fb00 	bl	13358 <nrf_modem_os_errno_set>
   17d58:	f04f 30ff 	mov.w	r0, #4294967295
   17d5c:	b005      	add	sp, #20
   17d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17d60:	2b00      	cmp	r3, #0
   17d62:	d0f3      	beq.n	17d4c <send_message+0x1c>
   17d64:	6818      	ldr	r0, [r3, #0]
   17d66:	2800      	cmp	r0, #0
   17d68:	d0f0      	beq.n	17d4c <send_message+0x1c>
   17d6a:	f006 fdef 	bl	1e94c <rpc_gnss_client_data_free>
   17d6e:	e7ed      	b.n	17d4c <send_message+0x1c>
   17d70:	490f      	ldr	r1, [pc, #60]	; (17db0 <send_message+0x80>)
   17d72:	880d      	ldrh	r5, [r1, #0]
   17d74:	3501      	adds	r5, #1
   17d76:	b2ad      	uxth	r5, r5
   17d78:	800d      	strh	r5, [r1, #0]
   17d7a:	2143      	movs	r1, #67	; 0x43
   17d7c:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
   17d80:	603d      	str	r5, [r7, #0]
   17d82:	7319      	strb	r1, [r3, #12]
   17d84:	2154      	movs	r1, #84	; 0x54
   17d86:	7359      	strb	r1, [r3, #13]
   17d88:	2176      	movs	r1, #118	; 0x76
   17d8a:	7399      	strb	r1, [r3, #14]
   17d8c:	2149      	movs	r1, #73	; 0x49
   17d8e:	605a      	str	r2, [r3, #4]
   17d90:	7218      	strb	r0, [r3, #8]
   17d92:	7258      	strb	r0, [r3, #9]
   17d94:	7298      	strb	r0, [r3, #10]
   17d96:	72d8      	strb	r0, [r3, #11]
   17d98:	73d9      	strb	r1, [r3, #15]
   17d9a:	6818      	ldr	r0, [r3, #0]
   17d9c:	4639      	mov	r1, r7
   17d9e:	f008 fc4c 	bl	2063a <memcpy>
   17da2:	4b04      	ldr	r3, [pc, #16]	; (17db4 <send_message+0x84>)
   17da4:	4631      	mov	r1, r6
   17da6:	9803      	ldr	r0, [sp, #12]
   17da8:	601c      	str	r4, [r3, #0]
   17daa:	f006 fdb3 	bl	1e914 <rpc_gnss_client_request_send>
   17dae:	e7d5      	b.n	17d5c <send_message+0x2c>
   17db0:	20019010 	.word	0x20019010
   17db4:	200186f8 	.word	0x200186f8

00017db8 <rpc_gnss_event_handler>:
   17db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   17dba:	4b5b      	ldr	r3, [pc, #364]	; (17f28 <rpc_gnss_event_handler+0x170>)
   17dbc:	4605      	mov	r5, r0
   17dbe:	6800      	ldr	r0, [r0, #0]
   17dc0:	881b      	ldrh	r3, [r3, #0]
   17dc2:	6802      	ldr	r2, [r0, #0]
   17dc4:	460c      	mov	r4, r1
   17dc6:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   17dca:	b085      	sub	sp, #20
   17dcc:	d134      	bne.n	17e38 <rpc_gnss_event_handler+0x80>
   17dce:	4b57      	ldr	r3, [pc, #348]	; (17f2c <rpc_gnss_event_handler+0x174>)
   17dd0:	4e57      	ldr	r6, [pc, #348]	; (17f30 <rpc_gnss_event_handler+0x178>)
   17dd2:	681a      	ldr	r2, [r3, #0]
   17dd4:	6030      	str	r0, [r6, #0]
   17dd6:	01d2      	lsls	r2, r2, #7
   17dd8:	d50d      	bpl.n	17df6 <rpc_gnss_event_handler+0x3e>
   17dda:	f242 1202 	movw	r2, #8450	; 0x2102
   17dde:	4291      	cmp	r1, r2
   17de0:	d109      	bne.n	17df6 <rpc_gnss_event_handler+0x3e>
   17de2:	6842      	ldr	r2, [r0, #4]
   17de4:	b91a      	cbnz	r2, 17dee <rpc_gnss_event_handler+0x36>
   17de6:	681a      	ldr	r2, [r3, #0]
   17de8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   17dec:	601a      	str	r2, [r3, #0]
   17dee:	681a      	ldr	r2, [r3, #0]
   17df0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   17df4:	601a      	str	r2, [r3, #0]
   17df6:	681a      	ldr	r2, [r3, #0]
   17df8:	0257      	lsls	r7, r2, #9
   17dfa:	d50d      	bpl.n	17e18 <rpc_gnss_event_handler+0x60>
   17dfc:	f242 1203 	movw	r2, #8451	; 0x2103
   17e00:	4294      	cmp	r4, r2
   17e02:	d109      	bne.n	17e18 <rpc_gnss_event_handler+0x60>
   17e04:	6842      	ldr	r2, [r0, #4]
   17e06:	b91a      	cbnz	r2, 17e10 <rpc_gnss_event_handler+0x58>
   17e08:	681a      	ldr	r2, [r3, #0]
   17e0a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   17e0e:	601a      	str	r2, [r3, #0]
   17e10:	681a      	ldr	r2, [r3, #0]
   17e12:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   17e16:	e04a      	b.n	17eae <rpc_gnss_event_handler+0xf6>
   17e18:	f242 0201 	movw	r2, #8193	; 0x2001
   17e1c:	4294      	cmp	r4, r2
   17e1e:	d03e      	beq.n	17e9e <rpc_gnss_event_handler+0xe6>
   17e20:	f242 0204 	movw	r2, #8196	; 0x2004
   17e24:	4294      	cmp	r4, r2
   17e26:	d044      	beq.n	17eb2 <rpc_gnss_event_handler+0xfa>
   17e28:	f242 0205 	movw	r2, #8197	; 0x2005
   17e2c:	4294      	cmp	r4, r2
   17e2e:	d05d      	beq.n	17eec <rpc_gnss_event_handler+0x134>
   17e30:	f006 fd8c 	bl	1e94c <rpc_gnss_client_data_free>
   17e34:	2300      	movs	r3, #0
   17e36:	6033      	str	r3, [r6, #0]
   17e38:	f504 433f 	add.w	r3, r4, #48896	; 0xbf00
   17e3c:	33ff      	adds	r3, #255	; 0xff
   17e3e:	b29b      	uxth	r3, r3
   17e40:	2b02      	cmp	r3, #2
   17e42:	d869      	bhi.n	17f18 <rpc_gnss_event_handler+0x160>
   17e44:	4f39      	ldr	r7, [pc, #228]	; (17f2c <rpc_gnss_event_handler+0x174>)
   17e46:	683b      	ldr	r3, [r7, #0]
   17e48:	075a      	lsls	r2, r3, #29
   17e4a:	d406      	bmi.n	17e5a <rpc_gnss_event_handler+0xa2>
   17e4c:	683b      	ldr	r3, [r7, #0]
   17e4e:	079b      	lsls	r3, r3, #30
   17e50:	d51c      	bpl.n	17e8c <rpc_gnss_event_handler+0xd4>
   17e52:	f244 0303 	movw	r3, #16387	; 0x4003
   17e56:	429c      	cmp	r4, r3
   17e58:	d118      	bne.n	17e8c <rpc_gnss_event_handler+0xd4>
   17e5a:	2002      	movs	r0, #2
   17e5c:	f7fb fc10 	bl	13680 <nrf_modem_os_alloc>
   17e60:	4606      	mov	r6, r0
   17e62:	6828      	ldr	r0, [r5, #0]
   17e64:	2e00      	cmp	r6, #0
   17e66:	d052      	beq.n	17f0e <rpc_gnss_event_handler+0x156>
   17e68:	8034      	strh	r4, [r6, #0]
   17e6a:	686b      	ldr	r3, [r5, #4]
   17e6c:	9000      	str	r0, [sp, #0]
   17e6e:	e9cd 3601 	strd	r3, r6, [sp, #4]
   17e72:	2302      	movs	r3, #2
   17e74:	9303      	str	r3, [sp, #12]
   17e76:	4b2f      	ldr	r3, [pc, #188]	; (17f34 <rpc_gnss_event_handler+0x17c>)
   17e78:	4669      	mov	r1, sp
   17e7a:	6818      	ldr	r0, [r3, #0]
   17e7c:	6803      	ldr	r3, [r0, #0]
   17e7e:	685b      	ldr	r3, [r3, #4]
   17e80:	4798      	blx	r3
   17e82:	3001      	adds	r0, #1
   17e84:	d14b      	bne.n	17f1e <rpc_gnss_event_handler+0x166>
   17e86:	4630      	mov	r0, r6
   17e88:	f7fb fc0a 	bl	136a0 <nrf_modem_os_free>
   17e8c:	6828      	ldr	r0, [r5, #0]
   17e8e:	2800      	cmp	r0, #0
   17e90:	d042      	beq.n	17f18 <rpc_gnss_event_handler+0x160>
   17e92:	f006 fd5b 	bl	1e94c <rpc_gnss_client_data_free>
   17e96:	2200      	movs	r2, #0
   17e98:	4b25      	ldr	r3, [pc, #148]	; (17f30 <rpc_gnss_event_handler+0x178>)
   17e9a:	601a      	str	r2, [r3, #0]
   17e9c:	e03c      	b.n	17f18 <rpc_gnss_event_handler+0x160>
   17e9e:	6842      	ldr	r2, [r0, #4]
   17ea0:	2a00      	cmp	r2, #0
   17ea2:	d1c5      	bne.n	17e30 <rpc_gnss_event_handler+0x78>
   17ea4:	681a      	ldr	r2, [r3, #0]
   17ea6:	0c12      	lsrs	r2, r2, #16
   17ea8:	0412      	lsls	r2, r2, #16
   17eaa:	f042 0202 	orr.w	r2, r2, #2
   17eae:	601a      	str	r2, [r3, #0]
   17eb0:	e7be      	b.n	17e30 <rpc_gnss_event_handler+0x78>
   17eb2:	6842      	ldr	r2, [r0, #4]
   17eb4:	b9b2      	cbnz	r2, 17ee4 <rpc_gnss_event_handler+0x12c>
   17eb6:	681a      	ldr	r2, [r3, #0]
   17eb8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   17ebc:	601a      	str	r2, [r3, #0]
   17ebe:	681a      	ldr	r2, [r3, #0]
   17ec0:	b292      	uxth	r2, r2
   17ec2:	2a03      	cmp	r2, #3
   17ec4:	681a      	ldr	r2, [r3, #0]
   17ec6:	d104      	bne.n	17ed2 <rpc_gnss_event_handler+0x11a>
   17ec8:	0c12      	lsrs	r2, r2, #16
   17eca:	0412      	lsls	r2, r2, #16
   17ecc:	f042 0204 	orr.w	r2, r2, #4
   17ed0:	e79d      	b.n	17e0e <rpc_gnss_event_handler+0x56>
   17ed2:	b292      	uxth	r2, r2
   17ed4:	2a04      	cmp	r2, #4
   17ed6:	d19b      	bne.n	17e10 <rpc_gnss_event_handler+0x58>
   17ed8:	681a      	ldr	r2, [r3, #0]
   17eda:	0c12      	lsrs	r2, r2, #16
   17edc:	0412      	lsls	r2, r2, #16
   17ede:	f042 0202 	orr.w	r2, r2, #2
   17ee2:	e794      	b.n	17e0e <rpc_gnss_event_handler+0x56>
   17ee4:	681a      	ldr	r2, [r3, #0]
   17ee6:	b292      	uxth	r2, r2
   17ee8:	2a03      	cmp	r2, #3
   17eea:	e7f4      	b.n	17ed6 <rpc_gnss_event_handler+0x11e>
   17eec:	681a      	ldr	r2, [r3, #0]
   17eee:	0291      	lsls	r1, r2, #10
   17ef0:	d59e      	bpl.n	17e30 <rpc_gnss_event_handler+0x78>
   17ef2:	6842      	ldr	r2, [r0, #4]
   17ef4:	b93a      	cbnz	r2, 17f06 <rpc_gnss_event_handler+0x14e>
   17ef6:	681a      	ldr	r2, [r3, #0]
   17ef8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   17efc:	601a      	str	r2, [r3, #0]
   17efe:	681a      	ldr	r2, [r3, #0]
   17f00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   17f04:	e7d3      	b.n	17eae <rpc_gnss_event_handler+0xf6>
   17f06:	681a      	ldr	r2, [r3, #0]
   17f08:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   17f0c:	e7cf      	b.n	17eae <rpc_gnss_event_handler+0xf6>
   17f0e:	b118      	cbz	r0, 17f18 <rpc_gnss_event_handler+0x160>
   17f10:	f006 fd1c 	bl	1e94c <rpc_gnss_client_data_free>
   17f14:	4b06      	ldr	r3, [pc, #24]	; (17f30 <rpc_gnss_event_handler+0x178>)
   17f16:	601e      	str	r6, [r3, #0]
   17f18:	2000      	movs	r0, #0
   17f1a:	b005      	add	sp, #20
   17f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17f1e:	683b      	ldr	r3, [r7, #0]
   17f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17f24:	603b      	str	r3, [r7, #0]
   17f26:	e7f7      	b.n	17f18 <rpc_gnss_event_handler+0x160>
   17f28:	20019010 	.word	0x20019010
   17f2c:	200186f4 	.word	0x200186f4
   17f30:	200186f8 	.word	0x200186f8
   17f34:	200186fc 	.word	0x200186fc

00017f38 <gnss_interface_write>:
   17f38:	b570      	push	{r4, r5, r6, lr}
   17f3a:	4604      	mov	r4, r0
   17f3c:	4a40      	ldr	r2, [pc, #256]	; (18040 <gnss_interface_write+0x108>)
   17f3e:	b09e      	sub	sp, #120	; 0x78
   17f40:	4294      	cmp	r4, r2
   17f42:	4608      	mov	r0, r1
   17f44:	9d22      	ldr	r5, [sp, #136]	; 0x88
   17f46:	d005      	beq.n	17f54 <gnss_interface_write+0x1c>
   17f48:	2009      	movs	r0, #9
   17f4a:	f7fb fa05 	bl	13358 <nrf_modem_os_errno_set>
   17f4e:	f04f 33ff 	mov.w	r3, #4294967295
   17f52:	e061      	b.n	18018 <gnss_interface_write+0xe0>
   17f54:	b119      	cbz	r1, 17f5e <gnss_interface_write+0x26>
   17f56:	b115      	cbz	r5, 17f5e <gnss_interface_write+0x26>
   17f58:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   17f5a:	2a02      	cmp	r2, #2
   17f5c:	d001      	beq.n	17f62 <gnss_interface_write+0x2a>
   17f5e:	2016      	movs	r0, #22
   17f60:	e7f3      	b.n	17f4a <gnss_interface_write+0x12>
   17f62:	4a38      	ldr	r2, [pc, #224]	; (18044 <gnss_interface_write+0x10c>)
   17f64:	6811      	ldr	r1, [r2, #0]
   17f66:	4614      	mov	r4, r2
   17f68:	b289      	uxth	r1, r1
   17f6a:	2902      	cmp	r1, #2
   17f6c:	d005      	beq.n	17f7a <gnss_interface_write+0x42>
   17f6e:	6812      	ldr	r2, [r2, #0]
   17f70:	b292      	uxth	r2, r2
   17f72:	2a04      	cmp	r2, #4
   17f74:	d001      	beq.n	17f7a <gnss_interface_write+0x42>
   17f76:	2039      	movs	r0, #57	; 0x39
   17f78:	e7e7      	b.n	17f4a <gnss_interface_write+0x12>
   17f7a:	b10b      	cbz	r3, 17f80 <gnss_interface_write+0x48>
   17f7c:	202d      	movs	r0, #45	; 0x2d
   17f7e:	e7e4      	b.n	17f4a <gnss_interface_write+0x12>
   17f80:	6822      	ldr	r2, [r4, #0]
   17f82:	0396      	lsls	r6, r2, #14
   17f84:	d548      	bpl.n	18018 <gnss_interface_write+0xe0>
   17f86:	6823      	ldr	r3, [r4, #0]
   17f88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   17f8c:	6023      	str	r3, [r4, #0]
   17f8e:	6823      	ldr	r3, [r4, #0]
   17f90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   17f94:	6023      	str	r3, [r4, #0]
   17f96:	882b      	ldrh	r3, [r5, #0]
   17f98:	3b01      	subs	r3, #1
   17f9a:	2b07      	cmp	r3, #7
   17f9c:	d8df      	bhi.n	17f5e <gnss_interface_write+0x26>
   17f9e:	e8df f003 	tbb	[pc, r3]
   17fa2:	1704      	.short	0x1704
   17fa4:	27231f1b 	.word	0x27231f1b
   17fa8:	2f2b      	.short	0x2f2b
   17faa:	a902      	add	r1, sp, #8
   17fac:	f006 fcd5 	bl	1e95a <rpc_gnss_serialize_utc>
   17fb0:	2272      	movs	r2, #114	; 0x72
   17fb2:	f241 0005 	movw	r0, #4101	; 0x1005
   17fb6:	a901      	add	r1, sp, #4
   17fb8:	f7ff feba 	bl	17d30 <send_message>
   17fbc:	4603      	mov	r3, r0
   17fbe:	bb18      	cbnz	r0, 18008 <gnss_interface_write+0xd0>
   17fc0:	4d21      	ldr	r5, [pc, #132]	; (18048 <gnss_interface_write+0x110>)
   17fc2:	4e1f      	ldr	r6, [pc, #124]	; (18040 <gnss_interface_write+0x108>)
   17fc4:	6822      	ldr	r2, [r4, #0]
   17fc6:	0291      	lsls	r1, r2, #10
   17fc8:	d52f      	bpl.n	1802a <gnss_interface_write+0xf2>
   17fca:	b343      	cbz	r3, 1801e <gnss_interface_write+0xe6>
   17fcc:	4618      	mov	r0, r3
   17fce:	e7bc      	b.n	17f4a <gnss_interface_write+0x12>
   17fd0:	a902      	add	r1, sp, #8
   17fd2:	f006 fcdf 	bl	1e994 <rpc_gnss_serialize_ephe>
   17fd6:	e7eb      	b.n	17fb0 <gnss_interface_write+0x78>
   17fd8:	a902      	add	r1, sp, #8
   17fda:	f006 fd25 	bl	1ea28 <rpc_gnss_serialize_alm>
   17fde:	e7e7      	b.n	17fb0 <gnss_interface_write+0x78>
   17fe0:	a902      	add	r1, sp, #8
   17fe2:	f006 fd4e 	bl	1ea82 <rpc_gnss_serialize_klob>
   17fe6:	e7e3      	b.n	17fb0 <gnss_interface_write+0x78>
   17fe8:	a902      	add	r1, sp, #8
   17fea:	f006 fd65 	bl	1eab8 <rpc_gnss_serialize_nequick>
   17fee:	e7df      	b.n	17fb0 <gnss_interface_write+0x78>
   17ff0:	a902      	add	r1, sp, #8
   17ff2:	f006 fd76 	bl	1eae2 <rpc_gnss_serialize_time_and_sv_tow>
   17ff6:	e7db      	b.n	17fb0 <gnss_interface_write+0x78>
   17ff8:	a902      	add	r1, sp, #8
   17ffa:	f006 fd95 	bl	1eb28 <rpc_gnss_serialize_location>
   17ffe:	e7d7      	b.n	17fb0 <gnss_interface_write+0x78>
   18000:	a902      	add	r1, sp, #8
   18002:	f006 fdae 	bl	1eb62 <rpc_gnss_serialize_integrity>
   18006:	e7d3      	b.n	17fb0 <gnss_interface_write+0x78>
   18008:	6822      	ldr	r2, [r4, #0]
   1800a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   1800e:	6022      	str	r2, [r4, #0]
   18010:	6822      	ldr	r2, [r4, #0]
   18012:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   18016:	6022      	str	r2, [r4, #0]
   18018:	4618      	mov	r0, r3
   1801a:	b01e      	add	sp, #120	; 0x78
   1801c:	bd70      	pop	{r4, r5, r6, pc}
   1801e:	4629      	mov	r1, r5
   18020:	4630      	mov	r0, r6
   18022:	f7fb f8e1 	bl	131e8 <nrf_modem_os_timedwait>
   18026:	4603      	mov	r3, r0
   18028:	e7cc      	b.n	17fc4 <gnss_interface_write+0x8c>
   1802a:	2b00      	cmp	r3, #0
   1802c:	d1ce      	bne.n	17fcc <gnss_interface_write+0x94>
   1802e:	6822      	ldr	r2, [r4, #0]
   18030:	0392      	lsls	r2, r2, #14
   18032:	d4f1      	bmi.n	18018 <gnss_interface_write+0xe0>
   18034:	6823      	ldr	r3, [r4, #0]
   18036:	2005      	movs	r0, #5
   18038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1803c:	6023      	str	r3, [r4, #0]
   1803e:	e784      	b.n	17f4a <gnss_interface_write+0x12>
   18040:	49765443 	.word	0x49765443
   18044:	200186f4 	.word	0x200186f4
   18048:	2001459c 	.word	0x2001459c

0001804c <gnss_interface_read>:
   1804c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18050:	469a      	mov	sl, r3
   18052:	4b7d      	ldr	r3, [pc, #500]	; (18248 <gnss_interface_read+0x1fc>)
   18054:	460c      	mov	r4, r1
   18056:	4298      	cmp	r0, r3
   18058:	b0b5      	sub	sp, #212	; 0xd4
   1805a:	d008      	beq.n	1806e <gnss_interface_read+0x22>
   1805c:	2009      	movs	r0, #9
   1805e:	f7fb f97b 	bl	13358 <nrf_modem_os_errno_set>
   18062:	f04f 35ff 	mov.w	r5, #4294967295
   18066:	4628      	mov	r0, r5
   18068:	b035      	add	sp, #212	; 0xd4
   1806a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1806e:	b109      	cbz	r1, 18074 <gnss_interface_read+0x28>
   18070:	2ad7      	cmp	r2, #215	; 0xd7
   18072:	d801      	bhi.n	18078 <gnss_interface_read+0x2c>
   18074:	2016      	movs	r0, #22
   18076:	e7f2      	b.n	1805e <gnss_interface_read+0x12>
   18078:	4b74      	ldr	r3, [pc, #464]	; (1824c <gnss_interface_read+0x200>)
   1807a:	681a      	ldr	r2, [r3, #0]
   1807c:	461e      	mov	r6, r3
   1807e:	b292      	uxth	r2, r2
   18080:	2a04      	cmp	r2, #4
   18082:	d005      	beq.n	18090 <gnss_interface_read+0x44>
   18084:	681b      	ldr	r3, [r3, #0]
   18086:	b29b      	uxth	r3, r3
   18088:	2b02      	cmp	r3, #2
   1808a:	d001      	beq.n	18090 <gnss_interface_read+0x44>
   1808c:	2039      	movs	r0, #57	; 0x39
   1808e:	e7e6      	b.n	1805e <gnss_interface_read+0x12>
   18090:	f1ba 0f00 	cmp.w	sl, #0
   18094:	d004      	beq.n	180a0 <gnss_interface_read+0x54>
   18096:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   1809a:	d101      	bne.n	180a0 <gnss_interface_read+0x54>
   1809c:	202d      	movs	r0, #45	; 0x2d
   1809e:	e7de      	b.n	1805e <gnss_interface_read+0x12>
   180a0:	6833      	ldr	r3, [r6, #0]
   180a2:	f04f 0900 	mov.w	r9, #0
   180a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   180aa:	6033      	str	r3, [r6, #0]
   180ac:	23b6      	movs	r3, #182	; 0xb6
   180ae:	9303      	str	r3, [sp, #12]
   180b0:	f10d 0306 	add.w	r3, sp, #6
   180b4:	9304      	str	r3, [sp, #16]
   180b6:	2302      	movs	r3, #2
   180b8:	f10d 0818 	add.w	r8, sp, #24
   180bc:	4f64      	ldr	r7, [pc, #400]	; (18250 <gnss_interface_read+0x204>)
   180be:	f8df b188 	ldr.w	fp, [pc, #392]	; 18248 <gnss_interface_read+0x1fc>
   180c2:	f8cd 8008 	str.w	r8, [sp, #8]
   180c6:	9305      	str	r3, [sp, #20]
   180c8:	6838      	ldr	r0, [r7, #0]
   180ca:	a902      	add	r1, sp, #8
   180cc:	6802      	ldr	r2, [r0, #0]
   180ce:	6895      	ldr	r5, [r2, #8]
   180d0:	4652      	mov	r2, sl
   180d2:	47a8      	blx	r5
   180d4:	1e05      	subs	r5, r0, #0
   180d6:	da13      	bge.n	18100 <gnss_interface_read+0xb4>
   180d8:	f01a 0f02 	tst.w	sl, #2
   180dc:	d10e      	bne.n	180fc <gnss_interface_read+0xb0>
   180de:	4d5d      	ldr	r5, [pc, #372]	; (18254 <gnss_interface_read+0x208>)
   180e0:	6832      	ldr	r2, [r6, #0]
   180e2:	495d      	ldr	r1, [pc, #372]	; (18258 <gnss_interface_read+0x20c>)
   180e4:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
   180e8:	ea52 0309 	orrs.w	r3, r2, r9
   180ec:	7828      	ldrb	r0, [r5, #0]
   180ee:	d027      	beq.n	18140 <gnss_interface_read+0xf4>
   180f0:	2800      	cmp	r0, #0
   180f2:	d1e9      	bne.n	180c8 <gnss_interface_read+0x7c>
   180f4:	f04f 0970 	mov.w	r9, #112	; 0x70
   180f8:	4648      	mov	r0, r9
   180fa:	e7b0      	b.n	1805e <gnss_interface_read+0x12>
   180fc:	1c6b      	adds	r3, r5, #1
   180fe:	d026      	beq.n	1814e <gnss_interface_read+0x102>
   18100:	f244 0202 	movw	r2, #16386	; 0x4002
   18104:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   18108:	4293      	cmp	r3, r2
   1810a:	d127      	bne.n	1815c <gnss_interface_read+0x110>
   1810c:	4640      	mov	r0, r8
   1810e:	f7f4 ff11 	bl	cf34 <strlen>
   18112:	2302      	movs	r3, #2
   18114:	1c45      	adds	r5, r0, #1
   18116:	f804 3b08 	strb.w	r3, [r4], #8
   1811a:	b2ad      	uxth	r5, r5
   1811c:	462a      	mov	r2, r5
   1811e:	4641      	mov	r1, r8
   18120:	4620      	mov	r0, r4
   18122:	f008 fa8a 	bl	2063a <memcpy>
   18126:	3508      	adds	r5, #8
   18128:	4b49      	ldr	r3, [pc, #292]	; (18250 <gnss_interface_read+0x204>)
   1812a:	6818      	ldr	r0, [r3, #0]
   1812c:	6803      	ldr	r3, [r0, #0]
   1812e:	68db      	ldr	r3, [r3, #12]
   18130:	4798      	blx	r3
   18132:	2800      	cmp	r0, #0
   18134:	bfc2      	ittt	gt
   18136:	6833      	ldrgt	r3, [r6, #0]
   18138:	f443 3380 	orrgt.w	r3, r3, #65536	; 0x10000
   1813c:	6033      	strgt	r3, [r6, #0]
   1813e:	e792      	b.n	18066 <gnss_interface_read+0x1a>
   18140:	2800      	cmp	r0, #0
   18142:	d0d7      	beq.n	180f4 <gnss_interface_read+0xa8>
   18144:	4658      	mov	r0, fp
   18146:	f7fb f84f 	bl	131e8 <nrf_modem_os_timedwait>
   1814a:	4681      	mov	r9, r0
   1814c:	e7c8      	b.n	180e0 <gnss_interface_read+0x94>
   1814e:	f1b9 0f00 	cmp.w	r9, #0
   18152:	d1d1      	bne.n	180f8 <gnss_interface_read+0xac>
   18154:	2023      	movs	r0, #35	; 0x23
   18156:	f7fb f8ff 	bl	13358 <nrf_modem_os_errno_set>
   1815a:	e784      	b.n	18066 <gnss_interface_read+0x1a>
   1815c:	f244 0201 	movw	r2, #16385	; 0x4001
   18160:	4293      	cmp	r3, r2
   18162:	d160      	bne.n	18226 <gnss_interface_read+0x1da>
   18164:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   18168:	2301      	movs	r3, #1
   1816a:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   1816e:	7023      	strb	r3, [r4, #0]
   18170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   18174:	e9c4 2304 	strd	r2, r3, [r4, #16]
   18178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1817a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
   1817e:	61a3      	str	r3, [r4, #24]
   18180:	f8dd 5045 	ldr.w	r5, [sp, #69]	; 0x45
   18184:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18186:	6365      	str	r5, [r4, #52]	; 0x34
   18188:	61e3      	str	r3, [r4, #28]
   1818a:	f8dd 5049 	ldr.w	r5, [sp, #73]	; 0x49
   1818e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18190:	63a5      	str	r5, [r4, #56]	; 0x38
   18192:	6223      	str	r3, [r4, #32]
   18194:	f8dd 504d 	ldr.w	r5, [sp, #77]	; 0x4d
   18198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1819a:	63e5      	str	r5, [r4, #60]	; 0x3c
   1819c:	6263      	str	r3, [r4, #36]	; 0x24
   1819e:	f8dd 5051 	ldr.w	r5, [sp, #81]	; 0x51
   181a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   181a4:	6425      	str	r5, [r4, #64]	; 0x40
   181a6:	62a3      	str	r3, [r4, #40]	; 0x28
   181a8:	f89d 5042 	ldrb.w	r5, [sp, #66]	; 0x42
   181ac:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   181b0:	e9c4 0102 	strd	r0, r1, [r4, #8]
   181b4:	85a3      	strh	r3, [r4, #44]	; 0x2c
   181b6:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
   181ba:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   181be:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   181c2:	200a      	movs	r0, #10
   181c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   181c8:	2200      	movs	r2, #0
   181ca:	8623      	strh	r3, [r4, #48]	; 0x30
   181cc:	f8b8 303e 	ldrh.w	r3, [r8, #62]	; 0x3e
   181d0:	340c      	adds	r4, #12
   181d2:	8763      	strh	r3, [r4, #58]	; 0x3a
   181d4:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
   181d8:	f108 080a 	add.w	r8, r8, #10
   181dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   181e0:	ab34      	add	r3, sp, #208	; 0xd0
   181e2:	fb00 3302 	mla	r3, r0, r2, r3
   181e6:	f813 5c76 	ldrb.w	r5, [r3, #-118]
   181ea:	f813 1c77 	ldrb.w	r1, [r3, #-119]
   181ee:	3201      	adds	r2, #1
   181f0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   181f4:	87e1      	strh	r1, [r4, #62]	; 0x3e
   181f6:	f813 1c75 	ldrb.w	r1, [r3, #-117]
   181fa:	f813 5c74 	ldrb.w	r5, [r3, #-116]
   181fe:	2a0c      	cmp	r2, #12
   18200:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   18204:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
   18208:	f813 1c73 	ldrb.w	r1, [r3, #-115]
   1820c:	f813 3c72 	ldrb.w	r3, [r3, #-114]
   18210:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
   18214:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
   18218:	f898 303d 	ldrb.w	r3, [r8, #61]	; 0x3d
   1821c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   18220:	d1d4      	bne.n	181cc <gnss_interface_read+0x180>
   18222:	25d8      	movs	r5, #216	; 0xd8
   18224:	e780      	b.n	18128 <gnss_interface_read+0xdc>
   18226:	f244 0203 	movw	r2, #16387	; 0x4003
   1822a:	4293      	cmp	r3, r2
   1822c:	f47f af22 	bne.w	18074 <gnss_interface_read+0x28>
   18230:	2303      	movs	r3, #3
   18232:	7023      	strb	r3, [r4, #0]
   18234:	9b06      	ldr	r3, [sp, #24]
   18236:	2514      	movs	r5, #20
   18238:	60a3      	str	r3, [r4, #8]
   1823a:	9b07      	ldr	r3, [sp, #28]
   1823c:	60e3      	str	r3, [r4, #12]
   1823e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   18242:	6123      	str	r3, [r4, #16]
   18244:	e770      	b.n	18128 <gnss_interface_read+0xdc>
   18246:	bf00      	nop
   18248:	49765443 	.word	0x49765443
   1824c:	200186f4 	.word	0x200186f4
   18250:	200186fc 	.word	0x200186fc
   18254:	2001c0c1 	.word	0x2001c0c1
   18258:	2001459c 	.word	0x2001459c

0001825c <gnss_interface_setopt>:
   1825c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18260:	4c75      	ldr	r4, [pc, #468]	; (18438 <gnss_interface_setopt+0x1dc>)
   18262:	4616      	mov	r6, r2
   18264:	6822      	ldr	r2, [r4, #0]
   18266:	b087      	sub	sp, #28
   18268:	b292      	uxth	r2, r2
   1826a:	2a02      	cmp	r2, #2
   1826c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1826e:	d007      	beq.n	18280 <gnss_interface_setopt+0x24>
   18270:	2e08      	cmp	r6, #8
   18272:	d005      	beq.n	18280 <gnss_interface_setopt+0x24>
   18274:	f1a6 020a 	sub.w	r2, r6, #10
   18278:	2a01      	cmp	r2, #1
   1827a:	d901      	bls.n	18280 <gnss_interface_setopt+0x24>
   1827c:	200e      	movs	r0, #14
   1827e:	e003      	b.n	18288 <gnss_interface_setopt+0x2c>
   18280:	6822      	ldr	r2, [r4, #0]
   18282:	0252      	lsls	r2, r2, #9
   18284:	d508      	bpl.n	18298 <gnss_interface_setopt+0x3c>
   18286:	2073      	movs	r0, #115	; 0x73
   18288:	f7fb f866 	bl	13358 <nrf_modem_os_errno_set>
   1828c:	f04f 35ff 	mov.w	r5, #4294967295
   18290:	4628      	mov	r0, r5
   18292:	b007      	add	sp, #28
   18294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18298:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1829c:	d001      	beq.n	182a2 <gnss_interface_setopt+0x46>
   1829e:	202a      	movs	r0, #42	; 0x2a
   182a0:	e7f2      	b.n	18288 <gnss_interface_setopt+0x2c>
   182a2:	4a66      	ldr	r2, [pc, #408]	; (1843c <gnss_interface_setopt+0x1e0>)
   182a4:	4290      	cmp	r0, r2
   182a6:	d001      	beq.n	182ac <gnss_interface_setopt+0x50>
   182a8:	2009      	movs	r0, #9
   182aa:	e7ed      	b.n	18288 <gnss_interface_setopt+0x2c>
   182ac:	f1a6 020a 	sub.w	r2, r6, #10
   182b0:	2a01      	cmp	r2, #1
   182b2:	d902      	bls.n	182ba <gnss_interface_setopt+0x5e>
   182b4:	b90b      	cbnz	r3, 182ba <gnss_interface_setopt+0x5e>
   182b6:	2016      	movs	r0, #22
   182b8:	e7e6      	b.n	18288 <gnss_interface_setopt+0x2c>
   182ba:	1e72      	subs	r2, r6, #1
   182bc:	2a0a      	cmp	r2, #10
   182be:	d8fa      	bhi.n	182b6 <gnss_interface_setopt+0x5a>
   182c0:	e8df f002 	tbb	[pc, r2]
   182c4:	4b45063d 	.word	0x4b45063d
   182c8:	806a5a53 	.word	0x806a5a53
   182cc:	9362      	.short	0x9362
   182ce:	a5          	.byte	0xa5
   182cf:	00          	.byte	0x00
   182d0:	2d02      	cmp	r5, #2
   182d2:	d1f0      	bne.n	182b6 <gnss_interface_setopt+0x5a>
   182d4:	2210      	movs	r2, #16
   182d6:	881b      	ldrh	r3, [r3, #0]
   182d8:	9202      	str	r2, [sp, #8]
   182da:	f8ad 3011 	strh.w	r3, [sp, #17]
   182de:	f241 1003 	movw	r0, #4355	; 0x1103
   182e2:	6823      	ldr	r3, [r4, #0]
   182e4:	2212      	movs	r2, #18
   182e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   182ea:	a901      	add	r1, sp, #4
   182ec:	6023      	str	r3, [r4, #0]
   182ee:	f7ff fd1f 	bl	17d30 <send_message>
   182f2:	4605      	mov	r5, r0
   182f4:	2800      	cmp	r0, #0
   182f6:	f040 8091 	bne.w	1841c <gnss_interface_setopt+0x1c0>
   182fa:	f8df 9148 	ldr.w	r9, [pc, #328]	; 18444 <gnss_interface_setopt+0x1e8>
   182fe:	f8df 813c 	ldr.w	r8, [pc, #316]	; 1843c <gnss_interface_setopt+0x1e0>
   18302:	4649      	mov	r1, r9
   18304:	4640      	mov	r0, r8
   18306:	f7fa ff6f 	bl	131e8 <nrf_modem_os_timedwait>
   1830a:	6827      	ldr	r7, [r4, #0]
   1830c:	f417 0780 	ands.w	r7, r7, #4194304	; 0x400000
   18310:	d1f7      	bne.n	18302 <gnss_interface_setopt+0xa6>
   18312:	f8df 8134 	ldr.w	r8, [pc, #308]	; 18448 <gnss_interface_setopt+0x1ec>
   18316:	f8d8 0000 	ldr.w	r0, [r8]
   1831a:	b118      	cbz	r0, 18324 <gnss_interface_setopt+0xc8>
   1831c:	f006 fb16 	bl	1e94c <rpc_gnss_client_data_free>
   18320:	f8c8 7000 	str.w	r7, [r8]
   18324:	6823      	ldr	r3, [r4, #0]
   18326:	021b      	lsls	r3, r3, #8
   18328:	d47d      	bmi.n	18426 <gnss_interface_setopt+0x1ca>
   1832a:	200e      	movs	r0, #14
   1832c:	f7fb f814 	bl	13358 <nrf_modem_os_errno_set>
   18330:	f04f 35ff 	mov.w	r5, #4294967295
   18334:	6823      	ldr	r3, [r4, #0]
   18336:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1833a:	6023      	str	r3, [r4, #0]
   1833c:	e7a8      	b.n	18290 <gnss_interface_setopt+0x34>
   1833e:	2d02      	cmp	r5, #2
   18340:	d1b9      	bne.n	182b6 <gnss_interface_setopt+0x5a>
   18342:	2208      	movs	r2, #8
   18344:	881b      	ldrh	r3, [r3, #0]
   18346:	9202      	str	r2, [sp, #8]
   18348:	f8ad 300f 	strh.w	r3, [sp, #15]
   1834c:	e7c7      	b.n	182de <gnss_interface_setopt+0x82>
   1834e:	2d01      	cmp	r5, #1
   18350:	d1b1      	bne.n	182b6 <gnss_interface_setopt+0x5a>
   18352:	781b      	ldrb	r3, [r3, #0]
   18354:	2b01      	cmp	r3, #1
   18356:	d0c2      	beq.n	182de <gnss_interface_setopt+0x82>
   18358:	e7ad      	b.n	182b6 <gnss_interface_setopt+0x5a>
   1835a:	2d02      	cmp	r5, #2
   1835c:	d1ab      	bne.n	182b6 <gnss_interface_setopt+0x5a>
   1835e:	2220      	movs	r2, #32
   18360:	881b      	ldrh	r3, [r3, #0]
   18362:	9202      	str	r2, [sp, #8]
   18364:	f8ad 3013 	strh.w	r3, [sp, #19]
   18368:	e7b9      	b.n	182de <gnss_interface_setopt+0x82>
   1836a:	2d01      	cmp	r5, #1
   1836c:	d1a3      	bne.n	182b6 <gnss_interface_setopt+0x5a>
   1836e:	781b      	ldrb	r3, [r3, #0]
   18370:	9502      	str	r5, [sp, #8]
   18372:	f88d 300c 	strb.w	r3, [sp, #12]
   18376:	e7b2      	b.n	182de <gnss_interface_setopt+0x82>
   18378:	2d01      	cmp	r5, #1
   1837a:	d19c      	bne.n	182b6 <gnss_interface_setopt+0x5a>
   1837c:	2202      	movs	r2, #2
   1837e:	781b      	ldrb	r3, [r3, #0]
   18380:	9202      	str	r2, [sp, #8]
   18382:	f88d 300d 	strb.w	r3, [sp, #13]
   18386:	e7aa      	b.n	182de <gnss_interface_setopt+0x82>
   18388:	2d01      	cmp	r5, #1
   1838a:	d194      	bne.n	182b6 <gnss_interface_setopt+0x5a>
   1838c:	2240      	movs	r2, #64	; 0x40
   1838e:	781b      	ldrb	r3, [r3, #0]
   18390:	9202      	str	r2, [sp, #8]
   18392:	f88d 3015 	strb.w	r3, [sp, #21]
   18396:	e7a2      	b.n	182de <gnss_interface_setopt+0x82>
   18398:	6822      	ldr	r2, [r4, #0]
   1839a:	b292      	uxth	r2, r2
   1839c:	2a02      	cmp	r2, #2
   1839e:	f47f af6d 	bne.w	1827c <gnss_interface_setopt+0x20>
   183a2:	2d04      	cmp	r5, #4
   183a4:	d187      	bne.n	182b6 <gnss_interface_setopt+0x5a>
   183a6:	2201      	movs	r2, #1
   183a8:	681b      	ldr	r3, [r3, #0]
   183aa:	f88d 2008 	strb.w	r2, [sp, #8]
   183ae:	f8cd 3009 	str.w	r3, [sp, #9]
   183b2:	6823      	ldr	r3, [r4, #0]
   183b4:	0c1b      	lsrs	r3, r3, #16
   183b6:	041b      	lsls	r3, r3, #16
   183b8:	f043 0303 	orr.w	r3, r3, #3
   183bc:	6023      	str	r3, [r4, #0]
   183be:	f241 0004 	movw	r0, #4100	; 0x1004
   183c2:	e78e      	b.n	182e2 <gnss_interface_setopt+0x86>
   183c4:	6822      	ldr	r2, [r4, #0]
   183c6:	b292      	uxth	r2, r2
   183c8:	2a04      	cmp	r2, #4
   183ca:	d004      	beq.n	183d6 <gnss_interface_setopt+0x17a>
   183cc:	6822      	ldr	r2, [r4, #0]
   183ce:	b292      	uxth	r2, r2
   183d0:	2a02      	cmp	r2, #2
   183d2:	f47f af53 	bne.w	1827c <gnss_interface_setopt+0x20>
   183d6:	2200      	movs	r2, #0
   183d8:	2d04      	cmp	r5, #4
   183da:	f88d 2008 	strb.w	r2, [sp, #8]
   183de:	f47f af6a 	bne.w	182b6 <gnss_interface_setopt+0x5a>
   183e2:	681b      	ldr	r3, [r3, #0]
   183e4:	f8cd 3009 	str.w	r3, [sp, #9]
   183e8:	e7e9      	b.n	183be <gnss_interface_setopt+0x162>
   183ea:	6823      	ldr	r3, [r4, #0]
   183ec:	b29b      	uxth	r3, r3
   183ee:	2b04      	cmp	r3, #4
   183f0:	f47f af44 	bne.w	1827c <gnss_interface_setopt+0x20>
   183f4:	2302      	movs	r3, #2
   183f6:	f88d 3008 	strb.w	r3, [sp, #8]
   183fa:	2300      	movs	r3, #0
   183fc:	f88d 3009 	strb.w	r3, [sp, #9]
   18400:	f88d 300a 	strb.w	r3, [sp, #10]
   18404:	f88d 300b 	strb.w	r3, [sp, #11]
   18408:	f88d 300c 	strb.w	r3, [sp, #12]
   1840c:	e7d7      	b.n	183be <gnss_interface_setopt+0x162>
   1840e:	6823      	ldr	r3, [r4, #0]
   18410:	b29b      	uxth	r3, r3
   18412:	2b04      	cmp	r3, #4
   18414:	f47f af32 	bne.w	1827c <gnss_interface_setopt+0x20>
   18418:	2303      	movs	r3, #3
   1841a:	e7ec      	b.n	183f6 <gnss_interface_setopt+0x19a>
   1841c:	6823      	ldr	r3, [r4, #0]
   1841e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   18422:	6023      	str	r3, [r4, #0]
   18424:	e72a      	b.n	1827c <gnss_interface_setopt+0x20>
   18426:	2e08      	cmp	r6, #8
   18428:	d184      	bne.n	18334 <gnss_interface_setopt+0xd8>
   1842a:	4b05      	ldr	r3, [pc, #20]	; (18440 <gnss_interface_setopt+0x1e4>)
   1842c:	6818      	ldr	r0, [r3, #0]
   1842e:	6803      	ldr	r3, [r0, #0]
   18430:	691b      	ldr	r3, [r3, #16]
   18432:	4798      	blx	r3
   18434:	e77e      	b.n	18334 <gnss_interface_setopt+0xd8>
   18436:	bf00      	nop
   18438:	200186f4 	.word	0x200186f4
   1843c:	49765443 	.word	0x49765443
   18440:	200186fc 	.word	0x200186fc
   18444:	2001459c 	.word	0x2001459c
   18448:	200186f8 	.word	0x200186f8

0001844c <gnss_interface_getopt>:
   1844c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18450:	461d      	mov	r5, r3
   18452:	4b44      	ldr	r3, [pc, #272]	; (18564 <gnss_interface_getopt+0x118>)
   18454:	b087      	sub	sp, #28
   18456:	681e      	ldr	r6, [r3, #0]
   18458:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1845a:	b2b6      	uxth	r6, r6
   1845c:	2e02      	cmp	r6, #2
   1845e:	461e      	mov	r6, r3
   18460:	d001      	beq.n	18466 <gnss_interface_getopt+0x1a>
   18462:	200e      	movs	r0, #14
   18464:	e003      	b.n	1846e <gnss_interface_getopt+0x22>
   18466:	681f      	ldr	r7, [r3, #0]
   18468:	03ff      	lsls	r7, r7, #15
   1846a:	d508      	bpl.n	1847e <gnss_interface_getopt+0x32>
   1846c:	2005      	movs	r0, #5
   1846e:	f7fa ff73 	bl	13358 <nrf_modem_os_errno_set>
   18472:	f04f 34ff 	mov.w	r4, #4294967295
   18476:	4620      	mov	r0, r4
   18478:	b007      	add	sp, #28
   1847a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1847e:	681b      	ldr	r3, [r3, #0]
   18480:	01df      	lsls	r7, r3, #7
   18482:	d501      	bpl.n	18488 <gnss_interface_getopt+0x3c>
   18484:	2073      	movs	r0, #115	; 0x73
   18486:	e7f2      	b.n	1846e <gnss_interface_getopt+0x22>
   18488:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1848c:	d001      	beq.n	18492 <gnss_interface_getopt+0x46>
   1848e:	202a      	movs	r0, #42	; 0x2a
   18490:	e7ed      	b.n	1846e <gnss_interface_getopt+0x22>
   18492:	4b35      	ldr	r3, [pc, #212]	; (18568 <gnss_interface_getopt+0x11c>)
   18494:	4298      	cmp	r0, r3
   18496:	d001      	beq.n	1849c <gnss_interface_getopt+0x50>
   18498:	2009      	movs	r0, #9
   1849a:	e7e8      	b.n	1846e <gnss_interface_getopt+0x22>
   1849c:	b105      	cbz	r5, 184a0 <gnss_interface_getopt+0x54>
   1849e:	b90c      	cbnz	r4, 184a4 <gnss_interface_getopt+0x58>
   184a0:	2016      	movs	r0, #22
   184a2:	e7e4      	b.n	1846e <gnss_interface_getopt+0x22>
   184a4:	1e57      	subs	r7, r2, #1
   184a6:	2f05      	cmp	r7, #5
   184a8:	d8fa      	bhi.n	184a0 <gnss_interface_getopt+0x54>
   184aa:	e8df f007 	tbb	[pc, r7]
   184ae:	0303      	.short	0x0303
   184b0:	30300330 	.word	0x30300330
   184b4:	6823      	ldr	r3, [r4, #0]
   184b6:	2b02      	cmp	r3, #2
   184b8:	d1f2      	bne.n	184a0 <gnss_interface_getopt+0x54>
   184ba:	6833      	ldr	r3, [r6, #0]
   184bc:	2212      	movs	r2, #18
   184be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   184c2:	2100      	movs	r1, #0
   184c4:	a801      	add	r0, sp, #4
   184c6:	6033      	str	r3, [r6, #0]
   184c8:	f008 f8c4 	bl	20654 <memset>
   184cc:	2212      	movs	r2, #18
   184ce:	f241 1002 	movw	r0, #4354	; 0x1102
   184d2:	a901      	add	r1, sp, #4
   184d4:	f7ff fc2c 	bl	17d30 <send_message>
   184d8:	4604      	mov	r4, r0
   184da:	b9d8      	cbnz	r0, 18514 <gnss_interface_getopt+0xc8>
   184dc:	f8df 9090 	ldr.w	r9, [pc, #144]	; 18570 <gnss_interface_getopt+0x124>
   184e0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 18568 <gnss_interface_getopt+0x11c>
   184e4:	4649      	mov	r1, r9
   184e6:	4640      	mov	r0, r8
   184e8:	f7fa fe7e 	bl	131e8 <nrf_modem_os_timedwait>
   184ec:	6833      	ldr	r3, [r6, #0]
   184ee:	01d9      	lsls	r1, r3, #7
   184f0:	d4f8      	bmi.n	184e4 <gnss_interface_getopt+0x98>
   184f2:	4a1e      	ldr	r2, [pc, #120]	; (1856c <gnss_interface_getopt+0x120>)
   184f4:	6813      	ldr	r3, [r2, #0]
   184f6:	4690      	mov	r8, r2
   184f8:	b1db      	cbz	r3, 18532 <gnss_interface_getopt+0xe6>
   184fa:	6832      	ldr	r2, [r6, #0]
   184fc:	0192      	lsls	r2, r2, #6
   184fe:	d518      	bpl.n	18532 <gnss_interface_getopt+0xe6>
   18500:	2f05      	cmp	r7, #5
   18502:	d828      	bhi.n	18556 <gnss_interface_getopt+0x10a>
   18504:	e8df f007 	tbb	[pc, r7]
   18508:	201d1a0b 	.word	0x201d1a0b
   1850c:	2523      	.short	0x2523
   1850e:	6823      	ldr	r3, [r4, #0]
   18510:	2b01      	cmp	r3, #1
   18512:	e7d1      	b.n	184b8 <gnss_interface_getopt+0x6c>
   18514:	6833      	ldr	r3, [r6, #0]
   18516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1851a:	6033      	str	r3, [r6, #0]
   1851c:	e7a1      	b.n	18462 <gnss_interface_getopt+0x16>
   1851e:	f8b3 300f 	ldrh.w	r3, [r3, #15]
   18522:	802b      	strh	r3, [r5, #0]
   18524:	f8d8 0000 	ldr.w	r0, [r8]
   18528:	f006 fa10 	bl	1e94c <rpc_gnss_client_data_free>
   1852c:	2300      	movs	r3, #0
   1852e:	f8c8 3000 	str.w	r3, [r8]
   18532:	6833      	ldr	r3, [r6, #0]
   18534:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   18538:	6033      	str	r3, [r6, #0]
   1853a:	e79c      	b.n	18476 <gnss_interface_getopt+0x2a>
   1853c:	f8b3 3011 	ldrh.w	r3, [r3, #17]
   18540:	e7ef      	b.n	18522 <gnss_interface_getopt+0xd6>
   18542:	7b9b      	ldrb	r3, [r3, #14]
   18544:	702b      	strb	r3, [r5, #0]
   18546:	e7ed      	b.n	18524 <gnss_interface_getopt+0xd8>
   18548:	f8b3 3013 	ldrh.w	r3, [r3, #19]
   1854c:	e7e9      	b.n	18522 <gnss_interface_getopt+0xd6>
   1854e:	7b1b      	ldrb	r3, [r3, #12]
   18550:	e7f8      	b.n	18544 <gnss_interface_getopt+0xf8>
   18552:	7b5b      	ldrb	r3, [r3, #13]
   18554:	e7f6      	b.n	18544 <gnss_interface_getopt+0xf8>
   18556:	2016      	movs	r0, #22
   18558:	f7fa fefe 	bl	13358 <nrf_modem_os_errno_set>
   1855c:	f04f 34ff 	mov.w	r4, #4294967295
   18560:	e7e0      	b.n	18524 <gnss_interface_getopt+0xd8>
   18562:	bf00      	nop
   18564:	200186f4 	.word	0x200186f4
   18568:	49765443 	.word	0x49765443
   1856c:	200186f8 	.word	0x200186f8
   18570:	2001459c 	.word	0x2001459c

00018574 <gnss_interface_init>:
   18574:	2000      	movs	r0, #0
   18576:	4a09      	ldr	r2, [pc, #36]	; (1859c <gnss_interface_init+0x28>)
   18578:	b510      	push	{r4, lr}
   1857a:	6811      	ldr	r1, [r2, #0]
   1857c:	4c08      	ldr	r4, [pc, #32]	; (185a0 <gnss_interface_init+0x2c>)
   1857e:	4b09      	ldr	r3, [pc, #36]	; (185a4 <gnss_interface_init+0x30>)
   18580:	4021      	ands	r1, r4
   18582:	8018      	strh	r0, [r3, #0]
   18584:	4b08      	ldr	r3, [pc, #32]	; (185a8 <gnss_interface_init+0x34>)
   18586:	6011      	str	r1, [r2, #0]
   18588:	6018      	str	r0, [r3, #0]
   1858a:	6813      	ldr	r3, [r2, #0]
   1858c:	4023      	ands	r3, r4
   1858e:	f043 0301 	orr.w	r3, r3, #1
   18592:	6013      	str	r3, [r2, #0]
   18594:	2201      	movs	r2, #1
   18596:	4b05      	ldr	r3, [pc, #20]	; (185ac <gnss_interface_init+0x38>)
   18598:	701a      	strb	r2, [r3, #0]
   1859a:	bd10      	pop	{r4, pc}
   1859c:	200186f4 	.word	0x200186f4
   185a0:	ffff0000 	.word	0xffff0000
   185a4:	20019010 	.word	0x20019010
   185a8:	200186f8 	.word	0x200186f8
   185ac:	2001c0c1 	.word	0x2001c0c1

000185b0 <gnss_interface_open>:
   185b0:	4b16      	ldr	r3, [pc, #88]	; (1860c <gnss_interface_open+0x5c>)
   185b2:	4608      	mov	r0, r1
   185b4:	781b      	ldrb	r3, [r3, #0]
   185b6:	b510      	push	{r4, lr}
   185b8:	b92b      	cbnz	r3, 185c6 <gnss_interface_open+0x16>
   185ba:	2070      	movs	r0, #112	; 0x70
   185bc:	f7fa fecc 	bl	13358 <nrf_modem_os_errno_set>
   185c0:	f04f 30ff 	mov.w	r0, #4294967295
   185c4:	e01f      	b.n	18606 <gnss_interface_open+0x56>
   185c6:	2902      	cmp	r1, #2
   185c8:	d001      	beq.n	185ce <gnss_interface_open+0x1e>
   185ca:	2029      	movs	r0, #41	; 0x29
   185cc:	e7f6      	b.n	185bc <gnss_interface_open+0xc>
   185ce:	4c10      	ldr	r4, [pc, #64]	; (18610 <gnss_interface_open+0x60>)
   185d0:	6823      	ldr	r3, [r4, #0]
   185d2:	b29b      	uxth	r3, r3
   185d4:	2b01      	cmp	r3, #1
   185d6:	d001      	beq.n	185dc <gnss_interface_open+0x2c>
   185d8:	2005      	movs	r0, #5
   185da:	e7ef      	b.n	185bc <gnss_interface_open+0xc>
   185dc:	6823      	ldr	r3, [r4, #0]
   185de:	2200      	movs	r2, #0
   185e0:	0c1b      	lsrs	r3, r3, #16
   185e2:	041b      	lsls	r3, r3, #16
   185e4:	f043 0302 	orr.w	r3, r3, #2
   185e8:	490a      	ldr	r1, [pc, #40]	; (18614 <gnss_interface_open+0x64>)
   185ea:	6023      	str	r3, [r4, #0]
   185ec:	f000 fd20 	bl	19030 <packet_handler_create>
   185f0:	4a09      	ldr	r2, [pc, #36]	; (18618 <gnss_interface_open+0x68>)
   185f2:	6010      	str	r0, [r2, #0]
   185f4:	b140      	cbz	r0, 18608 <gnss_interface_open+0x58>
   185f6:	6822      	ldr	r2, [r4, #0]
   185f8:	6803      	ldr	r3, [r0, #0]
   185fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   185fe:	681b      	ldr	r3, [r3, #0]
   18600:	6022      	str	r2, [r4, #0]
   18602:	4798      	blx	r3
   18604:	4805      	ldr	r0, [pc, #20]	; (1861c <gnss_interface_open+0x6c>)
   18606:	bd10      	pop	{r4, pc}
   18608:	200e      	movs	r0, #14
   1860a:	e7d7      	b.n	185bc <gnss_interface_open+0xc>
   1860c:	2001c0c1 	.word	0x2001c0c1
   18610:	200186f4 	.word	0x200186f4
   18614:	0001f5bf 	.word	0x0001f5bf
   18618:	200186fc 	.word	0x200186fc
   1861c:	49765443 	.word	0x49765443

00018620 <gnss_interface_close>:
   18620:	b530      	push	{r4, r5, lr}
   18622:	4b14      	ldr	r3, [pc, #80]	; (18674 <gnss_interface_close+0x54>)
   18624:	b085      	sub	sp, #20
   18626:	4298      	cmp	r0, r3
   18628:	d006      	beq.n	18638 <gnss_interface_close+0x18>
   1862a:	2009      	movs	r0, #9
   1862c:	f7fa fe94 	bl	13358 <nrf_modem_os_errno_set>
   18630:	f04f 30ff 	mov.w	r0, #4294967295
   18634:	b005      	add	sp, #20
   18636:	bd30      	pop	{r4, r5, pc}
   18638:	4c0f      	ldr	r4, [pc, #60]	; (18678 <gnss_interface_close+0x58>)
   1863a:	6823      	ldr	r3, [r4, #0]
   1863c:	b29b      	uxth	r3, r3
   1863e:	2b04      	cmp	r3, #4
   18640:	d108      	bne.n	18654 <gnss_interface_close+0x34>
   18642:	2200      	movs	r2, #0
   18644:	9300      	str	r3, [sp, #0]
   18646:	9203      	str	r2, [sp, #12]
   18648:	f44f 7101 	mov.w	r1, #516	; 0x204
   1864c:	2208      	movs	r2, #8
   1864e:	ab03      	add	r3, sp, #12
   18650:	f007 fa90 	bl	1fb74 <nrf_setsockopt>
   18654:	4d09      	ldr	r5, [pc, #36]	; (1867c <gnss_interface_close+0x5c>)
   18656:	6828      	ldr	r0, [r5, #0]
   18658:	b118      	cbz	r0, 18662 <gnss_interface_close+0x42>
   1865a:	f007 f957 	bl	1f90c <packet_handler_delete>
   1865e:	2300      	movs	r3, #0
   18660:	602b      	str	r3, [r5, #0]
   18662:	6823      	ldr	r3, [r4, #0]
   18664:	2000      	movs	r0, #0
   18666:	0c1b      	lsrs	r3, r3, #16
   18668:	041b      	lsls	r3, r3, #16
   1866a:	f043 0301 	orr.w	r3, r3, #1
   1866e:	6023      	str	r3, [r4, #0]
   18670:	e7e0      	b.n	18634 <gnss_interface_close+0x14>
   18672:	bf00      	nop
   18674:	49765443 	.word	0x49765443
   18678:	200186f4 	.word	0x200186f4
   1867c:	200186fc 	.word	0x200186fc

00018680 <handle_verify_and_covert>:
   18680:	4a0b      	ldr	r2, [pc, #44]	; (186b0 <handle_verify_and_covert+0x30>)
   18682:	0c03      	lsrs	r3, r0, #16
   18684:	041b      	lsls	r3, r3, #16
   18686:	4293      	cmp	r3, r2
   18688:	d10f      	bne.n	186aa <handle_verify_and_covert+0x2a>
   1868a:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   1868e:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   18692:	2809      	cmp	r0, #9
   18694:	dc09      	bgt.n	186aa <handle_verify_and_covert+0x2a>
   18696:	4b07      	ldr	r3, [pc, #28]	; (186b4 <handle_verify_and_covert+0x34>)
   18698:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1869c:	b12b      	cbz	r3, 186aa <handle_verify_and_covert+0x2a>
   1869e:	689b      	ldr	r3, [r3, #8]
   186a0:	2b00      	cmp	r3, #0
   186a2:	bf08      	it	eq
   186a4:	f06f 0008 	mvneq.w	r0, #8
   186a8:	4770      	bx	lr
   186aa:	f06f 0008 	mvn.w	r0, #8
   186ae:	4770      	bx	lr
   186b0:	789a0000 	.word	0x789a0000
   186b4:	20018704 	.word	0x20018704

000186b8 <command_write>:
   186b8:	4b0c      	ldr	r3, [pc, #48]	; (186ec <command_write+0x34>)
   186ba:	b513      	push	{r0, r1, r4, lr}
   186bc:	480c      	ldr	r0, [pc, #48]	; (186f0 <command_write+0x38>)
   186be:	681c      	ldr	r4, [r3, #0]
   186c0:	f7f4 fc38 	bl	cf34 <strlen>
   186c4:	2300      	movs	r3, #0
   186c6:	4602      	mov	r2, r0
   186c8:	e9cd 3300 	strd	r3, r3, [sp]
   186cc:	4908      	ldr	r1, [pc, #32]	; (186f0 <command_write+0x38>)
   186ce:	4620      	mov	r0, r4
   186d0:	f006 fe69 	bl	1f3a6 <at_interface_write>
   186d4:	4604      	mov	r4, r0
   186d6:	4806      	ldr	r0, [pc, #24]	; (186f0 <command_write+0x38>)
   186d8:	f7f4 fc2c 	bl	cf34 <strlen>
   186dc:	42a0      	cmp	r0, r4
   186de:	bf14      	ite	ne
   186e0:	f06f 0004 	mvnne.w	r0, #4
   186e4:	2000      	moveq	r0, #0
   186e6:	b002      	add	sp, #8
   186e8:	bd10      	pop	{r4, pc}
   186ea:	bf00      	nop
   186ec:	20018700 	.word	0x20018700
   186f0:	2001c0c3 	.word	0x2001c0c3

000186f4 <event_wait>:
   186f4:	2300      	movs	r3, #0
   186f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   186fa:	e9cd 3300 	strd	r3, r3, [sp]
   186fe:	4606      	mov	r6, r0
   18700:	4818      	ldr	r0, [pc, #96]	; (18764 <event_wait+0x70>)
   18702:	460d      	mov	r5, r1
   18704:	f44f 7280 	mov.w	r2, #256	; 0x100
   18708:	4917      	ldr	r1, [pc, #92]	; (18768 <event_wait+0x74>)
   1870a:	6800      	ldr	r0, [r0, #0]
   1870c:	f006 feb5 	bl	1f47a <at_interface_read>
   18710:	4c16      	ldr	r4, [pc, #88]	; (1876c <event_wait+0x78>)
   18712:	4607      	mov	r7, r0
   18714:	f854 8035 	ldr.w	r8, [r4, r5, lsl #3]
   18718:	4640      	mov	r0, r8
   1871a:	f7f4 fc0b 	bl	cf34 <strlen>
   1871e:	4287      	cmp	r7, r0
   18720:	4602      	mov	r2, r0
   18722:	db0d      	blt.n	18740 <event_wait+0x4c>
   18724:	4640      	mov	r0, r8
   18726:	4910      	ldr	r1, [pc, #64]	; (18768 <event_wait+0x74>)
   18728:	f007 ffdc 	bl	206e4 <strncmp>
   1872c:	b940      	cbnz	r0, 18740 <event_wait+0x4c>
   1872e:	4630      	mov	r0, r6
   18730:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   18734:	684b      	ldr	r3, [r1, #4]
   18736:	490c      	ldr	r1, [pc, #48]	; (18768 <event_wait+0x74>)
   18738:	b002      	add	sp, #8
   1873a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1873e:	4718      	bx	r3
   18740:	480b      	ldr	r0, [pc, #44]	; (18770 <event_wait+0x7c>)
   18742:	f7f4 fbf7 	bl	cf34 <strlen>
   18746:	4908      	ldr	r1, [pc, #32]	; (18768 <event_wait+0x74>)
   18748:	4602      	mov	r2, r0
   1874a:	4809      	ldr	r0, [pc, #36]	; (18770 <event_wait+0x7c>)
   1874c:	f007 ffca 	bl	206e4 <strncmp>
   18750:	2800      	cmp	r0, #0
   18752:	bf14      	ite	ne
   18754:	f06f 0004 	mvnne.w	r0, #4
   18758:	f06f 0007 	mvneq.w	r0, #7
   1875c:	b002      	add	sp, #8
   1875e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18762:	bf00      	nop
   18764:	20018700 	.word	0x20018700
   18768:	2001c0c3 	.word	0x2001c0c3
   1876c:	000211c4 	.word	0x000211c4
   18770:	000234a3 	.word	0x000234a3

00018774 <pdn_state_get_parser>:
   18774:	2300      	movs	r3, #0
   18776:	b530      	push	{r4, r5, lr}
   18778:	4605      	mov	r5, r0
   1877a:	460c      	mov	r4, r1
   1877c:	b085      	sub	sp, #20
   1877e:	4608      	mov	r0, r1
   18780:	e9cd 3300 	strd	r3, r3, [sp]
   18784:	e9cd 3302 	strd	r3, r3, [sp, #8]
   18788:	f006 ff27 	bl	1f5da <spaces_remove>
   1878c:	4b08      	ldr	r3, [pc, #32]	; (187b0 <pdn_state_get_parser+0x3c>)
   1878e:	4a09      	ldr	r2, [pc, #36]	; (187b4 <pdn_state_get_parser+0x40>)
   18790:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   18794:	2110      	movs	r1, #16
   18796:	681b      	ldr	r3, [r3, #0]
   18798:	4668      	mov	r0, sp
   1879a:	f002 fbc3 	bl	1af24 <sniprintf>
   1879e:	4669      	mov	r1, sp
   187a0:	4620      	mov	r0, r4
   187a2:	f007 ffd1 	bl	20748 <strstr>
   187a6:	3800      	subs	r0, #0
   187a8:	bf18      	it	ne
   187aa:	2001      	movne	r0, #1
   187ac:	b005      	add	sp, #20
   187ae:	bd30      	pop	{r4, r5, pc}
   187b0:	20018704 	.word	0x20018704
   187b4:	000234a9 	.word	0x000234a9

000187b8 <pdn_id_get_parser>:
   187b8:	b510      	push	{r4, lr}
   187ba:	4604      	mov	r4, r0
   187bc:	4608      	mov	r0, r1
   187be:	f006 ff0c 	bl	1f5da <spaces_remove>
   187c2:	213a      	movs	r1, #58	; 0x3a
   187c4:	f007 ff79 	bl	206ba <strchr>
   187c8:	b130      	cbz	r0, 187d8 <pdn_id_get_parser+0x20>
   187ca:	3001      	adds	r0, #1
   187cc:	f007 fefb 	bl	205c6 <atoi>
   187d0:	4b02      	ldr	r3, [pc, #8]	; (187dc <pdn_id_get_parser+0x24>)
   187d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   187d6:	6058      	str	r0, [r3, #4]
   187d8:	2000      	movs	r0, #0
   187da:	bd10      	pop	{r4, pc}
   187dc:	20018704 	.word	0x20018704

000187e0 <context_create_parser>:
   187e0:	b510      	push	{r4, lr}
   187e2:	4604      	mov	r4, r0
   187e4:	4608      	mov	r0, r1
   187e6:	f006 fef8 	bl	1f5da <spaces_remove>
   187ea:	213a      	movs	r1, #58	; 0x3a
   187ec:	f007 ff65 	bl	206ba <strchr>
   187f0:	b130      	cbz	r0, 18800 <context_create_parser+0x20>
   187f2:	4b04      	ldr	r3, [pc, #16]	; (18804 <context_create_parser+0x24>)
   187f4:	3001      	adds	r0, #1
   187f6:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   187fa:	f007 fee4 	bl	205c6 <atoi>
   187fe:	6020      	str	r0, [r4, #0]
   18800:	2000      	movs	r0, #0
   18802:	bd10      	pop	{r4, pc}
   18804:	20018704 	.word	0x20018704

00018808 <connection_free>:
   18808:	b538      	push	{r3, r4, r5, lr}
   1880a:	4d05      	ldr	r5, [pc, #20]	; (18820 <connection_free+0x18>)
   1880c:	4604      	mov	r4, r0
   1880e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   18812:	f7fa ff45 	bl	136a0 <nrf_modem_os_free>
   18816:	2300      	movs	r3, #0
   18818:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   1881c:	bd38      	pop	{r3, r4, r5, pc}
   1881e:	bf00      	nop
   18820:	20018704 	.word	0x20018704

00018824 <pdn_id_get>:
   18824:	b538      	push	{r3, r4, r5, lr}
   18826:	4d0e      	ldr	r5, [pc, #56]	; (18860 <pdn_id_get+0x3c>)
   18828:	4604      	mov	r4, r0
   1882a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1882e:	4b0d      	ldr	r3, [pc, #52]	; (18864 <pdn_id_get+0x40>)
   18830:	4a0d      	ldr	r2, [pc, #52]	; (18868 <pdn_id_get+0x44>)
   18832:	4628      	mov	r0, r5
   18834:	f002 fb76 	bl	1af24 <sniprintf>
   18838:	4b0c      	ldr	r3, [pc, #48]	; (1886c <pdn_id_get+0x48>)
   1883a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1883e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   18842:	4a0b      	ldr	r2, [pc, #44]	; (18870 <pdn_id_get+0x4c>)
   18844:	681b      	ldr	r3, [r3, #0]
   18846:	4428      	add	r0, r5
   18848:	f002 fb6c 	bl	1af24 <sniprintf>
   1884c:	f7ff ff34 	bl	186b8 <command_write>
   18850:	b928      	cbnz	r0, 1885e <pdn_id_get+0x3a>
   18852:	4620      	mov	r0, r4
   18854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18858:	2102      	movs	r1, #2
   1885a:	f7ff bf4b 	b.w	186f4 <event_wait>
   1885e:	bd38      	pop	{r3, r4, r5, pc}
   18860:	2001c0c3 	.word	0x2001c0c3
   18864:	000234b5 	.word	0x000234b5
   18868:	00022bca 	.word	0x00022bca
   1886c:	20018704 	.word	0x20018704
   18870:	00021c5e 	.word	0x00021c5e

00018874 <pdn_interface_init>:
   18874:	b538      	push	{r3, r4, r5, lr}
   18876:	f04f 34ff 	mov.w	r4, #4294967295
   1887a:	4d0b      	ldr	r5, [pc, #44]	; (188a8 <pdn_interface_init+0x34>)
   1887c:	2228      	movs	r2, #40	; 0x28
   1887e:	2100      	movs	r1, #0
   18880:	480a      	ldr	r0, [pc, #40]	; (188ac <pdn_interface_init+0x38>)
   18882:	602c      	str	r4, [r5, #0]
   18884:	f007 fee6 	bl	20654 <memset>
   18888:	f240 2201 	movw	r2, #513	; 0x201
   1888c:	2102      	movs	r1, #2
   1888e:	2066      	movs	r0, #102	; 0x66
   18890:	f7ff f86c 	bl	1796c <at_interface_open>
   18894:	2800      	cmp	r0, #0
   18896:	bfa4      	itt	ge
   18898:	2201      	movge	r2, #1
   1889a:	4b05      	ldrge	r3, [pc, #20]	; (188b0 <pdn_interface_init+0x3c>)
   1889c:	6028      	str	r0, [r5, #0]
   1889e:	bfa6      	itte	ge
   188a0:	701a      	strbge	r2, [r3, #0]
   188a2:	2000      	movge	r0, #0
   188a4:	4620      	movlt	r0, r4
   188a6:	bd38      	pop	{r3, r4, r5, pc}
   188a8:	20018700 	.word	0x20018700
   188ac:	20018704 	.word	0x20018704
   188b0:	2001c0c2 	.word	0x2001c0c2

000188b4 <pdn_interface_open>:
   188b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   188b6:	4b28      	ldr	r3, [pc, #160]	; (18958 <pdn_interface_open+0xa4>)
   188b8:	781b      	ldrb	r3, [r3, #0]
   188ba:	b92b      	cbnz	r3, 188c8 <pdn_interface_open+0x14>
   188bc:	2070      	movs	r0, #112	; 0x70
   188be:	f7fa fd4b 	bl	13358 <nrf_modem_os_errno_set>
   188c2:	f04f 30ff 	mov.w	r0, #4294967295
   188c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   188c8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   188cc:	d141      	bne.n	18952 <pdn_interface_open+0x9e>
   188ce:	4b23      	ldr	r3, [pc, #140]	; (1895c <pdn_interface_open+0xa8>)
   188d0:	2500      	movs	r5, #0
   188d2:	461e      	mov	r6, r3
   188d4:	f853 4b04 	ldr.w	r4, [r3], #4
   188d8:	bb24      	cbnz	r4, 18924 <pdn_interface_open+0x70>
   188da:	2020      	movs	r0, #32
   188dc:	f7fa fed0 	bl	13680 <nrf_modem_os_alloc>
   188e0:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
   188e4:	b308      	cbz	r0, 1892a <pdn_interface_open+0x76>
   188e6:	4621      	mov	r1, r4
   188e8:	2220      	movs	r2, #32
   188ea:	f007 feb3 	bl	20654 <memset>
   188ee:	2203      	movs	r2, #3
   188f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   188f4:	2701      	movs	r7, #1
   188f6:	60da      	str	r2, [r3, #12]
   188f8:	f04f 32ff 	mov.w	r2, #4294967295
   188fc:	f44f 7180 	mov.w	r1, #256	; 0x100
   18900:	605a      	str	r2, [r3, #4]
   18902:	609f      	str	r7, [r3, #8]
   18904:	4a16      	ldr	r2, [pc, #88]	; (18960 <pdn_interface_open+0xac>)
   18906:	4b17      	ldr	r3, [pc, #92]	; (18964 <pdn_interface_open+0xb0>)
   18908:	4817      	ldr	r0, [pc, #92]	; (18968 <pdn_interface_open+0xb4>)
   1890a:	f002 fb0b 	bl	1af24 <sniprintf>
   1890e:	f7ff fed3 	bl	186b8 <command_write>
   18912:	4604      	mov	r4, r0
   18914:	b160      	cbz	r0, 18930 <pdn_interface_open+0x7c>
   18916:	4628      	mov	r0, r5
   18918:	f7ff ff76 	bl	18808 <connection_free>
   1891c:	2c00      	cmp	r4, #0
   1891e:	da13      	bge.n	18948 <pdn_interface_open+0x94>
   18920:	4260      	negs	r0, r4
   18922:	e7cc      	b.n	188be <pdn_interface_open+0xa>
   18924:	3501      	adds	r5, #1
   18926:	2d0a      	cmp	r5, #10
   18928:	d1d4      	bne.n	188d4 <pdn_interface_open+0x20>
   1892a:	f06f 040b 	mvn.w	r4, #11
   1892e:	e7f7      	b.n	18920 <pdn_interface_open+0x6c>
   18930:	4639      	mov	r1, r7
   18932:	4628      	mov	r0, r5
   18934:	f7ff fede 	bl	186f4 <event_wait>
   18938:	4604      	mov	r4, r0
   1893a:	2800      	cmp	r0, #0
   1893c:	d1eb      	bne.n	18916 <pdn_interface_open+0x62>
   1893e:	2202      	movs	r2, #2
   18940:	462c      	mov	r4, r5
   18942:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   18946:	609a      	str	r2, [r3, #8]
   18948:	f044 40f1 	orr.w	r0, r4, #2021654528	; 0x78800000
   1894c:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   18950:	e7b9      	b.n	188c6 <pdn_interface_open+0x12>
   18952:	2029      	movs	r0, #41	; 0x29
   18954:	e7b3      	b.n	188be <pdn_interface_open+0xa>
   18956:	bf00      	nop
   18958:	2001c0c2 	.word	0x2001c0c2
   1895c:	20018704 	.word	0x20018704
   18960:	00022bca 	.word	0x00022bca
   18964:	000234c3 	.word	0x000234c3
   18968:	2001c0c3 	.word	0x2001c0c3

0001896c <pdn_interface_connect>:
   1896c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18970:	4691      	mov	r9, r2
   18972:	468a      	mov	sl, r1
   18974:	b109      	cbz	r1, 1897a <pdn_interface_connect+0xe>
   18976:	2a64      	cmp	r2, #100	; 0x64
   18978:	d905      	bls.n	18986 <pdn_interface_connect+0x1a>
   1897a:	2016      	movs	r0, #22
   1897c:	f7fa fcec 	bl	13358 <nrf_modem_os_errno_set>
   18980:	f04f 30ff 	mov.w	r0, #4294967295
   18984:	e0ec      	b.n	18b60 <pdn_interface_connect+0x1f4>
   18986:	f7ff fe7b 	bl	18680 <handle_verify_and_covert>
   1898a:	1e04      	subs	r4, r0, #0
   1898c:	da01      	bge.n	18992 <pdn_interface_connect+0x26>
   1898e:	4260      	negs	r0, r4
   18990:	e7f4      	b.n	1897c <pdn_interface_connect+0x10>
   18992:	4f76      	ldr	r7, [pc, #472]	; (18b6c <pdn_interface_connect+0x200>)
   18994:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18998:	689b      	ldr	r3, [r3, #8]
   1899a:	2b02      	cmp	r3, #2
   1899c:	d001      	beq.n	189a2 <pdn_interface_connect+0x36>
   1899e:	2009      	movs	r0, #9
   189a0:	e7ec      	b.n	1897c <pdn_interface_connect+0x10>
   189a2:	4e73      	ldr	r6, [pc, #460]	; (18b70 <pdn_interface_connect+0x204>)
   189a4:	f44f 7180 	mov.w	r1, #256	; 0x100
   189a8:	4b72      	ldr	r3, [pc, #456]	; (18b74 <pdn_interface_connect+0x208>)
   189aa:	4a73      	ldr	r2, [pc, #460]	; (18b78 <pdn_interface_connect+0x20c>)
   189ac:	4630      	mov	r0, r6
   189ae:	f002 fab9 	bl	1af24 <sniprintf>
   189b2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   189b6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   189ba:	4605      	mov	r5, r0
   189bc:	681b      	ldr	r3, [r3, #0]
   189be:	4a6f      	ldr	r2, [pc, #444]	; (18b7c <pdn_interface_connect+0x210>)
   189c0:	1830      	adds	r0, r6, r0
   189c2:	f002 faaf 	bl	1af24 <sniprintf>
   189c6:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   189ca:	4405      	add	r5, r0
   189cc:	68db      	ldr	r3, [r3, #12]
   189ce:	46b0      	mov	r8, r6
   189d0:	f003 0203 	and.w	r2, r3, #3
   189d4:	2a03      	cmp	r2, #3
   189d6:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   189da:	eb06 0005 	add.w	r0, r6, r5
   189de:	d159      	bne.n	18a94 <pdn_interface_connect+0x128>
   189e0:	4b67      	ldr	r3, [pc, #412]	; (18b80 <pdn_interface_connect+0x214>)
   189e2:	4a68      	ldr	r2, [pc, #416]	; (18b84 <pdn_interface_connect+0x218>)
   189e4:	f002 fa9e 	bl	1af24 <sniprintf>
   189e8:	f109 0303 	add.w	r3, r9, #3
   189ec:	4428      	add	r0, r5
   189ee:	4403      	add	r3, r0
   189f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   189f4:	f300 80b6 	bgt.w	18b64 <pdn_interface_connect+0x1f8>
   189f8:	2622      	movs	r6, #34	; 0x22
   189fa:	1c45      	adds	r5, r0, #1
   189fc:	464a      	mov	r2, r9
   189fe:	f808 6000 	strb.w	r6, [r8, r0]
   18a02:	4651      	mov	r1, sl
   18a04:	eb08 0005 	add.w	r0, r8, r5
   18a08:	f007 fe7e 	bl	20708 <strncpy>
   18a0c:	eb09 0305 	add.w	r3, r9, r5
   18a10:	eb08 0203 	add.w	r2, r8, r3
   18a14:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   18a18:	b902      	cbnz	r2, 18a1c <pdn_interface_connect+0xb0>
   18a1a:	3b01      	subs	r3, #1
   18a1c:	2200      	movs	r2, #0
   18a1e:	f808 6003 	strb.w	r6, [r8, r3]
   18a22:	4443      	add	r3, r8
   18a24:	705a      	strb	r2, [r3, #1]
   18a26:	f7ff fe47 	bl	186b8 <command_write>
   18a2a:	2800      	cmp	r0, #0
   18a2c:	d176      	bne.n	18b1c <pdn_interface_connect+0x1b0>
   18a2e:	4601      	mov	r1, r0
   18a30:	4620      	mov	r0, r4
   18a32:	f7ff fe5f 	bl	186f4 <event_wait>
   18a36:	2800      	cmp	r0, #0
   18a38:	d170      	bne.n	18b1c <pdn_interface_connect+0x1b0>
   18a3a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18a3e:	7c1b      	ldrb	r3, [r3, #16]
   18a40:	bb6b      	cbnz	r3, 18a9e <pdn_interface_connect+0x132>
   18a42:	f44f 7180 	mov.w	r1, #256	; 0x100
   18a46:	4b50      	ldr	r3, [pc, #320]	; (18b88 <pdn_interface_connect+0x21c>)
   18a48:	4a4b      	ldr	r2, [pc, #300]	; (18b78 <pdn_interface_connect+0x20c>)
   18a4a:	4849      	ldr	r0, [pc, #292]	; (18b70 <pdn_interface_connect+0x204>)
   18a4c:	f002 fa6a 	bl	1af24 <sniprintf>
   18a50:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18a54:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   18a58:	681b      	ldr	r3, [r3, #0]
   18a5a:	4a4c      	ldr	r2, [pc, #304]	; (18b8c <pdn_interface_connect+0x220>)
   18a5c:	4440      	add	r0, r8
   18a5e:	f002 fa61 	bl	1af24 <sniprintf>
   18a62:	f7ff fe29 	bl	186b8 <command_write>
   18a66:	2800      	cmp	r0, #0
   18a68:	d158      	bne.n	18b1c <pdn_interface_connect+0x1b0>
   18a6a:	4601      	mov	r1, r0
   18a6c:	4620      	mov	r0, r4
   18a6e:	f7ff fe41 	bl	186f4 <event_wait>
   18a72:	2800      	cmp	r0, #0
   18a74:	d152      	bne.n	18b1c <pdn_interface_connect+0x1b0>
   18a76:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   18a7a:	f109 0320 	add.w	r3, r9, #32
   18a7e:	6950      	ldr	r0, [r2, #20]
   18a80:	4403      	add	r3, r0
   18a82:	6990      	ldr	r0, [r2, #24]
   18a84:	4418      	add	r0, r3
   18a86:	f7fa fdfb 	bl	13680 <nrf_modem_os_alloc>
   18a8a:	4605      	mov	r5, r0
   18a8c:	2800      	cmp	r0, #0
   18a8e:	d147      	bne.n	18b20 <pdn_interface_connect+0x1b4>
   18a90:	200c      	movs	r0, #12
   18a92:	e773      	b.n	1897c <pdn_interface_connect+0x10>
   18a94:	079b      	lsls	r3, r3, #30
   18a96:	bf4c      	ite	mi
   18a98:	4b3d      	ldrmi	r3, [pc, #244]	; (18b90 <pdn_interface_connect+0x224>)
   18a9a:	4b3e      	ldrpl	r3, [pc, #248]	; (18b94 <pdn_interface_connect+0x228>)
   18a9c:	e7a1      	b.n	189e2 <pdn_interface_connect+0x76>
   18a9e:	f44f 7180 	mov.w	r1, #256	; 0x100
   18aa2:	4b3d      	ldr	r3, [pc, #244]	; (18b98 <pdn_interface_connect+0x22c>)
   18aa4:	4a34      	ldr	r2, [pc, #208]	; (18b78 <pdn_interface_connect+0x20c>)
   18aa6:	4832      	ldr	r0, [pc, #200]	; (18b70 <pdn_interface_connect+0x204>)
   18aa8:	f002 fa3c 	bl	1af24 <sniprintf>
   18aac:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18ab0:	4a32      	ldr	r2, [pc, #200]	; (18b7c <pdn_interface_connect+0x210>)
   18ab2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   18ab6:	4606      	mov	r6, r0
   18ab8:	681b      	ldr	r3, [r3, #0]
   18aba:	4440      	add	r0, r8
   18abc:	f002 fa32 	bl	1af24 <sniprintf>
   18ac0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18ac4:	4406      	add	r6, r0
   18ac6:	7c1b      	ldrb	r3, [r3, #16]
   18ac8:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   18acc:	2b01      	cmp	r3, #1
   18ace:	bf0c      	ite	eq
   18ad0:	4a32      	ldreq	r2, [pc, #200]	; (18b9c <pdn_interface_connect+0x230>)
   18ad2:	4a33      	ldrne	r2, [pc, #204]	; (18ba0 <pdn_interface_connect+0x234>)
   18ad4:	eb08 0006 	add.w	r0, r8, r6
   18ad8:	f002 fa24 	bl	1af24 <sniprintf>
   18adc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18ae0:	4406      	add	r6, r0
   18ae2:	4a28      	ldr	r2, [pc, #160]	; (18b84 <pdn_interface_connect+0x218>)
   18ae4:	3320      	adds	r3, #32
   18ae6:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   18aea:	eb08 0006 	add.w	r0, r8, r6
   18aee:	f002 fa19 	bl	1af24 <sniprintf>
   18af2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18af6:	4430      	add	r0, r6
   18af8:	695a      	ldr	r2, [r3, #20]
   18afa:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   18afe:	3220      	adds	r2, #32
   18b00:	4413      	add	r3, r2
   18b02:	4440      	add	r0, r8
   18b04:	4a27      	ldr	r2, [pc, #156]	; (18ba4 <pdn_interface_connect+0x238>)
   18b06:	f002 fa0d 	bl	1af24 <sniprintf>
   18b0a:	f7ff fdd5 	bl	186b8 <command_write>
   18b0e:	b928      	cbnz	r0, 18b1c <pdn_interface_connect+0x1b0>
   18b10:	4601      	mov	r1, r0
   18b12:	4620      	mov	r0, r4
   18b14:	f7ff fdee 	bl	186f4 <event_wait>
   18b18:	2800      	cmp	r0, #0
   18b1a:	d092      	beq.n	18a42 <pdn_interface_connect+0xd6>
   18b1c:	4240      	negs	r0, r0
   18b1e:	e72d      	b.n	1897c <pdn_interface_connect+0x10>
   18b20:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
   18b24:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   18b28:	441a      	add	r2, r3
   18b2a:	3220      	adds	r2, #32
   18b2c:	f007 fd85 	bl	2063a <memcpy>
   18b30:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   18b34:	f7fa fdb4 	bl	136a0 <nrf_modem_os_free>
   18b38:	2303      	movs	r3, #3
   18b3a:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   18b3e:	60ab      	str	r3, [r5, #8]
   18b40:	e9d5 3005 	ldrd	r3, r0, [r5, #20]
   18b44:	4403      	add	r3, r0
   18b46:	3320      	adds	r3, #32
   18b48:	464a      	mov	r2, r9
   18b4a:	4651      	mov	r1, sl
   18b4c:	f8c5 901c 	str.w	r9, [r5, #28]
   18b50:	18e8      	adds	r0, r5, r3
   18b52:	f007 fd72 	bl	2063a <memcpy>
   18b56:	4620      	mov	r0, r4
   18b58:	f7ff fe64 	bl	18824 <pdn_id_get>
   18b5c:	2800      	cmp	r0, #0
   18b5e:	d1dd      	bne.n	18b1c <pdn_interface_connect+0x1b0>
   18b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18b64:	f04f 30ff 	mov.w	r0, #4294967295
   18b68:	e7d8      	b.n	18b1c <pdn_interface_connect+0x1b0>
   18b6a:	bf00      	nop
   18b6c:	20018704 	.word	0x20018704
   18b70:	2001c0c3 	.word	0x2001c0c3
   18b74:	000234cf 	.word	0x000234cf
   18b78:	00022bca 	.word	0x00022bca
   18b7c:	000234db 	.word	0x000234db
   18b80:	000234df 	.word	0x000234df
   18b84:	000234e6 	.word	0x000234e6
   18b88:	000234f4 	.word	0x000234f4
   18b8c:	00021c5e 	.word	0x00021c5e
   18b90:	000234ec 	.word	0x000234ec
   18b94:	000234f1 	.word	0x000234f1
   18b98:	00023500 	.word	0x00023500
   18b9c:	000234fd 	.word	0x000234fd
   18ba0:	0002350b 	.word	0x0002350b
   18ba4:	00022d86 	.word	0x00022d86

00018ba8 <pdn_interface_close>:
   18ba8:	b570      	push	{r4, r5, r6, lr}
   18baa:	f7ff fd69 	bl	18680 <handle_verify_and_covert>
   18bae:	1e04      	subs	r4, r0, #0
   18bb0:	da05      	bge.n	18bbe <pdn_interface_close+0x16>
   18bb2:	4260      	negs	r0, r4
   18bb4:	f7fa fbd0 	bl	13358 <nrf_modem_os_errno_set>
   18bb8:	f04f 30ff 	mov.w	r0, #4294967295
   18bbc:	bd70      	pop	{r4, r5, r6, pc}
   18bbe:	4d22      	ldr	r5, [pc, #136]	; (18c48 <pdn_interface_close+0xa0>)
   18bc0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   18bc4:	689b      	ldr	r3, [r3, #8]
   18bc6:	2b03      	cmp	r3, #3
   18bc8:	d11b      	bne.n	18c02 <pdn_interface_close+0x5a>
   18bca:	4e20      	ldr	r6, [pc, #128]	; (18c4c <pdn_interface_close+0xa4>)
   18bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
   18bd0:	4b1f      	ldr	r3, [pc, #124]	; (18c50 <pdn_interface_close+0xa8>)
   18bd2:	4a20      	ldr	r2, [pc, #128]	; (18c54 <pdn_interface_close+0xac>)
   18bd4:	4630      	mov	r0, r6
   18bd6:	f002 f9a5 	bl	1af24 <sniprintf>
   18bda:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   18bde:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   18be2:	681b      	ldr	r3, [r3, #0]
   18be4:	4a1c      	ldr	r2, [pc, #112]	; (18c58 <pdn_interface_close+0xb0>)
   18be6:	4430      	add	r0, r6
   18be8:	f002 f99c 	bl	1af24 <sniprintf>
   18bec:	f7ff fd64 	bl	186b8 <command_write>
   18bf0:	4601      	mov	r1, r0
   18bf2:	b910      	cbnz	r0, 18bfa <pdn_interface_close+0x52>
   18bf4:	4620      	mov	r0, r4
   18bf6:	f7ff fd7d 	bl	186f4 <event_wait>
   18bfa:	2202      	movs	r2, #2
   18bfc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   18c00:	609a      	str	r2, [r3, #8]
   18c02:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   18c06:	689b      	ldr	r3, [r3, #8]
   18c08:	2b02      	cmp	r3, #2
   18c0a:	d117      	bne.n	18c3c <pdn_interface_close+0x94>
   18c0c:	4e0f      	ldr	r6, [pc, #60]	; (18c4c <pdn_interface_close+0xa4>)
   18c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
   18c12:	4b12      	ldr	r3, [pc, #72]	; (18c5c <pdn_interface_close+0xb4>)
   18c14:	4a0f      	ldr	r2, [pc, #60]	; (18c54 <pdn_interface_close+0xac>)
   18c16:	4630      	mov	r0, r6
   18c18:	f002 f984 	bl	1af24 <sniprintf>
   18c1c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   18c20:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   18c24:	681b      	ldr	r3, [r3, #0]
   18c26:	4a0c      	ldr	r2, [pc, #48]	; (18c58 <pdn_interface_close+0xb0>)
   18c28:	4430      	add	r0, r6
   18c2a:	f002 f97b 	bl	1af24 <sniprintf>
   18c2e:	f7ff fd43 	bl	186b8 <command_write>
   18c32:	4601      	mov	r1, r0
   18c34:	b910      	cbnz	r0, 18c3c <pdn_interface_close+0x94>
   18c36:	4620      	mov	r0, r4
   18c38:	f7ff fd5c 	bl	186f4 <event_wait>
   18c3c:	4620      	mov	r0, r4
   18c3e:	f7ff fde3 	bl	18808 <connection_free>
   18c42:	2000      	movs	r0, #0
   18c44:	e7ba      	b.n	18bbc <pdn_interface_close+0x14>
   18c46:	bf00      	nop
   18c48:	20018704 	.word	0x20018704
   18c4c:	2001c0c3 	.word	0x2001c0c3
   18c50:	0002350e 	.word	0x0002350e
   18c54:	00022bca 	.word	0x00022bca
   18c58:	00021c5e 	.word	0x00021c5e
   18c5c:	000234cf 	.word	0x000234cf

00018c60 <pdn_interface_setopt>:
   18c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18c64:	4614      	mov	r4, r2
   18c66:	f240 2202 	movw	r2, #514	; 0x202
   18c6a:	4291      	cmp	r1, r2
   18c6c:	461e      	mov	r6, r3
   18c6e:	9b08      	ldr	r3, [sp, #32]
   18c70:	d101      	bne.n	18c76 <pdn_interface_setopt+0x16>
   18c72:	b106      	cbz	r6, 18c76 <pdn_interface_setopt+0x16>
   18c74:	b92b      	cbnz	r3, 18c82 <pdn_interface_setopt+0x22>
   18c76:	2016      	movs	r0, #22
   18c78:	f7fa fb6e 	bl	13358 <nrf_modem_os_errno_set>
   18c7c:	f04f 30ff 	mov.w	r0, #4294967295
   18c80:	e067      	b.n	18d52 <pdn_interface_setopt+0xf2>
   18c82:	f7ff fcfd 	bl	18680 <handle_verify_and_covert>
   18c86:	1e05      	subs	r5, r0, #0
   18c88:	da01      	bge.n	18c8e <pdn_interface_setopt+0x2e>
   18c8a:	4268      	negs	r0, r5
   18c8c:	e7f4      	b.n	18c78 <pdn_interface_setopt+0x18>
   18c8e:	2c01      	cmp	r4, #1
   18c90:	d005      	beq.n	18c9e <pdn_interface_setopt+0x3e>
   18c92:	2c04      	cmp	r4, #4
   18c94:	d014      	beq.n	18cc0 <pdn_interface_setopt+0x60>
   18c96:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   18c9a:	4240      	negs	r0, r0
   18c9c:	e7ec      	b.n	18c78 <pdn_interface_setopt+0x18>
   18c9e:	4b32      	ldr	r3, [pc, #200]	; (18d68 <pdn_interface_setopt+0x108>)
   18ca0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   18ca4:	689a      	ldr	r2, [r3, #8]
   18ca6:	b14a      	cbz	r2, 18cbc <pdn_interface_setopt+0x5c>
   18ca8:	689a      	ldr	r2, [r3, #8]
   18caa:	2a03      	cmp	r2, #3
   18cac:	d006      	beq.n	18cbc <pdn_interface_setopt+0x5c>
   18cae:	689b      	ldr	r3, [r3, #8]
   18cb0:	2b04      	cmp	r3, #4
   18cb2:	bf14      	ite	ne
   18cb4:	2016      	movne	r0, #22
   18cb6:	200e      	moveq	r0, #14
   18cb8:	4240      	negs	r0, r0
   18cba:	e7ee      	b.n	18c9a <pdn_interface_setopt+0x3a>
   18cbc:	200e      	movs	r0, #14
   18cbe:	e7fb      	b.n	18cb8 <pdn_interface_setopt+0x58>
   18cc0:	4f29      	ldr	r7, [pc, #164]	; (18d68 <pdn_interface_setopt+0x108>)
   18cc2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   18cc6:	689a      	ldr	r2, [r3, #8]
   18cc8:	2a00      	cmp	r2, #0
   18cca:	d044      	beq.n	18d56 <pdn_interface_setopt+0xf6>
   18ccc:	689a      	ldr	r2, [r3, #8]
   18cce:	2a03      	cmp	r2, #3
   18cd0:	d041      	beq.n	18d56 <pdn_interface_setopt+0xf6>
   18cd2:	689b      	ldr	r3, [r3, #8]
   18cd4:	2b04      	cmp	r3, #4
   18cd6:	d03e      	beq.n	18d56 <pdn_interface_setopt+0xf6>
   18cd8:	4630      	mov	r0, r6
   18cda:	f7f4 f92b 	bl	cf34 <strlen>
   18cde:	f106 0a64 	add.w	sl, r6, #100	; 0x64
   18ce2:	f100 0801 	add.w	r8, r0, #1
   18ce6:	4650      	mov	r0, sl
   18ce8:	f7f4 f924 	bl	cf34 <strlen>
   18cec:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
   18cf0:	f100 0901 	add.w	r9, r0, #1
   18cf4:	3b01      	subs	r3, #1
   18cf6:	2b01      	cmp	r3, #1
   18cf8:	d830      	bhi.n	18d5c <pdn_interface_setopt+0xfc>
   18cfa:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
   18cfe:	d82d      	bhi.n	18d5c <pdn_interface_setopt+0xfc>
   18d00:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
   18d04:	d82a      	bhi.n	18d5c <pdn_interface_setopt+0xfc>
   18d06:	eb08 0009 	add.w	r0, r8, r9
   18d0a:	3020      	adds	r0, #32
   18d0c:	f7fa fcb8 	bl	13680 <nrf_modem_os_alloc>
   18d10:	4604      	mov	r4, r0
   18d12:	b330      	cbz	r0, 18d62 <pdn_interface_setopt+0x102>
   18d14:	2220      	movs	r2, #32
   18d16:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
   18d1a:	f007 fc8e 	bl	2063a <memcpy>
   18d1e:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   18d22:	f7fa fcbd 	bl	136a0 <nrf_modem_os_free>
   18d26:	e9c4 8905 	strd	r8, r9, [r4, #20]
   18d2a:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
   18d2e:	4641      	mov	r1, r8
   18d30:	4a0e      	ldr	r2, [pc, #56]	; (18d6c <pdn_interface_setopt+0x10c>)
   18d32:	7423      	strb	r3, [r4, #16]
   18d34:	f104 0020 	add.w	r0, r4, #32
   18d38:	4633      	mov	r3, r6
   18d3a:	f002 f8f3 	bl	1af24 <sniprintf>
   18d3e:	3021      	adds	r0, #33	; 0x21
   18d40:	4653      	mov	r3, sl
   18d42:	4a0a      	ldr	r2, [pc, #40]	; (18d6c <pdn_interface_setopt+0x10c>)
   18d44:	69a1      	ldr	r1, [r4, #24]
   18d46:	4420      	add	r0, r4
   18d48:	f002 f8ec 	bl	1af24 <sniprintf>
   18d4c:	2000      	movs	r0, #0
   18d4e:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
   18d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18d56:	f06f 000d 	mvn.w	r0, #13
   18d5a:	e79e      	b.n	18c9a <pdn_interface_setopt+0x3a>
   18d5c:	f06f 0015 	mvn.w	r0, #21
   18d60:	e79b      	b.n	18c9a <pdn_interface_setopt+0x3a>
   18d62:	f06f 000b 	mvn.w	r0, #11
   18d66:	e798      	b.n	18c9a <pdn_interface_setopt+0x3a>
   18d68:	20018704 	.word	0x20018704
   18d6c:	00022bca 	.word	0x00022bca

00018d70 <pdn_interface_getopt>:
   18d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d74:	461e      	mov	r6, r3
   18d76:	f240 2302 	movw	r3, #514	; 0x202
   18d7a:	4299      	cmp	r1, r3
   18d7c:	4690      	mov	r8, r2
   18d7e:	9d06      	ldr	r5, [sp, #24]
   18d80:	d101      	bne.n	18d86 <pdn_interface_getopt+0x16>
   18d82:	b106      	cbz	r6, 18d86 <pdn_interface_getopt+0x16>
   18d84:	b92d      	cbnz	r5, 18d92 <pdn_interface_getopt+0x22>
   18d86:	2016      	movs	r0, #22
   18d88:	f7fa fae6 	bl	13358 <nrf_modem_os_errno_set>
   18d8c:	f04f 34ff 	mov.w	r4, #4294967295
   18d90:	e02d      	b.n	18dee <pdn_interface_getopt+0x7e>
   18d92:	f7ff fc75 	bl	18680 <handle_verify_and_covert>
   18d96:	1e07      	subs	r7, r0, #0
   18d98:	da01      	bge.n	18d9e <pdn_interface_getopt+0x2e>
   18d9a:	4278      	negs	r0, r7
   18d9c:	e7f4      	b.n	18d88 <pdn_interface_getopt+0x18>
   18d9e:	f1b8 0f02 	cmp.w	r8, #2
   18da2:	d027      	beq.n	18df4 <pdn_interface_getopt+0x84>
   18da4:	f1b8 0f03 	cmp.w	r8, #3
   18da8:	d02e      	beq.n	18e08 <pdn_interface_getopt+0x98>
   18daa:	f1b8 0f01 	cmp.w	r8, #1
   18dae:	d142      	bne.n	18e36 <pdn_interface_getopt+0xc6>
   18db0:	4b28      	ldr	r3, [pc, #160]	; (18e54 <pdn_interface_getopt+0xe4>)
   18db2:	6829      	ldr	r1, [r5, #0]
   18db4:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   18db8:	689a      	ldr	r2, [r3, #8]
   18dba:	2a00      	cmp	r2, #0
   18dbc:	d03f      	beq.n	18e3e <pdn_interface_getopt+0xce>
   18dbe:	689a      	ldr	r2, [r3, #8]
   18dc0:	2a04      	cmp	r2, #4
   18dc2:	d03c      	beq.n	18e3e <pdn_interface_getopt+0xce>
   18dc4:	2907      	cmp	r1, #7
   18dc6:	f001 0203 	and.w	r2, r1, #3
   18dca:	d93b      	bls.n	18e44 <pdn_interface_getopt+0xd4>
   18dcc:	2a00      	cmp	r2, #0
   18dce:	d139      	bne.n	18e44 <pdn_interface_getopt+0xd4>
   18dd0:	68db      	ldr	r3, [r3, #12]
   18dd2:	0799      	lsls	r1, r3, #30
   18dd4:	bf42      	ittt	mi
   18dd6:	220a      	movmi	r2, #10
   18dd8:	6032      	strmi	r2, [r6, #0]
   18dda:	2201      	movmi	r2, #1
   18ddc:	07db      	lsls	r3, r3, #31
   18dde:	bf42      	ittt	mi
   18de0:	2302      	movmi	r3, #2
   18de2:	f846 3022 	strmi.w	r3, [r6, r2, lsl #2]
   18de6:	3201      	addmi	r2, #1
   18de8:	0092      	lsls	r2, r2, #2
   18dea:	602a      	str	r2, [r5, #0]
   18dec:	2400      	movs	r4, #0
   18dee:	4620      	mov	r0, r4
   18df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18df4:	682b      	ldr	r3, [r5, #0]
   18df6:	b343      	cbz	r3, 18e4a <pdn_interface_getopt+0xda>
   18df8:	4b16      	ldr	r3, [pc, #88]	; (18e54 <pdn_interface_getopt+0xe4>)
   18dfa:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   18dfe:	681b      	ldr	r3, [r3, #0]
   18e00:	7033      	strb	r3, [r6, #0]
   18e02:	2301      	movs	r3, #1
   18e04:	602b      	str	r3, [r5, #0]
   18e06:	e7f1      	b.n	18dec <pdn_interface_getopt+0x7c>
   18e08:	682b      	ldr	r3, [r5, #0]
   18e0a:	b1f3      	cbz	r3, 18e4a <pdn_interface_getopt+0xda>
   18e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
   18e10:	4b11      	ldr	r3, [pc, #68]	; (18e58 <pdn_interface_getopt+0xe8>)
   18e12:	4a12      	ldr	r2, [pc, #72]	; (18e5c <pdn_interface_getopt+0xec>)
   18e14:	4812      	ldr	r0, [pc, #72]	; (18e60 <pdn_interface_getopt+0xf0>)
   18e16:	f002 f885 	bl	1af24 <sniprintf>
   18e1a:	f7ff fc4d 	bl	186b8 <command_write>
   18e1e:	4604      	mov	r4, r0
   18e20:	b958      	cbnz	r0, 18e3a <pdn_interface_getopt+0xca>
   18e22:	4641      	mov	r1, r8
   18e24:	4638      	mov	r0, r7
   18e26:	f7ff fc65 	bl	186f4 <event_wait>
   18e2a:	2800      	cmp	r0, #0
   18e2c:	db0f      	blt.n	18e4e <pdn_interface_getopt+0xde>
   18e2e:	2301      	movs	r3, #1
   18e30:	7030      	strb	r0, [r6, #0]
   18e32:	602b      	str	r3, [r5, #0]
   18e34:	e7db      	b.n	18dee <pdn_interface_getopt+0x7e>
   18e36:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   18e3a:	4260      	negs	r0, r4
   18e3c:	e7a4      	b.n	18d88 <pdn_interface_getopt+0x18>
   18e3e:	f06f 040d 	mvn.w	r4, #13
   18e42:	e7fa      	b.n	18e3a <pdn_interface_getopt+0xca>
   18e44:	f06f 0415 	mvn.w	r4, #21
   18e48:	e7f7      	b.n	18e3a <pdn_interface_getopt+0xca>
   18e4a:	2416      	movs	r4, #22
   18e4c:	e7f5      	b.n	18e3a <pdn_interface_getopt+0xca>
   18e4e:	4604      	mov	r4, r0
   18e50:	e7f3      	b.n	18e3a <pdn_interface_getopt+0xca>
   18e52:	bf00      	nop
   18e54:	20018704 	.word	0x20018704
   18e58:	0002351a 	.word	0x0002351a
   18e5c:	00022bca 	.word	0x00022bca
   18e60:	2001c0c3 	.word	0x2001c0c3

00018e64 <pdn_interface_pdn_id_get>:
   18e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e68:	4680      	mov	r8, r0
   18e6a:	460e      	mov	r6, r1
   18e6c:	2900      	cmp	r1, #0
   18e6e:	d043      	beq.n	18ef8 <pdn_interface_pdn_id_get+0x94>
   18e70:	4c22      	ldr	r4, [pc, #136]	; (18efc <pdn_interface_pdn_id_get+0x98>)
   18e72:	2500      	movs	r5, #0
   18e74:	4627      	mov	r7, r4
   18e76:	f854 3b04 	ldr.w	r3, [r4], #4
   18e7a:	2b00      	cmp	r3, #0
   18e7c:	d039      	beq.n	18ef2 <pdn_interface_pdn_id_get+0x8e>
   18e7e:	689b      	ldr	r3, [r3, #8]
   18e80:	2b03      	cmp	r3, #3
   18e82:	d136      	bne.n	18ef2 <pdn_interface_pdn_id_get+0x8e>
   18e84:	4630      	mov	r0, r6
   18e86:	f7f4 f855 	bl	cf34 <strlen>
   18e8a:	f854 1c04 	ldr.w	r1, [r4, #-4]
   18e8e:	69ca      	ldr	r2, [r1, #28]
   18e90:	4282      	cmp	r2, r0
   18e92:	d12e      	bne.n	18ef2 <pdn_interface_pdn_id_get+0x8e>
   18e94:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
   18e98:	4403      	add	r3, r0
   18e9a:	3320      	adds	r3, #32
   18e9c:	4630      	mov	r0, r6
   18e9e:	4419      	add	r1, r3
   18ea0:	f007 fc20 	bl	206e4 <strncmp>
   18ea4:	bb28      	cbnz	r0, 18ef2 <pdn_interface_pdn_id_get+0x8e>
   18ea6:	f1b8 0f0a 	cmp.w	r8, #10
   18eaa:	d114      	bne.n	18ed6 <pdn_interface_pdn_id_get+0x72>
   18eac:	f854 3c04 	ldr.w	r3, [r4, #-4]
   18eb0:	68db      	ldr	r3, [r3, #12]
   18eb2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   18eb6:	b1e3      	cbz	r3, 18ef2 <pdn_interface_pdn_id_get+0x8e>
   18eb8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   18ebc:	685c      	ldr	r4, [r3, #4]
   18ebe:	3401      	adds	r4, #1
   18ec0:	d112      	bne.n	18ee8 <pdn_interface_pdn_id_get+0x84>
   18ec2:	4628      	mov	r0, r5
   18ec4:	f7ff fcae 	bl	18824 <pdn_id_get>
   18ec8:	b170      	cbz	r0, 18ee8 <pdn_interface_pdn_id_get+0x84>
   18eca:	4240      	negs	r0, r0
   18ecc:	f7fa fa44 	bl	13358 <nrf_modem_os_errno_set>
   18ed0:	f04f 30ff 	mov.w	r0, #4294967295
   18ed4:	e00b      	b.n	18eee <pdn_interface_pdn_id_get+0x8a>
   18ed6:	f1b8 0f02 	cmp.w	r8, #2
   18eda:	d10a      	bne.n	18ef2 <pdn_interface_pdn_id_get+0x8e>
   18edc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   18ee0:	68db      	ldr	r3, [r3, #12]
   18ee2:	f003 0301 	and.w	r3, r3, #1
   18ee6:	e7e6      	b.n	18eb6 <pdn_interface_pdn_id_get+0x52>
   18ee8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   18eec:	6858      	ldr	r0, [r3, #4]
   18eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18ef2:	3501      	adds	r5, #1
   18ef4:	2d0a      	cmp	r5, #10
   18ef6:	d1be      	bne.n	18e76 <pdn_interface_pdn_id_get+0x12>
   18ef8:	2016      	movs	r0, #22
   18efa:	e7e7      	b.n	18ecc <pdn_interface_pdn_id_get+0x68>
   18efc:	20018704 	.word	0x20018704

00018f00 <full_dfu_ipc_irq_handler>:
   18f00:	2301      	movs	r3, #1
   18f02:	4a03      	ldr	r2, [pc, #12]	; (18f10 <full_dfu_ipc_irq_handler+0x10>)
   18f04:	6013      	str	r3, [r2, #0]
   18f06:	07c2      	lsls	r2, r0, #31
   18f08:	bf44      	itt	mi
   18f0a:	4a02      	ldrmi	r2, [pc, #8]	; (18f14 <full_dfu_ipc_irq_handler+0x14>)
   18f0c:	7013      	strbmi	r3, [r2, #0]
   18f0e:	4770      	bx	lr
   18f10:	2001872c 	.word	0x2001872c
   18f14:	2001c1c3 	.word	0x2001c1c3

00018f18 <modem_ipc_wait_for_event>:
   18f18:	b538      	push	{r3, r4, r5, lr}
   18f1a:	2300      	movs	r3, #0
   18f1c:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   18f20:	4c0a      	ldr	r4, [pc, #40]	; (18f4c <modem_ipc_wait_for_event+0x34>)
   18f22:	6023      	str	r3, [r4, #0]
   18f24:	6823      	ldr	r3, [r4, #0]
   18f26:	b92b      	cbnz	r3, 18f34 <modem_ipc_wait_for_event+0x1c>
   18f28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18f2c:	f000 f976 	bl	1921c <nrf_modem_busy_wait_us>
   18f30:	3d01      	subs	r5, #1
   18f32:	d1f7      	bne.n	18f24 <modem_ipc_wait_for_event+0xc>
   18f34:	6823      	ldr	r3, [r4, #0]
   18f36:	b90b      	cbnz	r3, 18f3c <modem_ipc_wait_for_event+0x24>
   18f38:	203c      	movs	r0, #60	; 0x3c
   18f3a:	e005      	b.n	18f48 <modem_ipc_wait_for_event+0x30>
   18f3c:	4b04      	ldr	r3, [pc, #16]	; (18f50 <modem_ipc_wait_for_event+0x38>)
   18f3e:	781b      	ldrb	r3, [r3, #0]
   18f40:	2b01      	cmp	r3, #1
   18f42:	bf14      	ite	ne
   18f44:	2000      	movne	r0, #0
   18f46:	2005      	moveq	r0, #5
   18f48:	bd38      	pop	{r3, r4, r5, pc}
   18f4a:	bf00      	nop
   18f4c:	2001872c 	.word	0x2001872c
   18f50:	2001c1c3 	.word	0x2001c1c3

00018f54 <nrf_modem_full_dfu_setup>:
   18f54:	2200      	movs	r2, #0
   18f56:	2300      	movs	r3, #0
   18f58:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f5a:	4d2d      	ldr	r5, [pc, #180]	; (19010 <nrf_modem_full_dfu_setup+0xbc>)
   18f5c:	4f2d      	ldr	r7, [pc, #180]	; (19014 <nrf_modem_full_dfu_setup+0xc0>)
   18f5e:	e9c5 2302 	strd	r2, r3, [r5, #8]
   18f62:	e9c5 2304 	strd	r2, r3, [r5, #16]
   18f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   18f6a:	4b2b      	ldr	r3, [pc, #172]	; (19018 <nrf_modem_full_dfu_setup+0xc4>)
   18f6c:	2400      	movs	r4, #0
   18f6e:	601a      	str	r2, [r3, #0]
   18f70:	f100 031c 	add.w	r3, r0, #28
   18f74:	603b      	str	r3, [r7, #0]
   18f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   18f7a:	6043      	str	r3, [r0, #4]
   18f7c:	231c      	movs	r3, #28
   18f7e:	7203      	strb	r3, [r0, #8]
   18f80:	2320      	movs	r3, #32
   18f82:	2601      	movs	r6, #1
   18f84:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   18f88:	7243      	strb	r3, [r0, #9]
   18f8a:	4b24      	ldr	r3, [pc, #144]	; (1901c <nrf_modem_full_dfu_setup+0xc8>)
   18f8c:	7086      	strb	r6, [r0, #2]
   18f8e:	70c2      	strb	r2, [r0, #3]
   18f90:	7004      	strb	r4, [r0, #0]
   18f92:	7044      	strb	r4, [r0, #1]
   18f94:	7284      	strb	r4, [r0, #10]
   18f96:	72c4      	strb	r4, [r0, #11]
   18f98:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   18f9c:	702c      	strb	r4, [r5, #0]
   18f9e:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   18fa2:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   18fa6:	4b1e      	ldr	r3, [pc, #120]	; (19020 <nrf_modem_full_dfu_setup+0xcc>)
   18fa8:	b093      	sub	sp, #76	; 0x4c
   18faa:	4622      	mov	r2, r4
   18fac:	491d      	ldr	r1, [pc, #116]	; (19024 <nrf_modem_full_dfu_setup+0xd0>)
   18fae:	4620      	mov	r0, r4
   18fb0:	701c      	strb	r4, [r3, #0]
   18fb2:	f000 fa95 	bl	194e0 <nrfx_ipc_init>
   18fb6:	2240      	movs	r2, #64	; 0x40
   18fb8:	4621      	mov	r1, r4
   18fba:	a801      	add	r0, sp, #4
   18fbc:	f007 fb4a 	bl	20654 <memset>
   18fc0:	2302      	movs	r3, #2
   18fc2:	9302      	str	r3, [sp, #8]
   18fc4:	2304      	movs	r3, #4
   18fc6:	9609      	str	r6, [sp, #36]	; 0x24
   18fc8:	2605      	movs	r6, #5
   18fca:	eb0d 0003 	add.w	r0, sp, r3
   18fce:	930b      	str	r3, [sp, #44]	; 0x2c
   18fd0:	9611      	str	r6, [sp, #68]	; 0x44
   18fd2:	f000 fa9d 	bl	19510 <nrfx_ipc_config_load>
   18fd6:	4b14      	ldr	r3, [pc, #80]	; (19028 <nrf_modem_full_dfu_setup+0xd4>)
   18fd8:	9400      	str	r4, [sp, #0]
   18fda:	683f      	ldr	r7, [r7, #0]
   18fdc:	601c      	str	r4, [r3, #0]
   18fde:	681b      	ldr	r3, [r3, #0]
   18fe0:	9300      	str	r3, [sp, #0]
   18fe2:	9b00      	ldr	r3, [sp, #0]
   18fe4:	f7ff ff98 	bl	18f18 <modem_ipc_wait_for_event>
   18fe8:	4603      	mov	r3, r0
   18fea:	b150      	cbz	r0, 19002 <nrf_modem_full_dfu_setup+0xae>
   18fec:	2303      	movs	r3, #3
   18fee:	702b      	strb	r3, [r5, #0]
   18ff0:	f7fa f9b2 	bl	13358 <nrf_modem_os_errno_set>
   18ff4:	f000 faac 	bl	19550 <nrfx_ipc_uninit>
   18ff8:	f04f 33ff 	mov.w	r3, #4294967295
   18ffc:	4618      	mov	r0, r3
   18ffe:	b013      	add	sp, #76	; 0x4c
   19000:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19002:	6839      	ldr	r1, [r7, #0]
   19004:	4a09      	ldr	r2, [pc, #36]	; (1902c <nrf_modem_full_dfu_setup+0xd8>)
   19006:	4291      	cmp	r1, r2
   19008:	d0f8      	beq.n	18ffc <nrf_modem_full_dfu_setup+0xa8>
   1900a:	4630      	mov	r0, r6
   1900c:	e7f0      	b.n	18ff0 <nrf_modem_full_dfu_setup+0x9c>
   1900e:	bf00      	nop
   19010:	20014e88 	.word	0x20014e88
   19014:	20018730 	.word	0x20018730
   19018:	20018734 	.word	0x20018734
   1901c:	4002a000 	.word	0x4002a000
   19020:	2001c1c3 	.word	0x2001c1c3
   19024:	00018f01 	.word	0x00018f01
   19028:	40005610 	.word	0x40005610
   1902c:	a5000001 	.word	0xa5000001

00019030 <packet_handler_create>:
   19030:	2801      	cmp	r0, #1
   19032:	b570      	push	{r4, r5, r6, lr}
   19034:	4604      	mov	r4, r0
   19036:	460e      	mov	r6, r1
   19038:	4615      	mov	r5, r2
   1903a:	d00f      	beq.n	1905c <packet_handler_create+0x2c>
   1903c:	1e84      	subs	r4, r0, #2
   1903e:	2c01      	cmp	r4, #1
   19040:	d810      	bhi.n	19064 <packet_handler_create+0x34>
   19042:	2010      	movs	r0, #16
   19044:	f7fa fb1c 	bl	13680 <nrf_modem_os_alloc>
   19048:	2400      	movs	r4, #0
   1904a:	b130      	cbz	r0, 1905a <packet_handler_create+0x2a>
   1904c:	2218      	movs	r2, #24
   1904e:	4b08      	ldr	r3, [pc, #32]	; (19070 <packet_handler_create+0x40>)
   19050:	6085      	str	r5, [r0, #8]
   19052:	fb02 3404 	mla	r4, r2, r4, r3
   19056:	e9c0 4600 	strd	r4, r6, [r0]
   1905a:	bd70      	pop	{r4, r5, r6, pc}
   1905c:	2014      	movs	r0, #20
   1905e:	f7fa fb0f 	bl	13680 <nrf_modem_os_alloc>
   19062:	e7f2      	b.n	1904a <packet_handler_create+0x1a>
   19064:	200c      	movs	r0, #12
   19066:	f7fa fb0b 	bl	13680 <nrf_modem_os_alloc>
   1906a:	2402      	movs	r4, #2
   1906c:	e7ed      	b.n	1904a <packet_handler_create+0x1a>
   1906e:	bf00      	nop
   19070:	000211ec 	.word	0x000211ec

00019074 <modem_off>:
   19074:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19076:	2501      	movs	r5, #1
   19078:	4c07      	ldr	r4, [pc, #28]	; (19098 <modem_off+0x24>)
   1907a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   1907e:	6065      	str	r5, [r4, #4]
   19080:	f000 f8cc 	bl	1921c <nrf_modem_busy_wait_us>
   19084:	2300      	movs	r3, #0
   19086:	6063      	str	r3, [r4, #4]
   19088:	9301      	str	r3, [sp, #4]
   1908a:	6025      	str	r5, [r4, #0]
   1908c:	6823      	ldr	r3, [r4, #0]
   1908e:	9301      	str	r3, [sp, #4]
   19090:	9b01      	ldr	r3, [sp, #4]
   19092:	b003      	add	sp, #12
   19094:	bd30      	pop	{r4, r5, pc}
   19096:	bf00      	nop
   19098:	40005610 	.word	0x40005610

0001909c <nrf_modem_init>:
   1909c:	b570      	push	{r4, r5, r6, lr}
   1909e:	460d      	mov	r5, r1
   190a0:	b300      	cbz	r0, 190e4 <nrf_modem_init+0x48>
   190a2:	4e13      	ldr	r6, [pc, #76]	; (190f0 <nrf_modem_init+0x54>)
   190a4:	7832      	ldrb	r2, [r6, #0]
   190a6:	b9ea      	cbnz	r2, 190e4 <nrf_modem_init+0x48>
   190a8:	2901      	cmp	r1, #1
   190aa:	d113      	bne.n	190d4 <nrf_modem_init+0x38>
   190ac:	68c1      	ldr	r1, [r0, #12]
   190ae:	6842      	ldr	r2, [r0, #4]
   190b0:	440a      	add	r2, r1
   190b2:	6941      	ldr	r1, [r0, #20]
   190b4:	440a      	add	r2, r1
   190b6:	69c1      	ldr	r1, [r0, #28]
   190b8:	440a      	add	r2, r1
   190ba:	f242 011b 	movw	r1, #8219	; 0x201b
   190be:	428a      	cmp	r2, r1
   190c0:	d913      	bls.n	190ea <nrf_modem_init+0x4e>
   190c2:	6800      	ldr	r0, [r0, #0]
   190c4:	f7ff ff46 	bl	18f54 <nrf_modem_full_dfu_setup>
   190c8:	4604      	mov	r4, r0
   190ca:	b130      	cbz	r0, 190da <nrf_modem_init+0x3e>
   190cc:	f7ff ffd2 	bl	19074 <modem_off>
   190d0:	4620      	mov	r0, r4
   190d2:	bd70      	pop	{r4, r5, r6, pc}
   190d4:	f006 fc3a 	bl	1f94c <nrf_modem_platform_init>
   190d8:	e7f6      	b.n	190c8 <nrf_modem_init+0x2c>
   190da:	4b06      	ldr	r3, [pc, #24]	; (190f4 <nrf_modem_init+0x58>)
   190dc:	701d      	strb	r5, [r3, #0]
   190de:	2301      	movs	r3, #1
   190e0:	7033      	strb	r3, [r6, #0]
   190e2:	e7f5      	b.n	190d0 <nrf_modem_init+0x34>
   190e4:	f04f 34ff 	mov.w	r4, #4294967295
   190e8:	e7f2      	b.n	190d0 <nrf_modem_init+0x34>
   190ea:	240c      	movs	r4, #12
   190ec:	e7f0      	b.n	190d0 <nrf_modem_init+0x34>
   190ee:	bf00      	nop
   190f0:	2001c1c4 	.word	0x2001c1c4
   190f4:	2001c1c5 	.word	0x2001c1c5

000190f8 <nrf_modem_platform_af_method_table_get>:
   190f8:	280a      	cmp	r0, #10
   190fa:	b508      	push	{r3, lr}
   190fc:	d80b      	bhi.n	19116 <nrf_modem_platform_af_method_table_get+0x1e>
   190fe:	2800      	cmp	r0, #0
   19100:	d036      	beq.n	19170 <nrf_modem_platform_af_method_table_get+0x78>
   19102:	3801      	subs	r0, #1
   19104:	2809      	cmp	r0, #9
   19106:	d833      	bhi.n	19170 <nrf_modem_platform_af_method_table_get+0x78>
   19108:	e8df f000 	tbb	[pc, r0]
   1910c:	32321429 	.word	0x32321429
   19110:	32323224 	.word	0x32323224
   19114:	1432      	.short	0x1432
   19116:	2866      	cmp	r0, #102	; 0x66
   19118:	d12a      	bne.n	19170 <nrf_modem_platform_af_method_table_get+0x78>
   1911a:	f240 2301 	movw	r3, #513	; 0x201
   1911e:	429a      	cmp	r2, r3
   19120:	d028      	beq.n	19174 <nrf_modem_platform_af_method_table_get+0x7c>
   19122:	f240 2302 	movw	r3, #514	; 0x202
   19126:	429a      	cmp	r2, r3
   19128:	d026      	beq.n	19178 <nrf_modem_platform_af_method_table_get+0x80>
   1912a:	202b      	movs	r0, #43	; 0x2b
   1912c:	f7fa f914 	bl	13358 <nrf_modem_os_errno_set>
   19130:	2000      	movs	r0, #0
   19132:	e009      	b.n	19148 <nrf_modem_platform_af_method_table_get+0x50>
   19134:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   19138:	d207      	bcs.n	1914a <nrf_modem_platform_af_method_table_get+0x52>
   1913a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1913e:	d207      	bcs.n	19150 <nrf_modem_platform_af_method_table_get+0x58>
   19140:	3a01      	subs	r2, #1
   19142:	2a01      	cmp	r2, #1
   19144:	d8f1      	bhi.n	1912a <nrf_modem_platform_af_method_table_get+0x32>
   19146:	480e      	ldr	r0, [pc, #56]	; (19180 <nrf_modem_platform_af_method_table_get+0x88>)
   19148:	bd08      	pop	{r3, pc}
   1914a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1914e:	d1ec      	bne.n	1912a <nrf_modem_platform_af_method_table_get+0x32>
   19150:	480c      	ldr	r0, [pc, #48]	; (19184 <nrf_modem_platform_af_method_table_get+0x8c>)
   19152:	e7f9      	b.n	19148 <nrf_modem_platform_af_method_table_get+0x50>
   19154:	2903      	cmp	r1, #3
   19156:	480c      	ldr	r0, [pc, #48]	; (19188 <nrf_modem_platform_af_method_table_get+0x90>)
   19158:	bf18      	it	ne
   1915a:	2000      	movne	r0, #0
   1915c:	e7f4      	b.n	19148 <nrf_modem_platform_af_method_table_get+0x50>
   1915e:	f240 2303 	movw	r3, #515	; 0x203
   19162:	429a      	cmp	r2, r3
   19164:	d00a      	beq.n	1917c <nrf_modem_platform_af_method_table_get+0x84>
   19166:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1916a:	d1de      	bne.n	1912a <nrf_modem_platform_af_method_table_get+0x32>
   1916c:	4807      	ldr	r0, [pc, #28]	; (1918c <nrf_modem_platform_af_method_table_get+0x94>)
   1916e:	e7eb      	b.n	19148 <nrf_modem_platform_af_method_table_get+0x50>
   19170:	2016      	movs	r0, #22
   19172:	e7db      	b.n	1912c <nrf_modem_platform_af_method_table_get+0x34>
   19174:	4806      	ldr	r0, [pc, #24]	; (19190 <nrf_modem_platform_af_method_table_get+0x98>)
   19176:	e7e7      	b.n	19148 <nrf_modem_platform_af_method_table_get+0x50>
   19178:	4806      	ldr	r0, [pc, #24]	; (19194 <nrf_modem_platform_af_method_table_get+0x9c>)
   1917a:	e7e5      	b.n	19148 <nrf_modem_platform_af_method_table_get+0x50>
   1917c:	4806      	ldr	r0, [pc, #24]	; (19198 <nrf_modem_platform_af_method_table_get+0xa0>)
   1917e:	e7e3      	b.n	19148 <nrf_modem_platform_af_method_table_get+0x50>
   19180:	0002125c 	.word	0x0002125c
   19184:	00021284 	.word	0x00021284
   19188:	00021324 	.word	0x00021324
   1918c:	000212fc 	.word	0x000212fc
   19190:	00021234 	.word	0x00021234
   19194:	000212d4 	.word	0x000212d4
   19198:	000212ac 	.word	0x000212ac

0001919c <nrf_modem_platform_fd_method_table_get>:
   1919c:	b538      	push	{r3, r4, r5, lr}
   1919e:	4605      	mov	r5, r0
   191a0:	f7fc ffe8 	bl	16174 <interface_socket_from_handle_get>
   191a4:	4604      	mov	r4, r0
   191a6:	b130      	cbz	r0, 191b6 <nrf_modem_platform_fd_method_table_get+0x1a>
   191a8:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   191ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   191b0:	68c0      	ldr	r0, [r0, #12]
   191b2:	f7ff bfa1 	b.w	190f8 <nrf_modem_platform_af_method_table_get>
   191b6:	4b0b      	ldr	r3, [pc, #44]	; (191e4 <nrf_modem_platform_fd_method_table_get+0x48>)
   191b8:	429d      	cmp	r5, r3
   191ba:	d00c      	beq.n	191d6 <nrf_modem_platform_fd_method_table_get+0x3a>
   191bc:	4a0a      	ldr	r2, [pc, #40]	; (191e8 <nrf_modem_platform_fd_method_table_get+0x4c>)
   191be:	0c2b      	lsrs	r3, r5, #16
   191c0:	041b      	lsls	r3, r3, #16
   191c2:	4293      	cmp	r3, r2
   191c4:	d009      	beq.n	191da <nrf_modem_platform_fd_method_table_get+0x3e>
   191c6:	4b09      	ldr	r3, [pc, #36]	; (191ec <nrf_modem_platform_fd_method_table_get+0x50>)
   191c8:	429d      	cmp	r5, r3
   191ca:	d008      	beq.n	191de <nrf_modem_platform_fd_method_table_get+0x42>
   191cc:	2009      	movs	r0, #9
   191ce:	f7fa f8c3 	bl	13358 <nrf_modem_os_errno_set>
   191d2:	4620      	mov	r0, r4
   191d4:	bd38      	pop	{r3, r4, r5, pc}
   191d6:	4c06      	ldr	r4, [pc, #24]	; (191f0 <nrf_modem_platform_fd_method_table_get+0x54>)
   191d8:	e7fb      	b.n	191d2 <nrf_modem_platform_fd_method_table_get+0x36>
   191da:	4c06      	ldr	r4, [pc, #24]	; (191f4 <nrf_modem_platform_fd_method_table_get+0x58>)
   191dc:	e7f9      	b.n	191d2 <nrf_modem_platform_fd_method_table_get+0x36>
   191de:	4c06      	ldr	r4, [pc, #24]	; (191f8 <nrf_modem_platform_fd_method_table_get+0x5c>)
   191e0:	e7f7      	b.n	191d2 <nrf_modem_platform_fd_method_table_get+0x36>
   191e2:	bf00      	nop
   191e4:	49765432 	.word	0x49765432
   191e8:	789a0000 	.word	0x789a0000
   191ec:	49765443 	.word	0x49765443
   191f0:	000212ac 	.word	0x000212ac
   191f4:	000212d4 	.word	0x000212d4
   191f8:	000212fc 	.word	0x000212fc

000191fc <nrf_modem_platform_fcntl>:
   191fc:	b508      	push	{r3, lr}
   191fe:	4b06      	ldr	r3, [pc, #24]	; (19218 <nrf_modem_platform_fcntl+0x1c>)
   19200:	4298      	cmp	r0, r3
   19202:	d003      	beq.n	1920c <nrf_modem_platform_fcntl+0x10>
   19204:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19208:	f7fd b834 	b.w	16274 <interface_socket_fcntl>
   1920c:	202d      	movs	r0, #45	; 0x2d
   1920e:	f7fa f8a3 	bl	13358 <nrf_modem_os_errno_set>
   19212:	f04f 30ff 	mov.w	r0, #4294967295
   19216:	bd08      	pop	{r3, pc}
   19218:	49765432 	.word	0x49765432

0001921c <nrf_modem_busy_wait_us>:
   1921c:	b508      	push	{r3, lr}
   1921e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19222:	4358      	muls	r0, r3
   19224:	f7f3 f94e 	bl	c4c4 <__aeabi_ui2d>
   19228:	4b0a      	ldr	r3, [pc, #40]	; (19254 <nrf_modem_busy_wait_us+0x38>)
   1922a:	2200      	movs	r2, #0
   1922c:	f7f3 faee 	bl	c80c <__aeabi_ddiv>
   19230:	f7f3 fc5c 	bl	caec <__aeabi_d2f>
   19234:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
   19238:	ee07 0a90 	vmov	s15, r0
   1923c:	eec7 7a87 	vdiv.f32	s15, s15, s14
   19240:	2300      	movs	r3, #0
   19242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   19246:	ee17 2a90 	vmov	r2, s15
   1924a:	4293      	cmp	r3, r2
   1924c:	d100      	bne.n	19250 <nrf_modem_busy_wait_us+0x34>
   1924e:	bd08      	pop	{r3, pc}
   19250:	3301      	adds	r3, #1
   19252:	e7f8      	b.n	19246 <nrf_modem_busy_wait_us+0x2a>
   19254:	402f4000 	.word	0x402f4000

00019258 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   19258:	4a07      	ldr	r2, [pc, #28]	; (19278 <SystemInit+0x20>)
   1925a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1925e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   19262:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   19266:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1926a:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1926e:	4b03      	ldr	r3, [pc, #12]	; (1927c <SystemInit+0x24>)
   19270:	4a03      	ldr	r2, [pc, #12]	; (19280 <SystemInit+0x28>)
   19272:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   19274:	4770      	bx	lr
   19276:	bf00      	nop
   19278:	e000ed00 	.word	0xe000ed00
   1927c:	200145a0 	.word	0x200145a0
   19280:	03d09000 	.word	0x03d09000

00019284 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   19284:	4b04      	ldr	r3, [pc, #16]	; (19298 <nrfx_clock_init+0x14>)
   19286:	791a      	ldrb	r2, [r3, #4]
   19288:	b922      	cbnz	r2, 19294 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1928a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1928c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1928e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   19290:	4802      	ldr	r0, [pc, #8]	; (1929c <nrfx_clock_init+0x18>)
   19292:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   19294:	4802      	ldr	r0, [pc, #8]	; (192a0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19296:	4770      	bx	lr
   19298:	20018738 	.word	0x20018738
   1929c:	0bad0000 	.word	0x0bad0000
   192a0:	0bad000c 	.word	0x0bad000c

000192a4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   192a4:	b110      	cbz	r0, 192ac <nrfx_clock_start+0x8>
   192a6:	2801      	cmp	r0, #1
   192a8:	d01e      	beq.n	192e8 <nrfx_clock_start+0x44>
   192aa:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   192ac:	4b13      	ldr	r3, [pc, #76]	; (192fc <nrfx_clock_start+0x58>)
   192ae:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   192b2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   192b6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   192ba:	4619      	mov	r1, r3
   192bc:	d010      	beq.n	192e0 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   192be:	f002 0203 	and.w	r2, r2, #3
   192c2:	2a02      	cmp	r2, #2
   192c4:	d10c      	bne.n	192e0 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   192c6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   192ca:	2200      	movs	r2, #0
   192cc:	4b0c      	ldr	r3, [pc, #48]	; (19300 <nrfx_clock_start+0x5c>)
   192ce:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   192d0:	2202      	movs	r2, #2
   192d2:	681b      	ldr	r3, [r3, #0]
   192d4:	4b09      	ldr	r3, [pc, #36]	; (192fc <nrfx_clock_start+0x58>)
   192d6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   192da:	2201      	movs	r2, #1
   192dc:	609a      	str	r2, [r3, #8]
}
   192de:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   192e0:	2301      	movs	r3, #1
   192e2:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   192e6:	e7f0      	b.n	192ca <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   192e8:	2200      	movs	r2, #0
   192ea:	4b06      	ldr	r3, [pc, #24]	; (19304 <nrfx_clock_start+0x60>)
   192ec:	601a      	str	r2, [r3, #0]
   192ee:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   192f0:	4b02      	ldr	r3, [pc, #8]	; (192fc <nrfx_clock_start+0x58>)
   192f2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   192f6:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   192f8:	4770      	bx	lr
   192fa:	bf00      	nop
   192fc:	40005000 	.word	0x40005000
   19300:	40005104 	.word	0x40005104
   19304:	40005100 	.word	0x40005100

00019308 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   19308:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1930a:	b110      	cbz	r0, 19312 <nrfx_clock_stop+0xa>
   1930c:	2801      	cmp	r0, #1
   1930e:	d016      	beq.n	1933e <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   19310:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   19312:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19314:	2101      	movs	r1, #1
   19316:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   1931a:	4c16      	ldr	r4, [pc, #88]	; (19374 <nrfx_clock_stop+0x6c>)
   1931c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19320:	4a15      	ldr	r2, [pc, #84]	; (19378 <nrfx_clock_stop+0x70>)
   19322:	6010      	str	r0, [r2, #0]
   19324:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19326:	4a15      	ldr	r2, [pc, #84]	; (1937c <nrfx_clock_stop+0x74>)
   19328:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1932a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1932e:	03db      	lsls	r3, r3, #15
   19330:	d5ee      	bpl.n	19310 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   19332:	2001      	movs	r0, #1
   19334:	f006 fc89 	bl	1fc4a <nrfx_busy_wait>
   19338:	3d01      	subs	r5, #1
   1933a:	d1f6      	bne.n	1932a <nrfx_clock_stop+0x22>
   1933c:	e7e8      	b.n	19310 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1933e:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19340:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19344:	4b0e      	ldr	r3, [pc, #56]	; (19380 <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
   19346:	4c0b      	ldr	r4, [pc, #44]	; (19374 <nrfx_clock_stop+0x6c>)
   19348:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1934c:	601a      	str	r2, [r3, #0]
   1934e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19350:	4b0c      	ldr	r3, [pc, #48]	; (19384 <nrfx_clock_stop+0x7c>)
   19352:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   19354:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   19358:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1935c:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   19360:	03d2      	lsls	r2, r2, #15
   19362:	d5d5      	bpl.n	19310 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   19364:	2b00      	cmp	r3, #0
   19366:	d0d3      	beq.n	19310 <nrfx_clock_stop+0x8>
   19368:	2001      	movs	r0, #1
   1936a:	f006 fc6e 	bl	1fc4a <nrfx_busy_wait>
   1936e:	3d01      	subs	r5, #1
   19370:	d1f0      	bne.n	19354 <nrfx_clock_stop+0x4c>
   19372:	e7cd      	b.n	19310 <nrfx_clock_stop+0x8>
   19374:	40005000 	.word	0x40005000
   19378:	40005104 	.word	0x40005104
   1937c:	4000500c 	.word	0x4000500c
   19380:	40005100 	.word	0x40005100
   19384:	40005004 	.word	0x40005004

00019388 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19388:	4b15      	ldr	r3, [pc, #84]	; (193e0 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1938a:	b510      	push	{r4, lr}
   1938c:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1938e:	b14a      	cbz	r2, 193a4 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19390:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   19392:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19394:	6018      	str	r0, [r3, #0]
   19396:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   19398:	4b12      	ldr	r3, [pc, #72]	; (193e4 <nrfx_power_clock_irq_handler+0x5c>)
   1939a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1939e:	4b12      	ldr	r3, [pc, #72]	; (193e8 <nrfx_power_clock_irq_handler+0x60>)
   193a0:	681b      	ldr	r3, [r3, #0]
   193a2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   193a4:	4b11      	ldr	r3, [pc, #68]	; (193ec <nrfx_power_clock_irq_handler+0x64>)
   193a6:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   193a8:	b182      	cbz	r2, 193cc <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   193aa:	2200      	movs	r2, #0
   193ac:	601a      	str	r2, [r3, #0]
   193ae:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   193b0:	4b0c      	ldr	r3, [pc, #48]	; (193e4 <nrfx_power_clock_irq_handler+0x5c>)
   193b2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   193b6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   193ba:	f002 0203 	and.w	r2, r2, #3
   193be:	2a01      	cmp	r2, #1
   193c0:	f04f 0102 	mov.w	r1, #2
   193c4:	d103      	bne.n	193ce <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
   193c6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   193ca:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   193cc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   193ce:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   193d2:	4b05      	ldr	r3, [pc, #20]	; (193e8 <nrfx_power_clock_irq_handler+0x60>)
   193d4:	2001      	movs	r0, #1
}
   193d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   193da:	681b      	ldr	r3, [r3, #0]
   193dc:	4718      	bx	r3
   193de:	bf00      	nop
   193e0:	40005100 	.word	0x40005100
   193e4:	40005000 	.word	0x40005000
   193e8:	20018738 	.word	0x20018738
   193ec:	40005104 	.word	0x40005104

000193f0 <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   193f0:	4a0b      	ldr	r2, [pc, #44]	; (19420 <nrfx_dppi_channel_alloc+0x30>)
{
   193f2:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   193f4:	6816      	ldr	r6, [r2, #0]
   193f6:	43f1      	mvns	r1, r6
   193f8:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
   193fa:	b171      	cbz	r1, 1941a <nrfx_dppi_channel_alloc+0x2a>
   193fc:	2500      	movs	r5, #0
   193fe:	b2ec      	uxtb	r4, r5
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   19400:	fa21 f304 	lsr.w	r3, r1, r4
   19404:	07db      	lsls	r3, r3, #31
   19406:	f105 0501 	add.w	r5, r5, #1
   1940a:	d5f8      	bpl.n	193fe <nrfx_dppi_channel_alloc+0xe>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   1940c:	2301      	movs	r3, #1
   1940e:	40a3      	lsls	r3, r4
   19410:	4333      	orrs	r3, r6
    *p_channel = channel;
   19412:	7004      	strb	r4, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   19414:	4803      	ldr	r0, [pc, #12]	; (19424 <nrfx_dppi_channel_alloc+0x34>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   19416:	6013      	str	r3, [r2, #0]
}
   19418:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   1941a:	4803      	ldr	r0, [pc, #12]	; (19428 <nrfx_dppi_channel_alloc+0x38>)
   1941c:	e7fc      	b.n	19418 <nrfx_dppi_channel_alloc+0x28>
   1941e:	bf00      	nop
   19420:	20018740 	.word	0x20018740
   19424:	0bad0000 	.word	0x0bad0000
   19428:	0bad0002 	.word	0x0bad0002

0001942c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1942c:	2301      	movs	r3, #1
   1942e:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   19432:	f010 0fff 	tst.w	r0, #255	; 0xff
   19436:	d012      	beq.n	1945e <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   19438:	f04f 0320 	mov.w	r3, #32
   1943c:	f3ef 8111 	mrs	r1, BASEPRI
   19440:	f383 8811 	msr	BASEPRI, r3
   19444:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   19448:	4a06      	ldr	r2, [pc, #24]	; (19464 <nrfx_gpiote_channel_free+0x38>)
   1944a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1944c:	ea23 0000 	bic.w	r0, r3, r0
   19450:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   19452:	f381 8811 	msr	BASEPRI, r1
   19456:	f3bf 8f6f 	isb	sy
   1945a:	4803      	ldr	r0, [pc, #12]	; (19468 <nrfx_gpiote_channel_free+0x3c>)
   1945c:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1945e:	4803      	ldr	r0, [pc, #12]	; (1946c <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19460:	4770      	bx	lr
   19462:	bf00      	nop
   19464:	20018744 	.word	0x20018744
   19468:	0bad0000 	.word	0x0bad0000
   1946c:	0bad0004 	.word	0x0bad0004

00019470 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   19470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   19474:	22ff      	movs	r2, #255	; 0xff
{
   19476:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   19478:	2601      	movs	r6, #1
{
   1947a:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1947c:	f8df e058 	ldr.w	lr, [pc, #88]	; 194d8 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   19480:	4814      	ldr	r0, [pc, #80]	; (194d4 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   19482:	f8df 8058 	ldr.w	r8, [pc, #88]	; 194dc <nrfx_gpiote_channel_alloc+0x6c>
   19486:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   19488:	f04f 0120 	mov.w	r1, #32
   1948c:	f3ef 8c11 	mrs	ip, BASEPRI
   19490:	f381 8811 	msr	BASEPRI, r1
   19494:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   19498:	fa22 f103 	lsr.w	r1, r2, r3
   1949c:	07c9      	lsls	r1, r1, #31
   1949e:	d50a      	bpl.n	194b6 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   194a0:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   194a4:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   194a8:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   194aa:	bf01      	itttt	eq
   194ac:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   194ae:	4339      	orreq	r1, r7
   194b0:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            *p_channel = ch_idx;
   194b4:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   194b6:	f38c 8811 	msr	BASEPRI, ip
   194ba:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   194be:	4540      	cmp	r0, r8
   194c0:	d005      	beq.n	194ce <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   194c2:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   194c6:	439a      	bics	r2, r3
   194c8:	f104 0401 	add.w	r4, r4, #1
   194cc:	d1db      	bne.n	19486 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   194ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   194d2:	bf00      	nop
   194d4:	0bad0002 	.word	0x0bad0002
   194d8:	20018744 	.word	0x20018744
   194dc:	0bad0000 	.word	0x0bad0000

000194e0 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   194e0:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   194e2:	4c08      	ldr	r4, [pc, #32]	; (19504 <nrfx_ipc_init+0x24>)
{
   194e4:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   194e6:	7923      	ldrb	r3, [r4, #4]
{
   194e8:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   194ea:	b943      	cbnz	r3, 194fe <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   194ec:	202a      	movs	r0, #42	; 0x2a
   194ee:	f7f7 fe3d 	bl	1116c <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   194f2:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   194f4:	4804      	ldr	r0, [pc, #16]	; (19508 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   194f6:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   194f8:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   194fa:	60a5      	str	r5, [r4, #8]
}
   194fc:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   194fe:	4803      	ldr	r0, [pc, #12]	; (1950c <nrfx_ipc_init+0x2c>)
   19500:	e7fc      	b.n	194fc <nrfx_ipc_init+0x1c>
   19502:	bf00      	nop
   19504:	20018794 	.word	0x20018794
   19508:	0bad0000 	.word	0x0bad0000
   1950c:	0bad000c 	.word	0x0bad000c

00019510 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   19510:	2300      	movs	r3, #0
{
   19512:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   19514:	4a0d      	ldr	r2, [pc, #52]	; (1954c <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   19516:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1951a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1951e:	3301      	adds	r3, #1
   19520:	2b08      	cmp	r3, #8
   19522:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   19526:	d1f6      	bne.n	19516 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   19528:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1952a:	4a08      	ldr	r2, [pc, #32]	; (1954c <nrfx_ipc_config_load+0x3c>)
   1952c:	f100 0120 	add.w	r1, r0, #32
   19530:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   19534:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   19538:	3301      	adds	r3, #1
   1953a:	2b08      	cmp	r3, #8
   1953c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   19540:	d1f6      	bne.n	19530 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   19542:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   19544:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   19548:	bd30      	pop	{r4, r5, pc}
   1954a:	bf00      	nop
   1954c:	4002a000 	.word	0x4002a000

00019550 <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
   19550:	2300      	movs	r3, #0
   19552:	4a14      	ldr	r2, [pc, #80]	; (195a4 <nrfx_ipc_uninit+0x54>)
   19554:	4914      	ldr	r1, [pc, #80]	; (195a8 <nrfx_ipc_uninit+0x58>)
   19556:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1955a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1955e:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   19562:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   19566:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   1956a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   1956e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   19572:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    p_reg->RECEIVE_CNF[index] = channels_mask;
   19576:	f8c1 3590 	str.w	r3, [r1, #1424]	; 0x590
   1957a:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   1957e:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   19582:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   19586:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   1958a:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   1958e:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   19592:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    p_reg->INTENCLR = mask;
   19596:	f04f 32ff 	mov.w	r2, #4294967295
   1959a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   1959e:	4a03      	ldr	r2, [pc, #12]	; (195ac <nrfx_ipc_uninit+0x5c>)
   195a0:	7113      	strb	r3, [r2, #4]
}
   195a2:	4770      	bx	lr
   195a4:	4002a004 	.word	0x4002a004
   195a8:	4002a000 	.word	0x4002a000
   195ac:	20018794 	.word	0x20018794

000195b0 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   195b0:	4b0c      	ldr	r3, [pc, #48]	; (195e4 <nrfx_ipc_irq_handler+0x34>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   195b2:	b430      	push	{r4, r5}
   195b4:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = __CLZ(__RBIT(bitmask));
        bitmask &= ~(1UL << event_idx);
   195b8:	2401      	movs	r4, #1
    uint32_t bitmask = events_map;
   195ba:	4602      	mov	r2, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   195bc:	2500      	movs	r5, #0
    while (bitmask)
   195be:	b922      	cbnz	r2, 195ca <nrfx_ipc_irq_handler+0x1a>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
}
   195c0:	bc30      	pop	{r4, r5}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   195c2:	4b09      	ldr	r3, [pc, #36]	; (195e8 <nrfx_ipc_irq_handler+0x38>)
   195c4:	681a      	ldr	r2, [r3, #0]
   195c6:	6899      	ldr	r1, [r3, #8]
   195c8:	4710      	bx	r2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   195ca:	fa92 f3a2 	rbit	r3, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
   195ce:	fab3 f383 	clz	r3, r3
        bitmask &= ~(1UL << event_idx);
   195d2:	fa04 f103 	lsl.w	r1, r4, r3
   195d6:	ea22 0201 	bic.w	r2, r2, r1
   195da:	4904      	ldr	r1, [pc, #16]	; (195ec <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   195dc:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   195de:	50cd      	str	r5, [r1, r3]
}
   195e0:	e7ed      	b.n	195be <nrfx_ipc_irq_handler+0xe>
   195e2:	bf00      	nop
   195e4:	4002a000 	.word	0x4002a000
   195e8:	20018794 	.word	0x20018794
   195ec:	4002a100 	.word	0x4002a100

000195f0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   195f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   195f2:	4b10      	ldr	r3, [pc, #64]	; (19634 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   195f4:	4f10      	ldr	r7, [pc, #64]	; (19638 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   195f6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   195fa:	3001      	adds	r0, #1
   195fc:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   19600:	42ae      	cmp	r6, r5
   19602:	d800      	bhi.n	19606 <z_sys_init_run_level+0x16>
		}
	}
}
   19604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   19606:	e9d5 3400 	ldrd	r3, r4, [r5]
   1960a:	4620      	mov	r0, r4
   1960c:	4798      	blx	r3
   1960e:	b170      	cbz	r0, 1962e <z_sys_init_run_level+0x3e>
   19610:	b16c      	cbz	r4, 1962e <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   19612:	2301      	movs	r3, #1
				(dev - __device_start));
   19614:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   19616:	4a09      	ldr	r2, [pc, #36]	; (1963c <z_sys_init_run_level+0x4c>)
   19618:	1124      	asrs	r4, r4, #4
   1961a:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   1961c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   19620:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   19624:	fa03 f404 	lsl.w	r4, r3, r4
   19628:	4304      	orrs	r4, r0
   1962a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1962e:	3508      	adds	r5, #8
   19630:	e7e6      	b.n	19600 <z_sys_init_run_level+0x10>
   19632:	bf00      	nop
   19634:	0002134c 	.word	0x0002134c
   19638:	20014628 	.word	0x20014628
   1963c:	20014698 	.word	0x20014698

00019640 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   19640:	4b08      	ldr	r3, [pc, #32]	; (19664 <z_device_ready+0x24>)
   19642:	1ac0      	subs	r0, r0, r3
   19644:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   19646:	4b08      	ldr	r3, [pc, #32]	; (19668 <z_device_ready+0x28>)
   19648:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   1964a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1964e:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   19650:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   19654:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   19658:	4210      	tst	r0, r2
}
   1965a:	bf0c      	ite	eq
   1965c:	4618      	moveq	r0, r3
   1965e:	2000      	movne	r0, #0
   19660:	4770      	bx	lr
   19662:	bf00      	nop
   19664:	20014628 	.word	0x20014628
   19668:	20014698 	.word	0x20014698

0001966c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1966c:	4911      	ldr	r1, [pc, #68]	; (196b4 <z_impl_device_get_binding+0x48>)
{
   1966e:	b570      	push	{r4, r5, r6, lr}
   19670:	4605      	mov	r5, r0
   19672:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   19674:	4c10      	ldr	r4, [pc, #64]	; (196b8 <z_impl_device_get_binding+0x4c>)
   19676:	428c      	cmp	r4, r1
   19678:	d104      	bne.n	19684 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1967a:	4c0f      	ldr	r4, [pc, #60]	; (196b8 <z_impl_device_get_binding+0x4c>)
   1967c:	42b4      	cmp	r4, r6
   1967e:	d10a      	bne.n	19696 <z_impl_device_get_binding+0x2a>
	return NULL;
   19680:	2400      	movs	r4, #0
   19682:	e014      	b.n	196ae <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   19684:	4620      	mov	r0, r4
   19686:	f7ff ffdb 	bl	19640 <z_device_ready>
   1968a:	b110      	cbz	r0, 19692 <z_impl_device_get_binding+0x26>
   1968c:	6823      	ldr	r3, [r4, #0]
   1968e:	42ab      	cmp	r3, r5
   19690:	d00d      	beq.n	196ae <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   19692:	3410      	adds	r4, #16
   19694:	e7ef      	b.n	19676 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   19696:	4620      	mov	r0, r4
   19698:	f7ff ffd2 	bl	19640 <z_device_ready>
   1969c:	b908      	cbnz	r0, 196a2 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1969e:	3410      	adds	r4, #16
   196a0:	e7ec      	b.n	1967c <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   196a2:	4628      	mov	r0, r5
   196a4:	6821      	ldr	r1, [r4, #0]
   196a6:	f7f3 fc3b 	bl	cf20 <strcmp>
   196aa:	2800      	cmp	r0, #0
   196ac:	d1f7      	bne.n	1969e <z_impl_device_get_binding+0x32>
}
   196ae:	4620      	mov	r0, r4
   196b0:	bd70      	pop	{r4, r5, r6, pc}
   196b2:	bf00      	nop
   196b4:	20014698 	.word	0x20014698
   196b8:	20014628 	.word	0x20014628

000196bc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   196bc:	4b01      	ldr	r3, [pc, #4]	; (196c4 <z_impl_z_errno+0x8>)
   196be:	6898      	ldr	r0, [r3, #8]
}
   196c0:	3068      	adds	r0, #104	; 0x68
   196c2:	4770      	bx	lr
   196c4:	200187a0 	.word	0x200187a0

000196c8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   196c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   196cc:	4606      	mov	r6, r0
   196ce:	460f      	mov	r7, r1
	__asm__ volatile(
   196d0:	f04f 0320 	mov.w	r3, #32
   196d4:	f3ef 8811 	mrs	r8, BASEPRI
   196d8:	f383 8811 	msr	BASEPRI, r3
   196dc:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   196e0:	f000 fefa 	bl	1a4d8 <z_impl_k_current_get>
   196e4:	4c21      	ldr	r4, [pc, #132]	; (1976c <z_fatal_error+0xa4>)
   196e6:	4b22      	ldr	r3, [pc, #136]	; (19770 <z_fatal_error+0xa8>)
   196e8:	2e04      	cmp	r6, #4
   196ea:	eba4 0403 	sub.w	r4, r4, r3
   196ee:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   196f2:	bf98      	it	ls
   196f4:	4a1f      	ldrls	r2, [pc, #124]	; (19774 <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   196f6:	ea4f 1484 	mov.w	r4, r4, lsl #6
   196fa:	f044 0301 	orr.w	r3, r4, #1
   196fe:	4605      	mov	r5, r0
	switch (reason) {
   19700:	bf94      	ite	ls
   19702:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   19706:	4a1c      	ldrhi	r2, [pc, #112]	; (19778 <z_fatal_error+0xb0>)
   19708:	f8ad 3000 	strh.w	r3, [sp]
   1970c:	4631      	mov	r1, r6
   1970e:	2300      	movs	r3, #0
   19710:	481a      	ldr	r0, [pc, #104]	; (1977c <z_fatal_error+0xb4>)
   19712:	f002 ffb8 	bl	1c686 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   19716:	b147      	cbz	r7, 1972a <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   19718:	69fb      	ldr	r3, [r7, #28]
   1971a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1971e:	b123      	cbz	r3, 1972a <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   19720:	4817      	ldr	r0, [pc, #92]	; (19780 <z_fatal_error+0xb8>)
   19722:	f044 0101 	orr.w	r1, r4, #1
   19726:	f002 ff6f 	bl	1c608 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1972a:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1972e:	b12d      	cbz	r5, 1973c <z_fatal_error+0x74>
   19730:	4628      	mov	r0, r5
   19732:	f006 fcca 	bl	200ca <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   19736:	b108      	cbz	r0, 1973c <z_fatal_error+0x74>
   19738:	7803      	ldrb	r3, [r0, #0]
   1973a:	b903      	cbnz	r3, 1973e <z_fatal_error+0x76>
		thread_name = "unknown";
   1973c:	4811      	ldr	r0, [pc, #68]	; (19784 <z_fatal_error+0xbc>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1973e:	f7f6 fca9 	bl	10094 <log_strdup>
   19742:	4623      	mov	r3, r4
   19744:	4602      	mov	r2, r0
   19746:	4629      	mov	r1, r5
   19748:	480f      	ldr	r0, [pc, #60]	; (19788 <z_fatal_error+0xc0>)
   1974a:	f002 ff83 	bl	1c654 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1974e:	4639      	mov	r1, r7
   19750:	4630      	mov	r0, r6
   19752:	f7fb feeb 	bl	1552c <k_sys_fatal_error_handler>
	__asm__ volatile(
   19756:	f388 8811 	msr	BASEPRI, r8
   1975a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1975e:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   19760:	b002      	add	sp, #8
   19762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19766:	f7f8 b93f 	b.w	119e8 <z_impl_k_thread_abort>
   1976a:	bf00      	nop
   1976c:	00020ec0 	.word	0x00020ec0
   19770:	00020e58 	.word	0x00020e58
   19774:	00021364 	.word	0x00021364
   19778:	0002354f 	.word	0x0002354f
   1977c:	00023565 	.word	0x00023565
   19780:	0002358d 	.word	0x0002358d
   19784:	0002355d 	.word	0x0002355d
   19788:	000235ae 	.word	0x000235ae

0001978c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1978e:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   19790:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   19792:	4e15      	ldr	r6, [pc, #84]	; (197e8 <idle+0x5c>)
	__asm__ volatile(
   19794:	f04f 0220 	mov.w	r2, #32
   19798:	f3ef 8311 	mrs	r3, BASEPRI
   1979c:	f382 8811 	msr	BASEPRI, r2
   197a0:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   197a4:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   197a6:	b188      	cbz	r0, 197cc <idle+0x40>
			cpu->pending_abort = NULL;
   197a8:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   197aa:	f383 8811 	msr	BASEPRI, r3
   197ae:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   197b2:	f000 fcc1 	bl	1a138 <z_thread_single_abort>
	__asm__ volatile(
   197b6:	f04f 0320 	mov.w	r3, #32
   197ba:	f3ef 8011 	mrs	r0, BASEPRI
   197be:	f383 8811 	msr	BASEPRI, r3
   197c2:	f3bf 8f6f 	isb	sy
   197c6:	f006 fb91 	bl	1feec <z_reschedule_irqlock>
			continue;
   197ca:	e7e3      	b.n	19794 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   197cc:	f006 fcf1 	bl	201b2 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   197d0:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   197d2:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   197d4:	2802      	cmp	r0, #2
   197d6:	bfd8      	it	le
   197d8:	4608      	movle	r0, r1
   197da:	f006 fcfa 	bl	201d2 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   197de:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   197e0:	f7f7 fe5a 	bl	11498 <arch_cpu_idle>
}
   197e4:	e7d6      	b.n	19794 <idle+0x8>
   197e6:	bf00      	nop
   197e8:	200187a0 	.word	0x200187a0

000197ec <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   197ec:	4802      	ldr	r0, [pc, #8]	; (197f8 <z_bss_zero+0xc>)
   197ee:	4a03      	ldr	r2, [pc, #12]	; (197fc <z_bss_zero+0x10>)
   197f0:	2100      	movs	r1, #0
   197f2:	1a12      	subs	r2, r2, r0
   197f4:	f006 bf2e 	b.w	20654 <memset>
   197f8:	20014938 	.word	0x20014938
   197fc:	2001c1d8 	.word	0x2001c1d8

00019800 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   19800:	2201      	movs	r2, #1
{
   19802:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   19804:	4b09      	ldr	r3, [pc, #36]	; (1982c <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   19806:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   19808:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1980a:	f7ff fef1 	bl	195f0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1980e:	f001 f807 	bl	1a820 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   19812:	2003      	movs	r0, #3
   19814:	f7ff feec 	bl	195f0 <z_sys_init_run_level>

	z_init_static_threads();
   19818:	f000 ff28 	bl	1a66c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1981c:	f006 fa24 	bl	1fc68 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   19820:	4a03      	ldr	r2, [pc, #12]	; (19830 <bg_thread_main+0x30>)
   19822:	7b13      	ldrb	r3, [r2, #12]
   19824:	f023 0301 	bic.w	r3, r3, #1
   19828:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1982a:	bd08      	pop	{r3, pc}
   1982c:	2001c1c6 	.word	0x2001c1c6
   19830:	20014f68 	.word	0x20014f68

00019834 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   19834:	b580      	push	{r7, lr}
   19836:	b0b8      	sub	sp, #224	; 0xe0
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   19838:	f7f6 fb90 	bl	ff5c <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1983c:	4b34      	ldr	r3, [pc, #208]	; (19910 <z_cstart+0xdc>)
	uint32_t msp =
   1983e:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   19842:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   19846:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1984a:	2400      	movs	r4, #0
   1984c:	23e0      	movs	r3, #224	; 0xe0
   1984e:	4d31      	ldr	r5, [pc, #196]	; (19914 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
   19850:	4e31      	ldr	r6, [pc, #196]	; (19918 <z_cstart+0xe4>)
   19852:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   19856:	77ec      	strb	r4, [r5, #31]
   19858:	762c      	strb	r4, [r5, #24]
   1985a:	766c      	strb	r4, [r5, #25]
   1985c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1985e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19860:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 19934 <z_cstart+0x100>
   19864:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   19868:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1986a:	f7f8 f893 	bl	11994 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1986e:	f7f7 fe0d 	bl	1148c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   19872:	f04f 33ff 	mov.w	r3, #4294967295
   19876:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   19878:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1987a:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1987e:	4d27      	ldr	r5, [pc, #156]	; (1991c <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   19880:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   19884:	ab06      	add	r3, sp, #24
   19886:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   19888:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1988a:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   1988e:	f7ff feaf 	bl	195f0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   19892:	2001      	movs	r0, #1
   19894:	f7ff feac 	bl	195f0 <z_sys_init_run_level>
	z_sched_init();
   19898:	f000 fda2 	bl	1a3e0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1989c:	4b20      	ldr	r3, [pc, #128]	; (19920 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   1989e:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   198a0:	9305      	str	r3, [sp, #20]
   198a2:	2303      	movs	r3, #3
   198a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   198a8:	491e      	ldr	r1, [pc, #120]	; (19924 <z_cstart+0xf0>)
   198aa:	e9cd 4303 	strd	r4, r3, [sp, #12]
   198ae:	4630      	mov	r0, r6
   198b0:	4653      	mov	r3, sl
   198b2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   198b6:	9400      	str	r4, [sp, #0]
   198b8:	f000 fe7c 	bl	1a5b4 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   198bc:	7b73      	ldrb	r3, [r6, #13]
   198be:	4680      	mov	r8, r0
   198c0:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   198c4:	4630      	mov	r0, r6
   198c6:	7373      	strb	r3, [r6, #13]
   198c8:	f006 fb52 	bl	1ff70 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   198cc:	230f      	movs	r3, #15
   198ce:	2201      	movs	r2, #1
   198d0:	4f15      	ldr	r7, [pc, #84]	; (19928 <z_cstart+0xf4>)
   198d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
   198d6:	4915      	ldr	r1, [pc, #84]	; (1992c <z_cstart+0xf8>)
   198d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   198dc:	4b14      	ldr	r3, [pc, #80]	; (19930 <z_cstart+0xfc>)
   198de:	4638      	mov	r0, r7
   198e0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   198e4:	9405      	str	r4, [sp, #20]
   198e6:	9500      	str	r5, [sp, #0]
   198e8:	f000 fe64 	bl	1a5b4 <z_setup_new_thread>
   198ec:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   198ee:	4652      	mov	r2, sl
   198f0:	f023 0304 	bic.w	r3, r3, #4
   198f4:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   198f6:	f105 031c 	add.w	r3, r5, #28
   198fa:	4641      	mov	r1, r8
   198fc:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   198fe:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   19902:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   19904:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   19906:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1990a:	f7f7 fc8f 	bl	1122c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1990e:	bf00      	nop
   19910:	2001f218 	.word	0x2001f218
   19914:	e000ed00 	.word	0xe000ed00
   19918:	20014f68 	.word	0x20014f68
   1991c:	200187a0 	.word	0x200187a0
   19920:	00023610 	.word	0x00023610
   19924:	2001e0d8 	.word	0x2001e0d8
   19928:	20014ea0 	.word	0x20014ea0
   1992c:	2001f0d8 	.word	0x2001f0d8
   19930:	0001978d 	.word	0x0001978d
   19934:	00019801 	.word	0x00019801

00019938 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   19938:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1993a:	4c06      	ldr	r4, [pc, #24]	; (19954 <statics_init+0x1c>)
   1993c:	4d06      	ldr	r5, [pc, #24]	; (19958 <statics_init+0x20>)
   1993e:	42ac      	cmp	r4, r5
   19940:	d301      	bcc.n	19946 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   19942:	2000      	movs	r0, #0
   19944:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   19946:	4620      	mov	r0, r4
   19948:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1994c:	f006 f98e 	bl	1fc6c <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   19950:	3414      	adds	r4, #20
   19952:	e7f4      	b.n	1993e <statics_init+0x6>
   19954:	20014768 	.word	0x20014768
   19958:	20014790 	.word	0x20014790

0001995c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1995c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1995e:	4b0e      	ldr	r3, [pc, #56]	; (19998 <init_mem_slab_module+0x3c>)
   19960:	4c0e      	ldr	r4, [pc, #56]	; (1999c <init_mem_slab_module+0x40>)
   19962:	42a3      	cmp	r3, r4
   19964:	d301      	bcc.n	1996a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   19966:	2000      	movs	r0, #0
	return rc;
}
   19968:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1996a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1996e:	ea41 0200 	orr.w	r2, r1, r0
   19972:	f012 0203 	ands.w	r2, r2, #3
   19976:	d10b      	bne.n	19990 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   19978:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1997a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1997c:	42aa      	cmp	r2, r5
   1997e:	d101      	bne.n	19984 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19980:	331c      	adds	r3, #28
   19982:	e7ee      	b.n	19962 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   19984:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   19986:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   19988:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   1998a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1998c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1998e:	e7f5      	b.n	1997c <init_mem_slab_module+0x20>
		return -EINVAL;
   19990:	f06f 0015 	mvn.w	r0, #21
	return rc;
   19994:	e7e8      	b.n	19968 <init_mem_slab_module+0xc>
   19996:	bf00      	nop
   19998:	20014768 	.word	0x20014768
   1999c:	20014768 	.word	0x20014768

000199a0 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   199a0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   199a2:	460c      	mov	r4, r1
   199a4:	4616      	mov	r6, r2
   199a6:	461f      	mov	r7, r3
   199a8:	f04f 0320 	mov.w	r3, #32
   199ac:	f3ef 8111 	mrs	r1, BASEPRI
   199b0:	f383 8811 	msr	BASEPRI, r3
   199b4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   199b8:	6943      	ldr	r3, [r0, #20]
   199ba:	b15b      	cbz	r3, 199d4 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   199bc:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   199be:	681b      	ldr	r3, [r3, #0]
   199c0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   199c2:	6983      	ldr	r3, [r0, #24]
   199c4:	3301      	adds	r3, #1
   199c6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   199c8:	2000      	movs	r0, #0
	__asm__ volatile(
   199ca:	f381 8811 	msr	BASEPRI, r1
   199ce:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   199d2:	e011      	b.n	199f8 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   199d4:	ea56 0207 	orrs.w	r2, r6, r7
   199d8:	d103      	bne.n	199e2 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   199da:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   199de:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   199e0:	e7f3      	b.n	199ca <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   199e2:	4602      	mov	r2, r0
   199e4:	e9cd 6700 	strd	r6, r7, [sp]
   199e8:	4804      	ldr	r0, [pc, #16]	; (199fc <k_mem_slab_alloc+0x5c>)
   199ea:	f000 fc67 	bl	1a2bc <z_pend_curr>
		if (result == 0) {
   199ee:	b918      	cbnz	r0, 199f8 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   199f0:	4b03      	ldr	r3, [pc, #12]	; (19a00 <k_mem_slab_alloc+0x60>)
   199f2:	689b      	ldr	r3, [r3, #8]
   199f4:	695b      	ldr	r3, [r3, #20]
   199f6:	6023      	str	r3, [r4, #0]
}
   199f8:	b002      	add	sp, #8
   199fa:	bdd0      	pop	{r4, r6, r7, pc}
   199fc:	2001c1c7 	.word	0x2001c1c7
   19a00:	200187a0 	.word	0x200187a0

00019a04 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   19a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19a06:	4604      	mov	r4, r0
   19a08:	460d      	mov	r5, r1
	__asm__ volatile(
   19a0a:	f04f 0320 	mov.w	r3, #32
   19a0e:	f3ef 8611 	mrs	r6, BASEPRI
   19a12:	f383 8811 	msr	BASEPRI, r3
   19a16:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   19a1a:	6947      	ldr	r7, [r0, #20]
   19a1c:	b977      	cbnz	r7, 19a3c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   19a1e:	f006 fb02 	bl	20026 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   19a22:	b158      	cbz	r0, 19a3c <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   19a24:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   19a26:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   19a2a:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   19a2c:	f006 faa0 	bl	1ff70 <z_ready_thread>
			z_reschedule(&lock, key);
   19a30:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   19a32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   19a36:	4808      	ldr	r0, [pc, #32]	; (19a58 <k_mem_slab_free+0x54>)
   19a38:	f000 b9f8 	b.w	19e2c <z_reschedule>
	**(char ***) mem = slab->free_list;
   19a3c:	682b      	ldr	r3, [r5, #0]
   19a3e:	6962      	ldr	r2, [r4, #20]
   19a40:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   19a42:	682b      	ldr	r3, [r5, #0]
   19a44:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   19a46:	69a3      	ldr	r3, [r4, #24]
   19a48:	3b01      	subs	r3, #1
   19a4a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   19a4c:	f386 8811 	msr	BASEPRI, r6
   19a50:	f3bf 8f6f 	isb	sy
}
   19a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19a56:	bf00      	nop
   19a58:	2001c1c7 	.word	0x2001c1c7

00019a5c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   19a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19a60:	4604      	mov	r4, r0
   19a62:	4616      	mov	r6, r2
   19a64:	461f      	mov	r7, r3
   19a66:	b085      	sub	sp, #20

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   19a68:	f100 0908 	add.w	r9, r0, #8
	__asm__ volatile(
   19a6c:	f04f 0320 	mov.w	r3, #32
   19a70:	f3ef 8811 	mrs	r8, BASEPRI
   19a74:	f383 8811 	msr	BASEPRI, r3
   19a78:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   19a7c:	6a02      	ldr	r2, [r0, #32]
   19a7e:	68c3      	ldr	r3, [r0, #12]
   19a80:	429a      	cmp	r2, r3
   19a82:	d22c      	bcs.n	19ade <z_impl_k_msgq_put+0x82>
   19a84:	9103      	str	r1, [sp, #12]
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   19a86:	f006 face 	bl	20026 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   19a8a:	68a2      	ldr	r2, [r4, #8]
   19a8c:	4605      	mov	r5, r0
   19a8e:	9903      	ldr	r1, [sp, #12]
   19a90:	b180      	cbz	r0, 19ab4 <z_impl_k_msgq_put+0x58>
   19a92:	2400      	movs	r4, #0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19a94:	6940      	ldr	r0, [r0, #20]
   19a96:	f006 fdd0 	bl	2063a <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   19a9a:	4628      	mov	r0, r5
   19a9c:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
   19aa0:	f006 fa66 	bl	1ff70 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   19aa4:	4648      	mov	r0, r9
   19aa6:	4641      	mov	r1, r8
   19aa8:	f000 f9c0 	bl	19e2c <z_reschedule>
			return 0;
   19aac:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   19aae:	b005      	add	sp, #20
   19ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19ab4:	69e0      	ldr	r0, [r4, #28]
   19ab6:	f006 fdc0 	bl	2063a <memcpy>
		result = 0;
   19aba:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   19abc:	69e3      	ldr	r3, [r4, #28]
   19abe:	68a2      	ldr	r2, [r4, #8]
   19ac0:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   19ac2:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   19ac4:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   19ac6:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   19ac8:	bf04      	itt	eq
   19aca:	6923      	ldreq	r3, [r4, #16]
   19acc:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   19ace:	6a23      	ldr	r3, [r4, #32]
   19ad0:	3301      	adds	r3, #1
   19ad2:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   19ad4:	f388 8811 	msr	BASEPRI, r8
   19ad8:	f3bf 8f6f 	isb	sy
	return result;
   19adc:	e7e7      	b.n	19aae <z_impl_k_msgq_put+0x52>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19ade:	ea56 0307 	orrs.w	r3, r6, r7
   19ae2:	d00a      	beq.n	19afa <z_impl_k_msgq_put+0x9e>
		_current->base.swap_data = (void *) data;
   19ae4:	4b06      	ldr	r3, [pc, #24]	; (19b00 <z_impl_k_msgq_put+0xa4>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19ae6:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
   19ae8:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19aea:	4648      	mov	r0, r9
		_current->base.swap_data = (void *) data;
   19aec:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19aee:	4641      	mov	r1, r8
   19af0:	e9cd 6700 	strd	r6, r7, [sp]
   19af4:	f000 fbe2 	bl	1a2bc <z_pend_curr>
   19af8:	e7d9      	b.n	19aae <z_impl_k_msgq_put+0x52>
		result = -ENOMSG;
   19afa:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19afe:	e7e9      	b.n	19ad4 <z_impl_k_msgq_put+0x78>
   19b00:	200187a0 	.word	0x200187a0

00019b04 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   19b04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   19b08:	4604      	mov	r4, r0
   19b0a:	4616      	mov	r6, r2
   19b0c:	4608      	mov	r0, r1
   19b0e:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   19b10:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   19b14:	f04f 0320 	mov.w	r3, #32
   19b18:	f3ef 8811 	mrs	r8, BASEPRI
   19b1c:	f383 8811 	msr	BASEPRI, r3
   19b20:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   19b24:	6a23      	ldr	r3, [r4, #32]
   19b26:	2b00      	cmp	r3, #0
   19b28:	d033      	beq.n	19b92 <z_impl_k_msgq_get+0x8e>
   19b2a:	68a2      	ldr	r2, [r4, #8]
   19b2c:	69a1      	ldr	r1, [r4, #24]
   19b2e:	f006 fd84 	bl	2063a <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   19b32:	69a3      	ldr	r3, [r4, #24]
   19b34:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   19b36:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   19b38:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   19b3a:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   19b3c:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   19b3e:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   19b40:	bf04      	itt	eq
   19b42:	6923      	ldreq	r3, [r4, #16]
   19b44:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   19b46:	6a23      	ldr	r3, [r4, #32]
   19b48:	3b01      	subs	r3, #1
   19b4a:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   19b4c:	f006 fa6b 	bl	20026 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   19b50:	4605      	mov	r5, r0
   19b52:	b370      	cbz	r0, 19bb2 <z_impl_k_msgq_get+0xae>
   19b54:	6941      	ldr	r1, [r0, #20]
   19b56:	68a2      	ldr	r2, [r4, #8]
   19b58:	69e0      	ldr	r0, [r4, #28]
   19b5a:	f006 fd6e 	bl	2063a <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   19b5e:	69e3      	ldr	r3, [r4, #28]
   19b60:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   19b62:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   19b64:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   19b66:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   19b68:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   19b6a:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   19b6c:	bf04      	itt	eq
   19b6e:	6923      	ldreq	r3, [r4, #16]
   19b70:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   19b72:	6a23      	ldr	r3, [r4, #32]
   19b74:	3301      	adds	r3, #1
   19b76:	6223      	str	r3, [r4, #32]
   19b78:	2400      	movs	r4, #0
   19b7a:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
			z_ready_thread(pending_thread);
   19b7e:	f006 f9f7 	bl	1ff70 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   19b82:	4648      	mov	r0, r9
   19b84:	4641      	mov	r1, r8
   19b86:	f000 f951 	bl	19e2c <z_reschedule>
			return 0;
   19b8a:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   19b8c:	b003      	add	sp, #12
   19b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19b92:	ea56 0307 	orrs.w	r3, r6, r7
   19b96:	d00a      	beq.n	19bae <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   19b98:	4b08      	ldr	r3, [pc, #32]	; (19bbc <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19b9a:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   19b9c:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19b9e:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   19ba0:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   19ba2:	4641      	mov	r1, r8
   19ba4:	e9cd 6700 	strd	r6, r7, [sp]
   19ba8:	f000 fb88 	bl	1a2bc <z_pend_curr>
   19bac:	e7ee      	b.n	19b8c <z_impl_k_msgq_get+0x88>
		result = -ENOMSG;
   19bae:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   19bb2:	f388 8811 	msr	BASEPRI, r8
   19bb6:	f3bf 8f6f 	isb	sy
	return result;
   19bba:	e7e7      	b.n	19b8c <z_impl_k_msgq_get+0x88>
   19bbc:	200187a0 	.word	0x200187a0

00019bc0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   19bc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19bc4:	4604      	mov	r4, r0
   19bc6:	4616      	mov	r6, r2
   19bc8:	461f      	mov	r7, r3
	__asm__ volatile(
   19bca:	f04f 0320 	mov.w	r3, #32
   19bce:	f3ef 8811 	mrs	r8, BASEPRI
   19bd2:	f383 8811 	msr	BASEPRI, r3
   19bd6:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   19bda:	68c3      	ldr	r3, [r0, #12]
   19bdc:	4a32      	ldr	r2, [pc, #200]	; (19ca8 <z_impl_k_mutex_lock+0xe8>)
   19bde:	b16b      	cbz	r3, 19bfc <z_impl_k_mutex_lock+0x3c>
   19be0:	6880      	ldr	r0, [r0, #8]
   19be2:	6891      	ldr	r1, [r2, #8]
   19be4:	4288      	cmp	r0, r1
   19be6:	d019      	beq.n	19c1c <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   19be8:	ea56 0307 	orrs.w	r3, r6, r7
   19bec:	d118      	bne.n	19c20 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   19bee:	f388 8811 	msr	BASEPRI, r8
   19bf2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   19bf6:	f06f 000f 	mvn.w	r0, #15
   19bfa:	e00c      	b.n	19c16 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   19bfc:	6891      	ldr	r1, [r2, #8]
   19bfe:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   19c02:	3301      	adds	r3, #1
   19c04:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   19c06:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   19c08:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   19c0a:	60a3      	str	r3, [r4, #8]
   19c0c:	f388 8811 	msr	BASEPRI, r8
   19c10:	f3bf 8f6f 	isb	sy
		return 0;
   19c14:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   19c16:	b002      	add	sp, #8
   19c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   19c1c:	6921      	ldr	r1, [r4, #16]
   19c1e:	e7f0      	b.n	19c02 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   19c20:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19c24:	f991 100e 	ldrsb.w	r1, [r1, #14]
   19c28:	4299      	cmp	r1, r3
   19c2a:	bfa8      	it	ge
   19c2c:	4619      	movge	r1, r3
   19c2e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   19c32:	428b      	cmp	r3, r1
   19c34:	dd2c      	ble.n	19c90 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   19c36:	f000 fb8f 	bl	1a358 <z_set_prio>
   19c3a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   19c3c:	4622      	mov	r2, r4
   19c3e:	4641      	mov	r1, r8
   19c40:	e9cd 6700 	strd	r6, r7, [sp]
   19c44:	4819      	ldr	r0, [pc, #100]	; (19cac <z_impl_k_mutex_lock+0xec>)
   19c46:	f000 fb39 	bl	1a2bc <z_pend_curr>
	if (got_mutex == 0) {
   19c4a:	2800      	cmp	r0, #0
   19c4c:	d0e3      	beq.n	19c16 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   19c4e:	f04f 0320 	mov.w	r3, #32
   19c52:	f3ef 8611 	mrs	r6, BASEPRI
   19c56:	f383 8811 	msr	BASEPRI, r3
   19c5a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   19c5e:	6823      	ldr	r3, [r4, #0]
   19c60:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19c62:	42a3      	cmp	r3, r4
   19c64:	d007      	beq.n	19c76 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   19c66:	b133      	cbz	r3, 19c76 <z_impl_k_mutex_lock+0xb6>
   19c68:	f993 300e 	ldrsb.w	r3, [r3, #14]
   19c6c:	4299      	cmp	r1, r3
   19c6e:	bfa8      	it	ge
   19c70:	4619      	movge	r1, r3
   19c72:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   19c76:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   19c78:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19c7c:	4299      	cmp	r1, r3
   19c7e:	d109      	bne.n	19c94 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   19c80:	b16d      	cbz	r5, 19c9e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   19c82:	4631      	mov	r1, r6
   19c84:	4809      	ldr	r0, [pc, #36]	; (19cac <z_impl_k_mutex_lock+0xec>)
   19c86:	f000 f8d1 	bl	19e2c <z_reschedule>
	return -EAGAIN;
   19c8a:	f06f 000a 	mvn.w	r0, #10
   19c8e:	e7c2      	b.n	19c16 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   19c90:	2500      	movs	r5, #0
   19c92:	e7d3      	b.n	19c3c <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   19c94:	f000 fb60 	bl	1a358 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   19c98:	2800      	cmp	r0, #0
   19c9a:	d1f2      	bne.n	19c82 <z_impl_k_mutex_lock+0xc2>
   19c9c:	e7f0      	b.n	19c80 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   19c9e:	f386 8811 	msr	BASEPRI, r6
   19ca2:	f3bf 8f6f 	isb	sy
   19ca6:	e7f0      	b.n	19c8a <z_impl_k_mutex_lock+0xca>
   19ca8:	200187a0 	.word	0x200187a0
   19cac:	2001c1c7 	.word	0x2001c1c7

00019cb0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   19cb0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   19cb2:	6883      	ldr	r3, [r0, #8]
{
   19cb4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   19cb6:	2b00      	cmp	r3, #0
   19cb8:	d037      	beq.n	19d2a <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   19cba:	4a1f      	ldr	r2, [pc, #124]	; (19d38 <z_impl_k_mutex_unlock+0x88>)
   19cbc:	6892      	ldr	r2, [r2, #8]
   19cbe:	4293      	cmp	r3, r2
   19cc0:	d136      	bne.n	19d30 <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   19cc2:	7bda      	ldrb	r2, [r3, #15]
   19cc4:	3a01      	subs	r2, #1
   19cc6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   19cc8:	68c3      	ldr	r3, [r0, #12]
   19cca:	2b01      	cmp	r3, #1
   19ccc:	d005      	beq.n	19cda <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   19cce:	3b01      	subs	r3, #1
   19cd0:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   19cd2:	f000 f90f 	bl	19ef4 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   19cd6:	2000      	movs	r0, #0
}
   19cd8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   19cda:	f04f 0320 	mov.w	r3, #32
   19cde:	f3ef 8511 	mrs	r5, BASEPRI
   19ce2:	f383 8811 	msr	BASEPRI, r3
   19ce6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   19cea:	6901      	ldr	r1, [r0, #16]
   19cec:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   19cee:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19cf2:	4299      	cmp	r1, r3
   19cf4:	d001      	beq.n	19cfa <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   19cf6:	f000 fb2f 	bl	1a358 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   19cfa:	4620      	mov	r0, r4
   19cfc:	f006 f993 	bl	20026 <z_unpend_first_thread>
	mutex->owner = new_owner;
   19d00:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   19d02:	b160      	cbz	r0, 19d1e <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   19d04:	f990 200e 	ldrsb.w	r2, [r0, #14]
   19d08:	6122      	str	r2, [r4, #16]
   19d0a:	2200      	movs	r2, #0
   19d0c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   19d10:	f006 f92e 	bl	1ff70 <z_ready_thread>
		z_reschedule(&lock, key);
   19d14:	4629      	mov	r1, r5
   19d16:	4809      	ldr	r0, [pc, #36]	; (19d3c <z_impl_k_mutex_unlock+0x8c>)
   19d18:	f000 f888 	bl	19e2c <z_reschedule>
   19d1c:	e7d9      	b.n	19cd2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   19d1e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   19d20:	f385 8811 	msr	BASEPRI, r5
   19d24:	f3bf 8f6f 	isb	sy
   19d28:	e7d3      	b.n	19cd2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   19d2a:	f06f 0015 	mvn.w	r0, #21
   19d2e:	e7d3      	b.n	19cd8 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   19d30:	f04f 30ff 	mov.w	r0, #4294967295
   19d34:	e7d0      	b.n	19cd8 <z_impl_k_mutex_unlock+0x28>
   19d36:	bf00      	nop
   19d38:	200187a0 	.word	0x200187a0
   19d3c:	2001c1c7 	.word	0x2001c1c7

00019d40 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   19d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19d42:	4616      	mov	r6, r2
   19d44:	461f      	mov	r7, r3
	__asm__ volatile(
   19d46:	f04f 0320 	mov.w	r3, #32
   19d4a:	f3ef 8511 	mrs	r5, BASEPRI
   19d4e:	f383 8811 	msr	BASEPRI, r3
   19d52:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   19d56:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   19d58:	b19c      	cbz	r4, 19d82 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19d5a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   19d5c:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19d5e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   19d62:	4294      	cmp	r4, r2
	list->head = node;
   19d64:	6003      	str	r3, [r0, #0]
	list->tail = node;
   19d66:	bf08      	it	eq
   19d68:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   19d6a:	2101      	movs	r1, #1
   19d6c:	4620      	mov	r0, r4
   19d6e:	f006 f871 	bl	1fe54 <z_queue_node_peek>
   19d72:	4604      	mov	r4, r0
	__asm__ volatile(
   19d74:	f385 8811 	msr	BASEPRI, r5
   19d78:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   19d7c:	4620      	mov	r0, r4
   19d7e:	b003      	add	sp, #12
   19d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19d82:	ea56 0307 	orrs.w	r3, r6, r7
   19d86:	d0f5      	beq.n	19d74 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19d88:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   19d8c:	4629      	mov	r1, r5
   19d8e:	4610      	mov	r0, r2
   19d90:	e9cd 6700 	strd	r6, r7, [sp]
   19d94:	f000 fa92 	bl	1a2bc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   19d98:	2800      	cmp	r0, #0
   19d9a:	d1ef      	bne.n	19d7c <z_impl_k_queue_get+0x3c>
   19d9c:	4b01      	ldr	r3, [pc, #4]	; (19da4 <z_impl_k_queue_get+0x64>)
   19d9e:	689b      	ldr	r3, [r3, #8]
   19da0:	695c      	ldr	r4, [r3, #20]
   19da2:	e7eb      	b.n	19d7c <z_impl_k_queue_get+0x3c>
   19da4:	200187a0 	.word	0x200187a0

00019da8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   19da8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   19daa:	4c08      	ldr	r4, [pc, #32]	; (19dcc <z_reset_time_slice+0x24>)
   19dac:	6823      	ldr	r3, [r4, #0]
   19dae:	b15b      	cbz	r3, 19dc8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   19db0:	f7f7 f98c 	bl	110cc <z_clock_elapsed>
   19db4:	6822      	ldr	r2, [r4, #0]
   19db6:	4906      	ldr	r1, [pc, #24]	; (19dd0 <z_reset_time_slice+0x28>)
   19db8:	4410      	add	r0, r2
   19dba:	6148      	str	r0, [r1, #20]
		z_set_timeout_expiry(slice_time, false);
	}
}
   19dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   19dc0:	2100      	movs	r1, #0
   19dc2:	4610      	mov	r0, r2
   19dc4:	f006 ba05 	b.w	201d2 <z_set_timeout_expiry>
}
   19dc8:	bd10      	pop	{r4, pc}
   19dca:	bf00      	nop
   19dcc:	200187e0 	.word	0x200187e0
   19dd0:	200187a0 	.word	0x200187a0

00019dd4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   19dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19dd6:	460c      	mov	r4, r1
	__asm__ volatile(
   19dd8:	f04f 0320 	mov.w	r3, #32
   19ddc:	f3ef 8511 	mrs	r5, BASEPRI
   19de0:	f383 8811 	msr	BASEPRI, r3
   19de4:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   19de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   19dec:	f240 36e7 	movw	r6, #999	; 0x3e7
   19df0:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   19df2:	2200      	movs	r2, #0
   19df4:	fbe1 6700 	umlal	r6, r7, r1, r0
   19df8:	4b09      	ldr	r3, [pc, #36]	; (19e20 <k_sched_time_slice_set+0x4c>)
   19dfa:	4630      	mov	r0, r6
   19dfc:	615a      	str	r2, [r3, #20]
   19dfe:	4639      	mov	r1, r7
   19e00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19e04:	2300      	movs	r3, #0
   19e06:	f7f2 ff11 	bl	cc2c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   19e0a:	4b06      	ldr	r3, [pc, #24]	; (19e24 <k_sched_time_slice_set+0x50>)
   19e0c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   19e0e:	4b06      	ldr	r3, [pc, #24]	; (19e28 <k_sched_time_slice_set+0x54>)
   19e10:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   19e12:	f7ff ffc9 	bl	19da8 <z_reset_time_slice>
	__asm__ volatile(
   19e16:	f385 8811 	msr	BASEPRI, r5
   19e1a:	f3bf 8f6f 	isb	sy
	}
}
   19e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19e20:	200187a0 	.word	0x200187a0
   19e24:	200187e0 	.word	0x200187e0
   19e28:	200187dc 	.word	0x200187dc

00019e2c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   19e2c:	b949      	cbnz	r1, 19e42 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   19e2e:	f3ef 8005 	mrs	r0, IPSR
   19e32:	b930      	cbnz	r0, 19e42 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   19e34:	4b05      	ldr	r3, [pc, #20]	; (19e4c <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   19e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   19e38:	689b      	ldr	r3, [r3, #8]
   19e3a:	429a      	cmp	r2, r3
   19e3c:	d001      	beq.n	19e42 <z_reschedule+0x16>
	ret = arch_swap(key);
   19e3e:	f7f7 b979 	b.w	11134 <arch_swap>
   19e42:	f381 8811 	msr	BASEPRI, r1
   19e46:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   19e4a:	4770      	bx	lr
   19e4c:	200187a0 	.word	0x200187a0

00019e50 <k_sched_lock>:
	__asm__ volatile(
   19e50:	f04f 0320 	mov.w	r3, #32
   19e54:	f3ef 8111 	mrs	r1, BASEPRI
   19e58:	f383 8811 	msr	BASEPRI, r3
   19e5c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   19e60:	4b04      	ldr	r3, [pc, #16]	; (19e74 <k_sched_lock+0x24>)
   19e62:	689a      	ldr	r2, [r3, #8]
   19e64:	7bd3      	ldrb	r3, [r2, #15]
   19e66:	3b01      	subs	r3, #1
   19e68:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   19e6a:	f381 8811 	msr	BASEPRI, r1
   19e6e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   19e72:	4770      	bx	lr
   19e74:	200187a0 	.word	0x200187a0

00019e78 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   19e78:	4b09      	ldr	r3, [pc, #36]	; (19ea0 <z_priq_dumb_remove+0x28>)
   19e7a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   19e7e:	4282      	cmp	r2, r0
   19e80:	d105      	bne.n	19e8e <z_priq_dumb_remove+0x16>
   19e82:	689b      	ldr	r3, [r3, #8]
   19e84:	428b      	cmp	r3, r1
   19e86:	d102      	bne.n	19e8e <z_priq_dumb_remove+0x16>
   19e88:	7b4b      	ldrb	r3, [r1, #13]
   19e8a:	06db      	lsls	r3, r3, #27
   19e8c:	d106      	bne.n	19e9c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   19e8e:	e9d1 3200 	ldrd	r3, r2, [r1]
   19e92:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   19e94:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19e96:	2300      	movs	r3, #0
	node->prev = NULL;
   19e98:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   19e9c:	4770      	bx	lr
   19e9e:	bf00      	nop
   19ea0:	200187a0 	.word	0x200187a0

00019ea4 <update_cache>:
{
   19ea4:	b538      	push	{r3, r4, r5, lr}
   19ea6:	4c12      	ldr	r4, [pc, #72]	; (19ef0 <update_cache+0x4c>)
   19ea8:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   19eaa:	6923      	ldr	r3, [r4, #16]
   19eac:	68a2      	ldr	r2, [r4, #8]
   19eae:	b10b      	cbz	r3, 19eb4 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   19eb0:	68e5      	ldr	r5, [r4, #12]
   19eb2:	e00c      	b.n	19ece <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   19eb4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   19eb8:	f006 f850 	bl	1ff5c <z_priq_dumb_best>
   19ebc:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   19ebe:	7b53      	ldrb	r3, [r2, #13]
   19ec0:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   19ec2:	bf44      	itt	mi
   19ec4:	f043 0308 	orrmi.w	r3, r3, #8
   19ec8:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   19eca:	2d00      	cmp	r5, #0
   19ecc:	d0f0      	beq.n	19eb0 <update_cache+0xc>
	if (preempt_ok != 0) {
   19ece:	b949      	cbnz	r1, 19ee4 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   19ed0:	7b53      	ldrb	r3, [r2, #13]
   19ed2:	06db      	lsls	r3, r3, #27
   19ed4:	d106      	bne.n	19ee4 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   19ed6:	69ab      	ldr	r3, [r5, #24]
   19ed8:	b923      	cbnz	r3, 19ee4 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   19eda:	89d3      	ldrh	r3, [r2, #14]
   19edc:	2b7f      	cmp	r3, #127	; 0x7f
   19ede:	d901      	bls.n	19ee4 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   19ee0:	62a2      	str	r2, [r4, #40]	; 0x28
}
   19ee2:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   19ee4:	4295      	cmp	r5, r2
   19ee6:	d001      	beq.n	19eec <update_cache+0x48>
			z_reset_time_slice();
   19ee8:	f7ff ff5e 	bl	19da8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   19eec:	62a5      	str	r5, [r4, #40]	; 0x28
}
   19eee:	e7f8      	b.n	19ee2 <update_cache+0x3e>
   19ef0:	200187a0 	.word	0x200187a0

00019ef4 <k_sched_unlock>:
{
   19ef4:	b510      	push	{r4, lr}
	__asm__ volatile(
   19ef6:	f04f 0320 	mov.w	r3, #32
   19efa:	f3ef 8411 	mrs	r4, BASEPRI
   19efe:	f383 8811 	msr	BASEPRI, r3
   19f02:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   19f06:	4b08      	ldr	r3, [pc, #32]	; (19f28 <k_sched_unlock+0x34>)
		update_cache(0);
   19f08:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   19f0a:	689a      	ldr	r2, [r3, #8]
   19f0c:	7bd3      	ldrb	r3, [r2, #15]
   19f0e:	3301      	adds	r3, #1
   19f10:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   19f12:	f7ff ffc7 	bl	19ea4 <update_cache>
	__asm__ volatile(
   19f16:	f384 8811 	msr	BASEPRI, r4
   19f1a:	f3bf 8f6f 	isb	sy
}
   19f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   19f22:	f005 bfef 	b.w	1ff04 <z_reschedule_unlocked>
   19f26:	bf00      	nop
   19f28:	200187a0 	.word	0x200187a0

00019f2c <ready_thread>:
{
   19f2c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   19f2e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   19f32:	7b43      	ldrb	r3, [r0, #13]
   19f34:	2a00      	cmp	r2, #0
   19f36:	db2c      	blt.n	19f92 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19f38:	06db      	lsls	r3, r3, #27
   19f3a:	d12a      	bne.n	19f92 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   19f3c:	6983      	ldr	r3, [r0, #24]
   19f3e:	bb43      	cbnz	r3, 19f92 <ready_thread+0x66>
	return list->head == list;
   19f40:	4a15      	ldr	r2, [pc, #84]	; (19f98 <ready_thread+0x6c>)
   19f42:	4611      	mov	r1, r2
   19f44:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19f48:	428c      	cmp	r4, r1
   19f4a:	bf18      	it	ne
   19f4c:	4623      	movne	r3, r4
   19f4e:	2b00      	cmp	r3, #0
   19f50:	bf38      	it	cc
   19f52:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19f54:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19f56:	b1b3      	cbz	r3, 19f86 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   19f58:	f990 600e 	ldrsb.w	r6, [r0, #14]
   19f5c:	f993 500e 	ldrsb.w	r5, [r3, #14]
   19f60:	42ae      	cmp	r6, r5
   19f62:	db03      	blt.n	19f6c <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   19f64:	42a3      	cmp	r3, r4
   19f66:	d00e      	beq.n	19f86 <ready_thread+0x5a>
   19f68:	681b      	ldr	r3, [r3, #0]
   19f6a:	e7f4      	b.n	19f56 <ready_thread+0x2a>
	node->prev = successor->prev;
   19f6c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19f6e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   19f72:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   19f74:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   19f76:	7b43      	ldrb	r3, [r0, #13]
   19f78:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19f7c:	7343      	strb	r3, [r0, #13]
}
   19f7e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   19f80:	2000      	movs	r0, #0
   19f82:	f7ff bf8f 	b.w	19ea4 <update_cache>
	node->prev = list->tail;
   19f86:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   19f8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   19f8c:	6018      	str	r0, [r3, #0]
	list->tail = node;
   19f8e:	6310      	str	r0, [r2, #48]	; 0x30
}
   19f90:	e7f1      	b.n	19f76 <ready_thread+0x4a>
}
   19f92:	bc70      	pop	{r4, r5, r6}
   19f94:	4770      	bx	lr
   19f96:	bf00      	nop
   19f98:	200187a0 	.word	0x200187a0

00019f9c <z_sched_start>:
{
   19f9c:	b510      	push	{r4, lr}
	__asm__ volatile(
   19f9e:	f04f 0220 	mov.w	r2, #32
   19fa2:	f3ef 8411 	mrs	r4, BASEPRI
   19fa6:	f382 8811 	msr	BASEPRI, r2
   19faa:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   19fae:	7b42      	ldrb	r2, [r0, #13]
   19fb0:	0751      	lsls	r1, r2, #29
   19fb2:	d404      	bmi.n	19fbe <z_sched_start+0x22>
	__asm__ volatile(
   19fb4:	f384 8811 	msr	BASEPRI, r4
   19fb8:	f3bf 8f6f 	isb	sy
}
   19fbc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19fbe:	f022 0204 	bic.w	r2, r2, #4
   19fc2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   19fc4:	f7ff ffb2 	bl	19f2c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   19fc8:	4621      	mov	r1, r4
}
   19fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   19fce:	4801      	ldr	r0, [pc, #4]	; (19fd4 <z_sched_start+0x38>)
   19fd0:	f7ff bf2c 	b.w	19e2c <z_reschedule>
   19fd4:	2001c1c7 	.word	0x2001c1c7

00019fd8 <move_thread_to_end_of_prio_q>:
{
   19fd8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   19fda:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   19fde:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   19fe0:	2b00      	cmp	r3, #0
   19fe2:	da02      	bge.n	19fea <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   19fe4:	4817      	ldr	r0, [pc, #92]	; (1a044 <move_thread_to_end_of_prio_q+0x6c>)
   19fe6:	f7ff ff47 	bl	19e78 <z_priq_dumb_remove>
	return list->head == list;
   19fea:	4a17      	ldr	r2, [pc, #92]	; (1a048 <move_thread_to_end_of_prio_q+0x70>)
   19fec:	4610      	mov	r0, r2
   19fee:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19ff2:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19ff4:	4283      	cmp	r3, r0
   19ff6:	bf08      	it	eq
   19ff8:	2300      	moveq	r3, #0
   19ffa:	2b00      	cmp	r3, #0
   19ffc:	bf38      	it	cc
   19ffe:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a000:	b1d3      	cbz	r3, 1a038 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   1a002:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1a006:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1a00a:	42ae      	cmp	r6, r5
   1a00c:	db03      	blt.n	1a016 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1a00e:	42a3      	cmp	r3, r4
   1a010:	d012      	beq.n	1a038 <move_thread_to_end_of_prio_q+0x60>
   1a012:	681b      	ldr	r3, [r3, #0]
   1a014:	e7f4      	b.n	1a000 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1a016:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1a018:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1a01c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1a01e:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1a020:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1a022:	6890      	ldr	r0, [r2, #8]
   1a024:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a028:	734b      	strb	r3, [r1, #13]
   1a02a:	1a43      	subs	r3, r0, r1
   1a02c:	4258      	negs	r0, r3
   1a02e:	4158      	adcs	r0, r3
}
   1a030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1a034:	f7ff bf36 	b.w	19ea4 <update_cache>
	node->prev = list->tail;
   1a038:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   1a03c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1a03e:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1a040:	6311      	str	r1, [r2, #48]	; 0x30
}
   1a042:	e7ed      	b.n	1a020 <move_thread_to_end_of_prio_q+0x48>
   1a044:	200187cc 	.word	0x200187cc
   1a048:	200187a0 	.word	0x200187a0

0001a04c <z_time_slice>:
{
   1a04c:	4601      	mov	r1, r0
   1a04e:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   1a050:	f04f 0320 	mov.w	r3, #32
   1a054:	f3ef 8411 	mrs	r4, BASEPRI
   1a058:	f383 8811 	msr	BASEPRI, r3
   1a05c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1a060:	4b16      	ldr	r3, [pc, #88]	; (1a0bc <z_time_slice+0x70>)
   1a062:	4a17      	ldr	r2, [pc, #92]	; (1a0c0 <z_time_slice+0x74>)
   1a064:	6898      	ldr	r0, [r3, #8]
   1a066:	6815      	ldr	r5, [r2, #0]
   1a068:	42a8      	cmp	r0, r5
   1a06a:	461d      	mov	r5, r3
   1a06c:	d106      	bne.n	1a07c <z_time_slice+0x30>
			z_reset_time_slice();
   1a06e:	f7ff fe9b 	bl	19da8 <z_reset_time_slice>
	__asm__ volatile(
   1a072:	f384 8811 	msr	BASEPRI, r4
   1a076:	f3bf 8f6f 	isb	sy
}
   1a07a:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1a07c:	2600      	movs	r6, #0
   1a07e:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1a080:	4a10      	ldr	r2, [pc, #64]	; (1a0c4 <z_time_slice+0x78>)
   1a082:	6812      	ldr	r2, [r2, #0]
   1a084:	b1ba      	cbz	r2, 1a0b6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1a086:	89c2      	ldrh	r2, [r0, #14]
   1a088:	2a7f      	cmp	r2, #127	; 0x7f
   1a08a:	d814      	bhi.n	1a0b6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1a08c:	7b42      	ldrb	r2, [r0, #13]
   1a08e:	06d2      	lsls	r2, r2, #27
   1a090:	d111      	bne.n	1a0b6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1a092:	4a0d      	ldr	r2, [pc, #52]	; (1a0c8 <z_time_slice+0x7c>)
   1a094:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1a098:	6812      	ldr	r2, [r2, #0]
   1a09a:	4296      	cmp	r6, r2
   1a09c:	db0b      	blt.n	1a0b6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1a09e:	4a0b      	ldr	r2, [pc, #44]	; (1a0cc <z_time_slice+0x80>)
   1a0a0:	4290      	cmp	r0, r2
   1a0a2:	d008      	beq.n	1a0b6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1a0a4:	695a      	ldr	r2, [r3, #20]
   1a0a6:	428a      	cmp	r2, r1
   1a0a8:	dc02      	bgt.n	1a0b0 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1a0aa:	f7ff ff95 	bl	19fd8 <move_thread_to_end_of_prio_q>
   1a0ae:	e7de      	b.n	1a06e <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1a0b0:	1a52      	subs	r2, r2, r1
   1a0b2:	615a      	str	r2, [r3, #20]
   1a0b4:	e7dd      	b.n	1a072 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1a0b6:	2300      	movs	r3, #0
   1a0b8:	616b      	str	r3, [r5, #20]
   1a0ba:	e7da      	b.n	1a072 <z_time_slice+0x26>
   1a0bc:	200187a0 	.word	0x200187a0
   1a0c0:	200187d8 	.word	0x200187d8
   1a0c4:	200187e0 	.word	0x200187e0
   1a0c8:	200187dc 	.word	0x200187dc
   1a0cc:	20014ea0 	.word	0x20014ea0

0001a0d0 <z_impl_k_thread_suspend>:
{
   1a0d0:	b570      	push	{r4, r5, r6, lr}
   1a0d2:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1a0d4:	3018      	adds	r0, #24
   1a0d6:	f006 f856 	bl	20186 <z_abort_timeout>
	__asm__ volatile(
   1a0da:	f04f 0320 	mov.w	r3, #32
   1a0de:	f3ef 8611 	mrs	r6, BASEPRI
   1a0e2:	f383 8811 	msr	BASEPRI, r3
   1a0e6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1a0ea:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1a0ee:	2b00      	cmp	r3, #0
   1a0f0:	da07      	bge.n	1a102 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1a0f2:	4621      	mov	r1, r4
   1a0f4:	480e      	ldr	r0, [pc, #56]	; (1a130 <z_impl_k_thread_suspend+0x60>)
   1a0f6:	f7ff febf 	bl	19e78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1a0fa:	7b63      	ldrb	r3, [r4, #13]
   1a0fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a100:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1a102:	4d0c      	ldr	r5, [pc, #48]	; (1a134 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a104:	7b63      	ldrb	r3, [r4, #13]
   1a106:	68a8      	ldr	r0, [r5, #8]
   1a108:	f043 0310 	orr.w	r3, r3, #16
   1a10c:	7363      	strb	r3, [r4, #13]
   1a10e:	1b03      	subs	r3, r0, r4
   1a110:	4258      	negs	r0, r3
   1a112:	4158      	adcs	r0, r3
   1a114:	f7ff fec6 	bl	19ea4 <update_cache>
	__asm__ volatile(
   1a118:	f386 8811 	msr	BASEPRI, r6
   1a11c:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1a120:	68ab      	ldr	r3, [r5, #8]
   1a122:	42a3      	cmp	r3, r4
   1a124:	d103      	bne.n	1a12e <z_impl_k_thread_suspend+0x5e>
}
   1a126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1a12a:	f005 beeb 	b.w	1ff04 <z_reschedule_unlocked>
}
   1a12e:	bd70      	pop	{r4, r5, r6, pc}
   1a130:	200187cc 	.word	0x200187cc
   1a134:	200187a0 	.word	0x200187a0

0001a138 <z_thread_single_abort>:
{
   1a138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a13c:	4604      	mov	r4, r0
	__asm__ volatile(
   1a13e:	f04f 0320 	mov.w	r3, #32
   1a142:	f3ef 8211 	mrs	r2, BASEPRI
   1a146:	f383 8811 	msr	BASEPRI, r3
   1a14a:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   1a14e:	7b43      	ldrb	r3, [r0, #13]
   1a150:	f013 0f28 	tst.w	r3, #40	; 0x28
   1a154:	d005      	beq.n	1a162 <z_thread_single_abort+0x2a>
	__asm__ volatile(
   1a156:	f382 8811 	msr	BASEPRI, r2
   1a15a:	f3bf 8f6f 	isb	sy
}
   1a15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1a162:	f043 0320 	orr.w	r3, r3, #32
   1a166:	7343      	strb	r3, [r0, #13]
   1a168:	f382 8811 	msr	BASEPRI, r2
   1a16c:	f3bf 8f6f 	isb	sy
   1a170:	3018      	adds	r0, #24
   1a172:	f006 f808 	bl	20186 <z_abort_timeout>
	__asm__ volatile(
   1a176:	f04f 0320 	mov.w	r3, #32
   1a17a:	f3ef 8611 	mrs	r6, BASEPRI
   1a17e:	f383 8811 	msr	BASEPRI, r3
   1a182:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1a186:	7b63      	ldrb	r3, [r4, #13]
   1a188:	06d8      	lsls	r0, r3, #27
   1a18a:	d116      	bne.n	1a1ba <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   1a18c:	69a2      	ldr	r2, [r4, #24]
   1a18e:	b9a2      	cbnz	r2, 1a1ba <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   1a190:	0619      	lsls	r1, r3, #24
   1a192:	d507      	bpl.n	1a1a4 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   1a194:	4621      	mov	r1, r4
   1a196:	4826      	ldr	r0, [pc, #152]	; (1a230 <z_thread_single_abort+0xf8>)
   1a198:	f7ff fe6e 	bl	19e78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1a19c:	7b63      	ldrb	r3, [r4, #13]
   1a19e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a1a2:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1a1a4:	4b23      	ldr	r3, [pc, #140]	; (1a234 <z_thread_single_abort+0xfc>)
   1a1a6:	6898      	ldr	r0, [r3, #8]
   1a1a8:	1b02      	subs	r2, r0, r4
   1a1aa:	4250      	negs	r0, r2
   1a1ac:	4150      	adcs	r0, r2
   1a1ae:	f7ff fe79 	bl	19ea4 <update_cache>
			waiter->base.pended_on = NULL;
   1a1b2:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1a1b4:	f104 0830 	add.w	r8, r4, #48	; 0x30
   1a1b8:	e01e      	b.n	1a1f8 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   1a1ba:	079b      	lsls	r3, r3, #30
   1a1bc:	d5f9      	bpl.n	1a1b2 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1a1be:	4621      	mov	r1, r4
   1a1c0:	68a0      	ldr	r0, [r4, #8]
   1a1c2:	f7ff fe59 	bl	19e78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1a1c6:	7b63      	ldrb	r3, [r4, #13]
   1a1c8:	f023 0302 	bic.w	r3, r3, #2
   1a1cc:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1a1ce:	2300      	movs	r3, #0
   1a1d0:	60a3      	str	r3, [r4, #8]
   1a1d2:	e7ee      	b.n	1a1b2 <z_thread_single_abort+0x7a>
   1a1d4:	f105 0018 	add.w	r0, r5, #24
   1a1d8:	f005 ffd5 	bl	20186 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1a1dc:	68a8      	ldr	r0, [r5, #8]
   1a1de:	4629      	mov	r1, r5
   1a1e0:	f7ff fe4a 	bl	19e78 <z_priq_dumb_remove>
   1a1e4:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1a1e6:	4628      	mov	r0, r5
   1a1e8:	f023 0302 	bic.w	r3, r3, #2
   1a1ec:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1a1ee:	60af      	str	r7, [r5, #8]
   1a1f0:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   1a1f4:	f7ff fe9a 	bl	19f2c <ready_thread>
	return list->head == list;
   1a1f8:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a1fa:	4545      	cmp	r5, r8
   1a1fc:	d001      	beq.n	1a202 <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1a1fe:	2d00      	cmp	r5, #0
   1a200:	d1e8      	bne.n	1a1d4 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   1a202:	4b0c      	ldr	r3, [pc, #48]	; (1a234 <z_thread_single_abort+0xfc>)
   1a204:	689a      	ldr	r2, [r3, #8]
   1a206:	4b0c      	ldr	r3, [pc, #48]	; (1a238 <z_thread_single_abort+0x100>)
   1a208:	429a      	cmp	r2, r3
   1a20a:	d102      	bne.n	1a212 <z_thread_single_abort+0xda>
			update_cache(1);
   1a20c:	2001      	movs	r0, #1
   1a20e:	f7ff fe49 	bl	19ea4 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   1a212:	7b63      	ldrb	r3, [r4, #13]
   1a214:	f043 0308 	orr.w	r3, r3, #8
   1a218:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1a21a:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   1a21c:	f386 8811 	msr	BASEPRI, r6
   1a220:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1a224:	2b00      	cmp	r3, #0
   1a226:	d09a      	beq.n	1a15e <z_thread_single_abort+0x26>
		fn_abort(thread);
   1a228:	4620      	mov	r0, r4
}
   1a22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   1a22e:	4718      	bx	r3
   1a230:	200187cc 	.word	0x200187cc
   1a234:	200187a0 	.word	0x200187a0
   1a238:	20014ea0 	.word	0x20014ea0

0001a23c <unready_thread>:
{
   1a23c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1a23e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1a242:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1a244:	2b00      	cmp	r3, #0
   1a246:	da06      	bge.n	1a256 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1a248:	4807      	ldr	r0, [pc, #28]	; (1a268 <unready_thread+0x2c>)
   1a24a:	f7ff fe15 	bl	19e78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1a24e:	7b4b      	ldrb	r3, [r1, #13]
   1a250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a254:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1a256:	4b05      	ldr	r3, [pc, #20]	; (1a26c <unready_thread+0x30>)
   1a258:	6898      	ldr	r0, [r3, #8]
   1a25a:	1a43      	subs	r3, r0, r1
   1a25c:	4258      	negs	r0, r3
   1a25e:	4158      	adcs	r0, r3
}
   1a260:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1a264:	f7ff be1e 	b.w	19ea4 <update_cache>
   1a268:	200187cc 	.word	0x200187cc
   1a26c:	200187a0 	.word	0x200187a0

0001a270 <pend>:
{
   1a270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a274:	4606      	mov	r6, r0
   1a276:	4614      	mov	r4, r2
   1a278:	461d      	mov	r5, r3
	__asm__ volatile(
   1a27a:	f04f 0320 	mov.w	r3, #32
   1a27e:	f3ef 8711 	mrs	r7, BASEPRI
   1a282:	f383 8811 	msr	BASEPRI, r3
   1a286:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1a28a:	f005 fea1 	bl	1ffd0 <add_to_waitq_locked>
	__asm__ volatile(
   1a28e:	f387 8811 	msr	BASEPRI, r7
   1a292:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a296:	1c6b      	adds	r3, r5, #1
   1a298:	bf08      	it	eq
   1a29a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1a29e:	d008      	beq.n	1a2b2 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1a2a0:	4622      	mov	r2, r4
   1a2a2:	462b      	mov	r3, r5
   1a2a4:	f106 0018 	add.w	r0, r6, #24
   1a2a8:	4903      	ldr	r1, [pc, #12]	; (1a2b8 <pend+0x48>)
}
   1a2aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a2ae:	f000 bb2d 	b.w	1a90c <z_add_timeout>
   1a2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a2b6:	bf00      	nop
   1a2b8:	0001ff91 	.word	0x0001ff91

0001a2bc <z_pend_curr>:
{
   1a2bc:	b510      	push	{r4, lr}
   1a2be:	460c      	mov	r4, r1
	pending_current = _current;
   1a2c0:	4b06      	ldr	r3, [pc, #24]	; (1a2dc <z_pend_curr+0x20>)
{
   1a2c2:	4611      	mov	r1, r2
	pending_current = _current;
   1a2c4:	6898      	ldr	r0, [r3, #8]
   1a2c6:	4b06      	ldr	r3, [pc, #24]	; (1a2e0 <z_pend_curr+0x24>)
   1a2c8:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1a2ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a2ce:	f7ff ffcf 	bl	1a270 <pend>
   1a2d2:	4620      	mov	r0, r4
}
   1a2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a2d8:	f7f6 bf2c 	b.w	11134 <arch_swap>
   1a2dc:	200187a0 	.word	0x200187a0
   1a2e0:	200187d8 	.word	0x200187d8

0001a2e4 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   1a2e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a2e6:	4605      	mov	r5, r0
   1a2e8:	9101      	str	r1, [sp, #4]
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
   1a2ea:	f005 ff8d 	bl	20208 <z_tick_get_32>
   1a2ee:	4604      	mov	r4, r0
	__asm__ volatile(
   1a2f0:	f04f 0220 	mov.w	r2, #32
   1a2f4:	f3ef 8711 	mrs	r7, BASEPRI
   1a2f8:	f382 8811 	msr	BASEPRI, r2
   1a2fc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1a300:	4e12      	ldr	r6, [pc, #72]	; (1a34c <z_tick_sleep.part.0+0x68>)
   1a302:	4a13      	ldr	r2, [pc, #76]	; (1a350 <z_tick_sleep.part.0+0x6c>)
   1a304:	68b0      	ldr	r0, [r6, #8]
   1a306:	6010      	str	r0, [r2, #0]
#endif
	unready_thread(_current);
   1a308:	f7ff ff98 	bl	1a23c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1a30c:	68b0      	ldr	r0, [r6, #8]
   1a30e:	4911      	ldr	r1, [pc, #68]	; (1a354 <z_tick_sleep.part.0+0x70>)
   1a310:	462a      	mov	r2, r5
   1a312:	9b01      	ldr	r3, [sp, #4]
   1a314:	3018      	adds	r0, #24
   1a316:	f000 faf9 	bl	1a90c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1a31a:	68b2      	ldr	r2, [r6, #8]
   1a31c:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a31e:	7b53      	ldrb	r3, [r2, #13]
   1a320:	f043 0310 	orr.w	r3, r3, #16
   1a324:	7353      	strb	r3, [r2, #13]
   1a326:	f7f6 ff05 	bl	11134 <arch_swap>
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1a32a:	1960      	adds	r0, r4, r5

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1a32c:	4604      	mov	r4, r0
   1a32e:	f005 ff6b 	bl	20208 <z_tick_get_32>
   1a332:	2500      	movs	r5, #0
   1a334:	1a24      	subs	r4, r4, r0
   1a336:	f165 0500 	sbc.w	r5, r5, #0
   1a33a:	2c00      	cmp	r4, #0
   1a33c:	f175 0300 	sbcs.w	r3, r5, #0
   1a340:	bfb8      	it	lt
   1a342:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   1a344:	4620      	mov	r0, r4
   1a346:	b003      	add	sp, #12
   1a348:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a34a:	bf00      	nop
   1a34c:	200187a0 	.word	0x200187a0
   1a350:	200187d8 	.word	0x200187d8
   1a354:	0001ff91 	.word	0x0001ff91

0001a358 <z_set_prio>:
{
   1a358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a35c:	4604      	mov	r4, r0
   1a35e:	f04f 0320 	mov.w	r3, #32
   1a362:	f3ef 8811 	mrs	r8, BASEPRI
   1a366:	f383 8811 	msr	BASEPRI, r3
   1a36a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1a36e:	7b43      	ldrb	r3, [r0, #13]
   1a370:	b24e      	sxtb	r6, r1
   1a372:	06db      	lsls	r3, r3, #27
   1a374:	d12e      	bne.n	1a3d4 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1a376:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1a378:	bb65      	cbnz	r5, 1a3d4 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1a37a:	4f18      	ldr	r7, [pc, #96]	; (1a3dc <z_set_prio+0x84>)
   1a37c:	4621      	mov	r1, r4
   1a37e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1a382:	f7ff fd79 	bl	19e78 <z_priq_dumb_remove>
	return list->head == list;
   1a386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a38a:	4283      	cmp	r3, r0
   1a38c:	bf18      	it	ne
   1a38e:	461d      	movne	r5, r3
   1a390:	2d00      	cmp	r5, #0
   1a392:	bf38      	it	cc
   1a394:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   1a396:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a398:	b1b5      	cbz	r5, 1a3c8 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1a39a:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1a39e:	42b1      	cmp	r1, r6
   1a3a0:	dc03      	bgt.n	1a3aa <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   1a3a2:	42aa      	cmp	r2, r5
   1a3a4:	d010      	beq.n	1a3c8 <z_set_prio+0x70>
   1a3a6:	682d      	ldr	r5, [r5, #0]
   1a3a8:	e7f6      	b.n	1a398 <z_set_prio+0x40>
	node->prev = successor->prev;
   1a3aa:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   1a3ac:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   1a3b0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1a3b2:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1a3b4:	2001      	movs	r0, #1
   1a3b6:	f7ff fd75 	bl	19ea4 <update_cache>
   1a3ba:	2001      	movs	r0, #1
	__asm__ volatile(
   1a3bc:	f388 8811 	msr	BASEPRI, r8
   1a3c0:	f3bf 8f6f 	isb	sy
}
   1a3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1a3c8:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   1a3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a3ce:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a3d0:	633c      	str	r4, [r7, #48]	; 0x30
}
   1a3d2:	e7ef      	b.n	1a3b4 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1a3d4:	2000      	movs	r0, #0
   1a3d6:	73a6      	strb	r6, [r4, #14]
   1a3d8:	e7f0      	b.n	1a3bc <z_set_prio+0x64>
   1a3da:	bf00      	nop
   1a3dc:	200187a0 	.word	0x200187a0

0001a3e0 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1a3e0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1a3e2:	4b04      	ldr	r3, [pc, #16]	; (1a3f4 <z_sched_init+0x14>)
   1a3e4:	4608      	mov	r0, r1
   1a3e6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1a3ea:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1a3ee:	f7ff bcf1 	b.w	19dd4 <k_sched_time_slice_set>
   1a3f2:	bf00      	nop
   1a3f4:	200187a0 	.word	0x200187a0

0001a3f8 <z_impl_k_yield>:
{
   1a3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1a3fa:	4c24      	ldr	r4, [pc, #144]	; (1a48c <z_impl_k_yield+0x94>)
   1a3fc:	4b24      	ldr	r3, [pc, #144]	; (1a490 <z_impl_k_yield+0x98>)
   1a3fe:	68a2      	ldr	r2, [r4, #8]
   1a400:	429a      	cmp	r2, r3
   1a402:	d030      	beq.n	1a466 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   1a404:	f04f 0320 	mov.w	r3, #32
   1a408:	f3ef 8511 	mrs	r5, BASEPRI
   1a40c:	f383 8811 	msr	BASEPRI, r3
   1a410:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1a414:	68a1      	ldr	r1, [r4, #8]
   1a416:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1a41a:	f7ff fd2d 	bl	19e78 <z_priq_dumb_remove>
	return list->head == list;
   1a41e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1a420:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a422:	4283      	cmp	r3, r0
   1a424:	bf08      	it	eq
   1a426:	2300      	moveq	r3, #0
   1a428:	2b00      	cmp	r3, #0
   1a42a:	bf38      	it	cc
   1a42c:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a42e:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a430:	b32b      	cbz	r3, 1a47e <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1a432:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1a436:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1a43a:	42b7      	cmp	r7, r6
   1a43c:	db03      	blt.n	1a446 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1a43e:	428b      	cmp	r3, r1
   1a440:	d01d      	beq.n	1a47e <z_impl_k_yield+0x86>
   1a442:	681b      	ldr	r3, [r3, #0]
   1a444:	e7f4      	b.n	1a430 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1a446:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1a448:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1a44c:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1a44e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1a450:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   1a452:	2001      	movs	r0, #1
   1a454:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a458:	7353      	strb	r3, [r2, #13]
   1a45a:	f7ff fd23 	bl	19ea4 <update_cache>
	__asm__ volatile(
   1a45e:	f385 8811 	msr	BASEPRI, r5
   1a462:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a466:	f04f 0320 	mov.w	r3, #32
   1a46a:	f3ef 8011 	mrs	r0, BASEPRI
   1a46e:	f383 8811 	msr	BASEPRI, r3
   1a472:	f3bf 8f6f 	isb	sy
}
   1a476:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a47a:	f7f6 be5b 	b.w	11134 <arch_swap>
	node->prev = list->tail;
   1a47e:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1a482:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a484:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1a486:	6322      	str	r2, [r4, #48]	; 0x30
}
   1a488:	e7e2      	b.n	1a450 <z_impl_k_yield+0x58>
   1a48a:	bf00      	nop
   1a48c:	200187a0 	.word	0x200187a0
   1a490:	20014ea0 	.word	0x20014ea0

0001a494 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a494:	f1b1 3fff 	cmp.w	r1, #4294967295
   1a498:	bf08      	it	eq
   1a49a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1a49e:	b508      	push	{r3, lr}
   1a4a0:	4602      	mov	r2, r0
   1a4a2:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a4a4:	d106      	bne.n	1a4b4 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   1a4a6:	4b0b      	ldr	r3, [pc, #44]	; (1a4d4 <z_impl_k_sleep+0x40>)
   1a4a8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1a4aa:	f7ff fe11 	bl	1a0d0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1a4ae:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1a4b2:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   1a4b4:	4313      	orrs	r3, r2
   1a4b6:	d10a      	bne.n	1a4ce <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   1a4b8:	f7ff ff9e 	bl	1a3f8 <z_impl_k_yield>
		return 0;
   1a4bc:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   1a4be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a4c2:	fb80 2303 	smull	r2, r3, r0, r3
   1a4c6:	0bd0      	lsrs	r0, r2, #15
   1a4c8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1a4cc:	e7f1      	b.n	1a4b2 <z_impl_k_sleep+0x1e>
   1a4ce:	f7ff ff09 	bl	1a2e4 <z_tick_sleep.part.0>
   1a4d2:	e7f4      	b.n	1a4be <z_impl_k_sleep+0x2a>
   1a4d4:	200187a0 	.word	0x200187a0

0001a4d8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1a4d8:	4b01      	ldr	r3, [pc, #4]	; (1a4e0 <z_impl_k_current_get+0x8>)
   1a4da:	6898      	ldr	r0, [r3, #8]
   1a4dc:	4770      	bx	lr
   1a4de:	bf00      	nop
   1a4e0:	200187a0 	.word	0x200187a0

0001a4e4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1a4e4:	b538      	push	{r3, r4, r5, lr}
   1a4e6:	4604      	mov	r4, r0
   1a4e8:	f04f 0320 	mov.w	r3, #32
   1a4ec:	f3ef 8511 	mrs	r5, BASEPRI
   1a4f0:	f383 8811 	msr	BASEPRI, r3
   1a4f4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1a4f8:	f005 fd95 	bl	20026 <z_unpend_first_thread>

	if (thread != NULL) {
   1a4fc:	b150      	cbz	r0, 1a514 <z_impl_k_sem_give+0x30>
   1a4fe:	2200      	movs	r2, #0
   1a500:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1a504:	f005 fd34 	bl	1ff70 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1a508:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1a50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1a50e:	4807      	ldr	r0, [pc, #28]	; (1a52c <z_impl_k_sem_give+0x48>)
   1a510:	f7ff bc8c 	b.w	19e2c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1a514:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1a518:	429a      	cmp	r2, r3
   1a51a:	bf18      	it	ne
   1a51c:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1a51e:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1a520:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1a522:	f104 0010 	add.w	r0, r4, #16
   1a526:	f005 ffff 	bl	20528 <z_handle_obj_poll_events>
}
   1a52a:	e7ed      	b.n	1a508 <z_impl_k_sem_give+0x24>
   1a52c:	2001c1c7 	.word	0x2001c1c7

0001a530 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1a530:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a532:	4614      	mov	r4, r2
   1a534:	461d      	mov	r5, r3
   1a536:	f04f 0320 	mov.w	r3, #32
   1a53a:	f3ef 8111 	mrs	r1, BASEPRI
   1a53e:	f383 8811 	msr	BASEPRI, r3
   1a542:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1a546:	6883      	ldr	r3, [r0, #8]
   1a548:	b143      	cbz	r3, 1a55c <z_impl_k_sem_take+0x2c>
		sem->count--;
   1a54a:	3b01      	subs	r3, #1
   1a54c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1a54e:	f381 8811 	msr	BASEPRI, r1
   1a552:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1a556:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1a558:	b003      	add	sp, #12
   1a55a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a55c:	ea54 0305 	orrs.w	r3, r4, r5
   1a560:	d106      	bne.n	1a570 <z_impl_k_sem_take+0x40>
   1a562:	f381 8811 	msr	BASEPRI, r1
   1a566:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1a56a:	f06f 000f 	mvn.w	r0, #15
   1a56e:	e7f3      	b.n	1a558 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1a570:	4602      	mov	r2, r0
   1a572:	e9cd 4500 	strd	r4, r5, [sp]
   1a576:	4802      	ldr	r0, [pc, #8]	; (1a580 <z_impl_k_sem_take+0x50>)
   1a578:	f7ff fea0 	bl	1a2bc <z_pend_curr>
	return ret;
   1a57c:	e7ec      	b.n	1a558 <z_impl_k_sem_take+0x28>
   1a57e:	bf00      	nop
   1a580:	2001c1c7 	.word	0x2001c1c7

0001a584 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1a584:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1a586:	4c08      	ldr	r4, [pc, #32]	; (1a5a8 <k_sys_work_q_init+0x24>)
   1a588:	f04f 33ff 	mov.w	r3, #4294967295
   1a58c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a590:	4620      	mov	r0, r4
   1a592:	4906      	ldr	r1, [pc, #24]	; (1a5ac <k_sys_work_q_init+0x28>)
   1a594:	f000 f8dc 	bl	1a750 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1a598:	4905      	ldr	r1, [pc, #20]	; (1a5b0 <k_sys_work_q_init+0x2c>)
   1a59a:	f104 0018 	add.w	r0, r4, #24
   1a59e:	f005 fd91 	bl	200c4 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1a5a2:	2000      	movs	r0, #0
   1a5a4:	bd10      	pop	{r4, pc}
   1a5a6:	bf00      	nop
   1a5a8:	20015030 	.word	0x20015030
   1a5ac:	2001fa18 	.word	0x2001fa18
   1a5b0:	00023618 	.word	0x00023618

0001a5b4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1a5b4:	e92d 41b0 	stmdb	sp!, {r4, r5, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1a5b8:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1a5bc:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
   1a5be:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1a5c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1a5c4:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
   1a5c6:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1a5c8:	2504      	movs	r5, #4
   1a5ca:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   1a5cc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1a5ce:	3207      	adds	r2, #7
	thread_base->prio = priority;
   1a5d0:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
   1a5d2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1a5d4:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   1a5d8:	e9c0 121b 	strd	r1, r2, [r0, #108]	; 0x6c
	stack_ptr = (char *)stack + stack_obj_size;
   1a5dc:	eb01 0802 	add.w	r8, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a5e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	node->prev = NULL;
   1a5e2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->sched_locked = 0U;
   1a5e6:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1a5e8:	6745      	str	r5, [r0, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a5ea:	9202      	str	r2, [sp, #8]
   1a5ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a5ee:	9201      	str	r2, [sp, #4]
   1a5f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a5f2:	9200      	str	r2, [sp, #0]
   1a5f4:	4642      	mov	r2, r8
   1a5f6:	f7f6 fdfb 	bl	111f0 <arch_new_thread>
	if (!_current) {
   1a5fa:	4b05      	ldr	r3, [pc, #20]	; (1a610 <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
   1a5fc:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1a600:	689b      	ldr	r3, [r3, #8]
   1a602:	b103      	cbz	r3, 1a606 <z_setup_new_thread+0x52>
	new_thread->resource_pool = _current->resource_pool;
   1a604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
   1a606:	4640      	mov	r0, r8
   1a608:	67a3      	str	r3, [r4, #120]	; 0x78
   1a60a:	b005      	add	sp, #20
   1a60c:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
   1a610:	200187a0 	.word	0x200187a0

0001a614 <z_impl_k_thread_create>:
{
   1a614:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a616:	2500      	movs	r5, #0
{
   1a618:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a61a:	9505      	str	r5, [sp, #20]
   1a61c:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   1a61e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a622:	9504      	str	r5, [sp, #16]
   1a624:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   1a626:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a628:	9503      	str	r5, [sp, #12]
   1a62a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1a62c:	9502      	str	r5, [sp, #8]
   1a62e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1a630:	9501      	str	r5, [sp, #4]
   1a632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1a634:	9500      	str	r5, [sp, #0]
   1a636:	f7ff ffbd 	bl	1a5b4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1a63a:	1c7b      	adds	r3, r7, #1
   1a63c:	bf08      	it	eq
   1a63e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1a642:	d005      	beq.n	1a650 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a644:	ea56 0307 	orrs.w	r3, r6, r7
   1a648:	d105      	bne.n	1a656 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1a64a:	4620      	mov	r0, r4
   1a64c:	f7ff fca6 	bl	19f9c <z_sched_start>
}
   1a650:	4620      	mov	r0, r4
   1a652:	b007      	add	sp, #28
   1a654:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1a656:	4632      	mov	r2, r6
   1a658:	463b      	mov	r3, r7
   1a65a:	4903      	ldr	r1, [pc, #12]	; (1a668 <z_impl_k_thread_create+0x54>)
   1a65c:	f104 0018 	add.w	r0, r4, #24
   1a660:	f000 f954 	bl	1a90c <z_add_timeout>
   1a664:	e7f4      	b.n	1a650 <z_impl_k_thread_create+0x3c>
   1a666:	bf00      	nop
   1a668:	0001ff91 	.word	0x0001ff91

0001a66c <z_init_static_threads>:
{
   1a66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1a670:	4e2a      	ldr	r6, [pc, #168]	; (1a71c <z_init_static_threads+0xb0>)
   1a672:	4d2b      	ldr	r5, [pc, #172]	; (1a720 <z_init_static_threads+0xb4>)
   1a674:	46b0      	mov	r8, r6
{
   1a676:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1a678:	42b5      	cmp	r5, r6
   1a67a:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1a67e:	d310      	bcc.n	1a6a2 <z_init_static_threads+0x36>
	k_sched_lock();
   1a680:	f7ff fbe6 	bl	19e50 <k_sched_lock>
   1a684:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1a688:	f240 36e7 	movw	r6, #999	; 0x3e7
   1a68c:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1a68e:	4c24      	ldr	r4, [pc, #144]	; (1a720 <z_init_static_threads+0xb4>)
   1a690:	f8df a090 	ldr.w	sl, [pc, #144]	; 1a724 <z_init_static_threads+0xb8>
   1a694:	4544      	cmp	r4, r8
   1a696:	d321      	bcc.n	1a6dc <z_init_static_threads+0x70>
}
   1a698:	b006      	add	sp, #24
   1a69a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1a69e:	f7ff bc29 	b.w	19ef4 <k_sched_unlock>
		z_setup_new_thread(
   1a6a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a6a6:	9305      	str	r3, [sp, #20]
   1a6a8:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1a6ac:	9304      	str	r3, [sp, #16]
   1a6ae:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1a6b2:	9303      	str	r3, [sp, #12]
   1a6b4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1a6b8:	9302      	str	r3, [sp, #8]
   1a6ba:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1a6be:	9301      	str	r3, [sp, #4]
   1a6c0:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1a6c4:	9300      	str	r3, [sp, #0]
   1a6c6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1a6ca:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1a6ce:	f7ff ff71 	bl	1a5b4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1a6d2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1a6d6:	65dd      	str	r5, [r3, #92]	; 0x5c
   1a6d8:	4625      	mov	r5, r4
   1a6da:	e7cd      	b.n	1a678 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1a6dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a6de:	1c5a      	adds	r2, r3, #1
   1a6e0:	d00d      	beq.n	1a6fe <z_init_static_threads+0x92>
   1a6e2:	4630      	mov	r0, r6
   1a6e4:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   1a6e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1a6ea:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a6ee:	42b9      	cmp	r1, r7
   1a6f0:	bf08      	it	eq
   1a6f2:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1a6f4:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a6f6:	d104      	bne.n	1a702 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1a6f8:	4628      	mov	r0, r5
   1a6fa:	f7ff fc4f 	bl	19f9c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1a6fe:	3430      	adds	r4, #48	; 0x30
   1a700:	e7c8      	b.n	1a694 <z_init_static_threads+0x28>
   1a702:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a706:	2300      	movs	r3, #0
   1a708:	f7f2 fa90 	bl	cc2c <__aeabi_uldivmod>
   1a70c:	4602      	mov	r2, r0
   1a70e:	460b      	mov	r3, r1
   1a710:	f105 0018 	add.w	r0, r5, #24
   1a714:	4651      	mov	r1, sl
   1a716:	f000 f8f9 	bl	1a90c <z_add_timeout>
   1a71a:	e7f0      	b.n	1a6fe <z_init_static_threads+0x92>
   1a71c:	2001472c 	.word	0x2001472c
   1a720:	2001469c 	.word	0x2001469c
   1a724:	0001ff91 	.word	0x0001ff91

0001a728 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   1a728:	b508      	push	{r3, lr}
	__asm__ volatile(
   1a72a:	f04f 0320 	mov.w	r3, #32
   1a72e:	f3ef 8411 	mrs	r4, BASEPRI
   1a732:	f383 8811 	msr	BASEPRI, r3
   1a736:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   1a73a:	4b04      	ldr	r3, [pc, #16]	; (1a74c <z_self_abort+0x24>)
   1a73c:	6898      	ldr	r0, [r3, #8]
   1a73e:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   1a740:	f7ff fcc6 	bl	1a0d0 <z_impl_k_thread_suspend>
   1a744:	4620      	mov	r0, r4
   1a746:	f7f6 fcf5 	bl	11134 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1a74a:	bf00      	nop
   1a74c:	200187a0 	.word	0x200187a0

0001a750 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1a750:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1a754:	b08a      	sub	sp, #40	; 0x28
   1a756:	4604      	mov	r4, r0
   1a758:	461d      	mov	r5, r3
   1a75a:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   1a75e:	f005 fb85 	bl	1fe6c <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1a762:	f104 0618 	add.w	r6, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a766:	2000      	movs	r0, #0
   1a768:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   1a76c:	f04f 0800 	mov.w	r8, #0
   1a770:	f04f 0900 	mov.w	r9, #0
   1a774:	e9cd 5003 	strd	r5, r0, [sp, #12]
   1a778:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1a77c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1a780:	4630      	mov	r0, r6
   1a782:	4b05      	ldr	r3, [pc, #20]	; (1a798 <k_work_q_start+0x48>)
   1a784:	9400      	str	r4, [sp, #0]
   1a786:	f7ff ff45 	bl	1a614 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1a78a:	4630      	mov	r0, r6
   1a78c:	4903      	ldr	r1, [pc, #12]	; (1a79c <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1a78e:	b00a      	add	sp, #40	; 0x28
   1a790:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   1a794:	f005 bc96 	b.w	200c4 <z_impl_k_thread_name_set>
   1a798:	0001bfad 	.word	0x0001bfad
   1a79c:	00023621 	.word	0x00023621

0001a7a0 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1a7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a7a4:	4606      	mov	r6, r0
   1a7a6:	460d      	mov	r5, r1
   1a7a8:	4690      	mov	r8, r2
   1a7aa:	4699      	mov	r9, r3
   1a7ac:	f04f 0320 	mov.w	r3, #32
   1a7b0:	f3ef 8711 	mrs	r7, BASEPRI
   1a7b4:	f383 8811 	msr	BASEPRI, r3
   1a7b8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1a7bc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1a7be:	b17b      	cbz	r3, 1a7e0 <k_delayed_work_submit_to_queue+0x40>
   1a7c0:	4283      	cmp	r3, r0
   1a7c2:	d128      	bne.n	1a816 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1a7c4:	4628      	mov	r0, r5
   1a7c6:	f005 fc9e 	bl	20106 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   1a7ca:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   1a7ce:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1a7d0:	d008      	beq.n	1a7e4 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1a7d2:	2800      	cmp	r0, #0
   1a7d4:	da07      	bge.n	1a7e6 <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1a7d6:	f387 8811 	msr	BASEPRI, r7
   1a7da:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1a7de:	e00f      	b.n	1a800 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1a7e0:	2800      	cmp	r0, #0
   1a7e2:	d0ef      	beq.n	1a7c4 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1a7e4:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a7e6:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1a7ea:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a7ec:	d10b      	bne.n	1a806 <k_delayed_work_submit_to_queue+0x66>
   1a7ee:	f387 8811 	msr	BASEPRI, r7
   1a7f2:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1a7f6:	4629      	mov	r1, r5
   1a7f8:	4630      	mov	r0, r6
   1a7fa:	f005 fc6b 	bl	200d4 <k_work_submit_to_queue>
		return 0;
   1a7fe:	2400      	movs	r4, #0
}
   1a800:	4620      	mov	r0, r4
   1a802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1a806:	4642      	mov	r2, r8
   1a808:	464b      	mov	r3, r9
   1a80a:	4904      	ldr	r1, [pc, #16]	; (1a81c <k_delayed_work_submit_to_queue+0x7c>)
   1a80c:	f105 0010 	add.w	r0, r5, #16
   1a810:	f000 f87c 	bl	1a90c <z_add_timeout>
   1a814:	e7df      	b.n	1a7d6 <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1a816:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1a81a:	e7dc      	b.n	1a7d6 <k_delayed_work_submit_to_queue+0x36>
   1a81c:	000200fd 	.word	0x000200fd

0001a820 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1a820:	4a02      	ldr	r2, [pc, #8]	; (1a82c <boot_banner+0xc>)
   1a822:	4903      	ldr	r1, [pc, #12]	; (1a830 <boot_banner+0x10>)
   1a824:	4803      	ldr	r0, [pc, #12]	; (1a834 <boot_banner+0x14>)
   1a826:	f001 badd 	b.w	1bde4 <printk>
   1a82a:	bf00      	nop
   1a82c:	00021edd 	.word	0x00021edd
   1a830:	0002362b 	.word	0x0002362b
   1a834:	00023638 	.word	0x00023638

0001a838 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1a838:	b508      	push	{r3, lr}
   1a83a:	4806      	ldr	r0, [pc, #24]	; (1a854 <z_data_copy+0x1c>)
   1a83c:	4a06      	ldr	r2, [pc, #24]	; (1a858 <z_data_copy+0x20>)
   1a83e:	4907      	ldr	r1, [pc, #28]	; (1a85c <z_data_copy+0x24>)
   1a840:	1a12      	subs	r2, r2, r0
   1a842:	f005 fefa 	bl	2063a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1a846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a84a:	4a05      	ldr	r2, [pc, #20]	; (1a860 <z_data_copy+0x28>)
   1a84c:	4905      	ldr	r1, [pc, #20]	; (1a864 <z_data_copy+0x2c>)
   1a84e:	4806      	ldr	r0, [pc, #24]	; (1a868 <z_data_copy+0x30>)
   1a850:	f005 bef3 	b.w	2063a <memcpy>
   1a854:	20014500 	.word	0x20014500
   1a858:	20014938 	.word	0x20014938
   1a85c:	000237f0 	.word	0x000237f0
   1a860:	00000000 	.word	0x00000000
   1a864:	000237d8 	.word	0x000237d8
   1a868:	20014500 	.word	0x20014500

0001a86c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   1a86c:	4b03      	ldr	r3, [pc, #12]	; (1a87c <elapsed+0x10>)
   1a86e:	681b      	ldr	r3, [r3, #0]
   1a870:	b90b      	cbnz	r3, 1a876 <elapsed+0xa>
   1a872:	f7f6 bc2b 	b.w	110cc <z_clock_elapsed>
}
   1a876:	2000      	movs	r0, #0
   1a878:	4770      	bx	lr
   1a87a:	bf00      	nop
   1a87c:	200187e4 	.word	0x200187e4

0001a880 <remove_timeout>:
{
   1a880:	b530      	push	{r4, r5, lr}
   1a882:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a884:	b168      	cbz	r0, 1a8a2 <remove_timeout+0x22>
   1a886:	4a0a      	ldr	r2, [pc, #40]	; (1a8b0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1a888:	6852      	ldr	r2, [r2, #4]
   1a88a:	4290      	cmp	r0, r2
   1a88c:	d009      	beq.n	1a8a2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1a88e:	b143      	cbz	r3, 1a8a2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1a890:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1a894:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1a898:	1912      	adds	r2, r2, r4
   1a89a:	eb45 0101 	adc.w	r1, r5, r1
   1a89e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1a8a2:	6842      	ldr	r2, [r0, #4]
   1a8a4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a8a6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a8a8:	2300      	movs	r3, #0
	node->prev = NULL;
   1a8aa:	e9c0 3300 	strd	r3, r3, [r0]
}
   1a8ae:	bd30      	pop	{r4, r5, pc}
   1a8b0:	200145a4 	.word	0x200145a4

0001a8b4 <next_timeout>:
	return list->head == list;
   1a8b4:	4b13      	ldr	r3, [pc, #76]	; (1a904 <next_timeout+0x50>)

static int32_t next_timeout(void)
{
   1a8b6:	b510      	push	{r4, lr}
   1a8b8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a8ba:	429c      	cmp	r4, r3
   1a8bc:	bf08      	it	eq
   1a8be:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1a8c0:	f7ff ffd4 	bl	1a86c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   1a8c4:	b1cc      	cbz	r4, 1a8fa <next_timeout+0x46>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1a8c6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1a8ca:	1a12      	subs	r2, r2, r0
   1a8cc:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1a8d0:	2a01      	cmp	r2, #1
   1a8d2:	f173 0100 	sbcs.w	r1, r3, #0
   1a8d6:	db13      	blt.n	1a900 <next_timeout+0x4c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1a8d8:	4610      	mov	r0, r2
   1a8da:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1a8de:	4619      	mov	r1, r3
   1a8e0:	2300      	movs	r3, #0
   1a8e2:	4282      	cmp	r2, r0
   1a8e4:	eb73 0401 	sbcs.w	r4, r3, r1
   1a8e8:	da00      	bge.n	1a8ec <next_timeout+0x38>
   1a8ea:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1a8ec:	4b06      	ldr	r3, [pc, #24]	; (1a908 <next_timeout+0x54>)
   1a8ee:	695b      	ldr	r3, [r3, #20]
   1a8f0:	b113      	cbz	r3, 1a8f8 <next_timeout+0x44>
   1a8f2:	4298      	cmp	r0, r3
   1a8f4:	bfa8      	it	ge
   1a8f6:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1a8f8:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1a8fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1a8fe:	e7f5      	b.n	1a8ec <next_timeout+0x38>
   1a900:	2000      	movs	r0, #0
   1a902:	e7f3      	b.n	1a8ec <next_timeout+0x38>
   1a904:	200145a4 	.word	0x200145a4
   1a908:	200187a0 	.word	0x200187a0

0001a90c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1a90c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a910:	9101      	str	r1, [sp, #4]
   1a912:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a914:	1c4b      	adds	r3, r1, #1
   1a916:	bf08      	it	eq
   1a918:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1a91c:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a91e:	d070      	beq.n	1aa02 <z_add_timeout+0xf6>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1a920:	f06f 0301 	mvn.w	r3, #1
   1a924:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   1a928:	1c54      	adds	r4, r2, #1
   1a92a:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1a92e:	ebb3 0804 	subs.w	r8, r3, r4
   1a932:	eb6b 0905 	sbc.w	r9, fp, r5
   1a936:	f1b8 0f00 	cmp.w	r8, #0
   1a93a:	f179 0300 	sbcs.w	r3, r9, #0
   1a93e:	db0f      	blt.n	1a960 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1a940:	f7ff ff94 	bl	1a86c <elapsed>
   1a944:	f06f 0301 	mvn.w	r3, #1
   1a948:	4a34      	ldr	r2, [pc, #208]	; (1aa1c <z_add_timeout+0x110>)
   1a94a:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1a94e:	1a5b      	subs	r3, r3, r1
   1a950:	eb6b 020c 	sbc.w	r2, fp, ip
   1a954:	1b1e      	subs	r6, r3, r4
   1a956:	eb62 0705 	sbc.w	r7, r2, r5
   1a95a:	1a34      	subs	r4, r6, r0
   1a95c:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1a960:	9b01      	ldr	r3, [sp, #4]
   1a962:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   1a966:	f04f 0320 	mov.w	r3, #32
   1a96a:	f3ef 8611 	mrs	r6, BASEPRI
   1a96e:	f383 8811 	msr	BASEPRI, r3
   1a972:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1a976:	f7ff ff79 	bl	1a86c <elapsed>
	ticks = MAX(1, ticks);
   1a97a:	2c01      	cmp	r4, #1
   1a97c:	f175 0300 	sbcs.w	r3, r5, #0
   1a980:	bfbc      	itt	lt
   1a982:	2401      	movlt	r4, #1
   1a984:	2500      	movlt	r5, #0
	return list->head == list;
   1a986:	4b26      	ldr	r3, [pc, #152]	; (1aa20 <z_add_timeout+0x114>)
		to->dticks = ticks + elapsed();
   1a988:	1824      	adds	r4, r4, r0
   1a98a:	681a      	ldr	r2, [r3, #0]
   1a98c:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a990:	429a      	cmp	r2, r3
   1a992:	e9ca 4504 	strd	r4, r5, [sl, #16]
   1a996:	d001      	beq.n	1a99c <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a998:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1a99a:	b952      	cbnz	r2, 1a9b2 <z_add_timeout+0xa6>
	node->prev = list->tail;
   1a99c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1a99e:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   1a9a2:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1a9a6:	685a      	ldr	r2, [r3, #4]
   1a9a8:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1a9ac:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1a9b0:	e014      	b.n	1a9dc <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   1a9b2:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1a9b6:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1a9ba:	4544      	cmp	r4, r8
   1a9bc:	eb75 0109 	sbcs.w	r1, r5, r9
   1a9c0:	da22      	bge.n	1aa08 <z_add_timeout+0xfc>
				t->dticks -= to->dticks;
   1a9c2:	ebb8 0004 	subs.w	r0, r8, r4
   1a9c6:	eb69 0105 	sbc.w	r1, r9, r5
   1a9ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1a9ce:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1a9d0:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1a9d4:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1a9d8:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1a9dc:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a9de:	429a      	cmp	r2, r3
   1a9e0:	d00b      	beq.n	1a9fa <z_add_timeout+0xee>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1a9e2:	4592      	cmp	sl, r2
   1a9e4:	d109      	bne.n	1a9fa <z_add_timeout+0xee>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1a9e6:	f7ff ff65 	bl	1a8b4 <next_timeout>

			if (next_time == 0 ||
   1a9ea:	b118      	cbz	r0, 1a9f4 <z_add_timeout+0xe8>
			    _current_cpu->slice_ticks != next_time) {
   1a9ec:	4b0d      	ldr	r3, [pc, #52]	; (1aa24 <z_add_timeout+0x118>)
			if (next_time == 0 ||
   1a9ee:	695b      	ldr	r3, [r3, #20]
   1a9f0:	4283      	cmp	r3, r0
   1a9f2:	d002      	beq.n	1a9fa <z_add_timeout+0xee>
				z_clock_set_timeout(next_time, false);
   1a9f4:	2100      	movs	r1, #0
   1a9f6:	f7f6 fb37 	bl	11068 <z_clock_set_timeout>
	__asm__ volatile(
   1a9fa:	f386 8811 	msr	BASEPRI, r6
   1a9fe:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1aa02:	b003      	add	sp, #12
   1aa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1aa08:	ebb4 0008 	subs.w	r0, r4, r8
   1aa0c:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1aa10:	42ba      	cmp	r2, r7
   1aa12:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1aa16:	d0c1      	beq.n	1a99c <z_add_timeout+0x90>
   1aa18:	6812      	ldr	r2, [r2, #0]
   1aa1a:	e7be      	b.n	1a99a <z_add_timeout+0x8e>
   1aa1c:	20015110 	.word	0x20015110
   1aa20:	200145a4 	.word	0x200145a4
   1aa24:	200187a0 	.word	0x200187a0

0001aa28 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   1aa28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa2c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1aa2e:	f7ff fb0d 	bl	1a04c <z_time_slice>
	__asm__ volatile(
   1aa32:	f04f 0320 	mov.w	r3, #32
   1aa36:	f3ef 8411 	mrs	r4, BASEPRI
   1aa3a:	f383 8811 	msr	BASEPRI, r3
   1aa3e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1aa42:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1aaf4 <z_clock_announce+0xcc>
   1aa46:	4d2a      	ldr	r5, [pc, #168]	; (1aaf0 <z_clock_announce+0xc8>)
   1aa48:	4651      	mov	r1, sl
	return list->head == list;
   1aa4a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1aaf8 <z_clock_announce+0xd0>
   1aa4e:	602e      	str	r6, [r5, #0]
   1aa50:	f8d5 c000 	ldr.w	ip, [r5]
   1aa54:	f8db 0000 	ldr.w	r0, [fp]
   1aa58:	4662      	mov	r2, ip
   1aa5a:	e9da 8900 	ldrd	r8, r9, [sl]
   1aa5e:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aa60:	4558      	cmp	r0, fp
   1aa62:	e9cd 2300 	strd	r2, r3, [sp]
   1aa66:	d00d      	beq.n	1aa84 <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1aa68:	b160      	cbz	r0, 1aa84 <z_clock_announce+0x5c>
   1aa6a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1aa6e:	45b4      	cmp	ip, r6
   1aa70:	41bb      	sbcs	r3, r7
   1aa72:	da1d      	bge.n	1aab0 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1aa74:	9b00      	ldr	r3, [sp, #0]
   1aa76:	ebb6 0c03 	subs.w	ip, r6, r3
   1aa7a:	9b01      	ldr	r3, [sp, #4]
   1aa7c:	eb67 0603 	sbc.w	r6, r7, r3
   1aa80:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1aa84:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   1aa86:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   1aa88:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   1aa8a:	eb13 0208 	adds.w	r2, r3, r8
   1aa8e:	9b01      	ldr	r3, [sp, #4]
   1aa90:	eb43 0309 	adc.w	r3, r3, r9
   1aa94:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   1aa98:	f7ff ff0c 	bl	1a8b4 <next_timeout>
   1aa9c:	4631      	mov	r1, r6
   1aa9e:	f7f6 fae3 	bl	11068 <z_clock_set_timeout>
	__asm__ volatile(
   1aaa2:	f384 8811 	msr	BASEPRI, r4
   1aaa6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1aaaa:	b003      	add	sp, #12
   1aaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   1aab0:	2200      	movs	r2, #0
   1aab2:	2300      	movs	r3, #0
		curr_tick += dt;
   1aab4:	eb18 0806 	adds.w	r8, r8, r6
   1aab8:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1aabc:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1aac0:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1aac4:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1aac8:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1aaca:	f7ff fed9 	bl	1a880 <remove_timeout>
   1aace:	f384 8811 	msr	BASEPRI, r4
   1aad2:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1aad6:	6883      	ldr	r3, [r0, #8]
   1aad8:	4798      	blx	r3
	__asm__ volatile(
   1aada:	f04f 0320 	mov.w	r3, #32
   1aade:	f3ef 8411 	mrs	r4, BASEPRI
   1aae2:	f383 8811 	msr	BASEPRI, r3
   1aae6:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1aaea:	4902      	ldr	r1, [pc, #8]	; (1aaf4 <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1aaec:	e7b0      	b.n	1aa50 <z_clock_announce+0x28>
   1aaee:	bf00      	nop
   1aaf0:	200187e4 	.word	0x200187e4
   1aaf4:	20015110 	.word	0x20015110
   1aaf8:	200145a4 	.word	0x200145a4

0001aafc <z_tick_get>:

int64_t z_tick_get(void)
{
   1aafc:	b510      	push	{r4, lr}
   1aafe:	f04f 0320 	mov.w	r3, #32
   1ab02:	f3ef 8411 	mrs	r4, BASEPRI
   1ab06:	f383 8811 	msr	BASEPRI, r3
   1ab0a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1ab0e:	f7f6 fadd 	bl	110cc <z_clock_elapsed>
   1ab12:	4b06      	ldr	r3, [pc, #24]	; (1ab2c <z_tick_get+0x30>)
   1ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ab18:	1812      	adds	r2, r2, r0
   1ab1a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1ab1e:	f384 8811 	msr	BASEPRI, r4
   1ab22:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1ab26:	4610      	mov	r0, r2
   1ab28:	4619      	mov	r1, r3
   1ab2a:	bd10      	pop	{r4, pc}
   1ab2c:	20015110 	.word	0x20015110

0001ab30 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1ab30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1ab32:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1ab36:	1c56      	adds	r6, r2, #1
   1ab38:	f143 0700 	adc.w	r7, r3, #0
   1ab3c:	2f00      	cmp	r7, #0
   1ab3e:	bf08      	it	eq
   1ab40:	2e02      	cmpeq	r6, #2
{
   1ab42:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1ab44:	d302      	bcc.n	1ab4c <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ab46:	490c      	ldr	r1, [pc, #48]	; (1ab78 <z_timer_expiration_handler+0x48>)
   1ab48:	f7ff fee0 	bl	1a90c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1ab4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ab4e:	3301      	adds	r3, #1
   1ab50:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1ab52:	6a23      	ldr	r3, [r4, #32]
   1ab54:	b10b      	cbz	r3, 1ab5a <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1ab56:	4620      	mov	r0, r4
   1ab58:	4798      	blx	r3
	return list->head == list;
   1ab5a:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ab5e:	42a5      	cmp	r5, r4
   1ab60:	d009      	beq.n	1ab76 <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1ab62:	b145      	cbz	r5, 1ab76 <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1ab64:	4628      	mov	r0, r5
   1ab66:	f005 f9b1 	bl	1fecc <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   1ab6a:	4628      	mov	r0, r5
   1ab6c:	f005 fa00 	bl	1ff70 <z_ready_thread>
   1ab70:	2300      	movs	r3, #0
   1ab72:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   1ab76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ab78:	0001ab31 	.word	0x0001ab31

0001ab7c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1ab7c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1ab80:	4619      	mov	r1, r3
   1ab82:	4606      	mov	r6, r0
   1ab84:	4610      	mov	r0, r2
   1ab86:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1ab8a:	1c4c      	adds	r4, r1, #1
   1ab8c:	bf08      	it	eq
   1ab8e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1ab92:	4680      	mov	r8, r0
   1ab94:	4689      	mov	r9, r1
   1ab96:	d047      	beq.n	1ac28 <z_impl_k_timer_start+0xac>
   1ab98:	4614      	mov	r4, r2
   1ab9a:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1ab9c:	ea54 0305 	orrs.w	r3, r4, r5
   1aba0:	d016      	beq.n	1abd0 <z_impl_k_timer_start+0x54>
   1aba2:	f06f 0301 	mvn.w	r3, #1
   1aba6:	ebb3 0a02 	subs.w	sl, r3, r2
   1abaa:	f04f 33ff 	mov.w	r3, #4294967295
   1abae:	eb63 0b05 	sbc.w	fp, r3, r5
   1abb2:	f1ba 0f00 	cmp.w	sl, #0
   1abb6:	f17b 0300 	sbcs.w	r3, fp, #0
   1abba:	da09      	bge.n	1abd0 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   1abbc:	f112 34ff 	adds.w	r4, r2, #4294967295
   1abc0:	f145 35ff 	adc.w	r5, r5, #4294967295
   1abc4:	2c01      	cmp	r4, #1
   1abc6:	f175 0300 	sbcs.w	r3, r5, #0
   1abca:	bfbc      	itt	lt
   1abcc:	2401      	movlt	r4, #1
   1abce:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1abd0:	f06f 0301 	mvn.w	r3, #1
   1abd4:	1a1b      	subs	r3, r3, r0
   1abd6:	9300      	str	r3, [sp, #0]
   1abd8:	f04f 33ff 	mov.w	r3, #4294967295
   1abdc:	eb63 0301 	sbc.w	r3, r3, r1
   1abe0:	9301      	str	r3, [sp, #4]
   1abe2:	e9dd 2300 	ldrd	r2, r3, [sp]
   1abe6:	2a00      	cmp	r2, #0
   1abe8:	f173 0300 	sbcs.w	r3, r3, #0
   1abec:	da0c      	bge.n	1ac08 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1abee:	f110 38ff 	adds.w	r8, r0, #4294967295
   1abf2:	f141 39ff 	adc.w	r9, r1, #4294967295
   1abf6:	f1b8 0f00 	cmp.w	r8, #0
   1abfa:	f179 0300 	sbcs.w	r3, r9, #0
   1abfe:	bfbc      	itt	lt
   1ac00:	f04f 0800 	movlt.w	r8, #0
   1ac04:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1ac08:	4630      	mov	r0, r6
   1ac0a:	f005 fabc 	bl	20186 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1ac0e:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ac10:	4642      	mov	r2, r8
	timer->status = 0U;
   1ac12:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ac14:	4630      	mov	r0, r6
   1ac16:	464b      	mov	r3, r9
   1ac18:	4905      	ldr	r1, [pc, #20]	; (1ac30 <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   1ac1a:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1ac1e:	b002      	add	sp, #8
   1ac20:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ac24:	f7ff be72 	b.w	1a90c <z_add_timeout>
}
   1ac28:	b002      	add	sp, #8
   1ac2a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1ac2e:	bf00      	nop
   1ac30:	0001ab31 	.word	0x0001ab31

0001ac34 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1ac34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1ac38:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1ac3a:	4b2a      	ldr	r3, [pc, #168]	; (1ace4 <z_impl_k_poll+0xb0>)
{
   1ac3c:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   1ac3e:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1ac40:	2301      	movs	r3, #1
   1ac42:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   1ac46:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   1ac4a:	ea52 0307 	orrs.w	r3, r2, r7
   1ac4e:	bf0c      	ite	eq
   1ac50:	2301      	moveq	r3, #1
   1ac52:	2300      	movne	r3, #0
   1ac54:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   1ac58:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1ac5a:	f005 fc04 	bl	20466 <register_events>
   1ac5e:	4681      	mov	r9, r0
	__asm__ volatile(
   1ac60:	f04f 0320 	mov.w	r3, #32
   1ac64:	f3ef 8a11 	mrs	sl, BASEPRI
   1ac68:	f383 8811 	msr	BASEPRI, r3
   1ac6c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1ac70:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   1ac74:	b964      	cbnz	r4, 1ac90 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1ac76:	4601      	mov	r1, r0
   1ac78:	4652      	mov	r2, sl
   1ac7a:	4640      	mov	r0, r8
   1ac7c:	f005 fb21 	bl	202c2 <clear_event_registrations>
	__asm__ volatile(
   1ac80:	f38a 8811 	msr	BASEPRI, sl
   1ac84:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1ac88:	4620      	mov	r0, r4
   1ac8a:	b004      	add	sp, #16
   1ac8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1ac90:	2300      	movs	r3, #0
   1ac92:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ac96:	ea56 0307 	orrs.w	r3, r6, r7
   1ac9a:	d106      	bne.n	1acaa <z_impl_k_poll+0x76>
   1ac9c:	f38a 8811 	msr	BASEPRI, sl
   1aca0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1aca4:	f06f 040a 	mvn.w	r4, #10
   1aca8:	e7ee      	b.n	1ac88 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1acaa:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1acac:	4651      	mov	r1, sl
   1acae:	e9cd 6700 	strd	r6, r7, [sp]
   1acb2:	480d      	ldr	r0, [pc, #52]	; (1ace8 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1acb4:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1acb8:	f7ff fb00 	bl	1a2bc <z_pend_curr>
   1acbc:	4604      	mov	r4, r0
	__asm__ volatile(
   1acbe:	f04f 0320 	mov.w	r3, #32
   1acc2:	f3ef 8511 	mrs	r5, BASEPRI
   1acc6:	f383 8811 	msr	BASEPRI, r3
   1acca:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1acce:	462a      	mov	r2, r5
   1acd0:	4649      	mov	r1, r9
   1acd2:	4640      	mov	r0, r8
   1acd4:	f005 faf5 	bl	202c2 <clear_event_registrations>
	__asm__ volatile(
   1acd8:	f385 8811 	msr	BASEPRI, r5
   1acdc:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1ace0:	e7d2      	b.n	1ac88 <z_impl_k_poll+0x54>
   1ace2:	bf00      	nop
   1ace4:	200187a0 	.word	0x200187a0
   1ace8:	2001c1c7 	.word	0x2001c1c7

0001acec <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1acec:	b538      	push	{r3, r4, r5, lr}
   1acee:	4603      	mov	r3, r0
	__asm__ volatile(
   1acf0:	f04f 0220 	mov.w	r2, #32
   1acf4:	f3ef 8511 	mrs	r5, BASEPRI
   1acf8:	f382 8811 	msr	BASEPRI, r2
   1acfc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1ad00:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1ad02:	2101      	movs	r1, #1
   1ad04:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1ad06:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1ad08:	4283      	cmp	r3, r0
   1ad0a:	d106      	bne.n	1ad1a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1ad0c:	f385 8811 	msr	BASEPRI, r5
   1ad10:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1ad14:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1ad16:	4620      	mov	r0, r4
   1ad18:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1ad1a:	e9d0 3200 	ldrd	r3, r2, [r0]
   1ad1e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1ad20:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ad22:	2300      	movs	r3, #0
	node->prev = NULL;
   1ad24:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1ad28:	f005 fb0a 	bl	20340 <signal_poll_event>
	z_reschedule(&lock, key);
   1ad2c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1ad2e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1ad30:	4801      	ldr	r0, [pc, #4]	; (1ad38 <z_impl_k_poll_signal_raise+0x4c>)
   1ad32:	f7ff f87b 	bl	19e2c <z_reschedule>
	return rc;
   1ad36:	e7ee      	b.n	1ad16 <z_impl_k_poll_signal_raise+0x2a>
   1ad38:	2001c1c7 	.word	0x2001c1c7

0001ad3c <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   1ad3c:	460a      	mov	r2, r1
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1ad3e:	4601      	mov	r1, r0
   1ad40:	4801      	ldr	r0, [pc, #4]	; (1ad48 <k_aligned_alloc+0xc>)
   1ad42:	f005 bbff 	b.w	20544 <z_heap_aligned_alloc>
   1ad46:	bf00      	nop
   1ad48:	20014768 	.word	0x20014768

0001ad4c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1ad4c:	b513      	push	{r0, r1, r4, lr}
   1ad4e:	4604      	mov	r4, r0
   1ad50:	9101      	str	r1, [sp, #4]
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1ad52:	f005 f9ad 	bl	200b0 <k_is_in_isr>
   1ad56:	9a01      	ldr	r2, [sp, #4]
   1ad58:	b950      	cbnz	r0, 1ad70 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1ad5a:	4b07      	ldr	r3, [pc, #28]	; (1ad78 <z_thread_aligned_alloc+0x2c>)
   1ad5c:	689b      	ldr	r3, [r3, #8]
   1ad5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	}

	if (heap) {
   1ad60:	b143      	cbz	r3, 1ad74 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   1ad62:	4621      	mov	r1, r4
   1ad64:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1ad66:	b002      	add	sp, #8
   1ad68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1ad6c:	f005 bbea 	b.w	20544 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   1ad70:	4b02      	ldr	r3, [pc, #8]	; (1ad7c <z_thread_aligned_alloc+0x30>)
   1ad72:	e7f6      	b.n	1ad62 <z_thread_aligned_alloc+0x16>
}
   1ad74:	b002      	add	sp, #8
   1ad76:	bd10      	pop	{r4, pc}
   1ad78:	200187a0 	.word	0x200187a0
   1ad7c:	20014768 	.word	0x20014768

0001ad80 <malloc>:
   1ad80:	4b02      	ldr	r3, [pc, #8]	; (1ad8c <malloc+0xc>)
   1ad82:	4601      	mov	r1, r0
   1ad84:	6818      	ldr	r0, [r3, #0]
   1ad86:	f000 b85b 	b.w	1ae40 <_malloc_r>
   1ad8a:	bf00      	nop
   1ad8c:	200145ac 	.word	0x200145ac

0001ad90 <free>:
   1ad90:	4b02      	ldr	r3, [pc, #8]	; (1ad9c <free+0xc>)
   1ad92:	4601      	mov	r1, r0
   1ad94:	6818      	ldr	r0, [r3, #0]
   1ad96:	f000 b803 	b.w	1ada0 <_free_r>
   1ad9a:	bf00      	nop
   1ad9c:	200145ac 	.word	0x200145ac

0001ada0 <_free_r>:
   1ada0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ada2:	2900      	cmp	r1, #0
   1ada4:	d047      	beq.n	1ae36 <_free_r+0x96>
   1ada6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1adaa:	1f0c      	subs	r4, r1, #4
   1adac:	9001      	str	r0, [sp, #4]
   1adae:	2b00      	cmp	r3, #0
   1adb0:	bfb8      	it	lt
   1adb2:	18e4      	addlt	r4, r4, r3
   1adb4:	f000 faac 	bl	1b310 <__malloc_lock>
   1adb8:	4a20      	ldr	r2, [pc, #128]	; (1ae3c <_free_r+0x9c>)
   1adba:	9801      	ldr	r0, [sp, #4]
   1adbc:	6813      	ldr	r3, [r2, #0]
   1adbe:	4615      	mov	r5, r2
   1adc0:	b933      	cbnz	r3, 1add0 <_free_r+0x30>
   1adc2:	6063      	str	r3, [r4, #4]
   1adc4:	6014      	str	r4, [r2, #0]
   1adc6:	b003      	add	sp, #12
   1adc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1adcc:	f000 baa6 	b.w	1b31c <__malloc_unlock>
   1add0:	42a3      	cmp	r3, r4
   1add2:	d90b      	bls.n	1adec <_free_r+0x4c>
   1add4:	6821      	ldr	r1, [r4, #0]
   1add6:	1862      	adds	r2, r4, r1
   1add8:	4293      	cmp	r3, r2
   1adda:	bf02      	ittt	eq
   1addc:	681a      	ldreq	r2, [r3, #0]
   1adde:	685b      	ldreq	r3, [r3, #4]
   1ade0:	1852      	addeq	r2, r2, r1
   1ade2:	6063      	str	r3, [r4, #4]
   1ade4:	bf08      	it	eq
   1ade6:	6022      	streq	r2, [r4, #0]
   1ade8:	602c      	str	r4, [r5, #0]
   1adea:	e7ec      	b.n	1adc6 <_free_r+0x26>
   1adec:	461a      	mov	r2, r3
   1adee:	685b      	ldr	r3, [r3, #4]
   1adf0:	b10b      	cbz	r3, 1adf6 <_free_r+0x56>
   1adf2:	42a3      	cmp	r3, r4
   1adf4:	d9fa      	bls.n	1adec <_free_r+0x4c>
   1adf6:	6811      	ldr	r1, [r2, #0]
   1adf8:	1855      	adds	r5, r2, r1
   1adfa:	42a5      	cmp	r5, r4
   1adfc:	d10b      	bne.n	1ae16 <_free_r+0x76>
   1adfe:	6824      	ldr	r4, [r4, #0]
   1ae00:	4421      	add	r1, r4
   1ae02:	1854      	adds	r4, r2, r1
   1ae04:	6011      	str	r1, [r2, #0]
   1ae06:	42a3      	cmp	r3, r4
   1ae08:	d1dd      	bne.n	1adc6 <_free_r+0x26>
   1ae0a:	681c      	ldr	r4, [r3, #0]
   1ae0c:	685b      	ldr	r3, [r3, #4]
   1ae0e:	4421      	add	r1, r4
   1ae10:	6053      	str	r3, [r2, #4]
   1ae12:	6011      	str	r1, [r2, #0]
   1ae14:	e7d7      	b.n	1adc6 <_free_r+0x26>
   1ae16:	d902      	bls.n	1ae1e <_free_r+0x7e>
   1ae18:	230c      	movs	r3, #12
   1ae1a:	6003      	str	r3, [r0, #0]
   1ae1c:	e7d3      	b.n	1adc6 <_free_r+0x26>
   1ae1e:	6825      	ldr	r5, [r4, #0]
   1ae20:	1961      	adds	r1, r4, r5
   1ae22:	428b      	cmp	r3, r1
   1ae24:	bf02      	ittt	eq
   1ae26:	6819      	ldreq	r1, [r3, #0]
   1ae28:	685b      	ldreq	r3, [r3, #4]
   1ae2a:	1949      	addeq	r1, r1, r5
   1ae2c:	6063      	str	r3, [r4, #4]
   1ae2e:	bf08      	it	eq
   1ae30:	6021      	streq	r1, [r4, #0]
   1ae32:	6054      	str	r4, [r2, #4]
   1ae34:	e7c7      	b.n	1adc6 <_free_r+0x26>
   1ae36:	b003      	add	sp, #12
   1ae38:	bd30      	pop	{r4, r5, pc}
   1ae3a:	bf00      	nop
   1ae3c:	20018fe8 	.word	0x20018fe8

0001ae40 <_malloc_r>:
   1ae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ae42:	1ccd      	adds	r5, r1, #3
   1ae44:	4606      	mov	r6, r0
   1ae46:	f025 0503 	bic.w	r5, r5, #3
   1ae4a:	3508      	adds	r5, #8
   1ae4c:	2d0c      	cmp	r5, #12
   1ae4e:	bf38      	it	cc
   1ae50:	250c      	movcc	r5, #12
   1ae52:	2d00      	cmp	r5, #0
   1ae54:	db01      	blt.n	1ae5a <_malloc_r+0x1a>
   1ae56:	42a9      	cmp	r1, r5
   1ae58:	d903      	bls.n	1ae62 <_malloc_r+0x22>
   1ae5a:	230c      	movs	r3, #12
   1ae5c:	6033      	str	r3, [r6, #0]
   1ae5e:	2000      	movs	r0, #0
   1ae60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ae62:	f000 fa55 	bl	1b310 <__malloc_lock>
   1ae66:	4921      	ldr	r1, [pc, #132]	; (1aeec <_malloc_r+0xac>)
   1ae68:	680a      	ldr	r2, [r1, #0]
   1ae6a:	4614      	mov	r4, r2
   1ae6c:	b99c      	cbnz	r4, 1ae96 <_malloc_r+0x56>
   1ae6e:	4f20      	ldr	r7, [pc, #128]	; (1aef0 <_malloc_r+0xb0>)
   1ae70:	683b      	ldr	r3, [r7, #0]
   1ae72:	b923      	cbnz	r3, 1ae7e <_malloc_r+0x3e>
   1ae74:	4621      	mov	r1, r4
   1ae76:	4630      	mov	r0, r6
   1ae78:	f000 f844 	bl	1af04 <_sbrk_r>
   1ae7c:	6038      	str	r0, [r7, #0]
   1ae7e:	4629      	mov	r1, r5
   1ae80:	4630      	mov	r0, r6
   1ae82:	f000 f83f 	bl	1af04 <_sbrk_r>
   1ae86:	1c43      	adds	r3, r0, #1
   1ae88:	d123      	bne.n	1aed2 <_malloc_r+0x92>
   1ae8a:	230c      	movs	r3, #12
   1ae8c:	4630      	mov	r0, r6
   1ae8e:	6033      	str	r3, [r6, #0]
   1ae90:	f000 fa44 	bl	1b31c <__malloc_unlock>
   1ae94:	e7e3      	b.n	1ae5e <_malloc_r+0x1e>
   1ae96:	6823      	ldr	r3, [r4, #0]
   1ae98:	1b5b      	subs	r3, r3, r5
   1ae9a:	d417      	bmi.n	1aecc <_malloc_r+0x8c>
   1ae9c:	2b0b      	cmp	r3, #11
   1ae9e:	d903      	bls.n	1aea8 <_malloc_r+0x68>
   1aea0:	6023      	str	r3, [r4, #0]
   1aea2:	441c      	add	r4, r3
   1aea4:	6025      	str	r5, [r4, #0]
   1aea6:	e004      	b.n	1aeb2 <_malloc_r+0x72>
   1aea8:	6863      	ldr	r3, [r4, #4]
   1aeaa:	42a2      	cmp	r2, r4
   1aeac:	bf0c      	ite	eq
   1aeae:	600b      	streq	r3, [r1, #0]
   1aeb0:	6053      	strne	r3, [r2, #4]
   1aeb2:	4630      	mov	r0, r6
   1aeb4:	f000 fa32 	bl	1b31c <__malloc_unlock>
   1aeb8:	f104 000b 	add.w	r0, r4, #11
   1aebc:	1d23      	adds	r3, r4, #4
   1aebe:	f020 0007 	bic.w	r0, r0, #7
   1aec2:	1ac2      	subs	r2, r0, r3
   1aec4:	d0cc      	beq.n	1ae60 <_malloc_r+0x20>
   1aec6:	1a1b      	subs	r3, r3, r0
   1aec8:	50a3      	str	r3, [r4, r2]
   1aeca:	e7c9      	b.n	1ae60 <_malloc_r+0x20>
   1aecc:	4622      	mov	r2, r4
   1aece:	6864      	ldr	r4, [r4, #4]
   1aed0:	e7cc      	b.n	1ae6c <_malloc_r+0x2c>
   1aed2:	1cc4      	adds	r4, r0, #3
   1aed4:	f024 0403 	bic.w	r4, r4, #3
   1aed8:	42a0      	cmp	r0, r4
   1aeda:	d0e3      	beq.n	1aea4 <_malloc_r+0x64>
   1aedc:	1a21      	subs	r1, r4, r0
   1aede:	4630      	mov	r0, r6
   1aee0:	f000 f810 	bl	1af04 <_sbrk_r>
   1aee4:	3001      	adds	r0, #1
   1aee6:	d1dd      	bne.n	1aea4 <_malloc_r+0x64>
   1aee8:	e7cf      	b.n	1ae8a <_malloc_r+0x4a>
   1aeea:	bf00      	nop
   1aeec:	20018fe8 	.word	0x20018fe8
   1aef0:	20018fec 	.word	0x20018fec

0001aef4 <realloc>:
   1aef4:	4b02      	ldr	r3, [pc, #8]	; (1af00 <realloc+0xc>)
   1aef6:	460a      	mov	r2, r1
   1aef8:	4601      	mov	r1, r0
   1aefa:	6818      	ldr	r0, [r3, #0]
   1aefc:	f005 bc6b 	b.w	207d6 <_realloc_r>
   1af00:	200145ac 	.word	0x200145ac

0001af04 <_sbrk_r>:
   1af04:	b538      	push	{r3, r4, r5, lr}
   1af06:	2300      	movs	r3, #0
   1af08:	4d05      	ldr	r5, [pc, #20]	; (1af20 <_sbrk_r+0x1c>)
   1af0a:	4604      	mov	r4, r0
   1af0c:	4608      	mov	r0, r1
   1af0e:	602b      	str	r3, [r5, #0]
   1af10:	f7f6 ff4a 	bl	11da8 <_sbrk>
   1af14:	1c43      	adds	r3, r0, #1
   1af16:	d102      	bne.n	1af1e <_sbrk_r+0x1a>
   1af18:	682b      	ldr	r3, [r5, #0]
   1af1a:	b103      	cbz	r3, 1af1e <_sbrk_r+0x1a>
   1af1c:	6023      	str	r3, [r4, #0]
   1af1e:	bd38      	pop	{r3, r4, r5, pc}
   1af20:	2001c1c8 	.word	0x2001c1c8

0001af24 <sniprintf>:
   1af24:	b40c      	push	{r2, r3}
   1af26:	4b18      	ldr	r3, [pc, #96]	; (1af88 <sniprintf+0x64>)
   1af28:	b530      	push	{r4, r5, lr}
   1af2a:	1e0c      	subs	r4, r1, #0
   1af2c:	b09d      	sub	sp, #116	; 0x74
   1af2e:	681d      	ldr	r5, [r3, #0]
   1af30:	da08      	bge.n	1af44 <sniprintf+0x20>
   1af32:	238b      	movs	r3, #139	; 0x8b
   1af34:	f04f 30ff 	mov.w	r0, #4294967295
   1af38:	602b      	str	r3, [r5, #0]
   1af3a:	b01d      	add	sp, #116	; 0x74
   1af3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1af40:	b002      	add	sp, #8
   1af42:	4770      	bx	lr
   1af44:	f44f 7302 	mov.w	r3, #520	; 0x208
   1af48:	9002      	str	r0, [sp, #8]
   1af4a:	9006      	str	r0, [sp, #24]
   1af4c:	a902      	add	r1, sp, #8
   1af4e:	f8ad 3014 	strh.w	r3, [sp, #20]
   1af52:	bf14      	ite	ne
   1af54:	f104 33ff 	addne.w	r3, r4, #4294967295
   1af58:	4623      	moveq	r3, r4
   1af5a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1af5c:	4628      	mov	r0, r5
   1af5e:	9304      	str	r3, [sp, #16]
   1af60:	9307      	str	r3, [sp, #28]
   1af62:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1af66:	f8ad 3016 	strh.w	r3, [sp, #22]
   1af6a:	ab21      	add	r3, sp, #132	; 0x84
   1af6c:	9301      	str	r3, [sp, #4]
   1af6e:	f000 f9db 	bl	1b328 <_svfiprintf_r>
   1af72:	1c43      	adds	r3, r0, #1
   1af74:	bfbc      	itt	lt
   1af76:	238b      	movlt	r3, #139	; 0x8b
   1af78:	602b      	strlt	r3, [r5, #0]
   1af7a:	2c00      	cmp	r4, #0
   1af7c:	d0dd      	beq.n	1af3a <sniprintf+0x16>
   1af7e:	9b02      	ldr	r3, [sp, #8]
   1af80:	2200      	movs	r2, #0
   1af82:	701a      	strb	r2, [r3, #0]
   1af84:	e7d9      	b.n	1af3a <sniprintf+0x16>
   1af86:	bf00      	nop
   1af88:	200145ac 	.word	0x200145ac

0001af8c <siprintf>:
   1af8c:	b40e      	push	{r1, r2, r3}
   1af8e:	b500      	push	{lr}
   1af90:	b09c      	sub	sp, #112	; 0x70
   1af92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1af96:	ab1d      	add	r3, sp, #116	; 0x74
   1af98:	9002      	str	r0, [sp, #8]
   1af9a:	9006      	str	r0, [sp, #24]
   1af9c:	9107      	str	r1, [sp, #28]
   1af9e:	9104      	str	r1, [sp, #16]
   1afa0:	4808      	ldr	r0, [pc, #32]	; (1afc4 <siprintf+0x38>)
   1afa2:	4909      	ldr	r1, [pc, #36]	; (1afc8 <siprintf+0x3c>)
   1afa4:	f853 2b04 	ldr.w	r2, [r3], #4
   1afa8:	9105      	str	r1, [sp, #20]
   1afaa:	a902      	add	r1, sp, #8
   1afac:	6800      	ldr	r0, [r0, #0]
   1afae:	9301      	str	r3, [sp, #4]
   1afb0:	f000 f9ba 	bl	1b328 <_svfiprintf_r>
   1afb4:	9b02      	ldr	r3, [sp, #8]
   1afb6:	2200      	movs	r2, #0
   1afb8:	701a      	strb	r2, [r3, #0]
   1afba:	b01c      	add	sp, #112	; 0x70
   1afbc:	f85d eb04 	ldr.w	lr, [sp], #4
   1afc0:	b003      	add	sp, #12
   1afc2:	4770      	bx	lr
   1afc4:	200145ac 	.word	0x200145ac
   1afc8:	ffff0208 	.word	0xffff0208

0001afcc <siscanf>:
   1afcc:	b40e      	push	{r1, r2, r3}
   1afce:	b510      	push	{r4, lr}
   1afd0:	b09f      	sub	sp, #124	; 0x7c
   1afd2:	f44f 7101 	mov.w	r1, #516	; 0x204
   1afd6:	ac21      	add	r4, sp, #132	; 0x84
   1afd8:	f8ad 101c 	strh.w	r1, [sp, #28]
   1afdc:	9004      	str	r0, [sp, #16]
   1afde:	f854 2b04 	ldr.w	r2, [r4], #4
   1afe2:	9008      	str	r0, [sp, #32]
   1afe4:	9201      	str	r2, [sp, #4]
   1afe6:	f7f1 ffa5 	bl	cf34 <strlen>
   1afea:	4b0c      	ldr	r3, [pc, #48]	; (1b01c <siscanf+0x50>)
   1afec:	a904      	add	r1, sp, #16
   1afee:	9005      	str	r0, [sp, #20]
   1aff0:	930d      	str	r3, [sp, #52]	; 0x34
   1aff2:	2300      	movs	r3, #0
   1aff4:	9009      	str	r0, [sp, #36]	; 0x24
   1aff6:	9311      	str	r3, [sp, #68]	; 0x44
   1aff8:	9316      	str	r3, [sp, #88]	; 0x58
   1affa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1affe:	4808      	ldr	r0, [pc, #32]	; (1b020 <siscanf+0x54>)
   1b000:	f8ad 301e 	strh.w	r3, [sp, #30]
   1b004:	4623      	mov	r3, r4
   1b006:	9a01      	ldr	r2, [sp, #4]
   1b008:	6800      	ldr	r0, [r0, #0]
   1b00a:	9403      	str	r4, [sp, #12]
   1b00c:	f000 fa8c 	bl	1b528 <__ssvfiscanf_r>
   1b010:	b01f      	add	sp, #124	; 0x7c
   1b012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b016:	b003      	add	sp, #12
   1b018:	4770      	bx	lr
   1b01a:	bf00      	nop
   1b01c:	00020699 	.word	0x00020699
   1b020:	200145ac 	.word	0x200145ac

0001b024 <_strtol_l.isra.0>:
   1b024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b028:	468c      	mov	ip, r1
   1b02a:	4686      	mov	lr, r0
   1b02c:	4e38      	ldr	r6, [pc, #224]	; (1b110 <_strtol_l.isra.0+0xec>)
   1b02e:	4660      	mov	r0, ip
   1b030:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1b034:	5da5      	ldrb	r5, [r4, r6]
   1b036:	f015 0508 	ands.w	r5, r5, #8
   1b03a:	d1f8      	bne.n	1b02e <_strtol_l.isra.0+0xa>
   1b03c:	2c2d      	cmp	r4, #45	; 0x2d
   1b03e:	d133      	bne.n	1b0a8 <_strtol_l.isra.0+0x84>
   1b040:	f89c 4000 	ldrb.w	r4, [ip]
   1b044:	f04f 0801 	mov.w	r8, #1
   1b048:	f100 0c02 	add.w	ip, r0, #2
   1b04c:	2b00      	cmp	r3, #0
   1b04e:	d05b      	beq.n	1b108 <_strtol_l.isra.0+0xe4>
   1b050:	2b10      	cmp	r3, #16
   1b052:	d10c      	bne.n	1b06e <_strtol_l.isra.0+0x4a>
   1b054:	2c30      	cmp	r4, #48	; 0x30
   1b056:	d10a      	bne.n	1b06e <_strtol_l.isra.0+0x4a>
   1b058:	f89c 0000 	ldrb.w	r0, [ip]
   1b05c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   1b060:	2858      	cmp	r0, #88	; 0x58
   1b062:	d14c      	bne.n	1b0fe <_strtol_l.isra.0+0xda>
   1b064:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1b068:	2310      	movs	r3, #16
   1b06a:	f10c 0c02 	add.w	ip, ip, #2
   1b06e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   1b072:	2600      	movs	r6, #0
   1b074:	3f01      	subs	r7, #1
   1b076:	4630      	mov	r0, r6
   1b078:	fbb7 f9f3 	udiv	r9, r7, r3
   1b07c:	fb03 7a19 	mls	sl, r3, r9, r7
   1b080:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   1b084:	2d09      	cmp	r5, #9
   1b086:	d817      	bhi.n	1b0b8 <_strtol_l.isra.0+0x94>
   1b088:	462c      	mov	r4, r5
   1b08a:	42a3      	cmp	r3, r4
   1b08c:	dd23      	ble.n	1b0d6 <_strtol_l.isra.0+0xb2>
   1b08e:	1c75      	adds	r5, r6, #1
   1b090:	d007      	beq.n	1b0a2 <_strtol_l.isra.0+0x7e>
   1b092:	4581      	cmp	r9, r0
   1b094:	d31c      	bcc.n	1b0d0 <_strtol_l.isra.0+0xac>
   1b096:	d101      	bne.n	1b09c <_strtol_l.isra.0+0x78>
   1b098:	45a2      	cmp	sl, r4
   1b09a:	db19      	blt.n	1b0d0 <_strtol_l.isra.0+0xac>
   1b09c:	fb00 4003 	mla	r0, r0, r3, r4
   1b0a0:	2601      	movs	r6, #1
   1b0a2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1b0a6:	e7eb      	b.n	1b080 <_strtol_l.isra.0+0x5c>
   1b0a8:	2c2b      	cmp	r4, #43	; 0x2b
   1b0aa:	46a8      	mov	r8, r5
   1b0ac:	bf04      	itt	eq
   1b0ae:	f89c 4000 	ldrbeq.w	r4, [ip]
   1b0b2:	f100 0c02 	addeq.w	ip, r0, #2
   1b0b6:	e7c9      	b.n	1b04c <_strtol_l.isra.0+0x28>
   1b0b8:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   1b0bc:	2d19      	cmp	r5, #25
   1b0be:	d801      	bhi.n	1b0c4 <_strtol_l.isra.0+0xa0>
   1b0c0:	3c37      	subs	r4, #55	; 0x37
   1b0c2:	e7e2      	b.n	1b08a <_strtol_l.isra.0+0x66>
   1b0c4:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   1b0c8:	2d19      	cmp	r5, #25
   1b0ca:	d804      	bhi.n	1b0d6 <_strtol_l.isra.0+0xb2>
   1b0cc:	3c57      	subs	r4, #87	; 0x57
   1b0ce:	e7dc      	b.n	1b08a <_strtol_l.isra.0+0x66>
   1b0d0:	f04f 36ff 	mov.w	r6, #4294967295
   1b0d4:	e7e5      	b.n	1b0a2 <_strtol_l.isra.0+0x7e>
   1b0d6:	1c73      	adds	r3, r6, #1
   1b0d8:	d106      	bne.n	1b0e8 <_strtol_l.isra.0+0xc4>
   1b0da:	2322      	movs	r3, #34	; 0x22
   1b0dc:	4638      	mov	r0, r7
   1b0de:	f8ce 3000 	str.w	r3, [lr]
   1b0e2:	b942      	cbnz	r2, 1b0f6 <_strtol_l.isra.0+0xd2>
   1b0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b0e8:	f1b8 0f00 	cmp.w	r8, #0
   1b0ec:	d000      	beq.n	1b0f0 <_strtol_l.isra.0+0xcc>
   1b0ee:	4240      	negs	r0, r0
   1b0f0:	2a00      	cmp	r2, #0
   1b0f2:	d0f7      	beq.n	1b0e4 <_strtol_l.isra.0+0xc0>
   1b0f4:	b10e      	cbz	r6, 1b0fa <_strtol_l.isra.0+0xd6>
   1b0f6:	f10c 31ff 	add.w	r1, ip, #4294967295
   1b0fa:	6011      	str	r1, [r2, #0]
   1b0fc:	e7f2      	b.n	1b0e4 <_strtol_l.isra.0+0xc0>
   1b0fe:	2430      	movs	r4, #48	; 0x30
   1b100:	2b00      	cmp	r3, #0
   1b102:	d1b4      	bne.n	1b06e <_strtol_l.isra.0+0x4a>
   1b104:	2308      	movs	r3, #8
   1b106:	e7b2      	b.n	1b06e <_strtol_l.isra.0+0x4a>
   1b108:	2c30      	cmp	r4, #48	; 0x30
   1b10a:	d0a5      	beq.n	1b058 <_strtol_l.isra.0+0x34>
   1b10c:	230a      	movs	r3, #10
   1b10e:	e7ae      	b.n	1b06e <_strtol_l.isra.0+0x4a>
   1b110:	00023660 	.word	0x00023660

0001b114 <strtol>:
   1b114:	4613      	mov	r3, r2
   1b116:	460a      	mov	r2, r1
   1b118:	4601      	mov	r1, r0
   1b11a:	4802      	ldr	r0, [pc, #8]	; (1b124 <strtol+0x10>)
   1b11c:	6800      	ldr	r0, [r0, #0]
   1b11e:	f7ff bf81 	b.w	1b024 <_strtol_l.isra.0>
   1b122:	bf00      	nop
   1b124:	200145ac 	.word	0x200145ac

0001b128 <_strtoul_l.isra.0>:
   1b128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b12c:	468c      	mov	ip, r1
   1b12e:	4686      	mov	lr, r0
   1b130:	4e39      	ldr	r6, [pc, #228]	; (1b218 <_strtoul_l.isra.0+0xf0>)
   1b132:	4660      	mov	r0, ip
   1b134:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1b138:	5da5      	ldrb	r5, [r4, r6]
   1b13a:	f015 0508 	ands.w	r5, r5, #8
   1b13e:	d1f8      	bne.n	1b132 <_strtoul_l.isra.0+0xa>
   1b140:	2c2d      	cmp	r4, #45	; 0x2d
   1b142:	d134      	bne.n	1b1ae <_strtoul_l.isra.0+0x86>
   1b144:	f89c 4000 	ldrb.w	r4, [ip]
   1b148:	f04f 0801 	mov.w	r8, #1
   1b14c:	f100 0c02 	add.w	ip, r0, #2
   1b150:	2b00      	cmp	r3, #0
   1b152:	d05d      	beq.n	1b210 <_strtoul_l.isra.0+0xe8>
   1b154:	2b10      	cmp	r3, #16
   1b156:	d10c      	bne.n	1b172 <_strtoul_l.isra.0+0x4a>
   1b158:	2c30      	cmp	r4, #48	; 0x30
   1b15a:	d10a      	bne.n	1b172 <_strtoul_l.isra.0+0x4a>
   1b15c:	f89c 0000 	ldrb.w	r0, [ip]
   1b160:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   1b164:	2858      	cmp	r0, #88	; 0x58
   1b166:	d14e      	bne.n	1b206 <_strtoul_l.isra.0+0xde>
   1b168:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1b16c:	2310      	movs	r3, #16
   1b16e:	f10c 0c02 	add.w	ip, ip, #2
   1b172:	f04f 37ff 	mov.w	r7, #4294967295
   1b176:	2500      	movs	r5, #0
   1b178:	fbb7 f7f3 	udiv	r7, r7, r3
   1b17c:	fb03 f907 	mul.w	r9, r3, r7
   1b180:	4628      	mov	r0, r5
   1b182:	ea6f 0909 	mvn.w	r9, r9
   1b186:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   1b18a:	2e09      	cmp	r6, #9
   1b18c:	d817      	bhi.n	1b1be <_strtoul_l.isra.0+0x96>
   1b18e:	4634      	mov	r4, r6
   1b190:	42a3      	cmp	r3, r4
   1b192:	dd23      	ble.n	1b1dc <_strtoul_l.isra.0+0xb4>
   1b194:	2d00      	cmp	r5, #0
   1b196:	db1e      	blt.n	1b1d6 <_strtoul_l.isra.0+0xae>
   1b198:	4287      	cmp	r7, r0
   1b19a:	d31c      	bcc.n	1b1d6 <_strtoul_l.isra.0+0xae>
   1b19c:	d101      	bne.n	1b1a2 <_strtoul_l.isra.0+0x7a>
   1b19e:	45a1      	cmp	r9, r4
   1b1a0:	db19      	blt.n	1b1d6 <_strtoul_l.isra.0+0xae>
   1b1a2:	fb00 4003 	mla	r0, r0, r3, r4
   1b1a6:	2501      	movs	r5, #1
   1b1a8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1b1ac:	e7eb      	b.n	1b186 <_strtoul_l.isra.0+0x5e>
   1b1ae:	2c2b      	cmp	r4, #43	; 0x2b
   1b1b0:	46a8      	mov	r8, r5
   1b1b2:	bf04      	itt	eq
   1b1b4:	f89c 4000 	ldrbeq.w	r4, [ip]
   1b1b8:	f100 0c02 	addeq.w	ip, r0, #2
   1b1bc:	e7c8      	b.n	1b150 <_strtoul_l.isra.0+0x28>
   1b1be:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   1b1c2:	2e19      	cmp	r6, #25
   1b1c4:	d801      	bhi.n	1b1ca <_strtoul_l.isra.0+0xa2>
   1b1c6:	3c37      	subs	r4, #55	; 0x37
   1b1c8:	e7e2      	b.n	1b190 <_strtoul_l.isra.0+0x68>
   1b1ca:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   1b1ce:	2e19      	cmp	r6, #25
   1b1d0:	d804      	bhi.n	1b1dc <_strtoul_l.isra.0+0xb4>
   1b1d2:	3c57      	subs	r4, #87	; 0x57
   1b1d4:	e7dc      	b.n	1b190 <_strtoul_l.isra.0+0x68>
   1b1d6:	f04f 35ff 	mov.w	r5, #4294967295
   1b1da:	e7e5      	b.n	1b1a8 <_strtoul_l.isra.0+0x80>
   1b1dc:	2d00      	cmp	r5, #0
   1b1de:	da07      	bge.n	1b1f0 <_strtoul_l.isra.0+0xc8>
   1b1e0:	2322      	movs	r3, #34	; 0x22
   1b1e2:	f04f 30ff 	mov.w	r0, #4294967295
   1b1e6:	f8ce 3000 	str.w	r3, [lr]
   1b1ea:	b942      	cbnz	r2, 1b1fe <_strtoul_l.isra.0+0xd6>
   1b1ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b1f0:	f1b8 0f00 	cmp.w	r8, #0
   1b1f4:	d000      	beq.n	1b1f8 <_strtoul_l.isra.0+0xd0>
   1b1f6:	4240      	negs	r0, r0
   1b1f8:	2a00      	cmp	r2, #0
   1b1fa:	d0f7      	beq.n	1b1ec <_strtoul_l.isra.0+0xc4>
   1b1fc:	b10d      	cbz	r5, 1b202 <_strtoul_l.isra.0+0xda>
   1b1fe:	f10c 31ff 	add.w	r1, ip, #4294967295
   1b202:	6011      	str	r1, [r2, #0]
   1b204:	e7f2      	b.n	1b1ec <_strtoul_l.isra.0+0xc4>
   1b206:	2430      	movs	r4, #48	; 0x30
   1b208:	2b00      	cmp	r3, #0
   1b20a:	d1b2      	bne.n	1b172 <_strtoul_l.isra.0+0x4a>
   1b20c:	2308      	movs	r3, #8
   1b20e:	e7b0      	b.n	1b172 <_strtoul_l.isra.0+0x4a>
   1b210:	2c30      	cmp	r4, #48	; 0x30
   1b212:	d0a3      	beq.n	1b15c <_strtoul_l.isra.0+0x34>
   1b214:	230a      	movs	r3, #10
   1b216:	e7ac      	b.n	1b172 <_strtoul_l.isra.0+0x4a>
   1b218:	00023660 	.word	0x00023660

0001b21c <strtoul>:
   1b21c:	4613      	mov	r3, r2
   1b21e:	460a      	mov	r2, r1
   1b220:	4601      	mov	r1, r0
   1b222:	4802      	ldr	r0, [pc, #8]	; (1b22c <strtoul+0x10>)
   1b224:	6800      	ldr	r0, [r0, #0]
   1b226:	f7ff bf7f 	b.w	1b128 <_strtoul_l.isra.0>
   1b22a:	bf00      	nop
   1b22c:	200145ac 	.word	0x200145ac

0001b230 <__utoa>:
   1b230:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b232:	4c1f      	ldr	r4, [pc, #124]	; (1b2b0 <__utoa+0x80>)
   1b234:	b08b      	sub	sp, #44	; 0x2c
   1b236:	4605      	mov	r5, r0
   1b238:	460b      	mov	r3, r1
   1b23a:	466e      	mov	r6, sp
   1b23c:	f104 0c20 	add.w	ip, r4, #32
   1b240:	6820      	ldr	r0, [r4, #0]
   1b242:	3408      	adds	r4, #8
   1b244:	f854 1c04 	ldr.w	r1, [r4, #-4]
   1b248:	4637      	mov	r7, r6
   1b24a:	4564      	cmp	r4, ip
   1b24c:	c703      	stmia	r7!, {r0, r1}
   1b24e:	463e      	mov	r6, r7
   1b250:	d1f6      	bne.n	1b240 <__utoa+0x10>
   1b252:	7921      	ldrb	r1, [r4, #4]
   1b254:	6820      	ldr	r0, [r4, #0]
   1b256:	7139      	strb	r1, [r7, #4]
   1b258:	1e91      	subs	r1, r2, #2
   1b25a:	6038      	str	r0, [r7, #0]
   1b25c:	2922      	cmp	r1, #34	; 0x22
   1b25e:	f04f 0100 	mov.w	r1, #0
   1b262:	d904      	bls.n	1b26e <__utoa+0x3e>
   1b264:	7019      	strb	r1, [r3, #0]
   1b266:	460b      	mov	r3, r1
   1b268:	4618      	mov	r0, r3
   1b26a:	b00b      	add	sp, #44	; 0x2c
   1b26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b26e:	1e58      	subs	r0, r3, #1
   1b270:	4684      	mov	ip, r0
   1b272:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1b276:	460c      	mov	r4, r1
   1b278:	3101      	adds	r1, #1
   1b27a:	fbb5 f7f2 	udiv	r7, r5, r2
   1b27e:	fb02 5617 	mls	r6, r2, r7, r5
   1b282:	4476      	add	r6, lr
   1b284:	f816 6c28 	ldrb.w	r6, [r6, #-40]
   1b288:	f80c 6f01 	strb.w	r6, [ip, #1]!
   1b28c:	462e      	mov	r6, r5
   1b28e:	463d      	mov	r5, r7
   1b290:	42b2      	cmp	r2, r6
   1b292:	d9ee      	bls.n	1b272 <__utoa+0x42>
   1b294:	2200      	movs	r2, #0
   1b296:	545a      	strb	r2, [r3, r1]
   1b298:	1919      	adds	r1, r3, r4
   1b29a:	1aa5      	subs	r5, r4, r2
   1b29c:	42aa      	cmp	r2, r5
   1b29e:	dae3      	bge.n	1b268 <__utoa+0x38>
   1b2a0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   1b2a4:	3201      	adds	r2, #1
   1b2a6:	780e      	ldrb	r6, [r1, #0]
   1b2a8:	7006      	strb	r6, [r0, #0]
   1b2aa:	f801 5901 	strb.w	r5, [r1], #-1
   1b2ae:	e7f4      	b.n	1b29a <__utoa+0x6a>
   1b2b0:	00023760 	.word	0x00023760

0001b2b4 <vsniprintf>:
   1b2b4:	b507      	push	{r0, r1, r2, lr}
   1b2b6:	9300      	str	r3, [sp, #0]
   1b2b8:	4613      	mov	r3, r2
   1b2ba:	460a      	mov	r2, r1
   1b2bc:	4601      	mov	r1, r0
   1b2be:	4803      	ldr	r0, [pc, #12]	; (1b2cc <vsniprintf+0x18>)
   1b2c0:	6800      	ldr	r0, [r0, #0]
   1b2c2:	f005 fa5c 	bl	2077e <_vsniprintf_r>
   1b2c6:	b003      	add	sp, #12
   1b2c8:	f85d fb04 	ldr.w	pc, [sp], #4
   1b2cc:	200145ac 	.word	0x200145ac

0001b2d0 <_vsiprintf_r>:
   1b2d0:	b500      	push	{lr}
   1b2d2:	b09b      	sub	sp, #108	; 0x6c
   1b2d4:	9100      	str	r1, [sp, #0]
   1b2d6:	9104      	str	r1, [sp, #16]
   1b2d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b2dc:	9105      	str	r1, [sp, #20]
   1b2de:	9102      	str	r1, [sp, #8]
   1b2e0:	4905      	ldr	r1, [pc, #20]	; (1b2f8 <_vsiprintf_r+0x28>)
   1b2e2:	9103      	str	r1, [sp, #12]
   1b2e4:	4669      	mov	r1, sp
   1b2e6:	f000 f81f 	bl	1b328 <_svfiprintf_r>
   1b2ea:	9b00      	ldr	r3, [sp, #0]
   1b2ec:	2200      	movs	r2, #0
   1b2ee:	701a      	strb	r2, [r3, #0]
   1b2f0:	b01b      	add	sp, #108	; 0x6c
   1b2f2:	f85d fb04 	ldr.w	pc, [sp], #4
   1b2f6:	bf00      	nop
   1b2f8:	ffff0208 	.word	0xffff0208

0001b2fc <vsiprintf>:
   1b2fc:	4613      	mov	r3, r2
   1b2fe:	460a      	mov	r2, r1
   1b300:	4601      	mov	r1, r0
   1b302:	4802      	ldr	r0, [pc, #8]	; (1b30c <vsiprintf+0x10>)
   1b304:	6800      	ldr	r0, [r0, #0]
   1b306:	f7ff bfe3 	b.w	1b2d0 <_vsiprintf_r>
   1b30a:	bf00      	nop
   1b30c:	200145ac 	.word	0x200145ac

0001b310 <__malloc_lock>:
   1b310:	4801      	ldr	r0, [pc, #4]	; (1b318 <__malloc_lock+0x8>)
   1b312:	f005 bc1b 	b.w	20b4c <__retarget_lock_acquire_recursive>
   1b316:	bf00      	nop
   1b318:	2001c1d0 	.word	0x2001c1d0

0001b31c <__malloc_unlock>:
   1b31c:	4801      	ldr	r0, [pc, #4]	; (1b324 <__malloc_unlock+0x8>)
   1b31e:	f005 bc16 	b.w	20b4e <__retarget_lock_release_recursive>
   1b322:	bf00      	nop
   1b324:	2001c1d0 	.word	0x2001c1d0

0001b328 <_svfiprintf_r>:
   1b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b32c:	4698      	mov	r8, r3
   1b32e:	898b      	ldrh	r3, [r1, #12]
   1b330:	b09d      	sub	sp, #116	; 0x74
   1b332:	4607      	mov	r7, r0
   1b334:	061b      	lsls	r3, r3, #24
   1b336:	460d      	mov	r5, r1
   1b338:	4614      	mov	r4, r2
   1b33a:	d50e      	bpl.n	1b35a <_svfiprintf_r+0x32>
   1b33c:	690b      	ldr	r3, [r1, #16]
   1b33e:	b963      	cbnz	r3, 1b35a <_svfiprintf_r+0x32>
   1b340:	2140      	movs	r1, #64	; 0x40
   1b342:	f7ff fd7d 	bl	1ae40 <_malloc_r>
   1b346:	6028      	str	r0, [r5, #0]
   1b348:	6128      	str	r0, [r5, #16]
   1b34a:	b920      	cbnz	r0, 1b356 <_svfiprintf_r+0x2e>
   1b34c:	230c      	movs	r3, #12
   1b34e:	603b      	str	r3, [r7, #0]
   1b350:	f04f 30ff 	mov.w	r0, #4294967295
   1b354:	e0d1      	b.n	1b4fa <_svfiprintf_r+0x1d2>
   1b356:	2340      	movs	r3, #64	; 0x40
   1b358:	616b      	str	r3, [r5, #20]
   1b35a:	2300      	movs	r3, #0
   1b35c:	f8cd 800c 	str.w	r8, [sp, #12]
   1b360:	f04f 0901 	mov.w	r9, #1
   1b364:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 1b514 <_svfiprintf_r+0x1ec>
   1b368:	9309      	str	r3, [sp, #36]	; 0x24
   1b36a:	2320      	movs	r3, #32
   1b36c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1b370:	2330      	movs	r3, #48	; 0x30
   1b372:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1b376:	4623      	mov	r3, r4
   1b378:	469a      	mov	sl, r3
   1b37a:	f813 2b01 	ldrb.w	r2, [r3], #1
   1b37e:	b10a      	cbz	r2, 1b384 <_svfiprintf_r+0x5c>
   1b380:	2a25      	cmp	r2, #37	; 0x25
   1b382:	d1f9      	bne.n	1b378 <_svfiprintf_r+0x50>
   1b384:	ebba 0b04 	subs.w	fp, sl, r4
   1b388:	d00b      	beq.n	1b3a2 <_svfiprintf_r+0x7a>
   1b38a:	465b      	mov	r3, fp
   1b38c:	4622      	mov	r2, r4
   1b38e:	4629      	mov	r1, r5
   1b390:	4638      	mov	r0, r7
   1b392:	f005 fa46 	bl	20822 <__ssputs_r>
   1b396:	3001      	adds	r0, #1
   1b398:	f000 80aa 	beq.w	1b4f0 <_svfiprintf_r+0x1c8>
   1b39c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b39e:	445a      	add	r2, fp
   1b3a0:	9209      	str	r2, [sp, #36]	; 0x24
   1b3a2:	f89a 3000 	ldrb.w	r3, [sl]
   1b3a6:	2b00      	cmp	r3, #0
   1b3a8:	f000 80a2 	beq.w	1b4f0 <_svfiprintf_r+0x1c8>
   1b3ac:	2300      	movs	r3, #0
   1b3ae:	f04f 32ff 	mov.w	r2, #4294967295
   1b3b2:	f10a 0a01 	add.w	sl, sl, #1
   1b3b6:	9304      	str	r3, [sp, #16]
   1b3b8:	9307      	str	r3, [sp, #28]
   1b3ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1b3be:	931a      	str	r3, [sp, #104]	; 0x68
   1b3c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1b3c4:	4654      	mov	r4, sl
   1b3c6:	2205      	movs	r2, #5
   1b3c8:	4852      	ldr	r0, [pc, #328]	; (1b514 <_svfiprintf_r+0x1ec>)
   1b3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b3ce:	f005 f918 	bl	20602 <memchr>
   1b3d2:	9a04      	ldr	r2, [sp, #16]
   1b3d4:	b9d8      	cbnz	r0, 1b40e <_svfiprintf_r+0xe6>
   1b3d6:	06d0      	lsls	r0, r2, #27
   1b3d8:	bf44      	itt	mi
   1b3da:	2320      	movmi	r3, #32
   1b3dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1b3e0:	0711      	lsls	r1, r2, #28
   1b3e2:	bf44      	itt	mi
   1b3e4:	232b      	movmi	r3, #43	; 0x2b
   1b3e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1b3ea:	f89a 3000 	ldrb.w	r3, [sl]
   1b3ee:	2b2a      	cmp	r3, #42	; 0x2a
   1b3f0:	d015      	beq.n	1b41e <_svfiprintf_r+0xf6>
   1b3f2:	9a07      	ldr	r2, [sp, #28]
   1b3f4:	4654      	mov	r4, sl
   1b3f6:	2000      	movs	r0, #0
   1b3f8:	f04f 0c0a 	mov.w	ip, #10
   1b3fc:	4621      	mov	r1, r4
   1b3fe:	f811 3b01 	ldrb.w	r3, [r1], #1
   1b402:	3b30      	subs	r3, #48	; 0x30
   1b404:	2b09      	cmp	r3, #9
   1b406:	d94e      	bls.n	1b4a6 <_svfiprintf_r+0x17e>
   1b408:	b1b0      	cbz	r0, 1b438 <_svfiprintf_r+0x110>
   1b40a:	9207      	str	r2, [sp, #28]
   1b40c:	e014      	b.n	1b438 <_svfiprintf_r+0x110>
   1b40e:	eba0 0308 	sub.w	r3, r0, r8
   1b412:	46a2      	mov	sl, r4
   1b414:	fa09 f303 	lsl.w	r3, r9, r3
   1b418:	4313      	orrs	r3, r2
   1b41a:	9304      	str	r3, [sp, #16]
   1b41c:	e7d2      	b.n	1b3c4 <_svfiprintf_r+0x9c>
   1b41e:	9b03      	ldr	r3, [sp, #12]
   1b420:	1d19      	adds	r1, r3, #4
   1b422:	681b      	ldr	r3, [r3, #0]
   1b424:	2b00      	cmp	r3, #0
   1b426:	9103      	str	r1, [sp, #12]
   1b428:	bfbb      	ittet	lt
   1b42a:	425b      	neglt	r3, r3
   1b42c:	f042 0202 	orrlt.w	r2, r2, #2
   1b430:	9307      	strge	r3, [sp, #28]
   1b432:	9307      	strlt	r3, [sp, #28]
   1b434:	bfb8      	it	lt
   1b436:	9204      	strlt	r2, [sp, #16]
   1b438:	7823      	ldrb	r3, [r4, #0]
   1b43a:	2b2e      	cmp	r3, #46	; 0x2e
   1b43c:	d10c      	bne.n	1b458 <_svfiprintf_r+0x130>
   1b43e:	7863      	ldrb	r3, [r4, #1]
   1b440:	2b2a      	cmp	r3, #42	; 0x2a
   1b442:	d135      	bne.n	1b4b0 <_svfiprintf_r+0x188>
   1b444:	9b03      	ldr	r3, [sp, #12]
   1b446:	3402      	adds	r4, #2
   1b448:	1d1a      	adds	r2, r3, #4
   1b44a:	681b      	ldr	r3, [r3, #0]
   1b44c:	2b00      	cmp	r3, #0
   1b44e:	9203      	str	r2, [sp, #12]
   1b450:	bfb8      	it	lt
   1b452:	f04f 33ff 	movlt.w	r3, #4294967295
   1b456:	9305      	str	r3, [sp, #20]
   1b458:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1b524 <_svfiprintf_r+0x1fc>
   1b45c:	2203      	movs	r2, #3
   1b45e:	7821      	ldrb	r1, [r4, #0]
   1b460:	4650      	mov	r0, sl
   1b462:	f005 f8ce 	bl	20602 <memchr>
   1b466:	b140      	cbz	r0, 1b47a <_svfiprintf_r+0x152>
   1b468:	2340      	movs	r3, #64	; 0x40
   1b46a:	eba0 000a 	sub.w	r0, r0, sl
   1b46e:	3401      	adds	r4, #1
   1b470:	fa03 f000 	lsl.w	r0, r3, r0
   1b474:	9b04      	ldr	r3, [sp, #16]
   1b476:	4303      	orrs	r3, r0
   1b478:	9304      	str	r3, [sp, #16]
   1b47a:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b47e:	2206      	movs	r2, #6
   1b480:	4825      	ldr	r0, [pc, #148]	; (1b518 <_svfiprintf_r+0x1f0>)
   1b482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1b486:	f005 f8bc 	bl	20602 <memchr>
   1b48a:	2800      	cmp	r0, #0
   1b48c:	d038      	beq.n	1b500 <_svfiprintf_r+0x1d8>
   1b48e:	4b23      	ldr	r3, [pc, #140]	; (1b51c <_svfiprintf_r+0x1f4>)
   1b490:	bb1b      	cbnz	r3, 1b4da <_svfiprintf_r+0x1b2>
   1b492:	9b03      	ldr	r3, [sp, #12]
   1b494:	3307      	adds	r3, #7
   1b496:	f023 0307 	bic.w	r3, r3, #7
   1b49a:	3308      	adds	r3, #8
   1b49c:	9303      	str	r3, [sp, #12]
   1b49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b4a0:	4433      	add	r3, r6
   1b4a2:	9309      	str	r3, [sp, #36]	; 0x24
   1b4a4:	e767      	b.n	1b376 <_svfiprintf_r+0x4e>
   1b4a6:	fb0c 3202 	mla	r2, ip, r2, r3
   1b4aa:	460c      	mov	r4, r1
   1b4ac:	2001      	movs	r0, #1
   1b4ae:	e7a5      	b.n	1b3fc <_svfiprintf_r+0xd4>
   1b4b0:	2300      	movs	r3, #0
   1b4b2:	3401      	adds	r4, #1
   1b4b4:	f04f 0c0a 	mov.w	ip, #10
   1b4b8:	4619      	mov	r1, r3
   1b4ba:	9305      	str	r3, [sp, #20]
   1b4bc:	4620      	mov	r0, r4
   1b4be:	f810 2b01 	ldrb.w	r2, [r0], #1
   1b4c2:	3a30      	subs	r2, #48	; 0x30
   1b4c4:	2a09      	cmp	r2, #9
   1b4c6:	d903      	bls.n	1b4d0 <_svfiprintf_r+0x1a8>
   1b4c8:	2b00      	cmp	r3, #0
   1b4ca:	d0c5      	beq.n	1b458 <_svfiprintf_r+0x130>
   1b4cc:	9105      	str	r1, [sp, #20]
   1b4ce:	e7c3      	b.n	1b458 <_svfiprintf_r+0x130>
   1b4d0:	fb0c 2101 	mla	r1, ip, r1, r2
   1b4d4:	4604      	mov	r4, r0
   1b4d6:	2301      	movs	r3, #1
   1b4d8:	e7f0      	b.n	1b4bc <_svfiprintf_r+0x194>
   1b4da:	ab03      	add	r3, sp, #12
   1b4dc:	462a      	mov	r2, r5
   1b4de:	a904      	add	r1, sp, #16
   1b4e0:	4638      	mov	r0, r7
   1b4e2:	9300      	str	r3, [sp, #0]
   1b4e4:	4b0e      	ldr	r3, [pc, #56]	; (1b520 <_svfiprintf_r+0x1f8>)
   1b4e6:	e000      	b.n	1b4ea <_svfiprintf_r+0x1c2>
   1b4e8:	bf00      	nop
   1b4ea:	1c42      	adds	r2, r0, #1
   1b4ec:	4606      	mov	r6, r0
   1b4ee:	d1d6      	bne.n	1b49e <_svfiprintf_r+0x176>
   1b4f0:	89ab      	ldrh	r3, [r5, #12]
   1b4f2:	065b      	lsls	r3, r3, #25
   1b4f4:	f53f af2c 	bmi.w	1b350 <_svfiprintf_r+0x28>
   1b4f8:	9809      	ldr	r0, [sp, #36]	; 0x24
   1b4fa:	b01d      	add	sp, #116	; 0x74
   1b4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b500:	ab03      	add	r3, sp, #12
   1b502:	462a      	mov	r2, r5
   1b504:	a904      	add	r1, sp, #16
   1b506:	4638      	mov	r0, r7
   1b508:	9300      	str	r3, [sp, #0]
   1b50a:	4b05      	ldr	r3, [pc, #20]	; (1b520 <_svfiprintf_r+0x1f8>)
   1b50c:	f000 f988 	bl	1b820 <_printf_i>
   1b510:	e7eb      	b.n	1b4ea <_svfiprintf_r+0x1c2>
   1b512:	bf00      	nop
   1b514:	00023785 	.word	0x00023785
   1b518:	0002378f 	.word	0x0002378f
   1b51c:	00000000 	.word	0x00000000
   1b520:	00020823 	.word	0x00020823
   1b524:	0002378b 	.word	0x0002378b

0001b528 <__ssvfiscanf_r>:
   1b528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b52c:	460c      	mov	r4, r1
   1b52e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   1b532:	2100      	movs	r1, #0
   1b534:	4606      	mov	r6, r0
   1b536:	f10d 0804 	add.w	r8, sp, #4
   1b53a:	4fb4      	ldr	r7, [pc, #720]	; (1b80c <__ssvfiscanf_r+0x2e4>)
   1b53c:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 1b818 <__ssvfiscanf_r+0x2f0>
   1b540:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   1b544:	9300      	str	r3, [sp, #0]
   1b546:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   1b54a:	49b1      	ldr	r1, [pc, #708]	; (1b810 <__ssvfiscanf_r+0x2e8>)
   1b54c:	91a0      	str	r1, [sp, #640]	; 0x280
   1b54e:	49b1      	ldr	r1, [pc, #708]	; (1b814 <__ssvfiscanf_r+0x2ec>)
   1b550:	91a1      	str	r1, [sp, #644]	; 0x284
   1b552:	f892 a000 	ldrb.w	sl, [r2]
   1b556:	f1ba 0f00 	cmp.w	sl, #0
   1b55a:	f000 8154 	beq.w	1b806 <__ssvfiscanf_r+0x2de>
   1b55e:	f81a 3007 	ldrb.w	r3, [sl, r7]
   1b562:	1c55      	adds	r5, r2, #1
   1b564:	f013 0308 	ands.w	r3, r3, #8
   1b568:	d019      	beq.n	1b59e <__ssvfiscanf_r+0x76>
   1b56a:	6863      	ldr	r3, [r4, #4]
   1b56c:	2b00      	cmp	r3, #0
   1b56e:	dd0f      	ble.n	1b590 <__ssvfiscanf_r+0x68>
   1b570:	6823      	ldr	r3, [r4, #0]
   1b572:	781a      	ldrb	r2, [r3, #0]
   1b574:	5cba      	ldrb	r2, [r7, r2]
   1b576:	0712      	lsls	r2, r2, #28
   1b578:	d401      	bmi.n	1b57e <__ssvfiscanf_r+0x56>
   1b57a:	462a      	mov	r2, r5
   1b57c:	e7e9      	b.n	1b552 <__ssvfiscanf_r+0x2a>
   1b57e:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1b580:	3301      	adds	r3, #1
   1b582:	3201      	adds	r2, #1
   1b584:	6023      	str	r3, [r4, #0]
   1b586:	9245      	str	r2, [sp, #276]	; 0x114
   1b588:	6862      	ldr	r2, [r4, #4]
   1b58a:	3a01      	subs	r2, #1
   1b58c:	6062      	str	r2, [r4, #4]
   1b58e:	e7ec      	b.n	1b56a <__ssvfiscanf_r+0x42>
   1b590:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1b592:	4621      	mov	r1, r4
   1b594:	4630      	mov	r0, r6
   1b596:	4798      	blx	r3
   1b598:	2800      	cmp	r0, #0
   1b59a:	d0e9      	beq.n	1b570 <__ssvfiscanf_r+0x48>
   1b59c:	e7ed      	b.n	1b57a <__ssvfiscanf_r+0x52>
   1b59e:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   1b5a2:	f040 8086 	bne.w	1b6b2 <__ssvfiscanf_r+0x18a>
   1b5a6:	9341      	str	r3, [sp, #260]	; 0x104
   1b5a8:	9343      	str	r3, [sp, #268]	; 0x10c
   1b5aa:	7853      	ldrb	r3, [r2, #1]
   1b5ac:	2b2a      	cmp	r3, #42	; 0x2a
   1b5ae:	bf04      	itt	eq
   1b5b0:	2310      	moveq	r3, #16
   1b5b2:	1c95      	addeq	r5, r2, #2
   1b5b4:	f04f 020a 	mov.w	r2, #10
   1b5b8:	bf08      	it	eq
   1b5ba:	9341      	streq	r3, [sp, #260]	; 0x104
   1b5bc:	46ab      	mov	fp, r5
   1b5be:	f81b 1b01 	ldrb.w	r1, [fp], #1
   1b5c2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1b5c6:	2b09      	cmp	r3, #9
   1b5c8:	d91d      	bls.n	1b606 <__ssvfiscanf_r+0xde>
   1b5ca:	2203      	movs	r2, #3
   1b5cc:	4892      	ldr	r0, [pc, #584]	; (1b818 <__ssvfiscanf_r+0x2f0>)
   1b5ce:	f005 f818 	bl	20602 <memchr>
   1b5d2:	b140      	cbz	r0, 1b5e6 <__ssvfiscanf_r+0xbe>
   1b5d4:	2301      	movs	r3, #1
   1b5d6:	eba0 0009 	sub.w	r0, r0, r9
   1b5da:	465d      	mov	r5, fp
   1b5dc:	fa03 f000 	lsl.w	r0, r3, r0
   1b5e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1b5e2:	4318      	orrs	r0, r3
   1b5e4:	9041      	str	r0, [sp, #260]	; 0x104
   1b5e6:	f815 3b01 	ldrb.w	r3, [r5], #1
   1b5ea:	2b78      	cmp	r3, #120	; 0x78
   1b5ec:	d806      	bhi.n	1b5fc <__ssvfiscanf_r+0xd4>
   1b5ee:	2b57      	cmp	r3, #87	; 0x57
   1b5f0:	d810      	bhi.n	1b614 <__ssvfiscanf_r+0xec>
   1b5f2:	2b25      	cmp	r3, #37	; 0x25
   1b5f4:	d05d      	beq.n	1b6b2 <__ssvfiscanf_r+0x18a>
   1b5f6:	d857      	bhi.n	1b6a8 <__ssvfiscanf_r+0x180>
   1b5f8:	2b00      	cmp	r3, #0
   1b5fa:	d075      	beq.n	1b6e8 <__ssvfiscanf_r+0x1c0>
   1b5fc:	2303      	movs	r3, #3
   1b5fe:	9347      	str	r3, [sp, #284]	; 0x11c
   1b600:	230a      	movs	r3, #10
   1b602:	9342      	str	r3, [sp, #264]	; 0x108
   1b604:	e082      	b.n	1b70c <__ssvfiscanf_r+0x1e4>
   1b606:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   1b608:	465d      	mov	r5, fp
   1b60a:	fb02 1303 	mla	r3, r2, r3, r1
   1b60e:	3b30      	subs	r3, #48	; 0x30
   1b610:	9343      	str	r3, [sp, #268]	; 0x10c
   1b612:	e7d3      	b.n	1b5bc <__ssvfiscanf_r+0x94>
   1b614:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   1b618:	2a20      	cmp	r2, #32
   1b61a:	d8ef      	bhi.n	1b5fc <__ssvfiscanf_r+0xd4>
   1b61c:	a101      	add	r1, pc, #4	; (adr r1, 1b624 <__ssvfiscanf_r+0xfc>)
   1b61e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1b622:	bf00      	nop
   1b624:	0001b6f7 	.word	0x0001b6f7
   1b628:	0001b5fd 	.word	0x0001b5fd
   1b62c:	0001b5fd 	.word	0x0001b5fd
   1b630:	0001b755 	.word	0x0001b755
   1b634:	0001b5fd 	.word	0x0001b5fd
   1b638:	0001b5fd 	.word	0x0001b5fd
   1b63c:	0001b5fd 	.word	0x0001b5fd
   1b640:	0001b5fd 	.word	0x0001b5fd
   1b644:	0001b5fd 	.word	0x0001b5fd
   1b648:	0001b5fd 	.word	0x0001b5fd
   1b64c:	0001b5fd 	.word	0x0001b5fd
   1b650:	0001b76b 	.word	0x0001b76b
   1b654:	0001b741 	.word	0x0001b741
   1b658:	0001b6af 	.word	0x0001b6af
   1b65c:	0001b6af 	.word	0x0001b6af
   1b660:	0001b6af 	.word	0x0001b6af
   1b664:	0001b5fd 	.word	0x0001b5fd
   1b668:	0001b745 	.word	0x0001b745
   1b66c:	0001b5fd 	.word	0x0001b5fd
   1b670:	0001b5fd 	.word	0x0001b5fd
   1b674:	0001b5fd 	.word	0x0001b5fd
   1b678:	0001b5fd 	.word	0x0001b5fd
   1b67c:	0001b77b 	.word	0x0001b77b
   1b680:	0001b74d 	.word	0x0001b74d
   1b684:	0001b6ef 	.word	0x0001b6ef
   1b688:	0001b5fd 	.word	0x0001b5fd
   1b68c:	0001b5fd 	.word	0x0001b5fd
   1b690:	0001b777 	.word	0x0001b777
   1b694:	0001b5fd 	.word	0x0001b5fd
   1b698:	0001b741 	.word	0x0001b741
   1b69c:	0001b5fd 	.word	0x0001b5fd
   1b6a0:	0001b5fd 	.word	0x0001b5fd
   1b6a4:	0001b6f7 	.word	0x0001b6f7
   1b6a8:	3b45      	subs	r3, #69	; 0x45
   1b6aa:	2b02      	cmp	r3, #2
   1b6ac:	d8a6      	bhi.n	1b5fc <__ssvfiscanf_r+0xd4>
   1b6ae:	2305      	movs	r3, #5
   1b6b0:	e02b      	b.n	1b70a <__ssvfiscanf_r+0x1e2>
   1b6b2:	6863      	ldr	r3, [r4, #4]
   1b6b4:	2b00      	cmp	r3, #0
   1b6b6:	dd0d      	ble.n	1b6d4 <__ssvfiscanf_r+0x1ac>
   1b6b8:	6823      	ldr	r3, [r4, #0]
   1b6ba:	781a      	ldrb	r2, [r3, #0]
   1b6bc:	4552      	cmp	r2, sl
   1b6be:	f040 80a2 	bne.w	1b806 <__ssvfiscanf_r+0x2de>
   1b6c2:	3301      	adds	r3, #1
   1b6c4:	6862      	ldr	r2, [r4, #4]
   1b6c6:	6023      	str	r3, [r4, #0]
   1b6c8:	3a01      	subs	r2, #1
   1b6ca:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1b6cc:	6062      	str	r2, [r4, #4]
   1b6ce:	3301      	adds	r3, #1
   1b6d0:	9345      	str	r3, [sp, #276]	; 0x114
   1b6d2:	e752      	b.n	1b57a <__ssvfiscanf_r+0x52>
   1b6d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1b6d6:	4621      	mov	r1, r4
   1b6d8:	4630      	mov	r0, r6
   1b6da:	4798      	blx	r3
   1b6dc:	2800      	cmp	r0, #0
   1b6de:	d0eb      	beq.n	1b6b8 <__ssvfiscanf_r+0x190>
   1b6e0:	9844      	ldr	r0, [sp, #272]	; 0x110
   1b6e2:	2800      	cmp	r0, #0
   1b6e4:	f040 8085 	bne.w	1b7f2 <__ssvfiscanf_r+0x2ca>
   1b6e8:	f04f 30ff 	mov.w	r0, #4294967295
   1b6ec:	e087      	b.n	1b7fe <__ssvfiscanf_r+0x2d6>
   1b6ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1b6f0:	f042 0220 	orr.w	r2, r2, #32
   1b6f4:	9241      	str	r2, [sp, #260]	; 0x104
   1b6f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1b6f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1b6fc:	9241      	str	r2, [sp, #260]	; 0x104
   1b6fe:	2210      	movs	r2, #16
   1b700:	2b6f      	cmp	r3, #111	; 0x6f
   1b702:	9242      	str	r2, [sp, #264]	; 0x108
   1b704:	bf34      	ite	cc
   1b706:	2303      	movcc	r3, #3
   1b708:	2304      	movcs	r3, #4
   1b70a:	9347      	str	r3, [sp, #284]	; 0x11c
   1b70c:	6863      	ldr	r3, [r4, #4]
   1b70e:	2b00      	cmp	r3, #0
   1b710:	dd42      	ble.n	1b798 <__ssvfiscanf_r+0x270>
   1b712:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1b714:	0659      	lsls	r1, r3, #25
   1b716:	d404      	bmi.n	1b722 <__ssvfiscanf_r+0x1fa>
   1b718:	6823      	ldr	r3, [r4, #0]
   1b71a:	781a      	ldrb	r2, [r3, #0]
   1b71c:	5cba      	ldrb	r2, [r7, r2]
   1b71e:	0712      	lsls	r2, r2, #28
   1b720:	d441      	bmi.n	1b7a6 <__ssvfiscanf_r+0x27e>
   1b722:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   1b724:	2b02      	cmp	r3, #2
   1b726:	dc50      	bgt.n	1b7ca <__ssvfiscanf_r+0x2a2>
   1b728:	466b      	mov	r3, sp
   1b72a:	4622      	mov	r2, r4
   1b72c:	a941      	add	r1, sp, #260	; 0x104
   1b72e:	4630      	mov	r0, r6
   1b730:	f000 f99c 	bl	1ba6c <_scanf_chars>
   1b734:	2801      	cmp	r0, #1
   1b736:	d066      	beq.n	1b806 <__ssvfiscanf_r+0x2de>
   1b738:	2802      	cmp	r0, #2
   1b73a:	f47f af1e 	bne.w	1b57a <__ssvfiscanf_r+0x52>
   1b73e:	e7cf      	b.n	1b6e0 <__ssvfiscanf_r+0x1b8>
   1b740:	220a      	movs	r2, #10
   1b742:	e7dd      	b.n	1b700 <__ssvfiscanf_r+0x1d8>
   1b744:	2300      	movs	r3, #0
   1b746:	9342      	str	r3, [sp, #264]	; 0x108
   1b748:	2303      	movs	r3, #3
   1b74a:	e7de      	b.n	1b70a <__ssvfiscanf_r+0x1e2>
   1b74c:	2308      	movs	r3, #8
   1b74e:	9342      	str	r3, [sp, #264]	; 0x108
   1b750:	2304      	movs	r3, #4
   1b752:	e7da      	b.n	1b70a <__ssvfiscanf_r+0x1e2>
   1b754:	4629      	mov	r1, r5
   1b756:	4640      	mov	r0, r8
   1b758:	f005 f988 	bl	20a6c <__sccl>
   1b75c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1b75e:	4605      	mov	r5, r0
   1b760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b764:	9341      	str	r3, [sp, #260]	; 0x104
   1b766:	2301      	movs	r3, #1
   1b768:	e7cf      	b.n	1b70a <__ssvfiscanf_r+0x1e2>
   1b76a:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1b76c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b770:	9341      	str	r3, [sp, #260]	; 0x104
   1b772:	2300      	movs	r3, #0
   1b774:	e7c9      	b.n	1b70a <__ssvfiscanf_r+0x1e2>
   1b776:	2302      	movs	r3, #2
   1b778:	e7c7      	b.n	1b70a <__ssvfiscanf_r+0x1e2>
   1b77a:	9841      	ldr	r0, [sp, #260]	; 0x104
   1b77c:	06c3      	lsls	r3, r0, #27
   1b77e:	f53f aefc 	bmi.w	1b57a <__ssvfiscanf_r+0x52>
   1b782:	9b00      	ldr	r3, [sp, #0]
   1b784:	07c0      	lsls	r0, r0, #31
   1b786:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1b788:	f103 0104 	add.w	r1, r3, #4
   1b78c:	9100      	str	r1, [sp, #0]
   1b78e:	681b      	ldr	r3, [r3, #0]
   1b790:	bf4c      	ite	mi
   1b792:	801a      	strhmi	r2, [r3, #0]
   1b794:	601a      	strpl	r2, [r3, #0]
   1b796:	e6f0      	b.n	1b57a <__ssvfiscanf_r+0x52>
   1b798:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1b79a:	4621      	mov	r1, r4
   1b79c:	4630      	mov	r0, r6
   1b79e:	4798      	blx	r3
   1b7a0:	2800      	cmp	r0, #0
   1b7a2:	d0b6      	beq.n	1b712 <__ssvfiscanf_r+0x1ea>
   1b7a4:	e79c      	b.n	1b6e0 <__ssvfiscanf_r+0x1b8>
   1b7a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1b7a8:	3201      	adds	r2, #1
   1b7aa:	9245      	str	r2, [sp, #276]	; 0x114
   1b7ac:	6862      	ldr	r2, [r4, #4]
   1b7ae:	3a01      	subs	r2, #1
   1b7b0:	2a00      	cmp	r2, #0
   1b7b2:	6062      	str	r2, [r4, #4]
   1b7b4:	dd02      	ble.n	1b7bc <__ssvfiscanf_r+0x294>
   1b7b6:	3301      	adds	r3, #1
   1b7b8:	6023      	str	r3, [r4, #0]
   1b7ba:	e7ad      	b.n	1b718 <__ssvfiscanf_r+0x1f0>
   1b7bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1b7be:	4621      	mov	r1, r4
   1b7c0:	4630      	mov	r0, r6
   1b7c2:	4798      	blx	r3
   1b7c4:	2800      	cmp	r0, #0
   1b7c6:	d0a7      	beq.n	1b718 <__ssvfiscanf_r+0x1f0>
   1b7c8:	e78a      	b.n	1b6e0 <__ssvfiscanf_r+0x1b8>
   1b7ca:	2b04      	cmp	r3, #4
   1b7cc:	dc06      	bgt.n	1b7dc <__ssvfiscanf_r+0x2b4>
   1b7ce:	466b      	mov	r3, sp
   1b7d0:	4622      	mov	r2, r4
   1b7d2:	a941      	add	r1, sp, #260	; 0x104
   1b7d4:	4630      	mov	r0, r6
   1b7d6:	f000 f9a1 	bl	1bb1c <_scanf_i>
   1b7da:	e7ab      	b.n	1b734 <__ssvfiscanf_r+0x20c>
   1b7dc:	4b0f      	ldr	r3, [pc, #60]	; (1b81c <__ssvfiscanf_r+0x2f4>)
   1b7de:	2b00      	cmp	r3, #0
   1b7e0:	f43f aecb 	beq.w	1b57a <__ssvfiscanf_r+0x52>
   1b7e4:	466b      	mov	r3, sp
   1b7e6:	4622      	mov	r2, r4
   1b7e8:	a941      	add	r1, sp, #260	; 0x104
   1b7ea:	4630      	mov	r0, r6
   1b7ec:	e000      	b.n	1b7f0 <__ssvfiscanf_r+0x2c8>
   1b7ee:	bf00      	nop
   1b7f0:	e7a0      	b.n	1b734 <__ssvfiscanf_r+0x20c>
   1b7f2:	89a3      	ldrh	r3, [r4, #12]
   1b7f4:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b7f8:	bf18      	it	ne
   1b7fa:	f04f 30ff 	movne.w	r0, #4294967295
   1b7fe:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   1b802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b806:	9844      	ldr	r0, [sp, #272]	; 0x110
   1b808:	e7f9      	b.n	1b7fe <__ssvfiscanf_r+0x2d6>
   1b80a:	bf00      	nop
   1b80c:	00023660 	.word	0x00023660
   1b810:	000208d9 	.word	0x000208d9
   1b814:	00020953 	.word	0x00020953
   1b818:	0002378b 	.word	0x0002378b
   1b81c:	00000000 	.word	0x00000000

0001b820 <_printf_i>:
   1b820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1b824:	460c      	mov	r4, r1
   1b826:	4691      	mov	r9, r2
   1b828:	4680      	mov	r8, r0
   1b82a:	469a      	mov	sl, r3
   1b82c:	7e27      	ldrb	r7, [r4, #24]
   1b82e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1b832:	990c      	ldr	r1, [sp, #48]	; 0x30
   1b834:	2f78      	cmp	r7, #120	; 0x78
   1b836:	d807      	bhi.n	1b848 <_printf_i+0x28>
   1b838:	2f62      	cmp	r7, #98	; 0x62
   1b83a:	d80a      	bhi.n	1b852 <_printf_i+0x32>
   1b83c:	2f00      	cmp	r7, #0
   1b83e:	f000 80d8 	beq.w	1b9f2 <_printf_i+0x1d2>
   1b842:	2f58      	cmp	r7, #88	; 0x58
   1b844:	f000 80a3 	beq.w	1b98e <_printf_i+0x16e>
   1b848:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1b84c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1b850:	e03a      	b.n	1b8c8 <_printf_i+0xa8>
   1b852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1b856:	2b15      	cmp	r3, #21
   1b858:	d8f6      	bhi.n	1b848 <_printf_i+0x28>
   1b85a:	a001      	add	r0, pc, #4	; (adr r0, 1b860 <_printf_i+0x40>)
   1b85c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1b860:	0001b8b9 	.word	0x0001b8b9
   1b864:	0001b8cd 	.word	0x0001b8cd
   1b868:	0001b849 	.word	0x0001b849
   1b86c:	0001b849 	.word	0x0001b849
   1b870:	0001b849 	.word	0x0001b849
   1b874:	0001b849 	.word	0x0001b849
   1b878:	0001b8cd 	.word	0x0001b8cd
   1b87c:	0001b849 	.word	0x0001b849
   1b880:	0001b849 	.word	0x0001b849
   1b884:	0001b849 	.word	0x0001b849
   1b888:	0001b849 	.word	0x0001b849
   1b88c:	0001b9d9 	.word	0x0001b9d9
   1b890:	0001b8fd 	.word	0x0001b8fd
   1b894:	0001b9bb 	.word	0x0001b9bb
   1b898:	0001b849 	.word	0x0001b849
   1b89c:	0001b849 	.word	0x0001b849
   1b8a0:	0001b9fb 	.word	0x0001b9fb
   1b8a4:	0001b849 	.word	0x0001b849
   1b8a8:	0001b8fd 	.word	0x0001b8fd
   1b8ac:	0001b849 	.word	0x0001b849
   1b8b0:	0001b849 	.word	0x0001b849
   1b8b4:	0001b9c3 	.word	0x0001b9c3
   1b8b8:	680b      	ldr	r3, [r1, #0]
   1b8ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1b8be:	1d1a      	adds	r2, r3, #4
   1b8c0:	681b      	ldr	r3, [r3, #0]
   1b8c2:	600a      	str	r2, [r1, #0]
   1b8c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1b8c8:	2301      	movs	r3, #1
   1b8ca:	e0a3      	b.n	1ba14 <_printf_i+0x1f4>
   1b8cc:	6825      	ldr	r5, [r4, #0]
   1b8ce:	6808      	ldr	r0, [r1, #0]
   1b8d0:	062e      	lsls	r6, r5, #24
   1b8d2:	f100 0304 	add.w	r3, r0, #4
   1b8d6:	d50a      	bpl.n	1b8ee <_printf_i+0xce>
   1b8d8:	6805      	ldr	r5, [r0, #0]
   1b8da:	600b      	str	r3, [r1, #0]
   1b8dc:	2d00      	cmp	r5, #0
   1b8de:	da03      	bge.n	1b8e8 <_printf_i+0xc8>
   1b8e0:	232d      	movs	r3, #45	; 0x2d
   1b8e2:	426d      	negs	r5, r5
   1b8e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1b8e8:	485e      	ldr	r0, [pc, #376]	; (1ba64 <_printf_i+0x244>)
   1b8ea:	230a      	movs	r3, #10
   1b8ec:	e019      	b.n	1b922 <_printf_i+0x102>
   1b8ee:	f015 0f40 	tst.w	r5, #64	; 0x40
   1b8f2:	6805      	ldr	r5, [r0, #0]
   1b8f4:	600b      	str	r3, [r1, #0]
   1b8f6:	bf18      	it	ne
   1b8f8:	b22d      	sxthne	r5, r5
   1b8fa:	e7ef      	b.n	1b8dc <_printf_i+0xbc>
   1b8fc:	680b      	ldr	r3, [r1, #0]
   1b8fe:	6825      	ldr	r5, [r4, #0]
   1b900:	1d18      	adds	r0, r3, #4
   1b902:	6008      	str	r0, [r1, #0]
   1b904:	0628      	lsls	r0, r5, #24
   1b906:	d501      	bpl.n	1b90c <_printf_i+0xec>
   1b908:	681d      	ldr	r5, [r3, #0]
   1b90a:	e002      	b.n	1b912 <_printf_i+0xf2>
   1b90c:	0669      	lsls	r1, r5, #25
   1b90e:	d5fb      	bpl.n	1b908 <_printf_i+0xe8>
   1b910:	881d      	ldrh	r5, [r3, #0]
   1b912:	2f6f      	cmp	r7, #111	; 0x6f
   1b914:	4853      	ldr	r0, [pc, #332]	; (1ba64 <_printf_i+0x244>)
   1b916:	bf0c      	ite	eq
   1b918:	2308      	moveq	r3, #8
   1b91a:	230a      	movne	r3, #10
   1b91c:	2100      	movs	r1, #0
   1b91e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1b922:	6866      	ldr	r6, [r4, #4]
   1b924:	2e00      	cmp	r6, #0
   1b926:	60a6      	str	r6, [r4, #8]
   1b928:	bfa2      	ittt	ge
   1b92a:	6821      	ldrge	r1, [r4, #0]
   1b92c:	f021 0104 	bicge.w	r1, r1, #4
   1b930:	6021      	strge	r1, [r4, #0]
   1b932:	b90d      	cbnz	r5, 1b938 <_printf_i+0x118>
   1b934:	2e00      	cmp	r6, #0
   1b936:	d04d      	beq.n	1b9d4 <_printf_i+0x1b4>
   1b938:	4616      	mov	r6, r2
   1b93a:	fbb5 f1f3 	udiv	r1, r5, r3
   1b93e:	fb03 5711 	mls	r7, r3, r1, r5
   1b942:	5dc7      	ldrb	r7, [r0, r7]
   1b944:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1b948:	462f      	mov	r7, r5
   1b94a:	460d      	mov	r5, r1
   1b94c:	42bb      	cmp	r3, r7
   1b94e:	d9f4      	bls.n	1b93a <_printf_i+0x11a>
   1b950:	2b08      	cmp	r3, #8
   1b952:	d10b      	bne.n	1b96c <_printf_i+0x14c>
   1b954:	6823      	ldr	r3, [r4, #0]
   1b956:	07df      	lsls	r7, r3, #31
   1b958:	d508      	bpl.n	1b96c <_printf_i+0x14c>
   1b95a:	6923      	ldr	r3, [r4, #16]
   1b95c:	6861      	ldr	r1, [r4, #4]
   1b95e:	4299      	cmp	r1, r3
   1b960:	bfde      	ittt	le
   1b962:	2330      	movle	r3, #48	; 0x30
   1b964:	f806 3c01 	strble.w	r3, [r6, #-1]
   1b968:	f106 36ff 	addle.w	r6, r6, #4294967295
   1b96c:	1b92      	subs	r2, r2, r6
   1b96e:	6122      	str	r2, [r4, #16]
   1b970:	464b      	mov	r3, r9
   1b972:	aa03      	add	r2, sp, #12
   1b974:	4621      	mov	r1, r4
   1b976:	4640      	mov	r0, r8
   1b978:	f8cd a000 	str.w	sl, [sp]
   1b97c:	f005 f806 	bl	2098c <_printf_common>
   1b980:	3001      	adds	r0, #1
   1b982:	d14c      	bne.n	1ba1e <_printf_i+0x1fe>
   1b984:	f04f 30ff 	mov.w	r0, #4294967295
   1b988:	b004      	add	sp, #16
   1b98a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b98e:	4835      	ldr	r0, [pc, #212]	; (1ba64 <_printf_i+0x244>)
   1b990:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   1b994:	6823      	ldr	r3, [r4, #0]
   1b996:	680e      	ldr	r6, [r1, #0]
   1b998:	061f      	lsls	r7, r3, #24
   1b99a:	f856 5b04 	ldr.w	r5, [r6], #4
   1b99e:	600e      	str	r6, [r1, #0]
   1b9a0:	d514      	bpl.n	1b9cc <_printf_i+0x1ac>
   1b9a2:	07d9      	lsls	r1, r3, #31
   1b9a4:	bf44      	itt	mi
   1b9a6:	f043 0320 	orrmi.w	r3, r3, #32
   1b9aa:	6023      	strmi	r3, [r4, #0]
   1b9ac:	b91d      	cbnz	r5, 1b9b6 <_printf_i+0x196>
   1b9ae:	6823      	ldr	r3, [r4, #0]
   1b9b0:	f023 0320 	bic.w	r3, r3, #32
   1b9b4:	6023      	str	r3, [r4, #0]
   1b9b6:	2310      	movs	r3, #16
   1b9b8:	e7b0      	b.n	1b91c <_printf_i+0xfc>
   1b9ba:	6823      	ldr	r3, [r4, #0]
   1b9bc:	f043 0320 	orr.w	r3, r3, #32
   1b9c0:	6023      	str	r3, [r4, #0]
   1b9c2:	2378      	movs	r3, #120	; 0x78
   1b9c4:	4828      	ldr	r0, [pc, #160]	; (1ba68 <_printf_i+0x248>)
   1b9c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   1b9ca:	e7e3      	b.n	1b994 <_printf_i+0x174>
   1b9cc:	065e      	lsls	r6, r3, #25
   1b9ce:	bf48      	it	mi
   1b9d0:	b2ad      	uxthmi	r5, r5
   1b9d2:	e7e6      	b.n	1b9a2 <_printf_i+0x182>
   1b9d4:	4616      	mov	r6, r2
   1b9d6:	e7bb      	b.n	1b950 <_printf_i+0x130>
   1b9d8:	680b      	ldr	r3, [r1, #0]
   1b9da:	6826      	ldr	r6, [r4, #0]
   1b9dc:	1d1d      	adds	r5, r3, #4
   1b9de:	6960      	ldr	r0, [r4, #20]
   1b9e0:	600d      	str	r5, [r1, #0]
   1b9e2:	0635      	lsls	r5, r6, #24
   1b9e4:	681b      	ldr	r3, [r3, #0]
   1b9e6:	d501      	bpl.n	1b9ec <_printf_i+0x1cc>
   1b9e8:	6018      	str	r0, [r3, #0]
   1b9ea:	e002      	b.n	1b9f2 <_printf_i+0x1d2>
   1b9ec:	0671      	lsls	r1, r6, #25
   1b9ee:	d5fb      	bpl.n	1b9e8 <_printf_i+0x1c8>
   1b9f0:	8018      	strh	r0, [r3, #0]
   1b9f2:	2300      	movs	r3, #0
   1b9f4:	4616      	mov	r6, r2
   1b9f6:	6123      	str	r3, [r4, #16]
   1b9f8:	e7ba      	b.n	1b970 <_printf_i+0x150>
   1b9fa:	680b      	ldr	r3, [r1, #0]
   1b9fc:	1d1a      	adds	r2, r3, #4
   1b9fe:	600a      	str	r2, [r1, #0]
   1ba00:	2100      	movs	r1, #0
   1ba02:	681e      	ldr	r6, [r3, #0]
   1ba04:	6862      	ldr	r2, [r4, #4]
   1ba06:	4630      	mov	r0, r6
   1ba08:	f004 fdfb 	bl	20602 <memchr>
   1ba0c:	b108      	cbz	r0, 1ba12 <_printf_i+0x1f2>
   1ba0e:	1b80      	subs	r0, r0, r6
   1ba10:	6060      	str	r0, [r4, #4]
   1ba12:	6863      	ldr	r3, [r4, #4]
   1ba14:	6123      	str	r3, [r4, #16]
   1ba16:	2300      	movs	r3, #0
   1ba18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1ba1c:	e7a8      	b.n	1b970 <_printf_i+0x150>
   1ba1e:	6923      	ldr	r3, [r4, #16]
   1ba20:	4632      	mov	r2, r6
   1ba22:	4649      	mov	r1, r9
   1ba24:	4640      	mov	r0, r8
   1ba26:	47d0      	blx	sl
   1ba28:	3001      	adds	r0, #1
   1ba2a:	d0ab      	beq.n	1b984 <_printf_i+0x164>
   1ba2c:	6823      	ldr	r3, [r4, #0]
   1ba2e:	079b      	lsls	r3, r3, #30
   1ba30:	d413      	bmi.n	1ba5a <_printf_i+0x23a>
   1ba32:	68e0      	ldr	r0, [r4, #12]
   1ba34:	9b03      	ldr	r3, [sp, #12]
   1ba36:	4298      	cmp	r0, r3
   1ba38:	bfb8      	it	lt
   1ba3a:	4618      	movlt	r0, r3
   1ba3c:	e7a4      	b.n	1b988 <_printf_i+0x168>
   1ba3e:	2301      	movs	r3, #1
   1ba40:	4632      	mov	r2, r6
   1ba42:	4649      	mov	r1, r9
   1ba44:	4640      	mov	r0, r8
   1ba46:	47d0      	blx	sl
   1ba48:	3001      	adds	r0, #1
   1ba4a:	d09b      	beq.n	1b984 <_printf_i+0x164>
   1ba4c:	3501      	adds	r5, #1
   1ba4e:	68e3      	ldr	r3, [r4, #12]
   1ba50:	9903      	ldr	r1, [sp, #12]
   1ba52:	1a5b      	subs	r3, r3, r1
   1ba54:	42ab      	cmp	r3, r5
   1ba56:	dcf2      	bgt.n	1ba3e <_printf_i+0x21e>
   1ba58:	e7eb      	b.n	1ba32 <_printf_i+0x212>
   1ba5a:	2500      	movs	r5, #0
   1ba5c:	f104 0619 	add.w	r6, r4, #25
   1ba60:	e7f5      	b.n	1ba4e <_printf_i+0x22e>
   1ba62:	bf00      	nop
   1ba64:	00023796 	.word	0x00023796
   1ba68:	000237a7 	.word	0x000237a7

0001ba6c <_scanf_chars>:
   1ba6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ba70:	4615      	mov	r5, r2
   1ba72:	688a      	ldr	r2, [r1, #8]
   1ba74:	4680      	mov	r8, r0
   1ba76:	460c      	mov	r4, r1
   1ba78:	b932      	cbnz	r2, 1ba88 <_scanf_chars+0x1c>
   1ba7a:	698a      	ldr	r2, [r1, #24]
   1ba7c:	2a00      	cmp	r2, #0
   1ba7e:	bf0c      	ite	eq
   1ba80:	2201      	moveq	r2, #1
   1ba82:	f04f 32ff 	movne.w	r2, #4294967295
   1ba86:	608a      	str	r2, [r1, #8]
   1ba88:	6822      	ldr	r2, [r4, #0]
   1ba8a:	2700      	movs	r7, #0
   1ba8c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1bb18 <_scanf_chars+0xac>
   1ba90:	06d1      	lsls	r1, r2, #27
   1ba92:	bf5f      	itttt	pl
   1ba94:	681a      	ldrpl	r2, [r3, #0]
   1ba96:	1d11      	addpl	r1, r2, #4
   1ba98:	6019      	strpl	r1, [r3, #0]
   1ba9a:	6816      	ldrpl	r6, [r2, #0]
   1ba9c:	69a0      	ldr	r0, [r4, #24]
   1ba9e:	b188      	cbz	r0, 1bac4 <_scanf_chars+0x58>
   1baa0:	2801      	cmp	r0, #1
   1baa2:	d107      	bne.n	1bab4 <_scanf_chars+0x48>
   1baa4:	682b      	ldr	r3, [r5, #0]
   1baa6:	781a      	ldrb	r2, [r3, #0]
   1baa8:	6963      	ldr	r3, [r4, #20]
   1baaa:	5c9b      	ldrb	r3, [r3, r2]
   1baac:	b953      	cbnz	r3, 1bac4 <_scanf_chars+0x58>
   1baae:	bb27      	cbnz	r7, 1bafa <_scanf_chars+0x8e>
   1bab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1bab4:	2802      	cmp	r0, #2
   1bab6:	d120      	bne.n	1bafa <_scanf_chars+0x8e>
   1bab8:	682b      	ldr	r3, [r5, #0]
   1baba:	781b      	ldrb	r3, [r3, #0]
   1babc:	f813 3009 	ldrb.w	r3, [r3, r9]
   1bac0:	071b      	lsls	r3, r3, #28
   1bac2:	d41a      	bmi.n	1bafa <_scanf_chars+0x8e>
   1bac4:	6823      	ldr	r3, [r4, #0]
   1bac6:	3701      	adds	r7, #1
   1bac8:	06da      	lsls	r2, r3, #27
   1baca:	bf5e      	ittt	pl
   1bacc:	682b      	ldrpl	r3, [r5, #0]
   1bace:	781b      	ldrbpl	r3, [r3, #0]
   1bad0:	f806 3b01 	strbpl.w	r3, [r6], #1
   1bad4:	682a      	ldr	r2, [r5, #0]
   1bad6:	686b      	ldr	r3, [r5, #4]
   1bad8:	3201      	adds	r2, #1
   1bada:	3b01      	subs	r3, #1
   1badc:	602a      	str	r2, [r5, #0]
   1bade:	68a2      	ldr	r2, [r4, #8]
   1bae0:	606b      	str	r3, [r5, #4]
   1bae2:	3a01      	subs	r2, #1
   1bae4:	60a2      	str	r2, [r4, #8]
   1bae6:	b142      	cbz	r2, 1bafa <_scanf_chars+0x8e>
   1bae8:	2b00      	cmp	r3, #0
   1baea:	dcd7      	bgt.n	1ba9c <_scanf_chars+0x30>
   1baec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   1baf0:	4629      	mov	r1, r5
   1baf2:	4640      	mov	r0, r8
   1baf4:	4798      	blx	r3
   1baf6:	2800      	cmp	r0, #0
   1baf8:	d0d0      	beq.n	1ba9c <_scanf_chars+0x30>
   1bafa:	6823      	ldr	r3, [r4, #0]
   1bafc:	f013 0310 	ands.w	r3, r3, #16
   1bb00:	d105      	bne.n	1bb0e <_scanf_chars+0xa2>
   1bb02:	68e2      	ldr	r2, [r4, #12]
   1bb04:	3201      	adds	r2, #1
   1bb06:	60e2      	str	r2, [r4, #12]
   1bb08:	69a2      	ldr	r2, [r4, #24]
   1bb0a:	b102      	cbz	r2, 1bb0e <_scanf_chars+0xa2>
   1bb0c:	7033      	strb	r3, [r6, #0]
   1bb0e:	6923      	ldr	r3, [r4, #16]
   1bb10:	2000      	movs	r0, #0
   1bb12:	441f      	add	r7, r3
   1bb14:	6127      	str	r7, [r4, #16]
   1bb16:	e7cb      	b.n	1bab0 <_scanf_chars+0x44>
   1bb18:	00023660 	.word	0x00023660

0001bb1c <_scanf_i>:
   1bb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb20:	4698      	mov	r8, r3
   1bb22:	b087      	sub	sp, #28
   1bb24:	4b72      	ldr	r3, [pc, #456]	; (1bcf0 <_scanf_i+0x1d4>)
   1bb26:	460c      	mov	r4, r1
   1bb28:	4682      	mov	sl, r0
   1bb2a:	4616      	mov	r6, r2
   1bb2c:	4627      	mov	r7, r4
   1bb2e:	f04f 0b00 	mov.w	fp, #0
   1bb32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1bb36:	ab03      	add	r3, sp, #12
   1bb38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   1bb3c:	4b6d      	ldr	r3, [pc, #436]	; (1bcf4 <_scanf_i+0x1d8>)
   1bb3e:	69a1      	ldr	r1, [r4, #24]
   1bb40:	4a6d      	ldr	r2, [pc, #436]	; (1bcf8 <_scanf_i+0x1dc>)
   1bb42:	2903      	cmp	r1, #3
   1bb44:	bf18      	it	ne
   1bb46:	461a      	movne	r2, r3
   1bb48:	68a3      	ldr	r3, [r4, #8]
   1bb4a:	9201      	str	r2, [sp, #4]
   1bb4c:	1e5a      	subs	r2, r3, #1
   1bb4e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   1bb52:	bf89      	itett	hi
   1bb54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   1bb58:	f04f 0900 	movls.w	r9, #0
   1bb5c:	eb03 0905 	addhi.w	r9, r3, r5
   1bb60:	f240 135d 	movwhi	r3, #349	; 0x15d
   1bb64:	bf88      	it	hi
   1bb66:	60a3      	strhi	r3, [r4, #8]
   1bb68:	f857 3b1c 	ldr.w	r3, [r7], #28
   1bb6c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   1bb70:	463d      	mov	r5, r7
   1bb72:	6023      	str	r3, [r4, #0]
   1bb74:	6831      	ldr	r1, [r6, #0]
   1bb76:	ab03      	add	r3, sp, #12
   1bb78:	2202      	movs	r2, #2
   1bb7a:	7809      	ldrb	r1, [r1, #0]
   1bb7c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   1bb80:	f004 fd3f 	bl	20602 <memchr>
   1bb84:	b328      	cbz	r0, 1bbd2 <_scanf_i+0xb6>
   1bb86:	f1bb 0f01 	cmp.w	fp, #1
   1bb8a:	d159      	bne.n	1bc40 <_scanf_i+0x124>
   1bb8c:	6862      	ldr	r2, [r4, #4]
   1bb8e:	b92a      	cbnz	r2, 1bb9c <_scanf_i+0x80>
   1bb90:	6822      	ldr	r2, [r4, #0]
   1bb92:	2308      	movs	r3, #8
   1bb94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1bb98:	6063      	str	r3, [r4, #4]
   1bb9a:	6022      	str	r2, [r4, #0]
   1bb9c:	6822      	ldr	r2, [r4, #0]
   1bb9e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   1bba2:	6022      	str	r2, [r4, #0]
   1bba4:	68a2      	ldr	r2, [r4, #8]
   1bba6:	1e51      	subs	r1, r2, #1
   1bba8:	60a1      	str	r1, [r4, #8]
   1bbaa:	b192      	cbz	r2, 1bbd2 <_scanf_i+0xb6>
   1bbac:	6832      	ldr	r2, [r6, #0]
   1bbae:	1c51      	adds	r1, r2, #1
   1bbb0:	6031      	str	r1, [r6, #0]
   1bbb2:	7812      	ldrb	r2, [r2, #0]
   1bbb4:	f805 2b01 	strb.w	r2, [r5], #1
   1bbb8:	6872      	ldr	r2, [r6, #4]
   1bbba:	3a01      	subs	r2, #1
   1bbbc:	2a00      	cmp	r2, #0
   1bbbe:	6072      	str	r2, [r6, #4]
   1bbc0:	dc07      	bgt.n	1bbd2 <_scanf_i+0xb6>
   1bbc2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   1bbc6:	4631      	mov	r1, r6
   1bbc8:	4650      	mov	r0, sl
   1bbca:	4790      	blx	r2
   1bbcc:	2800      	cmp	r0, #0
   1bbce:	f040 8085 	bne.w	1bcdc <_scanf_i+0x1c0>
   1bbd2:	f10b 0b01 	add.w	fp, fp, #1
   1bbd6:	f1bb 0f03 	cmp.w	fp, #3
   1bbda:	d1cb      	bne.n	1bb74 <_scanf_i+0x58>
   1bbdc:	6863      	ldr	r3, [r4, #4]
   1bbde:	b90b      	cbnz	r3, 1bbe4 <_scanf_i+0xc8>
   1bbe0:	230a      	movs	r3, #10
   1bbe2:	6063      	str	r3, [r4, #4]
   1bbe4:	6863      	ldr	r3, [r4, #4]
   1bbe6:	f04f 0b00 	mov.w	fp, #0
   1bbea:	4944      	ldr	r1, [pc, #272]	; (1bcfc <_scanf_i+0x1e0>)
   1bbec:	6960      	ldr	r0, [r4, #20]
   1bbee:	1ac9      	subs	r1, r1, r3
   1bbf0:	f004 ff3c 	bl	20a6c <__sccl>
   1bbf4:	68a3      	ldr	r3, [r4, #8]
   1bbf6:	6822      	ldr	r2, [r4, #0]
   1bbf8:	2b00      	cmp	r3, #0
   1bbfa:	d03d      	beq.n	1bc78 <_scanf_i+0x15c>
   1bbfc:	6831      	ldr	r1, [r6, #0]
   1bbfe:	6960      	ldr	r0, [r4, #20]
   1bc00:	f891 c000 	ldrb.w	ip, [r1]
   1bc04:	f810 000c 	ldrb.w	r0, [r0, ip]
   1bc08:	2800      	cmp	r0, #0
   1bc0a:	d035      	beq.n	1bc78 <_scanf_i+0x15c>
   1bc0c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   1bc10:	d124      	bne.n	1bc5c <_scanf_i+0x140>
   1bc12:	0510      	lsls	r0, r2, #20
   1bc14:	d522      	bpl.n	1bc5c <_scanf_i+0x140>
   1bc16:	f10b 0b01 	add.w	fp, fp, #1
   1bc1a:	f1b9 0f00 	cmp.w	r9, #0
   1bc1e:	d003      	beq.n	1bc28 <_scanf_i+0x10c>
   1bc20:	3301      	adds	r3, #1
   1bc22:	f109 39ff 	add.w	r9, r9, #4294967295
   1bc26:	60a3      	str	r3, [r4, #8]
   1bc28:	6873      	ldr	r3, [r6, #4]
   1bc2a:	3b01      	subs	r3, #1
   1bc2c:	2b00      	cmp	r3, #0
   1bc2e:	6073      	str	r3, [r6, #4]
   1bc30:	dd1b      	ble.n	1bc6a <_scanf_i+0x14e>
   1bc32:	6833      	ldr	r3, [r6, #0]
   1bc34:	3301      	adds	r3, #1
   1bc36:	6033      	str	r3, [r6, #0]
   1bc38:	68a3      	ldr	r3, [r4, #8]
   1bc3a:	3b01      	subs	r3, #1
   1bc3c:	60a3      	str	r3, [r4, #8]
   1bc3e:	e7d9      	b.n	1bbf4 <_scanf_i+0xd8>
   1bc40:	f1bb 0f02 	cmp.w	fp, #2
   1bc44:	d1ae      	bne.n	1bba4 <_scanf_i+0x88>
   1bc46:	6822      	ldr	r2, [r4, #0]
   1bc48:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   1bc4c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1bc50:	d1bf      	bne.n	1bbd2 <_scanf_i+0xb6>
   1bc52:	2310      	movs	r3, #16
   1bc54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1bc58:	6063      	str	r3, [r4, #4]
   1bc5a:	e7a2      	b.n	1bba2 <_scanf_i+0x86>
   1bc5c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   1bc60:	6022      	str	r2, [r4, #0]
   1bc62:	780b      	ldrb	r3, [r1, #0]
   1bc64:	f805 3b01 	strb.w	r3, [r5], #1
   1bc68:	e7de      	b.n	1bc28 <_scanf_i+0x10c>
   1bc6a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   1bc6e:	4631      	mov	r1, r6
   1bc70:	4650      	mov	r0, sl
   1bc72:	4798      	blx	r3
   1bc74:	2800      	cmp	r0, #0
   1bc76:	d0df      	beq.n	1bc38 <_scanf_i+0x11c>
   1bc78:	6823      	ldr	r3, [r4, #0]
   1bc7a:	05d9      	lsls	r1, r3, #23
   1bc7c:	d50d      	bpl.n	1bc9a <_scanf_i+0x17e>
   1bc7e:	42bd      	cmp	r5, r7
   1bc80:	d909      	bls.n	1bc96 <_scanf_i+0x17a>
   1bc82:	f105 39ff 	add.w	r9, r5, #4294967295
   1bc86:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1bc8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   1bc8e:	4632      	mov	r2, r6
   1bc90:	464d      	mov	r5, r9
   1bc92:	4650      	mov	r0, sl
   1bc94:	4798      	blx	r3
   1bc96:	42bd      	cmp	r5, r7
   1bc98:	d028      	beq.n	1bcec <_scanf_i+0x1d0>
   1bc9a:	6822      	ldr	r2, [r4, #0]
   1bc9c:	f012 0210 	ands.w	r2, r2, #16
   1bca0:	d113      	bne.n	1bcca <_scanf_i+0x1ae>
   1bca2:	702a      	strb	r2, [r5, #0]
   1bca4:	4639      	mov	r1, r7
   1bca6:	6863      	ldr	r3, [r4, #4]
   1bca8:	4650      	mov	r0, sl
   1bcaa:	9e01      	ldr	r6, [sp, #4]
   1bcac:	47b0      	blx	r6
   1bcae:	f8d8 3000 	ldr.w	r3, [r8]
   1bcb2:	6821      	ldr	r1, [r4, #0]
   1bcb4:	1d1a      	adds	r2, r3, #4
   1bcb6:	f011 0f20 	tst.w	r1, #32
   1bcba:	f8c8 2000 	str.w	r2, [r8]
   1bcbe:	681b      	ldr	r3, [r3, #0]
   1bcc0:	d00f      	beq.n	1bce2 <_scanf_i+0x1c6>
   1bcc2:	6018      	str	r0, [r3, #0]
   1bcc4:	68e3      	ldr	r3, [r4, #12]
   1bcc6:	3301      	adds	r3, #1
   1bcc8:	60e3      	str	r3, [r4, #12]
   1bcca:	1bed      	subs	r5, r5, r7
   1bccc:	2000      	movs	r0, #0
   1bcce:	44ab      	add	fp, r5
   1bcd0:	6925      	ldr	r5, [r4, #16]
   1bcd2:	445d      	add	r5, fp
   1bcd4:	6125      	str	r5, [r4, #16]
   1bcd6:	b007      	add	sp, #28
   1bcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcdc:	f04f 0b00 	mov.w	fp, #0
   1bce0:	e7ca      	b.n	1bc78 <_scanf_i+0x15c>
   1bce2:	07ca      	lsls	r2, r1, #31
   1bce4:	bf4c      	ite	mi
   1bce6:	8018      	strhmi	r0, [r3, #0]
   1bce8:	6018      	strpl	r0, [r3, #0]
   1bcea:	e7eb      	b.n	1bcc4 <_scanf_i+0x1a8>
   1bcec:	2001      	movs	r0, #1
   1bcee:	e7f2      	b.n	1bcd6 <_scanf_i+0x1ba>
   1bcf0:	00020f28 	.word	0x00020f28
   1bcf4:	0002077b 	.word	0x0002077b
   1bcf8:	00020777 	.word	0x00020777
   1bcfc:	000237d1 	.word	0x000237d1

0001bd00 <dn_write_uint32_t>:
   ptr[1]     = (val>>0)  & 0xff;
}

void dn_write_uint32_t(uint8_t* ptr, uint32_t val){ 
  // MSP430 is a little-endian platform
   ptr[0]     = (val>>24) & 0xff;
   1bd00:	0e0b      	lsrs	r3, r1, #24
   1bd02:	7003      	strb	r3, [r0, #0]
   ptr[1]     = (val>>16) & 0xff;
   1bd04:	0c0b      	lsrs	r3, r1, #16
   1bd06:	7043      	strb	r3, [r0, #1]
   ptr[2]     = (val>>8)  & 0xff;
   1bd08:	0a0b      	lsrs	r3, r1, #8
   1bd0a:	7083      	strb	r3, [r0, #2]
   ptr[3]     = (val>>0)  & 0xff;
   1bd0c:	70c1      	strb	r1, [r0, #3]
}
   1bd0e:	4770      	bx	lr

0001bd10 <dn_read_uint16_t>:

void dn_read_uint16_t(uint16_t* to, uint8_t* from){
   // MSP430 is a little-endian platform
   *to        = 0;
   1bd10:	2300      	movs	r3, #0
   1bd12:	8003      	strh	r3, [r0, #0]
   *to       |= (from[1]<<0);
   1bd14:	784b      	ldrb	r3, [r1, #1]
   1bd16:	8003      	strh	r3, [r0, #0]
   *to       |= (from[0]<<8);
   1bd18:	780a      	ldrb	r2, [r1, #0]
   1bd1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1bd1e:	8003      	strh	r3, [r0, #0]
}
   1bd20:	4770      	bx	lr

0001bd22 <dn_read_uint32_t>:

void dn_read_uint32_t(uint32_t* to, uint8_t* from){
   // MSP430 is a little-endian platform
   *to        = 0;
   1bd22:	2300      	movs	r3, #0
   1bd24:	6003      	str	r3, [r0, #0]
   *to       |= ( ((uint32_t)from[3])<<0 );
   1bd26:	78cb      	ldrb	r3, [r1, #3]
   1bd28:	6003      	str	r3, [r0, #0]
   *to       |= ( ((uint32_t)from[2])<<8 );
   1bd2a:	788a      	ldrb	r2, [r1, #2]
   1bd2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1bd30:	6003      	str	r3, [r0, #0]
   *to       |= ( ((uint32_t)from[1])<<16);
   1bd32:	784a      	ldrb	r2, [r1, #1]
   1bd34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1bd38:	6003      	str	r3, [r0, #0]
   *to       |= ( ((uint32_t)from[0])<<24);
   1bd3a:	780a      	ldrb	r2, [r1, #0]
   1bd3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1bd40:	6003      	str	r3, [r0, #0]
}
   1bd42:	4770      	bx	lr

0001bd44 <dn_ipmg_initiateConnect>:
dn_err_t dn_ipmg_initiateConnect() {
   1bd44:	b507      	push	{r0, r1, r2, lr}
   dn_lock();
   1bd46:	f000 f809 	bl	1bd5c <dn_lock>
   rc = dn_serial_mg_initiateConnect();
   1bd4a:	f7f2 f831 	bl	ddb0 <dn_serial_mg_initiateConnect>
   1bd4e:	9001      	str	r0, [sp, #4]
   dn_unlock();
   1bd50:	f000 f805 	bl	1bd5e <dn_unlock>
}
   1bd54:	9801      	ldr	r0, [sp, #4]
   1bd56:	b003      	add	sp, #12
   1bd58:	f85d fb04 	ldr.w	pc, [sp], #4

0001bd5c <dn_lock>:

//=========================== public ==========================================

void dn_lock() {
   // this sample is single threaded, no need to lock.
}
   1bd5c:	4770      	bx	lr

0001bd5e <dn_unlock>:
   1bd5e:	4770      	bx	lr

0001bd60 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1bd60:	b140      	cbz	r0, 1bd74 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1bd62:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1bd64:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1bd68:	2b02      	cmp	r3, #2
   1bd6a:	d006      	beq.n	1bd7a <sys_notify_validate+0x1a>
   1bd6c:	2b03      	cmp	r3, #3
   1bd6e:	d004      	beq.n	1bd7a <sys_notify_validate+0x1a>
   1bd70:	2b01      	cmp	r3, #1
   1bd72:	d005      	beq.n	1bd80 <sys_notify_validate+0x20>
		return -EINVAL;
   1bd74:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1bd78:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1bd7a:	6803      	ldr	r3, [r0, #0]
   1bd7c:	2b00      	cmp	r3, #0
   1bd7e:	d0f9      	beq.n	1bd74 <sys_notify_validate+0x14>
		notify->result = 0;
   1bd80:	2300      	movs	r3, #0
   1bd82:	6083      	str	r3, [r0, #8]
   1bd84:	4618      	mov	r0, r3
   1bd86:	4770      	bx	lr

0001bd88 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1bd88:	6843      	ldr	r3, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1bd8a:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   1bd8c:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1bd90:	2b02      	cmp	r3, #2
	notify->result = res;
   1bd92:	6081      	str	r1, [r0, #8]
	switch (method) {
   1bd94:	d00b      	beq.n	1bdae <sys_notify_finalize+0x26>
   1bd96:	2b03      	cmp	r3, #3
   1bd98:	d10c      	bne.n	1bdb4 <sys_notify_finalize+0x2c>
	struct k_poll_signal *sig = NULL;
   1bd9a:	2300      	movs	r3, #0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1bd9c:	6804      	ldr	r4, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1bd9e:	2200      	movs	r2, #0
   1bda0:	6042      	str	r2, [r0, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1bda2:	b113      	cbz	r3, 1bdaa <sys_notify_finalize+0x22>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   1bda4:	4618      	mov	r0, r3
   1bda6:	f7fe ffa1 	bl	1acec <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1bdaa:	4620      	mov	r0, r4
   1bdac:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = 0;
   1bdae:	2400      	movs	r4, #0
		sig = notify->method.signal;
   1bdb0:	6803      	ldr	r3, [r0, #0]
		break;
   1bdb2:	e7f4      	b.n	1bd9e <sys_notify_finalize+0x16>
	switch (method) {
   1bdb4:	2400      	movs	r4, #0
   1bdb6:	4623      	mov	r3, r4
   1bdb8:	e7f1      	b.n	1bd9e <sys_notify_finalize+0x16>

0001bdba <arch_printk_char_out>:
}
   1bdba:	2000      	movs	r0, #0
   1bdbc:	4770      	bx	lr

0001bdbe <str_out>:
{
   1bdbe:	b530      	push	{r4, r5, lr}
   1bdc0:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1bdc2:	680c      	ldr	r4, [r1, #0]
   1bdc4:	1c55      	adds	r5, r2, #1
   1bdc6:	b114      	cbz	r4, 1bdce <str_out+0x10>
   1bdc8:	684b      	ldr	r3, [r1, #4]
   1bdca:	4293      	cmp	r3, r2
   1bdcc:	dc01      	bgt.n	1bdd2 <str_out+0x14>
		ctx->count++;
   1bdce:	608d      	str	r5, [r1, #8]
}
   1bdd0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1bdd2:	3b01      	subs	r3, #1
   1bdd4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1bdd6:	bf08      	it	eq
   1bdd8:	2200      	moveq	r2, #0
   1bdda:	608d      	str	r5, [r1, #8]
   1bddc:	bf0c      	ite	eq
   1bdde:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1bde0:	54a0      	strbne	r0, [r4, r2]
   1bde2:	e7f5      	b.n	1bdd0 <str_out+0x12>

0001bde4 <printk>:
{
   1bde4:	b40f      	push	{r0, r1, r2, r3}
   1bde6:	b507      	push	{r0, r1, r2, lr}
   1bde8:	a904      	add	r1, sp, #16
   1bdea:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1bdee:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1bdf0:	f7f2 ffba 	bl	ed68 <vprintk>
}
   1bdf4:	b003      	add	sp, #12
   1bdf6:	f85d eb04 	ldr.w	lr, [sp], #4
   1bdfa:	b004      	add	sp, #16
   1bdfc:	4770      	bx	lr

0001bdfe <snprintk>:
{
   1bdfe:	b40c      	push	{r2, r3}
   1be00:	b507      	push	{r0, r1, r2, lr}
   1be02:	ab04      	add	r3, sp, #16
   1be04:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1be08:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1be0a:	f7f2 ffbb 	bl	ed84 <vsnprintk>
}
   1be0e:	b003      	add	sp, #12
   1be10:	f85d eb04 	ldr.w	lr, [sp], #4
   1be14:	b002      	add	sp, #8
   1be16:	4770      	bx	lr

0001be18 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1be18:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1be1a:	f013 0307 	ands.w	r3, r3, #7
   1be1e:	d105      	bne.n	1be2c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1be20:	6803      	ldr	r3, [r0, #0]
   1be22:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1be24:	bf0c      	ite	eq
   1be26:	2000      	moveq	r0, #0
   1be28:	2003      	movne	r0, #3
   1be2a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1be2c:	2b02      	cmp	r3, #2
   1be2e:	d105      	bne.n	1be3c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1be30:	8b43      	ldrh	r3, [r0, #26]
   1be32:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1be34:	bf14      	ite	ne
   1be36:	2000      	movne	r0, #0
   1be38:	2004      	moveq	r0, #4
   1be3a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1be3c:	2b01      	cmp	r3, #1
   1be3e:	d105      	bne.n	1be4c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1be40:	6803      	ldr	r3, [r0, #0]
   1be42:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1be44:	bf0c      	ite	eq
   1be46:	2000      	moveq	r0, #0
   1be48:	2005      	movne	r0, #5
   1be4a:	4770      	bx	lr
	int evt = EVT_NOP;
   1be4c:	2000      	movs	r0, #0
}
   1be4e:	4770      	bx	lr

0001be50 <notify_one>:
{
   1be50:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1be52:	460d      	mov	r5, r1
   1be54:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1be56:	4619      	mov	r1, r3
   1be58:	1d28      	adds	r0, r5, #4
{
   1be5a:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1be5c:	9300      	str	r3, [sp, #0]
   1be5e:	f7ff ff93 	bl	1bd88 <sys_notify_finalize>
	if (cb) {
   1be62:	4604      	mov	r4, r0
   1be64:	b140      	cbz	r0, 1be78 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1be66:	e9dd 3200 	ldrd	r3, r2, [sp]
   1be6a:	4629      	mov	r1, r5
   1be6c:	4630      	mov	r0, r6
   1be6e:	46a4      	mov	ip, r4
}
   1be70:	b002      	add	sp, #8
   1be72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   1be76:	4760      	bx	ip
}
   1be78:	b002      	add	sp, #8
   1be7a:	bd70      	pop	{r4, r5, r6, pc}

0001be7c <transition_complete>:
{
   1be7c:	b410      	push	{r4}
	__asm__ volatile(
   1be7e:	f04f 0420 	mov.w	r4, #32
   1be82:	f3ef 8211 	mrs	r2, BASEPRI
   1be86:	f384 8811 	msr	BASEPRI, r4
   1be8a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1be8e:	6141      	str	r1, [r0, #20]
}
   1be90:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   1be94:	2101      	movs	r1, #1
   1be96:	f7f2 bf89 	b.w	edac <process_event>

0001be9a <validate_args>:
{
   1be9a:	b510      	push	{r4, lr}
   1be9c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1be9e:	b140      	cbz	r0, 1beb2 <validate_args+0x18>
   1bea0:	b139      	cbz	r1, 1beb2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1bea2:	1d08      	adds	r0, r1, #4
   1bea4:	f7ff ff5c 	bl	1bd60 <sys_notify_validate>
	if ((rv == 0)
   1bea8:	b928      	cbnz	r0, 1beb6 <validate_args+0x1c>
	    && ((cli->notify.flags
   1beaa:	68a3      	ldr	r3, [r4, #8]
   1beac:	f033 0303 	bics.w	r3, r3, #3
   1beb0:	d001      	beq.n	1beb6 <validate_args+0x1c>
		rv = -EINVAL;
   1beb2:	f06f 0015 	mvn.w	r0, #21
}
   1beb6:	bd10      	pop	{r4, pc}

0001beb8 <onoff_manager_init>:
{
   1beb8:	b538      	push	{r3, r4, r5, lr}
   1beba:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1bebc:	4605      	mov	r5, r0
   1bebe:	b158      	cbz	r0, 1bed8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1bec0:	b151      	cbz	r1, 1bed8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1bec2:	680b      	ldr	r3, [r1, #0]
   1bec4:	b143      	cbz	r3, 1bed8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1bec6:	684b      	ldr	r3, [r1, #4]
   1bec8:	b133      	cbz	r3, 1bed8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1beca:	221c      	movs	r2, #28
   1becc:	2100      	movs	r1, #0
   1bece:	f004 fbc1 	bl	20654 <memset>
	return 0;
   1bed2:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1bed4:	612c      	str	r4, [r5, #16]
}
   1bed6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1bed8:	f06f 0015 	mvn.w	r0, #21
   1bedc:	e7fb      	b.n	1bed6 <onoff_manager_init+0x1e>

0001bede <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1bede:	b570      	push	{r4, r5, r6, lr}
   1bee0:	4604      	mov	r4, r0
   1bee2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1bee4:	f7ff ffd9 	bl	1be9a <validate_args>

	if (rv < 0) {
   1bee8:	1e05      	subs	r5, r0, #0
   1beea:	db31      	blt.n	1bf50 <onoff_request+0x72>
   1beec:	f04f 0320 	mov.w	r3, #32
   1bef0:	f3ef 8111 	mrs	r1, BASEPRI
   1bef4:	f383 8811 	msr	BASEPRI, r3
   1bef8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1befc:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1bf00:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1bf02:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1bf04:	42ab      	cmp	r3, r5
   1bf06:	f000 0207 	and.w	r2, r0, #7
   1bf0a:	d02e      	beq.n	1bf6a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1bf0c:	2a02      	cmp	r2, #2
   1bf0e:	d10e      	bne.n	1bf2e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1bf10:	3301      	adds	r3, #1
   1bf12:	8363      	strh	r3, [r4, #26]
	rv = state;
   1bf14:	4615      	mov	r5, r2
		notify = true;
   1bf16:	2301      	movs	r3, #1
	__asm__ volatile(
   1bf18:	f381 8811 	msr	BASEPRI, r1
   1bf1c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1bf20:	b1b3      	cbz	r3, 1bf50 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1bf22:	2300      	movs	r3, #0
   1bf24:	4631      	mov	r1, r6
   1bf26:	4620      	mov	r0, r4
   1bf28:	f7ff ff92 	bl	1be50 <notify_one>
   1bf2c:	e010      	b.n	1bf50 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1bf2e:	0783      	lsls	r3, r0, #30
   1bf30:	d001      	beq.n	1bf36 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1bf32:	2a06      	cmp	r2, #6
   1bf34:	d10e      	bne.n	1bf54 <onoff_request+0x76>
	parent->next = child;
   1bf36:	2300      	movs	r3, #0
   1bf38:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1bf3a:	6863      	ldr	r3, [r4, #4]
   1bf3c:	b993      	cbnz	r3, 1bf64 <onoff_request+0x86>
	list->head = node;
   1bf3e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1bf42:	4615      	mov	r5, r2
   1bf44:	b962      	cbnz	r2, 1bf60 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1bf46:	460a      	mov	r2, r1
   1bf48:	4620      	mov	r0, r4
   1bf4a:	2102      	movs	r1, #2
   1bf4c:	f7f2 ff2e 	bl	edac <process_event>
		}
	}

	return rv;
}
   1bf50:	4628      	mov	r0, r5
   1bf52:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1bf54:	2a05      	cmp	r2, #5
   1bf56:	bf0c      	ite	eq
   1bf58:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1bf5c:	f06f 0504 	mvnne.w	r5, #4
   1bf60:	2300      	movs	r3, #0
   1bf62:	e7d9      	b.n	1bf18 <onoff_request+0x3a>
	parent->next = child;
   1bf64:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1bf66:	6066      	str	r6, [r4, #4]
}
   1bf68:	e7eb      	b.n	1bf42 <onoff_request+0x64>
		rv = -EAGAIN;
   1bf6a:	f06f 050a 	mvn.w	r5, #10
   1bf6e:	e7f7      	b.n	1bf60 <onoff_request+0x82>

0001bf70 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   1bf70:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1bf72:	f7fe fab7 	bl	1a4e4 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   1bf76:	2000      	movs	r0, #0
   1bf78:	bd08      	pop	{r3, pc}

0001bf7a <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   1bf7a:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   1bf7c:	f7fe fad8 	bl	1a530 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   1bf80:	f110 0f0b 	cmn.w	r0, #11
   1bf84:	d005      	beq.n	1bf92 <sys_sem_take+0x18>
   1bf86:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   1bf8a:	bf08      	it	eq
   1bf8c:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   1bf90:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   1bf92:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   1bf96:	e7fb      	b.n	1bf90 <sys_sem_take+0x16>

0001bf98 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1bf98:	4604      	mov	r4, r0
   1bf9a:	b508      	push	{r3, lr}
   1bf9c:	4608      	mov	r0, r1
   1bf9e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1bfa0:	461a      	mov	r2, r3
   1bfa2:	47a0      	blx	r4
	return z_impl_k_current_get();
   1bfa4:	f7fe fa98 	bl	1a4d8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1bfa8:	f7f5 fd1e 	bl	119e8 <z_impl_k_thread_abort>

0001bfac <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1bfac:	b510      	push	{r4, lr}
   1bfae:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1bfb0:	f04f 33ff 	mov.w	r3, #4294967295
   1bfb4:	f04f 32ff 	mov.w	r2, #4294967295
   1bfb8:	4620      	mov	r0, r4
   1bfba:	f7fd fec1 	bl	19d40 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1bfbe:	4603      	mov	r3, r0
   1bfc0:	2800      	cmp	r0, #0
   1bfc2:	d0f5      	beq.n	1bfb0 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1bfc4:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bfc6:	3308      	adds	r3, #8
   1bfc8:	e8d3 1fef 	ldaex	r1, [r3]
   1bfcc:	f021 0c01 	bic.w	ip, r1, #1
   1bfd0:	e8c3 cfee 	stlex	lr, ip, [r3]
   1bfd4:	f1be 0f00 	cmp.w	lr, #0
   1bfd8:	d1f6      	bne.n	1bfc8 <z_work_q_main+0x1c>
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1bfda:	07cb      	lsls	r3, r1, #31
   1bfdc:	d500      	bpl.n	1bfe0 <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1bfde:	4790      	blx	r2
	z_impl_k_yield();
   1bfe0:	f7fe fa0a 	bl	1a3f8 <z_impl_k_yield>
   1bfe4:	e7e4      	b.n	1bfb0 <z_work_q_main+0x4>

0001bfe6 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1bfe6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1bfe8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1bfec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1bff0:	bf2c      	ite	cs
   1bff2:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1bff6:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1bffa:	4770      	bx	lr

0001bffc <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1bffc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1c000:	6880      	ldr	r0, [r0, #8]
   1c002:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1c006:	bf2c      	ite	cs
   1c008:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1c00c:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1c010:	4770      	bx	lr

0001c012 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1c012:	2201      	movs	r2, #1
{
   1c014:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1c016:	f7ff ffe6 	bl	1bfe6 <chunk_field>
}
   1c01a:	0840      	lsrs	r0, r0, #1
   1c01c:	bd08      	pop	{r3, pc}

0001c01e <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1c01e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1c020:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1c024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c028:	d308      	bcc.n	1c03c <set_chunk_used+0x1e>
		if (used) {
   1c02a:	684b      	ldr	r3, [r1, #4]
   1c02c:	b11a      	cbz	r2, 1c036 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c02e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c032:	604b      	str	r3, [r1, #4]
   1c034:	4770      	bx	lr
   1c036:	f023 0301 	bic.w	r3, r3, #1
   1c03a:	e7fa      	b.n	1c032 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1c03c:	884b      	ldrh	r3, [r1, #2]
   1c03e:	b11a      	cbz	r2, 1c048 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c040:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c044:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1c046:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c048:	f023 0301 	bic.w	r3, r3, #1
   1c04c:	e7fa      	b.n	1c044 <set_chunk_used+0x26>

0001c04e <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c04e:	0053      	lsls	r3, r2, #1
   1c050:	2201      	movs	r2, #1
   1c052:	f7ff bfd3 	b.w	1bffc <chunk_set>

0001c056 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1c056:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1c058:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c05a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1c05e:	bf2c      	ite	cs
   1c060:	2002      	movcs	r0, #2
   1c062:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1c064:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1c066:	fab0 f080 	clz	r0, r0
}
   1c06a:	f1c0 001f 	rsb	r0, r0, #31
   1c06e:	4770      	bx	lr

0001c070 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1c070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c072:	4616      	mov	r6, r2
   1c074:	4604      	mov	r4, r0
   1c076:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1c078:	f7ff ffcb 	bl	1c012 <chunk_size>
   1c07c:	4631      	mov	r1, r6
   1c07e:	4605      	mov	r5, r0
   1c080:	4620      	mov	r0, r4
   1c082:	f7ff ffc6 	bl	1c012 <chunk_size>
   1c086:	182b      	adds	r3, r5, r0

	set_chunk_size(h, lc, newsz);
   1c088:	461a      	mov	r2, r3
   1c08a:	4639      	mov	r1, r7
   1c08c:	4620      	mov	r0, r4
   1c08e:	9301      	str	r3, [sp, #4]
   1c090:	f7ff ffdd 	bl	1c04e <set_chunk_size>
	return c + chunk_size(h, c);
   1c094:	4631      	mov	r1, r6
   1c096:	4620      	mov	r0, r4
   1c098:	f7ff ffbb 	bl	1c012 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1c09c:	2200      	movs	r2, #0
   1c09e:	1831      	adds	r1, r6, r0
   1c0a0:	4620      	mov	r0, r4
   1c0a2:	9b01      	ldr	r3, [sp, #4]
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1c0a4:	b003      	add	sp, #12
   1c0a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1c0aa:	f7ff bfa7 	b.w	1bffc <chunk_set>

0001c0ae <split_chunks>:
{
   1c0ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c0b0:	4614      	mov	r4, r2
   1c0b2:	460e      	mov	r6, r1
   1c0b4:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   1c0b6:	f7ff ffac 	bl	1c012 <chunk_size>
	size_t lsz = rc - lc;
   1c0ba:	1ba3      	subs	r3, r4, r6
	size_t rsz = sz0 - lsz;
   1c0bc:	1b32      	subs	r2, r6, r4
   1c0be:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   1c0c0:	4631      	mov	r1, r6
   1c0c2:	461a      	mov	r2, r3
   1c0c4:	4628      	mov	r0, r5
   1c0c6:	9301      	str	r3, [sp, #4]
   1c0c8:	f7ff ffc1 	bl	1c04e <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1c0cc:	463a      	mov	r2, r7
   1c0ce:	4621      	mov	r1, r4
   1c0d0:	4628      	mov	r0, r5
   1c0d2:	f7ff ffbc 	bl	1c04e <set_chunk_size>
   1c0d6:	9b01      	ldr	r3, [sp, #4]
   1c0d8:	2200      	movs	r2, #0
   1c0da:	4621      	mov	r1, r4
   1c0dc:	4628      	mov	r0, r5
   1c0de:	f7ff ff8d 	bl	1bffc <chunk_set>
	return c + chunk_size(h, c);
   1c0e2:	4621      	mov	r1, r4
   1c0e4:	4628      	mov	r0, r5
   1c0e6:	f7ff ff94 	bl	1c012 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1c0ea:	463b      	mov	r3, r7
   1c0ec:	1821      	adds	r1, r4, r0
   1c0ee:	2200      	movs	r2, #0
   1c0f0:	4628      	mov	r0, r5
}
   1c0f2:	b003      	add	sp, #12
   1c0f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1c0f8:	f7ff bf80 	b.w	1bffc <chunk_set>

0001c0fc <free_list_remove_bidx>:
{
   1c0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c100:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1c102:	2203      	movs	r2, #3
   1c104:	460e      	mov	r6, r1
   1c106:	4604      	mov	r4, r0
   1c108:	f7ff ff6d 	bl	1bfe6 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1c10c:	4286      	cmp	r6, r0
   1c10e:	4605      	mov	r5, r0
   1c110:	f107 0804 	add.w	r8, r7, #4
   1c114:	d10b      	bne.n	1c12e <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1c116:	2301      	movs	r3, #1
   1c118:	fa03 f707 	lsl.w	r7, r3, r7
   1c11c:	68e3      	ldr	r3, [r4, #12]
   1c11e:	ea23 0307 	bic.w	r3, r3, r7
   1c122:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1c124:	2300      	movs	r3, #0
   1c126:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1c12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1c12e:	4631      	mov	r1, r6
   1c130:	2202      	movs	r2, #2
   1c132:	4620      	mov	r0, r4
   1c134:	f7ff ff57 	bl	1bfe6 <chunk_field>
   1c138:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1c13a:	462b      	mov	r3, r5
   1c13c:	4601      	mov	r1, r0
   1c13e:	2203      	movs	r2, #3
   1c140:	4620      	mov	r0, r4
		b->next = second;
   1c142:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1c146:	f7ff ff59 	bl	1bffc <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1c14a:	4633      	mov	r3, r6
   1c14c:	4629      	mov	r1, r5
   1c14e:	4620      	mov	r0, r4
}
   1c150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c154:	2202      	movs	r2, #2
   1c156:	f7ff bf51 	b.w	1bffc <chunk_set>

0001c15a <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   1c15a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1c15e:	4604      	mov	r4, r0
   1c160:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   1c162:	f7ff ff78 	bl	1c056 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1c166:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   1c168:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1c16a:	4620      	mov	r0, r4
   1c16c:	f7ff ff73 	bl	1c056 <bucket_idx>
   1c170:	42a8      	cmp	r0, r5
   1c172:	da04      	bge.n	1c17e <alloc_chunk+0x24>
		return 0;
   1c174:	2100      	movs	r1, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1c176:	4608      	mov	r0, r1
   1c178:	b003      	add	sp, #12
   1c17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (b->next) {
   1c17e:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   1c182:	f8d9 8010 	ldr.w	r8, [r9, #16]
   1c186:	f1b8 0f00 	cmp.w	r8, #0
   1c18a:	d019      	beq.n	1c1c0 <alloc_chunk+0x66>
   1c18c:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   1c18e:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   1c192:	4620      	mov	r0, r4
   1c194:	9101      	str	r1, [sp, #4]
   1c196:	f7ff ff3c 	bl	1c012 <chunk_size>
   1c19a:	42b8      	cmp	r0, r7
   1c19c:	9901      	ldr	r1, [sp, #4]
   1c19e:	d305      	bcc.n	1c1ac <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   1c1a0:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1c1a2:	4620      	mov	r0, r4
   1c1a4:	f7ff ffaa 	bl	1c0fc <free_list_remove_bidx>
   1c1a8:	9901      	ldr	r1, [sp, #4]
		return c;
   1c1aa:	e7e4      	b.n	1c176 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   1c1ac:	2203      	movs	r2, #3
   1c1ae:	4620      	mov	r0, r4
   1c1b0:	f7ff ff19 	bl	1bfe6 <chunk_field>
		} while (--i && b->next != first);
   1c1b4:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   1c1b6:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   1c1ba:	d001      	beq.n	1c1c0 <alloc_chunk+0x66>
   1c1bc:	4580      	cmp	r8, r0
   1c1be:	d1e6      	bne.n	1c18e <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1c1c0:	f04f 32ff 	mov.w	r2, #4294967295
   1c1c4:	68e3      	ldr	r3, [r4, #12]
   1c1c6:	3501      	adds	r5, #1
   1c1c8:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1c1ca:	401a      	ands	r2, r3
   1c1cc:	d0d2      	beq.n	1c174 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1c1ce:	fa92 f2a2 	rbit	r2, r2
   1c1d2:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1c1d6:	1d13      	adds	r3, r2, #4
   1c1d8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1c1dc:	9101      	str	r1, [sp, #4]
   1c1de:	e7e0      	b.n	1c1a2 <alloc_chunk+0x48>

0001c1e0 <free_list_add>:
{
   1c1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c1e4:	4604      	mov	r4, r0
   1c1e6:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1c1e8:	f7ff ff13 	bl	1c012 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1c1ec:	68a3      	ldr	r3, [r4, #8]
   1c1ee:	4601      	mov	r1, r0
   1c1f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c1f4:	d301      	bcc.n	1c1fa <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1c1f6:	2801      	cmp	r0, #1
   1c1f8:	d035      	beq.n	1c266 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c1fa:	4620      	mov	r0, r4
   1c1fc:	f7ff ff2b 	bl	1c056 <bucket_idx>
	if (b->next == 0U) {
   1c200:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1c204:	6916      	ldr	r6, [r2, #16]
   1c206:	b99e      	cbnz	r6, 1c230 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1c208:	2301      	movs	r3, #1
   1c20a:	fa03 f000 	lsl.w	r0, r3, r0
   1c20e:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1c210:	4629      	mov	r1, r5
   1c212:	4303      	orrs	r3, r0
   1c214:	60e3      	str	r3, [r4, #12]
   1c216:	4620      	mov	r0, r4
		b->next = c;
   1c218:	6115      	str	r5, [r2, #16]
   1c21a:	462b      	mov	r3, r5
   1c21c:	2202      	movs	r2, #2
   1c21e:	f7ff feed 	bl	1bffc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1c222:	2203      	movs	r2, #3
   1c224:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1c226:	4620      	mov	r0, r4
}
   1c228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c22c:	f7ff bee6 	b.w	1bffc <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1c230:	2202      	movs	r2, #2
   1c232:	4631      	mov	r1, r6
   1c234:	4620      	mov	r0, r4
   1c236:	f7ff fed6 	bl	1bfe6 <chunk_field>
   1c23a:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1c23c:	4603      	mov	r3, r0
   1c23e:	2202      	movs	r2, #2
   1c240:	4629      	mov	r1, r5
   1c242:	4620      	mov	r0, r4
   1c244:	f7ff feda 	bl	1bffc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1c248:	4633      	mov	r3, r6
   1c24a:	2203      	movs	r2, #3
   1c24c:	4629      	mov	r1, r5
   1c24e:	4620      	mov	r0, r4
   1c250:	f7ff fed4 	bl	1bffc <chunk_set>
   1c254:	2203      	movs	r2, #3
   1c256:	4639      	mov	r1, r7
   1c258:	462b      	mov	r3, r5
   1c25a:	4620      	mov	r0, r4
   1c25c:	f7ff fece 	bl	1bffc <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1c260:	2202      	movs	r2, #2
   1c262:	4631      	mov	r1, r6
   1c264:	e7df      	b.n	1c226 <free_list_add+0x46>
   1c266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c26a <free_list_remove>:
{
   1c26a:	b538      	push	{r3, r4, r5, lr}
   1c26c:	4604      	mov	r4, r0
   1c26e:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1c270:	f7ff fecf 	bl	1c012 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1c274:	68a3      	ldr	r3, [r4, #8]
   1c276:	4601      	mov	r1, r0
   1c278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c27c:	d301      	bcc.n	1c282 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1c27e:	2801      	cmp	r0, #1
   1c280:	d009      	beq.n	1c296 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c282:	4620      	mov	r0, r4
   1c284:	f7ff fee7 	bl	1c056 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1c288:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c28a:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1c28c:	4620      	mov	r0, r4
}
   1c28e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1c292:	f7ff bf33 	b.w	1c0fc <free_list_remove_bidx>
}
   1c296:	bd38      	pop	{r3, r4, r5, pc}

0001c298 <free_chunk>:
{
   1c298:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c29a:	4605      	mov	r5, r0
   1c29c:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   1c29e:	f7ff feb8 	bl	1c012 <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c2a2:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   1c2a4:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c2a6:	4628      	mov	r0, r5
   1c2a8:	9101      	str	r1, [sp, #4]
   1c2aa:	f7ff fe9c 	bl	1bfe6 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1c2ae:	f010 0f01 	tst.w	r0, #1
   1c2b2:	9901      	ldr	r1, [sp, #4]
   1c2b4:	d10b      	bne.n	1c2ce <free_chunk+0x36>
		free_list_remove(h, right_chunk(h, c));
   1c2b6:	4628      	mov	r0, r5
   1c2b8:	f7ff ffd7 	bl	1c26a <free_list_remove>
	return c + chunk_size(h, c);
   1c2bc:	4621      	mov	r1, r4
   1c2be:	4628      	mov	r0, r5
   1c2c0:	f7ff fea7 	bl	1c012 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1c2c4:	4621      	mov	r1, r4
   1c2c6:	1822      	adds	r2, r4, r0
   1c2c8:	4628      	mov	r0, r5
   1c2ca:	f7ff fed1 	bl	1c070 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1c2ce:	2200      	movs	r2, #0
   1c2d0:	4621      	mov	r1, r4
   1c2d2:	4628      	mov	r0, r5
   1c2d4:	f7ff fe87 	bl	1bfe6 <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c2d8:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   1c2da:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c2dc:	4628      	mov	r0, r5
   1c2de:	9101      	str	r1, [sp, #4]
   1c2e0:	f7ff fe81 	bl	1bfe6 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1c2e4:	f010 0601 	ands.w	r6, r0, #1
   1c2e8:	9901      	ldr	r1, [sp, #4]
   1c2ea:	d112      	bne.n	1c312 <free_chunk+0x7a>
		free_list_remove(h, left_chunk(h, c));
   1c2ec:	4628      	mov	r0, r5
   1c2ee:	f7ff ffbc 	bl	1c26a <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1c2f2:	4621      	mov	r1, r4
   1c2f4:	4632      	mov	r2, r6
   1c2f6:	4628      	mov	r0, r5
   1c2f8:	f7ff fe75 	bl	1bfe6 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1c2fc:	4622      	mov	r2, r4
   1c2fe:	1a21      	subs	r1, r4, r0
   1c300:	4628      	mov	r0, r5
   1c302:	f7ff feb5 	bl	1c070 <merge_chunks>
   1c306:	4621      	mov	r1, r4
   1c308:	4632      	mov	r2, r6
   1c30a:	4628      	mov	r0, r5
   1c30c:	f7ff fe6b 	bl	1bfe6 <chunk_field>
   1c310:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1c312:	4621      	mov	r1, r4
   1c314:	4628      	mov	r0, r5
}
   1c316:	b002      	add	sp, #8
   1c318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
   1c31c:	f7ff bf60 	b.w	1c1e0 <free_list_add>

0001c320 <sys_heap_free>:
{
   1c320:	b507      	push	{r0, r1, r2, lr}
	if (mem == NULL) {
   1c322:	b199      	cbz	r1, 1c34c <sys_heap_free+0x2c>
	struct z_heap *h = heap->heap;
   1c324:	6800      	ldr	r0, [r0, #0]
	set_chunk_used(h, c, false);
   1c326:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   1c328:	6883      	ldr	r3, [r0, #8]
   1c32a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c32e:	bf2c      	ite	cs
   1c330:	2308      	movcs	r3, #8
   1c332:	2304      	movcc	r3, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c334:	1ac9      	subs	r1, r1, r3
   1c336:	1a09      	subs	r1, r1, r0
   1c338:	08c9      	lsrs	r1, r1, #3
	set_chunk_used(h, c, false);
   1c33a:	9101      	str	r1, [sp, #4]
   1c33c:	f7ff fe6f 	bl	1c01e <set_chunk_used>
	free_chunk(h, c);
   1c340:	9901      	ldr	r1, [sp, #4]
}
   1c342:	b003      	add	sp, #12
   1c344:	f85d eb04 	ldr.w	lr, [sp], #4
	free_chunk(h, c);
   1c348:	f7ff bfa6 	b.w	1c298 <free_chunk>
}
   1c34c:	b003      	add	sp, #12
   1c34e:	f85d fb04 	ldr.w	pc, [sp], #4

0001c352 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1c352:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1c354:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1c356:	b909      	cbnz	r1, 1c35c <sys_heap_alloc+0xa>
		return NULL;
   1c358:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1c35a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1c35c:	68ab      	ldr	r3, [r5, #8]
   1c35e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1c362:	d9f9      	bls.n	1c358 <sys_heap_alloc+0x6>
   1c364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c368:	bf2c      	ite	cs
   1c36a:	2208      	movcs	r2, #8
   1c36c:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c36e:	1dcc      	adds	r4, r1, #7
   1c370:	4414      	add	r4, r2
   1c372:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1c374:	4621      	mov	r1, r4
   1c376:	4628      	mov	r0, r5
   1c378:	f7ff feef 	bl	1c15a <alloc_chunk>
	if (c == 0U) {
   1c37c:	4606      	mov	r6, r0
   1c37e:	2800      	cmp	r0, #0
   1c380:	d0ea      	beq.n	1c358 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1c382:	4601      	mov	r1, r0
   1c384:	4628      	mov	r0, r5
   1c386:	f7ff fe44 	bl	1c012 <chunk_size>
   1c38a:	42a0      	cmp	r0, r4
   1c38c:	d909      	bls.n	1c3a2 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1c38e:	4434      	add	r4, r6
   1c390:	4631      	mov	r1, r6
   1c392:	4628      	mov	r0, r5
   1c394:	4622      	mov	r2, r4
   1c396:	f7ff fe8a 	bl	1c0ae <split_chunks>
		free_list_add(h, c + chunk_sz);
   1c39a:	4621      	mov	r1, r4
   1c39c:	4628      	mov	r0, r5
   1c39e:	f7ff ff1f 	bl	1c1e0 <free_list_add>
	set_chunk_used(h, c, true);
   1c3a2:	4628      	mov	r0, r5
   1c3a4:	2201      	movs	r2, #1
   1c3a6:	4631      	mov	r1, r6
   1c3a8:	f7ff fe39 	bl	1c01e <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1c3ac:	68ab      	ldr	r3, [r5, #8]
   1c3ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c3b2:	bf2c      	ite	cs
   1c3b4:	2008      	movcs	r0, #8
   1c3b6:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1c3b8:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1c3bc:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1c3be:	e7cc      	b.n	1c35a <sys_heap_alloc+0x8>

0001c3c0 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1c3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap *h = heap->heap;
   1c3c4:	6805      	ldr	r5, [r0, #0]
{
   1c3c6:	4614      	mov	r4, r2
   1c3c8:	68ab      	ldr	r3, [r5, #8]
   1c3ca:	460f      	mov	r7, r1
   1c3cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c3d0:	bf2c      	ite	cs
   1c3d2:	2208      	movcs	r2, #8
   1c3d4:	2204      	movcc	r2, #4

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (align <= chunk_header_bytes(h)) {
   1c3d6:	4291      	cmp	r1, r2
   1c3d8:	d804      	bhi.n	1c3e4 <sys_heap_aligned_alloc+0x24>
		return sys_heap_alloc(heap, bytes);
   1c3da:	4621      	mov	r1, r4
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1c3dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sys_heap_alloc(heap, bytes);
   1c3e0:	f7ff bfb7 	b.w	1c352 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1c3e4:	b91c      	cbnz	r4, 1c3ee <sys_heap_aligned_alloc+0x2e>
		return NULL;
   1c3e6:	2600      	movs	r6, #0
}
   1c3e8:	4630      	mov	r0, r6
   1c3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
   1c3ee:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1c3f2:	d9f8      	bls.n	1c3e6 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c3f4:	1de1      	adds	r1, r4, #7
   1c3f6:	4439      	add	r1, r7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1c3f8:	4628      	mov	r0, r5
   1c3fa:	08c9      	lsrs	r1, r1, #3
   1c3fc:	f7ff fead 	bl	1c15a <alloc_chunk>
	if (c0 == 0) {
   1c400:	4680      	mov	r8, r0
   1c402:	2800      	cmp	r0, #0
   1c404:	d0ef      	beq.n	1c3e6 <sys_heap_aligned_alloc+0x26>
	return big_heap(h) ? 8 : 4;
   1c406:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   1c408:	1e7a      	subs	r2, r7, #1
   1c40a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c40e:	bf2c      	ite	cs
   1c410:	2308      	movcs	r3, #8
   1c412:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1c414:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
   1c418:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   1c41a:	427f      	negs	r7, r7
   1c41c:	4416      	add	r6, r2
   1c41e:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1c420:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c422:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1c424:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c426:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1c428:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1c42c:	1b64      	subs	r4, r4, r5
	if (c > c0) {
   1c42e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c432:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1c436:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1c43a:	d208      	bcs.n	1c44e <sys_heap_aligned_alloc+0x8e>
		split_chunks(h, c0, c);
   1c43c:	4601      	mov	r1, r0
   1c43e:	463a      	mov	r2, r7
   1c440:	4628      	mov	r0, r5
   1c442:	f7ff fe34 	bl	1c0ae <split_chunks>
		free_list_add(h, c0);
   1c446:	4641      	mov	r1, r8
   1c448:	4628      	mov	r0, r5
   1c44a:	f7ff fec9 	bl	1c1e0 <free_list_add>
	return c + chunk_size(h, c);
   1c44e:	4639      	mov	r1, r7
   1c450:	4628      	mov	r0, r5
   1c452:	f7ff fdde 	bl	1c012 <chunk_size>
   1c456:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1c458:	4284      	cmp	r4, r0
   1c45a:	d208      	bcs.n	1c46e <sys_heap_aligned_alloc+0xae>
		split_chunks(h, c, c_end);
   1c45c:	4639      	mov	r1, r7
   1c45e:	4628      	mov	r0, r5
   1c460:	4622      	mov	r2, r4
   1c462:	f7ff fe24 	bl	1c0ae <split_chunks>
		free_list_add(h, c_end);
   1c466:	4621      	mov	r1, r4
   1c468:	4628      	mov	r0, r5
   1c46a:	f7ff feb9 	bl	1c1e0 <free_list_add>
	set_chunk_used(h, c, true);
   1c46e:	2201      	movs	r2, #1
   1c470:	4639      	mov	r1, r7
   1c472:	4628      	mov	r0, r5
   1c474:	f7ff fdd3 	bl	1c01e <set_chunk_used>
	return mem;
   1c478:	e7b6      	b.n	1c3e8 <sys_heap_aligned_alloc+0x28>

0001c47a <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1c47a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1c47e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c480:	bf2c      	ite	cs
   1c482:	2508      	movcs	r5, #8
   1c484:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1c486:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   1c488:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   1c48a:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1c48c:	1dcc      	adds	r4, r1, #7
   1c48e:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   1c492:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   1c494:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   1c498:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1c49a:	440d      	add	r5, r1
   1c49c:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1c4a0:	1b2d      	subs	r5, r5, r4
   1c4a2:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1c4a4:	4629      	mov	r1, r5
   1c4a6:	4620      	mov	r0, r4
	h->len = buf_sz;
   1c4a8:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1c4aa:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1c4ac:	f7ff fdd3 	bl	1c056 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1c4b0:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1c4b2:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   1c4b4:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c4b6:	361b      	adds	r6, #27
   1c4b8:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   1c4ba:	f104 0210 	add.w	r2, r4, #16
   1c4be:	428b      	cmp	r3, r1
   1c4c0:	db29      	blt.n	1c516 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1c4c2:	4632      	mov	r2, r6
   1c4c4:	4620      	mov	r0, r4
   1c4c6:	2100      	movs	r1, #0
   1c4c8:	f7ff fdc1 	bl	1c04e <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1c4cc:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1c4ce:	4620      	mov	r0, r4
   1c4d0:	2201      	movs	r2, #1
   1c4d2:	2100      	movs	r1, #0
   1c4d4:	f7ff fda3 	bl	1c01e <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1c4d8:	463a      	mov	r2, r7
   1c4da:	4631      	mov	r1, r6
   1c4dc:	f7ff fdb7 	bl	1c04e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1c4e0:	4633      	mov	r3, r6
   1c4e2:	4631      	mov	r1, r6
   1c4e4:	4620      	mov	r0, r4
   1c4e6:	2200      	movs	r2, #0
   1c4e8:	f7ff fd88 	bl	1bffc <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1c4ec:	4629      	mov	r1, r5
   1c4ee:	4620      	mov	r0, r4
   1c4f0:	2200      	movs	r2, #0
   1c4f2:	f7ff fdac 	bl	1c04e <set_chunk_size>
   1c4f6:	463b      	mov	r3, r7
   1c4f8:	4629      	mov	r1, r5
   1c4fa:	4620      	mov	r0, r4
   1c4fc:	2200      	movs	r2, #0
   1c4fe:	f7ff fd7d 	bl	1bffc <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1c502:	4629      	mov	r1, r5
   1c504:	4620      	mov	r0, r4
   1c506:	2201      	movs	r2, #1
   1c508:	f7ff fd89 	bl	1c01e <set_chunk_used>

	free_list_add(h, chunk0_size);
   1c50c:	4631      	mov	r1, r6
}
   1c50e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1c512:	f7ff be65 	b.w	1c1e0 <free_list_add>
		h->buckets[i].next = 0;
   1c516:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1c51a:	3301      	adds	r3, #1
   1c51c:	e7cf      	b.n	1c4be <sys_heap_init+0x44>

0001c51e <_ldiv5>:
{
   1c51e:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
   1c522:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
   1c526:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1c52a:	fba2 bc03 	umull	fp, ip, r2, r3
   1c52e:	eb1b 0603 	adds.w	r6, fp, r3
   1c532:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
   1c536:	462f      	mov	r7, r5
   1c538:	2600      	movs	r6, #0
	result += (uint64_t)v_hi * m;
   1c53a:	fba4 4503 	umull	r4, r5, r4, r3
   1c53e:	eb1b 0204 	adds.w	r2, fp, r4
   1c542:	eb4c 0105 	adc.w	r1, ip, r5
   1c546:	19d2      	adds	r2, r2, r7
	result >>= 32;
   1c548:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
   1c54a:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
   1c54e:	1863      	adds	r3, r4, r1
   1c550:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
   1c554:	e9c0 3200 	strd	r3, r2, [r0]
}
   1c558:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

0001c55c <_get_digit>:
	if (*digit_count > 0) {
   1c55c:	680b      	ldr	r3, [r1, #0]
{
   1c55e:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1c560:	2b00      	cmp	r3, #0
   1c562:	dd10      	ble.n	1c586 <_get_digit+0x2a>
		--*digit_count;
   1c564:	3b01      	subs	r3, #1
   1c566:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   1c568:	210a      	movs	r1, #10
   1c56a:	6802      	ldr	r2, [r0, #0]
   1c56c:	6844      	ldr	r4, [r0, #4]
   1c56e:	fba2 5601 	umull	r5, r6, r2, r1
   1c572:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= (BIT64(60) - 1U);
   1c576:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1c57a:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1c57e:	0f31      	lsrs	r1, r6, #28
   1c580:	3130      	adds	r1, #48	; 0x30
}
   1c582:	4608      	mov	r0, r1
   1c584:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1c586:	2130      	movs	r1, #48	; 0x30
   1c588:	e7fb      	b.n	1c582 <_get_digit+0x26>

0001c58a <outs>:
{
   1c58a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c58e:	4680      	mov	r8, r0
   1c590:	4689      	mov	r9, r1
   1c592:	4616      	mov	r6, r2
   1c594:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1c596:	4615      	mov	r5, r2
   1c598:	42bd      	cmp	r5, r7
   1c59a:	eba5 0406 	sub.w	r4, r5, r6
   1c59e:	d305      	bcc.n	1c5ac <outs+0x22>
   1c5a0:	b10f      	cbz	r7, 1c5a6 <outs+0x1c>
	return (int)count;
   1c5a2:	4620      	mov	r0, r4
   1c5a4:	e008      	b.n	1c5b8 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1c5a6:	782b      	ldrb	r3, [r5, #0]
   1c5a8:	2b00      	cmp	r3, #0
   1c5aa:	d0fa      	beq.n	1c5a2 <outs+0x18>
		int rc = out((int)*sp++, ctx);
   1c5ac:	4649      	mov	r1, r9
   1c5ae:	f815 0b01 	ldrb.w	r0, [r5], #1
   1c5b2:	47c0      	blx	r8
		if (rc < 0) {
   1c5b4:	2800      	cmp	r0, #0
   1c5b6:	daef      	bge.n	1c598 <outs+0xe>
}
   1c5b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c5bc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_MQTT_SIMPLE_LOG_LEVEL_DBG, 1);
GEN_ABSOLUTE_SYM(CONFIG_MQTT_SIMPLE_LOG_LEVEL, 4);

GEN_ABS_SYM_END
   1c5bc:	4770      	bx	lr

0001c5be <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1c5be:	f7fc be4b 	b.w	19258 <SystemInit>

0001c5c2 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1c5c2:	2300      	movs	r3, #0
	list->head = NULL;
   1c5c4:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c5c8:	4770      	bx	lr

0001c5ca <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1c5ca:	6803      	ldr	r3, [r0, #0]
   1c5cc:	b923      	cbnz	r3, 1c5d8 <log_list_add_tail+0xe>
		list->head = msg;
   1c5ce:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1c5d0:	2300      	movs	r3, #0
	list->tail = msg;
   1c5d2:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1c5d4:	600b      	str	r3, [r1, #0]
}
   1c5d6:	4770      	bx	lr
		list->tail->next = msg;
   1c5d8:	6843      	ldr	r3, [r0, #4]
   1c5da:	6019      	str	r1, [r3, #0]
   1c5dc:	e7f8      	b.n	1c5d0 <log_list_add_tail+0x6>

0001c5de <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1c5de:	6800      	ldr	r0, [r0, #0]
   1c5e0:	4770      	bx	lr

0001c5e2 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1c5e2:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1c5e4:	b10b      	cbz	r3, 1c5ea <log_list_head_get+0x8>
		list->head = list->head->next;
   1c5e6:	681a      	ldr	r2, [r3, #0]
   1c5e8:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1c5ea:	4618      	mov	r0, r3
   1c5ec:	4770      	bx	lr

0001c5ee <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1c5ee:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1c5f0:	f7f3 ff24 	bl	1043c <log_msg_chunk_alloc>

	if (msg != NULL) {
   1c5f4:	b118      	cbz	r0, 1c5fe <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1c5f6:	2301      	movs	r3, #1
   1c5f8:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1c5fa:	2300      	movs	r3, #0
   1c5fc:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1c5fe:	bd08      	pop	{r3, pc}

0001c600 <k_cycle_get_32_wrapper>:
   1c600:	f7f4 bd7e 	b.w	11100 <z_timer_cycle_get_32>

0001c604 <dummy_timestamp>:
   1c604:	2000      	movs	r0, #0
   1c606:	4770      	bx	lr

0001c608 <log_0>:
{
   1c608:	b513      	push	{r0, r1, r4, lr}
   1c60a:	4604      	mov	r4, r0
   1c60c:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1c60e:	f7ff ffee 	bl	1c5ee <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c612:	b130      	cbz	r0, 1c622 <log_0+0x1a>
		msg_finalize(msg, src_level);
   1c614:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   1c616:	6104      	str	r4, [r0, #16]
}
   1c618:	b002      	add	sp, #8
   1c61a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1c61e:	f7f3 be2f 	b.w	10280 <msg_finalize>
}
   1c622:	b002      	add	sp, #8
   1c624:	bd10      	pop	{r4, pc}

0001c626 <log_1>:
{
   1c626:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c628:	460c      	mov	r4, r1
   1c62a:	4611      	mov	r1, r2
   1c62c:	4605      	mov	r5, r0
   1c62e:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c630:	f7ff ffdd 	bl	1c5ee <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c634:	b160      	cbz	r0, 1c650 <log_1+0x2a>
		msg->str = str;
   1c636:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1c638:	2501      	movs	r5, #1
   1c63a:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1c63c:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   1c63e:	f365 1207 	bfi	r2, r5, #4, #4
   1c642:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   1c644:	9901      	ldr	r1, [sp, #4]
}
   1c646:	b003      	add	sp, #12
   1c648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   1c64c:	f7f3 be18 	b.w	10280 <msg_finalize>
}
   1c650:	b003      	add	sp, #12
   1c652:	bd30      	pop	{r4, r5, pc}

0001c654 <log_2>:
{
   1c654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c656:	460e      	mov	r6, r1
   1c658:	4619      	mov	r1, r3
   1c65a:	4607      	mov	r7, r0
   1c65c:	4615      	mov	r5, r2
   1c65e:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c660:	f7ff ffc5 	bl	1c5ee <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c664:	b168      	cbz	r0, 1c682 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1c666:	2202      	movs	r2, #2
   1c668:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c66a:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   1c66e:	f362 1307 	bfi	r3, r2, #4, #4
   1c672:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   1c674:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   1c676:	6107      	str	r7, [r0, #16]
}
   1c678:	b003      	add	sp, #12
   1c67a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   1c67e:	f7f3 bdff 	b.w	10280 <msg_finalize>
}
   1c682:	b003      	add	sp, #12
   1c684:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c686 <log_3>:
{
   1c686:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c68a:	460f      	mov	r7, r1
   1c68c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   1c690:	4680      	mov	r8, r0
   1c692:	4616      	mov	r6, r2
   1c694:	461d      	mov	r5, r3
   1c696:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c698:	f7ff ffa9 	bl	1c5ee <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c69c:	b178      	cbz	r0, 1c6be <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1c69e:	2203      	movs	r2, #3
   1c6a0:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c6a2:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   1c6a6:	f362 1307 	bfi	r3, r2, #4, #4
   1c6aa:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   1c6ac:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   1c6ae:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   1c6b2:	61c5      	str	r5, [r0, #28]
}
   1c6b4:	b002      	add	sp, #8
   1c6b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1c6ba:	f7f3 bde1 	b.w	10280 <msg_finalize>
}
   1c6be:	b002      	add	sp, #8
   1c6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c6c4 <log_n>:
{
   1c6c4:	b510      	push	{r4, lr}
   1c6c6:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1c6c8:	f000 f899 	bl	1c7fe <log_msg_create_n>
		if (msg == NULL) {
   1c6cc:	b120      	cbz	r0, 1c6d8 <log_n+0x14>
		msg_finalize(msg, src_level);
   1c6ce:	4621      	mov	r1, r4
}
   1c6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1c6d4:	f7f3 bdd4 	b.w	10280 <msg_finalize>
}
   1c6d8:	bd10      	pop	{r4, pc}

0001c6da <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1c6da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c6de:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1c6e0:	8903      	ldrh	r3, [r0, #8]
{
   1c6e2:	460e      	mov	r6, r1
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1c6e4:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1c6e8:	42a3      	cmp	r3, r4
{
   1c6ea:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   1c6ee:	d803      	bhi.n	1c6f8 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   1c6f0:	2300      	movs	r3, #0
   1c6f2:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1c6f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1c6f8:	6811      	ldr	r1, [r2, #0]
   1c6fa:	4421      	add	r1, r4
   1c6fc:	4299      	cmp	r1, r3
		*length = available_len - offset;
   1c6fe:	bf84      	itt	hi
   1c700:	1b19      	subhi	r1, r3, r4
   1c702:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c704:	2b0c      	cmp	r3, #12
	req_len = *length;
   1c706:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c70a:	d92b      	bls.n	1c764 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1c70c:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1c70e:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1c712:	d82e      	bhi.n	1c772 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1c714:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   1c716:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1c718:	454b      	cmp	r3, r9
   1c71a:	bf28      	it	cs
   1c71c:	464b      	movcs	r3, r9
   1c71e:	4420      	add	r0, r4
   1c720:	461d      	mov	r5, r3
   1c722:	461a      	mov	r2, r3
		if (put_op) {
   1c724:	b317      	cbz	r7, 1c76c <log_msg_hexdump_data_op+0x92>
   1c726:	4631      	mov	r1, r6
   1c728:	f003 ff87 	bl	2063a <memcpy>
		req_len -= cpy_len;
   1c72c:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1c730:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1c732:	f1b9 0f00 	cmp.w	r9, #0
   1c736:	d0dd      	beq.n	1c6f4 <log_msg_hexdump_data_op+0x1a>
   1c738:	f1b8 0f00 	cmp.w	r8, #0
   1c73c:	d0da      	beq.n	1c6f4 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1c73e:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1c742:	454d      	cmp	r5, r9
   1c744:	bf28      	it	cs
   1c746:	464d      	movcs	r5, r9
		if (put_op) {
   1c748:	1d20      	adds	r0, r4, #4
   1c74a:	462a      	mov	r2, r5
   1c74c:	4440      	add	r0, r8
   1c74e:	b1bf      	cbz	r7, 1c780 <log_msg_hexdump_data_op+0xa6>
   1c750:	4631      	mov	r1, r6
   1c752:	f003 ff72 	bl	2063a <memcpy>
		offset = 0;
   1c756:	2400      	movs	r4, #0
		cont = cont->next;
   1c758:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   1c75c:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1c760:	442e      	add	r6, r5
   1c762:	e7e6      	b.n	1c732 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   1c764:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   1c768:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   1c76a:	e7d5      	b.n	1c718 <log_msg_hexdump_data_op+0x3e>
   1c76c:	4601      	mov	r1, r0
   1c76e:	4630      	mov	r0, r6
   1c770:	e7da      	b.n	1c728 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1c772:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1c774:	2c1b      	cmp	r4, #27
   1c776:	d9dc      	bls.n	1c732 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1c778:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1c77c:	3c1c      	subs	r4, #28
   1c77e:	e7f9      	b.n	1c774 <log_msg_hexdump_data_op+0x9a>
   1c780:	4601      	mov	r1, r0
   1c782:	4630      	mov	r0, r6
   1c784:	e7e5      	b.n	1c752 <log_msg_hexdump_data_op+0x78>

0001c786 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1c786:	3004      	adds	r0, #4
   1c788:	e8d0 3fef 	ldaex	r3, [r0]
   1c78c:	3301      	adds	r3, #1
   1c78e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c792:	2a00      	cmp	r2, #0
   1c794:	d1f8      	bne.n	1c788 <log_msg_get+0x2>
}
   1c796:	4770      	bx	lr

0001c798 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1c798:	7a40      	ldrb	r0, [r0, #9]
}
   1c79a:	0900      	lsrs	r0, r0, #4
   1c79c:	4770      	bx	lr

0001c79e <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1c79e:	7a43      	ldrb	r3, [r0, #9]
   1c7a0:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1c7a4:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1c7a8:	d216      	bcs.n	1c7d8 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c7aa:	2a03      	cmp	r2, #3
   1c7ac:	d803      	bhi.n	1c7b6 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1c7ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1c7b2:	6948      	ldr	r0, [r1, #20]
   1c7b4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1c7b6:	2901      	cmp	r1, #1
   1c7b8:	d803      	bhi.n	1c7c2 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1c7ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1c7be:	6988      	ldr	r0, [r1, #24]
   1c7c0:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1c7c2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c7c4:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1c7c6:	2906      	cmp	r1, #6
   1c7c8:	d803      	bhi.n	1c7d2 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1c7ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1c7ce:	6848      	ldr	r0, [r1, #4]
   1c7d0:	4770      	bx	lr
		cont = cont->next;
   1c7d2:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1c7d4:	3907      	subs	r1, #7
		cont = cont->next;
   1c7d6:	e7f6      	b.n	1c7c6 <log_msg_arg_get+0x28>
		return 0;
   1c7d8:	2000      	movs	r0, #0
}
   1c7da:	4770      	bx	lr

0001c7dc <log_msg_put>:
{
   1c7dc:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1c7de:	1d02      	adds	r2, r0, #4
   1c7e0:	e8d2 1fef 	ldaex	r1, [r2]
   1c7e4:	3901      	subs	r1, #1
   1c7e6:	e8c2 1fec 	stlex	ip, r1, [r2]
   1c7ea:	f1bc 0f00 	cmp.w	ip, #0
   1c7ee:	d1f7      	bne.n	1c7e0 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   1c7f0:	685b      	ldr	r3, [r3, #4]
   1c7f2:	b90b      	cbnz	r3, 1c7f8 <log_msg_put+0x1c>
		msg_free(msg);
   1c7f4:	f7f3 be36 	b.w	10464 <msg_free>
}
   1c7f8:	4770      	bx	lr

0001c7fa <log_msg_str_get>:
}
   1c7fa:	6900      	ldr	r0, [r0, #16]
   1c7fc:	4770      	bx	lr

0001c7fe <log_msg_create_n>:
{
   1c7fe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c802:	4681      	mov	r9, r0
   1c804:	4688      	mov	r8, r1
   1c806:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1c808:	f7f3 fe18 	bl	1043c <log_msg_chunk_alloc>
	if (msg != NULL) {
   1c80c:	4604      	mov	r4, r0
   1c80e:	b330      	cbz	r0, 1c85e <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1c810:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1c812:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c814:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1c816:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1c818:	8107      	strh	r7, [r0, #8]
   1c81a:	d909      	bls.n	1c830 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1c81c:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c81e:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   1c822:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   1c824:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1c828:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1c82a:	f1ba 0f00 	cmp.w	sl, #0
   1c82e:	dc0e      	bgt.n	1c84e <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1c830:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c832:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1c834:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   1c838:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1c83c:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c83e:	d818      	bhi.n	1c872 <log_msg_create_n+0x74>
   1c840:	4641      	mov	r1, r8
   1c842:	00aa      	lsls	r2, r5, #2
   1c844:	f104 0014 	add.w	r0, r4, #20
   1c848:	f003 fef7 	bl	2063a <memcpy>
	while (nargs != 0U) {
   1c84c:	e007      	b.n	1c85e <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1c84e:	f7f3 fdf5 	bl	1043c <log_msg_chunk_alloc>
		if (cont == NULL) {
   1c852:	4606      	mov	r6, r0
   1c854:	b930      	cbnz	r0, 1c864 <log_msg_create_n+0x66>
			msg_free(msg);
   1c856:	4620      	mov	r0, r4
   1c858:	f7f3 fe04 	bl	10464 <msg_free>
			return NULL;
   1c85c:	4634      	mov	r4, r6
}
   1c85e:	4620      	mov	r0, r4
   1c860:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1c864:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1c868:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   1c86c:	4683      	mov	fp, r0
		cont->next = NULL;
   1c86e:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   1c870:	e7db      	b.n	1c82a <log_msg_create_n+0x2c>
   1c872:	f8d8 3000 	ldr.w	r3, [r8]
	struct log_msg_cont *cont = msg->payload.ext.next;
   1c876:	6967      	ldr	r7, [r4, #20]
   1c878:	61a3      	str	r3, [r4, #24]
   1c87a:	f8d8 3004 	ldr.w	r3, [r8, #4]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c87e:	3d02      	subs	r5, #2
   1c880:	61e3      	str	r3, [r4, #28]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1c882:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1c886:	2d07      	cmp	r5, #7
   1c888:	462e      	mov	r6, r5
   1c88a:	bf28      	it	cs
   1c88c:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1c88e:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1c892:	4641      	mov	r1, r8
   1c894:	1d38      	adds	r0, r7, #4
   1c896:	464a      	mov	r2, r9
   1c898:	f003 fecf 	bl	2063a <memcpy>
	while (nargs != 0U) {
   1c89c:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1c89e:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1c8a0:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1c8a2:	d1f0      	bne.n	1c886 <log_msg_create_n+0x88>
   1c8a4:	e7db      	b.n	1c85e <log_msg_create_n+0x60>

0001c8a6 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1c8a6:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1c8a8:	2400      	movs	r4, #0
   1c8aa:	9400      	str	r4, [sp, #0]
   1c8ac:	f7ff ff15 	bl	1c6da <log_msg_hexdump_data_op>
}
   1c8b0:	b002      	add	sp, #8
   1c8b2:	bd10      	pop	{r4, pc}

0001c8b4 <buffer_write>:
{
   1c8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c8b6:	4606      	mov	r6, r0
   1c8b8:	460d      	mov	r5, r1
   1c8ba:	4614      	mov	r4, r2
   1c8bc:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1c8be:	4621      	mov	r1, r4
   1c8c0:	4628      	mov	r0, r5
   1c8c2:	463a      	mov	r2, r7
   1c8c4:	47b0      	blx	r6
	} while (len != 0);
   1c8c6:	1a24      	subs	r4, r4, r0
		buf += processed;
   1c8c8:	4405      	add	r5, r0
	} while (len != 0);
   1c8ca:	d1f8      	bne.n	1c8be <buffer_write+0xa>
}
   1c8cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c8ce <std_print>:
{
   1c8ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c8d2:	b08e      	sub	sp, #56	; 0x38
   1c8d4:	af0e      	add	r7, sp, #56	; 0x38
   1c8d6:	4680      	mov	r8, r0
   1c8d8:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1c8da:	f7ff ff8e 	bl	1c7fa <log_msg_str_get>
   1c8de:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1c8e0:	4640      	mov	r0, r8
   1c8e2:	f7ff ff59 	bl	1c798 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   1c8e6:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   1c8ea:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1c8ec:	0083      	lsls	r3, r0, #2
   1c8ee:	3307      	adds	r3, #7
   1c8f0:	f023 0307 	bic.w	r3, r3, #7
   1c8f4:	ebad 0d03 	sub.w	sp, sp, r3
   1c8f8:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1c8fa:	45d1      	cmp	r9, sl
   1c8fc:	d116      	bne.n	1c92c <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1c8fe:	4640      	mov	r0, r8
   1c900:	f7ff ff4a 	bl	1c798 <log_msg_nargs_get>
   1c904:	280f      	cmp	r0, #15
   1c906:	d81e      	bhi.n	1c946 <std_print+0x78>
   1c908:	e8df f010 	tbh	[pc, r0, lsl #1]
   1c90c:	00200019 	.word	0x00200019
   1c910:	002d0026 	.word	0x002d0026
   1c914:	00410036 	.word	0x00410036
   1c918:	005d004e 	.word	0x005d004e
   1c91c:	0081006e 	.word	0x0081006e
   1c920:	00ad0096 	.word	0x00ad0096
   1c924:	00e100c6 	.word	0x00e100c6
   1c928:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   1c92c:	4649      	mov	r1, r9
   1c92e:	4640      	mov	r0, r8
   1c930:	f7ff ff35 	bl	1c79e <log_msg_arg_get>
   1c934:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1c938:	f109 0901 	add.w	r9, r9, #1
   1c93c:	e7dd      	b.n	1c8fa <std_print+0x2c>
		print_formatted(log_output, str);
   1c93e:	4631      	mov	r1, r6
   1c940:	4628      	mov	r0, r5
   1c942:	f7f3 fdcd 	bl	104e0 <print_formatted>
}
   1c946:	46bd      	mov	sp, r7
   1c948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1c94c:	4631      	mov	r1, r6
   1c94e:	4628      	mov	r0, r5
   1c950:	6822      	ldr	r2, [r4, #0]
   1c952:	f7f3 fdc5 	bl	104e0 <print_formatted>
		break;
   1c956:	e7f6      	b.n	1c946 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1c958:	4631      	mov	r1, r6
   1c95a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c95e:	4628      	mov	r0, r5
   1c960:	f7f3 fdbe 	bl	104e0 <print_formatted>
		break;
   1c964:	e7ef      	b.n	1c946 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1c966:	68a3      	ldr	r3, [r4, #8]
   1c968:	4631      	mov	r1, r6
   1c96a:	9300      	str	r3, [sp, #0]
   1c96c:	4628      	mov	r0, r5
   1c96e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c972:	f7f3 fdb5 	bl	104e0 <print_formatted>
		break;
   1c976:	e7e6      	b.n	1c946 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c978:	68e3      	ldr	r3, [r4, #12]
   1c97a:	4631      	mov	r1, r6
   1c97c:	9301      	str	r3, [sp, #4]
   1c97e:	68a3      	ldr	r3, [r4, #8]
   1c980:	4628      	mov	r0, r5
   1c982:	9300      	str	r3, [sp, #0]
   1c984:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c988:	f7f3 fdaa 	bl	104e0 <print_formatted>
		break;
   1c98c:	e7db      	b.n	1c946 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c98e:	6923      	ldr	r3, [r4, #16]
   1c990:	4631      	mov	r1, r6
   1c992:	9302      	str	r3, [sp, #8]
   1c994:	68e3      	ldr	r3, [r4, #12]
   1c996:	4628      	mov	r0, r5
   1c998:	9301      	str	r3, [sp, #4]
   1c99a:	68a3      	ldr	r3, [r4, #8]
   1c99c:	9300      	str	r3, [sp, #0]
   1c99e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c9a2:	f7f3 fd9d 	bl	104e0 <print_formatted>
		break;
   1c9a6:	e7ce      	b.n	1c946 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c9a8:	6963      	ldr	r3, [r4, #20]
   1c9aa:	4631      	mov	r1, r6
   1c9ac:	9303      	str	r3, [sp, #12]
   1c9ae:	6923      	ldr	r3, [r4, #16]
   1c9b0:	4628      	mov	r0, r5
   1c9b2:	9302      	str	r3, [sp, #8]
   1c9b4:	68e3      	ldr	r3, [r4, #12]
   1c9b6:	9301      	str	r3, [sp, #4]
   1c9b8:	68a3      	ldr	r3, [r4, #8]
   1c9ba:	9300      	str	r3, [sp, #0]
   1c9bc:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c9c0:	f7f3 fd8e 	bl	104e0 <print_formatted>
		break;
   1c9c4:	e7bf      	b.n	1c946 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c9c6:	69a3      	ldr	r3, [r4, #24]
   1c9c8:	4631      	mov	r1, r6
   1c9ca:	9304      	str	r3, [sp, #16]
   1c9cc:	6963      	ldr	r3, [r4, #20]
   1c9ce:	4628      	mov	r0, r5
   1c9d0:	9303      	str	r3, [sp, #12]
   1c9d2:	6923      	ldr	r3, [r4, #16]
   1c9d4:	9302      	str	r3, [sp, #8]
   1c9d6:	68e3      	ldr	r3, [r4, #12]
   1c9d8:	9301      	str	r3, [sp, #4]
   1c9da:	68a3      	ldr	r3, [r4, #8]
   1c9dc:	9300      	str	r3, [sp, #0]
   1c9de:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c9e2:	f7f3 fd7d 	bl	104e0 <print_formatted>
		break;
   1c9e6:	e7ae      	b.n	1c946 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c9e8:	69e3      	ldr	r3, [r4, #28]
   1c9ea:	4631      	mov	r1, r6
   1c9ec:	9305      	str	r3, [sp, #20]
   1c9ee:	69a3      	ldr	r3, [r4, #24]
   1c9f0:	4628      	mov	r0, r5
   1c9f2:	9304      	str	r3, [sp, #16]
   1c9f4:	6963      	ldr	r3, [r4, #20]
   1c9f6:	9303      	str	r3, [sp, #12]
   1c9f8:	6923      	ldr	r3, [r4, #16]
   1c9fa:	9302      	str	r3, [sp, #8]
   1c9fc:	68e3      	ldr	r3, [r4, #12]
   1c9fe:	9301      	str	r3, [sp, #4]
   1ca00:	68a3      	ldr	r3, [r4, #8]
   1ca02:	9300      	str	r3, [sp, #0]
   1ca04:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ca08:	f7f3 fd6a 	bl	104e0 <print_formatted>
		break;
   1ca0c:	e79b      	b.n	1c946 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ca0e:	6a23      	ldr	r3, [r4, #32]
   1ca10:	4631      	mov	r1, r6
   1ca12:	9306      	str	r3, [sp, #24]
   1ca14:	69e3      	ldr	r3, [r4, #28]
   1ca16:	4628      	mov	r0, r5
   1ca18:	9305      	str	r3, [sp, #20]
   1ca1a:	69a3      	ldr	r3, [r4, #24]
   1ca1c:	9304      	str	r3, [sp, #16]
   1ca1e:	6963      	ldr	r3, [r4, #20]
   1ca20:	9303      	str	r3, [sp, #12]
   1ca22:	6923      	ldr	r3, [r4, #16]
   1ca24:	9302      	str	r3, [sp, #8]
   1ca26:	68e3      	ldr	r3, [r4, #12]
   1ca28:	9301      	str	r3, [sp, #4]
   1ca2a:	68a3      	ldr	r3, [r4, #8]
   1ca2c:	9300      	str	r3, [sp, #0]
   1ca2e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ca32:	f7f3 fd55 	bl	104e0 <print_formatted>
		break;
   1ca36:	e786      	b.n	1c946 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ca38:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ca3a:	4631      	mov	r1, r6
   1ca3c:	9307      	str	r3, [sp, #28]
   1ca3e:	6a23      	ldr	r3, [r4, #32]
   1ca40:	4628      	mov	r0, r5
   1ca42:	9306      	str	r3, [sp, #24]
   1ca44:	69e3      	ldr	r3, [r4, #28]
   1ca46:	9305      	str	r3, [sp, #20]
   1ca48:	69a3      	ldr	r3, [r4, #24]
   1ca4a:	9304      	str	r3, [sp, #16]
   1ca4c:	6963      	ldr	r3, [r4, #20]
   1ca4e:	9303      	str	r3, [sp, #12]
   1ca50:	6923      	ldr	r3, [r4, #16]
   1ca52:	9302      	str	r3, [sp, #8]
   1ca54:	68e3      	ldr	r3, [r4, #12]
   1ca56:	9301      	str	r3, [sp, #4]
   1ca58:	68a3      	ldr	r3, [r4, #8]
   1ca5a:	9300      	str	r3, [sp, #0]
   1ca5c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ca60:	f7f3 fd3e 	bl	104e0 <print_formatted>
		break;
   1ca64:	e76f      	b.n	1c946 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ca66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ca68:	4631      	mov	r1, r6
   1ca6a:	9308      	str	r3, [sp, #32]
   1ca6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ca6e:	4628      	mov	r0, r5
   1ca70:	9307      	str	r3, [sp, #28]
   1ca72:	6a23      	ldr	r3, [r4, #32]
   1ca74:	9306      	str	r3, [sp, #24]
   1ca76:	69e3      	ldr	r3, [r4, #28]
   1ca78:	9305      	str	r3, [sp, #20]
   1ca7a:	69a3      	ldr	r3, [r4, #24]
   1ca7c:	9304      	str	r3, [sp, #16]
   1ca7e:	6963      	ldr	r3, [r4, #20]
   1ca80:	9303      	str	r3, [sp, #12]
   1ca82:	6923      	ldr	r3, [r4, #16]
   1ca84:	9302      	str	r3, [sp, #8]
   1ca86:	68e3      	ldr	r3, [r4, #12]
   1ca88:	9301      	str	r3, [sp, #4]
   1ca8a:	68a3      	ldr	r3, [r4, #8]
   1ca8c:	9300      	str	r3, [sp, #0]
   1ca8e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ca92:	f7f3 fd25 	bl	104e0 <print_formatted>
		break;
   1ca96:	e756      	b.n	1c946 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ca98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ca9a:	4631      	mov	r1, r6
   1ca9c:	9309      	str	r3, [sp, #36]	; 0x24
   1ca9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1caa0:	4628      	mov	r0, r5
   1caa2:	9308      	str	r3, [sp, #32]
   1caa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1caa6:	9307      	str	r3, [sp, #28]
   1caa8:	6a23      	ldr	r3, [r4, #32]
   1caaa:	9306      	str	r3, [sp, #24]
   1caac:	69e3      	ldr	r3, [r4, #28]
   1caae:	9305      	str	r3, [sp, #20]
   1cab0:	69a3      	ldr	r3, [r4, #24]
   1cab2:	9304      	str	r3, [sp, #16]
   1cab4:	6963      	ldr	r3, [r4, #20]
   1cab6:	9303      	str	r3, [sp, #12]
   1cab8:	6923      	ldr	r3, [r4, #16]
   1caba:	9302      	str	r3, [sp, #8]
   1cabc:	68e3      	ldr	r3, [r4, #12]
   1cabe:	9301      	str	r3, [sp, #4]
   1cac0:	68a3      	ldr	r3, [r4, #8]
   1cac2:	9300      	str	r3, [sp, #0]
   1cac4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cac8:	f7f3 fd0a 	bl	104e0 <print_formatted>
		break;
   1cacc:	e73b      	b.n	1c946 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cace:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cad0:	4631      	mov	r1, r6
   1cad2:	930a      	str	r3, [sp, #40]	; 0x28
   1cad4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cad6:	4628      	mov	r0, r5
   1cad8:	9309      	str	r3, [sp, #36]	; 0x24
   1cada:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cadc:	9308      	str	r3, [sp, #32]
   1cade:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cae0:	9307      	str	r3, [sp, #28]
   1cae2:	6a23      	ldr	r3, [r4, #32]
   1cae4:	9306      	str	r3, [sp, #24]
   1cae6:	69e3      	ldr	r3, [r4, #28]
   1cae8:	9305      	str	r3, [sp, #20]
   1caea:	69a3      	ldr	r3, [r4, #24]
   1caec:	9304      	str	r3, [sp, #16]
   1caee:	6963      	ldr	r3, [r4, #20]
   1caf0:	9303      	str	r3, [sp, #12]
   1caf2:	6923      	ldr	r3, [r4, #16]
   1caf4:	9302      	str	r3, [sp, #8]
   1caf6:	68e3      	ldr	r3, [r4, #12]
   1caf8:	9301      	str	r3, [sp, #4]
   1cafa:	68a3      	ldr	r3, [r4, #8]
   1cafc:	9300      	str	r3, [sp, #0]
   1cafe:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cb02:	f7f3 fced 	bl	104e0 <print_formatted>
		break;
   1cb06:	e71e      	b.n	1c946 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cb08:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1cb0a:	4631      	mov	r1, r6
   1cb0c:	930b      	str	r3, [sp, #44]	; 0x2c
   1cb0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cb10:	4628      	mov	r0, r5
   1cb12:	930a      	str	r3, [sp, #40]	; 0x28
   1cb14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cb16:	9309      	str	r3, [sp, #36]	; 0x24
   1cb18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cb1a:	9308      	str	r3, [sp, #32]
   1cb1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cb1e:	9307      	str	r3, [sp, #28]
   1cb20:	6a23      	ldr	r3, [r4, #32]
   1cb22:	9306      	str	r3, [sp, #24]
   1cb24:	69e3      	ldr	r3, [r4, #28]
   1cb26:	9305      	str	r3, [sp, #20]
   1cb28:	69a3      	ldr	r3, [r4, #24]
   1cb2a:	9304      	str	r3, [sp, #16]
   1cb2c:	6963      	ldr	r3, [r4, #20]
   1cb2e:	9303      	str	r3, [sp, #12]
   1cb30:	6923      	ldr	r3, [r4, #16]
   1cb32:	9302      	str	r3, [sp, #8]
   1cb34:	68e3      	ldr	r3, [r4, #12]
   1cb36:	9301      	str	r3, [sp, #4]
   1cb38:	68a3      	ldr	r3, [r4, #8]
   1cb3a:	9300      	str	r3, [sp, #0]
   1cb3c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cb40:	f7f3 fcce 	bl	104e0 <print_formatted>
		break;
   1cb44:	e6ff      	b.n	1c946 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cb46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1cb48:	4631      	mov	r1, r6
   1cb4a:	930c      	str	r3, [sp, #48]	; 0x30
   1cb4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1cb4e:	4628      	mov	r0, r5
   1cb50:	930b      	str	r3, [sp, #44]	; 0x2c
   1cb52:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cb54:	930a      	str	r3, [sp, #40]	; 0x28
   1cb56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cb58:	9309      	str	r3, [sp, #36]	; 0x24
   1cb5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cb5c:	9308      	str	r3, [sp, #32]
   1cb5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cb60:	9307      	str	r3, [sp, #28]
   1cb62:	6a23      	ldr	r3, [r4, #32]
   1cb64:	9306      	str	r3, [sp, #24]
   1cb66:	69e3      	ldr	r3, [r4, #28]
   1cb68:	9305      	str	r3, [sp, #20]
   1cb6a:	69a3      	ldr	r3, [r4, #24]
   1cb6c:	9304      	str	r3, [sp, #16]
   1cb6e:	6963      	ldr	r3, [r4, #20]
   1cb70:	9303      	str	r3, [sp, #12]
   1cb72:	6923      	ldr	r3, [r4, #16]
   1cb74:	9302      	str	r3, [sp, #8]
   1cb76:	68e3      	ldr	r3, [r4, #12]
   1cb78:	9301      	str	r3, [sp, #4]
   1cb7a:	68a3      	ldr	r3, [r4, #8]
   1cb7c:	9300      	str	r3, [sp, #0]
   1cb7e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cb82:	f7f3 fcad 	bl	104e0 <print_formatted>
}
   1cb86:	e6de      	b.n	1c946 <std_print+0x78>

0001cb88 <log_output_flush>:
		     log_output->control_block->offset,
   1cb88:	6842      	ldr	r2, [r0, #4]
{
   1cb8a:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   1cb8c:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1cb90:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1cb92:	6881      	ldr	r1, [r0, #8]
   1cb94:	6800      	ldr	r0, [r0, #0]
   1cb96:	f7ff fe8d 	bl	1c8b4 <buffer_write>
	log_output->control_block->offset = 0;
   1cb9a:	2200      	movs	r2, #0
   1cb9c:	6863      	ldr	r3, [r4, #4]
   1cb9e:	601a      	str	r2, [r3, #0]
}
   1cba0:	bd10      	pop	{r4, pc}

0001cba2 <out_func>:
{
   1cba2:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1cba4:	684b      	ldr	r3, [r1, #4]
{
   1cba6:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   1cba8:	681a      	ldr	r2, [r3, #0]
   1cbaa:	68cb      	ldr	r3, [r1, #12]
{
   1cbac:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1cbae:	429a      	cmp	r2, r3
   1cbb0:	d102      	bne.n	1cbb8 <out_func+0x16>
		log_output_flush(out_ctx);
   1cbb2:	4608      	mov	r0, r1
   1cbb4:	f7ff ffe8 	bl	1cb88 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1cbb8:	6863      	ldr	r3, [r4, #4]
   1cbba:	e8d3 2fef 	ldaex	r2, [r3]
   1cbbe:	1c51      	adds	r1, r2, #1
   1cbc0:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1cbc4:	2800      	cmp	r0, #0
   1cbc6:	d1f8      	bne.n	1cbba <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   1cbc8:	68a3      	ldr	r3, [r4, #8]
}
   1cbca:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   1cbcc:	549d      	strb	r5, [r3, r2]
}
   1cbce:	bd38      	pop	{r3, r4, r5, pc}

0001cbd0 <sntp_init>:
{
   1cbd0:	b570      	push	{r4, r5, r6, lr}
   1cbd2:	460d      	mov	r5, r1
   1cbd4:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   1cbd6:	4604      	mov	r4, r0
   1cbd8:	b330      	cbz	r0, 1cc28 <sntp_init+0x58>
   1cbda:	b329      	cbz	r1, 1cc28 <sntp_init+0x58>
__ssp_bos_icheck3(memset, void *, int)
   1cbdc:	2214      	movs	r2, #20
   1cbde:	2100      	movs	r1, #0
   1cbe0:	f003 fd38 	bl	20654 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   1cbe4:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   1cbe6:	2211      	movs	r2, #17
   1cbe8:	2102      	movs	r1, #2
   1cbea:	f7f3 fea5 	bl	10938 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   1cbee:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   1cbf0:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   1cbf2:	da04      	bge.n	1cbfe <sntp_init+0x2e>
		return -errno;
   1cbf4:	f000 f98b 	bl	1cf0e <__errno>
   1cbf8:	6800      	ldr	r0, [r0, #0]
   1cbfa:	4240      	negs	r0, r0
}
   1cbfc:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   1cbfe:	4632      	mov	r2, r6
   1cc00:	4629      	mov	r1, r5
   1cc02:	f000 f843 	bl	1cc8c <z_impl_zsock_connect>
	if (ret < 0) {
   1cc06:	2800      	cmp	r0, #0
   1cc08:	68e0      	ldr	r0, [r4, #12]
   1cc0a:	da02      	bge.n	1cc12 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   1cc0c:	f000 f827 	bl	1cc5e <z_impl_zsock_close>
   1cc10:	e7f0      	b.n	1cbf4 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   1cc12:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   1cc14:	68a3      	ldr	r3, [r4, #8]
   1cc16:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   1cc1a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   1cc1e:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   1cc20:	8091      	strh	r1, [r2, #4]
	return 0;
   1cc22:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   1cc24:	60a3      	str	r3, [r4, #8]
	return 0;
   1cc26:	e7e9      	b.n	1cbfc <sntp_init+0x2c>
		return -EFAULT;
   1cc28:	f06f 000d 	mvn.w	r0, #13
   1cc2c:	e7e6      	b.n	1cbfc <sntp_init+0x2c>

0001cc2e <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   1cc2e:	b110      	cbz	r0, 1cc36 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   1cc30:	68c0      	ldr	r0, [r0, #12]
   1cc32:	f000 b814 	b.w	1cc5e <z_impl_zsock_close>
	}
}
   1cc36:	4770      	bx	lr

0001cc38 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   1cc38:	f7f3 bfa6 	b.w	10b88 <socket_offload_getaddrinfo>

0001cc3c <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   1cc3c:	f7f3 bfae 	b.w	10b9c <socket_offload_freeaddrinfo>

0001cc40 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   1cc40:	b40c      	push	{r2, r3}
   1cc42:	4603      	mov	r3, r0
   1cc44:	b507      	push	{r0, r1, r2, lr}
   1cc46:	aa04      	add	r2, sp, #16
   1cc48:	4608      	mov	r0, r1
   1cc4a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   1cc4e:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   1cc50:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   1cc52:	4798      	blx	r3
	va_end(args);

	return res;
}
   1cc54:	b003      	add	sp, #12
   1cc56:	f85d eb04 	ldr.w	lr, [sp], #4
   1cc5a:	b002      	add	sp, #8
   1cc5c:	4770      	bx	lr

0001cc5e <z_impl_zsock_close>:
{
   1cc5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   1cc60:	a901      	add	r1, sp, #4
{
   1cc62:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   1cc64:	f7f2 f802 	bl	ec6c <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   1cc68:	b940      	cbnz	r0, 1cc7c <z_impl_zsock_close+0x1e>
		errno = EBADF;
   1cc6a:	f000 f950 	bl	1cf0e <__errno>
   1cc6e:	2309      	movs	r3, #9
		return -1;
   1cc70:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   1cc74:	6003      	str	r3, [r0, #0]
}
   1cc76:	4620      	mov	r0, r4
   1cc78:	b003      	add	sp, #12
   1cc7a:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   1cc7c:	9b01      	ldr	r3, [sp, #4]
   1cc7e:	689b      	ldr	r3, [r3, #8]
   1cc80:	4798      	blx	r3
   1cc82:	4604      	mov	r4, r0
	z_free_fd(sock);
   1cc84:	4628      	mov	r0, r5
   1cc86:	f7f2 f841 	bl	ed0c <z_free_fd>
	return ret;
   1cc8a:	e7f4      	b.n	1cc76 <z_impl_zsock_close+0x18>

0001cc8c <z_impl_zsock_connect>:
{
   1cc8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1cc8e:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   1cc90:	a903      	add	r1, sp, #12
{
   1cc92:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   1cc94:	f7f1 ffea 	bl	ec6c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   1cc98:	b118      	cbz	r0, 1cca2 <z_impl_zsock_connect+0x16>
   1cc9a:	9b03      	ldr	r3, [sp, #12]
   1cc9c:	9a01      	ldr	r2, [sp, #4]
   1cc9e:	695b      	ldr	r3, [r3, #20]
   1cca0:	b93b      	cbnz	r3, 1ccb2 <z_impl_zsock_connect+0x26>
   1cca2:	f000 f934 	bl	1cf0e <__errno>
   1cca6:	2309      	movs	r3, #9
   1cca8:	6003      	str	r3, [r0, #0]
   1ccaa:	f04f 30ff 	mov.w	r0, #4294967295
}
   1ccae:	b004      	add	sp, #16
   1ccb0:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   1ccb2:	4621      	mov	r1, r4
   1ccb4:	4798      	blx	r3
   1ccb6:	e7fa      	b.n	1ccae <z_impl_zsock_connect+0x22>

0001ccb8 <z_impl_zsock_sendto>:
{
   1ccb8:	b530      	push	{r4, r5, lr}
   1ccba:	b087      	sub	sp, #28
   1ccbc:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   1ccbe:	a905      	add	r1, sp, #20
{
   1ccc0:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   1ccc4:	f7f1 ffd2 	bl	ec6c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1ccc8:	b120      	cbz	r0, 1ccd4 <z_impl_zsock_sendto+0x1c>
   1ccca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1ccce:	9905      	ldr	r1, [sp, #20]
   1ccd0:	6a0d      	ldr	r5, [r1, #32]
   1ccd2:	b93d      	cbnz	r5, 1cce4 <z_impl_zsock_sendto+0x2c>
   1ccd4:	f000 f91b 	bl	1cf0e <__errno>
   1ccd8:	2309      	movs	r3, #9
   1ccda:	6003      	str	r3, [r0, #0]
   1ccdc:	f04f 30ff 	mov.w	r0, #4294967295
}
   1cce0:	b007      	add	sp, #28
   1cce2:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1cce4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1cce6:	9101      	str	r1, [sp, #4]
   1cce8:	990a      	ldr	r1, [sp, #40]	; 0x28
   1ccea:	9100      	str	r1, [sp, #0]
   1ccec:	4621      	mov	r1, r4
   1ccee:	47a8      	blx	r5
   1ccf0:	e7f6      	b.n	1cce0 <z_impl_zsock_sendto+0x28>

0001ccf2 <z_impl_zsock_sendmsg>:
{
   1ccf2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1ccf4:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   1ccf6:	a903      	add	r1, sp, #12
{
   1ccf8:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   1ccfa:	f7f1 ffb7 	bl	ec6c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   1ccfe:	b118      	cbz	r0, 1cd08 <z_impl_zsock_sendmsg+0x16>
   1cd00:	9b03      	ldr	r3, [sp, #12]
   1cd02:	9a01      	ldr	r2, [sp, #4]
   1cd04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1cd06:	b93b      	cbnz	r3, 1cd18 <z_impl_zsock_sendmsg+0x26>
   1cd08:	f000 f901 	bl	1cf0e <__errno>
   1cd0c:	2309      	movs	r3, #9
   1cd0e:	6003      	str	r3, [r0, #0]
   1cd10:	f04f 30ff 	mov.w	r0, #4294967295
}
   1cd14:	b004      	add	sp, #16
   1cd16:	bd10      	pop	{r4, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   1cd18:	4621      	mov	r1, r4
   1cd1a:	4798      	blx	r3
   1cd1c:	e7fa      	b.n	1cd14 <z_impl_zsock_sendmsg+0x22>

0001cd1e <z_impl_zsock_recvfrom>:
{
   1cd1e:	b530      	push	{r4, r5, lr}
   1cd20:	b087      	sub	sp, #28
   1cd22:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   1cd24:	a905      	add	r1, sp, #20
{
   1cd26:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   1cd2a:	f7f1 ff9f 	bl	ec6c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1cd2e:	b120      	cbz	r0, 1cd3a <z_impl_zsock_recvfrom+0x1c>
   1cd30:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1cd34:	9905      	ldr	r1, [sp, #20]
   1cd36:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   1cd38:	b93d      	cbnz	r5, 1cd4a <z_impl_zsock_recvfrom+0x2c>
   1cd3a:	f000 f8e8 	bl	1cf0e <__errno>
   1cd3e:	2309      	movs	r3, #9
   1cd40:	6003      	str	r3, [r0, #0]
   1cd42:	f04f 30ff 	mov.w	r0, #4294967295
}
   1cd46:	b007      	add	sp, #28
   1cd48:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1cd4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1cd4c:	9101      	str	r1, [sp, #4]
   1cd4e:	990a      	ldr	r1, [sp, #40]	; 0x28
   1cd50:	9100      	str	r1, [sp, #0]
   1cd52:	4621      	mov	r1, r4
   1cd54:	47a8      	blx	r5
   1cd56:	e7f6      	b.n	1cd46 <z_impl_zsock_recvfrom+0x28>

0001cd58 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1cd58:	b2cb      	uxtb	r3, r1
   1cd5a:	210c      	movs	r1, #12
   1cd5c:	68c2      	ldr	r2, [r0, #12]
   1cd5e:	fb03 2101 	mla	r1, r3, r1, r2
   1cd62:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1cd64:	f000 0007 	and.w	r0, r0, #7
   1cd68:	4770      	bx	lr

0001cd6a <set_off_state>:
	__asm__ volatile(
   1cd6a:	f04f 0320 	mov.w	r3, #32
   1cd6e:	f3ef 8211 	mrs	r2, BASEPRI
   1cd72:	f383 8811 	msr	BASEPRI, r3
   1cd76:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1cd7a:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1cd7c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1cd80:	d001      	beq.n	1cd86 <set_off_state+0x1c>
   1cd82:	428b      	cmp	r3, r1
   1cd84:	d107      	bne.n	1cd96 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1cd86:	2301      	movs	r3, #1
   1cd88:	6003      	str	r3, [r0, #0]
	int err = 0;
   1cd8a:	2000      	movs	r0, #0
	__asm__ volatile(
   1cd8c:	f382 8811 	msr	BASEPRI, r2
   1cd90:	f3bf 8f6f 	isb	sy
}
   1cd94:	4770      	bx	lr
		err = -EPERM;
   1cd96:	f04f 30ff 	mov.w	r0, #4294967295
   1cd9a:	e7f7      	b.n	1cd8c <set_off_state+0x22>

0001cd9c <set_starting_state>:
{
   1cd9c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1cd9e:	f04f 0320 	mov.w	r3, #32
   1cda2:	f3ef 8211 	mrs	r2, BASEPRI
   1cda6:	f383 8811 	msr	BASEPRI, r3
   1cdaa:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1cdae:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1cdb0:	f003 0407 	and.w	r4, r3, #7
   1cdb4:	2c01      	cmp	r4, #1
   1cdb6:	d106      	bne.n	1cdc6 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1cdb8:	6001      	str	r1, [r0, #0]
	int err = 0;
   1cdba:	2000      	movs	r0, #0
	__asm__ volatile(
   1cdbc:	f382 8811 	msr	BASEPRI, r2
   1cdc0:	f3bf 8f6f 	isb	sy
}
   1cdc4:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1cdc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1cdca:	428b      	cmp	r3, r1
		err = -EALREADY;
   1cdcc:	bf14      	ite	ne
   1cdce:	f04f 30ff 	movne.w	r0, #4294967295
   1cdd2:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1cdd6:	e7f1      	b.n	1cdbc <set_starting_state+0x20>

0001cdd8 <set_on_state>:
	__asm__ volatile(
   1cdd8:	f04f 0320 	mov.w	r3, #32
   1cddc:	f3ef 8211 	mrs	r2, BASEPRI
   1cde0:	f383 8811 	msr	BASEPRI, r3
   1cde4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1cde8:	6803      	ldr	r3, [r0, #0]
   1cdea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cdee:	f043 0302 	orr.w	r3, r3, #2
   1cdf2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1cdf4:	f382 8811 	msr	BASEPRI, r2
   1cdf8:	f3bf 8f6f 	isb	sy
}
   1cdfc:	4770      	bx	lr

0001cdfe <onoff_started_callback>:
{
   1cdfe:	b410      	push	{r4}
	notify(mgr, 0);
   1ce00:	241c      	movs	r4, #28
	return &data->mgr[type];
   1ce02:	68c0      	ldr	r0, [r0, #12]
   1ce04:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1ce06:	fb03 0004 	mla	r0, r3, r4, r0
   1ce0a:	2100      	movs	r1, #0
}
   1ce0c:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   1ce10:	4710      	bx	r2

0001ce12 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1ce12:	2000      	movs	r0, #0
   1ce14:	f7fc ba46 	b.w	192a4 <nrfx_clock_start>

0001ce18 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1ce18:	2000      	movs	r0, #0
   1ce1a:	f7fc ba75 	b.w	19308 <nrfx_clock_stop>

0001ce1e <blocking_start_callback>:
{
   1ce1e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1ce20:	f7fd bb60 	b.w	1a4e4 <z_impl_k_sem_give>

0001ce24 <api_stop>:
{
   1ce24:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   1ce26:	240c      	movs	r4, #12
   1ce28:	b2c9      	uxtb	r1, r1
   1ce2a:	434c      	muls	r4, r1
{
   1ce2c:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1ce2e:	68c0      	ldr	r0, [r0, #12]
   1ce30:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1ce34:	2180      	movs	r1, #128	; 0x80
   1ce36:	4418      	add	r0, r3
   1ce38:	f7ff ff97 	bl	1cd6a <set_off_state>
	if (err < 0) {
   1ce3c:	2800      	cmp	r0, #0
   1ce3e:	db04      	blt.n	1ce4a <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1ce40:	6869      	ldr	r1, [r5, #4]
   1ce42:	440c      	add	r4, r1
   1ce44:	6863      	ldr	r3, [r4, #4]
   1ce46:	4798      	blx	r3
	return 0;
   1ce48:	2000      	movs	r0, #0
}
   1ce4a:	bd38      	pop	{r3, r4, r5, pc}

0001ce4c <api_start>:
{
   1ce4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   1ce50:	240c      	movs	r4, #12
   1ce52:	b2c9      	uxtb	r1, r1
   1ce54:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1ce56:	68c5      	ldr	r5, [r0, #12]
{
   1ce58:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1ce5a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1ce5e:	2180      	movs	r1, #128	; 0x80
   1ce60:	4428      	add	r0, r5
{
   1ce62:	4690      	mov	r8, r2
   1ce64:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   1ce66:	f7ff ff99 	bl	1cd9c <set_starting_state>
	if (err < 0) {
   1ce6a:	2800      	cmp	r0, #0
   1ce6c:	db06      	blt.n	1ce7c <api_start+0x30>
	subdata->cb = cb;
   1ce6e:	4425      	add	r5, r4
	subdata->user_data = user_data;
   1ce70:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1ce74:	6873      	ldr	r3, [r6, #4]
   1ce76:	591b      	ldr	r3, [r3, r4]
   1ce78:	4798      	blx	r3
	return 0;
   1ce7a:	2000      	movs	r0, #0
}
   1ce7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ce80 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1ce80:	4770      	bx	lr

0001ce82 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1ce82:	4770      	bx	lr

0001ce84 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   1ce84:	b510      	push	{r4, lr}
   1ce86:	b40f      	push	{r0, r1, r2, r3}
   1ce88:	f7fc ffe2 	bl	19e50 <k_sched_lock>
   1ce8c:	bc0f      	pop	{r0, r1, r2, r3}
   1ce8e:	f7eb f8ab 	bl	7fe8 <spm_request_random_number_nse>
   1ce92:	b40f      	push	{r0, r1, r2, r3}
   1ce94:	f7fd f82e 	bl	19ef4 <k_sched_unlock>
   1ce98:	bc0f      	pop	{r0, r1, r2, r3}
   1ce9a:	bd10      	pop	{r4, pc}

0001ce9c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1ce9c:	2100      	movs	r1, #0
   1ce9e:	2001      	movs	r0, #1
   1cea0:	f7f4 b9ea 	b.w	11278 <z_arm_fatal_error>

0001cea4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1cea4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1cea6:	f383 880b 	msr	PSPLIM, r3
}
   1ceaa:	4770      	bx	lr

0001ceac <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1ceac:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1ceae:	6800      	ldr	r0, [r0, #0]
   1ceb0:	f7f4 b9e2 	b.w	11278 <z_arm_fatal_error>

0001ceb4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1ceb4:	b508      	push	{r3, lr}
	handler();
   1ceb6:	f7f4 fb07 	bl	114c8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1ceba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1cebe:	f7f4 bb49 	b.w	11554 <z_arm_exc_exit>

0001cec2 <mpu_configure_region>:
{
   1cec2:	b530      	push	{r4, r5, lr}
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1cec4:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   1cec6:	680c      	ldr	r4, [r1, #0]
{
   1cec8:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   1ceca:	890a      	ldrh	r2, [r1, #8]
   1cecc:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   1cece:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ced0:	3b01      	subs	r3, #1
   1ced2:	f024 041f 	bic.w	r4, r4, #31
   1ced6:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1ced8:	f002 021f 	and.w	r2, r2, #31
   1cedc:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1cee0:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   1cee4:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   1cee6:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ceea:	9303      	str	r3, [sp, #12]
   1ceec:	f7f4 fdd2 	bl	11a94 <region_allocate_and_init>
}
   1cef0:	b005      	add	sp, #20
   1cef2:	bd30      	pop	{r4, r5, pc}

0001cef4 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1cef4:	e840 f000 	tt	r0, r0
   1cef8:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1cefa:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1cefe:	bf14      	ite	ne
   1cf00:	4618      	movne	r0, r3
   1cf02:	f06f 0015 	mvneq.w	r0, #21
   1cf06:	4770      	bx	lr

0001cf08 <_stdout_hook_default>:
}
   1cf08:	f04f 30ff 	mov.w	r0, #4294967295
   1cf0c:	4770      	bx	lr

0001cf0e <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1cf0e:	f7fc bbd5 	b.w	196bc <z_impl_z_errno>

0001cf12 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   1cf12:	b508      	push	{r3, lr}
	net_if_init();
   1cf14:	f7f4 ff78 	bl	11e08 <net_if_init>
	net_if_post_init();
   1cf18:	f7f4 ff8c 	bl	11e34 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1cf1c:	2000      	movs	r0, #0
   1cf1e:	bd08      	pop	{r3, pc}

0001cf20 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   1cf20:	b110      	cbz	r0, 1cf28 <net_if_l2+0x8>
   1cf22:	6800      	ldr	r0, [r0, #0]
   1cf24:	b100      	cbz	r0, 1cf28 <net_if_l2+0x8>
	return iface->if_dev->l2;
   1cf26:	6840      	ldr	r0, [r0, #4]
}
   1cf28:	4770      	bx	lr

0001cf2a <l2_flags_get>:
{
   1cf2a:	b510      	push	{r4, lr}
   1cf2c:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1cf2e:	f7ff fff7 	bl	1cf20 <net_if_l2>
   1cf32:	b128      	cbz	r0, 1cf40 <l2_flags_get+0x16>
   1cf34:	68c2      	ldr	r2, [r0, #12]
   1cf36:	b11a      	cbz	r2, 1cf40 <l2_flags_get+0x16>
}
   1cf38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   1cf3c:	4618      	mov	r0, r3
   1cf3e:	4710      	bx	r2
}
   1cf40:	2000      	movs	r0, #0
   1cf42:	bd10      	pop	{r4, pc}

0001cf44 <net_if_up>:
{
   1cf44:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cf46:	6803      	ldr	r3, [r0, #0]
   1cf48:	4604      	mov	r4, r0
   1cf4a:	330c      	adds	r3, #12
   1cf4c:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1cf50:	f013 0301 	ands.w	r3, r3, #1
   1cf54:	d10b      	bne.n	1cf6e <net_if_up+0x2a>
	     net_if_is_socket_offloaded(iface))) {
   1cf56:	6802      	ldr	r2, [r0, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1cf58:	7e91      	ldrb	r1, [r2, #26]
   1cf5a:	b151      	cbz	r1, 1cf72 <net_if_up+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cf5c:	320c      	adds	r2, #12
   1cf5e:	e8d2 1fef 	ldaex	r1, [r2]
   1cf62:	f041 0101 	orr.w	r1, r1, #1
   1cf66:	e8c2 1fe0 	stlex	r0, r1, [r2]
   1cf6a:	2800      	cmp	r0, #0
   1cf6c:	d1f7      	bne.n	1cf5e <net_if_up+0x1a>
		return 0;
   1cf6e:	2000      	movs	r0, #0
   1cf70:	e018      	b.n	1cfa4 <net_if_up+0x60>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1cf72:	f7ff ffd5 	bl	1cf20 <net_if_l2>
   1cf76:	b968      	cbnz	r0, 1cf94 <net_if_up+0x50>
   1cf78:	6823      	ldr	r3, [r4, #0]
   1cf7a:	330c      	adds	r3, #12
   1cf7c:	e8d3 2fef 	ldaex	r2, [r3]
   1cf80:	f042 0201 	orr.w	r2, r2, #1
   1cf84:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1cf88:	2900      	cmp	r1, #0
   1cf8a:	d1f7      	bne.n	1cf7c <net_if_up+0x38>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1cf8c:	4620      	mov	r0, r4
   1cf8e:	f7ff ffcc 	bl	1cf2a <l2_flags_get>
   1cf92:	e7ec      	b.n	1cf6e <net_if_up+0x2a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1cf94:	6883      	ldr	r3, [r0, #8]
   1cf96:	2b00      	cmp	r3, #0
   1cf98:	d0ee      	beq.n	1cf78 <net_if_up+0x34>
	status = net_if_l2(iface)->enable(iface, true);
   1cf9a:	2101      	movs	r1, #1
   1cf9c:	4620      	mov	r0, r4
   1cf9e:	4798      	blx	r3
	if (status < 0) {
   1cfa0:	2800      	cmp	r0, #0
   1cfa2:	dae9      	bge.n	1cf78 <net_if_up+0x34>
}
   1cfa4:	bd10      	pop	{r4, pc}

0001cfa6 <net_byte_to_hex>:
{
   1cfa6:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1cfa8:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   1cfaa:	b1bb      	cbz	r3, 1cfdc <net_byte_to_hex+0x36>
		if (val < 10) {
   1cfac:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   1cfae:	b26b      	sxtb	r3, r5
   1cfb0:	bf86      	itte	hi
   1cfb2:	f1a2 050a 	subhi.w	r5, r2, #10
   1cfb6:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   1cfb8:	3330      	addls	r3, #48	; 0x30
   1cfba:	1c44      	adds	r4, r0, #1
   1cfbc:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1cfbe:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   1cfc2:	4619      	mov	r1, r3
   1cfc4:	2b09      	cmp	r3, #9
	*ptr = '\0';
   1cfc6:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   1cfca:	bf83      	ittte	hi
   1cfcc:	3a0a      	subhi	r2, #10
   1cfce:	1889      	addhi	r1, r1, r2
   1cfd0:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   1cfd2:	3130      	addls	r1, #48	; 0x30
   1cfd4:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   1cfd6:	7063      	strb	r3, [r4, #1]
   1cfd8:	1c60      	adds	r0, r4, #1
}
   1cfda:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   1cfdc:	2d00      	cmp	r5, #0
   1cfde:	d1e5      	bne.n	1cfac <net_byte_to_hex+0x6>
   1cfe0:	4604      	mov	r4, r0
   1cfe2:	e7ec      	b.n	1cfbe <net_byte_to_hex+0x18>

0001cfe4 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   1cfe4:	e9d0 2300 	ldrd	r2, r3, [r0]
   1cfe8:	1a9b      	subs	r3, r3, r2
   1cfea:	2b01      	cmp	r3, #1
{
   1cfec:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   1cfee:	d90c      	bls.n	1d00a <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   1cff0:	4614      	mov	r4, r2
   1cff2:	1c53      	adds	r3, r2, #1
   1cff4:	6003      	str	r3, [r0, #0]
   1cff6:	f814 3b02 	ldrb.w	r3, [r4], #2
   1cffa:	021b      	lsls	r3, r3, #8
   1cffc:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   1cffe:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   1d000:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   1d002:	7852      	ldrb	r2, [r2, #1]
   1d004:	4313      	orrs	r3, r2
   1d006:	800b      	strh	r3, [r1, #0]
}
   1d008:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1d00a:	f06f 0015 	mvn.w	r0, #21
   1d00e:	e7fb      	b.n	1d008 <unpack_uint16+0x24>

0001d010 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   1d010:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1d012:	e9d0 3400 	ldrd	r3, r4, [r0]
   1d016:	429c      	cmp	r4, r3
   1d018:	d01f      	beq.n	1d05a <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   1d01a:	1c5c      	adds	r4, r3, #1
   1d01c:	6004      	str	r4, [r0, #0]
   1d01e:	781b      	ldrb	r3, [r3, #0]
   1d020:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   1d022:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   1d024:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   1d026:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   1d028:	6804      	ldr	r4, [r0, #0]
   1d02a:	42bc      	cmp	r4, r7
   1d02c:	d218      	bcs.n	1d060 <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   1d02e:	4625      	mov	r5, r4
   1d030:	f815 3b01 	ldrb.w	r3, [r5], #1
   1d034:	6816      	ldr	r6, [r2, #0]
   1d036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   1d03a:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   1d03c:	4433      	add	r3, r6
   1d03e:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   1d040:	6005      	str	r5, [r0, #0]
   1d042:	f994 4000 	ldrsb.w	r4, [r4]
   1d046:	2c00      	cmp	r4, #0
   1d048:	db04      	blt.n	1d054 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   1d04a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   1d04e:	d204      	bcs.n	1d05a <fixed_header_decode+0x4a>
	return 0;
   1d050:	2000      	movs	r0, #0
   1d052:	e004      	b.n	1d05e <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   1d054:	3107      	adds	r1, #7
   1d056:	291c      	cmp	r1, #28
   1d058:	d1e6      	bne.n	1d028 <fixed_header_decode+0x18>
		return -EINVAL;
   1d05a:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   1d05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   1d060:	f06f 000a 	mvn.w	r0, #10
   1d064:	e7fb      	b.n	1d05e <fixed_header_decode+0x4e>

0001d066 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   1d066:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1d068:	e9d1 3500 	ldrd	r3, r5, [r1]
   1d06c:	429d      	cmp	r5, r3
   1d06e:	d102      	bne.n	1d076 <connect_ack_decode+0x10>
		return -EINVAL;
   1d070:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   1d074:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   1d076:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1d078:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   1d07a:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1d07c:	d0f8      	beq.n	1d070 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   1d07e:	461d      	mov	r5, r3
   1d080:	f815 4b02 	ldrb.w	r4, [r5], #2
   1d084:	600d      	str	r5, [r1, #0]
   1d086:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1d088:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
	return 0;
   1d08c:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1d08e:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   1d090:	bf04      	itt	eq
   1d092:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   1d096:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   1d098:	7051      	strb	r1, [r2, #1]
	return 0;
   1d09a:	e7eb      	b.n	1d074 <connect_ack_decode+0xe>

0001d09c <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   1d09c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d0a0:	461c      	mov	r4, r3
   1d0a2:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   1d0a4:	7da2      	ldrb	r2, [r4, #22]
   1d0a6:	0043      	lsls	r3, r0, #1
   1d0a8:	f022 0203 	bic.w	r2, r2, #3
   1d0ac:	f003 0302 	and.w	r3, r3, #2
   1d0b0:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   1d0b2:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1d0b6:	7220      	strb	r0, [r4, #8]
{
   1d0b8:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   1d0ba:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   1d0bc:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   1d0be:	f10d 0106 	add.w	r1, sp, #6
   1d0c2:	f7ff ff8f 	bl	1cfe4 <unpack_uint16>
	if (err_code != 0) {
   1d0c6:	4606      	mov	r6, r0
   1d0c8:	b9c0      	cbnz	r0, 1d0fc <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   1d0ca:	683b      	ldr	r3, [r7, #0]
   1d0cc:	687a      	ldr	r2, [r7, #4]
   1d0ce:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   1d0d2:	1ad2      	subs	r2, r2, r3
   1d0d4:	42aa      	cmp	r2, r5
   1d0d6:	da02      	bge.n	1d0de <publish_decode+0x42>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   1d0d8:	f06f 0615 	mvn.w	r6, #21
   1d0dc:	e00e      	b.n	1d0fc <publish_decode+0x60>
	str->size = utf8_strlen;
   1d0de:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   1d0e0:	b185      	cbz	r5, 1d104 <publish_decode+0x68>
		str->utf8 = buf->cur;
   1d0e2:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   1d0e4:	442b      	add	r3, r5
   1d0e6:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   1d0e8:	7a23      	ldrb	r3, [r4, #8]
   1d0ea:	b96b      	cbnz	r3, 1d108 <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   1d0ec:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   1d0ee:	4545      	cmp	r5, r8
   1d0f0:	d8f2      	bhi.n	1d0d8 <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   1d0f2:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   1d0f4:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   1d0f8:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   1d0fa:	6125      	str	r5, [r4, #16]

	return 0;
}
   1d0fc:	4630      	mov	r0, r6
   1d0fe:	b002      	add	sp, #8
   1d100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   1d104:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   1d106:	e7ef      	b.n	1d0e8 <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   1d108:	4638      	mov	r0, r7
   1d10a:	f104 0114 	add.w	r1, r4, #20
   1d10e:	f7ff ff69 	bl	1cfe4 <unpack_uint16>
		if (err_code != 0) {
   1d112:	b908      	cbnz	r0, 1d118 <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   1d114:	3504      	adds	r5, #4
   1d116:	e7ea      	b.n	1d0ee <publish_decode+0x52>
   1d118:	4606      	mov	r6, r0
   1d11a:	e7ef      	b.n	1d0fc <publish_decode+0x60>

0001d11c <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1d11c:	f7ff bf62 	b.w	1cfe4 <unpack_uint16>

0001d120 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1d120:	f7ff bf60 	b.w	1cfe4 <unpack_uint16>

0001d124 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1d124:	f7ff bf5e 	b.w	1cfe4 <unpack_uint16>

0001d128 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1d128:	f7ff bf5c 	b.w	1cfe4 <unpack_uint16>

0001d12c <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   1d12c:	b538      	push	{r3, r4, r5, lr}
   1d12e:	4605      	mov	r5, r0
   1d130:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   1d132:	f7ff ff57 	bl	1cfe4 <unpack_uint16>
	if (err_code != 0) {
   1d136:	b930      	cbnz	r0, 1d146 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   1d138:	e9d5 2300 	ldrd	r2, r3, [r5]
   1d13c:	1a99      	subs	r1, r3, r2
	str->len = length;
   1d13e:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   1d140:	b111      	cbz	r1, 1d148 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   1d142:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   1d144:	602b      	str	r3, [r5, #0]
}
   1d146:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   1d148:	6060      	str	r0, [r4, #4]
   1d14a:	e7fc      	b.n	1d146 <subscribe_ack_decode+0x1a>

0001d14c <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1d14c:	f7ff bf4a 	b.w	1cfe4 <unpack_uint16>

0001d150 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   1d150:	e9d1 3200 	ldrd	r3, r2, [r1]
   1d154:	1ad2      	subs	r2, r2, r3
   1d156:	2a01      	cmp	r2, #1
   1d158:	d909      	bls.n	1d16e <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   1d15a:	1c5a      	adds	r2, r3, #1
   1d15c:	600a      	str	r2, [r1, #0]
   1d15e:	0a02      	lsrs	r2, r0, #8
   1d160:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   1d162:	680b      	ldr	r3, [r1, #0]
   1d164:	1c5a      	adds	r2, r3, #1
   1d166:	600a      	str	r2, [r1, #0]
   1d168:	7018      	strb	r0, [r3, #0]
	return 0;
   1d16a:	2000      	movs	r0, #0
   1d16c:	4770      	bx	lr
		return -ENOMEM;
   1d16e:	f06f 000b 	mvn.w	r0, #11
}
   1d172:	4770      	bx	lr

0001d174 <pack_utf8_str>:
{
   1d174:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   1d176:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   1d17a:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   1d17c:	6840      	ldr	r0, [r0, #4]
   1d17e:	1a9b      	subs	r3, r3, r2
   1d180:	1c82      	adds	r2, r0, #2
   1d182:	4293      	cmp	r3, r2
{
   1d184:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   1d186:	d30d      	bcc.n	1d1a4 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   1d188:	b280      	uxth	r0, r0
   1d18a:	f7ff ffe1 	bl	1d150 <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d18e:	e9d5 1200 	ldrd	r1, r2, [r5]
   1d192:	6820      	ldr	r0, [r4, #0]
   1d194:	f003 fa51 	bl	2063a <memcpy>
	return 0;
   1d198:	2000      	movs	r0, #0
	buf->cur += str->size;
   1d19a:	6823      	ldr	r3, [r4, #0]
   1d19c:	686a      	ldr	r2, [r5, #4]
   1d19e:	4413      	add	r3, r2
   1d1a0:	6023      	str	r3, [r4, #0]
}
   1d1a2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   1d1a4:	f06f 000b 	mvn.w	r0, #11
   1d1a8:	e7fb      	b.n	1d1a2 <pack_utf8_str+0x2e>

0001d1aa <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   1d1aa:	6813      	ldr	r3, [r2, #0]
{
   1d1ac:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   1d1ae:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   1d1b0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   1d1b4:	d227      	bcs.n	1d206 <mqtt_encode_fixed_header+0x5c>
   1d1b6:	4625      	mov	r5, r4
   1d1b8:	2600      	movs	r6, #0
	} while (length > 0);
   1d1ba:	09ed      	lsrs	r5, r5, #7
   1d1bc:	b2f3      	uxtb	r3, r6
   1d1be:	f106 0601 	add.w	r6, r6, #1
   1d1c2:	d1fa      	bne.n	1d1ba <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   1d1c4:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1d1c6:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   1d1c8:	b2db      	uxtb	r3, r3
   1d1ca:	425d      	negs	r5, r3
   1d1cc:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1d1ce:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   1d1d0:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   1d1d2:	bf1e      	ittt	ne
   1d1d4:	3301      	addne	r3, #1
   1d1d6:	6013      	strne	r3, [r2, #0]
   1d1d8:	5548      	strbne	r0, [r1, r5]
	return 0;
   1d1da:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   1d1dc:	6813      	ldr	r3, [r2, #0]
   1d1de:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   1d1e2:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   1d1e4:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   1d1e6:	bf1f      	itttt	ne
   1d1e8:	6811      	ldrne	r1, [r2, #0]
   1d1ea:	780b      	ldrbne	r3, [r1, #0]
   1d1ec:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   1d1f0:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   1d1f2:	6813      	ldr	r3, [r2, #0]
   1d1f4:	3301      	adds	r3, #1
   1d1f6:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   1d1f8:	2800      	cmp	r0, #0
   1d1fa:	d1ef      	bne.n	1d1dc <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   1d1fc:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   1d1fe:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   1d200:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   1d202:	6053      	str	r3, [r2, #4]
}
   1d204:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1d206:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1d20a:	e7fb      	b.n	1d204 <mqtt_encode_fixed_header+0x5a>

0001d20c <publish_encode>:
{
   1d20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   1d210:	7d87      	ldrb	r7, [r0, #22]
   1d212:	7a04      	ldrb	r4, [r0, #8]
   1d214:	f007 0801 	and.w	r8, r7, #1
{
   1d218:	4605      	mov	r5, r0
   1d21a:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   1d21c:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   1d220:	b10c      	cbz	r4, 1d226 <publish_encode+0x1a>
   1d222:	8a83      	ldrh	r3, [r0, #20]
   1d224:	b383      	cbz	r3, 1d288 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1d226:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   1d22a:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1d22c:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   1d22e:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1d230:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   1d234:	f7ff ff9e 	bl	1d174 <pack_utf8_str>
	if (err_code != 0) {
   1d238:	b9b0      	cbnz	r0, 1d268 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   1d23a:	7a2b      	ldrb	r3, [r5, #8]
   1d23c:	b9b3      	cbnz	r3, 1d26c <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   1d23e:	0060      	lsls	r0, r4, #1
   1d240:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   1d244:	692a      	ldr	r2, [r5, #16]
   1d246:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   1d24a:	4338      	orrs	r0, r7
   1d24c:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   1d250:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   1d252:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   1d256:	464a      	mov	r2, r9
   1d258:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   1d25a:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   1d25e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1d262:	f7ff ffa2 	bl	1d1aa <mqtt_encode_fixed_header>
	if (err_code != 0) {
   1d266:	b140      	cbz	r0, 1d27a <publish_encode+0x6e>
}
   1d268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   1d26c:	4649      	mov	r1, r9
   1d26e:	8aa8      	ldrh	r0, [r5, #20]
   1d270:	f7ff ff6e 	bl	1d150 <pack_uint16>
		if (err_code != 0) {
   1d274:	2800      	cmp	r0, #0
   1d276:	d0e2      	beq.n	1d23e <publish_encode+0x32>
   1d278:	e7f6      	b.n	1d268 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   1d27a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1d27e:	692a      	ldr	r2, [r5, #16]
   1d280:	1a9b      	subs	r3, r3, r2
   1d282:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   1d286:	e7ef      	b.n	1d268 <publish_encode+0x5c>
		return -EINVAL;
   1d288:	f06f 0015 	mvn.w	r0, #21
   1d28c:	e7ec      	b.n	1d268 <publish_encode+0x5c>

0001d28e <subscribe_encode>:
{
   1d28e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d292:	4606      	mov	r6, r0
	if (param->message_id == 0U) {
   1d294:	88c0      	ldrh	r0, [r0, #6]
{
   1d296:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   1d298:	b330      	cbz	r0, 1d2e8 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1d29a:	680f      	ldr	r7, [r1, #0]
   1d29c:	3705      	adds	r7, #5
   1d29e:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   1d2a0:	f7ff ff56 	bl	1d150 <pack_uint16>
	if (err_code != 0) {
   1d2a4:	4604      	mov	r4, r0
   1d2a6:	bb08      	cbnz	r0, 1d2ec <subscribe_encode+0x5e>
   1d2a8:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   1d2ac:	88b3      	ldrh	r3, [r6, #4]
   1d2ae:	42a3      	cmp	r3, r4
   1d2b0:	dc06      	bgt.n	1d2c0 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   1d2b2:	462a      	mov	r2, r5
   1d2b4:	4639      	mov	r1, r7
}
   1d2b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   1d2ba:	2082      	movs	r0, #130	; 0x82
   1d2bc:	f7ff bf75 	b.w	1d1aa <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   1d2c0:	fb08 f904 	mul.w	r9, r8, r4
   1d2c4:	6830      	ldr	r0, [r6, #0]
   1d2c6:	4629      	mov	r1, r5
   1d2c8:	4448      	add	r0, r9
   1d2ca:	f7ff ff53 	bl	1d174 <pack_utf8_str>
		if (err_code != 0) {
   1d2ce:	b980      	cbnz	r0, 1d2f2 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   1d2d0:	6833      	ldr	r3, [r6, #0]
   1d2d2:	444b      	add	r3, r9
   1d2d4:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1d2d6:	e9d5 3100 	ldrd	r3, r1, [r5]
   1d2da:	4299      	cmp	r1, r3
   1d2dc:	d00b      	beq.n	1d2f6 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   1d2de:	1c59      	adds	r1, r3, #1
   1d2e0:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   1d2e2:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   1d2e4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   1d2e6:	e7e1      	b.n	1d2ac <subscribe_encode+0x1e>
		return -EINVAL;
   1d2e8:	f06f 0415 	mvn.w	r4, #21
}
   1d2ec:	4620      	mov	r0, r4
   1d2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   1d2f2:	4604      	mov	r4, r0
   1d2f4:	e7fa      	b.n	1d2ec <subscribe_encode+0x5e>
		return -ENOMEM;
   1d2f6:	f06f 040b 	mvn.w	r4, #11
   1d2fa:	e7f7      	b.n	1d2ec <subscribe_encode+0x5e>

0001d2fc <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   1d2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d2fe:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   1d300:	e9d1 3100 	ldrd	r3, r1, [r1]
   1d304:	1acb      	subs	r3, r1, r3
   1d306:	4293      	cmp	r3, r2
{
   1d308:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   1d30a:	d301      	bcc.n	1d310 <mqtt_read_message_chunk+0x14>
		return 0;
   1d30c:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   1d30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   1d310:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   1d312:	190f      	adds	r7, r1, r4
   1d314:	e9d0 2313 	ldrd	r2, r3, [r0, #76]	; 0x4c
   1d318:	4413      	add	r3, r2
   1d31a:	429f      	cmp	r7, r3
   1d31c:	d813      	bhi.n	1d346 <mqtt_read_message_chunk+0x4a>
   1d31e:	4297      	cmp	r7, r2
   1d320:	d311      	bcc.n	1d346 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   1d322:	2300      	movs	r3, #0
   1d324:	4622      	mov	r2, r4
   1d326:	f7f4 ff49 	bl	121bc <mqtt_transport_read>
	if (len < 0) {
   1d32a:	2800      	cmp	r0, #0
   1d32c:	dbef      	blt.n	1d30e <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   1d32e:	d00d      	beq.n	1d34c <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   1d330:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   1d332:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   1d334:	4403      	add	r3, r0
   1d336:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   1d338:	686b      	ldr	r3, [r5, #4]
   1d33a:	4403      	add	r3, r0
   1d33c:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   1d33e:	d2e5      	bcs.n	1d30c <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   1d340:	f06f 000a 	mvn.w	r0, #10
   1d344:	e7e3      	b.n	1d30e <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   1d346:	f06f 000b 	mvn.w	r0, #11
   1d34a:	e7e0      	b.n	1d30e <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   1d34c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d350:	e7dd      	b.n	1d30e <mqtt_read_message_chunk+0x12>

0001d352 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   1d352:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   1d354:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   1d356:	69c2      	ldr	r2, [r0, #28]
{
   1d358:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   1d35a:	9302      	str	r3, [sp, #8]
{
   1d35c:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   1d35e:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   1d360:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   1d362:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   1d364:	4628      	mov	r0, r5
   1d366:	a902      	add	r1, sp, #8
   1d368:	f7ff ffc8 	bl	1d2fc <mqtt_read_message_chunk>
		if (err_code < 0) {
   1d36c:	1e04      	subs	r4, r0, #0
   1d36e:	db2d      	blt.n	1d3cc <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   1d370:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   1d372:	aa01      	add	r2, sp, #4
   1d374:	f10d 0103 	add.w	r1, sp, #3
   1d378:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   1d37a:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   1d37c:	f7ff fe48 	bl	1d010 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   1d380:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   1d384:	4604      	mov	r4, r0
		chunk_size = 1U;
   1d386:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   1d38a:	d0eb      	beq.n	1d364 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   1d38c:	2800      	cmp	r0, #0
   1d38e:	db21      	blt.n	1d3d4 <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   1d390:	f89d 6003 	ldrb.w	r6, [sp, #3]
   1d394:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   1d398:	2b30      	cmp	r3, #48	; 0x30
   1d39a:	d11e      	bne.n	1d3da <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   1d39c:	2202      	movs	r2, #2
   1d39e:	4628      	mov	r0, r5
   1d3a0:	a902      	add	r1, sp, #8
   1d3a2:	f7ff ffab 	bl	1d2fc <mqtt_read_message_chunk>
	if (err_code < 0) {
   1d3a6:	1e04      	subs	r4, r0, #0
   1d3a8:	db10      	blt.n	1d3cc <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   1d3aa:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   1d3ac:	f016 0f06 	tst.w	r6, #6
   1d3b0:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   1d3b2:	4628      	mov	r0, r5
   1d3b4:	ba52      	rev16	r2, r2
   1d3b6:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   1d3b8:	bf0c      	ite	eq
   1d3ba:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   1d3bc:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   1d3be:	a902      	add	r1, sp, #8
   1d3c0:	f7ff ff9c 	bl	1d2fc <mqtt_read_message_chunk>
	if (err_code < 0) {
   1d3c4:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   1d3c8:	2c00      	cmp	r4, #0
   1d3ca:	da0d      	bge.n	1d3e8 <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   1d3cc:	f114 0f0b 	cmn.w	r4, #11
   1d3d0:	d100      	bne.n	1d3d4 <mqtt_handle_rx+0x82>
   1d3d2:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   1d3d4:	4620      	mov	r0, r4
   1d3d6:	b00c      	add	sp, #48	; 0x30
   1d3d8:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   1d3da:	4628      	mov	r0, r5
   1d3dc:	9a01      	ldr	r2, [sp, #4]
   1d3de:	a902      	add	r1, sp, #8
   1d3e0:	f7ff ff8c 	bl	1d2fc <mqtt_read_message_chunk>
   1d3e4:	4604      	mov	r4, r0
   1d3e6:	e7ef      	b.n	1d3c8 <mqtt_handle_rx+0x76>
	evt.result = 0;
   1d3e8:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   1d3ea:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1d3ee:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   1d3f0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   1d3f4:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   1d3f6:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   1d3f8:	d066      	beq.n	1d4c8 <mqtt_handle_rx+0x176>
   1d3fa:	d813      	bhi.n	1d424 <mqtt_handle_rx+0xd2>
   1d3fc:	2b40      	cmp	r3, #64	; 0x40
   1d3fe:	d059      	beq.n	1d4b4 <mqtt_handle_rx+0x162>
   1d400:	d806      	bhi.n	1d410 <mqtt_handle_rx+0xbe>
   1d402:	2b20      	cmp	r3, #32
   1d404:	d02f      	beq.n	1d466 <mqtt_handle_rx+0x114>
   1d406:	2b30      	cmp	r3, #48	; 0x30
   1d408:	d048      	beq.n	1d49c <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   1d40a:	2400      	movs	r4, #0
   1d40c:	61ec      	str	r4, [r5, #28]
	return 0;
   1d40e:	e7e1      	b.n	1d3d4 <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   1d410:	2b50      	cmp	r3, #80	; 0x50
   1d412:	d1fa      	bne.n	1d40a <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   1d414:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   1d416:	a905      	add	r1, sp, #20
   1d418:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   1d41a:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   1d41e:	f7ff fe7f 	bl	1d120 <publish_receive_decode>
   1d422:	e04e      	b.n	1d4c2 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   1d424:	2bb0      	cmp	r3, #176	; 0xb0
   1d426:	d05f      	beq.n	1d4e8 <mqtt_handle_rx+0x196>
   1d428:	d80b      	bhi.n	1d442 <mqtt_handle_rx+0xf0>
   1d42a:	2b70      	cmp	r3, #112	; 0x70
   1d42c:	d054      	beq.n	1d4d8 <mqtt_handle_rx+0x186>
   1d42e:	2b90      	cmp	r3, #144	; 0x90
   1d430:	d1eb      	bne.n	1d40a <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   1d432:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   1d434:	a905      	add	r1, sp, #20
   1d436:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   1d438:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   1d43c:	f7ff fe76 	bl	1d12c <subscribe_ack_decode>
   1d440:	e03f      	b.n	1d4c2 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   1d442:	2bd0      	cmp	r3, #208	; 0xd0
   1d444:	d1e1      	bne.n	1d40a <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   1d446:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	int err_code = 0;
   1d44a:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   1d44c:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   1d44e:	bfc8      	it	gt
   1d450:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   1d454:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   1d458:	bfc8      	it	gt
   1d45a:	b252      	sxtbgt	r2, r2
   1d45c:	f885 205f 	strb.w	r2, [r5, #95]	; 0x5f
		evt.type = MQTT_EVT_PINGRESP;
   1d460:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   1d464:	e010      	b.n	1d488 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   1d466:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   1d46a:	4628      	mov	r0, r5
   1d46c:	aa05      	add	r2, sp, #20
   1d46e:	a902      	add	r1, sp, #8
   1d470:	f7ff fdf9 	bl	1d066 <connect_ack_decode>
		if (err_code == 0) {
   1d474:	4604      	mov	r4, r0
   1d476:	bb28      	cbnz	r0, 1d4c4 <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   1d478:	f89d 2015 	ldrb.w	r2, [sp, #21]
   1d47c:	b95a      	cbnz	r2, 1d496 <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   1d47e:	69ab      	ldr	r3, [r5, #24]
   1d480:	f043 0304 	orr.w	r3, r3, #4
   1d484:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   1d486:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   1d488:	4628      	mov	r0, r5
   1d48a:	a904      	add	r1, sp, #16
   1d48c:	f000 f8c5 	bl	1d61a <event_notify>
	if (err_code < 0) {
   1d490:	2c00      	cmp	r4, #0
   1d492:	daba      	bge.n	1d40a <mqtt_handle_rx+0xb8>
   1d494:	e79e      	b.n	1d3d4 <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   1d496:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   1d49a:	e7f4      	b.n	1d486 <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   1d49c:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   1d49e:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   1d4a0:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   1d4a4:	ab05      	add	r3, sp, #20
   1d4a6:	f7ff fdf9 	bl	1d09c <publish_decode>
		client->internal.remaining_payload =
   1d4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   1d4ac:	4604      	mov	r4, r0
		evt.result = err_code;
   1d4ae:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   1d4b0:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   1d4b2:	e7e9      	b.n	1d488 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   1d4b4:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   1d4b6:	a905      	add	r1, sp, #20
   1d4b8:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   1d4ba:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   1d4be:	f7ff fe2d 	bl	1d11c <publish_ack_decode>
   1d4c2:	4604      	mov	r4, r0
		evt.result = err_code;
   1d4c4:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   1d4c6:	e7df      	b.n	1d488 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   1d4c8:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   1d4ca:	a905      	add	r1, sp, #20
   1d4cc:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   1d4ce:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   1d4d2:	f7ff fe27 	bl	1d124 <publish_release_decode>
   1d4d6:	e7f4      	b.n	1d4c2 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   1d4d8:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   1d4da:	a905      	add	r1, sp, #20
   1d4dc:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   1d4de:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   1d4e2:	f7ff fe21 	bl	1d128 <publish_complete_decode>
   1d4e6:	e7ec      	b.n	1d4c2 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   1d4e8:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   1d4ea:	a905      	add	r1, sp, #20
   1d4ec:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   1d4f0:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   1d4f4:	f7ff fe2a 	bl	1d14c <unsubscribe_ack_decode>
   1d4f8:	e7e3      	b.n	1d4c2 <mqtt_handle_rx+0x170>

0001d4fa <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   1d4fa:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   1d4fc:	6b45      	ldr	r5, [r0, #52]	; 0x34
{
   1d4fe:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   1d500:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   1d502:	2206      	movs	r2, #6
   1d504:	2101      	movs	r1, #1
   1d506:	f7f3 fa17 	bl	10938 <z_impl_zsock_socket>
						  IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   1d50a:	2800      	cmp	r0, #0
	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   1d50c:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   1d50e:	da04      	bge.n	1d51a <mqtt_client_tcp_connect+0x20>

	ret = zsock_connect(client->transport.tcp.sock, client->broker,
			    peer_addr_size);
	if (ret < 0) {
		(void) zsock_close(client->transport.tcp.sock);
		return -errno;
   1d510:	f7ff fcfd 	bl	1cf0e <__errno>
   1d514:	6800      	ldr	r0, [r0, #0]
   1d516:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   1d518:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   1d51a:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tcp.sock, client->broker,
   1d51c:	6b61      	ldr	r1, [r4, #52]	; 0x34
	if (broker->sa_family == AF_INET) {
   1d51e:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   1d520:	bf14      	ite	ne
   1d522:	2218      	movne	r2, #24
   1d524:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   1d526:	f7ff fbb1 	bl	1cc8c <z_impl_zsock_connect>
	if (ret < 0) {
   1d52a:	2800      	cmp	r0, #0
   1d52c:	da03      	bge.n	1d536 <mqtt_client_tcp_connect+0x3c>
		(void) zsock_close(client->transport.tcp.sock);
   1d52e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   1d530:	f7ff fb95 	bl	1cc5e <z_impl_zsock_close>
   1d534:	e7ec      	b.n	1d510 <mqtt_client_tcp_connect+0x16>
	return 0;
   1d536:	2000      	movs	r0, #0
   1d538:	e7ee      	b.n	1d518 <mqtt_client_tcp_connect+0x1e>

0001d53a <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   1d53a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   1d53e:	2400      	movs	r4, #0
{
   1d540:	4606      	mov	r6, r0
   1d542:	460f      	mov	r7, r1
   1d544:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1d546:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   1d548:	42ac      	cmp	r4, r5
   1d54a:	d301      	bcc.n	1d550 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   1d54c:	2000      	movs	r0, #0
   1d54e:	e00d      	b.n	1d56c <mqtt_client_tcp_write+0x32>
		ret = zsock_send(client->transport.tcp.sock, data + offset,
   1d550:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   1d552:	2300      	movs	r3, #0
   1d554:	e9cd 8800 	strd	r8, r8, [sp]
   1d558:	1b2a      	subs	r2, r5, r4
   1d55a:	1939      	adds	r1, r7, r4
   1d55c:	f7ff fbac 	bl	1ccb8 <z_impl_zsock_sendto>
		if (ret < 0) {
   1d560:	1e03      	subs	r3, r0, #0
   1d562:	da06      	bge.n	1d572 <mqtt_client_tcp_write+0x38>
			return -errno;
   1d564:	f7ff fcd3 	bl	1cf0e <__errno>
   1d568:	6800      	ldr	r0, [r0, #0]
   1d56a:	4240      	negs	r0, r0
}
   1d56c:	b002      	add	sp, #8
   1d56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   1d572:	441c      	add	r4, r3
   1d574:	e7e8      	b.n	1d548 <mqtt_client_tcp_write+0xe>

0001d576 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   1d576:	b508      	push	{r3, lr}
	int ret;

	ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
   1d578:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   1d57a:	2200      	movs	r2, #0
   1d57c:	f7ff fbb9 	bl	1ccf2 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   1d580:	2800      	cmp	r0, #0
   1d582:	da04      	bge.n	1d58e <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   1d584:	f7ff fcc3 	bl	1cf0e <__errno>
   1d588:	6800      	ldr	r0, [r0, #0]
   1d58a:	4240      	negs	r0, r0
	}

	return 0;
}
   1d58c:	bd08      	pop	{r3, pc}
	return 0;
   1d58e:	2000      	movs	r0, #0
   1d590:	e7fc      	b.n	1d58c <mqtt_client_tcp_write_msg+0x16>

0001d592 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   1d592:	b513      	push	{r0, r1, r4, lr}
   1d594:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   1d596:	2b00      	cmp	r3, #0
		flags |= ZSOCK_MSG_DONTWAIT;
   1d598:	bf14      	ite	ne
   1d59a:	4623      	movne	r3, r4
   1d59c:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tcp.sock, data, buflen, flags);
   1d59e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1d5a0:	e9cd 4400 	strd	r4, r4, [sp]
   1d5a4:	f7ff fbbb 	bl	1cd1e <z_impl_zsock_recvfrom>
	if (ret < 0) {
   1d5a8:	2800      	cmp	r0, #0
   1d5aa:	da03      	bge.n	1d5b4 <mqtt_client_tcp_read+0x22>
		return -errno;
   1d5ac:	f7ff fcaf 	bl	1cf0e <__errno>
   1d5b0:	6800      	ldr	r0, [r0, #0]
   1d5b2:	4240      	negs	r0, r0
	}

	return ret;
}
   1d5b4:	b002      	add	sp, #8
   1d5b6:	bd10      	pop	{r4, pc}

0001d5b8 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   1d5b8:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = zsock_close(client->transport.tcp.sock);
   1d5ba:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   1d5bc:	f7ff fb4f 	bl	1cc5e <z_impl_zsock_close>
	if (ret < 0) {
   1d5c0:	2800      	cmp	r0, #0
   1d5c2:	da04      	bge.n	1d5ce <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   1d5c4:	f7ff fca3 	bl	1cf0e <__errno>
   1d5c8:	6800      	ldr	r0, [r0, #0]
   1d5ca:	4240      	negs	r0, r0
	}

	return 0;
}
   1d5cc:	bd08      	pop	{r3, pc}
	return 0;
   1d5ce:	2000      	movs	r0, #0
   1d5d0:	e7fc      	b.n	1d5cc <mqtt_client_tcp_disconnect+0x14>

0001d5d2 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   1d5d2:	f7ff bff1 	b.w	1d5b8 <mqtt_client_tcp_disconnect>

0001d5d6 <k_uptime_get>:
{
   1d5d6:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   1d5d8:	f002 fe1a 	bl	20210 <z_impl_k_uptime_ticks>
   1d5dc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1d5e0:	fba0 2304 	umull	r2, r3, r0, r4
   1d5e4:	fb04 3301 	mla	r3, r4, r1, r3
   1d5e8:	0bd0      	lsrs	r0, r2, #15
}
   1d5ea:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1d5ee:	0bd9      	lsrs	r1, r3, #15
   1d5f0:	bd10      	pop	{r4, pc}

0001d5f2 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   1d5f2:	b538      	push	{r3, r4, r5, lr}
   1d5f4:	4604      	mov	r4, r0
   1d5f6:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   1d5f8:	6d82      	ldr	r2, [r0, #88]	; 0x58
   1d5fa:	2100      	movs	r1, #0
   1d5fc:	6d40      	ldr	r0, [r0, #84]	; 0x54
   1d5fe:	f003 f829 	bl	20654 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   1d602:	6d63      	ldr	r3, [r4, #84]	; 0x54
	buf->end = client->tx_buf + client->tx_buf_size;
   1d604:	6da2      	ldr	r2, [r4, #88]	; 0x58
	buf->cur = client->tx_buf;
   1d606:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   1d608:	4413      	add	r3, r2
   1d60a:	606b      	str	r3, [r5, #4]
}
   1d60c:	bd38      	pop	{r3, r4, r5, pc}

0001d60e <mqtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1d60e:	f04f 32ff 	mov.w	r2, #4294967295
   1d612:	f04f 33ff 	mov.w	r3, #4294967295
   1d616:	f7fc bad3 	b.w	19bc0 <z_impl_k_mutex_lock>

0001d61a <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   1d61a:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   1d61c:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   1d61e:	4604      	mov	r4, r0
   1d620:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   1d622:	b15b      	cbz	r3, 1d63c <event_notify+0x22>

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
	int ret = sys_mutex_unlock(&client->internal.mutex);
   1d624:	f7f4 fdd8 	bl	121d8 <sys_mutex_unlock>
		mqtt_mutex_unlock(client);

		client->evt_cb(client, evt);
   1d628:	4620      	mov	r0, r4
   1d62a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1d62c:	9901      	ldr	r1, [sp, #4]
   1d62e:	4798      	blx	r3

		mqtt_mutex_lock(client);
   1d630:	4620      	mov	r0, r4
	}
}
   1d632:	b002      	add	sp, #8
   1d634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   1d638:	f7ff bfe9 	b.w	1d60e <mqtt_mutex_lock>
}
   1d63c:	b002      	add	sp, #8
   1d63e:	bd10      	pop	{r4, pc}

0001d640 <client_disconnect.constprop.0>:

static void client_disconnect(struct mqtt_client *client, int result,
   1d640:	b530      	push	{r4, r5, lr}
   1d642:	b089      	sub	sp, #36	; 0x24
   1d644:	4604      	mov	r4, r0
   1d646:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   1d648:	f7ff ffc3 	bl	1d5d2 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   1d64c:	2100      	movs	r1, #0

	/* Reset internal state. */
	client_reset(client);

	if (notify) {
		struct mqtt_evt evt = {
   1d64e:	221c      	movs	r2, #28
	client->internal.last_activity = 0U;
   1d650:	e9c4 1105 	strd	r1, r1, [r4, #20]
	client->internal.remaining_payload = 0U;
   1d654:	e9c4 1107 	strd	r1, r1, [r4, #28]
		struct mqtt_evt evt = {
   1d658:	4668      	mov	r0, sp
   1d65a:	f002 fffb 	bl	20654 <memset>
   1d65e:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   1d660:	4669      	mov	r1, sp
   1d662:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   1d664:	f88d 3000 	strb.w	r3, [sp]
   1d668:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   1d66a:	f7ff ffd6 	bl	1d61a <event_notify>
	}
}
   1d66e:	b009      	add	sp, #36	; 0x24
   1d670:	bd30      	pop	{r4, r5, pc}

0001d672 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   1d672:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d674:	4617      	mov	r7, r2
   1d676:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   1d678:	4605      	mov	r5, r0
{
   1d67a:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   1d67c:	b320      	cbz	r0, 1d6c8 <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   1d67e:	f7ff ffc6 	bl	1d60e <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   1d682:	6a2c      	ldr	r4, [r5, #32]
   1d684:	b1b4      	cbz	r4, 1d6b4 <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   1d686:	42bc      	cmp	r4, r7
   1d688:	4622      	mov	r2, r4
   1d68a:	4633      	mov	r3, r6
   1d68c:	bf28      	it	cs
   1d68e:	463a      	movcs	r2, r7
   1d690:	4628      	mov	r0, r5
   1d692:	9901      	ldr	r1, [sp, #4]
   1d694:	f7f4 fd92 	bl	121bc <mqtt_transport_read>
   1d698:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   1d69a:	b916      	cbnz	r6, 1d6a2 <read_publish_payload+0x30>
   1d69c:	f110 0f0b 	cmn.w	r0, #11
   1d6a0:	d008      	beq.n	1d6b4 <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   1d6a2:	2c00      	cmp	r4, #0
   1d6a4:	dc0c      	bgt.n	1d6c0 <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   1d6a6:	bf08      	it	eq
   1d6a8:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   1d6ac:	4628      	mov	r0, r5
   1d6ae:	4621      	mov	r1, r4
   1d6b0:	f7ff ffc6 	bl	1d640 <client_disconnect.constprop.0>
   1d6b4:	4628      	mov	r0, r5
   1d6b6:	f7f4 fd8f 	bl	121d8 <sys_mutex_unlock>

exit:
	mqtt_mutex_unlock(client);

	return ret;
}
   1d6ba:	4620      	mov	r0, r4
   1d6bc:	b003      	add	sp, #12
   1d6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   1d6c0:	6a2b      	ldr	r3, [r5, #32]
   1d6c2:	1b1b      	subs	r3, r3, r4
   1d6c4:	622b      	str	r3, [r5, #32]
   1d6c6:	e7f5      	b.n	1d6b4 <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   1d6c8:	f06f 0415 	mvn.w	r4, #21
   1d6cc:	e7f5      	b.n	1d6ba <read_publish_payload+0x48>

0001d6ce <client_write>:
{
   1d6ce:	b538      	push	{r3, r4, r5, lr}
   1d6d0:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   1d6d2:	f7f4 fd59 	bl	12188 <mqtt_transport_write>
	if (err_code < 0) {
   1d6d6:	1e04      	subs	r4, r0, #0
   1d6d8:	da05      	bge.n	1d6e6 <client_write+0x18>
		client_disconnect(client, err_code, true);
   1d6da:	4621      	mov	r1, r4
   1d6dc:	4628      	mov	r0, r5
   1d6de:	f7ff ffaf 	bl	1d640 <client_disconnect.constprop.0>
}
   1d6e2:	4620      	mov	r0, r4
   1d6e4:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   1d6e6:	f7ff ff76 	bl	1d5d6 <k_uptime_get>
	return 0;
   1d6ea:	2400      	movs	r4, #0
   1d6ec:	6168      	str	r0, [r5, #20]
   1d6ee:	e7f8      	b.n	1d6e2 <client_write+0x14>

0001d6f0 <mqtt_client_init>:
{
   1d6f0:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   1d6f2:	4604      	mov	r4, r0
   1d6f4:	b1a0      	cbz	r0, 1d720 <mqtt_client_init+0x30>
   1d6f6:	2264      	movs	r2, #100	; 0x64
   1d6f8:	2100      	movs	r1, #0
   1d6fa:	f002 ffab 	bl	20654 <memset>
	MQTT_STATE_INIT(client);
   1d6fe:	2300      	movs	r3, #0
   1d700:	61a3      	str	r3, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   1d702:	4620      	mov	r0, r4
   1d704:	f002 fb3a 	bl	1fd7c <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   1d708:	2304      	movs	r3, #4
   1d70a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	client->clean_session = MQTT_CLEAN_SESSION;
   1d70e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   1d712:	f043 0302 	orr.w	r3, r3, #2
   1d716:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	client->keepalive = MQTT_KEEPALIVE;
   1d71a:	233c      	movs	r3, #60	; 0x3c
   1d71c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
   1d720:	bd10      	pop	{r4, pc}

0001d722 <mqtt_connect>:
{
   1d722:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1d724:	4605      	mov	r5, r0
   1d726:	2800      	cmp	r0, #0
   1d728:	d03b      	beq.n	1d7a2 <mqtt_connect+0x80>
	NULL_PARAM_CHECK(client->client_id.utf8);
   1d72a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1d72c:	2b00      	cmp	r3, #0
   1d72e:	d038      	beq.n	1d7a2 <mqtt_connect+0x80>
	mqtt_mutex_lock(client);
   1d730:	f7ff ff6d 	bl	1d60e <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   1d734:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   1d736:	b38b      	cbz	r3, 1d79c <mqtt_connect+0x7a>
   1d738:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1d73a:	b37b      	cbz	r3, 1d79c <mqtt_connect+0x7a>
	err_code = mqtt_transport_connect(client);
   1d73c:	4628      	mov	r0, r5
   1d73e:	f7f4 fd19 	bl	12174 <mqtt_transport_connect>
	if (err_code < 0) {
   1d742:	1e04      	subs	r4, r0, #0
   1d744:	db24      	blt.n	1d790 <mqtt_connect+0x6e>
	tx_buf_init(client, &packet);
   1d746:	4669      	mov	r1, sp
   1d748:	4628      	mov	r0, r5
   1d74a:	f7ff ff52 	bl	1d5f2 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   1d74e:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   1d750:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   1d752:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   1d756:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   1d758:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   1d75a:	f7f4 fc67 	bl	1202c <connect_request_encode>
	if (err_code < 0) {
   1d75e:	1e04      	subs	r4, r0, #0
   1d760:	db13      	blt.n	1d78a <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   1d762:	e9dd 1200 	ldrd	r1, r2, [sp]
   1d766:	4628      	mov	r0, r5
   1d768:	1a52      	subs	r2, r2, r1
   1d76a:	f7f4 fd0d 	bl	12188 <mqtt_transport_write>
	if (err_code < 0) {
   1d76e:	1e04      	subs	r4, r0, #0
   1d770:	db0b      	blt.n	1d78a <mqtt_connect+0x68>
   1d772:	f7ff ff30 	bl	1d5d6 <k_uptime_get>
	client->unacked_ping = 0;
   1d776:	2400      	movs	r4, #0
   1d778:	6168      	str	r0, [r5, #20]
   1d77a:	f885 405f 	strb.w	r4, [r5, #95]	; 0x5f
   1d77e:	4628      	mov	r0, r5
   1d780:	f7f4 fd2a 	bl	121d8 <sys_mutex_unlock>
}
   1d784:	4620      	mov	r0, r4
   1d786:	b003      	add	sp, #12
   1d788:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   1d78a:	4628      	mov	r0, r5
   1d78c:	f7ff ff21 	bl	1d5d2 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   1d790:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   1d792:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   1d796:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   1d79a:	e7f0      	b.n	1d77e <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   1d79c:	f06f 040b 	mvn.w	r4, #11
   1d7a0:	e7f6      	b.n	1d790 <mqtt_connect+0x6e>
	NULL_PARAM_CHECK(client);
   1d7a2:	f06f 0415 	mvn.w	r4, #21
   1d7a6:	e7ed      	b.n	1d784 <mqtt_connect+0x62>

0001d7a8 <mqtt_publish>:
{
   1d7a8:	b570      	push	{r4, r5, r6, lr}
   1d7aa:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   1d7ac:	4605      	mov	r5, r0
{
   1d7ae:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   1d7b0:	2800      	cmp	r0, #0
   1d7b2:	d03b      	beq.n	1d82c <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   1d7b4:	2900      	cmp	r1, #0
   1d7b6:	d039      	beq.n	1d82c <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   1d7b8:	f7ff ff29 	bl	1d60e <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1d7bc:	4628      	mov	r0, r5
   1d7be:	a901      	add	r1, sp, #4
   1d7c0:	f7ff ff17 	bl	1d5f2 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1d7c4:	69ab      	ldr	r3, [r5, #24]
   1d7c6:	075b      	lsls	r3, r3, #29
   1d7c8:	d52d      	bpl.n	1d826 <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   1d7ca:	4630      	mov	r0, r6
   1d7cc:	a901      	add	r1, sp, #4
   1d7ce:	f7ff fd1d 	bl	1d20c <publish_encode>
	if (err_code < 0) {
   1d7d2:	1e04      	subs	r4, r0, #0
   1d7d4:	db1c      	blt.n	1d810 <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   1d7d6:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   1d7d8:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   1d7da:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   1d7dc:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   1d7de:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   1d7e0:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   1d7e2:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   1d7e4:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   1d7e6:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   1d7e8:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   1d7ea:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   1d7ee:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   1d7f0:	f002 ff30 	bl	20654 <memset>
	msg.msg_iov = io_vector;
   1d7f4:	ab03      	add	r3, sp, #12
   1d7f6:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   1d7f8:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   1d7fa:	4628      	mov	r0, r5
   1d7fc:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   1d7fe:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   1d800:	f7f4 fcce 	bl	121a0 <mqtt_transport_write_msg>
	if (err_code < 0) {
   1d804:	1e04      	subs	r4, r0, #0
   1d806:	da09      	bge.n	1d81c <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   1d808:	4621      	mov	r1, r4
   1d80a:	4628      	mov	r0, r5
   1d80c:	f7ff ff18 	bl	1d640 <client_disconnect.constprop.0>
   1d810:	4628      	mov	r0, r5
   1d812:	f7f4 fce1 	bl	121d8 <sys_mutex_unlock>
}
   1d816:	4620      	mov	r0, r4
   1d818:	b00e      	add	sp, #56	; 0x38
   1d81a:	bd70      	pop	{r4, r5, r6, pc}
   1d81c:	f7ff fedb 	bl	1d5d6 <k_uptime_get>
	return 0;
   1d820:	2400      	movs	r4, #0
   1d822:	6168      	str	r0, [r5, #20]
   1d824:	e7f4      	b.n	1d810 <mqtt_publish+0x68>
		return -ENOTCONN;
   1d826:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1d82a:	e7f1      	b.n	1d810 <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   1d82c:	f06f 0415 	mvn.w	r4, #21
   1d830:	e7f1      	b.n	1d816 <mqtt_publish+0x6e>

0001d832 <mqtt_disconnect>:
{
   1d832:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1d834:	4605      	mov	r5, r0
   1d836:	b310      	cbz	r0, 1d87e <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   1d838:	f7ff fee9 	bl	1d60e <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1d83c:	4669      	mov	r1, sp
   1d83e:	4628      	mov	r0, r5
   1d840:	f7ff fed7 	bl	1d5f2 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1d844:	69ab      	ldr	r3, [r5, #24]
   1d846:	075b      	lsls	r3, r3, #29
   1d848:	d516      	bpl.n	1d878 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   1d84a:	4668      	mov	r0, sp
   1d84c:	f7f4 fc6e 	bl	1212c <disconnect_encode>
	if (err_code < 0) {
   1d850:	1e04      	subs	r4, r0, #0
   1d852:	db0b      	blt.n	1d86c <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1d854:	e9dd 1200 	ldrd	r1, r2, [sp]
   1d858:	4628      	mov	r0, r5
   1d85a:	1a52      	subs	r2, r2, r1
   1d85c:	f7ff ff37 	bl	1d6ce <client_write>
	if (err_code < 0) {
   1d860:	1e04      	subs	r4, r0, #0
   1d862:	db03      	blt.n	1d86c <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   1d864:	2100      	movs	r1, #0
   1d866:	4628      	mov	r0, r5
   1d868:	f7ff feea 	bl	1d640 <client_disconnect.constprop.0>
   1d86c:	4628      	mov	r0, r5
   1d86e:	f7f4 fcb3 	bl	121d8 <sys_mutex_unlock>
}
   1d872:	4620      	mov	r0, r4
   1d874:	b003      	add	sp, #12
   1d876:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1d878:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1d87c:	e7f6      	b.n	1d86c <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   1d87e:	f06f 0415 	mvn.w	r4, #21
   1d882:	e7f6      	b.n	1d872 <mqtt_disconnect+0x40>

0001d884 <mqtt_subscribe>:
{
   1d884:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d886:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   1d888:	4605      	mov	r5, r0
   1d88a:	b1f8      	cbz	r0, 1d8cc <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   1d88c:	b1f1      	cbz	r1, 1d8cc <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   1d88e:	f7ff febe 	bl	1d60e <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1d892:	4669      	mov	r1, sp
   1d894:	4628      	mov	r0, r5
   1d896:	f7ff feac 	bl	1d5f2 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1d89a:	69ab      	ldr	r3, [r5, #24]
   1d89c:	075b      	lsls	r3, r3, #29
   1d89e:	d512      	bpl.n	1d8c6 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   1d8a0:	4620      	mov	r0, r4
   1d8a2:	4669      	mov	r1, sp
   1d8a4:	f7ff fcf3 	bl	1d28e <subscribe_encode>
	if (err_code < 0) {
   1d8a8:	1e04      	subs	r4, r0, #0
   1d8aa:	db06      	blt.n	1d8ba <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1d8ac:	e9dd 1200 	ldrd	r1, r2, [sp]
   1d8b0:	4628      	mov	r0, r5
   1d8b2:	1a52      	subs	r2, r2, r1
   1d8b4:	f7ff ff0b 	bl	1d6ce <client_write>
   1d8b8:	4604      	mov	r4, r0
   1d8ba:	4628      	mov	r0, r5
   1d8bc:	f7f4 fc8c 	bl	121d8 <sys_mutex_unlock>
}
   1d8c0:	4620      	mov	r0, r4
   1d8c2:	b003      	add	sp, #12
   1d8c4:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1d8c6:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1d8ca:	e7f6      	b.n	1d8ba <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   1d8cc:	f06f 0415 	mvn.w	r4, #21
   1d8d0:	e7f6      	b.n	1d8c0 <mqtt_subscribe+0x3c>

0001d8d2 <mqtt_ping>:
{
   1d8d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1d8d4:	4605      	mov	r5, r0
   1d8d6:	b320      	cbz	r0, 1d922 <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   1d8d8:	f7ff fe99 	bl	1d60e <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1d8dc:	4669      	mov	r1, sp
   1d8de:	4628      	mov	r0, r5
   1d8e0:	f7ff fe87 	bl	1d5f2 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1d8e4:	69ab      	ldr	r3, [r5, #24]
   1d8e6:	075b      	lsls	r3, r3, #29
   1d8e8:	d518      	bpl.n	1d91c <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   1d8ea:	4668      	mov	r0, sp
   1d8ec:	f7f4 fc30 	bl	12150 <ping_request_encode>
	if (err_code < 0) {
   1d8f0:	1e04      	subs	r4, r0, #0
   1d8f2:	db0d      	blt.n	1d910 <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1d8f4:	e9dd 1200 	ldrd	r1, r2, [sp]
   1d8f8:	4628      	mov	r0, r5
   1d8fa:	1a52      	subs	r2, r2, r1
   1d8fc:	f7ff fee7 	bl	1d6ce <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   1d900:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1d904:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   1d906:	2b7f      	cmp	r3, #127	; 0x7f
   1d908:	d002      	beq.n	1d910 <mqtt_ping+0x3e>
		client->unacked_ping++;
   1d90a:	3301      	adds	r3, #1
   1d90c:	f885 305f 	strb.w	r3, [r5, #95]	; 0x5f
   1d910:	4628      	mov	r0, r5
   1d912:	f7f4 fc61 	bl	121d8 <sys_mutex_unlock>
}
   1d916:	4620      	mov	r0, r4
   1d918:	b003      	add	sp, #12
   1d91a:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1d91c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1d920:	e7f6      	b.n	1d910 <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   1d922:	f06f 0415 	mvn.w	r4, #21
   1d926:	e7f6      	b.n	1d916 <mqtt_ping+0x44>

0001d928 <mqtt_abort>:
{
   1d928:	b510      	push	{r4, lr}
   1d92a:	4604      	mov	r4, r0
	mqtt_mutex_lock(client);
   1d92c:	f7ff fe6f 	bl	1d60e <mqtt_mutex_lock>
	NULL_PARAM_CHECK(client);
   1d930:	b15c      	cbz	r4, 1d94a <mqtt_abort+0x22>
	if (client->internal.state != MQTT_STATE_IDLE) {
   1d932:	69a3      	ldr	r3, [r4, #24]
   1d934:	b123      	cbz	r3, 1d940 <mqtt_abort+0x18>
		client_disconnect(client, -ECONNABORTED, true);
   1d936:	f06f 0170 	mvn.w	r1, #112	; 0x70
   1d93a:	4620      	mov	r0, r4
   1d93c:	f7ff fe80 	bl	1d640 <client_disconnect.constprop.0>
   1d940:	4620      	mov	r0, r4
   1d942:	f7f4 fc49 	bl	121d8 <sys_mutex_unlock>
	return 0;
   1d946:	2000      	movs	r0, #0
}
   1d948:	bd10      	pop	{r4, pc}
	NULL_PARAM_CHECK(client);
   1d94a:	f06f 0015 	mvn.w	r0, #21
   1d94e:	e7fb      	b.n	1d948 <mqtt_abort+0x20>

0001d950 <mqtt_live>:
{
   1d950:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   1d952:	4606      	mov	r6, r0
   1d954:	b300      	cbz	r0, 1d998 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   1d956:	f7ff fe5a 	bl	1d60e <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   1d95a:	6974      	ldr	r4, [r6, #20]
   1d95c:	f7ff fe3b 	bl	1d5d6 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   1d960:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   1d962:	f8b6 405c 	ldrh.w	r4, [r6, #92]	; 0x5c

	if (diff < 0) {
		return 0;
   1d966:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1d96a:	b19c      	cbz	r4, 1d994 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   1d96c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d970:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   1d972:	4284      	cmp	r4, r0
   1d974:	d80d      	bhi.n	1d992 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   1d976:	4630      	mov	r0, r6
   1d978:	f7ff ffab 	bl	1d8d2 <mqtt_ping>
		ping_sent = true;
   1d97c:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   1d97e:	4605      	mov	r5, r0
	int ret = sys_mutex_unlock(&client->internal.mutex);
   1d980:	4630      	mov	r0, r6
   1d982:	f7f4 fc29 	bl	121d8 <sys_mutex_unlock>
		return -EAGAIN;
   1d986:	2c00      	cmp	r4, #0
   1d988:	bf08      	it	eq
   1d98a:	f06f 050a 	mvneq.w	r5, #10
}
   1d98e:	4628      	mov	r0, r5
   1d990:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   1d992:	2400      	movs	r4, #0
	int err_code = 0;
   1d994:	4625      	mov	r5, r4
   1d996:	e7f3      	b.n	1d980 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   1d998:	f06f 0515 	mvn.w	r5, #21
   1d99c:	e7f7      	b.n	1d98e <mqtt_live+0x3e>

0001d99e <mqtt_input>:
{
   1d99e:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1d9a0:	4605      	mov	r5, r0
   1d9a2:	b1d0      	cbz	r0, 1d9da <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   1d9a4:	f7ff fe33 	bl	1d60e <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   1d9a8:	69ab      	ldr	r3, [r5, #24]
   1d9aa:	079b      	lsls	r3, r3, #30
   1d9ac:	d50f      	bpl.n	1d9ce <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   1d9ae:	6a2b      	ldr	r3, [r5, #32]
   1d9b0:	b983      	cbnz	r3, 1d9d4 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   1d9b2:	4628      	mov	r0, r5
   1d9b4:	f7ff fccd 	bl	1d352 <mqtt_handle_rx>
	if (err_code < 0) {
   1d9b8:	1e04      	subs	r4, r0, #0
   1d9ba:	da03      	bge.n	1d9c4 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   1d9bc:	4621      	mov	r1, r4
   1d9be:	4628      	mov	r0, r5
   1d9c0:	f7ff fe3e 	bl	1d640 <client_disconnect.constprop.0>
   1d9c4:	4628      	mov	r0, r5
   1d9c6:	f7f4 fc07 	bl	121d8 <sys_mutex_unlock>
}
   1d9ca:	4620      	mov	r0, r4
   1d9cc:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   1d9ce:	f06f 040c 	mvn.w	r4, #12
   1d9d2:	e7f7      	b.n	1d9c4 <mqtt_input+0x26>
		return -EBUSY;
   1d9d4:	f06f 040f 	mvn.w	r4, #15
   1d9d8:	e7f4      	b.n	1d9c4 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   1d9da:	f06f 0415 	mvn.w	r4, #21
   1d9de:	e7f4      	b.n	1d9ca <mqtt_input+0x2c>

0001d9e0 <mqtt_read_publish_payload>:

int mqtt_read_publish_payload(struct mqtt_client *client, void *buffer,
			      size_t length)
{
	return read_publish_payload(client, buffer, length, false);
   1d9e0:	2300      	movs	r3, #0
   1d9e2:	f7ff be46 	b.w	1d672 <read_publish_payload>

0001d9e6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d9e6:	6843      	ldr	r3, [r0, #4]
}
   1d9e8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d9ea:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1d9ec:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1d9ee:	600b      	str	r3, [r1, #0]
}
   1d9f0:	4770      	bx	lr

0001d9f2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d9f2:	6843      	ldr	r3, [r0, #4]
   1d9f4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1d9f6:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1d9f8:	4042      	eors	r2, r0
   1d9fa:	400a      	ands	r2, r1
   1d9fc:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1d9fe:	605a      	str	r2, [r3, #4]
}
   1da00:	2000      	movs	r0, #0
   1da02:	4770      	bx	lr

0001da04 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da04:	6843      	ldr	r3, [r0, #4]
}
   1da06:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da08:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1da0a:	6099      	str	r1, [r3, #8]
}
   1da0c:	4770      	bx	lr

0001da0e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da0e:	6843      	ldr	r3, [r0, #4]
}
   1da10:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da12:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1da14:	60d9      	str	r1, [r3, #12]
}
   1da16:	4770      	bx	lr

0001da18 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da18:	6843      	ldr	r3, [r0, #4]
}
   1da1a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da1c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1da1e:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1da20:	4059      	eors	r1, r3
    p_reg->OUT = value;
   1da22:	6051      	str	r1, [r2, #4]
}
   1da24:	4770      	bx	lr

0001da26 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1da26:	68c3      	ldr	r3, [r0, #12]
{
   1da28:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1da2a:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1da2c:	b158      	cbz	r0, 1da46 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1da2e:	2400      	movs	r4, #0
   1da30:	4281      	cmp	r1, r0
   1da32:	d113      	bne.n	1da5c <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1da34:	6808      	ldr	r0, [r1, #0]
   1da36:	b95c      	cbnz	r4, 1da50 <gpio_nrfx_manage_callback+0x2a>
   1da38:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1da3a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1da3c:	42a1      	cmp	r1, r4
   1da3e:	d100      	bne.n	1da42 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1da40:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1da42:	2000      	movs	r0, #0
   1da44:	6008      	str	r0, [r1, #0]
	if (set) {
   1da46:	b972      	cbnz	r2, 1da66 <gpio_nrfx_manage_callback+0x40>
	return 0;
   1da48:	2000      	movs	r0, #0
}
   1da4a:	bd30      	pop	{r4, r5, pc}
   1da4c:	4628      	mov	r0, r5
   1da4e:	e7ef      	b.n	1da30 <gpio_nrfx_manage_callback+0xa>
   1da50:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1da52:	6898      	ldr	r0, [r3, #8]
   1da54:	4281      	cmp	r1, r0
	list->tail = node;
   1da56:	bf08      	it	eq
   1da58:	609c      	streq	r4, [r3, #8]
}
   1da5a:	e7f2      	b.n	1da42 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1da5c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1da5e:	4604      	mov	r4, r0
   1da60:	2d00      	cmp	r5, #0
   1da62:	d1f3      	bne.n	1da4c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1da64:	b13a      	cbz	r2, 1da76 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1da66:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1da68:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1da6a:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1da6c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1da6e:	2800      	cmp	r0, #0
   1da70:	d1ea      	bne.n	1da48 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1da72:	6099      	str	r1, [r3, #8]
}
   1da74:	e7e9      	b.n	1da4a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1da76:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1da7a:	e7e6      	b.n	1da4a <gpio_nrfx_manage_callback+0x24>

0001da7c <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1da7c:	6843      	ldr	r3, [r0, #4]
{
   1da7e:	b410      	push	{r4}
	return config->uarte_regs;
   1da80:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1da82:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1da86:	05d2      	lsls	r2, r2, #23
   1da88:	d518      	bpl.n	1dabc <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da8a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1da8e:	b1aa      	cbz	r2, 1dabc <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1da90:	f04f 0120 	mov.w	r1, #32
   1da94:	f3ef 8211 	mrs	r2, BASEPRI
   1da98:	f381 8811 	msr	BASEPRI, r1
   1da9c:	f3bf 8f6f 	isb	sy
   1daa0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1daa4:	b131      	cbz	r1, 1dab4 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1daa6:	2100      	movs	r1, #0
   1daa8:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1daac:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dab0:	2101      	movs	r1, #1
   1dab2:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1dab4:	f382 8811 	msr	BASEPRI, r2
   1dab8:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   1dabc:	68c2      	ldr	r2, [r0, #12]
   1dabe:	68d2      	ldr	r2, [r2, #12]
   1dac0:	b15a      	cbz	r2, 1dada <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dac2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1dac6:	b159      	cbz	r1, 1dae0 <uarte_nrfx_isr_int+0x64>
		data->int_driven->fifo_fill_lock = 0;
   1dac8:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   1daca:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   1dacc:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1dace:	b13c      	cbz	r4, 1dae0 <uarte_nrfx_isr_int+0x64>
    p_reg->INTENCLR = mask;
   1dad0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1dad4:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1dad8:	7391      	strb	r1, [r2, #14]
}
   1dada:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dade:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dae0:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1dae4:	b121      	cbz	r1, 1daf0 <uarte_nrfx_isr_int+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dae6:	2100      	movs	r1, #0
   1dae8:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1daec:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1daf0:	6813      	ldr	r3, [r2, #0]
   1daf2:	2b00      	cmp	r3, #0
   1daf4:	d0f1      	beq.n	1dada <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1daf6:	6851      	ldr	r1, [r2, #4]
}
   1daf8:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1dafc:	4718      	bx	r3

0001dafe <uarte_nrfx_config_get>:
{
   1dafe:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1db00:	68c2      	ldr	r2, [r0, #12]
   1db02:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1db06:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1db0a:	2000      	movs	r0, #0
   1db0c:	4770      	bx	lr

0001db0e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1db0e:	6843      	ldr	r3, [r0, #4]
   1db10:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1db12:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1db16:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1db1a:	4770      	bx	lr

0001db1c <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1db1c:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1db1e:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1db20:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1db24:	b938      	cbnz	r0, 1db36 <is_tx_ready+0x1a>
   1db26:	7992      	ldrb	r2, [r2, #6]
   1db28:	b932      	cbnz	r2, 1db38 <is_tx_ready+0x1c>
   1db2a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1db2e:	3800      	subs	r0, #0
   1db30:	bf18      	it	ne
   1db32:	2001      	movne	r0, #1
   1db34:	4770      	bx	lr
   1db36:	2001      	movs	r0, #1
}
   1db38:	4770      	bx	lr

0001db3a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1db3a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1db3c:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1db3e:	681b      	ldr	r3, [r3, #0]
   1db40:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1db44:	b148      	cbz	r0, 1db5a <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1db46:	2000      	movs	r0, #0
	*c = data->rx_data;
   1db48:	7d52      	ldrb	r2, [r2, #21]
   1db4a:	700a      	strb	r2, [r1, #0]
   1db4c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1db50:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1db54:	2201      	movs	r2, #1
   1db56:	601a      	str	r2, [r3, #0]
	return 0;
   1db58:	4770      	bx	lr
		return -1;
   1db5a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1db5e:	4770      	bx	lr

0001db60 <uarte_nrfx_fifo_fill>:
{
   1db60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   1db62:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1db64:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   1db66:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   1db68:	68f3      	ldr	r3, [r6, #12]
   1db6a:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1db6c:	3310      	adds	r3, #16
   1db6e:	4294      	cmp	r4, r2
   1db70:	bfa8      	it	ge
   1db72:	4614      	movge	r4, r2
   1db74:	2201      	movs	r2, #1
   1db76:	e8d3 7fef 	ldaex	r7, [r3]
   1db7a:	2f00      	cmp	r7, #0
   1db7c:	d104      	bne.n	1db88 <uarte_nrfx_fifo_fill+0x28>
   1db7e:	e8c3 2fec 	stlex	ip, r2, [r3]
   1db82:	f1bc 0f00 	cmp.w	ip, #0
   1db86:	d1f6      	bne.n	1db76 <uarte_nrfx_fifo_fill+0x16>
   1db88:	bf0c      	ite	eq
   1db8a:	4613      	moveq	r3, r2
   1db8c:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1db8e:	d01c      	beq.n	1dbca <uarte_nrfx_fifo_fill+0x6a>
		return 0;
   1db90:	461c      	mov	r4, r3
}
   1db92:	4620      	mov	r0, r4
   1db94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1db96:	68f2      	ldr	r2, [r6, #12]
   1db98:	5ccf      	ldrb	r7, [r1, r3]
   1db9a:	6892      	ldr	r2, [r2, #8]
   1db9c:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   1db9e:	3301      	adds	r3, #1
   1dba0:	42a3      	cmp	r3, r4
   1dba2:	dbf8      	blt.n	1db96 <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   1dba4:	f04f 0320 	mov.w	r3, #32
   1dba8:	f3ef 8111 	mrs	r1, BASEPRI
   1dbac:	f383 8811 	msr	BASEPRI, r3
   1dbb0:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1dbb4:	f7ff ffb2 	bl	1db1c <is_tx_ready>
   1dbb8:	68f3      	ldr	r3, [r6, #12]
   1dbba:	b940      	cbnz	r0, 1dbce <uarte_nrfx_fifo_fill+0x6e>
		len = 0;
   1dbbc:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   1dbbe:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   1dbc0:	f381 8811 	msr	BASEPRI, r1
   1dbc4:	f3bf 8f6f 	isb	sy
	return len;
   1dbc8:	e7e3      	b.n	1db92 <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   1dbca:	2300      	movs	r3, #0
   1dbcc:	e7e8      	b.n	1dba0 <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1dbce:	689b      	ldr	r3, [r3, #8]
   1dbd0:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbd4:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   1dbd6:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbda:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   1dbde:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   1dbe2:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   1dbe6:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dbea:	2301      	movs	r3, #1
   1dbec:	60ab      	str	r3, [r5, #8]
}
   1dbee:	e7e7      	b.n	1dbc0 <uarte_nrfx_fifo_fill+0x60>

0001dbf0 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   1dbf0:	6843      	ldr	r3, [r0, #4]
   1dbf2:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dbf4:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1dbf8:	b153      	cbz	r3, 1dc10 <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1dbfa:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbfc:	2000      	movs	r0, #0
   1dbfe:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   1dc02:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc06:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1dc08:	7d5b      	ldrb	r3, [r3, #21]
   1dc0a:	700b      	strb	r3, [r1, #0]
   1dc0c:	6010      	str	r0, [r2, #0]
}
   1dc0e:	4770      	bx	lr
	int num_rx = 0;
   1dc10:	4618      	mov	r0, r3
}
   1dc12:	4770      	bx	lr

0001dc14 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1dc14:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1dc16:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   1dc18:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1dc1a:	f04f 0020 	mov.w	r0, #32
   1dc1e:	f3ef 8311 	mrs	r3, BASEPRI
   1dc22:	f380 8811 	msr	BASEPRI, r0
   1dc26:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1dc2a:	2000      	movs	r0, #0
   1dc2c:	68c9      	ldr	r1, [r1, #12]
   1dc2e:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1dc30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1dc34:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1dc38:	f383 8811 	msr	BASEPRI, r3
   1dc3c:	f3bf 8f6f 	isb	sy
}
   1dc40:	4770      	bx	lr

0001dc42 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1dc42:	2201      	movs	r2, #1
   1dc44:	68c3      	ldr	r3, [r0, #12]
   1dc46:	68db      	ldr	r3, [r3, #12]
   1dc48:	739a      	strb	r2, [r3, #14]
}
   1dc4a:	4770      	bx	lr

0001dc4c <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1dc4c:	68c3      	ldr	r3, [r0, #12]
   1dc4e:	68db      	ldr	r3, [r3, #12]
   1dc50:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1dc52:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1dc56:	b962      	cbnz	r2, 1dc72 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1dc58:	6842      	ldr	r2, [r0, #4]
   1dc5a:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc5c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1dc60:	b140      	cbz	r0, 1dc74 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1dc62:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   1dc66:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1dc6a:	d003      	beq.n	1dc74 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1dc6c:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   1dc6e:	6119      	str	r1, [r3, #16]
   1dc70:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1dc72:	2000      	movs	r0, #0
}
   1dc74:	4770      	bx	lr

0001dc76 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1dc76:	6843      	ldr	r3, [r0, #4]
   1dc78:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc7a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1dc7e:	3800      	subs	r0, #0
   1dc80:	bf18      	it	ne
   1dc82:	2001      	movne	r0, #1
   1dc84:	4770      	bx	lr

0001dc86 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1dc86:	2210      	movs	r2, #16
	return config->uarte_regs;
   1dc88:	6843      	ldr	r3, [r0, #4]
   1dc8a:	681b      	ldr	r3, [r3, #0]
   1dc8c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1dc90:	4770      	bx	lr

0001dc92 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1dc92:	2210      	movs	r2, #16
	return config->uarte_regs;
   1dc94:	6843      	ldr	r3, [r0, #4]
   1dc96:	681b      	ldr	r3, [r3, #0]
   1dc98:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1dc9c:	4770      	bx	lr

0001dc9e <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1dc9e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1dca2:	6843      	ldr	r3, [r0, #4]
   1dca4:	681b      	ldr	r3, [r3, #0]
   1dca6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1dcaa:	4770      	bx	lr

0001dcac <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1dcac:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1dcb0:	6843      	ldr	r3, [r0, #4]
   1dcb2:	681b      	ldr	r3, [r3, #0]
   1dcb4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1dcb8:	4770      	bx	lr

0001dcba <uarte_nrfx_irq_update>:
}
   1dcba:	2001      	movs	r0, #1
   1dcbc:	4770      	bx	lr

0001dcbe <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1dcbe:	68c3      	ldr	r3, [r0, #12]
   1dcc0:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1dcc2:	e9c3 1200 	strd	r1, r2, [r3]
}
   1dcc6:	4770      	bx	lr

0001dcc8 <uarte_nrfx_irq_is_pending>:
{
   1dcc8:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1dcca:	6843      	ldr	r3, [r0, #4]
{
   1dccc:	4604      	mov	r4, r0
	return config->uarte_regs;
   1dcce:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1dcd0:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1dcd4:	025b      	lsls	r3, r3, #9
   1dcd6:	d405      	bmi.n	1dce4 <uarte_nrfx_irq_is_pending+0x1c>
   1dcd8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1dcdc:	f010 0010 	ands.w	r0, r0, #16
   1dce0:	d106      	bne.n	1dcf0 <uarte_nrfx_irq_is_pending+0x28>
}
   1dce2:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1dce4:	f7ff ffb2 	bl	1dc4c <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1dce8:	2800      	cmp	r0, #0
   1dcea:	d0f5      	beq.n	1dcd8 <uarte_nrfx_irq_is_pending+0x10>
		||
   1dcec:	2001      	movs	r0, #1
   1dcee:	e7f8      	b.n	1dce2 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1dcf0:	4620      	mov	r0, r4
   1dcf2:	f7ff ffc0 	bl	1dc76 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1dcf6:	3800      	subs	r0, #0
   1dcf8:	bf18      	it	ne
   1dcfa:	2001      	movne	r0, #1
   1dcfc:	e7f1      	b.n	1dce2 <uarte_nrfx_irq_is_pending+0x1a>

0001dcfe <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   1dcfe:	2000      	movs	r0, #0
   1dd00:	4770      	bx	lr

0001dd02 <entropy_cc3xx_rng_get_entropy>:
{
   1dd02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd06:	460f      	mov	r7, r1
   1dd08:	4614      	mov	r4, r2
	size_t offset = 0;
   1dd0a:	2600      	movs	r6, #0
	int res = -EINVAL;
   1dd0c:	f06f 0515 	mvn.w	r5, #21
{
   1dd10:	b0a6      	sub	sp, #152	; 0x98
	while (length > 0) {
   1dd12:	b91c      	cbnz	r4, 1dd1c <entropy_cc3xx_rng_get_entropy+0x1a>
}
   1dd14:	4628      	mov	r0, r5
   1dd16:	b026      	add	sp, #152	; 0x98
   1dd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   1dd1c:	2190      	movs	r1, #144	; 0x90
   1dd1e:	aa01      	add	r2, sp, #4
   1dd20:	a802      	add	r0, sp, #8
   1dd22:	f7ff f8af 	bl	1ce84 <spm_request_random_number>
		if (res < 0) {
   1dd26:	1e05      	subs	r5, r0, #0
   1dd28:	dbf4      	blt.n	1dd14 <entropy_cc3xx_rng_get_entropy+0x12>
		if (olen != sizeof(spm_buf)) {
   1dd2a:	9b01      	ldr	r3, [sp, #4]
   1dd2c:	2b90      	cmp	r3, #144	; 0x90
   1dd2e:	d10e      	bne.n	1dd4e <entropy_cc3xx_rng_get_entropy+0x4c>
		to_copy = MIN(length, sizeof(spm_buf));
   1dd30:	2c90      	cmp	r4, #144	; 0x90
   1dd32:	46a0      	mov	r8, r4
   1dd34:	bf28      	it	cs
   1dd36:	f04f 0890 	movcs.w	r8, #144	; 0x90
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1dd3a:	19b8      	adds	r0, r7, r6
   1dd3c:	4642      	mov	r2, r8
   1dd3e:	a902      	add	r1, sp, #8
		length -= to_copy;
   1dd40:	eba4 0408 	sub.w	r4, r4, r8
   1dd44:	f002 fc79 	bl	2063a <memcpy>
   1dd48:	b2a4      	uxth	r4, r4
		offset += to_copy;
   1dd4a:	4446      	add	r6, r8
   1dd4c:	e7e1      	b.n	1dd12 <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   1dd4e:	f06f 0515 	mvn.w	r5, #21
   1dd52:	e7df      	b.n	1dd14 <entropy_cc3xx_rng_get_entropy+0x12>

0001dd54 <update_offset>:
{
   1dd54:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   1dd56:	4604      	mov	r4, r0
   1dd58:	b140      	cbz	r0, 1dd6c <update_offset+0x18>
   1dd5a:	6803      	ldr	r3, [r0, #0]
   1dd5c:	b133      	cbz	r3, 1dd6c <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   1dd5e:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   1dd60:	4418      	add	r0, r3
   1dd62:	f7ef f8e7 	bl	cf34 <strlen>
   1dd66:	68a3      	ldr	r3, [r4, #8]
   1dd68:	4418      	add	r0, r3
   1dd6a:	60a0      	str	r0, [r4, #8]
}
   1dd6c:	bd10      	pop	{r4, pc}

0001dd6e <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   1dd6e:	b161      	cbz	r1, 1dd8a <add_item_to_array+0x1c>
   1dd70:	b160      	cbz	r0, 1dd8c <add_item_to_array+0x1e>
    child = array->child;
   1dd72:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   1dd74:	b913      	cbnz	r3, 1dd7c <add_item_to_array+0xe>
        array->child = item;
   1dd76:	6081      	str	r1, [r0, #8]
}
   1dd78:	2001      	movs	r0, #1
   1dd7a:	4770      	bx	lr
        while (child->next)
   1dd7c:	461a      	mov	r2, r3
   1dd7e:	681b      	ldr	r3, [r3, #0]
   1dd80:	2b00      	cmp	r3, #0
   1dd82:	d1fb      	bne.n	1dd7c <add_item_to_array+0xe>
    prev->next = item;
   1dd84:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   1dd86:	604a      	str	r2, [r1, #4]
   1dd88:	e7f6      	b.n	1dd78 <add_item_to_array+0xa>
        return false;
   1dd8a:	4608      	mov	r0, r1
}
   1dd8c:	4770      	bx	lr

0001dd8e <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   1dd8e:	4603      	mov	r3, r0
   1dd90:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   1dd92:	2028      	movs	r0, #40	; 0x28
   1dd94:	4798      	blx	r3
    if (node)
   1dd96:	4604      	mov	r4, r0
   1dd98:	b118      	cbz	r0, 1dda2 <cJSON_New_Item.isra.0+0x14>
__ssp_bos_icheck3(memset, void *, int)
   1dd9a:	2228      	movs	r2, #40	; 0x28
   1dd9c:	2100      	movs	r1, #0
   1dd9e:	f002 fc59 	bl	20654 <memset>
}
   1dda2:	4620      	mov	r0, r4
   1dda4:	bd10      	pop	{r4, pc}

0001dda6 <ensure>:
{
   1dda6:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   1dda8:	4604      	mov	r4, r0
   1ddaa:	b1b8      	cbz	r0, 1dddc <ensure+0x36>
   1ddac:	6805      	ldr	r5, [r0, #0]
   1ddae:	b165      	cbz	r5, 1ddca <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   1ddb0:	6842      	ldr	r2, [r0, #4]
   1ddb2:	b112      	cbz	r2, 1ddba <ensure+0x14>
   1ddb4:	6883      	ldr	r3, [r0, #8]
   1ddb6:	429a      	cmp	r2, r3
   1ddb8:	d910      	bls.n	1dddc <ensure+0x36>
    if (needed > INT_MAX)
   1ddba:	2900      	cmp	r1, #0
   1ddbc:	db0e      	blt.n	1dddc <ensure+0x36>
    needed += p->offset + 1;
   1ddbe:	68a0      	ldr	r0, [r4, #8]
   1ddc0:	4401      	add	r1, r0
   1ddc2:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   1ddc4:	429a      	cmp	r2, r3
   1ddc6:	d302      	bcc.n	1ddce <ensure+0x28>
        return p->buffer + p->offset;
   1ddc8:	4405      	add	r5, r0
}
   1ddca:	4628      	mov	r0, r5
   1ddcc:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   1ddce:	6922      	ldr	r2, [r4, #16]
   1ddd0:	b922      	cbnz	r2, 1dddc <ensure+0x36>
    if (needed > (INT_MAX / 2))
   1ddd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   1ddd6:	d303      	bcc.n	1dde0 <ensure+0x3a>
        if (needed <= INT_MAX)
   1ddd8:	2b00      	cmp	r3, #0
   1ddda:	da0f      	bge.n	1ddfc <ensure+0x56>
        return NULL;
   1dddc:	2500      	movs	r5, #0
   1ddde:	e7f4      	b.n	1ddca <ensure+0x24>
        newsize = needed + 1;
   1dde0:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   1dde2:	6a23      	ldr	r3, [r4, #32]
   1dde4:	b16b      	cbz	r3, 1de02 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   1dde6:	4628      	mov	r0, r5
   1dde8:	4631      	mov	r1, r6
   1ddea:	4798      	blx	r3
        if (newbuffer == NULL)
   1ddec:	4605      	mov	r5, r0
   1ddee:	b9b0      	cbnz	r0, 1de1e <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   1ddf0:	69e3      	ldr	r3, [r4, #28]
   1ddf2:	6820      	ldr	r0, [r4, #0]
   1ddf4:	4798      	blx	r3
            p->buffer = NULL;
   1ddf6:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   1ddfa:	e7e6      	b.n	1ddca <ensure+0x24>
            newsize = INT_MAX;
   1ddfc:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1de00:	e7ef      	b.n	1dde2 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   1de02:	4630      	mov	r0, r6
   1de04:	69a3      	ldr	r3, [r4, #24]
   1de06:	4798      	blx	r3
        if (!newbuffer)
   1de08:	4605      	mov	r5, r0
   1de0a:	2800      	cmp	r0, #0
   1de0c:	d0f0      	beq.n	1ddf0 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   1de0e:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1de10:	6821      	ldr	r1, [r4, #0]
   1de12:	3201      	adds	r2, #1
   1de14:	f002 fc11 	bl	2063a <memcpy>
        p->hooks.deallocate(p->buffer);
   1de18:	69e3      	ldr	r3, [r4, #28]
   1de1a:	6820      	ldr	r0, [r4, #0]
   1de1c:	4798      	blx	r3
    return newbuffer + p->offset;
   1de1e:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   1de20:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   1de24:	441d      	add	r5, r3
   1de26:	e7d0      	b.n	1ddca <ensure+0x24>

0001de28 <cJSON_Print>:
    return (char*)print(item, true, &global_hooks);
   1de28:	2101      	movs	r1, #1
   1de2a:	f7f5 b86d 	b.w	12f08 <print.constprop.0>

0001de2e <cJSON_AddItemToObject>:
    add_item_to_object(object, string, item, &global_hooks, false);
   1de2e:	2300      	movs	r3, #0
   1de30:	f7f5 b842 	b.w	12eb8 <add_item_to_object.constprop.0>

0001de34 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1de34:	4668      	mov	r0, sp
   1de36:	f020 0107 	bic.w	r1, r0, #7
   1de3a:	468d      	mov	sp, r1
   1de3c:	b501      	push	{r0, lr}
	nrf_modem_os_trace_irq_handler();
   1de3e:	f7f7 fdc9 	bl	159d4 <nrf_modem_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1de42:	f7f3 f9c7 	bl	111d4 <_arch_isr_direct_pm>
   1de46:	f7f3 fb85 	bl	11554 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1de4a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1de4e:	4685      	mov	sp, r0
   1de50:	4770      	bx	lr

0001de52 <trace_task_create>:
{
   1de52:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   1de54:	201d      	movs	r0, #29
   1de56:	2200      	movs	r2, #0
   1de58:	2106      	movs	r1, #6
   1de5a:	f7f3 f9a5 	bl	111a8 <z_arm_irq_priority_set>
}
   1de5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   1de62:	201d      	movs	r0, #29
   1de64:	f7f3 b982 	b.w	1116c <arch_irq_enable>

0001de68 <read_task_create>:
{
   1de68:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   1de6a:	201c      	movs	r0, #28
   1de6c:	2200      	movs	r2, #0
   1de6e:	2106      	movs	r1, #6
   1de70:	f7f3 f99a 	bl	111a8 <z_arm_irq_priority_set>
}
   1de74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   1de78:	201c      	movs	r0, #28
   1de7a:	f7f3 b977 	b.w	1116c <arch_irq_enable>

0001de7e <nrf_modem_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   1de7e:	2000      	movs	r0, #0
   1de80:	4770      	bx	lr

0001de82 <z_to_nrf_flags>:
{
   1de82:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   1de84:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   1de88:	bf18      	it	ne
   1de8a:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   1de8c:	0799      	lsls	r1, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   1de8e:	bf48      	it	mi
   1de90:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   1de94:	06da      	lsls	r2, r3, #27
		nrf_flags |= NRF_MSG_TRUNC;
   1de96:	bf48      	it	mi
   1de98:	f040 0020 	orrmi.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   1de9c:	069b      	lsls	r3, r3, #26
		nrf_flags |= NRF_MSG_WAITALL;
   1de9e:	bf48      	it	mi
   1dea0:	f040 0010 	orrmi.w	r0, r0, #16
}
   1dea4:	4770      	bx	lr

0001dea6 <z_to_nrf_family>:
	switch (z_family) {
   1dea6:	2806      	cmp	r0, #6
   1dea8:	d80a      	bhi.n	1dec0 <z_to_nrf_family+0x1a>
   1deaa:	b198      	cbz	r0, 1ded4 <z_to_nrf_family+0x2e>
   1deac:	3801      	subs	r0, #1
   1deae:	2805      	cmp	r0, #5
   1deb0:	d810      	bhi.n	1ded4 <z_to_nrf_family+0x2e>
   1deb2:	e8df f000 	tbb	[pc, r0]
   1deb6:	0312      	.short	0x0312
   1deb8:	0b0f0f0d 	.word	0x0b0f0f0d
   1debc:	200a      	movs	r0, #10
   1debe:	4770      	bx	lr
   1dec0:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   1dec2:	bf14      	ite	ne
   1dec4:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   1dec8:	2066      	moveq	r0, #102	; 0x66
   1deca:	4770      	bx	lr
		return NRF_AF_LOCAL;
   1decc:	2001      	movs	r0, #1
   1dece:	4770      	bx	lr
		return NRF_AF_PACKET;
   1ded0:	2005      	movs	r0, #5
   1ded2:	4770      	bx	lr
		return -EAFNOSUPPORT;
   1ded4:	f06f 0069 	mvn.w	r0, #105	; 0x69
   1ded8:	4770      	bx	lr
		return NRF_AF_INET;
   1deda:	2002      	movs	r0, #2
}
   1dedc:	4770      	bx	lr

0001dede <z_to_nrf_protocol>:
	switch (proto) {
   1dede:	f240 1311 	movw	r3, #273	; 0x111
   1dee2:	4298      	cmp	r0, r3
   1dee4:	d023      	beq.n	1df2e <z_to_nrf_protocol+0x50>
   1dee6:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   1deea:	da11      	bge.n	1df10 <z_to_nrf_protocol+0x32>
   1deec:	2811      	cmp	r0, #17
   1deee:	d021      	beq.n	1df34 <z_to_nrf_protocol+0x56>
   1def0:	dc06      	bgt.n	1df00 <z_to_nrf_protocol+0x22>
   1def2:	b300      	cbz	r0, 1df36 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   1def4:	2806      	cmp	r0, #6
   1def6:	bf14      	ite	ne
   1def8:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   1defc:	2001      	moveq	r0, #1
   1defe:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   1df00:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1df04:	bf14      	ite	ne
   1df06:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   1df0a:	f44f 7082 	moveq.w	r0, #260	; 0x104
   1df0e:	4770      	bx	lr
	switch (proto) {
   1df10:	f240 2302 	movw	r3, #514	; 0x202
   1df14:	4298      	cmp	r0, r3
   1df16:	d00e      	beq.n	1df36 <z_to_nrf_protocol+0x58>
   1df18:	f240 2303 	movw	r3, #515	; 0x203
   1df1c:	4298      	cmp	r0, r3
   1df1e:	d00a      	beq.n	1df36 <z_to_nrf_protocol+0x58>
   1df20:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   1df24:	4298      	cmp	r0, r3
   1df26:	bf18      	it	ne
   1df28:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   1df2c:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   1df2e:	f44f 7087 	mov.w	r0, #270	; 0x10e
   1df32:	4770      	bx	lr
	switch (proto) {
   1df34:	2002      	movs	r0, #2
}
   1df36:	4770      	bx	lr

0001df38 <nrf91_socket_is_supported>:
}
   1df38:	2001      	movs	r0, #1
   1df3a:	4770      	bx	lr

0001df3c <nrf91_nrf_modem_lib_socket_offload_init>:
}
   1df3c:	2000      	movs	r0, #0
   1df3e:	4770      	bx	lr

0001df40 <nrf91_socket_offload_getsockopt>:
{
   1df40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1df44:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   1df46:	2300      	movs	r3, #0
{
   1df48:	b086      	sub	sp, #24
   1df4a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   1df4e:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1df52:	f8d8 3000 	ldr.w	r3, [r8]
{
   1df56:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1df58:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1df5a:	f240 2302 	movw	r3, #514	; 0x202
   1df5e:	4299      	cmp	r1, r3
{
   1df60:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   1df62:	f100 37ff 	add.w	r7, r0, #4294967295
	switch (z_in_level) {
   1df66:	d005      	beq.n	1df74 <nrf91_socket_offload_getsockopt+0x34>
   1df68:	dc31      	bgt.n	1dfce <nrf91_socket_offload_getsockopt+0x8e>
   1df6a:	2901      	cmp	r1, #1
   1df6c:	d002      	beq.n	1df74 <nrf91_socket_offload_getsockopt+0x34>
   1df6e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1df72:	d13d      	bne.n	1dff0 <nrf91_socket_offload_getsockopt+0xb0>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1df74:	4631      	mov	r1, r6
   1df76:	4620      	mov	r0, r4
   1df78:	aa02      	add	r2, sp, #8
   1df7a:	f7f5 fbd5 	bl	13728 <z_to_nrf_optname>
   1df7e:	2800      	cmp	r0, #0
   1df80:	db36      	blt.n	1dff0 <nrf91_socket_offload_getsockopt+0xb0>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   1df82:	2c01      	cmp	r4, #1
   1df84:	d127      	bne.n	1dfd6 <nrf91_socket_offload_getsockopt+0x96>
   1df86:	f1a6 0314 	sub.w	r3, r6, #20
   1df8a:	2b01      	cmp	r3, #1
   1df8c:	d823      	bhi.n	1dfd6 <nrf91_socket_offload_getsockopt+0x96>
		nrf_optlen = sizeof(struct nrf_timeval);
   1df8e:	2308      	movs	r3, #8
   1df90:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   1df92:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1df94:	aa03      	add	r2, sp, #12
   1df96:	4638      	mov	r0, r7
   1df98:	9200      	str	r2, [sp, #0]
   1df9a:	4621      	mov	r1, r4
   1df9c:	9a02      	ldr	r2, [sp, #8]
   1df9e:	f001 fe02 	bl	1fba6 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   1dfa2:	4607      	mov	r7, r0
   1dfa4:	b978      	cbnz	r0, 1dfc6 <nrf91_socket_offload_getsockopt+0x86>
   1dfa6:	b175      	cbz	r5, 1dfc6 <nrf91_socket_offload_getsockopt+0x86>
		*optlen = nrf_optlen;
   1dfa8:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1dfaa:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1dfac:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1dfb0:	d109      	bne.n	1dfc6 <nrf91_socket_offload_getsockopt+0x86>
			if (optname == SO_ERROR) {
   1dfb2:	2e04      	cmp	r6, #4
   1dfb4:	d111      	bne.n	1dfda <nrf91_socket_offload_getsockopt+0x9a>
				if (*(int *)optval != 0) {
   1dfb6:	6828      	ldr	r0, [r5, #0]
   1dfb8:	b128      	cbz	r0, 1dfc6 <nrf91_socket_offload_getsockopt+0x86>
					nrf_modem_os_errno_set(*(int *)optval);
   1dfba:	f7f5 f9cd 	bl	13358 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   1dfbe:	f7fe ffa6 	bl	1cf0e <__errno>
   1dfc2:	6803      	ldr	r3, [r0, #0]
   1dfc4:	602b      	str	r3, [r5, #0]
}
   1dfc6:	4638      	mov	r0, r7
   1dfc8:	b006      	add	sp, #24
   1dfca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1dfce:	f240 2303 	movw	r3, #515	; 0x203
   1dfd2:	4299      	cmp	r1, r3
   1dfd4:	e7cd      	b.n	1df72 <nrf91_socket_offload_getsockopt+0x32>
   1dfd6:	462b      	mov	r3, r5
   1dfd8:	e7dc      	b.n	1df94 <nrf91_socket_offload_getsockopt+0x54>
			} else if ((optname == SO_RCVTIMEO) ||
   1dfda:	3e14      	subs	r6, #20
   1dfdc:	2e01      	cmp	r6, #1
   1dfde:	d8f2      	bhi.n	1dfc6 <nrf91_socket_offload_getsockopt+0x86>
				((struct timeval *)optval)->tv_sec =
   1dfe0:	9b04      	ldr	r3, [sp, #16]
   1dfe2:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   1dfe4:	9b05      	ldr	r3, [sp, #20]
   1dfe6:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   1dfe8:	2308      	movs	r3, #8
   1dfea:	f8c8 3000 	str.w	r3, [r8]
   1dfee:	e7ea      	b.n	1dfc6 <nrf91_socket_offload_getsockopt+0x86>
	errno = ENOPROTOOPT;
   1dff0:	f7fe ff8d 	bl	1cf0e <__errno>
   1dff4:	236d      	movs	r3, #109	; 0x6d
	return retval;
   1dff6:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   1dffa:	6003      	str	r3, [r0, #0]
	return retval;
   1dffc:	e7e3      	b.n	1dfc6 <nrf91_socket_offload_getsockopt+0x86>

0001dffe <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1dffe:	3801      	subs	r0, #1
   1e000:	f001 bd7f 	b.w	1fb02 <nrf_listen>

0001e004 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   1e004:	3801      	subs	r0, #1
   1e006:	f001 bd28 	b.w	1fa5a <nrf_close>

0001e00a <nrf91_socket_offload_freeaddrinfo>:
{
   1e00a:	b538      	push	{r3, r4, r5, lr}
   1e00c:	4604      	mov	r4, r0
	while (next != NULL) {
   1e00e:	b904      	cbnz	r4, 1e012 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1e010:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1e012:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   1e014:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   1e016:	f002 fab3 	bl	20580 <k_free>
		k_free(this);
   1e01a:	4620      	mov	r0, r4
   1e01c:	f002 fab0 	bl	20580 <k_free>
		next = next->ai_next;
   1e020:	462c      	mov	r4, r5
   1e022:	e7f4      	b.n	1e00e <nrf91_socket_offload_freeaddrinfo+0x4>

0001e024 <z_to_nrf_addrinfo_hints>:
{
   1e024:	b538      	push	{r3, r4, r5, lr}
   1e026:	460c      	mov	r4, r1
   1e028:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   1e02a:	221c      	movs	r2, #28
   1e02c:	2100      	movs	r1, #0
   1e02e:	1d20      	adds	r0, r4, #4
   1e030:	f002 fb10 	bl	20654 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1e034:	2300      	movs	r3, #0
   1e036:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1e038:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   1e03a:	2b03      	cmp	r3, #3
   1e03c:	d003      	beq.n	1e046 <z_to_nrf_addrinfo_hints+0x22>
   1e03e:	2b04      	cmp	r3, #4
   1e040:	bf08      	it	eq
   1e042:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   1e046:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1e048:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   1e04a:	f7ff ff2c 	bl	1dea6 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1e04e:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   1e052:	d00b      	beq.n	1e06c <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   1e054:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1e056:	6928      	ldr	r0, [r5, #16]
   1e058:	f7ff ff41 	bl	1dede <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1e05c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1e060:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1e062:	d003      	beq.n	1e06c <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   1e064:	69e8      	ldr	r0, [r5, #28]
   1e066:	b108      	cbz	r0, 1e06c <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1e068:	61a0      	str	r0, [r4, #24]
	return 0;
   1e06a:	2000      	movs	r0, #0
}
   1e06c:	bd38      	pop	{r3, r4, r5, pc}

0001e06e <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   1e06e:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   1e070:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   1e072:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1e074:	4603      	mov	r3, r0
{
   1e076:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   1e078:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e07c:	f101 0420 	add.w	r4, r1, #32
   1e080:	f101 0210 	add.w	r2, r1, #16
   1e084:	f852 5b04 	ldr.w	r5, [r2], #4
   1e088:	42a2      	cmp	r2, r4
   1e08a:	f843 5b04 	str.w	r5, [r3], #4
   1e08e:	d1f9      	bne.n	1e084 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   1e090:	6a0b      	ldr	r3, [r1, #32]
   1e092:	7503      	strb	r3, [r0, #20]
}
   1e094:	bd30      	pop	{r4, r5, pc}

0001e096 <nrf91_socket_offload_recvfrom>:
{
   1e096:	b5f0      	push	{r4, r5, r6, r7, lr}
	int sd = OBJ_TO_SD(obj);
   1e098:	1e45      	subs	r5, r0, #1
{
   1e09a:	b08f      	sub	sp, #60	; 0x3c
   1e09c:	4618      	mov	r0, r3
   1e09e:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   1e0a2:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1e0a6:	f7ff feec 	bl	1de82 <z_to_nrf_flags>
	if (from == NULL) {
   1e0aa:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1e0ae:	4603      	mov	r3, r0
   1e0b0:	b944      	cbnz	r4, 1e0c4 <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1e0b2:	4628      	mov	r0, r5
   1e0b4:	e9cd 4400 	strd	r4, r4, [sp]
   1e0b8:	f001 fcf6 	bl	1faa8 <nrf_recvfrom>
   1e0bc:	4605      	mov	r5, r0
}
   1e0be:	4628      	mov	r0, r5
   1e0c0:	b00f      	add	sp, #60	; 0x3c
   1e0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1e0c4:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1e0c6:	af05      	add	r7, sp, #20
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1e0c8:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1e0ca:	a804      	add	r0, sp, #16
   1e0cc:	9001      	str	r0, [sp, #4]
   1e0ce:	9700      	str	r7, [sp, #0]
   1e0d0:	4628      	mov	r0, r5
   1e0d2:	f001 fce9 	bl	1faa8 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   1e0d6:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1e0d8:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   1e0da:	2b02      	cmp	r3, #2
   1e0dc:	d109      	bne.n	1e0f2 <nrf91_socket_offload_recvfrom+0x5c>
	ptr->sin_port = nrf_in->sin_port;
   1e0de:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1e0e2:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1e0e4:	2301      	movs	r3, #1
   1e0e6:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e0e8:	9b08      	ldr	r3, [sp, #32]
   1e0ea:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1e0ec:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   1e0ee:	6033      	str	r3, [r6, #0]
	return retval;
   1e0f0:	e7e5      	b.n	1e0be <nrf91_socket_offload_recvfrom+0x28>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   1e0f2:	2b0a      	cmp	r3, #10
   1e0f4:	d1e3      	bne.n	1e0be <nrf91_socket_offload_recvfrom+0x28>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   1e0f6:	4639      	mov	r1, r7
   1e0f8:	4620      	mov	r0, r4
   1e0fa:	f7ff ffb8 	bl	1e06e <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   1e0fe:	2318      	movs	r3, #24
   1e100:	e7f5      	b.n	1e0ee <nrf91_socket_offload_recvfrom+0x58>

0001e102 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   1e102:	2300      	movs	r3, #0
{
   1e104:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   1e106:	e9cd 3300 	strd	r3, r3, [sp]
   1e10a:	f7ff ffc4 	bl	1e096 <nrf91_socket_offload_recvfrom>
}
   1e10e:	b003      	add	sp, #12
   1e110:	f85d fb04 	ldr.w	pc, [sp], #4

0001e114 <z_to_nrf_ipv6>:
{
   1e114:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e116:	2124      	movs	r1, #36	; 0x24
   1e118:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   1e11a:	8841      	ldrh	r1, [r0, #2]
{
   1e11c:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   1e11e:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e120:	210a      	movs	r1, #10
{
   1e122:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   1e124:	6059      	str	r1, [r3, #4]
   1e126:	1d04      	adds	r4, r0, #4
   1e128:	f103 0610 	add.w	r6, r3, #16
   1e12c:	f100 0714 	add.w	r7, r0, #20
   1e130:	4635      	mov	r5, r6
   1e132:	6820      	ldr	r0, [r4, #0]
   1e134:	6861      	ldr	r1, [r4, #4]
   1e136:	3408      	adds	r4, #8
   1e138:	c503      	stmia	r5!, {r0, r1}
   1e13a:	42bc      	cmp	r4, r7
   1e13c:	462e      	mov	r6, r5
   1e13e:	d1f7      	bne.n	1e130 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1e140:	7d12      	ldrb	r2, [r2, #20]
   1e142:	621a      	str	r2, [r3, #32]
}
   1e144:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e146 <nrf91_socket_offload_sendto>:
{
   1e146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e14a:	b08e      	sub	sp, #56	; 0x38
   1e14c:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1e14e:	460e      	mov	r6, r1
   1e150:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   1e152:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   1e154:	b974      	cbnz	r4, 1e174 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1e156:	4618      	mov	r0, r3
   1e158:	9203      	str	r2, [sp, #12]
   1e15a:	f7ff fe92 	bl	1de82 <z_to_nrf_flags>
   1e15e:	4603      	mov	r3, r0
   1e160:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e164:	4631      	mov	r1, r6
   1e166:	4628      	mov	r0, r5
   1e168:	9a03      	ldr	r2, [sp, #12]
   1e16a:	f001 fc83 	bl	1fa74 <nrf_sendto>
}
   1e16e:	b00e      	add	sp, #56	; 0x38
   1e170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   1e174:	8823      	ldrh	r3, [r4, #0]
   1e176:	9203      	str	r2, [sp, #12]
   1e178:	2b01      	cmp	r3, #1
   1e17a:	d113      	bne.n	1e1a4 <nrf91_socket_offload_sendto+0x5e>
	nrf_out->sin_port = ptr->sin_port;
   1e17c:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e17e:	f04f 0810 	mov.w	r8, #16
	nrf_out->sin_port = ptr->sin_port;
   1e182:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   1e186:	2302      	movs	r3, #2
   1e188:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e18a:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1e18c:	4638      	mov	r0, r7
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e18e:	9308      	str	r3, [sp, #32]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e190:	f88d 8014 	strb.w	r8, [sp, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1e194:	f7ff fe75 	bl	1de82 <z_to_nrf_flags>
   1e198:	a905      	add	r1, sp, #20
   1e19a:	4603      	mov	r3, r0
   1e19c:	f8cd 8004 	str.w	r8, [sp, #4]
   1e1a0:	9100      	str	r1, [sp, #0]
   1e1a2:	e7df      	b.n	1e164 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   1e1a4:	2b02      	cmp	r3, #2
   1e1a6:	d10d      	bne.n	1e1c4 <nrf91_socket_offload_sendto+0x7e>
		z_to_nrf_ipv6(to, &ipv6);
   1e1a8:	f10d 0814 	add.w	r8, sp, #20
   1e1ac:	4641      	mov	r1, r8
   1e1ae:	4620      	mov	r0, r4
   1e1b0:	f7ff ffb0 	bl	1e114 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e1b4:	4638      	mov	r0, r7
   1e1b6:	f7ff fe64 	bl	1de82 <z_to_nrf_flags>
   1e1ba:	2124      	movs	r1, #36	; 0x24
   1e1bc:	4603      	mov	r3, r0
   1e1be:	e9cd 8100 	strd	r8, r1, [sp]
   1e1c2:	e7cf      	b.n	1e164 <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   1e1c4:	f7fe fea3 	bl	1cf0e <__errno>
   1e1c8:	2386      	movs	r3, #134	; 0x86
   1e1ca:	6003      	str	r3, [r0, #0]
	return retval;
   1e1cc:	f04f 30ff 	mov.w	r0, #4294967295
   1e1d0:	e7cd      	b.n	1e16e <nrf91_socket_offload_sendto+0x28>

0001e1d2 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   1e1d2:	2300      	movs	r3, #0
{
   1e1d4:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   1e1d6:	e9cd 3300 	strd	r3, r3, [sp]
   1e1da:	f7ff ffb4 	bl	1e146 <nrf91_socket_offload_sendto>
}
   1e1de:	b003      	add	sp, #12
   1e1e0:	f85d fb04 	ldr.w	pc, [sp], #4

0001e1e4 <nrf91_socket_offload_connect>:
{
   1e1e4:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   1e1e6:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   1e1e8:	8808      	ldrh	r0, [r1, #0]
{
   1e1ea:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   1e1ec:	2801      	cmp	r0, #1
{
   1e1ee:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1e1f0:	d10f      	bne.n	1e212 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   1e1f2:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e1f4:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1e1f6:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1e1fa:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e1fc:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e1fe:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   1e202:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e204:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1e206:	4620      	mov	r0, r4
   1e208:	a901      	add	r1, sp, #4
   1e20a:	f001 fc67 	bl	1fadc <nrf_connect>
}
   1e20e:	b00a      	add	sp, #40	; 0x28
   1e210:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   1e212:	2802      	cmp	r0, #2
   1e214:	d105      	bne.n	1e222 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   1e216:	4618      	mov	r0, r3
   1e218:	a901      	add	r1, sp, #4
   1e21a:	f7ff ff7b 	bl	1e114 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1e21e:	2224      	movs	r2, #36	; 0x24
   1e220:	e7f1      	b.n	1e206 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1e222:	4620      	mov	r0, r4
   1e224:	f001 fc5a 	bl	1fadc <nrf_connect>
		if (retval < 0) {
   1e228:	2800      	cmp	r0, #0
   1e22a:	daf0      	bge.n	1e20e <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   1e22c:	f7fe fe6f 	bl	1cf0e <__errno>
   1e230:	2386      	movs	r3, #134	; 0x86
   1e232:	6003      	str	r3, [r0, #0]
   1e234:	f04f 30ff 	mov.w	r0, #4294967295
   1e238:	e7e9      	b.n	1e20e <nrf91_socket_offload_connect+0x2a>

0001e23a <nrf91_socket_offload_setsockopt>:
{
   1e23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e23e:	461e      	mov	r6, r3
	switch (z_in_level) {
   1e240:	f240 2302 	movw	r3, #514	; 0x202
{
   1e244:	b086      	sub	sp, #24
	switch (z_in_level) {
   1e246:	4299      	cmp	r1, r3
{
   1e248:	460c      	mov	r4, r1
   1e24a:	4615      	mov	r5, r2
   1e24c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   1e24e:	f100 38ff 	add.w	r8, r0, #4294967295
	switch (z_in_level) {
   1e252:	d005      	beq.n	1e260 <nrf91_socket_offload_setsockopt+0x26>
   1e254:	dc20      	bgt.n	1e298 <nrf91_socket_offload_setsockopt+0x5e>
   1e256:	2901      	cmp	r1, #1
   1e258:	d002      	beq.n	1e260 <nrf91_socket_offload_setsockopt+0x26>
   1e25a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1e25e:	d126      	bne.n	1e2ae <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1e260:	4629      	mov	r1, r5
   1e262:	4620      	mov	r0, r4
   1e264:	aa03      	add	r2, sp, #12
   1e266:	f7f5 fa5f 	bl	13728 <z_to_nrf_optname>
   1e26a:	2800      	cmp	r0, #0
   1e26c:	db1f      	blt.n	1e2ae <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   1e26e:	2c01      	cmp	r4, #1
   1e270:	d116      	bne.n	1e2a0 <nrf91_socket_offload_setsockopt+0x66>
   1e272:	3d14      	subs	r5, #20
   1e274:	2d01      	cmp	r5, #1
   1e276:	d805      	bhi.n	1e284 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   1e278:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1e27a:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1e27c:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1e27e:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1e280:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   1e282:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1e284:	4633      	mov	r3, r6
   1e286:	4621      	mov	r1, r4
   1e288:	4640      	mov	r0, r8
   1e28a:	9a03      	ldr	r2, [sp, #12]
   1e28c:	9700      	str	r7, [sp, #0]
   1e28e:	f001 fc71 	bl	1fb74 <nrf_setsockopt>
}
   1e292:	b006      	add	sp, #24
   1e294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1e298:	f240 2303 	movw	r3, #515	; 0x203
   1e29c:	4299      	cmp	r1, r3
   1e29e:	e7de      	b.n	1e25e <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   1e2a0:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   1e2a4:	d1ee      	bne.n	1e284 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   1e2a6:	2d08      	cmp	r5, #8
   1e2a8:	bf08      	it	eq
   1e2aa:	2701      	moveq	r7, #1
   1e2ac:	e7ea      	b.n	1e284 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   1e2ae:	f7fe fe2e 	bl	1cf0e <__errno>
   1e2b2:	236d      	movs	r3, #109	; 0x6d
   1e2b4:	6003      	str	r3, [r0, #0]
   1e2b6:	f04f 30ff 	mov.w	r0, #4294967295
   1e2ba:	e7ea      	b.n	1e292 <nrf91_socket_offload_setsockopt+0x58>

0001e2bc <nrf91_socket_offload_bind>:
{
   1e2bc:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   1e2be:	880a      	ldrh	r2, [r1, #0]
{
   1e2c0:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   1e2c2:	2a01      	cmp	r2, #1
{
   1e2c4:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   1e2c6:	f100 34ff 	add.w	r4, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   1e2ca:	d10f      	bne.n	1e2ec <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   1e2cc:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e2ce:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1e2d0:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1e2d4:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e2d6:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e2d8:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   1e2dc:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e2de:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e2e0:	4620      	mov	r0, r4
   1e2e2:	a901      	add	r1, sp, #4
   1e2e4:	f001 fc33 	bl	1fb4e <nrf_bind>
}
   1e2e8:	b00a      	add	sp, #40	; 0x28
   1e2ea:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   1e2ec:	2a02      	cmp	r2, #2
   1e2ee:	d105      	bne.n	1e2fc <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   1e2f0:	4618      	mov	r0, r3
   1e2f2:	a901      	add	r1, sp, #4
   1e2f4:	f7ff ff0e 	bl	1e114 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e2f8:	2224      	movs	r2, #36	; 0x24
   1e2fa:	e7f1      	b.n	1e2e0 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   1e2fc:	f7fe fe07 	bl	1cf0e <__errno>
   1e300:	2386      	movs	r3, #134	; 0x86
   1e302:	6003      	str	r3, [r0, #0]
   1e304:	f04f 30ff 	mov.w	r0, #4294967295
   1e308:	e7ee      	b.n	1e2e8 <nrf91_socket_offload_bind+0x2c>

0001e30a <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   1e30a:	6883      	ldr	r3, [r0, #8]
   1e30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e30e:	b103      	cbz	r3, 1e312 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   1e310:	4718      	bx	r3
}
   1e312:	4770      	bx	lr

0001e314 <response_handler>:
	write_uart_string(response);
   1e314:	4608      	mov	r0, r1
   1e316:	f7f6 b8d9 	b.w	144cc <write_uart_string>

0001e31a <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   1e31a:	280d      	cmp	r0, #13
   1e31c:	d004      	beq.n	1e328 <is_lfcr+0xe>
   1e31e:	f1a0 030a 	sub.w	r3, r0, #10
   1e322:	4258      	negs	r0, r3
   1e324:	4158      	adcs	r0, r3
   1e326:	4770      	bx	lr
		return true;
   1e328:	2001      	movs	r0, #1
}
   1e32a:	4770      	bx	lr

0001e32c <skip_command_prefix>:
{
   1e32c:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   1e32e:	6801      	ldr	r1, [r0, #0]
{
   1e330:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   1e332:	1c8b      	adds	r3, r1, #2
   1e334:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   1e336:	788c      	ldrb	r4, [r1, #2]
   1e338:	4620      	mov	r0, r4
   1e33a:	f7ff ffee 	bl	1e31a <is_lfcr>
   1e33e:	b910      	cbnz	r0, 1e346 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e340:	b10c      	cbz	r4, 1e346 <skip_command_prefix+0x1a>
	(*cmd)++;
   1e342:	3103      	adds	r1, #3
   1e344:	6011      	str	r1, [r2, #0]
}
   1e346:	bd10      	pop	{r4, pc}

0001e348 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   1e348:	6813      	ldr	r3, [r2, #0]
   1e34a:	f7f6 bc85 	b.w	14c58 <at_parser_max_params_from_str>

0001e34e <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   1e34e:	6803      	ldr	r3, [r0, #0]
   1e350:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1e352:	bf83      	ittte	hi
   1e354:	230c      	movhi	r3, #12
   1e356:	6840      	ldrhi	r0, [r0, #4]
   1e358:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   1e35c:	2000      	movls	r0, #0
}
   1e35e:	4770      	bx	lr

0001e360 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   1e360:	7803      	ldrb	r3, [r0, #0]
   1e362:	2b01      	cmp	r3, #1
   1e364:	d006      	beq.n	1e374 <at_param_size+0x14>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1e366:	2b02      	cmp	r3, #2
   1e368:	d006      	beq.n	1e378 <at_param_size+0x18>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e36a:	3b03      	subs	r3, #3
   1e36c:	2b01      	cmp	r3, #1
   1e36e:	d805      	bhi.n	1e37c <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1e370:	6840      	ldr	r0, [r0, #4]
   1e372:	4770      	bx	lr
		return sizeof(uint16_t);
   1e374:	2002      	movs	r0, #2
   1e376:	4770      	bx	lr
		return sizeof(uint32_t);
   1e378:	2004      	movs	r0, #4
   1e37a:	4770      	bx	lr
	}

	return 0;
   1e37c:	2000      	movs	r0, #0
}
   1e37e:	4770      	bx	lr

0001e380 <at_param_clear>:
{
   1e380:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e382:	7803      	ldrb	r3, [r0, #0]
{
   1e384:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e386:	3b03      	subs	r3, #3
   1e388:	2b01      	cmp	r3, #1
   1e38a:	d802      	bhi.n	1e392 <at_param_clear+0x12>
		k_free(param->value.str_val);
   1e38c:	6880      	ldr	r0, [r0, #8]
   1e38e:	f002 f8f7 	bl	20580 <k_free>
	param->value.int_val = 0;
   1e392:	2300      	movs	r3, #0
   1e394:	60a3      	str	r3, [r4, #8]
}
   1e396:	bd10      	pop	{r4, pc}

0001e398 <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   1e398:	b538      	push	{r3, r4, r5, lr}
   1e39a:	460d      	mov	r5, r1
	if (list == NULL) {
   1e39c:	4604      	mov	r4, r0
   1e39e:	b140      	cbz	r0, 1e3b2 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   1e3a0:	210c      	movs	r1, #12
   1e3a2:	4628      	mov	r0, r5
   1e3a4:	f002 f8f6 	bl	20594 <k_calloc>
   1e3a8:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   1e3aa:	b128      	cbz	r0, 1e3b8 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   1e3ac:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   1e3ae:	6025      	str	r5, [r4, #0]
}
   1e3b0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e3b2:	f06f 0015 	mvn.w	r0, #21
   1e3b6:	e7fb      	b.n	1e3b0 <at_params_list_init+0x18>
		return -ENOMEM;
   1e3b8:	f06f 000b 	mvn.w	r0, #11
   1e3bc:	e7f8      	b.n	1e3b0 <at_params_list_init+0x18>

0001e3be <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   1e3be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (list == NULL || list->params == NULL) {
   1e3c2:	4604      	mov	r4, r0
   1e3c4:	b140      	cbz	r0, 1e3d8 <at_params_list_clear+0x1a>
   1e3c6:	6843      	ldr	r3, [r0, #4]
   1e3c8:	b133      	cbz	r3, 1e3d8 <at_params_list_clear+0x1a>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1e3ca:	2500      	movs	r5, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   1e3cc:	f04f 0a0c 	mov.w	sl, #12
__ssp_bos_icheck3(memset, void *, int)
   1e3d0:	462e      	mov	r6, r5
	for (size_t i = 0; i < list->param_count; ++i) {
   1e3d2:	6823      	ldr	r3, [r4, #0]
   1e3d4:	429d      	cmp	r5, r3
   1e3d6:	d301      	bcc.n	1e3dc <at_params_list_clear+0x1e>
		at_param_init(&params[i]);
	}
}
   1e3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		at_param_clear(&params[i]);
   1e3dc:	fb0a f805 	mul.w	r8, sl, r5
   1e3e0:	f8d4 9004 	ldr.w	r9, [r4, #4]
	for (size_t i = 0; i < list->param_count; ++i) {
   1e3e4:	3501      	adds	r5, #1
		at_param_clear(&params[i]);
   1e3e6:	eb09 0708 	add.w	r7, r9, r8
   1e3ea:	4638      	mov	r0, r7
   1e3ec:	f7ff ffc8 	bl	1e380 <at_param_clear>
   1e3f0:	f849 6008 	str.w	r6, [r9, r8]
   1e3f4:	607e      	str	r6, [r7, #4]
   1e3f6:	60be      	str	r6, [r7, #8]
	for (size_t i = 0; i < list->param_count; ++i) {
   1e3f8:	e7eb      	b.n	1e3d2 <at_params_list_clear+0x14>

0001e3fa <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   1e3fa:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   1e3fc:	4604      	mov	r4, r0
   1e3fe:	b148      	cbz	r0, 1e414 <at_params_list_free+0x1a>
   1e400:	6843      	ldr	r3, [r0, #4]
   1e402:	b13b      	cbz	r3, 1e414 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   1e404:	2500      	movs	r5, #0
	at_params_list_clear(list);
   1e406:	f7ff ffda 	bl	1e3be <at_params_list_clear>
	k_free(list->params);
   1e40a:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   1e40c:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   1e40e:	f002 f8b7 	bl	20580 <k_free>
	list->params = NULL;
   1e412:	6065      	str	r5, [r4, #4]
}
   1e414:	bd38      	pop	{r3, r4, r5, pc}

0001e416 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			int16_t value)
{
   1e416:	b538      	push	{r3, r4, r5, lr}
   1e418:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e41a:	b160      	cbz	r0, 1e436 <at_params_short_put+0x20>
   1e41c:	6843      	ldr	r3, [r0, #4]
   1e41e:	b153      	cbz	r3, 1e436 <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e420:	f7ff ff95 	bl	1e34e <at_params_get>

	if (param == NULL) {
   1e424:	4604      	mov	r4, r0
   1e426:	b130      	cbz	r0, 1e436 <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1e428:	f7ff ffaa 	bl	1e380 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e42c:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   1e42e:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e430:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   1e432:	60a5      	str	r5, [r4, #8]
}
   1e434:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e436:	f06f 0015 	mvn.w	r0, #21
   1e43a:	e7fb      	b.n	1e434 <at_params_short_put+0x1e>

0001e43c <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   1e43c:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1e43e:	b160      	cbz	r0, 1e45a <at_params_empty_put+0x1e>
   1e440:	6843      	ldr	r3, [r0, #4]
   1e442:	b153      	cbz	r3, 1e45a <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e444:	f7ff ff83 	bl	1e34e <at_params_get>

	if (param == NULL) {
   1e448:	4604      	mov	r4, r0
   1e44a:	b130      	cbz	r0, 1e45a <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   1e44c:	f7ff ff98 	bl	1e380 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   1e450:	2305      	movs	r3, #5
	param->value.int_val = 0;
   1e452:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   1e454:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   1e456:	60a0      	str	r0, [r4, #8]

	return 0;
}
   1e458:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e45a:	f06f 0015 	mvn.w	r0, #21
   1e45e:	e7fb      	b.n	1e458 <at_params_empty_put+0x1c>

0001e460 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      int32_t value)
{
   1e460:	b538      	push	{r3, r4, r5, lr}
   1e462:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e464:	b160      	cbz	r0, 1e480 <at_params_int_put+0x20>
   1e466:	6843      	ldr	r3, [r0, #4]
   1e468:	b153      	cbz	r3, 1e480 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e46a:	f7ff ff70 	bl	1e34e <at_params_get>

	if (param == NULL) {
   1e46e:	4604      	mov	r4, r0
   1e470:	b130      	cbz	r0, 1e480 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1e472:	f7ff ff85 	bl	1e380 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   1e476:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   1e478:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   1e47a:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   1e47c:	60a5      	str	r5, [r4, #8]
}
   1e47e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e480:	f06f 0015 	mvn.w	r0, #21
   1e484:	e7fb      	b.n	1e47e <at_params_int_put+0x1e>

0001e486 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   1e486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e488:	4617      	mov	r7, r2
   1e48a:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   1e48c:	b1c8      	cbz	r0, 1e4c2 <at_params_string_put+0x3c>
   1e48e:	6843      	ldr	r3, [r0, #4]
   1e490:	b1bb      	cbz	r3, 1e4c2 <at_params_string_put+0x3c>
   1e492:	b1b2      	cbz	r2, 1e4c2 <at_params_string_put+0x3c>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e494:	f7ff ff5b 	bl	1e34e <at_params_get>

	if (param == NULL) {
   1e498:	4604      	mov	r4, r0
   1e49a:	b190      	cbz	r0, 1e4c2 <at_params_string_put+0x3c>
	return k_aligned_alloc(sizeof(void *), size);
   1e49c:	2004      	movs	r0, #4
   1e49e:	1c69      	adds	r1, r5, #1
   1e4a0:	f7fc fc4c 	bl	1ad3c <k_aligned_alloc>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);

	if (param_value == NULL) {
   1e4a4:	4606      	mov	r6, r0
   1e4a6:	b178      	cbz	r0, 1e4c8 <at_params_string_put+0x42>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e4a8:	462a      	mov	r2, r5
   1e4aa:	4639      	mov	r1, r7
   1e4ac:	f002 f8c5 	bl	2063a <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   1e4b0:	4620      	mov	r0, r4
   1e4b2:	f7ff ff65 	bl	1e380 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   1e4b6:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   1e4b8:	2000      	movs	r0, #0
	param->size = str_len;
   1e4ba:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   1e4bc:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   1e4be:	60a6      	str	r6, [r4, #8]
}
   1e4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1e4c2:	f06f 0015 	mvn.w	r0, #21
   1e4c6:	e7fb      	b.n	1e4c0 <at_params_string_put+0x3a>
		return -ENOMEM;
   1e4c8:	f06f 000b 	mvn.w	r0, #11
   1e4cc:	e7f8      	b.n	1e4c0 <at_params_string_put+0x3a>

0001e4ce <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   1e4ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e4d0:	4617      	mov	r7, r2
   1e4d2:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   1e4d4:	b1c8      	cbz	r0, 1e50a <at_params_array_put+0x3c>
   1e4d6:	6843      	ldr	r3, [r0, #4]
   1e4d8:	b1bb      	cbz	r3, 1e50a <at_params_array_put+0x3c>
   1e4da:	b1b2      	cbz	r2, 1e50a <at_params_array_put+0x3c>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e4dc:	f7ff ff37 	bl	1e34e <at_params_get>

	if (param == NULL) {
   1e4e0:	4604      	mov	r4, r0
   1e4e2:	b190      	cbz	r0, 1e50a <at_params_array_put+0x3c>
   1e4e4:	4629      	mov	r1, r5
   1e4e6:	2004      	movs	r0, #4
   1e4e8:	f7fc fc28 	bl	1ad3c <k_aligned_alloc>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);

	if (param_value == NULL) {
   1e4ec:	4606      	mov	r6, r0
   1e4ee:	b178      	cbz	r0, 1e510 <at_params_array_put+0x42>
   1e4f0:	462a      	mov	r2, r5
   1e4f2:	4639      	mov	r1, r7
   1e4f4:	f002 f8a1 	bl	2063a <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   1e4f8:	4620      	mov	r0, r4
   1e4fa:	f7ff ff41 	bl	1e380 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   1e4fe:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   1e500:	2000      	movs	r0, #0
	param->size = array_len;
   1e502:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   1e504:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   1e506:	60a6      	str	r6, [r4, #8]
}
   1e508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1e50a:	f06f 0015 	mvn.w	r0, #21
   1e50e:	e7fb      	b.n	1e508 <at_params_array_put+0x3a>
		return -ENOMEM;
   1e510:	f06f 000b 	mvn.w	r0, #11
   1e514:	e7f8      	b.n	1e508 <at_params_array_put+0x3a>

0001e516 <at_params_int_get>:
	return 0;
}

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   1e516:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   1e518:	b168      	cbz	r0, 1e536 <at_params_int_get+0x20>
   1e51a:	6843      	ldr	r3, [r0, #4]
   1e51c:	b15b      	cbz	r3, 1e536 <at_params_int_get+0x20>
   1e51e:	b152      	cbz	r2, 1e536 <at_params_int_get+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e520:	f7ff ff15 	bl	1e34e <at_params_get>

	if (param == NULL) {
   1e524:	b138      	cbz	r0, 1e536 <at_params_int_get+0x20>
		return -EINVAL;
	}

	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   1e526:	7803      	ldrb	r3, [r0, #0]
   1e528:	3b01      	subs	r3, #1
   1e52a:	2b01      	cmp	r3, #1
   1e52c:	d803      	bhi.n	1e536 <at_params_int_get+0x20>
	    (param->type != AT_PARAM_TYPE_NUM_SHORT)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   1e52e:	6883      	ldr	r3, [r0, #8]
	return 0;
   1e530:	2000      	movs	r0, #0
	*value = param->value.int_val;
   1e532:	6013      	str	r3, [r2, #0]
}
   1e534:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1e536:	f06f 0015 	mvn.w	r0, #21
   1e53a:	e7fb      	b.n	1e534 <at_params_int_get+0x1e>

0001e53c <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   1e53c:	b570      	push	{r4, r5, r6, lr}
   1e53e:	4616      	mov	r6, r2
   1e540:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   1e542:	b1c0      	cbz	r0, 1e576 <at_params_string_get+0x3a>
   1e544:	6843      	ldr	r3, [r0, #4]
   1e546:	b1b3      	cbz	r3, 1e576 <at_params_string_get+0x3a>
   1e548:	b1aa      	cbz	r2, 1e576 <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   1e54a:	b1a4      	cbz	r4, 1e576 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e54c:	f7ff feff 	bl	1e34e <at_params_get>

	if (param == NULL) {
   1e550:	4601      	mov	r1, r0
   1e552:	b180      	cbz	r0, 1e576 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   1e554:	7803      	ldrb	r3, [r0, #0]
   1e556:	2b03      	cmp	r3, #3
   1e558:	d10d      	bne.n	1e576 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   1e55a:	f7ff ff01 	bl	1e360 <at_param_size>

	if (*len < param_len) {
   1e55e:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   1e560:	4605      	mov	r5, r0
	if (*len < param_len) {
   1e562:	4283      	cmp	r3, r0
   1e564:	d30a      	bcc.n	1e57c <at_params_string_get+0x40>
   1e566:	4602      	mov	r2, r0
   1e568:	6889      	ldr	r1, [r1, #8]
   1e56a:	4630      	mov	r0, r6
   1e56c:	f002 f865 	bl	2063a <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   1e570:	2000      	movs	r0, #0
	*len = param_len;
   1e572:	6025      	str	r5, [r4, #0]
}
   1e574:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1e576:	f06f 0015 	mvn.w	r0, #21
   1e57a:	e7fb      	b.n	1e574 <at_params_string_get+0x38>
		return -ENOMEM;
   1e57c:	f06f 000b 	mvn.w	r0, #11
   1e580:	e7f8      	b.n	1e574 <at_params_string_get+0x38>

0001e582 <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   1e582:	4602      	mov	r2, r0
{
   1e584:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   1e586:	b170      	cbz	r0, 1e5a6 <at_params_valid_count_get+0x24>
   1e588:	6840      	ldr	r0, [r0, #4]
   1e58a:	b160      	cbz	r0, 1e5a6 <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   1e58c:	6811      	ldr	r1, [r2, #0]
   1e58e:	b141      	cbz	r1, 1e5a2 <at_params_valid_count_get+0x20>
   1e590:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1e592:	7803      	ldrb	r3, [r0, #0]
   1e594:	b12b      	cbz	r3, 1e5a2 <at_params_valid_count_get+0x20>
		valid_i += 1;
		param = at_params_get(list, valid_i);
   1e596:	4610      	mov	r0, r2
		valid_i += 1;
   1e598:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   1e59a:	f7ff fed8 	bl	1e34e <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1e59e:	2800      	cmp	r0, #0
   1e5a0:	d1f7      	bne.n	1e592 <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   1e5a2:	4608      	mov	r0, r1
   1e5a4:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1e5a6:	f06f 0115 	mvn.w	r1, #21
   1e5aa:	e7fa      	b.n	1e5a2 <at_params_valid_count_get+0x20>

0001e5ac <response_is_valid>:
{
   1e5ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e5ae:	4605      	mov	r5, r0
	if ((response_len < strlen(check)) ||
   1e5b0:	4610      	mov	r0, r2
{
   1e5b2:	460c      	mov	r4, r1
	if ((response_len < strlen(check)) ||
   1e5b4:	9201      	str	r2, [sp, #4]
   1e5b6:	f7ee fcbd 	bl	cf34 <strlen>
   1e5ba:	42a0      	cmp	r0, r4
   1e5bc:	d809      	bhi.n	1e5d2 <response_is_valid+0x26>
	    (memcmp(response, check, response_len) != 0)) {
   1e5be:	4622      	mov	r2, r4
   1e5c0:	4628      	mov	r0, r5
   1e5c2:	9901      	ldr	r1, [sp, #4]
   1e5c4:	f002 f82b 	bl	2061e <memcmp>
	if ((response_len < strlen(check)) ||
   1e5c8:	fab0 f080 	clz	r0, r0
   1e5cc:	0940      	lsrs	r0, r0, #5
}
   1e5ce:	b003      	add	sp, #12
   1e5d0:	bd30      	pop	{r4, r5, pc}
		return false;
   1e5d2:	2000      	movs	r0, #0
   1e5d4:	e7fb      	b.n	1e5ce <response_is_valid+0x22>

0001e5d6 <lte_lc_init_and_connect>:
{
   1e5d6:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   1e5d8:	f7f6 fe62 	bl	152a0 <w_lte_lc_init>
	if (ret) {
   1e5dc:	b920      	cbnz	r0, 1e5e8 <lte_lc_init_and_connect+0x12>
}
   1e5de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   1e5e2:	2001      	movs	r0, #1
   1e5e4:	f7f6 bd22 	b.w	1502c <w_lte_lc_connect>
}
   1e5e8:	bd08      	pop	{r3, pc}

0001e5ea <k_uptime_get>:
{
   1e5ea:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   1e5ec:	f001 fe10 	bl	20210 <z_impl_k_uptime_ticks>
   1e5f0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e5f4:	fba0 2304 	umull	r2, r3, r0, r4
   1e5f8:	fb04 3301 	mla	r3, r4, r1, r3
   1e5fc:	0bd0      	lsrs	r0, r2, #15
}
   1e5fe:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1e602:	0bd9      	lsrs	r1, r3, #15
   1e604:	bd10      	pop	{r4, pc}

0001e606 <rpc_handle_ctrl_message>:
   1e606:	2902      	cmp	r1, #2
   1e608:	b510      	push	{r4, lr}
   1e60a:	4604      	mov	r4, r0
   1e60c:	d005      	beq.n	1e61a <rpc_handle_ctrl_message+0x14>
   1e60e:	2904      	cmp	r1, #4
   1e610:	d001      	beq.n	1e616 <rpc_handle_ctrl_message+0x10>
   1e612:	2901      	cmp	r1, #1
   1e614:	d107      	bne.n	1e626 <rpc_handle_ctrl_message+0x20>
   1e616:	2000      	movs	r0, #0
   1e618:	bd10      	pop	{r4, pc}
   1e61a:	6880      	ldr	r0, [r0, #8]
   1e61c:	2800      	cmp	r0, #0
   1e61e:	d0fa      	beq.n	1e616 <rpc_handle_ctrl_message+0x10>
   1e620:	f000 f85b 	bl	1e6da <rpc_transport_data_free>
   1e624:	e7f7      	b.n	1e616 <rpc_handle_ctrl_message+0x10>
   1e626:	6880      	ldr	r0, [r0, #8]
   1e628:	b108      	cbz	r0, 1e62e <rpc_handle_ctrl_message+0x28>
   1e62a:	f000 f856 	bl	1e6da <rpc_transport_data_free>
   1e62e:	4620      	mov	r0, r4
   1e630:	f000 f84f 	bl	1e6d2 <rpc_transport_msg_free>
   1e634:	e7ef      	b.n	1e616 <rpc_handle_ctrl_message+0x10>

0001e636 <rpc_message_send>:
   1e636:	b150      	cbz	r0, 1e64e <rpc_message_send+0x18>
   1e638:	b159      	cbz	r1, 1e652 <rpc_message_send+0x1c>
   1e63a:	684b      	ldr	r3, [r1, #4]
   1e63c:	8008      	strh	r0, [r1, #0]
   1e63e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1e642:	f043 0302 	orr.w	r3, r3, #2
   1e646:	4608      	mov	r0, r1
   1e648:	604b      	str	r3, [r1, #4]
   1e64a:	f000 b848 	b.w	1e6de <rpc_transport_data_msg_send>
   1e64e:	2016      	movs	r0, #22
   1e650:	4770      	bx	lr
   1e652:	200e      	movs	r0, #14
   1e654:	4770      	bx	lr

0001e656 <rpc_message_alloc>:
   1e656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e658:	4607      	mov	r7, r0
   1e65a:	460d      	mov	r5, r1
   1e65c:	4616      	mov	r6, r2
   1e65e:	b1d2      	cbz	r2, 1e696 <rpc_message_alloc+0x40>
   1e660:	b1d8      	cbz	r0, 1e69a <rpc_message_alloc+0x44>
   1e662:	2300      	movs	r3, #0
   1e664:	6013      	str	r3, [r2, #0]
   1e666:	b131      	cbz	r1, 1e676 <rpc_message_alloc+0x20>
   1e668:	4608      	mov	r0, r1
   1e66a:	f000 f834 	bl	1e6d6 <rpc_transport_data_alloc>
   1e66e:	4604      	mov	r4, r0
   1e670:	b910      	cbnz	r0, 1e678 <rpc_message_alloc+0x22>
   1e672:	200c      	movs	r0, #12
   1e674:	e008      	b.n	1e688 <rpc_message_alloc+0x32>
   1e676:	460c      	mov	r4, r1
   1e678:	f000 f829 	bl	1e6ce <rpc_transport_data_msg_alloc>
   1e67c:	b128      	cbz	r0, 1e68a <rpc_message_alloc+0x34>
   1e67e:	60c5      	str	r5, [r0, #12]
   1e680:	6084      	str	r4, [r0, #8]
   1e682:	8007      	strh	r7, [r0, #0]
   1e684:	6030      	str	r0, [r6, #0]
   1e686:	2000      	movs	r0, #0
   1e688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e68a:	2c00      	cmp	r4, #0
   1e68c:	d0f1      	beq.n	1e672 <rpc_message_alloc+0x1c>
   1e68e:	4620      	mov	r0, r4
   1e690:	f000 f823 	bl	1e6da <rpc_transport_data_free>
   1e694:	e7ed      	b.n	1e672 <rpc_message_alloc+0x1c>
   1e696:	200e      	movs	r0, #14
   1e698:	e7f6      	b.n	1e688 <rpc_message_alloc+0x32>
   1e69a:	2016      	movs	r0, #22
   1e69c:	e7f4      	b.n	1e688 <rpc_message_alloc+0x32>

0001e69e <rpc_message_free>:
   1e69e:	b508      	push	{r3, lr}
   1e6a0:	b128      	cbz	r0, 1e6ae <rpc_message_free+0x10>
   1e6a2:	b131      	cbz	r1, 1e6b2 <rpc_message_free+0x14>
   1e6a4:	4608      	mov	r0, r1
   1e6a6:	f000 f814 	bl	1e6d2 <rpc_transport_msg_free>
   1e6aa:	2000      	movs	r0, #0
   1e6ac:	bd08      	pop	{r3, pc}
   1e6ae:	2016      	movs	r0, #22
   1e6b0:	e7fc      	b.n	1e6ac <rpc_message_free+0xe>
   1e6b2:	200e      	movs	r0, #14
   1e6b4:	e7fa      	b.n	1e6ac <rpc_message_free+0xe>

0001e6b6 <rpc_message_data_free>:
   1e6b6:	b508      	push	{r3, lr}
   1e6b8:	b128      	cbz	r0, 1e6c6 <rpc_message_data_free+0x10>
   1e6ba:	b131      	cbz	r1, 1e6ca <rpc_message_data_free+0x14>
   1e6bc:	4608      	mov	r0, r1
   1e6be:	f000 f80c 	bl	1e6da <rpc_transport_data_free>
   1e6c2:	2000      	movs	r0, #0
   1e6c4:	bd08      	pop	{r3, pc}
   1e6c6:	2016      	movs	r0, #22
   1e6c8:	e7fc      	b.n	1e6c4 <rpc_message_data_free+0xe>
   1e6ca:	200e      	movs	r0, #14
   1e6cc:	e7fa      	b.n	1e6c4 <rpc_message_data_free+0xe>

0001e6ce <rpc_transport_data_msg_alloc>:
   1e6ce:	f7f7 badd 	b.w	15c8c <rpc_transport_ipc_data_msg_alloc>

0001e6d2 <rpc_transport_msg_free>:
   1e6d2:	f7f7 bb13 	b.w	15cfc <rpc_transport_ipc_msg_free>

0001e6d6 <rpc_transport_data_alloc>:
   1e6d6:	f7f7 baf7 	b.w	15cc8 <rpc_transport_ipc_data_alloc>

0001e6da <rpc_transport_data_free>:
   1e6da:	f7f7 bb35 	b.w	15d48 <rpc_transport_ipc_data_free>

0001e6de <rpc_transport_data_msg_send>:
   1e6de:	f7f7 ba81 	b.w	15be4 <rpc_transport_ipc_data_msg_send>

0001e6e2 <trace_write>:
   1e6e2:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1e6e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e6e8:	f8ad 3000 	strh.w	r3, [sp]
   1e6ec:	7803      	ldrb	r3, [r0, #0]
   1e6ee:	4604      	mov	r4, r0
   1e6f0:	f88d 3004 	strb.w	r3, [sp, #4]
   1e6f4:	6843      	ldr	r3, [r0, #4]
   1e6f6:	6882      	ldr	r2, [r0, #8]
   1e6f8:	2105      	movs	r1, #5
   1e6fa:	4293      	cmp	r3, r2
   1e6fc:	bf96      	itet	ls
   1e6fe:	6906      	ldrls	r6, [r0, #16]
   1e700:	1a9e      	subhi	r6, r3, r2
   1e702:	1ab6      	subls	r6, r6, r2
   1e704:	4293      	cmp	r3, r2
   1e706:	bf2c      	ite	cs
   1e708:	2500      	movcs	r5, #0
   1e70a:	68c5      	ldrcc	r5, [r0, #12]
   1e70c:	b2b6      	uxth	r6, r6
   1e70e:	bf38      	it	cc
   1e710:	1b5b      	subcc	r3, r3, r5
   1e712:	4668      	mov	r0, sp
   1e714:	bf38      	it	cc
   1e716:	b29d      	uxthcc	r5, r3
   1e718:	f8ad 6002 	strh.w	r6, [sp, #2]
   1e71c:	f7ff fbaf 	bl	1de7e <nrf_modem_os_trace_put>
   1e720:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1e724:	68a0      	ldr	r0, [r4, #8]
   1e726:	f7ff fbaa 	bl	1de7e <nrf_modem_os_trace_put>
   1e72a:	68a3      	ldr	r3, [r4, #8]
   1e72c:	441e      	add	r6, r3
   1e72e:	6923      	ldr	r3, [r4, #16]
   1e730:	60a6      	str	r6, [r4, #8]
   1e732:	429e      	cmp	r6, r3
   1e734:	bf04      	itt	eq
   1e736:	68e3      	ldreq	r3, [r4, #12]
   1e738:	60a3      	streq	r3, [r4, #8]
   1e73a:	b17d      	cbz	r5, 1e75c <trace_write+0x7a>
   1e73c:	2105      	movs	r1, #5
   1e73e:	4668      	mov	r0, sp
   1e740:	f8ad 5002 	strh.w	r5, [sp, #2]
   1e744:	f7ff fb9b 	bl	1de7e <nrf_modem_os_trace_put>
   1e748:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1e74c:	68e0      	ldr	r0, [r4, #12]
   1e74e:	f7ff fb96 	bl	1de7e <nrf_modem_os_trace_put>
   1e752:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1e756:	68e3      	ldr	r3, [r4, #12]
   1e758:	4413      	add	r3, r2
   1e75a:	60a3      	str	r3, [r4, #8]
   1e75c:	b002      	add	sp, #8
   1e75e:	bd70      	pop	{r4, r5, r6, pc}

0001e760 <rpc_transport_ipc_msg_alloc>:
   1e760:	2300      	movs	r3, #0
   1e762:	b570      	push	{r4, r5, r6, lr}
   1e764:	6806      	ldr	r6, [r0, #0]
   1e766:	429e      	cmp	r6, r3
   1e768:	d101      	bne.n	1e76e <rpc_transport_ipc_msg_alloc+0xe>
   1e76a:	2000      	movs	r0, #0
   1e76c:	e00d      	b.n	1e78a <rpc_transport_ipc_msg_alloc+0x2a>
   1e76e:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
   1e772:	6865      	ldr	r5, [r4, #4]
   1e774:	b2ed      	uxtb	r5, r5
   1e776:	2d03      	cmp	r5, #3
   1e778:	d108      	bne.n	1e78c <rpc_transport_ipc_msg_alloc+0x2c>
   1e77a:	eb01 1083 	add.w	r0, r1, r3, lsl #6
   1e77e:	60a0      	str	r0, [r4, #8]
   1e780:	6863      	ldr	r3, [r4, #4]
   1e782:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1e786:	6063      	str	r3, [r4, #4]
   1e788:	7102      	strb	r2, [r0, #4]
   1e78a:	bd70      	pop	{r4, r5, r6, pc}
   1e78c:	b915      	cbnz	r5, 1e794 <rpc_transport_ipc_msg_alloc+0x34>
   1e78e:	68a5      	ldr	r5, [r4, #8]
   1e790:	2d00      	cmp	r5, #0
   1e792:	d0f2      	beq.n	1e77a <rpc_transport_ipc_msg_alloc+0x1a>
   1e794:	3301      	adds	r3, #1
   1e796:	e7e6      	b.n	1e766 <rpc_transport_ipc_msg_alloc+0x6>

0001e798 <at_client_evt_handler>:
   1e798:	b120      	cbz	r0, 1e7a4 <at_client_evt_handler+0xc>
   1e79a:	f850 1b08 	ldr.w	r1, [r0], #8
   1e79e:	0c09      	lsrs	r1, r1, #16
   1e7a0:	f000 bec3 	b.w	1f52a <rpc_at_event_handler>
   1e7a4:	4770      	bx	lr

0001e7a6 <rpc_at_client_request_alloc>:
   1e7a6:	b513      	push	{r0, r1, r4, lr}
   1e7a8:	4604      	mov	r4, r0
   1e7aa:	b160      	cbz	r0, 1e7c6 <rpc_at_client_request_alloc+0x20>
   1e7ac:	2300      	movs	r3, #0
   1e7ae:	2003      	movs	r0, #3
   1e7b0:	aa01      	add	r2, sp, #4
   1e7b2:	9301      	str	r3, [sp, #4]
   1e7b4:	f7ff ff4f 	bl	1e656 <rpc_message_alloc>
   1e7b8:	b918      	cbnz	r0, 1e7c2 <rpc_at_client_request_alloc+0x1c>
   1e7ba:	9b01      	ldr	r3, [sp, #4]
   1e7bc:	b10b      	cbz	r3, 1e7c2 <rpc_at_client_request_alloc+0x1c>
   1e7be:	3308      	adds	r3, #8
   1e7c0:	6023      	str	r3, [r4, #0]
   1e7c2:	b002      	add	sp, #8
   1e7c4:	bd10      	pop	{r4, pc}
   1e7c6:	200e      	movs	r0, #14
   1e7c8:	e7fb      	b.n	1e7c2 <rpc_at_client_request_alloc+0x1c>

0001e7ca <rpc_at_client_request_send>:
   1e7ca:	b148      	cbz	r0, 1e7e0 <rpc_at_client_request_send+0x16>
   1e7cc:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1e7d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1e7d4:	4601      	mov	r1, r0
   1e7d6:	2003      	movs	r0, #3
   1e7d8:	f841 2d08 	str.w	r2, [r1, #-8]!
   1e7dc:	f7ff bf2b 	b.w	1e636 <rpc_message_send>
   1e7e0:	200e      	movs	r0, #14
   1e7e2:	4770      	bx	lr

0001e7e4 <rpc_at_client_message_free>:
   1e7e4:	b120      	cbz	r0, 1e7f0 <rpc_at_client_message_free+0xc>
   1e7e6:	f1a0 0108 	sub.w	r1, r0, #8
   1e7ea:	2003      	movs	r0, #3
   1e7ec:	f7ff bf57 	b.w	1e69e <rpc_message_free>
   1e7f0:	200e      	movs	r0, #14
   1e7f2:	4770      	bx	lr

0001e7f4 <rpc_at_client_data_free>:
   1e7f4:	4601      	mov	r1, r0
   1e7f6:	b110      	cbz	r0, 1e7fe <rpc_at_client_data_free+0xa>
   1e7f8:	2003      	movs	r0, #3
   1e7fa:	f7ff bf5c 	b.w	1e6b6 <rpc_message_data_free>
   1e7fe:	200e      	movs	r0, #14
   1e800:	4770      	bx	lr

0001e802 <ip_client_event_handler>:
   1e802:	f850 1b08 	ldr.w	r1, [r0], #8
   1e806:	0c09      	lsrs	r1, r1, #16
   1e808:	f7f8 ba7a 	b.w	16d00 <rpc_ip_event_handler>

0001e80c <rpc_ip_client_request_alloc>:
   1e80c:	2300      	movs	r3, #0
   1e80e:	b513      	push	{r0, r1, r4, lr}
   1e810:	4604      	mov	r4, r0
   1e812:	9301      	str	r3, [sp, #4]
   1e814:	b150      	cbz	r0, 1e82c <rpc_ip_client_request_alloc+0x20>
   1e816:	2004      	movs	r0, #4
   1e818:	aa01      	add	r2, sp, #4
   1e81a:	f7ff ff1c 	bl	1e656 <rpc_message_alloc>
   1e81e:	b918      	cbnz	r0, 1e828 <rpc_ip_client_request_alloc+0x1c>
   1e820:	9b01      	ldr	r3, [sp, #4]
   1e822:	b10b      	cbz	r3, 1e828 <rpc_ip_client_request_alloc+0x1c>
   1e824:	3308      	adds	r3, #8
   1e826:	6023      	str	r3, [r4, #0]
   1e828:	b002      	add	sp, #8
   1e82a:	bd10      	pop	{r4, pc}
   1e82c:	200e      	movs	r0, #14
   1e82e:	e7fb      	b.n	1e828 <rpc_ip_client_request_alloc+0x1c>

0001e830 <rpc_ip_client_request_send>:
   1e830:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1e834:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1e838:	d10a      	bne.n	1e850 <rpc_ip_client_request_send+0x20>
   1e83a:	b158      	cbz	r0, 1e854 <rpc_ip_client_request_send+0x24>
   1e83c:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   1e840:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1e844:	4601      	mov	r1, r0
   1e846:	2004      	movs	r0, #4
   1e848:	f841 3d08 	str.w	r3, [r1, #-8]!
   1e84c:	f7ff bef3 	b.w	1e636 <rpc_message_send>
   1e850:	2001      	movs	r0, #1
   1e852:	4770      	bx	lr
   1e854:	200e      	movs	r0, #14
   1e856:	4770      	bx	lr

0001e858 <rpc_ip_client_message_free>:
   1e858:	b120      	cbz	r0, 1e864 <rpc_ip_client_message_free+0xc>
   1e85a:	f1a0 0108 	sub.w	r1, r0, #8
   1e85e:	2004      	movs	r0, #4
   1e860:	f7ff bf1d 	b.w	1e69e <rpc_message_free>
   1e864:	200e      	movs	r0, #14
   1e866:	4770      	bx	lr

0001e868 <rpc_ip_client_data_free>:
   1e868:	4601      	mov	r1, r0
   1e86a:	b110      	cbz	r0, 1e872 <rpc_ip_client_data_free+0xa>
   1e86c:	2004      	movs	r0, #4
   1e86e:	f7ff bf22 	b.w	1e6b6 <rpc_message_data_free>
   1e872:	200e      	movs	r0, #14
   1e874:	4770      	bx	lr

0001e876 <dfu_client_event_handler>:
   1e876:	f850 1b08 	ldr.w	r1, [r0], #8
   1e87a:	0c09      	lsrs	r1, r1, #16
   1e87c:	f7f9 b90c 	b.w	17a98 <rpc_dfu_event_handler>

0001e880 <rpc_dfu_client_request_alloc>:
   1e880:	2300      	movs	r3, #0
   1e882:	b513      	push	{r0, r1, r4, lr}
   1e884:	4604      	mov	r4, r0
   1e886:	9301      	str	r3, [sp, #4]
   1e888:	b150      	cbz	r0, 1e8a0 <rpc_dfu_client_request_alloc+0x20>
   1e88a:	2006      	movs	r0, #6
   1e88c:	aa01      	add	r2, sp, #4
   1e88e:	f7ff fee2 	bl	1e656 <rpc_message_alloc>
   1e892:	b918      	cbnz	r0, 1e89c <rpc_dfu_client_request_alloc+0x1c>
   1e894:	9b01      	ldr	r3, [sp, #4]
   1e896:	b10b      	cbz	r3, 1e89c <rpc_dfu_client_request_alloc+0x1c>
   1e898:	3308      	adds	r3, #8
   1e89a:	6023      	str	r3, [r4, #0]
   1e89c:	b002      	add	sp, #8
   1e89e:	bd10      	pop	{r4, pc}
   1e8a0:	200e      	movs	r0, #14
   1e8a2:	e7fb      	b.n	1e89c <rpc_dfu_client_request_alloc+0x1c>

0001e8a4 <rpc_dfu_client_request_send>:
   1e8a4:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   1e8a8:	d10a      	bne.n	1e8c0 <rpc_dfu_client_request_send+0x1c>
   1e8aa:	b158      	cbz	r0, 1e8c4 <rpc_dfu_client_request_send+0x20>
   1e8ac:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   1e8b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1e8b4:	4601      	mov	r1, r0
   1e8b6:	2006      	movs	r0, #6
   1e8b8:	f841 3d08 	str.w	r3, [r1, #-8]!
   1e8bc:	f7ff bebb 	b.w	1e636 <rpc_message_send>
   1e8c0:	2001      	movs	r0, #1
   1e8c2:	4770      	bx	lr
   1e8c4:	200e      	movs	r0, #14
   1e8c6:	4770      	bx	lr

0001e8c8 <rpc_dfu_client_message_free>:
   1e8c8:	b120      	cbz	r0, 1e8d4 <rpc_dfu_client_message_free+0xc>
   1e8ca:	f1a0 0108 	sub.w	r1, r0, #8
   1e8ce:	2006      	movs	r0, #6
   1e8d0:	f7ff bee5 	b.w	1e69e <rpc_message_free>
   1e8d4:	200e      	movs	r0, #14
   1e8d6:	4770      	bx	lr

0001e8d8 <rpc_dfu_client_data_free>:
   1e8d8:	4601      	mov	r1, r0
   1e8da:	b110      	cbz	r0, 1e8e2 <rpc_dfu_client_data_free+0xa>
   1e8dc:	2006      	movs	r0, #6
   1e8de:	f7ff beea 	b.w	1e6b6 <rpc_message_data_free>
   1e8e2:	200e      	movs	r0, #14
   1e8e4:	4770      	bx	lr

0001e8e6 <gnss_client_event_handler>:
   1e8e6:	f850 1b08 	ldr.w	r1, [r0], #8
   1e8ea:	0c09      	lsrs	r1, r1, #16
   1e8ec:	f7f9 ba64 	b.w	17db8 <rpc_gnss_event_handler>

0001e8f0 <rpc_gnss_client_request_alloc>:
   1e8f0:	2300      	movs	r3, #0
   1e8f2:	b513      	push	{r0, r1, r4, lr}
   1e8f4:	4604      	mov	r4, r0
   1e8f6:	9301      	str	r3, [sp, #4]
   1e8f8:	b150      	cbz	r0, 1e910 <rpc_gnss_client_request_alloc+0x20>
   1e8fa:	2007      	movs	r0, #7
   1e8fc:	aa01      	add	r2, sp, #4
   1e8fe:	f7ff feaa 	bl	1e656 <rpc_message_alloc>
   1e902:	b918      	cbnz	r0, 1e90c <rpc_gnss_client_request_alloc+0x1c>
   1e904:	9b01      	ldr	r3, [sp, #4]
   1e906:	b10b      	cbz	r3, 1e90c <rpc_gnss_client_request_alloc+0x1c>
   1e908:	3308      	adds	r3, #8
   1e90a:	6023      	str	r3, [r4, #0]
   1e90c:	b002      	add	sp, #8
   1e90e:	bd10      	pop	{r4, pc}
   1e910:	200e      	movs	r0, #14
   1e912:	e7fb      	b.n	1e90c <rpc_gnss_client_request_alloc+0x1c>

0001e914 <rpc_gnss_client_request_send>:
   1e914:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1e918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1e91c:	d10a      	bne.n	1e934 <rpc_gnss_client_request_send+0x20>
   1e91e:	b158      	cbz	r0, 1e938 <rpc_gnss_client_request_send+0x24>
   1e920:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   1e924:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1e928:	4601      	mov	r1, r0
   1e92a:	2007      	movs	r0, #7
   1e92c:	f841 3d08 	str.w	r3, [r1, #-8]!
   1e930:	f7ff be81 	b.w	1e636 <rpc_message_send>
   1e934:	2001      	movs	r0, #1
   1e936:	4770      	bx	lr
   1e938:	200e      	movs	r0, #14
   1e93a:	4770      	bx	lr

0001e93c <rpc_gnss_client_message_free>:
   1e93c:	b120      	cbz	r0, 1e948 <rpc_gnss_client_message_free+0xc>
   1e93e:	f1a0 0108 	sub.w	r1, r0, #8
   1e942:	2007      	movs	r0, #7
   1e944:	f7ff beab 	b.w	1e69e <rpc_message_free>
   1e948:	200e      	movs	r0, #14
   1e94a:	4770      	bx	lr

0001e94c <rpc_gnss_client_data_free>:
   1e94c:	4601      	mov	r1, r0
   1e94e:	b110      	cbz	r0, 1e956 <rpc_gnss_client_data_free+0xa>
   1e950:	2007      	movs	r0, #7
   1e952:	f7ff beb0 	b.w	1e6b6 <rpc_message_data_free>
   1e956:	200e      	movs	r0, #14
   1e958:	4770      	bx	lr

0001e95a <rpc_gnss_serialize_utc>:
   1e95a:	b1c0      	cbz	r0, 1e98e <rpc_gnss_serialize_utc+0x34>
   1e95c:	b1b9      	cbz	r1, 1e98e <rpc_gnss_serialize_utc+0x34>
   1e95e:	2301      	movs	r3, #1
   1e960:	700b      	strb	r3, [r1, #0]
   1e962:	2300      	movs	r3, #0
   1e964:	704b      	strb	r3, [r1, #1]
   1e966:	6843      	ldr	r3, [r0, #4]
   1e968:	f8c1 3006 	str.w	r3, [r1, #6]
   1e96c:	6803      	ldr	r3, [r0, #0]
   1e96e:	f8c1 3002 	str.w	r3, [r1, #2]
   1e972:	7a83      	ldrb	r3, [r0, #10]
   1e974:	730b      	strb	r3, [r1, #12]
   1e976:	7b43      	ldrb	r3, [r0, #13]
   1e978:	73cb      	strb	r3, [r1, #15]
   1e97a:	7b03      	ldrb	r3, [r0, #12]
   1e97c:	738b      	strb	r3, [r1, #14]
   1e97e:	7a03      	ldrb	r3, [r0, #8]
   1e980:	728b      	strb	r3, [r1, #10]
   1e982:	7ac3      	ldrb	r3, [r0, #11]
   1e984:	734b      	strb	r3, [r1, #13]
   1e986:	7a43      	ldrb	r3, [r0, #9]
   1e988:	2010      	movs	r0, #16
   1e98a:	72cb      	strb	r3, [r1, #11]
   1e98c:	4770      	bx	lr
   1e98e:	f04f 30ff 	mov.w	r0, #4294967295
   1e992:	4770      	bx	lr

0001e994 <rpc_gnss_serialize_ephe>:
   1e994:	2800      	cmp	r0, #0
   1e996:	d044      	beq.n	1ea22 <rpc_gnss_serialize_ephe+0x8e>
   1e998:	2900      	cmp	r1, #0
   1e99a:	d042      	beq.n	1ea22 <rpc_gnss_serialize_ephe+0x8e>
   1e99c:	2302      	movs	r3, #2
   1e99e:	700b      	strb	r3, [r1, #0]
   1e9a0:	2300      	movs	r3, #0
   1e9a2:	704b      	strb	r3, [r1, #1]
   1e9a4:	68c3      	ldr	r3, [r0, #12]
   1e9a6:	f8c1 300b 	str.w	r3, [r1, #11]
   1e9aa:	8903      	ldrh	r3, [r0, #8]
   1e9ac:	f8a1 3009 	strh.w	r3, [r1, #9]
   1e9b0:	7983      	ldrb	r3, [r0, #6]
   1e9b2:	720b      	strb	r3, [r1, #8]
   1e9b4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   1e9b8:	878b      	strh	r3, [r1, #60]	; 0x3c
   1e9ba:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   1e9bc:	86cb      	strh	r3, [r1, #54]	; 0x36
   1e9be:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   1e9c2:	874b      	strh	r3, [r1, #58]	; 0x3a
   1e9c4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   1e9c6:	868b      	strh	r3, [r1, #52]	; 0x34
   1e9c8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   1e9cc:	87cb      	strh	r3, [r1, #62]	; 0x3e
   1e9ce:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   1e9d2:	870b      	strh	r3, [r1, #56]	; 0x38
   1e9d4:	8b83      	ldrh	r3, [r0, #28]
   1e9d6:	830b      	strh	r3, [r1, #24]
   1e9d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1e9da:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   1e9de:	7c83      	ldrb	r3, [r0, #18]
   1e9e0:	744b      	strb	r3, [r1, #17]
   1e9e2:	7843      	ldrb	r3, [r0, #1]
   1e9e4:	70cb      	strb	r3, [r1, #3]
   1e9e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1e9e8:	62cb      	str	r3, [r1, #44]	; 0x2c
   1e9ea:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1e9ec:	84cb      	strh	r3, [r1, #38]	; 0x26
   1e9ee:	8843      	ldrh	r3, [r0, #2]
   1e9f0:	808b      	strh	r3, [r1, #4]
   1e9f2:	6a03      	ldr	r3, [r0, #32]
   1e9f4:	f8c1 301a 	str.w	r3, [r1, #26]
   1e9f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e9fa:	630b      	str	r3, [r1, #48]	; 0x30
   1e9fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1e9fe:	f8c1 301e 	str.w	r3, [r1, #30]
   1ea02:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1ea04:	628b      	str	r3, [r1, #40]	; 0x28
   1ea06:	7803      	ldrb	r3, [r0, #0]
   1ea08:	708b      	strb	r3, [r1, #2]
   1ea0a:	7c03      	ldrb	r3, [r0, #16]
   1ea0c:	73cb      	strb	r3, [r1, #15]
   1ea0e:	8883      	ldrh	r3, [r0, #4]
   1ea10:	80cb      	strh	r3, [r1, #6]
   1ea12:	8a83      	ldrh	r3, [r0, #20]
   1ea14:	824b      	strh	r3, [r1, #18]
   1ea16:	7c43      	ldrb	r3, [r0, #17]
   1ea18:	740b      	strb	r3, [r1, #16]
   1ea1a:	6983      	ldr	r3, [r0, #24]
   1ea1c:	2040      	movs	r0, #64	; 0x40
   1ea1e:	614b      	str	r3, [r1, #20]
   1ea20:	4770      	bx	lr
   1ea22:	f04f 30ff 	mov.w	r0, #4294967295
   1ea26:	4770      	bx	lr

0001ea28 <rpc_gnss_serialize_alm>:
   1ea28:	b340      	cbz	r0, 1ea7c <rpc_gnss_serialize_alm+0x54>
   1ea2a:	b339      	cbz	r1, 1ea7c <rpc_gnss_serialize_alm+0x54>
   1ea2c:	2303      	movs	r3, #3
   1ea2e:	700b      	strb	r3, [r1, #0]
   1ea30:	2300      	movs	r3, #0
   1ea32:	704b      	strb	r3, [r1, #1]
   1ea34:	8b83      	ldrh	r3, [r0, #28]
   1ea36:	f8a1 301d 	strh.w	r3, [r1, #29]
   1ea3a:	8bc3      	ldrh	r3, [r0, #30]
   1ea3c:	f8a1 301f 	strh.w	r3, [r1, #31]
   1ea40:	88c3      	ldrh	r3, [r0, #6]
   1ea42:	810b      	strh	r3, [r1, #8]
   1ea44:	8883      	ldrh	r3, [r0, #4]
   1ea46:	80cb      	strh	r3, [r1, #6]
   1ea48:	78c3      	ldrb	r3, [r0, #3]
   1ea4a:	714b      	strb	r3, [r1, #5]
   1ea4c:	6983      	ldr	r3, [r0, #24]
   1ea4e:	f8c1 3019 	str.w	r3, [r1, #25]
   1ea52:	6903      	ldr	r3, [r0, #16]
   1ea54:	f8c1 3011 	str.w	r3, [r1, #17]
   1ea58:	8903      	ldrh	r3, [r0, #8]
   1ea5a:	814b      	strh	r3, [r1, #10]
   1ea5c:	68c3      	ldr	r3, [r0, #12]
   1ea5e:	f8c1 300d 	str.w	r3, [r1, #13]
   1ea62:	7a83      	ldrb	r3, [r0, #10]
   1ea64:	730b      	strb	r3, [r1, #12]
   1ea66:	7803      	ldrb	r3, [r0, #0]
   1ea68:	708b      	strb	r3, [r1, #2]
   1ea6a:	7883      	ldrb	r3, [r0, #2]
   1ea6c:	710b      	strb	r3, [r1, #4]
   1ea6e:	6943      	ldr	r3, [r0, #20]
   1ea70:	f8c1 3015 	str.w	r3, [r1, #21]
   1ea74:	7843      	ldrb	r3, [r0, #1]
   1ea76:	2021      	movs	r0, #33	; 0x21
   1ea78:	70cb      	strb	r3, [r1, #3]
   1ea7a:	4770      	bx	lr
   1ea7c:	f04f 30ff 	mov.w	r0, #4294967295
   1ea80:	4770      	bx	lr

0001ea82 <rpc_gnss_serialize_klob>:
   1ea82:	b1b0      	cbz	r0, 1eab2 <rpc_gnss_serialize_klob+0x30>
   1ea84:	b1a9      	cbz	r1, 1eab2 <rpc_gnss_serialize_klob+0x30>
   1ea86:	2304      	movs	r3, #4
   1ea88:	700b      	strb	r3, [r1, #0]
   1ea8a:	2300      	movs	r3, #0
   1ea8c:	704b      	strb	r3, [r1, #1]
   1ea8e:	7803      	ldrb	r3, [r0, #0]
   1ea90:	708b      	strb	r3, [r1, #2]
   1ea92:	7843      	ldrb	r3, [r0, #1]
   1ea94:	70cb      	strb	r3, [r1, #3]
   1ea96:	7883      	ldrb	r3, [r0, #2]
   1ea98:	710b      	strb	r3, [r1, #4]
   1ea9a:	78c3      	ldrb	r3, [r0, #3]
   1ea9c:	714b      	strb	r3, [r1, #5]
   1ea9e:	7903      	ldrb	r3, [r0, #4]
   1eaa0:	718b      	strb	r3, [r1, #6]
   1eaa2:	7943      	ldrb	r3, [r0, #5]
   1eaa4:	71cb      	strb	r3, [r1, #7]
   1eaa6:	7983      	ldrb	r3, [r0, #6]
   1eaa8:	720b      	strb	r3, [r1, #8]
   1eaaa:	79c3      	ldrb	r3, [r0, #7]
   1eaac:	200a      	movs	r0, #10
   1eaae:	724b      	strb	r3, [r1, #9]
   1eab0:	4770      	bx	lr
   1eab2:	f04f 30ff 	mov.w	r0, #4294967295
   1eab6:	4770      	bx	lr

0001eab8 <rpc_gnss_serialize_nequick>:
   1eab8:	b180      	cbz	r0, 1eadc <rpc_gnss_serialize_nequick+0x24>
   1eaba:	b179      	cbz	r1, 1eadc <rpc_gnss_serialize_nequick+0x24>
   1eabc:	2305      	movs	r3, #5
   1eabe:	700b      	strb	r3, [r1, #0]
   1eac0:	2300      	movs	r3, #0
   1eac2:	704b      	strb	r3, [r1, #1]
   1eac4:	8803      	ldrh	r3, [r0, #0]
   1eac6:	804b      	strh	r3, [r1, #2]
   1eac8:	8843      	ldrh	r3, [r0, #2]
   1eaca:	808b      	strh	r3, [r1, #4]
   1eacc:	8883      	ldrh	r3, [r0, #4]
   1eace:	80cb      	strh	r3, [r1, #6]
   1ead0:	7983      	ldrb	r3, [r0, #6]
   1ead2:	720b      	strb	r3, [r1, #8]
   1ead4:	79c3      	ldrb	r3, [r0, #7]
   1ead6:	200a      	movs	r0, #10
   1ead8:	724b      	strb	r3, [r1, #9]
   1eada:	4770      	bx	lr
   1eadc:	f04f 30ff 	mov.w	r0, #4294967295
   1eae0:	4770      	bx	lr

0001eae2 <rpc_gnss_serialize_time_and_sv_tow>:
   1eae2:	b570      	push	{r4, r5, r6, lr}
   1eae4:	b1e8      	cbz	r0, 1eb22 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   1eae6:	b1e1      	cbz	r1, 1eb22 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   1eae8:	2206      	movs	r2, #6
   1eaea:	2300      	movs	r3, #0
   1eaec:	700a      	strb	r2, [r1, #0]
   1eaee:	8802      	ldrh	r2, [r0, #0]
   1eaf0:	704b      	strb	r3, [r1, #1]
   1eaf2:	804a      	strh	r2, [r1, #2]
   1eaf4:	68c2      	ldr	r2, [r0, #12]
   1eaf6:	f101 0410 	add.w	r4, r1, #16
   1eafa:	f8c1 200a 	str.w	r2, [r1, #10]
   1eafe:	8902      	ldrh	r2, [r0, #8]
   1eb00:	810a      	strh	r2, [r1, #8]
   1eb02:	6842      	ldr	r2, [r0, #4]
   1eb04:	604a      	str	r2, [r1, #4]
   1eb06:	8a06      	ldrh	r6, [r0, #16]
   1eb08:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1eb0c:	188d      	adds	r5, r1, r2
   1eb0e:	81ee      	strh	r6, [r5, #14]
   1eb10:	7c85      	ldrb	r5, [r0, #18]
   1eb12:	3301      	adds	r3, #1
   1eb14:	2b20      	cmp	r3, #32
   1eb16:	54a5      	strb	r5, [r4, r2]
   1eb18:	f100 0004 	add.w	r0, r0, #4
   1eb1c:	d1f3      	bne.n	1eb06 <rpc_gnss_serialize_time_and_sv_tow+0x24>
   1eb1e:	206e      	movs	r0, #110	; 0x6e
   1eb20:	bd70      	pop	{r4, r5, r6, pc}
   1eb22:	f04f 30ff 	mov.w	r0, #4294967295
   1eb26:	e7fb      	b.n	1eb20 <rpc_gnss_serialize_time_and_sv_tow+0x3e>

0001eb28 <rpc_gnss_serialize_location>:
   1eb28:	b1c0      	cbz	r0, 1eb5c <rpc_gnss_serialize_location+0x34>
   1eb2a:	b1b9      	cbz	r1, 1eb5c <rpc_gnss_serialize_location+0x34>
   1eb2c:	2307      	movs	r3, #7
   1eb2e:	700b      	strb	r3, [r1, #0]
   1eb30:	2300      	movs	r3, #0
   1eb32:	704b      	strb	r3, [r1, #1]
   1eb34:	8903      	ldrh	r3, [r0, #8]
   1eb36:	814b      	strh	r3, [r1, #10]
   1eb38:	7b83      	ldrb	r3, [r0, #14]
   1eb3a:	740b      	strb	r3, [r1, #16]
   1eb3c:	6803      	ldr	r3, [r0, #0]
   1eb3e:	f8c1 3002 	str.w	r3, [r1, #2]
   1eb42:	6843      	ldr	r3, [r0, #4]
   1eb44:	f8c1 3006 	str.w	r3, [r1, #6]
   1eb48:	7b03      	ldrb	r3, [r0, #12]
   1eb4a:	738b      	strb	r3, [r1, #14]
   1eb4c:	7b43      	ldrb	r3, [r0, #13]
   1eb4e:	73cb      	strb	r3, [r1, #15]
   1eb50:	7a83      	ldrb	r3, [r0, #10]
   1eb52:	730b      	strb	r3, [r1, #12]
   1eb54:	7ac3      	ldrb	r3, [r0, #11]
   1eb56:	2011      	movs	r0, #17
   1eb58:	734b      	strb	r3, [r1, #13]
   1eb5a:	4770      	bx	lr
   1eb5c:	f04f 30ff 	mov.w	r0, #4294967295
   1eb60:	4770      	bx	lr

0001eb62 <rpc_gnss_serialize_integrity>:
   1eb62:	b148      	cbz	r0, 1eb78 <rpc_gnss_serialize_integrity+0x16>
   1eb64:	b141      	cbz	r1, 1eb78 <rpc_gnss_serialize_integrity+0x16>
   1eb66:	2308      	movs	r3, #8
   1eb68:	700b      	strb	r3, [r1, #0]
   1eb6a:	2300      	movs	r3, #0
   1eb6c:	704b      	strb	r3, [r1, #1]
   1eb6e:	6803      	ldr	r3, [r0, #0]
   1eb70:	2006      	movs	r0, #6
   1eb72:	f8c1 3002 	str.w	r3, [r1, #2]
   1eb76:	4770      	bx	lr
   1eb78:	f04f 30ff 	mov.w	r0, #4294967295
   1eb7c:	4770      	bx	lr

0001eb7e <packet_handler_alloc_and_init>:
   1eb7e:	b538      	push	{r3, r4, r5, lr}
   1eb80:	4604      	mov	r4, r0
   1eb82:	4608      	mov	r0, r1
   1eb84:	4611      	mov	r1, r2
   1eb86:	4622      	mov	r2, r4
   1eb88:	f7fa fa52 	bl	19030 <packet_handler_create>
   1eb8c:	61e0      	str	r0, [r4, #28]
   1eb8e:	b158      	cbz	r0, 1eba8 <packet_handler_alloc_and_init+0x2a>
   1eb90:	6803      	ldr	r3, [r0, #0]
   1eb92:	681b      	ldr	r3, [r3, #0]
   1eb94:	4798      	blx	r3
   1eb96:	4605      	mov	r5, r0
   1eb98:	b120      	cbz	r0, 1eba4 <packet_handler_alloc_and_init+0x26>
   1eb9a:	69e0      	ldr	r0, [r4, #28]
   1eb9c:	f000 feb6 	bl	1f90c <packet_handler_delete>
   1eba0:	2300      	movs	r3, #0
   1eba2:	61e3      	str	r3, [r4, #28]
   1eba4:	4628      	mov	r0, r5
   1eba6:	bd38      	pop	{r3, r4, r5, pc}
   1eba8:	250c      	movs	r5, #12
   1ebaa:	e7fb      	b.n	1eba4 <packet_handler_alloc_and_init+0x26>

0001ebac <socket_free>:
   1ebac:	b510      	push	{r4, lr}
   1ebae:	4604      	mov	r4, r0
   1ebb0:	69c0      	ldr	r0, [r0, #28]
   1ebb2:	b108      	cbz	r0, 1ebb8 <socket_free+0xc>
   1ebb4:	f000 feaa 	bl	1f90c <packet_handler_delete>
   1ebb8:	4620      	mov	r0, r4
   1ebba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ebbe:	2228      	movs	r2, #40	; 0x28
   1ebc0:	2100      	movs	r1, #0
   1ebc2:	f001 bd47 	b.w	20654 <memset>

0001ebc6 <interface_socket_event_get>:
   1ebc6:	b508      	push	{r3, lr}
   1ebc8:	b169      	cbz	r1, 1ebe6 <interface_socket_event_get+0x20>
   1ebca:	f7f7 fad3 	bl	16174 <interface_socket_from_handle_get>
   1ebce:	b158      	cbz	r0, 1ebe8 <interface_socket_event_get+0x22>
   1ebd0:	6803      	ldr	r3, [r0, #0]
   1ebd2:	0c1b      	lsrs	r3, r3, #16
   1ebd4:	f003 020a 	and.w	r2, r3, #10
   1ebd8:	2a0a      	cmp	r2, #10
   1ebda:	bf14      	ite	ne
   1ebdc:	f003 030f 	andne.w	r3, r3, #15
   1ebe0:	f003 030d 	andeq.w	r3, r3, #13
   1ebe4:	600b      	str	r3, [r1, #0]
   1ebe6:	bd08      	pop	{r3, pc}
   1ebe8:	2310      	movs	r3, #16
   1ebea:	e7fb      	b.n	1ebe4 <interface_socket_event_get+0x1e>

0001ebec <ip_recvd_packet_free_cb>:
   1ebec:	b510      	push	{r4, lr}
   1ebee:	4604      	mov	r4, r0
   1ebf0:	6800      	ldr	r0, [r0, #0]
   1ebf2:	f7ff fe39 	bl	1e868 <rpc_ip_client_data_free>
   1ebf6:	68a0      	ldr	r0, [r4, #8]
   1ebf8:	b118      	cbz	r0, 1ec02 <ip_recvd_packet_free_cb+0x16>
   1ebfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ebfe:	f7f4 bd4f 	b.w	136a0 <nrf_modem_os_free>
   1ec02:	bd10      	pop	{r4, pc}

0001ec04 <ip_addr_parse>:
   1ec04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec06:	684d      	ldr	r5, [r1, #4]
   1ec08:	e9dd 7606 	ldrd	r7, r6, [sp, #24]
   1ec0c:	4285      	cmp	r5, r0
   1ec0e:	d11a      	bne.n	1ec46 <ip_addr_parse+0x42>
   1ec10:	780c      	ldrb	r4, [r1, #0]
   1ec12:	4294      	cmp	r4, r2
   1ec14:	d119      	bne.n	1ec4a <ip_addr_parse+0x46>
   1ec16:	2d02      	cmp	r5, #2
   1ec18:	d10b      	bne.n	1ec32 <ip_addr_parse+0x2e>
   1ec1a:	2c10      	cmp	r4, #16
   1ec1c:	d115      	bne.n	1ec4a <ip_addr_parse+0x46>
   1ec1e:	890a      	ldrh	r2, [r1, #8]
   1ec20:	310c      	adds	r1, #12
   1ec22:	803a      	strh	r2, [r7, #0]
   1ec24:	2204      	movs	r2, #4
   1ec26:	801a      	strh	r2, [r3, #0]
   1ec28:	4630      	mov	r0, r6
   1ec2a:	f001 fd06 	bl	2063a <memcpy>
   1ec2e:	2000      	movs	r0, #0
   1ec30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ec32:	2d0a      	cmp	r5, #10
   1ec34:	d109      	bne.n	1ec4a <ip_addr_parse+0x46>
   1ec36:	2c24      	cmp	r4, #36	; 0x24
   1ec38:	d107      	bne.n	1ec4a <ip_addr_parse+0x46>
   1ec3a:	890a      	ldrh	r2, [r1, #8]
   1ec3c:	803a      	strh	r2, [r7, #0]
   1ec3e:	2210      	movs	r2, #16
   1ec40:	801a      	strh	r2, [r3, #0]
   1ec42:	4411      	add	r1, r2
   1ec44:	e7f0      	b.n	1ec28 <ip_addr_parse+0x24>
   1ec46:	202f      	movs	r0, #47	; 0x2f
   1ec48:	e7f2      	b.n	1ec30 <ip_addr_parse+0x2c>
   1ec4a:	2016      	movs	r0, #22
   1ec4c:	e7f0      	b.n	1ec30 <ip_addr_parse+0x2c>

0001ec4e <ip_interface_request_create>:
   1ec4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ec50:	4614      	mov	r4, r2
   1ec52:	2200      	movs	r2, #0
   1ec54:	4606      	mov	r6, r0
   1ec56:	460d      	mov	r5, r1
   1ec58:	a801      	add	r0, sp, #4
   1ec5a:	4619      	mov	r1, r3
   1ec5c:	9201      	str	r2, [sp, #4]
   1ec5e:	f7ff fdd5 	bl	1e80c <rpc_ip_client_request_alloc>
   1ec62:	9b01      	ldr	r3, [sp, #4]
   1ec64:	b940      	cbnz	r0, 1ec78 <ip_interface_request_create+0x2a>
   1ec66:	2208      	movs	r2, #8
   1ec68:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   1ec6c:	60dc      	str	r4, [r3, #12]
   1ec6e:	611d      	str	r5, [r3, #16]
   1ec70:	721a      	strb	r2, [r3, #8]
   1ec72:	7258      	strb	r0, [r3, #9]
   1ec74:	7298      	strb	r0, [r3, #10]
   1ec76:	72d8      	strb	r0, [r3, #11]
   1ec78:	4618      	mov	r0, r3
   1ec7a:	b002      	add	sp, #8
   1ec7c:	bd70      	pop	{r4, r5, r6, pc}

0001ec7e <ip_interface_request_send>:
   1ec7e:	b570      	push	{r4, r5, r6, lr}
   1ec80:	460c      	mov	r4, r1
   1ec82:	4605      	mov	r5, r0
   1ec84:	4611      	mov	r1, r2
   1ec86:	4620      	mov	r0, r4
   1ec88:	461e      	mov	r6, r3
   1ec8a:	f7ff fdd1 	bl	1e830 <rpc_ip_client_request_send>
   1ec8e:	b140      	cbz	r0, 1eca2 <ip_interface_request_send+0x24>
   1ec90:	6820      	ldr	r0, [r4, #0]
   1ec92:	b108      	cbz	r0, 1ec98 <ip_interface_request_send+0x1a>
   1ec94:	f7ff fde8 	bl	1e868 <rpc_ip_client_data_free>
   1ec98:	4620      	mov	r0, r4
   1ec9a:	f7ff fddd 	bl	1e858 <rpc_ip_client_message_free>
   1ec9e:	2023      	movs	r0, #35	; 0x23
   1eca0:	602e      	str	r6, [r5, #0]
   1eca2:	bd70      	pop	{r4, r5, r6, pc}

0001eca4 <ip_interface_wait>:
   1eca4:	b538      	push	{r3, r4, r5, lr}
   1eca6:	4605      	mov	r5, r0
   1eca8:	f7f7 fa26 	bl	160f8 <interface_socket_wait>
   1ecac:	4604      	mov	r4, r0
   1ecae:	b938      	cbnz	r0, 1ecc0 <ip_interface_wait+0x1c>
   1ecb0:	4628      	mov	r0, r5
   1ecb2:	f7f7 fa5f 	bl	16174 <interface_socket_from_handle_get>
   1ecb6:	b118      	cbz	r0, 1ecc0 <ip_interface_wait+0x1c>
   1ecb8:	6844      	ldr	r4, [r0, #4]
   1ecba:	b10c      	cbz	r4, 1ecc0 <ip_interface_wait+0x1c>
   1ecbc:	2300      	movs	r3, #0
   1ecbe:	6043      	str	r3, [r0, #4]
   1ecc0:	4620      	mov	r0, r4
   1ecc2:	bd38      	pop	{r3, r4, r5, pc}

0001ecc4 <ip_interface_recvfrom>:
   1ecc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ecc8:	b087      	sub	sp, #28
   1ecca:	4681      	mov	r9, r0
   1eccc:	461e      	mov	r6, r3
   1ecce:	4690      	mov	r8, r2
   1ecd0:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1ecd2:	9101      	str	r1, [sp, #4]
   1ecd4:	2a00      	cmp	r2, #0
   1ecd6:	f000 80ee 	beq.w	1eeb6 <ip_interface_recvfrom+0x1f2>
   1ecda:	b11b      	cbz	r3, 1ece4 <ip_interface_recvfrom+0x20>
   1ecdc:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   1ece0:	f000 80eb 	beq.w	1eeba <ip_interface_recvfrom+0x1f6>
   1ece4:	4648      	mov	r0, r9
   1ece6:	f7f7 fa45 	bl	16174 <interface_socket_from_handle_get>
   1ecea:	4604      	mov	r4, r0
   1ecec:	2800      	cmp	r0, #0
   1ecee:	f000 80e6 	beq.w	1eebe <ip_interface_recvfrom+0x1fa>
   1ecf2:	6803      	ldr	r3, [r0, #0]
   1ecf4:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   1ecf8:	d10f      	bne.n	1ed1a <ip_interface_recvfrom+0x56>
   1ecfa:	6802      	ldr	r2, [r0, #0]
   1ecfc:	b292      	uxth	r2, r2
   1ecfe:	2a06      	cmp	r2, #6
   1ed00:	f000 8097 	beq.w	1ee32 <ip_interface_recvfrom+0x16e>
   1ed04:	6802      	ldr	r2, [r0, #0]
   1ed06:	461e      	mov	r6, r3
   1ed08:	b292      	uxth	r2, r2
   1ed0a:	2a07      	cmp	r2, #7
   1ed0c:	469a      	mov	sl, r3
   1ed0e:	f000 8092 	beq.w	1ee36 <ip_interface_recvfrom+0x172>
   1ed12:	2239      	movs	r2, #57	; 0x39
   1ed14:	f04f 35ff 	mov.w	r5, #4294967295
   1ed18:	e07b      	b.n	1ee12 <ip_interface_recvfrom+0x14e>
   1ed1a:	07b5      	lsls	r5, r6, #30
   1ed1c:	bf48      	it	mi
   1ed1e:	f04f 0a00 	movmi.w	sl, #0
   1ed22:	f04f 35ff 	mov.w	r5, #4294967295
   1ed26:	bf58      	it	pl
   1ed28:	6803      	ldrpl	r3, [r0, #0]
   1ed2a:	f006 0b10 	and.w	fp, r6, #16
   1ed2e:	bf5c      	itt	pl
   1ed30:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   1ed34:	f3c3 7a00 	ubfxpl	sl, r3, #28, #1
   1ed38:	6822      	ldr	r2, [r4, #0]
   1ed3a:	03d0      	lsls	r0, r2, #15
   1ed3c:	d532      	bpl.n	1eda4 <ip_interface_recvfrom+0xe0>
   1ed3e:	6822      	ldr	r2, [r4, #0]
   1ed40:	69e0      	ldr	r0, [r4, #28]
   1ed42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   1ed46:	6022      	str	r2, [r4, #0]
   1ed48:	6802      	ldr	r2, [r0, #0]
   1ed4a:	68d2      	ldr	r2, [r2, #12]
   1ed4c:	4790      	blx	r2
   1ed4e:	1c41      	adds	r1, r0, #1
   1ed50:	4605      	mov	r5, r0
   1ed52:	d00d      	beq.n	1ed70 <ip_interface_recvfrom+0xac>
   1ed54:	4580      	cmp	r8, r0
   1ed56:	dd08      	ble.n	1ed6a <ip_interface_recvfrom+0xa6>
   1ed58:	6923      	ldr	r3, [r4, #16]
   1ed5a:	2b01      	cmp	r3, #1
   1ed5c:	d105      	bne.n	1ed6a <ip_interface_recvfrom+0xa6>
   1ed5e:	f1bb 0f00 	cmp.w	fp, #0
   1ed62:	d064      	beq.n	1ee2e <ip_interface_recvfrom+0x16a>
   1ed64:	6823      	ldr	r3, [r4, #0]
   1ed66:	00da      	lsls	r2, r3, #3
   1ed68:	d520      	bpl.n	1edac <ip_interface_recvfrom+0xe8>
   1ed6a:	f04f 0a00 	mov.w	sl, #0
   1ed6e:	e03b      	b.n	1ede8 <ip_interface_recvfrom+0x124>
   1ed70:	6822      	ldr	r2, [r4, #0]
   1ed72:	0313      	lsls	r3, r2, #12
   1ed74:	d516      	bpl.n	1eda4 <ip_interface_recvfrom+0xe0>
   1ed76:	6822      	ldr	r2, [r4, #0]
   1ed78:	b292      	uxth	r2, r2
   1ed7a:	2a0d      	cmp	r2, #13
   1ed7c:	d012      	beq.n	1eda4 <ip_interface_recvfrom+0xe0>
   1ed7e:	6923      	ldr	r3, [r4, #16]
   1ed80:	2b01      	cmp	r3, #1
   1ed82:	f000 80a4 	beq.w	1eece <ip_interface_recvfrom+0x20a>
   1ed86:	f04f 0a00 	mov.w	sl, #0
   1ed8a:	2239      	movs	r2, #57	; 0x39
   1ed8c:	6823      	ldr	r3, [r4, #0]
   1ed8e:	0c1b      	lsrs	r3, r3, #16
   1ed90:	041b      	lsls	r3, r3, #16
   1ed92:	f043 030d 	orr.w	r3, r3, #13
   1ed96:	6023      	str	r3, [r4, #0]
   1ed98:	6823      	ldr	r3, [r4, #0]
   1ed9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1ed9e:	6023      	str	r3, [r4, #0]
   1eda0:	2600      	movs	r6, #0
   1eda2:	e036      	b.n	1ee12 <ip_interface_recvfrom+0x14e>
   1eda4:	f1ba 0f00 	cmp.w	sl, #0
   1eda8:	f000 8092 	beq.w	1eed0 <ip_interface_recvfrom+0x20c>
   1edac:	6a23      	ldr	r3, [r4, #32]
   1edae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1edb2:	2b00      	cmp	r3, #0
   1edb4:	bf08      	it	eq
   1edb6:	f04f 33ff 	moveq.w	r3, #4294967295
   1edba:	4611      	mov	r1, r2
   1edbc:	9302      	str	r3, [sp, #8]
   1edbe:	4648      	mov	r0, r9
   1edc0:	ab02      	add	r3, sp, #8
   1edc2:	f7ff ff6f 	bl	1eca4 <ip_interface_wait>
   1edc6:	4602      	mov	r2, r0
   1edc8:	2800      	cmp	r0, #0
   1edca:	d07a      	beq.n	1eec2 <ip_interface_recvfrom+0x1fe>
   1edcc:	6823      	ldr	r3, [r4, #0]
   1edce:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   1edd2:	d079      	beq.n	1eec8 <ip_interface_recvfrom+0x204>
   1edd4:	6823      	ldr	r3, [r4, #0]
   1edd6:	b29b      	uxth	r3, r3
   1edd8:	2b0d      	cmp	r3, #13
   1edda:	d075      	beq.n	1eec8 <ip_interface_recvfrom+0x204>
   1eddc:	6923      	ldr	r3, [r4, #16]
   1edde:	1e5d      	subs	r5, r3, #1
   1ede0:	f1d5 0a00 	rsbs	sl, r5, #0
   1ede4:	eb4a 0a05 	adc.w	sl, sl, r5
   1ede8:	b107      	cbz	r7, 1edec <ip_interface_recvfrom+0x128>
   1edea:	683f      	ldr	r7, [r7, #0]
   1edec:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1edee:	69e0      	ldr	r0, [r4, #28]
   1edf0:	e9cd 2704 	strd	r2, r7, [sp, #16]
   1edf4:	9b01      	ldr	r3, [sp, #4]
   1edf6:	6802      	ldr	r2, [r0, #0]
   1edf8:	e9cd 3802 	strd	r3, r8, [sp, #8]
   1edfc:	6895      	ldr	r5, [r2, #8]
   1edfe:	a902      	add	r1, sp, #8
   1ee00:	4632      	mov	r2, r6
   1ee02:	47a8      	blx	r5
   1ee04:	4605      	mov	r5, r0
   1ee06:	1c68      	adds	r0, r5, #1
   1ee08:	bf0b      	itete	eq
   1ee0a:	2600      	moveq	r6, #0
   1ee0c:	2601      	movne	r6, #1
   1ee0e:	2223      	moveq	r2, #35	; 0x23
   1ee10:	2200      	movne	r2, #0
   1ee12:	69e0      	ldr	r0, [r4, #28]
   1ee14:	9201      	str	r2, [sp, #4]
   1ee16:	6801      	ldr	r1, [r0, #0]
   1ee18:	68c9      	ldr	r1, [r1, #12]
   1ee1a:	4788      	blx	r1
   1ee1c:	3001      	adds	r0, #1
   1ee1e:	9a01      	ldr	r2, [sp, #4]
   1ee20:	d00b      	beq.n	1ee3a <ip_interface_recvfrom+0x176>
   1ee22:	6823      	ldr	r3, [r4, #0]
   1ee24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ee28:	6023      	str	r3, [r4, #0]
   1ee2a:	b1aa      	cbz	r2, 1ee58 <ip_interface_recvfrom+0x194>
   1ee2c:	e032      	b.n	1ee94 <ip_interface_recvfrom+0x1d0>
   1ee2e:	46da      	mov	sl, fp
   1ee30:	e7da      	b.n	1ede8 <ip_interface_recvfrom+0x124>
   1ee32:	461e      	mov	r6, r3
   1ee34:	469a      	mov	sl, r3
   1ee36:	2209      	movs	r2, #9
   1ee38:	e76c      	b.n	1ed14 <ip_interface_recvfrom+0x50>
   1ee3a:	f1ba 0f00 	cmp.w	sl, #0
   1ee3e:	d00f      	beq.n	1ee60 <ip_interface_recvfrom+0x19c>
   1ee40:	b97e      	cbnz	r6, 1ee62 <ip_interface_recvfrom+0x19e>
   1ee42:	4635      	mov	r5, r6
   1ee44:	6823      	ldr	r3, [r4, #0]
   1ee46:	0c1b      	lsrs	r3, r3, #16
   1ee48:	041b      	lsls	r3, r3, #16
   1ee4a:	f043 030d 	orr.w	r3, r3, #13
   1ee4e:	6023      	str	r3, [r4, #0]
   1ee50:	6823      	ldr	r3, [r4, #0]
   1ee52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1ee56:	6023      	str	r3, [r4, #0]
   1ee58:	4628      	mov	r0, r5
   1ee5a:	b007      	add	sp, #28
   1ee5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee60:	b14e      	cbz	r6, 1ee76 <ip_interface_recvfrom+0x1b2>
   1ee62:	6823      	ldr	r3, [r4, #0]
   1ee64:	0319      	lsls	r1, r3, #12
   1ee66:	d506      	bpl.n	1ee76 <ip_interface_recvfrom+0x1b2>
   1ee68:	6823      	ldr	r3, [r4, #0]
   1ee6a:	b29b      	uxth	r3, r3
   1ee6c:	2b0d      	cmp	r3, #13
   1ee6e:	d002      	beq.n	1ee76 <ip_interface_recvfrom+0x1b2>
   1ee70:	6923      	ldr	r3, [r4, #16]
   1ee72:	2b01      	cmp	r3, #1
   1ee74:	d0d5      	beq.n	1ee22 <ip_interface_recvfrom+0x15e>
   1ee76:	6823      	ldr	r3, [r4, #0]
   1ee78:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1ee7c:	6823      	ldr	r3, [r4, #0]
   1ee7e:	d00f      	beq.n	1eea0 <ip_interface_recvfrom+0x1dc>
   1ee80:	2269      	movs	r2, #105	; 0x69
   1ee82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   1ee86:	6023      	str	r3, [r4, #0]
   1ee88:	6823      	ldr	r3, [r4, #0]
   1ee8a:	0c1b      	lsrs	r3, r3, #16
   1ee8c:	041b      	lsls	r3, r3, #16
   1ee8e:	f043 030d 	orr.w	r3, r3, #13
   1ee92:	6023      	str	r3, [r4, #0]
   1ee94:	4610      	mov	r0, r2
   1ee96:	f7f4 fa5f 	bl	13358 <nrf_modem_os_errno_set>
   1ee9a:	f04f 35ff 	mov.w	r5, #4294967295
   1ee9e:	e7db      	b.n	1ee58 <ip_interface_recvfrom+0x194>
   1eea0:	031b      	lsls	r3, r3, #12
   1eea2:	d5c2      	bpl.n	1ee2a <ip_interface_recvfrom+0x166>
   1eea4:	6823      	ldr	r3, [r4, #0]
   1eea6:	b29b      	uxth	r3, r3
   1eea8:	2b0d      	cmp	r3, #13
   1eeaa:	d1be      	bne.n	1ee2a <ip_interface_recvfrom+0x166>
   1eeac:	68a3      	ldr	r3, [r4, #8]
   1eeae:	2b00      	cmp	r3, #0
   1eeb0:	d0bb      	beq.n	1ee2a <ip_interface_recvfrom+0x166>
   1eeb2:	68a2      	ldr	r2, [r4, #8]
   1eeb4:	e7b9      	b.n	1ee2a <ip_interface_recvfrom+0x166>
   1eeb6:	2216      	movs	r2, #22
   1eeb8:	e7ec      	b.n	1ee94 <ip_interface_recvfrom+0x1d0>
   1eeba:	222d      	movs	r2, #45	; 0x2d
   1eebc:	e7ea      	b.n	1ee94 <ip_interface_recvfrom+0x1d0>
   1eebe:	2209      	movs	r2, #9
   1eec0:	e7e8      	b.n	1ee94 <ip_interface_recvfrom+0x1d0>
   1eec2:	f04f 0a01 	mov.w	sl, #1
   1eec6:	e737      	b.n	1ed38 <ip_interface_recvfrom+0x74>
   1eec8:	2600      	movs	r6, #0
   1eeca:	46b2      	mov	sl, r6
   1eecc:	e7a1      	b.n	1ee12 <ip_interface_recvfrom+0x14e>
   1eece:	469a      	mov	sl, r3
   1eed0:	2223      	movs	r2, #35	; 0x23
   1eed2:	e765      	b.n	1eda0 <ip_interface_recvfrom+0xdc>

0001eed4 <ip_interface_connect>:
   1eed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1eed8:	4606      	mov	r6, r0
   1eeda:	4691      	mov	r9, r2
   1eedc:	460f      	mov	r7, r1
   1eede:	b085      	sub	sp, #20
   1eee0:	2900      	cmp	r1, #0
   1eee2:	d065      	beq.n	1efb0 <ip_interface_connect+0xdc>
   1eee4:	2a00      	cmp	r2, #0
   1eee6:	d063      	beq.n	1efb0 <ip_interface_connect+0xdc>
   1eee8:	f7f7 f944 	bl	16174 <interface_socket_from_handle_get>
   1eeec:	4604      	mov	r4, r0
   1eeee:	2800      	cmp	r0, #0
   1eef0:	d060      	beq.n	1efb4 <ip_interface_connect+0xe0>
   1eef2:	6803      	ldr	r3, [r0, #0]
   1eef4:	b29b      	uxth	r3, r3
   1eef6:	2b02      	cmp	r3, #2
   1eef8:	d003      	beq.n	1ef02 <ip_interface_connect+0x2e>
   1eefa:	6803      	ldr	r3, [r0, #0]
   1eefc:	b29b      	uxth	r3, r3
   1eefe:	2b04      	cmp	r3, #4
   1ef00:	d14f      	bne.n	1efa2 <ip_interface_connect+0xce>
   1ef02:	6823      	ldr	r3, [r4, #0]
   1ef04:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   1ef08:	d156      	bne.n	1efb8 <ip_interface_connect+0xe4>
   1ef0a:	f247 0202 	movw	r2, #28674	; 0x7002
   1ef0e:	4630      	mov	r0, r6
   1ef10:	69a1      	ldr	r1, [r4, #24]
   1ef12:	f7ff fe9c 	bl	1ec4e <ip_interface_request_create>
   1ef16:	4605      	mov	r5, r0
   1ef18:	2800      	cmp	r0, #0
   1ef1a:	d04f      	beq.n	1efbc <ip_interface_connect+0xe8>
   1ef1c:	f247 0802 	movw	r8, #28674	; 0x7002
   1ef20:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   1ef24:	60c3      	str	r3, [r0, #12]
   1ef26:	69a3      	ldr	r3, [r4, #24]
   1ef28:	464a      	mov	r2, r9
   1ef2a:	6103      	str	r3, [r0, #16]
   1ef2c:	6883      	ldr	r3, [r0, #8]
   1ef2e:	4639      	mov	r1, r7
   1ef30:	3304      	adds	r3, #4
   1ef32:	6083      	str	r3, [r0, #8]
   1ef34:	f100 0318 	add.w	r3, r0, #24
   1ef38:	9301      	str	r3, [sp, #4]
   1ef3a:	f100 0314 	add.w	r3, r0, #20
   1ef3e:	9300      	str	r3, [sp, #0]
   1ef40:	f100 0316 	add.w	r3, r0, #22
   1ef44:	68e0      	ldr	r0, [r4, #12]
   1ef46:	f7ff fe5d 	bl	1ec04 <ip_addr_parse>
   1ef4a:	bb18      	cbnz	r0, 1ef94 <ip_interface_connect+0xc0>
   1ef4c:	68ab      	ldr	r3, [r5, #8]
   1ef4e:	8aea      	ldrh	r2, [r5, #22]
   1ef50:	6827      	ldr	r7, [r4, #0]
   1ef52:	4413      	add	r3, r2
   1ef54:	60ab      	str	r3, [r5, #8]
   1ef56:	6823      	ldr	r3, [r4, #0]
   1ef58:	4642      	mov	r2, r8
   1ef5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1ef5e:	6023      	str	r3, [r4, #0]
   1ef60:	4629      	mov	r1, r5
   1ef62:	463b      	mov	r3, r7
   1ef64:	4620      	mov	r0, r4
   1ef66:	f7ff fe8a 	bl	1ec7e <ip_interface_request_send>
   1ef6a:	b998      	cbnz	r0, 1ef94 <ip_interface_connect+0xc0>
   1ef6c:	6823      	ldr	r3, [r4, #0]
   1ef6e:	00db      	lsls	r3, r3, #3
   1ef70:	d426      	bmi.n	1efc0 <ip_interface_connect+0xec>
   1ef72:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ef74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ef78:	2b00      	cmp	r3, #0
   1ef7a:	bf08      	it	eq
   1ef7c:	f04f 33ff 	moveq.w	r3, #4294967295
   1ef80:	2105      	movs	r1, #5
   1ef82:	9303      	str	r3, [sp, #12]
   1ef84:	4630      	mov	r0, r6
   1ef86:	ab03      	add	r3, sp, #12
   1ef88:	f7ff fe8c 	bl	1eca4 <ip_interface_wait>
   1ef8c:	b130      	cbz	r0, 1ef9c <ip_interface_connect+0xc8>
   1ef8e:	2873      	cmp	r0, #115	; 0x73
   1ef90:	d000      	beq.n	1ef94 <ip_interface_connect+0xc0>
   1ef92:	6027      	str	r7, [r4, #0]
   1ef94:	f7f4 f9e0 	bl	13358 <nrf_modem_os_errno_set>
   1ef98:	f04f 30ff 	mov.w	r0, #4294967295
   1ef9c:	b005      	add	sp, #20
   1ef9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1efa2:	6803      	ldr	r3, [r0, #0]
   1efa4:	b29b      	uxth	r3, r3
   1efa6:	2b05      	cmp	r3, #5
   1efa8:	bf14      	ite	ne
   1efaa:	2009      	movne	r0, #9
   1efac:	2038      	moveq	r0, #56	; 0x38
   1efae:	e7f1      	b.n	1ef94 <ip_interface_connect+0xc0>
   1efb0:	2016      	movs	r0, #22
   1efb2:	e7ef      	b.n	1ef94 <ip_interface_connect+0xc0>
   1efb4:	2009      	movs	r0, #9
   1efb6:	e7ed      	b.n	1ef94 <ip_interface_connect+0xc0>
   1efb8:	2072      	movs	r0, #114	; 0x72
   1efba:	e7eb      	b.n	1ef94 <ip_interface_connect+0xc0>
   1efbc:	200c      	movs	r0, #12
   1efbe:	e7e9      	b.n	1ef94 <ip_interface_connect+0xc0>
   1efc0:	2073      	movs	r0, #115	; 0x73
   1efc2:	e7e7      	b.n	1ef94 <ip_interface_connect+0xc0>

0001efc4 <getopt_check_and_send_int>:
   1efc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1efc6:	4604      	mov	r4, r0
   1efc8:	460d      	mov	r5, r1
   1efca:	4618      	mov	r0, r3
   1efcc:	4611      	mov	r1, r2
   1efce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1efd2:	b193      	cbz	r3, 1effa <getopt_check_and_send_int+0x36>
   1efd4:	681e      	ldr	r6, [r3, #0]
   1efd6:	2e04      	cmp	r6, #4
   1efd8:	d10f      	bne.n	1effa <getopt_check_and_send_int+0x36>
   1efda:	b172      	cbz	r2, 1effa <getopt_check_and_send_int+0x36>
   1efdc:	e9cd 2300 	strd	r2, r3, [sp]
   1efe0:	462b      	mov	r3, r5
   1efe2:	4622      	mov	r2, r4
   1efe4:	f7f7 fb88 	bl	166f8 <ip_interface_socketoption_get>
   1efe8:	4603      	mov	r3, r0
   1efea:	b118      	cbz	r0, 1eff4 <getopt_check_and_send_int+0x30>
   1efec:	f7f4 f9b4 	bl	13358 <nrf_modem_os_errno_set>
   1eff0:	f04f 33ff 	mov.w	r3, #4294967295
   1eff4:	4618      	mov	r0, r3
   1eff6:	b002      	add	sp, #8
   1eff8:	bd70      	pop	{r4, r5, r6, pc}
   1effa:	2016      	movs	r0, #22
   1effc:	e7f6      	b.n	1efec <getopt_check_and_send_int+0x28>

0001effe <ip_interface_socketoption_send>:
   1effe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f002:	4699      	mov	r9, r3
   1f004:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   1f008:	f04f 33ff 	mov.w	r3, #4294967295
   1f00c:	9301      	str	r3, [sp, #4]
   1f00e:	680b      	ldr	r3, [r1, #0]
   1f010:	4606      	mov	r6, r0
   1f012:	025d      	lsls	r5, r3, #9
   1f014:	460c      	mov	r4, r1
   1f016:	4692      	mov	sl, r2
   1f018:	d43c      	bmi.n	1f094 <ip_interface_socketoption_send+0x96>
   1f01a:	680b      	ldr	r3, [r1, #0]
   1f01c:	0219      	lsls	r1, r3, #8
   1f01e:	d439      	bmi.n	1f094 <ip_interface_socketoption_send+0x96>
   1f020:	6823      	ldr	r3, [r4, #0]
   1f022:	01da      	lsls	r2, r3, #7
   1f024:	d436      	bmi.n	1f094 <ip_interface_socketoption_send+0x96>
   1f026:	6823      	ldr	r3, [r4, #0]
   1f028:	019b      	lsls	r3, r3, #6
   1f02a:	d433      	bmi.n	1f094 <ip_interface_socketoption_send+0x96>
   1f02c:	f8d4 8000 	ldr.w	r8, [r4]
   1f030:	6823      	ldr	r3, [r4, #0]
   1f032:	f247 0203 	movw	r2, #28675	; 0x7003
   1f036:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1f03a:	6023      	str	r3, [r4, #0]
   1f03c:	69a1      	ldr	r1, [r4, #24]
   1f03e:	463b      	mov	r3, r7
   1f040:	f7ff fe05 	bl	1ec4e <ip_interface_request_create>
   1f044:	4605      	mov	r5, r0
   1f046:	b318      	cbz	r0, 1f090 <ip_interface_socketoption_send+0x92>
   1f048:	6883      	ldr	r3, [r0, #8]
   1f04a:	f8c0 a014 	str.w	sl, [r0, #20]
   1f04e:	3308      	adds	r3, #8
   1f050:	6083      	str	r3, [r0, #8]
   1f052:	f8c0 9018 	str.w	r9, [r0, #24]
   1f056:	b13f      	cbz	r7, 1f068 <ip_interface_socketoption_send+0x6a>
   1f058:	f1bb 0f00 	cmp.w	fp, #0
   1f05c:	d004      	beq.n	1f068 <ip_interface_socketoption_send+0x6a>
   1f05e:	463a      	mov	r2, r7
   1f060:	4659      	mov	r1, fp
   1f062:	6800      	ldr	r0, [r0, #0]
   1f064:	f001 fae9 	bl	2063a <memcpy>
   1f068:	4643      	mov	r3, r8
   1f06a:	f247 0203 	movw	r2, #28675	; 0x7003
   1f06e:	4629      	mov	r1, r5
   1f070:	4620      	mov	r0, r4
   1f072:	f7ff fe04 	bl	1ec7e <ip_interface_request_send>
   1f076:	b930      	cbnz	r0, 1f086 <ip_interface_socketoption_send+0x88>
   1f078:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1f07c:	4630      	mov	r0, r6
   1f07e:	4611      	mov	r1, r2
   1f080:	ab01      	add	r3, sp, #4
   1f082:	f7ff fe0f 	bl	1eca4 <ip_interface_wait>
   1f086:	f8c4 8000 	str.w	r8, [r4]
   1f08a:	b003      	add	sp, #12
   1f08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f090:	200c      	movs	r0, #12
   1f092:	e7f8      	b.n	1f086 <ip_interface_socketoption_send+0x88>
   1f094:	2023      	movs	r0, #35	; 0x23
   1f096:	e7f8      	b.n	1f08a <ip_interface_socketoption_send+0x8c>

0001f098 <setopt_check_and_send_int>:
   1f098:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f09a:	4604      	mov	r4, r0
   1f09c:	460d      	mov	r5, r1
   1f09e:	4618      	mov	r0, r3
   1f0a0:	4611      	mov	r1, r2
   1f0a2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   1f0a6:	2a04      	cmp	r2, #4
   1f0a8:	d10f      	bne.n	1f0ca <setopt_check_and_send_int+0x32>
   1f0aa:	b173      	cbz	r3, 1f0ca <setopt_check_and_send_int+0x32>
   1f0ac:	e9cd 3200 	strd	r3, r2, [sp]
   1f0b0:	462b      	mov	r3, r5
   1f0b2:	4622      	mov	r2, r4
   1f0b4:	f7ff ffa3 	bl	1effe <ip_interface_socketoption_send>
   1f0b8:	4603      	mov	r3, r0
   1f0ba:	b118      	cbz	r0, 1f0c4 <setopt_check_and_send_int+0x2c>
   1f0bc:	f7f4 f94c 	bl	13358 <nrf_modem_os_errno_set>
   1f0c0:	f04f 33ff 	mov.w	r3, #4294967295
   1f0c4:	4618      	mov	r0, r3
   1f0c6:	b003      	add	sp, #12
   1f0c8:	bd30      	pop	{r4, r5, pc}
   1f0ca:	2016      	movs	r0, #22
   1f0cc:	e7f6      	b.n	1f0bc <setopt_check_and_send_int+0x24>

0001f0ce <ip_interface_setopt>:
   1f0ce:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1f0d2:	2901      	cmp	r1, #1
   1f0d4:	4606      	mov	r6, r0
   1f0d6:	4690      	mov	r8, r2
   1f0d8:	461c      	mov	r4, r3
   1f0da:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1f0dc:	d007      	beq.n	1f0ee <ip_interface_setopt+0x20>
   1f0de:	202a      	movs	r0, #42	; 0x2a
   1f0e0:	f7f4 f93a 	bl	13358 <nrf_modem_os_errno_set>
   1f0e4:	f04f 30ff 	mov.w	r0, #4294967295
   1f0e8:	b004      	add	sp, #16
   1f0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f0ee:	f7f7 f841 	bl	16174 <interface_socket_from_handle_get>
   1f0f2:	4605      	mov	r5, r0
   1f0f4:	b908      	cbnz	r0, 1f0fa <ip_interface_setopt+0x2c>
   1f0f6:	2009      	movs	r0, #9
   1f0f8:	e7f2      	b.n	1f0e0 <ip_interface_setopt+0x12>
   1f0fa:	f1b8 0f19 	cmp.w	r8, #25
   1f0fe:	d00d      	beq.n	1f11c <ip_interface_setopt+0x4e>
   1f100:	f1a8 031e 	sub.w	r3, r8, #30
   1f104:	2b0a      	cmp	r3, #10
   1f106:	d84d      	bhi.n	1f1a4 <ip_interface_setopt+0xd6>
   1f108:	2b0a      	cmp	r3, #10
   1f10a:	d84b      	bhi.n	1f1a4 <ip_interface_setopt+0xd6>
   1f10c:	e8df f003 	tbb	[pc, r3]
   1f110:	4a3b3429 	.word	0x4a3b3429
   1f114:	4a4a4a4a 	.word	0x4a4a4a4a
   1f118:	4a4a      	.short	0x4a4a
   1f11a:	42          	.byte	0x42
   1f11b:	00          	.byte	0x00
   1f11c:	b90c      	cbnz	r4, 1f122 <ip_interface_setopt+0x54>
   1f11e:	200e      	movs	r0, #14
   1f120:	e7de      	b.n	1f0e0 <ip_interface_setopt+0x12>
   1f122:	4620      	mov	r0, r4
   1f124:	f7ed ff06 	bl	cf34 <strlen>
   1f128:	42b8      	cmp	r0, r7
   1f12a:	d1f8      	bne.n	1f11e <ip_interface_setopt+0x50>
   1f12c:	682b      	ldr	r3, [r5, #0]
   1f12e:	b29b      	uxth	r3, r3
   1f130:	2b02      	cmp	r3, #2
   1f132:	d1e0      	bne.n	1f0f6 <ip_interface_setopt+0x28>
   1f134:	4621      	mov	r1, r4
   1f136:	68e8      	ldr	r0, [r5, #12]
   1f138:	f7f9 fe94 	bl	18e64 <pdn_interface_pdn_id_get>
   1f13c:	9003      	str	r0, [sp, #12]
   1f13e:	3001      	adds	r0, #1
   1f140:	d101      	bne.n	1f146 <ip_interface_setopt+0x78>
   1f142:	2016      	movs	r0, #22
   1f144:	e7cc      	b.n	1f0e0 <ip_interface_setopt+0x12>
   1f146:	2304      	movs	r3, #4
   1f148:	9301      	str	r3, [sp, #4]
   1f14a:	ab03      	add	r3, sp, #12
   1f14c:	9300      	str	r3, [sp, #0]
   1f14e:	2208      	movs	r2, #8
   1f150:	f243 0310 	movw	r3, #12304	; 0x3010
   1f154:	4629      	mov	r1, r5
   1f156:	4630      	mov	r0, r6
   1f158:	f7ff ff51 	bl	1effe <ip_interface_socketoption_send>
   1f15c:	2800      	cmp	r0, #0
   1f15e:	d0c3      	beq.n	1f0e8 <ip_interface_setopt+0x1a>
   1f160:	e7be      	b.n	1f0e0 <ip_interface_setopt+0x12>
   1f162:	4633      	mov	r3, r6
   1f164:	4602      	mov	r2, r0
   1f166:	f248 0101 	movw	r1, #32769	; 0x8001
   1f16a:	e9cd 4700 	strd	r4, r7, [sp]
   1f16e:	f44f 7000 	mov.w	r0, #512	; 0x200
   1f172:	f7ff ff91 	bl	1f098 <setopt_check_and_send_int>
   1f176:	e7b7      	b.n	1f0e8 <ip_interface_setopt+0x1a>
   1f178:	4633      	mov	r3, r6
   1f17a:	4602      	mov	r2, r0
   1f17c:	f244 0110 	movw	r1, #16400	; 0x4010
   1f180:	e9cd 4700 	strd	r4, r7, [sp]
   1f184:	e7f3      	b.n	1f16e <ip_interface_setopt+0xa0>
   1f186:	4633      	mov	r3, r6
   1f188:	4602      	mov	r2, r0
   1f18a:	f246 0110 	movw	r1, #24592	; 0x6010
   1f18e:	e9cd 4700 	strd	r4, r7, [sp]
   1f192:	e7ec      	b.n	1f16e <ip_interface_setopt+0xa0>
   1f194:	4602      	mov	r2, r0
   1f196:	4633      	mov	r3, r6
   1f198:	f241 0104 	movw	r1, #4100	; 0x1004
   1f19c:	2008      	movs	r0, #8
   1f19e:	e9cd 4700 	strd	r4, r7, [sp]
   1f1a2:	e7e6      	b.n	1f172 <ip_interface_setopt+0xa4>
   1f1a4:	4623      	mov	r3, r4
   1f1a6:	4642      	mov	r2, r8
   1f1a8:	2101      	movs	r1, #1
   1f1aa:	4630      	mov	r0, r6
   1f1ac:	9700      	str	r7, [sp, #0]
   1f1ae:	f7f6 fff1 	bl	16194 <interface_socket_setopt>
   1f1b2:	e799      	b.n	1f0e8 <ip_interface_setopt+0x1a>

0001f1b4 <ip_interface_getopt>:
   1f1b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f1b6:	2901      	cmp	r1, #1
   1f1b8:	4604      	mov	r4, r0
   1f1ba:	4617      	mov	r7, r2
   1f1bc:	461d      	mov	r5, r3
   1f1be:	9e08      	ldr	r6, [sp, #32]
   1f1c0:	d006      	beq.n	1f1d0 <ip_interface_getopt+0x1c>
   1f1c2:	202a      	movs	r0, #42	; 0x2a
   1f1c4:	f7f4 f8c8 	bl	13358 <nrf_modem_os_errno_set>
   1f1c8:	f04f 30ff 	mov.w	r0, #4294967295
   1f1cc:	b003      	add	sp, #12
   1f1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f1d0:	f7f6 ffd0 	bl	16174 <interface_socket_from_handle_get>
   1f1d4:	4602      	mov	r2, r0
   1f1d6:	b908      	cbnz	r0, 1f1dc <ip_interface_getopt+0x28>
   1f1d8:	2009      	movs	r0, #9
   1f1da:	e7f3      	b.n	1f1c4 <ip_interface_getopt+0x10>
   1f1dc:	f1a7 031e 	sub.w	r3, r7, #30
   1f1e0:	2b0a      	cmp	r3, #10
   1f1e2:	d824      	bhi.n	1f22e <ip_interface_getopt+0x7a>
   1f1e4:	e8df f003 	tbb	[pc, r3]
   1f1e8:	23161006 	.word	0x23161006
   1f1ec:	23232323 	.word	0x23232323
   1f1f0:	2323      	.short	0x2323
   1f1f2:	1c          	.byte	0x1c
   1f1f3:	00          	.byte	0x00
   1f1f4:	4623      	mov	r3, r4
   1f1f6:	f248 0101 	movw	r1, #32769	; 0x8001
   1f1fa:	e9cd 5600 	strd	r5, r6, [sp]
   1f1fe:	f44f 7000 	mov.w	r0, #512	; 0x200
   1f202:	f7ff fedf 	bl	1efc4 <getopt_check_and_send_int>
   1f206:	e7e1      	b.n	1f1cc <ip_interface_getopt+0x18>
   1f208:	4623      	mov	r3, r4
   1f20a:	f244 0110 	movw	r1, #16400	; 0x4010
   1f20e:	e9cd 5600 	strd	r5, r6, [sp]
   1f212:	e7f4      	b.n	1f1fe <ip_interface_getopt+0x4a>
   1f214:	4623      	mov	r3, r4
   1f216:	f246 0110 	movw	r1, #24592	; 0x6010
   1f21a:	e9cd 5600 	strd	r5, r6, [sp]
   1f21e:	e7ee      	b.n	1f1fe <ip_interface_getopt+0x4a>
   1f220:	4623      	mov	r3, r4
   1f222:	f241 0104 	movw	r1, #4100	; 0x1004
   1f226:	2008      	movs	r0, #8
   1f228:	e9cd 5600 	strd	r5, r6, [sp]
   1f22c:	e7e9      	b.n	1f202 <ip_interface_getopt+0x4e>
   1f22e:	462b      	mov	r3, r5
   1f230:	463a      	mov	r2, r7
   1f232:	2101      	movs	r1, #1
   1f234:	4620      	mov	r0, r4
   1f236:	9608      	str	r6, [sp, #32]
   1f238:	b003      	add	sp, #12
   1f23a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1f23e:	f7f6 bfdd 	b.w	161fc <interface_socket_getopt>

0001f242 <attach_trigger_condition_verify>:
   1f242:	6903      	ldr	r3, [r0, #16]
   1f244:	2b01      	cmp	r3, #1
   1f246:	d105      	bne.n	1f254 <attach_trigger_condition_verify+0x12>
   1f248:	6800      	ldr	r0, [r0, #0]
   1f24a:	b280      	uxth	r0, r0
   1f24c:	1f43      	subs	r3, r0, #5
   1f24e:	4258      	negs	r0, r3
   1f250:	4158      	adcs	r0, r3
   1f252:	4770      	bx	lr
   1f254:	2b02      	cmp	r3, #2
   1f256:	d109      	bne.n	1f26c <attach_trigger_condition_verify+0x2a>
   1f258:	6803      	ldr	r3, [r0, #0]
   1f25a:	b29b      	uxth	r3, r3
   1f25c:	2b02      	cmp	r3, #2
   1f25e:	d003      	beq.n	1f268 <attach_trigger_condition_verify+0x26>
   1f260:	6803      	ldr	r3, [r0, #0]
   1f262:	b29b      	uxth	r3, r3
   1f264:	2b04      	cmp	r3, #4
   1f266:	d1ef      	bne.n	1f248 <attach_trigger_condition_verify+0x6>
   1f268:	2001      	movs	r0, #1
   1f26a:	4770      	bx	lr
   1f26c:	2000      	movs	r0, #0
   1f26e:	4770      	bx	lr

0001f270 <secure_client_socket>:
   1f270:	f04f 33ff 	mov.w	r3, #4294967295
   1f274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f276:	9301      	str	r3, [sp, #4]
   1f278:	680b      	ldr	r3, [r1, #0]
   1f27a:	4606      	mov	r6, r0
   1f27c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1f280:	600b      	str	r3, [r1, #0]
   1f282:	680b      	ldr	r3, [r1, #0]
   1f284:	460c      	mov	r4, r1
   1f286:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1f28a:	600b      	str	r3, [r1, #0]
   1f28c:	680f      	ldr	r7, [r1, #0]
   1f28e:	463a      	mov	r2, r7
   1f290:	f7f7 ff8e 	bl	171b0 <secure_socket_attach_initiate>
   1f294:	4605      	mov	r5, r0
   1f296:	b950      	cbnz	r0, 1f2ae <secure_client_socket+0x3e>
   1f298:	220c      	movs	r2, #12
   1f29a:	4630      	mov	r0, r6
   1f29c:	4611      	mov	r1, r2
   1f29e:	ab01      	add	r3, sp, #4
   1f2a0:	f7ff fd00 	bl	1eca4 <ip_interface_wait>
   1f2a4:	4605      	mov	r5, r0
   1f2a6:	b128      	cbz	r0, 1f2b4 <secure_client_socket+0x44>
   1f2a8:	2873      	cmp	r0, #115	; 0x73
   1f2aa:	d000      	beq.n	1f2ae <secure_client_socket+0x3e>
   1f2ac:	6027      	str	r7, [r4, #0]
   1f2ae:	4628      	mov	r0, r5
   1f2b0:	b003      	add	sp, #12
   1f2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f2b4:	4630      	mov	r0, r6
   1f2b6:	f7f7 ff69 	bl	1718c <hostname_free>
   1f2ba:	6823      	ldr	r3, [r4, #0]
   1f2bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1f2c0:	6023      	str	r3, [r4, #0]
   1f2c2:	6823      	ldr	r3, [r4, #0]
   1f2c4:	0c1b      	lsrs	r3, r3, #16
   1f2c6:	041b      	lsls	r3, r3, #16
   1f2c8:	f043 030c 	orr.w	r3, r3, #12
   1f2cc:	6023      	str	r3, [r4, #0]
   1f2ce:	6823      	ldr	r3, [r4, #0]
   1f2d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1f2d4:	6023      	str	r3, [r4, #0]
   1f2d6:	6823      	ldr	r3, [r4, #0]
   1f2d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1f2dc:	6023      	str	r3, [r4, #0]
   1f2de:	e7e6      	b.n	1f2ae <secure_client_socket+0x3e>

0001f2e0 <tls_interface_close>:
   1f2e0:	b510      	push	{r4, lr}
   1f2e2:	4604      	mov	r4, r0
   1f2e4:	f7f6 ff46 	bl	16174 <interface_socket_from_handle_get>
   1f2e8:	b138      	cbz	r0, 1f2fa <tls_interface_close+0x1a>
   1f2ea:	4620      	mov	r0, r4
   1f2ec:	f7f7 ff4e 	bl	1718c <hostname_free>
   1f2f0:	4620      	mov	r0, r4
   1f2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f2f6:	f7f7 b895 	b.w	16424 <ip_interface_close>
   1f2fa:	2009      	movs	r0, #9
   1f2fc:	f7f4 f82c 	bl	13358 <nrf_modem_os_errno_set>
   1f300:	f04f 30ff 	mov.w	r0, #4294967295
   1f304:	bd10      	pop	{r4, pc}

0001f306 <packet_free_cb>:
   1f306:	6800      	ldr	r0, [r0, #0]
   1f308:	f7ff ba74 	b.w	1e7f4 <rpc_at_client_data_free>

0001f30c <at_interface_wait>:
   1f30c:	b538      	push	{r3, r4, r5, lr}
   1f30e:	4605      	mov	r5, r0
   1f310:	f7f6 fef2 	bl	160f8 <interface_socket_wait>
   1f314:	4604      	mov	r4, r0
   1f316:	b938      	cbnz	r0, 1f328 <at_interface_wait+0x1c>
   1f318:	4628      	mov	r0, r5
   1f31a:	f7f6 ff2b 	bl	16174 <interface_socket_from_handle_get>
   1f31e:	b118      	cbz	r0, 1f328 <at_interface_wait+0x1c>
   1f320:	6844      	ldr	r4, [r0, #4]
   1f322:	b10c      	cbz	r4, 1f328 <at_interface_wait+0x1c>
   1f324:	2300      	movs	r3, #0
   1f326:	6043      	str	r3, [r0, #4]
   1f328:	4620      	mov	r0, r4
   1f32a:	bd38      	pop	{r3, r4, r5, pc}

0001f32c <send_message>:
   1f32c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1f330:	4606      	mov	r6, r0
   1f332:	4668      	mov	r0, sp
   1f334:	460f      	mov	r7, r1
   1f336:	4692      	mov	sl, r2
   1f338:	4699      	mov	r9, r3
   1f33a:	f7ff fa34 	bl	1e7a6 <rpc_at_client_request_alloc>
   1f33e:	4605      	mov	r5, r0
   1f340:	4630      	mov	r0, r6
   1f342:	f7f6 ff17 	bl	16174 <interface_socket_from_handle_get>
   1f346:	4680      	mov	r8, r0
   1f348:	bb5d      	cbnz	r5, 1f3a2 <send_message+0x76>
   1f34a:	2304      	movs	r3, #4
   1f34c:	9c00      	ldr	r4, [sp, #0]
   1f34e:	7223      	strb	r3, [r4, #8]
   1f350:	7265      	strb	r5, [r4, #9]
   1f352:	72a5      	strb	r5, [r4, #10]
   1f354:	72e5      	strb	r5, [r4, #11]
   1f356:	60e6      	str	r6, [r4, #12]
   1f358:	b127      	cbz	r7, 1f364 <send_message+0x38>
   1f35a:	463a      	mov	r2, r7
   1f35c:	4651      	mov	r1, sl
   1f35e:	6820      	ldr	r0, [r4, #0]
   1f360:	f001 f96b 	bl	2063a <memcpy>
   1f364:	4649      	mov	r1, r9
   1f366:	9800      	ldr	r0, [sp, #0]
   1f368:	f7ff fa2f 	bl	1e7ca <rpc_at_client_request_send>
   1f36c:	b158      	cbz	r0, 1f386 <send_message+0x5a>
   1f36e:	b11f      	cbz	r7, 1f378 <send_message+0x4c>
   1f370:	9b00      	ldr	r3, [sp, #0]
   1f372:	6818      	ldr	r0, [r3, #0]
   1f374:	f7ff fa3e 	bl	1e7f4 <rpc_at_client_data_free>
   1f378:	9800      	ldr	r0, [sp, #0]
   1f37a:	f7ff fa33 	bl	1e7e4 <rpc_at_client_message_free>
   1f37e:	2023      	movs	r0, #35	; 0x23
   1f380:	b002      	add	sp, #8
   1f382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f386:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   1f38a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f38c:	2b00      	cmp	r3, #0
   1f38e:	bf08      	it	eq
   1f390:	f04f 33ff 	moveq.w	r3, #4294967295
   1f394:	4611      	mov	r1, r2
   1f396:	9301      	str	r3, [sp, #4]
   1f398:	4630      	mov	r0, r6
   1f39a:	ab01      	add	r3, sp, #4
   1f39c:	f7ff ffb6 	bl	1f30c <at_interface_wait>
   1f3a0:	e7ee      	b.n	1f380 <send_message+0x54>
   1f3a2:	200c      	movs	r0, #12
   1f3a4:	e7ec      	b.n	1f380 <send_message+0x54>

0001f3a6 <at_interface_write>:
   1f3a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f3aa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1f3ac:	4607      	mov	r7, r0
   1f3ae:	4688      	mov	r8, r1
   1f3b0:	4615      	mov	r5, r2
   1f3b2:	4699      	mov	r9, r3
   1f3b4:	b146      	cbz	r6, 1f3c8 <at_interface_write+0x22>
   1f3b6:	2038      	movs	r0, #56	; 0x38
   1f3b8:	f7f3 ffce 	bl	13358 <nrf_modem_os_errno_set>
   1f3bc:	f04f 35ff 	mov.w	r5, #4294967295
   1f3c0:	4628      	mov	r0, r5
   1f3c2:	b003      	add	sp, #12
   1f3c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f3c8:	f7f6 fed4 	bl	16174 <interface_socket_from_handle_get>
   1f3cc:	4604      	mov	r4, r0
   1f3ce:	f1b9 0f00 	cmp.w	r9, #0
   1f3d2:	d124      	bne.n	1f41e <at_interface_write+0x78>
   1f3d4:	b908      	cbnz	r0, 1f3da <at_interface_write+0x34>
   1f3d6:	2016      	movs	r0, #22
   1f3d8:	e7ee      	b.n	1f3b8 <at_interface_write+0x12>
   1f3da:	2601      	movs	r6, #1
   1f3dc:	6822      	ldr	r2, [r4, #0]
   1f3de:	0393      	lsls	r3, r2, #14
   1f3e0:	d518      	bpl.n	1f414 <at_interface_write+0x6e>
   1f3e2:	b1f6      	cbz	r6, 1f422 <at_interface_write+0x7c>
   1f3e4:	6823      	ldr	r3, [r4, #0]
   1f3e6:	4642      	mov	r2, r8
   1f3e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1f3ec:	6023      	str	r3, [r4, #0]
   1f3ee:	6823      	ldr	r3, [r4, #0]
   1f3f0:	4629      	mov	r1, r5
   1f3f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1f3f6:	6023      	str	r3, [r4, #0]
   1f3f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1f3fc:	4638      	mov	r0, r7
   1f3fe:	9300      	str	r3, [sp, #0]
   1f400:	2301      	movs	r3, #1
   1f402:	f7ff ff93 	bl	1f32c <send_message>
   1f406:	2800      	cmp	r0, #0
   1f408:	d0da      	beq.n	1f3c0 <at_interface_write+0x1a>
   1f40a:	6823      	ldr	r3, [r4, #0]
   1f40c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1f410:	6023      	str	r3, [r4, #0]
   1f412:	e7d1      	b.n	1f3b8 <at_interface_write+0x12>
   1f414:	2e00      	cmp	r6, #0
   1f416:	bf14      	ite	ne
   1f418:	2016      	movne	r0, #22
   1f41a:	202d      	moveq	r0, #45	; 0x2d
   1f41c:	e7cc      	b.n	1f3b8 <at_interface_write+0x12>
   1f41e:	2800      	cmp	r0, #0
   1f420:	d1dc      	bne.n	1f3dc <at_interface_write+0x36>
   1f422:	202d      	movs	r0, #45	; 0x2d
   1f424:	e7c8      	b.n	1f3b8 <at_interface_write+0x12>

0001f426 <at_interface_close>:
   1f426:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f428:	4606      	mov	r6, r0
   1f42a:	f7f6 fea3 	bl	16174 <interface_socket_from_handle_get>
   1f42e:	4604      	mov	r4, r0
   1f430:	b308      	cbz	r0, 1f476 <at_interface_close+0x50>
   1f432:	230d      	movs	r3, #13
   1f434:	6807      	ldr	r7, [r0, #0]
   1f436:	6003      	str	r3, [r0, #0]
   1f438:	6803      	ldr	r3, [r0, #0]
   1f43a:	2200      	movs	r2, #0
   1f43c:	039b      	lsls	r3, r3, #14
   1f43e:	bf48      	it	mi
   1f440:	6803      	ldrmi	r3, [r0, #0]
   1f442:	4611      	mov	r1, r2
   1f444:	bf44      	itt	mi
   1f446:	f423 3300 	bicmi.w	r3, r3, #131072	; 0x20000
   1f44a:	6003      	strmi	r3, [r0, #0]
   1f44c:	230e      	movs	r3, #14
   1f44e:	4630      	mov	r0, r6
   1f450:	9300      	str	r3, [sp, #0]
   1f452:	2306      	movs	r3, #6
   1f454:	f7ff ff6a 	bl	1f32c <send_message>
   1f458:	4605      	mov	r5, r0
   1f45a:	b130      	cbz	r0, 1f46a <at_interface_close+0x44>
   1f45c:	6027      	str	r7, [r4, #0]
   1f45e:	4628      	mov	r0, r5
   1f460:	f7f3 ff7a 	bl	13358 <nrf_modem_os_errno_set>
   1f464:	f04f 35ff 	mov.w	r5, #4294967295
   1f468:	e002      	b.n	1f470 <at_interface_close+0x4a>
   1f46a:	4630      	mov	r0, r6
   1f46c:	f7f6 fe1e 	bl	160ac <interface_socket_free>
   1f470:	4628      	mov	r0, r5
   1f472:	b003      	add	sp, #12
   1f474:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f476:	2516      	movs	r5, #22
   1f478:	e7f1      	b.n	1f45e <at_interface_close+0x38>

0001f47a <at_interface_read>:
   1f47a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f47e:	b087      	sub	sp, #28
   1f480:	4680      	mov	r8, r0
   1f482:	460e      	mov	r6, r1
   1f484:	4614      	mov	r4, r2
   1f486:	461f      	mov	r7, r3
   1f488:	f7f6 fe74 	bl	16174 <interface_socket_from_handle_get>
   1f48c:	4605      	mov	r5, r0
   1f48e:	2800      	cmp	r0, #0
   1f490:	d045      	beq.n	1f51e <at_interface_read+0xa4>
   1f492:	2300      	movs	r3, #0
   1f494:	e9cd 6402 	strd	r6, r4, [sp, #8]
   1f498:	9304      	str	r3, [sp, #16]
   1f49a:	b117      	cbz	r7, 1f4a2 <at_interface_read+0x28>
   1f49c:	f017 0f2a 	tst.w	r7, #42	; 0x2a
   1f4a0:	d022      	beq.n	1f4e8 <at_interface_read+0x6e>
   1f4a2:	2400      	movs	r4, #0
   1f4a4:	9305      	str	r3, [sp, #20]
   1f4a6:	f007 0902 	and.w	r9, r7, #2
   1f4aa:	682b      	ldr	r3, [r5, #0]
   1f4ac:	69e8      	ldr	r0, [r5, #28]
   1f4ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1f4b2:	602b      	str	r3, [r5, #0]
   1f4b4:	6803      	ldr	r3, [r0, #0]
   1f4b6:	463a      	mov	r2, r7
   1f4b8:	689b      	ldr	r3, [r3, #8]
   1f4ba:	a902      	add	r1, sp, #8
   1f4bc:	4798      	blx	r3
   1f4be:	1e06      	subs	r6, r0, #0
   1f4c0:	da1b      	bge.n	1f4fa <at_interface_read+0x80>
   1f4c2:	f1b9 0f00 	cmp.w	r9, #0
   1f4c6:	d113      	bne.n	1f4f0 <at_interface_read+0x76>
   1f4c8:	b9bc      	cbnz	r4, 1f4fa <at_interface_read+0x80>
   1f4ca:	6a2b      	ldr	r3, [r5, #32]
   1f4cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1f4d0:	2b00      	cmp	r3, #0
   1f4d2:	bf08      	it	eq
   1f4d4:	f04f 33ff 	moveq.w	r3, #4294967295
   1f4d8:	4611      	mov	r1, r2
   1f4da:	9301      	str	r3, [sp, #4]
   1f4dc:	4640      	mov	r0, r8
   1f4de:	ab01      	add	r3, sp, #4
   1f4e0:	f7ff ff14 	bl	1f30c <at_interface_wait>
   1f4e4:	4604      	mov	r4, r0
   1f4e6:	e7e0      	b.n	1f4aa <at_interface_read+0x30>
   1f4e8:	242d      	movs	r4, #45	; 0x2d
   1f4ea:	f04f 36ff 	mov.w	r6, #4294967295
   1f4ee:	e00f      	b.n	1f510 <at_interface_read+0x96>
   1f4f0:	1c73      	adds	r3, r6, #1
   1f4f2:	d102      	bne.n	1f4fa <at_interface_read+0x80>
   1f4f4:	2c00      	cmp	r4, #0
   1f4f6:	bf08      	it	eq
   1f4f8:	2423      	moveq	r4, #35	; 0x23
   1f4fa:	69e8      	ldr	r0, [r5, #28]
   1f4fc:	6803      	ldr	r3, [r0, #0]
   1f4fe:	68db      	ldr	r3, [r3, #12]
   1f500:	4798      	blx	r3
   1f502:	3001      	adds	r0, #1
   1f504:	bf1e      	ittt	ne
   1f506:	682b      	ldrne	r3, [r5, #0]
   1f508:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
   1f50c:	602b      	strne	r3, [r5, #0]
   1f50e:	b114      	cbz	r4, 1f516 <at_interface_read+0x9c>
   1f510:	4620      	mov	r0, r4
   1f512:	f7f3 ff21 	bl	13358 <nrf_modem_os_errno_set>
   1f516:	4630      	mov	r0, r6
   1f518:	b007      	add	sp, #28
   1f51a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f51e:	2416      	movs	r4, #22
   1f520:	e7e3      	b.n	1f4ea <at_interface_read+0x70>

0001f522 <at_interface_getopt>:
   1f522:	f7f6 be6b 	b.w	161fc <interface_socket_getopt>

0001f526 <at_interface_setopt>:
   1f526:	f7f6 be35 	b.w	16194 <interface_socket_setopt>

0001f52a <rpc_at_event_handler>:
   1f52a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1f52c:	4606      	mov	r6, r0
   1f52e:	68c0      	ldr	r0, [r0, #12]
   1f530:	460d      	mov	r5, r1
   1f532:	f7f6 fe1f 	bl	16174 <interface_socket_from_handle_get>
   1f536:	4604      	mov	r4, r0
   1f538:	2800      	cmp	r0, #0
   1f53a:	d03a      	beq.n	1f5b2 <rpc_at_event_handler+0x88>
   1f53c:	6803      	ldr	r3, [r0, #0]
   1f53e:	b29b      	uxth	r3, r3
   1f540:	2b01      	cmp	r3, #1
   1f542:	d104      	bne.n	1f54e <rpc_at_event_handler+0x24>
   1f544:	2d02      	cmp	r5, #2
   1f546:	d11c      	bne.n	1f582 <rpc_at_event_handler+0x58>
   1f548:	6005      	str	r5, [r0, #0]
   1f54a:	2000      	movs	r0, #0
   1f54c:	e02b      	b.n	1f5a6 <rpc_at_event_handler+0x7c>
   1f54e:	6803      	ldr	r3, [r0, #0]
   1f550:	b29b      	uxth	r3, r3
   1f552:	2b0d      	cmp	r3, #13
   1f554:	d104      	bne.n	1f560 <rpc_at_event_handler+0x36>
   1f556:	2d02      	cmp	r5, #2
   1f558:	d113      	bne.n	1f582 <rpc_at_event_handler+0x58>
   1f55a:	230e      	movs	r3, #14
   1f55c:	6023      	str	r3, [r4, #0]
   1f55e:	e7f4      	b.n	1f54a <rpc_at_event_handler+0x20>
   1f560:	6803      	ldr	r3, [r0, #0]
   1f562:	b29b      	uxth	r3, r3
   1f564:	2b02      	cmp	r3, #2
   1f566:	d10c      	bne.n	1f582 <rpc_at_event_handler+0x58>
   1f568:	6803      	ldr	r3, [r0, #0]
   1f56a:	029b      	lsls	r3, r3, #10
   1f56c:	d509      	bpl.n	1f582 <rpc_at_event_handler+0x58>
   1f56e:	2d02      	cmp	r5, #2
   1f570:	d107      	bne.n	1f582 <rpc_at_event_handler+0x58>
   1f572:	6803      	ldr	r3, [r0, #0]
   1f574:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1f578:	6003      	str	r3, [r0, #0]
   1f57a:	6803      	ldr	r3, [r0, #0]
   1f57c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1f580:	e7ec      	b.n	1f55c <rpc_at_event_handler+0x32>
   1f582:	3d03      	subs	r5, #3
   1f584:	2d01      	cmp	r5, #1
   1f586:	d8e0      	bhi.n	1f54a <rpc_at_event_handler+0x20>
   1f588:	2500      	movs	r5, #0
   1f58a:	6833      	ldr	r3, [r6, #0]
   1f58c:	69e0      	ldr	r0, [r4, #28]
   1f58e:	9300      	str	r3, [sp, #0]
   1f590:	6873      	ldr	r3, [r6, #4]
   1f592:	4669      	mov	r1, sp
   1f594:	9301      	str	r3, [sp, #4]
   1f596:	6803      	ldr	r3, [r0, #0]
   1f598:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1f59c:	685b      	ldr	r3, [r3, #4]
   1f59e:	4798      	blx	r3
   1f5a0:	3001      	adds	r0, #1
   1f5a2:	d102      	bne.n	1f5aa <rpc_at_event_handler+0x80>
   1f5a4:	2002      	movs	r0, #2
   1f5a6:	b004      	add	sp, #16
   1f5a8:	bd70      	pop	{r4, r5, r6, pc}
   1f5aa:	6823      	ldr	r3, [r4, #0]
   1f5ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1f5b0:	e7d4      	b.n	1f55c <rpc_at_event_handler+0x32>
   1f5b2:	6830      	ldr	r0, [r6, #0]
   1f5b4:	2800      	cmp	r0, #0
   1f5b6:	d0c8      	beq.n	1f54a <rpc_at_event_handler+0x20>
   1f5b8:	f7ff f91c 	bl	1e7f4 <rpc_at_client_data_free>
   1f5bc:	e7c5      	b.n	1f54a <rpc_at_event_handler+0x20>

0001f5be <packet_free_cb>:
   1f5be:	b510      	push	{r4, lr}
   1f5c0:	4604      	mov	r4, r0
   1f5c2:	b118      	cbz	r0, 1f5cc <packet_free_cb+0xe>
   1f5c4:	6800      	ldr	r0, [r0, #0]
   1f5c6:	b108      	cbz	r0, 1f5cc <packet_free_cb+0xe>
   1f5c8:	f7ff f9c0 	bl	1e94c <rpc_gnss_client_data_free>
   1f5cc:	68a0      	ldr	r0, [r4, #8]
   1f5ce:	b118      	cbz	r0, 1f5d8 <packet_free_cb+0x1a>
   1f5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f5d4:	f7f4 b864 	b.w	136a0 <nrf_modem_os_free>
   1f5d8:	bd10      	pop	{r4, pc}

0001f5da <spaces_remove>:
   1f5da:	2200      	movs	r2, #0
   1f5dc:	b510      	push	{r4, lr}
   1f5de:	1e44      	subs	r4, r0, #1
   1f5e0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1f5e4:	1881      	adds	r1, r0, r2
   1f5e6:	b90b      	cbnz	r3, 1f5ec <spaces_remove+0x12>
   1f5e8:	700b      	strb	r3, [r1, #0]
   1f5ea:	bd10      	pop	{r4, pc}
   1f5ec:	2b20      	cmp	r3, #32
   1f5ee:	bf1c      	itt	ne
   1f5f0:	700b      	strbne	r3, [r1, #0]
   1f5f2:	3201      	addne	r2, #1
   1f5f4:	e7f4      	b.n	1f5e0 <spaces_remove+0x6>

0001f5f6 <ok_rsp_parser>:
   1f5f6:	2000      	movs	r0, #0
   1f5f8:	4770      	bx	lr

0001f5fa <context_query_parser>:
   1f5fa:	f06f 0004 	mvn.w	r0, #4
   1f5fe:	4770      	bx	lr

0001f600 <null_handler_init>:
   1f600:	2000      	movs	r0, #0
   1f602:	4770      	bx	lr

0001f604 <null_handler_put>:
   1f604:	b510      	push	{r4, lr}
   1f606:	460c      	mov	r4, r1
   1f608:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1f60c:	4620      	mov	r0, r4
   1f60e:	4798      	blx	r3
   1f610:	6860      	ldr	r0, [r4, #4]
   1f612:	bd10      	pop	{r4, pc}

0001f614 <null_handler_get>:
   1f614:	f04f 30ff 	mov.w	r0, #4294967295
   1f618:	4770      	bx	lr

0001f61a <null_handler_available>:
   1f61a:	f04f 30ff 	mov.w	r0, #4294967295
   1f61e:	4770      	bx	lr

0001f620 <null_handler_flush>:
   1f620:	2000      	movs	r0, #0
   1f622:	4770      	bx	lr

0001f624 <null_handler_free>:
   1f624:	4770      	bx	lr

0001f626 <stream_handler_free_packet>:
   1f626:	b530      	push	{r4, r5, lr}
   1f628:	4605      	mov	r5, r0
   1f62a:	b085      	sub	sp, #20
   1f62c:	68c0      	ldr	r0, [r0, #12]
   1f62e:	f000 faf7 	bl	1fc20 <linked_list_pop>
   1f632:	4604      	mov	r4, r0
   1f634:	b170      	cbz	r0, 1f654 <stream_handler_free_packet+0x2e>
   1f636:	6843      	ldr	r3, [r0, #4]
   1f638:	9300      	str	r3, [sp, #0]
   1f63a:	6883      	ldr	r3, [r0, #8]
   1f63c:	9301      	str	r3, [sp, #4]
   1f63e:	6903      	ldr	r3, [r0, #16]
   1f640:	9302      	str	r3, [sp, #8]
   1f642:	68c3      	ldr	r3, [r0, #12]
   1f644:	4668      	mov	r0, sp
   1f646:	9303      	str	r3, [sp, #12]
   1f648:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1f64c:	4798      	blx	r3
   1f64e:	4620      	mov	r0, r4
   1f650:	f7f4 f826 	bl	136a0 <nrf_modem_os_free>
   1f654:	b005      	add	sp, #20
   1f656:	bd30      	pop	{r4, r5, pc}

0001f658 <stream_handler_init>:
   1f658:	b510      	push	{r4, lr}
   1f65a:	4604      	mov	r4, r0
   1f65c:	200c      	movs	r0, #12
   1f65e:	f7f4 f80f 	bl	13680 <nrf_modem_os_alloc>
   1f662:	60e0      	str	r0, [r4, #12]
   1f664:	b128      	cbz	r0, 1f672 <stream_handler_init+0x1a>
   1f666:	2300      	movs	r3, #0
   1f668:	6123      	str	r3, [r4, #16]
   1f66a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f66e:	f000 babb 	b.w	1fbe8 <linked_list_init>
   1f672:	200c      	movs	r0, #12
   1f674:	bd10      	pop	{r4, pc}

0001f676 <stream_handler_put>:
   1f676:	b570      	push	{r4, r5, r6, lr}
   1f678:	4606      	mov	r6, r0
   1f67a:	2014      	movs	r0, #20
   1f67c:	460d      	mov	r5, r1
   1f67e:	f7f3 ffff 	bl	13680 <nrf_modem_os_alloc>
   1f682:	4604      	mov	r4, r0
   1f684:	b178      	cbz	r0, 1f6a6 <stream_handler_put+0x30>
   1f686:	682b      	ldr	r3, [r5, #0]
   1f688:	4601      	mov	r1, r0
   1f68a:	6043      	str	r3, [r0, #4]
   1f68c:	686b      	ldr	r3, [r5, #4]
   1f68e:	6083      	str	r3, [r0, #8]
   1f690:	68eb      	ldr	r3, [r5, #12]
   1f692:	60c3      	str	r3, [r0, #12]
   1f694:	68ab      	ldr	r3, [r5, #8]
   1f696:	6103      	str	r3, [r0, #16]
   1f698:	68f0      	ldr	r0, [r6, #12]
   1f69a:	f000 faae 	bl	1fbfa <linked_list_push>
   1f69e:	b128      	cbz	r0, 1f6ac <stream_handler_put+0x36>
   1f6a0:	4620      	mov	r0, r4
   1f6a2:	f7f3 fffd 	bl	136a0 <nrf_modem_os_free>
   1f6a6:	f04f 30ff 	mov.w	r0, #4294967295
   1f6aa:	e000      	b.n	1f6ae <stream_handler_put+0x38>
   1f6ac:	6868      	ldr	r0, [r5, #4]
   1f6ae:	bd70      	pop	{r4, r5, r6, pc}

0001f6b0 <stream_handler_get>:
   1f6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f6b4:	4606      	mov	r6, r0
   1f6b6:	b085      	sub	sp, #20
   1f6b8:	68c0      	ldr	r0, [r0, #12]
   1f6ba:	468a      	mov	sl, r1
   1f6bc:	4617      	mov	r7, r2
   1f6be:	f000 fab9 	bl	1fc34 <linked_list_peek>
   1f6c2:	4604      	mov	r4, r0
   1f6c4:	2800      	cmp	r0, #0
   1f6c6:	d055      	beq.n	1f774 <stream_handler_get+0xc4>
   1f6c8:	f8da 0008 	ldr.w	r0, [sl, #8]
   1f6cc:	2800      	cmp	r0, #0
   1f6ce:	d049      	beq.n	1f764 <stream_handler_get+0xb4>
   1f6d0:	6921      	ldr	r1, [r4, #16]
   1f6d2:	2900      	cmp	r1, #0
   1f6d4:	d046      	beq.n	1f764 <stream_handler_get+0xb4>
   1f6d6:	68e2      	ldr	r2, [r4, #12]
   1f6d8:	2a00      	cmp	r2, #0
   1f6da:	d043      	beq.n	1f764 <stream_handler_get+0xb4>
   1f6dc:	f8da 500c 	ldr.w	r5, [sl, #12]
   1f6e0:	42aa      	cmp	r2, r5
   1f6e2:	bf28      	it	cs
   1f6e4:	462a      	movcs	r2, r5
   1f6e6:	f8ca 200c 	str.w	r2, [sl, #12]
   1f6ea:	f000 ffa6 	bl	2063a <memcpy>
   1f6ee:	2500      	movs	r5, #0
   1f6f0:	f8da 3004 	ldr.w	r3, [sl, #4]
   1f6f4:	6931      	ldr	r1, [r6, #16]
   1f6f6:	9301      	str	r3, [sp, #4]
   1f6f8:	f8da 3000 	ldr.w	r3, [sl]
   1f6fc:	9302      	str	r3, [sp, #8]
   1f6fe:	f007 0320 	and.w	r3, r7, #32
   1f702:	9303      	str	r3, [sp, #12]
   1f704:	f007 0708 	and.w	r7, r7, #8
   1f708:	9b01      	ldr	r3, [sp, #4]
   1f70a:	42ab      	cmp	r3, r5
   1f70c:	d924      	bls.n	1f758 <stream_handler_get+0xa8>
   1f70e:	68a2      	ldr	r2, [r4, #8]
   1f710:	9b01      	ldr	r3, [sp, #4]
   1f712:	eba2 0801 	sub.w	r8, r2, r1
   1f716:	eba3 0b05 	sub.w	fp, r3, r5
   1f71a:	f8da 2000 	ldr.w	r2, [sl]
   1f71e:	45d8      	cmp	r8, fp
   1f720:	46c1      	mov	r9, r8
   1f722:	bf28      	it	cs
   1f724:	46d9      	movcs	r9, fp
   1f726:	b142      	cbz	r2, 1f73a <stream_handler_get+0x8a>
   1f728:	9b03      	ldr	r3, [sp, #12]
   1f72a:	b933      	cbnz	r3, 1f73a <stream_handler_get+0x8a>
   1f72c:	6860      	ldr	r0, [r4, #4]
   1f72e:	9b02      	ldr	r3, [sp, #8]
   1f730:	4401      	add	r1, r0
   1f732:	464a      	mov	r2, r9
   1f734:	1958      	adds	r0, r3, r5
   1f736:	f000 ff80 	bl	2063a <memcpy>
   1f73a:	4620      	mov	r0, r4
   1f73c:	f000 fa82 	bl	1fc44 <linked_list_get_next>
   1f740:	4604      	mov	r4, r0
   1f742:	b92f      	cbnz	r7, 1f750 <stream_handler_get+0xa0>
   1f744:	45d8      	cmp	r8, fp
   1f746:	d811      	bhi.n	1f76c <stream_handler_get+0xbc>
   1f748:	4630      	mov	r0, r6
   1f74a:	f7ff ff6c 	bl	1f626 <stream_handler_free_packet>
   1f74e:	6137      	str	r7, [r6, #16]
   1f750:	2100      	movs	r1, #0
   1f752:	444d      	add	r5, r9
   1f754:	2c00      	cmp	r4, #0
   1f756:	d1d7      	bne.n	1f708 <stream_handler_get+0x58>
   1f758:	4628      	mov	r0, r5
   1f75a:	f8ca 5004 	str.w	r5, [sl, #4]
   1f75e:	b005      	add	sp, #20
   1f760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f764:	2200      	movs	r2, #0
   1f766:	f8ca 200c 	str.w	r2, [sl, #12]
   1f76a:	e7c0      	b.n	1f6ee <stream_handler_get+0x3e>
   1f76c:	6932      	ldr	r2, [r6, #16]
   1f76e:	444a      	add	r2, r9
   1f770:	6132      	str	r2, [r6, #16]
   1f772:	e7ed      	b.n	1f750 <stream_handler_get+0xa0>
   1f774:	f04f 30ff 	mov.w	r0, #4294967295
   1f778:	e7f1      	b.n	1f75e <stream_handler_get+0xae>

0001f77a <stream_handler_available>:
   1f77a:	b510      	push	{r4, lr}
   1f77c:	4604      	mov	r4, r0
   1f77e:	68c0      	ldr	r0, [r0, #12]
   1f780:	f000 fa58 	bl	1fc34 <linked_list_peek>
   1f784:	b150      	cbz	r0, 1f79c <stream_handler_available+0x22>
   1f786:	6924      	ldr	r4, [r4, #16]
   1f788:	4264      	negs	r4, r4
   1f78a:	6883      	ldr	r3, [r0, #8]
   1f78c:	441c      	add	r4, r3
   1f78e:	f000 fa59 	bl	1fc44 <linked_list_get_next>
   1f792:	2800      	cmp	r0, #0
   1f794:	d1f9      	bne.n	1f78a <stream_handler_available+0x10>
   1f796:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1f79a:	bd10      	pop	{r4, pc}
   1f79c:	f04f 30ff 	mov.w	r0, #4294967295
   1f7a0:	e7fb      	b.n	1f79a <stream_handler_available+0x20>

0001f7a2 <stream_handler_flush>:
   1f7a2:	68c3      	ldr	r3, [r0, #12]
   1f7a4:	b510      	push	{r4, lr}
   1f7a6:	4604      	mov	r4, r0
   1f7a8:	b923      	cbnz	r3, 1f7b4 <stream_handler_flush+0x12>
   1f7aa:	2016      	movs	r0, #22
   1f7ac:	e007      	b.n	1f7be <stream_handler_flush+0x1c>
   1f7ae:	4620      	mov	r0, r4
   1f7b0:	f7ff ff39 	bl	1f626 <stream_handler_free_packet>
   1f7b4:	68e0      	ldr	r0, [r4, #12]
   1f7b6:	f000 fa43 	bl	1fc40 <linked_list_size_get>
   1f7ba:	2800      	cmp	r0, #0
   1f7bc:	d1f7      	bne.n	1f7ae <stream_handler_flush+0xc>
   1f7be:	bd10      	pop	{r4, pc}

0001f7c0 <stream_handler_free>:
   1f7c0:	68c3      	ldr	r3, [r0, #12]
   1f7c2:	b510      	push	{r4, lr}
   1f7c4:	4604      	mov	r4, r0
   1f7c6:	b133      	cbz	r3, 1f7d6 <stream_handler_free+0x16>
   1f7c8:	f7ff ffeb 	bl	1f7a2 <stream_handler_flush>
   1f7cc:	68e0      	ldr	r0, [r4, #12]
   1f7ce:	f7f3 ff67 	bl	136a0 <nrf_modem_os_free>
   1f7d2:	2300      	movs	r3, #0
   1f7d4:	60e3      	str	r3, [r4, #12]
   1f7d6:	bd10      	pop	{r4, pc}

0001f7d8 <datagram_handler_free_packet>:
   1f7d8:	b530      	push	{r4, r5, lr}
   1f7da:	4605      	mov	r5, r0
   1f7dc:	b085      	sub	sp, #20
   1f7de:	68c0      	ldr	r0, [r0, #12]
   1f7e0:	f000 fa1e 	bl	1fc20 <linked_list_pop>
   1f7e4:	4604      	mov	r4, r0
   1f7e6:	b170      	cbz	r0, 1f806 <datagram_handler_free_packet+0x2e>
   1f7e8:	6843      	ldr	r3, [r0, #4]
   1f7ea:	9300      	str	r3, [sp, #0]
   1f7ec:	6883      	ldr	r3, [r0, #8]
   1f7ee:	9301      	str	r3, [sp, #4]
   1f7f0:	6903      	ldr	r3, [r0, #16]
   1f7f2:	9302      	str	r3, [sp, #8]
   1f7f4:	68c3      	ldr	r3, [r0, #12]
   1f7f6:	4668      	mov	r0, sp
   1f7f8:	9303      	str	r3, [sp, #12]
   1f7fa:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1f7fe:	4798      	blx	r3
   1f800:	4620      	mov	r0, r4
   1f802:	f7f3 ff4d 	bl	136a0 <nrf_modem_os_free>
   1f806:	b005      	add	sp, #20
   1f808:	bd30      	pop	{r4, r5, pc}

0001f80a <datagram_handler_init>:
   1f80a:	b510      	push	{r4, lr}
   1f80c:	4604      	mov	r4, r0
   1f80e:	200c      	movs	r0, #12
   1f810:	f7f3 ff36 	bl	13680 <nrf_modem_os_alloc>
   1f814:	60e0      	str	r0, [r4, #12]
   1f816:	b118      	cbz	r0, 1f820 <datagram_handler_init+0x16>
   1f818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f81c:	f000 b9e4 	b.w	1fbe8 <linked_list_init>
   1f820:	200c      	movs	r0, #12
   1f822:	bd10      	pop	{r4, pc}

0001f824 <datagram_handler_put>:
   1f824:	b570      	push	{r4, r5, r6, lr}
   1f826:	4606      	mov	r6, r0
   1f828:	2014      	movs	r0, #20
   1f82a:	460d      	mov	r5, r1
   1f82c:	f7f3 ff28 	bl	13680 <nrf_modem_os_alloc>
   1f830:	4604      	mov	r4, r0
   1f832:	b178      	cbz	r0, 1f854 <datagram_handler_put+0x30>
   1f834:	682b      	ldr	r3, [r5, #0]
   1f836:	4601      	mov	r1, r0
   1f838:	6043      	str	r3, [r0, #4]
   1f83a:	686b      	ldr	r3, [r5, #4]
   1f83c:	6083      	str	r3, [r0, #8]
   1f83e:	68eb      	ldr	r3, [r5, #12]
   1f840:	60c3      	str	r3, [r0, #12]
   1f842:	68ab      	ldr	r3, [r5, #8]
   1f844:	6103      	str	r3, [r0, #16]
   1f846:	68f0      	ldr	r0, [r6, #12]
   1f848:	f000 f9d7 	bl	1fbfa <linked_list_push>
   1f84c:	b128      	cbz	r0, 1f85a <datagram_handler_put+0x36>
   1f84e:	4620      	mov	r0, r4
   1f850:	f7f3 ff26 	bl	136a0 <nrf_modem_os_free>
   1f854:	f04f 30ff 	mov.w	r0, #4294967295
   1f858:	e000      	b.n	1f85c <datagram_handler_put+0x38>
   1f85a:	6868      	ldr	r0, [r5, #4]
   1f85c:	bd70      	pop	{r4, r5, r6, pc}

0001f85e <datagram_handler_get>:
   1f85e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f860:	4607      	mov	r7, r0
   1f862:	68c0      	ldr	r0, [r0, #12]
   1f864:	460c      	mov	r4, r1
   1f866:	4616      	mov	r6, r2
   1f868:	f000 f9e4 	bl	1fc34 <linked_list_peek>
   1f86c:	4605      	mov	r5, r0
   1f86e:	b328      	cbz	r0, 1f8bc <datagram_handler_get+0x5e>
   1f870:	6882      	ldr	r2, [r0, #8]
   1f872:	6863      	ldr	r3, [r4, #4]
   1f874:	6820      	ldr	r0, [r4, #0]
   1f876:	429a      	cmp	r2, r3
   1f878:	bf28      	it	cs
   1f87a:	461a      	movcs	r2, r3
   1f87c:	6062      	str	r2, [r4, #4]
   1f87e:	b110      	cbz	r0, 1f886 <datagram_handler_get+0x28>
   1f880:	6869      	ldr	r1, [r5, #4]
   1f882:	f000 feda 	bl	2063a <memcpy>
   1f886:	68a0      	ldr	r0, [r4, #8]
   1f888:	b1a8      	cbz	r0, 1f8b6 <datagram_handler_get+0x58>
   1f88a:	6929      	ldr	r1, [r5, #16]
   1f88c:	b199      	cbz	r1, 1f8b6 <datagram_handler_get+0x58>
   1f88e:	68eb      	ldr	r3, [r5, #12]
   1f890:	b18b      	cbz	r3, 1f8b6 <datagram_handler_get+0x58>
   1f892:	68e2      	ldr	r2, [r4, #12]
   1f894:	429a      	cmp	r2, r3
   1f896:	bf28      	it	cs
   1f898:	461a      	movcs	r2, r3
   1f89a:	60e2      	str	r2, [r4, #12]
   1f89c:	f000 fecd 	bl	2063a <memcpy>
   1f8a0:	0732      	lsls	r2, r6, #28
   1f8a2:	68ad      	ldr	r5, [r5, #8]
   1f8a4:	d402      	bmi.n	1f8ac <datagram_handler_get+0x4e>
   1f8a6:	4638      	mov	r0, r7
   1f8a8:	f7ff ff96 	bl	1f7d8 <datagram_handler_free_packet>
   1f8ac:	06b3      	lsls	r3, r6, #26
   1f8ae:	bf4c      	ite	mi
   1f8b0:	4628      	movmi	r0, r5
   1f8b2:	6860      	ldrpl	r0, [r4, #4]
   1f8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f8b6:	2300      	movs	r3, #0
   1f8b8:	60e3      	str	r3, [r4, #12]
   1f8ba:	e7f1      	b.n	1f8a0 <datagram_handler_get+0x42>
   1f8bc:	f04f 30ff 	mov.w	r0, #4294967295
   1f8c0:	e7f8      	b.n	1f8b4 <datagram_handler_get+0x56>

0001f8c2 <datagram_handler_available>:
   1f8c2:	b508      	push	{r3, lr}
   1f8c4:	68c0      	ldr	r0, [r0, #12]
   1f8c6:	f000 f9b5 	bl	1fc34 <linked_list_peek>
   1f8ca:	b108      	cbz	r0, 1f8d0 <datagram_handler_available+0xe>
   1f8cc:	6880      	ldr	r0, [r0, #8]
   1f8ce:	bd08      	pop	{r3, pc}
   1f8d0:	f04f 30ff 	mov.w	r0, #4294967295
   1f8d4:	e7fb      	b.n	1f8ce <datagram_handler_available+0xc>

0001f8d6 <datagram_handler_flush>:
   1f8d6:	68c3      	ldr	r3, [r0, #12]
   1f8d8:	b510      	push	{r4, lr}
   1f8da:	4604      	mov	r4, r0
   1f8dc:	b923      	cbnz	r3, 1f8e8 <datagram_handler_flush+0x12>
   1f8de:	2016      	movs	r0, #22
   1f8e0:	e007      	b.n	1f8f2 <datagram_handler_flush+0x1c>
   1f8e2:	4620      	mov	r0, r4
   1f8e4:	f7ff ff78 	bl	1f7d8 <datagram_handler_free_packet>
   1f8e8:	68e0      	ldr	r0, [r4, #12]
   1f8ea:	f000 f9a9 	bl	1fc40 <linked_list_size_get>
   1f8ee:	2800      	cmp	r0, #0
   1f8f0:	d1f7      	bne.n	1f8e2 <datagram_handler_flush+0xc>
   1f8f2:	bd10      	pop	{r4, pc}

0001f8f4 <datagram_handler_free>:
   1f8f4:	68c3      	ldr	r3, [r0, #12]
   1f8f6:	b510      	push	{r4, lr}
   1f8f8:	4604      	mov	r4, r0
   1f8fa:	b133      	cbz	r3, 1f90a <datagram_handler_free+0x16>
   1f8fc:	f7ff ffeb 	bl	1f8d6 <datagram_handler_flush>
   1f900:	68e0      	ldr	r0, [r4, #12]
   1f902:	f7f3 fecd 	bl	136a0 <nrf_modem_os_free>
   1f906:	2300      	movs	r3, #0
   1f908:	60e3      	str	r3, [r4, #12]
   1f90a:	bd10      	pop	{r4, pc}

0001f90c <packet_handler_delete>:
   1f90c:	b510      	push	{r4, lr}
   1f90e:	4604      	mov	r4, r0
   1f910:	6803      	ldr	r3, [r0, #0]
   1f912:	691b      	ldr	r3, [r3, #16]
   1f914:	4798      	blx	r3
   1f916:	6823      	ldr	r3, [r4, #0]
   1f918:	4620      	mov	r0, r4
   1f91a:	695b      	ldr	r3, [r3, #20]
   1f91c:	4798      	blx	r3
   1f91e:	4620      	mov	r0, r4
   1f920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f924:	f7f3 bebc 	b.w	136a0 <nrf_modem_os_free>

0001f928 <nrf_modem_recoverable_error_handler>:
   1f928:	4770      	bx	lr

0001f92a <nrf_modem_platform_error_handler>:
   1f92a:	b508      	push	{r3, lr}
   1f92c:	f7ff fffc 	bl	1f928 <nrf_modem_recoverable_error_handler>
   1f930:	bd08      	pop	{r3, pc}

0001f932 <unimplemented_method>:
   1f932:	b40f      	push	{r0, r1, r2, r3}
   1f934:	b508      	push	{r3, lr}
   1f936:	202d      	movs	r0, #45	; 0x2d
   1f938:	f7f3 fd0e 	bl	13358 <nrf_modem_os_errno_set>
   1f93c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1f940:	f04f 30ff 	mov.w	r0, #4294967295
   1f944:	b004      	add	sp, #16
   1f946:	4770      	bx	lr

0001f948 <rpc_transport_ipc_fault_handler>:
   1f948:	f7ff bfef 	b.w	1f92a <nrf_modem_platform_error_handler>

0001f94c <nrf_modem_platform_init>:
   1f94c:	b513      	push	{r0, r1, r4, lr}
   1f94e:	4604      	mov	r4, r0
   1f950:	f7f3 fec2 	bl	136d8 <nrf_modem_os_init>
   1f954:	6a23      	ldr	r3, [r4, #32]
   1f956:	4668      	mov	r0, sp
   1f958:	9400      	str	r4, [sp, #0]
   1f95a:	f88d 3004 	strb.w	r3, [sp, #4]
   1f95e:	f7f6 fa15 	bl	15d8c <rpc_transport_ipc_init>
   1f962:	b920      	cbnz	r0, 1f96e <nrf_modem_platform_init+0x22>
   1f964:	f7f6 fb70 	bl	16048 <interface_init>
   1f968:	b118      	cbz	r0, 1f972 <nrf_modem_platform_init+0x26>
   1f96a:	f04f 30ff 	mov.w	r0, #4294967295
   1f96e:	b002      	add	sp, #8
   1f970:	bd10      	pop	{r4, pc}
   1f972:	f7f7 fff3 	bl	1795c <at_interface_init>
   1f976:	2800      	cmp	r0, #0
   1f978:	d1f7      	bne.n	1f96a <nrf_modem_platform_init+0x1e>
   1f97a:	f7f6 fcb7 	bl	162ec <ip_interface_init>
   1f97e:	2800      	cmp	r0, #0
   1f980:	d1f3      	bne.n	1f96a <nrf_modem_platform_init+0x1e>
   1f982:	f7f7 fc63 	bl	1724c <tls_interface_init>
   1f986:	2800      	cmp	r0, #0
   1f988:	d1ef      	bne.n	1f96a <nrf_modem_platform_init+0x1e>
   1f98a:	f7f8 f89b 	bl	17ac4 <mfu_interface_init>
   1f98e:	2800      	cmp	r0, #0
   1f990:	d1eb      	bne.n	1f96a <nrf_modem_platform_init+0x1e>
   1f992:	f7f8 ff6f 	bl	18874 <pdn_interface_init>
   1f996:	2800      	cmp	r0, #0
   1f998:	d1e7      	bne.n	1f96a <nrf_modem_platform_init+0x1e>
   1f99a:	f7f8 fdeb 	bl	18574 <gnss_interface_init>
   1f99e:	3800      	subs	r0, #0
   1f9a0:	bf18      	it	ne
   1f9a2:	2001      	movne	r0, #1
   1f9a4:	4240      	negs	r0, r0
   1f9a6:	e7e2      	b.n	1f96e <nrf_modem_platform_init+0x22>

0001f9a8 <internal_poll>:
   1f9a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f9ac:	2600      	movs	r6, #0
   1f9ae:	4688      	mov	r8, r1
   1f9b0:	4605      	mov	r5, r0
   1f9b2:	4637      	mov	r7, r6
   1f9b4:	4546      	cmp	r6, r8
   1f9b6:	d103      	bne.n	1f9c0 <internal_poll+0x18>
   1f9b8:	4638      	mov	r0, r7
   1f9ba:	b002      	add	sp, #8
   1f9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f9c0:	88ab      	ldrh	r3, [r5, #4]
   1f9c2:	6828      	ldr	r0, [r5, #0]
   1f9c4:	f003 0303 	and.w	r3, r3, #3
   1f9c8:	a901      	add	r1, sp, #4
   1f9ca:	f043 041c 	orr.w	r4, r3, #28
   1f9ce:	f7ff f8fa 	bl	1ebc6 <interface_socket_event_get>
   1f9d2:	9b01      	ldr	r3, [sp, #4]
   1f9d4:	4023      	ands	r3, r4
   1f9d6:	80eb      	strh	r3, [r5, #6]
   1f9d8:	b103      	cbz	r3, 1f9dc <internal_poll+0x34>
   1f9da:	3701      	adds	r7, #1
   1f9dc:	3601      	adds	r6, #1
   1f9de:	3508      	adds	r5, #8
   1f9e0:	e7e8      	b.n	1f9b4 <internal_poll+0xc>

0001f9e2 <nrf_modem_platform_getaddrinfo>:
   1f9e2:	f7f7 b89f 	b.w	16b24 <ip_interface_getaddrinfo>

0001f9e6 <nrf_modem_platform_freeaddrinfo>:
   1f9e6:	f7f7 b971 	b.w	16ccc <ip_interface_freeaddrinfo>

0001f9ea <nrf_modem_platform_poll>:
   1f9ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f9ec:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   1f9f0:	460e      	mov	r6, r1
   1f9f2:	4605      	mov	r5, r0
   1f9f4:	9201      	str	r2, [sp, #4]
   1f9f6:	b110      	cbz	r0, 1f9fe <nrf_modem_platform_poll+0x14>
   1f9f8:	1e4b      	subs	r3, r1, #1
   1f9fa:	2b08      	cmp	r3, #8
   1f9fc:	d906      	bls.n	1fa0c <nrf_modem_platform_poll+0x22>
   1f9fe:	2016      	movs	r0, #22
   1fa00:	f7f3 fcaa 	bl	13358 <nrf_modem_os_errno_set>
   1fa04:	f04f 30ff 	mov.w	r0, #4294967295
   1fa08:	b002      	add	sp, #8
   1fa0a:	bd70      	pop	{r4, r5, r6, pc}
   1fa0c:	f7ff ffcc 	bl	1f9a8 <internal_poll>
   1fa10:	2400      	movs	r4, #0
   1fa12:	2800      	cmp	r0, #0
   1fa14:	d1f8      	bne.n	1fa08 <nrf_modem_platform_poll+0x1e>
   1fa16:	2c00      	cmp	r4, #0
   1fa18:	d1f6      	bne.n	1fa08 <nrf_modem_platform_poll+0x1e>
   1fa1a:	4628      	mov	r0, r5
   1fa1c:	a901      	add	r1, sp, #4
   1fa1e:	f7f3 fbe3 	bl	131e8 <nrf_modem_os_timedwait>
   1fa22:	4604      	mov	r4, r0
   1fa24:	b118      	cbz	r0, 1fa2e <nrf_modem_platform_poll+0x44>
   1fa26:	283c      	cmp	r0, #60	; 0x3c
   1fa28:	d001      	beq.n	1fa2e <nrf_modem_platform_poll+0x44>
   1fa2a:	2023      	movs	r0, #35	; 0x23
   1fa2c:	e7e8      	b.n	1fa00 <nrf_modem_platform_poll+0x16>
   1fa2e:	4631      	mov	r1, r6
   1fa30:	4628      	mov	r0, r5
   1fa32:	f7ff ffb9 	bl	1f9a8 <internal_poll>
   1fa36:	e7ec      	b.n	1fa12 <nrf_modem_platform_poll+0x28>

0001fa38 <nrf_socket>:
   1fa38:	b570      	push	{r4, r5, r6, lr}
   1fa3a:	4604      	mov	r4, r0
   1fa3c:	460d      	mov	r5, r1
   1fa3e:	4616      	mov	r6, r2
   1fa40:	f7f9 fb5a 	bl	190f8 <nrf_modem_platform_af_method_table_get>
   1fa44:	b130      	cbz	r0, 1fa54 <nrf_socket+0x1c>
   1fa46:	4632      	mov	r2, r6
   1fa48:	4629      	mov	r1, r5
   1fa4a:	6803      	ldr	r3, [r0, #0]
   1fa4c:	4620      	mov	r0, r4
   1fa4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fa52:	4718      	bx	r3
   1fa54:	f04f 30ff 	mov.w	r0, #4294967295
   1fa58:	bd70      	pop	{r4, r5, r6, pc}

0001fa5a <nrf_close>:
   1fa5a:	b510      	push	{r4, lr}
   1fa5c:	4604      	mov	r4, r0
   1fa5e:	f7f9 fb9d 	bl	1919c <nrf_modem_platform_fd_method_table_get>
   1fa62:	b120      	cbz	r0, 1fa6e <nrf_close+0x14>
   1fa64:	6843      	ldr	r3, [r0, #4]
   1fa66:	4620      	mov	r0, r4
   1fa68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fa6c:	4718      	bx	r3
   1fa6e:	f04f 30ff 	mov.w	r0, #4294967295
   1fa72:	bd10      	pop	{r4, pc}

0001fa74 <nrf_sendto>:
   1fa74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1fa76:	4604      	mov	r4, r0
   1fa78:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   1fa7c:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1fa80:	9301      	str	r3, [sp, #4]
   1fa82:	f7f9 fb8b 	bl	1919c <nrf_modem_platform_fd_method_table_get>
   1fa86:	b158      	cbz	r0, 1faa0 <nrf_sendto+0x2c>
   1fa88:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   1fa8c:	e9cd 5608 	strd	r5, r6, [sp, #32]
   1fa90:	6885      	ldr	r5, [r0, #8]
   1fa92:	4620      	mov	r0, r4
   1fa94:	46ac      	mov	ip, r5
   1fa96:	9903      	ldr	r1, [sp, #12]
   1fa98:	b004      	add	sp, #16
   1fa9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fa9e:	4760      	bx	ip
   1faa0:	f04f 30ff 	mov.w	r0, #4294967295
   1faa4:	b004      	add	sp, #16
   1faa6:	bd70      	pop	{r4, r5, r6, pc}

0001faa8 <nrf_recvfrom>:
   1faa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1faaa:	4604      	mov	r4, r0
   1faac:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   1fab0:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1fab4:	9301      	str	r3, [sp, #4]
   1fab6:	f7f9 fb71 	bl	1919c <nrf_modem_platform_fd_method_table_get>
   1faba:	b158      	cbz	r0, 1fad4 <nrf_recvfrom+0x2c>
   1fabc:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   1fac0:	e9cd 5608 	strd	r5, r6, [sp, #32]
   1fac4:	68c5      	ldr	r5, [r0, #12]
   1fac6:	4620      	mov	r0, r4
   1fac8:	46ac      	mov	ip, r5
   1faca:	9903      	ldr	r1, [sp, #12]
   1facc:	b004      	add	sp, #16
   1face:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fad2:	4760      	bx	ip
   1fad4:	f04f 30ff 	mov.w	r0, #4294967295
   1fad8:	b004      	add	sp, #16
   1fada:	bd70      	pop	{r4, r5, r6, pc}

0001fadc <nrf_connect>:
   1fadc:	b513      	push	{r0, r1, r4, lr}
   1fade:	4604      	mov	r4, r0
   1fae0:	e9cd 2100 	strd	r2, r1, [sp]
   1fae4:	f7f9 fb5a 	bl	1919c <nrf_modem_platform_fd_method_table_get>
   1fae8:	b138      	cbz	r0, 1fafa <nrf_connect+0x1e>
   1faea:	e9dd 2100 	ldrd	r2, r1, [sp]
   1faee:	6943      	ldr	r3, [r0, #20]
   1faf0:	4620      	mov	r0, r4
   1faf2:	b002      	add	sp, #8
   1faf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1faf8:	4718      	bx	r3
   1fafa:	f04f 30ff 	mov.w	r0, #4294967295
   1fafe:	b002      	add	sp, #8
   1fb00:	bd10      	pop	{r4, pc}

0001fb02 <nrf_listen>:
   1fb02:	b513      	push	{r0, r1, r4, lr}
   1fb04:	4604      	mov	r4, r0
   1fb06:	9101      	str	r1, [sp, #4]
   1fb08:	f7f9 fb48 	bl	1919c <nrf_modem_platform_fd_method_table_get>
   1fb0c:	b130      	cbz	r0, 1fb1c <nrf_listen+0x1a>
   1fb0e:	6983      	ldr	r3, [r0, #24]
   1fb10:	4620      	mov	r0, r4
   1fb12:	9901      	ldr	r1, [sp, #4]
   1fb14:	b002      	add	sp, #8
   1fb16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fb1a:	4718      	bx	r3
   1fb1c:	f04f 30ff 	mov.w	r0, #4294967295
   1fb20:	b002      	add	sp, #8
   1fb22:	bd10      	pop	{r4, pc}

0001fb24 <nrf_accept>:
   1fb24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fb26:	4604      	mov	r4, r0
   1fb28:	e9cd 2100 	strd	r2, r1, [sp]
   1fb2c:	f7f9 fb36 	bl	1919c <nrf_modem_platform_fd_method_table_get>
   1fb30:	b148      	cbz	r0, 1fb46 <nrf_accept+0x22>
   1fb32:	e9dd 2100 	ldrd	r2, r1, [sp]
   1fb36:	69c5      	ldr	r5, [r0, #28]
   1fb38:	2300      	movs	r3, #0
   1fb3a:	4620      	mov	r0, r4
   1fb3c:	46ac      	mov	ip, r5
   1fb3e:	b003      	add	sp, #12
   1fb40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1fb44:	4760      	bx	ip
   1fb46:	f04f 30ff 	mov.w	r0, #4294967295
   1fb4a:	b003      	add	sp, #12
   1fb4c:	bd30      	pop	{r4, r5, pc}

0001fb4e <nrf_bind>:
   1fb4e:	b513      	push	{r0, r1, r4, lr}
   1fb50:	4604      	mov	r4, r0
   1fb52:	e9cd 2100 	strd	r2, r1, [sp]
   1fb56:	f7f9 fb21 	bl	1919c <nrf_modem_platform_fd_method_table_get>
   1fb5a:	b138      	cbz	r0, 1fb6c <nrf_bind+0x1e>
   1fb5c:	e9dd 2100 	ldrd	r2, r1, [sp]
   1fb60:	6903      	ldr	r3, [r0, #16]
   1fb62:	4620      	mov	r0, r4
   1fb64:	b002      	add	sp, #8
   1fb66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fb6a:	4718      	bx	r3
   1fb6c:	f04f 30ff 	mov.w	r0, #4294967295
   1fb70:	b002      	add	sp, #8
   1fb72:	bd10      	pop	{r4, pc}

0001fb74 <nrf_setsockopt>:
   1fb74:	b530      	push	{r4, r5, lr}
   1fb76:	b085      	sub	sp, #20
   1fb78:	4604      	mov	r4, r0
   1fb7a:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1fb7e:	9d08      	ldr	r5, [sp, #32]
   1fb80:	9301      	str	r3, [sp, #4]
   1fb82:	f7f9 fb0b 	bl	1919c <nrf_modem_platform_fd_method_table_get>
   1fb86:	b150      	cbz	r0, 1fb9e <nrf_setsockopt+0x2a>
   1fb88:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   1fb8c:	9508      	str	r5, [sp, #32]
   1fb8e:	6a05      	ldr	r5, [r0, #32]
   1fb90:	4620      	mov	r0, r4
   1fb92:	46ac      	mov	ip, r5
   1fb94:	9903      	ldr	r1, [sp, #12]
   1fb96:	b005      	add	sp, #20
   1fb98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1fb9c:	4760      	bx	ip
   1fb9e:	f04f 30ff 	mov.w	r0, #4294967295
   1fba2:	b005      	add	sp, #20
   1fba4:	bd30      	pop	{r4, r5, pc}

0001fba6 <nrf_getsockopt>:
   1fba6:	b530      	push	{r4, r5, lr}
   1fba8:	b085      	sub	sp, #20
   1fbaa:	4604      	mov	r4, r0
   1fbac:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1fbb0:	9d08      	ldr	r5, [sp, #32]
   1fbb2:	9301      	str	r3, [sp, #4]
   1fbb4:	f7f9 faf2 	bl	1919c <nrf_modem_platform_fd_method_table_get>
   1fbb8:	b150      	cbz	r0, 1fbd0 <nrf_getsockopt+0x2a>
   1fbba:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   1fbbe:	9508      	str	r5, [sp, #32]
   1fbc0:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1fbc2:	4620      	mov	r0, r4
   1fbc4:	46ac      	mov	ip, r5
   1fbc6:	9903      	ldr	r1, [sp, #12]
   1fbc8:	b005      	add	sp, #20
   1fbca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1fbce:	4760      	bx	ip
   1fbd0:	f04f 30ff 	mov.w	r0, #4294967295
   1fbd4:	b005      	add	sp, #20
   1fbd6:	bd30      	pop	{r4, r5, pc}

0001fbd8 <nrf_getaddrinfo>:
   1fbd8:	f7ff bf03 	b.w	1f9e2 <nrf_modem_platform_getaddrinfo>

0001fbdc <nrf_freeaddrinfo>:
   1fbdc:	f7ff bf03 	b.w	1f9e6 <nrf_modem_platform_freeaddrinfo>

0001fbe0 <nrf_poll>:
   1fbe0:	f7ff bf03 	b.w	1f9ea <nrf_modem_platform_poll>

0001fbe4 <nrf_fcntl>:
   1fbe4:	f7f9 bb0a 	b.w	191fc <nrf_modem_platform_fcntl>

0001fbe8 <linked_list_init>:
   1fbe8:	b128      	cbz	r0, 1fbf6 <linked_list_init+0xe>
   1fbea:	2300      	movs	r3, #0
   1fbec:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1fbf0:	6003      	str	r3, [r0, #0]
   1fbf2:	4618      	mov	r0, r3
   1fbf4:	4770      	bx	lr
   1fbf6:	2016      	movs	r0, #22
   1fbf8:	4770      	bx	lr

0001fbfa <linked_list_push>:
   1fbfa:	6803      	ldr	r3, [r0, #0]
   1fbfc:	3301      	adds	r3, #1
   1fbfe:	d00d      	beq.n	1fc1c <linked_list_push+0x22>
   1fc00:	2300      	movs	r3, #0
   1fc02:	600b      	str	r3, [r1, #0]
   1fc04:	6803      	ldr	r3, [r0, #0]
   1fc06:	b933      	cbnz	r3, 1fc16 <linked_list_push+0x1c>
   1fc08:	6041      	str	r1, [r0, #4]
   1fc0a:	6803      	ldr	r3, [r0, #0]
   1fc0c:	6081      	str	r1, [r0, #8]
   1fc0e:	3301      	adds	r3, #1
   1fc10:	6003      	str	r3, [r0, #0]
   1fc12:	2000      	movs	r0, #0
   1fc14:	4770      	bx	lr
   1fc16:	6883      	ldr	r3, [r0, #8]
   1fc18:	6019      	str	r1, [r3, #0]
   1fc1a:	e7f6      	b.n	1fc0a <linked_list_push+0x10>
   1fc1c:	200c      	movs	r0, #12
   1fc1e:	4770      	bx	lr

0001fc20 <linked_list_pop>:
   1fc20:	4603      	mov	r3, r0
   1fc22:	6800      	ldr	r0, [r0, #0]
   1fc24:	b128      	cbz	r0, 1fc32 <linked_list_pop+0x12>
   1fc26:	6858      	ldr	r0, [r3, #4]
   1fc28:	6802      	ldr	r2, [r0, #0]
   1fc2a:	605a      	str	r2, [r3, #4]
   1fc2c:	681a      	ldr	r2, [r3, #0]
   1fc2e:	3a01      	subs	r2, #1
   1fc30:	601a      	str	r2, [r3, #0]
   1fc32:	4770      	bx	lr

0001fc34 <linked_list_peek>:
   1fc34:	6803      	ldr	r3, [r0, #0]
   1fc36:	b10b      	cbz	r3, 1fc3c <linked_list_peek+0x8>
   1fc38:	6840      	ldr	r0, [r0, #4]
   1fc3a:	4770      	bx	lr
   1fc3c:	4618      	mov	r0, r3
   1fc3e:	4770      	bx	lr

0001fc40 <linked_list_size_get>:
   1fc40:	6800      	ldr	r0, [r0, #0]
   1fc42:	4770      	bx	lr

0001fc44 <linked_list_get_next>:
   1fc44:	6800      	ldr	r0, [r0, #0]
   1fc46:	4770      	bx	lr

0001fc48 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1fc48:	4700      	bx	r0

0001fc4a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1fc4a:	f000 ba37 	b.w	200bc <z_impl_k_busy_wait>

0001fc4e <nrfx_clock_enable>:
{
   1fc4e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1fc50:	2005      	movs	r0, #5
   1fc52:	f7f1 fa9b 	bl	1118c <arch_irq_is_enabled>
   1fc56:	b920      	cbnz	r0, 1fc62 <nrfx_clock_enable+0x14>
}
   1fc58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1fc5c:	2005      	movs	r0, #5
   1fc5e:	f7f1 ba85 	b.w	1116c <arch_irq_enable>
   1fc62:	bd08      	pop	{r3, pc}

0001fc64 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   1fc64:	f7fd b90d 	b.w	1ce82 <z_clock_idle_exit>

0001fc68 <main>:
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
   1fc68:	bf00      	nop
}
   1fc6a:	4770      	bx	lr

0001fc6c <k_heap_init>:
{
   1fc6c:	b410      	push	{r4}
   1fc6e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1fc72:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1fc76:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   1fc7a:	f7fc bbfe 	b.w	1c47a <sys_heap_init>

0001fc7e <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1fc7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc82:	b087      	sub	sp, #28
   1fc84:	4604      	mov	r4, r0
   1fc86:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   1fc88:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   1fc8c:	4617      	mov	r7, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   1fc8e:	f000 fac1 	bl	20214 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1fc92:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   1fc96:	4605      	mov	r5, r0
   1fc98:	4688      	mov	r8, r1
	__asm__ volatile(
   1fc9a:	f04f 0320 	mov.w	r3, #32
   1fc9e:	f3ef 8b11 	mrs	fp, BASEPRI
   1fca2:	f383 8811 	msr	BASEPRI, r3
   1fca6:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1fcaa:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1fcae:	463a      	mov	r2, r7
   1fcb0:	4631      	mov	r1, r6
   1fcb2:	4620      	mov	r0, r4
   1fcb4:	f7fc fb84 	bl	1c3c0 <sys_heap_aligned_alloc>
   1fcb8:	9005      	str	r0, [sp, #20]
		now = z_tick_get();
   1fcba:	f7fa ff1f 	bl	1aafc <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   1fcbe:	9b05      	ldr	r3, [sp, #20]
   1fcc0:	b13b      	cbz	r3, 1fcd2 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1fcc2:	f38b 8811 	msr	BASEPRI, fp
   1fcc6:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1fcca:	4618      	mov	r0, r3
   1fccc:	b007      	add	sp, #28
   1fcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   1fcd2:	1a2a      	subs	r2, r5, r0
   1fcd4:	9202      	str	r2, [sp, #8]
   1fcd6:	eb68 0201 	sbc.w	r2, r8, r1
   1fcda:	9203      	str	r2, [sp, #12]
   1fcdc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1fce0:	2901      	cmp	r1, #1
   1fce2:	f172 0200 	sbcs.w	r2, r2, #0
   1fce6:	dbec      	blt.n	1fcc2 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1fce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1fcec:	4659      	mov	r1, fp
   1fcee:	e9cd 2300 	strd	r2, r3, [sp]
   1fcf2:	4648      	mov	r0, r9
   1fcf4:	4652      	mov	r2, sl
   1fcf6:	f7fa fae1 	bl	1a2bc <z_pend_curr>
	__asm__ volatile(
   1fcfa:	f04f 0320 	mov.w	r3, #32
   1fcfe:	f3ef 8b11 	mrs	fp, BASEPRI
   1fd02:	f383 8811 	msr	BASEPRI, r3
   1fd06:	f3bf 8f6f 	isb	sy
   1fd0a:	e7d0      	b.n	1fcae <k_heap_aligned_alloc+0x30>

0001fd0c <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   1fd0c:	b538      	push	{r3, r4, r5, lr}
   1fd0e:	4604      	mov	r4, r0
   1fd10:	f04f 0320 	mov.w	r3, #32
   1fd14:	f3ef 8511 	mrs	r5, BASEPRI
   1fd18:	f383 8811 	msr	BASEPRI, r3
   1fd1c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1fd20:	f7fc fafe 	bl	1c320 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   1fd24:	f104 000c 	add.w	r0, r4, #12
   1fd28:	f000 f9a2 	bl	20070 <z_unpend_all>
   1fd2c:	b130      	cbz	r0, 1fd3c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1fd2e:	4629      	mov	r1, r5
   1fd30:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1fd34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1fd38:	f7fa b878 	b.w	19e2c <z_reschedule>
	__asm__ volatile(
   1fd3c:	f385 8811 	msr	BASEPRI, r5
   1fd40:	f3bf 8f6f 	isb	sy
}
   1fd44:	bd38      	pop	{r3, r4, r5, pc}

0001fd46 <k_mem_slab_init>:
{
   1fd46:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1fd48:	2400      	movs	r4, #0
   1fd4a:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1fd4c:	ea41 0402 	orr.w	r4, r1, r2
   1fd50:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1fd54:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1fd58:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1fd5a:	d10c      	bne.n	1fd76 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1fd5c:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1fd5e:	42a3      	cmp	r3, r4
   1fd60:	d103      	bne.n	1fd6a <k_mem_slab_init+0x24>
   1fd62:	e9c0 0000 	strd	r0, r0, [r0]
}
   1fd66:	2000      	movs	r0, #0
}
   1fd68:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1fd6a:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1fd6c:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   1fd6e:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   1fd70:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1fd72:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1fd74:	e7f3      	b.n	1fd5e <k_mem_slab_init+0x18>
		return -EINVAL;
   1fd76:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1fd7a:	e7f5      	b.n	1fd68 <k_mem_slab_init+0x22>

0001fd7c <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   1fd7c:	2300      	movs	r3, #0
   1fd7e:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   1fd82:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1fd86:	4618      	mov	r0, r3
   1fd88:	4770      	bx	lr

0001fd8a <queue_insert>:
{
   1fd8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fd8e:	4699      	mov	r9, r3
   1fd90:	4604      	mov	r4, r0
   1fd92:	460d      	mov	r5, r1
   1fd94:	4690      	mov	r8, r2
   1fd96:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fd9a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1fd9e:	f04f 0220 	mov.w	r2, #32
   1fda2:	f3ef 8711 	mrs	r7, BASEPRI
   1fda6:	f382 8811 	msr	BASEPRI, r2
   1fdaa:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1fdae:	b103      	cbz	r3, 1fdb2 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   1fdb0:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1fdb2:	4630      	mov	r0, r6
   1fdb4:	f000 f937 	bl	20026 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1fdb8:	b160      	cbz	r0, 1fdd4 <queue_insert+0x4a>
   1fdba:	2400      	movs	r4, #0
   1fdbc:	f8c0 8014 	str.w	r8, [r0, #20]
   1fdc0:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
	z_ready_thread(thread);
   1fdc4:	f000 f8d4 	bl	1ff70 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1fdc8:	4630      	mov	r0, r6
   1fdca:	4639      	mov	r1, r7
   1fdcc:	f7fa f82e 	bl	19e2c <z_reschedule>
	return 0;
   1fdd0:	2000      	movs	r0, #0
   1fdd2:	e00c      	b.n	1fdee <queue_insert+0x64>
	if (alloc) {
   1fdd4:	f1b9 0f00 	cmp.w	r9, #0
   1fdd8:	d01b      	beq.n	1fe12 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   1fdda:	2108      	movs	r1, #8
   1fddc:	f7fa ffb6 	bl	1ad4c <z_thread_aligned_alloc>
		if (anode == NULL) {
   1fde0:	b938      	cbnz	r0, 1fdf2 <queue_insert+0x68>
	__asm__ volatile(
   1fde2:	f387 8811 	msr	BASEPRI, r7
   1fde6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1fdea:	f06f 000b 	mvn.w	r0, #11
}
   1fdee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1fdf2:	2301      	movs	r3, #1
		anode->data = data;
   1fdf4:	f8c0 8004 	str.w	r8, [r0, #4]
   1fdf8:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1fdfa:	6803      	ldr	r3, [r0, #0]
   1fdfc:	f003 0203 	and.w	r2, r3, #3
   1fe00:	b95d      	cbnz	r5, 1fe1a <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fe02:	6823      	ldr	r3, [r4, #0]
   1fe04:	4313      	orrs	r3, r2
   1fe06:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1fe08:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1fe0a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1fe0c:	b973      	cbnz	r3, 1fe2c <queue_insert+0xa2>
	list->tail = node;
   1fe0e:	6060      	str	r0, [r4, #4]
}
   1fe10:	e00c      	b.n	1fe2c <queue_insert+0xa2>
}
   1fe12:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1fe14:	f8c8 9000 	str.w	r9, [r8]
}
   1fe18:	e7ef      	b.n	1fdfa <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fe1a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1fe1c:	f033 0303 	bics.w	r3, r3, #3
   1fe20:	d110      	bne.n	1fe44 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fe22:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1fe24:	6862      	ldr	r2, [r4, #4]
   1fe26:	b93a      	cbnz	r2, 1fe38 <queue_insert+0xae>
	list->head = node;
   1fe28:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1fe2c:	2104      	movs	r1, #4
   1fe2e:	f104 0010 	add.w	r0, r4, #16
   1fe32:	f000 fb79 	bl	20528 <z_handle_obj_poll_events>
   1fe36:	e7c7      	b.n	1fdc8 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fe38:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fe3a:	f003 0303 	and.w	r3, r3, #3
   1fe3e:	4303      	orrs	r3, r0
   1fe40:	6013      	str	r3, [r2, #0]
   1fe42:	e7e4      	b.n	1fe0e <queue_insert+0x84>
   1fe44:	4313      	orrs	r3, r2
   1fe46:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fe48:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fe4a:	f003 0303 	and.w	r3, r3, #3
   1fe4e:	4303      	orrs	r3, r0
   1fe50:	602b      	str	r3, [r5, #0]
}
   1fe52:	e7eb      	b.n	1fe2c <queue_insert+0xa2>

0001fe54 <z_queue_node_peek>:
{
   1fe54:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1fe56:	4604      	mov	r4, r0
   1fe58:	b130      	cbz	r0, 1fe68 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fe5a:	6802      	ldr	r2, [r0, #0]
   1fe5c:	0793      	lsls	r3, r2, #30
   1fe5e:	d003      	beq.n	1fe68 <z_queue_node_peek+0x14>
		ret = anode->data;
   1fe60:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1fe62:	b109      	cbz	r1, 1fe68 <z_queue_node_peek+0x14>
			k_free(anode);
   1fe64:	f000 fb8c 	bl	20580 <k_free>
}
   1fe68:	4620      	mov	r0, r4
   1fe6a:	bd10      	pop	{r4, pc}

0001fe6c <z_impl_k_queue_init>:
	list->head = NULL;
   1fe6c:	2300      	movs	r3, #0
	list->tail = NULL;
   1fe6e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   1fe72:	f100 0308 	add.w	r3, r0, #8
   1fe76:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1fe7a:	f100 0310 	add.w	r3, r0, #16
   1fe7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1fe82:	4770      	bx	lr

0001fe84 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1fe84:	2301      	movs	r3, #1
{
   1fe86:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1fe88:	9300      	str	r3, [sp, #0]
   1fe8a:	2300      	movs	r3, #0
{
   1fe8c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1fe8e:	4619      	mov	r1, r3
   1fe90:	f7ff ff7b 	bl	1fd8a <queue_insert>
}
   1fe94:	b003      	add	sp, #12
   1fe96:	f85d fb04 	ldr.w	pc, [sp], #4

0001fe9a <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1fe9a:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1fe9e:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1fea2:	4298      	cmp	r0, r3
   1fea4:	bfac      	ite	ge
   1fea6:	2000      	movge	r0, #0
   1fea8:	2001      	movlt	r0, #1
   1feaa:	4770      	bx	lr

0001feac <z_find_first_thread_to_unpend>:
{
   1feac:	b510      	push	{r4, lr}
	__asm__ volatile(
   1feae:	f04f 0320 	mov.w	r3, #32
   1feb2:	f3ef 8411 	mrs	r4, BASEPRI
   1feb6:	f383 8811 	msr	BASEPRI, r3
   1feba:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1febe:	f000 f84d 	bl	1ff5c <z_priq_dumb_best>
	__asm__ volatile(
   1fec2:	f384 8811 	msr	BASEPRI, r4
   1fec6:	f3bf 8f6f 	isb	sy
}
   1feca:	bd10      	pop	{r4, pc}

0001fecc <z_unpend_thread_no_timeout>:
{
   1fecc:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fece:	f04f 0320 	mov.w	r3, #32
   1fed2:	f3ef 8411 	mrs	r4, BASEPRI
   1fed6:	f383 8811 	msr	BASEPRI, r3
   1feda:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1fede:	f000 f81b 	bl	1ff18 <unpend_thread_no_timeout>
	__asm__ volatile(
   1fee2:	f384 8811 	msr	BASEPRI, r4
   1fee6:	f3bf 8f6f 	isb	sy
}
   1feea:	bd10      	pop	{r4, pc}

0001feec <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1feec:	4603      	mov	r3, r0
   1feee:	b920      	cbnz	r0, 1fefa <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1fef0:	f3ef 8205 	mrs	r2, IPSR
   1fef4:	b90a      	cbnz	r2, 1fefa <z_reschedule_irqlock+0xe>
   1fef6:	f7f1 b91d 	b.w	11134 <arch_swap>
   1fefa:	f383 8811 	msr	BASEPRI, r3
   1fefe:	f3bf 8f6f 	isb	sy
}
   1ff02:	4770      	bx	lr

0001ff04 <z_reschedule_unlocked>:
	__asm__ volatile(
   1ff04:	f04f 0320 	mov.w	r3, #32
   1ff08:	f3ef 8011 	mrs	r0, BASEPRI
   1ff0c:	f383 8811 	msr	BASEPRI, r3
   1ff10:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ff14:	f7ff bfea 	b.w	1feec <z_reschedule_irqlock>

0001ff18 <unpend_thread_no_timeout>:
{
   1ff18:	4601      	mov	r1, r0
   1ff1a:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1ff1c:	6880      	ldr	r0, [r0, #8]
   1ff1e:	f7f9 ffab 	bl	19e78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ff22:	7b4b      	ldrb	r3, [r1, #13]
   1ff24:	f023 0302 	bic.w	r3, r3, #2
   1ff28:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   1ff2a:	2300      	movs	r3, #0
   1ff2c:	608b      	str	r3, [r1, #8]
}
   1ff2e:	bd08      	pop	{r3, pc}

0001ff30 <z_unpend_thread>:
{
   1ff30:	b538      	push	{r3, r4, r5, lr}
   1ff32:	4604      	mov	r4, r0
   1ff34:	f04f 0320 	mov.w	r3, #32
   1ff38:	f3ef 8511 	mrs	r5, BASEPRI
   1ff3c:	f383 8811 	msr	BASEPRI, r3
   1ff40:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1ff44:	f7ff ffe8 	bl	1ff18 <unpend_thread_no_timeout>
	__asm__ volatile(
   1ff48:	f385 8811 	msr	BASEPRI, r5
   1ff4c:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   1ff50:	f104 0018 	add.w	r0, r4, #24
}
   1ff54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ff58:	f000 b915 	b.w	20186 <z_abort_timeout>

0001ff5c <z_priq_dumb_best>:
	return list->head == list;
   1ff5c:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ff5e:	4298      	cmp	r0, r3
   1ff60:	d004      	beq.n	1ff6c <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1ff62:	2b00      	cmp	r3, #0
   1ff64:	bf38      	it	cc
   1ff66:	2300      	movcc	r3, #0
   1ff68:	4618      	mov	r0, r3
   1ff6a:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1ff6c:	2000      	movs	r0, #0
}
   1ff6e:	4770      	bx	lr

0001ff70 <z_ready_thread>:
{
   1ff70:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ff72:	f04f 0320 	mov.w	r3, #32
   1ff76:	f3ef 8411 	mrs	r4, BASEPRI
   1ff7a:	f383 8811 	msr	BASEPRI, r3
   1ff7e:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   1ff82:	f7f9 ffd3 	bl	19f2c <ready_thread>
	__asm__ volatile(
   1ff86:	f384 8811 	msr	BASEPRI, r4
   1ff8a:	f3bf 8f6f 	isb	sy
}
   1ff8e:	bd10      	pop	{r4, pc}

0001ff90 <z_thread_timeout>:
{
   1ff90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ff92:	4604      	mov	r4, r0
	__asm__ volatile(
   1ff94:	f04f 0320 	mov.w	r3, #32
   1ff98:	f3ef 8511 	mrs	r5, BASEPRI
   1ff9c:	f383 8811 	msr	BASEPRI, r3
   1ffa0:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1ffa4:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   1ffa8:	3818      	subs	r0, #24
		if (thread->base.pended_on != NULL) {
   1ffaa:	b11b      	cbz	r3, 1ffb4 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   1ffac:	9001      	str	r0, [sp, #4]
   1ffae:	f7ff ffb3 	bl	1ff18 <unpend_thread_no_timeout>
   1ffb2:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ffb4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1ffb8:	f023 0314 	bic.w	r3, r3, #20
   1ffbc:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   1ffc0:	f7f9 ffb4 	bl	19f2c <ready_thread>
	__asm__ volatile(
   1ffc4:	f385 8811 	msr	BASEPRI, r5
   1ffc8:	f3bf 8f6f 	isb	sy
}
   1ffcc:	b003      	add	sp, #12
   1ffce:	bd30      	pop	{r4, r5, pc}

0001ffd0 <add_to_waitq_locked>:
{
   1ffd0:	b538      	push	{r3, r4, r5, lr}
   1ffd2:	4604      	mov	r4, r0
   1ffd4:	460d      	mov	r5, r1
	unready_thread(thread);
   1ffd6:	f7fa f931 	bl	1a23c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1ffda:	7b63      	ldrb	r3, [r4, #13]
   1ffdc:	f043 0302 	orr.w	r3, r3, #2
   1ffe0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1ffe2:	b1c5      	cbz	r5, 20016 <add_to_waitq_locked+0x46>
	return list->head == list;
   1ffe4:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1ffe6:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ffe8:	429d      	cmp	r5, r3
   1ffea:	bf08      	it	eq
   1ffec:	2300      	moveq	r3, #0
   1ffee:	2b00      	cmp	r3, #0
   1fff0:	bf38      	it	cc
   1fff2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fff4:	b183      	cbz	r3, 20018 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   1fff6:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1fffa:	f993 200e 	ldrsb.w	r2, [r3, #14]
   1fffe:	4291      	cmp	r1, r2
   20000:	db04      	blt.n	2000c <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   20002:	686a      	ldr	r2, [r5, #4]
   20004:	429a      	cmp	r2, r3
   20006:	d007      	beq.n	20018 <add_to_waitq_locked+0x48>
   20008:	681b      	ldr	r3, [r3, #0]
   2000a:	e7f3      	b.n	1fff4 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   2000c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2000e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   20012:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   20014:	605c      	str	r4, [r3, #4]
}
   20016:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   20018:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2001a:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   2001c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2001e:	686b      	ldr	r3, [r5, #4]
   20020:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20022:	606c      	str	r4, [r5, #4]
   20024:	e7f7      	b.n	20016 <add_to_waitq_locked+0x46>

00020026 <z_unpend_first_thread>:
{
   20026:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20028:	f04f 0320 	mov.w	r3, #32
   2002c:	f3ef 8211 	mrs	r2, BASEPRI
   20030:	f383 8811 	msr	BASEPRI, r3
   20034:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   20038:	f7ff ff90 	bl	1ff5c <z_priq_dumb_best>
   2003c:	4604      	mov	r4, r0
	__asm__ volatile(
   2003e:	f382 8811 	msr	BASEPRI, r2
   20042:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   20046:	b188      	cbz	r0, 2006c <z_unpend_first_thread+0x46>
	__asm__ volatile(
   20048:	f04f 0320 	mov.w	r3, #32
   2004c:	f3ef 8511 	mrs	r5, BASEPRI
   20050:	f383 8811 	msr	BASEPRI, r3
   20054:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   20058:	f7ff ff5e 	bl	1ff18 <unpend_thread_no_timeout>
	__asm__ volatile(
   2005c:	f385 8811 	msr	BASEPRI, r5
   20060:	f3bf 8f6f 	isb	sy
   20064:	f104 0018 	add.w	r0, r4, #24
   20068:	f000 f88d 	bl	20186 <z_abort_timeout>
}
   2006c:	4620      	mov	r0, r4
   2006e:	bd38      	pop	{r3, r4, r5, pc}

00020070 <z_unpend_all>:
{
   20070:	b538      	push	{r3, r4, r5, lr}
   20072:	4605      	mov	r5, r0
	int need_sched = 0;
   20074:	2000      	movs	r0, #0
	return list->head == list;
   20076:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20078:	42a5      	cmp	r5, r4
   2007a:	d000      	beq.n	2007e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2007c:	b904      	cbnz	r4, 20080 <z_unpend_all+0x10>
}
   2007e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   20080:	4620      	mov	r0, r4
   20082:	f7ff ff55 	bl	1ff30 <z_unpend_thread>
		z_ready_thread(thread);
   20086:	4620      	mov	r0, r4
   20088:	f7ff ff72 	bl	1ff70 <z_ready_thread>
		need_sched = 1;
   2008c:	2001      	movs	r0, #1
   2008e:	e7f2      	b.n	20076 <z_unpend_all+0x6>

00020090 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   20090:	b15a      	cbz	r2, 200aa <z_impl_k_sem_init+0x1a>
   20092:	428a      	cmp	r2, r1
   20094:	d309      	bcc.n	200aa <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   20096:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2009a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2009e:	e9c0 0000 	strd	r0, r0, [r0]
   200a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   200a6:	2000      	movs	r0, #0
   200a8:	4770      	bx	lr
		return -EINVAL;
   200aa:	f06f 0015 	mvn.w	r0, #21
}
   200ae:	4770      	bx	lr

000200b0 <k_is_in_isr>:
   200b0:	f3ef 8005 	mrs	r0, IPSR
}
   200b4:	3800      	subs	r0, #0
   200b6:	bf18      	it	ne
   200b8:	2001      	movne	r0, #1
   200ba:	4770      	bx	lr

000200bc <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   200bc:	b108      	cbz	r0, 200c2 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   200be:	f7ef beeb 	b.w	fe98 <arch_busy_wait>
}
   200c2:	4770      	bx	lr

000200c4 <z_impl_k_thread_name_set>:
}
   200c4:	f06f 0057 	mvn.w	r0, #87	; 0x57
   200c8:	4770      	bx	lr

000200ca <k_thread_name_get>:
}
   200ca:	2000      	movs	r0, #0
   200cc:	4770      	bx	lr

000200ce <z_impl_k_thread_name_copy>:
}
   200ce:	f06f 0057 	mvn.w	r0, #87	; 0x57
   200d2:	4770      	bx	lr

000200d4 <k_work_submit_to_queue>:
{
   200d4:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   200d6:	f101 0308 	add.w	r3, r1, #8
   200da:	e8d3 2fef 	ldaex	r2, [r3]
   200de:	f042 0c01 	orr.w	ip, r2, #1
   200e2:	e8c3 cfee 	stlex	lr, ip, [r3]
   200e6:	f1be 0f00 	cmp.w	lr, #0
   200ea:	d1f6      	bne.n	200da <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   200ec:	07d3      	lsls	r3, r2, #31
   200ee:	d403      	bmi.n	200f8 <k_work_submit_to_queue+0x24>
}
   200f0:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   200f4:	f7ff bec6 	b.w	1fe84 <k_queue_append>
}
   200f8:	f85d fb04 	ldr.w	pc, [sp], #4

000200fc <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   200fc:	f1a0 0110 	sub.w	r1, r0, #16
   20100:	6980      	ldr	r0, [r0, #24]
   20102:	f7ff bfe7 	b.w	200d4 <k_work_submit_to_queue>

00020106 <work_cancel>:
{
   20106:	b570      	push	{r4, r5, r6, lr}
   20108:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2010a:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2010e:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   20112:	07db      	lsls	r3, r3, #31
   20114:	d52f      	bpl.n	20176 <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   20116:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   20118:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2011a:	6813      	ldr	r3, [r2, #0]
   2011c:	b913      	cbnz	r3, 20124 <work_cancel+0x1e>
			return -EINVAL;
   2011e:	f06f 0015 	mvn.w	r0, #21
}
   20122:	bd70      	pop	{r4, r5, r6, pc}
   20124:	429c      	cmp	r4, r3
   20126:	d121      	bne.n	2016c <work_cancel+0x66>
Z_GENLIST_REMOVE(sflist, sfnode)
   20128:	6823      	ldr	r3, [r4, #0]
   2012a:	6856      	ldr	r6, [r2, #4]
   2012c:	f023 0003 	bic.w	r0, r3, #3
   20130:	b991      	cbnz	r1, 20158 <work_cancel+0x52>
   20132:	42b4      	cmp	r4, r6
	list->head = node;
   20134:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   20136:	d100      	bne.n	2013a <work_cancel+0x34>
	list->tail = node;
   20138:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2013a:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2013c:	f003 0303 	and.w	r3, r3, #3
   20140:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   20142:	2000      	movs	r0, #0
   20144:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20146:	e8d5 3fef 	ldaex	r3, [r5]
   2014a:	f023 0301 	bic.w	r3, r3, #1
   2014e:	e8c5 3fe2 	stlex	r2, r3, [r5]
   20152:	2a00      	cmp	r2, #0
   20154:	d0e5      	beq.n	20122 <work_cancel+0x1c>
   20156:	e7f6      	b.n	20146 <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20158:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2015a:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2015c:	f003 0303 	and.w	r3, r3, #3
   20160:	ea43 0300 	orr.w	r3, r3, r0
   20164:	600b      	str	r3, [r1, #0]
	list->tail = node;
   20166:	bf08      	it	eq
   20168:	6051      	streq	r1, [r2, #4]
}
   2016a:	e7e6      	b.n	2013a <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2016c:	6818      	ldr	r0, [r3, #0]
   2016e:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   20170:	f020 0303 	bic.w	r3, r0, #3
   20174:	e7d2      	b.n	2011c <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   20176:	3010      	adds	r0, #16
   20178:	f000 f805 	bl	20186 <z_abort_timeout>
		if (err) {
   2017c:	2800      	cmp	r0, #0
   2017e:	d0e0      	beq.n	20142 <work_cancel+0x3c>
			return -EALREADY;
   20180:	f06f 0077 	mvn.w	r0, #119	; 0x77
   20184:	e7cd      	b.n	20122 <work_cancel+0x1c>

00020186 <z_abort_timeout>:
{
   20186:	b510      	push	{r4, lr}
	__asm__ volatile(
   20188:	f04f 0220 	mov.w	r2, #32
   2018c:	f3ef 8411 	mrs	r4, BASEPRI
   20190:	f382 8811 	msr	BASEPRI, r2
   20194:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   20198:	6803      	ldr	r3, [r0, #0]
   2019a:	b13b      	cbz	r3, 201ac <z_abort_timeout+0x26>
			remove_timeout(to);
   2019c:	f7fa fb70 	bl	1a880 <remove_timeout>
			ret = 0;
   201a0:	2000      	movs	r0, #0
	__asm__ volatile(
   201a2:	f384 8811 	msr	BASEPRI, r4
   201a6:	f3bf 8f6f 	isb	sy
}
   201aa:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   201ac:	f06f 0015 	mvn.w	r0, #21
   201b0:	e7f7      	b.n	201a2 <z_abort_timeout+0x1c>

000201b2 <z_get_next_timeout_expiry>:
{
   201b2:	b510      	push	{r4, lr}
	__asm__ volatile(
   201b4:	f04f 0320 	mov.w	r3, #32
   201b8:	f3ef 8411 	mrs	r4, BASEPRI
   201bc:	f383 8811 	msr	BASEPRI, r3
   201c0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   201c4:	f7fa fb76 	bl	1a8b4 <next_timeout>
	__asm__ volatile(
   201c8:	f384 8811 	msr	BASEPRI, r4
   201cc:	f3bf 8f6f 	isb	sy
}
   201d0:	bd10      	pop	{r4, pc}

000201d2 <z_set_timeout_expiry>:
{
   201d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   201d4:	4604      	mov	r4, r0
   201d6:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   201d8:	f04f 0320 	mov.w	r3, #32
   201dc:	f3ef 8511 	mrs	r5, BASEPRI
   201e0:	f383 8811 	msr	BASEPRI, r3
   201e4:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   201e8:	f7fa fb64 	bl	1a8b4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   201ec:	2801      	cmp	r0, #1
   201ee:	dd05      	ble.n	201fc <z_set_timeout_expiry+0x2a>
   201f0:	42a0      	cmp	r0, r4
   201f2:	9901      	ldr	r1, [sp, #4]
   201f4:	dd02      	ble.n	201fc <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   201f6:	4620      	mov	r0, r4
   201f8:	f7f0 ff36 	bl	11068 <z_clock_set_timeout>
	__asm__ volatile(
   201fc:	f385 8811 	msr	BASEPRI, r5
   20200:	f3bf 8f6f 	isb	sy
}
   20204:	b003      	add	sp, #12
   20206:	bd30      	pop	{r4, r5, pc}

00020208 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   20208:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2020a:	f7fa fc77 	bl	1aafc <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2020e:	bd08      	pop	{r3, pc}

00020210 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   20210:	f7fa bc74 	b.w	1aafc <z_tick_get>

00020214 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   20214:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20216:	1c4b      	adds	r3, r1, #1
   20218:	bf08      	it	eq
   2021a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2021e:	4604      	mov	r4, r0
   20220:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20222:	d013      	beq.n	2024c <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20224:	ea54 0105 	orrs.w	r1, r4, r5
   20228:	d103      	bne.n	20232 <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   2022a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2022e:	f7fa bc65 	b.w	1aafc <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   20232:	f06f 0101 	mvn.w	r1, #1
   20236:	1a0a      	subs	r2, r1, r0
   20238:	f04f 31ff 	mov.w	r1, #4294967295
   2023c:	eb61 0305 	sbc.w	r3, r1, r5
   20240:	2a00      	cmp	r2, #0
   20242:	f173 0100 	sbcs.w	r1, r3, #0
   20246:	db02      	blt.n	2024e <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   20248:	4610      	mov	r0, r2
   2024a:	4619      	mov	r1, r3
}
   2024c:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   2024e:	f7fa fc55 	bl	1aafc <z_tick_get>
   20252:	2c01      	cmp	r4, #1
   20254:	f175 0300 	sbcs.w	r3, r5, #0
   20258:	bfbc      	itt	lt
   2025a:	2401      	movlt	r4, #1
   2025c:	2500      	movlt	r5, #0
   2025e:	1820      	adds	r0, r4, r0
   20260:	eb45 0101 	adc.w	r1, r5, r1
   20264:	e7f2      	b.n	2024c <z_timeout_end_calc+0x38>

00020266 <k_timer_init>:
	timer->status = 0U;
   20266:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   20268:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2026c:	f100 0218 	add.w	r2, r0, #24
   20270:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   20274:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   20278:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2027a:	6343      	str	r3, [r0, #52]	; 0x34
}
   2027c:	4770      	bx	lr

0002027e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2027e:	b510      	push	{r4, lr}
   20280:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   20282:	f7ff ff80 	bl	20186 <z_abort_timeout>

	if (inactive) {
   20286:	b9d8      	cbnz	r0, 202c0 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   20288:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2028a:	b10b      	cbz	r3, 20290 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2028c:	4620      	mov	r0, r4
   2028e:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   20290:	f104 0018 	add.w	r0, r4, #24
   20294:	2100      	movs	r1, #0
   20296:	f7ff fe09 	bl	1feac <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2029a:	4604      	mov	r4, r0
   2029c:	b180      	cbz	r0, 202c0 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   2029e:	f7ff fe15 	bl	1fecc <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   202a2:	4620      	mov	r0, r4
   202a4:	f7ff fe64 	bl	1ff70 <z_ready_thread>
	__asm__ volatile(
   202a8:	f04f 0320 	mov.w	r3, #32
   202ac:	f3ef 8011 	mrs	r0, BASEPRI
   202b0:	f383 8811 	msr	BASEPRI, r3
   202b4:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   202b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   202bc:	f7ff be16 	b.w	1feec <z_reschedule_irqlock>
   202c0:	bd10      	pop	{r4, pc}

000202c2 <clear_event_registrations>:
	while (num_events--) {
   202c2:	2314      	movs	r3, #20
{
   202c4:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   202c6:	2400      	movs	r4, #0
   202c8:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   202cc:	4281      	cmp	r1, r0
   202ce:	d100      	bne.n	202d2 <clear_event_registrations+0x10>
}
   202d0:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   202d2:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   202d6:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   202da:	f003 030f 	and.w	r3, r3, #15
   202de:	2b02      	cmp	r3, #2
   202e0:	d80a      	bhi.n	202f8 <clear_event_registrations+0x36>
   202e2:	b15b      	cbz	r3, 202fc <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   202e4:	f851 3c14 	ldr.w	r3, [r1, #-20]
   202e8:	b143      	cbz	r3, 202fc <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   202ea:	f851 5c10 	ldr.w	r5, [r1, #-16]
   202ee:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   202f0:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   202f2:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   202f6:	e001      	b.n	202fc <clear_event_registrations+0x3a>
	switch (event->type) {
   202f8:	2b04      	cmp	r3, #4
   202fa:	d0f3      	beq.n	202e4 <clear_event_registrations+0x22>
	__asm__ volatile(
   202fc:	f382 8811 	msr	BASEPRI, r2
   20300:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   20304:	f04f 0320 	mov.w	r3, #32
   20308:	f3ef 8211 	mrs	r2, BASEPRI
   2030c:	f383 8811 	msr	BASEPRI, r3
   20310:	f3bf 8f6f 	isb	sy
   20314:	3914      	subs	r1, #20
   20316:	e7d9      	b.n	202cc <clear_event_registrations+0xa>

00020318 <k_work_submit_to_queue>:
{
   20318:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2031a:	f101 0308 	add.w	r3, r1, #8
   2031e:	e8d3 2fef 	ldaex	r2, [r3]
   20322:	f042 0c01 	orr.w	ip, r2, #1
   20326:	e8c3 cfee 	stlex	lr, ip, [r3]
   2032a:	f1be 0f00 	cmp.w	lr, #0
   2032e:	d1f6      	bne.n	2031e <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   20330:	07d3      	lsls	r3, r2, #31
   20332:	d403      	bmi.n	2033c <k_work_submit_to_queue+0x24>
}
   20334:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   20338:	f7ff bda4 	b.w	1fe84 <k_queue_append>
}
   2033c:	f85d fb04 	ldr.w	pc, [sp], #4

00020340 <signal_poll_event>:
{
   20340:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
   20344:	6884      	ldr	r4, [r0, #8]
{
   20346:	4605      	mov	r5, r0
   20348:	460e      	mov	r6, r1
	if (poller) {
   2034a:	b144      	cbz	r4, 2035e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2034c:	7863      	ldrb	r3, [r4, #1]
   2034e:	2b01      	cmp	r3, #1
   20350:	d139      	bne.n	203c6 <signal_poll_event+0x86>
	if (!z_is_thread_pending(thread)) {
   20352:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   20356:	f013 0302 	ands.w	r3, r3, #2
   2035a:	d10a      	bne.n	20372 <signal_poll_event+0x32>
		poller->is_polling = false;
   2035c:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2035e:	2000      	movs	r0, #0
	event->state |= state;
   20360:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   20362:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   20364:	f3c3 3104 	ubfx	r1, r3, #12, #5
   20368:	430e      	orrs	r6, r1
   2036a:	f366 3310 	bfi	r3, r6, #12, #5
   2036e:	60eb      	str	r3, [r5, #12]
	return retcode;
   20370:	e00d      	b.n	2038e <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   20372:	f04f 31ff 	mov.w	r1, #4294967295
   20376:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   2037a:	f06f 0001 	mvn.w	r0, #1
   2037e:	428b      	cmp	r3, r1
   20380:	bf08      	it	eq
   20382:	4282      	cmpeq	r2, r0
   20384:	d106      	bne.n	20394 <signal_poll_event+0x54>
		poller->is_polling = false;
   20386:	2300      	movs	r3, #0
		return -EAGAIN;
   20388:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2038c:	7023      	strb	r3, [r4, #0]
}
   2038e:	b002      	add	sp, #8
   20390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   20394:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
	z_unpend_thread(thread);
   20398:	9001      	str	r0, [sp, #4]
   2039a:	f7ff fdc9 	bl	1ff30 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2039e:	2e08      	cmp	r6, #8
   203a0:	bf0c      	ite	eq
   203a2:	f06f 0303 	mvneq.w	r3, #3
   203a6:	2300      	movne	r3, #0
   203a8:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   203aa:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   203ae:	06db      	lsls	r3, r3, #27
   203b0:	d103      	bne.n	203ba <signal_poll_event+0x7a>
	if (!z_is_thread_ready(thread)) {
   203b2:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   203b6:	9801      	ldr	r0, [sp, #4]
   203b8:	b10f      	cbz	r7, 203be <signal_poll_event+0x7e>
		poller->is_polling = false;
   203ba:	2300      	movs	r3, #0
   203bc:	e7ce      	b.n	2035c <signal_poll_event+0x1c>
	z_ready_thread(thread);
   203be:	f7ff fdd7 	bl	1ff70 <z_ready_thread>
		poller->is_polling = false;
   203c2:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   203c4:	e7cb      	b.n	2035e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   203c6:	2b02      	cmp	r3, #2
   203c8:	d1f7      	bne.n	203ba <signal_poll_event+0x7a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   203ca:	7823      	ldrb	r3, [r4, #0]
   203cc:	2b00      	cmp	r3, #0
   203ce:	d0c6      	beq.n	2035e <signal_poll_event+0x1e>
   203d0:	f854 7c04 	ldr.w	r7, [r4, #-4]
   203d4:	2f00      	cmp	r7, #0
   203d6:	d0f4      	beq.n	203c2 <signal_poll_event+0x82>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   203d8:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   203dc:	f1a4 0110 	sub.w	r1, r4, #16
   203e0:	f104 0010 	add.w	r0, r4, #16
   203e4:	9101      	str	r1, [sp, #4]
   203e6:	f7ff fece 	bl	20186 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   203ea:	4638      	mov	r0, r7
   203ec:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
   203ee:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   203f2:	f7ff ff91 	bl	20318 <k_work_submit_to_queue>
		poller->is_polling = false;
   203f6:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   203fa:	e7b0      	b.n	2035e <signal_poll_event+0x1e>

000203fc <add_event>:
{
   203fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   203fe:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   20400:	e9d0 2300 	ldrd	r2, r3, [r0]
   20404:	4290      	cmp	r0, r2
   20406:	4604      	mov	r4, r0
   20408:	460d      	mov	r5, r1
   2040a:	d106      	bne.n	2041a <add_event+0x1e>
	node->prev = list->tail;
   2040c:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2040e:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   20410:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   20412:	6863      	ldr	r3, [r4, #4]
   20414:	601d      	str	r5, [r3, #0]
	list->tail = node;
   20416:	6065      	str	r5, [r4, #4]
}
   20418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2041a:	2b00      	cmp	r3, #0
   2041c:	d0f6      	beq.n	2040c <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2041e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   20420:	b100      	cbz	r0, 20424 <add_event+0x28>
   20422:	3864      	subs	r0, #100	; 0x64
   20424:	b107      	cbz	r7, 20428 <add_event+0x2c>
   20426:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   20428:	4639      	mov	r1, r7
   2042a:	f7ff fd36 	bl	1fe9a <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2042e:	2800      	cmp	r0, #0
   20430:	d1ec      	bne.n	2040c <add_event+0x10>
	return list->head == list;
   20432:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20434:	42b4      	cmp	r4, r6
   20436:	d0e9      	beq.n	2040c <add_event+0x10>
   20438:	2e00      	cmp	r6, #0
   2043a:	bf38      	it	cc
   2043c:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2043e:	2e00      	cmp	r6, #0
   20440:	d0e4      	beq.n	2040c <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   20442:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   20444:	b101      	cbz	r1, 20448 <add_event+0x4c>
   20446:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   20448:	4638      	mov	r0, r7
   2044a:	f7ff fd26 	bl	1fe9a <z_is_t1_higher_prio_than_t2>
   2044e:	b128      	cbz	r0, 2045c <add_event+0x60>
	node->prev = successor->prev;
   20450:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   20452:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   20456:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   20458:	6075      	str	r5, [r6, #4]
			return;
   2045a:	e7dd      	b.n	20418 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2045c:	6863      	ldr	r3, [r4, #4]
   2045e:	42b3      	cmp	r3, r6
   20460:	d0d4      	beq.n	2040c <add_event+0x10>
   20462:	6836      	ldr	r6, [r6, #0]
   20464:	e7eb      	b.n	2043e <add_event+0x42>

00020466 <register_events>:
{
   20466:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2046a:	f04f 0a00 	mov.w	sl, #0
{
   2046e:	460e      	mov	r6, r1
   20470:	4614      	mov	r4, r2
   20472:	461f      	mov	r7, r3
   20474:	4683      	mov	fp, r0
	int events_registered = 0;
   20476:	4655      	mov	r5, sl
	event->poller = NULL;
   20478:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   2047a:	45b2      	cmp	sl, r6
   2047c:	db02      	blt.n	20484 <register_events+0x1e>
}
   2047e:	4628      	mov	r0, r5
   20480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20484:	f04f 0320 	mov.w	r3, #32
   20488:	f3ef 8911 	mrs	r9, BASEPRI
   2048c:	f383 8811 	msr	BASEPRI, r3
   20490:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   20494:	f89b 200d 	ldrb.w	r2, [fp, #13]
   20498:	f002 020f 	and.w	r2, r2, #15
   2049c:	2a02      	cmp	r2, #2
   2049e:	d006      	beq.n	204ae <register_events+0x48>
   204a0:	2a04      	cmp	r2, #4
   204a2:	d008      	beq.n	204b6 <register_events+0x50>
   204a4:	2a01      	cmp	r2, #1
   204a6:	d120      	bne.n	204ea <register_events+0x84>
		if (event->signal->signaled != 0U) {
   204a8:	f8db 3010 	ldr.w	r3, [fp, #16]
   204ac:	e001      	b.n	204b2 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   204ae:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   204b2:	689b      	ldr	r3, [r3, #8]
   204b4:	e002      	b.n	204bc <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   204b6:	f8db 3010 	ldr.w	r3, [fp, #16]
   204ba:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   204bc:	b1ab      	cbz	r3, 204ea <register_events+0x84>
	event->state |= state;
   204be:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   204c2:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   204c6:	f3c3 3104 	ubfx	r1, r3, #12, #5
   204ca:	430a      	orrs	r2, r1
   204cc:	f362 3310 	bfi	r3, r2, #12, #5
   204d0:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   204d4:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   204d8:	f389 8811 	msr	BASEPRI, r9
   204dc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   204e0:	f10a 0a01 	add.w	sl, sl, #1
   204e4:	f10b 0b14 	add.w	fp, fp, #20
   204e8:	e7c7      	b.n	2047a <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   204ea:	2f00      	cmp	r7, #0
   204ec:	d1f4      	bne.n	204d8 <register_events+0x72>
   204ee:	7823      	ldrb	r3, [r4, #0]
   204f0:	2b00      	cmp	r3, #0
   204f2:	d0f1      	beq.n	204d8 <register_events+0x72>
	switch (event->type) {
   204f4:	f89b 300d 	ldrb.w	r3, [fp, #13]
   204f8:	f003 030f 	and.w	r3, r3, #15
   204fc:	2b02      	cmp	r3, #2
   204fe:	d008      	beq.n	20512 <register_events+0xac>
   20500:	2b04      	cmp	r3, #4
   20502:	d006      	beq.n	20512 <register_events+0xac>
   20504:	2b01      	cmp	r3, #1
   20506:	d10b      	bne.n	20520 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   20508:	4622      	mov	r2, r4
   2050a:	4659      	mov	r1, fp
   2050c:	f8db 0010 	ldr.w	r0, [fp, #16]
   20510:	e004      	b.n	2051c <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   20512:	4622      	mov	r2, r4
   20514:	4659      	mov	r1, fp
   20516:	f8db 0010 	ldr.w	r0, [fp, #16]
   2051a:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2051c:	f7ff ff6e 	bl	203fc <add_event>
	event->poller = poller;
   20520:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   20524:	3501      	adds	r5, #1
   20526:	e7d7      	b.n	204d8 <register_events+0x72>

00020528 <z_handle_obj_poll_events>:
{
   20528:	4603      	mov	r3, r0
	return list->head == list;
   2052a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2052c:	4283      	cmp	r3, r0
   2052e:	d008      	beq.n	20542 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   20530:	e9d0 3200 	ldrd	r3, r2, [r0]
   20534:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20536:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20538:	2300      	movs	r3, #0
	node->prev = NULL;
   2053a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2053e:	f7ff beff 	b.w	20340 <signal_poll_event>
}
   20542:	4770      	bx	lr

00020544 <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   20544:	2904      	cmp	r1, #4
{
   20546:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   2054a:	460d      	mov	r5, r1
   2054c:	bf38      	it	cc
   2054e:	2504      	movcc	r5, #4
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   20550:	18aa      	adds	r2, r5, r2
{
   20552:	4606      	mov	r6, r0
   20554:	d209      	bcs.n	2056a <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   20556:	f04f 0800 	mov.w	r8, #0
   2055a:	f04f 0900 	mov.w	r9, #0
   2055e:	e9cd 8900 	strd	r8, r9, [sp]
   20562:	f7ff fb8c 	bl	1fc7e <k_heap_aligned_alloc>
	if (mem == NULL) {
   20566:	4604      	mov	r4, r0
   20568:	b918      	cbnz	r0, 20572 <z_heap_aligned_alloc+0x2e>
		return NULL;
   2056a:	2000      	movs	r0, #0
}
   2056c:	b002      	add	sp, #8
   2056e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
__ssp_bos_icheck3(memset, void *, int)
   20572:	462a      	mov	r2, r5
   20574:	21ff      	movs	r1, #255	; 0xff
   20576:	f000 f86d 	bl	20654 <memset>
	*heap_ref = heap;
   2057a:	6026      	str	r6, [r4, #0]
	return mem + excess;
   2057c:	1960      	adds	r0, r4, r5
   2057e:	e7f5      	b.n	2056c <z_heap_aligned_alloc+0x28>

00020580 <k_free>:
	if (ptr != NULL) {
   20580:	b138      	cbz	r0, 20592 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   20582:	1f03      	subs	r3, r0, #4
   20584:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   20586:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   2058a:	1c42      	adds	r2, r0, #1
   2058c:	d0fa      	beq.n	20584 <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   2058e:	f7ff bbbd 	b.w	1fd0c <k_heap_free>
}
   20592:	4770      	bx	lr

00020594 <k_calloc>:
{
   20594:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   20596:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   2059a:	b118      	cbz	r0, 205a4 <k_calloc+0x10>
   2059c:	fbb2 f0f0 	udiv	r0, r2, r0
   205a0:	4281      	cmp	r1, r0
   205a2:	d10d      	bne.n	205c0 <k_calloc+0x2c>
	return k_aligned_alloc(sizeof(void *), size);
   205a4:	4611      	mov	r1, r2
   205a6:	2004      	movs	r0, #4
   205a8:	9201      	str	r2, [sp, #4]
   205aa:	f7fa fbc7 	bl	1ad3c <k_aligned_alloc>
	if (ret != NULL) {
   205ae:	4604      	mov	r4, r0
   205b0:	b118      	cbz	r0, 205ba <k_calloc+0x26>
   205b2:	2100      	movs	r1, #0
   205b4:	9a01      	ldr	r2, [sp, #4]
   205b6:	f000 f84d 	bl	20654 <memset>
}
   205ba:	4620      	mov	r0, r4
   205bc:	b002      	add	sp, #8
   205be:	bd10      	pop	{r4, pc}
		return NULL;
   205c0:	2400      	movs	r4, #0
   205c2:	e7fa      	b.n	205ba <k_calloc+0x26>

000205c4 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   205c4:	4770      	bx	lr

000205c6 <atoi>:
   205c6:	220a      	movs	r2, #10
   205c8:	2100      	movs	r1, #0
   205ca:	f7fa bda3 	b.w	1b114 <strtol>

000205ce <__itoa>:
   205ce:	1e93      	subs	r3, r2, #2
   205d0:	2b22      	cmp	r3, #34	; 0x22
   205d2:	b510      	push	{r4, lr}
   205d4:	460c      	mov	r4, r1
   205d6:	d904      	bls.n	205e2 <__itoa+0x14>
   205d8:	2300      	movs	r3, #0
   205da:	461c      	mov	r4, r3
   205dc:	700b      	strb	r3, [r1, #0]
   205de:	4620      	mov	r0, r4
   205e0:	bd10      	pop	{r4, pc}
   205e2:	2a0a      	cmp	r2, #10
   205e4:	d109      	bne.n	205fa <__itoa+0x2c>
   205e6:	2800      	cmp	r0, #0
   205e8:	da07      	bge.n	205fa <__itoa+0x2c>
   205ea:	232d      	movs	r3, #45	; 0x2d
   205ec:	4240      	negs	r0, r0
   205ee:	700b      	strb	r3, [r1, #0]
   205f0:	2101      	movs	r1, #1
   205f2:	4421      	add	r1, r4
   205f4:	f7fa fe1c 	bl	1b230 <__utoa>
   205f8:	e7f1      	b.n	205de <__itoa+0x10>
   205fa:	2100      	movs	r1, #0
   205fc:	e7f9      	b.n	205f2 <__itoa+0x24>

000205fe <itoa>:
   205fe:	f7ff bfe6 	b.w	205ce <__itoa>

00020602 <memchr>:
   20602:	b2c9      	uxtb	r1, r1
   20604:	4402      	add	r2, r0
   20606:	b510      	push	{r4, lr}
   20608:	4290      	cmp	r0, r2
   2060a:	4603      	mov	r3, r0
   2060c:	d101      	bne.n	20612 <memchr+0x10>
   2060e:	2300      	movs	r3, #0
   20610:	e003      	b.n	2061a <memchr+0x18>
   20612:	781c      	ldrb	r4, [r3, #0]
   20614:	3001      	adds	r0, #1
   20616:	428c      	cmp	r4, r1
   20618:	d1f6      	bne.n	20608 <memchr+0x6>
   2061a:	4618      	mov	r0, r3
   2061c:	bd10      	pop	{r4, pc}

0002061e <memcmp>:
   2061e:	b530      	push	{r4, r5, lr}
   20620:	3901      	subs	r1, #1
   20622:	2400      	movs	r4, #0
   20624:	42a2      	cmp	r2, r4
   20626:	d101      	bne.n	2062c <memcmp+0xe>
   20628:	2000      	movs	r0, #0
   2062a:	e005      	b.n	20638 <memcmp+0x1a>
   2062c:	5d03      	ldrb	r3, [r0, r4]
   2062e:	3401      	adds	r4, #1
   20630:	5d0d      	ldrb	r5, [r1, r4]
   20632:	42ab      	cmp	r3, r5
   20634:	d0f6      	beq.n	20624 <memcmp+0x6>
   20636:	1b58      	subs	r0, r3, r5
   20638:	bd30      	pop	{r4, r5, pc}

0002063a <memcpy>:
   2063a:	440a      	add	r2, r1
   2063c:	1e43      	subs	r3, r0, #1
   2063e:	4291      	cmp	r1, r2
   20640:	d100      	bne.n	20644 <memcpy+0xa>
   20642:	4770      	bx	lr
   20644:	b510      	push	{r4, lr}
   20646:	f811 4b01 	ldrb.w	r4, [r1], #1
   2064a:	4291      	cmp	r1, r2
   2064c:	f803 4f01 	strb.w	r4, [r3, #1]!
   20650:	d1f9      	bne.n	20646 <memcpy+0xc>
   20652:	bd10      	pop	{r4, pc}

00020654 <memset>:
   20654:	4402      	add	r2, r0
   20656:	4603      	mov	r3, r0
   20658:	4293      	cmp	r3, r2
   2065a:	d100      	bne.n	2065e <memset+0xa>
   2065c:	4770      	bx	lr
   2065e:	f803 1b01 	strb.w	r1, [r3], #1
   20662:	e7f9      	b.n	20658 <memset+0x4>

00020664 <__sprintf_chk>:
   20664:	b408      	push	{r3}
   20666:	b517      	push	{r0, r1, r2, r4, lr}
   20668:	ab05      	add	r3, sp, #20
   2066a:	1e14      	subs	r4, r2, #0
   2066c:	f853 1b04 	ldr.w	r1, [r3], #4
   20670:	9301      	str	r3, [sp, #4]
   20672:	da07      	bge.n	20684 <__sprintf_chk+0x20>
   20674:	461a      	mov	r2, r3
   20676:	f7fa fe41 	bl	1b2fc <vsiprintf>
   2067a:	b003      	add	sp, #12
   2067c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20680:	b001      	add	sp, #4
   20682:	4770      	bx	lr
   20684:	460a      	mov	r2, r1
   20686:	4621      	mov	r1, r4
   20688:	f7fa fe14 	bl	1b2b4 <vsniprintf>
   2068c:	2800      	cmp	r0, #0
   2068e:	dbf4      	blt.n	2067a <__sprintf_chk+0x16>
   20690:	42a0      	cmp	r0, r4
   20692:	d3f2      	bcc.n	2067a <__sprintf_chk+0x16>
   20694:	f7f1 fbaa 	bl	11dec <__chk_fail>

00020698 <__seofread>:
   20698:	2000      	movs	r0, #0
   2069a:	4770      	bx	lr

0002069c <strcat>:
   2069c:	4602      	mov	r2, r0
   2069e:	b510      	push	{r4, lr}
   206a0:	7814      	ldrb	r4, [r2, #0]
   206a2:	4613      	mov	r3, r2
   206a4:	3201      	adds	r2, #1
   206a6:	2c00      	cmp	r4, #0
   206a8:	d1fa      	bne.n	206a0 <strcat+0x4>
   206aa:	3b01      	subs	r3, #1
   206ac:	f811 2b01 	ldrb.w	r2, [r1], #1
   206b0:	f803 2f01 	strb.w	r2, [r3, #1]!
   206b4:	2a00      	cmp	r2, #0
   206b6:	d1f9      	bne.n	206ac <strcat+0x10>
   206b8:	bd10      	pop	{r4, pc}

000206ba <strchr>:
   206ba:	b2c9      	uxtb	r1, r1
   206bc:	4603      	mov	r3, r0
   206be:	f810 2b01 	ldrb.w	r2, [r0], #1
   206c2:	b11a      	cbz	r2, 206cc <strchr+0x12>
   206c4:	428a      	cmp	r2, r1
   206c6:	d1f9      	bne.n	206bc <strchr+0x2>
   206c8:	4618      	mov	r0, r3
   206ca:	4770      	bx	lr
   206cc:	2900      	cmp	r1, #0
   206ce:	bf18      	it	ne
   206d0:	2300      	movne	r3, #0
   206d2:	e7f9      	b.n	206c8 <strchr+0xe>

000206d4 <strcpy>:
   206d4:	4603      	mov	r3, r0
   206d6:	f811 2b01 	ldrb.w	r2, [r1], #1
   206da:	f803 2b01 	strb.w	r2, [r3], #1
   206de:	2a00      	cmp	r2, #0
   206e0:	d1f9      	bne.n	206d6 <strcpy+0x2>
   206e2:	4770      	bx	lr

000206e4 <strncmp>:
   206e4:	b510      	push	{r4, lr}
   206e6:	b16a      	cbz	r2, 20704 <strncmp+0x20>
   206e8:	3901      	subs	r1, #1
   206ea:	1884      	adds	r4, r0, r2
   206ec:	f810 3b01 	ldrb.w	r3, [r0], #1
   206f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   206f4:	4293      	cmp	r3, r2
   206f6:	d103      	bne.n	20700 <strncmp+0x1c>
   206f8:	42a0      	cmp	r0, r4
   206fa:	d001      	beq.n	20700 <strncmp+0x1c>
   206fc:	2b00      	cmp	r3, #0
   206fe:	d1f5      	bne.n	206ec <strncmp+0x8>
   20700:	1a98      	subs	r0, r3, r2
   20702:	bd10      	pop	{r4, pc}
   20704:	4610      	mov	r0, r2
   20706:	e7fc      	b.n	20702 <strncmp+0x1e>

00020708 <strncpy>:
   20708:	3901      	subs	r1, #1
   2070a:	4603      	mov	r3, r0
   2070c:	b510      	push	{r4, lr}
   2070e:	b132      	cbz	r2, 2071e <strncpy+0x16>
   20710:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   20714:	3a01      	subs	r2, #1
   20716:	f803 4b01 	strb.w	r4, [r3], #1
   2071a:	2c00      	cmp	r4, #0
   2071c:	d1f7      	bne.n	2070e <strncpy+0x6>
   2071e:	441a      	add	r2, r3
   20720:	2100      	movs	r1, #0
   20722:	4293      	cmp	r3, r2
   20724:	d100      	bne.n	20728 <strncpy+0x20>
   20726:	bd10      	pop	{r4, pc}
   20728:	f803 1b01 	strb.w	r1, [r3], #1
   2072c:	e7f9      	b.n	20722 <strncpy+0x1a>

0002072e <strnlen>:
   2072e:	4602      	mov	r2, r0
   20730:	4401      	add	r1, r0
   20732:	b510      	push	{r4, lr}
   20734:	428a      	cmp	r2, r1
   20736:	4613      	mov	r3, r2
   20738:	d101      	bne.n	2073e <strnlen+0x10>
   2073a:	1a18      	subs	r0, r3, r0
   2073c:	bd10      	pop	{r4, pc}
   2073e:	781c      	ldrb	r4, [r3, #0]
   20740:	3201      	adds	r2, #1
   20742:	2c00      	cmp	r4, #0
   20744:	d1f6      	bne.n	20734 <strnlen+0x6>
   20746:	e7f8      	b.n	2073a <strnlen+0xc>

00020748 <strstr>:
   20748:	b5f0      	push	{r4, r5, r6, r7, lr}
   2074a:	780c      	ldrb	r4, [r1, #0]
   2074c:	b164      	cbz	r4, 20768 <strstr+0x20>
   2074e:	4603      	mov	r3, r0
   20750:	781a      	ldrb	r2, [r3, #0]
   20752:	4618      	mov	r0, r3
   20754:	1c5e      	adds	r6, r3, #1
   20756:	b90a      	cbnz	r2, 2075c <strstr+0x14>
   20758:	4610      	mov	r0, r2
   2075a:	e005      	b.n	20768 <strstr+0x20>
   2075c:	4294      	cmp	r4, r2
   2075e:	d108      	bne.n	20772 <strstr+0x2a>
   20760:	460d      	mov	r5, r1
   20762:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   20766:	b902      	cbnz	r2, 2076a <strstr+0x22>
   20768:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2076a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   2076e:	4297      	cmp	r7, r2
   20770:	d0f7      	beq.n	20762 <strstr+0x1a>
   20772:	4633      	mov	r3, r6
   20774:	e7ec      	b.n	20750 <strstr+0x8>

00020776 <_strtol_r>:
   20776:	f7fa bc55 	b.w	1b024 <_strtol_l.isra.0>

0002077a <_strtoul_r>:
   2077a:	f7fa bcd5 	b.w	1b128 <_strtoul_l.isra.0>

0002077e <_vsniprintf_r>:
   2077e:	b530      	push	{r4, r5, lr}
   20780:	1e14      	subs	r4, r2, #0
   20782:	4605      	mov	r5, r0
   20784:	b09b      	sub	sp, #108	; 0x6c
   20786:	4618      	mov	r0, r3
   20788:	da05      	bge.n	20796 <_vsniprintf_r+0x18>
   2078a:	238b      	movs	r3, #139	; 0x8b
   2078c:	f04f 30ff 	mov.w	r0, #4294967295
   20790:	602b      	str	r3, [r5, #0]
   20792:	b01b      	add	sp, #108	; 0x6c
   20794:	bd30      	pop	{r4, r5, pc}
   20796:	f44f 7302 	mov.w	r3, #520	; 0x208
   2079a:	4602      	mov	r2, r0
   2079c:	9100      	str	r1, [sp, #0]
   2079e:	4628      	mov	r0, r5
   207a0:	f8ad 300c 	strh.w	r3, [sp, #12]
   207a4:	bf14      	ite	ne
   207a6:	f104 33ff 	addne.w	r3, r4, #4294967295
   207aa:	4623      	moveq	r3, r4
   207ac:	9104      	str	r1, [sp, #16]
   207ae:	4669      	mov	r1, sp
   207b0:	9302      	str	r3, [sp, #8]
   207b2:	9305      	str	r3, [sp, #20]
   207b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   207b8:	f8ad 300e 	strh.w	r3, [sp, #14]
   207bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   207be:	f7fa fdb3 	bl	1b328 <_svfiprintf_r>
   207c2:	1c43      	adds	r3, r0, #1
   207c4:	bfbc      	itt	lt
   207c6:	238b      	movlt	r3, #139	; 0x8b
   207c8:	602b      	strlt	r3, [r5, #0]
   207ca:	2c00      	cmp	r4, #0
   207cc:	d0e1      	beq.n	20792 <_vsniprintf_r+0x14>
   207ce:	9b00      	ldr	r3, [sp, #0]
   207d0:	2200      	movs	r2, #0
   207d2:	701a      	strb	r2, [r3, #0]
   207d4:	e7dd      	b.n	20792 <_vsniprintf_r+0x14>

000207d6 <_realloc_r>:
   207d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   207d8:	4607      	mov	r7, r0
   207da:	4614      	mov	r4, r2
   207dc:	460e      	mov	r6, r1
   207de:	b921      	cbnz	r1, 207ea <_realloc_r+0x14>
   207e0:	4611      	mov	r1, r2
   207e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   207e6:	f7fa bb2b 	b.w	1ae40 <_malloc_r>
   207ea:	b922      	cbnz	r2, 207f6 <_realloc_r+0x20>
   207ec:	4625      	mov	r5, r4
   207ee:	f7fa fad7 	bl	1ada0 <_free_r>
   207f2:	4628      	mov	r0, r5
   207f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   207f6:	f000 f9c5 	bl	20b84 <_malloc_usable_size_r>
   207fa:	42a0      	cmp	r0, r4
   207fc:	d20f      	bcs.n	2081e <_realloc_r+0x48>
   207fe:	4621      	mov	r1, r4
   20800:	4638      	mov	r0, r7
   20802:	f7fa fb1d 	bl	1ae40 <_malloc_r>
   20806:	4605      	mov	r5, r0
   20808:	2800      	cmp	r0, #0
   2080a:	d0f2      	beq.n	207f2 <_realloc_r+0x1c>
   2080c:	4631      	mov	r1, r6
   2080e:	4622      	mov	r2, r4
   20810:	f7ff ff13 	bl	2063a <memcpy>
   20814:	4631      	mov	r1, r6
   20816:	4638      	mov	r0, r7
   20818:	f7fa fac2 	bl	1ada0 <_free_r>
   2081c:	e7e9      	b.n	207f2 <_realloc_r+0x1c>
   2081e:	4635      	mov	r5, r6
   20820:	e7e7      	b.n	207f2 <_realloc_r+0x1c>

00020822 <__ssputs_r>:
   20822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20826:	688e      	ldr	r6, [r1, #8]
   20828:	4682      	mov	sl, r0
   2082a:	460c      	mov	r4, r1
   2082c:	4690      	mov	r8, r2
   2082e:	429e      	cmp	r6, r3
   20830:	461f      	mov	r7, r3
   20832:	d838      	bhi.n	208a6 <__ssputs_r+0x84>
   20834:	898a      	ldrh	r2, [r1, #12]
   20836:	f412 6f90 	tst.w	r2, #1152	; 0x480
   2083a:	d032      	beq.n	208a2 <__ssputs_r+0x80>
   2083c:	6825      	ldr	r5, [r4, #0]
   2083e:	3301      	adds	r3, #1
   20840:	6909      	ldr	r1, [r1, #16]
   20842:	eba5 0901 	sub.w	r9, r5, r1
   20846:	6965      	ldr	r5, [r4, #20]
   20848:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2084c:	444b      	add	r3, r9
   2084e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   20852:	106d      	asrs	r5, r5, #1
   20854:	429d      	cmp	r5, r3
   20856:	bf38      	it	cc
   20858:	461d      	movcc	r5, r3
   2085a:	0553      	lsls	r3, r2, #21
   2085c:	d531      	bpl.n	208c2 <__ssputs_r+0xa0>
   2085e:	4629      	mov	r1, r5
   20860:	f7fa faee 	bl	1ae40 <_malloc_r>
   20864:	4606      	mov	r6, r0
   20866:	b950      	cbnz	r0, 2087e <__ssputs_r+0x5c>
   20868:	230c      	movs	r3, #12
   2086a:	f04f 30ff 	mov.w	r0, #4294967295
   2086e:	f8ca 3000 	str.w	r3, [sl]
   20872:	89a3      	ldrh	r3, [r4, #12]
   20874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20878:	81a3      	strh	r3, [r4, #12]
   2087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2087e:	464a      	mov	r2, r9
   20880:	6921      	ldr	r1, [r4, #16]
   20882:	f7ff feda 	bl	2063a <memcpy>
   20886:	89a3      	ldrh	r3, [r4, #12]
   20888:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   2088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   20890:	81a3      	strh	r3, [r4, #12]
   20892:	6126      	str	r6, [r4, #16]
   20894:	444e      	add	r6, r9
   20896:	6165      	str	r5, [r4, #20]
   20898:	eba5 0509 	sub.w	r5, r5, r9
   2089c:	6026      	str	r6, [r4, #0]
   2089e:	463e      	mov	r6, r7
   208a0:	60a5      	str	r5, [r4, #8]
   208a2:	42be      	cmp	r6, r7
   208a4:	d900      	bls.n	208a8 <__ssputs_r+0x86>
   208a6:	463e      	mov	r6, r7
   208a8:	4632      	mov	r2, r6
   208aa:	4641      	mov	r1, r8
   208ac:	6820      	ldr	r0, [r4, #0]
   208ae:	f000 f94f 	bl	20b50 <memmove>
   208b2:	68a3      	ldr	r3, [r4, #8]
   208b4:	6822      	ldr	r2, [r4, #0]
   208b6:	2000      	movs	r0, #0
   208b8:	1b9b      	subs	r3, r3, r6
   208ba:	4432      	add	r2, r6
   208bc:	60a3      	str	r3, [r4, #8]
   208be:	6022      	str	r2, [r4, #0]
   208c0:	e7db      	b.n	2087a <__ssputs_r+0x58>
   208c2:	462a      	mov	r2, r5
   208c4:	f7ff ff87 	bl	207d6 <_realloc_r>
   208c8:	4606      	mov	r6, r0
   208ca:	2800      	cmp	r0, #0
   208cc:	d1e1      	bne.n	20892 <__ssputs_r+0x70>
   208ce:	6921      	ldr	r1, [r4, #16]
   208d0:	4650      	mov	r0, sl
   208d2:	f7fa fa65 	bl	1ada0 <_free_r>
   208d6:	e7c7      	b.n	20868 <__ssputs_r+0x46>

000208d8 <_sungetc_r>:
   208d8:	b538      	push	{r3, r4, r5, lr}
   208da:	1c4b      	adds	r3, r1, #1
   208dc:	4614      	mov	r4, r2
   208de:	d103      	bne.n	208e8 <_sungetc_r+0x10>
   208e0:	f04f 35ff 	mov.w	r5, #4294967295
   208e4:	4628      	mov	r0, r5
   208e6:	bd38      	pop	{r3, r4, r5, pc}
   208e8:	8993      	ldrh	r3, [r2, #12]
   208ea:	b2cd      	uxtb	r5, r1
   208ec:	f023 0320 	bic.w	r3, r3, #32
   208f0:	8193      	strh	r3, [r2, #12]
   208f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   208f4:	6852      	ldr	r2, [r2, #4]
   208f6:	b18b      	cbz	r3, 2091c <_sungetc_r+0x44>
   208f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   208fa:	4293      	cmp	r3, r2
   208fc:	dd08      	ble.n	20910 <_sungetc_r+0x38>
   208fe:	6823      	ldr	r3, [r4, #0]
   20900:	1e5a      	subs	r2, r3, #1
   20902:	6022      	str	r2, [r4, #0]
   20904:	f803 5c01 	strb.w	r5, [r3, #-1]
   20908:	6863      	ldr	r3, [r4, #4]
   2090a:	3301      	adds	r3, #1
   2090c:	6063      	str	r3, [r4, #4]
   2090e:	e7e9      	b.n	208e4 <_sungetc_r+0xc>
   20910:	4621      	mov	r1, r4
   20912:	f000 f8e4 	bl	20ade <__submore>
   20916:	2800      	cmp	r0, #0
   20918:	d0f1      	beq.n	208fe <_sungetc_r+0x26>
   2091a:	e7e1      	b.n	208e0 <_sungetc_r+0x8>
   2091c:	6921      	ldr	r1, [r4, #16]
   2091e:	6823      	ldr	r3, [r4, #0]
   20920:	b151      	cbz	r1, 20938 <_sungetc_r+0x60>
   20922:	4299      	cmp	r1, r3
   20924:	d208      	bcs.n	20938 <_sungetc_r+0x60>
   20926:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   2092a:	42a9      	cmp	r1, r5
   2092c:	d104      	bne.n	20938 <_sungetc_r+0x60>
   2092e:	3b01      	subs	r3, #1
   20930:	3201      	adds	r2, #1
   20932:	6023      	str	r3, [r4, #0]
   20934:	6062      	str	r2, [r4, #4]
   20936:	e7d5      	b.n	208e4 <_sungetc_r+0xc>
   20938:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   2093c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   20940:	6363      	str	r3, [r4, #52]	; 0x34
   20942:	2303      	movs	r3, #3
   20944:	63a3      	str	r3, [r4, #56]	; 0x38
   20946:	4623      	mov	r3, r4
   20948:	f803 5f46 	strb.w	r5, [r3, #70]!
   2094c:	6023      	str	r3, [r4, #0]
   2094e:	2301      	movs	r3, #1
   20950:	e7dc      	b.n	2090c <_sungetc_r+0x34>

00020952 <__ssrefill_r>:
   20952:	b510      	push	{r4, lr}
   20954:	460c      	mov	r4, r1
   20956:	6b49      	ldr	r1, [r1, #52]	; 0x34
   20958:	b169      	cbz	r1, 20976 <__ssrefill_r+0x24>
   2095a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2095e:	4299      	cmp	r1, r3
   20960:	d001      	beq.n	20966 <__ssrefill_r+0x14>
   20962:	f7fa fa1d 	bl	1ada0 <_free_r>
   20966:	2000      	movs	r0, #0
   20968:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2096a:	6360      	str	r0, [r4, #52]	; 0x34
   2096c:	6063      	str	r3, [r4, #4]
   2096e:	b113      	cbz	r3, 20976 <__ssrefill_r+0x24>
   20970:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   20972:	6023      	str	r3, [r4, #0]
   20974:	bd10      	pop	{r4, pc}
   20976:	6923      	ldr	r3, [r4, #16]
   20978:	f04f 30ff 	mov.w	r0, #4294967295
   2097c:	6023      	str	r3, [r4, #0]
   2097e:	2300      	movs	r3, #0
   20980:	6063      	str	r3, [r4, #4]
   20982:	89a3      	ldrh	r3, [r4, #12]
   20984:	f043 0320 	orr.w	r3, r3, #32
   20988:	81a3      	strh	r3, [r4, #12]
   2098a:	e7f3      	b.n	20974 <__ssrefill_r+0x22>

0002098c <_printf_common>:
   2098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20990:	4616      	mov	r6, r2
   20992:	4699      	mov	r9, r3
   20994:	688a      	ldr	r2, [r1, #8]
   20996:	4607      	mov	r7, r0
   20998:	690b      	ldr	r3, [r1, #16]
   2099a:	460c      	mov	r4, r1
   2099c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   209a0:	4293      	cmp	r3, r2
   209a2:	bfb8      	it	lt
   209a4:	4613      	movlt	r3, r2
   209a6:	6033      	str	r3, [r6, #0]
   209a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   209ac:	b10a      	cbz	r2, 209b2 <_printf_common+0x26>
   209ae:	3301      	adds	r3, #1
   209b0:	6033      	str	r3, [r6, #0]
   209b2:	6823      	ldr	r3, [r4, #0]
   209b4:	0699      	lsls	r1, r3, #26
   209b6:	bf42      	ittt	mi
   209b8:	6833      	ldrmi	r3, [r6, #0]
   209ba:	3302      	addmi	r3, #2
   209bc:	6033      	strmi	r3, [r6, #0]
   209be:	6825      	ldr	r5, [r4, #0]
   209c0:	f015 0506 	ands.w	r5, r5, #6
   209c4:	d106      	bne.n	209d4 <_printf_common+0x48>
   209c6:	f104 0a19 	add.w	sl, r4, #25
   209ca:	68e3      	ldr	r3, [r4, #12]
   209cc:	6832      	ldr	r2, [r6, #0]
   209ce:	1a9b      	subs	r3, r3, r2
   209d0:	42ab      	cmp	r3, r5
   209d2:	dc29      	bgt.n	20a28 <_printf_common+0x9c>
   209d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   209d8:	1e13      	subs	r3, r2, #0
   209da:	6822      	ldr	r2, [r4, #0]
   209dc:	bf18      	it	ne
   209de:	2301      	movne	r3, #1
   209e0:	0692      	lsls	r2, r2, #26
   209e2:	d42e      	bmi.n	20a42 <_printf_common+0xb6>
   209e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   209e8:	4649      	mov	r1, r9
   209ea:	4638      	mov	r0, r7
   209ec:	47c0      	blx	r8
   209ee:	3001      	adds	r0, #1
   209f0:	d021      	beq.n	20a36 <_printf_common+0xaa>
   209f2:	6823      	ldr	r3, [r4, #0]
   209f4:	341a      	adds	r4, #26
   209f6:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   209fa:	f003 0306 	and.w	r3, r3, #6
   209fe:	6832      	ldr	r2, [r6, #0]
   20a00:	2600      	movs	r6, #0
   20a02:	2b04      	cmp	r3, #4
   20a04:	f854 3c12 	ldr.w	r3, [r4, #-18]
   20a08:	bf08      	it	eq
   20a0a:	1aad      	subeq	r5, r5, r2
   20a0c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   20a10:	bf14      	ite	ne
   20a12:	2500      	movne	r5, #0
   20a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   20a18:	4293      	cmp	r3, r2
   20a1a:	bfc4      	itt	gt
   20a1c:	1a9b      	subgt	r3, r3, r2
   20a1e:	18ed      	addgt	r5, r5, r3
   20a20:	42b5      	cmp	r5, r6
   20a22:	d11a      	bne.n	20a5a <_printf_common+0xce>
   20a24:	2000      	movs	r0, #0
   20a26:	e008      	b.n	20a3a <_printf_common+0xae>
   20a28:	2301      	movs	r3, #1
   20a2a:	4652      	mov	r2, sl
   20a2c:	4649      	mov	r1, r9
   20a2e:	4638      	mov	r0, r7
   20a30:	47c0      	blx	r8
   20a32:	3001      	adds	r0, #1
   20a34:	d103      	bne.n	20a3e <_printf_common+0xb2>
   20a36:	f04f 30ff 	mov.w	r0, #4294967295
   20a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20a3e:	3501      	adds	r5, #1
   20a40:	e7c3      	b.n	209ca <_printf_common+0x3e>
   20a42:	18e1      	adds	r1, r4, r3
   20a44:	1c5a      	adds	r2, r3, #1
   20a46:	2030      	movs	r0, #48	; 0x30
   20a48:	3302      	adds	r3, #2
   20a4a:	4422      	add	r2, r4
   20a4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   20a50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   20a54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   20a58:	e7c4      	b.n	209e4 <_printf_common+0x58>
   20a5a:	2301      	movs	r3, #1
   20a5c:	4622      	mov	r2, r4
   20a5e:	4649      	mov	r1, r9
   20a60:	4638      	mov	r0, r7
   20a62:	47c0      	blx	r8
   20a64:	3001      	adds	r0, #1
   20a66:	d0e6      	beq.n	20a36 <_printf_common+0xaa>
   20a68:	3601      	adds	r6, #1
   20a6a:	e7d9      	b.n	20a20 <_printf_common+0x94>

00020a6c <__sccl>:
   20a6c:	b570      	push	{r4, r5, r6, lr}
   20a6e:	780b      	ldrb	r3, [r1, #0]
   20a70:	4604      	mov	r4, r0
   20a72:	2b5e      	cmp	r3, #94	; 0x5e
   20a74:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   20a78:	bf13      	iteet	ne
   20a7a:	1c48      	addne	r0, r1, #1
   20a7c:	1c88      	addeq	r0, r1, #2
   20a7e:	784b      	ldrbeq	r3, [r1, #1]
   20a80:	2200      	movne	r2, #0
   20a82:	bf08      	it	eq
   20a84:	2201      	moveq	r2, #1
   20a86:	1e61      	subs	r1, r4, #1
   20a88:	f801 2f01 	strb.w	r2, [r1, #1]!
   20a8c:	42a9      	cmp	r1, r5
   20a8e:	d1fb      	bne.n	20a88 <__sccl+0x1c>
   20a90:	b90b      	cbnz	r3, 20a96 <__sccl+0x2a>
   20a92:	3801      	subs	r0, #1
   20a94:	bd70      	pop	{r4, r5, r6, pc}
   20a96:	f082 0101 	eor.w	r1, r2, #1
   20a9a:	1c42      	adds	r2, r0, #1
   20a9c:	54e1      	strb	r1, [r4, r3]
   20a9e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   20aa2:	1e56      	subs	r6, r2, #1
   20aa4:	4610      	mov	r0, r2
   20aa6:	2d2d      	cmp	r5, #45	; 0x2d
   20aa8:	d006      	beq.n	20ab8 <__sccl+0x4c>
   20aaa:	2d5d      	cmp	r5, #93	; 0x5d
   20aac:	d0f2      	beq.n	20a94 <__sccl+0x28>
   20aae:	b90d      	cbnz	r5, 20ab4 <__sccl+0x48>
   20ab0:	4630      	mov	r0, r6
   20ab2:	e7ef      	b.n	20a94 <__sccl+0x28>
   20ab4:	462b      	mov	r3, r5
   20ab6:	e7f0      	b.n	20a9a <__sccl+0x2e>
   20ab8:	7816      	ldrb	r6, [r2, #0]
   20aba:	2e5d      	cmp	r6, #93	; 0x5d
   20abc:	d0fa      	beq.n	20ab4 <__sccl+0x48>
   20abe:	42b3      	cmp	r3, r6
   20ac0:	dcf8      	bgt.n	20ab4 <__sccl+0x48>
   20ac2:	4618      	mov	r0, r3
   20ac4:	3001      	adds	r0, #1
   20ac6:	4286      	cmp	r6, r0
   20ac8:	5421      	strb	r1, [r4, r0]
   20aca:	dcfb      	bgt.n	20ac4 <__sccl+0x58>
   20acc:	43d8      	mvns	r0, r3
   20ace:	1c5d      	adds	r5, r3, #1
   20ad0:	3202      	adds	r2, #2
   20ad2:	4430      	add	r0, r6
   20ad4:	42b3      	cmp	r3, r6
   20ad6:	bfa8      	it	ge
   20ad8:	2000      	movge	r0, #0
   20ada:	182b      	adds	r3, r5, r0
   20adc:	e7df      	b.n	20a9e <__sccl+0x32>

00020ade <__submore>:
   20ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ae2:	460c      	mov	r4, r1
   20ae4:	6b49      	ldr	r1, [r1, #52]	; 0x34
   20ae6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   20aea:	4299      	cmp	r1, r3
   20aec:	d11a      	bne.n	20b24 <__submore+0x46>
   20aee:	f44f 6180 	mov.w	r1, #1024	; 0x400
   20af2:	f7fa f9a5 	bl	1ae40 <_malloc_r>
   20af6:	b918      	cbnz	r0, 20b00 <__submore+0x22>
   20af8:	f04f 30ff 	mov.w	r0, #4294967295
   20afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
   20b04:	6360      	str	r0, [r4, #52]	; 0x34
   20b06:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   20b0a:	63a3      	str	r3, [r4, #56]	; 0x38
   20b0c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   20b10:	7083      	strb	r3, [r0, #2]
   20b12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   20b16:	7043      	strb	r3, [r0, #1]
   20b18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   20b1c:	7003      	strb	r3, [r0, #0]
   20b1e:	6020      	str	r0, [r4, #0]
   20b20:	2000      	movs	r0, #0
   20b22:	e7eb      	b.n	20afc <__submore+0x1e>
   20b24:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   20b26:	0077      	lsls	r7, r6, #1
   20b28:	463a      	mov	r2, r7
   20b2a:	f7ff fe54 	bl	207d6 <_realloc_r>
   20b2e:	4605      	mov	r5, r0
   20b30:	2800      	cmp	r0, #0
   20b32:	d0e1      	beq.n	20af8 <__submore+0x1a>
   20b34:	eb00 0806 	add.w	r8, r0, r6
   20b38:	4601      	mov	r1, r0
   20b3a:	4632      	mov	r2, r6
   20b3c:	4640      	mov	r0, r8
   20b3e:	f7ff fd7c 	bl	2063a <memcpy>
   20b42:	f8c4 8000 	str.w	r8, [r4]
   20b46:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   20b4a:	e7e9      	b.n	20b20 <__submore+0x42>

00020b4c <__retarget_lock_acquire_recursive>:
   20b4c:	4770      	bx	lr

00020b4e <__retarget_lock_release_recursive>:
   20b4e:	4770      	bx	lr

00020b50 <memmove>:
   20b50:	4288      	cmp	r0, r1
   20b52:	b510      	push	{r4, lr}
   20b54:	eb01 0402 	add.w	r4, r1, r2
   20b58:	d902      	bls.n	20b60 <memmove+0x10>
   20b5a:	4284      	cmp	r4, r0
   20b5c:	4623      	mov	r3, r4
   20b5e:	d807      	bhi.n	20b70 <memmove+0x20>
   20b60:	1e43      	subs	r3, r0, #1
   20b62:	42a1      	cmp	r1, r4
   20b64:	d008      	beq.n	20b78 <memmove+0x28>
   20b66:	f811 2b01 	ldrb.w	r2, [r1], #1
   20b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
   20b6e:	e7f8      	b.n	20b62 <memmove+0x12>
   20b70:	4402      	add	r2, r0
   20b72:	4601      	mov	r1, r0
   20b74:	428a      	cmp	r2, r1
   20b76:	d100      	bne.n	20b7a <memmove+0x2a>
   20b78:	bd10      	pop	{r4, pc}
   20b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   20b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   20b82:	e7f7      	b.n	20b74 <memmove+0x24>

00020b84 <_malloc_usable_size_r>:
   20b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
   20b88:	1f18      	subs	r0, r3, #4
   20b8a:	2b00      	cmp	r3, #0
   20b8c:	bfbc      	itt	lt
   20b8e:	580b      	ldrlt	r3, [r1, r0]
   20b90:	18c0      	addlt	r0, r0, r3
   20b92:	4770      	bx	lr
