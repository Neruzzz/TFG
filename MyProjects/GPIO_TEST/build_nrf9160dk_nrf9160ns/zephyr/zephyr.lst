
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	200106e8 	.word	0x200106e8
    c004:	0000d6e9 	.word	0x0000d6e9
    c008:	0000fac3 	.word	0x0000fac3
    c00c:	0000d719 	.word	0x0000d719
    c010:	0000d719 	.word	0x0000d719
    c014:	0000d719 	.word	0x0000d719
    c018:	0000d719 	.word	0x0000d719
    c01c:	0000d719 	.word	0x0000d719
	...
    c02c:	0000d645 	.word	0x0000d645
    c030:	0000d719 	.word	0x0000d719
    c034:	00000000 	.word	0x00000000
    c038:	0000d5ed 	.word	0x0000d5ed
    c03c:	0000faa3 	.word	0x0000faa3

0000c040 <_irq_vector_table>:
    c040:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c050:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c060:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c070:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c080:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c090:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c0a0:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c0b0:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c0c0:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c0d0:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c0e0:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c0f0:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c100:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c110:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c120:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c130:	0000d6a9 0000d6a9 0000d6a9 0000d6a9     ................
    c140:	0000d6a9                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	000044a8 00000001 0000c000 0000c000     .D..............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c23c <__aeabi_uldivmod>:
    c23c:	b953      	cbnz	r3, c254 <__aeabi_uldivmod+0x18>
    c23e:	b94a      	cbnz	r2, c254 <__aeabi_uldivmod+0x18>
    c240:	2900      	cmp	r1, #0
    c242:	bf08      	it	eq
    c244:	2800      	cmpeq	r0, #0
    c246:	bf1c      	itt	ne
    c248:	f04f 31ff 	movne.w	r1, #4294967295
    c24c:	f04f 30ff 	movne.w	r0, #4294967295
    c250:	f000 b970 	b.w	c534 <__aeabi_idiv0>
    c254:	f1ad 0c08 	sub.w	ip, sp, #8
    c258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c25c:	f000 f806 	bl	c26c <__udivmoddi4>
    c260:	f8dd e004 	ldr.w	lr, [sp, #4]
    c264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c268:	b004      	add	sp, #16
    c26a:	4770      	bx	lr

0000c26c <__udivmoddi4>:
    c26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c270:	9e08      	ldr	r6, [sp, #32]
    c272:	460d      	mov	r5, r1
    c274:	4604      	mov	r4, r0
    c276:	468a      	mov	sl, r1
    c278:	2b00      	cmp	r3, #0
    c27a:	d17f      	bne.n	c37c <__udivmoddi4+0x110>
    c27c:	428a      	cmp	r2, r1
    c27e:	4617      	mov	r7, r2
    c280:	d941      	bls.n	c306 <__udivmoddi4+0x9a>
    c282:	fab2 f282 	clz	r2, r2
    c286:	b14a      	cbz	r2, c29c <__udivmoddi4+0x30>
    c288:	f1c2 0120 	rsb	r1, r2, #32
    c28c:	fa05 f302 	lsl.w	r3, r5, r2
    c290:	4097      	lsls	r7, r2
    c292:	4094      	lsls	r4, r2
    c294:	fa20 f101 	lsr.w	r1, r0, r1
    c298:	ea41 0a03 	orr.w	sl, r1, r3
    c29c:	ea4f 4817 	mov.w	r8, r7, lsr #16
    c2a0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    c2a4:	fa1f f987 	uxth.w	r9, r7
    c2a8:	fbba fef8 	udiv	lr, sl, r8
    c2ac:	fb08 a31e 	mls	r3, r8, lr, sl
    c2b0:	fb0e f109 	mul.w	r1, lr, r9
    c2b4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    c2b8:	4299      	cmp	r1, r3
    c2ba:	d906      	bls.n	c2ca <__udivmoddi4+0x5e>
    c2bc:	18fb      	adds	r3, r7, r3
    c2be:	d202      	bcs.n	c2c6 <__udivmoddi4+0x5a>
    c2c0:	4299      	cmp	r1, r3
    c2c2:	f200 8124 	bhi.w	c50e <__udivmoddi4+0x2a2>
    c2c6:	f10e 3eff 	add.w	lr, lr, #4294967295
    c2ca:	1a59      	subs	r1, r3, r1
    c2cc:	b2a3      	uxth	r3, r4
    c2ce:	fbb1 f0f8 	udiv	r0, r1, r8
    c2d2:	fb08 1110 	mls	r1, r8, r0, r1
    c2d6:	fb00 f909 	mul.w	r9, r0, r9
    c2da:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c2de:	45a1      	cmp	r9, r4
    c2e0:	d905      	bls.n	c2ee <__udivmoddi4+0x82>
    c2e2:	193c      	adds	r4, r7, r4
    c2e4:	d202      	bcs.n	c2ec <__udivmoddi4+0x80>
    c2e6:	45a1      	cmp	r9, r4
    c2e8:	f200 810e 	bhi.w	c508 <__udivmoddi4+0x29c>
    c2ec:	3801      	subs	r0, #1
    c2ee:	eba4 0409 	sub.w	r4, r4, r9
    c2f2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    c2f6:	2100      	movs	r1, #0
    c2f8:	b11e      	cbz	r6, c302 <__udivmoddi4+0x96>
    c2fa:	40d4      	lsrs	r4, r2
    c2fc:	2300      	movs	r3, #0
    c2fe:	e9c6 4300 	strd	r4, r3, [r6]
    c302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c306:	b902      	cbnz	r2, c30a <__udivmoddi4+0x9e>
    c308:	deff      	udf	#255	; 0xff
    c30a:	fab2 f282 	clz	r2, r2
    c30e:	2a00      	cmp	r2, #0
    c310:	d14f      	bne.n	c3b2 <__udivmoddi4+0x146>
    c312:	1bcb      	subs	r3, r1, r7
    c314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c318:	fa1f f887 	uxth.w	r8, r7
    c31c:	2101      	movs	r1, #1
    c31e:	0c25      	lsrs	r5, r4, #16
    c320:	fbb3 fcfe 	udiv	ip, r3, lr
    c324:	fb0e 301c 	mls	r0, lr, ip, r3
    c328:	462b      	mov	r3, r5
    c32a:	fb08 f90c 	mul.w	r9, r8, ip
    c32e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    c332:	45a9      	cmp	r9, r5
    c334:	d90a      	bls.n	c34c <__udivmoddi4+0xe0>
    c336:	197d      	adds	r5, r7, r5
    c338:	bf2c      	ite	cs
    c33a:	2301      	movcs	r3, #1
    c33c:	2300      	movcc	r3, #0
    c33e:	45a9      	cmp	r9, r5
    c340:	d902      	bls.n	c348 <__udivmoddi4+0xdc>
    c342:	2b00      	cmp	r3, #0
    c344:	f000 80d9 	beq.w	c4fa <__udivmoddi4+0x28e>
    c348:	f10c 3cff 	add.w	ip, ip, #4294967295
    c34c:	eba5 0509 	sub.w	r5, r5, r9
    c350:	b2a3      	uxth	r3, r4
    c352:	fbb5 f0fe 	udiv	r0, r5, lr
    c356:	fb0e 5510 	mls	r5, lr, r0, r5
    c35a:	fb08 f800 	mul.w	r8, r8, r0
    c35e:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    c362:	45a0      	cmp	r8, r4
    c364:	d905      	bls.n	c372 <__udivmoddi4+0x106>
    c366:	193c      	adds	r4, r7, r4
    c368:	d202      	bcs.n	c370 <__udivmoddi4+0x104>
    c36a:	45a0      	cmp	r8, r4
    c36c:	f200 80c9 	bhi.w	c502 <__udivmoddi4+0x296>
    c370:	3801      	subs	r0, #1
    c372:	eba4 0408 	sub.w	r4, r4, r8
    c376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c37a:	e7bd      	b.n	c2f8 <__udivmoddi4+0x8c>
    c37c:	428b      	cmp	r3, r1
    c37e:	d908      	bls.n	c392 <__udivmoddi4+0x126>
    c380:	2e00      	cmp	r6, #0
    c382:	f000 80b1 	beq.w	c4e8 <__udivmoddi4+0x27c>
    c386:	2100      	movs	r1, #0
    c388:	e9c6 0500 	strd	r0, r5, [r6]
    c38c:	4608      	mov	r0, r1
    c38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c392:	fab3 f183 	clz	r1, r3
    c396:	2900      	cmp	r1, #0
    c398:	d146      	bne.n	c428 <__udivmoddi4+0x1bc>
    c39a:	42ab      	cmp	r3, r5
    c39c:	f0c0 80a7 	bcc.w	c4ee <__udivmoddi4+0x282>
    c3a0:	4282      	cmp	r2, r0
    c3a2:	f240 80a4 	bls.w	c4ee <__udivmoddi4+0x282>
    c3a6:	4608      	mov	r0, r1
    c3a8:	2e00      	cmp	r6, #0
    c3aa:	d0aa      	beq.n	c302 <__udivmoddi4+0x96>
    c3ac:	e9c6 4a00 	strd	r4, sl, [r6]
    c3b0:	e7a7      	b.n	c302 <__udivmoddi4+0x96>
    c3b2:	f1c2 0020 	rsb	r0, r2, #32
    c3b6:	4097      	lsls	r7, r2
    c3b8:	fa01 f302 	lsl.w	r3, r1, r2
    c3bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c3c0:	40c1      	lsrs	r1, r0
    c3c2:	fa24 f500 	lsr.w	r5, r4, r0
    c3c6:	fa1f f887 	uxth.w	r8, r7
    c3ca:	4094      	lsls	r4, r2
    c3cc:	431d      	orrs	r5, r3
    c3ce:	fbb1 f0fe 	udiv	r0, r1, lr
    c3d2:	0c2b      	lsrs	r3, r5, #16
    c3d4:	fb0e 1110 	mls	r1, lr, r0, r1
    c3d8:	fb00 fc08 	mul.w	ip, r0, r8
    c3dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c3e0:	459c      	cmp	ip, r3
    c3e2:	d909      	bls.n	c3f8 <__udivmoddi4+0x18c>
    c3e4:	18fb      	adds	r3, r7, r3
    c3e6:	bf2c      	ite	cs
    c3e8:	2101      	movcs	r1, #1
    c3ea:	2100      	movcc	r1, #0
    c3ec:	459c      	cmp	ip, r3
    c3ee:	d902      	bls.n	c3f6 <__udivmoddi4+0x18a>
    c3f0:	2900      	cmp	r1, #0
    c3f2:	f000 8095 	beq.w	c520 <__udivmoddi4+0x2b4>
    c3f6:	3801      	subs	r0, #1
    c3f8:	eba3 030c 	sub.w	r3, r3, ip
    c3fc:	b2ad      	uxth	r5, r5
    c3fe:	fbb3 f1fe 	udiv	r1, r3, lr
    c402:	fb0e 3311 	mls	r3, lr, r1, r3
    c406:	fb01 fc08 	mul.w	ip, r1, r8
    c40a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    c40e:	45ac      	cmp	ip, r5
    c410:	d905      	bls.n	c41e <__udivmoddi4+0x1b2>
    c412:	197d      	adds	r5, r7, r5
    c414:	d202      	bcs.n	c41c <__udivmoddi4+0x1b0>
    c416:	45ac      	cmp	ip, r5
    c418:	f200 8089 	bhi.w	c52e <__udivmoddi4+0x2c2>
    c41c:	3901      	subs	r1, #1
    c41e:	eba5 030c 	sub.w	r3, r5, ip
    c422:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c426:	e77a      	b.n	c31e <__udivmoddi4+0xb2>
    c428:	f1c1 0420 	rsb	r4, r1, #32
    c42c:	408b      	lsls	r3, r1
    c42e:	fa02 f701 	lsl.w	r7, r2, r1
    c432:	fa05 fc01 	lsl.w	ip, r5, r1
    c436:	40e2      	lsrs	r2, r4
    c438:	fa20 f804 	lsr.w	r8, r0, r4
    c43c:	40e5      	lsrs	r5, r4
    c43e:	fa00 fe01 	lsl.w	lr, r0, r1
    c442:	4313      	orrs	r3, r2
    c444:	ea48 020c 	orr.w	r2, r8, ip
    c448:	ea4f 4813 	mov.w	r8, r3, lsr #16
    c44c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    c450:	fa1f f983 	uxth.w	r9, r3
    c454:	fbb5 faf8 	udiv	sl, r5, r8
    c458:	fb08 551a 	mls	r5, r8, sl, r5
    c45c:	fb0a f009 	mul.w	r0, sl, r9
    c460:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
    c464:	4560      	cmp	r0, ip
    c466:	d90a      	bls.n	c47e <__udivmoddi4+0x212>
    c468:	eb13 0c0c 	adds.w	ip, r3, ip
    c46c:	bf2c      	ite	cs
    c46e:	2501      	movcs	r5, #1
    c470:	2500      	movcc	r5, #0
    c472:	4560      	cmp	r0, ip
    c474:	d901      	bls.n	c47a <__udivmoddi4+0x20e>
    c476:	2d00      	cmp	r5, #0
    c478:	d055      	beq.n	c526 <__udivmoddi4+0x2ba>
    c47a:	f10a 3aff 	add.w	sl, sl, #4294967295
    c47e:	ebac 0c00 	sub.w	ip, ip, r0
    c482:	b292      	uxth	r2, r2
    c484:	fbbc f0f8 	udiv	r0, ip, r8
    c488:	fb08 cc10 	mls	ip, r8, r0, ip
    c48c:	fb00 f909 	mul.w	r9, r0, r9
    c490:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c494:	45e1      	cmp	r9, ip
    c496:	d905      	bls.n	c4a4 <__udivmoddi4+0x238>
    c498:	eb13 0c0c 	adds.w	ip, r3, ip
    c49c:	d201      	bcs.n	c4a2 <__udivmoddi4+0x236>
    c49e:	45e1      	cmp	r9, ip
    c4a0:	d83b      	bhi.n	c51a <__udivmoddi4+0x2ae>
    c4a2:	3801      	subs	r0, #1
    c4a4:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c4a8:	ebac 0c09 	sub.w	ip, ip, r9
    c4ac:	fba0 8907 	umull	r8, r9, r0, r7
    c4b0:	45cc      	cmp	ip, r9
    c4b2:	4645      	mov	r5, r8
    c4b4:	464a      	mov	r2, r9
    c4b6:	d302      	bcc.n	c4be <__udivmoddi4+0x252>
    c4b8:	d106      	bne.n	c4c8 <__udivmoddi4+0x25c>
    c4ba:	45c6      	cmp	lr, r8
    c4bc:	d204      	bcs.n	c4c8 <__udivmoddi4+0x25c>
    c4be:	3801      	subs	r0, #1
    c4c0:	ebb8 0507 	subs.w	r5, r8, r7
    c4c4:	eb69 0203 	sbc.w	r2, r9, r3
    c4c8:	b32e      	cbz	r6, c516 <__udivmoddi4+0x2aa>
    c4ca:	ebbe 0305 	subs.w	r3, lr, r5
    c4ce:	eb6c 0c02 	sbc.w	ip, ip, r2
    c4d2:	fa23 f201 	lsr.w	r2, r3, r1
    c4d6:	fa0c f404 	lsl.w	r4, ip, r4
    c4da:	fa2c f301 	lsr.w	r3, ip, r1
    c4de:	2100      	movs	r1, #0
    c4e0:	4314      	orrs	r4, r2
    c4e2:	e9c6 4300 	strd	r4, r3, [r6]
    c4e6:	e70c      	b.n	c302 <__udivmoddi4+0x96>
    c4e8:	4631      	mov	r1, r6
    c4ea:	4630      	mov	r0, r6
    c4ec:	e709      	b.n	c302 <__udivmoddi4+0x96>
    c4ee:	1a84      	subs	r4, r0, r2
    c4f0:	eb65 0303 	sbc.w	r3, r5, r3
    c4f4:	2001      	movs	r0, #1
    c4f6:	469a      	mov	sl, r3
    c4f8:	e756      	b.n	c3a8 <__udivmoddi4+0x13c>
    c4fa:	f1ac 0c02 	sub.w	ip, ip, #2
    c4fe:	443d      	add	r5, r7
    c500:	e724      	b.n	c34c <__udivmoddi4+0xe0>
    c502:	3802      	subs	r0, #2
    c504:	443c      	add	r4, r7
    c506:	e734      	b.n	c372 <__udivmoddi4+0x106>
    c508:	3802      	subs	r0, #2
    c50a:	443c      	add	r4, r7
    c50c:	e6ef      	b.n	c2ee <__udivmoddi4+0x82>
    c50e:	f1ae 0e02 	sub.w	lr, lr, #2
    c512:	443b      	add	r3, r7
    c514:	e6d9      	b.n	c2ca <__udivmoddi4+0x5e>
    c516:	4631      	mov	r1, r6
    c518:	e6f3      	b.n	c302 <__udivmoddi4+0x96>
    c51a:	3802      	subs	r0, #2
    c51c:	449c      	add	ip, r3
    c51e:	e7c1      	b.n	c4a4 <__udivmoddi4+0x238>
    c520:	3802      	subs	r0, #2
    c522:	443b      	add	r3, r7
    c524:	e768      	b.n	c3f8 <__udivmoddi4+0x18c>
    c526:	f1aa 0a02 	sub.w	sl, sl, #2
    c52a:	449c      	add	ip, r3
    c52c:	e7a7      	b.n	c47e <__udivmoddi4+0x212>
    c52e:	3902      	subs	r1, #2
    c530:	443d      	add	r5, r7
    c532:	e774      	b.n	c41e <__udivmoddi4+0x1b2>

0000c534 <__aeabi_idiv0>:
    c534:	4770      	bx	lr
    c536:	bf00      	nop

0000c538 <main>:
#define BATT_SUPPLY 15
#define BATT_CHARGE 16
#define P_GOOD 19


void main(void){
    c538:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    c53a:	4813      	ldr	r0, [pc, #76]	; (c588 <main+0x50>)
    c53c:	f002 f90e 	bl	e75c <z_impl_device_get_binding>
    c540:	4604      	mov	r4, r0
  struct device *dev;
  dev = device_get_binding("GPIO_0");
  gpio_pin_configure(dev, BATT_SUPPLY, GPIO_INPUT );
    c542:	210f      	movs	r1, #15
    c544:	f002 ffe6 	bl	f514 <gpio_pin_configure.constprop.0>
  gpio_pin_configure(dev, BATT_CHARGE, GPIO_INPUT);
    c548:	2110      	movs	r1, #16
    c54a:	4620      	mov	r0, r4
    c54c:	f002 ffe2 	bl	f514 <gpio_pin_configure.constprop.0>
  gpio_pin_configure(dev, P_GOOD, GPIO_INPUT);
    c550:	2113      	movs	r1, #19
    c552:	4620      	mov	r0, r4
    c554:	f002 ffde 	bl	f514 <gpio_pin_configure.constprop.0>

  while(1){
    printk("result: %d \n", gpio_pin_get(dev, BATT_SUPPLY));
    c558:	4d0c      	ldr	r5, [pc, #48]	; (c58c <main+0x54>)
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_port_get(const struct device *port,
				gpio_port_value_t *value)
{
	const struct gpio_driver_data *const data =
    c55a:	68e6      	ldr	r6, [r4, #12]
	return api->port_get_raw(port, value);
    c55c:	68a3      	ldr	r3, [r4, #8]
    c55e:	a901      	add	r1, sp, #4
    c560:	4620      	mov	r0, r4
    c562:	685b      	ldr	r3, [r3, #4]
    c564:	4798      	blx	r3
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
    c566:	4601      	mov	r1, r0
    c568:	b920      	cbnz	r0, c574 <main+0x3c>
		*value ^= data->invert;
    c56a:	6830      	ldr	r0, [r6, #0]
    c56c:	9901      	ldr	r1, [sp, #4]
    c56e:	4041      	eors	r1, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    c570:	f3c1 31c0 	ubfx	r1, r1, #15, #1
    c574:	4628      	mov	r0, r5
    c576:	f002 fffe 	bl	f576 <printk>
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    c57a:	2100      	movs	r1, #0
    c57c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    c580:	f002 fd1a 	bl	efb8 <z_impl_k_sleep>
  while(1){
    c584:	e7e9      	b.n	c55a <main+0x22>
    c586:	bf00      	nop
    c588:	00010338 	.word	0x00010338
    c58c:	0001033f 	.word	0x0001033f

0000c590 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    c590:	680b      	ldr	r3, [r1, #0]
    c592:	3301      	adds	r3, #1
    c594:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    c596:	4b01      	ldr	r3, [pc, #4]	; (c59c <char_out+0xc>)
    c598:	681b      	ldr	r3, [r3, #0]
    c59a:	4718      	bx	r3
    c59c:	20010000 	.word	0x20010000

0000c5a0 <__printk_hook_install>:
	_char_out = fn;
    c5a0:	4b01      	ldr	r3, [pc, #4]	; (c5a8 <__printk_hook_install+0x8>)
    c5a2:	6018      	str	r0, [r3, #0]
}
    c5a4:	4770      	bx	lr
    c5a6:	bf00      	nop
    c5a8:	20010000 	.word	0x20010000

0000c5ac <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    c5ac:	b507      	push	{r0, r1, r2, lr}
    c5ae:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    c5b0:	2100      	movs	r1, #0
{
    c5b2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    c5b4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    c5b6:	4803      	ldr	r0, [pc, #12]	; (c5c4 <vprintk+0x18>)
    c5b8:	a901      	add	r1, sp, #4
    c5ba:	f000 f8eb 	bl	c794 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    c5be:	b003      	add	sp, #12
    c5c0:	f85d fb04 	ldr.w	pc, [sp], #4
    c5c4:	0000c591 	.word	0x0000c591

0000c5c8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    c5c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c5cc:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    c5d0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    c5d2:	f019 0808 	ands.w	r8, r9, #8
{
    c5d6:	4693      	mov	fp, r2
	if (processing) {
    c5d8:	d00d      	beq.n	c5f6 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    c5da:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    c5dc:	bf0c      	ite	eq
    c5de:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    c5e2:	f049 0920 	orrne.w	r9, r9, #32
    c5e6:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    c5ea:	f38b 8811 	msr	BASEPRI, fp
    c5ee:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    c5f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c5f6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    c5fa:	2902      	cmp	r1, #2
    c5fc:	d107      	bne.n	c60e <process_event+0x46>
			evt = process_recheck(mgr);
    c5fe:	4620      	mov	r0, r4
    c600:	f002 ffc6 	bl	f590 <process_recheck>
		if (evt == EVT_NOP) {
    c604:	2800      	cmp	r0, #0
    c606:	d0f0      	beq.n	c5ea <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    c608:	2801      	cmp	r0, #1
    c60a:	8b23      	ldrh	r3, [r4, #24]
    c60c:	d150      	bne.n	c6b0 <process_event+0xe8>
			res = mgr->last_res;
    c60e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c610:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    c612:	2f00      	cmp	r7, #0
    c614:	da15      	bge.n	c642 <process_event+0x7a>
		*clients = mgr->clients;
    c616:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c618:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    c61c:	e9c4 8800 	strd	r8, r8, [r4]
    c620:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    c624:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    c626:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    c628:	8b21      	ldrh	r1, [r4, #24]
    c62a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    c62e:	45ca      	cmp	sl, r9
    c630:	d002      	beq.n	c638 <process_event+0x70>
		if (do_monitors
    c632:	68a3      	ldr	r3, [r4, #8]
    c634:	2b00      	cmp	r3, #0
    c636:	d15c      	bne.n	c6f2 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    c638:	b90d      	cbnz	r5, c63e <process_event+0x76>
		    || (transit != NULL)) {
    c63a:	2e00      	cmp	r6, #0
    c63c:	d074      	beq.n	c728 <process_event+0x160>
    c63e:	2300      	movs	r3, #0
    c640:	e058      	b.n	c6f4 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c642:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    c646:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    c648:	2a01      	cmp	r2, #1
    c64a:	d820      	bhi.n	c68e <process_event+0xc6>
		*clients = mgr->clients;
    c64c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    c650:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    c652:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    c654:	b289      	uxth	r1, r1
	list->tail = NULL;
    c656:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    c65a:	d10c      	bne.n	c676 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    c65c:	2d00      	cmp	r5, #0
    c65e:	462b      	mov	r3, r5
    c660:	bf38      	it	cc
    c662:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    c664:	b12b      	cbz	r3, c672 <process_event+0xaa>
				mgr->refs += 1U;
    c666:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c668:	681b      	ldr	r3, [r3, #0]
    c66a:	3201      	adds	r2, #1
    c66c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    c66e:	2b00      	cmp	r3, #0
    c670:	d1f8      	bne.n	c664 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c672:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    c676:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    c678:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    c67a:	f002 ff89 	bl	f590 <process_recheck>
    c67e:	4606      	mov	r6, r0
    c680:	2800      	cmp	r0, #0
    c682:	d0d1      	beq.n	c628 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    c684:	8b23      	ldrh	r3, [r4, #24]
    c686:	f043 0320 	orr.w	r3, r3, #32
    c68a:	8323      	strh	r3, [r4, #24]
    c68c:	e7cb      	b.n	c626 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    c68e:	2b04      	cmp	r3, #4
    c690:	d10c      	bne.n	c6ac <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c692:	f021 0107 	bic.w	r1, r1, #7
    c696:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    c698:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    c69a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    c69c:	f002 ff78 	bl	f590 <process_recheck>
    c6a0:	4605      	mov	r5, r0
    c6a2:	2800      	cmp	r0, #0
    c6a4:	d0bf      	beq.n	c626 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    c6a6:	f041 0120 	orr.w	r1, r1, #32
    c6aa:	8321      	strh	r1, [r4, #24]
    c6ac:	2500      	movs	r5, #0
    c6ae:	e7ba      	b.n	c626 <process_event+0x5e>
		} else if (evt == EVT_START) {
    c6b0:	2803      	cmp	r0, #3
    c6b2:	d109      	bne.n	c6c8 <process_event+0x100>
			transit = mgr->transitions->start;
    c6b4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c6b6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    c6ba:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c6bc:	f043 0306 	orr.w	r3, r3, #6
}
    c6c0:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    c6c2:	8323      	strh	r3, [r4, #24]
		res = 0;
    c6c4:	462f      	mov	r7, r5
    c6c6:	e7af      	b.n	c628 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    c6c8:	2804      	cmp	r0, #4
    c6ca:	d106      	bne.n	c6da <process_event+0x112>
			transit = mgr->transitions->stop;
    c6cc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c6ce:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    c6d2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c6d4:	f043 0304 	orr.w	r3, r3, #4
    c6d8:	e7f2      	b.n	c6c0 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    c6da:	2805      	cmp	r0, #5
    c6dc:	d106      	bne.n	c6ec <process_event+0x124>
			transit = mgr->transitions->reset;
    c6de:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c6e0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    c6e4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c6e6:	f043 0305 	orr.w	r3, r3, #5
    c6ea:	e7e9      	b.n	c6c0 <process_event+0xf8>
    c6ec:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    c6ee:	462e      	mov	r6, r5
    c6f0:	e7e8      	b.n	c6c4 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    c6f2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    c6f4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    c6f8:	8321      	strh	r1, [r4, #24]
    c6fa:	f38b 8811 	msr	BASEPRI, fp
    c6fe:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    c702:	bb03      	cbnz	r3, c746 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    c704:	2d00      	cmp	r5, #0
    c706:	d133      	bne.n	c770 <process_event+0x1a8>
			if (transit != NULL) {
    c708:	b116      	cbz	r6, c710 <process_event+0x148>
				transit(mgr, transition_complete);
    c70a:	4620      	mov	r0, r4
    c70c:	4920      	ldr	r1, [pc, #128]	; (c790 <process_event+0x1c8>)
    c70e:	47b0      	blx	r6
	__asm__ volatile(
    c710:	f04f 0320 	mov.w	r3, #32
    c714:	f3ef 8b11 	mrs	fp, BASEPRI
    c718:	f383 8811 	msr	BASEPRI, r3
    c71c:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    c720:	8b23      	ldrh	r3, [r4, #24]
    c722:	f023 0308 	bic.w	r3, r3, #8
    c726:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    c728:	8b23      	ldrh	r3, [r4, #24]
    c72a:	06da      	lsls	r2, r3, #27
    c72c:	d528      	bpl.n	c780 <process_event+0x1b8>
			evt = EVT_COMPLETE;
    c72e:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    c730:	f023 0310 	bic.w	r3, r3, #16
    c734:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    c736:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    c73a:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    c73e:	2900      	cmp	r1, #0
    c740:	f47f af5b 	bne.w	c5fa <process_event+0x32>
out:
    c744:	e751      	b.n	c5ea <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    c746:	68a1      	ldr	r1, [r4, #8]
    c748:	2900      	cmp	r1, #0
    c74a:	d0db      	beq.n	c704 <process_event+0x13c>
	return node->next;
    c74c:	680b      	ldr	r3, [r1, #0]
    c74e:	2b00      	cmp	r3, #0
    c750:	bf38      	it	cc
    c752:	2300      	movcc	r3, #0
    c754:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
    c756:	4652      	mov	r2, sl
    c758:	463b      	mov	r3, r7
    c75a:	4620      	mov	r0, r4
    c75c:	f8d1 b004 	ldr.w	fp, [r1, #4]
    c760:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    c762:	f1b9 0f00 	cmp.w	r9, #0
    c766:	d0cd      	beq.n	c704 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c768:	4649      	mov	r1, r9
    c76a:	f8d9 3000 	ldr.w	r3, [r9]
    c76e:	e7ee      	b.n	c74e <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    c770:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    c772:	463b      	mov	r3, r7
    c774:	4652      	mov	r2, sl
    c776:	4620      	mov	r0, r4
    c778:	682d      	ldr	r5, [r5, #0]
    c77a:	f002 ff25 	bl	f5c8 <notify_one>
    c77e:	e7c1      	b.n	c704 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    c780:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    c784:	bf1e      	ittt	ne
    c786:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    c78a:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    c78c:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    c78e:	e7d2      	b.n	c736 <process_event+0x16e>
    c790:	0000f5f5 	.word	0x0000f5f5

0000c794 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    c794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c798:	468b      	mov	fp, r1
    c79a:	4692      	mov	sl, r2
    c79c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    c79e:	2500      	movs	r5, #0
{
    c7a0:	b091      	sub	sp, #68	; 0x44
    c7a2:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    c7a4:	f89a 0000 	ldrb.w	r0, [sl]
    c7a8:	b908      	cbnz	r0, c7ae <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    c7aa:	4628      	mov	r0, r5
    c7ac:	e35e      	b.n	ce6c <cbvprintf+0x6d8>
		if (*fp != '%') {
    c7ae:	2825      	cmp	r0, #37	; 0x25
    c7b0:	f10a 0701 	add.w	r7, sl, #1
    c7b4:	d007      	beq.n	c7c6 <cbvprintf+0x32>
			OUTC('%');
    c7b6:	4659      	mov	r1, fp
    c7b8:	9b02      	ldr	r3, [sp, #8]
    c7ba:	4798      	blx	r3
    c7bc:	2800      	cmp	r0, #0
    c7be:	f2c0 8355 	blt.w	ce6c <cbvprintf+0x6d8>
    c7c2:	3501      	adds	r5, #1
			break;
    c7c4:	e210      	b.n	cbe8 <cbvprintf+0x454>
		} state = {
    c7c6:	2218      	movs	r2, #24
    c7c8:	2100      	movs	r1, #0
    c7ca:	a80a      	add	r0, sp, #40	; 0x28
    c7cc:	f003 f9fd 	bl	fbca <memset>
	if (*sp == '%') {
    c7d0:	f89a 3001 	ldrb.w	r3, [sl, #1]
    c7d4:	2b25      	cmp	r3, #37	; 0x25
    c7d6:	d078      	beq.n	c8ca <cbvprintf+0x136>
    c7d8:	2200      	movs	r2, #0
    c7da:	4694      	mov	ip, r2
    c7dc:	4616      	mov	r6, r2
    c7de:	4696      	mov	lr, r2
    c7e0:	4610      	mov	r0, r2
    c7e2:	4639      	mov	r1, r7
		switch (*sp) {
    c7e4:	f817 3b01 	ldrb.w	r3, [r7], #1
    c7e8:	2b2b      	cmp	r3, #43	; 0x2b
    c7ea:	f000 809d 	beq.w	c928 <cbvprintf+0x194>
    c7ee:	f200 8094 	bhi.w	c91a <cbvprintf+0x186>
    c7f2:	2b20      	cmp	r3, #32
    c7f4:	f000 809b 	beq.w	c92e <cbvprintf+0x19a>
    c7f8:	2b23      	cmp	r3, #35	; 0x23
    c7fa:	f000 809a 	beq.w	c932 <cbvprintf+0x19e>
    c7fe:	b128      	cbz	r0, c80c <cbvprintf+0x78>
    c800:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    c804:	f040 0004 	orr.w	r0, r0, #4
    c808:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    c80c:	f1be 0f00 	cmp.w	lr, #0
    c810:	d005      	beq.n	c81e <cbvprintf+0x8a>
    c812:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    c816:	f040 0008 	orr.w	r0, r0, #8
    c81a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    c81e:	b12e      	cbz	r6, c82c <cbvprintf+0x98>
    c820:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    c824:	f040 0010 	orr.w	r0, r0, #16
    c828:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    c82c:	f1bc 0f00 	cmp.w	ip, #0
    c830:	d005      	beq.n	c83e <cbvprintf+0xaa>
    c832:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    c836:	f040 0020 	orr.w	r0, r0, #32
    c83a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    c83e:	b12a      	cbz	r2, c84c <cbvprintf+0xb8>
    c840:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    c844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c848:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    c84c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    c850:	f002 0044 	and.w	r0, r2, #68	; 0x44
    c854:	2844      	cmp	r0, #68	; 0x44
    c856:	d103      	bne.n	c860 <cbvprintf+0xcc>
		conv->flag_zero = false;
    c858:	f36f 1286 	bfc	r2, #6, #1
    c85c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    c860:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    c864:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    c866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    c86a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    c86e:	d17b      	bne.n	c968 <cbvprintf+0x1d4>
		conv->width_star = true;
    c870:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    c874:	1c4b      	adds	r3, r1, #1
    c876:	f042 0201 	orr.w	r2, r2, #1
    c87a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    c87e:	781a      	ldrb	r2, [r3, #0]
    c880:	2a2e      	cmp	r2, #46	; 0x2e
    c882:	bf0c      	ite	eq
    c884:	2101      	moveq	r1, #1
    c886:	2100      	movne	r1, #0
    c888:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    c88c:	f361 0241 	bfi	r2, r1, #1, #1
    c890:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    c894:	d174      	bne.n	c980 <cbvprintf+0x1ec>
	if (*sp == '*') {
    c896:	785a      	ldrb	r2, [r3, #1]
    c898:	2a2a      	cmp	r2, #42	; 0x2a
    c89a:	d06a      	beq.n	c972 <cbvprintf+0x1de>
	size_t val = 0;
    c89c:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    c89e:	260a      	movs	r6, #10
    c8a0:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    c8a2:	4618      	mov	r0, r3
    c8a4:	f810 2b01 	ldrb.w	r2, [r0], #1
    c8a8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    c8ac:	2f09      	cmp	r7, #9
    c8ae:	f240 808e 	bls.w	c9ce <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    c8b2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    c8b6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    c8b8:	f3c2 0040 	ubfx	r0, r2, #1, #1
    c8bc:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    c8c0:	f361 0241 	bfi	r2, r1, #1, #1
    c8c4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    c8c8:	e05a      	b.n	c980 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    c8ca:	f10a 0702 	add.w	r7, sl, #2
    c8ce:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    c8d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    c8d6:	07d9      	lsls	r1, r3, #31
    c8d8:	f140 8149 	bpl.w	cb6e <cbvprintf+0x3da>
			width = va_arg(ap, int);
    c8dc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    c8e0:	f1b9 0f00 	cmp.w	r9, #0
    c8e4:	da07      	bge.n	c8f6 <cbvprintf+0x162>
				conv->flag_dash = true;
    c8e6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    c8ea:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    c8ee:	f042 0204 	orr.w	r2, r2, #4
    c8f2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    c8f6:	075a      	lsls	r2, r3, #29
    c8f8:	f140 8142 	bpl.w	cb80 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    c8fc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    c900:	f1b8 0f00 	cmp.w	r8, #0
    c904:	f280 8141 	bge.w	cb8a <cbvprintf+0x3f6>
				conv->prec_present = false;
    c908:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    c90c:	f36f 0341 	bfc	r3, #1, #1
    c910:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    c914:	f04f 38ff 	mov.w	r8, #4294967295
    c918:	e137      	b.n	cb8a <cbvprintf+0x3f6>
		switch (*sp) {
    c91a:	2b2d      	cmp	r3, #45	; 0x2d
    c91c:	d00c      	beq.n	c938 <cbvprintf+0x1a4>
    c91e:	2b30      	cmp	r3, #48	; 0x30
    c920:	f47f af6d 	bne.w	c7fe <cbvprintf+0x6a>
			conv->flag_zero = true;
    c924:	2201      	movs	r2, #1
	} while (loop);
    c926:	e75c      	b.n	c7e2 <cbvprintf+0x4e>
			conv->flag_plus = true;
    c928:	f04f 0e01 	mov.w	lr, #1
    c92c:	e759      	b.n	c7e2 <cbvprintf+0x4e>
			conv->flag_space = true;
    c92e:	2601      	movs	r6, #1
    c930:	e757      	b.n	c7e2 <cbvprintf+0x4e>
			conv->flag_hash = true;
    c932:	f04f 0c01 	mov.w	ip, #1
    c936:	e754      	b.n	c7e2 <cbvprintf+0x4e>
		switch (*sp) {
    c938:	2001      	movs	r0, #1
    c93a:	e752      	b.n	c7e2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    c93c:	4633      	mov	r3, r6
    c93e:	fb0c 0202 	mla	r2, ip, r2, r0
    c942:	3a30      	subs	r2, #48	; 0x30
    c944:	461e      	mov	r6, r3
    c946:	f816 0b01 	ldrb.w	r0, [r6], #1
    c94a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    c94e:	2f09      	cmp	r7, #9
    c950:	d9f4      	bls.n	c93c <cbvprintf+0x1a8>
	if (sp != wp) {
    c952:	4299      	cmp	r1, r3
    c954:	d093      	beq.n	c87e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    c956:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    c95a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    c95c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    c95e:	f362 0141 	bfi	r1, r2, #1, #1
    c962:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    c966:	e78a      	b.n	c87e <cbvprintf+0xea>
    c968:	460b      	mov	r3, r1
	size_t val = 0;
    c96a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    c96c:	f04f 0c0a 	mov.w	ip, #10
    c970:	e7e8      	b.n	c944 <cbvprintf+0x1b0>
		conv->prec_star = true;
    c972:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    c976:	3302      	adds	r3, #2
		conv->prec_star = true;
    c978:	f042 0204 	orr.w	r2, r2, #4
    c97c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    c980:	461f      	mov	r7, r3
    c982:	f817 2b01 	ldrb.w	r2, [r7], #1
    c986:	2a6c      	cmp	r2, #108	; 0x6c
    c988:	d041      	beq.n	ca0e <cbvprintf+0x27a>
    c98a:	d825      	bhi.n	c9d8 <cbvprintf+0x244>
    c98c:	2a68      	cmp	r2, #104	; 0x68
    c98e:	d02b      	beq.n	c9e8 <cbvprintf+0x254>
    c990:	2a6a      	cmp	r2, #106	; 0x6a
    c992:	d046      	beq.n	ca22 <cbvprintf+0x28e>
    c994:	2a4c      	cmp	r2, #76	; 0x4c
    c996:	d04c      	beq.n	ca32 <cbvprintf+0x29e>
    c998:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    c99a:	f817 2b01 	ldrb.w	r2, [r7], #1
    c99e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    c9a2:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    c9a4:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    c9a8:	f200 80d9 	bhi.w	cb5e <cbvprintf+0x3ca>
    c9ac:	2a57      	cmp	r2, #87	; 0x57
    c9ae:	d84d      	bhi.n	ca4c <cbvprintf+0x2b8>
    c9b0:	2a41      	cmp	r2, #65	; 0x41
    c9b2:	d003      	beq.n	c9bc <cbvprintf+0x228>
    c9b4:	3a45      	subs	r2, #69	; 0x45
    c9b6:	2a02      	cmp	r2, #2
    c9b8:	f200 80d1 	bhi.w	cb5e <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    c9bc:	2204      	movs	r2, #4
    c9be:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    c9c2:	f362 0302 	bfi	r3, r2, #0, #3
    c9c6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    c9ca:	2301      	movs	r3, #1
			break;
    c9cc:	e09e      	b.n	cb0c <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    c9ce:	fb06 2101 	mla	r1, r6, r1, r2
    c9d2:	4603      	mov	r3, r0
    c9d4:	3930      	subs	r1, #48	; 0x30
    c9d6:	e764      	b.n	c8a2 <cbvprintf+0x10e>
	switch (*sp) {
    c9d8:	2a74      	cmp	r2, #116	; 0x74
    c9da:	d026      	beq.n	ca2a <cbvprintf+0x296>
    c9dc:	2a7a      	cmp	r2, #122	; 0x7a
    c9de:	d1db      	bne.n	c998 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    c9e0:	2206      	movs	r2, #6
    c9e2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    c9e6:	e00d      	b.n	ca04 <cbvprintf+0x270>
		if (*++sp == 'h') {
    c9e8:	785a      	ldrb	r2, [r3, #1]
    c9ea:	2a68      	cmp	r2, #104	; 0x68
    c9ec:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    c9f0:	d106      	bne.n	ca00 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    c9f2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    c9f4:	f361 02c6 	bfi	r2, r1, #3, #4
    c9f8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    c9fc:	1c9f      	adds	r7, r3, #2
    c9fe:	e7cc      	b.n	c99a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    ca00:	4613      	mov	r3, r2
    ca02:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    ca04:	f362 03c6 	bfi	r3, r2, #3, #4
    ca08:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    ca0c:	e7c5      	b.n	c99a <cbvprintf+0x206>
		if (*++sp == 'l') {
    ca0e:	785a      	ldrb	r2, [r3, #1]
    ca10:	2a6c      	cmp	r2, #108	; 0x6c
    ca12:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    ca16:	d101      	bne.n	ca1c <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    ca18:	2104      	movs	r1, #4
    ca1a:	e7eb      	b.n	c9f4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    ca1c:	4613      	mov	r3, r2
    ca1e:	2203      	movs	r2, #3
    ca20:	e7f0      	b.n	ca04 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    ca22:	2205      	movs	r2, #5
    ca24:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ca28:	e7ec      	b.n	ca04 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    ca2a:	2207      	movs	r2, #7
    ca2c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ca30:	e7e8      	b.n	ca04 <cbvprintf+0x270>
		conv->unsupported = true;
    ca32:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    ca36:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    ca3a:	f023 0302 	bic.w	r3, r3, #2
    ca3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    ca42:	f043 0302 	orr.w	r3, r3, #2
    ca46:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    ca4a:	e7a6      	b.n	c99a <cbvprintf+0x206>
    ca4c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    ca50:	2920      	cmp	r1, #32
    ca52:	f200 8084 	bhi.w	cb5e <cbvprintf+0x3ca>
    ca56:	a001      	add	r0, pc, #4	; (adr r0, ca5c <cbvprintf+0x2c8>)
    ca58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    ca5c:	0000cb21 	.word	0x0000cb21
    ca60:	0000cb5f 	.word	0x0000cb5f
    ca64:	0000cb5f 	.word	0x0000cb5f
    ca68:	0000cb5f 	.word	0x0000cb5f
    ca6c:	0000cb5f 	.word	0x0000cb5f
    ca70:	0000cb5f 	.word	0x0000cb5f
    ca74:	0000cb5f 	.word	0x0000cb5f
    ca78:	0000cb5f 	.word	0x0000cb5f
    ca7c:	0000cb5f 	.word	0x0000cb5f
    ca80:	0000c9bd 	.word	0x0000c9bd
    ca84:	0000cb5f 	.word	0x0000cb5f
    ca88:	0000cb21 	.word	0x0000cb21
    ca8c:	0000cae1 	.word	0x0000cae1
    ca90:	0000c9bd 	.word	0x0000c9bd
    ca94:	0000c9bd 	.word	0x0000c9bd
    ca98:	0000c9bd 	.word	0x0000c9bd
    ca9c:	0000cb5f 	.word	0x0000cb5f
    caa0:	0000cae1 	.word	0x0000cae1
    caa4:	0000cb5f 	.word	0x0000cb5f
    caa8:	0000cb5f 	.word	0x0000cb5f
    caac:	0000cb5f 	.word	0x0000cb5f
    cab0:	0000cb5f 	.word	0x0000cb5f
    cab4:	0000cb29 	.word	0x0000cb29
    cab8:	0000cb21 	.word	0x0000cb21
    cabc:	0000cb45 	.word	0x0000cb45
    cac0:	0000cb5f 	.word	0x0000cb5f
    cac4:	0000cb5f 	.word	0x0000cb5f
    cac8:	0000cb45 	.word	0x0000cb45
    cacc:	0000cb5f 	.word	0x0000cb5f
    cad0:	0000cb21 	.word	0x0000cb21
    cad4:	0000cb5f 	.word	0x0000cb5f
    cad8:	0000cb5f 	.word	0x0000cb5f
    cadc:	0000cb21 	.word	0x0000cb21
		conv->specifier_cat = SPECIFIER_SINT;
    cae0:	2001      	movs	r0, #1
    cae2:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    cae6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    caea:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    caee:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    caf0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    caf4:	bf02      	ittt	eq
    caf6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    cafa:	f041 0101 	orreq.w	r1, r1, #1
    cafe:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    cb02:	2a63      	cmp	r2, #99	; 0x63
    cb04:	d131      	bne.n	cb6a <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    cb06:	3b00      	subs	r3, #0
    cb08:	bf18      	it	ne
    cb0a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    cb0c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    cb10:	f3c2 0140 	ubfx	r1, r2, #1, #1
    cb14:	430b      	orrs	r3, r1
    cb16:	f363 0241 	bfi	r2, r3, #1, #1
    cb1a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    cb1e:	e6d8      	b.n	c8d2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    cb20:	2002      	movs	r0, #2
    cb22:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    cb26:	e7de      	b.n	cae6 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    cb28:	2103      	movs	r1, #3
    cb2a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    cb2e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    cb32:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    cb36:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    cb3a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    cb3c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    cb40:	4143      	adcs	r3, r0
    cb42:	e7e3      	b.n	cb0c <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    cb44:	2103      	movs	r1, #3
    cb46:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    cb4a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    cb4e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    cb52:	bf14      	ite	ne
    cb54:	2301      	movne	r3, #1
    cb56:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    cb58:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    cb5c:	e7d6      	b.n	cb0c <cbvprintf+0x378>
		conv->invalid = true;
    cb5e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    cb62:	f043 0301 	orr.w	r3, r3, #1
    cb66:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    cb6a:	2300      	movs	r3, #0
    cb6c:	e7ce      	b.n	cb0c <cbvprintf+0x378>
		} else if (conv->width_present) {
    cb6e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    cb72:	2a00      	cmp	r2, #0
		int width = -1;
    cb74:	bfac      	ite	ge
    cb76:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    cb7a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    cb7e:	e6ba      	b.n	c8f6 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    cb80:	079b      	lsls	r3, r3, #30
    cb82:	f57f aec7 	bpl.w	c914 <cbvprintf+0x180>
			precision = conv->prec_value;
    cb86:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    cb8a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    cb8c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    cb90:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    cb94:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    cb98:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    cb9c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    cb9e:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    cba2:	d136      	bne.n	cc12 <cbvprintf+0x47e>
			switch (length_mod) {
    cba4:	1ed3      	subs	r3, r2, #3
    cba6:	2b04      	cmp	r3, #4
    cba8:	d820      	bhi.n	cbec <cbvprintf+0x458>
    cbaa:	e8df f003 	tbb	[pc, r3]
    cbae:	0703      	.short	0x0703
    cbb0:	1f07      	.short	0x1f07
    cbb2:	1f          	.byte	0x1f
    cbb3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    cbb4:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    cbb8:	17c1      	asrs	r1, r0, #31
    cbba:	e004      	b.n	cbc6 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
    cbbc:	3407      	adds	r4, #7
    cbbe:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    cbc2:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    cbc6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    cbca:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    cbce:	f013 0603 	ands.w	r6, r3, #3
    cbd2:	d054      	beq.n	cc7e <cbvprintf+0x4ea>
			OUTS(sp, fp);
    cbd4:	463b      	mov	r3, r7
    cbd6:	4652      	mov	r2, sl
    cbd8:	4659      	mov	r1, fp
    cbda:	9802      	ldr	r0, [sp, #8]
    cbdc:	f002 feb4 	bl	f948 <outs>
    cbe0:	2800      	cmp	r0, #0
    cbe2:	f2c0 8143 	blt.w	ce6c <cbvprintf+0x6d8>
    cbe6:	4405      	add	r5, r0
			continue;
    cbe8:	46ba      	mov	sl, r7
    cbea:	e5db      	b.n	c7a4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    cbec:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    cbf0:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    cbf2:	ea4f 71e0 	mov.w	r1, r0, asr #31
    cbf6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    cbfa:	d105      	bne.n	cc08 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
    cbfc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    cc00:	930a      	str	r3, [sp, #40]	; 0x28
    cc02:	2300      	movs	r3, #0
    cc04:	930b      	str	r3, [sp, #44]	; 0x2c
    cc06:	e7e0      	b.n	cbca <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
    cc08:	2a02      	cmp	r2, #2
    cc0a:	d1de      	bne.n	cbca <cbvprintf+0x436>
				value->sint = (short)value->sint;
    cc0c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    cc10:	e7d2      	b.n	cbb8 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    cc12:	2b02      	cmp	r3, #2
    cc14:	d123      	bne.n	cc5e <cbvprintf+0x4ca>
			switch (length_mod) {
    cc16:	1ed3      	subs	r3, r2, #3
    cc18:	2b04      	cmp	r3, #4
    cc1a:	d813      	bhi.n	cc44 <cbvprintf+0x4b0>
    cc1c:	e8df f003 	tbb	[pc, r3]
    cc20:	120a0a03 	.word	0x120a0a03
    cc24:	12          	.byte	0x12
    cc25:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    cc26:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
    cc28:	6820      	ldr	r0, [r4, #0]
    cc2a:	1d23      	adds	r3, r4, #4
    cc2c:	900a      	str	r0, [sp, #40]	; 0x28
    cc2e:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    cc30:	461c      	mov	r4, r3
    cc32:	e7ca      	b.n	cbca <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
    cc34:	3407      	adds	r4, #7
    cc36:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    cc3a:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    cc3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    cc42:	e7f5      	b.n	cc30 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
    cc44:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    cc48:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    cc4a:	930a      	str	r3, [sp, #40]	; 0x28
    cc4c:	f04f 0300 	mov.w	r3, #0
    cc50:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    cc52:	d0d3      	beq.n	cbfc <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
    cc54:	2a02      	cmp	r2, #2
    cc56:	d1b8      	bne.n	cbca <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
    cc58:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    cc5c:	e7d0      	b.n	cc00 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
    cc5e:	2b04      	cmp	r3, #4
    cc60:	d107      	bne.n	cc72 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
    cc62:	3407      	adds	r4, #7
    cc64:	f024 0407 	bic.w	r4, r4, #7
    cc68:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    cc6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    cc70:	e7ab      	b.n	cbca <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
    cc72:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    cc74:	bf04      	itt	eq
    cc76:	f854 3b04 	ldreq.w	r3, [r4], #4
    cc7a:	930a      	streq	r3, [sp, #40]	; 0x28
    cc7c:	e7a5      	b.n	cbca <cbvprintf+0x436>
		switch (conv->specifier) {
    cc7e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    cc82:	2878      	cmp	r0, #120	; 0x78
    cc84:	d8b0      	bhi.n	cbe8 <cbvprintf+0x454>
    cc86:	2862      	cmp	r0, #98	; 0x62
    cc88:	d822      	bhi.n	ccd0 <cbvprintf+0x53c>
    cc8a:	2825      	cmp	r0, #37	; 0x25
    cc8c:	f43f ad93 	beq.w	c7b6 <cbvprintf+0x22>
    cc90:	2858      	cmp	r0, #88	; 0x58
    cc92:	d1a9      	bne.n	cbe8 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
    cc94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    cc98:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    cc9c:	9300      	str	r3, [sp, #0]
    cc9e:	aa0c      	add	r2, sp, #48	; 0x30
    cca0:	ab04      	add	r3, sp, #16
    cca2:	f002 fe06 	bl	f8b2 <encode_uint>
    cca6:	4682      	mov	sl, r0
			if (precision >= 0) {
    cca8:	f1b8 0f00 	cmp.w	r8, #0
    ccac:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    ccb0:	db0c      	blt.n	cccc <cbvprintf+0x538>
				conv->flag_zero = false;
    ccb2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    ccb6:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    ccba:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    ccbe:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    ccc0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    ccc4:	d902      	bls.n	cccc <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
    ccc6:	eba8 0303 	sub.w	r3, r8, r3
    ccca:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    cccc:	4680      	mov	r8, r0
    ccce:	e03d      	b.n	cd4c <cbvprintf+0x5b8>
    ccd0:	3863      	subs	r0, #99	; 0x63
    ccd2:	2815      	cmp	r0, #21
    ccd4:	d888      	bhi.n	cbe8 <cbvprintf+0x454>
    ccd6:	a101      	add	r1, pc, #4	; (adr r1, ccdc <cbvprintf+0x548>)
    ccd8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    ccdc:	0000cd5d 	.word	0x0000cd5d
    cce0:	0000cdc1 	.word	0x0000cdc1
    cce4:	0000cbe9 	.word	0x0000cbe9
    cce8:	0000cbe9 	.word	0x0000cbe9
    ccec:	0000cbe9 	.word	0x0000cbe9
    ccf0:	0000cbe9 	.word	0x0000cbe9
    ccf4:	0000cdc1 	.word	0x0000cdc1
    ccf8:	0000cbe9 	.word	0x0000cbe9
    ccfc:	0000cbe9 	.word	0x0000cbe9
    cd00:	0000cbe9 	.word	0x0000cbe9
    cd04:	0000cbe9 	.word	0x0000cbe9
    cd08:	0000ce1f 	.word	0x0000ce1f
    cd0c:	0000cded 	.word	0x0000cded
    cd10:	0000cdf1 	.word	0x0000cdf1
    cd14:	0000cbe9 	.word	0x0000cbe9
    cd18:	0000cbe9 	.word	0x0000cbe9
    cd1c:	0000cd35 	.word	0x0000cd35
    cd20:	0000cbe9 	.word	0x0000cbe9
    cd24:	0000cded 	.word	0x0000cded
    cd28:	0000cbe9 	.word	0x0000cbe9
    cd2c:	0000cbe9 	.word	0x0000cbe9
    cd30:	0000cded 	.word	0x0000cded
			if (precision >= 0) {
    cd34:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    cd38:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    cd3c:	db0a      	blt.n	cd54 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
    cd3e:	4641      	mov	r1, r8
    cd40:	4650      	mov	r0, sl
    cd42:	f002 fef2 	bl	fb2a <strnlen>
		char sign = 0;
    cd46:	2600      	movs	r6, #0
			bpe = bps + len;
    cd48:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    cd4c:	f1ba 0f00 	cmp.w	sl, #0
    cd50:	d10c      	bne.n	cd6c <cbvprintf+0x5d8>
    cd52:	e749      	b.n	cbe8 <cbvprintf+0x454>
				len = strlen(bps);
    cd54:	4650      	mov	r0, sl
    cd56:	f002 fee1 	bl	fb1c <strlen>
    cd5a:	e7f4      	b.n	cd46 <cbvprintf+0x5b2>
			break;
    cd5c:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    cd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
    cd60:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    cd64:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
    cd68:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    cd6c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    cd70:	b106      	cbz	r6, cd74 <cbvprintf+0x5e0>
			nj_len += 1U;
    cd72:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    cd74:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    cd78:	06d0      	lsls	r0, r2, #27
    cd7a:	d56b      	bpl.n	ce54 <cbvprintf+0x6c0>
			nj_len += 2U;
    cd7c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    cd7e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    cd80:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    cd82:	bf48      	it	mi
    cd84:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    cd86:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    cd88:	bf48      	it	mi
    cd8a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    cd8c:	f1b9 0f00 	cmp.w	r9, #0
    cd90:	dd79      	ble.n	ce86 <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
    cd92:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    cd96:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    cd9a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    cd9e:	9303      	str	r3, [sp, #12]
    cda0:	0753      	lsls	r3, r2, #29
    cda2:	d470      	bmi.n	ce86 <cbvprintf+0x6f2>
				if (conv->flag_zero) {
    cda4:	0650      	lsls	r0, r2, #25
    cda6:	d564      	bpl.n	ce72 <cbvprintf+0x6de>
					if (sign != 0) {
    cda8:	b146      	cbz	r6, cdbc <cbvprintf+0x628>
						OUTC(sign);
    cdaa:	4659      	mov	r1, fp
    cdac:	4630      	mov	r0, r6
    cdae:	9b02      	ldr	r3, [sp, #8]
    cdb0:	4798      	blx	r3
    cdb2:	2800      	cmp	r0, #0
    cdb4:	db5a      	blt.n	ce6c <cbvprintf+0x6d8>
						sign = 0;
    cdb6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    cdb8:	3501      	adds	r5, #1
						sign = 0;
    cdba:	461e      	mov	r6, r3
					pad = '0';
    cdbc:	2330      	movs	r3, #48	; 0x30
    cdbe:	e059      	b.n	ce74 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
    cdc0:	071e      	lsls	r6, r3, #28
    cdc2:	d411      	bmi.n	cde8 <cbvprintf+0x654>
				sign = ' ';
    cdc4:	f013 0610 	ands.w	r6, r3, #16
    cdc8:	bf18      	it	ne
    cdca:	2620      	movne	r6, #32
			if (value->sint < 0) {
    cdcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    cdd0:	2a00      	cmp	r2, #0
    cdd2:	f173 0100 	sbcs.w	r1, r3, #0
    cdd6:	f6bf af5d 	bge.w	cc94 <cbvprintf+0x500>
				value->uint = (uint_value_type)-value->sint;
    cdda:	4252      	negs	r2, r2
    cddc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    cde0:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    cde2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    cde6:	e755      	b.n	cc94 <cbvprintf+0x500>
				sign = '+';
    cde8:	262b      	movs	r6, #43	; 0x2b
    cdea:	e7ef      	b.n	cdcc <cbvprintf+0x638>
		switch (conv->specifier) {
    cdec:	2600      	movs	r6, #0
    cdee:	e751      	b.n	cc94 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    cdf0:	980a      	ldr	r0, [sp, #40]	; 0x28
    cdf2:	b348      	cbz	r0, ce48 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    cdf4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    cdf8:	9300      	str	r3, [sp, #0]
    cdfa:	2100      	movs	r1, #0
    cdfc:	ab04      	add	r3, sp, #16
    cdfe:	aa0c      	add	r2, sp, #48	; 0x30
    ce00:	f002 fd57 	bl	f8b2 <encode_uint>
				conv->altform_0c = true;
    ce04:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ce08:	4682      	mov	sl, r0
				conv->altform_0c = true;
    ce0a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    ce0e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    ce12:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    ce16:	2600      	movs	r6, #0
				conv->altform_0c = true;
    ce18:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    ce1c:	e744      	b.n	cca8 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    ce1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    ce20:	2a07      	cmp	r2, #7
    ce22:	f63f aee1 	bhi.w	cbe8 <cbvprintf+0x454>
    ce26:	e8df f002 	tbb	[pc, r2]
    ce2a:	040d      	.short	0x040d
    ce2c:	08080d06 	.word	0x08080d06
    ce30:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    ce32:	701d      	strb	r5, [r3, #0]
		break;
    ce34:	e6d8      	b.n	cbe8 <cbvprintf+0x454>
		*(short *)dp = (short)count;
    ce36:	801d      	strh	r5, [r3, #0]
		break;
    ce38:	e6d6      	b.n	cbe8 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    ce3a:	4628      	mov	r0, r5
    ce3c:	17e9      	asrs	r1, r5, #31
    ce3e:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    ce42:	e6d1      	b.n	cbe8 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    ce44:	601d      	str	r5, [r3, #0]
		break;
    ce46:	e6cf      	b.n	cbe8 <cbvprintf+0x454>
			bpe = bps + 5;
    ce48:	f8df 80c4 	ldr.w	r8, [pc, #196]	; cf10 <cbvprintf+0x77c>
    ce4c:	4606      	mov	r6, r0
			bps = "(nil)";
    ce4e:	f1a8 0a05 	sub.w	sl, r8, #5
    ce52:	e78b      	b.n	cd6c <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
    ce54:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    ce56:	bf48      	it	mi
    ce58:	3301      	addmi	r3, #1
    ce5a:	e790      	b.n	cd7e <cbvprintf+0x5ea>
					OUTC(pad);
    ce5c:	4618      	mov	r0, r3
    ce5e:	9303      	str	r3, [sp, #12]
    ce60:	4659      	mov	r1, fp
    ce62:	9b02      	ldr	r3, [sp, #8]
    ce64:	4798      	blx	r3
    ce66:	2800      	cmp	r0, #0
    ce68:	9b03      	ldr	r3, [sp, #12]
    ce6a:	da04      	bge.n	ce76 <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
    ce6c:	b011      	add	sp, #68	; 0x44
    ce6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    ce72:	2320      	movs	r3, #32
    ce74:	444d      	add	r5, r9
    ce76:	464a      	mov	r2, r9
				while (width-- > 0) {
    ce78:	2a00      	cmp	r2, #0
    ce7a:	eba5 0109 	sub.w	r1, r5, r9
    ce7e:	f109 39ff 	add.w	r9, r9, #4294967295
    ce82:	dceb      	bgt.n	ce5c <cbvprintf+0x6c8>
    ce84:	460d      	mov	r5, r1
		if (sign != 0) {
    ce86:	b136      	cbz	r6, ce96 <cbvprintf+0x702>
			OUTC(sign);
    ce88:	4659      	mov	r1, fp
    ce8a:	4630      	mov	r0, r6
    ce8c:	9b02      	ldr	r3, [sp, #8]
    ce8e:	4798      	blx	r3
    ce90:	2800      	cmp	r0, #0
    ce92:	dbeb      	blt.n	ce6c <cbvprintf+0x6d8>
    ce94:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    ce96:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    ce9a:	06d9      	lsls	r1, r3, #27
    ce9c:	d401      	bmi.n	cea2 <cbvprintf+0x70e>
    ce9e:	071a      	lsls	r2, r3, #28
    cea0:	d506      	bpl.n	ceb0 <cbvprintf+0x71c>
				OUTC('0');
    cea2:	4659      	mov	r1, fp
    cea4:	2030      	movs	r0, #48	; 0x30
    cea6:	9b02      	ldr	r3, [sp, #8]
    cea8:	4798      	blx	r3
    ceaa:	2800      	cmp	r0, #0
    ceac:	dbde      	blt.n	ce6c <cbvprintf+0x6d8>
    ceae:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    ceb0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    ceb4:	06db      	lsls	r3, r3, #27
    ceb6:	d507      	bpl.n	cec8 <cbvprintf+0x734>
				OUTC(conv->specifier);
    ceb8:	4659      	mov	r1, fp
    ceba:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    cebe:	9b02      	ldr	r3, [sp, #8]
    cec0:	4798      	blx	r3
    cec2:	2800      	cmp	r0, #0
    cec4:	dbd2      	blt.n	ce6c <cbvprintf+0x6d8>
    cec6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    cec8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    ceca:	442e      	add	r6, r5
    cecc:	1b73      	subs	r3, r6, r5
    cece:	2b00      	cmp	r3, #0
    ced0:	dc16      	bgt.n	cf00 <cbvprintf+0x76c>
			OUTS(bps, bpe);
    ced2:	4643      	mov	r3, r8
    ced4:	4652      	mov	r2, sl
    ced6:	4659      	mov	r1, fp
    ced8:	9802      	ldr	r0, [sp, #8]
    ceda:	f002 fd35 	bl	f948 <outs>
    cede:	2800      	cmp	r0, #0
    cee0:	dbc4      	blt.n	ce6c <cbvprintf+0x6d8>
    cee2:	4405      	add	r5, r0
		while (width > 0) {
    cee4:	44a9      	add	r9, r5
    cee6:	eba9 0305 	sub.w	r3, r9, r5
    ceea:	2b00      	cmp	r3, #0
    ceec:	f77f ae7c 	ble.w	cbe8 <cbvprintf+0x454>
			OUTC(' ');
    cef0:	4659      	mov	r1, fp
    cef2:	2020      	movs	r0, #32
    cef4:	9b02      	ldr	r3, [sp, #8]
    cef6:	4798      	blx	r3
    cef8:	2800      	cmp	r0, #0
    cefa:	dbb7      	blt.n	ce6c <cbvprintf+0x6d8>
    cefc:	3501      	adds	r5, #1
			--width;
    cefe:	e7f2      	b.n	cee6 <cbvprintf+0x752>
				OUTC('0');
    cf00:	4659      	mov	r1, fp
    cf02:	2030      	movs	r0, #48	; 0x30
    cf04:	9b02      	ldr	r3, [sp, #8]
    cf06:	4798      	blx	r3
    cf08:	2800      	cmp	r0, #0
    cf0a:	dbaf      	blt.n	ce6c <cbvprintf+0x6d8>
    cf0c:	3501      	adds	r5, #1
    cf0e:	e7dd      	b.n	cecc <cbvprintf+0x738>
    cf10:	00010351 	.word	0x00010351

0000cf14 <nordicsemi_nrf91_init>:
    cf14:	f04f 0220 	mov.w	r2, #32
    cf18:	f3ef 8311 	mrs	r3, BASEPRI
    cf1c:	f382 8811 	msr	BASEPRI, r2
    cf20:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    cf24:	2101      	movs	r1, #1
    cf26:	4a04      	ldr	r2, [pc, #16]	; (cf38 <nordicsemi_nrf91_init+0x24>)
    cf28:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    cf2c:	f383 8811 	msr	BASEPRI, r3
    cf30:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    cf34:	2000      	movs	r0, #0
    cf36:	4770      	bx	lr
    cf38:	40039000 	.word	0x40039000

0000cf3c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    cf3c:	b120      	cbz	r0, cf48 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    cf3e:	4b03      	ldr	r3, [pc, #12]	; (cf4c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    cf40:	0180      	lsls	r0, r0, #6
    cf42:	f043 0301 	orr.w	r3, r3, #1
    cf46:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    cf48:	4770      	bx	lr
    cf4a:	bf00      	nop
    cf4c:	00010260 	.word	0x00010260

0000cf50 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    cf50:	b510      	push	{r4, lr}
    cf52:	4807      	ldr	r0, [pc, #28]	; (cf70 <uart_console_init+0x20>)
    cf54:	f001 fc02 	bl	e75c <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    cf58:	4c06      	ldr	r4, [pc, #24]	; (cf74 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    cf5a:	4b07      	ldr	r3, [pc, #28]	; (cf78 <uart_console_init+0x28>)
    cf5c:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    cf5e:	4620      	mov	r0, r4
    cf60:	f000 fe76 	bl	dc50 <__stdout_hook_install>
	__printk_hook_install(console_out);
    cf64:	4620      	mov	r0, r4
    cf66:	f7ff fb1b 	bl	c5a0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    cf6a:	2000      	movs	r0, #0
    cf6c:	bd10      	pop	{r4, pc}
    cf6e:	bf00      	nop
    cf70:	00010352 	.word	0x00010352
    cf74:	0000cf7d 	.word	0x0000cf7d
    cf78:	20010198 	.word	0x20010198

0000cf7c <console_out>:
	if ('\n' == c) {
    cf7c:	280a      	cmp	r0, #10
{
    cf7e:	b538      	push	{r3, r4, r5, lr}
    cf80:	4604      	mov	r4, r0
    cf82:	4d07      	ldr	r5, [pc, #28]	; (cfa0 <console_out+0x24>)
	if ('\n' == c) {
    cf84:	d104      	bne.n	cf90 <console_out+0x14>
    cf86:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    cf88:	6883      	ldr	r3, [r0, #8]
    cf8a:	210d      	movs	r1, #13
    cf8c:	685b      	ldr	r3, [r3, #4]
    cf8e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    cf90:	6828      	ldr	r0, [r5, #0]
    cf92:	6883      	ldr	r3, [r0, #8]
    cf94:	b2e1      	uxtb	r1, r4
    cf96:	685b      	ldr	r3, [r3, #4]
    cf98:	4798      	blx	r3
}
    cf9a:	4620      	mov	r0, r4
    cf9c:	bd38      	pop	{r3, r4, r5, pc}
    cf9e:	bf00      	nop
    cfa0:	20010198 	.word	0x20010198

0000cfa4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    cfa4:	4a0e      	ldr	r2, [pc, #56]	; (cfe0 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    cfa6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    cfa8:	1a84      	subs	r4, r0, r2
{
    cfaa:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    cfac:	200c      	movs	r0, #12
{
    cfae:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    cfb0:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    cfb2:	10a3      	asrs	r3, r4, #2
    cfb4:	4c0b      	ldr	r4, [pc, #44]	; (cfe4 <onoff_stop+0x40>)
    cfb6:	435c      	muls	r4, r3
    cfb8:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    cfba:	fb00 2004 	mla	r0, r0, r4, r2
    cfbe:	4408      	add	r0, r1
    cfc0:	f002 fce4 	bl	f98c <set_off_state>
	if (err < 0) {
    cfc4:	1e01      	subs	r1, r0, #0
    cfc6:	db05      	blt.n	cfd4 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    cfc8:	4b07      	ldr	r3, [pc, #28]	; (cfe8 <onoff_stop+0x44>)
    cfca:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    cfce:	6863      	ldr	r3, [r4, #4]
    cfd0:	4798      	blx	r3
	return 0;
    cfd2:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    cfd4:	4628      	mov	r0, r5
    cfd6:	4633      	mov	r3, r6
}
    cfd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    cfdc:	4718      	bx	r3
    cfde:	bf00      	nop
    cfe0:	200101ac 	.word	0x200101ac
    cfe4:	b6db6db7 	.word	0xb6db6db7
    cfe8:	0001027c 	.word	0x0001027c

0000cfec <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    cfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    cff0:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    cff2:	4e10      	ldr	r6, [pc, #64]	; (d034 <onoff_start+0x48>)
{
    cff4:	4680      	mov	r8, r0
	size_t offset = (size_t)(mgr - data->mgr);
    cff6:	1b84      	subs	r4, r0, r6
    cff8:	10a3      	asrs	r3, r4, #2
    cffa:	4c0f      	ldr	r4, [pc, #60]	; (d038 <onoff_start+0x4c>)
{
    cffc:	460f      	mov	r7, r1
	size_t offset = (size_t)(mgr - data->mgr);
    cffe:	435c      	muls	r4, r3
    d000:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    d002:	4365      	muls	r5, r4
    d004:	f105 0040 	add.w	r0, r5, #64	; 0x40
    d008:	2140      	movs	r1, #64	; 0x40
    d00a:	4430      	add	r0, r6
    d00c:	f002 fcd7 	bl	f9be <set_starting_state>
	if (err < 0) {
    d010:	1e01      	subs	r1, r0, #0
    d012:	db09      	blt.n	d028 <onoff_start+0x3c>
	subdata->cb = cb;
    d014:	4a09      	ldr	r2, [pc, #36]	; (d03c <onoff_start+0x50>)
    d016:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
    d018:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    d01c:	4b08      	ldr	r3, [pc, #32]	; (d040 <onoff_start+0x54>)
    d01e:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    d022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    d026:	4718      	bx	r3
		notify(mgr, err);
    d028:	4640      	mov	r0, r8
    d02a:	463b      	mov	r3, r7
}
    d02c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    d030:	4718      	bx	r3
    d032:	bf00      	nop
    d034:	200101ac 	.word	0x200101ac
    d038:	b6db6db7 	.word	0xb6db6db7
    d03c:	0000fa21 	.word	0x0000fa21
    d040:	0001027c 	.word	0x0001027c

0000d044 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    d044:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d046:	2200      	movs	r2, #0
    d048:	2101      	movs	r1, #1
{
    d04a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d04c:	2005      	movs	r0, #5
    d04e:	f000 fa5f 	bl	d510 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    d052:	2005      	movs	r0, #5
    d054:	f000 fa3e 	bl	d4d4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    d058:	480f      	ldr	r0, [pc, #60]	; (d098 <clk_init+0x54>)
    d05a:	f001 fa13 	bl	e484 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    d05e:	4b0f      	ldr	r3, [pc, #60]	; (d09c <clk_init+0x58>)
    d060:	4298      	cmp	r0, r3
    d062:	d115      	bne.n	d090 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    d064:	f002 fe7a 	bl	fd5c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    d068:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    d06a:	490d      	ldr	r1, [pc, #52]	; (d0a0 <clk_init+0x5c>)
    d06c:	4630      	mov	r0, r6
    d06e:	f002 fade 	bl	f62e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    d072:	2800      	cmp	r0, #0
    d074:	db0b      	blt.n	d08e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d076:	2501      	movs	r5, #1
    d078:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    d07a:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    d07c:	4908      	ldr	r1, [pc, #32]	; (d0a0 <clk_init+0x5c>)
    d07e:	f104 001c 	add.w	r0, r4, #28
    d082:	f002 fad4 	bl	f62e <onoff_manager_init>
		if (err < 0) {
    d086:	2800      	cmp	r0, #0
    d088:	db01      	blt.n	d08e <clk_init+0x4a>
	}

	return 0;
    d08a:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d08c:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    d08e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    d090:	f06f 0004 	mvn.w	r0, #4
    d094:	e7fb      	b.n	d08e <clk_init+0x4a>
    d096:	bf00      	nop
    d098:	0000d0d9 	.word	0x0000d0d9
    d09c:	0bad0000 	.word	0x0bad0000
    d0a0:	0001028c 	.word	0x0001028c

0000d0a4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    d0a4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    d0a6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    d0a8:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    d0aa:	434b      	muls	r3, r1
    d0ac:	4808      	ldr	r0, [pc, #32]	; (d0d0 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    d0ae:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    d0b0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    d0b2:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    d0b4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    d0b8:	4418      	add	r0, r3
	sub_data->cb = NULL;
    d0ba:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    d0bc:	f002 fc9d 	bl	f9fa <set_on_state>
	if (callback) {
    d0c0:	b12d      	cbz	r5, d0ce <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    d0c2:	4632      	mov	r2, r6
    d0c4:	462b      	mov	r3, r5
}
    d0c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    d0ca:	4802      	ldr	r0, [pc, #8]	; (d0d4 <clkstarted_handle.constprop.0+0x30>)
    d0cc:	4718      	bx	r3
}
    d0ce:	bd70      	pop	{r4, r5, r6, pc}
    d0d0:	200101ac 	.word	0x200101ac
    d0d4:	2001003c 	.word	0x2001003c

0000d0d8 <clock_event_handler>:
	switch (event) {
    d0d8:	b110      	cbz	r0, d0e0 <clock_event_handler+0x8>
    d0da:	2801      	cmp	r0, #1
    d0dc:	d004      	beq.n	d0e8 <clock_event_handler+0x10>
    d0de:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    d0e0:	4b03      	ldr	r3, [pc, #12]	; (d0f0 <clock_event_handler+0x18>)
    d0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d0e4:	075b      	lsls	r3, r3, #29
    d0e6:	d101      	bne.n	d0ec <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d0e8:	f7ff bfdc 	b.w	d0a4 <clkstarted_handle.constprop.0>
}
    d0ec:	4770      	bx	lr
    d0ee:	bf00      	nop
    d0f0:	200101ac 	.word	0x200101ac

0000d0f4 <generic_hfclk_start>:
{
    d0f4:	b508      	push	{r3, lr}
	__asm__ volatile(
    d0f6:	f04f 0320 	mov.w	r3, #32
    d0fa:	f3ef 8111 	mrs	r1, BASEPRI
    d0fe:	f383 8811 	msr	BASEPRI, r3
    d102:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    d106:	4a11      	ldr	r2, [pc, #68]	; (d14c <generic_hfclk_start+0x58>)
    d108:	6813      	ldr	r3, [r2, #0]
    d10a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    d10e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    d112:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    d114:	d00b      	beq.n	d12e <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    d116:	4a0e      	ldr	r2, [pc, #56]	; (d150 <generic_hfclk_start+0x5c>)
    d118:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d11c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    d120:	f013 0301 	ands.w	r3, r3, #1
    d124:	d003      	beq.n	d12e <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    d126:	480b      	ldr	r0, [pc, #44]	; (d154 <generic_hfclk_start+0x60>)
    d128:	f002 fc67 	bl	f9fa <set_on_state>
			already_started = true;
    d12c:	2301      	movs	r3, #1
	__asm__ volatile(
    d12e:	f381 8811 	msr	BASEPRI, r1
    d132:	f3bf 8f6f 	isb	sy
	if (already_started) {
    d136:	b123      	cbz	r3, d142 <generic_hfclk_start+0x4e>
}
    d138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    d13c:	2000      	movs	r0, #0
    d13e:	f7ff bfb1 	b.w	d0a4 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    d142:	2001      	movs	r0, #1
}
    d144:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d148:	f001 b9ac 	b.w	e4a4 <nrfx_clock_start>
    d14c:	200101fc 	.word	0x200101fc
    d150:	40005000 	.word	0x40005000
    d154:	200101ec 	.word	0x200101ec

0000d158 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d158:	4b07      	ldr	r3, [pc, #28]	; (d178 <generic_hfclk_stop+0x20>)
    d15a:	e8d3 2fef 	ldaex	r2, [r3]
    d15e:	f022 0102 	bic.w	r1, r2, #2
    d162:	e8c3 1fe0 	stlex	r0, r1, [r3]
    d166:	2800      	cmp	r0, #0
    d168:	d1f7      	bne.n	d15a <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    d16a:	07d3      	lsls	r3, r2, #31
    d16c:	d402      	bmi.n	d174 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    d16e:	2001      	movs	r0, #1
    d170:	f001 b9ca 	b.w	e508 <nrfx_clock_stop>
}
    d174:	4770      	bx	lr
    d176:	bf00      	nop
    d178:	200101fc 	.word	0x200101fc

0000d17c <api_blocking_start>:
{
    d17c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d17e:	2200      	movs	r2, #0
    d180:	2301      	movs	r3, #1
    d182:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d186:	466b      	mov	r3, sp
    d188:	4a08      	ldr	r2, [pc, #32]	; (d1ac <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d18a:	f8cd d000 	str.w	sp, [sp]
    d18e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d192:	f002 fc6b 	bl	fa6c <api_start>
	if (err < 0) {
    d196:	2800      	cmp	r0, #0
    d198:	db05      	blt.n	d1a6 <api_blocking_start+0x2a>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    d19a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d19e:	2300      	movs	r3, #0
    d1a0:	4668      	mov	r0, sp
    d1a2:	f001 ff51 	bl	f048 <z_impl_k_sem_take>
}
    d1a6:	b005      	add	sp, #20
    d1a8:	f85d fb04 	ldr.w	pc, [sp], #4
    d1ac:	0000fa3f 	.word	0x0000fa3f

0000d1b0 <z_nrf_clock_control_lf_on>:
{
    d1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d1b4:	2201      	movs	r2, #1
    d1b6:	4607      	mov	r7, r0
    d1b8:	4936      	ldr	r1, [pc, #216]	; (d294 <z_nrf_clock_control_lf_on+0xe4>)
    d1ba:	e8d1 3fef 	ldaex	r3, [r1]
    d1be:	e8c1 2fe0 	stlex	r0, r2, [r1]
    d1c2:	2800      	cmp	r0, #0
    d1c4:	d1f9      	bne.n	d1ba <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    d1c6:	b933      	cbnz	r3, d1d6 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    d1c8:	4933      	ldr	r1, [pc, #204]	; (d298 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
    d1ca:	4834      	ldr	r0, [pc, #208]	; (d29c <z_nrf_clock_control_lf_on+0xec>)
    d1cc:	604b      	str	r3, [r1, #4]
    d1ce:	60cb      	str	r3, [r1, #12]
    d1d0:	608a      	str	r2, [r1, #8]
    d1d2:	f002 fa3f 	bl	f654 <onoff_request>
	switch (start_mode) {
    d1d6:	1e7b      	subs	r3, r7, #1
    d1d8:	2b01      	cmp	r3, #1
    d1da:	d82e      	bhi.n	d23a <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    d1dc:	2f01      	cmp	r7, #1
    d1de:	d106      	bne.n	d1ee <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    d1e0:	4b2f      	ldr	r3, [pc, #188]	; (d2a0 <z_nrf_clock_control_lf_on+0xf0>)
    d1e2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    d1e6:	f003 0303 	and.w	r3, r3, #3
    d1ea:	2b02      	cmp	r3, #2
    d1ec:	d025      	beq.n	d23a <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d1ee:	f002 fe89 	bl	ff04 <k_is_in_isr>
    d1f2:	4604      	mov	r4, r0
    d1f4:	b918      	cbnz	r0, d1fe <z_nrf_clock_control_lf_on+0x4e>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    d1f6:	4b2b      	ldr	r3, [pc, #172]	; (d2a4 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
    d1f8:	781b      	ldrb	r3, [r3, #0]
    d1fa:	2b00      	cmp	r3, #0
    d1fc:	d144      	bne.n	d288 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
    d1fe:	f04f 0320 	mov.w	r3, #32
    d202:	f3ef 8611 	mrs	r6, BASEPRI
    d206:	f383 8811 	msr	BASEPRI, r3
    d20a:	f3bf 8f6f 	isb	sy
    d20e:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d210:	4d23      	ldr	r5, [pc, #140]	; (d2a0 <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d212:	f8df 809c 	ldr.w	r8, [pc, #156]	; d2b0 <z_nrf_clock_control_lf_on+0x100>
    d216:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d218:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d21c:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    d220:	03d2      	lsls	r2, r2, #15
    d222:	d50c      	bpl.n	d23e <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    d224:	f003 0303 	and.w	r3, r3, #3
    d228:	2b02      	cmp	r3, #2
    d22a:	d001      	beq.n	d230 <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    d22c:	2f01      	cmp	r7, #1
    d22e:	d106      	bne.n	d23e <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
    d230:	b334      	cbz	r4, d280 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    d232:	f386 8811 	msr	BASEPRI, r6
    d236:	f3bf 8f6f 	isb	sy
}
    d23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    d23e:	b1d4      	cbz	r4, d276 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    d240:	4630      	mov	r0, r6
    d242:	f000 fa23 	bl	d68c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    d246:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    d24a:	b2db      	uxtb	r3, r3
    d24c:	2b01      	cmp	r3, #1
    d24e:	d1e3      	bne.n	d218 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d250:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
    d254:	2a00      	cmp	r2, #0
    d256:	d0df      	beq.n	d218 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d258:	2200      	movs	r2, #0
    d25a:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    d25e:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
    d262:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d264:	2120      	movs	r1, #32
    d266:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    d26a:	4a0f      	ldr	r2, [pc, #60]	; (d2a8 <z_nrf_clock_control_lf_on+0xf8>)
    d26c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d270:	4a0e      	ldr	r2, [pc, #56]	; (d2ac <z_nrf_clock_control_lf_on+0xfc>)
    d272:	6013      	str	r3, [r2, #0]
}
    d274:	e7d0      	b.n	d218 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
    d276:	2100      	movs	r1, #0
    d278:	2021      	movs	r0, #33	; 0x21
    d27a:	f001 fe9d 	bl	efb8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    d27e:	e7e2      	b.n	d246 <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
    d280:	2302      	movs	r3, #2
    d282:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    d286:	e7d8      	b.n	d23a <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
    d288:	2202      	movs	r2, #2
    d28a:	4b05      	ldr	r3, [pc, #20]	; (d2a0 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
    d28c:	4606      	mov	r6, r0
    d28e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    d292:	e7bd      	b.n	d210 <z_nrf_clock_control_lf_on+0x60>
    d294:	20010200 	.word	0x20010200
    d298:	2001019c 	.word	0x2001019c
    d29c:	200101c8 	.word	0x200101c8
    d2a0:	40005000 	.word	0x40005000
    d2a4:	200102e6 	.word	0x200102e6
    d2a8:	e000e100 	.word	0xe000e100
    d2ac:	40005008 	.word	0x40005008
    d2b0:	40005104 	.word	0x40005104

0000d2b4 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    d2b4:	4a04      	ldr	r2, [pc, #16]	; (d2c8 <sys_clock_timeout_handler+0x14>)
    d2b6:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    d2b8:	1ac8      	subs	r0, r1, r3
    d2ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    d2be:	4403      	add	r3, r0
    d2c0:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    d2c2:	f002 b891 	b.w	f3e8 <z_clock_announce>
    d2c6:	bf00      	nop
    d2c8:	20010210 	.word	0x20010210

0000d2cc <set_absolute_alarm>:
{
    d2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    d2d0:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d2d4:	f04f 0900 	mov.w	r9, #0
    d2d8:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    d2da:	f100 0450 	add.w	r4, r0, #80	; 0x50
    d2de:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    d2e2:	00a4      	lsls	r4, r4, #2
    d2e4:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    d2e8:	b2a4      	uxth	r4, r4
    d2ea:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    d2ee:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    d2f2:	f8df 806c 	ldr.w	r8, [pc, #108]	; d360 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    d2f6:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d2fa:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    d2fe:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    d300:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    d304:	eba3 030a 	sub.w	r3, r3, sl
    d308:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    d30c:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    d310:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    d312:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    d316:	d102      	bne.n	d31e <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    d318:	2013      	movs	r0, #19
    d31a:	f002 fdf9 	bl	ff10 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    d31e:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    d322:	1aab      	subs	r3, r5, r2
    d324:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    d328:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    d32c:	bf88      	it	hi
    d32e:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d330:	f8c4 9000 	str.w	r9, [r4]
    d334:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    d336:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    d33a:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    d33e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    d342:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    d346:	459a      	cmp	sl, r3
    d348:	d006      	beq.n	d358 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    d34a:	1aeb      	subs	r3, r5, r3
    d34c:	3b02      	subs	r3, #2
    d34e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    d352:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    d356:	d801      	bhi.n	d35c <set_absolute_alarm+0x90>
}
    d358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    d35c:	462b      	mov	r3, r5
    d35e:	e7cf      	b.n	d300 <set_absolute_alarm+0x34>
    d360:	40015000 	.word	0x40015000

0000d364 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    d364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    d366:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d368:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d36a:	4e0f      	ldr	r6, [pc, #60]	; (d3a8 <rtc_nrf_isr+0x44>)
    d36c:	4b0f      	ldr	r3, [pc, #60]	; (d3ac <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
    d36e:	4a10      	ldr	r2, [pc, #64]	; (d3b0 <rtc_nrf_isr+0x4c>)
    d370:	4618      	mov	r0, r3
    d372:	681d      	ldr	r5, [r3, #0]
    d374:	b104      	cbz	r4, d378 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    d376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d378:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    d37c:	03c9      	lsls	r1, r1, #15
    d37e:	d5fa      	bpl.n	d376 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d380:	6831      	ldr	r1, [r6, #0]
    d382:	2900      	cmp	r1, #0
    d384:	d0f7      	beq.n	d376 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d386:	6034      	str	r4, [r6, #0]
    d388:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    d38a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    d38e:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    d392:	2401      	movs	r4, #1
    return p_reg->CC[ch];
    d394:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
    d398:	b125      	cbz	r5, d3a4 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
    d39a:	2000      	movs	r0, #0
    d39c:	685a      	ldr	r2, [r3, #4]
    d39e:	601f      	str	r7, [r3, #0]
    d3a0:	47a8      	blx	r5
    d3a2:	e7e3      	b.n	d36c <rtc_nrf_isr+0x8>
    d3a4:	6005      	str	r5, [r0, #0]
}
    d3a6:	e7e6      	b.n	d376 <rtc_nrf_isr+0x12>
    d3a8:	40015140 	.word	0x40015140
    d3ac:	20010204 	.word	0x20010204
    d3b0:	40015000 	.word	0x40015000

0000d3b4 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    d3b4:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    d3b6:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    d3b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    d3bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    d3c0:	4d0d      	ldr	r5, [pc, #52]	; (d3f8 <z_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    d3c2:	2101      	movs	r1, #1
    d3c4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    d3c8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    d3cc:	4b0b      	ldr	r3, [pc, #44]	; (d3fc <z_clock_driver_init+0x48>)
    d3ce:	2015      	movs	r0, #21
    d3d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    d3d4:	4622      	mov	r2, r4
    d3d6:	f000 f89b 	bl	d510 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    d3da:	2015      	movs	r0, #21
    d3dc:	f000 f87a 	bl	d4d4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    d3e0:	2301      	movs	r3, #1
    d3e2:	4a07      	ldr	r2, [pc, #28]	; (d400 <z_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    d3e4:	2002      	movs	r0, #2
    d3e6:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    d3e8:	4a06      	ldr	r2, [pc, #24]	; (d404 <z_clock_driver_init+0x50>)
    d3ea:	602b      	str	r3, [r5, #0]
    d3ec:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    d3ee:	f7ff fedf 	bl	d1b0 <z_nrf_clock_control_lf_on>

	return 0;
}
    d3f2:	4620      	mov	r0, r4
    d3f4:	bd38      	pop	{r3, r4, r5, pc}
    d3f6:	bf00      	nop
    d3f8:	40015000 	.word	0x40015000
    d3fc:	e000e100 	.word	0xe000e100
    d400:	40015008 	.word	0x40015008
    d404:	2001020c 	.word	0x2001020c

0000d408 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    d408:	4b13      	ldr	r3, [pc, #76]	; (d458 <z_clock_set_timeout+0x50>)
    d40a:	f1b0 3fff 	cmp.w	r0, #4294967295
    d40e:	bf08      	it	eq
    d410:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    d412:	3801      	subs	r0, #1
    d414:	2800      	cmp	r0, #0
    d416:	dd1c      	ble.n	d452 <z_clock_set_timeout+0x4a>
    d418:	4298      	cmp	r0, r3
    d41a:	bfa8      	it	ge
    d41c:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    d41e:	4b0f      	ldr	r3, [pc, #60]	; (d45c <z_clock_set_timeout+0x54>)
    d420:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    d424:	4b0e      	ldr	r3, [pc, #56]	; (d460 <z_clock_set_timeout+0x58>)
    d426:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    d428:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    d42a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    d42e:	bf18      	it	ne
    d430:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
    d432:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    d436:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
    d438:	4a0a      	ldr	r2, [pc, #40]	; (d464 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    d43a:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    d43c:	480a      	ldr	r0, [pc, #40]	; (d468 <z_clock_set_timeout+0x60>)
    d43e:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    d440:	2000      	movs	r0, #0
    d442:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    d444:	4a04      	ldr	r2, [pc, #16]	; (d458 <z_clock_set_timeout+0x50>)
    d446:	4293      	cmp	r3, r2
    d448:	bf94      	ite	ls
    d44a:	18c9      	addls	r1, r1, r3
    d44c:	1889      	addhi	r1, r1, r2
    d44e:	f7ff bf3d 	b.w	d2cc <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    d452:	2000      	movs	r0, #0
    d454:	e7e3      	b.n	d41e <z_clock_set_timeout+0x16>
    d456:	bf00      	nop
    d458:	007fffff 	.word	0x007fffff
    d45c:	40015000 	.word	0x40015000
    d460:	20010210 	.word	0x20010210
    d464:	20010204 	.word	0x20010204
    d468:	0000d2b5 	.word	0x0000d2b5

0000d46c <z_clock_elapsed>:
	__asm__ volatile(
    d46c:	f04f 0220 	mov.w	r2, #32
    d470:	f3ef 8311 	mrs	r3, BASEPRI
    d474:	f382 8811 	msr	BASEPRI, r2
    d478:	f3bf 8f6f 	isb	sy
    d47c:	4a06      	ldr	r2, [pc, #24]	; (d498 <z_clock_elapsed+0x2c>)
    d47e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    d482:	4a06      	ldr	r2, [pc, #24]	; (d49c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    d484:	6812      	ldr	r2, [r2, #0]
    d486:	1a80      	subs	r0, r0, r2
    d488:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    d48c:	f383 8811 	msr	BASEPRI, r3
    d490:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    d494:	4770      	bx	lr
    d496:	bf00      	nop
    d498:	40015000 	.word	0x40015000
    d49c:	20010210 	.word	0x20010210

0000d4a0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    d4a0:	4a09      	ldr	r2, [pc, #36]	; (d4c8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d4a2:	490a      	ldr	r1, [pc, #40]	; (d4cc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    d4a4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    d4a6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    d4a8:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    d4aa:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d4ac:	4908      	ldr	r1, [pc, #32]	; (d4d0 <arch_swap+0x30>)
    d4ae:	684b      	ldr	r3, [r1, #4]
    d4b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d4b4:	604b      	str	r3, [r1, #4]
    d4b6:	2300      	movs	r3, #0
    d4b8:	f383 8811 	msr	BASEPRI, r3
    d4bc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    d4c0:	6893      	ldr	r3, [r2, #8]
}
    d4c2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    d4c4:	4770      	bx	lr
    d4c6:	bf00      	nop
    d4c8:	200102a0 	.word	0x200102a0
    d4cc:	00010334 	.word	0x00010334
    d4d0:	e000ed00 	.word	0xe000ed00

0000d4d4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d4d4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    d4d6:	2b00      	cmp	r3, #0
    d4d8:	db08      	blt.n	d4ec <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d4da:	2201      	movs	r2, #1
    d4dc:	f000 001f 	and.w	r0, r0, #31
    d4e0:	fa02 f000 	lsl.w	r0, r2, r0
    d4e4:	4a02      	ldr	r2, [pc, #8]	; (d4f0 <arch_irq_enable+0x1c>)
    d4e6:	095b      	lsrs	r3, r3, #5
    d4e8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    d4ec:	4770      	bx	lr
    d4ee:	bf00      	nop
    d4f0:	e000e100 	.word	0xe000e100

0000d4f4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    d4f4:	4b05      	ldr	r3, [pc, #20]	; (d50c <arch_irq_is_enabled+0x18>)
    d4f6:	0942      	lsrs	r2, r0, #5
    d4f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    d4fc:	2301      	movs	r3, #1
    d4fe:	f000 001f 	and.w	r0, r0, #31
    d502:	fa03 f000 	lsl.w	r0, r3, r0
}
    d506:	4010      	ands	r0, r2
    d508:	4770      	bx	lr
    d50a:	bf00      	nop
    d50c:	e000e100 	.word	0xe000e100

0000d510 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d510:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    d512:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    d514:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d518:	bfac      	ite	ge
    d51a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d51e:	4b06      	ldrlt	r3, [pc, #24]	; (d538 <z_arm_irq_priority_set+0x28>)
    d520:	ea4f 1141 	mov.w	r1, r1, lsl #5
    d524:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d526:	bfab      	itete	ge
    d528:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d52c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d530:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d534:	5419      	strblt	r1, [r3, r0]
}
    d536:	4770      	bx	lr
    d538:	e000ed14 	.word	0xe000ed14

0000d53c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    d53c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    d540:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    d542:	490b      	ldr	r1, [pc, #44]	; (d570 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    d544:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    d548:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    d54a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    d54e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    d552:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    d554:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    d558:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    d55c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    d560:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    d564:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    d566:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    d568:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    d56a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    d56c:	4770      	bx	lr
    d56e:	bf00      	nop
    d570:	0000f6e7 	.word	0x0000f6e7

0000d574 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    d574:	4604      	mov	r4, r0
    d576:	b508      	push	{r3, lr}
    d578:	460e      	mov	r6, r1
    d57a:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    d57c:	f000 f9fe 	bl	d97c <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    d580:	4b08      	ldr	r3, [pc, #32]	; (d5a4 <arch_switch_to_main_thread+0x30>)
    d582:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    d584:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d586:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    d58a:	4628      	mov	r0, r5
    d58c:	f386 8809 	msr	PSP, r6
    d590:	2100      	movs	r1, #0
    d592:	b663      	cpsie	if
    d594:	f381 8811 	msr	BASEPRI, r1
    d598:	f3bf 8f6f 	isb	sy
    d59c:	2200      	movs	r2, #0
    d59e:	2300      	movs	r3, #0
    d5a0:	f002 f8a1 	bl	f6e6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    d5a4:	200102a0 	.word	0x200102a0

0000d5a8 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d5a8:	4a0e      	ldr	r2, [pc, #56]	; (d5e4 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    d5aa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d5ac:	4b0e      	ldr	r3, [pc, #56]	; (d5e8 <z_arm_prep_c+0x40>)
    d5ae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    d5b2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    d5b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d5b8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    d5bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    d5c0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    d5c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d5c8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    d5cc:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    d5d0:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    d5d4:	f001 f91a 	bl	e80c <z_bss_zero>
	z_data_copy();
    d5d8:	f001 fe0e 	bl	f1f8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    d5dc:	f000 f9a0 	bl	d920 <z_arm_interrupt_init>
	z_cstart();
    d5e0:	f001 f938 	bl	e854 <z_cstart>
    d5e4:	0000c000 	.word	0x0000c000
    d5e8:	e000ed00 	.word	0xe000ed00

0000d5ec <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d5ec:	4913      	ldr	r1, [pc, #76]	; (d63c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d5ee:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d5f0:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    d5f4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d5f6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d5fa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d5fe:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d600:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d604:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d608:	4f0d      	ldr	r7, [pc, #52]	; (d640 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d60a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d60e:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    d610:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d612:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d614:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    d616:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d618:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d61a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d61e:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    d622:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    d626:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    d62a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    d62e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    d630:	f002 fa3d 	bl	faae <configure_builtin_stack_guard>
    pop {r2, lr}
    d634:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    d638:	4770      	bx	lr
    d63a:	0000      	.short	0x0000
    ldr r1, =_kernel
    d63c:	200102a0 	.word	0x200102a0
    ldr v4, =_SCS_ICSR
    d640:	e000ed04 	.word	0xe000ed04

0000d644 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    d644:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    d648:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    d64a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    d64e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    d652:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    d654:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    d658:	2902      	cmp	r1, #2
    beq _oops
    d65a:	d0ff      	beq.n	d65c <_oops>

0000d65c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    d65c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    d65e:	f002 fa2c 	bl	faba <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    d662:	bd01      	pop	{r0, pc}

0000d664 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    d664:	4901      	ldr	r1, [pc, #4]	; (d66c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    d666:	2210      	movs	r2, #16
	str	r2, [r1]
    d668:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    d66a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    d66c:	e000ed10 	.word	0xe000ed10

0000d670 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    d670:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    d672:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    d674:	f380 8811 	msr	BASEPRI, r0
	isb
    d678:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    d67c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    d680:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    d682:	b662      	cpsie	i
	isb
    d684:	f3bf 8f6f 	isb	sy

	bx	lr
    d688:	4770      	bx	lr
    d68a:	bf00      	nop

0000d68c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    d68c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    d68e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    d690:	f381 8811 	msr	BASEPRI, r1

	wfe
    d694:	bf20      	wfe

	msr	BASEPRI, r0
    d696:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    d69a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    d69c:	4770      	bx	lr
    d69e:	bf00      	nop

0000d6a0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    d6a0:	bf30      	wfi
    b z_SysNmiOnReset
    d6a2:	f7ff bffd 	b.w	d6a0 <z_SysNmiOnReset>
    d6a6:	bf00      	nop

0000d6a8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    d6a8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    d6aa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    d6ac:	4a0b      	ldr	r2, [pc, #44]	; (d6dc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    d6ae:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    d6b0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    d6b2:	bf1e      	ittt	ne
	movne	r1, #0
    d6b4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    d6b6:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    d6b8:	f002 fb76 	blne	fda8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    d6bc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    d6be:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    d6c2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    d6c6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    d6ca:	4905      	ldr	r1, [pc, #20]	; (d6e0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    d6cc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    d6ce:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    d6d0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    d6d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    d6d6:	4903      	ldr	r1, [pc, #12]	; (d6e4 <_isr_wrapper+0x3c>)
	bx r1
    d6d8:	4708      	bx	r1
    d6da:	0000      	.short	0x0000
	ldr r2, =_kernel
    d6dc:	200102a0 	.word	0x200102a0
	ldr r1, =_sw_isr_table
    d6e0:	0001000c 	.word	0x0001000c
	ldr r1, =z_arm_int_exit
    d6e4:	0000d72d 	.word	0x0000d72d

0000d6e8 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    d6e8:	f002 f945 	bl	f976 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d6ec:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d6ee:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    d6f2:	4808      	ldr	r0, [pc, #32]	; (d714 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    d6f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    d6f8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    d6fa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    d6fe:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    d702:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    d704:	4308      	orrs	r0, r1
    msr CONTROL, r0
    d706:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    d70a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    d70e:	f7ff ff4b 	bl	d5a8 <z_arm_prep_c>
    d712:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    d714:	20010828 	.word	0x20010828

0000d718 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    d718:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    d71c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    d720:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    d722:	4672      	mov	r2, lr
	bl z_arm_fault
    d724:	f000 f864 	bl	d7f0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    d728:	bd01      	pop	{r0, pc}
    d72a:	bf00      	nop

0000d72c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    d72c:	4b04      	ldr	r3, [pc, #16]	; (d740 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    d72e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    d730:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    d732:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    d734:	d003      	beq.n	d73e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    d736:	4903      	ldr	r1, [pc, #12]	; (d744 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    d738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    d73c:	600a      	str	r2, [r1, #0]

0000d73e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    d73e:	4770      	bx	lr
	ldr r3, =_kernel
    d740:	200102a0 	.word	0x200102a0
	ldr r1, =_SCS_ICSR
    d744:	e000ed04 	.word	0xe000ed04

0000d748 <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d748:	4b0e      	ldr	r3, [pc, #56]	; (d784 <mem_manage_fault.isra.0+0x3c>)
    d74a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    d74c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    d74e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d750:	0792      	lsls	r2, r2, #30
    d752:	d508      	bpl.n	d766 <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    d754:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    d756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d758:	0612      	lsls	r2, r2, #24
    d75a:	d504      	bpl.n	d766 <mem_manage_fault.isra.0+0x1e>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    d75c:	b118      	cbz	r0, d766 <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    d75e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d764:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    d766:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    d768:	4b06      	ldr	r3, [pc, #24]	; (d784 <mem_manage_fault.isra.0+0x3c>)
    d76a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d76c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    d76e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d770:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    d772:	bf58      	it	pl
    d774:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    d776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d778:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    d77c:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    d77e:	7008      	strb	r0, [r1, #0]

	return reason;
}
    d780:	4770      	bx	lr
    d782:	bf00      	nop
    d784:	e000ed00 	.word	0xe000ed00

0000d788 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d788:	4b0d      	ldr	r3, [pc, #52]	; (d7c0 <bus_fault.isra.0+0x38>)
    d78a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    d78c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    d78e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d790:	0592      	lsls	r2, r2, #22
    d792:	d508      	bpl.n	d7a6 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    d794:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    d796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d798:	0412      	lsls	r2, r2, #16
    d79a:	d504      	bpl.n	d7a6 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    d79c:	b118      	cbz	r0, d7a6 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    d79e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d7a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    d7a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    d7a6:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    d7a8:	4b05      	ldr	r3, [pc, #20]	; (d7c0 <bus_fault.isra.0+0x38>)
    d7aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    d7ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d7ae:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    d7b0:	bf58      	it	pl
    d7b2:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d7b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d7b6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    d7ba:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    d7bc:	7008      	strb	r0, [r1, #0]

	return reason;
}
    d7be:	4770      	bx	lr
    d7c0:	e000ed00 	.word	0xe000ed00

0000d7c4 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d7c4:	4b09      	ldr	r3, [pc, #36]	; (d7ec <usage_fault.isra.0+0x28>)
    d7c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    d7c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    d7ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    d7cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    d7ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    d7d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    d7d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d7d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    d7d6:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d7da:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    d7de:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    d7e2:	bf18      	it	ne
    d7e4:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d7e6:	629a      	str	r2, [r3, #40]	; 0x28
}
    d7e8:	4770      	bx	lr
    d7ea:	bf00      	nop
    d7ec:	e000ed00 	.word	0xe000ed00

0000d7f0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    d7f0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d7f2:	4b39      	ldr	r3, [pc, #228]	; (d8d8 <z_arm_fault+0xe8>)
{
    d7f4:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d7f6:	685b      	ldr	r3, [r3, #4]
    d7f8:	2500      	movs	r5, #0
{
    d7fa:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d7fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    d800:	f385 8811 	msr	BASEPRI, r5
    d804:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    d808:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    d80c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    d810:	d116      	bne.n	d840 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    d812:	07d0      	lsls	r0, r2, #31
    d814:	d414      	bmi.n	d840 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    d816:	0654      	lsls	r4, r2, #25
    d818:	d403      	bmi.n	d822 <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    d81a:	0710      	lsls	r0, r2, #28
    d81c:	d404      	bmi.n	d828 <z_arm_fault+0x38>
			*nested_exc = true;
    d81e:	2501      	movs	r5, #1
    d820:	e004      	b.n	d82c <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    d822:	f012 0504 	ands.w	r5, r2, #4
    d826:	d001      	beq.n	d82c <z_arm_fault+0x3c>
			ptr_esf = (z_arch_esf_t *)psp;
    d828:	460e      	mov	r6, r1
	*nested_exc = false;
    d82a:	2500      	movs	r5, #0
	*recoverable = false;
    d82c:	2200      	movs	r2, #0
    d82e:	3b03      	subs	r3, #3
    d830:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    d834:	2b03      	cmp	r3, #3
    d836:	d847      	bhi.n	d8c8 <z_arm_fault+0xd8>
    d838:	e8df f003 	tbb	[pc, r3]
    d83c:	3b423e04 	.word	0x3b423e04
		return NULL;
    d840:	462e      	mov	r6, r5
    d842:	e7f3      	b.n	d82c <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d844:	4b24      	ldr	r3, [pc, #144]	; (d8d8 <z_arm_fault+0xe8>)
    d846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d848:	0792      	lsls	r2, r2, #30
    d84a:	d43d      	bmi.n	d8c8 <z_arm_fault+0xd8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    d84c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d84e:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    d852:	d008      	beq.n	d866 <z_arm_fault+0x76>
		if (SCB_MMFSR != 0) {
    d854:	3328      	adds	r3, #40	; 0x28
    d856:	781b      	ldrb	r3, [r3, #0]
    d858:	b1eb      	cbz	r3, d896 <z_arm_fault+0xa6>
			reason = mem_manage_fault(esf, 1, recoverable);
    d85a:	2001      	movs	r0, #1
    d85c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    d860:	f7ff ff72 	bl	d748 <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
    d864:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    d866:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d86a:	b993      	cbnz	r3, d892 <z_arm_fault+0xa2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    d86c:	2220      	movs	r2, #32
    d86e:	4631      	mov	r1, r6
    d870:	a802      	add	r0, sp, #8
    d872:	f002 f97f 	bl	fb74 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    d876:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d878:	b345      	cbz	r5, d8cc <z_arm_fault+0xdc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    d87a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    d87e:	b922      	cbnz	r2, d88a <z_arm_fault+0x9a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    d880:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    d884:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d888:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    d88a:	4620      	mov	r0, r4
    d88c:	a902      	add	r1, sp, #8
    d88e:	f002 f912 	bl	fab6 <z_arm_fatal_error>
}
    d892:	b00a      	add	sp, #40	; 0x28
    d894:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    d896:	4b11      	ldr	r3, [pc, #68]	; (d8dc <z_arm_fault+0xec>)
    d898:	781b      	ldrb	r3, [r3, #0]
    d89a:	b12b      	cbz	r3, d8a8 <z_arm_fault+0xb8>
			reason = bus_fault(esf, 1, recoverable);
    d89c:	2001      	movs	r0, #1
    d89e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    d8a2:	f7ff ff71 	bl	d788 <bus_fault.isra.0>
    d8a6:	e7dd      	b.n	d864 <z_arm_fault+0x74>
		} else if (SCB_UFSR != 0) {
    d8a8:	4b0d      	ldr	r3, [pc, #52]	; (d8e0 <z_arm_fault+0xf0>)
    d8aa:	8818      	ldrh	r0, [r3, #0]
    d8ac:	b284      	uxth	r4, r0
    d8ae:	2c00      	cmp	r4, #0
    d8b0:	d0d9      	beq.n	d866 <z_arm_fault+0x76>
		reason = usage_fault(esf);
    d8b2:	f7ff ff87 	bl	d7c4 <usage_fault.isra.0>
    d8b6:	e7d5      	b.n	d864 <z_arm_fault+0x74>
		reason = mem_manage_fault(esf, 0, recoverable);
    d8b8:	2000      	movs	r0, #0
    d8ba:	f10d 0107 	add.w	r1, sp, #7
    d8be:	e7cf      	b.n	d860 <z_arm_fault+0x70>
		reason = bus_fault(esf, 0, recoverable);
    d8c0:	2000      	movs	r0, #0
    d8c2:	f10d 0107 	add.w	r1, sp, #7
    d8c6:	e7ec      	b.n	d8a2 <z_arm_fault+0xb2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    d8c8:	2400      	movs	r4, #0
    d8ca:	e7cc      	b.n	d866 <z_arm_fault+0x76>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d8cc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    d8d0:	f023 0301 	bic.w	r3, r3, #1
    d8d4:	e7d8      	b.n	d888 <z_arm_fault+0x98>
    d8d6:	bf00      	nop
    d8d8:	e000ed00 	.word	0xe000ed00
    d8dc:	e000ed29 	.word	0xe000ed29
    d8e0:	e000ed2a 	.word	0xe000ed2a

0000d8e4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d8e4:	4b04      	ldr	r3, [pc, #16]	; (d8f8 <z_arm_fault_init+0x14>)
    d8e6:	695a      	ldr	r2, [r3, #20]
    d8e8:	f042 0210 	orr.w	r2, r2, #16
    d8ec:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    d8ee:	695a      	ldr	r2, [r3, #20]
    d8f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    d8f4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    d8f6:	4770      	bx	lr
    d8f8:	e000ed00 	.word	0xe000ed00

0000d8fc <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    d8fc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    d900:	4905      	ldr	r1, [pc, #20]	; (d918 <sys_arch_reboot+0x1c>)
    d902:	4b06      	ldr	r3, [pc, #24]	; (d91c <sys_arch_reboot+0x20>)
    d904:	68ca      	ldr	r2, [r1, #12]
    d906:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    d90a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    d90c:	60cb      	str	r3, [r1, #12]
    d90e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    d912:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    d914:	e7fd      	b.n	d912 <sys_arch_reboot+0x16>
    d916:	bf00      	nop
    d918:	e000ed00 	.word	0xe000ed00
    d91c:	05fa0004 	.word	0x05fa0004

0000d920 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    d920:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d922:	2120      	movs	r1, #32
    d924:	4803      	ldr	r0, [pc, #12]	; (d934 <z_arm_interrupt_init+0x14>)
    d926:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    d928:	3301      	adds	r3, #1
    d92a:	2b41      	cmp	r3, #65	; 0x41
    d92c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    d930:	d1f9      	bne.n	d926 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    d932:	4770      	bx	lr
    d934:	e000e100 	.word	0xe000e100

0000d938 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    d938:	b508      	push	{r3, lr}
	if (_current == thread) {
    d93a:	4b0e      	ldr	r3, [pc, #56]	; (d974 <z_impl_k_thread_abort+0x3c>)
    d93c:	689b      	ldr	r3, [r3, #8]
    d93e:	4283      	cmp	r3, r0
    d940:	d107      	bne.n	d952 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d942:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    d946:	b193      	cbz	r3, d96e <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d948:	4a0b      	ldr	r2, [pc, #44]	; (d978 <z_impl_k_thread_abort+0x40>)
    d94a:	6853      	ldr	r3, [r2, #4]
    d94c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d950:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    d952:	f001 f9c7 	bl	ece4 <z_thread_single_abort>
	__asm__ volatile(
    d956:	f04f 0320 	mov.w	r3, #32
    d95a:	f3ef 8011 	mrs	r0, BASEPRI
    d95e:	f383 8811 	msr	BASEPRI, r3
    d962:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    d966:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    d96a:	f002 ba1f 	b.w	fdac <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    d96e:	f001 fc23 	bl	f1b8 <z_self_abort>
    d972:	bf00      	nop
    d974:	200102a0 	.word	0x200102a0
    d978:	e000ed00 	.word	0xe000ed00

0000d97c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    d97c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d97e:	4c09      	ldr	r4, [pc, #36]	; (d9a4 <z_arm_configure_static_mpu_regions+0x28>)
    d980:	4a09      	ldr	r2, [pc, #36]	; (d9a8 <z_arm_configure_static_mpu_regions+0x2c>)
    d982:	4623      	mov	r3, r4
    d984:	2101      	movs	r1, #1
    d986:	4809      	ldr	r0, [pc, #36]	; (d9ac <z_arm_configure_static_mpu_regions+0x30>)
    d988:	f000 f902 	bl	db90 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d98c:	2300      	movs	r3, #0
    d98e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    d990:	4b07      	ldr	r3, [pc, #28]	; (d9b0 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d992:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    d994:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d996:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d998:	9301      	str	r3, [sp, #4]
    d99a:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d99c:	f000 f902 	bl	dba4 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    d9a0:	b004      	add	sp, #16
    d9a2:	bd10      	pop	{r4, pc}
    d9a4:	20040000 	.word	0x20040000
    d9a8:	20010000 	.word	0x20010000
    d9ac:	00010298 	.word	0x00010298
    d9b0:	20010090 	.word	0x20010090

0000d9b4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    d9b4:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d9b6:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    d9b8:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d9ba:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    d9be:	f004 031f 	and.w	r3, r4, #31
    d9c2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d9c4:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d9c6:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d9c8:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    d9cc:	4904      	ldr	r1, [pc, #16]	; (d9e0 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d9ce:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    d9d2:	f043 0301 	orr.w	r3, r3, #1
    d9d6:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    d9d8:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    d9da:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    d9dc:	bd10      	pop	{r4, pc}
    d9de:	bf00      	nop
    d9e0:	e000ed90 	.word	0xe000ed90

0000d9e4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9e8:	4688      	mov	r8, r1
    d9ea:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    d9ec:	4606      	mov	r6, r0
    d9ee:	f04f 0900 	mov.w	r9, #0
	MPU->RNR = index;
    d9f2:	4d4a      	ldr	r5, [pc, #296]	; (db1c <mpu_configure_regions_and_partition.constprop.0+0x138>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d9f4:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    d9f6:	45c1      	cmp	r9, r8
    d9f8:	da05      	bge.n	da06 <mpu_configure_regions_and_partition.constprop.0+0x22>
		if (regions[i].size == 0U) {
    d9fa:	6877      	ldr	r7, [r6, #4]
    d9fc:	b3bf      	cbz	r7, da6e <mpu_configure_regions_and_partition.constprop.0+0x8a>
		&&
    d9fe:	2f1f      	cmp	r7, #31
    da00:	d805      	bhi.n	da0e <mpu_configure_regions_and_partition.constprop.0+0x2a>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    da02:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    da06:	4620      	mov	r0, r4
    da08:	b005      	add	sp, #20
    da0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    da0e:	06fb      	lsls	r3, r7, #27
    da10:	d1f7      	bne.n	da02 <mpu_configure_regions_and_partition.constprop.0+0x1e>
		((part->start &
    da12:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    da16:	f01a 0f1f 	tst.w	sl, #31
    da1a:	d1f2      	bne.n	da02 <mpu_configure_regions_and_partition.constprop.0+0x1e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    da1c:	4650      	mov	r0, sl
    da1e:	f002 f874 	bl	fb0a <arm_cmse_mpu_region_get>
    da22:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    da24:	eb07 000a 	add.w	r0, r7, sl
    da28:	3801      	subs	r0, #1
    da2a:	f002 f86e 	bl	fb0a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    da2e:	4583      	cmp	fp, r0
    da30:	d1e7      	bne.n	da02 <mpu_configure_regions_and_partition.constprop.0+0x1e>
		if ((u_reg_index == -EINVAL) ||
    da32:	f11b 0f16 	cmn.w	fp, #22
    da36:	d0e4      	beq.n	da02 <mpu_configure_regions_and_partition.constprop.0+0x1e>
			(u_reg_index > (reg_index - 1))) {
    da38:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    da3a:	455b      	cmp	r3, fp
    da3c:	dbe1      	blt.n	da02 <mpu_configure_regions_and_partition.constprop.0+0x1e>
	MPU->RNR = index;
    da3e:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    da42:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    da44:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    da48:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    da4a:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    da4e:	e9d6 3200 	ldrd	r3, r2, [r6]
    da52:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    da54:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    da56:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    da5a:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    da5e:	d11c      	bne.n	da9a <mpu_configure_regions_and_partition.constprop.0+0xb6>
    da60:	4557      	cmp	r7, sl
    da62:	d108      	bne.n	da76 <mpu_configure_regions_and_partition.constprop.0+0x92>
			mpu_configure_region(u_reg_index, &regions[i]);
    da64:	4631      	mov	r1, r6
    da66:	fa5f f08b 	uxtb.w	r0, fp
    da6a:	f002 f831 	bl	fad0 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    da6e:	f109 0901 	add.w	r9, r9, #1
    da72:	360c      	adds	r6, #12
    da74:	e7bf      	b.n	d9f6 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    da76:	4631      	mov	r1, r6
	MPU->RNR = index;
    da78:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    da7c:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    da7e:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    da82:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    da86:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    da88:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    da8a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    da8c:	f002 f820 	bl	fad0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    da90:	f110 0f16 	cmn.w	r0, #22
    da94:	d0b5      	beq.n	da02 <mpu_configure_regions_and_partition.constprop.0+0x1e>
			reg_index++;
    da96:	1c44      	adds	r4, r0, #1
    da98:	e7e9      	b.n	da6e <mpu_configure_regions_and_partition.constprop.0+0x8a>
		} else if (reg_last == u_reg_last) {
    da9a:	3b01      	subs	r3, #1
    da9c:	4557      	cmp	r7, sl
    da9e:	b2e0      	uxtb	r0, r4
    daa0:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    daa4:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    daa8:	d106      	bne.n	dab8 <mpu_configure_regions_and_partition.constprop.0+0xd4>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    daaa:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    daac:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    daae:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    dab2:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    dab4:	612b      	str	r3, [r5, #16]
			reg_index =
    dab6:	e7e9      	b.n	da8c <mpu_configure_regions_and_partition.constprop.0+0xa8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    dab8:	6929      	ldr	r1, [r5, #16]
    daba:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    dabe:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    dac0:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    dac2:	4631      	mov	r1, r6
    dac4:	f002 f804 	bl	fad0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    dac8:	f110 0f16 	cmn.w	r0, #22
    dacc:	d099      	beq.n	da02 <mpu_configure_regions_and_partition.constprop.0+0x1e>
	MPU->RNR = index;
    dace:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    dad2:	68ea      	ldr	r2, [r5, #12]
    dad4:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    dad8:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    dada:	f362 0304 	bfi	r3, r2, #0, #5
    dade:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    dae2:	692b      	ldr	r3, [r5, #16]
    dae4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    dae8:	085b      	lsrs	r3, r3, #1
    daea:	f363 1247 	bfi	r2, r3, #5, #3
    daee:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    daf2:	e9d6 3200 	ldrd	r3, r2, [r6]
    daf6:	4413      	add	r3, r2
    daf8:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    dafa:	f023 031f 	bic.w	r3, r3, #31
    dafe:	443b      	add	r3, r7
			reg_index++;
    db00:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    db02:	eba3 0a0a 	sub.w	sl, r3, sl
    db06:	b2e0      	uxtb	r0, r4
    db08:	f02a 031f 	bic.w	r3, sl, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    db0c:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    db0e:	9303      	str	r3, [sp, #12]
    db10:	f63f af77 	bhi.w	da02 <mpu_configure_regions_and_partition.constprop.0+0x1e>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    db14:	4669      	mov	r1, sp
    db16:	f7ff ff4d 	bl	d9b4 <region_init>
    db1a:	e7bc      	b.n	da96 <mpu_configure_regions_and_partition.constprop.0+0xb2>
    db1c:	e000ed90 	.word	0xe000ed90

0000db20 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    db20:	2205      	movs	r2, #5
    db22:	4b03      	ldr	r3, [pc, #12]	; (db30 <arm_core_mpu_enable+0x10>)
    db24:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    db26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    db2a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    db2e:	4770      	bx	lr
    db30:	e000ed90 	.word	0xe000ed90

0000db34 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    db34:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    db38:	2200      	movs	r2, #0
    db3a:	4b01      	ldr	r3, [pc, #4]	; (db40 <arm_core_mpu_disable+0xc>)
    db3c:	605a      	str	r2, [r3, #4]
}
    db3e:	4770      	bx	lr
    db40:	e000ed90 	.word	0xe000ed90

0000db44 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    db44:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    db46:	4c0e      	ldr	r4, [pc, #56]	; (db80 <arm_mpu_init+0x3c>)
    db48:	6825      	ldr	r5, [r4, #0]
    db4a:	2d10      	cmp	r5, #16
    db4c:	d814      	bhi.n	db78 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    db4e:	f7ff fff1 	bl	db34 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    db52:	2000      	movs	r0, #0
	MPU->MAIR0 =
    db54:	4b0b      	ldr	r3, [pc, #44]	; (db84 <arm_mpu_init+0x40>)
    db56:	4a0c      	ldr	r2, [pc, #48]	; (db88 <arm_mpu_init+0x44>)
    db58:	631a      	str	r2, [r3, #48]	; 0x30
    db5a:	4285      	cmp	r5, r0
    db5c:	d105      	bne.n	db6a <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    db5e:	4b0b      	ldr	r3, [pc, #44]	; (db8c <arm_mpu_init+0x48>)
    db60:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    db62:	f7ff ffdd 	bl	db20 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    db66:	2000      	movs	r0, #0
}
    db68:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    db6a:	6861      	ldr	r1, [r4, #4]
    db6c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    db70:	f7ff ff20 	bl	d9b4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    db74:	3001      	adds	r0, #1
    db76:	e7f0      	b.n	db5a <arm_mpu_init+0x16>
		return -1;
    db78:	f04f 30ff 	mov.w	r0, #4294967295
    db7c:	e7f4      	b.n	db68 <arm_mpu_init+0x24>
    db7e:	bf00      	nop
    db80:	000102a4 	.word	0x000102a4
    db84:	e000ed90 	.word	0xe000ed90
    db88:	0044ffaa 	.word	0x0044ffaa
    db8c:	200102e4 	.word	0x200102e4

0000db90 <arm_core_mpu_configure_static_mpu_regions>:
{
    db90:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    db92:	4c03      	ldr	r4, [pc, #12]	; (dba0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    db94:	7822      	ldrb	r2, [r4, #0]
    db96:	f7ff ff25 	bl	d9e4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    db9a:	7020      	strb	r0, [r4, #0]
}
    db9c:	bd10      	pop	{r4, pc}
    db9e:	bf00      	nop
    dba0:	200102e4 	.word	0x200102e4

0000dba4 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    dba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dba8:	4d26      	ldr	r5, [pc, #152]	; (dc44 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
    dbaa:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    dbac:	4606      	mov	r6, r0
    dbae:	f04f 0800 	mov.w	r8, #0
    dbb2:	46ab      	mov	fp, r5
	MPU->RNR = index;
    dbb4:	4f24      	ldr	r7, [pc, #144]	; (dc48 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    dbb6:	45d0      	cmp	r8, sl
    dbb8:	da1b      	bge.n	dbf2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    dbba:	f8d6 9004 	ldr.w	r9, [r6, #4]
    dbbe:	f1b9 0f00 	cmp.w	r9, #0
    dbc2:	d039      	beq.n	dc38 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    dbc4:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    dbc6:	4608      	mov	r0, r1
    dbc8:	9101      	str	r1, [sp, #4]
    dbca:	f001 ff9e 	bl	fb0a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    dbce:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    dbd0:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    dbd2:	eb09 0001 	add.w	r0, r9, r1
    dbd6:	3801      	subs	r0, #1
    dbd8:	f001 ff97 	bl	fb0a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    dbdc:	4284      	cmp	r4, r0
    dbde:	f04f 0214 	mov.w	r2, #20
    dbe2:	4b1a      	ldr	r3, [pc, #104]	; (dc4c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
    dbe4:	d008      	beq.n	dbf8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    dbe6:	f06f 0315 	mvn.w	r3, #21
    dbea:	fb02 f808 	mul.w	r8, r2, r8
    dbee:	f84b 3008 	str.w	r3, [fp, r8]
}
    dbf2:	b003      	add	sp, #12
    dbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    dbf8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    dbfc:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    dbfe:	d0f8      	beq.n	dbf2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    dc00:	7819      	ldrb	r1, [r3, #0]
    dc02:	42a1      	cmp	r1, r4
    dc04:	ddf5      	ble.n	dbf2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    dc06:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    dc0a:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    dc0c:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    dc0e:	68fc      	ldr	r4, [r7, #12]
    dc10:	f100 0108 	add.w	r1, r0, #8
    dc14:	7b00      	ldrb	r0, [r0, #12]
    dc16:	f364 0004 	bfi	r0, r4, #0, #5
    dc1a:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    dc1c:	6938      	ldr	r0, [r7, #16]
    dc1e:	790c      	ldrb	r4, [r1, #4]
    dc20:	0840      	lsrs	r0, r0, #1
    dc22:	f360 1447 	bfi	r4, r0, #5, #3
    dc26:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    dc28:	68f9      	ldr	r1, [r7, #12]
    dc2a:	f021 011f 	bic.w	r1, r1, #31
    dc2e:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    dc30:	6939      	ldr	r1, [r7, #16]
    dc32:	f021 011f 	bic.w	r1, r1, #31
    dc36:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    dc38:	f108 0801 	add.w	r8, r8, #1
    dc3c:	3514      	adds	r5, #20
    dc3e:	360c      	adds	r6, #12
    dc40:	e7b9      	b.n	dbb6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    dc42:	bf00      	nop
    dc44:	20010214 	.word	0x20010214
    dc48:	e000ed90 	.word	0xe000ed90
    dc4c:	200102e4 	.word	0x200102e4

0000dc50 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    dc50:	4b01      	ldr	r3, [pc, #4]	; (dc58 <__stdout_hook_install+0x8>)
    dc52:	6018      	str	r0, [r3, #0]
}
    dc54:	4770      	bx	lr
    dc56:	bf00      	nop
    dc58:	20010004 	.word	0x20010004

0000dc5c <nrf_gpio_cfg_sense_set>:
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    dc5c:	f000 021f 	and.w	r2, r0, #31
    dc60:	4805      	ldr	r0, [pc, #20]	; (dc78 <nrf_gpio_cfg_sense_set+0x1c>)
    dc62:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    dc66:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    dc6a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    dc6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    dc72:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    dc76:	4770      	bx	lr
    dc78:	40842500 	.word	0x40842500

0000dc7c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    dc7c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    dc7e:	4b09      	ldr	r3, [pc, #36]	; (dca4 <gpio_nrfx_init+0x28>)
    dc80:	781a      	ldrb	r2, [r3, #0]
    dc82:	b96a      	cbnz	r2, dca0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    dc84:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    dc86:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
    dc88:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    dc8a:	2105      	movs	r1, #5
    dc8c:	f7ff fc40 	bl	d510 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    dc90:	2031      	movs	r0, #49	; 0x31
    dc92:	f7ff fc1f 	bl	d4d4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    dc96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    dc9a:	4b03      	ldr	r3, [pc, #12]	; (dca8 <gpio_nrfx_init+0x2c>)
    dc9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    dca0:	2000      	movs	r0, #0
    dca2:	bd08      	pop	{r3, pc}
    dca4:	200102e5 	.word	0x200102e5
    dca8:	40031000 	.word	0x40031000

0000dcac <gpio_nrfx_pin_interrupt_configure>:
{
    dcac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    dcb0:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    dcb2:	6841      	ldr	r1, [r0, #4]
    dcb4:	f006 071f 	and.w	r7, r6, #31
    dcb8:	7a09      	ldrb	r1, [r1, #8]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    dcba:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
    dcbe:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    dcc2:	ea47 1741 	orr.w	r7, r7, r1, lsl #5
    dcc6:	d10a      	bne.n	dcde <gpio_nrfx_pin_interrupt_configure+0x32>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    dcc8:	4862      	ldr	r0, [pc, #392]	; (de54 <gpio_nrfx_pin_interrupt_configure+0x1a8>)
    *p_pin = pin_number & 0x1F;
    dcca:	f007 011f 	and.w	r1, r7, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    dcce:	3180      	adds	r1, #128	; 0x80
    dcd0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    dcd4:	07c9      	lsls	r1, r1, #31
    dcd6:	d508      	bpl.n	dcea <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
    dcd8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dcdc:	e09d      	b.n	de1a <gpio_nrfx_pin_interrupt_configure+0x16e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    dcde:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    dce2:	f8d8 100c 	ldr.w	r1, [r8, #12]
    dce6:	f000 809b 	beq.w	de20 <gpio_nrfx_pin_interrupt_configure+0x174>
    dcea:	2101      	movs	r1, #1
    dcec:	f8d8 000c 	ldr.w	r0, [r8, #12]
    dcf0:	40b1      	lsls	r1, r6
    dcf2:	4301      	orrs	r1, r0
    dcf4:	f8c8 100c 	str.w	r1, [r8, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    dcf8:	2101      	movs	r1, #1
    dcfa:	f8d8 0014 	ldr.w	r0, [r8, #20]
    dcfe:	40b1      	lsls	r1, r6
    dd00:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    dd04:	bf0c      	ite	eq
    dd06:	4308      	orreq	r0, r1
    dd08:	4388      	bicne	r0, r1
    dd0a:	f8c8 0014 	str.w	r0, [r8, #20]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    dd0e:	2000      	movs	r0, #0
    dd10:	f8d8 2018 	ldr.w	r2, [r8, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    dd14:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    dd18:	bf0c      	ite	eq
    dd1a:	430a      	orreq	r2, r1
    dd1c:	438a      	bicne	r2, r1
    dd1e:	f8c8 2018 	str.w	r2, [r8, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    dd22:	f8d8 2010 	ldr.w	r2, [r8, #16]
    dd26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    dd2a:	4d4b      	ldr	r5, [pc, #300]	; (de58 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
    dd2c:	bf0c      	ite	eq
    dd2e:	4311      	orreq	r1, r2
    dd30:	ea22 0101 	bicne.w	r1, r2, r1
    dd34:	f8c8 1010 	str.w	r1, [r8, #16]
    dd38:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    dd3c:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    dd3e:	f500 72a2 	add.w	r2, r0, #324	; 0x144
    dd42:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    dd46:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    dd4a:	4297      	cmp	r7, r2
    dd4c:	d16d      	bne.n	de2a <gpio_nrfx_pin_interrupt_configure+0x17e>
		    && (intenset & BIT(i))) {
    dd4e:	fa23 f200 	lsr.w	r2, r3, r0
    dd52:	07d2      	lsls	r2, r2, #31
    dd54:	d569      	bpl.n	de2a <gpio_nrfx_pin_interrupt_configure+0x17e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    dd56:	0083      	lsls	r3, r0, #2
    dd58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    dd5c:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    dd60:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    dd64:	f022 0201 	bic.w	r2, r2, #1
    dd68:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    dd6c:	2301      	movs	r3, #1
    dd6e:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    dd70:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    dd74:	b2c0      	uxtb	r0, r0
    dd76:	f000 fc59 	bl	e62c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    dd7a:	4638      	mov	r0, r7
    dd7c:	2100      	movs	r1, #0
    dd7e:	f7ff ff6d 	bl	dc5c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    dd82:	f8d8 000c 	ldr.w	r0, [r8, #12]
    dd86:	40f0      	lsrs	r0, r6
    dd88:	f010 0001 	ands.w	r0, r0, #1
    dd8c:	d045      	beq.n	de1a <gpio_nrfx_pin_interrupt_configure+0x16e>
		if (data->trig_edge & BIT(pin)) {
    dd8e:	f8d8 0014 	ldr.w	r0, [r8, #20]
    dd92:	40f0      	lsrs	r0, r6
    dd94:	f010 0401 	ands.w	r4, r0, #1
    dd98:	d04e      	beq.n	de38 <gpio_nrfx_pin_interrupt_configure+0x18c>
			if (data->double_edge & BIT(pin)) {
    dd9a:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    dd9e:	f10d 0007 	add.w	r0, sp, #7
			if (data->double_edge & BIT(pin)) {
    dda2:	40f3      	lsrs	r3, r6
    dda4:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    dda6:	bf57      	itett	pl
    dda8:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    ddac:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    ddae:	fa21 f606 	lsrpl.w	r6, r1, r6
    ddb2:	f006 0601 	andpl.w	r6, r6, #1
    ddb6:	bf5c      	itt	pl
    ddb8:	f1c6 0602 	rsbpl	r6, r6, #2
    ddbc:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    ddbe:	f000 fc57 	bl	e670 <nrfx_gpiote_channel_alloc>
    ddc2:	4b26      	ldr	r3, [pc, #152]	; (de5c <gpio_nrfx_pin_interrupt_configure+0x1b0>)
    ddc4:	4298      	cmp	r0, r3
    ddc6:	d134      	bne.n	de32 <gpio_nrfx_pin_interrupt_configure+0x186>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    ddc8:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ddcc:	023f      	lsls	r7, r7, #8
    ddce:	008b      	lsls	r3, r1, #2
    ddd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ddd4:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    ddd8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    dddc:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    dde0:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    dde4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    dde8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ddec:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    ddf0:	0088      	lsls	r0, r1, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ddf2:	4317      	orrs	r7, r2
    return ((uint32_t)p_reg + event);
    ddf4:	4a1a      	ldr	r2, [pc, #104]	; (de60 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ddf6:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    return ((uint32_t)p_reg + event);
    ddfa:	4402      	add	r2, r0
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ddfc:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    ddfe:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    de02:	6010      	str	r0, [r2, #0]
    de04:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    de06:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    de0a:	f042 0201 	orr.w	r2, r2, #1
    de0e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    de12:	2301      	movs	r3, #1
    de14:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    de16:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    de1a:	b002      	add	sp, #8
    de1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    de20:	2001      	movs	r0, #1
    de22:	40b0      	lsls	r0, r6
    de24:	ea21 0100 	bic.w	r1, r1, r0
    de28:	e764      	b.n	dcf4 <gpio_nrfx_pin_interrupt_configure+0x48>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    de2a:	3001      	adds	r0, #1
    de2c:	2808      	cmp	r0, #8
    de2e:	d186      	bne.n	dd3e <gpio_nrfx_pin_interrupt_configure+0x92>
    de30:	e7a3      	b.n	dd7a <gpio_nrfx_pin_interrupt_configure+0xce>
		return -ENODEV;
    de32:	f06f 0012 	mvn.w	r0, #18
    de36:	e7f0      	b.n	de1a <gpio_nrfx_pin_interrupt_configure+0x16e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    de38:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    de3c:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
    de3e:	40f1      	lsrs	r1, r6
    de40:	f001 0101 	and.w	r1, r1, #1
    de44:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    de48:	b2c9      	uxtb	r1, r1
    de4a:	f7ff ff07 	bl	dc5c <nrf_gpio_cfg_sense_set>
	int res = 0;
    de4e:	4620      	mov	r0, r4
    de50:	e7e3      	b.n	de1a <gpio_nrfx_pin_interrupt_configure+0x16e>
    de52:	bf00      	nop
    de54:	40842500 	.word	0x40842500
    de58:	40031000 	.word	0x40031000
    de5c:	0bad0000 	.word	0x0bad0000
    de60:	40031100 	.word	0x40031100

0000de64 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    de64:	4b28      	ldr	r3, [pc, #160]	; (df08 <gpio_nrfx_config+0xa4>)
{
    de66:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    de68:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    de6a:	4828      	ldr	r0, [pc, #160]	; (df0c <gpio_nrfx_config+0xa8>)
    de6c:	4013      	ands	r3, r2
    de6e:	4283      	cmp	r3, r0
    de70:	d03b      	beq.n	deea <gpio_nrfx_config+0x86>
    de72:	d80d      	bhi.n	de90 <gpio_nrfx_config+0x2c>
    de74:	2b06      	cmp	r3, #6
    de76:	d015      	beq.n	dea4 <gpio_nrfx_config+0x40>
    de78:	d805      	bhi.n	de86 <gpio_nrfx_config+0x22>
    de7a:	b19b      	cbz	r3, dea4 <gpio_nrfx_config+0x40>
    de7c:	2b02      	cmp	r3, #2
    de7e:	d036      	beq.n	deee <gpio_nrfx_config+0x8a>
    de80:	f06f 0015 	mvn.w	r0, #21
    de84:	e030      	b.n	dee8 <gpio_nrfx_config+0x84>
    de86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    de8a:	d1f9      	bne.n	de80 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    de8c:	2301      	movs	r3, #1
    de8e:	e009      	b.n	dea4 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    de90:	481f      	ldr	r0, [pc, #124]	; (df10 <gpio_nrfx_config+0xac>)
    de92:	4283      	cmp	r3, r0
    de94:	d02d      	beq.n	def2 <gpio_nrfx_config+0x8e>
    de96:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    de9a:	d02c      	beq.n	def6 <gpio_nrfx_config+0x92>
    de9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    dea0:	d1ee      	bne.n	de80 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    dea2:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    dea4:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
    dea6:	bf4c      	ite	mi
    dea8:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
    deaa:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    deae:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    deb2:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    deb6:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    deba:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    debe:	d006      	beq.n	dece <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    dec0:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    dec4:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    dec6:	d018      	beq.n	defa <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
    dec8:	2201      	movs	r2, #1
    deca:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    decc:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    dece:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
    ded2:	2000      	movs	r0, #0
    ded4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
    ded8:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    dedc:	4a0d      	ldr	r2, [pc, #52]	; (df14 <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    dede:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    dee2:	3180      	adds	r1, #128	; 0x80
    dee4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    dee8:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    deea:	2307      	movs	r3, #7
    deec:	e7da      	b.n	dea4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    deee:	2304      	movs	r3, #4
    def0:	e7d8      	b.n	dea4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    def2:	2305      	movs	r3, #5
    def4:	e7d6      	b.n	dea4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    def6:	2303      	movs	r3, #3
    def8:	e7d4      	b.n	dea4 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    defa:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    defc:	bf42      	ittt	mi
    defe:	2201      	movmi	r2, #1
    df00:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    df02:	60f2      	strmi	r2, [r6, #12]
}
    df04:	e7e3      	b.n	dece <gpio_nrfx_config+0x6a>
    df06:	bf00      	nop
    df08:	00f00006 	.word	0x00f00006
    df0c:	00100006 	.word	0x00100006
    df10:	00400002 	.word	0x00400002
    df14:	40842500 	.word	0x40842500

0000df18 <gpiote_event_handler>:
{
    df18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    df1c:	4f3f      	ldr	r7, [pc, #252]	; (e01c <gpiote_event_handler+0x104>)
    df1e:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
    df20:	2e00      	cmp	r6, #0
    df22:	d04f      	beq.n	dfc4 <gpiote_event_handler+0xac>
	uint32_t bit = 1U << pin;
    df24:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
    df28:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
    df2c:	4b3c      	ldr	r3, [pc, #240]	; (e020 <gpiote_event_handler+0x108>)
    df2e:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    df30:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    df34:	430a      	orrs	r2, r1
    df36:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
    df3a:	4a3a      	ldr	r2, [pc, #232]	; (e024 <gpiote_event_handler+0x10c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    df3c:	691b      	ldr	r3, [r3, #16]
    df3e:	6914      	ldr	r4, [r2, #16]
    df40:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    df42:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
    df46:	bb75      	cbnz	r5, dfa6 <gpiote_event_handler+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    df48:	603d      	str	r5, [r7, #0]
    df4a:	683b      	ldr	r3, [r7, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    df4c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    df4e:	2501      	movs	r5, #1
    df50:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    df52:	4835      	ldr	r0, [pc, #212]	; (e028 <gpiote_event_handler+0x110>)
    df54:	4935      	ldr	r1, [pc, #212]	; (e02c <gpiote_event_handler+0x114>)
    df56:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    df5a:	fa05 fc03 	lsl.w	ip, r5, r3
    df5e:	ea1c 0f02 	tst.w	ip, r2
    df62:	d00f      	beq.n	df84 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    df64:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    df68:	b162      	cbz	r2, df84 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    df6a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    df6e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    df72:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    df76:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    df7a:	fa05 f202 	lsl.w	r2, r5, r2
    df7e:	4314      	orrs	r4, r2
    df80:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    df84:	3301      	adds	r3, #1
    df86:	2b08      	cmp	r3, #8
    df88:	d1e5      	bne.n	df56 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
    df8a:	b9ec      	cbnz	r4, dfc8 <gpiote_event_handler+0xb0>
	if (port_event) {
    df8c:	b14e      	cbz	r6, dfa2 <gpiote_event_handler+0x8a>
	uint32_t bit = 1U << pin;
    df8e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    df90:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
    df92:	4d23      	ldr	r5, [pc, #140]	; (e020 <gpiote_event_handler+0x108>)
    df94:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    df96:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
    df9a:	430a      	orrs	r2, r1
    df9c:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
    dfa0:	bb54      	cbnz	r4, dff8 <gpiote_event_handler+0xe0>
}
    dfa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
    dfa6:	ea15 0f08 	tst.w	r5, r8
    dfaa:	d006      	beq.n	dfba <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    dfac:	2100      	movs	r1, #0
    dfae:	f009 001f 	and.w	r0, r9, #31
    dfb2:	f7ff fe53 	bl	dc5c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    dfb6:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
    dfba:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    dfbe:	ea4f 0848 	mov.w	r8, r8, lsl #1
    dfc2:	e7c0      	b.n	df46 <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    dfc4:	4634      	mov	r4, r6
    dfc6:	e7c1      	b.n	df4c <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    dfc8:	4b15      	ldr	r3, [pc, #84]	; (e020 <gpiote_event_handler+0x108>)
    dfca:	6859      	ldr	r1, [r3, #4]
    dfcc:	2900      	cmp	r1, #0
    dfce:	d0dd      	beq.n	df8c <gpiote_event_handler+0x74>
	return node->next;
    dfd0:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    dfd2:	4f17      	ldr	r7, [pc, #92]	; (e030 <gpiote_event_handler+0x118>)
    dfd4:	2d00      	cmp	r5, #0
    dfd6:	bf38      	it	cc
    dfd8:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    dfda:	688a      	ldr	r2, [r1, #8]
    dfdc:	4022      	ands	r2, r4
    dfde:	d002      	beq.n	dfe6 <gpiote_event_handler+0xce>
			cb->handler(port, cb, cb->pin_mask & pins);
    dfe0:	4638      	mov	r0, r7
    dfe2:	684b      	ldr	r3, [r1, #4]
    dfe4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    dfe6:	2d00      	cmp	r5, #0
    dfe8:	d0d0      	beq.n	df8c <gpiote_event_handler+0x74>
    dfea:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    dfec:	4629      	mov	r1, r5
    dfee:	2b00      	cmp	r3, #0
    dff0:	bf38      	it	cc
    dff2:	2300      	movcc	r3, #0
    dff4:	461d      	mov	r5, r3
    dff6:	e7f0      	b.n	dfda <gpiote_event_handler+0xc2>
		if (level_pins & bit) {
    dff8:	4226      	tst	r6, r4
    dffa:	d00c      	beq.n	e016 <gpiote_event_handler+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    dffc:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    dffe:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
    e002:	40f9      	lsrs	r1, r7
    e004:	f001 0101 	and.w	r1, r1, #1
    e008:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    e00c:	b2c9      	uxtb	r1, r1
    e00e:	f7ff fe25 	bl	dc5c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    e012:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    e016:	3701      	adds	r7, #1
		bit <<= 1;
    e018:	0076      	lsls	r6, r6, #1
    e01a:	e7c1      	b.n	dfa0 <gpiote_event_handler+0x88>
    e01c:	4003117c 	.word	0x4003117c
    e020:	20010228 	.word	0x20010228
    e024:	40842500 	.word	0x40842500
    e028:	40031000 	.word	0x40031000
    e02c:	40031100 	.word	0x40031100
    e030:	2001007c 	.word	0x2001007c

0000e034 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    e034:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    e036:	794b      	ldrb	r3, [r1, #5]
    e038:	2b01      	cmp	r3, #1
    e03a:	d029      	beq.n	e090 <uarte_nrfx_configure+0x5c>
    e03c:	2b03      	cmp	r3, #3
    e03e:	d124      	bne.n	e08a <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    e040:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    e042:	798b      	ldrb	r3, [r1, #6]
    e044:	2b03      	cmp	r3, #3
    e046:	d120      	bne.n	e08a <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    e048:	79cc      	ldrb	r4, [r1, #7]
    e04a:	b124      	cbz	r4, e056 <uarte_nrfx_configure+0x22>
    e04c:	2c01      	cmp	r4, #1
    e04e:	d11c      	bne.n	e08a <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    e050:	6843      	ldr	r3, [r0, #4]
    e052:	791b      	ldrb	r3, [r3, #4]
    e054:	b1cb      	cbz	r3, e08a <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    e056:	790a      	ldrb	r2, [r1, #4]
    e058:	b112      	cbz	r2, e060 <uarte_nrfx_configure+0x2c>
    e05a:	2a02      	cmp	r2, #2
    e05c:	d115      	bne.n	e08a <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    e05e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    e060:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    e062:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    e064:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    e068:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    e06a:	d065      	beq.n	e138 <uarte_nrfx_configure+0x104>
    e06c:	d82d      	bhi.n	e0ca <uarte_nrfx_configure+0x96>
    e06e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    e072:	d064      	beq.n	e13e <uarte_nrfx_configure+0x10a>
    e074:	d816      	bhi.n	e0a4 <uarte_nrfx_configure+0x70>
    e076:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    e07a:	d062      	beq.n	e142 <uarte_nrfx_configure+0x10e>
    e07c:	d80a      	bhi.n	e094 <uarte_nrfx_configure+0x60>
    e07e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    e082:	d061      	beq.n	e148 <uarte_nrfx_configure+0x114>
    e084:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    e088:	d061      	beq.n	e14e <uarte_nrfx_configure+0x11a>
    e08a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e08e:	e052      	b.n	e136 <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
    e090:	2600      	movs	r6, #0
    e092:	e7d6      	b.n	e042 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    e094:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    e098:	d05c      	beq.n	e154 <uarte_nrfx_configure+0x120>
    e09a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    e09e:	d1f4      	bne.n	e08a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    e0a0:	4b37      	ldr	r3, [pc, #220]	; (e180 <uarte_nrfx_configure+0x14c>)
    e0a2:	e03c      	b.n	e11e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    e0a4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    e0a8:	d057      	beq.n	e15a <uarte_nrfx_configure+0x126>
    e0aa:	d807      	bhi.n	e0bc <uarte_nrfx_configure+0x88>
    e0ac:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    e0b0:	d055      	beq.n	e15e <uarte_nrfx_configure+0x12a>
    e0b2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    e0b6:	d1e8      	bne.n	e08a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    e0b8:	4b32      	ldr	r3, [pc, #200]	; (e184 <uarte_nrfx_configure+0x150>)
    e0ba:	e030      	b.n	e11e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    e0bc:	f647 2712 	movw	r7, #31250	; 0x7a12
    e0c0:	42bb      	cmp	r3, r7
    e0c2:	d1e2      	bne.n	e08a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    e0c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    e0c8:	e029      	b.n	e11e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    e0ca:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    e0ce:	d048      	beq.n	e162 <uarte_nrfx_configure+0x12e>
    e0d0:	d813      	bhi.n	e0fa <uarte_nrfx_configure+0xc6>
    e0d2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    e0d6:	d047      	beq.n	e168 <uarte_nrfx_configure+0x134>
    e0d8:	d809      	bhi.n	e0ee <uarte_nrfx_configure+0xba>
    e0da:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    e0de:	42bb      	cmp	r3, r7
    e0e0:	d044      	beq.n	e16c <uarte_nrfx_configure+0x138>
    e0e2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    e0e6:	d1d0      	bne.n	e08a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    e0e8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    e0ec:	e017      	b.n	e11e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    e0ee:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    e0f2:	d1ca      	bne.n	e08a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    e0f4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    e0f8:	e011      	b.n	e11e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    e0fa:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    e0fe:	d038      	beq.n	e172 <uarte_nrfx_configure+0x13e>
    e100:	d808      	bhi.n	e114 <uarte_nrfx_configure+0xe0>
    e102:	4f21      	ldr	r7, [pc, #132]	; (e188 <uarte_nrfx_configure+0x154>)
    e104:	42bb      	cmp	r3, r7
    e106:	d037      	beq.n	e178 <uarte_nrfx_configure+0x144>
    e108:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    e10c:	d1bd      	bne.n	e08a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    e10e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    e112:	e004      	b.n	e11e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    e114:	4f1d      	ldr	r7, [pc, #116]	; (e18c <uarte_nrfx_configure+0x158>)
    e116:	42bb      	cmp	r3, r7
    e118:	d1b7      	bne.n	e08a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    e11a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    e11e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    e122:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    e124:	4334      	orrs	r4, r6
    e126:	4322      	orrs	r2, r4
    e128:	3304      	adds	r3, #4
    e12a:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    e12c:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    e130:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    e134:	2000      	movs	r0, #0
}
    e136:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    e138:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    e13c:	e7ef      	b.n	e11e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    e13e:	4b14      	ldr	r3, [pc, #80]	; (e190 <uarte_nrfx_configure+0x15c>)
    e140:	e7ed      	b.n	e11e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    e142:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    e146:	e7ea      	b.n	e11e <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
    e148:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    e14c:	e7e7      	b.n	e11e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    e14e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    e152:	e7e4      	b.n	e11e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    e154:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    e158:	e7e1      	b.n	e11e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    e15a:	4b0e      	ldr	r3, [pc, #56]	; (e194 <uarte_nrfx_configure+0x160>)
    e15c:	e7df      	b.n	e11e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    e15e:	4b0e      	ldr	r3, [pc, #56]	; (e198 <uarte_nrfx_configure+0x164>)
    e160:	e7dd      	b.n	e11e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    e162:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    e166:	e7da      	b.n	e11e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    e168:	4b0c      	ldr	r3, [pc, #48]	; (e19c <uarte_nrfx_configure+0x168>)
    e16a:	e7d8      	b.n	e11e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    e16c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    e170:	e7d5      	b.n	e11e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    e172:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    e176:	e7d2      	b.n	e11e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    e178:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    e17c:	e7cf      	b.n	e11e <uarte_nrfx_configure+0xea>
    e17e:	bf00      	nop
    e180:	0013b000 	.word	0x0013b000
    e184:	004ea000 	.word	0x004ea000
    e188:	0003d090 	.word	0x0003d090
    e18c:	000f4240 	.word	0x000f4240
    e190:	00275000 	.word	0x00275000
    e194:	0075c000 	.word	0x0075c000
    e198:	003af000 	.word	0x003af000
    e19c:	013a9000 	.word	0x013a9000

0000e1a0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    e1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1a4:	4606      	mov	r6, r0
    e1a6:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    e1a8:	68c7      	ldr	r7, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    e1aa:	f001 feab 	bl	ff04 <k_is_in_isr>
    e1ae:	b9b8      	cbnz	r0, e1e0 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    e1b0:	4b28      	ldr	r3, [pc, #160]	; (e254 <uarte_nrfx_poll_out+0xb4>)
    e1b2:	781b      	ldrb	r3, [r3, #0]
    e1b4:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    e1b8:	6872      	ldr	r2, [r6, #4]
    e1ba:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    e1bc:	b193      	cbz	r3, e1e4 <uarte_nrfx_poll_out+0x44>
    e1be:	f04f 0320 	mov.w	r3, #32
    e1c2:	f3ef 8411 	mrs	r4, BASEPRI
    e1c6:	f383 8811 	msr	BASEPRI, r3
    e1ca:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    e1ce:	4630      	mov	r0, r6
    e1d0:	f001 fd9b 	bl	fd0a <is_tx_ready>
    e1d4:	bb38      	cbnz	r0, e226 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    e1d6:	f384 8811 	msr	BASEPRI, r4
    e1da:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    e1de:	e7ee      	b.n	e1be <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    e1e0:	2301      	movs	r3, #1
    e1e2:	e7e9      	b.n	e1b8 <uarte_nrfx_poll_out+0x18>
    e1e4:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    e1e6:	4630      	mov	r0, r6
    e1e8:	f001 fd8f 	bl	fd0a <is_tx_ready>
    e1ec:	b970      	cbnz	r0, e20c <uarte_nrfx_poll_out+0x6c>
    e1ee:	2001      	movs	r0, #1
    e1f0:	f001 fdb2 	bl	fd58 <nrfx_busy_wait>
    e1f4:	3c01      	subs	r4, #1
    e1f6:	d1f6      	bne.n	e1e6 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    e1f8:	2100      	movs	r1, #0
    e1fa:	2021      	movs	r0, #33	; 0x21
    e1fc:	f000 fedc 	bl	efb8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    e200:	e7f0      	b.n	e1e4 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    e202:	f384 8811 	msr	BASEPRI, r4
    e206:	f3bf 8f6f 	isb	sy
}
    e20a:	e7f5      	b.n	e1f8 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    e20c:	f04f 0320 	mov.w	r3, #32
    e210:	f3ef 8411 	mrs	r4, BASEPRI
    e214:	f383 8811 	msr	BASEPRI, r3
    e218:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    e21c:	4630      	mov	r0, r6
    e21e:	f001 fd74 	bl	fd0a <is_tx_ready>
    e222:	2800      	cmp	r0, #0
    e224:	d0ed      	beq.n	e202 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    e226:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e228:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    e22a:	f807 8f10 	strb.w	r8, [r7, #16]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e22e:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e232:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e236:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    e23a:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    e23e:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    e242:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e246:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    e248:	f384 8811 	msr	BASEPRI, r4
    e24c:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    e250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e254:	200102e6 	.word	0x200102e6

0000e258 <uarte_instance_init.isra.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    e258:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
    e25c:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    e25e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    e262:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
    e264:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
    e266:	460f      	mov	r7, r1
    e268:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
    e26c:	4605      	mov	r5, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
    e26e:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
    e270:	6808      	ldr	r0, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    e272:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
    e274:	4b3d      	ldr	r3, [pc, #244]	; (e36c <uarte_instance_init.isra.0+0x114>)
    *p_pin = pin_number & 0x1F;
    e276:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    e27a:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
    e27c:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e27e:	2103      	movs	r1, #3
    e280:	3280      	adds	r2, #128	; 0x80
    e282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    e286:	687a      	ldr	r2, [r7, #4]
    e288:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
    e28a:	bf1e      	ittt	ne
    e28c:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e290:	3180      	addne	r1, #128	; 0x80
    e292:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    e296:	68b9      	ldr	r1, [r7, #8]
    p_reg->PSEL.TXD = pseltxd;
    e298:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    e29c:	1c48      	adds	r0, r1, #1
    e29e:	bf18      	it	ne
    e2a0:	2000      	movne	r0, #0
    p_reg->PSEL.RXD = pselrxd;
    e2a2:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    e2a6:	bf1e      	ittt	ne
    e2a8:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e2ac:	3280      	addne	r2, #128	; 0x80
    e2ae:	f843 0022 	strne.w	r0, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    e2b2:	68f8      	ldr	r0, [r7, #12]
    e2b4:	1c42      	adds	r2, r0, #1
    e2b6:	d00c      	beq.n	e2d2 <uarte_instance_init.isra.0+0x7a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    e2b8:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
    e2bc:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    e2c0:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
    e2c4:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e2c8:	f04f 0c03 	mov.w	ip, #3
    e2cc:	3280      	adds	r2, #128	; 0x80
    e2ce:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    e2d2:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    e2d6:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    e2da:	68e9      	ldr	r1, [r5, #12]
    e2dc:	4628      	mov	r0, r5
    e2de:	3104      	adds	r1, #4
    e2e0:	f7ff fea8 	bl	e034 <uarte_nrfx_configure>
	if (err) {
    e2e4:	4680      	mov	r8, r0
    e2e6:	2800      	cmp	r0, #0
    e2e8:	d139      	bne.n	e35e <uarte_instance_init.isra.0+0x106>

#ifdef CONFIG_PM_DEVICE
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
    e2ea:	686b      	ldr	r3, [r5, #4]
    e2ec:	799b      	ldrb	r3, [r3, #6]
    e2ee:	b19b      	cbz	r3, e318 <uarte_instance_init.isra.0+0xc0>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    e2f0:	f106 0012 	add.w	r0, r6, #18
    e2f4:	f000 f97c 	bl	e5f0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    e2f8:	4b1d      	ldr	r3, [pc, #116]	; (e370 <uarte_instance_init.isra.0+0x118>)
    e2fa:	4298      	cmp	r0, r3
    e2fc:	d132      	bne.n	e364 <uarte_instance_init.isra.0+0x10c>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    e2fe:	7cb3      	ldrb	r3, [r6, #18]
    e300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e304:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    e308:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    e30c:	2301      	movs	r3, #1
    e30e:	7cb2      	ldrb	r2, [r6, #18]
    e310:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    e312:	4a18      	ldr	r2, [pc, #96]	; (e374 <uarte_instance_init.isra.0+0x11c>)
    e314:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    e318:	2308      	movs	r3, #8
    e31a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    e31e:	687b      	ldr	r3, [r7, #4]
    e320:	3301      	adds	r3, #1
    e322:	d00c      	beq.n	e33e <uarte_instance_init.isra.0+0xe6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e324:	2300      	movs	r3, #0
    e326:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    e32a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    e32e:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    e332:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    e336:	2301      	movs	r3, #1
    e338:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e33c:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!get_dev_config(dev)->ppi_endtx) {
    e33e:	686b      	ldr	r3, [r5, #4]
    e340:	799b      	ldrb	r3, [r3, #6]
    e342:	b91b      	cbnz	r3, e34c <uarte_instance_init.isra.0+0xf4>
    p_reg->INTENSET = mask;
    e344:	f44f 7380 	mov.w	r3, #256	; 0x100
    e348:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    e34c:	2300      	movs	r3, #0

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    e34e:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e350:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e354:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e358:	2301      	movs	r3, #1
    e35a:	60a3      	str	r3, [r4, #8]
    e35c:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    e35e:	4640      	mov	r0, r8
    e360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
    e364:	f06f 0804 	mvn.w	r8, #4
    e368:	e7f9      	b.n	e35e <uarte_instance_init.isra.0+0x106>
    e36a:	bf00      	nop
    e36c:	40842500 	.word	0x40842500
    e370:	0bad0000 	.word	0x0bad0000
    e374:	40017000 	.word	0x40017000

0000e378 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    e378:	b530      	push	{r4, r5, lr}
    e37a:	b085      	sub	sp, #20
    e37c:	466c      	mov	r4, sp
    e37e:	4605      	mov	r5, r0
    e380:	4b08      	ldr	r3, [pc, #32]	; (e3a4 <uarte_0_init+0x2c>)
    e382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    e384:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    e388:	2200      	movs	r2, #0
    e38a:	2101      	movs	r1, #1
    e38c:	2008      	movs	r0, #8
    e38e:	f7ff f8bf 	bl	d510 <z_arm_irq_priority_set>
    e392:	2008      	movs	r0, #8
    e394:	f7ff f89e 	bl	d4d4 <arch_irq_enable>
    e398:	4621      	mov	r1, r4
    e39a:	4628      	mov	r0, r5
    e39c:	f7ff ff5c 	bl	e258 <uarte_instance_init.isra.0>
    e3a0:	b005      	add	sp, #20
    e3a2:	bd30      	pop	{r4, r5, pc}
    e3a4:	00010220 	.word	0x00010220

0000e3a8 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    e3a8:	b530      	push	{r4, r5, lr}
    e3aa:	b085      	sub	sp, #20
    e3ac:	466c      	mov	r4, sp
    e3ae:	4605      	mov	r5, r0
    e3b0:	4b08      	ldr	r3, [pc, #32]	; (e3d4 <uarte_1_init+0x2c>)
    e3b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    e3b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    e3b8:	2200      	movs	r2, #0
    e3ba:	2101      	movs	r1, #1
    e3bc:	2009      	movs	r0, #9
    e3be:	f7ff f8a7 	bl	d510 <z_arm_irq_priority_set>
    e3c2:	2009      	movs	r0, #9
    e3c4:	f7ff f886 	bl	d4d4 <arch_irq_enable>
    e3c8:	4621      	mov	r1, r4
    e3ca:	4628      	mov	r0, r5
    e3cc:	f7ff ff44 	bl	e258 <uarte_instance_init.isra.0>
    e3d0:	b005      	add	sp, #20
    e3d2:	bd30      	pop	{r4, r5, pc}
    e3d4:	00010230 	.word	0x00010230

0000e3d8 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    e3d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    e3dc:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    e3de:	4c21      	ldr	r4, [pc, #132]	; (e464 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    e3e0:	4e21      	ldr	r6, [pc, #132]	; (e468 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    e3e2:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    e3e6:	f8df 9088 	ldr.w	r9, [pc, #136]	; e470 <check_ext_api_requests+0x98>
{
    e3ea:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    e3ec:	45a8      	cmp	r8, r5
    e3ee:	d803      	bhi.n	e3f8 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    e3f0:	2000      	movs	r0, #0
    e3f2:	b005      	add	sp, #20
    e3f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    e3f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e3fa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    e3fe:	681f      	ldr	r7, [r3, #0]
    e400:	ab01      	add	r3, sp, #4
    e402:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    e406:	220c      	movs	r2, #12
    e408:	4619      	mov	r1, r3
    e40a:	4638      	mov	r0, r7
    e40c:	f001 fba2 	bl	fb54 <memcmp>
    e410:	b990      	cbnz	r0, e438 <check_ext_api_requests+0x60>
    e412:	b18f      	cbz	r7, e438 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    e414:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    e416:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    e418:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    e41a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    e41c:	4291      	cmp	r1, r2
    e41e:	d10b      	bne.n	e438 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    e420:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    e422:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    e424:	4291      	cmp	r1, r2
    e426:	d807      	bhi.n	e438 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    e428:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    e42a:	4291      	cmp	r1, r2
    e42c:	d904      	bls.n	e438 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    e42e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    e430:	695b      	ldr	r3, [r3, #20]
    e432:	ea32 0303 	bics.w	r3, r2, r3
    e436:	d00a      	beq.n	e44e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    e438:	6a27      	ldr	r7, [r4, #32]
    e43a:	b167      	cbz	r7, e456 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    e43c:	480b      	ldr	r0, [pc, #44]	; (e46c <check_ext_api_requests+0x94>)
    e43e:	f001 f89a 	bl	f576 <printk>
			k_panic();
    e442:	4040      	eors	r0, r0
    e444:	f380 8811 	msr	BASEPRI, r0
    e448:	f04f 0004 	mov.w	r0, #4
    e44c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    e44e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    e450:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    e452:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    e454:	e7ca      	b.n	e3ec <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    e456:	4648      	mov	r0, r9
    e458:	f001 f88d 	bl	f576 <printk>
			*ext_api_req->ext_api = NULL;
    e45c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e45e:	601f      	str	r7, [r3, #0]
    e460:	e7f5      	b.n	e44e <check_ext_api_requests+0x76>
    e462:	bf00      	nop
    e464:	0000c23c 	.word	0x0000c23c
    e468:	00010240 	.word	0x00010240
    e46c:	0001037f 	.word	0x0001037f
    e470:	000103a8 	.word	0x000103a8

0000e474 <SystemInit>:
    static bool uicr_HFXOCNT_erased(void);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
    e474:	4b01      	ldr	r3, [pc, #4]	; (e47c <SystemInit+0x8>)
    e476:	4a02      	ldr	r2, [pc, #8]	; (e480 <SystemInit+0xc>)
    e478:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
    e47a:	4770      	bx	lr
    e47c:	20010030 	.word	0x20010030
    e480:	03d09000 	.word	0x03d09000

0000e484 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    e484:	4b04      	ldr	r3, [pc, #16]	; (e498 <nrfx_clock_init+0x14>)
    e486:	791a      	ldrb	r2, [r3, #4]
    e488:	b922      	cbnz	r2, e494 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    e48a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    e48c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    e48e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    e490:	4802      	ldr	r0, [pc, #8]	; (e49c <nrfx_clock_init+0x18>)
    e492:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    e494:	4802      	ldr	r0, [pc, #8]	; (e4a0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    e496:	4770      	bx	lr
    e498:	20010244 	.word	0x20010244
    e49c:	0bad0000 	.word	0x0bad0000
    e4a0:	0bad000c 	.word	0x0bad000c

0000e4a4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    e4a4:	b110      	cbz	r0, e4ac <nrfx_clock_start+0x8>
    e4a6:	2801      	cmp	r0, #1
    e4a8:	d01e      	beq.n	e4e8 <nrfx_clock_start+0x44>
    e4aa:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    e4ac:	4b13      	ldr	r3, [pc, #76]	; (e4fc <nrfx_clock_start+0x58>)
    e4ae:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e4b2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    e4b6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    e4ba:	4619      	mov	r1, r3
    e4bc:	d010      	beq.n	e4e0 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    e4be:	f002 0203 	and.w	r2, r2, #3
    e4c2:	2a02      	cmp	r2, #2
    e4c4:	d10c      	bne.n	e4e0 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    e4c6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e4ca:	2200      	movs	r2, #0
    e4cc:	4b0c      	ldr	r3, [pc, #48]	; (e500 <nrfx_clock_start+0x5c>)
    e4ce:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
    e4d0:	2202      	movs	r2, #2
    e4d2:	681b      	ldr	r3, [r3, #0]
    e4d4:	4b09      	ldr	r3, [pc, #36]	; (e4fc <nrfx_clock_start+0x58>)
    e4d6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e4da:	2201      	movs	r2, #1
    e4dc:	609a      	str	r2, [r3, #8]
}
    e4de:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    e4e0:	2301      	movs	r3, #1
    e4e2:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    e4e6:	e7f0      	b.n	e4ca <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e4e8:	2200      	movs	r2, #0
    e4ea:	4b06      	ldr	r3, [pc, #24]	; (e504 <nrfx_clock_start+0x60>)
    e4ec:	601a      	str	r2, [r3, #0]
    e4ee:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    e4f0:	4b02      	ldr	r3, [pc, #8]	; (e4fc <nrfx_clock_start+0x58>)
    e4f2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e4f6:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    e4f8:	4770      	bx	lr
    e4fa:	bf00      	nop
    e4fc:	40005000 	.word	0x40005000
    e500:	40005104 	.word	0x40005104
    e504:	40005100 	.word	0x40005100

0000e508 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    e508:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    e50a:	b110      	cbz	r0, e512 <nrfx_clock_stop+0xa>
    e50c:	2801      	cmp	r0, #1
    e50e:	d016      	beq.n	e53e <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    e510:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    e512:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e514:	2101      	movs	r1, #1
    e516:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
    e51a:	4c16      	ldr	r4, [pc, #88]	; (e574 <nrfx_clock_stop+0x6c>)
    e51c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e520:	4a15      	ldr	r2, [pc, #84]	; (e578 <nrfx_clock_stop+0x70>)
    e522:	6010      	str	r0, [r2, #0]
    e524:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e526:	4a15      	ldr	r2, [pc, #84]	; (e57c <nrfx_clock_stop+0x74>)
    e528:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e52a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    e52e:	03db      	lsls	r3, r3, #15
    e530:	d5ee      	bpl.n	e510 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    e532:	2001      	movs	r0, #1
    e534:	f001 fc10 	bl	fd58 <nrfx_busy_wait>
    e538:	3d01      	subs	r5, #1
    e53a:	d1f6      	bne.n	e52a <nrfx_clock_stop+0x22>
    e53c:	e7e8      	b.n	e510 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e53e:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e540:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e544:	4b0e      	ldr	r3, [pc, #56]	; (e580 <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
    e546:	4c0b      	ldr	r4, [pc, #44]	; (e574 <nrfx_clock_stop+0x6c>)
    e548:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e54c:	601a      	str	r2, [r3, #0]
    e54e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e550:	4b0c      	ldr	r3, [pc, #48]	; (e584 <nrfx_clock_stop+0x7c>)
    e552:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    e554:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    e558:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    e55c:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    e560:	03d2      	lsls	r2, r2, #15
    e562:	d5d5      	bpl.n	e510 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    e564:	2b00      	cmp	r3, #0
    e566:	d0d3      	beq.n	e510 <nrfx_clock_stop+0x8>
    e568:	2001      	movs	r0, #1
    e56a:	f001 fbf5 	bl	fd58 <nrfx_busy_wait>
    e56e:	3d01      	subs	r5, #1
    e570:	d1f0      	bne.n	e554 <nrfx_clock_stop+0x4c>
    e572:	e7cd      	b.n	e510 <nrfx_clock_stop+0x8>
    e574:	40005000 	.word	0x40005000
    e578:	40005104 	.word	0x40005104
    e57c:	4000500c 	.word	0x4000500c
    e580:	40005100 	.word	0x40005100
    e584:	40005004 	.word	0x40005004

0000e588 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e588:	4b15      	ldr	r3, [pc, #84]	; (e5e0 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    e58a:	b510      	push	{r4, lr}
    e58c:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    e58e:	b14a      	cbz	r2, e5a4 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e590:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
    e592:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e594:	6018      	str	r0, [r3, #0]
    e596:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    e598:	4b12      	ldr	r3, [pc, #72]	; (e5e4 <nrfx_power_clock_irq_handler+0x5c>)
    e59a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    e59e:	4b12      	ldr	r3, [pc, #72]	; (e5e8 <nrfx_power_clock_irq_handler+0x60>)
    e5a0:	681b      	ldr	r3, [r3, #0]
    e5a2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e5a4:	4b11      	ldr	r3, [pc, #68]	; (e5ec <nrfx_power_clock_irq_handler+0x64>)
    e5a6:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    e5a8:	b182      	cbz	r2, e5cc <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e5aa:	2200      	movs	r2, #0
    e5ac:	601a      	str	r2, [r3, #0]
    e5ae:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    e5b0:	4b0c      	ldr	r3, [pc, #48]	; (e5e4 <nrfx_power_clock_irq_handler+0x5c>)
    e5b2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e5b6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    e5ba:	f002 0203 	and.w	r2, r2, #3
    e5be:	2a01      	cmp	r2, #1
    e5c0:	f04f 0102 	mov.w	r1, #2
    e5c4:	d103      	bne.n	e5ce <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
    e5c6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e5ca:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    e5cc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    e5ce:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    e5d2:	4b05      	ldr	r3, [pc, #20]	; (e5e8 <nrfx_power_clock_irq_handler+0x60>)
    e5d4:	2001      	movs	r0, #1
}
    e5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    e5da:	681b      	ldr	r3, [r3, #0]
    e5dc:	4718      	bx	r3
    e5de:	bf00      	nop
    e5e0:	40005100 	.word	0x40005100
    e5e4:	40005000 	.word	0x40005000
    e5e8:	20010244 	.word	0x20010244
    e5ec:	40005104 	.word	0x40005104

0000e5f0 <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    e5f0:	4a0b      	ldr	r2, [pc, #44]	; (e620 <nrfx_dppi_channel_alloc+0x30>)
{
    e5f2:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    e5f4:	6816      	ldr	r6, [r2, #0]
    e5f6:	43f1      	mvns	r1, r6
    e5f8:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
    e5fa:	b171      	cbz	r1, e61a <nrfx_dppi_channel_alloc+0x2a>
    e5fc:	2500      	movs	r5, #0
    e5fe:	b2ec      	uxtb	r4, r5
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
    e600:	fa21 f304 	lsr.w	r3, r1, r4
    e604:	07db      	lsls	r3, r3, #31
    e606:	f105 0501 	add.w	r5, r5, #1
    e60a:	d5f8      	bpl.n	e5fe <nrfx_dppi_channel_alloc+0xe>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
    e60c:	2301      	movs	r3, #1
    e60e:	40a3      	lsls	r3, r4
    e610:	4333      	orrs	r3, r6
    *p_channel = channel;
    e612:	7004      	strb	r4, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
    e614:	4803      	ldr	r0, [pc, #12]	; (e624 <nrfx_dppi_channel_alloc+0x34>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
    e616:	6013      	str	r3, [r2, #0]
}
    e618:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
    e61a:	4803      	ldr	r0, [pc, #12]	; (e628 <nrfx_dppi_channel_alloc+0x38>)
    e61c:	e7fc      	b.n	e618 <nrfx_dppi_channel_alloc+0x28>
    e61e:	bf00      	nop
    e620:	2001024c 	.word	0x2001024c
    e624:	0bad0000 	.word	0x0bad0000
    e628:	0bad0002 	.word	0x0bad0002

0000e62c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    e62c:	2301      	movs	r3, #1
    e62e:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    e632:	f010 0fff 	tst.w	r0, #255	; 0xff
    e636:	d012      	beq.n	e65e <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    e638:	f04f 0320 	mov.w	r3, #32
    e63c:	f3ef 8111 	mrs	r1, BASEPRI
    e640:	f383 8811 	msr	BASEPRI, r3
    e644:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    e648:	4a06      	ldr	r2, [pc, #24]	; (e664 <nrfx_gpiote_channel_free+0x38>)
    e64a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    e64c:	ea23 0000 	bic.w	r0, r3, r0
    e650:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
    e652:	f381 8811 	msr	BASEPRI, r1
    e656:	f3bf 8f6f 	isb	sy
    e65a:	4803      	ldr	r0, [pc, #12]	; (e668 <nrfx_gpiote_channel_free+0x3c>)
    e65c:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    e65e:	4803      	ldr	r0, [pc, #12]	; (e66c <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    e660:	4770      	bx	lr
    e662:	bf00      	nop
    e664:	20010250 	.word	0x20010250
    e668:	0bad0000 	.word	0x0bad0000
    e66c:	0bad0004 	.word	0x0bad0004

0000e670 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    e670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    e674:	22ff      	movs	r2, #255	; 0xff
{
    e676:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
    e678:	2601      	movs	r6, #1
{
    e67a:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    e67c:	f8df e058 	ldr.w	lr, [pc, #88]	; e6d8 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    e680:	4814      	ldr	r0, [pc, #80]	; (e6d4 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    e682:	f8df 8058 	ldr.w	r8, [pc, #88]	; e6dc <nrfx_gpiote_channel_alloc+0x6c>
    e686:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    e688:	f04f 0120 	mov.w	r1, #32
    e68c:	f3ef 8c11 	mrs	ip, BASEPRI
    e690:	f381 8811 	msr	BASEPRI, r1
    e694:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    e698:	fa22 f103 	lsr.w	r1, r2, r3
    e69c:	07c9      	lsls	r1, r1, #31
    e69e:	d50a      	bpl.n	e6b6 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    e6a0:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
    e6a4:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    e6a8:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
    e6aa:	bf01      	itttt	eq
    e6ac:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
    e6ae:	4339      	orreq	r1, r7
    e6b0:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            *p_channel = ch_idx;
    e6b4:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    e6b6:	f38c 8811 	msr	BASEPRI, ip
    e6ba:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    e6be:	4540      	cmp	r0, r8
    e6c0:	d005      	beq.n	e6ce <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    e6c2:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    e6c6:	439a      	bics	r2, r3
    e6c8:	f104 0401 	add.w	r4, r4, #1
    e6cc:	d1db      	bne.n	e686 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    e6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e6d2:	bf00      	nop
    e6d4:	0bad0002 	.word	0x0bad0002
    e6d8:	20010250 	.word	0x20010250
    e6dc:	0bad0000 	.word	0x0bad0000

0000e6e0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    e6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    e6e2:	4b10      	ldr	r3, [pc, #64]	; (e724 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    e6e4:	4f10      	ldr	r7, [pc, #64]	; (e728 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    e6e6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    e6ea:	3001      	adds	r0, #1
    e6ec:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    e6f0:	42ae      	cmp	r6, r5
    e6f2:	d800      	bhi.n	e6f6 <z_sys_init_run_level+0x16>
		}
	}
}
    e6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    e6f6:	e9d5 3400 	ldrd	r3, r4, [r5]
    e6fa:	4620      	mov	r0, r4
    e6fc:	4798      	blx	r3
    e6fe:	b170      	cbz	r0, e71e <z_sys_init_run_level+0x3e>
    e700:	b16c      	cbz	r4, e71e <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
    e702:	2301      	movs	r3, #1
				(dev - __device_start));
    e704:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    e706:	4a09      	ldr	r2, [pc, #36]	; (e72c <z_sys_init_run_level+0x4c>)
    e708:	1124      	asrs	r4, r4, #4
    e70a:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    e70c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    e710:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
    e714:	fa03 f404 	lsl.w	r4, r3, r4
    e718:	4304      	orrs	r4, r0
    e71a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    e71e:	3508      	adds	r5, #8
    e720:	e7e6      	b.n	e6f0 <z_sys_init_run_level+0x10>
    e722:	bf00      	nop
    e724:	00010320 	.word	0x00010320
    e728:	2001003c 	.word	0x2001003c
    e72c:	2001008c 	.word	0x2001008c

0000e730 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    e730:	4b08      	ldr	r3, [pc, #32]	; (e754 <z_device_ready+0x24>)
    e732:	1ac0      	subs	r0, r0, r3
    e734:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    e736:	4b08      	ldr	r3, [pc, #32]	; (e758 <z_device_ready+0x28>)
    e738:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    e73a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    e73e:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    e740:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
    e744:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    e748:	4210      	tst	r0, r2
}
    e74a:	bf0c      	ite	eq
    e74c:	4618      	moveq	r0, r3
    e74e:	2000      	movne	r0, #0
    e750:	4770      	bx	lr
    e752:	bf00      	nop
    e754:	2001003c 	.word	0x2001003c
    e758:	2001008c 	.word	0x2001008c

0000e75c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    e75c:	4911      	ldr	r1, [pc, #68]	; (e7a4 <z_impl_device_get_binding+0x48>)
{
    e75e:	b570      	push	{r4, r5, r6, lr}
    e760:	4605      	mov	r5, r0
    e762:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    e764:	4c10      	ldr	r4, [pc, #64]	; (e7a8 <z_impl_device_get_binding+0x4c>)
    e766:	428c      	cmp	r4, r1
    e768:	d104      	bne.n	e774 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    e76a:	4c0f      	ldr	r4, [pc, #60]	; (e7a8 <z_impl_device_get_binding+0x4c>)
    e76c:	42b4      	cmp	r4, r6
    e76e:	d10a      	bne.n	e786 <z_impl_device_get_binding+0x2a>
	return NULL;
    e770:	2400      	movs	r4, #0
    e772:	e014      	b.n	e79e <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    e774:	4620      	mov	r0, r4
    e776:	f7ff ffdb 	bl	e730 <z_device_ready>
    e77a:	b110      	cbz	r0, e782 <z_impl_device_get_binding+0x26>
    e77c:	6823      	ldr	r3, [r4, #0]
    e77e:	42ab      	cmp	r3, r5
    e780:	d00d      	beq.n	e79e <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    e782:	3410      	adds	r4, #16
    e784:	e7ef      	b.n	e766 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    e786:	4620      	mov	r0, r4
    e788:	f7ff ffd2 	bl	e730 <z_device_ready>
    e78c:	b908      	cbnz	r0, e792 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    e78e:	3410      	adds	r4, #16
    e790:	e7ec      	b.n	e76c <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    e792:	4628      	mov	r0, r5
    e794:	6821      	ldr	r1, [r4, #0]
    e796:	f001 f9d1 	bl	fb3c <strcmp>
    e79a:	2800      	cmp	r0, #0
    e79c:	d1f7      	bne.n	e78e <z_impl_device_get_binding+0x32>
}
    e79e:	4620      	mov	r0, r4
    e7a0:	bd70      	pop	{r4, r5, r6, pc}
    e7a2:	bf00      	nop
    e7a4:	2001008c 	.word	0x2001008c
    e7a8:	2001003c 	.word	0x2001003c

0000e7ac <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
    e7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e7ae:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
    e7b0:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
    e7b2:	4e15      	ldr	r6, [pc, #84]	; (e808 <idle+0x5c>)
	__asm__ volatile(
    e7b4:	f04f 0220 	mov.w	r2, #32
    e7b8:	f3ef 8311 	mrs	r3, BASEPRI
    e7bc:	f382 8811 	msr	BASEPRI, r2
    e7c0:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
    e7c4:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
    e7c6:	b188      	cbz	r0, e7ec <idle+0x40>
			cpu->pending_abort = NULL;
    e7c8:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
    e7ca:	f383 8811 	msr	BASEPRI, r3
    e7ce:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
    e7d2:	f000 fa87 	bl	ece4 <z_thread_single_abort>
	__asm__ volatile(
    e7d6:	f04f 0320 	mov.w	r3, #32
    e7da:	f3ef 8011 	mrs	r0, BASEPRI
    e7de:	f383 8811 	msr	BASEPRI, r3
    e7e2:	f3bf 8f6f 	isb	sy
    e7e6:	f001 fae1 	bl	fdac <z_reschedule_irqlock>
			continue;
    e7ea:	e7e3      	b.n	e7b4 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
    e7ec:	f001 fbaa 	bl	ff44 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    e7f0:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
    e7f2:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    e7f4:	2802      	cmp	r0, #2
    e7f6:	bfd8      	it	le
    e7f8:	4608      	movle	r0, r1
    e7fa:	f001 fbb3 	bl	ff64 <z_set_timeout_expiry>
		_kernel.idle = ticks;
    e7fe:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
    e800:	f7fe ff36 	bl	d670 <arch_cpu_idle>
}
    e804:	e7d6      	b.n	e7b4 <idle+0x8>
    e806:	bf00      	nop
    e808:	200102a0 	.word	0x200102a0

0000e80c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    e80c:	4802      	ldr	r0, [pc, #8]	; (e818 <z_bss_zero+0xc>)
    e80e:	4a03      	ldr	r2, [pc, #12]	; (e81c <z_bss_zero+0x10>)
    e810:	2100      	movs	r1, #0
    e812:	1a12      	subs	r2, r2, r0
    e814:	f001 b9d9 	b.w	fbca <memset>
    e818:	20010090 	.word	0x20010090
    e81c:	200102e8 	.word	0x200102e8

0000e820 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
    e820:	2201      	movs	r2, #1
{
    e822:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    e824:	4b09      	ldr	r3, [pc, #36]	; (e84c <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    e826:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    e828:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    e82a:	f7ff ff59 	bl	e6e0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    e82e:	f000 fcd7 	bl	f1e0 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    e832:	2003      	movs	r0, #3
    e834:	f7ff ff54 	bl	e6e0 <z_sys_init_run_level>

	z_init_static_threads();
    e838:	f000 fc60 	bl	f0fc <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    e83c:	f7fd fe7c 	bl	c538 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    e840:	4a03      	ldr	r2, [pc, #12]	; (e850 <bg_thread_main+0x30>)
    e842:	7b13      	ldrb	r3, [r2, #12]
    e844:	f023 0301 	bic.w	r3, r3, #1
    e848:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    e84a:	bd08      	pop	{r3, pc}
    e84c:	200102e6 	.word	0x200102e6
    e850:	20010110 	.word	0x20010110

0000e854 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    e854:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    e858:	4b34      	ldr	r3, [pc, #208]	; (e92c <z_cstart+0xd8>)
    e85a:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
    e85c:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    e860:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    e864:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e868:	2400      	movs	r4, #0
    e86a:	23e0      	movs	r3, #224	; 0xe0
    e86c:	4d30      	ldr	r5, [pc, #192]	; (e930 <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    e86e:	f04f 0b01 	mov.w	fp, #1
    e872:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    e876:	77ec      	strb	r4, [r5, #31]
    e878:	762c      	strb	r4, [r5, #24]
    e87a:	766c      	strb	r4, [r5, #25]
    e87c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    e87e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    e880:	4e2c      	ldr	r6, [pc, #176]	; (e934 <z_cstart+0xe0>)
    e882:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    e886:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    e888:	f7ff f82c 	bl	d8e4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    e88c:	f7fe feea 	bl	d664 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    e890:	f04f 33ff 	mov.w	r3, #4294967295
    e894:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    e896:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    e898:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    e89c:	4d26      	ldr	r5, [pc, #152]	; (e938 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    e89e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    e8a2:	ab06      	add	r3, sp, #24
    e8a4:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    e8a6:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    e8a8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    e8ac:	f7ff ff18 	bl	e6e0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    e8b0:	2001      	movs	r0, #1
    e8b2:	f7ff ff15 	bl	e6e0 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    e8b6:	f8df a098 	ldr.w	sl, [pc, #152]	; e950 <z_cstart+0xfc>
	z_sched_init();
    e8ba:	f000 fb23 	bl	ef04 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    e8be:	4b1f      	ldr	r3, [pc, #124]	; (e93c <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
    e8c0:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    e8c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e8c6:	491e      	ldr	r1, [pc, #120]	; (e940 <z_cstart+0xec>)
    e8c8:	9305      	str	r3, [sp, #20]
    e8ca:	4630      	mov	r0, r6
    e8cc:	4653      	mov	r3, sl
    e8ce:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    e8d2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    e8d6:	9400      	str	r4, [sp, #0]
    e8d8:	f000 fbe0 	bl	f09c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e8dc:	7b73      	ldrb	r3, [r6, #13]
    e8de:	4680      	mov	r8, r0
    e8e0:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    e8e4:	4630      	mov	r0, r6
    e8e6:	7373      	strb	r3, [r6, #13]
    e8e8:	f001 fa8c 	bl	fe04 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    e8ec:	230f      	movs	r3, #15
    e8ee:	4f15      	ldr	r7, [pc, #84]	; (e944 <z_cstart+0xf0>)
    e8f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    e8f4:	e9cd 4302 	strd	r4, r3, [sp, #8]
    e8f8:	4913      	ldr	r1, [pc, #76]	; (e948 <z_cstart+0xf4>)
    e8fa:	4b14      	ldr	r3, [pc, #80]	; (e94c <z_cstart+0xf8>)
    e8fc:	4638      	mov	r0, r7
    e8fe:	e9cd b404 	strd	fp, r4, [sp, #16]
    e902:	e9cd 5400 	strd	r5, r4, [sp]
    e906:	f000 fbc9 	bl	f09c <z_setup_new_thread>
    e90a:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    e90c:	4652      	mov	r2, sl
    e90e:	f023 0304 	bic.w	r3, r3, #4
    e912:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    e914:	f105 031c 	add.w	r3, r5, #28
    e918:	4641      	mov	r1, r8
    e91a:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
    e91c:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    e920:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    e922:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
    e924:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    e928:	f7fe fe24 	bl	d574 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    e92c:	20010828 	.word	0x20010828
    e930:	e000ed00 	.word	0xe000ed00
    e934:	20010110 	.word	0x20010110
    e938:	200102a0 	.word	0x200102a0
    e93c:	000103db 	.word	0x000103db
    e940:	200102e8 	.word	0x200102e8
    e944:	20010090 	.word	0x20010090
    e948:	200106e8 	.word	0x200106e8
    e94c:	0000e7ad 	.word	0x0000e7ad
    e950:	0000e821 	.word	0x0000e821

0000e954 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    e954:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    e956:	4c08      	ldr	r4, [pc, #32]	; (e978 <z_reset_time_slice+0x24>)
    e958:	6823      	ldr	r3, [r4, #0]
    e95a:	b15b      	cbz	r3, e974 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    e95c:	f7fe fd86 	bl	d46c <z_clock_elapsed>
    e960:	4603      	mov	r3, r0
    e962:	6820      	ldr	r0, [r4, #0]
    e964:	4a05      	ldr	r2, [pc, #20]	; (e97c <z_reset_time_slice+0x28>)
    e966:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    e968:	2100      	movs	r1, #0
	}
}
    e96a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    e96e:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
    e970:	f001 baf8 	b.w	ff64 <z_set_timeout_expiry>
}
    e974:	bd10      	pop	{r4, pc}
    e976:	bf00      	nop
    e978:	200102dc 	.word	0x200102dc
    e97c:	200102a0 	.word	0x200102a0

0000e980 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    e980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e982:	4605      	mov	r5, r0
    e984:	460c      	mov	r4, r1
    e986:	f04f 0320 	mov.w	r3, #32
    e98a:	f3ef 8611 	mrs	r6, BASEPRI
    e98e:	f383 8811 	msr	BASEPRI, r3
    e992:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    e996:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    e998:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    e99c:	f240 30e7 	movw	r0, #999	; 0x3e7
    e9a0:	2100      	movs	r1, #0
    e9a2:	4b0a      	ldr	r3, [pc, #40]	; (e9cc <k_sched_time_slice_set+0x4c>)
    e9a4:	fbe7 0105 	umlal	r0, r1, r7, r5
    e9a8:	615a      	str	r2, [r3, #20]
    e9aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e9ae:	2300      	movs	r3, #0
    e9b0:	f7fd fc44 	bl	c23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    e9b4:	4b06      	ldr	r3, [pc, #24]	; (e9d0 <k_sched_time_slice_set+0x50>)
    e9b6:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    e9b8:	4b06      	ldr	r3, [pc, #24]	; (e9d4 <k_sched_time_slice_set+0x54>)
    e9ba:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    e9bc:	f7ff ffca 	bl	e954 <z_reset_time_slice>
	__asm__ volatile(
    e9c0:	f386 8811 	msr	BASEPRI, r6
    e9c4:	f3bf 8f6f 	isb	sy
	}
}
    e9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e9ca:	bf00      	nop
    e9cc:	200102a0 	.word	0x200102a0
    e9d0:	200102dc 	.word	0x200102dc
    e9d4:	200102d8 	.word	0x200102d8

0000e9d8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e9d8:	b949      	cbnz	r1, e9ee <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e9da:	f3ef 8005 	mrs	r0, IPSR
    e9de:	b930      	cbnz	r0, e9ee <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    e9e0:	4b05      	ldr	r3, [pc, #20]	; (e9f8 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    e9e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e9e4:	689b      	ldr	r3, [r3, #8]
    e9e6:	429a      	cmp	r2, r3
    e9e8:	d001      	beq.n	e9ee <z_reschedule+0x16>
	ret = arch_swap(key);
    e9ea:	f7fe bd59 	b.w	d4a0 <arch_swap>
    e9ee:	f381 8811 	msr	BASEPRI, r1
    e9f2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    e9f6:	4770      	bx	lr
    e9f8:	200102a0 	.word	0x200102a0

0000e9fc <k_sched_lock>:
	__asm__ volatile(
    e9fc:	f04f 0320 	mov.w	r3, #32
    ea00:	f3ef 8111 	mrs	r1, BASEPRI
    ea04:	f383 8811 	msr	BASEPRI, r3
    ea08:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    ea0c:	4b04      	ldr	r3, [pc, #16]	; (ea20 <k_sched_lock+0x24>)
    ea0e:	689a      	ldr	r2, [r3, #8]
    ea10:	7bd3      	ldrb	r3, [r2, #15]
    ea12:	3b01      	subs	r3, #1
    ea14:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    ea16:	f381 8811 	msr	BASEPRI, r1
    ea1a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    ea1e:	4770      	bx	lr
    ea20:	200102a0 	.word	0x200102a0

0000ea24 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    ea24:	4b09      	ldr	r3, [pc, #36]	; (ea4c <z_priq_dumb_remove+0x28>)
    ea26:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    ea2a:	4282      	cmp	r2, r0
    ea2c:	d105      	bne.n	ea3a <z_priq_dumb_remove+0x16>
    ea2e:	689b      	ldr	r3, [r3, #8]
    ea30:	428b      	cmp	r3, r1
    ea32:	d102      	bne.n	ea3a <z_priq_dumb_remove+0x16>
    ea34:	7b4b      	ldrb	r3, [r1, #13]
    ea36:	06db      	lsls	r3, r3, #27
    ea38:	d106      	bne.n	ea48 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    ea3a:	e9d1 3200 	ldrd	r3, r2, [r1]
    ea3e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    ea40:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    ea42:	2300      	movs	r3, #0
	node->prev = NULL;
    ea44:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    ea48:	4770      	bx	lr
    ea4a:	bf00      	nop
    ea4c:	200102a0 	.word	0x200102a0

0000ea50 <update_cache>:
{
    ea50:	b538      	push	{r3, r4, r5, lr}
    ea52:	4c12      	ldr	r4, [pc, #72]	; (ea9c <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c>)
    ea54:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
    ea56:	6923      	ldr	r3, [r4, #16]
    ea58:	68a2      	ldr	r2, [r4, #8]
    ea5a:	b10b      	cbz	r3, ea60 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1>
	return thread ? thread : _current_cpu->idle_thread;
    ea5c:	68e5      	ldr	r5, [r4, #12]
    ea5e:	e00c      	b.n	ea7a <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
    ea60:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ea64:	f001 f9c4 	bl	fdf0 <z_priq_dumb_best>
    ea68:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    ea6a:	7b53      	ldrb	r3, [r2, #13]
    ea6c:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
    ea6e:	bf44      	itt	mi
    ea70:	f043 0308 	orrmi.w	r3, r3, #8
    ea74:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
    ea76:	2d00      	cmp	r5, #0
    ea78:	d0f0      	beq.n	ea5c <update_cache+0xc>
	if (preempt_ok != 0) {
    ea7a:	b949      	cbnz	r1, ea90 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30>
	if (z_is_thread_prevented_from_running(_current)) {
    ea7c:	7b53      	ldrb	r3, [r2, #13]
    ea7e:	06db      	lsls	r3, r3, #27
    ea80:	d106      	bne.n	ea90 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    ea82:	69ab      	ldr	r3, [r5, #24]
    ea84:	b923      	cbnz	r3, ea90 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30>
	if (is_preempt(_current) || is_metairq(thread)) {
    ea86:	89d3      	ldrh	r3, [r2, #14]
    ea88:	2b7f      	cmp	r3, #127	; 0x7f
    ea8a:	d901      	bls.n	ea90 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30>
		_kernel.ready_q.cache = _current;
    ea8c:	62a2      	str	r2, [r4, #40]	; 0x28
}
    ea8e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    ea90:	4295      	cmp	r5, r2
    ea92:	d001      	beq.n	ea98 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x38>
			z_reset_time_slice();
    ea94:	f7ff ff5e 	bl	e954 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    ea98:	62a5      	str	r5, [r4, #40]	; 0x28
}
    ea9a:	e7f8      	b.n	ea8e <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e>
    ea9c:	200102a0 	.word	0x200102a0

0000eaa0 <k_sched_unlock>:
{
    eaa0:	b510      	push	{r4, lr}
	__asm__ volatile(
    eaa2:	f04f 0320 	mov.w	r3, #32
    eaa6:	f3ef 8411 	mrs	r4, BASEPRI
    eaaa:	f383 8811 	msr	BASEPRI, r3
    eaae:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    eab2:	4b08      	ldr	r3, [pc, #32]	; (ead4 <k_sched_unlock+0x34>)
		update_cache(0);
    eab4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    eab6:	689a      	ldr	r2, [r3, #8]
    eab8:	7bd3      	ldrb	r3, [r2, #15]
    eaba:	3301      	adds	r3, #1
    eabc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    eabe:	f7ff ffc7 	bl	ea50 <update_cache>
	__asm__ volatile(
    eac2:	f384 8811 	msr	BASEPRI, r4
    eac6:	f3bf 8f6f 	isb	sy
}
    eaca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    eace:	f001 b979 	b.w	fdc4 <z_reschedule_unlocked>
    ead2:	bf00      	nop
    ead4:	200102a0 	.word	0x200102a0

0000ead8 <ready_thread>:
{
    ead8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    eada:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    eade:	7b43      	ldrb	r3, [r0, #13]
    eae0:	2a00      	cmp	r2, #0
    eae2:	db2c      	blt.n	eb3e <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    eae4:	06db      	lsls	r3, r3, #27
    eae6:	d12a      	bne.n	eb3e <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    eae8:	6983      	ldr	r3, [r0, #24]
    eaea:	bb43      	cbnz	r3, eb3e <ready_thread+0x66>
	return list->head == list;
    eaec:	4a15      	ldr	r2, [pc, #84]	; (eb44 <ready_thread+0x6c>)
    eaee:	4611      	mov	r1, r2
    eaf0:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eaf4:	428c      	cmp	r4, r1
    eaf6:	bf18      	it	ne
    eaf8:	4623      	movne	r3, r4
    eafa:	2b00      	cmp	r3, #0
    eafc:	bf38      	it	cc
    eafe:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    eb00:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    eb02:	b1b3      	cbz	r3, eb32 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
    eb04:	f990 600e 	ldrsb.w	r6, [r0, #14]
    eb08:	f993 500e 	ldrsb.w	r5, [r3, #14]
    eb0c:	42ae      	cmp	r6, r5
    eb0e:	db03      	blt.n	eb18 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
    eb10:	42a3      	cmp	r3, r4
    eb12:	d00e      	beq.n	eb32 <ready_thread+0x5a>
    eb14:	681b      	ldr	r3, [r3, #0]
    eb16:	e7f4      	b.n	eb02 <ready_thread+0x2a>
	node->prev = successor->prev;
    eb18:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    eb1a:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    eb1e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    eb20:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    eb22:	7b43      	ldrb	r3, [r0, #13]
    eb24:	f063 037f 	orn	r3, r3, #127	; 0x7f
    eb28:	7343      	strb	r3, [r0, #13]
}
    eb2a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    eb2c:	2000      	movs	r0, #0
    eb2e:	f7ff bf8f 	b.w	ea50 <update_cache>
	node->prev = list->tail;
    eb32:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    eb36:	6b13      	ldr	r3, [r2, #48]	; 0x30
    eb38:	6018      	str	r0, [r3, #0]
	list->tail = node;
    eb3a:	6310      	str	r0, [r2, #48]	; 0x30
}
    eb3c:	e7f1      	b.n	eb22 <ready_thread+0x4a>
}
    eb3e:	bc70      	pop	{r4, r5, r6}
    eb40:	4770      	bx	lr
    eb42:	bf00      	nop
    eb44:	200102a0 	.word	0x200102a0

0000eb48 <z_sched_start>:
{
    eb48:	b510      	push	{r4, lr}
	__asm__ volatile(
    eb4a:	f04f 0220 	mov.w	r2, #32
    eb4e:	f3ef 8411 	mrs	r4, BASEPRI
    eb52:	f382 8811 	msr	BASEPRI, r2
    eb56:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    eb5a:	7b42      	ldrb	r2, [r0, #13]
    eb5c:	0751      	lsls	r1, r2, #29
    eb5e:	d404      	bmi.n	eb6a <z_sched_start+0x22>
	__asm__ volatile(
    eb60:	f384 8811 	msr	BASEPRI, r4
    eb64:	f3bf 8f6f 	isb	sy
}
    eb68:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    eb6a:	f022 0204 	bic.w	r2, r2, #4
    eb6e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    eb70:	f7ff ffb2 	bl	ead8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    eb74:	4621      	mov	r1, r4
}
    eb76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    eb7a:	4801      	ldr	r0, [pc, #4]	; (eb80 <z_sched_start+0x38>)
    eb7c:	f7ff bf2c 	b.w	e9d8 <z_reschedule>
    eb80:	200102e7 	.word	0x200102e7

0000eb84 <move_thread_to_end_of_prio_q>:
{
    eb84:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    eb86:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    eb8a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    eb8c:	2b00      	cmp	r3, #0
    eb8e:	da02      	bge.n	eb96 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    eb90:	4817      	ldr	r0, [pc, #92]	; (ebf0 <move_thread_to_end_of_prio_q+0x6c>)
    eb92:	f7ff ff47 	bl	ea24 <z_priq_dumb_remove>
	return list->head == list;
    eb96:	4a17      	ldr	r2, [pc, #92]	; (ebf4 <move_thread_to_end_of_prio_q+0x70>)
    eb98:	4610      	mov	r0, r2
    eb9a:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    eb9e:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eba0:	4283      	cmp	r3, r0
    eba2:	bf08      	it	eq
    eba4:	2300      	moveq	r3, #0
    eba6:	2b00      	cmp	r3, #0
    eba8:	bf38      	it	cc
    ebaa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ebac:	b1d3      	cbz	r3, ebe4 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
    ebae:	f991 600e 	ldrsb.w	r6, [r1, #14]
    ebb2:	f993 500e 	ldrsb.w	r5, [r3, #14]
    ebb6:	42ae      	cmp	r6, r5
    ebb8:	db03      	blt.n	ebc2 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    ebba:	42a3      	cmp	r3, r4
    ebbc:	d012      	beq.n	ebe4 <move_thread_to_end_of_prio_q+0x60>
    ebbe:	681b      	ldr	r3, [r3, #0]
    ebc0:	e7f4      	b.n	ebac <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
    ebc2:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    ebc4:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    ebc8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    ebca:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    ebcc:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
    ebce:	6890      	ldr	r0, [r2, #8]
    ebd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ebd4:	734b      	strb	r3, [r1, #13]
    ebd6:	1a43      	subs	r3, r0, r1
    ebd8:	4258      	negs	r0, r3
    ebda:	4158      	adcs	r0, r3
}
    ebdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    ebe0:	f7ff bf36 	b.w	ea50 <update_cache>
	node->prev = list->tail;
    ebe4:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
    ebe8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    ebea:	6019      	str	r1, [r3, #0]
	list->tail = node;
    ebec:	6311      	str	r1, [r2, #48]	; 0x30
}
    ebee:	e7ed      	b.n	ebcc <move_thread_to_end_of_prio_q+0x48>
    ebf0:	200102cc 	.word	0x200102cc
    ebf4:	200102a0 	.word	0x200102a0

0000ebf8 <z_time_slice>:
{
    ebf8:	4601      	mov	r1, r0
    ebfa:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    ebfc:	f04f 0320 	mov.w	r3, #32
    ec00:	f3ef 8411 	mrs	r4, BASEPRI
    ec04:	f383 8811 	msr	BASEPRI, r3
    ec08:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    ec0c:	4b16      	ldr	r3, [pc, #88]	; (ec68 <z_time_slice+0x70>)
    ec0e:	4a17      	ldr	r2, [pc, #92]	; (ec6c <z_time_slice+0x74>)
    ec10:	6898      	ldr	r0, [r3, #8]
    ec12:	6815      	ldr	r5, [r2, #0]
    ec14:	42a8      	cmp	r0, r5
    ec16:	461d      	mov	r5, r3
    ec18:	d106      	bne.n	ec28 <z_time_slice+0x30>
			z_reset_time_slice();
    ec1a:	f7ff fe9b 	bl	e954 <z_reset_time_slice>
	__asm__ volatile(
    ec1e:	f384 8811 	msr	BASEPRI, r4
    ec22:	f3bf 8f6f 	isb	sy
}
    ec26:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    ec28:	2600      	movs	r6, #0
    ec2a:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    ec2c:	4a10      	ldr	r2, [pc, #64]	; (ec70 <z_time_slice+0x78>)
    ec2e:	6812      	ldr	r2, [r2, #0]
    ec30:	b1ba      	cbz	r2, ec62 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    ec32:	89c2      	ldrh	r2, [r0, #14]
    ec34:	2a7f      	cmp	r2, #127	; 0x7f
    ec36:	d814      	bhi.n	ec62 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    ec38:	7b42      	ldrb	r2, [r0, #13]
    ec3a:	06d2      	lsls	r2, r2, #27
    ec3c:	d111      	bne.n	ec62 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    ec3e:	4a0d      	ldr	r2, [pc, #52]	; (ec74 <z_time_slice+0x7c>)
    ec40:	f990 600e 	ldrsb.w	r6, [r0, #14]
    ec44:	6812      	ldr	r2, [r2, #0]
    ec46:	4296      	cmp	r6, r2
    ec48:	db0b      	blt.n	ec62 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    ec4a:	4a0b      	ldr	r2, [pc, #44]	; (ec78 <z_time_slice+0x80>)
    ec4c:	4290      	cmp	r0, r2
    ec4e:	d008      	beq.n	ec62 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    ec50:	695a      	ldr	r2, [r3, #20]
    ec52:	428a      	cmp	r2, r1
    ec54:	dc02      	bgt.n	ec5c <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    ec56:	f7ff ff95 	bl	eb84 <move_thread_to_end_of_prio_q>
    ec5a:	e7de      	b.n	ec1a <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    ec5c:	1a52      	subs	r2, r2, r1
    ec5e:	615a      	str	r2, [r3, #20]
    ec60:	e7dd      	b.n	ec1e <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    ec62:	2300      	movs	r3, #0
    ec64:	616b      	str	r3, [r5, #20]
    ec66:	e7da      	b.n	ec1e <z_time_slice+0x26>
    ec68:	200102a0 	.word	0x200102a0
    ec6c:	200102d4 	.word	0x200102d4
    ec70:	200102dc 	.word	0x200102dc
    ec74:	200102d8 	.word	0x200102d8
    ec78:	20010090 	.word	0x20010090

0000ec7c <z_impl_k_thread_suspend>:
{
    ec7c:	b570      	push	{r4, r5, r6, lr}
    ec7e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    ec80:	3018      	adds	r0, #24
    ec82:	f001 f949 	bl	ff18 <z_abort_timeout>
	__asm__ volatile(
    ec86:	f04f 0320 	mov.w	r3, #32
    ec8a:	f3ef 8611 	mrs	r6, BASEPRI
    ec8e:	f383 8811 	msr	BASEPRI, r3
    ec92:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    ec96:	f994 300d 	ldrsb.w	r3, [r4, #13]
    ec9a:	2b00      	cmp	r3, #0
    ec9c:	da07      	bge.n	ecae <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    ec9e:	4621      	mov	r1, r4
    eca0:	480e      	ldr	r0, [pc, #56]	; (ecdc <z_impl_k_thread_suspend+0x60>)
    eca2:	f7ff febf 	bl	ea24 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    eca6:	7b63      	ldrb	r3, [r4, #13]
    eca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ecac:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    ecae:	4d0c      	ldr	r5, [pc, #48]	; (ece0 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    ecb0:	7b63      	ldrb	r3, [r4, #13]
    ecb2:	68a8      	ldr	r0, [r5, #8]
    ecb4:	f043 0310 	orr.w	r3, r3, #16
    ecb8:	7363      	strb	r3, [r4, #13]
    ecba:	1b03      	subs	r3, r0, r4
    ecbc:	4258      	negs	r0, r3
    ecbe:	4158      	adcs	r0, r3
    ecc0:	f7ff fec6 	bl	ea50 <update_cache>
	__asm__ volatile(
    ecc4:	f386 8811 	msr	BASEPRI, r6
    ecc8:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    eccc:	68ab      	ldr	r3, [r5, #8]
    ecce:	42a3      	cmp	r3, r4
    ecd0:	d103      	bne.n	ecda <z_impl_k_thread_suspend+0x5e>
}
    ecd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    ecd6:	f001 b875 	b.w	fdc4 <z_reschedule_unlocked>
}
    ecda:	bd70      	pop	{r4, r5, r6, pc}
    ecdc:	200102cc 	.word	0x200102cc
    ece0:	200102a0 	.word	0x200102a0

0000ece4 <z_thread_single_abort>:
{
    ece4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ece8:	4604      	mov	r4, r0
	__asm__ volatile(
    ecea:	f04f 0320 	mov.w	r3, #32
    ecee:	f3ef 8211 	mrs	r2, BASEPRI
    ecf2:	f383 8811 	msr	BASEPRI, r3
    ecf6:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
    ecfa:	7b43      	ldrb	r3, [r0, #13]
    ecfc:	f013 0f28 	tst.w	r3, #40	; 0x28
    ed00:	d005      	beq.n	ed0e <z_thread_single_abort+0x2a>
	__asm__ volatile(
    ed02:	f382 8811 	msr	BASEPRI, r2
    ed06:	f3bf 8f6f 	isb	sy
}
    ed0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
    ed0e:	f043 0320 	orr.w	r3, r3, #32
    ed12:	7343      	strb	r3, [r0, #13]
    ed14:	f382 8811 	msr	BASEPRI, r2
    ed18:	f3bf 8f6f 	isb	sy
    ed1c:	3018      	adds	r0, #24
    ed1e:	f001 f8fb 	bl	ff18 <z_abort_timeout>
	__asm__ volatile(
    ed22:	f04f 0320 	mov.w	r3, #32
    ed26:	f3ef 8611 	mrs	r6, BASEPRI
    ed2a:	f383 8811 	msr	BASEPRI, r3
    ed2e:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ed32:	7b63      	ldrb	r3, [r4, #13]
    ed34:	06d8      	lsls	r0, r3, #27
    ed36:	d116      	bne.n	ed66 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
    ed38:	69a2      	ldr	r2, [r4, #24]
    ed3a:	b9a2      	cbnz	r2, ed66 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
    ed3c:	0619      	lsls	r1, r3, #24
    ed3e:	d507      	bpl.n	ed50 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
    ed40:	4621      	mov	r1, r4
    ed42:	4826      	ldr	r0, [pc, #152]	; (eddc <z_thread_single_abort+0xf8>)
    ed44:	f7ff fe6e 	bl	ea24 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    ed48:	7b63      	ldrb	r3, [r4, #13]
    ed4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ed4e:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    ed50:	4b23      	ldr	r3, [pc, #140]	; (ede0 <z_thread_single_abort+0xfc>)
    ed52:	6898      	ldr	r0, [r3, #8]
    ed54:	1b02      	subs	r2, r0, r4
    ed56:	4250      	negs	r0, r2
    ed58:	4150      	adcs	r0, r2
    ed5a:	f7ff fe79 	bl	ea50 <update_cache>
			waiter->base.pended_on = NULL;
    ed5e:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    ed60:	f104 0830 	add.w	r8, r4, #48	; 0x30
    ed64:	e01d      	b.n	eda2 <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
    ed66:	079b      	lsls	r3, r3, #30
    ed68:	d5f9      	bpl.n	ed5e <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
    ed6a:	4621      	mov	r1, r4
    ed6c:	68a0      	ldr	r0, [r4, #8]
    ed6e:	f7ff fe59 	bl	ea24 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ed72:	7b63      	ldrb	r3, [r4, #13]
    ed74:	f023 0302 	bic.w	r3, r3, #2
    ed78:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    ed7a:	2300      	movs	r3, #0
    ed7c:	60a3      	str	r3, [r4, #8]
    ed7e:	e7ee      	b.n	ed5e <z_thread_single_abort+0x7a>
    ed80:	f105 0018 	add.w	r0, r5, #24
    ed84:	f001 f8c8 	bl	ff18 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    ed88:	68a8      	ldr	r0, [r5, #8]
    ed8a:	4629      	mov	r1, r5
    ed8c:	f7ff fe4a 	bl	ea24 <z_priq_dumb_remove>
    ed90:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
    ed92:	4628      	mov	r0, r5
    ed94:	f023 0302 	bic.w	r3, r3, #2
    ed98:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    ed9a:	60af      	str	r7, [r5, #8]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    ed9c:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    ed9e:	f7ff fe9b 	bl	ead8 <ready_thread>
	return list->head == list;
    eda2:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eda4:	4545      	cmp	r5, r8
    eda6:	d001      	beq.n	edac <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    eda8:	2d00      	cmp	r5, #0
    edaa:	d1e9      	bne.n	ed80 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
    edac:	4b0c      	ldr	r3, [pc, #48]	; (ede0 <z_thread_single_abort+0xfc>)
    edae:	689a      	ldr	r2, [r3, #8]
    edb0:	4b0c      	ldr	r3, [pc, #48]	; (ede4 <z_thread_single_abort+0x100>)
    edb2:	429a      	cmp	r2, r3
    edb4:	d102      	bne.n	edbc <z_thread_single_abort+0xd8>
			update_cache(1);
    edb6:	2001      	movs	r0, #1
    edb8:	f7ff fe4a 	bl	ea50 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    edbc:	7b63      	ldrb	r3, [r4, #13]
    edbe:	f043 0308 	orr.w	r3, r3, #8
    edc2:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
    edc4:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
    edc6:	f386 8811 	msr	BASEPRI, r6
    edca:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
    edce:	2b00      	cmp	r3, #0
    edd0:	d09b      	beq.n	ed0a <z_thread_single_abort+0x26>
		fn_abort(thread);
    edd2:	4620      	mov	r0, r4
}
    edd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
    edd8:	4718      	bx	r3
    edda:	bf00      	nop
    eddc:	200102cc 	.word	0x200102cc
    ede0:	200102a0 	.word	0x200102a0
    ede4:	20010090 	.word	0x20010090

0000ede8 <unready_thread>:
{
    ede8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    edea:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    edee:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    edf0:	2b00      	cmp	r3, #0
    edf2:	da06      	bge.n	ee02 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    edf4:	4807      	ldr	r0, [pc, #28]	; (ee14 <unready_thread+0x2c>)
    edf6:	f7ff fe15 	bl	ea24 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    edfa:	7b4b      	ldrb	r3, [r1, #13]
    edfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ee00:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    ee02:	4b05      	ldr	r3, [pc, #20]	; (ee18 <unready_thread+0x30>)
    ee04:	6898      	ldr	r0, [r3, #8]
    ee06:	1a43      	subs	r3, r0, r1
    ee08:	4258      	negs	r0, r3
    ee0a:	4158      	adcs	r0, r3
}
    ee0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    ee10:	f7ff be1e 	b.w	ea50 <update_cache>
    ee14:	200102cc 	.word	0x200102cc
    ee18:	200102a0 	.word	0x200102a0

0000ee1c <pend>:
{
    ee1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee20:	4606      	mov	r6, r0
    ee22:	4614      	mov	r4, r2
    ee24:	461d      	mov	r5, r3
	__asm__ volatile(
    ee26:	f04f 0320 	mov.w	r3, #32
    ee2a:	f3ef 8711 	mrs	r7, BASEPRI
    ee2e:	f383 8811 	msr	BASEPRI, r3
    ee32:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    ee36:	f001 f815 	bl	fe64 <add_to_waitq_locked>
	__asm__ volatile(
    ee3a:	f387 8811 	msr	BASEPRI, r7
    ee3e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ee42:	1c6b      	adds	r3, r5, #1
    ee44:	bf08      	it	eq
    ee46:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    ee4a:	d008      	beq.n	ee5e <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    ee4c:	4622      	mov	r2, r4
    ee4e:	462b      	mov	r3, r5
    ee50:	f106 0018 	add.w	r0, r6, #24
    ee54:	4903      	ldr	r1, [pc, #12]	; (ee64 <pend+0x48>)
}
    ee56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ee5a:	f000 ba37 	b.w	f2cc <z_add_timeout>
    ee5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ee62:	bf00      	nop
    ee64:	0000fe25 	.word	0x0000fe25

0000ee68 <z_pend_curr>:
{
    ee68:	b510      	push	{r4, lr}
    ee6a:	460c      	mov	r4, r1
	pending_current = _current;
    ee6c:	4b06      	ldr	r3, [pc, #24]	; (ee88 <z_pend_curr+0x20>)
{
    ee6e:	4611      	mov	r1, r2
	pending_current = _current;
    ee70:	6898      	ldr	r0, [r3, #8]
    ee72:	4b06      	ldr	r3, [pc, #24]	; (ee8c <z_pend_curr+0x24>)
    ee74:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    ee76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ee7a:	f7ff ffcf 	bl	ee1c <pend>
    ee7e:	4620      	mov	r0, r4
}
    ee80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee84:	f7fe bb0c 	b.w	d4a0 <arch_swap>
    ee88:	200102a0 	.word	0x200102a0
    ee8c:	200102d4 	.word	0x200102d4

0000ee90 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
    ee90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee94:	4605      	mov	r5, r0
    ee96:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
    ee98:	f001 f87e 	bl	ff98 <z_tick_get_32>
    ee9c:	4604      	mov	r4, r0
	__asm__ volatile(
    ee9e:	f04f 0320 	mov.w	r3, #32
    eea2:	f3ef 8811 	mrs	r8, BASEPRI
    eea6:	f383 8811 	msr	BASEPRI, r3
    eeaa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    eeae:	4e12      	ldr	r6, [pc, #72]	; (eef8 <z_tick_sleep.part.0+0x68>)
    eeb0:	4b12      	ldr	r3, [pc, #72]	; (eefc <z_tick_sleep.part.0+0x6c>)
    eeb2:	68b0      	ldr	r0, [r6, #8]
	expected_wakeup_ticks = ticks + z_tick_get_32();
    eeb4:	442c      	add	r4, r5
	pending_current = _current;
    eeb6:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    eeb8:	f7ff ff96 	bl	ede8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    eebc:	68b0      	ldr	r0, [r6, #8]
    eebe:	4910      	ldr	r1, [pc, #64]	; (ef00 <z_tick_sleep.part.0+0x70>)
    eec0:	462a      	mov	r2, r5
    eec2:	463b      	mov	r3, r7
    eec4:	3018      	adds	r0, #24
    eec6:	f000 fa01 	bl	f2cc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    eeca:	68b2      	ldr	r2, [r6, #8]
    eecc:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    eece:	7b53      	ldrb	r3, [r2, #13]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
    eed0:	2500      	movs	r5, #0
    eed2:	f043 0310 	orr.w	r3, r3, #16
    eed6:	7353      	strb	r3, [r2, #13]
    eed8:	f7fe fae2 	bl	d4a0 <arch_swap>
    eedc:	f001 f85c 	bl	ff98 <z_tick_get_32>
    eee0:	1a24      	subs	r4, r4, r0
    eee2:	f165 0500 	sbc.w	r5, r5, #0
    eee6:	2c00      	cmp	r4, #0
    eee8:	f175 0300 	sbcs.w	r3, r5, #0
    eeec:	bfb8      	it	lt
    eeee:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
    eef0:	4620      	mov	r0, r4
    eef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eef6:	bf00      	nop
    eef8:	200102a0 	.word	0x200102a0
    eefc:	200102d4 	.word	0x200102d4
    ef00:	0000fe25 	.word	0x0000fe25

0000ef04 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    ef04:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    ef06:	4b04      	ldr	r3, [pc, #16]	; (ef18 <z_sched_init+0x14>)
    ef08:	4608      	mov	r0, r1
    ef0a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
    ef0e:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
    ef12:	f7ff bd35 	b.w	e980 <k_sched_time_slice_set>
    ef16:	bf00      	nop
    ef18:	200102a0 	.word	0x200102a0

0000ef1c <z_impl_k_yield>:
{
    ef1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    ef1e:	4c24      	ldr	r4, [pc, #144]	; (efb0 <z_impl_k_yield+0x94>)
    ef20:	4b24      	ldr	r3, [pc, #144]	; (efb4 <z_impl_k_yield+0x98>)
    ef22:	68a2      	ldr	r2, [r4, #8]
    ef24:	429a      	cmp	r2, r3
    ef26:	d030      	beq.n	ef8a <z_impl_k_yield+0x6e>
    ef28:	f04f 0320 	mov.w	r3, #32
    ef2c:	f3ef 8511 	mrs	r5, BASEPRI
    ef30:	f383 8811 	msr	BASEPRI, r3
    ef34:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    ef38:	68a1      	ldr	r1, [r4, #8]
    ef3a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ef3e:	f7ff fd71 	bl	ea24 <z_priq_dumb_remove>
	return list->head == list;
    ef42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
    ef44:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ef46:	4283      	cmp	r3, r0
    ef48:	bf08      	it	eq
    ef4a:	2300      	moveq	r3, #0
    ef4c:	2b00      	cmp	r3, #0
    ef4e:	bf38      	it	cc
    ef50:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ef52:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ef54:	b32b      	cbz	r3, efa2 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    ef56:	f992 700e 	ldrsb.w	r7, [r2, #14]
    ef5a:	f993 600e 	ldrsb.w	r6, [r3, #14]
    ef5e:	42b7      	cmp	r7, r6
    ef60:	db03      	blt.n	ef6a <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    ef62:	428b      	cmp	r3, r1
    ef64:	d01d      	beq.n	efa2 <z_impl_k_yield+0x86>
    ef66:	681b      	ldr	r3, [r3, #0]
    ef68:	e7f4      	b.n	ef54 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    ef6a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    ef6c:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    ef70:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    ef72:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    ef74:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
    ef76:	2001      	movs	r0, #1
    ef78:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ef7c:	7353      	strb	r3, [r2, #13]
    ef7e:	f7ff fd67 	bl	ea50 <update_cache>
	__asm__ volatile(
    ef82:	f385 8811 	msr	BASEPRI, r5
    ef86:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    ef8a:	f04f 0320 	mov.w	r3, #32
    ef8e:	f3ef 8011 	mrs	r0, BASEPRI
    ef92:	f383 8811 	msr	BASEPRI, r3
    ef96:	f3bf 8f6f 	isb	sy
}
    ef9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ef9e:	f7fe ba7f 	b.w	d4a0 <arch_swap>
	node->prev = list->tail;
    efa2:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    efa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    efa8:	601a      	str	r2, [r3, #0]
	list->tail = node;
    efaa:	6322      	str	r2, [r4, #48]	; 0x30
}
    efac:	e7e2      	b.n	ef74 <z_impl_k_yield+0x58>
    efae:	bf00      	nop
    efb0:	200102a0 	.word	0x200102a0
    efb4:	20010090 	.word	0x20010090

0000efb8 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    efb8:	f1b1 3fff 	cmp.w	r1, #4294967295
    efbc:	bf08      	it	eq
    efbe:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    efc2:	b508      	push	{r3, lr}
    efc4:	4602      	mov	r2, r0
    efc6:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    efc8:	d106      	bne.n	efd8 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
    efca:	4b0b      	ldr	r3, [pc, #44]	; (eff8 <z_impl_k_sleep+0x40>)
    efcc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    efce:	f7ff fe55 	bl	ec7c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    efd2:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    efd6:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
    efd8:	4313      	orrs	r3, r2
    efda:	d10a      	bne.n	eff2 <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
    efdc:	f7ff ff9e 	bl	ef1c <z_impl_k_yield>
		return 0;
    efe0:	2000      	movs	r0, #0
		} else {
			return (t * to_hz + off) / from_hz;
    efe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    efe6:	fb80 2303 	smull	r2, r3, r0, r3
    efea:	0bd0      	lsrs	r0, r2, #15
    efec:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    eff0:	e7f1      	b.n	efd6 <z_impl_k_sleep+0x1e>
    eff2:	f7ff ff4d 	bl	ee90 <z_tick_sleep.part.0>
    eff6:	e7f4      	b.n	efe2 <z_impl_k_sleep+0x2a>
    eff8:	200102a0 	.word	0x200102a0

0000effc <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    effc:	4b01      	ldr	r3, [pc, #4]	; (f004 <z_impl_k_current_get+0x8>)
    effe:	6898      	ldr	r0, [r3, #8]
    f000:	4770      	bx	lr
    f002:	bf00      	nop
    f004:	200102a0 	.word	0x200102a0

0000f008 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    f008:	b538      	push	{r3, r4, r5, lr}
    f00a:	4604      	mov	r4, r0
    f00c:	f04f 0320 	mov.w	r3, #32
    f010:	f3ef 8511 	mrs	r5, BASEPRI
    f014:	f383 8811 	msr	BASEPRI, r3
    f018:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    f01c:	f000 ff4d 	bl	feba <z_unpend_first_thread>

	if (thread != NULL) {
    f020:	b148      	cbz	r0, f036 <z_impl_k_sem_give+0x2e>
    f022:	2200      	movs	r2, #0
    f024:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    f026:	f000 feed 	bl	fe04 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    f02a:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    f02c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    f030:	4804      	ldr	r0, [pc, #16]	; (f044 <z_impl_k_sem_give+0x3c>)
    f032:	f7ff bcd1 	b.w	e9d8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    f036:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    f03a:	429a      	cmp	r2, r3
    f03c:	bf18      	it	ne
    f03e:	3301      	addne	r3, #1
    f040:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    f042:	e7f2      	b.n	f02a <z_impl_k_sem_give+0x22>
    f044:	200102e7 	.word	0x200102e7

0000f048 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    f048:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f04a:	4614      	mov	r4, r2
    f04c:	461d      	mov	r5, r3
    f04e:	f04f 0320 	mov.w	r3, #32
    f052:	f3ef 8111 	mrs	r1, BASEPRI
    f056:	f383 8811 	msr	BASEPRI, r3
    f05a:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    f05e:	6883      	ldr	r3, [r0, #8]
    f060:	b143      	cbz	r3, f074 <z_impl_k_sem_take+0x2c>
		sem->count--;
    f062:	3b01      	subs	r3, #1
    f064:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    f066:	f381 8811 	msr	BASEPRI, r1
    f06a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    f06e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    f070:	b003      	add	sp, #12
    f072:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f074:	ea54 0305 	orrs.w	r3, r4, r5
    f078:	d106      	bne.n	f088 <z_impl_k_sem_take+0x40>
    f07a:	f381 8811 	msr	BASEPRI, r1
    f07e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    f082:	f06f 000f 	mvn.w	r0, #15
    f086:	e7f3      	b.n	f070 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    f088:	4602      	mov	r2, r0
    f08a:	e9cd 4500 	strd	r4, r5, [sp]
    f08e:	4802      	ldr	r0, [pc, #8]	; (f098 <z_impl_k_sem_take+0x50>)
    f090:	f7ff feea 	bl	ee68 <z_pend_curr>
	return ret;
    f094:	e7ec      	b.n	f070 <z_impl_k_sem_take+0x28>
    f096:	bf00      	nop
    f098:	200102e7 	.word	0x200102e7

0000f09c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    f09c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
    f0a0:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
    f0a4:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    f0a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    f0aa:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
    f0ac:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    f0ae:	2504      	movs	r5, #4
    f0b0:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
    f0b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    f0b4:	1dd6      	adds	r6, r2, #7
	thread_base->prio = priority;
    f0b6:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
    f0b8:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f0ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    f0bc:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
    f0c0:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    f0c4:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->sched_locked = 0U;
    f0c8:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    f0ca:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f0cc:	9202      	str	r2, [sp, #8]
    f0ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    f0d0:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f0d4:	9201      	str	r2, [sp, #4]
    f0d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f0d8:	9200      	str	r2, [sp, #0]
    f0da:	4642      	mov	r2, r8
    f0dc:	f7fe fa2e 	bl	d53c <arch_new_thread>
	if (!_current) {
    f0e0:	4b05      	ldr	r3, [pc, #20]	; (f0f8 <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
    f0e2:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    f0e6:	689b      	ldr	r3, [r3, #8]
    f0e8:	b103      	cbz	r3, f0ec <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    f0ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
    f0ec:	4640      	mov	r0, r8
    f0ee:	6763      	str	r3, [r4, #116]	; 0x74
    f0f0:	b004      	add	sp, #16
    f0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f0f6:	bf00      	nop
    f0f8:	200102a0 	.word	0x200102a0

0000f0fc <z_init_static_threads>:
{
    f0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    f100:	4e2a      	ldr	r6, [pc, #168]	; (f1ac <z_init_static_threads+0xb0>)
    f102:	4d2b      	ldr	r5, [pc, #172]	; (f1b0 <z_init_static_threads+0xb4>)
    f104:	46b0      	mov	r8, r6
{
    f106:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    f108:	42b5      	cmp	r5, r6
    f10a:	f105 0430 	add.w	r4, r5, #48	; 0x30
    f10e:	d310      	bcc.n	f132 <z_init_static_threads+0x36>
	k_sched_lock();
    f110:	f7ff fc74 	bl	e9fc <k_sched_lock>
    f114:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    f118:	f240 36e7 	movw	r6, #999	; 0x3e7
    f11c:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    f11e:	4c24      	ldr	r4, [pc, #144]	; (f1b0 <z_init_static_threads+0xb4>)
    f120:	f8df a090 	ldr.w	sl, [pc, #144]	; f1b4 <z_init_static_threads+0xb8>
    f124:	4544      	cmp	r4, r8
    f126:	d321      	bcc.n	f16c <z_init_static_threads+0x70>
}
    f128:	b006      	add	sp, #24
    f12a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    f12e:	f7ff bcb7 	b.w	eaa0 <k_sched_unlock>
		z_setup_new_thread(
    f132:	f854 3c04 	ldr.w	r3, [r4, #-4]
    f136:	9305      	str	r3, [sp, #20]
    f138:	f854 3c10 	ldr.w	r3, [r4, #-16]
    f13c:	9304      	str	r3, [sp, #16]
    f13e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    f142:	9303      	str	r3, [sp, #12]
    f144:	f854 3c18 	ldr.w	r3, [r4, #-24]
    f148:	9302      	str	r3, [sp, #8]
    f14a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    f14e:	9301      	str	r3, [sp, #4]
    f150:	f854 3c20 	ldr.w	r3, [r4, #-32]
    f154:	9300      	str	r3, [sp, #0]
    f156:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    f15a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    f15e:	f7ff ff9d 	bl	f09c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    f162:	f854 3c30 	ldr.w	r3, [r4, #-48]
    f166:	65dd      	str	r5, [r3, #92]	; 0x5c
    f168:	4625      	mov	r5, r4
    f16a:	e7cd      	b.n	f108 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    f16c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f16e:	1c5a      	adds	r2, r3, #1
    f170:	d00d      	beq.n	f18e <z_init_static_threads+0x92>
    f172:	4630      	mov	r0, r6
    f174:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
    f176:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f17a:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f17e:	42b9      	cmp	r1, r7
    f180:	bf08      	it	eq
    f182:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    f184:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f186:	d104      	bne.n	f192 <z_init_static_threads+0x96>
	z_sched_start(thread);
    f188:	4628      	mov	r0, r5
    f18a:	f7ff fcdd 	bl	eb48 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    f18e:	3430      	adds	r4, #48	; 0x30
    f190:	e7c8      	b.n	f124 <z_init_static_threads+0x28>
    f192:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f196:	2300      	movs	r3, #0
    f198:	f7fd f850 	bl	c23c <__aeabi_uldivmod>
    f19c:	4602      	mov	r2, r0
    f19e:	460b      	mov	r3, r1
    f1a0:	f105 0018 	add.w	r0, r5, #24
    f1a4:	4651      	mov	r1, sl
    f1a6:	f000 f891 	bl	f2cc <z_add_timeout>
    f1aa:	e7f0      	b.n	f18e <z_init_static_threads+0x92>
    f1ac:	20010090 	.word	0x20010090
    f1b0:	20010090 	.word	0x20010090
    f1b4:	0000fe25 	.word	0x0000fe25

0000f1b8 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
    f1b8:	b508      	push	{r3, lr}
	__asm__ volatile(
    f1ba:	f04f 0320 	mov.w	r3, #32
    f1be:	f3ef 8411 	mrs	r4, BASEPRI
    f1c2:	f383 8811 	msr	BASEPRI, r3
    f1c6:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
    f1ca:	4b04      	ldr	r3, [pc, #16]	; (f1dc <z_self_abort+0x24>)
    f1cc:	6898      	ldr	r0, [r3, #8]
    f1ce:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
    f1d0:	f7ff fd54 	bl	ec7c <z_impl_k_thread_suspend>
    f1d4:	4620      	mov	r0, r4
    f1d6:	f7fe f963 	bl	d4a0 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    f1da:	bf00      	nop
    f1dc:	200102a0 	.word	0x200102a0

0000f1e0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    f1e0:	4a02      	ldr	r2, [pc, #8]	; (f1ec <boot_banner+0xc>)
    f1e2:	4903      	ldr	r1, [pc, #12]	; (f1f0 <boot_banner+0x10>)
    f1e4:	4803      	ldr	r0, [pc, #12]	; (f1f4 <boot_banner+0x14>)
    f1e6:	f000 b9c6 	b.w	f576 <printk>
    f1ea:	bf00      	nop
    f1ec:	000103da 	.word	0x000103da
    f1f0:	000103e0 	.word	0x000103e0
    f1f4:	000103ed 	.word	0x000103ed

0000f1f8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    f1f8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    f1fa:	4806      	ldr	r0, [pc, #24]	; (f214 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    f1fc:	4a06      	ldr	r2, [pc, #24]	; (f218 <z_data_copy+0x20>)
    f1fe:	4907      	ldr	r1, [pc, #28]	; (f21c <z_data_copy+0x24>)
    f200:	1a12      	subs	r2, r2, r0
    f202:	f000 fcb7 	bl	fb74 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    f206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    f20a:	4a05      	ldr	r2, [pc, #20]	; (f220 <z_data_copy+0x28>)
    f20c:	4905      	ldr	r1, [pc, #20]	; (f224 <z_data_copy+0x2c>)
    f20e:	4806      	ldr	r0, [pc, #24]	; (f228 <z_data_copy+0x30>)
    f210:	f000 bcb0 	b.w	fb74 <memcpy>
    f214:	20010000 	.word	0x20010000
    f218:	20010090 	.word	0x20010090
    f21c:	00010418 	.word	0x00010418
    f220:	00000000 	.word	0x00000000
    f224:	00010418 	.word	0x00010418
    f228:	20010000 	.word	0x20010000

0000f22c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    f22c:	4b03      	ldr	r3, [pc, #12]	; (f23c <elapsed+0x10>)
    f22e:	681b      	ldr	r3, [r3, #0]
    f230:	b90b      	cbnz	r3, f236 <elapsed+0xa>
    f232:	f7fe b91b 	b.w	d46c <z_clock_elapsed>
}
    f236:	2000      	movs	r0, #0
    f238:	4770      	bx	lr
    f23a:	bf00      	nop
    f23c:	200102e0 	.word	0x200102e0

0000f240 <remove_timeout>:
{
    f240:	b530      	push	{r4, r5, lr}
    f242:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f244:	b168      	cbz	r0, f262 <remove_timeout+0x22>
    f246:	4a0a      	ldr	r2, [pc, #40]	; (f270 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    f248:	6852      	ldr	r2, [r2, #4]
    f24a:	4290      	cmp	r0, r2
    f24c:	d009      	beq.n	f262 <remove_timeout+0x22>
	if (next(t) != NULL) {
    f24e:	b143      	cbz	r3, f262 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    f250:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    f254:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    f258:	1912      	adds	r2, r2, r4
    f25a:	eb45 0101 	adc.w	r1, r5, r1
    f25e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    f262:	6842      	ldr	r2, [r0, #4]
    f264:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    f266:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f268:	2300      	movs	r3, #0
	node->prev = NULL;
    f26a:	e9c0 3300 	strd	r3, r3, [r0]
}
    f26e:	bd30      	pop	{r4, r5, pc}
    f270:	20010034 	.word	0x20010034

0000f274 <next_timeout>:

static int32_t next_timeout(void)
{
    f274:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    f276:	4b13      	ldr	r3, [pc, #76]	; (f2c4 <next_timeout+0x50>)
    f278:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f27a:	429c      	cmp	r4, r3
    f27c:	bf08      	it	eq
    f27e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    f280:	f7ff ffd4 	bl	f22c <elapsed>
    f284:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    f286:	b1bc      	cbz	r4, f2b8 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    f288:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    f28c:	1b40      	subs	r0, r0, r5
    f28e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    f292:	2801      	cmp	r0, #1
    f294:	f171 0300 	sbcs.w	r3, r1, #0
    f298:	db11      	blt.n	f2be <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    f29a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f29e:	2300      	movs	r3, #0
    f2a0:	4282      	cmp	r2, r0
    f2a2:	eb73 0401 	sbcs.w	r4, r3, r1
    f2a6:	da00      	bge.n	f2aa <next_timeout+0x36>
    f2a8:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    f2aa:	4b07      	ldr	r3, [pc, #28]	; (f2c8 <next_timeout+0x54>)
    f2ac:	695b      	ldr	r3, [r3, #20]
    f2ae:	b113      	cbz	r3, f2b6 <next_timeout+0x42>
    f2b0:	4298      	cmp	r0, r3
    f2b2:	bfa8      	it	ge
    f2b4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    f2b6:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    f2b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f2bc:	e7f5      	b.n	f2aa <next_timeout+0x36>
    f2be:	2000      	movs	r0, #0
    f2c0:	e7f3      	b.n	f2aa <next_timeout+0x36>
    f2c2:	bf00      	nop
    f2c4:	20010034 	.word	0x20010034
    f2c8:	200102a0 	.word	0x200102a0

0000f2cc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    f2cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2d0:	9101      	str	r1, [sp, #4]
    f2d2:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f2d4:	1c4b      	adds	r3, r1, #1
    f2d6:	bf08      	it	eq
    f2d8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    f2dc:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f2de:	d070      	beq.n	f3c2 <z_add_timeout+0xf6>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    f2e0:	f06f 0301 	mvn.w	r3, #1
    f2e4:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
    f2e8:	1c54      	adds	r4, r2, #1
    f2ea:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    f2ee:	ebb3 0804 	subs.w	r8, r3, r4
    f2f2:	eb6b 0905 	sbc.w	r9, fp, r5
    f2f6:	f1b8 0f00 	cmp.w	r8, #0
    f2fa:	f179 0300 	sbcs.w	r3, r9, #0
    f2fe:	db0f      	blt.n	f320 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    f300:	f7ff ff94 	bl	f22c <elapsed>
    f304:	f06f 0301 	mvn.w	r3, #1
    f308:	4a34      	ldr	r2, [pc, #208]	; (f3dc <z_add_timeout+0x110>)
    f30a:	e9d2 1c00 	ldrd	r1, ip, [r2]
    f30e:	1a5b      	subs	r3, r3, r1
    f310:	eb6b 020c 	sbc.w	r2, fp, ip
    f314:	1b1e      	subs	r6, r3, r4
    f316:	eb62 0705 	sbc.w	r7, r2, r5
    f31a:	1a34      	subs	r4, r6, r0
    f31c:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    f320:	9b01      	ldr	r3, [sp, #4]
    f322:	f8ca 3008 	str.w	r3, [sl, #8]
    f326:	f04f 0320 	mov.w	r3, #32
    f32a:	f3ef 8611 	mrs	r6, BASEPRI
    f32e:	f383 8811 	msr	BASEPRI, r3
    f332:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    f336:	f7ff ff79 	bl	f22c <elapsed>
	ticks = MAX(1, ticks);
    f33a:	2c01      	cmp	r4, #1
    f33c:	f175 0300 	sbcs.w	r3, r5, #0
    f340:	bfbc      	itt	lt
    f342:	2401      	movlt	r4, #1
    f344:	2500      	movlt	r5, #0
	return list->head == list;
    f346:	4b26      	ldr	r3, [pc, #152]	; (f3e0 <z_add_timeout+0x114>)
		to->dticks = ticks + elapsed();
    f348:	1824      	adds	r4, r4, r0
    f34a:	681a      	ldr	r2, [r3, #0]
    f34c:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f350:	429a      	cmp	r2, r3
    f352:	e9ca 4504 	strd	r4, r5, [sl, #16]
    f356:	d001      	beq.n	f35c <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f358:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    f35a:	b952      	cbnz	r2, f372 <z_add_timeout+0xa6>
	node->prev = list->tail;
    f35c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    f35e:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    f362:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    f366:	685a      	ldr	r2, [r3, #4]
    f368:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    f36c:	f8c3 a004 	str.w	sl, [r3, #4]
}
    f370:	e014      	b.n	f39c <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
    f372:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    f376:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    f37a:	4544      	cmp	r4, r8
    f37c:	eb75 0109 	sbcs.w	r1, r5, r9
    f380:	da22      	bge.n	f3c8 <z_add_timeout+0xfc>
				t->dticks -= to->dticks;
    f382:	ebb8 0004 	subs.w	r0, r8, r4
    f386:	eb69 0105 	sbc.w	r1, r9, r5
    f38a:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    f38e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    f390:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    f394:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    f398:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    f39c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f39e:	429a      	cmp	r2, r3
    f3a0:	d00b      	beq.n	f3ba <z_add_timeout+0xee>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    f3a2:	4592      	cmp	sl, r2
    f3a4:	d109      	bne.n	f3ba <z_add_timeout+0xee>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    f3a6:	f7ff ff65 	bl	f274 <next_timeout>

			if (next_time == 0 ||
    f3aa:	b118      	cbz	r0, f3b4 <z_add_timeout+0xe8>
			    _current_cpu->slice_ticks != next_time) {
    f3ac:	4b0d      	ldr	r3, [pc, #52]	; (f3e4 <z_add_timeout+0x118>)
			if (next_time == 0 ||
    f3ae:	695b      	ldr	r3, [r3, #20]
    f3b0:	4283      	cmp	r3, r0
    f3b2:	d002      	beq.n	f3ba <z_add_timeout+0xee>
				z_clock_set_timeout(next_time, false);
    f3b4:	2100      	movs	r1, #0
    f3b6:	f7fe f827 	bl	d408 <z_clock_set_timeout>
	__asm__ volatile(
    f3ba:	f386 8811 	msr	BASEPRI, r6
    f3be:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    f3c2:	b003      	add	sp, #12
    f3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    f3c8:	ebb4 0008 	subs.w	r0, r4, r8
    f3cc:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    f3d0:	42ba      	cmp	r2, r7
    f3d2:	e9ca 0104 	strd	r0, r1, [sl, #16]
    f3d6:	d0c1      	beq.n	f35c <z_add_timeout+0x90>
    f3d8:	6812      	ldr	r2, [r2, #0]
    f3da:	e7be      	b.n	f35a <z_add_timeout+0x8e>
    f3dc:	20010190 	.word	0x20010190
    f3e0:	20010034 	.word	0x20010034
    f3e4:	200102a0 	.word	0x200102a0

0000f3e8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    f3e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3ec:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    f3ee:	f7ff fc03 	bl	ebf8 <z_time_slice>
	__asm__ volatile(
    f3f2:	f04f 0320 	mov.w	r3, #32
    f3f6:	f3ef 8411 	mrs	r4, BASEPRI
    f3fa:	f383 8811 	msr	BASEPRI, r3
    f3fe:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    f402:	f8df a0b0 	ldr.w	sl, [pc, #176]	; f4b4 <z_clock_announce+0xcc>
    f406:	4d2a      	ldr	r5, [pc, #168]	; (f4b0 <z_clock_announce+0xc8>)
    f408:	4651      	mov	r1, sl
	return list->head == list;
    f40a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; f4b8 <z_clock_announce+0xd0>
    f40e:	602e      	str	r6, [r5, #0]
    f410:	f8d5 c000 	ldr.w	ip, [r5]
    f414:	f8db 0000 	ldr.w	r0, [fp]
    f418:	4662      	mov	r2, ip
    f41a:	e9da 8900 	ldrd	r8, r9, [sl]
    f41e:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f420:	4558      	cmp	r0, fp
    f422:	e9cd 2300 	strd	r2, r3, [sp]
    f426:	d00d      	beq.n	f444 <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    f428:	b160      	cbz	r0, f444 <z_clock_announce+0x5c>
    f42a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    f42e:	45b4      	cmp	ip, r6
    f430:	41bb      	sbcs	r3, r7
    f432:	da1d      	bge.n	f470 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    f434:	9b00      	ldr	r3, [sp, #0]
    f436:	ebb6 0c03 	subs.w	ip, r6, r3
    f43a:	9b01      	ldr	r3, [sp, #4]
    f43c:	eb67 0603 	sbc.w	r6, r7, r3
    f440:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    f444:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
    f446:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
    f448:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
    f44a:	eb13 0208 	adds.w	r2, r3, r8
    f44e:	9b01      	ldr	r3, [sp, #4]
    f450:	eb43 0309 	adc.w	r3, r3, r9
    f454:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
    f458:	f7ff ff0c 	bl	f274 <next_timeout>
    f45c:	4631      	mov	r1, r6
    f45e:	f7fd ffd3 	bl	d408 <z_clock_set_timeout>
	__asm__ volatile(
    f462:	f384 8811 	msr	BASEPRI, r4
    f466:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    f46a:	b003      	add	sp, #12
    f46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    f470:	2200      	movs	r2, #0
    f472:	2300      	movs	r3, #0
		curr_tick += dt;
    f474:	eb18 0806 	adds.w	r8, r8, r6
    f478:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    f47c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    f480:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    f484:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    f488:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    f48a:	f7ff fed9 	bl	f240 <remove_timeout>
    f48e:	f384 8811 	msr	BASEPRI, r4
    f492:	f3bf 8f6f 	isb	sy
		t->fn(t);
    f496:	6883      	ldr	r3, [r0, #8]
    f498:	4798      	blx	r3
	__asm__ volatile(
    f49a:	f04f 0320 	mov.w	r3, #32
    f49e:	f3ef 8411 	mrs	r4, BASEPRI
    f4a2:	f383 8811 	msr	BASEPRI, r3
    f4a6:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    f4aa:	4902      	ldr	r1, [pc, #8]	; (f4b4 <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    f4ac:	e7b0      	b.n	f410 <z_clock_announce+0x28>
    f4ae:	bf00      	nop
    f4b0:	200102e0 	.word	0x200102e0
    f4b4:	20010190 	.word	0x20010190
    f4b8:	20010034 	.word	0x20010034

0000f4bc <z_tick_get>:

int64_t z_tick_get(void)
{
    f4bc:	b510      	push	{r4, lr}
    f4be:	f04f 0320 	mov.w	r3, #32
    f4c2:	f3ef 8411 	mrs	r4, BASEPRI
    f4c6:	f383 8811 	msr	BASEPRI, r3
    f4ca:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    f4ce:	f7fd ffcd 	bl	d46c <z_clock_elapsed>
    f4d2:	4b06      	ldr	r3, [pc, #24]	; (f4ec <z_tick_get+0x30>)
    f4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    f4d8:	1812      	adds	r2, r2, r0
    f4da:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    f4de:	f384 8811 	msr	BASEPRI, r4
    f4e2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    f4e6:	4610      	mov	r0, r2
    f4e8:	4619      	mov	r1, r3
    f4ea:	bd10      	pop	{r4, pc}
    f4ec:	20010190 	.word	0x20010190

0000f4f0 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    f4f0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    f4f2:	4c06      	ldr	r4, [pc, #24]	; (f50c <statics_init+0x1c>)
    f4f4:	4d06      	ldr	r5, [pc, #24]	; (f510 <statics_init+0x20>)
    f4f6:	42ac      	cmp	r4, r5
    f4f8:	d301      	bcc.n	f4fe <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    f4fa:	2000      	movs	r0, #0
    f4fc:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    f4fe:	4620      	mov	r0, r4
    f500:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    f504:	f000 fd4c 	bl	ffa0 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    f508:	3414      	adds	r4, #20
    f50a:	e7f4      	b.n	f4f6 <statics_init+0x6>
    f50c:	20010090 	.word	0x20010090
    f510:	20010090 	.word	0x20010090

0000f514 <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
    f514:	b538      	push	{r3, r4, r5, lr}
    f516:	460c      	mov	r4, r1
	struct gpio_driver_data *data =
    f518:	68c5      	ldr	r5, [r0, #12]
	return api->pin_configure(port, pin, flags);
    f51a:	6883      	ldr	r3, [r0, #8]
    f51c:	f44f 7280 	mov.w	r2, #256	; 0x100
    f520:	681b      	ldr	r3, [r3, #0]
    f522:	4798      	blx	r3
	if (ret != 0) {
    f524:	b930      	cbnz	r0, f534 <gpio_pin_configure.constprop.0+0x20>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    f526:	2301      	movs	r3, #1
    f528:	fa03 f104 	lsl.w	r1, r3, r4
    f52c:	682b      	ldr	r3, [r5, #0]
    f52e:	ea23 0301 	bic.w	r3, r3, r1
    f532:	602b      	str	r3, [r5, #0]
}
    f534:	bd38      	pop	{r3, r4, r5, pc}

0000f536 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    f536:	4603      	mov	r3, r0
    f538:	b158      	cbz	r0, f552 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f53a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    f53c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    f540:	2a01      	cmp	r2, #1
    f542:	d003      	beq.n	f54c <sys_notify_validate+0x16>
    f544:	2a03      	cmp	r2, #3
    f546:	d104      	bne.n	f552 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    f548:	6802      	ldr	r2, [r0, #0]
    f54a:	b112      	cbz	r2, f552 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    f54c:	2000      	movs	r0, #0
    f54e:	6098      	str	r0, [r3, #8]
    f550:	4770      	bx	lr
		return -EINVAL;
    f552:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    f556:	4770      	bx	lr

0000f558 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f558:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    f55a:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    f55c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    f560:	2a03      	cmp	r2, #3
    f562:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    f566:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = 0;
    f568:	bf14      	ite	ne
    f56a:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    f56c:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    f56e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    f570:	4770      	bx	lr

0000f572 <arch_printk_char_out>:
}
    f572:	2000      	movs	r0, #0
    f574:	4770      	bx	lr

0000f576 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    f576:	b40f      	push	{r0, r1, r2, r3}
    f578:	b507      	push	{r0, r1, r2, lr}
    f57a:	a904      	add	r1, sp, #16
    f57c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    f580:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    f582:	f7fd f813 	bl	c5ac <vprintk>
	}
	va_end(ap);
}
    f586:	b003      	add	sp, #12
    f588:	f85d eb04 	ldr.w	lr, [sp], #4
    f58c:	b004      	add	sp, #16
    f58e:	4770      	bx	lr

0000f590 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f590:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    f592:	f013 0307 	ands.w	r3, r3, #7
    f596:	d105      	bne.n	f5a4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    f598:	6803      	ldr	r3, [r0, #0]
    f59a:	2b00      	cmp	r3, #0
		evt = EVT_START;
    f59c:	bf0c      	ite	eq
    f59e:	2000      	moveq	r0, #0
    f5a0:	2003      	movne	r0, #3
    f5a2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    f5a4:	2b02      	cmp	r3, #2
    f5a6:	d105      	bne.n	f5b4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    f5a8:	8b43      	ldrh	r3, [r0, #26]
    f5aa:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    f5ac:	bf14      	ite	ne
    f5ae:	2000      	movne	r0, #0
    f5b0:	2004      	moveq	r0, #4
    f5b2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    f5b4:	2b01      	cmp	r3, #1
    f5b6:	d105      	bne.n	f5c4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    f5b8:	6803      	ldr	r3, [r0, #0]
    f5ba:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    f5bc:	bf0c      	ite	eq
    f5be:	2000      	moveq	r0, #0
    f5c0:	2005      	movne	r0, #5
    f5c2:	4770      	bx	lr
	int evt = EVT_NOP;
    f5c4:	2000      	movs	r0, #0
}
    f5c6:	4770      	bx	lr

0000f5c8 <notify_one>:
{
    f5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f5cc:	460d      	mov	r5, r1
    f5ce:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    f5d0:	4619      	mov	r1, r3
    f5d2:	1d28      	adds	r0, r5, #4
{
    f5d4:	4690      	mov	r8, r2
    f5d6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    f5d8:	f7ff ffbe 	bl	f558 <sys_notify_finalize>
	if (cb) {
    f5dc:	4604      	mov	r4, r0
    f5de:	b138      	cbz	r0, f5f0 <notify_one+0x28>
		cb(mgr, cli, state, res);
    f5e0:	4633      	mov	r3, r6
    f5e2:	4642      	mov	r2, r8
    f5e4:	4629      	mov	r1, r5
    f5e6:	4638      	mov	r0, r7
    f5e8:	46a4      	mov	ip, r4
}
    f5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    f5ee:	4760      	bx	ip
}
    f5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f5f4 <transition_complete>:
{
    f5f4:	b410      	push	{r4}
	__asm__ volatile(
    f5f6:	f04f 0420 	mov.w	r4, #32
    f5fa:	f3ef 8211 	mrs	r2, BASEPRI
    f5fe:	f384 8811 	msr	BASEPRI, r4
    f602:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    f606:	6141      	str	r1, [r0, #20]
}
    f608:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    f60a:	2101      	movs	r1, #1
    f60c:	f7fc bfdc 	b.w	c5c8 <process_event>

0000f610 <validate_args>:
{
    f610:	b510      	push	{r4, lr}
    f612:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    f614:	b140      	cbz	r0, f628 <validate_args+0x18>
    f616:	b139      	cbz	r1, f628 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    f618:	1d08      	adds	r0, r1, #4
    f61a:	f7ff ff8c 	bl	f536 <sys_notify_validate>
	if ((rv == 0)
    f61e:	b928      	cbnz	r0, f62c <validate_args+0x1c>
	    && ((cli->notify.flags
    f620:	68a3      	ldr	r3, [r4, #8]
    f622:	f033 0303 	bics.w	r3, r3, #3
    f626:	d001      	beq.n	f62c <validate_args+0x1c>
		rv = -EINVAL;
    f628:	f06f 0015 	mvn.w	r0, #21
}
    f62c:	bd10      	pop	{r4, pc}

0000f62e <onoff_manager_init>:
{
    f62e:	b538      	push	{r3, r4, r5, lr}
    f630:	460c      	mov	r4, r1
	if ((mgr == NULL)
    f632:	4605      	mov	r5, r0
    f634:	b158      	cbz	r0, f64e <onoff_manager_init+0x20>
	    || (transitions == NULL)
    f636:	b151      	cbz	r1, f64e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    f638:	680b      	ldr	r3, [r1, #0]
    f63a:	b143      	cbz	r3, f64e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    f63c:	684b      	ldr	r3, [r1, #4]
    f63e:	b133      	cbz	r3, f64e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    f640:	221c      	movs	r2, #28
    f642:	2100      	movs	r1, #0
    f644:	f000 fac1 	bl	fbca <memset>
	return 0;
    f648:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    f64a:	612c      	str	r4, [r5, #16]
}
    f64c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    f64e:	f06f 0015 	mvn.w	r0, #21
    f652:	e7fb      	b.n	f64c <onoff_manager_init+0x1e>

0000f654 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    f654:	b570      	push	{r4, r5, r6, lr}
    f656:	4604      	mov	r4, r0
    f658:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    f65a:	f7ff ffd9 	bl	f610 <validate_args>

	if (rv < 0) {
    f65e:	1e05      	subs	r5, r0, #0
    f660:	db31      	blt.n	f6c6 <onoff_request+0x72>
    f662:	f04f 0320 	mov.w	r3, #32
    f666:	f3ef 8111 	mrs	r1, BASEPRI
    f66a:	f383 8811 	msr	BASEPRI, r3
    f66e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    f672:	f64f 75ff 	movw	r5, #65535	; 0xffff
    f676:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f678:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    f67a:	42ab      	cmp	r3, r5
    f67c:	f000 0207 	and.w	r2, r0, #7
    f680:	d02e      	beq.n	f6e0 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    f682:	2a02      	cmp	r2, #2
    f684:	d10e      	bne.n	f6a4 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    f686:	3301      	adds	r3, #1
    f688:	8363      	strh	r3, [r4, #26]
	rv = state;
    f68a:	4615      	mov	r5, r2
		notify = true;
    f68c:	2301      	movs	r3, #1
	__asm__ volatile(
    f68e:	f381 8811 	msr	BASEPRI, r1
    f692:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    f696:	b1b3      	cbz	r3, f6c6 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    f698:	2300      	movs	r3, #0
    f69a:	4631      	mov	r1, r6
    f69c:	4620      	mov	r0, r4
    f69e:	f7ff ff93 	bl	f5c8 <notify_one>
    f6a2:	e010      	b.n	f6c6 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    f6a4:	0783      	lsls	r3, r0, #30
    f6a6:	d001      	beq.n	f6ac <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    f6a8:	2a06      	cmp	r2, #6
    f6aa:	d10e      	bne.n	f6ca <onoff_request+0x76>
	parent->next = child;
    f6ac:	2300      	movs	r3, #0
    f6ae:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    f6b0:	6863      	ldr	r3, [r4, #4]
    f6b2:	b993      	cbnz	r3, f6da <onoff_request+0x86>
	list->head = node;
    f6b4:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    f6b8:	4615      	mov	r5, r2
    f6ba:	b962      	cbnz	r2, f6d6 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    f6bc:	460a      	mov	r2, r1
    f6be:	4620      	mov	r0, r4
    f6c0:	2102      	movs	r1, #2
    f6c2:	f7fc ff81 	bl	c5c8 <process_event>
		}
	}

	return rv;
}
    f6c6:	4628      	mov	r0, r5
    f6c8:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    f6ca:	2a05      	cmp	r2, #5
    f6cc:	bf0c      	ite	eq
    f6ce:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    f6d2:	f06f 0504 	mvnne.w	r5, #4
    f6d6:	2300      	movs	r3, #0
    f6d8:	e7d9      	b.n	f68e <onoff_request+0x3a>
	parent->next = child;
    f6da:	601e      	str	r6, [r3, #0]
	list->tail = node;
    f6dc:	6066      	str	r6, [r4, #4]
}
    f6de:	e7eb      	b.n	f6b8 <onoff_request+0x64>
		rv = -EAGAIN;
    f6e0:	f06f 050a 	mvn.w	r5, #10
    f6e4:	e7f7      	b.n	f6d6 <onoff_request+0x82>

0000f6e6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    f6e6:	4604      	mov	r4, r0
    f6e8:	b508      	push	{r3, lr}
    f6ea:	4608      	mov	r0, r1
    f6ec:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    f6ee:	461a      	mov	r2, r3
    f6f0:	47a0      	blx	r4
	return z_impl_k_current_get();
    f6f2:	f7ff fc83 	bl	effc <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    f6f6:	f7fe f91f 	bl	d938 <z_impl_k_thread_abort>

0000f6fa <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    f6fa:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    f6fc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    f700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    f704:	bf2c      	ite	cs
    f706:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    f70a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    f70e:	4770      	bx	lr

0000f710 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    f710:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    f714:	6880      	ldr	r0, [r0, #8]
    f716:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    f71a:	bf2c      	ite	cs
    f71c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    f720:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    f724:	4770      	bx	lr

0000f726 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    f726:	2201      	movs	r2, #1
{
    f728:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    f72a:	f7ff ffe6 	bl	f6fa <chunk_field>
}
    f72e:	0840      	lsrs	r0, r0, #1
    f730:	bd08      	pop	{r3, pc}

0000f732 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    f732:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    f734:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    f738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    f73c:	d308      	bcc.n	f750 <set_chunk_used+0x1e>
		if (used) {
    f73e:	684b      	ldr	r3, [r1, #4]
    f740:	b11a      	cbz	r2, f74a <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    f742:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    f746:	604b      	str	r3, [r1, #4]
    f748:	4770      	bx	lr
    f74a:	f023 0301 	bic.w	r3, r3, #1
    f74e:	e7fa      	b.n	f746 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    f750:	884b      	ldrh	r3, [r1, #2]
    f752:	b11a      	cbz	r2, f75c <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    f754:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    f758:	804b      	strh	r3, [r1, #2]
		}
	}
}
    f75a:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    f75c:	f023 0301 	bic.w	r3, r3, #1
    f760:	e7fa      	b.n	f758 <set_chunk_used+0x26>

0000f762 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    f762:	0053      	lsls	r3, r2, #1
    f764:	2201      	movs	r2, #1
    f766:	f7ff bfd3 	b.w	f710 <chunk_set>

0000f76a <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    f76a:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    f76c:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    f76e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    f772:	bf2c      	ite	cs
    f774:	2002      	movcs	r0, #2
    f776:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    f778:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    f77a:	fab0 f080 	clz	r0, r0
}
    f77e:	f1c0 001f 	rsb	r0, r0, #31
    f782:	4770      	bx	lr

0000f784 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    f784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f788:	4604      	mov	r4, r0
    f78a:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    f78c:	f7ff ffcb 	bl	f726 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    f790:	68a3      	ldr	r3, [r4, #8]
    f792:	4601      	mov	r1, r0
    f794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    f798:	d301      	bcc.n	f79e <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    f79a:	2801      	cmp	r0, #1
    f79c:	d035      	beq.n	f80a <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    f79e:	4620      	mov	r0, r4
    f7a0:	f7ff ffe3 	bl	f76a <bucket_idx>
	if (b->next == 0U) {
    f7a4:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    f7a8:	6916      	ldr	r6, [r2, #16]
    f7aa:	b99e      	cbnz	r6, f7d4 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    f7ac:	2301      	movs	r3, #1
    f7ae:	fa03 f000 	lsl.w	r0, r3, r0
    f7b2:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    f7b4:	4629      	mov	r1, r5
    f7b6:	4303      	orrs	r3, r0
    f7b8:	60e3      	str	r3, [r4, #12]
    f7ba:	4620      	mov	r0, r4
		b->next = c;
    f7bc:	6115      	str	r5, [r2, #16]
    f7be:	462b      	mov	r3, r5
    f7c0:	2202      	movs	r2, #2
    f7c2:	f7ff ffa5 	bl	f710 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    f7c6:	2203      	movs	r2, #3
    f7c8:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    f7ca:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    f7cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f7d0:	f7ff bf9e 	b.w	f710 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    f7d4:	2202      	movs	r2, #2
    f7d6:	4631      	mov	r1, r6
    f7d8:	4620      	mov	r0, r4
    f7da:	f7ff ff8e 	bl	f6fa <chunk_field>
    f7de:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    f7e0:	4603      	mov	r3, r0
    f7e2:	2202      	movs	r2, #2
    f7e4:	4629      	mov	r1, r5
    f7e6:	4620      	mov	r0, r4
    f7e8:	f7ff ff92 	bl	f710 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    f7ec:	4633      	mov	r3, r6
    f7ee:	2203      	movs	r2, #3
    f7f0:	4629      	mov	r1, r5
    f7f2:	4620      	mov	r0, r4
    f7f4:	f7ff ff8c 	bl	f710 <chunk_set>
    f7f8:	2203      	movs	r2, #3
    f7fa:	4639      	mov	r1, r7
    f7fc:	462b      	mov	r3, r5
    f7fe:	4620      	mov	r0, r4
    f800:	f7ff ff86 	bl	f710 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    f804:	2202      	movs	r2, #2
    f806:	4631      	mov	r1, r6
    f808:	e7df      	b.n	f7ca <free_list_add+0x46>
    f80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f80e <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    f80e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    f812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f814:	bf2c      	ite	cs
    f816:	2508      	movcs	r5, #8
    f818:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    f81a:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
    f81c:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
    f81e:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    f820:	1dcc      	adds	r4, r1, #7
    f822:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
    f826:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
    f828:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    f82c:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    f82e:	440d      	add	r5, r1
    f830:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    f834:	1b2d      	subs	r5, r5, r4
    f836:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    f838:	4629      	mov	r1, r5
    f83a:	4620      	mov	r0, r4
	h->len = buf_sz;
    f83c:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    f83e:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    f840:	f7ff ff93 	bl	f76a <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    f844:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    f846:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    f848:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    f84a:	361b      	adds	r6, #27
    f84c:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
    f84e:	f104 0210 	add.w	r2, r4, #16
    f852:	428b      	cmp	r3, r1
    f854:	db29      	blt.n	f8aa <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    f856:	4632      	mov	r2, r6
    f858:	4620      	mov	r0, r4
    f85a:	2100      	movs	r1, #0
    f85c:	f7ff ff81 	bl	f762 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    f860:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    f862:	4620      	mov	r0, r4
    f864:	2201      	movs	r2, #1
    f866:	2100      	movs	r1, #0
    f868:	f7ff ff63 	bl	f732 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    f86c:	463a      	mov	r2, r7
    f86e:	4631      	mov	r1, r6
    f870:	f7ff ff77 	bl	f762 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    f874:	4633      	mov	r3, r6
    f876:	4631      	mov	r1, r6
    f878:	4620      	mov	r0, r4
    f87a:	2200      	movs	r2, #0
    f87c:	f7ff ff48 	bl	f710 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    f880:	4629      	mov	r1, r5
    f882:	4620      	mov	r0, r4
    f884:	2200      	movs	r2, #0
    f886:	f7ff ff6c 	bl	f762 <set_chunk_size>
    f88a:	463b      	mov	r3, r7
    f88c:	4629      	mov	r1, r5
    f88e:	4620      	mov	r0, r4
    f890:	2200      	movs	r2, #0
    f892:	f7ff ff3d 	bl	f710 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    f896:	4629      	mov	r1, r5
    f898:	4620      	mov	r0, r4
    f89a:	2201      	movs	r2, #1
    f89c:	f7ff ff49 	bl	f732 <set_chunk_used>

	free_list_add(h, chunk0_size);
    f8a0:	4631      	mov	r1, r6
}
    f8a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    f8a6:	f7ff bf6d 	b.w	f784 <free_list_add>
		h->buckets[i].next = 0;
    f8aa:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    f8ae:	3301      	adds	r3, #1
    f8b0:	e7cf      	b.n	f852 <sys_heap_init+0x44>

0000f8b2 <encode_uint>:
{
    f8b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8b6:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    f8b8:	78d3      	ldrb	r3, [r2, #3]
{
    f8ba:	4614      	mov	r4, r2
	switch (specifier) {
    f8bc:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    f8be:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    f8c2:	4606      	mov	r6, r0
    f8c4:	460f      	mov	r7, r1
    f8c6:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    f8c8:	d02d      	beq.n	f926 <encode_uint+0x74>
    f8ca:	d828      	bhi.n	f91e <encode_uint+0x6c>
		return 16;
    f8cc:	2b58      	cmp	r3, #88	; 0x58
    f8ce:	bf14      	ite	ne
    f8d0:	250a      	movne	r5, #10
    f8d2:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
    f8d4:	46aa      	mov	sl, r5
    f8d6:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
    f8da:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    f8de:	4652      	mov	r2, sl
    f8e0:	465b      	mov	r3, fp
    f8e2:	4630      	mov	r0, r6
    f8e4:	4639      	mov	r1, r7
    f8e6:	f7fc fca9 	bl	c23c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    f8ea:	2a09      	cmp	r2, #9
    f8ec:	b2d3      	uxtb	r3, r2
    f8ee:	d81f      	bhi.n	f930 <encode_uint+0x7e>
    f8f0:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    f8f2:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    f8f4:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    f8f6:	bf08      	it	eq
    f8f8:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    f8fa:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    f8fe:	d301      	bcc.n	f904 <encode_uint+0x52>
    f900:	45c8      	cmp	r8, r9
    f902:	d812      	bhi.n	f92a <encode_uint+0x78>
	if (conv->flag_hash) {
    f904:	7823      	ldrb	r3, [r4, #0]
    f906:	069b      	lsls	r3, r3, #26
    f908:	d505      	bpl.n	f916 <encode_uint+0x64>
		if (radix == 8) {
    f90a:	2d08      	cmp	r5, #8
    f90c:	d116      	bne.n	f93c <encode_uint+0x8a>
			conv->altform_0 = true;
    f90e:	78a3      	ldrb	r3, [r4, #2]
    f910:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    f914:	70a3      	strb	r3, [r4, #2]
}
    f916:	4640      	mov	r0, r8
    f918:	b003      	add	sp, #12
    f91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    f91e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    f922:	2b70      	cmp	r3, #112	; 0x70
    f924:	e7d3      	b.n	f8ce <encode_uint+0x1c>
	switch (specifier) {
    f926:	2508      	movs	r5, #8
    f928:	e7d4      	b.n	f8d4 <encode_uint+0x22>
		value /= radix;
    f92a:	4606      	mov	r6, r0
    f92c:	460f      	mov	r7, r1
    f92e:	e7d6      	b.n	f8de <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    f930:	9a01      	ldr	r2, [sp, #4]
    f932:	2a19      	cmp	r2, #25
    f934:	bf94      	ite	ls
    f936:	3337      	addls	r3, #55	; 0x37
    f938:	3357      	addhi	r3, #87	; 0x57
    f93a:	e7da      	b.n	f8f2 <encode_uint+0x40>
		} else if (radix == 16) {
    f93c:	2d10      	cmp	r5, #16
    f93e:	d1ea      	bne.n	f916 <encode_uint+0x64>
			conv->altform_0c = true;
    f940:	78a3      	ldrb	r3, [r4, #2]
    f942:	f043 0310 	orr.w	r3, r3, #16
    f946:	e7e5      	b.n	f914 <encode_uint+0x62>

0000f948 <outs>:
{
    f948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f94c:	4607      	mov	r7, r0
    f94e:	4688      	mov	r8, r1
    f950:	4615      	mov	r5, r2
    f952:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    f954:	4614      	mov	r4, r2
    f956:	42b4      	cmp	r4, r6
    f958:	eba4 0005 	sub.w	r0, r4, r5
    f95c:	d302      	bcc.n	f964 <outs+0x1c>
    f95e:	b93e      	cbnz	r6, f970 <outs+0x28>
    f960:	7823      	ldrb	r3, [r4, #0]
    f962:	b12b      	cbz	r3, f970 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    f964:	4641      	mov	r1, r8
    f966:	f814 0b01 	ldrb.w	r0, [r4], #1
    f96a:	47b8      	blx	r7
		if (rc < 0) {
    f96c:	2800      	cmp	r0, #0
    f96e:	daf2      	bge.n	f956 <outs+0xe>
}
    f970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f974 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    f974:	4770      	bx	lr

0000f976 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    f976:	f7fe bd7d 	b.w	e474 <SystemInit>

0000f97a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    f97a:	b2cb      	uxtb	r3, r1
    f97c:	210c      	movs	r1, #12
    f97e:	68c2      	ldr	r2, [r0, #12]
    f980:	fb03 2101 	mla	r1, r3, r1, r2
    f984:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    f986:	f000 0007 	and.w	r0, r0, #7
    f98a:	4770      	bx	lr

0000f98c <set_off_state>:
	__asm__ volatile(
    f98c:	f04f 0320 	mov.w	r3, #32
    f990:	f3ef 8211 	mrs	r2, BASEPRI
    f994:	f383 8811 	msr	BASEPRI, r3
    f998:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f99c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    f99e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    f9a2:	d001      	beq.n	f9a8 <set_off_state+0x1c>
    f9a4:	428b      	cmp	r3, r1
    f9a6:	d107      	bne.n	f9b8 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    f9a8:	2301      	movs	r3, #1
    f9aa:	6003      	str	r3, [r0, #0]
	int err = 0;
    f9ac:	2000      	movs	r0, #0
	__asm__ volatile(
    f9ae:	f382 8811 	msr	BASEPRI, r2
    f9b2:	f3bf 8f6f 	isb	sy
}
    f9b6:	4770      	bx	lr
		err = -EPERM;
    f9b8:	f04f 30ff 	mov.w	r0, #4294967295
    f9bc:	e7f7      	b.n	f9ae <set_off_state+0x22>

0000f9be <set_starting_state>:
{
    f9be:	b510      	push	{r4, lr}
	__asm__ volatile(
    f9c0:	f04f 0320 	mov.w	r3, #32
    f9c4:	f3ef 8211 	mrs	r2, BASEPRI
    f9c8:	f383 8811 	msr	BASEPRI, r3
    f9cc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f9d0:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    f9d2:	f003 0407 	and.w	r4, r3, #7
    f9d6:	2c01      	cmp	r4, #1
    f9d8:	d106      	bne.n	f9e8 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    f9da:	6001      	str	r1, [r0, #0]
	int err = 0;
    f9dc:	2000      	movs	r0, #0
	__asm__ volatile(
    f9de:	f382 8811 	msr	BASEPRI, r2
    f9e2:	f3bf 8f6f 	isb	sy
}
    f9e6:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    f9e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    f9ec:	428b      	cmp	r3, r1
		err = -EALREADY;
    f9ee:	bf14      	ite	ne
    f9f0:	f04f 30ff 	movne.w	r0, #4294967295
    f9f4:	f06f 0044 	mvneq.w	r0, #68	; 0x44
    f9f8:	e7f1      	b.n	f9de <set_starting_state+0x20>

0000f9fa <set_on_state>:
	__asm__ volatile(
    f9fa:	f04f 0320 	mov.w	r3, #32
    f9fe:	f3ef 8211 	mrs	r2, BASEPRI
    fa02:	f383 8811 	msr	BASEPRI, r3
    fa06:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    fa0a:	6803      	ldr	r3, [r0, #0]
    fa0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fa10:	f043 0302 	orr.w	r3, r3, #2
    fa14:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    fa16:	f382 8811 	msr	BASEPRI, r2
    fa1a:	f3bf 8f6f 	isb	sy
}
    fa1e:	4770      	bx	lr

0000fa20 <onoff_started_callback>:
{
    fa20:	b410      	push	{r4}
	notify(mgr, 0);
    fa22:	241c      	movs	r4, #28
	return &data->mgr[type];
    fa24:	68c0      	ldr	r0, [r0, #12]
    fa26:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    fa28:	fb03 0004 	mla	r0, r3, r4, r0
    fa2c:	2100      	movs	r1, #0
}
    fa2e:	bc10      	pop	{r4}
	notify(mgr, 0);
    fa30:	4710      	bx	r2

0000fa32 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    fa32:	2000      	movs	r0, #0
    fa34:	f7fe bd36 	b.w	e4a4 <nrfx_clock_start>

0000fa38 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    fa38:	2000      	movs	r0, #0
    fa3a:	f7fe bd65 	b.w	e508 <nrfx_clock_stop>

0000fa3e <blocking_start_callback>:
{
    fa3e:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    fa40:	f7ff bae2 	b.w	f008 <z_impl_k_sem_give>

0000fa44 <api_stop>:
{
    fa44:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
    fa46:	230c      	movs	r3, #12
    fa48:	b2cc      	uxtb	r4, r1
    fa4a:	4363      	muls	r3, r4
{
    fa4c:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    fa4e:	68c0      	ldr	r0, [r0, #12]
    fa50:	3340      	adds	r3, #64	; 0x40
    fa52:	2180      	movs	r1, #128	; 0x80
    fa54:	4418      	add	r0, r3
    fa56:	f7ff ff99 	bl	f98c <set_off_state>
	if (err < 0) {
    fa5a:	2800      	cmp	r0, #0
    fa5c:	db05      	blt.n	fa6a <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    fa5e:	6869      	ldr	r1, [r5, #4]
    fa60:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    fa64:	6863      	ldr	r3, [r4, #4]
    fa66:	4798      	blx	r3
	return 0;
    fa68:	2000      	movs	r0, #0
}
    fa6a:	bd38      	pop	{r3, r4, r5, pc}

0000fa6c <api_start>:
{
    fa6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	err = set_starting_state(&subdata->flags, ctx);
    fa70:	270c      	movs	r7, #12
    fa72:	b2cd      	uxtb	r5, r1
    fa74:	436f      	muls	r7, r5
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    fa76:	68c4      	ldr	r4, [r0, #12]
{
    fa78:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    fa7a:	f107 0040 	add.w	r0, r7, #64	; 0x40
    fa7e:	2180      	movs	r1, #128	; 0x80
    fa80:	4420      	add	r0, r4
{
    fa82:	4690      	mov	r8, r2
    fa84:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    fa86:	f7ff ff9a 	bl	f9be <set_starting_state>
	if (err < 0) {
    fa8a:	2800      	cmp	r0, #0
    fa8c:	db07      	blt.n	fa9e <api_start+0x32>
	subdata->cb = cb;
    fa8e:	443c      	add	r4, r7
	subdata->user_data = user_data;
    fa90:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    fa94:	6873      	ldr	r3, [r6, #4]
    fa96:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    fa9a:	4798      	blx	r3
	return 0;
    fa9c:	2000      	movs	r0, #0
}
    fa9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000faa2 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    faa2:	4770      	bx	lr

0000faa4 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    faa4:	4770      	bx	lr

0000faa6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    faa6:	2100      	movs	r1, #0
    faa8:	2001      	movs	r0, #1
    faaa:	f000 b804 	b.w	fab6 <z_arm_fatal_error>

0000faae <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    faae:	6e83      	ldr	r3, [r0, #104]	; 0x68
    fab0:	f383 880b 	msr	PSPLIM, r3
}
    fab4:	4770      	bx	lr

0000fab6 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    fab6:	f000 b95c 	b.w	fd72 <z_fatal_error>

0000faba <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    faba:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    fabc:	6800      	ldr	r0, [r0, #0]
    fabe:	f000 b958 	b.w	fd72 <z_fatal_error>

0000fac2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    fac2:	b508      	push	{r3, lr}
	handler();
    fac4:	f7fd fdec 	bl	d6a0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    fac8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    facc:	f7fd be2e 	b.w	d72c <z_arm_exc_exit>

0000fad0 <mpu_configure_region>:
{
    fad0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    fad2:	890a      	ldrh	r2, [r1, #8]
    fad4:	7a8e      	ldrb	r6, [r1, #10]
	region_conf.base = new_region->start;
    fad6:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    fad8:	684d      	ldr	r5, [r1, #4]
    fada:	f002 021f 	and.w	r2, r2, #31
    fade:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    fae2:	9300      	str	r3, [sp, #0]
    fae4:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    fae8:	f023 031f 	bic.w	r3, r3, #31
    faec:	1e6a      	subs	r2, r5, #1
    faee:	4413      	add	r3, r2
    faf0:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    faf4:	280f      	cmp	r0, #15
    faf6:	9303      	str	r3, [sp, #12]
    faf8:	d804      	bhi.n	fb04 <mpu_configure_region+0x34>
	region_init(index, region_conf);
    fafa:	4669      	mov	r1, sp
    fafc:	f7fd ff5a 	bl	d9b4 <region_init>
}
    fb00:	b004      	add	sp, #16
    fb02:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    fb04:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    fb08:	e7fa      	b.n	fb00 <mpu_configure_region+0x30>

0000fb0a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    fb0a:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    fb0e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    fb12:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    fb14:	bf08      	it	eq
    fb16:	f06f 0015 	mvneq.w	r0, #21
    fb1a:	4770      	bx	lr

0000fb1c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    fb1c:	4603      	mov	r3, r0
	size_t n = 0;
    fb1e:	2000      	movs	r0, #0

	while (*s != '\0') {
    fb20:	5c1a      	ldrb	r2, [r3, r0]
    fb22:	b902      	cbnz	r2, fb26 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    fb24:	4770      	bx	lr
		n++;
    fb26:	3001      	adds	r0, #1
    fb28:	e7fa      	b.n	fb20 <strlen+0x4>

0000fb2a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    fb2a:	4603      	mov	r3, r0
	size_t n = 0;
    fb2c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    fb2e:	5c1a      	ldrb	r2, [r3, r0]
    fb30:	b10a      	cbz	r2, fb36 <strnlen+0xc>
    fb32:	4288      	cmp	r0, r1
    fb34:	d100      	bne.n	fb38 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    fb36:	4770      	bx	lr
		n++;
    fb38:	3001      	adds	r0, #1
    fb3a:	e7f8      	b.n	fb2e <strnlen+0x4>

0000fb3c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    fb3c:	1e43      	subs	r3, r0, #1
    fb3e:	3901      	subs	r1, #1
    fb40:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    fb44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    fb48:	4282      	cmp	r2, r0
    fb4a:	d101      	bne.n	fb50 <strcmp+0x14>
    fb4c:	2a00      	cmp	r2, #0
    fb4e:	d1f7      	bne.n	fb40 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    fb50:	1a10      	subs	r0, r2, r0
    fb52:	4770      	bx	lr

0000fb54 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    fb54:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    fb56:	b15a      	cbz	r2, fb70 <memcmp+0x1c>
    fb58:	3901      	subs	r1, #1
    fb5a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    fb5c:	f810 2b01 	ldrb.w	r2, [r0], #1
    fb60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    fb64:	42a0      	cmp	r0, r4
    fb66:	d001      	beq.n	fb6c <memcmp+0x18>
    fb68:	429a      	cmp	r2, r3
    fb6a:	d0f7      	beq.n	fb5c <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    fb6c:	1ad0      	subs	r0, r2, r3
}
    fb6e:	bd10      	pop	{r4, pc}
		return 0;
    fb70:	4610      	mov	r0, r2
    fb72:	e7fc      	b.n	fb6e <memcmp+0x1a>

0000fb74 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    fb74:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    fb76:	ea81 0400 	eor.w	r4, r1, r0
    fb7a:	07a5      	lsls	r5, r4, #30
    fb7c:	4603      	mov	r3, r0
    fb7e:	d00b      	beq.n	fb98 <memcpy+0x24>
    fb80:	3b01      	subs	r3, #1
    fb82:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    fb84:	4291      	cmp	r1, r2
    fb86:	d11b      	bne.n	fbc0 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    fb88:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    fb8a:	2a00      	cmp	r2, #0
    fb8c:	d0fc      	beq.n	fb88 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    fb8e:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    fb92:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    fb94:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    fb98:	079c      	lsls	r4, r3, #30
    fb9a:	d1f6      	bne.n	fb8a <memcpy+0x16>
    fb9c:	f022 0403 	bic.w	r4, r2, #3
    fba0:	1f1d      	subs	r5, r3, #4
    fba2:	0896      	lsrs	r6, r2, #2
    fba4:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    fba6:	42b9      	cmp	r1, r7
    fba8:	d105      	bne.n	fbb6 <memcpy+0x42>
    fbaa:	f06f 0503 	mvn.w	r5, #3
    fbae:	4423      	add	r3, r4
    fbb0:	fb05 2206 	mla	r2, r5, r6, r2
    fbb4:	e7e4      	b.n	fb80 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    fbb6:	f851 cb04 	ldr.w	ip, [r1], #4
    fbba:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    fbbe:	e7f2      	b.n	fba6 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    fbc0:	f811 4b01 	ldrb.w	r4, [r1], #1
    fbc4:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    fbc8:	e7dc      	b.n	fb84 <memcpy+0x10>

0000fbca <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    fbca:	4603      	mov	r3, r0
{
    fbcc:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    fbce:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    fbd0:	079c      	lsls	r4, r3, #30
    fbd2:	d111      	bne.n	fbf8 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    fbd4:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    fbd8:	f022 0603 	bic.w	r6, r2, #3
    fbdc:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    fbe0:	441e      	add	r6, r3
    fbe2:	0894      	lsrs	r4, r2, #2
    fbe4:	42b3      	cmp	r3, r6
    fbe6:	d10d      	bne.n	fc04 <memset+0x3a>
    fbe8:	f06f 0503 	mvn.w	r5, #3
    fbec:	fb05 2204 	mla	r2, r5, r4, r2
    fbf0:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    fbf2:	4293      	cmp	r3, r2
    fbf4:	d109      	bne.n	fc0a <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    fbf6:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    fbf8:	2a00      	cmp	r2, #0
    fbfa:	d0fc      	beq.n	fbf6 <memset+0x2c>
		*(d_byte++) = c_byte;
    fbfc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    fc00:	3a01      	subs	r2, #1
    fc02:	e7e5      	b.n	fbd0 <memset+0x6>
		*(d_word++) = c_word;
    fc04:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    fc08:	e7ec      	b.n	fbe4 <memset+0x1a>
		*(d_byte++) = c_byte;
    fc0a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    fc0e:	e7f0      	b.n	fbf2 <memset+0x28>

0000fc10 <_stdout_hook_default>:
}
    fc10:	f04f 30ff 	mov.w	r0, #4294967295
    fc14:	4770      	bx	lr

0000fc16 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    fc16:	6843      	ldr	r3, [r0, #4]
}
    fc18:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    fc1a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    fc1c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    fc1e:	600b      	str	r3, [r1, #0]
}
    fc20:	4770      	bx	lr

0000fc22 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    fc22:	6843      	ldr	r3, [r0, #4]
    fc24:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    fc26:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    fc28:	4042      	eors	r2, r0
    fc2a:	400a      	ands	r2, r1
    fc2c:	4042      	eors	r2, r0
    p_reg->OUT = value;
    fc2e:	605a      	str	r2, [r3, #4]
}
    fc30:	2000      	movs	r0, #0
    fc32:	4770      	bx	lr

0000fc34 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    fc34:	6843      	ldr	r3, [r0, #4]
}
    fc36:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    fc38:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    fc3a:	6099      	str	r1, [r3, #8]
}
    fc3c:	4770      	bx	lr

0000fc3e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    fc3e:	6843      	ldr	r3, [r0, #4]
}
    fc40:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    fc42:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    fc44:	60d9      	str	r1, [r3, #12]
}
    fc46:	4770      	bx	lr

0000fc48 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    fc48:	6843      	ldr	r3, [r0, #4]
}
    fc4a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    fc4c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    fc4e:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    fc50:	404b      	eors	r3, r1
    p_reg->OUT = value;
    fc52:	6053      	str	r3, [r2, #4]
}
    fc54:	4770      	bx	lr

0000fc56 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    fc56:	68c3      	ldr	r3, [r0, #12]
{
    fc58:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
    fc5a:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    fc5c:	b158      	cbz	r0, fc76 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    fc5e:	2400      	movs	r4, #0
    fc60:	4281      	cmp	r1, r0
    fc62:	d113      	bne.n	fc8c <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    fc64:	6808      	ldr	r0, [r1, #0]
    fc66:	b95c      	cbnz	r4, fc80 <gpio_nrfx_manage_callback+0x2a>
    fc68:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    fc6a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    fc6c:	42a1      	cmp	r1, r4
    fc6e:	d100      	bne.n	fc72 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    fc70:	6098      	str	r0, [r3, #8]
	parent->next = child;
    fc72:	2000      	movs	r0, #0
    fc74:	6008      	str	r0, [r1, #0]
	if (set) {
    fc76:	b972      	cbnz	r2, fc96 <gpio_nrfx_manage_callback+0x40>
	return 0;
    fc78:	2000      	movs	r0, #0
}
    fc7a:	bd30      	pop	{r4, r5, pc}
    fc7c:	4628      	mov	r0, r5
    fc7e:	e7ef      	b.n	fc60 <gpio_nrfx_manage_callback+0xa>
    fc80:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    fc82:	6898      	ldr	r0, [r3, #8]
    fc84:	4281      	cmp	r1, r0
	list->tail = node;
    fc86:	bf08      	it	eq
    fc88:	609c      	streq	r4, [r3, #8]
}
    fc8a:	e7f2      	b.n	fc72 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fc8c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    fc8e:	4604      	mov	r4, r0
    fc90:	2d00      	cmp	r5, #0
    fc92:	d1f3      	bne.n	fc7c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    fc94:	b13a      	cbz	r2, fca6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    fc96:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    fc98:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    fc9a:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    fc9c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    fc9e:	2800      	cmp	r0, #0
    fca0:	d1ea      	bne.n	fc78 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    fca2:	6099      	str	r1, [r3, #8]
}
    fca4:	e7e9      	b.n	fc7a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    fca6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    fcaa:	e7e6      	b.n	fc7a <gpio_nrfx_manage_callback+0x24>

0000fcac <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    fcac:	6843      	ldr	r3, [r0, #4]
    fcae:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    fcb0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    fcb4:	05d2      	lsls	r2, r2, #23
    fcb6:	d518      	bpl.n	fcea <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fcb8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    fcbc:	b1aa      	cbz	r2, fcea <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    fcbe:	f04f 0120 	mov.w	r1, #32
    fcc2:	f3ef 8211 	mrs	r2, BASEPRI
    fcc6:	f381 8811 	msr	BASEPRI, r1
    fcca:	f3bf 8f6f 	isb	sy
    fcce:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    fcd2:	b131      	cbz	r1, fce2 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fcd4:	2100      	movs	r1, #0
    fcd6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    fcda:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fcde:	2101      	movs	r1, #1
    fce0:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    fce2:	f382 8811 	msr	BASEPRI, r2
    fce6:	f3bf 8f6f 	isb	sy
}
    fcea:	4770      	bx	lr

0000fcec <uarte_nrfx_config_get>:
{
    fcec:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    fcee:	68c2      	ldr	r2, [r0, #12]
    fcf0:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    fcf4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    fcf8:	2000      	movs	r0, #0
    fcfa:	4770      	bx	lr

0000fcfc <uarte_nrfx_err_check>:
	return config->uarte_regs;
    fcfc:	6843      	ldr	r3, [r0, #4]
    fcfe:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    fd00:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    fd04:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    fd08:	4770      	bx	lr

0000fd0a <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    fd0a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    fd0c:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fd0e:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    fd12:	b938      	cbnz	r0, fd24 <is_tx_ready+0x1a>
    fd14:	7992      	ldrb	r2, [r2, #6]
    fd16:	b932      	cbnz	r2, fd26 <is_tx_ready+0x1c>
    fd18:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    fd1c:	3800      	subs	r0, #0
    fd1e:	bf18      	it	ne
    fd20:	2001      	movne	r0, #1
    fd22:	4770      	bx	lr
    fd24:	2001      	movs	r0, #1
}
    fd26:	4770      	bx	lr

0000fd28 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    fd28:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    fd2a:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    fd2c:	681b      	ldr	r3, [r3, #0]
    fd2e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    fd32:	b148      	cbz	r0, fd48 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fd34:	2000      	movs	r0, #0
	*c = data->rx_data;
    fd36:	7c52      	ldrb	r2, [r2, #17]
    fd38:	700a      	strb	r2, [r1, #0]
    fd3a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    fd3e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd42:	2201      	movs	r2, #1
    fd44:	601a      	str	r2, [r3, #0]
	return 0;
    fd46:	4770      	bx	lr
		return -1;
    fd48:	f04f 30ff 	mov.w	r0, #4294967295
}
    fd4c:	4770      	bx	lr

0000fd4e <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
    fd4e:	2000      	movs	r0, #0
{
    fd50:	b508      	push	{r3, lr}
	sys_arch_reboot(0);
    fd52:	f7fd fdd3 	bl	d8fc <sys_arch_reboot>

0000fd56 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    fd56:	4700      	bx	r0

0000fd58 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    fd58:	f000 b8da 	b.w	ff10 <z_impl_k_busy_wait>

0000fd5c <nrfx_clock_enable>:
{
    fd5c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    fd5e:	2005      	movs	r0, #5
    fd60:	f7fd fbc8 	bl	d4f4 <arch_irq_is_enabled>
    fd64:	b920      	cbnz	r0, fd70 <nrfx_clock_enable+0x14>
}
    fd66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    fd6a:	2005      	movs	r0, #5
    fd6c:	f7fd bbb2 	b.w	d4d4 <arch_irq_enable>
    fd70:	bd08      	pop	{r3, pc}

0000fd72 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    fd72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd74:	4605      	mov	r5, r0
    fd76:	460e      	mov	r6, r1
	__asm__ volatile(
    fd78:	f04f 0320 	mov.w	r3, #32
    fd7c:	f3ef 8711 	mrs	r7, BASEPRI
    fd80:	f383 8811 	msr	BASEPRI, r3
    fd84:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    fd88:	f7ff f938 	bl	effc <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    fd8c:	4631      	mov	r1, r6
    fd8e:	4604      	mov	r4, r0
    fd90:	4628      	mov	r0, r5
    fd92:	f7ff ffdc 	bl	fd4e <k_sys_fatal_error_handler>
	__asm__ volatile(
    fd96:	f387 8811 	msr	BASEPRI, r7
    fd9a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    fd9e:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    fda0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    fda4:	f7fd bdc8 	b.w	d938 <z_impl_k_thread_abort>

0000fda8 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
    fda8:	f7ff be7c 	b.w	faa4 <z_clock_idle_exit>

0000fdac <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    fdac:	4603      	mov	r3, r0
    fdae:	b920      	cbnz	r0, fdba <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    fdb0:	f3ef 8205 	mrs	r2, IPSR
    fdb4:	b90a      	cbnz	r2, fdba <z_reschedule_irqlock+0xe>
    fdb6:	f7fd bb73 	b.w	d4a0 <arch_swap>
    fdba:	f383 8811 	msr	BASEPRI, r3
    fdbe:	f3bf 8f6f 	isb	sy
}
    fdc2:	4770      	bx	lr

0000fdc4 <z_reschedule_unlocked>:
	__asm__ volatile(
    fdc4:	f04f 0320 	mov.w	r3, #32
    fdc8:	f3ef 8011 	mrs	r0, BASEPRI
    fdcc:	f383 8811 	msr	BASEPRI, r3
    fdd0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    fdd4:	f7ff bfea 	b.w	fdac <z_reschedule_irqlock>

0000fdd8 <unpend_thread_no_timeout>:
{
    fdd8:	4601      	mov	r1, r0
    fdda:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    fddc:	6880      	ldr	r0, [r0, #8]
    fdde:	f7fe fe21 	bl	ea24 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    fde2:	7b4b      	ldrb	r3, [r1, #13]
    fde4:	f023 0302 	bic.w	r3, r3, #2
    fde8:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
    fdea:	2300      	movs	r3, #0
    fdec:	608b      	str	r3, [r1, #8]
}
    fdee:	bd08      	pop	{r3, pc}

0000fdf0 <z_priq_dumb_best>:
{
    fdf0:	4603      	mov	r3, r0
	return list->head == list;
    fdf2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fdf4:	4283      	cmp	r3, r0
    fdf6:	d003      	beq.n	fe00 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    fdf8:	2800      	cmp	r0, #0
    fdfa:	bf38      	it	cc
    fdfc:	2000      	movcc	r0, #0
    fdfe:	4770      	bx	lr
	struct k_thread *thread = NULL;
    fe00:	2000      	movs	r0, #0
}
    fe02:	4770      	bx	lr

0000fe04 <z_ready_thread>:
{
    fe04:	b510      	push	{r4, lr}
    fe06:	f04f 0320 	mov.w	r3, #32
    fe0a:	f3ef 8411 	mrs	r4, BASEPRI
    fe0e:	f383 8811 	msr	BASEPRI, r3
    fe12:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    fe16:	f7fe fe5f 	bl	ead8 <ready_thread>
	__asm__ volatile(
    fe1a:	f384 8811 	msr	BASEPRI, r4
    fe1e:	f3bf 8f6f 	isb	sy
}
    fe22:	bd10      	pop	{r4, pc}

0000fe24 <z_thread_timeout>:
{
    fe24:	b570      	push	{r4, r5, r6, lr}
    fe26:	4604      	mov	r4, r0
	__asm__ volatile(
    fe28:	f04f 0320 	mov.w	r3, #32
    fe2c:	f3ef 8611 	mrs	r6, BASEPRI
    fe30:	f383 8811 	msr	BASEPRI, r3
    fe34:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    fe38:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    fe3c:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
    fe40:	b113      	cbz	r3, fe48 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
    fe42:	4628      	mov	r0, r5
    fe44:	f7ff ffc8 	bl	fdd8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    fe48:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
    fe4c:	4628      	mov	r0, r5
    fe4e:	f023 0314 	bic.w	r3, r3, #20
    fe52:	f804 3c0b 	strb.w	r3, [r4, #-11]
    fe56:	f7fe fe3f 	bl	ead8 <ready_thread>
	__asm__ volatile(
    fe5a:	f386 8811 	msr	BASEPRI, r6
    fe5e:	f3bf 8f6f 	isb	sy
}
    fe62:	bd70      	pop	{r4, r5, r6, pc}

0000fe64 <add_to_waitq_locked>:
{
    fe64:	b538      	push	{r3, r4, r5, lr}
    fe66:	4604      	mov	r4, r0
    fe68:	460d      	mov	r5, r1
	unready_thread(thread);
    fe6a:	f7fe ffbd 	bl	ede8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    fe6e:	7b63      	ldrb	r3, [r4, #13]
    fe70:	f043 0302 	orr.w	r3, r3, #2
    fe74:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    fe76:	b1c5      	cbz	r5, feaa <add_to_waitq_locked+0x46>
	return list->head == list;
    fe78:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    fe7a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fe7c:	429d      	cmp	r5, r3
    fe7e:	bf08      	it	eq
    fe80:	2300      	moveq	r3, #0
    fe82:	2b00      	cmp	r3, #0
    fe84:	bf38      	it	cc
    fe86:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fe88:	b183      	cbz	r3, feac <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    fe8a:	f994 100e 	ldrsb.w	r1, [r4, #14]
    fe8e:	f993 200e 	ldrsb.w	r2, [r3, #14]
    fe92:	4291      	cmp	r1, r2
    fe94:	db04      	blt.n	fea0 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    fe96:	686a      	ldr	r2, [r5, #4]
    fe98:	429a      	cmp	r2, r3
    fe9a:	d007      	beq.n	feac <add_to_waitq_locked+0x48>
    fe9c:	681b      	ldr	r3, [r3, #0]
    fe9e:	e7f3      	b.n	fe88 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    fea0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    fea2:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    fea6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    fea8:	605c      	str	r4, [r3, #4]
}
    feaa:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    feac:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    feae:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    feb0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    feb2:	686b      	ldr	r3, [r5, #4]
    feb4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    feb6:	606c      	str	r4, [r5, #4]
    feb8:	e7f7      	b.n	feaa <add_to_waitq_locked+0x46>

0000feba <z_unpend_first_thread>:
{
    feba:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    febc:	f04f 0320 	mov.w	r3, #32
    fec0:	f3ef 8211 	mrs	r2, BASEPRI
    fec4:	f383 8811 	msr	BASEPRI, r3
    fec8:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    fecc:	f7ff ff90 	bl	fdf0 <z_priq_dumb_best>
    fed0:	4604      	mov	r4, r0
	__asm__ volatile(
    fed2:	f382 8811 	msr	BASEPRI, r2
    fed6:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    feda:	b188      	cbz	r0, ff00 <z_unpend_first_thread+0x46>
	__asm__ volatile(
    fedc:	f04f 0320 	mov.w	r3, #32
    fee0:	f3ef 8511 	mrs	r5, BASEPRI
    fee4:	f383 8811 	msr	BASEPRI, r3
    fee8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    feec:	f7ff ff74 	bl	fdd8 <unpend_thread_no_timeout>
	__asm__ volatile(
    fef0:	f385 8811 	msr	BASEPRI, r5
    fef4:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    fef8:	f104 0018 	add.w	r0, r4, #24
    fefc:	f000 f80c 	bl	ff18 <z_abort_timeout>
}
    ff00:	4620      	mov	r0, r4
    ff02:	bd38      	pop	{r3, r4, r5, pc}

0000ff04 <k_is_in_isr>:
    ff04:	f3ef 8005 	mrs	r0, IPSR
}
    ff08:	3800      	subs	r0, #0
    ff0a:	bf18      	it	ne
    ff0c:	2001      	movne	r0, #1
    ff0e:	4770      	bx	lr

0000ff10 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
    ff10:	b108      	cbz	r0, ff16 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
    ff12:	f7fd b813 	b.w	cf3c <arch_busy_wait>
}
    ff16:	4770      	bx	lr

0000ff18 <z_abort_timeout>:
{
    ff18:	b510      	push	{r4, lr}
	__asm__ volatile(
    ff1a:	f04f 0220 	mov.w	r2, #32
    ff1e:	f3ef 8411 	mrs	r4, BASEPRI
    ff22:	f382 8811 	msr	BASEPRI, r2
    ff26:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    ff2a:	6803      	ldr	r3, [r0, #0]
    ff2c:	b13b      	cbz	r3, ff3e <z_abort_timeout+0x26>
			remove_timeout(to);
    ff2e:	f7ff f987 	bl	f240 <remove_timeout>
			ret = 0;
    ff32:	2000      	movs	r0, #0
	__asm__ volatile(
    ff34:	f384 8811 	msr	BASEPRI, r4
    ff38:	f3bf 8f6f 	isb	sy
}
    ff3c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    ff3e:	f06f 0015 	mvn.w	r0, #21
    ff42:	e7f7      	b.n	ff34 <z_abort_timeout+0x1c>

0000ff44 <z_get_next_timeout_expiry>:
{
    ff44:	b510      	push	{r4, lr}
	__asm__ volatile(
    ff46:	f04f 0320 	mov.w	r3, #32
    ff4a:	f3ef 8411 	mrs	r4, BASEPRI
    ff4e:	f383 8811 	msr	BASEPRI, r3
    ff52:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    ff56:	f7ff f98d 	bl	f274 <next_timeout>
	__asm__ volatile(
    ff5a:	f384 8811 	msr	BASEPRI, r4
    ff5e:	f3bf 8f6f 	isb	sy
}
    ff62:	bd10      	pop	{r4, pc}

0000ff64 <z_set_timeout_expiry>:
{
    ff64:	b570      	push	{r4, r5, r6, lr}
    ff66:	4604      	mov	r4, r0
    ff68:	460d      	mov	r5, r1
	__asm__ volatile(
    ff6a:	f04f 0320 	mov.w	r3, #32
    ff6e:	f3ef 8611 	mrs	r6, BASEPRI
    ff72:	f383 8811 	msr	BASEPRI, r3
    ff76:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    ff7a:	f7ff f97b 	bl	f274 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    ff7e:	2801      	cmp	r0, #1
    ff80:	dd05      	ble.n	ff8e <z_set_timeout_expiry+0x2a>
    ff82:	42a0      	cmp	r0, r4
    ff84:	dd03      	ble.n	ff8e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
    ff86:	4629      	mov	r1, r5
    ff88:	4620      	mov	r0, r4
    ff8a:	f7fd fa3d 	bl	d408 <z_clock_set_timeout>
	__asm__ volatile(
    ff8e:	f386 8811 	msr	BASEPRI, r6
    ff92:	f3bf 8f6f 	isb	sy
}
    ff96:	bd70      	pop	{r4, r5, r6, pc}

0000ff98 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    ff98:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    ff9a:	f7ff fa8f 	bl	f4bc <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    ff9e:	bd08      	pop	{r3, pc}

0000ffa0 <k_heap_init>:
{
    ffa0:	b410      	push	{r4}
    ffa2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    ffa6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    ffaa:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    ffac:	f7ff bc2f 	b.w	f80e <sys_heap_init>

0000ffb0 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    ffb0:	4770      	bx	lr
