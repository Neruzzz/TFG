
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	200195f0 	.word	0x200195f0
    c004:	0000f09d 	.word	0x0000f09d
    c008:	00017b5f 	.word	0x00017b5f
    c00c:	0000f0cd 	.word	0x0000f0cd
    c010:	0000f0cd 	.word	0x0000f0cd
    c014:	0000f0cd 	.word	0x0000f0cd
    c018:	0000f0cd 	.word	0x0000f0cd
    c01c:	0000f0cd 	.word	0x0000f0cd
	...
    c02c:	0000eff9 	.word	0x0000eff9
    c030:	0000f0cd 	.word	0x0000f0cd
    c034:	00000000 	.word	0x00000000
    c038:	0000ef49 	.word	0x0000ef49
    c03c:	00017b27 	.word	0x00017b27

0000c040 <_irq_vector_table>:
    c040:	0000f05d 0000f05d 0000f05d 0000f05d     ]...]...]...]...
    c050:	0000f05d 0000f05d 0000f05d 0000f05d     ]...]...]...]...
    c060:	0000f05d 0000f05d 0000f05d 0000f05d     ]...]...]...]...
    c070:	0000f05d 0000f05d 0000f05d 0000f05d     ]...]...]...]...
    c080:	0000f05d 0000f05d 0000f05d 0000f05d     ]...]...]...]...
    c090:	0000f05d 0000f05d 0000f05d 0000f05d     ]...]...]...]...
    c0a0:	0000f05d 0000f05d 0000f05d 0000f05d     ]...]...]...]...
    c0b0:	0000ff99 0001839f 0000f05d 0000f05d     ........]...]...
    c0c0:	0000f05d 0000f05d 0000f05d 0000f05d     ]...]...]...]...
    c0d0:	0000f05d 0000f05d 0000f05d 0000f05d     ]...]...]...]...
    c0e0:	0000f05d 0000f05d 0000f05d 0000f05d     ]...]...]...]...
    c0f0:	0000f05d 0000f05d 0000f05d 0000f05d     ]...]...]...]...
    c100:	0000f05d 0000f05d 0000f05d 0000f05d     ]...]...]...]...
    c110:	0000f05d 0000f05d 0000f05d 0000f05d     ]...]...]...]...
    c120:	0000f05d 0000f05d 0000f05d 0000f05d     ]...]...]...]...
    c130:	0000f05d 0000f05d 0000f05d 0000f05d     ]...]...]...]...
    c140:	0000f05d                                ]...

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	0000f928 00000001 0000c000 0000c000     (...............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_drsub>:
    c240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c244:	e002      	b.n	c24c <__adddf3>
    c246:	bf00      	nop

0000c248 <__aeabi_dsub>:
    c248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c24c <__adddf3>:
    c24c:	b530      	push	{r4, r5, lr}
    c24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c256:	ea94 0f05 	teq	r4, r5
    c25a:	bf08      	it	eq
    c25c:	ea90 0f02 	teqeq	r0, r2
    c260:	bf1f      	itttt	ne
    c262:	ea54 0c00 	orrsne.w	ip, r4, r0
    c266:	ea55 0c02 	orrsne.w	ip, r5, r2
    c26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c272:	f000 80e2 	beq.w	c43a <__adddf3+0x1ee>
    c276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27e:	bfb8      	it	lt
    c280:	426d      	neglt	r5, r5
    c282:	dd0c      	ble.n	c29e <__adddf3+0x52>
    c284:	442c      	add	r4, r5
    c286:	ea80 0202 	eor.w	r2, r0, r2
    c28a:	ea81 0303 	eor.w	r3, r1, r3
    c28e:	ea82 0000 	eor.w	r0, r2, r0
    c292:	ea83 0101 	eor.w	r1, r3, r1
    c296:	ea80 0202 	eor.w	r2, r0, r2
    c29a:	ea81 0303 	eor.w	r3, r1, r3
    c29e:	2d36      	cmp	r5, #54	; 0x36
    c2a0:	bf88      	it	hi
    c2a2:	bd30      	pophi	{r4, r5, pc}
    c2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b4:	d002      	beq.n	c2bc <__adddf3+0x70>
    c2b6:	4240      	negs	r0, r0
    c2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c8:	d002      	beq.n	c2d0 <__adddf3+0x84>
    c2ca:	4252      	negs	r2, r2
    c2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2d0:	ea94 0f05 	teq	r4, r5
    c2d4:	f000 80a7 	beq.w	c426 <__adddf3+0x1da>
    c2d8:	f1a4 0401 	sub.w	r4, r4, #1
    c2dc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2e0:	db0d      	blt.n	c2fe <__adddf3+0xb2>
    c2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ea:	1880      	adds	r0, r0, r2
    c2ec:	f141 0100 	adc.w	r1, r1, #0
    c2f0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f4:	1880      	adds	r0, r0, r2
    c2f6:	fa43 f305 	asr.w	r3, r3, r5
    c2fa:	4159      	adcs	r1, r3
    c2fc:	e00e      	b.n	c31c <__adddf3+0xd0>
    c2fe:	f1a5 0520 	sub.w	r5, r5, #32
    c302:	f10e 0e20 	add.w	lr, lr, #32
    c306:	2a01      	cmp	r2, #1
    c308:	fa03 fc0e 	lsl.w	ip, r3, lr
    c30c:	bf28      	it	cs
    c30e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c312:	fa43 f305 	asr.w	r3, r3, r5
    c316:	18c0      	adds	r0, r0, r3
    c318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c320:	d507      	bpl.n	c332 <__adddf3+0xe6>
    c322:	f04f 0e00 	mov.w	lr, #0
    c326:	f1dc 0c00 	rsbs	ip, ip, #0
    c32a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32e:	eb6e 0101 	sbc.w	r1, lr, r1
    c332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c336:	d31b      	bcc.n	c370 <__adddf3+0x124>
    c338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c33c:	d30c      	bcc.n	c358 <__adddf3+0x10c>
    c33e:	0849      	lsrs	r1, r1, #1
    c340:	ea5f 0030 	movs.w	r0, r0, rrx
    c344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c348:	f104 0401 	add.w	r4, r4, #1
    c34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c354:	f080 809a 	bcs.w	c48c <__adddf3+0x240>
    c358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c35c:	bf08      	it	eq
    c35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c362:	f150 0000 	adcs.w	r0, r0, #0
    c366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c36a:	ea41 0105 	orr.w	r1, r1, r5
    c36e:	bd30      	pop	{r4, r5, pc}
    c370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c374:	4140      	adcs	r0, r0
    c376:	eb41 0101 	adc.w	r1, r1, r1
    c37a:	3c01      	subs	r4, #1
    c37c:	bf28      	it	cs
    c37e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c382:	d2e9      	bcs.n	c358 <__adddf3+0x10c>
    c384:	f091 0f00 	teq	r1, #0
    c388:	bf04      	itt	eq
    c38a:	4601      	moveq	r1, r0
    c38c:	2000      	moveq	r0, #0
    c38e:	fab1 f381 	clz	r3, r1
    c392:	bf08      	it	eq
    c394:	3320      	addeq	r3, #32
    c396:	f1a3 030b 	sub.w	r3, r3, #11
    c39a:	f1b3 0220 	subs.w	r2, r3, #32
    c39e:	da0c      	bge.n	c3ba <__adddf3+0x16e>
    c3a0:	320c      	adds	r2, #12
    c3a2:	dd08      	ble.n	c3b6 <__adddf3+0x16a>
    c3a4:	f102 0c14 	add.w	ip, r2, #20
    c3a8:	f1c2 020c 	rsb	r2, r2, #12
    c3ac:	fa01 f00c 	lsl.w	r0, r1, ip
    c3b0:	fa21 f102 	lsr.w	r1, r1, r2
    c3b4:	e00c      	b.n	c3d0 <__adddf3+0x184>
    c3b6:	f102 0214 	add.w	r2, r2, #20
    c3ba:	bfd8      	it	le
    c3bc:	f1c2 0c20 	rsble	ip, r2, #32
    c3c0:	fa01 f102 	lsl.w	r1, r1, r2
    c3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c8:	bfdc      	itt	le
    c3ca:	ea41 010c 	orrle.w	r1, r1, ip
    c3ce:	4090      	lslle	r0, r2
    c3d0:	1ae4      	subs	r4, r4, r3
    c3d2:	bfa2      	ittt	ge
    c3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d8:	4329      	orrge	r1, r5
    c3da:	bd30      	popge	{r4, r5, pc}
    c3dc:	ea6f 0404 	mvn.w	r4, r4
    c3e0:	3c1f      	subs	r4, #31
    c3e2:	da1c      	bge.n	c41e <__adddf3+0x1d2>
    c3e4:	340c      	adds	r4, #12
    c3e6:	dc0e      	bgt.n	c406 <__adddf3+0x1ba>
    c3e8:	f104 0414 	add.w	r4, r4, #20
    c3ec:	f1c4 0220 	rsb	r2, r4, #32
    c3f0:	fa20 f004 	lsr.w	r0, r0, r4
    c3f4:	fa01 f302 	lsl.w	r3, r1, r2
    c3f8:	ea40 0003 	orr.w	r0, r0, r3
    c3fc:	fa21 f304 	lsr.w	r3, r1, r4
    c400:	ea45 0103 	orr.w	r1, r5, r3
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f1c4 040c 	rsb	r4, r4, #12
    c40a:	f1c4 0220 	rsb	r2, r4, #32
    c40e:	fa20 f002 	lsr.w	r0, r0, r2
    c412:	fa01 f304 	lsl.w	r3, r1, r4
    c416:	ea40 0003 	orr.w	r0, r0, r3
    c41a:	4629      	mov	r1, r5
    c41c:	bd30      	pop	{r4, r5, pc}
    c41e:	fa21 f004 	lsr.w	r0, r1, r4
    c422:	4629      	mov	r1, r5
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	f094 0f00 	teq	r4, #0
    c42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42e:	bf06      	itte	eq
    c430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c434:	3401      	addeq	r4, #1
    c436:	3d01      	subne	r5, #1
    c438:	e74e      	b.n	c2d8 <__adddf3+0x8c>
    c43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43e:	bf18      	it	ne
    c440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c444:	d029      	beq.n	c49a <__adddf3+0x24e>
    c446:	ea94 0f05 	teq	r4, r5
    c44a:	bf08      	it	eq
    c44c:	ea90 0f02 	teqeq	r0, r2
    c450:	d005      	beq.n	c45e <__adddf3+0x212>
    c452:	ea54 0c00 	orrs.w	ip, r4, r0
    c456:	bf04      	itt	eq
    c458:	4619      	moveq	r1, r3
    c45a:	4610      	moveq	r0, r2
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	ea91 0f03 	teq	r1, r3
    c462:	bf1e      	ittt	ne
    c464:	2100      	movne	r1, #0
    c466:	2000      	movne	r0, #0
    c468:	bd30      	popne	{r4, r5, pc}
    c46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46e:	d105      	bne.n	c47c <__adddf3+0x230>
    c470:	0040      	lsls	r0, r0, #1
    c472:	4149      	adcs	r1, r1
    c474:	bf28      	it	cs
    c476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c47a:	bd30      	pop	{r4, r5, pc}
    c47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c480:	bf3c      	itt	cc
    c482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c486:	bd30      	popcc	{r4, r5, pc}
    c488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c494:	f04f 0000 	mov.w	r0, #0
    c498:	bd30      	pop	{r4, r5, pc}
    c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49e:	bf1a      	itte	ne
    c4a0:	4619      	movne	r1, r3
    c4a2:	4610      	movne	r0, r2
    c4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a8:	bf1c      	itt	ne
    c4aa:	460b      	movne	r3, r1
    c4ac:	4602      	movne	r2, r0
    c4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4b2:	bf06      	itte	eq
    c4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b8:	ea91 0f03 	teqeq	r1, r3
    c4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_ui2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f04f 0500 	mov.w	r5, #0
    c4dc:	f04f 0100 	mov.w	r1, #0
    c4e0:	e750      	b.n	c384 <__adddf3+0x138>
    c4e2:	bf00      	nop

0000c4e4 <__aeabi_i2d>:
    c4e4:	f090 0f00 	teq	r0, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2100      	moveq	r1, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	b530      	push	{r4, r5, lr}
    c4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4fc:	bf48      	it	mi
    c4fe:	4240      	negmi	r0, r0
    c500:	f04f 0100 	mov.w	r1, #0
    c504:	e73e      	b.n	c384 <__adddf3+0x138>
    c506:	bf00      	nop

0000c508 <__aeabi_f2d>:
    c508:	0042      	lsls	r2, r0, #1
    c50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50e:	ea4f 0131 	mov.w	r1, r1, rrx
    c512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c516:	bf1f      	itttt	ne
    c518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c524:	4770      	bxne	lr
    c526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c52a:	bf08      	it	eq
    c52c:	4770      	bxeq	lr
    c52e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c532:	bf04      	itt	eq
    c534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c538:	4770      	bxeq	lr
    c53a:	b530      	push	{r4, r5, lr}
    c53c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c548:	e71c      	b.n	c384 <__adddf3+0x138>
    c54a:	bf00      	nop

0000c54c <__aeabi_ul2d>:
    c54c:	ea50 0201 	orrs.w	r2, r0, r1
    c550:	bf08      	it	eq
    c552:	4770      	bxeq	lr
    c554:	b530      	push	{r4, r5, lr}
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	e00a      	b.n	c572 <__aeabi_l2d+0x16>

0000c55c <__aeabi_l2d>:
    c55c:	ea50 0201 	orrs.w	r2, r0, r1
    c560:	bf08      	it	eq
    c562:	4770      	bxeq	lr
    c564:	b530      	push	{r4, r5, lr}
    c566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c56a:	d502      	bpl.n	c572 <__aeabi_l2d+0x16>
    c56c:	4240      	negs	r0, r0
    c56e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57e:	f43f aed8 	beq.w	c332 <__adddf3+0xe6>
    c582:	f04f 0203 	mov.w	r2, #3
    c586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58a:	bf18      	it	ne
    c58c:	3203      	addne	r2, #3
    c58e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c592:	bf18      	it	ne
    c594:	3203      	addne	r2, #3
    c596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c59a:	f1c2 0320 	rsb	r3, r2, #32
    c59e:	fa00 fc03 	lsl.w	ip, r0, r3
    c5a2:	fa20 f002 	lsr.w	r0, r0, r2
    c5a6:	fa01 fe03 	lsl.w	lr, r1, r3
    c5aa:	ea40 000e 	orr.w	r0, r0, lr
    c5ae:	fa21 f102 	lsr.w	r1, r1, r2
    c5b2:	4414      	add	r4, r2
    c5b4:	e6bd      	b.n	c332 <__adddf3+0xe6>
    c5b6:	bf00      	nop

0000c5b8 <__aeabi_dmul>:
    c5b8:	b570      	push	{r4, r5, r6, lr}
    c5ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c5be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c5c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c5c6:	bf1d      	ittte	ne
    c5c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c5cc:	ea94 0f0c 	teqne	r4, ip
    c5d0:	ea95 0f0c 	teqne	r5, ip
    c5d4:	f000 f8de 	bleq	c794 <__aeabi_dmul+0x1dc>
    c5d8:	442c      	add	r4, r5
    c5da:	ea81 0603 	eor.w	r6, r1, r3
    c5de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c5e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c5e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c5ea:	bf18      	it	ne
    c5ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c5f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c5f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c5f8:	d038      	beq.n	c66c <__aeabi_dmul+0xb4>
    c5fa:	fba0 ce02 	umull	ip, lr, r0, r2
    c5fe:	f04f 0500 	mov.w	r5, #0
    c602:	fbe1 e502 	umlal	lr, r5, r1, r2
    c606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c60a:	fbe0 e503 	umlal	lr, r5, r0, r3
    c60e:	f04f 0600 	mov.w	r6, #0
    c612:	fbe1 5603 	umlal	r5, r6, r1, r3
    c616:	f09c 0f00 	teq	ip, #0
    c61a:	bf18      	it	ne
    c61c:	f04e 0e01 	orrne.w	lr, lr, #1
    c620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c62c:	d204      	bcs.n	c638 <__aeabi_dmul+0x80>
    c62e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c632:	416d      	adcs	r5, r5
    c634:	eb46 0606 	adc.w	r6, r6, r6
    c638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c63c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c64c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c650:	bf88      	it	hi
    c652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c656:	d81e      	bhi.n	c696 <__aeabi_dmul+0xde>
    c658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c65c:	bf08      	it	eq
    c65e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c662:	f150 0000 	adcs.w	r0, r0, #0
    c666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c66a:	bd70      	pop	{r4, r5, r6, pc}
    c66c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c670:	ea46 0101 	orr.w	r1, r6, r1
    c674:	ea40 0002 	orr.w	r0, r0, r2
    c678:	ea81 0103 	eor.w	r1, r1, r3
    c67c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c680:	bfc2      	ittt	gt
    c682:	ebd4 050c 	rsbsgt	r5, r4, ip
    c686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c68a:	bd70      	popgt	{r4, r5, r6, pc}
    c68c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c690:	f04f 0e00 	mov.w	lr, #0
    c694:	3c01      	subs	r4, #1
    c696:	f300 80ab 	bgt.w	c7f0 <__aeabi_dmul+0x238>
    c69a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c69e:	bfde      	ittt	le
    c6a0:	2000      	movle	r0, #0
    c6a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c6a6:	bd70      	pople	{r4, r5, r6, pc}
    c6a8:	f1c4 0400 	rsb	r4, r4, #0
    c6ac:	3c20      	subs	r4, #32
    c6ae:	da35      	bge.n	c71c <__aeabi_dmul+0x164>
    c6b0:	340c      	adds	r4, #12
    c6b2:	dc1b      	bgt.n	c6ec <__aeabi_dmul+0x134>
    c6b4:	f104 0414 	add.w	r4, r4, #20
    c6b8:	f1c4 0520 	rsb	r5, r4, #32
    c6bc:	fa00 f305 	lsl.w	r3, r0, r5
    c6c0:	fa20 f004 	lsr.w	r0, r0, r4
    c6c4:	fa01 f205 	lsl.w	r2, r1, r5
    c6c8:	ea40 0002 	orr.w	r0, r0, r2
    c6cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c6d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c6d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c6d8:	fa21 f604 	lsr.w	r6, r1, r4
    c6dc:	eb42 0106 	adc.w	r1, r2, r6
    c6e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c6e4:	bf08      	it	eq
    c6e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c6ea:	bd70      	pop	{r4, r5, r6, pc}
    c6ec:	f1c4 040c 	rsb	r4, r4, #12
    c6f0:	f1c4 0520 	rsb	r5, r4, #32
    c6f4:	fa00 f304 	lsl.w	r3, r0, r4
    c6f8:	fa20 f005 	lsr.w	r0, r0, r5
    c6fc:	fa01 f204 	lsl.w	r2, r1, r4
    c700:	ea40 0002 	orr.w	r0, r0, r2
    c704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c70c:	f141 0100 	adc.w	r1, r1, #0
    c710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c714:	bf08      	it	eq
    c716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c71a:	bd70      	pop	{r4, r5, r6, pc}
    c71c:	f1c4 0520 	rsb	r5, r4, #32
    c720:	fa00 f205 	lsl.w	r2, r0, r5
    c724:	ea4e 0e02 	orr.w	lr, lr, r2
    c728:	fa20 f304 	lsr.w	r3, r0, r4
    c72c:	fa01 f205 	lsl.w	r2, r1, r5
    c730:	ea43 0302 	orr.w	r3, r3, r2
    c734:	fa21 f004 	lsr.w	r0, r1, r4
    c738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c73c:	fa21 f204 	lsr.w	r2, r1, r4
    c740:	ea20 0002 	bic.w	r0, r0, r2
    c744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c74c:	bf08      	it	eq
    c74e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c752:	bd70      	pop	{r4, r5, r6, pc}
    c754:	f094 0f00 	teq	r4, #0
    c758:	d10f      	bne.n	c77a <__aeabi_dmul+0x1c2>
    c75a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c75e:	0040      	lsls	r0, r0, #1
    c760:	eb41 0101 	adc.w	r1, r1, r1
    c764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c768:	bf08      	it	eq
    c76a:	3c01      	subeq	r4, #1
    c76c:	d0f7      	beq.n	c75e <__aeabi_dmul+0x1a6>
    c76e:	ea41 0106 	orr.w	r1, r1, r6
    c772:	f095 0f00 	teq	r5, #0
    c776:	bf18      	it	ne
    c778:	4770      	bxne	lr
    c77a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c77e:	0052      	lsls	r2, r2, #1
    c780:	eb43 0303 	adc.w	r3, r3, r3
    c784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c788:	bf08      	it	eq
    c78a:	3d01      	subeq	r5, #1
    c78c:	d0f7      	beq.n	c77e <__aeabi_dmul+0x1c6>
    c78e:	ea43 0306 	orr.w	r3, r3, r6
    c792:	4770      	bx	lr
    c794:	ea94 0f0c 	teq	r4, ip
    c798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c79c:	bf18      	it	ne
    c79e:	ea95 0f0c 	teqne	r5, ip
    c7a2:	d00c      	beq.n	c7be <__aeabi_dmul+0x206>
    c7a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c7a8:	bf18      	it	ne
    c7aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c7ae:	d1d1      	bne.n	c754 <__aeabi_dmul+0x19c>
    c7b0:	ea81 0103 	eor.w	r1, r1, r3
    c7b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c7b8:	f04f 0000 	mov.w	r0, #0
    c7bc:	bd70      	pop	{r4, r5, r6, pc}
    c7be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c7c2:	bf06      	itte	eq
    c7c4:	4610      	moveq	r0, r2
    c7c6:	4619      	moveq	r1, r3
    c7c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c7cc:	d019      	beq.n	c802 <__aeabi_dmul+0x24a>
    c7ce:	ea94 0f0c 	teq	r4, ip
    c7d2:	d102      	bne.n	c7da <__aeabi_dmul+0x222>
    c7d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c7d8:	d113      	bne.n	c802 <__aeabi_dmul+0x24a>
    c7da:	ea95 0f0c 	teq	r5, ip
    c7de:	d105      	bne.n	c7ec <__aeabi_dmul+0x234>
    c7e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c7e4:	bf1c      	itt	ne
    c7e6:	4610      	movne	r0, r2
    c7e8:	4619      	movne	r1, r3
    c7ea:	d10a      	bne.n	c802 <__aeabi_dmul+0x24a>
    c7ec:	ea81 0103 	eor.w	r1, r1, r3
    c7f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c7f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c7f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c7fc:	f04f 0000 	mov.w	r0, #0
    c800:	bd70      	pop	{r4, r5, r6, pc}
    c802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c80a:	bd70      	pop	{r4, r5, r6, pc}

0000c80c <__aeabi_ddiv>:
    c80c:	b570      	push	{r4, r5, r6, lr}
    c80e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c81a:	bf1d      	ittte	ne
    c81c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c820:	ea94 0f0c 	teqne	r4, ip
    c824:	ea95 0f0c 	teqne	r5, ip
    c828:	f000 f8a7 	bleq	c97a <__aeabi_ddiv+0x16e>
    c82c:	eba4 0405 	sub.w	r4, r4, r5
    c830:	ea81 0e03 	eor.w	lr, r1, r3
    c834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c838:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c83c:	f000 8088 	beq.w	c950 <__aeabi_ddiv+0x144>
    c840:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c84c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c850:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c85c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c864:	429d      	cmp	r5, r3
    c866:	bf08      	it	eq
    c868:	4296      	cmpeq	r6, r2
    c86a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c86e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c872:	d202      	bcs.n	c87a <__aeabi_ddiv+0x6e>
    c874:	085b      	lsrs	r3, r3, #1
    c876:	ea4f 0232 	mov.w	r2, r2, rrx
    c87a:	1ab6      	subs	r6, r6, r2
    c87c:	eb65 0503 	sbc.w	r5, r5, r3
    c880:	085b      	lsrs	r3, r3, #1
    c882:	ea4f 0232 	mov.w	r2, r2, rrx
    c886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c88a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c88e:	ebb6 0e02 	subs.w	lr, r6, r2
    c892:	eb75 0e03 	sbcs.w	lr, r5, r3
    c896:	bf22      	ittt	cs
    c898:	1ab6      	subcs	r6, r6, r2
    c89a:	4675      	movcs	r5, lr
    c89c:	ea40 000c 	orrcs.w	r0, r0, ip
    c8a0:	085b      	lsrs	r3, r3, #1
    c8a2:	ea4f 0232 	mov.w	r2, r2, rrx
    c8a6:	ebb6 0e02 	subs.w	lr, r6, r2
    c8aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    c8ae:	bf22      	ittt	cs
    c8b0:	1ab6      	subcs	r6, r6, r2
    c8b2:	4675      	movcs	r5, lr
    c8b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c8b8:	085b      	lsrs	r3, r3, #1
    c8ba:	ea4f 0232 	mov.w	r2, r2, rrx
    c8be:	ebb6 0e02 	subs.w	lr, r6, r2
    c8c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    c8c6:	bf22      	ittt	cs
    c8c8:	1ab6      	subcs	r6, r6, r2
    c8ca:	4675      	movcs	r5, lr
    c8cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c8d0:	085b      	lsrs	r3, r3, #1
    c8d2:	ea4f 0232 	mov.w	r2, r2, rrx
    c8d6:	ebb6 0e02 	subs.w	lr, r6, r2
    c8da:	eb75 0e03 	sbcs.w	lr, r5, r3
    c8de:	bf22      	ittt	cs
    c8e0:	1ab6      	subcs	r6, r6, r2
    c8e2:	4675      	movcs	r5, lr
    c8e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c8e8:	ea55 0e06 	orrs.w	lr, r5, r6
    c8ec:	d018      	beq.n	c920 <__aeabi_ddiv+0x114>
    c8ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c8f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c8f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c8fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c8fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c90a:	d1c0      	bne.n	c88e <__aeabi_ddiv+0x82>
    c90c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c910:	d10b      	bne.n	c92a <__aeabi_ddiv+0x11e>
    c912:	ea41 0100 	orr.w	r1, r1, r0
    c916:	f04f 0000 	mov.w	r0, #0
    c91a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c91e:	e7b6      	b.n	c88e <__aeabi_ddiv+0x82>
    c920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c924:	bf04      	itt	eq
    c926:	4301      	orreq	r1, r0
    c928:	2000      	moveq	r0, #0
    c92a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c92e:	bf88      	it	hi
    c930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c934:	f63f aeaf 	bhi.w	c696 <__aeabi_dmul+0xde>
    c938:	ebb5 0c03 	subs.w	ip, r5, r3
    c93c:	bf04      	itt	eq
    c93e:	ebb6 0c02 	subseq.w	ip, r6, r2
    c942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c946:	f150 0000 	adcs.w	r0, r0, #0
    c94a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c94e:	bd70      	pop	{r4, r5, r6, pc}
    c950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c95c:	bfc2      	ittt	gt
    c95e:	ebd4 050c 	rsbsgt	r5, r4, ip
    c962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c966:	bd70      	popgt	{r4, r5, r6, pc}
    c968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c96c:	f04f 0e00 	mov.w	lr, #0
    c970:	3c01      	subs	r4, #1
    c972:	e690      	b.n	c696 <__aeabi_dmul+0xde>
    c974:	ea45 0e06 	orr.w	lr, r5, r6
    c978:	e68d      	b.n	c696 <__aeabi_dmul+0xde>
    c97a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c97e:	ea94 0f0c 	teq	r4, ip
    c982:	bf08      	it	eq
    c984:	ea95 0f0c 	teqeq	r5, ip
    c988:	f43f af3b 	beq.w	c802 <__aeabi_dmul+0x24a>
    c98c:	ea94 0f0c 	teq	r4, ip
    c990:	d10a      	bne.n	c9a8 <__aeabi_ddiv+0x19c>
    c992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c996:	f47f af34 	bne.w	c802 <__aeabi_dmul+0x24a>
    c99a:	ea95 0f0c 	teq	r5, ip
    c99e:	f47f af25 	bne.w	c7ec <__aeabi_dmul+0x234>
    c9a2:	4610      	mov	r0, r2
    c9a4:	4619      	mov	r1, r3
    c9a6:	e72c      	b.n	c802 <__aeabi_dmul+0x24a>
    c9a8:	ea95 0f0c 	teq	r5, ip
    c9ac:	d106      	bne.n	c9bc <__aeabi_ddiv+0x1b0>
    c9ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c9b2:	f43f aefd 	beq.w	c7b0 <__aeabi_dmul+0x1f8>
    c9b6:	4610      	mov	r0, r2
    c9b8:	4619      	mov	r1, r3
    c9ba:	e722      	b.n	c802 <__aeabi_dmul+0x24a>
    c9bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c9c0:	bf18      	it	ne
    c9c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c9c6:	f47f aec5 	bne.w	c754 <__aeabi_dmul+0x19c>
    c9ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c9ce:	f47f af0d 	bne.w	c7ec <__aeabi_dmul+0x234>
    c9d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c9d6:	f47f aeeb 	bne.w	c7b0 <__aeabi_dmul+0x1f8>
    c9da:	e712      	b.n	c802 <__aeabi_dmul+0x24a>

0000c9dc <__aeabi_d2f>:
    c9dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c9e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c9e4:	bf24      	itt	cs
    c9e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c9ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c9ee:	d90d      	bls.n	ca0c <__aeabi_d2f+0x30>
    c9f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c9f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c9f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c9fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ca00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    ca04:	bf08      	it	eq
    ca06:	f020 0001 	biceq.w	r0, r0, #1
    ca0a:	4770      	bx	lr
    ca0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    ca10:	d121      	bne.n	ca56 <__aeabi_d2f+0x7a>
    ca12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    ca16:	bfbc      	itt	lt
    ca18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    ca1c:	4770      	bxlt	lr
    ca1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ca22:	ea4f 5252 	mov.w	r2, r2, lsr #21
    ca26:	f1c2 0218 	rsb	r2, r2, #24
    ca2a:	f1c2 0c20 	rsb	ip, r2, #32
    ca2e:	fa10 f30c 	lsls.w	r3, r0, ip
    ca32:	fa20 f002 	lsr.w	r0, r0, r2
    ca36:	bf18      	it	ne
    ca38:	f040 0001 	orrne.w	r0, r0, #1
    ca3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    ca40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    ca44:	fa03 fc0c 	lsl.w	ip, r3, ip
    ca48:	ea40 000c 	orr.w	r0, r0, ip
    ca4c:	fa23 f302 	lsr.w	r3, r3, r2
    ca50:	ea4f 0343 	mov.w	r3, r3, lsl #1
    ca54:	e7cc      	b.n	c9f0 <__aeabi_d2f+0x14>
    ca56:	ea7f 5362 	mvns.w	r3, r2, asr #21
    ca5a:	d107      	bne.n	ca6c <__aeabi_d2f+0x90>
    ca5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    ca60:	bf1e      	ittt	ne
    ca62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    ca66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    ca6a:	4770      	bxne	lr
    ca6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    ca70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    ca74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    ca78:	4770      	bx	lr
    ca7a:	bf00      	nop

0000ca7c <__aeabi_ldivmod>:
    ca7c:	b97b      	cbnz	r3, ca9e <__aeabi_ldivmod+0x22>
    ca7e:	b972      	cbnz	r2, ca9e <__aeabi_ldivmod+0x22>
    ca80:	2900      	cmp	r1, #0
    ca82:	bfbe      	ittt	lt
    ca84:	2000      	movlt	r0, #0
    ca86:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    ca8a:	e006      	blt.n	ca9a <__aeabi_ldivmod+0x1e>
    ca8c:	bf08      	it	eq
    ca8e:	2800      	cmpeq	r0, #0
    ca90:	bf1c      	itt	ne
    ca92:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    ca96:	f04f 30ff 	movne.w	r0, #4294967295
    ca9a:	f000 b9b7 	b.w	ce0c <__aeabi_idiv0>
    ca9e:	f1ad 0c08 	sub.w	ip, sp, #8
    caa2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    caa6:	2900      	cmp	r1, #0
    caa8:	db09      	blt.n	cabe <__aeabi_ldivmod+0x42>
    caaa:	2b00      	cmp	r3, #0
    caac:	db1a      	blt.n	cae4 <__aeabi_ldivmod+0x68>
    caae:	f000 f84d 	bl	cb4c <__udivmoddi4>
    cab2:	f8dd e004 	ldr.w	lr, [sp, #4]
    cab6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    caba:	b004      	add	sp, #16
    cabc:	4770      	bx	lr
    cabe:	4240      	negs	r0, r0
    cac0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cac4:	2b00      	cmp	r3, #0
    cac6:	db1b      	blt.n	cb00 <__aeabi_ldivmod+0x84>
    cac8:	f000 f840 	bl	cb4c <__udivmoddi4>
    cacc:	f8dd e004 	ldr.w	lr, [sp, #4]
    cad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cad4:	b004      	add	sp, #16
    cad6:	4240      	negs	r0, r0
    cad8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cadc:	4252      	negs	r2, r2
    cade:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cae2:	4770      	bx	lr
    cae4:	4252      	negs	r2, r2
    cae6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    caea:	f000 f82f 	bl	cb4c <__udivmoddi4>
    caee:	f8dd e004 	ldr.w	lr, [sp, #4]
    caf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    caf6:	b004      	add	sp, #16
    caf8:	4240      	negs	r0, r0
    cafa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cafe:	4770      	bx	lr
    cb00:	4252      	negs	r2, r2
    cb02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cb06:	f000 f821 	bl	cb4c <__udivmoddi4>
    cb0a:	f8dd e004 	ldr.w	lr, [sp, #4]
    cb0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb12:	b004      	add	sp, #16
    cb14:	4252      	negs	r2, r2
    cb16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cb1a:	4770      	bx	lr

0000cb1c <__aeabi_uldivmod>:
    cb1c:	b953      	cbnz	r3, cb34 <__aeabi_uldivmod+0x18>
    cb1e:	b94a      	cbnz	r2, cb34 <__aeabi_uldivmod+0x18>
    cb20:	2900      	cmp	r1, #0
    cb22:	bf08      	it	eq
    cb24:	2800      	cmpeq	r0, #0
    cb26:	bf1c      	itt	ne
    cb28:	f04f 31ff 	movne.w	r1, #4294967295
    cb2c:	f04f 30ff 	movne.w	r0, #4294967295
    cb30:	f000 b96c 	b.w	ce0c <__aeabi_idiv0>
    cb34:	f1ad 0c08 	sub.w	ip, sp, #8
    cb38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    cb3c:	f000 f806 	bl	cb4c <__udivmoddi4>
    cb40:	f8dd e004 	ldr.w	lr, [sp, #4]
    cb44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb48:	b004      	add	sp, #16
    cb4a:	4770      	bx	lr

0000cb4c <__udivmoddi4>:
    cb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb50:	9d08      	ldr	r5, [sp, #32]
    cb52:	4604      	mov	r4, r0
    cb54:	4688      	mov	r8, r1
    cb56:	2b00      	cmp	r3, #0
    cb58:	d17d      	bne.n	cc56 <__udivmoddi4+0x10a>
    cb5a:	428a      	cmp	r2, r1
    cb5c:	4617      	mov	r7, r2
    cb5e:	d93f      	bls.n	cbe0 <__udivmoddi4+0x94>
    cb60:	fab2 f282 	clz	r2, r2
    cb64:	b142      	cbz	r2, cb78 <__udivmoddi4+0x2c>
    cb66:	f1c2 0020 	rsb	r0, r2, #32
    cb6a:	4091      	lsls	r1, r2
    cb6c:	4097      	lsls	r7, r2
    cb6e:	fa24 f000 	lsr.w	r0, r4, r0
    cb72:	4094      	lsls	r4, r2
    cb74:	ea40 0801 	orr.w	r8, r0, r1
    cb78:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    cb7c:	0c23      	lsrs	r3, r4, #16
    cb7e:	fa1f fe87 	uxth.w	lr, r7
    cb82:	fbb8 f6fc 	udiv	r6, r8, ip
    cb86:	fb0c 8116 	mls	r1, ip, r6, r8
    cb8a:	fb06 f00e 	mul.w	r0, r6, lr
    cb8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    cb92:	4298      	cmp	r0, r3
    cb94:	d905      	bls.n	cba2 <__udivmoddi4+0x56>
    cb96:	18fb      	adds	r3, r7, r3
    cb98:	d202      	bcs.n	cba0 <__udivmoddi4+0x54>
    cb9a:	4298      	cmp	r0, r3
    cb9c:	f200 8124 	bhi.w	cde8 <__udivmoddi4+0x29c>
    cba0:	3e01      	subs	r6, #1
    cba2:	1a19      	subs	r1, r3, r0
    cba4:	b2a3      	uxth	r3, r4
    cba6:	fbb1 f0fc 	udiv	r0, r1, ip
    cbaa:	fb0c 1110 	mls	r1, ip, r0, r1
    cbae:	fb00 fe0e 	mul.w	lr, r0, lr
    cbb2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    cbb6:	45a6      	cmp	lr, r4
    cbb8:	d905      	bls.n	cbc6 <__udivmoddi4+0x7a>
    cbba:	193c      	adds	r4, r7, r4
    cbbc:	d202      	bcs.n	cbc4 <__udivmoddi4+0x78>
    cbbe:	45a6      	cmp	lr, r4
    cbc0:	f200 810f 	bhi.w	cde2 <__udivmoddi4+0x296>
    cbc4:	3801      	subs	r0, #1
    cbc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    cbca:	eba4 040e 	sub.w	r4, r4, lr
    cbce:	2600      	movs	r6, #0
    cbd0:	b11d      	cbz	r5, cbda <__udivmoddi4+0x8e>
    cbd2:	40d4      	lsrs	r4, r2
    cbd4:	2300      	movs	r3, #0
    cbd6:	e9c5 4300 	strd	r4, r3, [r5]
    cbda:	4631      	mov	r1, r6
    cbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cbe0:	b902      	cbnz	r2, cbe4 <__udivmoddi4+0x98>
    cbe2:	deff      	udf	#255	; 0xff
    cbe4:	fab2 f282 	clz	r2, r2
    cbe8:	2a00      	cmp	r2, #0
    cbea:	d150      	bne.n	cc8e <__udivmoddi4+0x142>
    cbec:	1bcb      	subs	r3, r1, r7
    cbee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cbf2:	fa1f f887 	uxth.w	r8, r7
    cbf6:	2601      	movs	r6, #1
    cbf8:	0c21      	lsrs	r1, r4, #16
    cbfa:	fbb3 fcfe 	udiv	ip, r3, lr
    cbfe:	fb0e 301c 	mls	r0, lr, ip, r3
    cc02:	460b      	mov	r3, r1
    cc04:	fb08 f90c 	mul.w	r9, r8, ip
    cc08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cc0c:	4589      	cmp	r9, r1
    cc0e:	d90a      	bls.n	cc26 <__udivmoddi4+0xda>
    cc10:	1879      	adds	r1, r7, r1
    cc12:	bf2c      	ite	cs
    cc14:	2301      	movcs	r3, #1
    cc16:	2300      	movcc	r3, #0
    cc18:	4589      	cmp	r9, r1
    cc1a:	d902      	bls.n	cc22 <__udivmoddi4+0xd6>
    cc1c:	2b00      	cmp	r3, #0
    cc1e:	f000 80d9 	beq.w	cdd4 <__udivmoddi4+0x288>
    cc22:	f10c 3cff 	add.w	ip, ip, #4294967295
    cc26:	eba1 0109 	sub.w	r1, r1, r9
    cc2a:	b2a3      	uxth	r3, r4
    cc2c:	fbb1 f0fe 	udiv	r0, r1, lr
    cc30:	fb0e 1110 	mls	r1, lr, r0, r1
    cc34:	fb08 f800 	mul.w	r8, r8, r0
    cc38:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    cc3c:	45a0      	cmp	r8, r4
    cc3e:	d905      	bls.n	cc4c <__udivmoddi4+0x100>
    cc40:	193c      	adds	r4, r7, r4
    cc42:	d202      	bcs.n	cc4a <__udivmoddi4+0xfe>
    cc44:	45a0      	cmp	r8, r4
    cc46:	f200 80c9 	bhi.w	cddc <__udivmoddi4+0x290>
    cc4a:	3801      	subs	r0, #1
    cc4c:	eba4 0408 	sub.w	r4, r4, r8
    cc50:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    cc54:	e7bc      	b.n	cbd0 <__udivmoddi4+0x84>
    cc56:	428b      	cmp	r3, r1
    cc58:	d909      	bls.n	cc6e <__udivmoddi4+0x122>
    cc5a:	2d00      	cmp	r5, #0
    cc5c:	f000 80b1 	beq.w	cdc2 <__udivmoddi4+0x276>
    cc60:	2600      	movs	r6, #0
    cc62:	e9c5 0100 	strd	r0, r1, [r5]
    cc66:	4630      	mov	r0, r6
    cc68:	4631      	mov	r1, r6
    cc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc6e:	fab3 f683 	clz	r6, r3
    cc72:	2e00      	cmp	r6, #0
    cc74:	d146      	bne.n	cd04 <__udivmoddi4+0x1b8>
    cc76:	428b      	cmp	r3, r1
    cc78:	f0c0 80a6 	bcc.w	cdc8 <__udivmoddi4+0x27c>
    cc7c:	4282      	cmp	r2, r0
    cc7e:	f240 80a3 	bls.w	cdc8 <__udivmoddi4+0x27c>
    cc82:	4630      	mov	r0, r6
    cc84:	2d00      	cmp	r5, #0
    cc86:	d0a8      	beq.n	cbda <__udivmoddi4+0x8e>
    cc88:	e9c5 4800 	strd	r4, r8, [r5]
    cc8c:	e7a5      	b.n	cbda <__udivmoddi4+0x8e>
    cc8e:	4097      	lsls	r7, r2
    cc90:	f1c2 0320 	rsb	r3, r2, #32
    cc94:	fa01 f002 	lsl.w	r0, r1, r2
    cc98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cc9c:	40d9      	lsrs	r1, r3
    cc9e:	fa24 f303 	lsr.w	r3, r4, r3
    cca2:	fa1f f887 	uxth.w	r8, r7
    cca6:	4094      	lsls	r4, r2
    cca8:	4303      	orrs	r3, r0
    ccaa:	fbb1 f0fe 	udiv	r0, r1, lr
    ccae:	0c1e      	lsrs	r6, r3, #16
    ccb0:	fb0e 1110 	mls	r1, lr, r0, r1
    ccb4:	fb00 fc08 	mul.w	ip, r0, r8
    ccb8:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    ccbc:	458c      	cmp	ip, r1
    ccbe:	d909      	bls.n	ccd4 <__udivmoddi4+0x188>
    ccc0:	1879      	adds	r1, r7, r1
    ccc2:	bf2c      	ite	cs
    ccc4:	2601      	movcs	r6, #1
    ccc6:	2600      	movcc	r6, #0
    ccc8:	458c      	cmp	ip, r1
    ccca:	d902      	bls.n	ccd2 <__udivmoddi4+0x186>
    cccc:	2e00      	cmp	r6, #0
    ccce:	f000 8093 	beq.w	cdf8 <__udivmoddi4+0x2ac>
    ccd2:	3801      	subs	r0, #1
    ccd4:	eba1 010c 	sub.w	r1, r1, ip
    ccd8:	b29b      	uxth	r3, r3
    ccda:	fbb1 f6fe 	udiv	r6, r1, lr
    ccde:	fb0e 1116 	mls	r1, lr, r6, r1
    cce2:	fb06 fc08 	mul.w	ip, r6, r8
    cce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    ccea:	458c      	cmp	ip, r1
    ccec:	d905      	bls.n	ccfa <__udivmoddi4+0x1ae>
    ccee:	1879      	adds	r1, r7, r1
    ccf0:	d202      	bcs.n	ccf8 <__udivmoddi4+0x1ac>
    ccf2:	458c      	cmp	ip, r1
    ccf4:	f200 8087 	bhi.w	ce06 <__udivmoddi4+0x2ba>
    ccf8:	3e01      	subs	r6, #1
    ccfa:	eba1 030c 	sub.w	r3, r1, ip
    ccfe:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    cd02:	e779      	b.n	cbf8 <__udivmoddi4+0xac>
    cd04:	f1c6 0720 	rsb	r7, r6, #32
    cd08:	fa03 f406 	lsl.w	r4, r3, r6
    cd0c:	fa02 fc06 	lsl.w	ip, r2, r6
    cd10:	fa01 fe06 	lsl.w	lr, r1, r6
    cd14:	40fa      	lsrs	r2, r7
    cd16:	fa20 f807 	lsr.w	r8, r0, r7
    cd1a:	40f9      	lsrs	r1, r7
    cd1c:	fa00 f306 	lsl.w	r3, r0, r6
    cd20:	4322      	orrs	r2, r4
    cd22:	ea48 040e 	orr.w	r4, r8, lr
    cd26:	ea4f 4812 	mov.w	r8, r2, lsr #16
    cd2a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    cd2e:	fa1f f982 	uxth.w	r9, r2
    cd32:	fbb1 faf8 	udiv	sl, r1, r8
    cd36:	fb08 111a 	mls	r1, r8, sl, r1
    cd3a:	fb0a f009 	mul.w	r0, sl, r9
    cd3e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    cd42:	4570      	cmp	r0, lr
    cd44:	d90a      	bls.n	cd5c <__udivmoddi4+0x210>
    cd46:	eb12 0e0e 	adds.w	lr, r2, lr
    cd4a:	bf2c      	ite	cs
    cd4c:	2101      	movcs	r1, #1
    cd4e:	2100      	movcc	r1, #0
    cd50:	4570      	cmp	r0, lr
    cd52:	d901      	bls.n	cd58 <__udivmoddi4+0x20c>
    cd54:	2900      	cmp	r1, #0
    cd56:	d052      	beq.n	cdfe <__udivmoddi4+0x2b2>
    cd58:	f10a 3aff 	add.w	sl, sl, #4294967295
    cd5c:	ebae 0e00 	sub.w	lr, lr, r0
    cd60:	b2a4      	uxth	r4, r4
    cd62:	fbbe f0f8 	udiv	r0, lr, r8
    cd66:	fb08 ee10 	mls	lr, r8, r0, lr
    cd6a:	fb00 f909 	mul.w	r9, r0, r9
    cd6e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
    cd72:	45f1      	cmp	r9, lr
    cd74:	d905      	bls.n	cd82 <__udivmoddi4+0x236>
    cd76:	eb12 0e0e 	adds.w	lr, r2, lr
    cd7a:	d201      	bcs.n	cd80 <__udivmoddi4+0x234>
    cd7c:	45f1      	cmp	r9, lr
    cd7e:	d838      	bhi.n	cdf2 <__udivmoddi4+0x2a6>
    cd80:	3801      	subs	r0, #1
    cd82:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    cd86:	ebae 0e09 	sub.w	lr, lr, r9
    cd8a:	fba0 890c 	umull	r8, r9, r0, ip
    cd8e:	45ce      	cmp	lr, r9
    cd90:	4641      	mov	r1, r8
    cd92:	464c      	mov	r4, r9
    cd94:	d302      	bcc.n	cd9c <__udivmoddi4+0x250>
    cd96:	d106      	bne.n	cda6 <__udivmoddi4+0x25a>
    cd98:	4543      	cmp	r3, r8
    cd9a:	d204      	bcs.n	cda6 <__udivmoddi4+0x25a>
    cd9c:	3801      	subs	r0, #1
    cd9e:	ebb8 010c 	subs.w	r1, r8, ip
    cda2:	eb69 0402 	sbc.w	r4, r9, r2
    cda6:	b315      	cbz	r5, cdee <__udivmoddi4+0x2a2>
    cda8:	1a5a      	subs	r2, r3, r1
    cdaa:	eb6e 0e04 	sbc.w	lr, lr, r4
    cdae:	40f2      	lsrs	r2, r6
    cdb0:	fa0e f707 	lsl.w	r7, lr, r7
    cdb4:	fa2e f306 	lsr.w	r3, lr, r6
    cdb8:	2600      	movs	r6, #0
    cdba:	4317      	orrs	r7, r2
    cdbc:	e9c5 7300 	strd	r7, r3, [r5]
    cdc0:	e70b      	b.n	cbda <__udivmoddi4+0x8e>
    cdc2:	462e      	mov	r6, r5
    cdc4:	4628      	mov	r0, r5
    cdc6:	e708      	b.n	cbda <__udivmoddi4+0x8e>
    cdc8:	1a84      	subs	r4, r0, r2
    cdca:	eb61 0103 	sbc.w	r1, r1, r3
    cdce:	2001      	movs	r0, #1
    cdd0:	4688      	mov	r8, r1
    cdd2:	e757      	b.n	cc84 <__udivmoddi4+0x138>
    cdd4:	f1ac 0c02 	sub.w	ip, ip, #2
    cdd8:	4439      	add	r1, r7
    cdda:	e724      	b.n	cc26 <__udivmoddi4+0xda>
    cddc:	3802      	subs	r0, #2
    cdde:	443c      	add	r4, r7
    cde0:	e734      	b.n	cc4c <__udivmoddi4+0x100>
    cde2:	3802      	subs	r0, #2
    cde4:	443c      	add	r4, r7
    cde6:	e6ee      	b.n	cbc6 <__udivmoddi4+0x7a>
    cde8:	3e02      	subs	r6, #2
    cdea:	443b      	add	r3, r7
    cdec:	e6d9      	b.n	cba2 <__udivmoddi4+0x56>
    cdee:	462e      	mov	r6, r5
    cdf0:	e6f3      	b.n	cbda <__udivmoddi4+0x8e>
    cdf2:	3802      	subs	r0, #2
    cdf4:	4496      	add	lr, r2
    cdf6:	e7c4      	b.n	cd82 <__udivmoddi4+0x236>
    cdf8:	3802      	subs	r0, #2
    cdfa:	4439      	add	r1, r7
    cdfc:	e76a      	b.n	ccd4 <__udivmoddi4+0x188>
    cdfe:	f1aa 0a02 	sub.w	sl, sl, #2
    ce02:	4496      	add	lr, r2
    ce04:	e7aa      	b.n	cd5c <__udivmoddi4+0x210>
    ce06:	3e02      	subs	r6, #2
    ce08:	4439      	add	r1, r7
    ce0a:	e776      	b.n	ccfa <__udivmoddi4+0x1ae>

0000ce0c <__aeabi_idiv0>:
    ce0c:	4770      	bx	lr
    ce0e:	bf00      	nop

0000ce10 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
    ce10:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    ce14:	4604      	mov	r4, r0
    ce16:	b09a      	sub	sp, #104	; 0x68
    ce18:	460f      	mov	r7, r1
    ce1a:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
    ce1c:	2100      	movs	r1, #0
    ce1e:	2230      	movs	r2, #48	; 0x30
    ce20:	a802      	add	r0, sp, #8
    ce22:	f00b f886 	bl	17f32 <memset>
	int ret = 0;

	if (!ctx || !time) {
    ce26:	2c00      	cmp	r4, #0
    ce28:	f000 8087 	beq.w	cf3a <sntp_query+0x12a>
    ce2c:	2e00      	cmp	r6, #0
    ce2e:	f000 8084 	beq.w	cf3a <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
    ce32:	231b      	movs	r3, #27
    ce34:	f88d 3008 	strb.w	r3, [sp, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    ce38:	f00d fca5 	bl	1a786 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    ce3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    ce40:	2500      	movs	r5, #0
    ce42:	fba0 bc03 	umull	fp, ip, r0, r3
    ce46:	fb03 cc01 	mla	ip, r3, r1, ip
    ce4a:	ea4f 30db 	mov.w	r0, fp, lsr #15
	return time / MSEC_PER_SEC;
    ce4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ce52:	2300      	movs	r3, #0
    ce54:	4629      	mov	r1, r5
    ce56:	ea40 404c 	orr.w	r0, r0, ip, lsl #17
    ce5a:	f7ff fe5f 	bl	cb1c <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
    ce5e:	4a3c      	ldr	r2, [pc, #240]	; (cf50 <sntp_query+0x140>)
    ce60:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    ce62:	0a13      	lsrs	r3, r2, #8
    ce64:	0211      	lsls	r1, r2, #8
    ce66:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    ce6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    ce6e:	430b      	orrs	r3, r1
    ce70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    ce74:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
    ce78:	68e0      	ldr	r0, [r4, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
    ce7a:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    ce7c:	930c      	str	r3, [sp, #48]	; 0x30
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    ce7e:	2230      	movs	r2, #48	; 0x30
    ce80:	462b      	mov	r3, r5
    ce82:	e9cd 5500 	strd	r5, r5, [sp]
    ce86:	a902      	add	r1, sp, #8
    ce88:	f00a fd7e 	bl	17988 <z_impl_zsock_sendto>
	if (ret < 0) {
    ce8c:	2800      	cmp	r0, #0
    ce8e:	db0f      	blt.n	ceb0 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
    ce90:	4629      	mov	r1, r5
    ce92:	2230      	movs	r2, #48	; 0x30
    ce94:	a80e      	add	r0, sp, #56	; 0x38
    ce96:	f00b f84c 	bl	17f32 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
    ce9a:	68a1      	ldr	r1, [r4, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
    ce9c:	463a      	mov	r2, r7
    ce9e:	4620      	mov	r0, r4
    cea0:	f001 fbc8 	bl	e634 <z_impl_zsock_poll>
	if (status < 0) {
    cea4:	42a8      	cmp	r0, r5
    cea6:	da06      	bge.n	ceb6 <sntp_query+0xa6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    cea8:	f008 fe96 	bl	15bd8 <z_impl_z_errno>
		return -errno;
    ceac:	6800      	ldr	r0, [r0, #0]
    ceae:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
    ceb0:	b01a      	add	sp, #104	; 0x68
    ceb2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	if (status == 0) {
    ceb6:	d037      	beq.n	cf28 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
    ceb8:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
    ceba:	2230      	movs	r2, #48	; 0x30
    cebc:	462b      	mov	r3, r5
    cebe:	e9cd 5500 	strd	r5, r5, [sp]
    cec2:	a90e      	add	r1, sp, #56	; 0x38
    cec4:	f00a fd7d 	bl	179c2 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
    cec8:	2800      	cmp	r0, #0
    ceca:	dbed      	blt.n	cea8 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
    cecc:	2830      	cmp	r0, #48	; 0x30
    cece:	d12e      	bne.n	cf2e <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
    ced0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ced2:	6922      	ldr	r2, [r4, #16]
    ced4:	ba1b      	rev	r3, r3
    ced6:	429a      	cmp	r2, r3
    ced8:	d002      	beq.n	cee0 <sntp_query+0xd0>
		return -EINVAL;
    ceda:	f06f 0015 	mvn.w	r0, #21
    cede:	e7e7      	b.n	ceb0 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
    cee0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    cee4:	f003 0307 	and.w	r3, r3, #7
    cee8:	2b04      	cmp	r3, #4
    ceea:	d1f6      	bne.n	ceda <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
    ceec:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    cef0:	b303      	cbz	r3, cf34 <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
    cef2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    cef4:	9a19      	ldr	r2, [sp, #100]	; 0x64
    cef6:	ba1b      	rev	r3, r3
    cef8:	ba12      	rev	r2, r2
    cefa:	ea53 0102 	orrs.w	r1, r3, r2
    cefe:	d0ec      	beq.n	ceda <sntp_query+0xca>
	if (ts & 0x80000000) {
    cf00:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
    cf02:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
    cf04:	da0c      	bge.n	cf20 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
    cf06:	4a13      	ldr	r2, [pc, #76]	; (cf54 <sntp_query+0x144>)
    cf08:	4293      	cmp	r3, r2
    cf0a:	d9e6      	bls.n	ceda <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
    cf0c:	a10c      	add	r1, pc, #48	; (adr r1, cf40 <sntp_query+0x130>)
    cf0e:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
    cf12:	18c0      	adds	r0, r0, r3
    cf14:	f141 0100 	adc.w	r1, r1, #0
    cf18:	e9c6 0100 	strd	r0, r1, [r6]
	return 0;
    cf1c:	2000      	movs	r0, #0
    cf1e:	e7c7      	b.n	ceb0 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
    cf20:	a109      	add	r1, pc, #36	; (adr r1, cf48 <sntp_query+0x138>)
    cf22:	e9d1 0100 	ldrd	r0, r1, [r1]
    cf26:	e7f4      	b.n	cf12 <sntp_query+0x102>
		return -ETIMEDOUT;
    cf28:	f06f 003b 	mvn.w	r0, #59	; 0x3b
    cf2c:	e7c0      	b.n	ceb0 <sntp_query+0xa0>
		return -EMSGSIZE;
    cf2e:	f06f 0023 	mvn.w	r0, #35	; 0x23
    cf32:	e7bd      	b.n	ceb0 <sntp_query+0xa0>
		return -EBUSY;
    cf34:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
    cf38:	e7ba      	b.n	ceb0 <sntp_query+0xa0>
		return -EFAULT;
    cf3a:	f06f 000d 	mvn.w	r0, #13
    cf3e:	e7b7      	b.n	ceb0 <sntp_query+0xa0>
    cf40:	7c558180 	.word	0x7c558180
    cf44:	ffffffff 	.word	0xffffffff
    cf48:	7c558180 	.word	0x7c558180
    cf4c:	00000000 	.word	0x00000000
    cf50:	83aa7e80 	.word	0x83aa7e80
    cf54:	83aa7e7f 	.word	0x83aa7e7f

0000cf58 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
    cf58:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf5a:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
    cf5e:	460e      	mov	r6, r1
{
    cf60:	b08d      	sub	sp, #52	; 0x34
	if (response == NULL) {
    cf62:	2900      	cmp	r1, #0
    cf64:	d06e      	beq.n	d044 <at_handler+0xec>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    cf66:	2500      	movs	r5, #0
    cf68:	4ca5      	ldr	r4, [pc, #660]	; (d200 <at_handler+0x2a8>)
		if (strncmp(at_notifs[i], notif,
    cf6a:	f854 7b04 	ldr.w	r7, [r4], #4
    cf6e:	4638      	mov	r0, r7
    cf70:	f00a ff79 	bl	17e66 <strlen>
    cf74:	4631      	mov	r1, r6
    cf76:	4602      	mov	r2, r0
    cf78:	4638      	mov	r0, r7
    cf7a:	f00a ff90 	bl	17e9e <strncmp>
    cf7e:	2800      	cmp	r0, #0
    cf80:	d15d      	bne.n	d03e <at_handler+0xe6>
	/* Only proceed with parsing if notification is relevant */
	if (!is_relevant_notif(response, &notif_type)) {
		return;
	}

	switch (notif_type) {
    cf82:	2d01      	cmp	r5, #1
			*type = i;
    cf84:	b2eb      	uxtb	r3, r5
	switch (notif_type) {
    cf86:	f000 80bd 	beq.w	d104 <at_handler+0x1ac>
    cf8a:	2b02      	cmp	r3, #2
    cf8c:	f000 80e5 	beq.w	d15a <at_handler+0x202>
	size_t len = sizeof(str_buf) - 1;
    cf90:	2709      	movs	r7, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    cf92:	210a      	movs	r1, #10
    cf94:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
    cf96:	9702      	str	r7, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    cf98:	f00b fcdf 	bl	1895a <at_params_list_init>
	if (err) {
    cf9c:	4604      	mov	r4, r0
    cf9e:	2800      	cmp	r0, #0
    cfa0:	d150      	bne.n	d044 <at_handler+0xec>
	err = at_parser_params_from_str(notification,
    cfa2:	4601      	mov	r1, r0
    cfa4:	aa07      	add	r2, sp, #28
    cfa6:	4630      	mov	r0, r6
    cfa8:	f00b fcaf 	bl	1890a <at_parser_params_from_str>
	if (err) {
    cfac:	4605      	mov	r5, r0
    cfae:	2800      	cmp	r0, #0
    cfb0:	d155      	bne.n	d05e <at_handler+0x106>
	err = at_params_int_get(&resp_list,
    cfb2:	2101      	movs	r1, #1
    cfb4:	aa01      	add	r2, sp, #4
    cfb6:	a807      	add	r0, sp, #28
    cfb8:	f00b fd89 	bl	18ace <at_params_int_get>
	if (err) {
    cfbc:	4605      	mov	r5, r0
    cfbe:	2800      	cmp	r0, #0
    cfc0:	d14d      	bne.n	d05e <at_handler+0x106>
	*reg_status = status;
    cfc2:	f89d 4004 	ldrb.w	r4, [sp, #4]
	if ((*reg_status != LTE_LC_NW_REG_UICC_FAIL) &&
    cfc6:	2c5a      	cmp	r4, #90	; 0x5a
    cfc8:	d040      	beq.n	d04c <at_handler+0xf4>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
    cfca:	a807      	add	r0, sp, #28
    cfcc:	f00b fdb5 	bl	18b3a <at_params_valid_count_get>
	if ((*reg_status != LTE_LC_NW_REG_UICC_FAIL) &&
    cfd0:	2803      	cmp	r0, #3
    cfd2:	d93b      	bls.n	d04c <at_handler+0xf4>
		err = at_params_string_get(&resp_list,
    cfd4:	2102      	movs	r1, #2
    cfd6:	ab02      	add	r3, sp, #8
    cfd8:	aa09      	add	r2, sp, #36	; 0x24
    cfda:	a807      	add	r0, sp, #28
    cfdc:	f00b fd8a 	bl	18af4 <at_params_string_get>
		if (err) {
    cfe0:	bb58      	cbnz	r0, d03a <at_handler+0xe2>
		str_buf[len] = '\0';
    cfe2:	9b02      	ldr	r3, [sp, #8]
    cfe4:	aa0c      	add	r2, sp, #48	; 0x30
    cfe6:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
    cfe8:	4629      	mov	r1, r5
    cfea:	2210      	movs	r2, #16
    cfec:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    cfee:	f803 5c0c 	strb.w	r5, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
    cff2:	f00a fe7e 	bl	17cf2 <strtoul>
		err = at_params_string_get(&resp_list,
    cff6:	2103      	movs	r1, #3
		cell->tac = strtoul(str_buf, NULL, 16);
    cff8:	9004      	str	r0, [sp, #16]
		err = at_params_string_get(&resp_list,
    cffa:	ab02      	add	r3, sp, #8
    cffc:	aa09      	add	r2, sp, #36	; 0x24
    cffe:	a807      	add	r0, sp, #28
		len = sizeof(str_buf) - 1;
    d000:	9702      	str	r7, [sp, #8]
		err = at_params_string_get(&resp_list,
    d002:	f00b fd77 	bl	18af4 <at_params_string_get>
		if (err) {
    d006:	b9c0      	cbnz	r0, d03a <at_handler+0xe2>
		str_buf[len] = '\0';
    d008:	2100      	movs	r1, #0
    d00a:	9b02      	ldr	r3, [sp, #8]
    d00c:	aa0c      	add	r2, sp, #48	; 0x30
    d00e:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
    d010:	a809      	add	r0, sp, #36	; 0x24
    d012:	2210      	movs	r2, #16
		str_buf[len] = '\0';
    d014:	f803 1c0c 	strb.w	r1, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
    d018:	f00a fe6b 	bl	17cf2 <strtoul>
    d01c:	9003      	str	r0, [sp, #12]
	if (((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d01e:	f004 06fb 	and.w	r6, r4, #251	; 0xfb
    d022:	2e01      	cmp	r6, #1
    d024:	d117      	bne.n	d056 <at_handler+0xfe>
	     (at_params_valid_count_get(&resp_list) > AT_CEREG_TAU_INDEX)) {
    d026:	a807      	add	r0, sp, #28
    d028:	f00b fd87 	bl	18b3a <at_params_valid_count_get>
	    (*reg_status == LTE_LC_NW_REG_REGISTERED_ROAMING)) &&
    d02c:	2808      	cmp	r0, #8
    d02e:	d912      	bls.n	d056 <at_handler+0xfe>
		err = parse_psm_cfg(&resp_list, true, psm_cfg);
    d030:	4631      	mov	r1, r6
    d032:	aa05      	add	r2, sp, #20
    d034:	a807      	add	r0, sp, #28
    d036:	f004 fc07 	bl	11848 <parse_psm_cfg>
    d03a:	4605      	mov	r5, r0
    d03c:	e00f      	b.n	d05e <at_handler+0x106>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d03e:	3501      	adds	r5, #1
    d040:	2d03      	cmp	r5, #3
    d042:	d192      	bne.n	cf6a <at_handler+0x12>
	}

	if (evt_handler && notify) {
		evt_handler(&evt);
	}
}
    d044:	b00d      	add	sp, #52	; 0x34
    d046:	ecbd 8b02 	vpop	{d8}
    d04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cell->tac = UINT32_MAX;
    d04c:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = UINT32_MAX;
    d050:	e9cd 3303 	strd	r3, r3, [sp, #12]
    d054:	e7e3      	b.n	d01e <at_handler+0xc6>
		psm_cfg->tau = -1;
    d056:	f04f 33ff 	mov.w	r3, #4294967295
		psm_cfg->active_time = -1;
    d05a:	e9cd 3305 	strd	r3, r3, [sp, #20]
	at_params_list_free(&resp_list);
    d05e:	a807      	add	r0, sp, #28
    d060:	f00b fca7 	bl	189b2 <at_params_list_free>
		if (err) {
    d064:	2d00      	cmp	r5, #0
    d066:	d1ed      	bne.n	d044 <at_handler+0xec>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d068:	f004 06fb 	and.w	r6, r4, #251	; 0xfb
    d06c:	2e01      	cmp	r6, #1
    d06e:	d102      	bne.n	d076 <at_handler+0x11e>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d070:	4864      	ldr	r0, [pc, #400]	; (d204 <at_handler+0x2ac>)
    d072:	f009 fbe1 	bl	16838 <z_impl_k_sem_give>
		if (!evt_handler) {
    d076:	4d64      	ldr	r5, [pc, #400]	; (d208 <at_handler+0x2b0>)
    d078:	682b      	ldr	r3, [r5, #0]
    d07a:	2b00      	cmp	r3, #0
    d07c:	d0e2      	beq.n	d044 <at_handler+0xec>
		if (reg_status != prev_reg_status) {
    d07e:	4a63      	ldr	r2, [pc, #396]	; (d20c <at_handler+0x2b4>)
    d080:	7811      	ldrb	r1, [r2, #0]
    d082:	42a1      	cmp	r1, r4
    d084:	d007      	beq.n	d096 <at_handler+0x13e>
			prev_reg_status = reg_status;
    d086:	7014      	strb	r4, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d088:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
    d08a:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d08e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			evt_handler(&evt);
    d092:	a809      	add	r0, sp, #36	; 0x24
    d094:	4798      	blx	r3
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
    d096:	2208      	movs	r2, #8
    d098:	495d      	ldr	r1, [pc, #372]	; (d210 <at_handler+0x2b8>)
    d09a:	a803      	add	r0, sp, #12
    d09c:	f00a ff0e 	bl	17ebc <memcmp>
    d0a0:	b178      	cbz	r0, d0c2 <at_handler+0x16a>
			evt.type = LTE_LC_EVT_CELL_UPDATE;
    d0a2:	2304      	movs	r3, #4
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    d0a4:	2208      	movs	r2, #8
    d0a6:	a903      	add	r1, sp, #12
    d0a8:	4859      	ldr	r0, [pc, #356]	; (d210 <at_handler+0x2b8>)
			evt.type = LTE_LC_EVT_CELL_UPDATE;
    d0aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    d0ae:	f00a ff15 	bl	17edc <memcpy>
			memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
    d0b2:	2208      	movs	r2, #8
    d0b4:	a903      	add	r1, sp, #12
    d0b6:	a80a      	add	r0, sp, #40	; 0x28
    d0b8:	f00a ff10 	bl	17edc <memcpy>
			evt_handler(&evt);
    d0bc:	682b      	ldr	r3, [r5, #0]
    d0be:	a809      	add	r0, sp, #36	; 0x24
    d0c0:	4798      	blx	r3
		if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
    d0c2:	2e01      	cmp	r6, #1
    d0c4:	d1be      	bne.n	d044 <at_handler+0xec>
		if (memcmp(&psm_cfg, &prev_psm_cfg,
    d0c6:	2208      	movs	r2, #8
    d0c8:	4952      	ldr	r1, [pc, #328]	; (d214 <at_handler+0x2bc>)
    d0ca:	a805      	add	r0, sp, #20
    d0cc:	f00a fef6 	bl	17ebc <memcmp>
    d0d0:	b170      	cbz	r0, d0f0 <at_handler+0x198>
			memcpy(&prev_psm_cfg, &psm_cfg,
    d0d2:	2208      	movs	r2, #8
    d0d4:	a905      	add	r1, sp, #20
    d0d6:	484f      	ldr	r0, [pc, #316]	; (d214 <at_handler+0x2bc>)
			evt.type = LTE_LC_EVT_PSM_UPDATE;
    d0d8:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
			memcpy(&prev_psm_cfg, &psm_cfg,
    d0dc:	f00a fefe 	bl	17edc <memcpy>
			memcpy(&evt.psm_cfg, &psm_cfg,
    d0e0:	2208      	movs	r2, #8
    d0e2:	a905      	add	r1, sp, #20
    d0e4:	a80a      	add	r0, sp, #40	; 0x28
    d0e6:	f00a fef9 	bl	17edc <memcpy>
			evt_handler(&evt);
    d0ea:	682b      	ldr	r3, [r5, #0]
    d0ec:	a809      	add	r0, sp, #36	; 0x24
    d0ee:	4798      	blx	r3
	bool notify = false;
    d0f0:	2300      	movs	r3, #0
	if (evt_handler && notify) {
    d0f2:	4a45      	ldr	r2, [pc, #276]	; (d208 <at_handler+0x2b0>)
    d0f4:	6812      	ldr	r2, [r2, #0]
    d0f6:	2a00      	cmp	r2, #0
    d0f8:	d0a4      	beq.n	d044 <at_handler+0xec>
    d0fa:	2b00      	cmp	r3, #0
    d0fc:	d0a2      	beq.n	d044 <at_handler+0xec>
		evt_handler(&evt);
    d0fe:	a809      	add	r0, sp, #36	; 0x24
    d100:	4790      	blx	r2
    d102:	e79f      	b.n	d044 <at_handler+0xec>
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
    d104:	2104      	movs	r1, #4
	struct at_param_list resp_list = {0};
    d106:	e9cd 0007 	strd	r0, r0, [sp, #28]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
    d10a:	a807      	add	r0, sp, #28
    d10c:	f00b fc25 	bl	1895a <at_params_list_init>
	if (err) {
    d110:	4601      	mov	r1, r0
    d112:	2800      	cmp	r0, #0
    d114:	d196      	bne.n	d044 <at_handler+0xec>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d116:	4630      	mov	r0, r6
    d118:	aa07      	add	r2, sp, #28
    d11a:	f00b fbf6 	bl	1890a <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d11e:	4604      	mov	r4, r0
    d120:	b950      	cbnz	r0, d138 <at_handler+0x1e0>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
		goto clean_exit;
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
    d122:	4629      	mov	r1, r5
    d124:	aa05      	add	r2, sp, #20
    d126:	a807      	add	r0, sp, #28
    d128:	f00b fcd1 	bl	18ace <at_params_int_get>
	if (err) {
    d12c:	4604      	mov	r4, r0
    d12e:	b918      	cbnz	r0, d138 <at_handler+0x1e0>
		LOG_ERR("Could not get signalling mode, error: %d", err);
		goto clean_exit;
	}

	/* Check if the parsed value maps to a valid registration status */
	if (temp_mode == 0) {
    d130:	9b05      	ldr	r3, [sp, #20]
    d132:	b95b      	cbnz	r3, d14c <at_handler+0x1f4>
		*mode = LTE_LC_RRC_MODE_IDLE;
    d134:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
    d138:	a807      	add	r0, sp, #28
    d13a:	f00b fc3a 	bl	189b2 <at_params_list_free>
		if (err) {
    d13e:	2c00      	cmp	r4, #0
    d140:	d180      	bne.n	d044 <at_handler+0xec>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
    d142:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d144:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
    d148:	2301      	movs	r3, #1
		break;
    d14a:	e7d2      	b.n	d0f2 <at_handler+0x19a>
	} else if (temp_mode == 1) {
    d14c:	2b01      	cmp	r3, #1
		err = -EINVAL;
    d14e:	bf14      	ite	ne
    d150:	f06f 0415 	mvnne.w	r4, #21
		*mode = LTE_LC_RRC_MODE_CONNECTED;
    d154:	f88d 5028 	strbeq.w	r5, [sp, #40]	; 0x28
    d158:	e7ee      	b.n	d138 <at_handler+0x1e0>
{
	int err;
	uint8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    d15a:	2304      	movs	r3, #4
	switch (sys_mode_current) {
    d15c:	4d2e      	ldr	r5, [pc, #184]	; (d218 <at_handler+0x2c0>)
	size_t len = sizeof(tmp_buf) - 1;
    d15e:	9303      	str	r3, [sp, #12]
    d160:	782b      	ldrb	r3, [r5, #0]
	struct at_param_list resp_list = {0};
    d162:	e9cd 0007 	strd	r0, r0, [sp, #28]
	switch (sys_mode_current) {
    d166:	3b01      	subs	r3, #1
    d168:	2b04      	cmp	r3, #4
    d16a:	f63f af6b 	bhi.w	d044 <at_handler+0xec>
    d16e:	a201      	add	r2, pc, #4	; (adr r2, d174 <at_handler+0x21c>)
    d170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d174:	0000d189 	.word	0x0000d189
    d178:	0000d1e7 	.word	0x0000d1e7
    d17c:	0000d045 	.word	0x0000d045
    d180:	0000d189 	.word	0x0000d189
    d184:	0000d1e7 	.word	0x0000d1e7
    d188:	ed9f 8a24 	vldr	s16, [pc, #144]	; d21c <at_handler+0x2c4>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    d18c:	2105      	movs	r1, #5
    d18e:	a807      	add	r0, sp, #28
    d190:	f00b fbe3 	bl	1895a <at_params_list_init>
	if (err) {
    d194:	4601      	mov	r1, r0
    d196:	2800      	cmp	r0, #0
    d198:	f47f af54 	bne.w	d044 <at_handler+0xec>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d19c:	4630      	mov	r0, r6
    d19e:	aa07      	add	r2, sp, #28
    d1a0:	f00b fbb3 	bl	1890a <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d1a4:	4604      	mov	r4, r0
    d1a6:	b9b0      	cbnz	r0, d1d6 <at_handler+0x27e>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
		goto clean_exit;
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    d1a8:	2103      	movs	r1, #3
    d1aa:	ab03      	add	r3, sp, #12
    d1ac:	aa05      	add	r2, sp, #20
    d1ae:	a807      	add	r0, sp, #28
    d1b0:	f00b fca0 	bl	18af4 <at_params_string_get>
				   tmp_buf, &len);
	if (err) {
    d1b4:	4604      	mov	r4, r0
    d1b6:	b970      	cbnz	r0, d1d6 <at_handler+0x27e>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
		goto clean_exit;
	}

	tmp_buf[len] = '\0';
    d1b8:	9b03      	ldr	r3, [sp, #12]
    d1ba:	aa0c      	add	r2, sp, #48	; 0x30
    d1bc:	4413      	add	r3, r2
	 * special case of idx == 0 for LTE-M, where the value is 5.12 seconds.
	 * The variable idx is used to map to the entry of index idx in
	 * Figure 10.5.5.32/3GPP TS 24.008, table for eDRX in S1 mode, and
	 * note 4 and 5 are taken into account.
	 */
	idx = strtoul(tmp_buf, NULL, 2);
    d1be:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d1c0:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d1c4:	2202      	movs	r2, #2
    d1c6:	a805      	add	r0, sp, #20
    d1c8:	f00a fd93 	bl	17cf2 <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    d1cc:	b2c0      	uxtb	r0, r0
    d1ce:	280f      	cmp	r0, #15
    d1d0:	d90c      	bls.n	d1ec <at_handler+0x294>
		return -EINVAL;
    d1d2:	f06f 0415 	mvn.w	r4, #21
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
    d1d6:	a807      	add	r0, sp, #28
    d1d8:	f00b fbeb 	bl	189b2 <at_params_list_free>
		if (err) {
    d1dc:	2c00      	cmp	r4, #0
    d1de:	f47f af31 	bne.w	d044 <at_handler+0xec>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d1e2:	2302      	movs	r3, #2
    d1e4:	e7ae      	b.n	d144 <at_handler+0x1ec>
		*ptw_multiplier = 2.56;
    d1e6:	ed9f 8a0e 	vldr	s16, [pc, #56]	; d220 <at_handler+0x2c8>
    d1ea:	e7cf      	b.n	d18c <at_handler+0x234>
	switch (sys_mode_current) {
    d1ec:	782b      	ldrb	r3, [r5, #0]
    d1ee:	3b01      	subs	r3, #1
    d1f0:	2b04      	cmp	r3, #4
    d1f2:	d84b      	bhi.n	d28c <at_handler+0x334>
    d1f4:	e8df f003 	tbb	[pc, r3]
    d1f8:	164a4616 	.word	0x164a4616
    d1fc:	46          	.byte	0x46
    d1fd:	00          	.byte	0x00
    d1fe:	bf00      	nop
    d200:	0001af34 	.word	0x0001af34
    d204:	2001509c 	.word	0x2001509c
    d208:	20015098 	.word	0x20015098
    d20c:	20017799 	.word	0x20017799
    d210:	200150b4 	.word	0x200150b4
    d214:	200150bc 	.word	0x200150bc
    d218:	2001779a 	.word	0x2001779a
    d21c:	3fa3d70a 	.word	0x3fa3d70a
    d220:	4023d70a 	.word	0x4023d70a
		multiplier = edrx_lookup_ltem[idx];
    d224:	4b1e      	ldr	r3, [pc, #120]	; (d2a0 <at_handler+0x348>)
		multiplier = edrx_lookup_nbiot[idx];
    d226:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d22a:	b368      	cbz	r0, d288 <at_handler+0x330>
    d22c:	f7ff f95a 	bl	c4e4 <__aeabi_i2d>
    d230:	a319      	add	r3, pc, #100	; (adr r3, d298 <at_handler+0x340>)
    d232:	e9d3 2300 	ldrd	r2, r3, [r3]
    d236:	f7ff f9bf 	bl	c5b8 <__aeabi_dmul>
    d23a:	f7ff fbcf 	bl	c9dc <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    d23e:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d240:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d242:	ab03      	add	r3, sp, #12
    d244:	aa05      	add	r2, sp, #20
    d246:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
    d248:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d24a:	f00b fc53 	bl	18af4 <at_params_string_get>
	if (err) {
    d24e:	4604      	mov	r4, r0
    d250:	2800      	cmp	r0, #0
    d252:	d1c0      	bne.n	d1d6 <at_handler+0x27e>
	tmp_buf[len] = '\0';
    d254:	9b03      	ldr	r3, [sp, #12]
    d256:	aa0c      	add	r2, sp, #48	; 0x30
    d258:	4413      	add	r3, r2
    d25a:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d25e:	4601      	mov	r1, r0
    d260:	2202      	movs	r2, #2
    d262:	a805      	add	r0, sp, #20
    d264:	f00a fd45 	bl	17cf2 <strtoul>
	if (idx > 15) {
    d268:	b2c3      	uxtb	r3, r0
    d26a:	2b0f      	cmp	r3, #15
    d26c:	d8b1      	bhi.n	d1d2 <at_handler+0x27a>
	idx += 1;
    d26e:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    d270:	b2c0      	uxtb	r0, r0
    d272:	ee07 0a90 	vmov	s15, r0
    d276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d27a:	ee67 7a88 	vmul.f32	s15, s15, s16
    d27e:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
clean_exit:
    d282:	e7a8      	b.n	d1d6 <at_handler+0x27e>
		multiplier = edrx_lookup_nbiot[idx];
    d284:	4b07      	ldr	r3, [pc, #28]	; (d2a4 <at_handler+0x34c>)
    d286:	e7ce      	b.n	d226 <at_handler+0x2ce>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d288:	4807      	ldr	r0, [pc, #28]	; (d2a8 <at_handler+0x350>)
    d28a:	e7d8      	b.n	d23e <at_handler+0x2e6>
	switch (sys_mode_current) {
    d28c:	f06f 0438 	mvn.w	r4, #56	; 0x38
    d290:	e7a1      	b.n	d1d6 <at_handler+0x27e>
    d292:	bf00      	nop
    d294:	f3af 8000 	nop.w
    d298:	47ae147b 	.word	0x47ae147b
    d29c:	40247ae1 	.word	0x40247ae1
    d2a0:	0001b178 	.word	0x0001b178
    d2a4:	0001b198 	.word	0x0001b198
    d2a8:	40a3d70a 	.word	0x40a3d70a

0000d2ac <lte_handler>:
K_SEM_DEFINE(lte_connected, 0, 1);

uint8_t connection_status = 0;

static void lte_handler(const struct lte_lc_evt *const evt)
{
    d2ac:	b508      	push	{r3, lr}
     switch (evt->type) {
    d2ae:	7803      	ldrb	r3, [r0, #0]
    d2b0:	b993      	cbnz	r3, d2d8 <lte_handler+0x2c>
     case LTE_LC_EVT_NW_REG_STATUS:
             if (evt->nw_reg_status == LTE_LC_NW_REG_REGISTERED_ROAMING) {
    d2b2:	7903      	ldrb	r3, [r0, #4]
    d2b4:	2b05      	cmp	r3, #5
    d2b6:	d109      	bne.n	d2cc <lte_handler+0x20>
                      connection_status = 5;//variable del estado conectado a true
    d2b8:	4a08      	ldr	r2, [pc, #32]	; (d2dc <lte_handler+0x30>)
                      printk("Estado de conexion cambiado a CONECTADO \n");
    d2ba:	4809      	ldr	r0, [pc, #36]	; (d2e0 <lte_handler+0x34>)
                      connection_status = 5;//variable del estado conectado a true
    d2bc:	7013      	strb	r3, [r2, #0]
             }
             else if(evt->nw_reg_status == LTE_LC_NW_REG_NOT_REGISTERED){
                      connection_status = 0;//variable del estado conectado a true
                      printk("Estado de conexion SIN CONEXION \n");
    d2be:	f009 fec9 	bl	17054 <printk>
             break;
     
     default:
             break;
     }
}
    d2c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d2c6:	4807      	ldr	r0, [pc, #28]	; (d2e4 <lte_handler+0x38>)
    d2c8:	f009 bab6 	b.w	16838 <z_impl_k_sem_give>
             else if(evt->nw_reg_status == LTE_LC_NW_REG_NOT_REGISTERED){
    d2cc:	2b00      	cmp	r3, #0
    d2ce:	d1f8      	bne.n	d2c2 <lte_handler+0x16>
                      connection_status = 0;//variable del estado conectado a true
    d2d0:	4a02      	ldr	r2, [pc, #8]	; (d2dc <lte_handler+0x30>)
                      printk("Estado de conexion SIN CONEXION \n");
    d2d2:	4805      	ldr	r0, [pc, #20]	; (d2e8 <lte_handler+0x3c>)
                      connection_status = 0;//variable del estado conectado a true
    d2d4:	7013      	strb	r3, [r2, #0]
                      printk("Estado de conexion SIN CONEXION \n");
    d2d6:	e7f2      	b.n	d2be <lte_handler+0x12>
}
    d2d8:	bd08      	pop	{r3, pc}
    d2da:	bf00      	nop
    d2dc:	20015c42 	.word	0x20015c42
    d2e0:	0001b1b8 	.word	0x0001b1b8
    d2e4:	20014734 	.word	0x20014734
    d2e8:	0001b1e2 	.word	0x0001b1e2

0000d2ec <main>:


void main(){
    d2ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    d2ee:	482d      	ldr	r0, [pc, #180]	; (d3a4 <main+0xb8>)
    d2f0:	f008 fc4a 	bl	15b88 <z_impl_device_get_binding>
    d2f4:	4604      	mov	r4, r0
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    d2f6:	68c5      	ldr	r5, [r0, #12]
	return api->pin_configure(port, pin, flags);
    d2f8:	6883      	ldr	r3, [r0, #8]
    d2fa:	f44f 7280 	mov.w	r2, #256	; 0x100
    d2fe:	2115      	movs	r1, #21
    d300:	681b      	ldr	r3, [r3, #0]
    d302:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    d304:	b918      	cbnz	r0, d30e <main+0x22>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    d306:	682b      	ldr	r3, [r5, #0]
    d308:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    d30c:	602b      	str	r3, [r5, #0]
    struct device *dev;
    dev = device_get_binding("GPIO_0");
    gpio_pin_configure(dev, 21, GPIO_INPUT);

    while(gpio_pin_get(dev, 21) == 1){
     printk("Hay tarjeta SIM, quita la tarjeta SIM \n");
    d30e:	4d26      	ldr	r5, [pc, #152]	; (d3a8 <main+0xbc>)
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_port_get(const struct device *port,
				gpio_port_value_t *value)
{
	const struct gpio_driver_data *const data =
    d310:	68e6      	ldr	r6, [r4, #12]
	return api->port_get_raw(port, value);
    d312:	68a3      	ldr	r3, [r4, #8]
    d314:	4620      	mov	r0, r4
    d316:	685b      	ldr	r3, [r3, #4]
    d318:	a901      	add	r1, sp, #4
    d31a:	4798      	blx	r3
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
    d31c:	b920      	cbnz	r0, d328 <main+0x3c>
		*value ^= data->invert;
    d31e:	6833      	ldr	r3, [r6, #0]
    d320:	9801      	ldr	r0, [sp, #4]
    d322:	4058      	eors	r0, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    d324:	f3c0 5040 	ubfx	r0, r0, #21, #1
    while(gpio_pin_get(dev, 21) == 1){
    d328:	2801      	cmp	r0, #1
    d32a:	d021      	beq.n	d370 <main+0x84>
     k_sleep(K_MSEC(3000));
    }
    
    printk("Se ha dejado de detectar la tarjeta SIM \n");
    d32c:	481f      	ldr	r0, [pc, #124]	; (d3ac <main+0xc0>)
    d32e:	f009 fe91 	bl	17054 <printk>

      
    while(gpio_pin_get(dev, 21) != 1){
      printk("No hay tarjeta SIM, pon la tarjeta SIM \n");
    d332:	4d1f      	ldr	r5, [pc, #124]	; (d3b0 <main+0xc4>)
	const struct gpio_driver_data *const data =
    d334:	68e6      	ldr	r6, [r4, #12]
	return api->port_get_raw(port, value);
    d336:	68a3      	ldr	r3, [r4, #8]
    d338:	4620      	mov	r0, r4
    d33a:	685b      	ldr	r3, [r3, #4]
    d33c:	a901      	add	r1, sp, #4
    d33e:	4798      	blx	r3
	if (ret == 0) {
    d340:	b920      	cbnz	r0, d34c <main+0x60>
		*value ^= data->invert;
    d342:	6833      	ldr	r3, [r6, #0]
    d344:	9801      	ldr	r0, [sp, #4]
    d346:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    d348:	f3c0 5040 	ubfx	r0, r0, #21, #1
    while(gpio_pin_get(dev, 21) != 1){
    d34c:	2801      	cmp	r0, #1
    d34e:	d118      	bne.n	d382 <main+0x96>
      k_sleep(K_MSEC(3000));

    }
    printk("Se ha detectado una tarjeta SIM \n");
    d350:	4818      	ldr	r0, [pc, #96]	; (d3b4 <main+0xc8>)
    d352:	f009 fe7f 	bl	17054 <printk>

    int err;

    printk("Connecting to LTE network. This may take a few minutes...\n");
    d356:	4818      	ldr	r0, [pc, #96]	; (d3b8 <main+0xcc>)
    d358:	f009 fe7c 	bl	17054 <printk>

    err = lte_lc_init_and_connect_async(lte_handler);
    d35c:	4817      	ldr	r0, [pc, #92]	; (d3bc <main+0xd0>)
    d35e:	f00b fc16 	bl	18b8e <lte_lc_init_and_connect_async>
    if (err) {
    d362:	4601      	mov	r1, r0
    d364:	b1b0      	cbz	r0, d394 <main+0xa8>
            printk("lte_lc_init_and_connect_async, error: %d\n", err);
    d366:	4816      	ldr	r0, [pc, #88]	; (d3c0 <main+0xd4>)
    d368:	f009 fe74 	bl	17054 <printk>

    k_sem_take(&lte_connected, K_FOREVER);

    

    d36c:	b002      	add	sp, #8
    d36e:	bd70      	pop	{r4, r5, r6, pc}
     printk("Hay tarjeta SIM, quita la tarjeta SIM \n");
    d370:	4628      	mov	r0, r5
    d372:	f009 fe6f 	bl	17054 <printk>
	return z_impl_k_sleep(timeout);
    d376:	2100      	movs	r1, #0
    d378:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
    d37c:	f009 fa34 	bl	167e8 <z_impl_k_sleep>
    d380:	e7c6      	b.n	d310 <main+0x24>
      printk("No hay tarjeta SIM, pon la tarjeta SIM \n");
    d382:	4628      	mov	r0, r5
    d384:	f009 fe66 	bl	17054 <printk>
    d388:	2100      	movs	r1, #0
    d38a:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
    d38e:	f009 fa2b 	bl	167e8 <z_impl_k_sleep>
    d392:	e7cf      	b.n	d334 <main+0x48>
	return z_impl_k_sem_take(sem, timeout);
    d394:	f04f 32ff 	mov.w	r2, #4294967295
    d398:	f04f 33ff 	mov.w	r3, #4294967295
    d39c:	4809      	ldr	r0, [pc, #36]	; (d3c4 <main+0xd8>)
    d39e:	f009 fa71 	bl	16884 <z_impl_k_sem_take>
    d3a2:	e7e3      	b.n	d36c <main+0x80>
    d3a4:	0001b204 	.word	0x0001b204
    d3a8:	0001b20b 	.word	0x0001b20b
    d3ac:	0001b233 	.word	0x0001b233
    d3b0:	0001b25d 	.word	0x0001b25d
    d3b4:	0001b286 	.word	0x0001b286
    d3b8:	0001b2a8 	.word	0x0001b2a8
    d3bc:	0000d2ad 	.word	0x0000d2ad
    d3c0:	0001b2e3 	.word	0x0001b2e3
    d3c4:	20014734 	.word	0x20014734

0000d3c8 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    d3c8:	2803      	cmp	r0, #3
{
    d3ca:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    d3cc:	d906      	bls.n	d3dc <_check_fd+0x14>
    d3ce:	f008 fc03 	bl	15bd8 <z_impl_z_errno>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
    d3d2:	2309      	movs	r3, #9
    d3d4:	6003      	str	r3, [r0, #0]
    d3d6:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
    d3da:	bd08      	pop	{r3, pc}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d3dc:	220c      	movs	r2, #12
    d3de:	4b05      	ldr	r3, [pc, #20]	; (d3f4 <_check_fd+0x2c>)
    d3e0:	fb02 3000 	mla	r0, r2, r0, r3
    d3e4:	3008      	adds	r0, #8
    d3e6:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
    d3ea:	2b00      	cmp	r3, #0
    d3ec:	d0ef      	beq.n	d3ce <_check_fd+0x6>
	return 0;
    d3ee:	2000      	movs	r0, #0
    d3f0:	e7f3      	b.n	d3da <_check_fd+0x12>
    d3f2:	bf00      	nop
    d3f4:	20014cd8 	.word	0x20014cd8

0000d3f8 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
    d3f8:	b570      	push	{r4, r5, r6, lr}
    d3fa:	4604      	mov	r4, r0
    d3fc:	460d      	mov	r5, r1
    d3fe:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    d400:	f7ff ffe2 	bl	d3c8 <_check_fd>
    d404:	2800      	cmp	r0, #0
    d406:	db0a      	blt.n	d41e <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
    d408:	4a08      	ldr	r2, [pc, #32]	; (d42c <z_get_fd_obj+0x34>)
    d40a:	b155      	cbz	r5, d422 <z_get_fd_obj+0x2a>
    d40c:	230c      	movs	r3, #12
    d40e:	fb03 2304 	mla	r3, r3, r4, r2
    d412:	685b      	ldr	r3, [r3, #4]
    d414:	42ab      	cmp	r3, r5
    d416:	d004      	beq.n	d422 <z_get_fd_obj+0x2a>
    d418:	f008 fbde 	bl	15bd8 <z_impl_z_errno>
		errno = err;
    d41c:	6006      	str	r6, [r0, #0]
		return NULL;
    d41e:	2000      	movs	r0, #0
    d420:	e002      	b.n	d428 <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
    d422:	200c      	movs	r0, #12
    d424:	4344      	muls	r4, r0
    d426:	5910      	ldr	r0, [r2, r4]
}
    d428:	bd70      	pop	{r4, r5, r6, pc}
    d42a:	bf00      	nop
    d42c:	20014cd8 	.word	0x20014cd8

0000d430 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
    d430:	b538      	push	{r3, r4, r5, lr}
    d432:	4605      	mov	r5, r0
    d434:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    d436:	f7ff ffc7 	bl	d3c8 <_check_fd>
    d43a:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
    d43c:	bfa3      	ittte	ge
    d43e:	230c      	movge	r3, #12
    d440:	fb03 f005 	mulge.w	r0, r3, r5
    d444:	4a03      	ldrge	r2, [pc, #12]	; (d454 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
    d446:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
    d448:	bfa1      	itttt	ge
    d44a:	1813      	addge	r3, r2, r0
    d44c:	685b      	ldrge	r3, [r3, #4]
    d44e:	6023      	strge	r3, [r4, #0]

	return fd_entry->obj;
    d450:	5810      	ldrge	r0, [r2, r0]
}
    d452:	bd38      	pop	{r3, r4, r5, pc}
    d454:	20014cd8 	.word	0x20014cd8

0000d458 <z_reserve_fd>:

int z_reserve_fd(void)
{
    d458:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    d45a:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
    d45c:	f04f 33ff 	mov.w	r3, #4294967295
    d460:	f04f 32ff 	mov.w	r2, #4294967295
    d464:	4812      	ldr	r0, [pc, #72]	; (d4b0 <z_reserve_fd+0x58>)
    d466:	f008 fd55 	bl	15f14 <z_impl_k_mutex_lock>
    d46a:	4b12      	ldr	r3, [pc, #72]	; (d4b4 <z_reserve_fd+0x5c>)
    d46c:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
    d470:	b17a      	cbz	r2, d492 <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    d472:	3401      	adds	r4, #1
    d474:	2c04      	cmp	r4, #4
    d476:	f103 030c 	add.w	r3, r3, #12
    d47a:	d1f7      	bne.n	d46c <z_reserve_fd+0x14>
    d47c:	f008 fbac 	bl	15bd8 <z_impl_z_errno>
	errno = ENFILE;
    d480:	2317      	movs	r3, #23
	return -1;
    d482:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
    d486:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    d488:	4809      	ldr	r0, [pc, #36]	; (d4b0 <z_reserve_fd+0x58>)
    d48a:	f008 fdbb 	bl	16004 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    d48e:	4620      	mov	r0, r4
    d490:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d492:	e8d3 1fef 	ldaex	r1, [r3]
    d496:	3101      	adds	r1, #1
    d498:	e8c3 1fe0 	stlex	r0, r1, [r3]
    d49c:	2800      	cmp	r0, #0
    d49e:	d1f8      	bne.n	d492 <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
    d4a0:	230c      	movs	r3, #12
    d4a2:	4363      	muls	r3, r4
    d4a4:	4904      	ldr	r1, [pc, #16]	; (d4b8 <z_reserve_fd+0x60>)
    d4a6:	18c8      	adds	r0, r1, r3
    d4a8:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
    d4aa:	6042      	str	r2, [r0, #4]
    d4ac:	e7ec      	b.n	d488 <z_reserve_fd+0x30>
    d4ae:	bf00      	nop
    d4b0:	20014680 	.word	0x20014680
    d4b4:	20014ce0 	.word	0x20014ce0
    d4b8:	20014cd8 	.word	0x20014cd8

0000d4bc <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
    d4bc:	230c      	movs	r3, #12
{
    d4be:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
    d4c0:	4358      	muls	r0, r3
    d4c2:	4c02      	ldr	r4, [pc, #8]	; (d4cc <z_finalize_fd+0x10>)
    d4c4:	1823      	adds	r3, r4, r0
    d4c6:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
    d4c8:	605a      	str	r2, [r3, #4]
}
    d4ca:	bd10      	pop	{r4, pc}
    d4cc:	20014cd8 	.word	0x20014cd8

0000d4d0 <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
    d4d0:	230c      	movs	r3, #12
    d4d2:	4a0e      	ldr	r2, [pc, #56]	; (d50c <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
    d4d4:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
    d4d6:	fb03 2300 	mla	r3, r3, r0, r2
    d4da:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d4dc:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
    d4e0:	b191      	cbz	r1, d508 <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
    d4e2:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d4e4:	e8d3 5fef 	ldaex	r5, [r3]
    d4e8:	428d      	cmp	r5, r1
    d4ea:	d104      	bne.n	d4f6 <z_free_fd+0x26>
    d4ec:	e8c3 4fec 	stlex	ip, r4, [r3]
    d4f0:	f1bc 0f00 	cmp.w	ip, #0
    d4f4:	d1f6      	bne.n	d4e4 <z_free_fd+0x14>
    d4f6:	d1f1      	bne.n	d4dc <z_free_fd+0xc>
	if (old_rc != 1) {
    d4f8:	2901      	cmp	r1, #1
    d4fa:	d105      	bne.n	d508 <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
    d4fc:	230c      	movs	r3, #12
    d4fe:	4358      	muls	r0, r3
    d500:	2300      	movs	r3, #0
    d502:	1811      	adds	r1, r2, r0
    d504:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
    d506:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
    d508:	bd30      	pop	{r4, r5, pc}
    d50a:	bf00      	nop
    d50c:	20014cd8 	.word	0x20014cd8

0000d510 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    d510:	680b      	ldr	r3, [r1, #0]
    d512:	3301      	adds	r3, #1
    d514:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    d516:	4b01      	ldr	r3, [pc, #4]	; (d51c <char_out+0xc>)
    d518:	681b      	ldr	r3, [r3, #0]
    d51a:	4718      	bx	r3
    d51c:	20014500 	.word	0x20014500

0000d520 <__printk_hook_install>:
	_char_out = fn;
    d520:	4b01      	ldr	r3, [pc, #4]	; (d528 <__printk_hook_install+0x8>)
    d522:	6018      	str	r0, [r3, #0]
}
    d524:	4770      	bx	lr
    d526:	bf00      	nop
    d528:	20014500 	.word	0x20014500

0000d52c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    d52c:	b507      	push	{r0, r1, r2, lr}
    d52e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    d530:	2100      	movs	r1, #0
{
    d532:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    d534:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    d536:	4803      	ldr	r0, [pc, #12]	; (d544 <vprintk+0x18>)
    d538:	a901      	add	r1, sp, #4
    d53a:	f000 f981 	bl	d840 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    d53e:	b003      	add	sp, #12
    d540:	f85d fb04 	ldr.w	pc, [sp], #4
    d544:	0000d511 	.word	0x0000d511

0000d548 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    d548:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    d54a:	2500      	movs	r5, #0
{
    d54c:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    d54e:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    d552:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    d554:	a901      	add	r1, sp, #4
    d556:	4805      	ldr	r0, [pc, #20]	; (d56c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    d558:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    d55a:	f000 f971 	bl	d840 <cbvprintf>

	if (ctx.count < ctx.max) {
    d55e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    d562:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    d564:	bfb8      	it	lt
    d566:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    d568:	b005      	add	sp, #20
    d56a:	bd30      	pop	{r4, r5, pc}
    d56c:	0001702f 	.word	0x0001702f

0000d570 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    d570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    d574:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    d578:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    d57a:	f019 0808 	ands.w	r8, r9, #8
{
    d57e:	4693      	mov	fp, r2
	if (processing) {
    d580:	d00e      	beq.n	d5a0 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    d582:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    d584:	bf0c      	ite	eq
    d586:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    d58a:	f049 0920 	orrne.w	r9, r9, #32
    d58e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    d592:	f38b 8811 	msr	BASEPRI, fp
    d596:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    d59a:	b003      	add	sp, #12
    d59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    d5a0:	f8df a198 	ldr.w	sl, [pc, #408]	; d73c <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    d5a4:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    d5a8:	2902      	cmp	r1, #2
    d5aa:	d107      	bne.n	d5bc <process_event+0x4c>
			evt = process_recheck(mgr);
    d5ac:	4620      	mov	r0, r4
    d5ae:	f009 fd6b 	bl	17088 <process_recheck>
		if (evt == EVT_NOP) {
    d5b2:	2800      	cmp	r0, #0
    d5b4:	d0ed      	beq.n	d592 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    d5b6:	2801      	cmp	r0, #1
    d5b8:	8b23      	ldrh	r3, [r4, #24]
    d5ba:	d14d      	bne.n	d658 <process_event+0xe8>
			res = mgr->last_res;
    d5bc:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    d5be:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    d5c0:	2f00      	cmp	r7, #0
    d5c2:	da15      	bge.n	d5f0 <process_event+0x80>
		*clients = mgr->clients;
    d5c4:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d5c6:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    d5ca:	e9c4 8800 	strd	r8, r8, [r4]
    d5ce:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    d5d2:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    d5d4:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d5d6:	8b21      	ldrh	r1, [r4, #24]
    d5d8:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    d5dc:	454a      	cmp	r2, r9
    d5de:	d002      	beq.n	d5e6 <process_event+0x76>
		if (do_monitors
    d5e0:	68a3      	ldr	r3, [r4, #8]
    d5e2:	2b00      	cmp	r3, #0
    d5e4:	d159      	bne.n	d69a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    d5e6:	b90d      	cbnz	r5, d5ec <process_event+0x7c>
		    || (transit != NULL)) {
    d5e8:	2e00      	cmp	r6, #0
    d5ea:	d071      	beq.n	d6d0 <process_event+0x160>
    d5ec:	2300      	movs	r3, #0
    d5ee:	e055      	b.n	d69c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    d5f0:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    d5f4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    d5f6:	2a01      	cmp	r2, #1
    d5f8:	d81f      	bhi.n	d63a <process_event+0xca>
		*clients = mgr->clients;
    d5fa:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    d5fe:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    d600:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    d602:	b289      	uxth	r1, r1
	list->tail = NULL;
    d604:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    d608:	d10c      	bne.n	d624 <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    d60a:	2d00      	cmp	r5, #0
    d60c:	462b      	mov	r3, r5
    d60e:	bf38      	it	cc
    d610:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    d612:	b12b      	cbz	r3, d620 <process_event+0xb0>
				mgr->refs += 1U;
    d614:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d616:	681b      	ldr	r3, [r3, #0]
    d618:	3201      	adds	r2, #1
    d61a:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    d61c:	2b00      	cmp	r3, #0
    d61e:	d1f8      	bne.n	d612 <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d620:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    d624:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    d626:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    d628:	f009 fd2e 	bl	17088 <process_recheck>
    d62c:	2800      	cmp	r0, #0
    d62e:	d0d1      	beq.n	d5d4 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    d630:	8b23      	ldrh	r3, [r4, #24]
    d632:	f043 0320 	orr.w	r3, r3, #32
    d636:	8323      	strh	r3, [r4, #24]
    d638:	e7cc      	b.n	d5d4 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    d63a:	2b04      	cmp	r3, #4
    d63c:	d10a      	bne.n	d654 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d63e:	f021 0107 	bic.w	r1, r1, #7
    d642:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    d644:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    d646:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    d648:	f009 fd1e 	bl	17088 <process_recheck>
    d64c:	b110      	cbz	r0, d654 <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    d64e:	f041 0120 	orr.w	r1, r1, #32
    d652:	8321      	strh	r1, [r4, #24]
    d654:	2500      	movs	r5, #0
    d656:	e7bd      	b.n	d5d4 <process_event+0x64>
		} else if (evt == EVT_START) {
    d658:	2803      	cmp	r0, #3
    d65a:	d109      	bne.n	d670 <process_event+0x100>
			transit = mgr->transitions->start;
    d65c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d65e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    d662:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d664:	f043 0306 	orr.w	r3, r3, #6
}
    d668:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    d66a:	8323      	strh	r3, [r4, #24]
		res = 0;
    d66c:	462f      	mov	r7, r5
    d66e:	e7b2      	b.n	d5d6 <process_event+0x66>
		} else if (evt == EVT_STOP) {
    d670:	2804      	cmp	r0, #4
    d672:	d106      	bne.n	d682 <process_event+0x112>
			transit = mgr->transitions->stop;
    d674:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d676:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    d67a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d67c:	f043 0304 	orr.w	r3, r3, #4
    d680:	e7f2      	b.n	d668 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    d682:	2805      	cmp	r0, #5
    d684:	d106      	bne.n	d694 <process_event+0x124>
			transit = mgr->transitions->reset;
    d686:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d688:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    d68c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d68e:	f043 0305 	orr.w	r3, r3, #5
    d692:	e7e9      	b.n	d668 <process_event+0xf8>
    d694:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    d696:	462e      	mov	r6, r5
    d698:	e7e8      	b.n	d66c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    d69a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    d69c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    d6a0:	8321      	strh	r1, [r4, #24]
    d6a2:	f38b 8811 	msr	BASEPRI, fp
    d6a6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    d6aa:	bb03      	cbnz	r3, d6ee <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    d6ac:	2d00      	cmp	r5, #0
    d6ae:	d134      	bne.n	d71a <process_event+0x1aa>
			if (transit != NULL) {
    d6b0:	b116      	cbz	r6, d6b8 <process_event+0x148>
				transit(mgr, transition_complete);
    d6b2:	4651      	mov	r1, sl
    d6b4:	4620      	mov	r0, r4
    d6b6:	47b0      	blx	r6
	__asm__ volatile(
    d6b8:	f04f 0320 	mov.w	r3, #32
    d6bc:	f3ef 8b11 	mrs	fp, BASEPRI
    d6c0:	f383 8811 	msr	BASEPRI, r3
    d6c4:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    d6c8:	8b23      	ldrh	r3, [r4, #24]
    d6ca:	f023 0308 	bic.w	r3, r3, #8
    d6ce:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    d6d0:	8b23      	ldrh	r3, [r4, #24]
    d6d2:	06da      	lsls	r2, r3, #27
    d6d4:	d52a      	bpl.n	d72c <process_event+0x1bc>
			evt = EVT_COMPLETE;
    d6d6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    d6d8:	f023 0310 	bic.w	r3, r3, #16
    d6dc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    d6de:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    d6e2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    d6e6:	2900      	cmp	r1, #0
    d6e8:	f47f af5e 	bne.w	d5a8 <process_event+0x38>
out:
    d6ec:	e751      	b.n	d592 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    d6ee:	68a1      	ldr	r1, [r4, #8]
    d6f0:	2900      	cmp	r1, #0
    d6f2:	d0db      	beq.n	d6ac <process_event+0x13c>
	return node->next;
    d6f4:	680b      	ldr	r3, [r1, #0]
    d6f6:	2b00      	cmp	r3, #0
    d6f8:	bf38      	it	cc
    d6fa:	2300      	movcc	r3, #0
    d6fc:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
    d6fe:	4620      	mov	r0, r4
    d700:	463b      	mov	r3, r7
    d702:	f8d1 b004 	ldr.w	fp, [r1, #4]
    d706:	9201      	str	r2, [sp, #4]
    d708:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    d70a:	9a01      	ldr	r2, [sp, #4]
    d70c:	f1b9 0f00 	cmp.w	r9, #0
    d710:	d0cc      	beq.n	d6ac <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d712:	4649      	mov	r1, r9
    d714:	f8d9 3000 	ldr.w	r3, [r9]
    d718:	e7ed      	b.n	d6f6 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d71a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    d71c:	463b      	mov	r3, r7
    d71e:	4620      	mov	r0, r4
    d720:	9201      	str	r2, [sp, #4]
    d722:	682d      	ldr	r5, [r5, #0]
    d724:	f009 fccc 	bl	170c0 <notify_one>
	while (!sys_slist_is_empty(list)) {
    d728:	9a01      	ldr	r2, [sp, #4]
    d72a:	e7bf      	b.n	d6ac <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    d72c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    d730:	bf1e      	ittt	ne
    d732:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    d736:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    d738:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    d73a:	e7d0      	b.n	d6de <process_event+0x16e>
    d73c:	000170ed 	.word	0x000170ed

0000d740 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
    d740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
    d744:	f240 746c 	movw	r4, #1900	; 0x76c
    d748:	2500      	movs	r5, #0
	unsigned int m = tm->tm_mon + 1;
    d74a:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
    d74c:	68c2      	ldr	r2, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
    d74e:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
    d752:	1e53      	subs	r3, r2, #1
    d754:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
    d756:	6943      	ldr	r3, [r0, #20]
{
    d758:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
    d75a:	18e4      	adds	r4, r4, r3
    d75c:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
    d760:	f1b9 0f02 	cmp.w	r9, #2
    d764:	bf8c      	ite	hi
    d766:	2300      	movhi	r3, #0
    d768:	2301      	movls	r3, #1
    d76a:	1ae4      	subs	r4, r4, r3
    d76c:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
    d770:	2c00      	cmp	r4, #0
    d772:	f175 0300 	sbcs.w	r3, r5, #0
    d776:	da54      	bge.n	d822 <timeutil_timegm64+0xe2>
    d778:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
    d77c:	f44f 72c8 	mov.w	r2, #400	; 0x190
    d780:	2300      	movs	r3, #0
    d782:	1820      	adds	r0, r4, r0
    d784:	f145 31ff 	adc.w	r1, r5, #4294967295
    d788:	f7ff f978 	bl	ca7c <__aeabi_ldivmod>
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    d78c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
    d790:	4a27      	ldr	r2, [pc, #156]	; (d830 <timeutil_timegm64+0xf0>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
    d792:	4603      	mov	r3, r0
	unsigned int yoe = y - era * 400;
    d794:	fb02 4200 	mla	r2, r2, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    d798:	e9d8 0400 	ldrd	r0, r4, [r8]
    d79c:	f8d8 8008 	ldr.w	r8, [r8, #8]
    d7a0:	17e5      	asrs	r5, r4, #31
    d7a2:	fbcc 4508 	smlal	r4, r5, ip, r8
    d7a6:	fba4 ab0c 	umull	sl, fp, r4, ip
    d7aa:	fb0c bb05 	mla	fp, ip, r5, fp
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    d7ae:	f1b9 0f02 	cmp.w	r9, #2
    d7b2:	bf8c      	ite	hi
    d7b4:	f06f 0e02 	mvnhi.w	lr, #2
    d7b8:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    d7bc:	eb1a 0a00 	adds.w	sl, sl, r0
    d7c0:	eb4b 7be0 	adc.w	fp, fp, r0, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    d7c4:	f240 106d 	movw	r0, #365	; 0x16d
    d7c8:	0894      	lsrs	r4, r2, #2
    d7ca:	fb00 4002 	mla	r0, r0, r2, r4
    d7ce:	9c01      	ldr	r4, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    d7d0:	44f1      	add	r9, lr
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    d7d2:	4420      	add	r0, r4
    d7d4:	2464      	movs	r4, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    d7d6:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    d7da:	fbb2 f4f4 	udiv	r4, r2, r4
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    d7de:	2205      	movs	r2, #5
    d7e0:	fb0e fe09 	mul.w	lr, lr, r9
    d7e4:	f10e 0e02 	add.w	lr, lr, #2
    d7e8:	fbbe fef2 	udiv	lr, lr, r2
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    d7ec:	1b04      	subs	r4, r0, r4
	return era * 146097 + (time_t)doe - 719468;
    d7ee:	4811      	ldr	r0, [pc, #68]	; (d834 <timeutil_timegm64+0xf4>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    d7f0:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
    d7f2:	fba3 2300 	umull	r2, r3, r3, r0
    d7f6:	fb00 3301 	mla	r3, r0, r1, r3
    d7fa:	490f      	ldr	r1, [pc, #60]	; (d838 <timeutil_timegm64+0xf8>)
    d7fc:	1856      	adds	r6, r2, r1
	time += 86400LL * ndays;
    d7fe:	490f      	ldr	r1, [pc, #60]	; (d83c <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
    d800:	f143 37ff 	adc.w	r7, r3, #4294967295
    d804:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
    d808:	fba6 2301 	umull	r2, r3, r6, r1
	return era * 146097 + (time_t)doe - 719468;
    d80c:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
    d810:	fb01 3307 	mla	r3, r1, r7, r3

	return time;
}
    d814:	eb12 000a 	adds.w	r0, r2, sl
    d818:	eb43 010b 	adc.w	r1, r3, fp
    d81c:	b003      	add	sp, #12
    d81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
    d822:	f44f 72c8 	mov.w	r2, #400	; 0x190
    d826:	2300      	movs	r3, #0
    d828:	4620      	mov	r0, r4
    d82a:	4629      	mov	r1, r5
    d82c:	e7ac      	b.n	d788 <timeutil_timegm64+0x48>
    d82e:	bf00      	nop
    d830:	fffffe70 	.word	0xfffffe70
    d834:	00023ab1 	.word	0x00023ab1
    d838:	fff50594 	.word	0xfff50594
    d83c:	00015180 	.word	0x00015180

0000d840 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d844:	4688      	mov	r8, r1
    d846:	4691      	mov	r9, r2
    d848:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    d84a:	2500      	movs	r5, #0
{
    d84c:	b0a5      	sub	sp, #148	; 0x94
    d84e:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    d850:	f899 0000 	ldrb.w	r0, [r9]
    d854:	b910      	cbnz	r0, d85c <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
    d856:	4628      	mov	r0, r5
    d858:	f000 be18 	b.w	e48c <cbvprintf+0xc4c>
		if (*fp != '%') {
    d85c:	f109 0301 	add.w	r3, r9, #1
    d860:	2825      	cmp	r0, #37	; 0x25
    d862:	9309      	str	r3, [sp, #36]	; 0x24
    d864:	d007      	beq.n	d876 <cbvprintf+0x36>
			OUTC(*fp++);
    d866:	4641      	mov	r1, r8
			OUTC('%');
    d868:	9b03      	ldr	r3, [sp, #12]
    d86a:	4798      	blx	r3
    d86c:	2800      	cmp	r0, #0
    d86e:	f2c0 860d 	blt.w	e48c <cbvprintf+0xc4c>
    d872:	3501      	adds	r5, #1
		if (bps == NULL) {
    d874:	e245      	b.n	dd02 <cbvprintf+0x4c2>
		} state = {
    d876:	2218      	movs	r2, #24
    d878:	2100      	movs	r1, #0
    d87a:	a816      	add	r0, sp, #88	; 0x58
    d87c:	f00a fb59 	bl	17f32 <memset>
	if (*sp == '%') {
    d880:	f899 3001 	ldrb.w	r3, [r9, #1]
    d884:	2b25      	cmp	r3, #37	; 0x25
    d886:	d079      	beq.n	d97c <cbvprintf+0x13c>
    d888:	2200      	movs	r2, #0
    d88a:	4616      	mov	r6, r2
    d88c:	4696      	mov	lr, r2
    d88e:	4617      	mov	r7, r2
    d890:	4694      	mov	ip, r2
    d892:	9809      	ldr	r0, [sp, #36]	; 0x24
    d894:	4601      	mov	r1, r0
		switch (*sp) {
    d896:	f810 3b01 	ldrb.w	r3, [r0], #1
    d89a:	2b2b      	cmp	r3, #43	; 0x2b
    d89c:	f000 809e 	beq.w	d9dc <cbvprintf+0x19c>
    d8a0:	f200 8095 	bhi.w	d9ce <cbvprintf+0x18e>
    d8a4:	2b20      	cmp	r3, #32
    d8a6:	f000 809b 	beq.w	d9e0 <cbvprintf+0x1a0>
    d8aa:	2b23      	cmp	r3, #35	; 0x23
    d8ac:	f000 809b 	beq.w	d9e6 <cbvprintf+0x1a6>
    d8b0:	f1bc 0f00 	cmp.w	ip, #0
    d8b4:	d005      	beq.n	d8c2 <cbvprintf+0x82>
    d8b6:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    d8ba:	f040 0004 	orr.w	r0, r0, #4
    d8be:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    d8c2:	b12f      	cbz	r7, d8d0 <cbvprintf+0x90>
    d8c4:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    d8c8:	f040 0008 	orr.w	r0, r0, #8
    d8cc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    d8d0:	f1be 0f00 	cmp.w	lr, #0
    d8d4:	d005      	beq.n	d8e2 <cbvprintf+0xa2>
    d8d6:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    d8da:	f040 0010 	orr.w	r0, r0, #16
    d8de:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    d8e2:	b12e      	cbz	r6, d8f0 <cbvprintf+0xb0>
    d8e4:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    d8e8:	f040 0020 	orr.w	r0, r0, #32
    d8ec:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    d8f0:	b12a      	cbz	r2, d8fe <cbvprintf+0xbe>
    d8f2:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    d8f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    d8fa:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (conv->flag_zero && conv->flag_dash) {
    d8fe:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    d902:	f002 0044 	and.w	r0, r2, #68	; 0x44
    d906:	2844      	cmp	r0, #68	; 0x44
    d908:	d103      	bne.n	d912 <cbvprintf+0xd2>
		conv->flag_zero = false;
    d90a:	f36f 1286 	bfc	r2, #6, #1
    d90e:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	conv->width_present = true;
    d912:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
    d916:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    d918:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d91c:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
    d920:	d17c      	bne.n	da1c <cbvprintf+0x1dc>
		conv->width_star = true;
    d922:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    d926:	1c4b      	adds	r3, r1, #1
    d928:	f042 0201 	orr.w	r2, r2, #1
    d92c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	conv->prec_present = (*sp == '.');
    d930:	781a      	ldrb	r2, [r3, #0]
    d932:	2a2e      	cmp	r2, #46	; 0x2e
    d934:	bf0c      	ite	eq
    d936:	2101      	moveq	r1, #1
    d938:	2100      	movne	r1, #0
    d93a:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    d93e:	f361 0241 	bfi	r2, r1, #1, #1
    d942:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	if (!conv->prec_present) {
    d946:	d175      	bne.n	da34 <cbvprintf+0x1f4>
	if (*sp == '*') {
    d948:	785a      	ldrb	r2, [r3, #1]
    d94a:	2a2a      	cmp	r2, #42	; 0x2a
    d94c:	d06b      	beq.n	da26 <cbvprintf+0x1e6>
	size_t val = 0;
    d94e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    d950:	260a      	movs	r6, #10
    d952:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    d954:	4618      	mov	r0, r3
    d956:	f810 2b01 	ldrb.w	r2, [r0], #1
    d95a:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    d95e:	2f09      	cmp	r7, #9
    d960:	f240 80aa 	bls.w	dab8 <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    d964:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	conv->prec_value = prec;
    d968:	911a      	str	r1, [sp, #104]	; 0x68
	conv->unsupported |= ((conv->prec_value < 0)
    d96a:	f3c2 0040 	ubfx	r0, r2, #1, #1
    d96e:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    d972:	f361 0241 	bfi	r2, r1, #1, #1
    d976:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
    d97a:	e05b      	b.n	da34 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    d97c:	f109 0202 	add.w	r2, r9, #2
    d980:	9209      	str	r2, [sp, #36]	; 0x24
    d982:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
		if (conv->width_star) {
    d986:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    d98a:	07de      	lsls	r6, r3, #31
    d98c:	f140 816f 	bpl.w	dc6e <cbvprintf+0x42e>
			width = va_arg(ap, int);
    d990:	f854 2b04 	ldr.w	r2, [r4], #4
			if (width < 0) {
    d994:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
    d996:	9208      	str	r2, [sp, #32]
			if (width < 0) {
    d998:	da08      	bge.n	d9ac <cbvprintf+0x16c>
				conv->flag_dash = true;
    d99a:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    d99e:	f042 0204 	orr.w	r2, r2, #4
    d9a2:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
				width = -width;
    d9a6:	9a08      	ldr	r2, [sp, #32]
    d9a8:	4252      	negs	r2, r2
		int width = -1;
    d9aa:	9208      	str	r2, [sp, #32]
		if (conv->prec_star) {
    d9ac:	0758      	lsls	r0, r3, #29
    d9ae:	f140 8166 	bpl.w	dc7e <cbvprintf+0x43e>
			int arg = va_arg(ap, int);
    d9b2:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    d9b6:	2f00      	cmp	r7, #0
    d9b8:	f280 8165 	bge.w	dc86 <cbvprintf+0x446>
				conv->prec_present = false;
    d9bc:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    d9c0:	f36f 0341 	bfc	r3, #1, #1
    d9c4:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		int precision = -1;
    d9c8:	f04f 37ff 	mov.w	r7, #4294967295
    d9cc:	e15b      	b.n	dc86 <cbvprintf+0x446>
		switch (*sp) {
    d9ce:	2b2d      	cmp	r3, #45	; 0x2d
    d9d0:	d00b      	beq.n	d9ea <cbvprintf+0x1aa>
    d9d2:	2b30      	cmp	r3, #48	; 0x30
    d9d4:	f47f af6c 	bne.w	d8b0 <cbvprintf+0x70>
			conv->flag_zero = true;
    d9d8:	2201      	movs	r2, #1
	} while (loop);
    d9da:	e75b      	b.n	d894 <cbvprintf+0x54>
			conv->flag_plus = true;
    d9dc:	2701      	movs	r7, #1
    d9de:	e759      	b.n	d894 <cbvprintf+0x54>
			conv->flag_space = true;
    d9e0:	f04f 0e01 	mov.w	lr, #1
    d9e4:	e756      	b.n	d894 <cbvprintf+0x54>
			conv->flag_hash = true;
    d9e6:	2601      	movs	r6, #1
    d9e8:	e754      	b.n	d894 <cbvprintf+0x54>
		switch (*sp) {
    d9ea:	f04f 0c01 	mov.w	ip, #1
    d9ee:	e751      	b.n	d894 <cbvprintf+0x54>
		val = 10U * val + *sp++ - '0';
    d9f0:	4633      	mov	r3, r6
    d9f2:	fb0c 0202 	mla	r2, ip, r2, r0
    d9f6:	3a30      	subs	r2, #48	; 0x30
    d9f8:	461e      	mov	r6, r3
    d9fa:	f816 0b01 	ldrb.w	r0, [r6], #1
    d9fe:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    da02:	2f09      	cmp	r7, #9
    da04:	d9f4      	bls.n	d9f0 <cbvprintf+0x1b0>
	if (sp != wp) {
    da06:	4299      	cmp	r1, r3
    da08:	d092      	beq.n	d930 <cbvprintf+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    da0a:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
		conv->width_value = width;
    da0e:	9219      	str	r2, [sp, #100]	; 0x64
				      || (width != (size_t)conv->width_value));
    da10:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    da12:	f362 0141 	bfi	r1, r2, #1, #1
    da16:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
    da1a:	e789      	b.n	d930 <cbvprintf+0xf0>
    da1c:	460b      	mov	r3, r1
	size_t val = 0;
    da1e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    da20:	f04f 0c0a 	mov.w	ip, #10
    da24:	e7e8      	b.n	d9f8 <cbvprintf+0x1b8>
		conv->prec_star = true;
    da26:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
		return ++sp;
    da2a:	3302      	adds	r3, #2
		conv->prec_star = true;
    da2c:	f042 0204 	orr.w	r2, r2, #4
    da30:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	switch (*sp) {
    da34:	4619      	mov	r1, r3
    da36:	f811 2b01 	ldrb.w	r2, [r1], #1
    da3a:	2a6c      	cmp	r2, #108	; 0x6c
    da3c:	d05c      	beq.n	daf8 <cbvprintf+0x2b8>
    da3e:	d840      	bhi.n	dac2 <cbvprintf+0x282>
    da40:	2a68      	cmp	r2, #104	; 0x68
    da42:	d046      	beq.n	dad2 <cbvprintf+0x292>
    da44:	2a6a      	cmp	r2, #106	; 0x6a
    da46:	d061      	beq.n	db0c <cbvprintf+0x2cc>
    da48:	2a4c      	cmp	r2, #76	; 0x4c
    da4a:	d067      	beq.n	db1c <cbvprintf+0x2dc>
    da4c:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    da4e:	460b      	mov	r3, r1
    da50:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
    da54:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    da56:	9309      	str	r3, [sp, #36]	; 0x24
    da58:	f88d 2063 	strb.w	r2, [sp, #99]	; 0x63
	switch (conv->specifier) {
    da5c:	f200 80df 	bhi.w	dc1e <cbvprintf+0x3de>
    da60:	2a57      	cmp	r2, #87	; 0x57
    da62:	d868      	bhi.n	db36 <cbvprintf+0x2f6>
    da64:	2a41      	cmp	r2, #65	; 0x41
    da66:	d004      	beq.n	da72 <cbvprintf+0x232>
    da68:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    da6c:	2b02      	cmp	r3, #2
    da6e:	f200 80d6 	bhi.w	dc1e <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    da72:	2104      	movs	r1, #4
    da74:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			|| (conv->specifier == 'A');
    da78:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    da7c:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    da80:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    da84:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
    da88:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
			|| (conv->specifier == 'A');
    da8c:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
    da90:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    da94:	060a      	lsls	r2, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
    da96:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		conv->specifier_a = (conv->specifier == 'a')
    da9a:	f88d 1061 	strb.w	r1, [sp, #97]	; 0x61
		if (conv->specifier_a
    da9e:	b2cb      	uxtb	r3, r1
    daa0:	f100 80e3 	bmi.w	dc6a <cbvprintf+0x42a>
		if (conv->length_mod == LENGTH_L) {
    daa4:	f003 0278 	and.w	r2, r3, #120	; 0x78
    daa8:	2a18      	cmp	r2, #24
    daaa:	f040 80b5 	bne.w	dc18 <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    daae:	f36f 03c6 	bfc	r3, #3, #4
    dab2:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
    dab6:	e09c      	b.n	dbf2 <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    dab8:	fb06 2101 	mla	r1, r6, r1, r2
    dabc:	4603      	mov	r3, r0
    dabe:	3930      	subs	r1, #48	; 0x30
    dac0:	e748      	b.n	d954 <cbvprintf+0x114>
	switch (*sp) {
    dac2:	2a74      	cmp	r2, #116	; 0x74
    dac4:	d026      	beq.n	db14 <cbvprintf+0x2d4>
    dac6:	2a7a      	cmp	r2, #122	; 0x7a
    dac8:	d1c0      	bne.n	da4c <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    daca:	2206      	movs	r2, #6
    dacc:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    dad0:	e00d      	b.n	daee <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    dad2:	785a      	ldrb	r2, [r3, #1]
    dad4:	2a68      	cmp	r2, #104	; 0x68
    dad6:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    dada:	d106      	bne.n	daea <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    dadc:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    dade:	f361 02c6 	bfi	r2, r1, #3, #4
    dae2:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
			++sp;
    dae6:	1c99      	adds	r1, r3, #2
    dae8:	e7b1      	b.n	da4e <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    daea:	4613      	mov	r3, r2
    daec:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    daee:	f362 03c6 	bfi	r3, r2, #3, #4
    daf2:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		break;
    daf6:	e7aa      	b.n	da4e <cbvprintf+0x20e>
		if (*++sp == 'l') {
    daf8:	785a      	ldrb	r2, [r3, #1]
    dafa:	2a6c      	cmp	r2, #108	; 0x6c
    dafc:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    db00:	d101      	bne.n	db06 <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    db02:	2104      	movs	r1, #4
    db04:	e7eb      	b.n	dade <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    db06:	4613      	mov	r3, r2
    db08:	2203      	movs	r2, #3
    db0a:	e7f0      	b.n	daee <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    db0c:	2205      	movs	r2, #5
    db0e:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    db12:	e7ec      	b.n	daee <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    db14:	2207      	movs	r2, #7
    db16:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    db1a:	e7e8      	b.n	daee <cbvprintf+0x2ae>
		conv->unsupported = true;
    db1c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    db20:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    db24:	f023 0302 	bic.w	r3, r3, #2
    db28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    db2c:	f043 0302 	orr.w	r3, r3, #2
    db30:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
		break;
    db34:	e78b      	b.n	da4e <cbvprintf+0x20e>
    db36:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    db3a:	2b20      	cmp	r3, #32
    db3c:	d86f      	bhi.n	dc1e <cbvprintf+0x3de>
    db3e:	a101      	add	r1, pc, #4	; (adr r1, db44 <cbvprintf+0x304>)
    db40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    db44:	0000dbf7 	.word	0x0000dbf7
    db48:	0000dc1f 	.word	0x0000dc1f
    db4c:	0000dc1f 	.word	0x0000dc1f
    db50:	0000dc1f 	.word	0x0000dc1f
    db54:	0000dc1f 	.word	0x0000dc1f
    db58:	0000dc1f 	.word	0x0000dc1f
    db5c:	0000dc1f 	.word	0x0000dc1f
    db60:	0000dc1f 	.word	0x0000dc1f
    db64:	0000dc1f 	.word	0x0000dc1f
    db68:	0000da73 	.word	0x0000da73
    db6c:	0000dc1f 	.word	0x0000dc1f
    db70:	0000dbf7 	.word	0x0000dbf7
    db74:	0000dbc9 	.word	0x0000dbc9
    db78:	0000da73 	.word	0x0000da73
    db7c:	0000da73 	.word	0x0000da73
    db80:	0000da73 	.word	0x0000da73
    db84:	0000dc1f 	.word	0x0000dc1f
    db88:	0000dbc9 	.word	0x0000dbc9
    db8c:	0000dc1f 	.word	0x0000dc1f
    db90:	0000dc1f 	.word	0x0000dc1f
    db94:	0000dc1f 	.word	0x0000dc1f
    db98:	0000dc1f 	.word	0x0000dc1f
    db9c:	0000dc2d 	.word	0x0000dc2d
    dba0:	0000dbf7 	.word	0x0000dbf7
    dba4:	0000dc4d 	.word	0x0000dc4d
    dba8:	0000dc1f 	.word	0x0000dc1f
    dbac:	0000dc1f 	.word	0x0000dc1f
    dbb0:	0000dc4d 	.word	0x0000dc4d
    dbb4:	0000dc1f 	.word	0x0000dc1f
    dbb8:	0000dbf7 	.word	0x0000dbf7
    dbbc:	0000dc1f 	.word	0x0000dc1f
    dbc0:	0000dc1f 	.word	0x0000dc1f
    dbc4:	0000dbf7 	.word	0x0000dbf7
		conv->specifier_cat = SPECIFIER_SINT;
    dbc8:	2101      	movs	r1, #1
    dbca:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
		conv->specifier_cat = SPECIFIER_UINT;
    dbce:	f361 0302 	bfi	r3, r1, #0, #3
    dbd2:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
    dbd6:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    dbda:	f003 0378 	and.w	r3, r3, #120	; 0x78
    dbde:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    dbe0:	bf02      	ittt	eq
    dbe2:	f89d 1060 	ldrbeq.w	r1, [sp, #96]	; 0x60
    dbe6:	f041 0101 	orreq.w	r1, r1, #1
    dbea:	f88d 1060 	strbeq.w	r1, [sp, #96]	; 0x60
		if (conv->specifier == 'c') {
    dbee:	2a63      	cmp	r2, #99	; 0x63
    dbf0:	d005      	beq.n	dbfe <cbvprintf+0x3be>
	bool unsupported = false;
    dbf2:	2300      	movs	r3, #0
    dbf4:	e006      	b.n	dc04 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    dbf6:	2102      	movs	r1, #2
    dbf8:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
    dbfc:	e7e7      	b.n	dbce <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    dbfe:	3b00      	subs	r3, #0
    dc00:	bf18      	it	ne
    dc02:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    dc04:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    dc08:	f3c2 0140 	ubfx	r1, r2, #1, #1
    dc0c:	430b      	orrs	r3, r1
    dc0e:	f363 0241 	bfi	r2, r3, #1, #1
    dc12:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
    dc16:	e6b6      	b.n	d986 <cbvprintf+0x146>
		} else if ((conv->length_mod != LENGTH_NONE)
    dc18:	f013 0f38 	tst.w	r3, #56	; 0x38
    dc1c:	d0e9      	beq.n	dbf2 <cbvprintf+0x3b2>
			conv->invalid = true;
    dc1e:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    dc22:	f043 0301 	orr.w	r3, r3, #1
    dc26:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    dc2a:	e7e2      	b.n	dbf2 <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    dc2c:	2203      	movs	r2, #3
    dc2e:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
    dc32:	f362 0302 	bfi	r3, r2, #0, #3
    dc36:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
    dc3a:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    dc3e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    dc42:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
    dc46:	427b      	negs	r3, r7
    dc48:	417b      	adcs	r3, r7
    dc4a:	e7db      	b.n	dc04 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    dc4c:	2203      	movs	r2, #3
    dc4e:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
    dc52:	f362 0302 	bfi	r3, r2, #0, #3
    dc56:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod != LENGTH_NONE) {
    dc5a:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    dc5e:	f013 0f78 	tst.w	r3, #120	; 0x78
    dc62:	bf14      	ite	ne
    dc64:	2301      	movne	r3, #1
    dc66:	2300      	moveq	r3, #0
    dc68:	e7cc      	b.n	dc04 <cbvprintf+0x3c4>
			unsupported = true;
    dc6a:	2301      	movs	r3, #1
    dc6c:	e7ca      	b.n	dc04 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    dc6e:	f99d 2060 	ldrsb.w	r2, [sp, #96]	; 0x60
    dc72:	2a00      	cmp	r2, #0
		int width = -1;
    dc74:	bfac      	ite	ge
    dc76:	f04f 32ff 	movge.w	r2, #4294967295
			width = conv->width_value;
    dc7a:	9a19      	ldrlt	r2, [sp, #100]	; 0x64
    dc7c:	e695      	b.n	d9aa <cbvprintf+0x16a>
		} else if (conv->prec_present) {
    dc7e:	0799      	lsls	r1, r3, #30
    dc80:	f57f aea2 	bpl.w	d9c8 <cbvprintf+0x188>
			precision = conv->prec_value;
    dc84:	9f1a      	ldr	r7, [sp, #104]	; 0x68
		conv->pad0_value = 0;
    dc86:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    dc88:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
		    && (conv->specifier_cat == SPECIFIER_FP)
    dc8c:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    dc90:	f003 0307 	and.w	r3, r3, #7
    dc94:	2b04      	cmp	r3, #4
    dc96:	d109      	bne.n	dcac <cbvprintf+0x46c>
		    && !conv->prec_present) {
    dc98:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    dc9c:	079a      	lsls	r2, r3, #30
    dc9e:	d405      	bmi.n	dcac <cbvprintf+0x46c>
			if (conv->specifier_a) {
    dca0:	f99d 3061 	ldrsb.w	r3, [sp, #97]	; 0x61
				precision = 6;
    dca4:	2b00      	cmp	r3, #0
    dca6:	bfb4      	ite	lt
    dca8:	270d      	movlt	r7, #13
    dcaa:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
    dcac:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			= (enum length_mod_enum)conv->length_mod;
    dcb0:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
		enum specifier_cat_enum specifier_cat
    dcb4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    dcb8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    dcba:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    dcbe:	d136      	bne.n	dd2e <cbvprintf+0x4ee>
			switch (length_mod) {
    dcc0:	1ecb      	subs	r3, r1, #3
    dcc2:	2b04      	cmp	r3, #4
    dcc4:	d820      	bhi.n	dd08 <cbvprintf+0x4c8>
    dcc6:	e8df f003 	tbb	[pc, r3]
    dcca:	0703      	.short	0x0703
    dccc:	1f07      	.short	0x1f07
    dcce:	1f          	.byte	0x1f
    dccf:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    dcd0:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    dcd4:	17d3      	asrs	r3, r2, #31
    dcd6:	e004      	b.n	dce2 <cbvprintf+0x4a2>
					(sint_value_type)va_arg(ap, intmax_t);
    dcd8:	3407      	adds	r4, #7
    dcda:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    dcde:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    dce2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		if (conv->invalid || conv->unsupported) {
    dce6:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
    dcea:	07b3      	lsls	r3, r6, #30
    dcec:	d055      	beq.n	dd9a <cbvprintf+0x55a>
			OUTS(sp, fp);
    dcee:	464a      	mov	r2, r9
    dcf0:	4641      	mov	r1, r8
    dcf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dcf4:	9803      	ldr	r0, [sp, #12]
    dcf6:	f009 fdb7 	bl	17868 <outs>
    dcfa:	2800      	cmp	r0, #0
    dcfc:	f2c0 83c6 	blt.w	e48c <cbvprintf+0xc4c>
    dd00:	4405      	add	r5, r0
			while (pad_len-- > 0) {
    dd02:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    dd06:	e5a3      	b.n	d850 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    dd08:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    dd0c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    dd0e:	ea4f 73e2 	mov.w	r3, r2, asr #31
    dd12:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
			if (length_mod == LENGTH_HH) {
    dd16:	d105      	bne.n	dd24 <cbvprintf+0x4e4>
				value->uint = (unsigned char)value->uint;
    dd18:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
				value->uint = (unsigned short)value->uint;
    dd1c:	9316      	str	r3, [sp, #88]	; 0x58
    dd1e:	2300      	movs	r3, #0
    dd20:	9317      	str	r3, [sp, #92]	; 0x5c
    dd22:	e7e0      	b.n	dce6 <cbvprintf+0x4a6>
			} else if (length_mod == LENGTH_H) {
    dd24:	2902      	cmp	r1, #2
    dd26:	d1de      	bne.n	dce6 <cbvprintf+0x4a6>
				value->sint = (short)value->sint;
    dd28:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
    dd2c:	e7d2      	b.n	dcd4 <cbvprintf+0x494>
		} else if (specifier_cat == SPECIFIER_UINT) {
    dd2e:	2b02      	cmp	r3, #2
    dd30:	d123      	bne.n	dd7a <cbvprintf+0x53a>
			switch (length_mod) {
    dd32:	1ecb      	subs	r3, r1, #3
    dd34:	2b04      	cmp	r3, #4
    dd36:	d813      	bhi.n	dd60 <cbvprintf+0x520>
    dd38:	e8df f003 	tbb	[pc, r3]
    dd3c:	120a0a03 	.word	0x120a0a03
    dd40:	12          	.byte	0x12
    dd41:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    dd42:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    dd44:	6822      	ldr	r2, [r4, #0]
    dd46:	1d20      	adds	r0, r4, #4
    dd48:	9216      	str	r2, [sp, #88]	; 0x58
    dd4a:	9317      	str	r3, [sp, #92]	; 0x5c
					(uint_value_type)va_arg(ap, size_t);
    dd4c:	4604      	mov	r4, r0
    dd4e:	e7ca      	b.n	dce6 <cbvprintf+0x4a6>
					(uint_value_type)va_arg(ap,
    dd50:	3407      	adds	r4, #7
    dd52:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    dd56:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    dd5a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				break;
    dd5e:	e7f5      	b.n	dd4c <cbvprintf+0x50c>
					(uint_value_type)va_arg(ap, size_t);
    dd60:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    dd64:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    dd66:	9316      	str	r3, [sp, #88]	; 0x58
    dd68:	f04f 0300 	mov.w	r3, #0
    dd6c:	9317      	str	r3, [sp, #92]	; 0x5c
			if (length_mod == LENGTH_HH) {
    dd6e:	d0d3      	beq.n	dd18 <cbvprintf+0x4d8>
			} else if (length_mod == LENGTH_H) {
    dd70:	2902      	cmp	r1, #2
    dd72:	d1b8      	bne.n	dce6 <cbvprintf+0x4a6>
				value->uint = (unsigned short)value->uint;
    dd74:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    dd78:	e7d0      	b.n	dd1c <cbvprintf+0x4dc>
		} else if (specifier_cat == SPECIFIER_FP) {
    dd7a:	2b04      	cmp	r3, #4
    dd7c:	d107      	bne.n	dd8e <cbvprintf+0x54e>
			if (length_mod == LENGTH_UPPER_L) {
    dd7e:	3407      	adds	r4, #7
    dd80:	f024 0407 	bic.w	r4, r4, #7
    dd84:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    dd88:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    dd8c:	e7ab      	b.n	dce6 <cbvprintf+0x4a6>
		} else if (specifier_cat == SPECIFIER_PTR) {
    dd8e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    dd90:	bf04      	itt	eq
    dd92:	f854 3b04 	ldreq.w	r3, [r4], #4
    dd96:	9316      	streq	r3, [sp, #88]	; 0x58
    dd98:	e7a5      	b.n	dce6 <cbvprintf+0x4a6>
		switch (conv->specifier) {
    dd9a:	f89d 9063 	ldrb.w	r9, [sp, #99]	; 0x63
    dd9e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    dda2:	d8ae      	bhi.n	dd02 <cbvprintf+0x4c2>
    dda4:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
    dda8:	f200 80a7 	bhi.w	defa <cbvprintf+0x6ba>
    ddac:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    ddb0:	f000 80ee 	beq.w	df90 <cbvprintf+0x750>
    ddb4:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
    ddb8:	d9a3      	bls.n	dd02 <cbvprintf+0x4c2>
    ddba:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    ddbe:	d003      	beq.n	ddc8 <cbvprintf+0x588>
    ddc0:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
    ddc4:	2b02      	cmp	r3, #2
    ddc6:	d89c      	bhi.n	dd02 <cbvprintf+0x4c2>
	} u = {
    ddc8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
	if ((u.u64 & SIGN_MASK) != 0U) {
    ddcc:	2a00      	cmp	r2, #0
    ddce:	f173 0100 	sbcs.w	r1, r3, #0
    ddd2:	f2c0 81d5 	blt.w	e180 <cbvprintf+0x940>
	} else if (conv->flag_plus) {
    ddd6:	0731      	lsls	r1, r6, #28
    ddd8:	f100 81d4 	bmi.w	e184 <cbvprintf+0x944>
		*sign = ' ';
    dddc:	f016 0610 	ands.w	r6, r6, #16
    dde0:	bf18      	it	ne
    dde2:	2620      	movne	r6, #32
	int exp = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    dde4:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    dde8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ddec:	9206      	str	r2, [sp, #24]
    ddee:	9307      	str	r3, [sp, #28]
    ddf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ddf4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	bool is_subnormal = (exp == 0) && (fract != 0);
    ddf8:	f1bb 0f00 	cmp.w	fp, #0
    ddfc:	f040 81c4 	bne.w	e188 <cbvprintf+0x948>
    de00:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
    de04:	4313      	orrs	r3, r2
    de06:	bf14      	ite	ne
    de08:	f04f 0c01 	movne.w	ip, #1
    de0c:	f04f 0c00 	moveq.w	ip, #0
	if ((exp | fract) != 0) {
    de10:	4658      	mov	r0, fp
	fract <<= EXPONENT_BITS;
    de12:	9907      	ldr	r1, [sp, #28]
		c = 'f';
    de14:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
	fract <<= EXPONENT_BITS;
    de18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    de1c:	9906      	ldr	r1, [sp, #24]
		c = 'f';
    de1e:	bf08      	it	eq
    de20:	f04f 0966 	moveq.w	r9, #102	; 0x66
	fract <<= EXPONENT_BITS;
    de24:	02ca      	lsls	r2, r1, #11
    de26:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((exp | fract) != 0) {
    de2a:	ea4b 0102 	orr.w	r1, fp, r2
    de2e:	910c      	str	r1, [sp, #48]	; 0x30
    de30:	17c1      	asrs	r1, r0, #31
    de32:	4319      	orrs	r1, r3
    de34:	910d      	str	r1, [sp, #52]	; 0x34
    de36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    de3a:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
    de3c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	if ((exp | fract) != 0) {
    de40:	f000 8215 	beq.w	e26e <cbvprintf+0xa2e>
		if (is_subnormal) {
    de44:	f1bc 0f00 	cmp.w	ip, #0
    de48:	f040 81d5 	bne.w	e1f6 <cbvprintf+0x9b6>
		fract |= BIT_63;
    de4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
		fract *= 5U;
    de4e:	2105      	movs	r1, #5
		fract |= BIT_63;
    de50:	9304      	str	r3, [sp, #16]
    de52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    de54:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
    de58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    de5c:	9305      	str	r3, [sp, #20]
    de5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    de62:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    de66:	2300      	movs	r3, #0
    de68:	461a      	mov	r2, r3
	while (exp < -2) {
    de6a:	f11b 0f02 	cmn.w	fp, #2
    de6e:	f2c0 81cb 	blt.w	e208 <cbvprintf+0x9c8>
    de72:	b11b      	cbz	r3, de7c <cbvprintf+0x63c>
    de74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    de78:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (exp > 0) {
    de7c:	e9dd 3112 	ldrd	r3, r1, [sp, #72]	; 0x48
    de80:	f1bb 0f00 	cmp.w	fp, #0
    de84:	f300 81db 	bgt.w	e23e <cbvprintf+0x9fe>
	fract >>= (4 - exp);
    de88:	9913      	ldr	r1, [sp, #76]	; 0x4c
    de8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    de8c:	f1cb 0004 	rsb	r0, fp, #4
    de90:	f10b 0b1c 	add.w	fp, fp, #28
    de94:	fa01 fb0b 	lsl.w	fp, r1, fp
    de98:	f1a0 0c20 	sub.w	ip, r0, #32
    de9c:	40c3      	lsrs	r3, r0
    de9e:	fa21 fc0c 	lsr.w	ip, r1, ip
    dea2:	ea43 030b 	orr.w	r3, r3, fp
    dea6:	ea43 030c 	orr.w	r3, r3, ip
    deaa:	40c1      	lsrs	r1, r0
    deac:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	if ((c == 'g') || (c == 'G')) {
    deb0:	f009 03df 	and.w	r3, r9, #223	; 0xdf
    deb4:	2b47      	cmp	r3, #71	; 0x47
    deb6:	f040 81e1 	bne.w	e27c <cbvprintf+0xa3c>
		if (decexp < (-4 + 1) || decexp > precision) {
    deba:	1cd0      	adds	r0, r2, #3
    debc:	db02      	blt.n	dec4 <cbvprintf+0x684>
    debe:	4297      	cmp	r7, r2
    dec0:	f280 81d8 	bge.w	e274 <cbvprintf+0xa34>
			c += 'e' - 'g';  /* e or E */
    dec4:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
    dec8:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    deca:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
    dece:	dd00      	ble.n	ded2 <cbvprintf+0x692>
				precision--;
    ded0:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
    ded2:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    ded6:	0699      	lsls	r1, r3, #26
    ded8:	f100 81d0 	bmi.w	e27c <cbvprintf+0xa3c>
    dedc:	2f00      	cmp	r7, #0
    dede:	bfd4      	ite	le
    dee0:	2300      	movle	r3, #0
    dee2:	2301      	movgt	r3, #1
	if (c == 'f') {
    dee4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
    dee8:	930e      	str	r3, [sp, #56]	; 0x38
	if (c == 'f') {
    deea:	f040 81c9 	bne.w	e280 <cbvprintf+0xa40>
		if (decimals < 0) {
    deee:	18bb      	adds	r3, r7, r2
    def0:	f140 81c7 	bpl.w	e282 <cbvprintf+0xa42>
			decimals = 0;
    def4:	f04f 0a00 	mov.w	sl, #0
    def8:	e1c7      	b.n	e28a <cbvprintf+0xa4a>
    defa:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
    defe:	2b20      	cmp	r3, #32
    df00:	f63f aeff 	bhi.w	dd02 <cbvprintf+0x4c2>
    df04:	a201      	add	r2, pc, #4	; (adr r2, df0c <cbvprintf+0x6cc>)
    df06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    df0a:	bf00      	nop
    df0c:	0000e121 	.word	0x0000e121
    df10:	0000dd03 	.word	0x0000dd03
    df14:	0000dd03 	.word	0x0000dd03
    df18:	0000dd03 	.word	0x0000dd03
    df1c:	0000dd03 	.word	0x0000dd03
    df20:	0000dd03 	.word	0x0000dd03
    df24:	0000dd03 	.word	0x0000dd03
    df28:	0000dd03 	.word	0x0000dd03
    df2c:	0000dd03 	.word	0x0000dd03
    df30:	0000ddc9 	.word	0x0000ddc9
    df34:	0000dd03 	.word	0x0000dd03
    df38:	0000dfbd 	.word	0x0000dfbd
    df3c:	0000e0c1 	.word	0x0000e0c1
    df40:	0000ddc9 	.word	0x0000ddc9
    df44:	0000ddc9 	.word	0x0000ddc9
    df48:	0000ddc9 	.word	0x0000ddc9
    df4c:	0000dd03 	.word	0x0000dd03
    df50:	0000e0c1 	.word	0x0000e0c1
    df54:	0000dd03 	.word	0x0000dd03
    df58:	0000dd03 	.word	0x0000dd03
    df5c:	0000dd03 	.word	0x0000dd03
    df60:	0000dd03 	.word	0x0000dd03
    df64:	0000e157 	.word	0x0000e157
    df68:	0000e121 	.word	0x0000e121
    df6c:	0000e125 	.word	0x0000e125
    df70:	0000dd03 	.word	0x0000dd03
    df74:	0000dd03 	.word	0x0000dd03
    df78:	0000df97 	.word	0x0000df97
    df7c:	0000dd03 	.word	0x0000dd03
    df80:	0000e121 	.word	0x0000e121
    df84:	0000dd03 	.word	0x0000dd03
    df88:	0000dd03 	.word	0x0000dd03
    df8c:	0000e121 	.word	0x0000e121
			OUTC('%');
    df90:	4641      	mov	r1, r8
    df92:	4648      	mov	r0, r9
    df94:	e468      	b.n	d868 <cbvprintf+0x28>
			if (precision >= 0) {
    df96:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    df98:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
			if (precision >= 0) {
    df9c:	db0a      	blt.n	dfb4 <cbvprintf+0x774>
				len = strnlen(bps, precision);
    df9e:	4639      	mov	r1, r7
    dfa0:	4648      	mov	r0, r9
    dfa2:	f009 ff67 	bl	17e74 <strnlen>
		char sign = 0;
    dfa6:	2600      	movs	r6, #0
			bpe = bps + len;
    dfa8:	eb09 0a00 	add.w	sl, r9, r0
		if (bps == NULL) {
    dfac:	f1b9 0f00 	cmp.w	r9, #0
    dfb0:	d10c      	bne.n	dfcc <cbvprintf+0x78c>
    dfb2:	e6a6      	b.n	dd02 <cbvprintf+0x4c2>
				len = strlen(bps);
    dfb4:	4648      	mov	r0, r9
    dfb6:	f009 ff56 	bl	17e66 <strlen>
    dfba:	e7f4      	b.n	dfa6 <cbvprintf+0x766>
		char sign = 0;
    dfbc:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    dfbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
			bpe = buf + 1;
    dfc0:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    dfc4:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
				bps = encode_float(value->dbl, conv, precision,
    dfc8:	f10d 0974 	add.w	r9, sp, #116	; 0x74
		size_t nj_len = (bpe - bps);
    dfcc:	ebaa 0209 	sub.w	r2, sl, r9
		if (sign != 0) {
    dfd0:	b106      	cbz	r6, dfd4 <cbvprintf+0x794>
			nj_len += 1U;
    dfd2:	3201      	adds	r2, #1
		if (conv->altform_0c) {
    dfd4:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    dfd8:	06c3      	lsls	r3, r0, #27
    dfda:	f140 824c 	bpl.w	e476 <cbvprintf+0xc36>
			nj_len += 2U;
    dfde:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
    dfe0:	9919      	ldr	r1, [sp, #100]	; 0x64
		if (conv->pad_fp) {
    dfe2:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    dfe4:	440a      	add	r2, r1
		if (width > 0) {
    dfe6:	9b08      	ldr	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
    dfe8:	bf44      	itt	mi
    dfea:	991a      	ldrmi	r1, [sp, #104]	; 0x68
    dfec:	1852      	addmi	r2, r2, r1
		if (width > 0) {
    dfee:	2b00      	cmp	r3, #0
    dff0:	dd25      	ble.n	e03e <cbvprintf+0x7fe>
			width -= (int)nj_len;
    dff2:	1a9b      	subs	r3, r3, r2
			if (!conv->flag_dash) {
    dff4:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    dff8:	0751      	lsls	r1, r2, #29
    dffa:	f3c2 0b80 	ubfx	fp, r2, #2, #1
    dffe:	f100 824c 	bmi.w	e49a <cbvprintf+0xc5a>
				if (conv->flag_zero) {
    e002:	0657      	lsls	r7, r2, #25
    e004:	f140 8245 	bpl.w	e492 <cbvprintf+0xc52>
					if (sign != 0) {
    e008:	2e00      	cmp	r6, #0
    e00a:	f000 8244 	beq.w	e496 <cbvprintf+0xc56>
    e00e:	9308      	str	r3, [sp, #32]
						OUTC(sign);
    e010:	4641      	mov	r1, r8
    e012:	4630      	mov	r0, r6
    e014:	9b03      	ldr	r3, [sp, #12]
    e016:	4798      	blx	r3
    e018:	2800      	cmp	r0, #0
    e01a:	f2c0 8237 	blt.w	e48c <cbvprintf+0xc4c>
						sign = 0;
    e01e:	465e      	mov	r6, fp
					pad = '0';
    e020:	2730      	movs	r7, #48	; 0x30
    e022:	9b08      	ldr	r3, [sp, #32]
						OUTC(sign);
    e024:	3501      	adds	r5, #1
					pad = '0';
    e026:	9308      	str	r3, [sp, #32]
    e028:	eb03 0b05 	add.w	fp, r3, r5
    e02c:	9b08      	ldr	r3, [sp, #32]
    e02e:	ebab 0503 	sub.w	r5, fp, r3
				while (width-- > 0) {
    e032:	2b00      	cmp	r3, #0
    e034:	f103 33ff 	add.w	r3, r3, #4294967295
    e038:	9308      	str	r3, [sp, #32]
    e03a:	f300 8220 	bgt.w	e47e <cbvprintf+0xc3e>
		if (sign != 0) {
    e03e:	b13e      	cbz	r6, e050 <cbvprintf+0x810>
			OUTC(sign);
    e040:	4641      	mov	r1, r8
    e042:	4630      	mov	r0, r6
    e044:	9b03      	ldr	r3, [sp, #12]
    e046:	4798      	blx	r3
    e048:	2800      	cmp	r0, #0
    e04a:	f2c0 821f 	blt.w	e48c <cbvprintf+0xc4c>
    e04e:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    e050:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
    e054:	0656      	lsls	r6, r2, #25
    e056:	f140 827e 	bpl.w	e556 <cbvprintf+0xd16>
			if (conv->specifier_a) {
    e05a:	f99d 2061 	ldrsb.w	r2, [sp, #97]	; 0x61
    e05e:	2a00      	cmp	r2, #0
    e060:	f2c0 821d 	blt.w	e49e <cbvprintf+0xc5e>
    e064:	eba5 0509 	sub.w	r5, r5, r9
				while (isdigit((int)*cp)) {
    e068:	f899 0000 	ldrb.w	r0, [r9]
    e06c:	464f      	mov	r7, r9
    e06e:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    e072:	2a09      	cmp	r2, #9
    e074:	eb05 0b09 	add.w	fp, r5, r9
    e078:	f109 0901 	add.w	r9, r9, #1
    e07c:	f240 823f 	bls.w	e4fe <cbvprintf+0xcbe>
				if (!conv->pad_postdp) {
    e080:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
				pad_len = conv->pad0_value;
    e084:	9e19      	ldr	r6, [sp, #100]	; 0x64
				if (!conv->pad_postdp) {
    e086:	0690      	lsls	r0, r2, #26
    e088:	d408      	bmi.n	e09c <cbvprintf+0x85c>
    e08a:	eb06 090b 	add.w	r9, r6, fp
					while (pad_len-- > 0) {
    e08e:	2e00      	cmp	r6, #0
    e090:	eba9 0b06 	sub.w	fp, r9, r6
    e094:	f106 36ff 	add.w	r6, r6, #4294967295
    e098:	f300 8238 	bgt.w	e50c <cbvprintf+0xccc>
				if (*cp == '.') {
    e09c:	7838      	ldrb	r0, [r7, #0]
    e09e:	282e      	cmp	r0, #46	; 0x2e
    e0a0:	d10b      	bne.n	e0ba <cbvprintf+0x87a>
					OUTC(*cp++);
    e0a2:	4641      	mov	r1, r8
    e0a4:	9b03      	ldr	r3, [sp, #12]
    e0a6:	4798      	blx	r3
						OUTC('0');
    e0a8:	2800      	cmp	r0, #0
    e0aa:	f2c0 81ef 	blt.w	e48c <cbvprintf+0xc4c>
					while (pad_len-- > 0) {
    e0ae:	2e00      	cmp	r6, #0
						OUTC('0');
    e0b0:	f10b 0b01 	add.w	fp, fp, #1
					while (pad_len-- > 0) {
    e0b4:	f300 8232 	bgt.w	e51c <cbvprintf+0xcdc>
					OUTC(*cp++);
    e0b8:	3701      	adds	r7, #1
    e0ba:	ebab 0b07 	sub.w	fp, fp, r7
    e0be:	e238      	b.n	e532 <cbvprintf+0xcf2>
			if (conv->flag_plus) {
    e0c0:	0730      	lsls	r0, r6, #28
    e0c2:	d42b      	bmi.n	e11c <cbvprintf+0x8dc>
				sign = ' ';
    e0c4:	f016 0610 	ands.w	r6, r6, #16
    e0c8:	bf18      	it	ne
    e0ca:	2620      	movne	r6, #32
			if (value->sint < 0) {
    e0cc:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    e0d0:	2a00      	cmp	r2, #0
    e0d2:	f173 0100 	sbcs.w	r1, r3, #0
    e0d6:	da05      	bge.n	e0e4 <cbvprintf+0x8a4>
				sign = '-';
    e0d8:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    e0da:	4252      	negs	r2, r2
    e0dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    e0e0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
			bps = encode_uint(value->uint, conv, buf, bpe);
    e0e4:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    e0e8:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
    e0ec:	9300      	str	r3, [sp, #0]
    e0ee:	aa18      	add	r2, sp, #96	; 0x60
    e0f0:	ab1d      	add	r3, sp, #116	; 0x74
    e0f2:	f009 fb6e 	bl	177d2 <encode_uint>
    e0f6:	4681      	mov	r9, r0
			if (precision >= 0) {
    e0f8:	2f00      	cmp	r7, #0
    e0fa:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
    e0fe:	db0b      	blt.n	e118 <cbvprintf+0x8d8>
				conv->flag_zero = false;
    e100:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
				size_t len = bpe - bps;
    e104:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
    e108:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    e10c:	4297      	cmp	r7, r2
				conv->flag_zero = false;
    e10e:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
				if (len < (size_t)precision) {
    e112:	d901      	bls.n	e118 <cbvprintf+0x8d8>
					conv->pad0_value = precision - (int)len;
    e114:	1abf      	subs	r7, r7, r2
    e116:	9719      	str	r7, [sp, #100]	; 0x64
		const char *bpe = buf + sizeof(buf);
    e118:	469a      	mov	sl, r3
    e11a:	e747      	b.n	dfac <cbvprintf+0x76c>
				sign = '+';
    e11c:	262b      	movs	r6, #43	; 0x2b
    e11e:	e7d5      	b.n	e0cc <cbvprintf+0x88c>
		switch (conv->specifier) {
    e120:	2600      	movs	r6, #0
    e122:	e7df      	b.n	e0e4 <cbvprintf+0x8a4>
			if (value->ptr != NULL) {
    e124:	9816      	ldr	r0, [sp, #88]	; 0x58
    e126:	2800      	cmp	r0, #0
    e128:	f000 819f 	beq.w	e46a <cbvprintf+0xc2a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    e12c:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
    e130:	9300      	str	r3, [sp, #0]
    e132:	2100      	movs	r1, #0
    e134:	ab1d      	add	r3, sp, #116	; 0x74
    e136:	aa18      	add	r2, sp, #96	; 0x60
    e138:	f009 fb4b 	bl	177d2 <encode_uint>
				conv->altform_0c = true;
    e13c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
				bps = encode_uint((uintptr_t)value->ptr, conv,
    e140:	4681      	mov	r9, r0
				conv->altform_0c = true;
    e142:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    e146:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    e14a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    e14e:	2600      	movs	r6, #0
				conv->altform_0c = true;
    e150:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
				goto prec_int_pad0;
    e154:	e7d0      	b.n	e0f8 <cbvprintf+0x8b8>
				store_count(conv, value->ptr, count);
    e156:	9b16      	ldr	r3, [sp, #88]	; 0x58
	switch ((enum length_mod_enum)conv->length_mod) {
    e158:	2907      	cmp	r1, #7
    e15a:	f63f add2 	bhi.w	dd02 <cbvprintf+0x4c2>
    e15e:	e8df f001 	tbb	[pc, r1]
    e162:	040d      	.short	0x040d
    e164:	08080d06 	.word	0x08080d06
    e168:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    e16a:	701d      	strb	r5, [r3, #0]
		break;
    e16c:	e5c9      	b.n	dd02 <cbvprintf+0x4c2>
		*(short *)dp = (short)count;
    e16e:	801d      	strh	r5, [r3, #0]
		break;
    e170:	e5c7      	b.n	dd02 <cbvprintf+0x4c2>
		*(intmax_t *)dp = (intmax_t)count;
    e172:	4628      	mov	r0, r5
    e174:	17e9      	asrs	r1, r5, #31
    e176:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    e17a:	e5c2      	b.n	dd02 <cbvprintf+0x4c2>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    e17c:	601d      	str	r5, [r3, #0]
		break;
    e17e:	e5c0      	b.n	dd02 <cbvprintf+0x4c2>
		*sign = '-';
    e180:	262d      	movs	r6, #45	; 0x2d
    e182:	e62f      	b.n	dde4 <cbvprintf+0x5a4>
		*sign = '+';
    e184:	262b      	movs	r6, #43	; 0x2b
    e186:	e62d      	b.n	dde4 <cbvprintf+0x5a4>
	if (exp == BIT_MASK(EXPONENT_BITS)) {
    e188:	f240 73ff 	movw	r3, #2047	; 0x7ff
    e18c:	459b      	cmp	fp, r3
    e18e:	d12d      	bne.n	e1ec <cbvprintf+0x9ac>
		if (fract == 0) {
    e190:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    e194:	4313      	orrs	r3, r2
    e196:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
    e19a:	d118      	bne.n	e1ce <cbvprintf+0x98e>
			if (isupper((int)c)) {
    e19c:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'I';
    e1a0:	bf95      	itete	ls
    e1a2:	f644 6349 	movwls	r3, #20041	; 0x4e49
				*buf++ = 'i';
    e1a6:	f646 6369 	movwhi	r3, #28265	; 0x6e69
				*buf++ = 'I';
    e1aa:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'i';
    e1ae:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'F';
    e1b2:	bf94      	ite	ls
    e1b4:	2346      	movls	r3, #70	; 0x46
				*buf++ = 'f';
    e1b6:	2366      	movhi	r3, #102	; 0x66
				*buf++ = 'n';
    e1b8:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
		conv->flag_zero = false;
    e1bc:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
		*bpe = buf;
    e1c0:	f10d 0a77 	add.w	sl, sp, #119	; 0x77
		conv->flag_zero = false;
    e1c4:	f36f 1386 	bfc	r3, #6, #1
    e1c8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		return bps;
    e1cc:	e6fc      	b.n	dfc8 <cbvprintf+0x788>
			if (isupper((int)c)) {
    e1ce:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'N';
    e1d2:	bf95      	itete	ls
    e1d4:	f244 134e 	movwls	r3, #16718	; 0x414e
				*buf++ = 'n';
    e1d8:	f246 136e 	movwhi	r3, #24942	; 0x616e
				*buf++ = 'N';
    e1dc:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'n';
    e1e0:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'N';
    e1e4:	bf94      	ite	ls
    e1e6:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'n';
    e1e8:	236e      	movhi	r3, #110	; 0x6e
    e1ea:	e7e5      	b.n	e1b8 <cbvprintf+0x978>
	bool is_subnormal = (exp == 0) && (fract != 0);
    e1ec:	f04f 0c00 	mov.w	ip, #0
    e1f0:	e60e      	b.n	de10 <cbvprintf+0x5d0>
				exp--;
    e1f2:	f10b 3bff 	add.w	fp, fp, #4294967295
			while (((fract <<= 1) & BIT_63) == 0) {
    e1f6:	1892      	adds	r2, r2, r2
    e1f8:	415b      	adcs	r3, r3
    e1fa:	2a00      	cmp	r2, #0
    e1fc:	f173 0100 	sbcs.w	r1, r3, #0
    e200:	daf7      	bge.n	e1f2 <cbvprintf+0x9b2>
    e202:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    e206:	e621      	b.n	de4c <cbvprintf+0x60c>
			fract >>= 1;
    e208:	9b04      	ldr	r3, [sp, #16]
    e20a:	9805      	ldr	r0, [sp, #20]
    e20c:	085b      	lsrs	r3, r3, #1
    e20e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    e212:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    e214:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
    e218:	46dc      	mov	ip, fp
			fract >>= 1;
    e21a:	e9cd 3004 	strd	r3, r0, [sp, #16]
			exp++;
    e21e:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    e222:	d2f1      	bcs.n	e208 <cbvprintf+0x9c8>
		fract *= 5U;
    e224:	fba3 ab01 	umull	sl, fp, r3, r1
    e228:	4348      	muls	r0, r1
    e22a:	e9cd ab04 	strd	sl, fp, [sp, #16]
    e22e:	9b05      	ldr	r3, [sp, #20]
		exp++;
    e230:	f10c 0b02 	add.w	fp, ip, #2
		fract *= 5U;
    e234:	18c3      	adds	r3, r0, r3
    e236:	9305      	str	r3, [sp, #20]
		decexp--;
    e238:	3a01      	subs	r2, #1
    e23a:	2301      	movs	r3, #1
    e23c:	e615      	b.n	de6a <cbvprintf+0x62a>
		fract += 2;
    e23e:	3302      	adds	r3, #2
    e240:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    e244:	a812      	add	r0, sp, #72	; 0x48
		fract += 2;
    e246:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
    e24a:	920e      	str	r2, [sp, #56]	; 0x38
		_ldiv5(&fract);
    e24c:	f009 fa8b 	bl	17766 <_ldiv5>
		exp--;
    e250:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
		decexp++;
    e254:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		exp--;
    e256:	f10b 3bff 	add.w	fp, fp, #4294967295
		decexp++;
    e25a:	3201      	adds	r2, #1
			fract <<= 1;
    e25c:	1800      	adds	r0, r0, r0
    e25e:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    e260:	2800      	cmp	r0, #0
    e262:	f171 0300 	sbcs.w	r3, r1, #0
			exp--;
    e266:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (!(fract & BIT_63));
    e26a:	daf7      	bge.n	e25c <cbvprintf+0xa1c>
    e26c:	e604      	b.n	de78 <cbvprintf+0x638>
    e26e:	2200      	movs	r2, #0
    e270:	4693      	mov	fp, r2
    e272:	e609      	b.n	de88 <cbvprintf+0x648>
			c = 'f';
    e274:	f04f 0966 	mov.w	r9, #102	; 0x66
			precision -= decexp;
    e278:	1abf      	subs	r7, r7, r2
    e27a:	e62a      	b.n	ded2 <cbvprintf+0x692>
	bool prune_zero = false;
    e27c:	2300      	movs	r3, #0
    e27e:	e631      	b.n	dee4 <cbvprintf+0x6a4>
		decimals = precision + 1;
    e280:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
    e282:	2b10      	cmp	r3, #16
    e284:	bfa8      	it	ge
    e286:	2310      	movge	r3, #16
    e288:	469a      	mov	sl, r3
    e28a:	2110      	movs	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
    e28c:	2000      	movs	r0, #0
    e28e:	9111      	str	r1, [sp, #68]	; 0x44
    e290:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    e294:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	while (decimals--) {
    e298:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
    e29c:	f10a 3aff 	add.w	sl, sl, #4294967295
    e2a0:	f1ba 3fff 	cmp.w	sl, #4294967295
    e2a4:	d11f      	bne.n	e2e6 <cbvprintf+0xaa6>
	fract += round;
    e2a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e2a8:	18cb      	adds	r3, r1, r3
    e2aa:	930a      	str	r3, [sp, #40]	; 0x28
    e2ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	if (fract >= BIT64(60)) {
    e2ae:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
	fract += round;
    e2b2:	eb40 0303 	adc.w	r3, r0, r3
	if (fract >= BIT64(60)) {
    e2b6:	f04f 30ff 	mov.w	r0, #4294967295
	fract += round;
    e2ba:	930b      	str	r3, [sp, #44]	; 0x2c
	if (fract >= BIT64(60)) {
    e2bc:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    e2c0:	4559      	cmp	r1, fp
    e2c2:	bf08      	it	eq
    e2c4:	4550      	cmpeq	r0, sl
    e2c6:	d31a      	bcc.n	e2fe <cbvprintf+0xabe>
	fract += round;
    e2c8:	4650      	mov	r0, sl
    e2ca:	4659      	mov	r1, fp
    e2cc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	if (c == 'f') {
    e2d0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
    e2d4:	d153      	bne.n	e37e <cbvprintf+0xb3e>
		if (decexp > 0) {
    e2d6:	2a00      	cmp	r2, #0
    e2d8:	dc20      	bgt.n	e31c <cbvprintf+0xadc>
			*buf++ = '0';
    e2da:	2330      	movs	r3, #48	; 0x30
    e2dc:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
    e2e0:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    e2e4:	e02b      	b.n	e33e <cbvprintf+0xafe>
	*v >>= 1;
    e2e6:	0849      	lsrs	r1, r1, #1
    e2e8:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    e2ec:	0840      	lsrs	r0, r0, #1
    e2ee:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
	_ldiv5(v);
    e2f2:	a814      	add	r0, sp, #80	; 0x50
    e2f4:	920f      	str	r2, [sp, #60]	; 0x3c
    e2f6:	f009 fa36 	bl	17766 <_ldiv5>
    e2fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
}
    e2fc:	e7cc      	b.n	e298 <cbvprintf+0xa58>
	*v >>= 1;
    e2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e300:	920f      	str	r2, [sp, #60]	; 0x3c
    e302:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e304:	085b      	lsrs	r3, r3, #1
    e306:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
    e30a:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
    e30c:	a812      	add	r0, sp, #72	; 0x48
	*v >>= 1;
    e30e:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	_ldiv5(v);
    e312:	f009 fa28 	bl	17766 <_ldiv5>
		decexp++;
    e316:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e318:	3201      	adds	r2, #1
    e31a:	e7d9      	b.n	e2d0 <cbvprintf+0xa90>
	char *buf = bps;
    e31c:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
			while (decexp > 0 && digit_count > 0) {
    e320:	9911      	ldr	r1, [sp, #68]	; 0x44
    e322:	2900      	cmp	r1, #0
    e324:	dd09      	ble.n	e33a <cbvprintf+0xafa>
				*buf++ = _get_digit(&fract, &digit_count);
    e326:	a911      	add	r1, sp, #68	; 0x44
    e328:	a812      	add	r0, sp, #72	; 0x48
    e32a:	920f      	str	r2, [sp, #60]	; 0x3c
    e32c:	f009 fa3a 	bl	177a4 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    e330:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
				*buf++ = _get_digit(&fract, &digit_count);
    e332:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0 && digit_count > 0) {
    e336:	3a01      	subs	r2, #1
    e338:	d1f2      	bne.n	e320 <cbvprintf+0xae0>
			conv->pad0_value = decexp;
    e33a:	9219      	str	r2, [sp, #100]	; 0x64
			decexp = 0;
    e33c:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
    e33e:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
    e342:	0688      	lsls	r0, r1, #26
    e344:	d401      	bmi.n	e34a <cbvprintf+0xb0a>
    e346:	2f00      	cmp	r7, #0
    e348:	dd3f      	ble.n	e3ca <cbvprintf+0xb8a>
			*buf++ = '.';
    e34a:	4653      	mov	r3, sl
    e34c:	212e      	movs	r1, #46	; 0x2e
    e34e:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
    e352:	b192      	cbz	r2, e37a <cbvprintf+0xb3a>
    e354:	2f00      	cmp	r7, #0
    e356:	dd76      	ble.n	e446 <cbvprintf+0xc06>
			conv->pad0_value = -decexp;
    e358:	4251      	negs	r1, r2
    e35a:	42b9      	cmp	r1, r7
    e35c:	bfa8      	it	ge
    e35e:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    e360:	2900      	cmp	r1, #0
			conv->pad0_value = -decexp;
    e362:	9119      	str	r1, [sp, #100]	; 0x64
			precision -= conv->pad0_value;
    e364:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    e368:	bfd4      	ite	le
    e36a:	2100      	movle	r1, #0
    e36c:	2101      	movgt	r1, #1
    e36e:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    e372:	f361 1045 	bfi	r0, r1, #5, #1
    e376:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
			*buf++ = '.';
    e37a:	469a      	mov	sl, r3
    e37c:	e020      	b.n	e3c0 <cbvprintf+0xb80>
		*buf = _get_digit(&fract, &digit_count);
    e37e:	a911      	add	r1, sp, #68	; 0x44
    e380:	a812      	add	r0, sp, #72	; 0x48
    e382:	920f      	str	r2, [sp, #60]	; 0x3c
    e384:	f009 fa0e 	bl	177a4 <_get_digit>
		if (*buf++ != '0') {
    e388:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		if (conv->flag_hash || (precision > 0)) {
    e38a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
		if (*buf++ != '0') {
    e38e:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    e390:	bf18      	it	ne
    e392:	f102 32ff 	addne.w	r2, r2, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    e396:	0699      	lsls	r1, r3, #26
		*buf = _get_digit(&fract, &digit_count);
    e398:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
		if (conv->flag_hash || (precision > 0)) {
    e39c:	d401      	bmi.n	e3a2 <cbvprintf+0xb62>
    e39e:	2f00      	cmp	r7, #0
    e3a0:	dd53      	ble.n	e44a <cbvprintf+0xc0a>
			*buf++ = '.';
    e3a2:	232e      	movs	r3, #46	; 0x2e
    e3a4:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    e3a8:	f10d 0376 	add.w	r3, sp, #118	; 0x76
    e3ac:	e7e5      	b.n	e37a <cbvprintf+0xb3a>
		*buf++ = _get_digit(&fract, &digit_count);
    e3ae:	a911      	add	r1, sp, #68	; 0x44
    e3b0:	a812      	add	r0, sp, #72	; 0x48
    e3b2:	920f      	str	r2, [sp, #60]	; 0x3c
    e3b4:	f009 f9f6 	bl	177a4 <_get_digit>
    e3b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e3ba:	f80a 0b01 	strb.w	r0, [sl], #1
		precision--;
    e3be:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
    e3c0:	2f00      	cmp	r7, #0
    e3c2:	dd02      	ble.n	e3ca <cbvprintf+0xb8a>
    e3c4:	9911      	ldr	r1, [sp, #68]	; 0x44
    e3c6:	2900      	cmp	r1, #0
    e3c8:	dcf1      	bgt.n	e3ae <cbvprintf+0xb6e>
	if (prune_zero) {
    e3ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e3cc:	2b00      	cmp	r3, #0
    e3ce:	d13f      	bne.n	e450 <cbvprintf+0xc10>
	conv->pad0_pre_exp = precision;
    e3d0:	971a      	str	r7, [sp, #104]	; 0x68
	if ((c == 'e') || (c == 'E')) {
    e3d2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
    e3d6:	2945      	cmp	r1, #69	; 0x45
    e3d8:	d123      	bne.n	e422 <cbvprintf+0xbe2>
		if (decexp < 0) {
    e3da:	2a00      	cmp	r2, #0
			*buf++ = '-';
    e3dc:	bfb4      	ite	lt
    e3de:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
    e3e0:	212b      	movge	r1, #43	; 0x2b
		*buf++ = c;
    e3e2:	4650      	mov	r0, sl
			decexp = -decexp;
    e3e4:	bfb8      	it	lt
    e3e6:	4252      	neglt	r2, r2
		if (decexp >= 100) {
    e3e8:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
    e3ea:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
    e3ee:	f88a 1001 	strb.w	r1, [sl, #1]
		if (decexp >= 100) {
    e3f2:	dd0a      	ble.n	e40a <cbvprintf+0xbca>
			*buf++ = (decexp / 100) + '0';
    e3f4:	2764      	movs	r7, #100	; 0x64
    e3f6:	fb92 f1f7 	sdiv	r1, r2, r7
			decexp %= 100;
    e3fa:	fb07 2211 	mls	r2, r7, r1, r2
			*buf++ = (decexp / 100) + '0';
    e3fe:	f101 0c30 	add.w	ip, r1, #48	; 0x30
    e402:	f10a 0003 	add.w	r0, sl, #3
    e406:	f88a c002 	strb.w	ip, [sl, #2]
		*buf++ = (decexp / 10) + '0';
    e40a:	270a      	movs	r7, #10
    e40c:	fb92 f1f7 	sdiv	r1, r2, r7
    e410:	4682      	mov	sl, r0
		*buf++ = (decexp % 10) + '0';
    e412:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
    e416:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    e41a:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    e41c:	f80a cb02 	strb.w	ip, [sl], #2
		*buf++ = (decexp % 10) + '0';
    e420:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
    e422:	9a19      	ldr	r2, [sp, #100]	; 0x64
    e424:	2a00      	cmp	r2, #0
    e426:	dc1e      	bgt.n	e466 <cbvprintf+0xc26>
    e428:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    e42a:	2a00      	cmp	r2, #0
    e42c:	bfd4      	ite	le
    e42e:	2200      	movle	r2, #0
    e430:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
    e432:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
    e436:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
    e43a:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
    e43c:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
	*buf = 0;
    e440:	f88a 2000 	strb.w	r2, [sl]
	return bps;
    e444:	e5c0      	b.n	dfc8 <cbvprintf+0x788>
			*buf++ = '.';
    e446:	469a      	mov	sl, r3
    e448:	e7bf      	b.n	e3ca <cbvprintf+0xb8a>
		if (*buf++ != '0') {
    e44a:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
    e44e:	e7bc      	b.n	e3ca <cbvprintf+0xb8a>
		conv->pad0_pre_exp = 0;
    e450:	2100      	movs	r1, #0
    e452:	911a      	str	r1, [sp, #104]	; 0x68
		while (*--buf == '0') {
    e454:	4650      	mov	r0, sl
    e456:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
    e45a:	2930      	cmp	r1, #48	; 0x30
    e45c:	d0fa      	beq.n	e454 <cbvprintf+0xc14>
		if (*buf != '.') {
    e45e:	292e      	cmp	r1, #46	; 0x2e
    e460:	bf18      	it	ne
    e462:	4682      	movne	sl, r0
    e464:	e7b5      	b.n	e3d2 <cbvprintf+0xb92>
		|| (conv->pad0_pre_exp > 0);
    e466:	2201      	movs	r2, #1
    e468:	e7e3      	b.n	e432 <cbvprintf+0xbf2>
			bpe = bps + 5;
    e46a:	f8df a13c 	ldr.w	sl, [pc, #316]	; e5a8 <cbvprintf+0xd68>
		char sign = 0;
    e46e:	4606      	mov	r6, r0
			bps = "(nil)";
    e470:	f1aa 0905 	sub.w	r9, sl, #5
    e474:	e5aa      	b.n	dfcc <cbvprintf+0x78c>
		} else if (conv->altform_0) {
    e476:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
    e478:	bf48      	it	mi
    e47a:	3201      	addmi	r2, #1
    e47c:	e5b0      	b.n	dfe0 <cbvprintf+0x7a0>
					OUTC(pad);
    e47e:	4641      	mov	r1, r8
    e480:	4638      	mov	r0, r7
    e482:	9b03      	ldr	r3, [sp, #12]
    e484:	4798      	blx	r3
    e486:	2800      	cmp	r0, #0
    e488:	f6bf add0 	bge.w	e02c <cbvprintf+0x7ec>
#undef OUTS
#undef OUTC
}
    e48c:	b025      	add	sp, #148	; 0x94
    e48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    e492:	2720      	movs	r7, #32
    e494:	e5c7      	b.n	e026 <cbvprintf+0x7e6>
					pad = '0';
    e496:	2730      	movs	r7, #48	; 0x30
    e498:	e5c5      	b.n	e026 <cbvprintf+0x7e6>
			width -= (int)nj_len;
    e49a:	9308      	str	r3, [sp, #32]
    e49c:	e5cf      	b.n	e03e <cbvprintf+0x7fe>
    e49e:	eba5 0b09 	sub.w	fp, r5, r9
    e4a2:	464e      	mov	r6, r9
    e4a4:	eb0b 0509 	add.w	r5, fp, r9
				while (*cp != 'p') {
    e4a8:	f819 0b01 	ldrb.w	r0, [r9], #1
    e4ac:	2870      	cmp	r0, #112	; 0x70
    e4ae:	d120      	bne.n	e4f2 <cbvprintf+0xcb2>
			while (pad_len-- > 0) {
    e4b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    e4b2:	eb02 0905 	add.w	r9, r2, r5
    e4b6:	eba9 0205 	sub.w	r2, r9, r5
    e4ba:	2a00      	cmp	r2, #0
    e4bc:	dc43      	bgt.n	e546 <cbvprintf+0xd06>
			OUTS(cp, bpe);
    e4be:	4653      	mov	r3, sl
    e4c0:	4632      	mov	r2, r6
			OUTS(bps, bpe);
    e4c2:	4641      	mov	r1, r8
    e4c4:	9803      	ldr	r0, [sp, #12]
    e4c6:	f009 f9cf 	bl	17868 <outs>
    e4ca:	2800      	cmp	r0, #0
    e4cc:	dbde      	blt.n	e48c <cbvprintf+0xc4c>
    e4ce:	9b08      	ldr	r3, [sp, #32]
    e4d0:	4428      	add	r0, r5
    e4d2:	4403      	add	r3, r0
			while (pad_len-- > 0) {
    e4d4:	4605      	mov	r5, r0
    e4d6:	469a      	mov	sl, r3
		while (width > 0) {
    e4d8:	ebaa 0305 	sub.w	r3, sl, r5
    e4dc:	2b00      	cmp	r3, #0
    e4de:	f77f ac10 	ble.w	dd02 <cbvprintf+0x4c2>
			OUTC(' ');
    e4e2:	4641      	mov	r1, r8
    e4e4:	2020      	movs	r0, #32
    e4e6:	9b03      	ldr	r3, [sp, #12]
    e4e8:	4798      	blx	r3
    e4ea:	2800      	cmp	r0, #0
    e4ec:	dbce      	blt.n	e48c <cbvprintf+0xc4c>
    e4ee:	3501      	adds	r5, #1
			--width;
    e4f0:	e7f2      	b.n	e4d8 <cbvprintf+0xc98>
					OUTC(*cp++);
    e4f2:	4641      	mov	r1, r8
    e4f4:	9b03      	ldr	r3, [sp, #12]
    e4f6:	4798      	blx	r3
    e4f8:	2800      	cmp	r0, #0
    e4fa:	dad2      	bge.n	e4a2 <cbvprintf+0xc62>
    e4fc:	e7c6      	b.n	e48c <cbvprintf+0xc4c>
					OUTC(*cp++);
    e4fe:	4641      	mov	r1, r8
    e500:	9b03      	ldr	r3, [sp, #12]
    e502:	4798      	blx	r3
    e504:	2800      	cmp	r0, #0
    e506:	f6bf adaf 	bge.w	e068 <cbvprintf+0x828>
    e50a:	e7bf      	b.n	e48c <cbvprintf+0xc4c>
						OUTC('0');
    e50c:	4641      	mov	r1, r8
    e50e:	2030      	movs	r0, #48	; 0x30
    e510:	9b03      	ldr	r3, [sp, #12]
    e512:	4798      	blx	r3
    e514:	2800      	cmp	r0, #0
    e516:	f6bf adba 	bge.w	e08e <cbvprintf+0x84e>
    e51a:	e7b7      	b.n	e48c <cbvprintf+0xc4c>
						OUTC('0');
    e51c:	4641      	mov	r1, r8
    e51e:	2030      	movs	r0, #48	; 0x30
    e520:	9b03      	ldr	r3, [sp, #12]
    e522:	4798      	blx	r3
    e524:	3e01      	subs	r6, #1
    e526:	e5bf      	b.n	e0a8 <cbvprintf+0x868>
					OUTC(*cp++);
    e528:	4641      	mov	r1, r8
    e52a:	9b03      	ldr	r3, [sp, #12]
    e52c:	4798      	blx	r3
    e52e:	2800      	cmp	r0, #0
    e530:	dbac      	blt.n	e48c <cbvprintf+0xc4c>
    e532:	463e      	mov	r6, r7
    e534:	eb0b 0507 	add.w	r5, fp, r7
				while (isdigit((int)*cp)) {
    e538:	f817 0b01 	ldrb.w	r0, [r7], #1
    e53c:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    e540:	2a09      	cmp	r2, #9
    e542:	d9f1      	bls.n	e528 <cbvprintf+0xce8>
    e544:	e7b4      	b.n	e4b0 <cbvprintf+0xc70>
				OUTC('0');
    e546:	4641      	mov	r1, r8
    e548:	2030      	movs	r0, #48	; 0x30
    e54a:	9b03      	ldr	r3, [sp, #12]
    e54c:	4798      	blx	r3
    e54e:	2800      	cmp	r0, #0
    e550:	db9c      	blt.n	e48c <cbvprintf+0xc4c>
    e552:	3501      	adds	r5, #1
    e554:	e7af      	b.n	e4b6 <cbvprintf+0xc76>
			if (conv->altform_0c | conv->altform_0) {
    e556:	06d1      	lsls	r1, r2, #27
    e558:	d401      	bmi.n	e55e <cbvprintf+0xd1e>
    e55a:	0712      	lsls	r2, r2, #28
    e55c:	d506      	bpl.n	e56c <cbvprintf+0xd2c>
				OUTC('0');
    e55e:	4641      	mov	r1, r8
    e560:	2030      	movs	r0, #48	; 0x30
    e562:	9b03      	ldr	r3, [sp, #12]
    e564:	4798      	blx	r3
    e566:	2800      	cmp	r0, #0
    e568:	db90      	blt.n	e48c <cbvprintf+0xc4c>
    e56a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    e56c:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
    e570:	06d3      	lsls	r3, r2, #27
    e572:	d507      	bpl.n	e584 <cbvprintf+0xd44>
				OUTC(conv->specifier);
    e574:	4641      	mov	r1, r8
    e576:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
    e57a:	9b03      	ldr	r3, [sp, #12]
    e57c:	4798      	blx	r3
    e57e:	2800      	cmp	r0, #0
    e580:	db84      	blt.n	e48c <cbvprintf+0xc4c>
    e582:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    e584:	9e19      	ldr	r6, [sp, #100]	; 0x64
    e586:	442e      	add	r6, r5
    e588:	1b72      	subs	r2, r6, r5
    e58a:	2a00      	cmp	r2, #0
    e58c:	dc02      	bgt.n	e594 <cbvprintf+0xd54>
			OUTS(bps, bpe);
    e58e:	4653      	mov	r3, sl
    e590:	464a      	mov	r2, r9
    e592:	e796      	b.n	e4c2 <cbvprintf+0xc82>
				OUTC('0');
    e594:	4641      	mov	r1, r8
    e596:	2030      	movs	r0, #48	; 0x30
    e598:	9b03      	ldr	r3, [sp, #12]
    e59a:	4798      	blx	r3
    e59c:	2800      	cmp	r0, #0
    e59e:	f6ff af75 	blt.w	e48c <cbvprintf+0xc4c>
    e5a2:	3501      	adds	r5, #1
    e5a4:	e7f0      	b.n	e588 <cbvprintf+0xd48>
    e5a6:	bf00      	nop
    e5a8:	0001b312 	.word	0x0001b312

0000e5ac <nordicsemi_nrf91_init>:
    e5ac:	f04f 0220 	mov.w	r2, #32
    e5b0:	f3ef 8311 	mrs	r3, BASEPRI
    e5b4:	f382 8811 	msr	BASEPRI, r2
    e5b8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    e5bc:	2101      	movs	r1, #1
    e5be:	4a04      	ldr	r2, [pc, #16]	; (e5d0 <nordicsemi_nrf91_init+0x24>)
    e5c0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    e5c4:	f383 8811 	msr	BASEPRI, r3
    e5c8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    e5cc:	2000      	movs	r0, #0
    e5ce:	4770      	bx	lr
    e5d0:	40039000 	.word	0x40039000

0000e5d4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    e5d4:	b120      	cbz	r0, e5e0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    e5d6:	4b03      	ldr	r3, [pc, #12]	; (e5e4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    e5d8:	0180      	lsls	r0, r0, #6
    e5da:	f043 0301 	orr.w	r3, r3, #1
    e5de:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    e5e0:	4770      	bx	lr
    e5e2:	bf00      	nop
    e5e4:	0001add0 	.word	0x0001add0

0000e5e8 <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
    e5e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e5ea:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    e5ec:	4c0f      	ldr	r4, [pc, #60]	; (e62c <z_impl_zsock_socket+0x44>)
    e5ee:	4e10      	ldr	r6, [pc, #64]	; (e630 <z_impl_zsock_socket+0x48>)
    e5f0:	42b4      	cmp	r4, r6
    e5f2:	d307      	bcc.n	e604 <z_impl_zsock_socket+0x1c>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
    e5f4:	f009 f98a 	bl	1790c <z_errno>
    e5f8:	232f      	movs	r3, #47	; 0x2f
    e5fa:	6003      	str	r3, [r0, #0]
	return -1;
}
    e5fc:	f04f 30ff 	mov.w	r0, #4294967295
    e600:	b002      	add	sp, #8
    e602:	bd70      	pop	{r4, r5, r6, pc}
		if (sock_family->family != family &&
    e604:	6823      	ldr	r3, [r4, #0]
    e606:	42ab      	cmp	r3, r5
    e608:	d000      	beq.n	e60c <z_impl_zsock_socket+0x24>
    e60a:	b96b      	cbnz	r3, e628 <z_impl_zsock_socket+0x40>
		if (!sock_family->is_supported(family, type, proto)) {
    e60c:	4628      	mov	r0, r5
    e60e:	6863      	ldr	r3, [r4, #4]
    e610:	e9cd 1200 	strd	r1, r2, [sp]
    e614:	4798      	blx	r3
    e616:	e9dd 1200 	ldrd	r1, r2, [sp]
    e61a:	b128      	cbz	r0, e628 <z_impl_zsock_socket+0x40>
		return sock_family->handler(family, type, proto);
    e61c:	4628      	mov	r0, r5
    e61e:	68a3      	ldr	r3, [r4, #8]
}
    e620:	b002      	add	sp, #8
    e622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return sock_family->handler(family, type, proto);
    e626:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    e628:	340c      	adds	r4, #12
    e62a:	e7e1      	b.n	e5f0 <z_impl_zsock_socket+0x8>
    e62c:	0001ad80 	.word	0x0001ad80
    e630:	0001ad8c 	.word	0x0001ad8c

0000e634 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
    e634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
    e638:	1e14      	subs	r4, r2, #0
{
    e63a:	b09b      	sub	sp, #108	; 0x6c
    e63c:	4606      	mov	r6, r0
    e63e:	9103      	str	r1, [sp, #12]
	if (poll_timeout < 0) {
    e640:	db30      	blt.n	e6a4 <z_impl_zsock_poll+0x70>
    e642:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    e646:	f240 30e7 	movw	r0, #999	; 0x3e7
    e64a:	2100      	movs	r1, #0
    e64c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e650:	2300      	movs	r3, #0
    e652:	fbc5 0104 	smlal	r0, r1, r5, r4
    e656:	f7fe fa61 	bl	cb1c <__aeabi_uldivmod>
    e65a:	4682      	mov	sl, r0
    e65c:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
    e65e:	2500      	movs	r5, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
    e660:	4650      	mov	r0, sl
    e662:	4659      	mov	r1, fp
    e664:	f00c f891 	bl	1a78a <z_timeout_end_calc>

	pev = poll_events;
    e668:	ab0b      	add	r3, sp, #44	; 0x2c
    e66a:	9309      	str	r3, [sp, #36]	; 0x24
	const struct fd_op_vtable *offl_vtable = NULL;
    e66c:	462f      	mov	r7, r5
	for (pfd = fds, i = nfds; i--; pfd++) {
    e66e:	4633      	mov	r3, r6
	bool offload = false;
    e670:	46a8      	mov	r8, r5
	end = z_timeout_end_calc(timeout);
    e672:	e9cd 0104 	strd	r0, r1, [sp, #16]
	for (pfd = fds, i = nfds; i--; pfd++) {
    e676:	f8dd 900c 	ldr.w	r9, [sp, #12]
    e67a:	f1b9 0f00 	cmp.w	r9, #0
    e67e:	d118      	bne.n	e6b2 <z_impl_zsock_poll+0x7e>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
    e680:	f1b8 0f00 	cmp.w	r8, #0
    e684:	d049      	beq.n	e71a <z_impl_zsock_poll+0xe6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
    e686:	9b03      	ldr	r3, [sp, #12]
    e688:	9401      	str	r4, [sp, #4]
    e68a:	9300      	str	r3, [sp, #0]
    e68c:	f44f 7282 	mov.w	r2, #260	; 0x104
    e690:	4633      	mov	r3, r6
    e692:	4629      	mov	r1, r5
    e694:	4638      	mov	r0, r7
    e696:	f009 f93b 	bl	17910 <z_fdtable_call_ioctl>
    e69a:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
    e69c:	4620      	mov	r0, r4
    e69e:	b01b      	add	sp, #108	; 0x6c
    e6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
    e6a4:	f04f 3aff 	mov.w	sl, #4294967295
    e6a8:	f04f 3bff 	mov.w	fp, #4294967295
		poll_timeout = SYS_FOREVER_MS;
    e6ac:	f04f 34ff 	mov.w	r4, #4294967295
    e6b0:	e7d5      	b.n	e65e <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
    e6b2:	6818      	ldr	r0, [r3, #0]
    e6b4:	2800      	cmp	r0, #0
    e6b6:	db2c      	blt.n	e712 <z_impl_zsock_poll+0xde>
	ctx = z_get_fd_obj_and_vtable(sock,
    e6b8:	a90a      	add	r1, sp, #40	; 0x28
    e6ba:	9306      	str	r3, [sp, #24]
    e6bc:	f7fe feb8 	bl	d430 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
    e6c0:	9b06      	ldr	r3, [sp, #24]
    e6c2:	4601      	mov	r1, r0
    e6c4:	b328      	cbz	r0, e712 <z_impl_zsock_poll+0xde>
		result = z_fdtable_call_ioctl(vtable, ctx,
    e6c6:	aa1a      	add	r2, sp, #104	; 0x68
    e6c8:	9201      	str	r2, [sp, #4]
    e6ca:	aa09      	add	r2, sp, #36	; 0x24
    e6cc:	9200      	str	r2, [sp, #0]
    e6ce:	9006      	str	r0, [sp, #24]
    e6d0:	f44f 7281 	mov.w	r2, #258	; 0x102
    e6d4:	980a      	ldr	r0, [sp, #40]	; 0x28
    e6d6:	9307      	str	r3, [sp, #28]
    e6d8:	f009 f91a 	bl	17910 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
    e6dc:	f110 0f45 	cmn.w	r0, #69	; 0x45
		result = z_fdtable_call_ioctl(vtable, ctx,
    e6e0:	4602      	mov	r2, r0
		if (result == -EALREADY) {
    e6e2:	9b07      	ldr	r3, [sp, #28]
    e6e4:	d011      	beq.n	e70a <z_impl_zsock_poll+0xd6>
		} else if (result == -EXDEV) {
    e6e6:	f110 0f12 	cmn.w	r0, #18
    e6ea:	9906      	ldr	r1, [sp, #24]
    e6ec:	d105      	bne.n	e6fa <z_impl_zsock_poll+0xc6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
    e6ee:	b90f      	cbnz	r7, e6f4 <z_impl_zsock_poll+0xc0>
				offl_vtable = vtable;
    e6f0:	460d      	mov	r5, r1
    e6f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			offload = true;
    e6f4:	f04f 0801 	mov.w	r8, #1
    e6f8:	e00b      	b.n	e712 <z_impl_zsock_poll+0xde>
		} else if (result != 0) {
    e6fa:	b150      	cbz	r0, e712 <z_impl_zsock_poll+0xde>
    e6fc:	9203      	str	r2, [sp, #12]
				errno = -result;
    e6fe:	f009 f905 	bl	1790c <z_errno>
    e702:	9a03      	ldr	r2, [sp, #12]
    e704:	4252      	negs	r2, r2
    e706:	6002      	str	r2, [r0, #0]
				return -1;
    e708:	e03e      	b.n	e788 <z_impl_zsock_poll+0x154>
			timeout = K_NO_WAIT;
    e70a:	f04f 0a00 	mov.w	sl, #0
    e70e:	f04f 0b00 	mov.w	fp, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
    e712:	3308      	adds	r3, #8
    e714:	f109 39ff 	add.w	r9, r9, #4294967295
    e718:	e7af      	b.n	e67a <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    e71a:	ea5a 030b 	orrs.w	r3, sl, fp
    e71e:	d016      	beq.n	e74e <z_impl_zsock_poll+0x11a>
    e720:	f1bb 3fff 	cmp.w	fp, #4294967295
    e724:	bf08      	it	eq
    e726:	f1ba 3fff 	cmpeq.w	sl, #4294967295
    e72a:	d010      	beq.n	e74e <z_impl_zsock_poll+0x11a>
		int64_t remaining = end - z_tick_get();
    e72c:	f008 fb90 	bl	16e50 <z_tick_get>
    e730:	9b04      	ldr	r3, [sp, #16]
    e732:	ebb3 0a00 	subs.w	sl, r3, r0
    e736:	9b05      	ldr	r3, [sp, #20]
    e738:	eb63 0b01 	sbc.w	fp, r3, r1
    e73c:	f1ba 0f00 	cmp.w	sl, #0
    e740:	f17b 0300 	sbcs.w	r3, fp, #0
    e744:	bfbc      	itt	lt
    e746:	f04f 0a00 	movlt.w	sl, #0
    e74a:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
    e74e:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
    e752:	9909      	ldr	r1, [sp, #36]	; 0x24
    e754:	ac0b      	add	r4, sp, #44	; 0x2c
    e756:	4b34      	ldr	r3, [pc, #208]	; (e828 <z_impl_zsock_poll+0x1f4>)
    e758:	1b09      	subs	r1, r1, r4
    e75a:	1089      	asrs	r1, r1, #2
    e75c:	4359      	muls	r1, r3
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    e75e:	465b      	mov	r3, fp
    e760:	4652      	mov	r2, sl
    e762:	4620      	mov	r0, r4
    e764:	f008 fb8e 	bl	16e84 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
    e768:	f100 030b 	add.w	r3, r0, #11
    e76c:	2b0b      	cmp	r3, #11
    e76e:	4607      	mov	r7, r0
    e770:	d806      	bhi.n	e780 <z_impl_zsock_poll+0x14c>
    e772:	f640 0581 	movw	r5, #2177	; 0x881
    e776:	40dd      	lsrs	r5, r3
    e778:	43ed      	mvns	r5, r5
    e77a:	f015 0501 	ands.w	r5, r5, #1
    e77e:	d006      	beq.n	e78e <z_impl_zsock_poll+0x15a>
			errno = -ret;
    e780:	f009 f8c4 	bl	1790c <z_errno>
    e784:	427f      	negs	r7, r7
    e786:	6007      	str	r7, [r0, #0]
			return -1;
    e788:	f04f 34ff 	mov.w	r4, #4294967295
    e78c:	e786      	b.n	e69c <z_impl_zsock_poll+0x68>
		pev = poll_events;
    e78e:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
    e790:	46b0      	mov	r8, r6
		ret = 0;
    e792:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
    e794:	9f03      	ldr	r7, [sp, #12]
    e796:	b9ef      	cbnz	r7, e7d4 <z_impl_zsock_poll+0x1a0>
		if (retry) {
    e798:	2d00      	cmp	r5, #0
    e79a:	f43f af7f 	beq.w	e69c <z_impl_zsock_poll+0x68>
			if (ret > 0) {
    e79e:	2c00      	cmp	r4, #0
    e7a0:	f73f af7c 	bgt.w	e69c <z_impl_zsock_poll+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e7a4:	ea5a 030b 	orrs.w	r3, sl, fp
    e7a8:	f43f af78 	beq.w	e69c <z_impl_zsock_poll+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e7ac:	f1bb 3fff 	cmp.w	fp, #4294967295
    e7b0:	bf08      	it	eq
    e7b2:	f1ba 3fff 	cmpeq.w	sl, #4294967295
    e7b6:	d0cc      	beq.n	e752 <z_impl_zsock_poll+0x11e>
				int64_t remaining = end - z_tick_get();
    e7b8:	f008 fb4a 	bl	16e50 <z_tick_get>
    e7bc:	9b04      	ldr	r3, [sp, #16]
    e7be:	ebb3 0a00 	subs.w	sl, r3, r0
    e7c2:	9b05      	ldr	r3, [sp, #20]
    e7c4:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
    e7c8:	f1ba 0f01 	cmp.w	sl, #1
    e7cc:	f17b 0300 	sbcs.w	r3, fp, #0
    e7d0:	dabf      	bge.n	e752 <z_impl_zsock_poll+0x11e>
    e7d2:	e763      	b.n	e69c <z_impl_zsock_poll+0x68>
			if (pfd->fd < 0) {
    e7d4:	f8d8 0000 	ldr.w	r0, [r8]
			pfd->revents = 0;
    e7d8:	f8a8 9006 	strh.w	r9, [r8, #6]
			if (pfd->fd < 0) {
    e7dc:	2800      	cmp	r0, #0
    e7de:	db1c      	blt.n	e81a <z_impl_zsock_poll+0x1e6>
	ctx = z_get_fd_obj_and_vtable(sock,
    e7e0:	a90a      	add	r1, sp, #40	; 0x28
    e7e2:	f7fe fe25 	bl	d430 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
    e7e6:	4601      	mov	r1, r0
    e7e8:	b920      	cbnz	r0, e7f4 <z_impl_zsock_poll+0x1c0>
				pfd->revents = ZSOCK_POLLNVAL;
    e7ea:	2220      	movs	r2, #32
    e7ec:	f8a8 2006 	strh.w	r2, [r8, #6]
				ret++;
    e7f0:	3401      	adds	r4, #1
    e7f2:	e012      	b.n	e81a <z_impl_zsock_poll+0x1e6>
			result = z_fdtable_call_ioctl(vtable, ctx,
    e7f4:	ab09      	add	r3, sp, #36	; 0x24
    e7f6:	f240 1203 	movw	r2, #259	; 0x103
    e7fa:	9300      	str	r3, [sp, #0]
    e7fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    e7fe:	4643      	mov	r3, r8
    e800:	f009 f886 	bl	17910 <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
    e804:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
    e808:	4602      	mov	r2, r0
			if (result == -EAGAIN) {
    e80a:	d00a      	beq.n	e822 <z_impl_zsock_poll+0x1ee>
			} else if (result != 0) {
    e80c:	2800      	cmp	r0, #0
    e80e:	f47f af75 	bne.w	e6fc <z_impl_zsock_poll+0xc8>
			if (pfd->revents != 0) {
    e812:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
    e816:	2a00      	cmp	r2, #0
    e818:	d1ea      	bne.n	e7f0 <z_impl_zsock_poll+0x1bc>
		for (pfd = fds, i = nfds; i--; pfd++) {
    e81a:	f108 0808 	add.w	r8, r8, #8
    e81e:	3f01      	subs	r7, #1
    e820:	e7b9      	b.n	e796 <z_impl_zsock_poll+0x162>
				retry = true;
    e822:	2501      	movs	r5, #1
    e824:	e7f9      	b.n	e81a <z_impl_zsock_poll+0x1e6>
    e826:	bf00      	nop
    e828:	cccccccd 	.word	0xcccccccd

0000e82c <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
    e82c:	4b01      	ldr	r3, [pc, #4]	; (e834 <socket_offload_dns_register+0x8>)
    e82e:	6018      	str	r0, [r3, #0]
}
    e830:	4770      	bx	lr
    e832:	bf00      	nop
    e834:	20014d08 	.word	0x20014d08

0000e838 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
    e838:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
    e83a:	4c03      	ldr	r4, [pc, #12]	; (e848 <socket_offload_getaddrinfo+0x10>)
    e83c:	6824      	ldr	r4, [r4, #0]
    e83e:	6824      	ldr	r4, [r4, #0]
    e840:	46a4      	mov	ip, r4
}
    e842:	f85d 4b04 	ldr.w	r4, [sp], #4
	return dns_offload->getaddrinfo(node, service, hints, res);
    e846:	4760      	bx	ip
    e848:	20014d08 	.word	0x20014d08

0000e84c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    e84c:	b508      	push	{r3, lr}
    e84e:	4806      	ldr	r0, [pc, #24]	; (e868 <uart_console_init+0x1c>)
    e850:	f007 f99a 	bl	15b88 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    e854:	4b05      	ldr	r3, [pc, #20]	; (e86c <uart_console_init+0x20>)
    e856:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    e858:	4805      	ldr	r0, [pc, #20]	; (e870 <uart_console_init+0x24>)
    e85a:	f000 fed5 	bl	f608 <__stdout_hook_install>
	__printk_hook_install(console_out);
    e85e:	4804      	ldr	r0, [pc, #16]	; (e870 <uart_console_init+0x24>)
    e860:	f7fe fe5e 	bl	d520 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    e864:	2000      	movs	r0, #0
    e866:	bd08      	pop	{r3, pc}
    e868:	0001b313 	.word	0x0001b313
    e86c:	20014d0c 	.word	0x20014d0c
    e870:	0000e875 	.word	0x0000e875

0000e874 <console_out>:
	if ('\n' == c) {
    e874:	280a      	cmp	r0, #10
{
    e876:	b538      	push	{r3, r4, r5, lr}
    e878:	4604      	mov	r4, r0
    e87a:	4d07      	ldr	r5, [pc, #28]	; (e898 <console_out+0x24>)
	if ('\n' == c) {
    e87c:	d104      	bne.n	e888 <console_out+0x14>
    e87e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    e880:	6883      	ldr	r3, [r0, #8]
    e882:	210d      	movs	r1, #13
    e884:	685b      	ldr	r3, [r3, #4]
    e886:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    e888:	6828      	ldr	r0, [r5, #0]
    e88a:	6883      	ldr	r3, [r0, #8]
    e88c:	b2e1      	uxtb	r1, r4
    e88e:	685b      	ldr	r3, [r3, #4]
    e890:	4798      	blx	r3
}
    e892:	4620      	mov	r0, r4
    e894:	bd38      	pop	{r3, r4, r5, pc}
    e896:	bf00      	nop
    e898:	20014d0c 	.word	0x20014d0c

0000e89c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    e89c:	4a0e      	ldr	r2, [pc, #56]	; (e8d8 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    e89e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    e8a0:	1a84      	subs	r4, r0, r2
{
    e8a2:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    e8a4:	200c      	movs	r0, #12
{
    e8a6:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    e8a8:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    e8aa:	10a3      	asrs	r3, r4, #2
    e8ac:	4c0b      	ldr	r4, [pc, #44]	; (e8dc <onoff_stop+0x40>)
    e8ae:	435c      	muls	r4, r3
    e8b0:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    e8b2:	fb00 2004 	mla	r0, r0, r4, r2
    e8b6:	4408      	add	r0, r1
    e8b8:	f009 f8a9 	bl	17a0e <set_off_state>
	if (err < 0) {
    e8bc:	1e01      	subs	r1, r0, #0
    e8be:	db05      	blt.n	e8cc <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    e8c0:	4b07      	ldr	r3, [pc, #28]	; (e8e0 <onoff_stop+0x44>)
    e8c2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    e8c6:	6863      	ldr	r3, [r4, #4]
    e8c8:	4798      	blx	r3
	return 0;
    e8ca:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    e8cc:	4628      	mov	r0, r5
    e8ce:	4633      	mov	r3, r6
}
    e8d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    e8d4:	4718      	bx	r3
    e8d6:	bf00      	nop
    e8d8:	20014d20 	.word	0x20014d20
    e8dc:	b6db6db7 	.word	0xb6db6db7
    e8e0:	0001adec 	.word	0x0001adec

0000e8e4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    e8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    e8e8:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    e8ea:	4e10      	ldr	r6, [pc, #64]	; (e92c <onoff_start+0x48>)
{
    e8ec:	4680      	mov	r8, r0
	size_t offset = (size_t)(mgr - data->mgr);
    e8ee:	1b84      	subs	r4, r0, r6
    e8f0:	10a3      	asrs	r3, r4, #2
    e8f2:	4c0f      	ldr	r4, [pc, #60]	; (e930 <onoff_start+0x4c>)
{
    e8f4:	460f      	mov	r7, r1
	size_t offset = (size_t)(mgr - data->mgr);
    e8f6:	435c      	muls	r4, r3
    e8f8:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    e8fa:	4365      	muls	r5, r4
    e8fc:	f105 0040 	add.w	r0, r5, #64	; 0x40
    e900:	2140      	movs	r1, #64	; 0x40
    e902:	4430      	add	r0, r6
    e904:	f009 f89c 	bl	17a40 <set_starting_state>
	if (err < 0) {
    e908:	1e01      	subs	r1, r0, #0
    e90a:	db09      	blt.n	e920 <onoff_start+0x3c>
	subdata->cb = cb;
    e90c:	4a09      	ldr	r2, [pc, #36]	; (e934 <onoff_start+0x50>)
    e90e:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
    e910:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    e914:	4b08      	ldr	r3, [pc, #32]	; (e938 <onoff_start+0x54>)
    e916:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    e91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    e91e:	4718      	bx	r3
		notify(mgr, err);
    e920:	4640      	mov	r0, r8
    e922:	463b      	mov	r3, r7
}
    e924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    e928:	4718      	bx	r3
    e92a:	bf00      	nop
    e92c:	20014d20 	.word	0x20014d20
    e930:	b6db6db7 	.word	0xb6db6db7
    e934:	00017aa3 	.word	0x00017aa3
    e938:	0001adec 	.word	0x0001adec

0000e93c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    e93c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    e93e:	2200      	movs	r2, #0
    e940:	2101      	movs	r1, #1
{
    e942:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    e944:	2005      	movs	r0, #5
    e946:	f000 fa69 	bl	ee1c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    e94a:	2005      	movs	r0, #5
    e94c:	f000 fa48 	bl	ede0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    e950:	480f      	ldr	r0, [pc, #60]	; (e990 <clk_init+0x54>)
    e952:	f006 ff25 	bl	157a0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    e956:	4b0f      	ldr	r3, [pc, #60]	; (e994 <clk_init+0x58>)
    e958:	4298      	cmp	r0, r3
    e95a:	d115      	bne.n	e988 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    e95c:	f00b fc58 	bl	1a210 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    e960:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    e962:	490d      	ldr	r1, [pc, #52]	; (e998 <clk_init+0x5c>)
    e964:	4630      	mov	r0, r6
    e966:	f008 fbdf 	bl	17128 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    e96a:	2800      	cmp	r0, #0
    e96c:	db0b      	blt.n	e986 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    e96e:	2501      	movs	r5, #1
    e970:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    e972:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    e974:	4908      	ldr	r1, [pc, #32]	; (e998 <clk_init+0x5c>)
    e976:	f104 001c 	add.w	r0, r4, #28
    e97a:	f008 fbd5 	bl	17128 <onoff_manager_init>
		if (err < 0) {
    e97e:	2800      	cmp	r0, #0
    e980:	db01      	blt.n	e986 <clk_init+0x4a>
	}

	return 0;
    e982:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    e984:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    e986:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    e988:	f06f 0004 	mvn.w	r0, #4
    e98c:	e7fb      	b.n	e986 <clk_init+0x4a>
    e98e:	bf00      	nop
    e990:	0000e9d9 	.word	0x0000e9d9
    e994:	0bad0000 	.word	0x0bad0000
    e998:	0001adfc 	.word	0x0001adfc

0000e99c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    e99c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    e99e:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    e9a0:	4601      	mov	r1, r0
	sub_data->cb = NULL;
    e9a2:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
    e9a4:	434b      	muls	r3, r1
    e9a6:	480a      	ldr	r0, [pc, #40]	; (e9d0 <clkstarted_handle.constprop.0+0x34>)
    e9a8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    e9aa:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    e9ac:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    e9b0:	4418      	add	r0, r3
	sub_data->cb = NULL;
    e9b2:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
    e9b4:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    e9b6:	f009 f861 	bl	17a7c <set_on_state>
	if (callback) {
    e9ba:	b135      	cbz	r5, e9ca <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    e9bc:	462b      	mov	r3, r5
    e9be:	9a01      	ldr	r2, [sp, #4]
    e9c0:	4804      	ldr	r0, [pc, #16]	; (e9d4 <clkstarted_handle.constprop.0+0x38>)
}
    e9c2:	b002      	add	sp, #8
    e9c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    e9c8:	4718      	bx	r3
}
    e9ca:	b002      	add	sp, #8
    e9cc:	bd70      	pop	{r4, r5, r6, pc}
    e9ce:	bf00      	nop
    e9d0:	20014d20 	.word	0x20014d20
    e9d4:	200145a0 	.word	0x200145a0

0000e9d8 <clock_event_handler>:
	switch (event) {
    e9d8:	b110      	cbz	r0, e9e0 <clock_event_handler+0x8>
    e9da:	2801      	cmp	r0, #1
    e9dc:	d004      	beq.n	e9e8 <clock_event_handler+0x10>
    e9de:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    e9e0:	4b03      	ldr	r3, [pc, #12]	; (e9f0 <clock_event_handler+0x18>)
    e9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e9e4:	075b      	lsls	r3, r3, #29
    e9e6:	d101      	bne.n	e9ec <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    e9e8:	f7ff bfd8 	b.w	e99c <clkstarted_handle.constprop.0>
}
    e9ec:	4770      	bx	lr
    e9ee:	bf00      	nop
    e9f0:	20014d20 	.word	0x20014d20

0000e9f4 <generic_hfclk_start>:
{
    e9f4:	b508      	push	{r3, lr}
	__asm__ volatile(
    e9f6:	f04f 0320 	mov.w	r3, #32
    e9fa:	f3ef 8111 	mrs	r1, BASEPRI
    e9fe:	f383 8811 	msr	BASEPRI, r3
    ea02:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    ea06:	4a11      	ldr	r2, [pc, #68]	; (ea4c <generic_hfclk_start+0x58>)
    ea08:	6813      	ldr	r3, [r2, #0]
    ea0a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    ea0e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    ea12:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    ea14:	d00b      	beq.n	ea2e <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    ea16:	4a0e      	ldr	r2, [pc, #56]	; (ea50 <generic_hfclk_start+0x5c>)
    ea18:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ea1c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    ea20:	f013 0301 	ands.w	r3, r3, #1
    ea24:	d003      	beq.n	ea2e <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    ea26:	480b      	ldr	r0, [pc, #44]	; (ea54 <generic_hfclk_start+0x60>)
    ea28:	f009 f828 	bl	17a7c <set_on_state>
			already_started = true;
    ea2c:	2301      	movs	r3, #1
	__asm__ volatile(
    ea2e:	f381 8811 	msr	BASEPRI, r1
    ea32:	f3bf 8f6f 	isb	sy
	if (already_started) {
    ea36:	b123      	cbz	r3, ea42 <generic_hfclk_start+0x4e>
}
    ea38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    ea3c:	2000      	movs	r0, #0
    ea3e:	f7ff bfad 	b.w	e99c <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    ea42:	2001      	movs	r0, #1
}
    ea44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ea48:	f006 beba 	b.w	157c0 <nrfx_clock_start>
    ea4c:	20014d70 	.word	0x20014d70
    ea50:	40005000 	.word	0x40005000
    ea54:	20014d60 	.word	0x20014d60

0000ea58 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ea58:	4b07      	ldr	r3, [pc, #28]	; (ea78 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x18>)
    ea5a:	e8d3 2fef 	ldaex	r2, [r3]
    ea5e:	f022 0102 	bic.w	r1, r2, #2
    ea62:	e8c3 1fe0 	stlex	r0, r1, [r3]
    ea66:	2800      	cmp	r0, #0
    ea68:	d1f7      	bne.n	ea5a <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    ea6a:	07d3      	lsls	r3, r2, #31
    ea6c:	d402      	bmi.n	ea74 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    ea6e:	2001      	movs	r0, #1
    ea70:	f006 bed8 	b.w	15824 <nrfx_clock_stop>
}
    ea74:	4770      	bx	lr
    ea76:	bf00      	nop
    ea78:	20014d70 	.word	0x20014d70

0000ea7c <api_blocking_start>:
{
    ea7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    ea7e:	2200      	movs	r2, #0
    ea80:	2301      	movs	r3, #1
    ea82:	e9cd 2302 	strd	r2, r3, [sp, #8]
    ea86:	ab04      	add	r3, sp, #16
    ea88:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    ea8c:	4a09      	ldr	r2, [pc, #36]	; (eab4 <api_blocking_start+0x38>)
    ea8e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    ea90:	f8cd d000 	str.w	sp, [sp]
    ea94:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    ea98:	f009 f82a 	bl	17af0 <api_start>
	if (err < 0) {
    ea9c:	2800      	cmp	r0, #0
    ea9e:	db05      	blt.n	eaac <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    eaa0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    eaa4:	2300      	movs	r3, #0
    eaa6:	4668      	mov	r0, sp
    eaa8:	f007 feec 	bl	16884 <z_impl_k_sem_take>
}
    eaac:	b007      	add	sp, #28
    eaae:	f85d fb04 	ldr.w	pc, [sp], #4
    eab2:	bf00      	nop
    eab4:	00017ac3 	.word	0x00017ac3

0000eab8 <z_nrf_clock_control_lf_on>:
{
    eab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    eabc:	2201      	movs	r2, #1
    eabe:	4607      	mov	r7, r0
    eac0:	4936      	ldr	r1, [pc, #216]	; (eb9c <z_nrf_clock_control_lf_on+0xe4>)
    eac2:	e8d1 3fef 	ldaex	r3, [r1]
    eac6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    eaca:	2800      	cmp	r0, #0
    eacc:	d1f9      	bne.n	eac2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    eace:	b933      	cbnz	r3, eade <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    ead0:	4933      	ldr	r1, [pc, #204]	; (eba0 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
    ead2:	4834      	ldr	r0, [pc, #208]	; (eba4 <z_nrf_clock_control_lf_on+0xec>)
    ead4:	604b      	str	r3, [r1, #4]
    ead6:	60cb      	str	r3, [r1, #12]
    ead8:	608a      	str	r2, [r1, #8]
    eada:	f008 fb38 	bl	1714e <onoff_request>
	switch (start_mode) {
    eade:	1e7b      	subs	r3, r7, #1
    eae0:	2b01      	cmp	r3, #1
    eae2:	d82e      	bhi.n	eb42 <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    eae4:	2f01      	cmp	r7, #1
    eae6:	d106      	bne.n	eaf6 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    eae8:	4b2f      	ldr	r3, [pc, #188]	; (eba8 <z_nrf_clock_control_lf_on+0xf0>)
    eaea:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    eaee:	f003 0303 	and.w	r3, r3, #3
    eaf2:	2b02      	cmp	r3, #2
    eaf4:	d025      	beq.n	eb42 <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    eaf6:	f00b fd9b 	bl	1a630 <k_is_in_isr>
    eafa:	4604      	mov	r4, r0
    eafc:	b918      	cbnz	r0, eb06 <z_nrf_clock_control_lf_on+0x4e>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    eafe:	4b2b      	ldr	r3, [pc, #172]	; (ebac <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
    eb00:	781b      	ldrb	r3, [r3, #0]
    eb02:	2b00      	cmp	r3, #0
    eb04:	d144      	bne.n	eb90 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
    eb06:	f04f 0320 	mov.w	r3, #32
    eb0a:	f3ef 8611 	mrs	r6, BASEPRI
    eb0e:	f383 8811 	msr	BASEPRI, r3
    eb12:	f3bf 8f6f 	isb	sy
    eb16:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    eb18:	4d23      	ldr	r5, [pc, #140]	; (eba8 <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    eb1a:	f8df 809c 	ldr.w	r8, [pc, #156]	; ebb8 <z_nrf_clock_control_lf_on+0x100>
    eb1e:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    eb20:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    eb24:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    eb28:	03d2      	lsls	r2, r2, #15
    eb2a:	d50c      	bpl.n	eb46 <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    eb2c:	f003 0303 	and.w	r3, r3, #3
    eb30:	2b02      	cmp	r3, #2
    eb32:	d001      	beq.n	eb38 <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    eb34:	2f01      	cmp	r7, #1
    eb36:	d106      	bne.n	eb46 <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
    eb38:	b334      	cbz	r4, eb88 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    eb3a:	f386 8811 	msr	BASEPRI, r6
    eb3e:	f3bf 8f6f 	isb	sy
}
    eb42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    eb46:	b1d4      	cbz	r4, eb7e <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    eb48:	4630      	mov	r0, r6
    eb4a:	f000 fa79 	bl	f040 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    eb4e:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    eb52:	b2db      	uxtb	r3, r3
    eb54:	2b01      	cmp	r3, #1
    eb56:	d1e3      	bne.n	eb20 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    eb58:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
    eb5c:	2a00      	cmp	r2, #0
    eb5e:	d0df      	beq.n	eb20 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    eb60:	2200      	movs	r2, #0
    eb62:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    eb66:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
    eb6a:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    eb6c:	2120      	movs	r1, #32
    eb6e:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    eb72:	4a0f      	ldr	r2, [pc, #60]	; (ebb0 <z_nrf_clock_control_lf_on+0xf8>)
    eb74:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    eb78:	4a0e      	ldr	r2, [pc, #56]	; (ebb4 <z_nrf_clock_control_lf_on+0xfc>)
    eb7a:	6013      	str	r3, [r2, #0]
}
    eb7c:	e7d0      	b.n	eb20 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
    eb7e:	2100      	movs	r1, #0
    eb80:	2021      	movs	r0, #33	; 0x21
    eb82:	f007 fe31 	bl	167e8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    eb86:	e7e2      	b.n	eb4e <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
    eb88:	2302      	movs	r3, #2
    eb8a:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    eb8e:	e7d8      	b.n	eb42 <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
    eb90:	2202      	movs	r2, #2
    eb92:	4b05      	ldr	r3, [pc, #20]	; (eba8 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
    eb94:	4606      	mov	r6, r0
    eb96:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    eb9a:	e7bd      	b.n	eb18 <z_nrf_clock_control_lf_on+0x60>
    eb9c:	20014d74 	.word	0x20014d74
    eba0:	20014d10 	.word	0x20014d10
    eba4:	20014d3c 	.word	0x20014d3c
    eba8:	40005000 	.word	0x40005000
    ebac:	200179ed 	.word	0x200179ed
    ebb0:	e000e100 	.word	0xe000e100
    ebb4:	40005008 	.word	0x40005008
    ebb8:	40005104 	.word	0x40005104

0000ebbc <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    ebbc:	4a04      	ldr	r2, [pc, #16]	; (ebd0 <sys_clock_timeout_handler+0x14>)
    ebbe:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    ebc0:	1ac9      	subs	r1, r1, r3
    ebc2:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    ebc6:	4403      	add	r3, r0
    ebc8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    ebca:	f008 b8d7 	b.w	16d7c <z_clock_announce>
    ebce:	bf00      	nop
    ebd0:	20014d84 	.word	0x20014d84

0000ebd4 <set_absolute_alarm>:
{
    ebd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ebd8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ebdc:	f04f 0900 	mov.w	r9, #0
    ebe0:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    ebe2:	f100 0450 	add.w	r4, r0, #80	; 0x50
    ebe6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    ebea:	00a4      	lsls	r4, r4, #2
    ebec:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    ebf0:	b2a4      	uxth	r4, r4
    ebf2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    ebf6:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    ebfa:	f8df 806c 	ldr.w	r8, [pc, #108]	; ec68 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    ebfe:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ec02:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ec06:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    ec08:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    ec0c:	eba3 030a 	sub.w	r3, r3, sl
    ec10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    ec14:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    ec18:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    ec1a:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    ec1e:	d102      	bne.n	ec26 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    ec20:	2013      	movs	r0, #19
    ec22:	f00b fd0b 	bl	1a63c <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    ec26:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    ec2a:	1aab      	subs	r3, r5, r2
    ec2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    ec30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    ec34:	bf88      	it	hi
    ec36:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ec38:	f8c4 9000 	str.w	r9, [r4]
    ec3c:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    ec3e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    ec42:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    ec46:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    ec4a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    ec4e:	459a      	cmp	sl, r3
    ec50:	d006      	beq.n	ec60 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    ec52:	1aeb      	subs	r3, r5, r3
    ec54:	3b02      	subs	r3, #2
    ec56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    ec5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    ec5e:	d801      	bhi.n	ec64 <set_absolute_alarm+0x90>
}
    ec60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    ec64:	462b      	mov	r3, r5
    ec66:	e7cf      	b.n	ec08 <set_absolute_alarm+0x34>
    ec68:	40015000 	.word	0x40015000

0000ec6c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    ec6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    ec6e:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ec70:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ec72:	4e0f      	ldr	r6, [pc, #60]	; (ecb0 <rtc_nrf_isr+0x44>)
    ec74:	4b0f      	ldr	r3, [pc, #60]	; (ecb4 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
    ec76:	4a10      	ldr	r2, [pc, #64]	; (ecb8 <rtc_nrf_isr+0x4c>)
    ec78:	4618      	mov	r0, r3
    ec7a:	681d      	ldr	r5, [r3, #0]
    ec7c:	b104      	cbz	r4, ec80 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    ec7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec80:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    ec84:	03c9      	lsls	r1, r1, #15
    ec86:	d5fa      	bpl.n	ec7e <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ec88:	6831      	ldr	r1, [r6, #0]
    ec8a:	2900      	cmp	r1, #0
    ec8c:	d0f7      	beq.n	ec7e <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ec8e:	6034      	str	r4, [r6, #0]
    ec90:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    ec92:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    ec96:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    ec9a:	2401      	movs	r4, #1
    return p_reg->CC[ch];
    ec9c:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
    eca0:	b125      	cbz	r5, ecac <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
    eca2:	2000      	movs	r0, #0
    eca4:	685a      	ldr	r2, [r3, #4]
    eca6:	601f      	str	r7, [r3, #0]
    eca8:	47a8      	blx	r5
    ecaa:	e7e3      	b.n	ec74 <rtc_nrf_isr+0x8>
    ecac:	6005      	str	r5, [r0, #0]
}
    ecae:	e7e6      	b.n	ec7e <rtc_nrf_isr+0x12>
    ecb0:	40015140 	.word	0x40015140
    ecb4:	20014d78 	.word	0x20014d78
    ecb8:	40015000 	.word	0x40015000

0000ecbc <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    ecbc:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    ecbe:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    ecc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ecc4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    ecc8:	4d0d      	ldr	r5, [pc, #52]	; (ed00 <z_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    ecca:	2101      	movs	r1, #1
    eccc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    ecd0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    ecd4:	4b0b      	ldr	r3, [pc, #44]	; (ed04 <z_clock_driver_init+0x48>)
    ecd6:	2015      	movs	r0, #21
    ecd8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    ecdc:	4622      	mov	r2, r4
    ecde:	f000 f89d 	bl	ee1c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    ece2:	2015      	movs	r0, #21
    ece4:	f000 f87c 	bl	ede0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    ece8:	2301      	movs	r3, #1
    ecea:	4a07      	ldr	r2, [pc, #28]	; (ed08 <z_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    ecec:	2002      	movs	r0, #2
    ecee:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    ecf0:	4a06      	ldr	r2, [pc, #24]	; (ed0c <z_clock_driver_init+0x50>)
    ecf2:	602b      	str	r3, [r5, #0]
    ecf4:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    ecf6:	f7ff fedf 	bl	eab8 <z_nrf_clock_control_lf_on>

	return 0;
}
    ecfa:	4620      	mov	r0, r4
    ecfc:	bd38      	pop	{r3, r4, r5, pc}
    ecfe:	bf00      	nop
    ed00:	40015000 	.word	0x40015000
    ed04:	e000e100 	.word	0xe000e100
    ed08:	40015008 	.word	0x40015008
    ed0c:	20014d80 	.word	0x20014d80

0000ed10 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    ed10:	4b13      	ldr	r3, [pc, #76]	; (ed60 <z_clock_set_timeout+0x50>)
    ed12:	f1b0 3fff 	cmp.w	r0, #4294967295
    ed16:	bf08      	it	eq
    ed18:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    ed1a:	3801      	subs	r0, #1
    ed1c:	2800      	cmp	r0, #0
    ed1e:	dd1c      	ble.n	ed5a <z_clock_set_timeout+0x4a>
    ed20:	4298      	cmp	r0, r3
    ed22:	bfa8      	it	ge
    ed24:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    ed26:	4b0f      	ldr	r3, [pc, #60]	; (ed64 <z_clock_set_timeout+0x54>)
    ed28:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    ed2c:	4b0e      	ldr	r3, [pc, #56]	; (ed68 <z_clock_set_timeout+0x58>)
    ed2e:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    ed30:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    ed32:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    ed36:	bf18      	it	ne
    ed38:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
    ed3a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    ed3e:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
    ed40:	4a0a      	ldr	r2, [pc, #40]	; (ed6c <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    ed42:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    ed44:	480a      	ldr	r0, [pc, #40]	; (ed70 <z_clock_set_timeout+0x60>)
    ed46:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    ed48:	2000      	movs	r0, #0
    ed4a:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    ed4c:	4a04      	ldr	r2, [pc, #16]	; (ed60 <z_clock_set_timeout+0x50>)
    ed4e:	4293      	cmp	r3, r2
    ed50:	bf94      	ite	ls
    ed52:	18c9      	addls	r1, r1, r3
    ed54:	1889      	addhi	r1, r1, r2
    ed56:	f7ff bf3d 	b.w	ebd4 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    ed5a:	2000      	movs	r0, #0
    ed5c:	e7e3      	b.n	ed26 <z_clock_set_timeout+0x16>
    ed5e:	bf00      	nop
    ed60:	007fffff 	.word	0x007fffff
    ed64:	40015000 	.word	0x40015000
    ed68:	20014d84 	.word	0x20014d84
    ed6c:	20014d78 	.word	0x20014d78
    ed70:	0000ebbd 	.word	0x0000ebbd

0000ed74 <z_clock_elapsed>:
	__asm__ volatile(
    ed74:	f04f 0220 	mov.w	r2, #32
    ed78:	f3ef 8311 	mrs	r3, BASEPRI
    ed7c:	f382 8811 	msr	BASEPRI, r2
    ed80:	f3bf 8f6f 	isb	sy
    ed84:	4a06      	ldr	r2, [pc, #24]	; (eda0 <z_clock_elapsed+0x2c>)
    ed86:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    ed8a:	4a06      	ldr	r2, [pc, #24]	; (eda4 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    ed8c:	6812      	ldr	r2, [r2, #0]
    ed8e:	1a80      	subs	r0, r0, r2
    ed90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    ed94:	f383 8811 	msr	BASEPRI, r3
    ed98:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    ed9c:	4770      	bx	lr
    ed9e:	bf00      	nop
    eda0:	40015000 	.word	0x40015000
    eda4:	20014d84 	.word	0x20014d84

0000eda8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    eda8:	4a0a      	ldr	r2, [pc, #40]	; (edd4 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    edaa:	490b      	ldr	r1, [pc, #44]	; (edd8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    edac:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    edae:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    edb0:	67d8      	str	r0, [r3, #124]	; 0x7c
	_current->arch.swap_return_value = _k_neg_eagain;
    edb2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    edb6:	4909      	ldr	r1, [pc, #36]	; (eddc <arch_swap+0x34>)
    edb8:	684b      	ldr	r3, [r1, #4]
    edba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    edbe:	604b      	str	r3, [r1, #4]
    edc0:	2300      	movs	r3, #0
    edc2:	f383 8811 	msr	BASEPRI, r3
    edc6:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    edca:	6893      	ldr	r3, [r2, #8]
}
    edcc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    edd0:	4770      	bx	lr
    edd2:	bf00      	nop
    edd4:	200153f0 	.word	0x200153f0
    edd8:	0001b174 	.word	0x0001b174
    eddc:	e000ed00 	.word	0xe000ed00

0000ede0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    ede0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    ede2:	2b00      	cmp	r3, #0
    ede4:	db08      	blt.n	edf8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ede6:	2201      	movs	r2, #1
    ede8:	f000 001f 	and.w	r0, r0, #31
    edec:	fa02 f000 	lsl.w	r0, r2, r0
    edf0:	4a02      	ldr	r2, [pc, #8]	; (edfc <arch_irq_enable+0x1c>)
    edf2:	095b      	lsrs	r3, r3, #5
    edf4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    edf8:	4770      	bx	lr
    edfa:	bf00      	nop
    edfc:	e000e100 	.word	0xe000e100

0000ee00 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    ee00:	4b05      	ldr	r3, [pc, #20]	; (ee18 <arch_irq_is_enabled+0x18>)
    ee02:	0942      	lsrs	r2, r0, #5
    ee04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    ee08:	2301      	movs	r3, #1
    ee0a:	f000 001f 	and.w	r0, r0, #31
    ee0e:	fa03 f000 	lsl.w	r0, r3, r0
}
    ee12:	4010      	ands	r0, r2
    ee14:	4770      	bx	lr
    ee16:	bf00      	nop
    ee18:	e000e100 	.word	0xe000e100

0000ee1c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    ee1c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    ee1e:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    ee20:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ee24:	bfac      	ite	ge
    ee26:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ee2a:	4b06      	ldrlt	r3, [pc, #24]	; (ee44 <z_arm_irq_priority_set+0x28>)
    ee2c:	ea4f 1141 	mov.w	r1, r1, lsl #5
    ee30:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ee32:	bfab      	itete	ge
    ee34:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ee38:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ee3c:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ee40:	5419      	strblt	r1, [r3, r0]
}
    ee42:	4770      	bx	lr
    ee44:	e000ed14 	.word	0xe000ed14

0000ee48 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    ee48:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    ee4a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    ee4c:	4b04      	ldr	r3, [pc, #16]	; (ee60 <_arch_isr_direct_pm+0x18>)
    ee4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    ee50:	b118      	cbz	r0, ee5a <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    ee52:	2200      	movs	r2, #0
    ee54:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
    ee56:	f00b fa02 	bl	1a25e <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    ee5a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    ee5c:	bd08      	pop	{r3, pc}
    ee5e:	bf00      	nop
    ee60:	200153f0 	.word	0x200153f0

0000ee64 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    ee64:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    ee68:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    ee6a:	490c      	ldr	r1, [pc, #48]	; (ee9c <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
    ee6c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    ee70:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    ee72:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    ee76:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    ee7a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    ee7c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    ee80:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    ee84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    ee88:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    ee8c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    ee8e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    ee90:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    ee92:	67c3      	str	r3, [r0, #124]	; 0x7c

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
    ee94:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    ee98:	4770      	bx	lr
    ee9a:	bf00      	nop
    ee9c:	000171e1 	.word	0x000171e1

0000eea0 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    eea0:	b508      	push	{r3, lr}
    eea2:	4604      	mov	r4, r0
    eea4:	460e      	mov	r6, r1
    eea6:	4615      	mov	r5, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    eea8:	2300      	movs	r3, #0
    eeaa:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    eeae:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    eeb2:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    eeb6:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    eeba:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
    eebe:	f000 fa39 	bl	f334 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    eec2:	4b09      	ldr	r3, [pc, #36]	; (eee8 <arch_switch_to_main_thread+0x48>)
    eec4:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    eec6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    eec8:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    eecc:	4628      	mov	r0, r5
    eece:	f386 8809 	msr	PSP, r6
    eed2:	2100      	movs	r1, #0
    eed4:	b663      	cpsie	if
    eed6:	f381 8811 	msr	BASEPRI, r1
    eeda:	f3bf 8f6f 	isb	sy
    eede:	2200      	movs	r2, #0
    eee0:	2300      	movs	r3, #0
    eee2:	f008 f97d 	bl	171e0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    eee6:	bf00      	nop
    eee8:	200153f0 	.word	0x200153f0

0000eeec <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    eeec:	4a14      	ldr	r2, [pc, #80]	; (ef40 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    eeee:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    eef0:	4b14      	ldr	r3, [pc, #80]	; (ef44 <z_arm_prep_c+0x58>)
    eef2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    eef6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    eef8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    eefc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    ef00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    ef04:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    ef08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    ef0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    ef10:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    ef14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    ef18:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    ef1c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    ef20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ef24:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    ef28:	2300      	movs	r3, #0
    ef2a:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    ef2e:	f006 fe89 	bl	15c44 <z_bss_zero>
	z_data_copy();
    ef32:	f007 fe2b 	bl	16b8c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    ef36:	f000 f9cf 	bl	f2d8 <z_arm_interrupt_init>
	z_cstart();
    ef3a:	f006 fea7 	bl	15c8c <z_cstart>
    ef3e:	bf00      	nop
    ef40:	0000c000 	.word	0x0000c000
    ef44:	e000ed00 	.word	0xe000ed00

0000ef48 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    ef48:	4929      	ldr	r1, [pc, #164]	; (eff0 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    ef4a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    ef4c:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    ef50:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    ef52:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    ef56:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    ef5a:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    ef5e:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    ef62:	d004      	beq.n	ef6e <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    ef64:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    ef68:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    ef6c:	e007      	b.n	ef7e <out_fp_endif>

0000ef6e <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    ef6e:	f102 0084 	add.w	r0, r2, #132	; 0x84
    vstmia r0, {s16-s31}
    ef72:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    ef76:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    ef7a:	f050 0004 	orrs.w	r0, r0, #4

0000ef7e <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    ef7e:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ef82:	2020      	movs	r0, #32
    msr BASEPRI, r0
    ef84:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    ef88:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    ef8c:	4f19      	ldr	r7, [pc, #100]	; (eff4 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    ef8e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    ef92:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    ef94:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    ef96:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    ef98:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
    ef9a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    ef9c:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    ef9e:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    efa2:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    efa6:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    efaa:	d105      	bne.n	efb8 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    efac:	2300      	movs	r3, #0
    vmsr fpscr, r3
    efae:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    efb2:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    efb6:	e005      	b.n	efc4 <in_fp_endif>

0000efb8 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    efb8:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    efbc:	f102 0084 	add.w	r0, r2, #132	; 0x84
    vldmia r0, {s16-s31}
    efc0:	ec90 8a10 	vldmia	r0, {s16-s31}

0000efc4 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    efc4:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    efc8:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    efcc:	f383 8814 	msr	CONTROL, r3
    isb
    efd0:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    efd4:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    efd8:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    efdc:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    efe0:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    efe4:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    efe6:	f008 fdb0 	bl	17b4a <configure_builtin_stack_guard>
    pop {r2, lr}
    efea:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    efee:	4770      	bx	lr
    ldr r1, =_kernel
    eff0:	200153f0 	.word	0x200153f0
    ldr v4, =_SCS_ICSR
    eff4:	e000ed04 	.word	0xe000ed04

0000eff8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    eff8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    effc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    effe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    f002:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    f006:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    f008:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    f00c:	2902      	cmp	r1, #2
    beq _oops
    f00e:	d0ff      	beq.n	f010 <_oops>

0000f010 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    f010:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    f012:	f008 fda0 	bl	17b56 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    f016:	bd01      	pop	{r0, pc}

0000f018 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    f018:	4901      	ldr	r1, [pc, #4]	; (f020 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    f01a:	2210      	movs	r2, #16
	str	r2, [r1]
    f01c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    f01e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    f020:	e000ed10 	.word	0xe000ed10

0000f024 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    f024:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    f026:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    f028:	f380 8811 	msr	BASEPRI, r0
	isb
    f02c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    f030:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    f034:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    f036:	b662      	cpsie	i
	isb
    f038:	f3bf 8f6f 	isb	sy

	bx	lr
    f03c:	4770      	bx	lr
    f03e:	bf00      	nop

0000f040 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    f040:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    f042:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    f044:	f381 8811 	msr	BASEPRI, r1

	wfe
    f048:	bf20      	wfe

	msr	BASEPRI, r0
    f04a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    f04e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    f050:	4770      	bx	lr
    f052:	bf00      	nop

0000f054 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    f054:	bf30      	wfi
    b z_SysNmiOnReset
    f056:	f7ff bffd 	b.w	f054 <z_SysNmiOnReset>
    f05a:	bf00      	nop

0000f05c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    f05c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    f05e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    f060:	4a0b      	ldr	r2, [pc, #44]	; (f090 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    f062:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    f064:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    f066:	bf1e      	ittt	ne
	movne	r1, #0
    f068:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    f06a:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    f06c:	f00b f8f7 	blne	1a25e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    f070:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    f072:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    f076:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    f07a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    f07e:	4905      	ldr	r1, [pc, #20]	; (f094 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    f080:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    f082:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    f084:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    f086:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    f08a:	4903      	ldr	r1, [pc, #12]	; (f098 <_isr_wrapper+0x3c>)
	bx r1
    f08c:	4708      	bx	r1
    f08e:	0000      	.short	0x0000
	ldr r2, =_kernel
    f090:	200153f0 	.word	0x200153f0
	ldr r1, =_sw_isr_table
    f094:	0001ab78 	.word	0x0001ab78
	ldr r1, =z_arm_int_exit
    f098:	0000f0e1 	.word	0x0000f0e1

0000f09c <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    f09c:	f008 fbfe 	bl	1789c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f0a0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    f0a2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    f0a6:	4808      	ldr	r0, [pc, #32]	; (f0c8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    f0a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    f0ac:	1840      	adds	r0, r0, r1
    msr PSP, r0
    f0ae:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    f0b2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    f0b6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    f0b8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    f0ba:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    f0be:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    f0c2:	f7ff ff13 	bl	eeec <z_arm_prep_c>
    f0c6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    f0c8:	20019730 	.word	0x20019730

0000f0cc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    f0cc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    f0d0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    f0d4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    f0d6:	4672      	mov	r2, lr
	bl z_arm_fault
    f0d8:	f000 f864 	bl	f1a4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    f0dc:	bd01      	pop	{r0, pc}
    f0de:	bf00      	nop

0000f0e0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    f0e0:	4b04      	ldr	r3, [pc, #16]	; (f0f4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    f0e2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    f0e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    f0e6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    f0e8:	d003      	beq.n	f0f2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    f0ea:	4903      	ldr	r1, [pc, #12]	; (f0f8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    f0ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    f0f0:	600a      	str	r2, [r1, #0]

0000f0f2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    f0f2:	4770      	bx	lr
	ldr r3, =_kernel
    f0f4:	200153f0 	.word	0x200153f0
	ldr r1, =_SCS_ICSR
    f0f8:	e000ed04 	.word	0xe000ed04

0000f0fc <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    f0fc:	4b0e      	ldr	r3, [pc, #56]	; (f138 <mem_manage_fault.isra.0+0x3c>)
    f0fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    f100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    f102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f104:	0792      	lsls	r2, r2, #30
    f106:	d508      	bpl.n	f11a <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    f108:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    f10a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f10c:	0612      	lsls	r2, r2, #24
    f10e:	d504      	bpl.n	f11a <mem_manage_fault.isra.0+0x1e>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    f110:	b118      	cbz	r0, f11a <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    f112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    f118:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    f11a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    f11c:	4b06      	ldr	r3, [pc, #24]	; (f138 <mem_manage_fault.isra.0+0x3c>)
    f11e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    f120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    f122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f124:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    f126:	bf58      	it	pl
    f128:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    f12a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f12c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    f130:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    f132:	7008      	strb	r0, [r1, #0]

	return reason;
}
    f134:	4770      	bx	lr
    f136:	bf00      	nop
    f138:	e000ed00 	.word	0xe000ed00

0000f13c <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    f13c:	4b0d      	ldr	r3, [pc, #52]	; (f174 <bus_fault.isra.0+0x38>)
    f13e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    f140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    f142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f144:	0592      	lsls	r2, r2, #22
    f146:	d508      	bpl.n	f15a <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    f148:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    f14a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f14c:	0412      	lsls	r2, r2, #16
    f14e:	d504      	bpl.n	f15a <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    f150:	b118      	cbz	r0, f15a <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    f152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    f158:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    f15a:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    f15c:	4b05      	ldr	r3, [pc, #20]	; (f174 <bus_fault.isra.0+0x38>)
    f15e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    f160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f162:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    f164:	bf58      	it	pl
    f166:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    f168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f16a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    f16e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    f170:	7008      	strb	r0, [r1, #0]

	return reason;
}
    f172:	4770      	bx	lr
    f174:	e000ed00 	.word	0xe000ed00

0000f178 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    f178:	4b09      	ldr	r3, [pc, #36]	; (f1a0 <usage_fault.isra.0+0x28>)
    f17a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    f17c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    f17e:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    f180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    f182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    f184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    f186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    f18a:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f18e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    f192:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    f196:	bf18      	it	ne
    f198:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f19a:	629a      	str	r2, [r3, #40]	; 0x28
}
    f19c:	4770      	bx	lr
    f19e:	bf00      	nop
    f1a0:	e000ed00 	.word	0xe000ed00

0000f1a4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    f1a4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f1a6:	4b3a      	ldr	r3, [pc, #232]	; (f290 <z_arm_fault+0xec>)
    f1a8:	2500      	movs	r5, #0
    f1aa:	685b      	ldr	r3, [r3, #4]
{
    f1ac:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
    f1b2:	f385 8811 	msr	BASEPRI, r5
    f1b6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    f1ba:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    f1be:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    f1c2:	d119      	bne.n	f1f8 <z_arm_fault+0x54>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    f1c4:	07d6      	lsls	r6, r2, #31
    f1c6:	d417      	bmi.n	f1f8 <z_arm_fault+0x54>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    f1c8:	0655      	lsls	r5, r2, #25
    f1ca:	d404      	bmi.n	f1d6 <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    f1cc:	0714      	lsls	r4, r2, #28
    f1ce:	d405      	bmi.n	f1dc <z_arm_fault+0x38>
			ptr_esf = (z_arch_esf_t *)msp;
    f1d0:	4606      	mov	r6, r0
			*nested_exc = true;
    f1d2:	2501      	movs	r5, #1
    f1d4:	e004      	b.n	f1e0 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    f1d6:	f012 0504 	ands.w	r5, r2, #4
    f1da:	d00b      	beq.n	f1f4 <z_arm_fault+0x50>
			ptr_esf = (z_arch_esf_t *)psp;
    f1dc:	460e      	mov	r6, r1
	*nested_exc = false;
    f1de:	2500      	movs	r5, #0
	*recoverable = false;
    f1e0:	2200      	movs	r2, #0
    f1e2:	3b03      	subs	r3, #3
    f1e4:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    f1e8:	2b03      	cmp	r3, #3
    f1ea:	d849      	bhi.n	f280 <z_arm_fault+0xdc>
    f1ec:	e8df f003 	tbb	[pc, r3]
    f1f0:	3d444006 	.word	0x3d444006
			ptr_esf = (z_arch_esf_t *)msp;
    f1f4:	4606      	mov	r6, r0
	if (!alternative_state_exc) {
    f1f6:	e7f3      	b.n	f1e0 <z_arm_fault+0x3c>
		return NULL;
    f1f8:	462e      	mov	r6, r5
    f1fa:	e7f1      	b.n	f1e0 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    f1fc:	4b24      	ldr	r3, [pc, #144]	; (f290 <z_arm_fault+0xec>)
    f1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f200:	0792      	lsls	r2, r2, #30
    f202:	d43d      	bmi.n	f280 <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    f204:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    f206:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    f20a:	d008      	beq.n	f21e <z_arm_fault+0x7a>
		if (SCB_MMFSR != 0) {
    f20c:	3328      	adds	r3, #40	; 0x28
    f20e:	781b      	ldrb	r3, [r3, #0]
    f210:	b1eb      	cbz	r3, f24e <z_arm_fault+0xaa>
			reason = mem_manage_fault(esf, 1, recoverable);
    f212:	2001      	movs	r0, #1
    f214:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    f218:	f7ff ff70 	bl	f0fc <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
    f21c:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    f21e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f222:	b993      	cbnz	r3, f24a <z_arm_fault+0xa6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    f224:	2268      	movs	r2, #104	; 0x68
    f226:	4631      	mov	r1, r6
    f228:	a802      	add	r0, sp, #8
    f22a:	f008 fe57 	bl	17edc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    f22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f230:	b345      	cbz	r5, f284 <z_arm_fault+0xe0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    f232:	f3c3 0208 	ubfx	r2, r3, #0, #9
    f236:	b922      	cbnz	r2, f242 <z_arm_fault+0x9e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    f238:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    f23c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    f240:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    f242:	4620      	mov	r0, r4
    f244:	a902      	add	r1, sp, #8
    f246:	f008 fc84 	bl	17b52 <z_arm_fatal_error>
}
    f24a:	b01c      	add	sp, #112	; 0x70
    f24c:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    f24e:	4b11      	ldr	r3, [pc, #68]	; (f294 <z_arm_fault+0xf0>)
    f250:	781b      	ldrb	r3, [r3, #0]
    f252:	b12b      	cbz	r3, f260 <z_arm_fault+0xbc>
			reason = bus_fault(esf, 1, recoverable);
    f254:	2001      	movs	r0, #1
    f256:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    f25a:	f7ff ff6f 	bl	f13c <bus_fault.isra.0>
    f25e:	e7dd      	b.n	f21c <z_arm_fault+0x78>
		} else if (SCB_UFSR != 0) {
    f260:	4b0d      	ldr	r3, [pc, #52]	; (f298 <z_arm_fault+0xf4>)
    f262:	8818      	ldrh	r0, [r3, #0]
    f264:	b284      	uxth	r4, r0
    f266:	2c00      	cmp	r4, #0
    f268:	d0d9      	beq.n	f21e <z_arm_fault+0x7a>
		reason = usage_fault(esf);
    f26a:	f7ff ff85 	bl	f178 <usage_fault.isra.0>
    f26e:	e7d5      	b.n	f21c <z_arm_fault+0x78>
		reason = mem_manage_fault(esf, 0, recoverable);
    f270:	2000      	movs	r0, #0
    f272:	f10d 0107 	add.w	r1, sp, #7
    f276:	e7cf      	b.n	f218 <z_arm_fault+0x74>
		reason = bus_fault(esf, 0, recoverable);
    f278:	2000      	movs	r0, #0
    f27a:	f10d 0107 	add.w	r1, sp, #7
    f27e:	e7ec      	b.n	f25a <z_arm_fault+0xb6>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f280:	2400      	movs	r4, #0
    f282:	e7cc      	b.n	f21e <z_arm_fault+0x7a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    f284:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    f288:	f023 0301 	bic.w	r3, r3, #1
    f28c:	e7d8      	b.n	f240 <z_arm_fault+0x9c>
    f28e:	bf00      	nop
    f290:	e000ed00 	.word	0xe000ed00
    f294:	e000ed29 	.word	0xe000ed29
    f298:	e000ed2a 	.word	0xe000ed2a

0000f29c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    f29c:	4b04      	ldr	r3, [pc, #16]	; (f2b0 <z_arm_fault_init+0x14>)
    f29e:	695a      	ldr	r2, [r3, #20]
    f2a0:	f042 0210 	orr.w	r2, r2, #16
    f2a4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    f2a6:	695a      	ldr	r2, [r3, #20]
    f2a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    f2ac:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    f2ae:	4770      	bx	lr
    f2b0:	e000ed00 	.word	0xe000ed00

0000f2b4 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    f2b4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    f2b8:	4905      	ldr	r1, [pc, #20]	; (f2d0 <sys_arch_reboot+0x1c>)
    f2ba:	4b06      	ldr	r3, [pc, #24]	; (f2d4 <sys_arch_reboot+0x20>)
    f2bc:	68ca      	ldr	r2, [r1, #12]
    f2be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f2c2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    f2c4:	60cb      	str	r3, [r1, #12]
    f2c6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    f2ca:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    f2cc:	e7fd      	b.n	f2ca <sys_arch_reboot+0x16>
    f2ce:	bf00      	nop
    f2d0:	e000ed00 	.word	0xe000ed00
    f2d4:	05fa0004 	.word	0x05fa0004

0000f2d8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    f2d8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f2da:	2120      	movs	r1, #32
    f2dc:	4803      	ldr	r0, [pc, #12]	; (f2ec <z_arm_interrupt_init+0x14>)
    f2de:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    f2e0:	3301      	adds	r3, #1
    f2e2:	2b41      	cmp	r3, #65	; 0x41
    f2e4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    f2e8:	d1f9      	bne.n	f2de <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    f2ea:	4770      	bx	lr
    f2ec:	e000e100 	.word	0xe000e100

0000f2f0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    f2f0:	b508      	push	{r3, lr}
	if (_current == thread) {
    f2f2:	4b0e      	ldr	r3, [pc, #56]	; (f32c <z_impl_k_thread_abort+0x3c>)
    f2f4:	689b      	ldr	r3, [r3, #8]
    f2f6:	4283      	cmp	r3, r0
    f2f8:	d107      	bne.n	f30a <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f2fa:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    f2fe:	b193      	cbz	r3, f326 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f300:	4a0b      	ldr	r2, [pc, #44]	; (f330 <z_impl_k_thread_abort+0x40>)
    f302:	6853      	ldr	r3, [r2, #4]
    f304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    f308:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    f30a:	f007 f8bf 	bl	1648c <z_thread_single_abort>
	__asm__ volatile(
    f30e:	f04f 0320 	mov.w	r3, #32
    f312:	f3ef 8011 	mrs	r0, BASEPRI
    f316:	f383 8811 	msr	BASEPRI, r3
    f31a:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    f31e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    f322:	f00b b8a3 	b.w	1a46c <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    f326:	f007 fba9 	bl	16a7c <z_self_abort>
    f32a:	bf00      	nop
    f32c:	200153f0 	.word	0x200153f0
    f330:	e000ed00 	.word	0xe000ed00

0000f334 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    f334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    f336:	4c09      	ldr	r4, [pc, #36]	; (f35c <z_arm_configure_static_mpu_regions+0x28>)
    f338:	4a09      	ldr	r2, [pc, #36]	; (f360 <z_arm_configure_static_mpu_regions+0x2c>)
    f33a:	4623      	mov	r3, r4
    f33c:	2101      	movs	r1, #1
    f33e:	4809      	ldr	r0, [pc, #36]	; (f364 <z_arm_configure_static_mpu_regions+0x30>)
    f340:	f000 f902 	bl	f548 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    f344:	2300      	movs	r3, #0
    f346:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    f348:	4b07      	ldr	r3, [pc, #28]	; (f368 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    f34a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    f34c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    f34e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    f350:	9301      	str	r3, [sp, #4]
    f352:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    f354:	f000 f902 	bl	f55c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    f358:	b004      	add	sp, #16
    f35a:	bd10      	pop	{r4, pc}
    f35c:	20040000 	.word	0x20040000
    f360:	20014500 	.word	0x20014500
    f364:	0001ae08 	.word	0x0001ae08
    f368:	20014788 	.word	0x20014788

0000f36c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    f36c:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    f36e:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    f370:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    f372:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    f376:	f004 031f 	and.w	r3, r4, #31
    f37a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    f37c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    f37e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    f380:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    f384:	4904      	ldr	r1, [pc, #16]	; (f398 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    f386:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    f38a:	f043 0301 	orr.w	r3, r3, #1
    f38e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    f390:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    f392:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    f394:	bd10      	pop	{r4, pc}
    f396:	bf00      	nop
    f398:	e000ed90 	.word	0xe000ed90

0000f39c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    f39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3a0:	4688      	mov	r8, r1
    f3a2:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    f3a4:	4606      	mov	r6, r0
    f3a6:	f04f 0900 	mov.w	r9, #0
	MPU->RNR = index;
    f3aa:	4d4a      	ldr	r5, [pc, #296]	; (f4d4 <mpu_configure_regions_and_partition.constprop.0+0x138>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    f3ac:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    f3ae:	45c1      	cmp	r9, r8
    f3b0:	da05      	bge.n	f3be <mpu_configure_regions_and_partition.constprop.0+0x22>
		if (regions[i].size == 0U) {
    f3b2:	6877      	ldr	r7, [r6, #4]
    f3b4:	b3bf      	cbz	r7, f426 <mpu_configure_regions_and_partition.constprop.0+0x8a>
		&&
    f3b6:	2f1f      	cmp	r7, #31
    f3b8:	d805      	bhi.n	f3c6 <mpu_configure_regions_and_partition.constprop.0+0x2a>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    f3ba:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    f3be:	4620      	mov	r0, r4
    f3c0:	b005      	add	sp, #20
    f3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    f3c6:	06fb      	lsls	r3, r7, #27
    f3c8:	d1f7      	bne.n	f3ba <mpu_configure_regions_and_partition.constprop.0+0x1e>
		((part->start &
    f3ca:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    f3ce:	f01a 0f1f 	tst.w	sl, #31
    f3d2:	d1f2      	bne.n	f3ba <mpu_configure_regions_and_partition.constprop.0+0x1e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    f3d4:	4650      	mov	r0, sl
    f3d6:	f008 fbe6 	bl	17ba6 <arm_cmse_mpu_region_get>
    f3da:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    f3dc:	eb07 000a 	add.w	r0, r7, sl
    f3e0:	3801      	subs	r0, #1
    f3e2:	f008 fbe0 	bl	17ba6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    f3e6:	4583      	cmp	fp, r0
    f3e8:	d1e7      	bne.n	f3ba <mpu_configure_regions_and_partition.constprop.0+0x1e>
		if ((u_reg_index == -EINVAL) ||
    f3ea:	f11b 0f16 	cmn.w	fp, #22
    f3ee:	d0e4      	beq.n	f3ba <mpu_configure_regions_and_partition.constprop.0+0x1e>
			(u_reg_index > (reg_index - 1))) {
    f3f0:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    f3f2:	455b      	cmp	r3, fp
    f3f4:	dbe1      	blt.n	f3ba <mpu_configure_regions_and_partition.constprop.0+0x1e>
	MPU->RNR = index;
    f3f6:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    f3fa:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    f3fc:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    f400:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    f402:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    f406:	e9d6 3200 	ldrd	r3, r2, [r6]
    f40a:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    f40c:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    f40e:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    f412:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    f416:	d11c      	bne.n	f452 <mpu_configure_regions_and_partition.constprop.0+0xb6>
    f418:	4557      	cmp	r7, sl
    f41a:	d108      	bne.n	f42e <mpu_configure_regions_and_partition.constprop.0+0x92>
			mpu_configure_region(u_reg_index, &regions[i]);
    f41c:	4631      	mov	r1, r6
    f41e:	fa5f f08b 	uxtb.w	r0, fp
    f422:	f008 fba3 	bl	17b6c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    f426:	f109 0901 	add.w	r9, r9, #1
    f42a:	360c      	adds	r6, #12
    f42c:	e7bf      	b.n	f3ae <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    f42e:	4631      	mov	r1, r6
	MPU->RNR = index;
    f430:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    f434:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    f436:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    f43a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    f43e:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    f440:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    f442:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    f444:	f008 fb92 	bl	17b6c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    f448:	f110 0f16 	cmn.w	r0, #22
    f44c:	d0b5      	beq.n	f3ba <mpu_configure_regions_and_partition.constprop.0+0x1e>
			reg_index++;
    f44e:	1c44      	adds	r4, r0, #1
    f450:	e7e9      	b.n	f426 <mpu_configure_regions_and_partition.constprop.0+0x8a>
		} else if (reg_last == u_reg_last) {
    f452:	3b01      	subs	r3, #1
    f454:	4557      	cmp	r7, sl
    f456:	b2e0      	uxtb	r0, r4
    f458:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    f45c:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    f460:	d106      	bne.n	f470 <mpu_configure_regions_and_partition.constprop.0+0xd4>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    f462:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    f464:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    f466:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    f46a:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    f46c:	612b      	str	r3, [r5, #16]
			reg_index =
    f46e:	e7e9      	b.n	f444 <mpu_configure_regions_and_partition.constprop.0+0xa8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    f470:	6929      	ldr	r1, [r5, #16]
    f472:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    f476:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    f478:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    f47a:	4631      	mov	r1, r6
    f47c:	f008 fb76 	bl	17b6c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    f480:	f110 0f16 	cmn.w	r0, #22
    f484:	d099      	beq.n	f3ba <mpu_configure_regions_and_partition.constprop.0+0x1e>
	MPU->RNR = index;
    f486:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    f48a:	68ea      	ldr	r2, [r5, #12]
    f48c:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    f490:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    f492:	f362 0304 	bfi	r3, r2, #0, #5
    f496:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    f49a:	692b      	ldr	r3, [r5, #16]
    f49c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f4a0:	085b      	lsrs	r3, r3, #1
    f4a2:	f363 1247 	bfi	r2, r3, #5, #3
    f4a6:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    f4aa:	e9d6 3200 	ldrd	r3, r2, [r6]
    f4ae:	4413      	add	r3, r2
    f4b0:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    f4b2:	f023 031f 	bic.w	r3, r3, #31
    f4b6:	443b      	add	r3, r7
			reg_index++;
    f4b8:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    f4ba:	eba3 0a0a 	sub.w	sl, r3, sl
    f4be:	b2e0      	uxtb	r0, r4
    f4c0:	f02a 031f 	bic.w	r3, sl, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    f4c4:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    f4c6:	9303      	str	r3, [sp, #12]
    f4c8:	f63f af77 	bhi.w	f3ba <mpu_configure_regions_and_partition.constprop.0+0x1e>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    f4cc:	4669      	mov	r1, sp
    f4ce:	f7ff ff4d 	bl	f36c <region_init>
    f4d2:	e7bc      	b.n	f44e <mpu_configure_regions_and_partition.constprop.0+0xb2>
    f4d4:	e000ed90 	.word	0xe000ed90

0000f4d8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    f4d8:	2205      	movs	r2, #5
    f4da:	4b03      	ldr	r3, [pc, #12]	; (f4e8 <arm_core_mpu_enable+0x10>)
    f4dc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    f4de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f4e2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    f4e6:	4770      	bx	lr
    f4e8:	e000ed90 	.word	0xe000ed90

0000f4ec <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    f4ec:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    f4f0:	2200      	movs	r2, #0
    f4f2:	4b01      	ldr	r3, [pc, #4]	; (f4f8 <arm_core_mpu_disable+0xc>)
    f4f4:	605a      	str	r2, [r3, #4]
}
    f4f6:	4770      	bx	lr
    f4f8:	e000ed90 	.word	0xe000ed90

0000f4fc <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    f4fc:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    f4fe:	4c0e      	ldr	r4, [pc, #56]	; (f538 <arm_mpu_init+0x3c>)
    f500:	6825      	ldr	r5, [r4, #0]
    f502:	2d10      	cmp	r5, #16
    f504:	d814      	bhi.n	f530 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    f506:	f7ff fff1 	bl	f4ec <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    f50a:	2000      	movs	r0, #0
	MPU->MAIR0 =
    f50c:	4b0b      	ldr	r3, [pc, #44]	; (f53c <arm_mpu_init+0x40>)
    f50e:	4a0c      	ldr	r2, [pc, #48]	; (f540 <arm_mpu_init+0x44>)
    f510:	631a      	str	r2, [r3, #48]	; 0x30
    f512:	4285      	cmp	r5, r0
    f514:	d105      	bne.n	f522 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    f516:	4b0b      	ldr	r3, [pc, #44]	; (f544 <arm_mpu_init+0x48>)
    f518:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    f51a:	f7ff ffdd 	bl	f4d8 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    f51e:	2000      	movs	r0, #0
}
    f520:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    f522:	6861      	ldr	r1, [r4, #4]
    f524:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    f528:	f7ff ff20 	bl	f36c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    f52c:	3001      	adds	r0, #1
    f52e:	e7f0      	b.n	f512 <arm_mpu_init+0x16>
		return -1;
    f530:	f04f 30ff 	mov.w	r0, #4294967295
    f534:	e7f4      	b.n	f520 <arm_mpu_init+0x24>
    f536:	bf00      	nop
    f538:	0001ae14 	.word	0x0001ae14
    f53c:	e000ed90 	.word	0xe000ed90
    f540:	0044ffaa 	.word	0x0044ffaa
    f544:	20015c43 	.word	0x20015c43

0000f548 <arm_core_mpu_configure_static_mpu_regions>:
{
    f548:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    f54a:	4c03      	ldr	r4, [pc, #12]	; (f558 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    f54c:	7822      	ldrb	r2, [r4, #0]
    f54e:	f7ff ff25 	bl	f39c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    f552:	7020      	strb	r0, [r4, #0]
}
    f554:	bd10      	pop	{r4, pc}
    f556:	bf00      	nop
    f558:	20015c43 	.word	0x20015c43

0000f55c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    f55c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f560:	4d26      	ldr	r5, [pc, #152]	; (f5fc <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
    f562:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    f564:	4606      	mov	r6, r0
    f566:	f04f 0800 	mov.w	r8, #0
    f56a:	46ab      	mov	fp, r5
	MPU->RNR = index;
    f56c:	4f24      	ldr	r7, [pc, #144]	; (f600 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    f56e:	45d0      	cmp	r8, sl
    f570:	da1b      	bge.n	f5aa <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    f572:	f8d6 9004 	ldr.w	r9, [r6, #4]
    f576:	f1b9 0f00 	cmp.w	r9, #0
    f57a:	d039      	beq.n	f5f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    f57c:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    f57e:	4608      	mov	r0, r1
    f580:	9101      	str	r1, [sp, #4]
    f582:	f008 fb10 	bl	17ba6 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    f586:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    f588:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    f58a:	eb09 0001 	add.w	r0, r9, r1
    f58e:	3801      	subs	r0, #1
    f590:	f008 fb09 	bl	17ba6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    f594:	4284      	cmp	r4, r0
    f596:	f04f 0214 	mov.w	r2, #20
    f59a:	4b1a      	ldr	r3, [pc, #104]	; (f604 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
    f59c:	d008      	beq.n	f5b0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    f59e:	f06f 0315 	mvn.w	r3, #21
    f5a2:	fb02 f808 	mul.w	r8, r2, r8
    f5a6:	f84b 3008 	str.w	r3, [fp, r8]
}
    f5aa:	b003      	add	sp, #12
    f5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    f5b0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    f5b4:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    f5b6:	d0f8      	beq.n	f5aa <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    f5b8:	7819      	ldrb	r1, [r3, #0]
    f5ba:	42a1      	cmp	r1, r4
    f5bc:	ddf5      	ble.n	f5aa <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    f5be:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    f5c2:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    f5c4:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    f5c6:	68fc      	ldr	r4, [r7, #12]
    f5c8:	f100 0108 	add.w	r1, r0, #8
    f5cc:	7b00      	ldrb	r0, [r0, #12]
    f5ce:	f364 0004 	bfi	r0, r4, #0, #5
    f5d2:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    f5d4:	6938      	ldr	r0, [r7, #16]
    f5d6:	790c      	ldrb	r4, [r1, #4]
    f5d8:	0840      	lsrs	r0, r0, #1
    f5da:	f360 1447 	bfi	r4, r0, #5, #3
    f5de:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    f5e0:	68f9      	ldr	r1, [r7, #12]
    f5e2:	f021 011f 	bic.w	r1, r1, #31
    f5e6:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    f5e8:	6939      	ldr	r1, [r7, #16]
    f5ea:	f021 011f 	bic.w	r1, r1, #31
    f5ee:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    f5f0:	f108 0801 	add.w	r8, r8, #1
    f5f4:	3514      	adds	r5, #20
    f5f6:	360c      	adds	r6, #12
    f5f8:	e7b9      	b.n	f56e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    f5fa:	bf00      	nop
    f5fc:	20014d88 	.word	0x20014d88
    f600:	e000ed90 	.word	0xe000ed90
    f604:	20015c43 	.word	0x20015c43

0000f608 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    f608:	4b01      	ldr	r3, [pc, #4]	; (f610 <__stdout_hook_install+0x8>)
    f60a:	6018      	str	r0, [r3, #0]
}
    f60c:	4770      	bx	lr
    f60e:	bf00      	nop
    f610:	20014504 	.word	0x20014504

0000f614 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    f614:	b40c      	push	{r2, r3}
    f616:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    f618:	b909      	cbnz	r1, f61e <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    f61a:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    f61e:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    f622:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    f624:	9a06      	ldr	r2, [sp, #24]
    f626:	a902      	add	r1, sp, #8
    f628:	4805      	ldr	r0, [pc, #20]	; (f640 <snprintf+0x2c>)
	va_start(vargs, format);
    f62a:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    f62c:	f7fe f908 	bl	d840 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    f630:	2200      	movs	r2, #0
    f632:	9b02      	ldr	r3, [sp, #8]
    f634:	701a      	strb	r2, [r3, #0]
	return r;
}
    f636:	b005      	add	sp, #20
    f638:	f85d eb04 	ldr.w	lr, [sp], #4
    f63c:	b002      	add	sp, #8
    f63e:	4770      	bx	lr
    f640:	00017f7f 	.word	0x00017f7f

0000f644 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
    f644:	b40e      	push	{r1, r2, r3}
    f646:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    f648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    f64c:	ab05      	add	r3, sp, #20
    f64e:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
    f652:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    f654:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    f656:	4806      	ldr	r0, [pc, #24]	; (f670 <sprintf+0x2c>)
    f658:	a902      	add	r1, sp, #8
	va_start(vargs, format);
    f65a:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    f65c:	f7fe f8f0 	bl	d840 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    f660:	2200      	movs	r2, #0
    f662:	9b02      	ldr	r3, [sp, #8]
    f664:	701a      	strb	r2, [r3, #0]
	return r;
}
    f666:	b004      	add	sp, #16
    f668:	f85d eb04 	ldr.w	lr, [sp], #4
    f66c:	b003      	add	sp, #12
    f66e:	4770      	bx	lr
    f670:	00017f7f 	.word	0x00017f7f

0000f674 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
    f674:	b538      	push	{r3, r4, r5, lr}
    f676:	4c08      	ldr	r4, [pc, #32]	; (f698 <net_if_init+0x24>)

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    f678:	4d08      	ldr	r5, [pc, #32]	; (f69c <net_if_init+0x28>)
    f67a:	42ac      	cmp	r4, r5
    f67c:	4620      	mov	r0, r4
    f67e:	d300      	bcc.n	f682 <net_if_init+0xe>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
    f680:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
    f682:	6803      	ldr	r3, [r0, #0]
    f684:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
    f686:	681b      	ldr	r3, [r3, #0]
    f688:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
    f68a:	2b00      	cmp	r3, #0
    f68c:	d0f5      	beq.n	f67a <net_if_init+0x6>
    f68e:	681b      	ldr	r3, [r3, #0]
    f690:	2b00      	cmp	r3, #0
    f692:	d0f2      	beq.n	f67a <net_if_init+0x6>
	api->init(iface);
    f694:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    f696:	e7f0      	b.n	f67a <net_if_init+0x6>
    f698:	20014764 	.word	0x20014764
    f69c:	20014768 	.word	0x20014768

0000f6a0 <net_if_post_init>:

void net_if_post_init(void)
{
    f6a0:	b538      	push	{r3, r4, r5, lr}
    f6a2:	4c08      	ldr	r4, [pc, #32]	; (f6c4 <net_if_post_init+0x24>)
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    f6a4:	4d08      	ldr	r5, [pc, #32]	; (f6c8 <net_if_post_init+0x28>)
    f6a6:	42ac      	cmp	r4, r5
    f6a8:	4620      	mov	r0, r4
    f6aa:	d300      	bcc.n	f6ae <net_if_post_init+0xe>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
    f6ac:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f6ae:	6803      	ldr	r3, [r0, #0]
    f6b0:	3404      	adds	r4, #4
    f6b2:	330c      	adds	r3, #12
    f6b4:	e8d3 3faf 	lda	r3, [r3]
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
    f6b8:	071b      	lsls	r3, r3, #28
    f6ba:	d4f4      	bmi.n	f6a6 <net_if_post_init+0x6>
			net_if_up(iface);
    f6bc:	f008 fc85 	bl	17fca <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
    f6c0:	e7f1      	b.n	f6a6 <net_if_post_init+0x6>
    f6c2:	bf00      	nop
    f6c4:	20014764 	.word	0x20014764
    f6c8:	20014768 	.word	0x20014768

0000f6cc <nrf_gpio_cfg_sense_set>:

NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    f6cc:	4a06      	ldr	r2, [pc, #24]	; (f6e8 <nrf_gpio_cfg_sense_set+0x1c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    f6ce:	f000 001f 	and.w	r0, r0, #31
    f6d2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    f6d6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    f6da:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f6de:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    f6e2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
    f6e6:	4770      	bx	lr
    f6e8:	40842500 	.word	0x40842500

0000f6ec <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    f6ec:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    f6ee:	4b09      	ldr	r3, [pc, #36]	; (f714 <gpio_nrfx_init+0x28>)
    f6f0:	781a      	ldrb	r2, [r3, #0]
    f6f2:	b96a      	cbnz	r2, f710 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    f6f4:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    f6f6:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
    f6f8:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    f6fa:	2105      	movs	r1, #5
    f6fc:	f7ff fb8e 	bl	ee1c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    f700:	2031      	movs	r0, #49	; 0x31
    f702:	f7ff fb6d 	bl	ede0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    f706:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    f70a:	4b03      	ldr	r3, [pc, #12]	; (f718 <gpio_nrfx_init+0x2c>)
    f70c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    f710:	2000      	movs	r0, #0
    f712:	bd08      	pop	{r3, pc}
    f714:	20015c44 	.word	0x20015c44
    f718:	40031000 	.word	0x40031000

0000f71c <gpio_nrfx_pin_interrupt_configure>:
{
    f71c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f720:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    f722:	6841      	ldr	r1, [r0, #4]
    f724:	f006 071f 	and.w	r7, r6, #31
    f728:	7a09      	ldrb	r1, [r1, #8]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    f72a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
    f72e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    f732:	ea47 1741 	orr.w	r7, r7, r1, lsl #5
    f736:	d10a      	bne.n	f74e <gpio_nrfx_pin_interrupt_configure+0x32>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    f738:	4862      	ldr	r0, [pc, #392]	; (f8c4 <gpio_nrfx_pin_interrupt_configure+0x1a8>)
    *p_pin = pin_number & 0x1F;
    f73a:	f007 011f 	and.w	r1, r7, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    f73e:	3180      	adds	r1, #128	; 0x80
    f740:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    f744:	07c9      	lsls	r1, r1, #31
    f746:	d508      	bpl.n	f75a <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
    f748:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f74c:	e09d      	b.n	f88a <gpio_nrfx_pin_interrupt_configure+0x16e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    f74e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    f752:	f8d8 100c 	ldr.w	r1, [r8, #12]
    f756:	f000 809b 	beq.w	f890 <gpio_nrfx_pin_interrupt_configure+0x174>
    f75a:	2101      	movs	r1, #1
    f75c:	f8d8 000c 	ldr.w	r0, [r8, #12]
    f760:	40b1      	lsls	r1, r6
    f762:	4301      	orrs	r1, r0
    f764:	f8c8 100c 	str.w	r1, [r8, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    f768:	2101      	movs	r1, #1
    f76a:	f8d8 0014 	ldr.w	r0, [r8, #20]
    f76e:	40b1      	lsls	r1, r6
    f770:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    f774:	bf0c      	ite	eq
    f776:	4308      	orreq	r0, r1
    f778:	4388      	bicne	r0, r1
    f77a:	f8c8 0014 	str.w	r0, [r8, #20]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f77e:	2000      	movs	r0, #0
    f780:	f8d8 2018 	ldr.w	r2, [r8, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    f784:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    f788:	bf0c      	ite	eq
    f78a:	430a      	orreq	r2, r1
    f78c:	438a      	bicne	r2, r1
    f78e:	f8c8 2018 	str.w	r2, [r8, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    f792:	f8d8 2010 	ldr.w	r2, [r8, #16]
    f796:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    f79a:	4d4b      	ldr	r5, [pc, #300]	; (f8c8 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
    f79c:	bf0c      	ite	eq
    f79e:	4311      	orreq	r1, r2
    f7a0:	ea22 0101 	bicne.w	r1, r2, r1
    f7a4:	f8c8 1010 	str.w	r1, [r8, #16]
    f7a8:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    f7ac:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f7ae:	f500 72a2 	add.w	r2, r0, #324	; 0x144
    f7b2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    f7b6:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    f7ba:	4297      	cmp	r7, r2
    f7bc:	d16d      	bne.n	f89a <gpio_nrfx_pin_interrupt_configure+0x17e>
		    && (intenset & BIT(i))) {
    f7be:	fa23 f200 	lsr.w	r2, r3, r0
    f7c2:	07d2      	lsls	r2, r2, #31
    f7c4:	d569      	bpl.n	f89a <gpio_nrfx_pin_interrupt_configure+0x17e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    f7c6:	0083      	lsls	r3, r0, #2
    f7c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f7cc:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    f7d0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    f7d4:	f022 0201 	bic.w	r2, r2, #1
    f7d8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    f7dc:	2301      	movs	r3, #1
    f7de:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    f7e0:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    f7e4:	b2c0      	uxtb	r0, r0
    f7e6:	f006 f8af 	bl	15948 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    f7ea:	4638      	mov	r0, r7
    f7ec:	2100      	movs	r1, #0
    f7ee:	f7ff ff6d 	bl	f6cc <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    f7f2:	f8d8 000c 	ldr.w	r0, [r8, #12]
    f7f6:	40f0      	lsrs	r0, r6
    f7f8:	f010 0001 	ands.w	r0, r0, #1
    f7fc:	d045      	beq.n	f88a <gpio_nrfx_pin_interrupt_configure+0x16e>
		if (data->trig_edge & BIT(pin)) {
    f7fe:	f8d8 0014 	ldr.w	r0, [r8, #20]
    f802:	40f0      	lsrs	r0, r6
    f804:	f010 0401 	ands.w	r4, r0, #1
    f808:	d04e      	beq.n	f8a8 <gpio_nrfx_pin_interrupt_configure+0x18c>
			if (data->double_edge & BIT(pin)) {
    f80a:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    f80e:	f10d 0007 	add.w	r0, sp, #7
			if (data->double_edge & BIT(pin)) {
    f812:	40f3      	lsrs	r3, r6
    f814:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    f816:	bf57      	itett	pl
    f818:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    f81c:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    f81e:	fa21 f606 	lsrpl.w	r6, r1, r6
    f822:	f006 0601 	andpl.w	r6, r6, #1
    f826:	bf5c      	itt	pl
    f828:	f1c6 0602 	rsbpl	r6, r6, #2
    f82c:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    f82e:	f006 f8ad 	bl	1598c <nrfx_gpiote_channel_alloc>
    f832:	4b26      	ldr	r3, [pc, #152]	; (f8cc <gpio_nrfx_pin_interrupt_configure+0x1b0>)
    f834:	4298      	cmp	r0, r3
    f836:	d134      	bne.n	f8a2 <gpio_nrfx_pin_interrupt_configure+0x186>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    f838:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f83c:	023f      	lsls	r7, r7, #8
    f83e:	008b      	lsls	r3, r1, #2
    f840:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f844:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f848:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f84c:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f850:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    f854:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    f858:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f85c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    f860:	0088      	lsls	r0, r1, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f862:	4317      	orrs	r7, r2
    return ((uint32_t)p_reg + event);
    f864:	4a1a      	ldr	r2, [pc, #104]	; (f8d0 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f866:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    return ((uint32_t)p_reg + event);
    f86a:	4402      	add	r2, r0
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f86c:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f86e:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f872:	6010      	str	r0, [r2, #0]
    f874:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    f876:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    f87a:	f042 0201 	orr.w	r2, r2, #1
    f87e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    f882:	2301      	movs	r3, #1
    f884:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    f886:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    f88a:	b002      	add	sp, #8
    f88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    f890:	2001      	movs	r0, #1
    f892:	40b0      	lsls	r0, r6
    f894:	ea21 0100 	bic.w	r1, r1, r0
    f898:	e764      	b.n	f764 <gpio_nrfx_pin_interrupt_configure+0x48>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f89a:	3001      	adds	r0, #1
    f89c:	2808      	cmp	r0, #8
    f89e:	d186      	bne.n	f7ae <gpio_nrfx_pin_interrupt_configure+0x92>
    f8a0:	e7a3      	b.n	f7ea <gpio_nrfx_pin_interrupt_configure+0xce>
		return -ENODEV;
    f8a2:	f06f 0012 	mvn.w	r0, #18
    f8a6:	e7f0      	b.n	f88a <gpio_nrfx_pin_interrupt_configure+0x16e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    f8a8:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f8ac:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
    f8ae:	40f1      	lsrs	r1, r6
    f8b0:	f001 0101 	and.w	r1, r1, #1
    f8b4:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f8b8:	b2c9      	uxtb	r1, r1
    f8ba:	f7ff ff07 	bl	f6cc <nrf_gpio_cfg_sense_set>
	int res = 0;
    f8be:	4620      	mov	r0, r4
    f8c0:	e7e3      	b.n	f88a <gpio_nrfx_pin_interrupt_configure+0x16e>
    f8c2:	bf00      	nop
    f8c4:	40842500 	.word	0x40842500
    f8c8:	40031000 	.word	0x40031000
    f8cc:	0bad0000 	.word	0x0bad0000
    f8d0:	40031100 	.word	0x40031100

0000f8d4 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    f8d4:	4b28      	ldr	r3, [pc, #160]	; (f978 <_flash_used+0x50>)
{
    f8d6:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f8d8:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    f8da:	4828      	ldr	r0, [pc, #160]	; (f97c <_flash_used+0x54>)
    f8dc:	4013      	ands	r3, r2
    f8de:	4283      	cmp	r3, r0
    f8e0:	d03b      	beq.n	f95a <_flash_used+0x32>
    f8e2:	d80d      	bhi.n	f900 <gpio_nrfx_config+0x2c>
    f8e4:	2b06      	cmp	r3, #6
    f8e6:	d015      	beq.n	f914 <gpio_nrfx_config+0x40>
    f8e8:	d805      	bhi.n	f8f6 <gpio_nrfx_config+0x22>
    f8ea:	b19b      	cbz	r3, f914 <gpio_nrfx_config+0x40>
    f8ec:	2b02      	cmp	r3, #2
    f8ee:	d036      	beq.n	f95e <_flash_used+0x36>
    f8f0:	f06f 0015 	mvn.w	r0, #21
    f8f4:	e030      	b.n	f958 <_flash_used+0x30>
    f8f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    f8fa:	d1f9      	bne.n	f8f0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    f8fc:	2301      	movs	r3, #1
    f8fe:	e009      	b.n	f914 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    f900:	481f      	ldr	r0, [pc, #124]	; (f980 <_flash_used+0x58>)
    f902:	4283      	cmp	r3, r0
    f904:	d02d      	beq.n	f962 <_flash_used+0x3a>
    f906:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    f90a:	d02c      	beq.n	f966 <_flash_used+0x3e>
    f90c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    f910:	d1ee      	bne.n	f8f0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    f912:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    f914:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
    f916:	bf4c      	ite	mi
    f918:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
    f91a:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    f91e:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    f922:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    f926:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    f92a:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    f92e:	d006      	beq.n	f93e <_flash_used+0x16>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    f930:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f934:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    f936:	d018      	beq.n	f96a <_flash_used+0x42>
			nrf_gpio_port_out_set(reg, BIT(pin));
    f938:	2201      	movs	r2, #1
    f93a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    f93c:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    f93e:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
    f942:	2000      	movs	r0, #0
    f944:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
    f948:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f94c:	4a0d      	ldr	r2, [pc, #52]	; (f984 <_flash_used+0x5c>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    f94e:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f952:	3180      	adds	r1, #128	; 0x80
    f954:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    f958:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    f95a:	2307      	movs	r3, #7
    f95c:	e7da      	b.n	f914 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    f95e:	2304      	movs	r3, #4
    f960:	e7d8      	b.n	f914 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    f962:	2305      	movs	r3, #5
    f964:	e7d6      	b.n	f914 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    f966:	2303      	movs	r3, #3
    f968:	e7d4      	b.n	f914 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    f96a:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    f96c:	bf42      	ittt	mi
    f96e:	2201      	movmi	r2, #1
    f970:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    f972:	60f2      	strmi	r2, [r6, #12]
}
    f974:	e7e3      	b.n	f93e <_flash_used+0x16>
    f976:	bf00      	nop
    f978:	00f00006 	.word	0x00f00006
    f97c:	00100006 	.word	0x00100006
    f980:	00400002 	.word	0x00400002
    f984:	40842500 	.word	0x40842500

0000f988 <gpiote_event_handler>:
{
    f988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f98c:	4f3f      	ldr	r7, [pc, #252]	; (fa8c <gpiote_event_handler+0x104>)
    f98e:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
    f990:	2e00      	cmp	r6, #0
    f992:	d04f      	beq.n	fa34 <gpiote_event_handler+0xac>
	uint32_t bit = 1U << pin;
    f994:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
    f998:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
    f99c:	4b3c      	ldr	r3, [pc, #240]	; (fa90 <gpiote_event_handler+0x108>)
    f99e:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    f9a0:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    f9a4:	430a      	orrs	r2, r1
    f9a6:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
    f9aa:	4a3a      	ldr	r2, [pc, #232]	; (fa94 <gpiote_event_handler+0x10c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    f9ac:	691b      	ldr	r3, [r3, #16]
    f9ae:	6914      	ldr	r4, [r2, #16]
    f9b0:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    f9b2:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
    f9b6:	bb75      	cbnz	r5, fa16 <gpiote_event_handler+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f9b8:	603d      	str	r5, [r7, #0]
    f9ba:	683b      	ldr	r3, [r7, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    f9bc:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    f9be:	2501      	movs	r5, #1
    f9c0:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    f9c2:	4835      	ldr	r0, [pc, #212]	; (fa98 <gpiote_event_handler+0x110>)
    f9c4:	4935      	ldr	r1, [pc, #212]	; (fa9c <gpiote_event_handler+0x114>)
    f9c6:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    f9ca:	fa05 fc03 	lsl.w	ip, r5, r3
    f9ce:	ea1c 0f02 	tst.w	ip, r2
    f9d2:	d00f      	beq.n	f9f4 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f9d4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    f9d8:	b162      	cbz	r2, f9f4 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f9da:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    f9de:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f9e2:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f9e6:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    f9ea:	fa05 f202 	lsl.w	r2, r5, r2
    f9ee:	4314      	orrs	r4, r2
    f9f0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f9f4:	3301      	adds	r3, #1
    f9f6:	2b08      	cmp	r3, #8
    f9f8:	d1e5      	bne.n	f9c6 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
    f9fa:	b9ec      	cbnz	r4, fa38 <gpiote_event_handler+0xb0>
	if (port_event) {
    f9fc:	b14e      	cbz	r6, fa12 <gpiote_event_handler+0x8a>
	uint32_t bit = 1U << pin;
    f9fe:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    fa00:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
    fa02:	4d23      	ldr	r5, [pc, #140]	; (fa90 <gpiote_event_handler+0x108>)
    fa04:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    fa06:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
    fa0a:	430a      	orrs	r2, r1
    fa0c:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
    fa10:	bb54      	cbnz	r4, fa68 <gpiote_event_handler+0xe0>
}
    fa12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
    fa16:	ea15 0f08 	tst.w	r5, r8
    fa1a:	d006      	beq.n	fa2a <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    fa1c:	2100      	movs	r1, #0
    fa1e:	f009 001f 	and.w	r0, r9, #31
    fa22:	f7ff fe53 	bl	f6cc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    fa26:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
    fa2a:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    fa2e:	ea4f 0848 	mov.w	r8, r8, lsl #1
    fa32:	e7c0      	b.n	f9b6 <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    fa34:	4634      	mov	r4, r6
    fa36:	e7c1      	b.n	f9bc <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    fa38:	4b15      	ldr	r3, [pc, #84]	; (fa90 <gpiote_event_handler+0x108>)
    fa3a:	6859      	ldr	r1, [r3, #4]
    fa3c:	2900      	cmp	r1, #0
    fa3e:	d0dd      	beq.n	f9fc <gpiote_event_handler+0x74>
	return node->next;
    fa40:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    fa42:	4f17      	ldr	r7, [pc, #92]	; (faa0 <gpiote_event_handler+0x118>)
    fa44:	2d00      	cmp	r5, #0
    fa46:	bf38      	it	cc
    fa48:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    fa4a:	688a      	ldr	r2, [r1, #8]
    fa4c:	4022      	ands	r2, r4
    fa4e:	d002      	beq.n	fa56 <gpiote_event_handler+0xce>
			cb->handler(port, cb, cb->pin_mask & pins);
    fa50:	4638      	mov	r0, r7
    fa52:	684b      	ldr	r3, [r1, #4]
    fa54:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    fa56:	2d00      	cmp	r5, #0
    fa58:	d0d0      	beq.n	f9fc <gpiote_event_handler+0x74>
    fa5a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fa5c:	4629      	mov	r1, r5
    fa5e:	2b00      	cmp	r3, #0
    fa60:	bf38      	it	cc
    fa62:	2300      	movcc	r3, #0
    fa64:	461d      	mov	r5, r3
    fa66:	e7f0      	b.n	fa4a <gpiote_event_handler+0xc2>
		if (level_pins & bit) {
    fa68:	4226      	tst	r6, r4
    fa6a:	d00c      	beq.n	fa86 <gpiote_event_handler+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    fa6c:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    fa6e:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
    fa72:	40f9      	lsrs	r1, r7
    fa74:	f001 0101 	and.w	r1, r1, #1
    fa78:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    fa7c:	b2c9      	uxtb	r1, r1
    fa7e:	f7ff fe25 	bl	f6cc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    fa82:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    fa86:	3701      	adds	r7, #1
		bit <<= 1;
    fa88:	0076      	lsls	r6, r6, #1
    fa8a:	e7c1      	b.n	fa10 <gpiote_event_handler+0x88>
    fa8c:	4003117c 	.word	0x4003117c
    fa90:	20014d9c 	.word	0x20014d9c
    fa94:	40842500 	.word	0x40842500
    fa98:	40031000 	.word	0x40031000
    fa9c:	40031100 	.word	0x40031100
    faa0:	200145f0 	.word	0x200145f0

0000faa4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    faa4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    faa6:	794b      	ldrb	r3, [r1, #5]
    faa8:	2b01      	cmp	r3, #1
    faaa:	d029      	beq.n	fb00 <uarte_nrfx_configure+0x5c>
    faac:	2b03      	cmp	r3, #3
    faae:	d124      	bne.n	fafa <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    fab0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    fab2:	798b      	ldrb	r3, [r1, #6]
    fab4:	2b03      	cmp	r3, #3
    fab6:	d120      	bne.n	fafa <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    fab8:	79cc      	ldrb	r4, [r1, #7]
    faba:	b124      	cbz	r4, fac6 <uarte_nrfx_configure+0x22>
    fabc:	2c01      	cmp	r4, #1
    fabe:	d11c      	bne.n	fafa <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    fac0:	6843      	ldr	r3, [r0, #4]
    fac2:	791b      	ldrb	r3, [r3, #4]
    fac4:	b1cb      	cbz	r3, fafa <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    fac6:	790a      	ldrb	r2, [r1, #4]
    fac8:	b112      	cbz	r2, fad0 <uarte_nrfx_configure+0x2c>
    faca:	2a02      	cmp	r2, #2
    facc:	d115      	bne.n	fafa <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    face:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    fad0:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    fad2:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    fad4:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    fad8:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    fada:	d065      	beq.n	fba8 <uarte_nrfx_configure+0x104>
    fadc:	d82d      	bhi.n	fb3a <uarte_nrfx_configure+0x96>
    fade:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    fae2:	d064      	beq.n	fbae <uarte_nrfx_configure+0x10a>
    fae4:	d816      	bhi.n	fb14 <uarte_nrfx_configure+0x70>
    fae6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    faea:	d062      	beq.n	fbb2 <uarte_nrfx_configure+0x10e>
    faec:	d80a      	bhi.n	fb04 <uarte_nrfx_configure+0x60>
    faee:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    faf2:	d061      	beq.n	fbb8 <uarte_nrfx_configure+0x114>
    faf4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    faf8:	d061      	beq.n	fbbe <uarte_nrfx_configure+0x11a>
    fafa:	f06f 0022 	mvn.w	r0, #34	; 0x22
    fafe:	e052      	b.n	fba6 <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
    fb00:	2600      	movs	r6, #0
    fb02:	e7d6      	b.n	fab2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    fb04:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    fb08:	d05c      	beq.n	fbc4 <uarte_nrfx_configure+0x120>
    fb0a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    fb0e:	d1f4      	bne.n	fafa <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    fb10:	4b37      	ldr	r3, [pc, #220]	; (fbf0 <uarte_nrfx_configure+0x14c>)
    fb12:	e03c      	b.n	fb8e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    fb14:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    fb18:	d057      	beq.n	fbca <uarte_nrfx_configure+0x126>
    fb1a:	d807      	bhi.n	fb2c <uarte_nrfx_configure+0x88>
    fb1c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    fb20:	d055      	beq.n	fbce <uarte_nrfx_configure+0x12a>
    fb22:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    fb26:	d1e8      	bne.n	fafa <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    fb28:	4b32      	ldr	r3, [pc, #200]	; (fbf4 <uarte_nrfx_configure+0x150>)
    fb2a:	e030      	b.n	fb8e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    fb2c:	f647 2712 	movw	r7, #31250	; 0x7a12
    fb30:	42bb      	cmp	r3, r7
    fb32:	d1e2      	bne.n	fafa <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    fb34:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    fb38:	e029      	b.n	fb8e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    fb3a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    fb3e:	d048      	beq.n	fbd2 <uarte_nrfx_configure+0x12e>
    fb40:	d813      	bhi.n	fb6a <uarte_nrfx_configure+0xc6>
    fb42:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    fb46:	d047      	beq.n	fbd8 <uarte_nrfx_configure+0x134>
    fb48:	d809      	bhi.n	fb5e <uarte_nrfx_configure+0xba>
    fb4a:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    fb4e:	42bb      	cmp	r3, r7
    fb50:	d044      	beq.n	fbdc <uarte_nrfx_configure+0x138>
    fb52:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    fb56:	d1d0      	bne.n	fafa <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    fb58:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    fb5c:	e017      	b.n	fb8e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    fb5e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    fb62:	d1ca      	bne.n	fafa <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    fb64:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    fb68:	e011      	b.n	fb8e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    fb6a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    fb6e:	d038      	beq.n	fbe2 <uarte_nrfx_configure+0x13e>
    fb70:	d808      	bhi.n	fb84 <uarte_nrfx_configure+0xe0>
    fb72:	4f21      	ldr	r7, [pc, #132]	; (fbf8 <uarte_nrfx_configure+0x154>)
    fb74:	42bb      	cmp	r3, r7
    fb76:	d037      	beq.n	fbe8 <uarte_nrfx_configure+0x144>
    fb78:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    fb7c:	d1bd      	bne.n	fafa <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    fb7e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    fb82:	e004      	b.n	fb8e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    fb84:	4f1d      	ldr	r7, [pc, #116]	; (fbfc <uarte_nrfx_configure+0x158>)
    fb86:	42bb      	cmp	r3, r7
    fb88:	d1b7      	bne.n	fafa <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    fb8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    fb8e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    fb92:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    fb94:	4334      	orrs	r4, r6
    fb96:	4322      	orrs	r2, r4
    fb98:	3304      	adds	r3, #4
    fb9a:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    fb9c:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    fba0:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    fba4:	2000      	movs	r0, #0
}
    fba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    fba8:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    fbac:	e7ef      	b.n	fb8e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    fbae:	4b14      	ldr	r3, [pc, #80]	; (fc00 <uarte_nrfx_configure+0x15c>)
    fbb0:	e7ed      	b.n	fb8e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    fbb2:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    fbb6:	e7ea      	b.n	fb8e <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
    fbb8:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    fbbc:	e7e7      	b.n	fb8e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    fbbe:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    fbc2:	e7e4      	b.n	fb8e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    fbc4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    fbc8:	e7e1      	b.n	fb8e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    fbca:	4b0e      	ldr	r3, [pc, #56]	; (fc04 <uarte_nrfx_configure+0x160>)
    fbcc:	e7df      	b.n	fb8e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    fbce:	4b0e      	ldr	r3, [pc, #56]	; (fc08 <uarte_nrfx_configure+0x164>)
    fbd0:	e7dd      	b.n	fb8e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    fbd2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    fbd6:	e7da      	b.n	fb8e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    fbd8:	4b0c      	ldr	r3, [pc, #48]	; (fc0c <uarte_nrfx_configure+0x168>)
    fbda:	e7d8      	b.n	fb8e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    fbdc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    fbe0:	e7d5      	b.n	fb8e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    fbe2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    fbe6:	e7d2      	b.n	fb8e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    fbe8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    fbec:	e7cf      	b.n	fb8e <uarte_nrfx_configure+0xea>
    fbee:	bf00      	nop
    fbf0:	0013b000 	.word	0x0013b000
    fbf4:	004ea000 	.word	0x004ea000
    fbf8:	0003d090 	.word	0x0003d090
    fbfc:	000f4240 	.word	0x000f4240
    fc00:	00275000 	.word	0x00275000
    fc04:	0075c000 	.word	0x0075c000
    fc08:	003af000 	.word	0x003af000
    fc0c:	013a9000 	.word	0x013a9000

0000fc10 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    fc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc14:	4606      	mov	r6, r0
    fc16:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    fc18:	68c7      	ldr	r7, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    fc1a:	f00a fd09 	bl	1a630 <k_is_in_isr>
    fc1e:	b9b8      	cbnz	r0, fc50 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    fc20:	4b28      	ldr	r3, [pc, #160]	; (fcc4 <uarte_nrfx_poll_out+0xb4>)
    fc22:	781b      	ldrb	r3, [r3, #0]
    fc24:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    fc28:	6872      	ldr	r2, [r6, #4]
    fc2a:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    fc2c:	b193      	cbz	r3, fc54 <uarte_nrfx_poll_out+0x44>
    fc2e:	f04f 0320 	mov.w	r3, #32
    fc32:	f3ef 8411 	mrs	r4, BASEPRI
    fc36:	f383 8811 	msr	BASEPRI, r3
    fc3a:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    fc3e:	4630      	mov	r0, r6
    fc40:	f008 fa8f 	bl	18162 <is_tx_ready>
    fc44:	bb38      	cbnz	r0, fc96 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    fc46:	f384 8811 	msr	BASEPRI, r4
    fc4a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    fc4e:	e7ee      	b.n	fc2e <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    fc50:	2301      	movs	r3, #1
    fc52:	e7e9      	b.n	fc28 <uarte_nrfx_poll_out+0x18>
    fc54:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    fc56:	4630      	mov	r0, r6
    fc58:	f008 fa83 	bl	18162 <is_tx_ready>
    fc5c:	b970      	cbnz	r0, fc7c <uarte_nrfx_poll_out+0x6c>
    fc5e:	2001      	movs	r0, #1
    fc60:	f00a fad4 	bl	1a20c <nrfx_busy_wait>
    fc64:	3c01      	subs	r4, #1
    fc66:	d1f6      	bne.n	fc56 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    fc68:	2100      	movs	r1, #0
    fc6a:	2021      	movs	r0, #33	; 0x21
    fc6c:	f006 fdbc 	bl	167e8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    fc70:	e7f0      	b.n	fc54 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    fc72:	f384 8811 	msr	BASEPRI, r4
    fc76:	f3bf 8f6f 	isb	sy
}
    fc7a:	e7f5      	b.n	fc68 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    fc7c:	f04f 0320 	mov.w	r3, #32
    fc80:	f3ef 8411 	mrs	r4, BASEPRI
    fc84:	f383 8811 	msr	BASEPRI, r3
    fc88:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    fc8c:	4630      	mov	r0, r6
    fc8e:	f008 fa68 	bl	18162 <is_tx_ready>
    fc92:	2800      	cmp	r0, #0
    fc94:	d0ed      	beq.n	fc72 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    fc96:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fc98:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    fc9a:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fc9e:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fca2:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fca6:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    fcaa:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    fcae:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    fcb2:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fcb6:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    fcb8:	f384 8811 	msr	BASEPRI, r4
    fcbc:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    fcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fcc4:	200179ed 	.word	0x200179ed

0000fcc8 <uarte_instance_init.isra.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    fcc8:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
    fccc:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    fcce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    fcd2:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
    fcd4:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
    fcd6:	460f      	mov	r7, r1
    fcd8:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
    fcdc:	4605      	mov	r5, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
    fcde:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
    fce0:	6808      	ldr	r0, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    fce2:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
    fce4:	4b3d      	ldr	r3, [pc, #244]	; (fddc <uarte_instance_init.isra.0+0x114>)
    *p_pin = pin_number & 0x1F;
    fce6:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    fcea:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
    fcec:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fcee:	2103      	movs	r1, #3
    fcf0:	3280      	adds	r2, #128	; 0x80
    fcf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    fcf6:	687a      	ldr	r2, [r7, #4]
    fcf8:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
    fcfa:	bf1e      	ittt	ne
    fcfc:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fd00:	3180      	addne	r1, #128	; 0x80
    fd02:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    fd06:	68b9      	ldr	r1, [r7, #8]
    p_reg->PSEL.TXD = pseltxd;
    fd08:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    fd0c:	1c48      	adds	r0, r1, #1
    fd0e:	bf18      	it	ne
    fd10:	2000      	movne	r0, #0
    p_reg->PSEL.RXD = pselrxd;
    fd12:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    fd16:	bf1e      	ittt	ne
    fd18:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fd1c:	3280      	addne	r2, #128	; 0x80
    fd1e:	f843 0022 	strne.w	r0, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    fd22:	68f8      	ldr	r0, [r7, #12]
    fd24:	1c42      	adds	r2, r0, #1
    fd26:	d00c      	beq.n	fd42 <uarte_instance_init.isra.0+0x7a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    fd28:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
    fd2c:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    fd30:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
    fd34:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fd38:	f04f 0c03 	mov.w	ip, #3
    fd3c:	3280      	adds	r2, #128	; 0x80
    fd3e:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    fd42:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    fd46:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    fd4a:	68e9      	ldr	r1, [r5, #12]
    fd4c:	4628      	mov	r0, r5
    fd4e:	3104      	adds	r1, #4
    fd50:	f7ff fea8 	bl	faa4 <uarte_nrfx_configure>
	if (err) {
    fd54:	4680      	mov	r8, r0
    fd56:	2800      	cmp	r0, #0
    fd58:	d139      	bne.n	fdce <uarte_instance_init.isra.0+0x106>

#ifdef CONFIG_PM_DEVICE
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
    fd5a:	686b      	ldr	r3, [r5, #4]
    fd5c:	799b      	ldrb	r3, [r3, #6]
    fd5e:	b19b      	cbz	r3, fd88 <uarte_instance_init.isra.0+0xc0>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    fd60:	f106 0016 	add.w	r0, r6, #22
    fd64:	f005 fdd2 	bl	1590c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    fd68:	4b1d      	ldr	r3, [pc, #116]	; (fde0 <uarte_instance_init.isra.0+0x118>)
    fd6a:	4298      	cmp	r0, r3
    fd6c:	d132      	bne.n	fdd4 <uarte_instance_init.isra.0+0x10c>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    fd6e:	7db3      	ldrb	r3, [r6, #22]
    fd70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fd74:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    fd78:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    fd7c:	2301      	movs	r3, #1
    fd7e:	7db2      	ldrb	r2, [r6, #22]
    fd80:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    fd82:	4a18      	ldr	r2, [pc, #96]	; (fde4 <uarte_instance_init.isra.0+0x11c>)
    fd84:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    fd88:	2308      	movs	r3, #8
    fd8a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    fd8e:	687b      	ldr	r3, [r7, #4]
    fd90:	3301      	adds	r3, #1
    fd92:	d00c      	beq.n	fdae <uarte_instance_init.isra.0+0xe6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fd94:	2300      	movs	r3, #0
    fd96:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    fd9a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    fd9e:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fda2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    fda6:	2301      	movs	r3, #1
    fda8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fdac:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!get_dev_config(dev)->ppi_endtx) {
    fdae:	686b      	ldr	r3, [r5, #4]
    fdb0:	799b      	ldrb	r3, [r3, #6]
    fdb2:	b91b      	cbnz	r3, fdbc <uarte_instance_init.isra.0+0xf4>
    p_reg->INTENSET = mask;
    fdb4:	f44f 7380 	mov.w	r3, #256	; 0x100
    fdb8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    fdbc:	2300      	movs	r3, #0

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    fdbe:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fdc0:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fdc4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fdc8:	2301      	movs	r3, #1
    fdca:	60a3      	str	r3, [r4, #8]
    fdcc:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    fdce:	4640      	mov	r0, r8
    fdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
    fdd4:	f06f 0804 	mvn.w	r8, #4
    fdd8:	e7f9      	b.n	fdce <uarte_instance_init.isra.0+0x106>
    fdda:	bf00      	nop
    fddc:	40842500 	.word	0x40842500
    fde0:	0bad0000 	.word	0x0bad0000
    fde4:	40017000 	.word	0x40017000

0000fde8 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    fde8:	b530      	push	{r4, r5, lr}
    fdea:	b085      	sub	sp, #20
    fdec:	466c      	mov	r4, sp
    fdee:	4605      	mov	r5, r0
    fdf0:	4b08      	ldr	r3, [pc, #32]	; (fe14 <uarte_0_init+0x2c>)
    fdf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    fdf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    fdf8:	2200      	movs	r2, #0
    fdfa:	2101      	movs	r1, #1
    fdfc:	2008      	movs	r0, #8
    fdfe:	f7ff f80d 	bl	ee1c <z_arm_irq_priority_set>
    fe02:	2008      	movs	r0, #8
    fe04:	f7fe ffec 	bl	ede0 <arch_irq_enable>
    fe08:	4621      	mov	r1, r4
    fe0a:	4628      	mov	r0, r5
    fe0c:	f7ff ff5c 	bl	fcc8 <uarte_instance_init.isra.0>
    fe10:	b005      	add	sp, #20
    fe12:	bd30      	pop	{r4, r5, pc}
    fe14:	0001ad90 	.word	0x0001ad90

0000fe18 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    fe18:	b530      	push	{r4, r5, lr}
    fe1a:	b085      	sub	sp, #20
    fe1c:	466c      	mov	r4, sp
    fe1e:	4605      	mov	r5, r0
    fe20:	4b08      	ldr	r3, [pc, #32]	; (fe44 <uarte_1_init+0x2c>)
    fe22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    fe24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    fe28:	2200      	movs	r2, #0
    fe2a:	2101      	movs	r1, #1
    fe2c:	2009      	movs	r0, #9
    fe2e:	f7fe fff5 	bl	ee1c <z_arm_irq_priority_set>
    fe32:	2009      	movs	r0, #9
    fe34:	f7fe ffd4 	bl	ede0 <arch_irq_enable>
    fe38:	4621      	mov	r1, r4
    fe3a:	4628      	mov	r0, r5
    fe3c:	f7ff ff44 	bl	fcc8 <uarte_instance_init.isra.0>
    fe40:	b005      	add	sp, #20
    fe42:	bd30      	pop	{r4, r5, pc}
    fe44:	0001ada0 	.word	0x0001ada0

0000fe48 <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
    fe48:	b538      	push	{r3, r4, r5, lr}
	if (!first_time_init) {
    fe4a:	4d19      	ldr	r5, [pc, #100]	; (feb0 <_nrf_modem_lib_init+0x68>)
    fe4c:	4c19      	ldr	r4, [pc, #100]	; (feb4 <_nrf_modem_lib_init+0x6c>)
    fe4e:	782b      	ldrb	r3, [r5, #0]
    fe50:	b933      	cbnz	r3, fe60 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
    fe52:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
    fe56:	4818      	ldr	r0, [pc, #96]	; (feb8 <_nrf_modem_lib_init+0x70>)
    fe58:	f00a fa70 	bl	1a33c <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
    fe5c:	2301      	movs	r3, #1
    fe5e:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
    fe60:	2200      	movs	r2, #0
    fe62:	202a      	movs	r0, #42	; 0x2a
    fe64:	4611      	mov	r1, r2
    fe66:	f7fe ffd9 	bl	ee1c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
    fe6a:	2100      	movs	r1, #0
    fe6c:	4813      	ldr	r0, [pc, #76]	; (febc <_nrf_modem_lib_init+0x74>)
    fe6e:	f005 fba3 	bl	155b8 <nrf_modem_init>
    fe72:	4b13      	ldr	r3, [pc, #76]	; (fec0 <_nrf_modem_lib_init+0x78>)
    fe74:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    fe76:	f04f 32ff 	mov.w	r2, #4294967295
    fe7a:	f04f 33ff 	mov.w	r3, #4294967295
    fe7e:	480e      	ldr	r0, [pc, #56]	; (feb8 <_nrf_modem_lib_init+0x70>)
    fe80:	f006 f848 	bl	15f14 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
    fe84:	6820      	ldr	r0, [r4, #0]
    fe86:	b170      	cbz	r0, fea6 <_nrf_modem_lib_init+0x5e>
	return node->next;
    fe88:	6804      	ldr	r4, [r0, #0]
    fe8a:	2c00      	cmp	r4, #0
    fe8c:	bf38      	it	cc
    fe8e:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
    fe90:	3004      	adds	r0, #4
    fe92:	f006 fcd1 	bl	16838 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
    fe96:	b134      	cbz	r4, fea6 <_nrf_modem_lib_init+0x5e>
    fe98:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fe9a:	4620      	mov	r0, r4
    fe9c:	2b00      	cmp	r3, #0
    fe9e:	bf38      	it	cc
    fea0:	2300      	movcc	r3, #0
    fea2:	461c      	mov	r4, r3
    fea4:	e7f4      	b.n	fe90 <_nrf_modem_lib_init+0x48>
	return z_impl_k_mutex_unlock(mutex);
    fea6:	4804      	ldr	r0, [pc, #16]	; (feb8 <_nrf_modem_lib_init+0x70>)
    fea8:	f006 f8ac 	bl	16004 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
    feac:	2000      	movs	r0, #0
    feae:	bd38      	pop	{r3, r4, r5, pc}
    feb0:	20015c85 	.word	0x20015c85
    feb4:	20014dbc 	.word	0x20014dbc
    feb8:	20014dc4 	.word	0x20014dc4
    febc:	0001aed0 	.word	0x0001aed0
    fec0:	20014db8 	.word	0x20014db8

0000fec4 <nrf_modem_lib_shutdown_wait>:

void nrf_modem_lib_shutdown_wait(void)
{
    fec4:	b530      	push	{r4, r5, lr}
    fec6:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
    fec8:	2201      	movs	r2, #1
    feca:	2100      	movs	r1, #0
    fecc:	a802      	add	r0, sp, #8
    fece:	f00a fb9f 	bl	1a610 <z_impl_k_sem_init>
    fed2:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
    fed4:	f04f 33ff 	mov.w	r3, #4294967295
    fed8:	f04f 32ff 	mov.w	r2, #4294967295
    fedc:	481c      	ldr	r0, [pc, #112]	; (ff50 <nrf_modem_lib_shutdown_wait+0x8c>)
    fede:	f006 f819 	bl	15f14 <z_impl_k_mutex_lock>
	parent->next = child;
    fee2:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
    fee4:	4c1b      	ldr	r4, [pc, #108]	; (ff54 <nrf_modem_lib_shutdown_wait+0x90>)
	parent->next = child;
    fee6:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
    fee8:	6863      	ldr	r3, [r4, #4]
    feea:	bb2b      	cbnz	r3, ff38 <nrf_modem_lib_shutdown_wait+0x74>
	list->head = node;
    feec:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
    fef0:	4817      	ldr	r0, [pc, #92]	; (ff50 <nrf_modem_lib_shutdown_wait+0x8c>)
    fef2:	f006 f887 	bl	16004 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
    fef6:	f04f 32ff 	mov.w	r2, #4294967295
    fefa:	f04f 33ff 	mov.w	r3, #4294967295
    fefe:	a802      	add	r0, sp, #8
    ff00:	f006 fcc0 	bl	16884 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
    ff04:	f04f 32ff 	mov.w	r2, #4294967295
    ff08:	f04f 33ff 	mov.w	r3, #4294967295
    ff0c:	4810      	ldr	r0, [pc, #64]	; (ff50 <nrf_modem_lib_shutdown_wait+0x8c>)
    ff0e:	f006 f801 	bl	15f14 <z_impl_k_mutex_lock>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ff12:	2200      	movs	r2, #0
    ff14:	6823      	ldr	r3, [r4, #0]
    ff16:	b153      	cbz	r3, ff2e <nrf_modem_lib_shutdown_wait+0x6a>
    ff18:	42ab      	cmp	r3, r5
    ff1a:	d116      	bne.n	ff4a <nrf_modem_lib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
    ff1c:	9901      	ldr	r1, [sp, #4]
    ff1e:	b972      	cbnz	r2, ff3e <nrf_modem_lib_shutdown_wait+0x7a>
    ff20:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    ff22:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    ff24:	429a      	cmp	r2, r3
    ff26:	d100      	bne.n	ff2a <nrf_modem_lib_shutdown_wait+0x66>
	list->tail = node;
    ff28:	6061      	str	r1, [r4, #4]
	parent->next = child;
    ff2a:	2300      	movs	r3, #0
    ff2c:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    ff2e:	4808      	ldr	r0, [pc, #32]	; (ff50 <nrf_modem_lib_shutdown_wait+0x8c>)
    ff30:	f006 f868 	bl	16004 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
    ff34:	b009      	add	sp, #36	; 0x24
    ff36:	bd30      	pop	{r4, r5, pc}
    ff38:	601d      	str	r5, [r3, #0]
	list->tail = node;
    ff3a:	6065      	str	r5, [r4, #4]
}
    ff3c:	e7d8      	b.n	fef0 <nrf_modem_lib_shutdown_wait+0x2c>
	parent->next = child;
    ff3e:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    ff40:	6861      	ldr	r1, [r4, #4]
    ff42:	4299      	cmp	r1, r3
	list->tail = node;
    ff44:	bf08      	it	eq
    ff46:	6062      	streq	r2, [r4, #4]
}
    ff48:	e7ef      	b.n	ff2a <nrf_modem_lib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ff4a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ff4c:	681b      	ldr	r3, [r3, #0]
    ff4e:	e7e2      	b.n	ff16 <nrf_modem_lib_shutdown_wait+0x52>
    ff50:	20014dc4 	.word	0x20014dc4
    ff54:	20014dbc 	.word	0x20014dbc

0000ff58 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
    ff58:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    ff5a:	4c0d      	ldr	r4, [pc, #52]	; (ff90 <thread_monitor_entry_get+0x38>)
{
    ff5c:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    ff5e:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
    ff60:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
    ff62:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
    ff64:	4b0b      	ldr	r3, [pc, #44]	; (ff94 <thread_monitor_entry_get+0x3c>)
    ff66:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
    ff68:	6801      	ldr	r1, [r0, #0]
    ff6a:	4291      	cmp	r1, r2
    ff6c:	d00e      	beq.n	ff8c <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
    ff6e:	b151      	cbz	r1, ff86 <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
    ff70:	6841      	ldr	r1, [r0, #4]
    ff72:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
    ff74:	42b1      	cmp	r1, r6
    ff76:	bfc4      	itt	gt
    ff78:	4604      	movgt	r4, r0
    ff7a:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    ff7c:	3d01      	subs	r5, #1
    ff7e:	f100 0008 	add.w	r0, r0, #8
    ff82:	d1f1      	bne.n	ff68 <thread_monitor_entry_get+0x10>
    ff84:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
    ff86:	3b01      	subs	r3, #1
	new_entry->id = id;
    ff88:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    ff8a:	6043      	str	r3, [r0, #4]

	return new_entry;
}
    ff8c:	bd70      	pop	{r4, r5, r6, pc}
    ff8e:	bf00      	nop
    ff90:	20015000 	.word	0x20015000
    ff94:	20014fdc 	.word	0x20014fdc

0000ff98 <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    ff98:	4668      	mov	r0, sp
    ff9a:	f020 0107 	bic.w	r1, r0, #7
    ff9e:	468d      	mov	sp, r1
    ffa0:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ffa2:	4b0f      	ldr	r3, [pc, #60]	; (ffe0 <rpc_proxy_irq_handler+0x48>)
    ffa4:	e8d3 2fef 	ldaex	r2, [r3]
    ffa8:	3201      	adds	r2, #1
    ffaa:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ffae:	2900      	cmp	r1, #0
    ffb0:	d1f8      	bne.n	ffa4 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_os_application_irq_handler();
    ffb2:	f002 f921 	bl	121f8 <nrf_modem_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    ffb6:	4b0b      	ldr	r3, [pc, #44]	; (ffe4 <rpc_proxy_irq_handler+0x4c>)
    ffb8:	681c      	ldr	r4, [r3, #0]
    ffba:	2c00      	cmp	r4, #0
    ffbc:	bf38      	it	cc
    ffbe:	2400      	movcc	r4, #0
    ffc0:	b12c      	cbz	r4, ffce <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
    ffc2:	1d20      	adds	r0, r4, #4
    ffc4:	f006 fc38 	bl	16838 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ffc8:	6824      	ldr	r4, [r4, #0]
    ffca:	2c00      	cmp	r4, #0
    ffcc:	d1f8      	bne.n	ffc0 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
    ffce:	f7fe ff3b 	bl	ee48 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
    ffd2:	f7ff f885 	bl	f0e0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    ffd6:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
    ffda:	4685      	mov	sp, r0
    ffdc:	4770      	bx	lr
    ffde:	bf00      	nop
    ffe0:	20014fdc 	.word	0x20014fdc
    ffe4:	20014ff8 	.word	0x20014ff8

0000ffe8 <nrf_modem_os_timedwait>:
{
    ffe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ffec:	460c      	mov	r4, r1
    ffee:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
    fff0:	f00a fbc9 	bl	1a786 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
    fff4:	6823      	ldr	r3, [r4, #0]
    fff6:	4680      	mov	r8, r0
    fff8:	2b00      	cmp	r3, #0
    fffa:	468a      	mov	sl, r1
    fffc:	d103      	bne.n	10006 <nrf_modem_os_timedwait+0x1e>
	z_impl_k_yield();
    fffe:	f006 fba5 	bl	1674c <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   10002:	203c      	movs	r0, #60	; 0x3c
   10004:	e091      	b.n	1012a <nrf_modem_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   10006:	bfbc      	itt	lt
   10008:	f04f 33ff 	movlt.w	r3, #4294967295
   1000c:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1000e:	2201      	movs	r2, #1
   10010:	2100      	movs	r1, #0
   10012:	a802      	add	r0, sp, #8
   10014:	f00a fafc 	bl	1a610 <z_impl_k_sem_init>
   10018:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   1001a:	f04f 0320 	mov.w	r3, #32
   1001e:	f3ef 8b11 	mrs	fp, BASEPRI
   10022:	f383 8811 	msr	BASEPRI, r3
   10026:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1002a:	f006 fbff 	bl	1682c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1002e:	f7ff ff93 	bl	ff58 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   10032:	4947      	ldr	r1, [pc, #284]	; (10150 <nrf_modem_os_timedwait+0x168>)
   10034:	6843      	ldr	r3, [r0, #4]
   10036:	680a      	ldr	r2, [r1, #0]
   10038:	4689      	mov	r9, r1
   1003a:	4293      	cmp	r3, r2
   1003c:	f04f 0300 	mov.w	r3, #0
   10040:	d108      	bne.n	10054 <nrf_modem_os_timedwait+0x6c>
	parent->next = child;
   10042:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   10044:	4b43      	ldr	r3, [pc, #268]	; (10154 <nrf_modem_os_timedwait+0x16c>)
   10046:	685a      	ldr	r2, [r3, #4]
   10048:	2a00      	cmp	r2, #0
   1004a:	d171      	bne.n	10130 <nrf_modem_os_timedwait+0x148>
	list->head = node;
   1004c:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   10050:	2301      	movs	r3, #1
}
   10052:	e000      	b.n	10056 <nrf_modem_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   10054:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   10056:	f38b 8811 	msr	BASEPRI, fp
   1005a:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   1005e:	2b00      	cmp	r3, #0
   10060:	d062      	beq.n	10128 <nrf_modem_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   10062:	6823      	ldr	r3, [r4, #0]
   10064:	1c5a      	adds	r2, r3, #1
   10066:	d066      	beq.n	10136 <nrf_modem_os_timedwait+0x14e>
   10068:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1006c:	f240 30e7 	movw	r0, #999	; 0x3e7
   10070:	2100      	movs	r1, #0
   10072:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   10076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1007a:	2300      	movs	r3, #0
   1007c:	fbce 010c 	smlal	r0, r1, lr, ip
   10080:	f7fc fd4c 	bl	cb1c <__aeabi_uldivmod>
   10084:	4602      	mov	r2, r0
   10086:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   10088:	a802      	add	r0, sp, #8
   1008a:	f006 fbfb 	bl	16884 <z_impl_k_sem_take>
	__asm__ volatile(
   1008e:	f04f 0320 	mov.w	r3, #32
   10092:	f3ef 8b11 	mrs	fp, BASEPRI
   10096:	f383 8811 	msr	BASEPRI, r3
   1009a:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1009e:	2000      	movs	r0, #0
   100a0:	4b2c      	ldr	r3, [pc, #176]	; (10154 <nrf_modem_os_timedwait+0x16c>)
   100a2:	681a      	ldr	r2, [r3, #0]
   100a4:	b15a      	cbz	r2, 100be <nrf_modem_os_timedwait+0xd6>
   100a6:	42aa      	cmp	r2, r5
   100a8:	d14f      	bne.n	1014a <nrf_modem_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   100aa:	9d01      	ldr	r5, [sp, #4]
   100ac:	2800      	cmp	r0, #0
   100ae:	d146      	bne.n	1013e <nrf_modem_os_timedwait+0x156>
   100b0:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   100b2:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   100b4:	4291      	cmp	r1, r2
   100b6:	d100      	bne.n	100ba <nrf_modem_os_timedwait+0xd2>
	list->tail = node;
   100b8:	605d      	str	r5, [r3, #4]
	parent->next = child;
   100ba:	2300      	movs	r3, #0
   100bc:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   100be:	f006 fbb5 	bl	1682c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   100c2:	f7ff ff49 	bl	ff58 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   100c6:	f8d9 3000 	ldr.w	r3, [r9]
   100ca:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   100cc:	f38b 8811 	msr	BASEPRI, fp
   100d0:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   100d4:	6825      	ldr	r5, [r4, #0]
   100d6:	1c6b      	adds	r3, r5, #1
   100d8:	d026      	beq.n	10128 <nrf_modem_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   100da:	f00a fb54 	bl	1a786 <z_impl_k_uptime_ticks>
   100de:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   100e2:	468e      	mov	lr, r1
   100e4:	fba8 890c 	umull	r8, r9, r8, ip
   100e8:	fba0 010c 	umull	r0, r1, r0, ip
   100ec:	fb0c 990a 	mla	r9, ip, sl, r9
   100f0:	fb0c 110e 	mla	r1, ip, lr, r1
   100f4:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   100f8:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   100fc:	1952      	adds	r2, r2, r5
   100fe:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   10102:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   10106:	0bc5      	lsrs	r5, r0, #15
   10108:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   1010c:	1b56      	subs	r6, r2, r5
   1010e:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   10112:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   10116:	2e00      	cmp	r6, #0
   10118:	f177 0300 	sbcs.w	r3, r7, #0
   1011c:	bfb8      	it	lt
   1011e:	2600      	movlt	r6, #0
   10120:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   10122:	2e00      	cmp	r6, #0
   10124:	f43f af6d 	beq.w	10002 <nrf_modem_os_timedwait+0x1a>
	return 0;
   10128:	2000      	movs	r0, #0
}
   1012a:	b009      	add	sp, #36	; 0x24
   1012c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10130:	6015      	str	r5, [r2, #0]
	list->tail = node;
   10132:	605d      	str	r5, [r3, #4]
   10134:	e78c      	b.n	10050 <nrf_modem_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   10136:	f04f 32ff 	mov.w	r2, #4294967295
   1013a:	4613      	mov	r3, r2
   1013c:	e7a4      	b.n	10088 <nrf_modem_os_timedwait+0xa0>
	parent->next = child;
   1013e:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   10140:	6859      	ldr	r1, [r3, #4]
   10142:	4291      	cmp	r1, r2
	list->tail = node;
   10144:	bf08      	it	eq
   10146:	6058      	streq	r0, [r3, #4]
}
   10148:	e7b7      	b.n	100ba <nrf_modem_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1014a:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1014c:	6812      	ldr	r2, [r2, #0]
   1014e:	e7a9      	b.n	100a4 <nrf_modem_os_timedwait+0xbc>
   10150:	20014fdc 	.word	0x20014fdc
   10154:	20014ff8 	.word	0x20014ff8

00010158 <nrf_modem_os_errno_set>:
	switch (err_code) {
   10158:	283c      	cmp	r0, #60	; 0x3c
{
   1015a:	b508      	push	{r3, lr}
	switch (err_code) {
   1015c:	f300 8084 	bgt.w	10268 <nrf_modem_os_errno_set+0x110>
   10160:	2800      	cmp	r0, #0
   10162:	dc03      	bgt.n	1016c <nrf_modem_os_errno_set+0x14>
		errno = 0xBAADBAAD;
   10164:	f008 f919 	bl	1839a <z_errno>
   10168:	4baa      	ldr	r3, [pc, #680]	; (10414 <nrf_modem_os_errno_set+0x2bc>)
   1016a:	e0bc      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
   1016c:	3801      	subs	r0, #1
   1016e:	283b      	cmp	r0, #59	; 0x3b
   10170:	d8f8      	bhi.n	10164 <nrf_modem_os_errno_set+0xc>
   10172:	a301      	add	r3, pc, #4	; (adr r3, 10178 <nrf_modem_os_errno_set+0x20>)
   10174:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   10178:	000102e1 	.word	0x000102e1
   1017c:	000102eb 	.word	0x000102eb
   10180:	00010165 	.word	0x00010165
   10184:	00010165 	.word	0x00010165
   10188:	000102f3 	.word	0x000102f3
   1018c:	00010165 	.word	0x00010165
   10190:	00010165 	.word	0x00010165
   10194:	000102fb 	.word	0x000102fb
   10198:	00010303 	.word	0x00010303
   1019c:	00010165 	.word	0x00010165
   101a0:	00010165 	.word	0x00010165
   101a4:	0001030b 	.word	0x0001030b
   101a8:	00010313 	.word	0x00010313
   101ac:	0001031b 	.word	0x0001031b
   101b0:	00010165 	.word	0x00010165
   101b4:	00010165 	.word	0x00010165
   101b8:	00010165 	.word	0x00010165
   101bc:	00010165 	.word	0x00010165
   101c0:	00010165 	.word	0x00010165
   101c4:	00010165 	.word	0x00010165
   101c8:	00010165 	.word	0x00010165
   101cc:	00010323 	.word	0x00010323
   101d0:	00010165 	.word	0x00010165
   101d4:	0001032b 	.word	0x0001032b
   101d8:	00010165 	.word	0x00010165
   101dc:	00010165 	.word	0x00010165
   101e0:	00010165 	.word	0x00010165
   101e4:	00010165 	.word	0x00010165
   101e8:	00010165 	.word	0x00010165
   101ec:	00010165 	.word	0x00010165
   101f0:	00010165 	.word	0x00010165
   101f4:	00010165 	.word	0x00010165
   101f8:	00010165 	.word	0x00010165
   101fc:	00010165 	.word	0x00010165
   10200:	00010333 	.word	0x00010333
   10204:	00010165 	.word	0x00010165
   10208:	0001033b 	.word	0x0001033b
   1020c:	00010165 	.word	0x00010165
   10210:	00010165 	.word	0x00010165
   10214:	00010403 	.word	0x00010403
   10218:	00010343 	.word	0x00010343
   1021c:	0001034b 	.word	0x0001034b
   10220:	00010353 	.word	0x00010353
   10224:	0001035b 	.word	0x0001035b
   10228:	00010363 	.word	0x00010363
   1022c:	00010165 	.word	0x00010165
   10230:	0001036b 	.word	0x0001036b
   10234:	00010373 	.word	0x00010373
   10238:	00010165 	.word	0x00010165
   1023c:	0001037b 	.word	0x0001037b
   10240:	00010383 	.word	0x00010383
   10244:	0001038b 	.word	0x0001038b
   10248:	0001040b 	.word	0x0001040b
   1024c:	00010393 	.word	0x00010393
   10250:	00010165 	.word	0x00010165
   10254:	0001039b 	.word	0x0001039b
   10258:	000103a3 	.word	0x000103a3
   1025c:	00010165 	.word	0x00010165
   10260:	00010165 	.word	0x00010165
   10264:	000103ab 	.word	0x000103ab
	switch (err_code) {
   10268:	3869      	subs	r0, #105	; 0x69
   1026a:	2818      	cmp	r0, #24
   1026c:	f63f af7a 	bhi.w	10164 <nrf_modem_os_errno_set+0xc>
   10270:	2818      	cmp	r0, #24
   10272:	f63f af77 	bhi.w	10164 <nrf_modem_os_errno_set+0xc>
   10276:	a301      	add	r3, pc, #4	; (adr r3, 1027c <nrf_modem_os_errno_set+0x124>)
   10278:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   1027c:	000103b3 	.word	0x000103b3
   10280:	00010165 	.word	0x00010165
   10284:	00010165 	.word	0x00010165
   10288:	00010165 	.word	0x00010165
   1028c:	00010165 	.word	0x00010165
   10290:	00010165 	.word	0x00010165
   10294:	00010165 	.word	0x00010165
   10298:	000103bb 	.word	0x000103bb
   1029c:	00010165 	.word	0x00010165
   102a0:	000103cb 	.word	0x000103cb
   102a4:	000103c3 	.word	0x000103c3
   102a8:	00010165 	.word	0x00010165
   102ac:	00010165 	.word	0x00010165
   102b0:	00010165 	.word	0x00010165
   102b4:	00010165 	.word	0x00010165
   102b8:	00010165 	.word	0x00010165
   102bc:	00010165 	.word	0x00010165
   102c0:	00010165 	.word	0x00010165
   102c4:	00010165 	.word	0x00010165
   102c8:	00010165 	.word	0x00010165
   102cc:	000103d3 	.word	0x000103d3
   102d0:	000103db 	.word	0x000103db
   102d4:	000103e5 	.word	0x000103e5
   102d8:	000103ef 	.word	0x000103ef
   102dc:	000103f9 	.word	0x000103f9
		errno = EPERM;
   102e0:	f008 f85b 	bl	1839a <z_errno>
   102e4:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   102e6:	6003      	str	r3, [r0, #0]
}
   102e8:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   102ea:	f008 f856 	bl	1839a <z_errno>
   102ee:	2302      	movs	r3, #2
   102f0:	e7f9      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EIO;
   102f2:	f008 f852 	bl	1839a <z_errno>
   102f6:	2305      	movs	r3, #5
   102f8:	e7f5      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = ENOEXEC;
   102fa:	f008 f84e 	bl	1839a <z_errno>
   102fe:	2308      	movs	r3, #8
   10300:	e7f1      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EBADF;
   10302:	f008 f84a 	bl	1839a <z_errno>
   10306:	2309      	movs	r3, #9
   10308:	e7ed      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = ENOMEM;
   1030a:	f008 f846 	bl	1839a <z_errno>
   1030e:	230c      	movs	r3, #12
   10310:	e7e9      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EACCES;
   10312:	f008 f842 	bl	1839a <z_errno>
   10316:	230d      	movs	r3, #13
   10318:	e7e5      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EFAULT;
   1031a:	f008 f83e 	bl	1839a <z_errno>
   1031e:	230e      	movs	r3, #14
   10320:	e7e1      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EINVAL;
   10322:	f008 f83a 	bl	1839a <z_errno>
   10326:	2316      	movs	r3, #22
   10328:	e7dd      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EMFILE;
   1032a:	f008 f836 	bl	1839a <z_errno>
   1032e:	2318      	movs	r3, #24
   10330:	e7d9      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EAGAIN;
   10332:	f008 f832 	bl	1839a <z_errno>
   10336:	230b      	movs	r3, #11
   10338:	e7d5      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EDOM;
   1033a:	f008 f82e 	bl	1839a <z_errno>
   1033e:	2325      	movs	r3, #37	; 0x25
   10340:	e7d1      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EPROTOTYPE;
   10342:	f008 f82a 	bl	1839a <z_errno>
   10346:	2329      	movs	r3, #41	; 0x29
   10348:	e7cd      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = ENOPROTOOPT;
   1034a:	f008 f826 	bl	1839a <z_errno>
   1034e:	232a      	movs	r3, #42	; 0x2a
   10350:	e7c9      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EPROTONOSUPPORT;
   10352:	f008 f822 	bl	1839a <z_errno>
   10356:	232b      	movs	r3, #43	; 0x2b
   10358:	e7c5      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = ESOCKTNOSUPPORT;
   1035a:	f008 f81e 	bl	1839a <z_errno>
   1035e:	232c      	movs	r3, #44	; 0x2c
   10360:	e7c1      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EOPNOTSUPP;
   10362:	f008 f81a 	bl	1839a <z_errno>
   10366:	232d      	movs	r3, #45	; 0x2d
   10368:	e7bd      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EAFNOSUPPORT;
   1036a:	f008 f816 	bl	1839a <z_errno>
   1036e:	232f      	movs	r3, #47	; 0x2f
   10370:	e7b9      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EADDRINUSE;
   10372:	f008 f812 	bl	1839a <z_errno>
   10376:	2330      	movs	r3, #48	; 0x30
   10378:	e7b5      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = ENETDOWN;
   1037a:	f008 f80e 	bl	1839a <z_errno>
   1037e:	233e      	movs	r3, #62	; 0x3e
   10380:	e7b1      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = ENETUNREACH;
   10382:	f008 f80a 	bl	1839a <z_errno>
   10386:	2333      	movs	r3, #51	; 0x33
   10388:	e7ad      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = ENETRESET;
   1038a:	f008 f806 	bl	1839a <z_errno>
   1038e:	2334      	movs	r3, #52	; 0x34
   10390:	e7a9      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = ECONNRESET;
   10392:	f008 f802 	bl	1839a <z_errno>
   10396:	2336      	movs	r3, #54	; 0x36
   10398:	e7a5      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EISCONN;
   1039a:	f007 fffe 	bl	1839a <z_errno>
   1039e:	2338      	movs	r3, #56	; 0x38
   103a0:	e7a1      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = ENOTCONN;
   103a2:	f007 fffa 	bl	1839a <z_errno>
   103a6:	2339      	movs	r3, #57	; 0x39
   103a8:	e79d      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = ETIMEDOUT;
   103aa:	f007 fff6 	bl	1839a <z_errno>
   103ae:	233c      	movs	r3, #60	; 0x3c
   103b0:	e799      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = ENOBUFS;
   103b2:	f007 fff2 	bl	1839a <z_errno>
   103b6:	2337      	movs	r3, #55	; 0x37
   103b8:	e795      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EHOSTDOWN;
   103ba:	f007 ffee 	bl	1839a <z_errno>
   103be:	2343      	movs	r3, #67	; 0x43
   103c0:	e791      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EINPROGRESS;
   103c2:	f007 ffea 	bl	1839a <z_errno>
   103c6:	2344      	movs	r3, #68	; 0x44
   103c8:	e78d      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EALREADY;
   103ca:	f007 ffe6 	bl	1839a <z_errno>
   103ce:	2345      	movs	r3, #69	; 0x45
   103d0:	e789      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = ECANCELED;
   103d2:	f007 ffe2 	bl	1839a <z_errno>
   103d6:	2348      	movs	r3, #72	; 0x48
   103d8:	e785      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = ENOKEY;
   103da:	f007 ffde 	bl	1839a <z_errno>
   103de:	f240 73d1 	movw	r3, #2001	; 0x7d1
   103e2:	e780      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EKEYEXPIRED;
   103e4:	f007 ffd9 	bl	1839a <z_errno>
   103e8:	f240 73d2 	movw	r3, #2002	; 0x7d2
   103ec:	e77b      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EKEYREVOKED;
   103ee:	f007 ffd4 	bl	1839a <z_errno>
   103f2:	f240 73d3 	movw	r3, #2003	; 0x7d3
   103f6:	e776      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EKEYREJECTED;
   103f8:	f007 ffcf 	bl	1839a <z_errno>
   103fc:	f240 73d4 	movw	r3, #2004	; 0x7d4
   10400:	e771      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = EMSGSIZE;
   10402:	f007 ffca 	bl	1839a <z_errno>
   10406:	2324      	movs	r3, #36	; 0x24
   10408:	e76d      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
		errno = ECONNABORTED;
   1040a:	f007 ffc6 	bl	1839a <z_errno>
   1040e:	2335      	movs	r3, #53	; 0x35
   10410:	e769      	b.n	102e6 <nrf_modem_os_errno_set+0x18e>
   10412:	bf00      	nop
   10414:	baadbaad 	.word	0xbaadbaad

00010418 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1041c:	4b01      	ldr	r3, [pc, #4]	; (10424 <nrf_modem_os_application_irq_set+0xc>)
   1041e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   10422:	4770      	bx	lr
   10424:	e000e100 	.word	0xe000e100

00010428 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1042c:	4b01      	ldr	r3, [pc, #4]	; (10434 <nrf_modem_os_application_irq_clear+0xc>)
   1042e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   10432:	4770      	bx	lr
   10434:	e000e100 	.word	0xe000e100

00010438 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10438:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1043c:	4b01      	ldr	r3, [pc, #4]	; (10444 <nrf_modem_os_trace_irq_set+0xc>)
   1043e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   10442:	4770      	bx	lr
   10444:	e000e100 	.word	0xe000e100

00010448 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10448:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1044c:	4b01      	ldr	r3, [pc, #4]	; (10454 <nrf_modem_os_trace_irq_clear+0xc>)
   1044e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   10452:	4770      	bx	lr
   10454:	e000e100 	.word	0xe000e100

00010458 <nrf_modem_os_alloc>:
	nrfx_uarte_init(&uarte_inst, &config, NULL);
#endif
}

void *nrf_modem_os_alloc(size_t bytes)
{
   10458:	b507      	push	{r0, r1, r2, lr}
   1045a:	4602      	mov	r2, r0
	return k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   1045c:	2100      	movs	r1, #0
   1045e:	2000      	movs	r0, #0
   10460:	e9cd 0100 	strd	r0, r1, [sp]
   10464:	2104      	movs	r1, #4
   10466:	4803      	ldr	r0, [pc, #12]	; (10474 <nrf_modem_os_alloc+0x1c>)
   10468:	f009 ff04 	bl	1a274 <k_heap_aligned_alloc>
	} else {
		heap_diag.failed_allocs++;
	}
#endif
	return addr;
}
   1046c:	b003      	add	sp, #12
   1046e:	f85d fb04 	ldr.w	pc, [sp], #4
   10472:	bf00      	nop
   10474:	20014658 	.word	0x20014658

00010478 <nrf_modem_os_free>:

void nrf_modem_os_free(void *mem)
{
   10478:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   1047a:	4801      	ldr	r0, [pc, #4]	; (10480 <nrf_modem_os_free+0x8>)
   1047c:	f009 bf41 	b.w	1a302 <k_heap_free>
   10480:	20014658 	.word	0x20014658

00010484 <nrf_modem_os_shm_tx_alloc>:
	LOG_INF("free(%p)", mem);
#endif
}

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   10484:	b507      	push	{r0, r1, r2, lr}
   10486:	4602      	mov	r2, r0
   10488:	2100      	movs	r1, #0
   1048a:	2000      	movs	r0, #0
   1048c:	e9cd 0100 	strd	r0, r1, [sp]
   10490:	2104      	movs	r1, #4
   10492:	4803      	ldr	r0, [pc, #12]	; (104a0 <nrf_modem_os_shm_tx_alloc+0x1c>)
   10494:	f009 feee 	bl	1a274 <k_heap_aligned_alloc>
	} else {
		shmem_diag.failed_allocs++;
	}
#endif
	return addr;
}
   10498:	b003      	add	sp, #12
   1049a:	f85d fb04 	ldr.w	pc, [sp], #4
   1049e:	bf00      	nop
   104a0:	20014fe4 	.word	0x20014fe4

000104a4 <nrf_modem_os_shm_tx_free>:

void nrf_modem_os_shm_tx_free(void *mem)
{
   104a4:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   104a6:	4801      	ldr	r0, [pc, #4]	; (104ac <nrf_modem_os_shm_tx_free+0x8>)
   104a8:	f009 bf2b 	b.w	1a302 <k_heap_free>
   104ac:	20014fe4 	.word	0x20014fe4

000104b0 <nrf_modem_os_init>:
}
#endif

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   104b0:	b510      	push	{r4, lr}
	list->head = NULL;
   104b2:	2400      	movs	r4, #0
   104b4:	4b0f      	ldr	r3, [pc, #60]	; (104f4 <nrf_modem_os_init+0x44>)
	list->tail = NULL;
   104b6:	e9c3 4400 	strd	r4, r4, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   104ba:	4b0f      	ldr	r3, [pc, #60]	; (104f8 <nrf_modem_os_init+0x48>)
   104bc:	e8d3 2fef 	ldaex	r2, [r3]
   104c0:	e8c3 4fe1 	stlex	r1, r4, [r3]
   104c4:	2900      	cmp	r1, #0
   104c6:	d1f9      	bne.n	104bc <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   104c8:	f007 ff83 	bl	183d2 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
   104cc:	f007 ff76 	bl	183bc <trace_task_create>

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   104d0:	4621      	mov	r1, r4
   104d2:	2204      	movs	r2, #4
   104d4:	4809      	ldr	r0, [pc, #36]	; (104fc <nrf_modem_os_init+0x4c>)
   104d6:	f007 fd2c 	bl	17f32 <memset>
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   104da:	4621      	mov	r1, r4
   104dc:	2204      	movs	r2, #4
   104de:	4808      	ldr	r0, [pc, #32]	; (10500 <nrf_modem_os_init+0x50>)
   104e0:	f007 fd27 	bl	17f32 <memset>
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_delayed_work_init(&heap_task.work, diag_task);
	k_delayed_work_submit(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   104e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_heap_init(&shmem_heap,
   104e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   104ec:	4905      	ldr	r1, [pc, #20]	; (10504 <nrf_modem_os_init+0x54>)
   104ee:	4806      	ldr	r0, [pc, #24]	; (10508 <nrf_modem_os_init+0x58>)
   104f0:	f009 beb7 	b.w	1a262 <k_heap_init>
   104f4:	20014ff8 	.word	0x20014ff8
   104f8:	20014fdc 	.word	0x20014fdc
   104fc:	20014dd8 	.word	0x20014dd8
   10500:	20014fe0 	.word	0x20014fe0
   10504:	200104e8 	.word	0x200104e8
   10508:	20014fe4 	.word	0x20014fe4

0001050c <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1050c:	f240 2302 	movw	r3, #514	; 0x202
   10510:	4298      	cmp	r0, r3
   10512:	f000 8093 	beq.w	1063c <z_to_nrf_optname+0x130>
   10516:	dc07      	bgt.n	10528 <z_to_nrf_optname+0x1c>
   10518:	2801      	cmp	r0, #1
   1051a:	d04d      	beq.n	105b8 <z_to_nrf_optname+0xac>
   1051c:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   10520:	d034      	beq.n	1058c <z_to_nrf_optname+0x80>
   10522:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   10526:	4770      	bx	lr
	switch (z_in_level) {
   10528:	f240 2303 	movw	r3, #515	; 0x203
   1052c:	4298      	cmp	r0, r3
   1052e:	d1f8      	bne.n	10522 <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   10530:	3901      	subs	r1, #1
   10532:	2913      	cmp	r1, #19
   10534:	d8f5      	bhi.n	10522 <z_to_nrf_optname+0x16>
   10536:	a301      	add	r3, pc, #4	; (adr r3, 1053c <z_to_nrf_optname+0x30>)
   10538:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1053c:	0001064b 	.word	0x0001064b
   10540:	00010625 	.word	0x00010625
   10544:	00010629 	.word	0x00010629
   10548:	000105c9 	.word	0x000105c9
   1054c:	0001062d 	.word	0x0001062d
   10550:	00010631 	.word	0x00010631
   10554:	00010635 	.word	0x00010635
   10558:	00010523 	.word	0x00010523
   1055c:	00010523 	.word	0x00010523
   10560:	00010523 	.word	0x00010523
   10564:	00010523 	.word	0x00010523
   10568:	00010523 	.word	0x00010523
   1056c:	00010523 	.word	0x00010523
   10570:	00010523 	.word	0x00010523
   10574:	00010523 	.word	0x00010523
   10578:	00010523 	.word	0x00010523
   1057c:	00010523 	.word	0x00010523
   10580:	00010523 	.word	0x00010523
   10584:	00010523 	.word	0x00010523
   10588:	00010639 	.word	0x00010639
		switch (z_in_optname) {
   1058c:	3901      	subs	r1, #1
   1058e:	2907      	cmp	r1, #7
   10590:	d8c7      	bhi.n	10522 <z_to_nrf_optname+0x16>
   10592:	a301      	add	r3, pc, #4	; (adr r3, 10598 <z_to_nrf_optname+0x8c>)
   10594:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   10598:	00010625 	.word	0x00010625
   1059c:	0001062d 	.word	0x0001062d
   105a0:	00010631 	.word	0x00010631
   105a4:	00010635 	.word	0x00010635
   105a8:	000105c9 	.word	0x000105c9
   105ac:	0001064b 	.word	0x0001064b
   105b0:	00010523 	.word	0x00010523
   105b4:	00010629 	.word	0x00010629
		switch (z_in_optname) {
   105b8:	2920      	cmp	r1, #32
   105ba:	dcb2      	bgt.n	10522 <z_to_nrf_optname+0x16>
   105bc:	2913      	cmp	r1, #19
   105be:	dc05      	bgt.n	105cc <z_to_nrf_optname+0xc0>
   105c0:	2902      	cmp	r1, #2
   105c2:	d027      	beq.n	10614 <z_to_nrf_optname+0x108>
   105c4:	2904      	cmp	r1, #4
   105c6:	d1ac      	bne.n	10522 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   105c8:	2304      	movs	r3, #4
   105ca:	e03f      	b.n	1064c <z_to_nrf_optname+0x140>
   105cc:	3914      	subs	r1, #20
   105ce:	290c      	cmp	r1, #12
   105d0:	d8a7      	bhi.n	10522 <z_to_nrf_optname+0x16>
   105d2:	a301      	add	r3, pc, #4	; (adr r3, 105d8 <z_to_nrf_optname+0xcc>)
   105d4:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   105d8:	00010639 	.word	0x00010639
   105dc:	0001060d 	.word	0x0001060d
   105e0:	00010523 	.word	0x00010523
   105e4:	00010523 	.word	0x00010523
   105e8:	00010523 	.word	0x00010523
   105ec:	00010611 	.word	0x00010611
   105f0:	00010523 	.word	0x00010523
   105f4:	00010523 	.word	0x00010523
   105f8:	00010523 	.word	0x00010523
   105fc:	00010523 	.word	0x00010523
   10600:	00010619 	.word	0x00010619
   10604:	0001061d 	.word	0x0001061d
   10608:	00010621 	.word	0x00010621
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   1060c:	2315      	movs	r3, #21
   1060e:	e01d      	b.n	1064c <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   10610:	2319      	movs	r3, #25
   10612:	e01b      	b.n	1064c <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   10614:	2328      	movs	r3, #40	; 0x28
   10616:	e019      	b.n	1064c <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   10618:	231e      	movs	r3, #30
   1061a:	e017      	b.n	1064c <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_IP_ECHO_REPLY;
   1061c:	231f      	movs	r3, #31
   1061e:	e015      	b.n	1064c <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   10620:	2320      	movs	r3, #32
   10622:	e013      	b.n	1064c <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   10624:	2302      	movs	r3, #2
   10626:	e011      	b.n	1064c <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   10628:	2303      	movs	r3, #3
   1062a:	e00f      	b.n	1064c <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   1062c:	2305      	movs	r3, #5
   1062e:	e00d      	b.n	1064c <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   10630:	2306      	movs	r3, #6
   10632:	e00b      	b.n	1064c <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   10634:	2307      	movs	r3, #7
   10636:	e009      	b.n	1064c <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   10638:	2314      	movs	r3, #20
   1063a:	e007      	b.n	1064c <z_to_nrf_optname+0x140>
		switch (z_in_optname) {
   1063c:	2902      	cmp	r1, #2
   1063e:	d0f1      	beq.n	10624 <z_to_nrf_optname+0x118>
   10640:	2903      	cmp	r1, #3
   10642:	d0f1      	beq.n	10628 <z_to_nrf_optname+0x11c>
   10644:	2901      	cmp	r1, #1
   10646:	f47f af6c 	bne.w	10522 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   1064a:	2301      	movs	r3, #1
	int retval = 0;
   1064c:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   1064e:	6013      	str	r3, [r2, #0]
			break;
   10650:	4770      	bx	lr
   10652:	bf00      	nop

00010654 <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   10654:	f240 1303 	movw	r3, #259	; 0x103
{
   10658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   1065c:	4299      	cmp	r1, r3
{
   1065e:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   10660:	f000 8097 	beq.w	10792 <nrf91_socket_offload_ioctl+0x13e>
   10664:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   10668:	d005      	beq.n	10676 <nrf91_socket_offload_ioctl+0x22>
   1066a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   1066e:	d171      	bne.n	10754 <nrf91_socket_offload_ioctl+0x100>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   10670:	f06f 0411 	mvn.w	r4, #17
   10674:	e01d      	b.n	106b2 <nrf91_socket_offload_ioctl+0x5e>
	for (int i = 0; i < nfds; i++) {
   10676:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   1067a:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   1067e:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   10680:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   10684:	4668      	mov	r0, sp
   10686:	2240      	movs	r2, #64	; 0x40
   10688:	f007 fc53 	bl	17f32 <memset>
	for (int i = 0; i < nfds; i++) {
   1068c:	466e      	mov	r6, sp
   1068e:	4655      	mov	r5, sl
   10690:	4657      	mov	r7, sl
	int retval = 0;
   10692:	4644      	mov	r4, r8
		tmp[i].events = 0;
   10694:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   10696:	4940      	ldr	r1, [pc, #256]	; (10798 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   10698:	45c1      	cmp	r9, r8
   1069a:	dc0e      	bgt.n	106ba <nrf91_socket_offload_ioctl+0x66>
	if (retval > 0) {
   1069c:	2c00      	cmp	r4, #0
   1069e:	dc08      	bgt.n	106b2 <nrf91_socket_offload_ioctl+0x5e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   106a0:	465a      	mov	r2, fp
   106a2:	4649      	mov	r1, r9
   106a4:	4668      	mov	r0, sp
   106a6:	f009 fd7c 	bl	1a1a2 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   106aa:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   106ac:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   106ae:	4599      	cmp	r9, r3
   106b0:	dc28      	bgt.n	10704 <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   106b2:	4620      	mov	r0, r4
   106b4:	b011      	add	sp, #68	; 0x44
   106b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   106ba:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   106bc:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   106be:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   106c0:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   106c2:	da05      	bge.n	106d0 <nrf91_socket_offload_ioctl+0x7c>
			tmp[i].fd = fds[i].fd;
   106c4:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   106c6:	f108 0801 	add.w	r8, r8, #1
   106ca:	3608      	adds	r6, #8
   106cc:	3708      	adds	r7, #8
   106ce:	e7e3      	b.n	10698 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   106d0:	2223      	movs	r2, #35	; 0x23
   106d2:	f7fc fe91 	bl	d3f8 <z_get_fd_obj>
			if (obj != NULL) {
   106d6:	2300      	movs	r3, #0
   106d8:	492f      	ldr	r1, [pc, #188]	; (10798 <nrf91_socket_offload_ioctl+0x144>)
   106da:	b178      	cbz	r0, 106fc <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   106dc:	3801      	subs	r0, #1
   106de:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   106e0:	88b8      	ldrh	r0, [r7, #4]
   106e2:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   106e4:	bf42      	ittt	mi
   106e6:	88b2      	ldrhmi	r2, [r6, #4]
   106e8:	f042 0201 	orrmi.w	r2, r2, #1
   106ec:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   106ee:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   106f0:	bf42      	ittt	mi
   106f2:	88b2      	ldrhmi	r2, [r6, #4]
   106f4:	f042 0202 	orrmi.w	r2, r2, #2
   106f8:	80b2      	strhmi	r2, [r6, #4]
   106fa:	e7e4      	b.n	106c6 <nrf91_socket_offload_ioctl+0x72>
				fds[i].revents = POLLNVAL;
   106fc:	2220      	movs	r2, #32
				retval++;
   106fe:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   10700:	80fa      	strh	r2, [r7, #6]
				retval++;
   10702:	e7ed      	b.n	106e0 <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   10704:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   10708:	2a00      	cmp	r2, #0
   1070a:	db20      	blt.n	1074e <nrf91_socket_offload_ioctl+0xfa>
		if (tmp[i].revents & NRF_POLLIN) {
   1070c:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   10710:	88d2      	ldrh	r2, [r2, #6]
   10712:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   10714:	bf42      	ittt	mi
   10716:	88e9      	ldrhmi	r1, [r5, #6]
   10718:	f041 0101 	orrmi.w	r1, r1, #1
   1071c:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   1071e:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   10720:	bf42      	ittt	mi
   10722:	88e9      	ldrhmi	r1, [r5, #6]
   10724:	f041 0104 	orrmi.w	r1, r1, #4
   10728:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   1072a:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   1072c:	bf42      	ittt	mi
   1072e:	88e9      	ldrhmi	r1, [r5, #6]
   10730:	f041 0108 	orrmi.w	r1, r1, #8
   10734:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   10736:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   10738:	bf42      	ittt	mi
   1073a:	88e9      	ldrhmi	r1, [r5, #6]
   1073c:	f041 0120 	orrmi.w	r1, r1, #32
   10740:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   10742:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   10744:	bf42      	ittt	mi
   10746:	88ea      	ldrhmi	r2, [r5, #6]
   10748:	f042 0210 	orrmi.w	r2, r2, #16
   1074c:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   1074e:	3301      	adds	r3, #1
   10750:	3508      	adds	r5, #8
   10752:	e7ac      	b.n	106ae <nrf91_socket_offload_ioctl+0x5a>
	switch (cmd) {
   10754:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   10756:	f100 30ff 	add.w	r0, r0, #4294967295
	switch (cmd) {
   1075a:	d00b      	beq.n	10774 <nrf91_socket_offload_ioctl+0x120>
   1075c:	2904      	cmp	r1, #4
   1075e:	d111      	bne.n	10784 <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   10760:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   10762:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   10766:	d10d      	bne.n	10784 <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   10768:	2101      	movs	r1, #1
   1076a:	1392      	asrs	r2, r2, #14
   1076c:	f009 fd1b 	bl	1a1a6 <nrf_fcntl>
   10770:	4604      	mov	r4, r0
		break;
   10772:	e79e      	b.n	106b2 <nrf91_socket_offload_ioctl+0x5e>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   10774:	2200      	movs	r2, #0
   10776:	2102      	movs	r1, #2
   10778:	f009 fd15 	bl	1a1a6 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1077c:	0380      	lsls	r0, r0, #14
   1077e:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   10782:	e796      	b.n	106b2 <nrf91_socket_offload_ioctl+0x5e>
	errno = EINVAL;
   10784:	f007 fe91 	bl	184aa <z_errno>
   10788:	2316      	movs	r3, #22
	return retval;
   1078a:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   1078e:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   10790:	e78f      	b.n	106b2 <nrf91_socket_offload_ioctl+0x5e>
	switch (request) {
   10792:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   10796:	e78c      	b.n	106b2 <nrf91_socket_offload_ioctl+0x5e>
   10798:	0001aefc 	.word	0x0001aefc

0001079c <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   1079c:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   1079e:	4b03      	ldr	r3, [pc, #12]	; (107ac <nrf91_socket_iface_init+0x10>)
   107a0:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   107a2:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   107a4:	4802      	ldr	r0, [pc, #8]	; (107b0 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   107a6:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   107a8:	f7fe b840 	b.w	e82c <socket_offload_dns_register>
   107ac:	20015050 	.word	0x20015050
   107b0:	0001aef4 	.word	0x0001aef4

000107b4 <nrf91_socket_create>:
{
   107b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   107b6:	4606      	mov	r6, r0
   107b8:	460d      	mov	r5, r1
   107ba:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   107bc:	f7fc fe4c 	bl	d458 <z_reserve_fd>
	if (fd < 0) {
   107c0:	1e04      	subs	r4, r0, #0
   107c2:	db0d      	blt.n	107e0 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   107c4:	b2b0      	uxth	r0, r6
   107c6:	f007 fe23 	bl	18410 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   107ca:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   107ce:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   107d0:	d109      	bne.n	107e6 <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   107d2:	f007 fe6a 	bl	184aa <z_errno>
   107d6:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   107d8:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   107da:	4620      	mov	r0, r4
   107dc:	f7fc fe78 	bl	d4d0 <z_free_fd>
		return -1;
   107e0:	f04f 34ff 	mov.w	r4, #4294967295
   107e4:	e01b      	b.n	1081e <nrf91_socket_create+0x6a>
	switch (socktype) {
   107e6:	2d03      	cmp	r5, #3
   107e8:	d003      	beq.n	107f2 <nrf91_socket_create+0x3e>
   107ea:	2d04      	cmp	r5, #4
   107ec:	bf08      	it	eq
   107ee:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   107f2:	4638      	mov	r0, r7
   107f4:	f007 fe28 	bl	18448 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   107f8:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   107fc:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   107fe:	d103      	bne.n	10808 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   10800:	f007 fe53 	bl	184aa <z_errno>
   10804:	232b      	movs	r3, #43	; 0x2b
   10806:	e7e7      	b.n	107d8 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   10808:	4629      	mov	r1, r5
   1080a:	4630      	mov	r0, r6
   1080c:	f009 fbf5 	bl	19ffa <nrf_socket>
	if (sd < 0) {
   10810:	1e01      	subs	r1, r0, #0
   10812:	dbe2      	blt.n	107da <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   10814:	4620      	mov	r0, r4
   10816:	4a03      	ldr	r2, [pc, #12]	; (10824 <nrf91_socket_create+0x70>)
   10818:	3101      	adds	r1, #1
   1081a:	f7fc fe4f 	bl	d4bc <z_finalize_fd>
}
   1081e:	4620      	mov	r0, r4
   10820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10822:	bf00      	nop
   10824:	0001aefc 	.word	0x0001aefc

00010828 <nrf91_socket_offload_getaddrinfo>:
{
   10828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1082c:	4614      	mov	r4, r2
   1082e:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   10830:	2100      	movs	r1, #0
{
   10832:	b093      	sub	sp, #76	; 0x4c
   10834:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   10836:	2220      	movs	r2, #32
   10838:	a802      	add	r0, sp, #8
{
   1083a:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1083c:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1083e:	f007 fb78 	bl	17f32 <memset>
	if (hints != NULL) {
   10842:	b194      	cbz	r4, 1086a <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   10844:	4620      	mov	r0, r4
   10846:	a902      	add	r1, sp, #8
   10848:	f007 feeb 	bl	18622 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1084c:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   10850:	f000 80f3 	beq.w	10a3a <nrf91_socket_offload_getaddrinfo+0x212>
		} else if (error == -EAFNOSUPPORT) {
   10854:	302f      	adds	r0, #47	; 0x2f
   10856:	f000 80f3 	beq.w	10a40 <nrf91_socket_offload_getaddrinfo+0x218>
		if (hints->ai_next != NULL) {
   1085a:	6820      	ldr	r0, [r4, #0]
   1085c:	b120      	cbz	r0, 10868 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1085e:	ac0a      	add	r4, sp, #40	; 0x28
   10860:	4621      	mov	r1, r4
   10862:	f007 fede 	bl	18622 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   10866:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   10868:	ac02      	add	r4, sp, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   1086a:	f04f 32ff 	mov.w	r2, #4294967295
   1086e:	f04f 33ff 	mov.w	r3, #4294967295
   10872:	4875      	ldr	r0, [pc, #468]	; (10a48 <nrf91_socket_offload_getaddrinfo+0x220>)
   10874:	f005 fb4e 	bl	15f14 <z_impl_k_mutex_lock>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   10878:	4628      	mov	r0, r5
   1087a:	4622      	mov	r2, r4
   1087c:	4631      	mov	r1, r6
   1087e:	ab01      	add	r3, sp, #4
   10880:	f009 fc8b 	bl	1a19a <nrf_getaddrinfo>
	if (retval != 0) {
   10884:	4605      	mov	r5, r0
   10886:	b310      	cbz	r0, 108ce <nrf91_socket_offload_getaddrinfo+0xa6>
	switch (nrf_error) {
   10888:	282f      	cmp	r0, #47	; 0x2f
   1088a:	f000 80d0 	beq.w	10a2e <nrf91_socket_offload_getaddrinfo+0x206>
   1088e:	dc0f      	bgt.n	108b0 <nrf91_socket_offload_getaddrinfo+0x88>
   10890:	280c      	cmp	r0, #12
   10892:	f000 80cf 	beq.w	10a34 <nrf91_socket_offload_getaddrinfo+0x20c>
		return DNS_EAI_AGAIN;
   10896:	2823      	cmp	r0, #35	; 0x23
   10898:	bf14      	ite	ne
   1089a:	f06f 050a 	mvnne.w	r5, #10
   1089e:	f06f 0502 	mvneq.w	r5, #2
	return z_impl_k_mutex_unlock(mutex);
   108a2:	4869      	ldr	r0, [pc, #420]	; (10a48 <nrf91_socket_offload_getaddrinfo+0x220>)
   108a4:	f005 fbae 	bl	16004 <z_impl_k_mutex_unlock>
}
   108a8:	4628      	mov	r0, r5
   108aa:	b013      	add	sp, #76	; 0x4c
   108ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (nrf_error) {
   108b0:	2833      	cmp	r0, #51	; 0x33
   108b2:	d006      	beq.n	108c2 <nrf91_socket_offload_getaddrinfo+0x9a>
		return DNS_EAI_INPROGRESS;
   108b4:	2873      	cmp	r0, #115	; 0x73
   108b6:	bf14      	ite	ne
   108b8:	f06f 050a 	mvnne.w	r5, #10
   108bc:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   108c0:	e7ef      	b.n	108a2 <nrf91_socket_offload_getaddrinfo+0x7a>
		errno = ENETUNREACH;
   108c2:	f007 fdf2 	bl	184aa <z_errno>
   108c6:	6005      	str	r5, [r0, #0]
		return DNS_EAI_SYSTEM;
   108c8:	f06f 050a 	mvn.w	r5, #10
   108cc:	e7e9      	b.n	108a2 <nrf91_socket_offload_getaddrinfo+0x7a>
	struct zsock_addrinfo *latest_z_res = NULL;
   108ce:	4681      	mov	r9, r0
	z_out->ai_next = NULL;
   108d0:	4682      	mov	sl, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   108d2:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   108d4:	f8c8 0000 	str.w	r0, [r8]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   108d8:	b91e      	cbnz	r6, 108e2 <nrf91_socket_offload_getaddrinfo+0xba>
	nrf_freeaddrinfo(nrf_res);
   108da:	9801      	ldr	r0, [sp, #4]
   108dc:	f009 fc5f 	bl	1a19e <nrf_freeaddrinfo>
   108e0:	e7df      	b.n	108a2 <nrf91_socket_offload_getaddrinfo+0x7a>
	return k_aligned_alloc(sizeof(void *), size);
   108e2:	2150      	movs	r1, #80	; 0x50
   108e4:	2004      	movs	r0, #4
   108e6:	f006 fb51 	bl	16f8c <k_aligned_alloc>
		if (next_z_res == NULL) {
   108ea:	4604      	mov	r4, r0
   108ec:	2800      	cmp	r0, #0
   108ee:	f000 8091 	beq.w	10a14 <nrf91_socket_offload_getaddrinfo+0x1ec>
	z_out->ai_socktype = nrf_in->ai_socktype;
   108f2:	68b3      	ldr	r3, [r6, #8]
	z_out->ai_next = NULL;
   108f4:	f8c0 a000 	str.w	sl, [r0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   108f8:	60c3      	str	r3, [r0, #12]
	family = nrf_to_z_family(nrf_in->ai_family);
   108fa:	6873      	ldr	r3, [r6, #4]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   108fc:	f8c0 a01c 	str.w	sl, [r0, #28]
	switch (nrf_family) {
   10900:	2b0a      	cmp	r3, #10
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   10902:	f8c0 a004 	str.w	sl, [r0, #4]
	switch (nrf_family) {
   10906:	dc23      	bgt.n	10950 <nrf91_socket_offload_getaddrinfo+0x128>
   10908:	2b00      	cmp	r3, #0
   1090a:	dd23      	ble.n	10954 <nrf91_socket_offload_getaddrinfo+0x12c>
   1090c:	1e5a      	subs	r2, r3, #1
   1090e:	2a09      	cmp	r2, #9
   10910:	d820      	bhi.n	10954 <nrf91_socket_offload_getaddrinfo+0x12c>
   10912:	e8df f002 	tbb	[pc, r2]
   10916:	2905      	.short	0x2905
   10918:	1f251f1f 	.word	0x1f251f1f
   1091c:	271f1f1f 	.word	0x271f1f1f
		return AF_LOCAL;
   10920:	2206      	movs	r2, #6
	z_out->ai_family = family;
   10922:	60a2      	str	r2, [r4, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   10924:	68f2      	ldr	r2, [r6, #12]
	switch (proto) {
   10926:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1092a:	d04d      	beq.n	109c8 <nrf91_socket_offload_getaddrinfo+0x1a0>
   1092c:	dc26      	bgt.n	1097c <nrf91_socket_offload_getaddrinfo+0x154>
   1092e:	2a02      	cmp	r2, #2
   10930:	d04d      	beq.n	109ce <nrf91_socket_offload_getaddrinfo+0x1a6>
   10932:	dc1d      	bgt.n	10970 <nrf91_socket_offload_getaddrinfo+0x148>
   10934:	b372      	cbz	r2, 10994 <nrf91_socket_offload_getaddrinfo+0x16c>
   10936:	2a01      	cmp	r2, #1
   10938:	d04b      	beq.n	109d2 <nrf91_socket_offload_getaddrinfo+0x1aa>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1093a:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   1093e:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   10940:	2300      	movs	r3, #0
   10942:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   10944:	4620      	mov	r0, r4
   10946:	f00a f8a8 	bl	1aa9a <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1094a:	f06f 0506 	mvn.w	r5, #6
   1094e:	e063      	b.n	10a18 <nrf91_socket_offload_getaddrinfo+0x1f0>
	switch (nrf_family) {
   10950:	2b66      	cmp	r3, #102	; 0x66
   10952:	d00b      	beq.n	1096c <nrf91_socket_offload_getaddrinfo+0x144>
			k_free(next_z_res);
   10954:	4620      	mov	r0, r4
   10956:	f00a f8a0 	bl	1aa9a <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1095a:	f06f 0508 	mvn.w	r5, #8
   1095e:	e05b      	b.n	10a18 <nrf91_socket_offload_getaddrinfo+0x1f0>
		return AF_PACKET;
   10960:	2203      	movs	r2, #3
   10962:	e7de      	b.n	10922 <nrf91_socket_offload_getaddrinfo+0xfa>
		return AF_INET6;
   10964:	2202      	movs	r2, #2
   10966:	e7dc      	b.n	10922 <nrf91_socket_offload_getaddrinfo+0xfa>
	switch (nrf_family) {
   10968:	2201      	movs	r2, #1
   1096a:	e7da      	b.n	10922 <nrf91_socket_offload_getaddrinfo+0xfa>
		return AF_LTE;
   1096c:	461a      	mov	r2, r3
   1096e:	e7d8      	b.n	10922 <nrf91_socket_offload_getaddrinfo+0xfa>
	switch (proto) {
   10970:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   10974:	d1e1      	bne.n	1093a <nrf91_socket_offload_getaddrinfo+0x112>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   10976:	f44f 7281 	mov.w	r2, #258	; 0x102
   1097a:	e00b      	b.n	10994 <nrf91_socket_offload_getaddrinfo+0x16c>
	switch (proto) {
   1097c:	f240 2102 	movw	r1, #514	; 0x202
   10980:	428a      	cmp	r2, r1
   10982:	d007      	beq.n	10994 <nrf91_socket_offload_getaddrinfo+0x16c>
   10984:	f240 2103 	movw	r1, #515	; 0x203
   10988:	428a      	cmp	r2, r1
   1098a:	d003      	beq.n	10994 <nrf91_socket_offload_getaddrinfo+0x16c>
   1098c:	f240 2101 	movw	r1, #513	; 0x201
   10990:	428a      	cmp	r2, r1
   10992:	d1d2      	bne.n	1093a <nrf91_socket_offload_getaddrinfo+0x112>
	if (nrf_in->ai_family == NRF_AF_INET) {
   10994:	2b02      	cmp	r3, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   10996:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   10998:	d11d      	bne.n	109d6 <nrf91_socket_offload_getaddrinfo+0x1ae>
   1099a:	2108      	movs	r1, #8
   1099c:	2004      	movs	r0, #4
   1099e:	f006 faf5 	bl	16f8c <k_aligned_alloc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   109a2:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   109a4:	b398      	cbz	r0, 10a0e <nrf91_socket_offload_getaddrinfo+0x1e6>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   109a6:	2308      	movs	r3, #8
   109a8:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   109aa:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   109ac:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   109ae:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   109b0:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   109b2:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   109b4:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   109b6:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   109b8:	f1b9 0f00 	cmp.w	r9, #0
   109bc:	d134      	bne.n	10a28 <nrf91_socket_offload_getaddrinfo+0x200>
			*res = next_z_res;
   109be:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   109c2:	46a1      	mov	r9, r4
   109c4:	69f6      	ldr	r6, [r6, #28]
   109c6:	e787      	b.n	108d8 <nrf91_socket_offload_getaddrinfo+0xb0>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   109c8:	f240 1211 	movw	r2, #273	; 0x111
   109cc:	e7e2      	b.n	10994 <nrf91_socket_offload_getaddrinfo+0x16c>
   109ce:	2211      	movs	r2, #17
   109d0:	e7e0      	b.n	10994 <nrf91_socket_offload_getaddrinfo+0x16c>
   109d2:	2206      	movs	r2, #6
   109d4:	e7de      	b.n	10994 <nrf91_socket_offload_getaddrinfo+0x16c>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   109d6:	2b0a      	cmp	r3, #10
   109d8:	d1b4      	bne.n	10944 <nrf91_socket_offload_getaddrinfo+0x11c>
   109da:	2118      	movs	r1, #24
   109dc:	2004      	movs	r0, #4
   109de:	f006 fad5 	bl	16f8c <k_aligned_alloc>
   109e2:	4607      	mov	r7, r0
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   109e4:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   109e6:	b190      	cbz	r0, 10a0e <nrf91_socket_offload_getaddrinfo+0x1e6>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   109e8:	2318      	movs	r3, #24
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   109ea:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   109ee:	6163      	str	r3, [r4, #20]
	ptr->sin6_port = nrf_in->sin6_port;
   109f0:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   109f4:	2210      	movs	r2, #16
	ptr->sin6_port = nrf_in->sin6_port;
   109f6:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   109f8:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   109fa:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_family = AF_INET6;
   109fe:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   10a02:	f007 fa6b 	bl	17edc <memcpy>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   10a06:	f8db 3020 	ldr.w	r3, [fp, #32]
   10a0a:	753b      	strb	r3, [r7, #20]
		} else if (error == -EAFNOSUPPORT) {
   10a0c:	e7d4      	b.n	109b8 <nrf91_socket_offload_getaddrinfo+0x190>
			k_free(next_z_res);
   10a0e:	4620      	mov	r0, r4
   10a10:	f00a f843 	bl	1aa9a <k_free>
			retval = DNS_EAI_MEMORY;
   10a14:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   10a18:	f8d8 0000 	ldr.w	r0, [r8]
   10a1c:	f007 fdf4 	bl	18608 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   10a20:	2300      	movs	r3, #0
   10a22:	f8c8 3000 	str.w	r3, [r8]
   10a26:	e758      	b.n	108da <nrf91_socket_offload_getaddrinfo+0xb2>
			latest_z_res->ai_next = next_z_res;
   10a28:	f8c9 4000 	str.w	r4, [r9]
   10a2c:	e7c9      	b.n	109c2 <nrf91_socket_offload_getaddrinfo+0x19a>
		return DNS_EAI_NONAME;
   10a2e:	f06f 0501 	mvn.w	r5, #1
   10a32:	e736      	b.n	108a2 <nrf91_socket_offload_getaddrinfo+0x7a>
		return DNS_EAI_MEMORY;
   10a34:	f06f 0509 	mvn.w	r5, #9
   10a38:	e733      	b.n	108a2 <nrf91_socket_offload_getaddrinfo+0x7a>
			return DNS_EAI_SOCKTYPE;
   10a3a:	f06f 0506 	mvn.w	r5, #6
   10a3e:	e733      	b.n	108a8 <nrf91_socket_offload_getaddrinfo+0x80>
			return DNS_EAI_ADDRFAMILY;
   10a40:	f06f 0508 	mvn.w	r5, #8
   10a44:	e730      	b.n	108a8 <nrf91_socket_offload_getaddrinfo+0x80>
   10a46:	bf00      	nop
   10a48:	20014694 	.word	0x20014694

00010a4c <nrf91_socket_offload_sendmsg>:
{
   10a4c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   10a50:	4680      	mov	r8, r0
   10a52:	4691      	mov	r9, r2
	if (msg == NULL) {
   10a54:	460c      	mov	r4, r1
   10a56:	b1f9      	cbz	r1, 10a98 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   10a58:	2300      	movs	r3, #0
	ssize_t len = 0;
   10a5a:	461a      	mov	r2, r3
   10a5c:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   10a5e:	4283      	cmp	r3, r0
   10a60:	d124      	bne.n	10aac <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   10a62:	2a80      	cmp	r2, #128	; 0x80
   10a64:	d86d      	bhi.n	10b42 <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   10a66:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   10a68:	f04f 32ff 	mov.w	r2, #4294967295
   10a6c:	f04f 33ff 	mov.w	r3, #4294967295
   10a70:	4836      	ldr	r0, [pc, #216]	; (10b4c <nrf91_socket_offload_sendmsg+0x100>)
   10a72:	f005 fa4f 	bl	15f14 <z_impl_k_mutex_lock>
		len = 0;
   10a76:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   10a78:	4e35      	ldr	r6, [pc, #212]	; (10b50 <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   10a7a:	68e3      	ldr	r3, [r4, #12]
   10a7c:	42ab      	cmp	r3, r5
   10a7e:	d81c      	bhi.n	10aba <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   10a80:	2600      	movs	r6, #0
		ret = 0;
   10a82:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   10a84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 10b50 <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   10a88:	42b7      	cmp	r7, r6
   10a8a:	dd01      	ble.n	10a90 <nrf91_socket_offload_sendmsg+0x44>
   10a8c:	2d00      	cmp	r5, #0
   10a8e:	da25      	bge.n	10adc <nrf91_socket_offload_sendmsg+0x90>
	return z_impl_k_mutex_unlock(mutex);
   10a90:	482e      	ldr	r0, [pc, #184]	; (10b4c <nrf91_socket_offload_sendmsg+0x100>)
   10a92:	f005 fab7 	bl	16004 <z_impl_k_mutex_unlock>
		return ret;
   10a96:	e005      	b.n	10aa4 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   10a98:	f007 fd07 	bl	184aa <z_errno>
   10a9c:	2316      	movs	r3, #22
		return -1;
   10a9e:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   10aa2:	6003      	str	r3, [r0, #0]
}
   10aa4:	4628      	mov	r0, r5
   10aa6:	b002      	add	sp, #8
   10aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   10aac:	68a1      	ldr	r1, [r4, #8]
   10aae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   10ab2:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   10ab4:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   10ab6:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   10ab8:	e7d1      	b.n	10a5e <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   10aba:	68a1      	ldr	r1, [r4, #8]
   10abc:	19f0      	adds	r0, r6, r7
   10abe:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   10ac2:	685a      	ldr	r2, [r3, #4]
   10ac4:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   10ac8:	f007 fa08 	bl	17edc <memcpy>
			len += msg->msg_iov[i].iov_len;
   10acc:	68a3      	ldr	r3, [r4, #8]
   10ace:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   10ad2:	4453      	add	r3, sl
   10ad4:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   10ad6:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   10ad8:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   10ada:	e7ce      	b.n	10a7a <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   10adc:	6863      	ldr	r3, [r4, #4]
   10ade:	1bba      	subs	r2, r7, r6
   10ae0:	9301      	str	r3, [sp, #4]
   10ae2:	6823      	ldr	r3, [r4, #0]
   10ae4:	eb0a 0106 	add.w	r1, sl, r6
   10ae8:	9300      	str	r3, [sp, #0]
   10aea:	4640      	mov	r0, r8
   10aec:	464b      	mov	r3, r9
   10aee:	f007 fdf4 	bl	186da <nrf91_socket_offload_sendto>
			if (ret > 0) {
   10af2:	1e05      	subs	r5, r0, #0
				offset += ret;
   10af4:	bfc8      	it	gt
   10af6:	1976      	addgt	r6, r6, r5
   10af8:	e7c6      	b.n	10a88 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   10afa:	68a3      	ldr	r3, [r4, #8]
   10afc:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   10b00:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   10b04:	685b      	ldr	r3, [r3, #4]
   10b06:	b133      	cbz	r3, 10b16 <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   10b08:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   10b0a:	68a3      	ldr	r3, [r4, #8]
   10b0c:	eb03 020a 	add.w	r2, r3, sl
   10b10:	6852      	ldr	r2, [r2, #4]
   10b12:	4297      	cmp	r7, r2
   10b14:	d304      	bcc.n	10b20 <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   10b16:	3601      	adds	r6, #1
   10b18:	68e3      	ldr	r3, [r4, #12]
   10b1a:	42b3      	cmp	r3, r6
   10b1c:	d8ed      	bhi.n	10afa <nrf91_socket_offload_sendmsg+0xae>
   10b1e:	e7c1      	b.n	10aa4 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   10b20:	f853 100a 	ldr.w	r1, [r3, sl]
   10b24:	6863      	ldr	r3, [r4, #4]
   10b26:	4640      	mov	r0, r8
   10b28:	9301      	str	r3, [sp, #4]
   10b2a:	6823      	ldr	r3, [r4, #0]
   10b2c:	1bd2      	subs	r2, r2, r7
   10b2e:	9300      	str	r3, [sp, #0]
   10b30:	4439      	add	r1, r7
   10b32:	464b      	mov	r3, r9
   10b34:	f007 fdd1 	bl	186da <nrf91_socket_offload_sendto>
			if (ret < 0) {
   10b38:	1e03      	subs	r3, r0, #0
   10b3a:	db05      	blt.n	10b48 <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   10b3c:	441f      	add	r7, r3
			len += ret;
   10b3e:	441d      	add	r5, r3
   10b40:	e7e3      	b.n	10b0a <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   10b42:	2600      	movs	r6, #0
	len = 0;
   10b44:	4635      	mov	r5, r6
   10b46:	e7e7      	b.n	10b18 <nrf91_socket_offload_sendmsg+0xcc>
			ret = nrf91_socket_offload_sendto(obj,
   10b48:	461d      	mov	r5, r3
   10b4a:	e7ab      	b.n	10aa4 <nrf91_socket_offload_sendmsg+0x58>
   10b4c:	200146d0 	.word	0x200146d0
   10b50:	20015c86 	.word	0x20015c86

00010b54 <nrf91_socket_offload_accept>:
{
   10b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b58:	b08a      	sub	sp, #40	; 0x28
   10b5a:	4607      	mov	r7, r0
   10b5c:	460c      	mov	r4, r1
   10b5e:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   10b60:	f7fc fc7a 	bl	d458 <z_reserve_fd>
   10b64:	4606      	mov	r6, r0
	if (fd < 0) {
   10b66:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   10b68:	f107 30ff 	add.w	r0, r7, #4294967295
	if (fd < 0) {
   10b6c:	da05      	bge.n	10b7a <nrf91_socket_offload_accept+0x26>
	return -1;
   10b6e:	f04f 36ff 	mov.w	r6, #4294967295
}
   10b72:	4630      	mov	r0, r6
   10b74:	b00a      	add	sp, #40	; 0x28
   10b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   10b7a:	b31c      	cbz	r4, 10bc4 <nrf91_socket_offload_accept+0x70>
   10b7c:	b32d      	cbz	r5, 10bca <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   10b7e:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   10b80:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   10b82:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   10b84:	bf0c      	ite	eq
   10b86:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   10b88:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   10b8a:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   10b8c:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   10b8e:	4639      	mov	r1, r7
   10b90:	f009 faa9 	bl	1a0e6 <nrf_accept>
	if (new_sd < 0) {
   10b94:	f1b0 0800 	subs.w	r8, r0, #0
   10b98:	dbe9      	blt.n	10b6e <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   10b9a:	b164      	cbz	r4, 10bb6 <nrf91_socket_offload_accept+0x62>
   10b9c:	b15d      	cbz	r5, 10bb6 <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   10b9e:	687b      	ldr	r3, [r7, #4]
   10ba0:	2b02      	cmp	r3, #2
   10ba2:	d115      	bne.n	10bd0 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   10ba4:	2308      	movs	r3, #8
   10ba6:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   10ba8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10bac:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   10bae:	2301      	movs	r3, #1
   10bb0:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   10bb2:	9b04      	ldr	r3, [sp, #16]
   10bb4:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   10bb6:	4630      	mov	r0, r6
   10bb8:	4a10      	ldr	r2, [pc, #64]	; (10bfc <nrf91_socket_offload_accept+0xa8>)
   10bba:	f108 0101 	add.w	r1, r8, #1
   10bbe:	f7fc fc7d 	bl	d4bc <z_finalize_fd>
	return fd;
   10bc2:	e7d6      	b.n	10b72 <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   10bc4:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   10bc6:	4627      	mov	r7, r4
   10bc8:	e7e1      	b.n	10b8e <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   10bca:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   10bcc:	462f      	mov	r7, r5
   10bce:	e7de      	b.n	10b8e <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   10bd0:	2b0a      	cmp	r3, #10
   10bd2:	d10f      	bne.n	10bf4 <nrf91_socket_offload_accept+0xa0>
			*addrlen = sizeof(struct sockaddr_in6);
   10bd4:	2318      	movs	r3, #24
   10bd6:	602b      	str	r3, [r5, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   10bd8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	ptr->sin6_family = AF_INET6;
   10bdc:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   10bde:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   10be0:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   10be2:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   10be4:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   10be8:	a905      	add	r1, sp, #20
   10bea:	f007 f977 	bl	17edc <memcpy>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   10bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10bf0:	7523      	strb	r3, [r4, #20]
}
   10bf2:	e7e0      	b.n	10bb6 <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   10bf4:	4630      	mov	r0, r6
   10bf6:	f7fc fc6b 	bl	d4d0 <z_free_fd>
   10bfa:	e7b8      	b.n	10b6e <nrf91_socket_offload_accept+0x1a>
   10bfc:	0001aefc 	.word	0x0001aefc

00010c00 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   10c00:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   10c02:	f240 2201 	movw	r2, #513	; 0x201
   10c06:	2102      	movs	r1, #2
   10c08:	2066      	movs	r0, #102	; 0x66
   10c0a:	f7fd fced 	bl	e5e8 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   10c0e:	4b05      	ldr	r3, [pc, #20]	; (10c24 <open_socket+0x24>)
   10c10:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   10c12:	3001      	adds	r0, #1
   10c14:	d104      	bne.n	10c20 <open_socket+0x20>
   10c16:	f004 ffdf 	bl	15bd8 <z_impl_z_errno>
		return -errno;
   10c1a:	6800      	ldr	r0, [r0, #0]
   10c1c:	4240      	negs	r0, r0
	}

	return 0;
}
   10c1e:	bd08      	pop	{r3, pc}
	return 0;
   10c20:	2000      	movs	r0, #0
   10c22:	e7fc      	b.n	10c1e <open_socket+0x1e>
   10c24:	20015054 	.word	0x20015054

00010c28 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   10c28:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   10c2a:	4d11      	ldr	r5, [pc, #68]	; (10c70 <at_cmd_driver_init+0x48>)
{
   10c2c:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   10c2e:	782b      	ldrb	r3, [r5, #0]
   10c30:	b9e3      	cbnz	r3, 10c6c <at_cmd_driver_init+0x44>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   10c32:	f7ff ffe5 	bl	10c00 <open_socket>
	if (err) {
   10c36:	4604      	mov	r4, r0
   10c38:	b9a8      	cbnz	r0, 10c66 <at_cmd_driver_init+0x3e>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10c3a:	2200      	movs	r2, #0
   10c3c:	2300      	movs	r3, #0
   10c3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10c42:	230a      	movs	r3, #10
   10c44:	e9cd 0000 	strd	r0, r0, [sp]
   10c48:	e9cd 0302 	strd	r0, r3, [sp, #8]
   10c4c:	9004      	str	r0, [sp, #16]
   10c4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10c52:	4b08      	ldr	r3, [pc, #32]	; (10c74 <at_cmd_driver_init+0x4c>)
   10c54:	4908      	ldr	r1, [pc, #32]	; (10c78 <at_cmd_driver_init+0x50>)
   10c56:	4809      	ldr	r0, [pc, #36]	; (10c7c <at_cmd_driver_init+0x54>)
   10c58:	f005 fe86 	bl	16968 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   10c5c:	4908      	ldr	r1, [pc, #32]	; (10c80 <at_cmd_driver_init+0x58>)
   10c5e:	f009 fcf1 	bl	1a644 <z_impl_k_thread_name_set>
				     socket_thread_fn,
				     NULL, NULL, NULL,
				     THREAD_PRIORITY, 0, K_NO_WAIT);
	k_thread_name_set(socket_tid, "at_cmd_socket_thread");

	initialized = true;
   10c62:	2301      	movs	r3, #1
   10c64:	702b      	strb	r3, [r5, #0]
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   10c66:	4620      	mov	r0, r4
   10c68:	b009      	add	sp, #36	; 0x24
   10c6a:	bd30      	pop	{r4, r5, pc}
		return 0;
   10c6c:	2400      	movs	r4, #0
   10c6e:	e7fa      	b.n	10c66 <at_cmd_driver_init+0x3e>
   10c70:	20016792 	.word	0x20016792
   10c74:	00010d59 	.word	0x00010d59
   10c78:	200179f0 	.word	0x200179f0
   10c7c:	20014788 	.word	0x20014788
   10c80:	0001b35b 	.word	0x0001b35b

00010c84 <complete_cmd>:
{
   10c84:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   10c86:	4c08      	ldr	r4, [pc, #32]	; (10ca8 <complete_cmd+0x24>)
   10c88:	f04f 32ff 	mov.w	r2, #4294967295
   10c8c:	f04f 33ff 	mov.w	r3, #4294967295
   10c90:	4620      	mov	r0, r4
   10c92:	f005 f93f 	bl	15f14 <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   10c96:	2200      	movs	r2, #0
   10c98:	4b04      	ldr	r3, [pc, #16]	; (10cac <complete_cmd+0x28>)
   10c9a:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   10c9c:	4620      	mov	r0, r4
}
   10c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10ca2:	f005 b9af 	b.w	16004 <z_impl_k_mutex_unlock>
   10ca6:	bf00      	nop
   10ca8:	2001466c 	.word	0x2001466c
   10cac:	20015058 	.word	0x20015058

00010cb0 <load_cmd_and_write>:
{
   10cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cb2:	b087      	sub	sp, #28
		if (current_cmd.cmd != NULL ||
   10cb4:	4d23      	ldr	r5, [pc, #140]	; (10d44 <load_cmd_and_write+0x94>)
	return z_impl_k_mutex_lock(mutex, timeout);
   10cb6:	f04f 32ff 	mov.w	r2, #4294967295
   10cba:	f04f 33ff 	mov.w	r3, #4294967295
   10cbe:	4822      	ldr	r0, [pc, #136]	; (10d48 <load_cmd_and_write+0x98>)
   10cc0:	f005 f928 	bl	15f14 <z_impl_k_mutex_lock>
   10cc4:	462e      	mov	r6, r5
	return z_impl_k_msgq_get(msgq, data, timeout);
   10cc6:	4f21      	ldr	r7, [pc, #132]	; (10d4c <load_cmd_and_write+0x9c>)
   10cc8:	682b      	ldr	r3, [r5, #0]
   10cca:	2b00      	cmp	r3, #0
   10ccc:	d134      	bne.n	10d38 <load_cmd_and_write+0x88>
   10cce:	2200      	movs	r2, #0
   10cd0:	2300      	movs	r3, #0
   10cd2:	4629      	mov	r1, r5
   10cd4:	4638      	mov	r0, r7
   10cd6:	f005 f8bf 	bl	15e58 <z_impl_k_msgq_get>
   10cda:	4604      	mov	r4, r0
   10cdc:	bb60      	cbnz	r0, 10d38 <load_cmd_and_write+0x88>
		ret = at_write(current_cmd.cmd);
   10cde:	6829      	ldr	r1, [r5, #0]
	int bytes_to_send = strlen(cmd);
   10ce0:	4608      	mov	r0, r1
   10ce2:	9103      	str	r1, [sp, #12]
   10ce4:	f007 f8bf 	bl	17e66 <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   10ce8:	4b19      	ldr	r3, [pc, #100]	; (10d50 <load_cmd_and_write+0xa0>)
	int bytes_to_send = strlen(cmd);
   10cea:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   10cec:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   10cee:	4623      	mov	r3, r4
   10cf0:	e9cd 4400 	strd	r4, r4, [sp]
   10cf4:	9903      	ldr	r1, [sp, #12]
   10cf6:	f006 fe47 	bl	17988 <z_impl_zsock_sendto>
	if (bytes_sent == -1) {
   10cfa:	3001      	adds	r0, #1
   10cfc:	d103      	bne.n	10d06 <load_cmd_and_write+0x56>
   10cfe:	f004 ff6b 	bl	15bd8 <z_impl_z_errno>
		return -errno;
   10d02:	6804      	ldr	r4, [r0, #0]
   10d04:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   10d06:	7c33      	ldrb	r3, [r6, #16]
   10d08:	07da      	lsls	r2, r3, #31
   10d0a:	d502      	bpl.n	10d12 <load_cmd_and_write+0x62>
			k_free(current_cmd.cmd);
   10d0c:	6830      	ldr	r0, [r6, #0]
   10d0e:	f009 fec4 	bl	1aa9a <k_free>
		if (ret != 0) {
   10d12:	b18c      	cbz	r4, 10d38 <load_cmd_and_write+0x88>
			resp.state = AT_CMD_ERROR_WRITE;
   10d14:	2305      	movs	r3, #5
   10d16:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   10d1a:	7c33      	ldrb	r3, [r6, #16]
			resp.code = ret;
   10d1c:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   10d1e:	079b      	lsls	r3, r3, #30
   10d20:	d507      	bpl.n	10d32 <load_cmd_and_write+0x82>
	return z_impl_k_msgq_put(msgq, data, timeout);
   10d22:	f04f 32ff 	mov.w	r2, #4294967295
   10d26:	f04f 33ff 	mov.w	r3, #4294967295
   10d2a:	480a      	ldr	r0, [pc, #40]	; (10d54 <load_cmd_and_write+0xa4>)
   10d2c:	a904      	add	r1, sp, #16
   10d2e:	f005 f83f 	bl	15db0 <z_impl_k_msgq_put>
			complete_cmd();
   10d32:	f7ff ffa7 	bl	10c84 <complete_cmd>
	} while (ret != 0);
   10d36:	e7c7      	b.n	10cc8 <load_cmd_and_write+0x18>
	return z_impl_k_mutex_unlock(mutex);
   10d38:	4803      	ldr	r0, [pc, #12]	; (10d48 <load_cmd_and_write+0x98>)
   10d3a:	f005 f963 	bl	16004 <z_impl_k_mutex_unlock>
}
   10d3e:	b007      	add	sp, #28
   10d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d42:	bf00      	nop
   10d44:	20015058 	.word	0x20015058
   10d48:	2001466c 	.word	0x2001466c
   10d4c:	200146e4 	.word	0x200146e4
   10d50:	20015054 	.word	0x20015054
   10d54:	2001470c 	.word	0x2001470c

00010d58 <socket_thread_fn>:
{
   10d58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   10d5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 10f20 <socket_thread_fn+0x1c8>
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   10d60:	4e64      	ldr	r6, [pc, #400]	; (10ef4 <socket_thread_fn+0x19c>)
   10d62:	46c1      	mov	r9, r8
		load_cmd_and_write();
   10d64:	f7ff ffa4 	bl	10cb0 <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   10d68:	f8d8 0000 	ldr.w	r0, [r8]
   10d6c:	2500      	movs	r5, #0
   10d6e:	f640 228c 	movw	r2, #2700	; 0xa8c
   10d72:	462b      	mov	r3, r5
   10d74:	e9cd 5500 	strd	r5, r5, [sp]
   10d78:	495e      	ldr	r1, [pc, #376]	; (10ef4 <socket_thread_fn+0x19c>)
   10d7a:	f006 fe22 	bl	179c2 <z_impl_zsock_recvfrom>
		ret.code  = 0;
   10d7e:	4c5e      	ldr	r4, [pc, #376]	; (10ef8 <socket_thread_fn+0x1a0>)
		if (bytes_read < 0) {
   10d80:	1e07      	subs	r7, r0, #0
		ret.code  = 0;
   10d82:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   10d84:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   10d86:	da48      	bge.n	10e1a <socket_thread_fn+0xc2>
   10d88:	f004 ff26 	bl	15bd8 <z_impl_z_errno>
			if (errno == EHOSTDOWN) {
   10d8c:	6803      	ldr	r3, [r0, #0]
   10d8e:	2b43      	cmp	r3, #67	; 0x43
   10d90:	d116      	bne.n	10dc0 <socket_thread_fn+0x68>
   10d92:	2301      	movs	r3, #1
   10d94:	4c59      	ldr	r4, [pc, #356]	; (10efc <socket_thread_fn+0x1a4>)
   10d96:	e8d4 2fef 	ldaex	r2, [r4]
   10d9a:	e8c4 3fe1 	stlex	r1, r3, [r4]
   10d9e:	2900      	cmp	r1, #0
   10da0:	d1f9      	bne.n	10d96 <socket_thread_fn+0x3e>
				close(common_socket_fd);
   10da2:	f8d8 0000 	ldr.w	r0, [r8]
	return z_impl_zsock_close(sock);
   10da6:	f006 fdc2 	bl	1792e <z_impl_zsock_close>
				nrf_modem_lib_shutdown_wait();
   10daa:	f7ff f88b 	bl	fec4 <nrf_modem_lib_shutdown_wait>
   10dae:	e8d4 3fef 	ldaex	r3, [r4]
   10db2:	e8c4 5fe2 	stlex	r2, r5, [r4]
   10db6:	2a00      	cmp	r2, #0
   10db8:	d1f9      	bne.n	10dae <socket_thread_fn+0x56>
				if (open_socket() != 0) {
   10dba:	f7ff ff21 	bl	10c00 <open_socket>
				continue;
   10dbe:	e7d1      	b.n	10d64 <socket_thread_fn+0xc>
			if ((close(common_socket_fd) == 0) &&
   10dc0:	f8d8 0000 	ldr.w	r0, [r8]
   10dc4:	f006 fdb3 	bl	1792e <z_impl_zsock_close>
   10dc8:	bb00      	cbnz	r0, 10e0c <socket_thread_fn+0xb4>
			    (open_socket() == 0)) {
   10dca:	f7ff ff19 	bl	10c00 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   10dce:	b9e8      	cbnz	r0, 10e0c <socket_thread_fn+0xb4>
				ret.state = AT_CMD_ERROR_READ;
   10dd0:	2306      	movs	r3, #6
   10dd2:	7123      	strb	r3, [r4, #4]
   10dd4:	f004 ff00 	bl	15bd8 <z_impl_z_errno>
				ret.code  = -errno;
   10dd8:	6803      	ldr	r3, [r0, #0]
   10dda:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   10ddc:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   10dde:	4b48      	ldr	r3, [pc, #288]	; (10f00 <socket_thread_fn+0x1a8>)
   10de0:	681a      	ldr	r2, [r3, #0]
   10de2:	b16a      	cbz	r2, 10e00 <socket_thread_fn+0xa8>
   10de4:	7c1b      	ldrb	r3, [r3, #16]
   10de6:	079b      	lsls	r3, r3, #30
   10de8:	d50a      	bpl.n	10e00 <socket_thread_fn+0xa8>
		    current_cmd.flags & AT_CMD_SYNC &&
   10dea:	7923      	ldrb	r3, [r4, #4]
   10dec:	2b07      	cmp	r3, #7
   10dee:	d0b9      	beq.n	10d64 <socket_thread_fn+0xc>
	return z_impl_k_msgq_put(msgq, data, timeout);
   10df0:	f04f 32ff 	mov.w	r2, #4294967295
   10df4:	f04f 33ff 	mov.w	r3, #4294967295
   10df8:	493f      	ldr	r1, [pc, #252]	; (10ef8 <socket_thread_fn+0x1a0>)
   10dfa:	4842      	ldr	r0, [pc, #264]	; (10f04 <socket_thread_fn+0x1ac>)
   10dfc:	f004 ffd8 	bl	15db0 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   10e00:	7923      	ldrb	r3, [r4, #4]
   10e02:	2b07      	cmp	r3, #7
   10e04:	d0ae      	beq.n	10d64 <socket_thread_fn+0xc>
			complete_cmd();
   10e06:	f7ff ff3d 	bl	10c84 <complete_cmd>
   10e0a:	e7ab      	b.n	10d64 <socket_thread_fn+0xc>
			close(common_socket_fd);
   10e0c:	f8d9 0000 	ldr.w	r0, [r9]
}
   10e10:	b003      	add	sp, #12
   10e12:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10e16:	f006 bd8a 	b.w	1792e <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   10e1a:	d104      	bne.n	10e26 <socket_thread_fn+0xce>
			ret.state = AT_CMD_ERROR_READ;
   10e1c:	2306      	movs	r3, #6
   10e1e:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   10e20:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   10e24:	e7da      	b.n	10ddc <socket_thread_fn+0x84>
		} else if (buf[bytes_read - 1] != '\0') {
   10e26:	19f3      	adds	r3, r6, r7
   10e28:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   10e2c:	b123      	cbz	r3, 10e38 <socket_thread_fn+0xe0>
			ret.state = AT_CMD_ERROR_READ;
   10e2e:	2306      	movs	r3, #6
   10e30:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   10e32:	f06f 0336 	mvn.w	r3, #54	; 0x36
   10e36:	e7d1      	b.n	10ddc <socket_thread_fn+0x84>
	ret->state = AT_CMD_NOTIFICATION;
   10e38:	2307      	movs	r3, #7
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   10e3a:	4833      	ldr	r0, [pc, #204]	; (10f08 <socket_thread_fn+0x1b0>)
	ret->state = AT_CMD_NOTIFICATION;
   10e3c:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   10e3e:	f007 f812 	bl	17e66 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   10e42:	1f7d      	subs	r5, r7, #5
   10e44:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   10e46:	4602      	mov	r2, r0
   10e48:	492f      	ldr	r1, [pc, #188]	; (10f08 <socket_thread_fn+0x1b0>)
   10e4a:	4628      	mov	r0, r5
   10e4c:	f007 f827 	bl	17e9e <strncmp>
		if (match) {
   10e50:	b9c0      	cbnz	r0, 10e84 <socket_thread_fn+0x12c>
			ret->state = AT_CMD_OK;
   10e52:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   10e54:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   10e56:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   10e58:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   10e5a:	3201      	adds	r2, #1
   10e5c:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   10e5e:	4d28      	ldr	r5, [pc, #160]	; (10f00 <socket_thread_fn+0x1a8>)
   10e60:	682b      	ldr	r3, [r5, #0]
   10e62:	2b00      	cmp	r3, #0
   10e64:	d03d      	beq.n	10ee2 <socket_thread_fn+0x18a>
		    current_cmd.resp != NULL &&
   10e66:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   10e68:	2800      	cmp	r0, #0
   10e6a:	d03a      	beq.n	10ee2 <socket_thread_fn+0x18a>
		    current_cmd.resp != NULL &&
   10e6c:	7923      	ldrb	r3, [r4, #4]
   10e6e:	2b07      	cmp	r3, #7
   10e70:	d12e      	bne.n	10ed0 <socket_thread_fn+0x178>
		    notification_handler != NULL) {
   10e72:	4b26      	ldr	r3, [pc, #152]	; (10f0c <socket_thread_fn+0x1b4>)
   10e74:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   10e76:	b913      	cbnz	r3, 10e7e <socket_thread_fn+0x126>
		} else if (current_cmd.callback != NULL) {
   10e78:	68ab      	ldr	r3, [r5, #8]
   10e7a:	2b00      	cmp	r3, #0
   10e7c:	d0af      	beq.n	10dde <socket_thread_fn+0x86>
			current_cmd.callback(buf);
   10e7e:	4630      	mov	r0, r6
   10e80:	4798      	blx	r3
   10e82:	e7ac      	b.n	10dde <socket_thread_fn+0x86>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   10e84:	4630      	mov	r0, r6
   10e86:	4922      	ldr	r1, [pc, #136]	; (10f10 <socket_thread_fn+0x1b8>)
   10e88:	f006 ffac 	bl	17de4 <strstr>
		if (tmpstr) {
   10e8c:	4605      	mov	r5, r0
   10e8e:	b128      	cbz	r0, 10e9c <socket_thread_fn+0x144>
			ret->state = AT_CMD_ERROR_CMS;
   10e90:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   10e92:	4820      	ldr	r0, [pc, #128]	; (10f14 <socket_thread_fn+0x1bc>)
			ret->state = AT_CMD_ERROR_CMS;
   10e94:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   10e96:	f006 fe90 	bl	17bba <atoi>
   10e9a:	e7db      	b.n	10e54 <socket_thread_fn+0xfc>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   10e9c:	4630      	mov	r0, r6
   10e9e:	491e      	ldr	r1, [pc, #120]	; (10f18 <socket_thread_fn+0x1c0>)
   10ea0:	f006 ffa0 	bl	17de4 <strstr>
		if (tmpstr) {
   10ea4:	4605      	mov	r5, r0
   10ea6:	b108      	cbz	r0, 10eac <socket_thread_fn+0x154>
			ret->state = AT_CMD_ERROR_CME;
   10ea8:	2303      	movs	r3, #3
   10eaa:	e7f2      	b.n	10e92 <socket_thread_fn+0x13a>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   10eac:	481b      	ldr	r0, [pc, #108]	; (10f1c <socket_thread_fn+0x1c4>)
   10eae:	f006 ffda 	bl	17e66 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   10eb2:	f1a7 0508 	sub.w	r5, r7, #8
   10eb6:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   10eb8:	4602      	mov	r2, r0
   10eba:	4918      	ldr	r1, [pc, #96]	; (10f1c <socket_thread_fn+0x1c4>)
   10ebc:	4628      	mov	r0, r5
   10ebe:	f006 ffee 	bl	17e9e <strncmp>
		if (match) {
   10ec2:	b990      	cbnz	r0, 10eea <socket_thread_fn+0x192>
			ret->state = AT_CMD_ERROR;
   10ec4:	2301      	movs	r3, #1
   10ec6:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   10ec8:	f06f 0307 	mvn.w	r3, #7
   10ecc:	6023      	str	r3, [r4, #0]
			break;
   10ece:	e7c2      	b.n	10e56 <socket_thread_fn+0xfe>
			if (current_cmd.resp_size < payload_len) {
   10ed0:	68eb      	ldr	r3, [r5, #12]
   10ed2:	429a      	cmp	r2, r3
   10ed4:	d902      	bls.n	10edc <socket_thread_fn+0x184>
				ret.code  = -EMSGSIZE;
   10ed6:	f06f 0323 	mvn.w	r3, #35	; 0x23
   10eda:	e77f      	b.n	10ddc <socket_thread_fn+0x84>
			memcpy(current_cmd.resp, buf, payload_len);
   10edc:	4631      	mov	r1, r6
   10ede:	f006 fffd 	bl	17edc <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   10ee2:	7923      	ldrb	r3, [r4, #4]
   10ee4:	2b07      	cmp	r3, #7
   10ee6:	d1c7      	bne.n	10e78 <socket_thread_fn+0x120>
   10ee8:	e7c3      	b.n	10e72 <socket_thread_fn+0x11a>
		new_len = strlen(buf) + 1;
   10eea:	4630      	mov	r0, r6
   10eec:	f006 ffbb 	bl	17e66 <strlen>
   10ef0:	1c42      	adds	r2, r0, #1
   10ef2:	e7b4      	b.n	10e5e <socket_thread_fn+0x106>
   10ef4:	20015d06 	.word	0x20015d06
   10ef8:	20015070 	.word	0x20015070
   10efc:	20015078 	.word	0x20015078
   10f00:	20015058 	.word	0x20015058
   10f04:	2001470c 	.word	0x2001470c
   10f08:	0001b370 	.word	0x0001b370
   10f0c:	2001506c 	.word	0x2001506c
   10f10:	0001b375 	.word	0x0001b375
   10f14:	20015d11 	.word	0x20015d11
   10f18:	0001b381 	.word	0x0001b381
   10f1c:	0001b38d 	.word	0x0001b38d
   10f20:	20015054 	.word	0x20015054

00010f24 <at_cmd_write>:
{
   10f24:	b530      	push	{r4, r5, lr}
   10f26:	461c      	mov	r4, r3
   10f28:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10f2a:	4b23      	ldr	r3, [pc, #140]	; (10fb8 <at_cmd_write+0x94>)
   10f2c:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   10f30:	2b01      	cmp	r3, #1
   10f32:	d03d      	beq.n	10fb0 <at_cmd_write+0x8c>
	if (cmd == NULL) {
   10f34:	b118      	cbz	r0, 10f3e <at_cmd_write+0x1a>
   10f36:	1e45      	subs	r5, r0, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   10f38:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   10f3c:	b92b      	cbnz	r3, 10f4a <at_cmd_write+0x26>
		if (state) {
   10f3e:	b10c      	cbz	r4, 10f44 <at_cmd_write+0x20>
			*state = AT_CMD_ERROR_QUEUE;
   10f40:	2304      	movs	r3, #4
   10f42:	7023      	strb	r3, [r4, #0]
		return -EINVAL;
   10f44:	f06f 0015 	mvn.w	r0, #21
   10f48:	e030      	b.n	10fac <at_cmd_write+0x88>
		if (*c > ' ') {
   10f4a:	2b20      	cmp	r3, #32
   10f4c:	d9f4      	bls.n	10f38 <at_cmd_write+0x14>
	command.callback = NULL;
   10f4e:	2300      	movs	r3, #0
   10f50:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   10f52:	2302      	movs	r3, #2
	command.resp = buf;
   10f54:	e9cd 0103 	strd	r0, r1, [sp, #12]
	command.resp_size = buf_len;
   10f58:	9206      	str	r2, [sp, #24]
	command.flags = AT_CMD_SYNC;
   10f5a:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   10f5e:	f04f 32ff 	mov.w	r2, #4294967295
   10f62:	f04f 33ff 	mov.w	r3, #4294967295
   10f66:	4815      	ldr	r0, [pc, #84]	; (10fbc <at_cmd_write+0x98>)
   10f68:	f004 ffd4 	bl	15f14 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   10f6c:	f04f 32ff 	mov.w	r2, #4294967295
   10f70:	f04f 33ff 	mov.w	r3, #4294967295
   10f74:	4812      	ldr	r0, [pc, #72]	; (10fc0 <at_cmd_write+0x9c>)
   10f76:	a903      	add	r1, sp, #12
   10f78:	f004 ff1a 	bl	15db0 <z_impl_k_msgq_put>
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   10f7c:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   10f7e:	b990      	cbnz	r0, 10fa6 <at_cmd_write+0x82>
	load_cmd_and_write();
   10f80:	f7ff fe96 	bl	10cb0 <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   10f84:	f04f 32ff 	mov.w	r2, #4294967295
   10f88:	f04f 33ff 	mov.w	r3, #4294967295
   10f8c:	a901      	add	r1, sp, #4
   10f8e:	480d      	ldr	r0, [pc, #52]	; (10fc4 <at_cmd_write+0xa0>)
   10f90:	f004 ff62 	bl	15e58 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   10f94:	4809      	ldr	r0, [pc, #36]	; (10fbc <at_cmd_write+0x98>)
   10f96:	f005 f835 	bl	16004 <z_impl_k_mutex_unlock>
	if (state) {
   10f9a:	b114      	cbz	r4, 10fa2 <at_cmd_write+0x7e>
		*state = ret.state;
   10f9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10fa0:	7023      	strb	r3, [r4, #0]
	return ret.code;
   10fa2:	9801      	ldr	r0, [sp, #4]
   10fa4:	e002      	b.n	10fac <at_cmd_write+0x88>
		if (state) {
   10fa6:	b10c      	cbz	r4, 10fac <at_cmd_write+0x88>
			*state = AT_CMD_ERROR_QUEUE;
   10fa8:	2304      	movs	r3, #4
   10faa:	7023      	strb	r3, [r4, #0]
}
   10fac:	b009      	add	sp, #36	; 0x24
   10fae:	bd30      	pop	{r4, r5, pc}
		return -EHOSTDOWN;
   10fb0:	f06f 0042 	mvn.w	r0, #66	; 0x42
   10fb4:	e7fa      	b.n	10fac <at_cmd_write+0x88>
   10fb6:	bf00      	nop
   10fb8:	20015078 	.word	0x20015078
   10fbc:	200146bc 	.word	0x200146bc
   10fc0:	200146e4 	.word	0x200146e4
   10fc4:	2001470c 	.word	0x2001470c

00010fc8 <at_cmd_set_notification_handler>:
	notification_handler = handler;
   10fc8:	4b01      	ldr	r3, [pc, #4]	; (10fd0 <at_cmd_set_notification_handler+0x8>)
   10fca:	6018      	str	r0, [r3, #0]
}
   10fcc:	4770      	bx	lr
   10fce:	bf00      	nop
   10fd0:	2001506c 	.word	0x2001506c

00010fd4 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10fd4:	4b0f      	ldr	r3, [pc, #60]	; (11014 <find_node+0x40>)
{
   10fd6:	b570      	push	{r4, r5, r6, lr}
   10fd8:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10fda:	6818      	ldr	r0, [r3, #0]
   10fdc:	b170      	cbz	r0, 10ffc <find_node+0x28>
	return node->next;
   10fde:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10fe0:	4603      	mov	r3, r0
   10fe2:	2d00      	cmp	r5, #0
   10fe4:	4628      	mov	r0, r5
   10fe6:	bf38      	it	cc
   10fe8:	2000      	movcc	r0, #0
   10fea:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   10fec:	685e      	ldr	r6, [r3, #4]
   10fee:	428e      	cmp	r6, r1
   10ff0:	d105      	bne.n	10ffe <find_node+0x2a>
   10ff2:	689e      	ldr	r6, [r3, #8]
   10ff4:	4296      	cmp	r6, r2
   10ff6:	d102      	bne.n	10ffe <find_node+0x2a>
			*prev_out = prev;
			return curr;
   10ff8:	4618      	mov	r0, r3
			*prev_out = prev;
   10ffa:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   10ffc:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   10ffe:	2800      	cmp	r0, #0
   11000:	d0fc      	beq.n	10ffc <find_node+0x28>
	return node->next;
   11002:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11004:	461d      	mov	r5, r3
   11006:	2e00      	cmp	r6, #0
   11008:	4603      	mov	r3, r0
   1100a:	4630      	mov	r0, r6
   1100c:	bf38      	it	cc
   1100e:	2000      	movcc	r0, #0
   11010:	e7ec      	b.n	10fec <find_node+0x18>
   11012:	bf00      	nop
   11014:	2001507c 	.word	0x2001507c

00011018 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   11018:	4a06      	ldr	r2, [pc, #24]	; (11034 <module_init+0x1c>)
{
   1101a:	b508      	push	{r3, lr}
	if (initialized) {
   1101c:	7813      	ldrb	r3, [r2, #0]
   1101e:	b93b      	cbnz	r3, 11030 <module_init+0x18>
		LOG_WRN("Already initialized. Nothing to do");
		return 0;
	}

	initialized = true;
   11020:	2101      	movs	r1, #1
   11022:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   11024:	4a04      	ldr	r2, [pc, #16]	; (11038 <module_init+0x20>)

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   11026:	4805      	ldr	r0, [pc, #20]	; (1103c <module_init+0x24>)
	list->tail = NULL;
   11028:	e9c2 3300 	strd	r3, r3, [r2]
   1102c:	f7ff ffcc 	bl	10fc8 <at_cmd_set_notification_handler>
	return 0;
}
   11030:	2000      	movs	r0, #0
   11032:	bd08      	pop	{r3, pc}
   11034:	20016793 	.word	0x20016793
   11038:	2001507c 	.word	0x2001507c
   1103c:	0001104d 	.word	0x0001104d

00011040 <k_mutex_unlock.constprop.0>:
   11040:	4801      	ldr	r0, [pc, #4]	; (11048 <k_mutex_unlock.constprop.0+0x8>)
   11042:	f004 bfdf 	b.w	16004 <z_impl_k_mutex_unlock>
   11046:	bf00      	nop
   11048:	200146a8 	.word	0x200146a8

0001104c <notif_dispatch>:
{
   1104c:	b538      	push	{r3, r4, r5, lr}
   1104e:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   11050:	f04f 33ff 	mov.w	r3, #4294967295
   11054:	f04f 32ff 	mov.w	r2, #4294967295
   11058:	480d      	ldr	r0, [pc, #52]	; (11090 <notif_dispatch+0x44>)
   1105a:	f004 ff5b 	bl	15f14 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1105e:	4b0d      	ldr	r3, [pc, #52]	; (11094 <notif_dispatch+0x48>)
   11060:	681b      	ldr	r3, [r3, #0]
   11062:	b91b      	cbnz	r3, 1106c <notif_dispatch+0x20>
}
   11064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   11068:	f7ff bfea 	b.w	11040 <k_mutex_unlock.constprop.0>
	return node->next;
   1106c:	681c      	ldr	r4, [r3, #0]
   1106e:	2c00      	cmp	r4, #0
   11070:	bf38      	it	cc
   11072:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   11074:	4629      	mov	r1, r5
   11076:	689a      	ldr	r2, [r3, #8]
   11078:	6858      	ldr	r0, [r3, #4]
   1107a:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1107c:	2c00      	cmp	r4, #0
   1107e:	d0f1      	beq.n	11064 <notif_dispatch+0x18>
   11080:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11082:	4623      	mov	r3, r4
   11084:	2a00      	cmp	r2, #0
   11086:	bf38      	it	cc
   11088:	2200      	movcc	r2, #0
   1108a:	4614      	mov	r4, r2
   1108c:	e7f2      	b.n	11074 <notif_dispatch+0x28>
   1108e:	bf00      	nop
   11090:	200146a8 	.word	0x200146a8
   11094:	2001507c 	.word	0x2001507c

00011098 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   11098:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1109a:	4606      	mov	r6, r0
	if (handler == NULL) {
   1109c:	460d      	mov	r5, r1
   1109e:	b371      	cbz	r1, 110fe <at_notif_register_handler+0x66>
   110a0:	f04f 32ff 	mov.w	r2, #4294967295
   110a4:	f04f 33ff 	mov.w	r3, #4294967295
   110a8:	4816      	ldr	r0, [pc, #88]	; (11104 <at_notif_register_handler+0x6c>)
   110aa:	f004 ff33 	bl	15f14 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   110ae:	462a      	mov	r2, r5
   110b0:	4631      	mov	r1, r6
   110b2:	a801      	add	r0, sp, #4
   110b4:	f7ff ff8e 	bl	10fd4 <find_node>
   110b8:	4604      	mov	r4, r0
   110ba:	b120      	cbz	r0, 110c6 <at_notif_register_handler+0x2e>
		k_mutex_unlock(&list_mtx);
   110bc:	f7ff ffc0 	bl	11040 <k_mutex_unlock.constprop.0>
		return 0;
   110c0:	2000      	movs	r0, #0
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
	}
	return append_notif_handler(context, handler);
}
   110c2:	b002      	add	sp, #8
   110c4:	bd70      	pop	{r4, r5, r6, pc}
   110c6:	210c      	movs	r1, #12
   110c8:	2004      	movs	r0, #4
   110ca:	f005 ff5f 	bl	16f8c <k_aligned_alloc>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   110ce:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   110d0:	b920      	cbnz	r0, 110dc <at_notif_register_handler+0x44>
		k_mutex_unlock(&list_mtx);
   110d2:	f7ff ffb5 	bl	11040 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   110d6:	f06f 0036 	mvn.w	r0, #54	; 0x36
   110da:	e7f2      	b.n	110c2 <at_notif_register_handler+0x2a>
	memset(to_ins, 0, sizeof(struct notif_handler));
   110dc:	220c      	movs	r2, #12
   110de:	4621      	mov	r1, r4
   110e0:	f006 ff27 	bl	17f32 <memset>
	to_ins->ctx     = ctx;
   110e4:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   110e6:	4a08      	ldr	r2, [pc, #32]	; (11108 <at_notif_register_handler+0x70>)
	parent->next = child;
   110e8:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   110ea:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   110ec:	e9c3 6501 	strd	r6, r5, [r3, #4]
   110f0:	b911      	cbnz	r1, 110f8 <at_notif_register_handler+0x60>
	list->head = node;
   110f2:	e9c2 3300 	strd	r3, r3, [r2]
}
   110f6:	e7e1      	b.n	110bc <at_notif_register_handler+0x24>
	parent->next = child;
   110f8:	600b      	str	r3, [r1, #0]
	list->tail = node;
   110fa:	6053      	str	r3, [r2, #4]
}
   110fc:	e7de      	b.n	110bc <at_notif_register_handler+0x24>
		return -EINVAL;
   110fe:	f06f 0015 	mvn.w	r0, #21
   11102:	e7de      	b.n	110c2 <at_notif_register_handler+0x2a>
   11104:	200146a8 	.word	0x200146a8
   11108:	2001507c 	.word	0x2001507c

0001110c <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   1110c:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   1110e:	4d05      	ldr	r5, [pc, #20]	; (11124 <write_uart_string+0x18>)
   11110:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   11112:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   11116:	b901      	cbnz	r1, 1111a <write_uart_string+0xe>
	}
}
   11118:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   1111a:	6828      	ldr	r0, [r5, #0]
   1111c:	6883      	ldr	r3, [r0, #8]
   1111e:	685b      	ldr	r3, [r3, #4]
   11120:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   11122:	e7f6      	b.n	11112 <write_uart_string+0x6>
   11124:	20015094 	.word	0x20015094

00011128 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   11128:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   1112a:	491a      	ldr	r1, [pc, #104]	; (11194 <cmd_send+0x6c>)
{
   1112c:	b089      	sub	sp, #36	; 0x24
	err = at_cmd_write(at_buf, at_buf,
   1112e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   11132:	4608      	mov	r0, r1
   11134:	f10d 0303 	add.w	r3, sp, #3
   11138:	f7ff fef4 	bl	10f24 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   1113c:	1e02      	subs	r2, r0, #0
   1113e:	da04      	bge.n	1114a <cmd_send+0x22>
		LOG_ERR("Error while processing AT command: %d", err);
		state = AT_CMD_ERROR;
   11140:	2301      	movs	r3, #1
   11142:	f88d 3003 	strb.w	r3, [sp, #3]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   11146:	4814      	ldr	r0, [pc, #80]	; (11198 <cmd_send+0x70>)
   11148:	e012      	b.n	11170 <cmd_send+0x48>
	switch (state) {
   1114a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1114e:	2b03      	cmp	r3, #3
   11150:	d810      	bhi.n	11174 <cmd_send+0x4c>
   11152:	a101      	add	r1, pc, #4	; (adr r1, 11158 <cmd_send+0x30>)
   11154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   11158:	00011169 	.word	0x00011169
   1115c:	00011147 	.word	0x00011147
   11160:	00011183 	.word	0x00011183
   11164:	0001118f 	.word	0x0001118f
		write_uart_string(at_buf);
   11168:	480a      	ldr	r0, [pc, #40]	; (11194 <cmd_send+0x6c>)
   1116a:	f7ff ffcf 	bl	1110c <write_uart_string>
		write_uart_string(OK_STR);
   1116e:	480b      	ldr	r0, [pc, #44]	; (1119c <cmd_send+0x74>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   11170:	f7ff ffcc 	bl	1110c <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   11174:	4b0a      	ldr	r3, [pc, #40]	; (111a0 <cmd_send+0x78>)
   11176:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   11178:	f007 fb73 	bl	18862 <z_impl_uart_irq_rx_enable>
}
   1117c:	b009      	add	sp, #36	; 0x24
   1117e:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   11182:	4908      	ldr	r1, [pc, #32]	; (111a4 <cmd_send+0x7c>)
		sprintf(str, "+CME ERROR: %d\r\n", err);
   11184:	a801      	add	r0, sp, #4
   11186:	f7fe fa5d 	bl	f644 <sprintf>
		write_uart_string(str);
   1118a:	a801      	add	r0, sp, #4
   1118c:	e7f0      	b.n	11170 <cmd_send+0x48>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   1118e:	4906      	ldr	r1, [pc, #24]	; (111a8 <cmd_send+0x80>)
   11190:	e7f8      	b.n	11184 <cmd_send+0x5c>
   11192:	bf00      	nop
   11194:	20016794 	.word	0x20016794
   11198:	0001b38d 	.word	0x0001b38d
   1119c:	0001b370 	.word	0x0001b370
   111a0:	20015094 	.word	0x20015094
   111a4:	0001b395 	.word	0x0001b395
   111a8:	0001b3a6 	.word	0x0001b3a6

000111ac <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   111ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   111ae:	4604      	mov	r4, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
   111b0:	6883      	ldr	r3, [r0, #8]
   111b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   111b4:	b103      	cbz	r3, 111b8 <isr+0xc>
		return api->irq_update(dev);
   111b6:	4798      	blx	r3
	if (api->irq_rx_ready) {
   111b8:	68a3      	ldr	r3, [r4, #8]
   111ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   111bc:	b193      	cbz	r3, 111e4 <isr+0x38>
		return api->irq_rx_ready(dev);
   111be:	4620      	mov	r0, r4
   111c0:	4798      	blx	r3

	uint8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   111c2:	b178      	cbz	r0, 111e4 <isr+0x38>
   111c4:	4f3b      	ldr	r7, [pc, #236]	; (112b4 <isr+0x108>)
		if (at_cmd_len > 0) {
   111c6:	4d3c      	ldr	r5, [pc, #240]	; (112b8 <isr+0x10c>)
   111c8:	463e      	mov	r6, r7
   111ca:	e8d7 3faf 	lda	r3, [r7]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   111ce:	07db      	lsls	r3, r3, #31
   111d0:	d408      	bmi.n	111e4 <isr+0x38>
	if (api->fifo_read) {
   111d2:	68a3      	ldr	r3, [r4, #8]
   111d4:	699b      	ldr	r3, [r3, #24]
   111d6:	b12b      	cbz	r3, 111e4 <isr+0x38>
		return api->fifo_read(dev, rx_data, size);
   111d8:	2201      	movs	r2, #1
   111da:	4620      	mov	r0, r4
   111dc:	f10d 0107 	add.w	r1, sp, #7
   111e0:	4798      	blx	r3
   111e2:	b908      	cbnz	r0, 111e8 <isr+0x3c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   111e4:	b003      	add	sp, #12
   111e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uart_rx_handler(character);
   111e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	switch (character) {
   111ec:	2b08      	cmp	r3, #8
   111ee:	d001      	beq.n	111f4 <isr+0x48>
   111f0:	2b7f      	cmp	r3, #127	; 0x7f
   111f2:	d105      	bne.n	11200 <isr+0x54>
		if (at_cmd_len > 0) {
   111f4:	682b      	ldr	r3, [r5, #0]
   111f6:	2b00      	cmp	r3, #0
   111f8:	d0e7      	beq.n	111ca <isr+0x1e>
			at_cmd_len--;
   111fa:	3b01      	subs	r3, #1
   111fc:	602b      	str	r3, [r5, #0]
   111fe:	e7e4      	b.n	111ca <isr+0x1e>
	if (!inside_quotes) {
   11200:	492e      	ldr	r1, [pc, #184]	; (112bc <isr+0x110>)
   11202:	780a      	ldrb	r2, [r1, #0]
   11204:	b9d2      	cbnz	r2, 1123c <isr+0x90>
		switch (character) {
   11206:	2b0a      	cmp	r3, #10
   11208:	d02a      	beq.n	11260 <isr+0xb4>
   1120a:	2b0d      	cmp	r3, #13
   1120c:	d012      	beq.n	11234 <isr+0x88>
   1120e:	b9ab      	cbnz	r3, 1123c <isr+0x90>
			if (term_mode == MODE_NULL_TERM) {
   11210:	4b2b      	ldr	r3, [pc, #172]	; (112c0 <isr+0x114>)
   11212:	781b      	ldrb	r3, [r3, #0]
   11214:	2b00      	cmp	r3, #0
   11216:	d1d8      	bne.n	111ca <isr+0x1e>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   11218:	2200      	movs	r2, #0
   1121a:	4b2a      	ldr	r3, [pc, #168]	; (112c4 <isr+0x118>)
	inside_quotes = false;
   1121c:	700a      	strb	r2, [r1, #0]
   1121e:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   11220:	6828      	ldr	r0, [r5, #0]
	at_cmd_len = 0;
   11222:	602a      	str	r2, [r5, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   11224:	541a      	strb	r2, [r3, r0]
		if (*c > ' ') {
   11226:	f813 2b01 	ldrb.w	r2, [r3], #1
   1122a:	2a20      	cmp	r2, #32
   1122c:	d829      	bhi.n	11282 <isr+0xd6>
		} else if (*c == '\0') {
   1122e:	2a00      	cmp	r2, #0
   11230:	d1f9      	bne.n	11226 <isr+0x7a>
   11232:	e7ca      	b.n	111ca <isr+0x1e>
			if (term_mode == MODE_CR) {
   11234:	4822      	ldr	r0, [pc, #136]	; (112c0 <isr+0x114>)
   11236:	7800      	ldrb	r0, [r0, #0]
   11238:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   1123a:	d0ed      	beq.n	11218 <isr+0x6c>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   1123c:	f8d5 c000 	ldr.w	ip, [r5]
   11240:	f10c 0001 	add.w	r0, ip, #1
   11244:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   11248:	d2bf      	bcs.n	111ca <isr+0x1e>
	at_buf[at_cmd_len] = character;
   1124a:	f8df e078 	ldr.w	lr, [pc, #120]	; 112c4 <isr+0x118>
	if (character == '"') {
   1124e:	2b22      	cmp	r3, #34	; 0x22
	at_buf[at_cmd_len] = character;
   11250:	f80e 300c 	strb.w	r3, [lr, ip]
	at_cmd_len++;
   11254:	6028      	str	r0, [r5, #0]
	if (character == '"') {
   11256:	d1b8      	bne.n	111ca <isr+0x1e>
	if (!inside_quotes) {
   11258:	f082 0201 	eor.w	r2, r2, #1
		inside_quotes = !inside_quotes;
   1125c:	700a      	strb	r2, [r1, #0]
   1125e:	e7b4      	b.n	111ca <isr+0x1e>
			if (term_mode == MODE_LF) {
   11260:	4817      	ldr	r0, [pc, #92]	; (112c0 <isr+0x114>)
   11262:	7800      	ldrb	r0, [r0, #0]
   11264:	2802      	cmp	r0, #2
   11266:	d0d7      	beq.n	11218 <isr+0x6c>
			if (term_mode == MODE_CR_LF &&
   11268:	2803      	cmp	r0, #3
   1126a:	d1e7      	bne.n	1123c <isr+0x90>
   1126c:	f8d5 c000 	ldr.w	ip, [r5]
   11270:	f1bc 0f00 	cmp.w	ip, #0
   11274:	d0e2      	beq.n	1123c <isr+0x90>
			    at_buf[at_cmd_len - 1] == '\r') {
   11276:	4813      	ldr	r0, [pc, #76]	; (112c4 <isr+0x118>)
   11278:	4460      	add	r0, ip
			    at_cmd_len > 0 &&
   1127a:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   1127e:	280d      	cmp	r0, #13
   11280:	e7db      	b.n	1123a <isr+0x8e>
	if (at_buf[0]) {
   11282:	780b      	ldrb	r3, [r1, #0]
   11284:	2b00      	cmp	r3, #0
   11286:	d0a0      	beq.n	111ca <isr+0x1e>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   11288:	4b0f      	ldr	r3, [pc, #60]	; (112c8 <isr+0x11c>)
   1128a:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   1128c:	6883      	ldr	r3, [r0, #8]
   1128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11290:	b103      	cbz	r3, 11294 <isr+0xe8>
		api->irq_rx_disable(dev);
   11292:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11294:	e8d6 3fef 	ldaex	r3, [r6]
   11298:	f043 0201 	orr.w	r2, r3, #1
   1129c:	e8c6 2fe1 	stlex	r1, r2, [r6]
   112a0:	2900      	cmp	r1, #0
   112a2:	d1f7      	bne.n	11294 <isr+0xe8>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   112a4:	07da      	lsls	r2, r3, #31
   112a6:	d490      	bmi.n	111ca <isr+0x1e>
		k_queue_append(&work_q->queue, work);
   112a8:	4908      	ldr	r1, [pc, #32]	; (112cc <isr+0x120>)
   112aa:	4809      	ldr	r0, [pc, #36]	; (112d0 <isr+0x124>)
   112ac:	f009 f8ca 	bl	1a444 <k_queue_append>
   112b0:	e78b      	b.n	111ca <isr+0x1e>
   112b2:	bf00      	nop
   112b4:	20015090 	.word	0x20015090
   112b8:	20015084 	.word	0x20015084
   112bc:	20017794 	.word	0x20017794
   112c0:	20017795 	.word	0x20017795
   112c4:	20016794 	.word	0x20016794
   112c8:	20015094 	.word	0x20015094
   112cc:	20015088 	.word	0x20015088
   112d0:	20014850 	.word	0x20014850

000112d4 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   112d4:	2201      	movs	r2, #1
   112d6:	4b2f      	ldr	r3, [pc, #188]	; (11394 <at_host_init+0xc0>)
{
   112d8:	e92d 48f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, fp, lr}
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   112dc:	2000      	movs	r0, #0
   112de:	492e      	ldr	r1, [pc, #184]	; (11398 <at_host_init+0xc4>)
		term_mode = mode;
   112e0:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   112e2:	f7ff fed9 	bl	11098 <at_notif_register_handler>
	if (err != 0) {
   112e6:	4606      	mov	r6, r0
   112e8:	bb30      	cbnz	r0, 11338 <at_host_init+0x64>
   112ea:	482c      	ldr	r0, [pc, #176]	; (1139c <at_host_init+0xc8>)
   112ec:	f004 fc4c 	bl	15b88 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   112f0:	4c2b      	ldr	r4, [pc, #172]	; (113a0 <at_host_init+0xcc>)
   112f2:	6020      	str	r0, [r4, #0]
	if (uart_dev == NULL) {
   112f4:	b1f0      	cbz	r0, 11334 <at_host_init+0x60>
	return z_impl_k_uptime_ticks();
   112f6:	f009 fa46 	bl	1a786 <z_impl_k_uptime_ticks>
   112fa:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   112fe:	fba0 2305 	umull	r2, r3, r0, r5
   11302:	fb05 3301 	mla	r3, r5, r1, r3
   11306:	0bd7      	lsrs	r7, r2, #15
   11308:	ea47 4743 	orr.w	r7, r7, r3, lsl #17
		err = uart_err_check(uart_dev);
   1130c:	6820      	ldr	r0, [r4, #0]
	if (api->err_check != NULL) {
   1130e:	6883      	ldr	r3, [r0, #8]
   11310:	689b      	ldr	r3, [r3, #8]
   11312:	b32b      	cbz	r3, 11360 <at_host_init+0x8c>
		return api->err_check(dev);
   11314:	4798      	blx	r3
		if (err) {
   11316:	b318      	cbz	r0, 11360 <at_host_init+0x8c>
   11318:	f009 fa35 	bl	1a786 <z_impl_k_uptime_ticks>
   1131c:	fba0 bc05 	umull	fp, ip, r0, r5
   11320:	fb05 cc01 	mla	ip, r5, r1, ip
   11324:	ea4f 32db 	mov.w	r2, fp, lsr #15
   11328:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
			if (k_uptime_get_32() - start_time >
   1132c:	1bd2      	subs	r2, r2, r7
   1132e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   11332:	d905      	bls.n	11340 <at_host_init+0x6c>

	/* Initialize the UART module */
	err = at_uart_init(uart_dev_name);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
		return -EFAULT;
   11334:	f06f 060d 	mvn.w	r6, #13
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   11338:	4630      	mov	r0, r6
   1133a:	b002      	add	sp, #8
   1133c:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   11340:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read) {
   11342:	6883      	ldr	r3, [r0, #8]
   11344:	699b      	ldr	r3, [r3, #24]
   11346:	b12b      	cbz	r3, 11354 <at_host_init+0x80>
		return api->fifo_read(dev, rx_data, size);
   11348:	2201      	movs	r2, #1
   1134a:	f10d 0107 	add.w	r1, sp, #7
   1134e:	4798      	blx	r3
   11350:	2800      	cmp	r0, #0
   11352:	d1f5      	bne.n	11340 <at_host_init+0x6c>
	return z_impl_k_sleep(timeout);
   11354:	2100      	movs	r1, #0
   11356:	f44f 70a4 	mov.w	r0, #328	; 0x148
   1135a:	f005 fa45 	bl	167e8 <z_impl_k_sleep>
	} while (err);
   1135e:	e7d5      	b.n	1130c <at_host_init+0x38>
	uart_irq_callback_set(uart_dev, isr);
   11360:	6820      	ldr	r0, [r4, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   11362:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   11364:	b123      	cbz	r3, 11370 <at_host_init+0x9c>
   11366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11368:	b113      	cbz	r3, 11370 <at_host_init+0x9c>
		api->irq_callback_set(dev, cb, user_data);
   1136a:	2200      	movs	r2, #0
   1136c:	490d      	ldr	r1, [pc, #52]	; (113a4 <at_host_init+0xd0>)
   1136e:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   11370:	2200      	movs	r2, #0
   11372:	4b0d      	ldr	r3, [pc, #52]	; (113a8 <at_host_init+0xd4>)
   11374:	490d      	ldr	r1, [pc, #52]	; (113ac <at_host_init+0xd8>)
   11376:	601a      	str	r2, [r3, #0]
   11378:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   1137c:	480c      	ldr	r0, [pc, #48]	; (113b0 <at_host_init+0xdc>)
   1137e:	230a      	movs	r3, #10
   11380:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11384:	490b      	ldr	r1, [pc, #44]	; (113b4 <at_host_init+0xe0>)
   11386:	f005 fb8d 	bl	16aa4 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   1138a:	6820      	ldr	r0, [r4, #0]
   1138c:	f007 fa69 	bl	18862 <z_impl_uart_irq_rx_enable>
	return err;
   11390:	e7d2      	b.n	11338 <at_host_init+0x64>
   11392:	bf00      	nop
   11394:	20017795 	.word	0x20017795
   11398:	0001886d 	.word	0x0001886d
   1139c:	0001b313 	.word	0x0001b313
   113a0:	20015094 	.word	0x20015094
   113a4:	000111ad 	.word	0x000111ad
   113a8:	20015088 	.word	0x20015088
   113ac:	00011129 	.word	0x00011129
   113b0:	20014850 	.word	0x20014850
   113b4:	20017df0 	.word	0x20017df0

000113b8 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   113b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   113bc:	6805      	ldr	r5, [r0, #0]
{
   113be:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   113c0:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   113c2:	782b      	ldrb	r3, [r5, #0]
{
   113c4:	4680      	mov	r8, r0
   113c6:	460f      	mov	r7, r1
   113c8:	4616      	mov	r6, r2
   113ca:	2b00      	cmp	r3, #0
   113cc:	f000 80d7 	beq.w	1157e <at_parse_process_element+0x1c6>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   113d0:	4b6c      	ldr	r3, [pc, #432]	; (11584 <at_parse_process_element+0x1cc>)
   113d2:	781c      	ldrb	r4, [r3, #0]
   113d4:	2c06      	cmp	r4, #6
   113d6:	d110      	bne.n	113fa <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   113d8:	1c6b      	adds	r3, r5, #1
   113da:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   113dc:	9a00      	ldr	r2, [sp, #0]
   113de:	7810      	ldrb	r0, [r2, #0]
   113e0:	f007 fa5e 	bl	188a0 <is_valid_notification_char>
   113e4:	b930      	cbnz	r0, 113f4 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   113e6:	1b53      	subs	r3, r2, r5

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   113e8:	462a      	mov	r2, r5
   113ea:	4639      	mov	r1, r7
   113ec:	4630      	mov	r0, r6
   113ee:	f007 fb26 	bl	18a3e <at_params_string_put>
   113f2:	e028      	b.n	11446 <at_parse_process_element+0x8e>
			tmpstr++;
   113f4:	3201      	adds	r2, #1
   113f6:	9200      	str	r2, [sp, #0]
   113f8:	e7f0      	b.n	113dc <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   113fa:	2c07      	cmp	r4, #7
   113fc:	d11e      	bne.n	1143c <at_parse_process_element+0x84>
		skip_command_prefix(&tmpstr);
   113fe:	4668      	mov	r0, sp
   11400:	f007 fa40 	bl	18884 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   11404:	9a00      	ldr	r2, [sp, #0]
   11406:	7810      	ldrb	r0, [r2, #0]
   11408:	f007 fa4a 	bl	188a0 <is_valid_notification_char>
   1140c:	b978      	cbnz	r0, 1142e <at_parse_process_element+0x76>
		at_params_string_put(list, index, start_ptr,
   1140e:	1b53      	subs	r3, r2, r5
   11410:	4639      	mov	r1, r7
   11412:	462a      	mov	r2, r5
   11414:	4630      	mov	r0, r6
   11416:	f007 fb12 	bl	18a3e <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1141a:	9b00      	ldr	r3, [sp, #0]
   1141c:	781a      	ldrb	r2, [r3, #0]
   1141e:	2a3d      	cmp	r2, #61	; 0x3d
   11420:	d108      	bne.n	11434 <at_parse_process_element+0x7c>
   11422:	785a      	ldrb	r2, [r3, #1]
   11424:	2a3f      	cmp	r2, #63	; 0x3f
   11426:	d10e      	bne.n	11446 <at_parse_process_element+0x8e>
			tmpstr += 2;
   11428:	3302      	adds	r3, #2
		tmpstr++;
   1142a:	9300      	str	r3, [sp, #0]
   1142c:	e00b      	b.n	11446 <at_parse_process_element+0x8e>
			tmpstr++;
   1142e:	3201      	adds	r2, #1
   11430:	9200      	str	r2, [sp, #0]
   11432:	e7e7      	b.n	11404 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   11434:	2a3f      	cmp	r2, #63	; 0x3f
   11436:	d106      	bne.n	11446 <at_parse_process_element+0x8e>
		tmpstr++;
   11438:	3301      	adds	r3, #1
   1143a:	e7f6      	b.n	1142a <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   1143c:	2c08      	cmp	r4, #8
   1143e:	d109      	bne.n	11454 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   11440:	4610      	mov	r0, r2
   11442:	f007 fad7 	bl	189f4 <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   11446:	2000      	movs	r0, #0
	*str = tmpstr;
   11448:	9b00      	ldr	r3, [sp, #0]
   1144a:	f8c8 3000 	str.w	r3, [r8]
}
   1144e:	b023      	add	sp, #140	; 0x8c
   11450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (state == STRING) {
   11454:	2c02      	cmp	r4, #2
   11456:	d111      	bne.n	1147c <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   11458:	9a00      	ldr	r2, [sp, #0]
   1145a:	7811      	ldrb	r1, [r2, #0]
   1145c:	4608      	mov	r0, r1
   1145e:	f007 fa08 	bl	18872 <is_lfcr>
   11462:	b918      	cbnz	r0, 1146c <at_parse_process_element+0xb4>
   11464:	b111      	cbz	r1, 1146c <at_parse_process_element+0xb4>
			tmpstr++;
   11466:	3201      	adds	r2, #1
   11468:	9200      	str	r2, [sp, #0]
   1146a:	e7f5      	b.n	11458 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   1146c:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   1146e:	462a      	mov	r2, r5
   11470:	4639      	mov	r1, r7
   11472:	4630      	mov	r0, r6
   11474:	f007 fae3 	bl	18a3e <at_params_string_put>
		tmpstr++;
   11478:	9b00      	ldr	r3, [sp, #0]
   1147a:	e7dd      	b.n	11438 <at_parse_process_element+0x80>
	} else if (state == QUOTED_STRING) {
   1147c:	2c03      	cmp	r4, #3
   1147e:	d109      	bne.n	11494 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   11480:	9b00      	ldr	r3, [sp, #0]
   11482:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   11484:	2a22      	cmp	r2, #34	; 0x22
   11486:	d003      	beq.n	11490 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   11488:	b112      	cbz	r2, 11490 <at_parse_process_element+0xd8>
			tmpstr++;
   1148a:	3301      	adds	r3, #1
   1148c:	9300      	str	r3, [sp, #0]
   1148e:	e7f7      	b.n	11480 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   11490:	1b5b      	subs	r3, r3, r5
   11492:	e7ec      	b.n	1146e <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   11494:	2c01      	cmp	r4, #1
   11496:	d13c      	bne.n	11512 <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   11498:	4628      	mov	r0, r5
   1149a:	220a      	movs	r2, #10
   1149c:	a901      	add	r1, sp, #4
   1149e:	f006 fc28 	bl	17cf2 <strtoul>
		tmpstr = next;
   114a2:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   114a4:	4d38      	ldr	r5, [pc, #224]	; (11588 <at_parse_process_element+0x1d0>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   114a6:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   114a8:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   114aa:	9800      	ldr	r0, [sp, #0]
   114ac:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   114ae:	2b29      	cmp	r3, #41	; 0x29
   114b0:	d028      	beq.n	11504 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   114b2:	b33b      	cbz	r3, 11504 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   114b4:	3b2c      	subs	r3, #44	; 0x2c
   114b6:	b2db      	uxtb	r3, r3
   114b8:	3001      	adds	r0, #1
   114ba:	2b11      	cmp	r3, #17
				tmparray[i++] =
   114bc:	9000      	str	r0, [sp, #0]
   114be:	d803      	bhi.n	114c8 <at_parse_process_element+0x110>
   114c0:	fa25 f303 	lsr.w	r3, r5, r3
   114c4:	07db      	lsls	r3, r3, #31
   114c6:	d408      	bmi.n	114da <at_parse_process_element+0x122>
				tmpstr++;
   114c8:	46a1      	mov	r9, r4
   114ca:	e004      	b.n	114d6 <at_parse_process_element+0x11e>
					tmpstr = next;
   114cc:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   114ce:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   114d2:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   114d4:	d015      	beq.n	11502 <at_parse_process_element+0x14a>
				tmpstr++;
   114d6:	464c      	mov	r4, r9
   114d8:	e7e7      	b.n	114aa <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   114da:	220a      	movs	r2, #10
   114dc:	a901      	add	r1, sp, #4
   114de:	f006 fc08 	bl	17cf2 <strtoul>
				tmparray[i++] =
   114e2:	ab22      	add	r3, sp, #136	; 0x88
   114e4:	f104 0901 	add.w	r9, r4, #1
   114e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   114ec:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   114f0:	9800      	ldr	r0, [sp, #0]
   114f2:	f006 fcb8 	bl	17e66 <strlen>
   114f6:	4604      	mov	r4, r0
   114f8:	9801      	ldr	r0, [sp, #4]
   114fa:	f006 fcb4 	bl	17e66 <strlen>
   114fe:	4284      	cmp	r4, r0
   11500:	d1e4      	bne.n	114cc <at_parse_process_element+0x114>
   11502:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   11504:	4639      	mov	r1, r7
   11506:	4630      	mov	r0, r6
   11508:	00a3      	lsls	r3, r4, #2
   1150a:	aa02      	add	r2, sp, #8
   1150c:	f007 fabb 	bl	18a86 <at_params_array_put>
   11510:	e7b2      	b.n	11478 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   11512:	2c04      	cmp	r4, #4
   11514:	d117      	bne.n	11546 <at_parse_process_element+0x18e>
		int32_t value = (int32_t)strtol(tmpstr, &next, 10);
   11516:	220a      	movs	r2, #10
   11518:	4628      	mov	r0, r5
   1151a:	a902      	add	r1, sp, #8
   1151c:	f006 fb73 	bl	17c06 <strtol>
		tmpstr = next;
   11520:	9b02      	ldr	r3, [sp, #8]
		int32_t value = (int32_t)strtol(tmpstr, &next, 10);
   11522:	4602      	mov	r2, r0
		tmpstr = next;
   11524:	9300      	str	r3, [sp, #0]
		if ((value <= SHRT_MAX) && (value >= SHRT_MIN)) {
   11526:	f500 4300 	add.w	r3, r0, #32768	; 0x8000
   1152a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1152e:	d205      	bcs.n	1153c <at_parse_process_element+0x184>
			at_params_short_put(list, index, (int16_t)value);
   11530:	b202      	sxth	r2, r0
   11532:	4639      	mov	r1, r7
   11534:	4630      	mov	r0, r6
   11536:	f007 fa4a 	bl	189ce <at_params_short_put>
   1153a:	e784      	b.n	11446 <at_parse_process_element+0x8e>
			at_params_int_put(list, index, value);
   1153c:	4639      	mov	r1, r7
   1153e:	4630      	mov	r0, r6
   11540:	f007 fa6a 	bl	18a18 <at_params_int_put>
   11544:	e77f      	b.n	11446 <at_parse_process_element+0x8e>
	} else if (state == SMS_PDU) {
   11546:	2c05      	cmp	r4, #5
   11548:	d10f      	bne.n	1156a <at_parse_process_element+0x1b2>
		while (isxdigit((int)*tmpstr)) {
   1154a:	9b00      	ldr	r3, [sp, #0]
   1154c:	781a      	ldrb	r2, [r3, #0]

static inline int isxdigit(int a)
{
	unsigned int ua = (unsigned int)a;

	return (int)(((ua - (unsigned)'0') < 10U) ||
   1154e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   11552:	2909      	cmp	r1, #9
   11554:	d906      	bls.n	11564 <at_parse_process_element+0x1ac>
			((ua | 32U) - (unsigned)'a' < 6U));
   11556:	f042 0220 	orr.w	r2, r2, #32
   1155a:	3a61      	subs	r2, #97	; 0x61
	return (int)(((ua - (unsigned)'0') < 10U) ||
   1155c:	2a05      	cmp	r2, #5
   1155e:	d901      	bls.n	11564 <at_parse_process_element+0x1ac>
		at_params_string_put(list, index, start_ptr,
   11560:	1b5b      	subs	r3, r3, r5
   11562:	e741      	b.n	113e8 <at_parse_process_element+0x30>
			tmpstr++;
   11564:	3301      	adds	r3, #1
   11566:	9300      	str	r3, [sp, #0]
   11568:	e7ef      	b.n	1154a <at_parse_process_element+0x192>
	} else if (state == CLAC) {
   1156a:	2c09      	cmp	r4, #9
   1156c:	f47f af6b 	bne.w	11446 <at_parse_process_element+0x8e>
		while (!is_terminated(*tmpstr)) {
   11570:	9b00      	ldr	r3, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   11572:	781a      	ldrb	r2, [r3, #0]
   11574:	2a00      	cmp	r2, #0
   11576:	d0f3      	beq.n	11560 <at_parse_process_element+0x1a8>
			tmpstr++;
   11578:	3301      	adds	r3, #1
   1157a:	9300      	str	r3, [sp, #0]
   1157c:	e7f8      	b.n	11570 <at_parse_process_element+0x1b8>
		return -1;
   1157e:	f04f 30ff 	mov.w	r0, #4294967295
   11582:	e764      	b.n	1144e <at_parse_process_element+0x96>
   11584:	20017797 	.word	0x20017797
   11588:	00024001 	.word	0x00024001

0001158c <at_parse_detect_type>:
{
   1158c:	b570      	push	{r4, r5, r6, lr}
   1158e:	4605      	mov	r5, r0
	const char *tmpstr = *str;
   11590:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   11592:	4e5c      	ldr	r6, [pc, #368]	; (11704 <at_parse_detect_type+0x178>)
   11594:	2900      	cmp	r1, #0
   11596:	d137      	bne.n	11608 <at_parse_detect_type+0x7c>
   11598:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1159a:	2b2b      	cmp	r3, #43	; 0x2b
   1159c:	d001      	beq.n	115a2 <at_parse_detect_type+0x16>
   1159e:	2b25      	cmp	r3, #37	; 0x25
   115a0:	d132      	bne.n	11608 <at_parse_detect_type+0x7c>
	state = new_state;
   115a2:	2206      	movs	r2, #6
   115a4:	4b58      	ldr	r3, [pc, #352]	; (11708 <at_parse_detect_type+0x17c>)
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   115a6:	4620      	mov	r0, r4
	state = new_state;
   115a8:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   115aa:	4958      	ldr	r1, [pc, #352]	; (1170c <at_parse_detect_type+0x180>)
   115ac:	2205      	movs	r2, #5
   115ae:	f006 fc76 	bl	17e9e <strncmp>
   115b2:	b920      	cbnz	r0, 115be <at_parse_detect_type+0x32>
			retval = true;
   115b4:	2301      	movs	r3, #1
	state = new_state;
   115b6:	7033      	strb	r3, [r6, #0]
	return 0;
   115b8:	2000      	movs	r0, #0
	*str = tmpstr;
   115ba:	602c      	str	r4, [r5, #0]
}
   115bc:	bd70      	pop	{r4, r5, r6, pc}
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   115be:	2205      	movs	r2, #5
   115c0:	4620      	mov	r0, r4
   115c2:	4953      	ldr	r1, [pc, #332]	; (11710 <at_parse_detect_type+0x184>)
   115c4:	f006 fc6b 	bl	17e9e <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   115c8:	2800      	cmp	r0, #0
   115ca:	d0f3      	beq.n	115b4 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   115cc:	220b      	movs	r2, #11
   115ce:	4620      	mov	r0, r4
   115d0:	4950      	ldr	r1, [pc, #320]	; (11714 <at_parse_detect_type+0x188>)
   115d2:	f006 fc64 	bl	17e9e <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   115d6:	2800      	cmp	r0, #0
   115d8:	d0ec      	beq.n	115b4 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   115da:	220a      	movs	r2, #10
   115dc:	4620      	mov	r0, r4
   115de:	494e      	ldr	r1, [pc, #312]	; (11718 <at_parse_detect_type+0x18c>)
   115e0:	f006 fc5d 	bl	17e9e <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   115e4:	2800      	cmp	r0, #0
   115e6:	d0e5      	beq.n	115b4 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   115e8:	220b      	movs	r2, #11
   115ea:	4620      	mov	r0, r4
   115ec:	494b      	ldr	r1, [pc, #300]	; (1171c <at_parse_detect_type+0x190>)
   115ee:	f006 fc56 	bl	17e9e <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   115f2:	2800      	cmp	r0, #0
   115f4:	d0de      	beq.n	115b4 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   115f6:	2207      	movs	r2, #7
   115f8:	4620      	mov	r0, r4
   115fa:	4949      	ldr	r1, [pc, #292]	; (11720 <at_parse_detect_type+0x194>)
   115fc:	f006 fc4f 	bl	17e9e <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   11600:	fab0 f380 	clz	r3, r0
   11604:	095b      	lsrs	r3, r3, #5
	return retval;
   11606:	e7d6      	b.n	115b6 <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   11608:	7833      	ldrb	r3, [r6, #0]
   1160a:	b11b      	cbz	r3, 11614 <at_parse_detect_type+0x88>
	state = new_state;
   1160c:	2202      	movs	r2, #2
   1160e:	4b3e      	ldr	r3, [pc, #248]	; (11708 <at_parse_detect_type+0x17c>)
   11610:	701a      	strb	r2, [r3, #0]
}
   11612:	e7d1      	b.n	115b8 <at_parse_detect_type+0x2c>
	} else if ((index == 0) && is_clac(tmpstr)) {
   11614:	2900      	cmp	r1, #0
   11616:	d15c      	bne.n	116d2 <at_parse_detect_type+0x146>
 * @retval true  If the string is a CLAC response
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	if (strlen(str) < 4) {
   11618:	4620      	mov	r0, r4
   1161a:	f006 fc24 	bl	17e66 <strlen>
   1161e:	2803      	cmp	r0, #3
   11620:	4e39      	ldr	r6, [pc, #228]	; (11708 <at_parse_detect_type+0x17c>)
   11622:	d968      	bls.n	116f6 <at_parse_detect_type+0x16a>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   11624:	7823      	ldrb	r3, [r4, #0]
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
}

static inline int toupper(int chr)
{
	return (int)((chr >= (int)'a' && chr <=
   11626:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1162a:	2a19      	cmp	r2, #25
   1162c:	bf98      	it	ls
   1162e:	3b20      	subls	r3, #32
   11630:	2b41      	cmp	r3, #65	; 0x41
   11632:	d160      	bne.n	116f6 <at_parse_detect_type+0x16a>
   11634:	7863      	ldrb	r3, [r4, #1]
   11636:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1163a:	2a19      	cmp	r2, #25
   1163c:	bf98      	it	ls
   1163e:	3b20      	subls	r3, #32
   11640:	2b54      	cmp	r3, #84	; 0x54
   11642:	d158      	bne.n	116f6 <at_parse_detect_type+0x16a>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   11644:	78a3      	ldrb	r3, [r4, #2]
   11646:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1164a:	2a19      	cmp	r2, #25
   1164c:	d953      	bls.n	116f6 <at_parse_detect_type+0x16a>
   1164e:	2b2b      	cmp	r3, #43	; 0x2b
   11650:	d009      	beq.n	11666 <at_parse_detect_type+0xda>
   11652:	2b25      	cmp	r3, #37	; 0x25
   11654:	d14f      	bne.n	116f6 <at_parse_detect_type+0x16a>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   11656:	78e3      	ldrb	r3, [r4, #3]
   11658:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1165c:	2a19      	cmp	r2, #25
   1165e:	bf98      	it	ls
   11660:	3b20      	subls	r3, #32
   11662:	2b58      	cmp	r3, #88	; 0x58
   11664:	d047      	beq.n	116f6 <at_parse_detect_type+0x16a>
	state = new_state;
   11666:	2309      	movs	r3, #9
   11668:	e7a5      	b.n	115b6 <at_parse_detect_type+0x2a>
   1166a:	2307      	movs	r3, #7
   1166c:	e7a3      	b.n	115b6 <at_parse_detect_type+0x2a>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   1166e:	f647 71e5 	movw	r1, #32741	; 0x7fe5
   11672:	fa21 f303 	lsr.w	r3, r1, r3
   11676:	07d9      	lsls	r1, r3, #31
   11678:	d509      	bpl.n	1168e <at_parse_detect_type+0x102>
   1167a:	2204      	movs	r2, #4
   1167c:	4b22      	ldr	r3, [pc, #136]	; (11708 <at_parse_detect_type+0x17c>)
   1167e:	e7c7      	b.n	11610 <at_parse_detect_type+0x84>
	if (chr == '(') {
   11680:	2a28      	cmp	r2, #40	; 0x28
   11682:	d104      	bne.n	1168e <at_parse_detect_type+0x102>
   11684:	2201      	movs	r2, #1
   11686:	4b20      	ldr	r3, [pc, #128]	; (11708 <at_parse_detect_type+0x17c>)
		tmpstr++;
   11688:	4414      	add	r4, r2
	state = new_state;
   1168a:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1168c:	e794      	b.n	115b8 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1168e:	4610      	mov	r0, r2
   11690:	f007 f8ef 	bl	18872 <is_lfcr>
   11694:	b170      	cbz	r0, 116b4 <at_parse_detect_type+0x128>
   11696:	491c      	ldr	r1, [pc, #112]	; (11708 <at_parse_detect_type+0x17c>)
   11698:	7808      	ldrb	r0, [r1, #0]
   1169a:	2804      	cmp	r0, #4
   1169c:	d108      	bne.n	116b0 <at_parse_detect_type+0x124>
		while (is_lfcr(*tmpstr)) {
   1169e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   116a2:	f007 f8e6 	bl	18872 <is_lfcr>
   116a6:	2800      	cmp	r0, #0
   116a8:	d1f9      	bne.n	1169e <at_parse_detect_type+0x112>
	state = new_state;
   116aa:	2305      	movs	r3, #5
   116ac:	700b      	strb	r3, [r1, #0]
}
   116ae:	e783      	b.n	115b8 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   116b0:	2808      	cmp	r0, #8
   116b2:	d081      	beq.n	115b8 <at_parse_detect_type+0x2c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   116b4:	3a2c      	subs	r2, #44	; 0x2c
   116b6:	b2d2      	uxtb	r2, r2
   116b8:	2a11      	cmp	r2, #17
   116ba:	d807      	bhi.n	116cc <at_parse_detect_type+0x140>
   116bc:	4b19      	ldr	r3, [pc, #100]	; (11724 <at_parse_detect_type+0x198>)
   116be:	fa23 f202 	lsr.w	r2, r3, r2
   116c2:	07d3      	lsls	r3, r2, #31
   116c4:	d502      	bpl.n	116cc <at_parse_detect_type+0x140>
	state = new_state;
   116c6:	2208      	movs	r2, #8
   116c8:	4b0f      	ldr	r3, [pc, #60]	; (11708 <at_parse_detect_type+0x17c>)
   116ca:	e7a1      	b.n	11610 <at_parse_detect_type+0x84>
		return -1;
   116cc:	f04f 30ff 	mov.w	r0, #4294967295
   116d0:	e774      	b.n	115bc <at_parse_detect_type+0x30>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   116d2:	7822      	ldrb	r2, [r4, #0]
   116d4:	dd03      	ble.n	116de <at_parse_detect_type+0x152>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   116d6:	2a2b      	cmp	r2, #43	; 0x2b
   116d8:	d0f8      	beq.n	116cc <at_parse_detect_type+0x140>
   116da:	2a25      	cmp	r2, #37	; 0x25
   116dc:	d0f6      	beq.n	116cc <at_parse_detect_type+0x140>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   116de:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   116e2:	b2db      	uxtb	r3, r3
   116e4:	2b0e      	cmp	r3, #14
   116e6:	d9c2      	bls.n	1166e <at_parse_detect_type+0xe2>
	if (chr == '"') {
   116e8:	2a22      	cmp	r2, #34	; 0x22
   116ea:	d1c9      	bne.n	11680 <at_parse_detect_type+0xf4>
	state = new_state;
   116ec:	2203      	movs	r2, #3
   116ee:	4b06      	ldr	r3, [pc, #24]	; (11708 <at_parse_detect_type+0x17c>)
		tmpstr++;
   116f0:	3401      	adds	r4, #1
	state = new_state;
   116f2:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   116f4:	e760      	b.n	115b8 <at_parse_detect_type+0x2c>
	} else if ((index == 0) && is_command(tmpstr)) {
   116f6:	4620      	mov	r0, r4
   116f8:	f007 f8de 	bl	188b8 <is_command>
   116fc:	2800      	cmp	r0, #0
   116fe:	d1b4      	bne.n	1166a <at_parse_detect_type+0xde>
	state = new_state;
   11700:	2302      	movs	r3, #2
   11702:	e758      	b.n	115b6 <at_parse_detect_type+0x2a>
   11704:	20017796 	.word	0x20017796
   11708:	20017797 	.word	0x20017797
   1170c:	0001b3b7 	.word	0x0001b3b7
   11710:	0001b3bd 	.word	0x0001b3bd
   11714:	0001b3c3 	.word	0x0001b3c3
   11718:	0001b3cf 	.word	0x0001b3cf
   1171c:	0001b3da 	.word	0x0001b3da
   11720:	0001b3e6 	.word	0x0001b3e6
   11724:	00024001 	.word	0x00024001

00011728 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   11728:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1172c:	4688      	mov	r8, r1
   1172e:	4616      	mov	r6, r2
   11730:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   11732:	4604      	mov	r4, r0
   11734:	2800      	cmp	r0, #0
   11736:	d07e      	beq.n	11836 <at_parser_max_params_from_str+0x10e>
   11738:	2a00      	cmp	r2, #0
   1173a:	d07c      	beq.n	11836 <at_parser_max_params_from_str+0x10e>
   1173c:	6853      	ldr	r3, [r2, #4]
   1173e:	2b00      	cmp	r3, #0
   11740:	d079      	beq.n	11836 <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   11742:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   11744:	4610      	mov	r0, r2
   11746:	f007 f91b 	bl	18980 <at_params_list_clear>
	const char *str = *at_params_str;
   1174a:	9401      	str	r4, [sp, #4]
	int index = 0;
   1174c:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   1174e:	6833      	ldr	r3, [r6, #0]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   11750:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 11844 <at_parser_max_params_from_str+0x11c>
   11754:	429f      	cmp	r7, r3
   11756:	bf28      	it	cs
   11758:	461f      	movcs	r7, r3
	state = IDLE;
   1175a:	4b38      	ldr	r3, [pc, #224]	; (1183c <at_parser_max_params_from_str+0x114>)
   1175c:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   1175e:	4b38      	ldr	r3, [pc, #224]	; (11840 <at_parser_max_params_from_str+0x118>)
   11760:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   11762:	9a01      	ldr	r2, [sp, #4]
   11764:	7813      	ldrb	r3, [r2, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   11766:	2b00      	cmp	r3, #0
   11768:	d04b      	beq.n	11802 <at_parser_max_params_from_str+0xda>
   1176a:	42a7      	cmp	r7, r4
   1176c:	d949      	bls.n	11802 <at_parser_max_params_from_str+0xda>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1176e:	2b20      	cmp	r3, #32
   11770:	d002      	beq.n	11778 <at_parser_max_params_from_str+0x50>
   11772:	3b09      	subs	r3, #9
   11774:	2b04      	cmp	r3, #4
   11776:	d801      	bhi.n	1177c <at_parser_max_params_from_str+0x54>
			str++;
   11778:	3201      	adds	r2, #1
   1177a:	9201      	str	r2, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   1177c:	4621      	mov	r1, r4
   1177e:	a801      	add	r0, sp, #4
   11780:	f7ff ff04 	bl	1158c <at_parse_detect_type>
   11784:	1c42      	adds	r2, r0, #1
   11786:	d03c      	beq.n	11802 <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   11788:	4632      	mov	r2, r6
   1178a:	4621      	mov	r1, r4
   1178c:	a801      	add	r0, sp, #4
   1178e:	f7ff fe13 	bl	113b8 <at_parse_process_element>
   11792:	1c43      	adds	r3, r0, #1
   11794:	d035      	beq.n	11802 <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   11796:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   11798:	781a      	ldrb	r2, [r3, #0]
   1179a:	3a2c      	subs	r2, #44	; 0x2c
   1179c:	b2d2      	uxtb	r2, r2
   1179e:	2a11      	cmp	r2, #17
   117a0:	d81a      	bhi.n	117d8 <at_parser_max_params_from_str+0xb0>
   117a2:	fa29 f202 	lsr.w	r2, r9, r2
   117a6:	07d1      	lsls	r1, r2, #31
   117a8:	d516      	bpl.n	117d8 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   117aa:	7858      	ldrb	r0, [r3, #1]
   117ac:	f007 f861 	bl	18872 <is_lfcr>
   117b0:	b178      	cbz	r0, 117d2 <at_parser_max_params_from_str+0xaa>
				index++;
   117b2:	3401      	adds	r4, #1
				if (index == max_params) {
   117b4:	42bc      	cmp	r4, r7
   117b6:	d039      	beq.n	1182c <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   117b8:	4621      	mov	r1, r4
   117ba:	a801      	add	r0, sp, #4
   117bc:	f7ff fee6 	bl	1158c <at_parse_detect_type>
   117c0:	1c42      	adds	r2, r0, #1
   117c2:	d01e      	beq.n	11802 <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   117c4:	4632      	mov	r2, r6
   117c6:	4621      	mov	r1, r4
   117c8:	a801      	add	r0, sp, #4
   117ca:	f7ff fdf5 	bl	113b8 <at_parse_process_element>
   117ce:	1c43      	adds	r3, r0, #1
   117d0:	d017      	beq.n	11802 <at_parser_max_params_from_str+0xda>
			str++;
   117d2:	9b01      	ldr	r3, [sp, #4]
   117d4:	3301      	adds	r3, #1
   117d6:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   117d8:	9a01      	ldr	r2, [sp, #4]
   117da:	7810      	ldrb	r0, [r2, #0]
   117dc:	f007 f849 	bl	18872 <is_lfcr>
   117e0:	b1f8      	cbz	r0, 11822 <at_parser_max_params_from_str+0xfa>
   117e2:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   117e4:	7811      	ldrb	r1, [r2, #0]
   117e6:	4692      	mov	sl, r2
   117e8:	4608      	mov	r0, r1
   117ea:	3201      	adds	r2, #1
   117ec:	f007 f841 	bl	18872 <is_lfcr>
   117f0:	2800      	cmp	r0, #0
   117f2:	d1f7      	bne.n	117e4 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   117f4:	b119      	cbz	r1, 117fe <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   117f6:	292b      	cmp	r1, #43	; 0x2b
   117f8:	d001      	beq.n	117fe <at_parser_max_params_from_str+0xd6>
   117fa:	2925      	cmp	r1, #37	; 0x25
   117fc:	d111      	bne.n	11822 <at_parser_max_params_from_str+0xfa>
				str += i;
   117fe:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   11802:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   11804:	b9a5      	cbnz	r5, 11830 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   11806:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   11808:	2a00      	cmp	r2, #0
   1180a:	bf0c      	ite	eq
   1180c:	2000      	moveq	r0, #0
   1180e:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   11812:	f1b8 0f00 	cmp.w	r8, #0
   11816:	d001      	beq.n	1181c <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   11818:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   1181c:	b002      	add	sp, #8
   1181e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;
   11822:	3401      	adds	r4, #1
			oversized = true;
   11824:	42bc      	cmp	r4, r7
   11826:	bf08      	it	eq
   11828:	2501      	moveq	r5, #1
   1182a:	e79a      	b.n	11762 <at_parser_max_params_from_str+0x3a>
					oversized = true;
   1182c:	4605      	mov	r5, r0
   1182e:	e7e8      	b.n	11802 <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   11830:	f06f 0006 	mvn.w	r0, #6
   11834:	e7ed      	b.n	11812 <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   11836:	f06f 0015 	mvn.w	r0, #21
   1183a:	e7ef      	b.n	1181c <at_parser_max_params_from_str+0xf4>
   1183c:	20017797 	.word	0x20017797
   11840:	20017796 	.word	0x20017796
   11844:	00024001 	.word	0x00024001

00011848 <parse_psm_cfg>:
	char timer_str[9] = {0};
   11848:	2300      	movs	r3, #0
{
   1184a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1184e:	b086      	sub	sp, #24
	char timer_str[9] = {0};
   11850:	e9cd 3303 	strd	r3, r3, [sp, #12]
   11854:	f88d 3014 	strb.w	r3, [sp, #20]
	char unit_str[4] = {0};
   11858:	9301      	str	r3, [sp, #4]
	size_t timer_str_len = sizeof(timer_str) - 1;
   1185a:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   1185c:	2900      	cmp	r1, #0
	size_t timer_str_len = sizeof(timer_str) - 1;
   1185e:	9302      	str	r3, [sp, #8]
{
   11860:	4616      	mov	r6, r2
	err = at_params_string_get(at_params,
   11862:	bf14      	ite	ne
   11864:	2108      	movne	r1, #8
   11866:	2109      	moveq	r1, #9
   11868:	446b      	add	r3, sp
   1186a:	aa03      	add	r2, sp, #12
{
   1186c:	4607      	mov	r7, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   1186e:	bf14      	ite	ne
   11870:	f04f 0807 	movne.w	r8, #7
   11874:	f04f 0808 	moveq.w	r8, #8
	err = at_params_string_get(at_params,
   11878:	f007 f93c 	bl	18af4 <at_params_string_get>
	if (err) {
   1187c:	4604      	mov	r4, r0
   1187e:	b968      	cbnz	r0, 1189c <parse_psm_cfg+0x54>
	memcpy(unit_str, timer_str, unit_str_len);
   11880:	2203      	movs	r2, #3
   11882:	a903      	add	r1, sp, #12
   11884:	a801      	add	r0, sp, #4
   11886:	f006 fb29 	bl	17edc <memcpy>
	lut_idx = strtoul(unit_str, NULL, 2);
   1188a:	2202      	movs	r2, #2
   1188c:	4621      	mov	r1, r4
   1188e:	a801      	add	r0, sp, #4
   11890:	f006 fa2f 	bl	17cf2 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   11894:	2807      	cmp	r0, #7
   11896:	d905      	bls.n	118a4 <parse_psm_cfg+0x5c>
		return err;
   11898:	f06f 0415 	mvn.w	r4, #21
}
   1189c:	4620      	mov	r0, r4
   1189e:	b006      	add	sp, #24
   118a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	timer_unit = t3412_lookup[lut_idx];
   118a4:	4b19      	ldr	r3, [pc, #100]	; (1190c <parse_psm_cfg+0xc4>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   118a6:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   118a8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   118ac:	4621      	mov	r1, r4
   118ae:	f10d 000f 	add.w	r0, sp, #15
   118b2:	f006 fa1e 	bl	17cf2 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   118b6:	b31d      	cbz	r5, 11900 <parse_psm_cfg+0xb8>
   118b8:	4345      	muls	r5, r0
	err = at_params_string_get(at_params,
   118ba:	4641      	mov	r1, r8
   118bc:	4638      	mov	r0, r7
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   118be:	6035      	str	r5, [r6, #0]
	err = at_params_string_get(at_params,
   118c0:	ab02      	add	r3, sp, #8
   118c2:	aa03      	add	r2, sp, #12
   118c4:	f007 f916 	bl	18af4 <at_params_string_get>
	if (err) {
   118c8:	4604      	mov	r4, r0
   118ca:	2800      	cmp	r0, #0
   118cc:	d1e6      	bne.n	1189c <parse_psm_cfg+0x54>
	memcpy(unit_str, timer_str, unit_str_len);
   118ce:	2203      	movs	r2, #3
   118d0:	a903      	add	r1, sp, #12
   118d2:	a801      	add	r0, sp, #4
   118d4:	f006 fb02 	bl	17edc <memcpy>
	lut_idx = strtoul(unit_str, NULL, 2);
   118d8:	2202      	movs	r2, #2
   118da:	4621      	mov	r1, r4
   118dc:	a801      	add	r0, sp, #4
   118de:	f006 fa08 	bl	17cf2 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   118e2:	2807      	cmp	r0, #7
   118e4:	d8d8      	bhi.n	11898 <parse_psm_cfg+0x50>
	timer_unit = t3324_lookup[lut_idx];
   118e6:	4b0a      	ldr	r3, [pc, #40]	; (11910 <parse_psm_cfg+0xc8>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   118e8:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   118ea:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   118ee:	4621      	mov	r1, r4
   118f0:	f10d 000f 	add.w	r0, sp, #15
   118f4:	f006 f9fd 	bl	17cf2 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   118f8:	b12d      	cbz	r5, 11906 <parse_psm_cfg+0xbe>
   118fa:	4368      	muls	r0, r5
   118fc:	6070      	str	r0, [r6, #4]
	return 0;
   118fe:	e7cd      	b.n	1189c <parse_psm_cfg+0x54>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   11900:	f04f 35ff 	mov.w	r5, #4294967295
   11904:	e7d9      	b.n	118ba <parse_psm_cfg+0x72>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   11906:	f04f 30ff 	mov.w	r0, #4294967295
   1190a:	e7f7      	b.n	118fc <parse_psm_cfg+0xb4>
   1190c:	0001af78 	.word	0x0001af78
   11910:	0001af58 	.word	0x0001af58

00011914 <lte_lc_offline>:
{
   11914:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   11916:	2300      	movs	r3, #0
   11918:	4804      	ldr	r0, [pc, #16]	; (1192c <lte_lc_offline+0x18>)
   1191a:	461a      	mov	r2, r3
   1191c:	4619      	mov	r1, r3
   1191e:	f7ff fb01 	bl	10f24 <at_cmd_write>
   11922:	2800      	cmp	r0, #0
}
   11924:	bf18      	it	ne
   11926:	f06f 0004 	mvnne.w	r0, #4
   1192a:	bd08      	pop	{r3, pc}
   1192c:	0001b484 	.word	0x0001b484

00011930 <lte_lc_normal>:
{
   11930:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   11932:	2300      	movs	r3, #0
   11934:	4804      	ldr	r0, [pc, #16]	; (11948 <lte_lc_normal+0x18>)
   11936:	461a      	mov	r2, r3
   11938:	4619      	mov	r1, r3
   1193a:	f7ff faf3 	bl	10f24 <at_cmd_write>
   1193e:	2800      	cmp	r0, #0
}
   11940:	bf18      	it	ne
   11942:	f06f 0004 	mvnne.w	r0, #4
   11946:	bd08      	pop	{r3, pc}
   11948:	0001b47a 	.word	0x0001b47a

0001194c <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   1194c:	b510      	push	{r4, lr}
	int err, len;
	char cmd[50];

	switch (mode) {
   1194e:	4604      	mov	r4, r0
{
   11950:	b08e      	sub	sp, #56	; 0x38
	switch (mode) {
   11952:	b1b0      	cbz	r0, 11982 <lte_lc_system_mode_set+0x36>
   11954:	1e43      	subs	r3, r0, #1
   11956:	2b04      	cmp	r3, #4
   11958:	d815      	bhi.n	11986 <lte_lc_system_mode_set+0x3a>
	default:
		LOG_ERR("Invalid system mode requested");
		return -EINVAL;
	}

	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   1195a:	4b0e      	ldr	r3, [pc, #56]	; (11994 <lte_lc_system_mode_set+0x48>)
   1195c:	2132      	movs	r1, #50	; 0x32
   1195e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11962:	4a0d      	ldr	r2, [pc, #52]	; (11998 <lte_lc_system_mode_set+0x4c>)
   11964:	a801      	add	r0, sp, #4
   11966:	f005 fb82 	bl	1706e <snprintk>
		       system_mode_params[mode]);
	if (len < 0) {
   1196a:	2800      	cmp	r0, #0
   1196c:	db0e      	blt.n	1198c <lte_lc_system_mode_set+0x40>
		return -EFAULT;
	}

	LOG_DBG("Sending AT command to set system mode: %s", log_strdup(cmd));

	err = at_cmd_write(cmd, NULL, 0, NULL);
   1196e:	2300      	movs	r3, #0
   11970:	a801      	add	r0, sp, #4
   11972:	461a      	mov	r2, r3
   11974:	4619      	mov	r1, r3
   11976:	f7ff fad5 	bl	10f24 <at_cmd_write>
	if (err) {
		LOG_ERR("Could not send AT command, error: %d", err);
	}

	sys_mode_current = mode;
   1197a:	4b08      	ldr	r3, [pc, #32]	; (1199c <lte_lc_system_mode_set+0x50>)
   1197c:	701c      	strb	r4, [r3, #0]
	sys_mode_target = mode;
   1197e:	4b08      	ldr	r3, [pc, #32]	; (119a0 <lte_lc_system_mode_set+0x54>)
   11980:	701c      	strb	r4, [r3, #0]

	return err;
}
   11982:	b00e      	add	sp, #56	; 0x38
   11984:	bd10      	pop	{r4, pc}
	switch (mode) {
   11986:	f06f 0015 	mvn.w	r0, #21
   1198a:	e7fa      	b.n	11982 <lte_lc_system_mode_set+0x36>
		return -EFAULT;
   1198c:	f06f 000d 	mvn.w	r0, #13
   11990:	e7f7      	b.n	11982 <lte_lc_system_mode_set+0x36>
   11992:	bf00      	nop
   11994:	0001af40 	.word	0x0001af40
   11998:	0001b3f5 	.word	0x0001b3f5
   1199c:	2001779a 	.word	0x2001779a
   119a0:	2001459c 	.word	0x2001459c

000119a4 <w_lte_lc_connect>:
	if (!is_initialized) {
   119a4:	4b16      	ldr	r3, [pc, #88]	; (11a00 <w_lte_lc_connect+0x5c>)
{
   119a6:	b570      	push	{r4, r5, r6, lr}
	if (!is_initialized) {
   119a8:	781b      	ldrb	r3, [r3, #0]
{
   119aa:	4605      	mov	r5, r0
	if (!is_initialized) {
   119ac:	b30b      	cbz	r3, 119f2 <w_lte_lc_connect+0x4e>
	return z_impl_k_sem_init(sem, initial_count, limit);
   119ae:	2201      	movs	r2, #1
   119b0:	2100      	movs	r1, #0
   119b2:	4814      	ldr	r0, [pc, #80]	; (11a04 <w_lte_lc_connect+0x60>)
   119b4:	f008 fe2c 	bl	1a610 <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(sys_mode_target);
   119b8:	4c13      	ldr	r4, [pc, #76]	; (11a08 <w_lte_lc_connect+0x64>)
	return z_impl_k_sem_take(sem, timeout);
   119ba:	4e12      	ldr	r6, [pc, #72]	; (11a04 <w_lte_lc_connect+0x60>)
   119bc:	7820      	ldrb	r0, [r4, #0]
   119be:	f7ff ffc5 	bl	1194c <lte_lc_system_mode_set>
		if (err) {
   119c2:	b9a8      	cbnz	r0, 119f0 <w_lte_lc_connect+0x4c>
		err = lte_lc_normal();
   119c4:	f7ff ffb4 	bl	11930 <lte_lc_normal>
		if (err || !blocking) {
   119c8:	b990      	cbnz	r0, 119f0 <w_lte_lc_connect+0x4c>
   119ca:	b18d      	cbz	r5, 119f0 <w_lte_lc_connect+0x4c>
   119cc:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   119d0:	2300      	movs	r3, #0
   119d2:	4630      	mov	r0, r6
   119d4:	f004 ff56 	bl	16884 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   119d8:	f110 0f0b 	cmn.w	r0, #11
   119dc:	d108      	bne.n	119f0 <w_lte_lc_connect+0x4c>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   119de:	7823      	ldrb	r3, [r4, #0]
   119e0:	2b01      	cmp	r3, #1
   119e2:	d109      	bne.n	119f8 <w_lte_lc_connect+0x54>
				sys_mode_target = sys_mode_fallback;
   119e4:	2302      	movs	r3, #2
   119e6:	7023      	strb	r3, [r4, #0]
				err = lte_lc_offline();
   119e8:	f7ff ff94 	bl	11914 <lte_lc_offline>
				if (err) {
   119ec:	2800      	cmp	r0, #0
   119ee:	d0e5      	beq.n	119bc <w_lte_lc_connect+0x18>
}
   119f0:	bd70      	pop	{r4, r5, r6, pc}
		return -EPERM;
   119f2:	f04f 30ff 	mov.w	r0, #4294967295
   119f6:	e7fb      	b.n	119f0 <w_lte_lc_connect+0x4c>
				err = -ETIMEDOUT;
   119f8:	f06f 003b 	mvn.w	r0, #59	; 0x3b
   119fc:	e7f8      	b.n	119f0 <w_lte_lc_connect+0x4c>
   119fe:	bf00      	nop
   11a00:	20017798 	.word	0x20017798
   11a04:	2001509c 	.word	0x2001509c
   11a08:	2001459c 	.word	0x2001459c

00011a0c <lte_lc_connect_async>:
	if (handler) {
   11a0c:	4b05      	ldr	r3, [pc, #20]	; (11a24 <lte_lc_connect_async+0x18>)
   11a0e:	b118      	cbz	r0, 11a18 <lte_lc_connect_async+0xc>
		evt_handler = handler;
   11a10:	6018      	str	r0, [r3, #0]
	return w_lte_lc_connect(false);
   11a12:	2000      	movs	r0, #0
   11a14:	f7ff bfc6 	b.w	119a4 <w_lte_lc_connect>
	} else if (evt_handler == NULL) {
   11a18:	681b      	ldr	r3, [r3, #0]
   11a1a:	2b00      	cmp	r3, #0
   11a1c:	d1f9      	bne.n	11a12 <lte_lc_connect_async+0x6>
}
   11a1e:	f06f 0015 	mvn.w	r0, #21
   11a22:	4770      	bx	lr
   11a24:	20015098 	.word	0x20015098

00011a28 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   11a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   11a2c:	2400      	movs	r4, #0
{
   11a2e:	b090      	sub	sp, #64	; 0x40
   11a30:	4605      	mov	r5, r0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   11a32:	221a      	movs	r2, #26
   11a34:	4621      	mov	r1, r4
   11a36:	a809      	add	r0, sp, #36	; 0x24
	struct at_param_list resp_list = {0};
   11a38:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   11a3c:	9408      	str	r4, [sp, #32]
   11a3e:	f006 fa78 	bl	17f32 <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   11a42:	230d      	movs	r3, #13
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   11a44:	e9cd 4404 	strd	r4, r4, [sp, #16]
   11a48:	9406      	str	r4, [sp, #24]
   11a4a:	f88d 401c 	strb.w	r4, [sp, #28]
	size_t response_prefix_len = sizeof(response_prefix);
   11a4e:	9300      	str	r3, [sp, #0]

	if (mode == NULL) {
   11a50:	2d00      	cmp	r5, #0
   11a52:	d063      	beq.n	11b1c <lte_lc_system_mode_get+0xf4>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   11a54:	4623      	mov	r3, r4
   11a56:	221e      	movs	r2, #30
   11a58:	4832      	ldr	r0, [pc, #200]	; (11b24 <lte_lc_system_mode_get+0xfc>)
   11a5a:	a908      	add	r1, sp, #32
   11a5c:	f7ff fa62 	bl	10f24 <at_cmd_write>
			   NULL);
	if (err) {
   11a60:	4604      	mov	r4, r0
   11a62:	2800      	cmp	r0, #0
   11a64:	d146      	bne.n	11af4 <lte_lc_system_mode_get+0xcc>
		LOG_ERR("Could not send AT command");
		return err;
	}

	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   11a66:	2105      	movs	r1, #5
   11a68:	a802      	add	r0, sp, #8
   11a6a:	f006 ff76 	bl	1895a <at_params_list_init>
	if (err) {
   11a6e:	4604      	mov	r4, r0
   11a70:	2800      	cmp	r0, #0
   11a72:	d13f      	bne.n	11af4 <lte_lc_system_mode_get+0xcc>
		LOG_ERR("Could init AT params list, error: %d", err);
		return err;
	}

	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   11a74:	4601      	mov	r1, r0
   11a76:	2305      	movs	r3, #5
   11a78:	aa02      	add	r2, sp, #8
   11a7a:	a808      	add	r0, sp, #32
   11a7c:	f7ff fe54 	bl	11728 <at_parser_max_params_from_str>
					    AT_XSYSTEMMODE_PARAMS_COUNT);
	if (err) {
   11a80:	4604      	mov	r4, r0
   11a82:	2800      	cmp	r0, #0
   11a84:	d133      	bne.n	11aee <lte_lc_system_mode_get+0xc6>
		LOG_ERR("Could not parse AT response, error: %d", err);
		goto clean_exit;
	}

	/* Check if AT command response starts with %XSYSTEMMODE */
	err = at_params_string_get(&resp_list,
   11a86:	4601      	mov	r1, r0
   11a88:	466b      	mov	r3, sp
   11a8a:	aa04      	add	r2, sp, #16
   11a8c:	a802      	add	r0, sp, #8
   11a8e:	f007 f831 	bl	18af4 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
   11a92:	4604      	mov	r4, r0
   11a94:	bb58      	cbnz	r0, 11aee <lte_lc_system_mode_get+0xc6>
	if ((response == NULL) || (check == NULL)) {
   11a96:	4a24      	ldr	r2, [pc, #144]	; (11b28 <lte_lc_system_mode_get+0x100>)
   11a98:	9900      	ldr	r1, [sp, #0]
   11a9a:	a804      	add	r0, sp, #16
   11a9c:	f007 f862 	bl	18b64 <response_is_valid.part.0>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
   11aa0:	2800      	cmp	r0, #0
   11aa2:	d035      	beq.n	11b10 <lte_lc_system_mode_get+0xe8>
	/* We skip the first parameter, as that's the response prefix,
	 * "%XSYSTEMMODE:" in this case."
	 * The last parameter sets the preferred mode, and is not implemented
	 * yet on the modem side, so we ignore it.
	 */
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT - 1; i++) {
   11aa4:	2601      	movs	r6, #1
	int err, bitmask = 0;
   11aa6:	4627      	mov	r7, r4
		if (err) {
			LOG_ERR("Could not parse mode parameter, err: %d", err);
			goto clean_exit;
		}

		bitmask = param ? bitmask | BIT(i) : bitmask;
   11aa8:	46b0      	mov	r8, r6
		err = at_params_int_get(&resp_list, i, &param);
   11aaa:	4631      	mov	r1, r6
   11aac:	aa01      	add	r2, sp, #4
   11aae:	a802      	add	r0, sp, #8
   11ab0:	f007 f80d 	bl	18ace <at_params_int_get>
		if (err) {
   11ab4:	4604      	mov	r4, r0
   11ab6:	b9d0      	cbnz	r0, 11aee <lte_lc_system_mode_get+0xc6>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   11ab8:	9b01      	ldr	r3, [sp, #4]
   11aba:	b113      	cbz	r3, 11ac2 <lte_lc_system_mode_get+0x9a>
   11abc:	fa08 f306 	lsl.w	r3, r8, r6
   11ac0:	431f      	orrs	r7, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT - 1; i++) {
   11ac2:	3601      	adds	r6, #1
   11ac4:	2e04      	cmp	r6, #4
   11ac6:	d1f0      	bne.n	11aaa <lte_lc_system_mode_get+0x82>
	}

	/* When checking the bitmask, we need to add 1 to the indices,
	 * as the response prefix is also counted as a parameter.
	 */
	switch (bitmask) {
   11ac8:	2f0c      	cmp	r7, #12
   11aca:	d824      	bhi.n	11b16 <lte_lc_system_mode_get+0xee>
   11acc:	e8df f007 	tbb	[pc, r7]
   11ad0:	23162307 	.word	0x23162307
   11ad4:	23232318 	.word	0x23232318
   11ad8:	231c231a 	.word	0x231c231a
   11adc:	1e          	.byte	0x1e
   11add:	00          	.byte	0x00
	case 0:
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   11ade:	2300      	movs	r3, #0
	      BIT(AT_XSYSTEMMODE_GPS_INDEX + 1)):
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
		break;
	case (BIT(AT_XSYSTEMMODE_NBIOT_INDEX + 1) |
	      BIT(AT_XSYSTEMMODE_GPS_INDEX + 1)):
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   11ae0:	702b      	strb	r3, [r5, #0]
		LOG_ERR("Invalid system mode, assuming parsing error");
		err = -EFAULT;
		goto clean_exit;
	}

	if (sys_mode_current != *mode) {
   11ae2:	4b12      	ldr	r3, [pc, #72]	; (11b2c <lte_lc_system_mode_get+0x104>)
   11ae4:	782a      	ldrb	r2, [r5, #0]
   11ae6:	7819      	ldrb	r1, [r3, #0]
   11ae8:	4291      	cmp	r1, r2
   11aea:	d000      	beq.n	11aee <lte_lc_system_mode_get+0xc6>
		LOG_DBG("Current system mode updated from %d to %d",
			sys_mode_current, *mode);
		sys_mode_current = *mode;
   11aec:	701a      	strb	r2, [r3, #0]
	}

clean_exit:
	at_params_list_free(&resp_list);
   11aee:	a802      	add	r0, sp, #8
   11af0:	f006 ff5f 	bl	189b2 <at_params_list_free>

	return err;
}
   11af4:	4620      	mov	r0, r4
   11af6:	b010      	add	sp, #64	; 0x40
   11af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   11afc:	2301      	movs	r3, #1
   11afe:	e7ef      	b.n	11ae0 <lte_lc_system_mode_get+0xb8>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   11b00:	2302      	movs	r3, #2
   11b02:	e7ed      	b.n	11ae0 <lte_lc_system_mode_get+0xb8>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   11b04:	2303      	movs	r3, #3
   11b06:	e7eb      	b.n	11ae0 <lte_lc_system_mode_get+0xb8>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   11b08:	2304      	movs	r3, #4
   11b0a:	e7e9      	b.n	11ae0 <lte_lc_system_mode_get+0xb8>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   11b0c:	2305      	movs	r3, #5
   11b0e:	e7e7      	b.n	11ae0 <lte_lc_system_mode_get+0xb8>
		err = -EIO;
   11b10:	f06f 0404 	mvn.w	r4, #4
   11b14:	e7eb      	b.n	11aee <lte_lc_system_mode_get+0xc6>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT - 1; i++) {
   11b16:	f06f 040d 	mvn.w	r4, #13
   11b1a:	e7e8      	b.n	11aee <lte_lc_system_mode_get+0xc6>
		return -EINVAL;
   11b1c:	f06f 0415 	mvn.w	r4, #21
   11b20:	e7e8      	b.n	11af4 <lte_lc_system_mode_get+0xcc>
   11b22:	bf00      	nop
   11b24:	0001b408 	.word	0x0001b408
   11b28:	0001b418 	.word	0x0001b418
   11b2c:	2001779a 	.word	0x2001779a

00011b30 <w_lte_lc_init>:
{
   11b30:	b570      	push	{r4, r5, r6, lr}
	if (is_initialized) {
   11b32:	4d1f      	ldr	r5, [pc, #124]	; (11bb0 <w_lte_lc_init+0x80>)
{
   11b34:	b08e      	sub	sp, #56	; 0x38
	if (is_initialized) {
   11b36:	7829      	ldrb	r1, [r5, #0]
   11b38:	2900      	cmp	r1, #0
   11b3a:	d136      	bne.n	11baa <w_lte_lc_init+0x7a>
	err = lte_lc_system_mode_get(&sys_mode_current);
   11b3c:	4e1d      	ldr	r6, [pc, #116]	; (11bb4 <w_lte_lc_init+0x84>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   11b3e:	2201      	movs	r2, #1
   11b40:	481d      	ldr	r0, [pc, #116]	; (11bb8 <w_lte_lc_init+0x88>)
   11b42:	f008 fd65 	bl	1a610 <z_impl_k_sem_init>
   11b46:	4630      	mov	r0, r6
   11b48:	f7ff ff6e 	bl	11a28 <lte_lc_system_mode_get>
	if (err) {
   11b4c:	4604      	mov	r4, r0
   11b4e:	b9c8      	cbnz	r0, 11b84 <w_lte_lc_init+0x54>
	err = at_notif_register_handler(NULL, at_handler);
   11b50:	491a      	ldr	r1, [pc, #104]	; (11bbc <w_lte_lc_init+0x8c>)
   11b52:	f7ff faa1 	bl	11098 <at_notif_register_handler>
	if (err) {
   11b56:	4604      	mov	r4, r0
   11b58:	b9a0      	cbnz	r0, 11b84 <w_lte_lc_init+0x54>
	if (sys_mode_current != sys_mode_target) {
   11b5a:	4b19      	ldr	r3, [pc, #100]	; (11bc0 <w_lte_lc_init+0x90>)
   11b5c:	7818      	ldrb	r0, [r3, #0]
   11b5e:	7833      	ldrb	r3, [r6, #0]
   11b60:	4283      	cmp	r3, r0
   11b62:	d10a      	bne.n	11b7a <w_lte_lc_init+0x4a>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   11b64:	2300      	movs	r3, #0
   11b66:	4817      	ldr	r0, [pc, #92]	; (11bc4 <w_lte_lc_init+0x94>)
   11b68:	461a      	mov	r2, r3
   11b6a:	4619      	mov	r1, r3
   11b6c:	f7ff f9da 	bl	10f24 <at_cmd_write>
   11b70:	4604      	mov	r4, r0
   11b72:	b150      	cbz	r0, 11b8a <w_lte_lc_init+0x5a>
		return -EIO;
   11b74:	f06f 0404 	mvn.w	r4, #4
   11b78:	e004      	b.n	11b84 <w_lte_lc_init+0x54>
		err = lte_lc_system_mode_set(sys_mode_target);
   11b7a:	f7ff fee7 	bl	1194c <lte_lc_system_mode_set>
		if (err) {
   11b7e:	4604      	mov	r4, r0
   11b80:	2800      	cmp	r0, #0
   11b82:	d0ef      	beq.n	11b64 <w_lte_lc_init+0x34>
}
   11b84:	4620      	mov	r0, r4
   11b86:	b00e      	add	sp, #56	; 0x38
   11b88:	bd70      	pop	{r4, r5, r6, pc}
	err = at_cmd_write(cscon, NULL, 0, NULL);
   11b8a:	4603      	mov	r3, r0
   11b8c:	4602      	mov	r2, r0
   11b8e:	4601      	mov	r1, r0
   11b90:	480d      	ldr	r0, [pc, #52]	; (11bc8 <w_lte_lc_init+0x98>)
   11b92:	f7ff f9c7 	bl	10f24 <at_cmd_write>
	if (err) {
   11b96:	b128      	cbz	r0, 11ba4 <w_lte_lc_init+0x74>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   11b98:	4623      	mov	r3, r4
   11b9a:	2232      	movs	r2, #50	; 0x32
   11b9c:	480b      	ldr	r0, [pc, #44]	; (11bcc <w_lte_lc_init+0x9c>)
   11b9e:	a901      	add	r1, sp, #4
   11ba0:	f7ff f9c0 	bl	10f24 <at_cmd_write>
	is_initialized = true;
   11ba4:	2301      	movs	r3, #1
   11ba6:	702b      	strb	r3, [r5, #0]
	return 0;
   11ba8:	e7ec      	b.n	11b84 <w_lte_lc_init+0x54>
		return -EALREADY;
   11baa:	f06f 0444 	mvn.w	r4, #68	; 0x44
   11bae:	e7e9      	b.n	11b84 <w_lte_lc_init+0x54>
   11bb0:	20017798 	.word	0x20017798
   11bb4:	2001779a 	.word	0x2001779a
   11bb8:	2001509c 	.word	0x2001509c
   11bbc:	0000cf59 	.word	0x0000cf59
   11bc0:	2001459c 	.word	0x2001459c
   11bc4:	0001b464 	.word	0x0001b464
   11bc8:	0001b46f 	.word	0x0001b46f
   11bcc:	0001b425 	.word	0x0001b425

00011bd0 <date_time_notify_event.constprop.0>:

static void date_time_notify_event(const struct date_time_evt *evt)
{
	__ASSERT(evt != NULL, "Library event not found");

	if (app_evt_handler != NULL) {
   11bd0:	4b02      	ldr	r3, [pc, #8]	; (11bdc <date_time_notify_event.constprop.0+0xc>)
   11bd2:	681b      	ldr	r3, [r3, #0]
   11bd4:	b10b      	cbz	r3, 11bda <date_time_notify_event.constprop.0+0xa>
		app_evt_handler(evt);
   11bd6:	4802      	ldr	r0, [pc, #8]	; (11be0 <date_time_notify_event.constprop.0+0x10>)
   11bd8:	4718      	bx	r3
	}
}
   11bda:	4770      	bx	lr
   11bdc:	200150c4 	.word	0x200150c4
   11be0:	2001779b 	.word	0x2001779b

00011be4 <new_date_time_get>:

	return 0;
}

static void new_date_time_get(void)
{
   11be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (time_aux.last_date_time_update == 0 ||
   11be8:	4d66      	ldr	r5, [pc, #408]	; (11d84 <new_date_time_get+0x1a0>)
	return z_impl_k_sem_take(sem, timeout);
   11bea:	4f67      	ldr	r7, [pc, #412]	; (11d88 <new_date_time_get+0x1a4>)
   11bec:	462e      	mov	r6, r5
{
   11bee:	b097      	sub	sp, #92	; 0x5c
   11bf0:	f04f 33ff 	mov.w	r3, #4294967295
   11bf4:	f04f 32ff 	mov.w	r2, #4294967295
   11bf8:	4638      	mov	r0, r7
   11bfa:	f004 fe43 	bl	16884 <z_impl_k_sem_take>
	if (time_aux.last_date_time_update == 0 ||
   11bfe:	68ab      	ldr	r3, [r5, #8]
   11c00:	2b00      	cmp	r3, #0
   11c02:	d13c      	bne.n	11c7e <new_date_time_get+0x9a>
{
   11c04:	f04f 0900 	mov.w	r9, #0
		hints.ai_family = AF_INET;
   11c08:	f04f 0a01 	mov.w	sl, #1
   11c0c:	4c5f      	ldr	r4, [pc, #380]	; (11d8c <new_date_time_get+0x1a8>)
   11c0e:	f8df 8190 	ldr.w	r8, [pc, #400]	; 11da0 <new_date_time_get+0x1bc>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   11c12:	f8df b190 	ldr.w	fp, [pc, #400]	; 11da4 <new_date_time_get+0x1c0>
	hints.ai_protocol = 0;
   11c16:	2300      	movs	r3, #0
   11c18:	2202      	movs	r2, #2
   11c1a:	e9c8 2303 	strd	r2, r3, [r8, #12]
	if (server->addr == NULL) {
   11c1e:	6863      	ldr	r3, [r4, #4]
		hints.ai_family = AF_INET;
   11c20:	f8c8 a008 	str.w	sl, [r8, #8]
	if (server->addr == NULL) {
   11c24:	2b00      	cmp	r3, #0
   11c26:	d03e      	beq.n	11ca6 <new_date_time_get+0xc2>
	err = sntp_init(&sntp_ctx, server->addr->ai_addr,
   11c28:	6863      	ldr	r3, [r4, #4]
   11c2a:	a80d      	add	r0, sp, #52	; 0x34
   11c2c:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   11c30:	f005 fe36 	bl	178a0 <sntp_init>
	if (err) {
   11c34:	4603      	mov	r3, r0
   11c36:	b930      	cbnz	r0, 11c46 <new_date_time_get+0x62>
	err = sntp_query(&sntp_ctx, timeout, time);
   11c38:	f241 3188 	movw	r1, #5000	; 0x1388
   11c3c:	4a54      	ldr	r2, [pc, #336]	; (11d90 <new_date_time_get+0x1ac>)
   11c3e:	a80d      	add	r0, sp, #52	; 0x34
   11c40:	f7fb f8e6 	bl	ce10 <sntp_query>
   11c44:	4603      	mov	r3, r0
	sntp_close(&sntp_ctx);
   11c46:	a80d      	add	r0, sp, #52	; 0x34
   11c48:	9301      	str	r3, [sp, #4]
   11c4a:	f005 fe58 	bl	178fe <sntp_close>
		if (err) {
   11c4e:	9b01      	ldr	r3, [sp, #4]
   11c50:	bb8b      	cbnz	r3, 11cb6 <new_date_time_get+0xd2>
		time_aux.date_time_utc = (int64_t)sntp_time.seconds * 1000;
   11c52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11c56:	4b4e      	ldr	r3, [pc, #312]	; (11d90 <new_date_time_get+0x1ac>)
   11c58:	681a      	ldr	r2, [r3, #0]
   11c5a:	6858      	ldr	r0, [r3, #4]
   11c5c:	fba2 2301 	umull	r2, r3, r2, r1
   11c60:	fb01 3300 	mla	r3, r1, r0, r3
   11c64:	e9c6 2300 	strd	r2, r3, [r6]
		time_aux.last_date_time_update = k_uptime_get();
   11c68:	f006 ffa0 	bl	18bac <k_uptime_get>
		LOG_DBG("Fallback on NTP server");

		err = time_NTP_server_get();
		if (err == 0) {
			LOG_DBG("Time from NTP server obtained");
			initial_valid_time = true;
   11c6c:	2301      	movs	r3, #1
   11c6e:	4a49      	ldr	r2, [pc, #292]	; (11d94 <new_date_time_get+0x1b0>)
		time_aux.last_date_time_update = k_uptime_get();
   11c70:	60b0      	str	r0, [r6, #8]
			initial_valid_time = true;
   11c72:	7013      	strb	r3, [r2, #0]
			evt.type = DATE_TIME_OBTAINED_NTP;
   11c74:	4a48      	ldr	r2, [pc, #288]	; (11d98 <new_date_time_get+0x1b4>)
   11c76:	7013      	strb	r3, [r2, #0]
		LOG_DBG("Not getting cellular network time");
#endif
		LOG_DBG("Not getting time from any time source");

		evt.type = DATE_TIME_NOT_OBTAINED;
		date_time_notify_event(&evt);
   11c78:	f7ff ffaa 	bl	11bd0 <date_time_notify_event.constprop.0>
   11c7c:	e7b8      	b.n	11bf0 <new_date_time_get+0xc>
	if (time_aux.last_date_time_update == 0 ||
   11c7e:	e9d5 2300 	ldrd	r2, r3, [r5]
   11c82:	4313      	orrs	r3, r2
   11c84:	d0be      	beq.n	11c04 <new_date_time_get+0x20>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   11c86:	f006 ff91 	bl	18bac <k_uptime_get>
   11c8a:	68ab      	ldr	r3, [r5, #8]
   11c8c:	f247 5230 	movw	r2, #30000	; 0x7530
   11c90:	1ac0      	subs	r0, r0, r3
   11c92:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
   11c96:	2300      	movs	r3, #0
   11c98:	4282      	cmp	r2, r0
   11c9a:	418b      	sbcs	r3, r1
   11c9c:	dbb2      	blt.n	11c04 <new_date_time_get+0x20>
			initial_valid_time = true;
   11c9e:	2201      	movs	r2, #1
   11ca0:	4b3c      	ldr	r3, [pc, #240]	; (11d94 <new_date_time_get+0x1b0>)
		evt.type = DATE_TIME_NOT_OBTAINED;
   11ca2:	701a      	strb	r2, [r3, #0]
   11ca4:	e7e8      	b.n	11c78 <new_date_time_get+0x94>
   11ca6:	4642      	mov	r2, r8
   11ca8:	4659      	mov	r1, fp
   11caa:	6820      	ldr	r0, [r4, #0]
   11cac:	1d23      	adds	r3, r4, #4
   11cae:	f005 fe2b 	bl	17908 <zsock_getaddrinfo>
		if (err) {
   11cb2:	2800      	cmp	r0, #0
   11cb4:	d0b8      	beq.n	11c28 <new_date_time_get+0x44>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   11cb6:	f109 0901 	add.w	r9, r9, #1
   11cba:	f1b9 0f05 	cmp.w	r9, #5
   11cbe:	f104 0408 	add.w	r4, r4, #8
   11cc2:	d1a8      	bne.n	11c16 <new_date_time_get+0x32>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   11cc4:	2300      	movs	r3, #0
   11cc6:	2221      	movs	r2, #33	; 0x21
   11cc8:	4834      	ldr	r0, [pc, #208]	; (11d9c <new_date_time_get+0x1b8>)
   11cca:	a904      	add	r1, sp, #16
   11ccc:	f7ff f92a 	bl	10f24 <at_cmd_write>
	if (err) {
   11cd0:	2800      	cmp	r0, #0
   11cd2:	d153      	bne.n	11d7c <new_date_time_get+0x198>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   11cd4:	2420      	movs	r4, #32
   11cd6:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   11cda:	f244 0109 	movw	r1, #16393	; 0x4009
			buf[i] = ' ';
   11cde:	4620      	mov	r0, r4
   11ce0:	aa04      	add	r2, sp, #16
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   11ce2:	f812 3b01 	ldrb.w	r3, [r2], #1
   11ce6:	3b2c      	subs	r3, #44	; 0x2c
   11ce8:	b2db      	uxtb	r3, r3
   11cea:	2b0e      	cmp	r3, #14
   11cec:	d805      	bhi.n	11cfa <new_date_time_get+0x116>
   11cee:	fa21 f303 	lsr.w	r3, r1, r3
   11cf2:	07db      	lsls	r3, r3, #31
			buf[i] = ' ';
   11cf4:	bf48      	it	mi
   11cf6:	f802 0c01 	strbmi.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   11cfa:	3c01      	subs	r4, #1
   11cfc:	d1f1      	bne.n	11ce2 <new_date_time_get+0xfe>
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   11cfe:	220a      	movs	r2, #10
	char *ptr_index = &buf[8];
   11d00:	a806      	add	r0, sp, #24
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   11d02:	a903      	add	r1, sp, #12
	char *ptr_index = &buf[8];
   11d04:	9003      	str	r0, [sp, #12]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   11d06:	f005 ff7e 	bl	17c06 <strtol>
   11d0a:	3064      	adds	r0, #100	; 0x64
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   11d0c:	220a      	movs	r2, #10
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   11d0e:	9012      	str	r0, [sp, #72]	; 0x48
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   11d10:	a903      	add	r1, sp, #12
   11d12:	9803      	ldr	r0, [sp, #12]
   11d14:	f005 ff77 	bl	17c06 <strtol>
   11d18:	3801      	subs	r0, #1
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   11d1a:	220a      	movs	r2, #10
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   11d1c:	9011      	str	r0, [sp, #68]	; 0x44
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   11d1e:	a903      	add	r1, sp, #12
   11d20:	9803      	ldr	r0, [sp, #12]
   11d22:	f005 ff70 	bl	17c06 <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   11d26:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   11d28:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   11d2a:	a903      	add	r1, sp, #12
   11d2c:	9803      	ldr	r0, [sp, #12]
   11d2e:	f005 ff6a 	bl	17c06 <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   11d32:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   11d34:	900f      	str	r0, [sp, #60]	; 0x3c
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   11d36:	a903      	add	r1, sp, #12
   11d38:	9803      	ldr	r0, [sp, #12]
   11d3a:	f005 ff64 	bl	17c06 <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   11d3e:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   11d40:	900e      	str	r0, [sp, #56]	; 0x38
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   11d42:	a903      	add	r1, sp, #12
   11d44:	9803      	ldr	r0, [sp, #12]
   11d46:	f005 ff5e 	bl	17c06 <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   11d4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   11d4c:	900d      	str	r0, [sp, #52]	; 0x34
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   11d4e:	2b73      	cmp	r3, #115	; 0x73
   11d50:	d014      	beq.n	11d7c <new_date_time_get+0x198>
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(&date_time) * 1000;
   11d52:	a80d      	add	r0, sp, #52	; 0x34
   11d54:	f7fb fcf4 	bl	d740 <timeutil_timegm64>
   11d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11d5c:	460a      	mov	r2, r1
   11d5e:	fba0 0103 	umull	r0, r1, r0, r3
   11d62:	fb03 1102 	mla	r1, r3, r2, r1
   11d66:	e9c6 0100 	strd	r0, r1, [r6]
	time_aux.last_date_time_update = k_uptime_get();
   11d6a:	f006 ff1f 	bl	18bac <k_uptime_get>
			initial_valid_time = true;
   11d6e:	2201      	movs	r2, #1
   11d70:	4b08      	ldr	r3, [pc, #32]	; (11d94 <new_date_time_get+0x1b0>)
	time_aux.last_date_time_update = k_uptime_get();
   11d72:	60b0      	str	r0, [r6, #8]
			initial_valid_time = true;
   11d74:	701a      	strb	r2, [r3, #0]
			evt.type = DATE_TIME_OBTAINED_MODEM;
   11d76:	4b08      	ldr	r3, [pc, #32]	; (11d98 <new_date_time_get+0x1b4>)
   11d78:	701c      	strb	r4, [r3, #0]
			date_time_notify_event(&evt);
   11d7a:	e77d      	b.n	11c78 <new_date_time_get+0x94>
		evt.type = DATE_TIME_NOT_OBTAINED;
   11d7c:	2203      	movs	r2, #3
   11d7e:	4b06      	ldr	r3, [pc, #24]	; (11d98 <new_date_time_get+0x1b4>)
   11d80:	e78f      	b.n	11ca2 <new_date_time_get+0xbe>
   11d82:	bf00      	nop
   11d84:	20014a08 	.word	0x20014a08
   11d88:	2001474c 	.word	0x2001474c
   11d8c:	20014564 	.word	0x20014564
   11d90:	200149f8 	.word	0x200149f8
   11d94:	2001779c 	.word	0x2001779c
   11d98:	2001779b 	.word	0x2001779b
   11d9c:	0001b492 	.word	0x0001b492
   11da0:	200150c8 	.word	0x200150c8
   11da4:	0001b48e 	.word	0x0001b48e

00011da8 <date_time_init>:
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

static int date_time_init(const struct device *unused)
{
   11da8:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11daa:	4c08      	ldr	r4, [pc, #32]	; (11dcc <date_time_init+0x24>)
   11dac:	2230      	movs	r2, #48	; 0x30
   11dae:	2100      	movs	r1, #0
   11db0:	4620      	mov	r0, r4
   11db2:	f006 f8be 	bl	17f32 <memset>
   11db6:	4b06      	ldr	r3, [pc, #24]	; (11dd0 <date_time_init+0x28>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11db8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11dbc:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11dbe:	4621      	mov	r1, r4
   11dc0:	2300      	movs	r3, #0
   11dc2:	4804      	ldr	r0, [pc, #16]	; (11dd4 <date_time_init+0x2c>)
   11dc4:	f004 fe96 	bl	16af4 <k_delayed_work_submit_to_queue>
	k_delayed_work_init(&time_work, date_time_handler);
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));

	return 0;
}
   11dc8:	2000      	movs	r0, #0
   11dca:	bd10      	pop	{r4, pc}
   11dcc:	20014a18 	.word	0x20014a18
   11dd0:	00011dd9 	.word	0x00011dd9
   11dd4:	20014bf0 	.word	0x20014bf0

00011dd8 <date_time_handler>:
{
   11dd8:	b510      	push	{r4, lr}
	z_impl_k_sem_give(sem);
   11dda:	4806      	ldr	r0, [pc, #24]	; (11df4 <date_time_handler+0x1c>)
   11ddc:	f004 fd2c 	bl	16838 <z_impl_k_sem_give>
}
   11de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11de4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   11de8:	2300      	movs	r3, #0
   11dea:	4903      	ldr	r1, [pc, #12]	; (11df8 <date_time_handler+0x20>)
   11dec:	4803      	ldr	r0, [pc, #12]	; (11dfc <date_time_handler+0x24>)
   11dee:	f004 be81 	b.w	16af4 <k_delayed_work_submit_to_queue>
   11df2:	bf00      	nop
   11df4:	2001474c 	.word	0x2001474c
   11df8:	20014a18 	.word	0x20014a18
   11dfc:	20014bf0 	.word	0x20014bf0

00011e00 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   11e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   11e04:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   11e06:	4c21      	ldr	r4, [pc, #132]	; (11e8c <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   11e08:	4e21      	ldr	r6, [pc, #132]	; (11e90 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   11e0a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   11e0e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 11e98 <check_ext_api_requests+0x98>
{
   11e12:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   11e14:	45a8      	cmp	r8, r5
   11e16:	d803      	bhi.n	11e20 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   11e18:	2000      	movs	r0, #0
   11e1a:	b005      	add	sp, #20
   11e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   11e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11e22:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   11e26:	681f      	ldr	r7, [r3, #0]
   11e28:	ab01      	add	r3, sp, #4
   11e2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   11e2e:	220c      	movs	r2, #12
   11e30:	4619      	mov	r1, r3
   11e32:	4638      	mov	r0, r7
   11e34:	f006 f842 	bl	17ebc <memcmp>
   11e38:	b990      	cbnz	r0, 11e60 <check_ext_api_requests+0x60>
   11e3a:	b18f      	cbz	r7, 11e60 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   11e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   11e3e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   11e40:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   11e42:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   11e44:	4291      	cmp	r1, r2
   11e46:	d10b      	bne.n	11e60 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   11e48:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   11e4a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   11e4c:	4291      	cmp	r1, r2
   11e4e:	d807      	bhi.n	11e60 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   11e50:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   11e52:	4291      	cmp	r1, r2
   11e54:	d904      	bls.n	11e60 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   11e56:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   11e58:	695b      	ldr	r3, [r3, #20]
   11e5a:	ea32 0303 	bics.w	r3, r2, r3
   11e5e:	d00a      	beq.n	11e76 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   11e60:	6a27      	ldr	r7, [r4, #32]
   11e62:	b167      	cbz	r7, 11e7e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   11e64:	480b      	ldr	r0, [pc, #44]	; (11e94 <check_ext_api_requests+0x94>)
   11e66:	f005 f8f5 	bl	17054 <printk>
			k_panic();
   11e6a:	4040      	eors	r0, r0
   11e6c:	f380 8811 	msr	BASEPRI, r0
   11e70:	f04f 0004 	mov.w	r0, #4
   11e74:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   11e76:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   11e78:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   11e7a:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   11e7c:	e7ca      	b.n	11e14 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   11e7e:	4648      	mov	r0, r9
   11e80:	f005 f8e8 	bl	17054 <printk>
			*ext_api_req->ext_api = NULL;
   11e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11e86:	601f      	str	r7, [r3, #0]
   11e88:	e7f5      	b.n	11e76 <check_ext_api_requests+0x76>
   11e8a:	bf00      	nop
   11e8c:	0000c23c 	.word	0x0000c23c
   11e90:	0001adb0 	.word	0x0001adb0
   11e94:	0001b4f6 	.word	0x0001b4f6
   11e98:	0001b51f 	.word	0x0001b51f

00011e9c <rpc_handle_data_message>:
   11e9c:	6803      	ldr	r3, [r0, #0]
   11e9e:	b510      	push	{r4, lr}
   11ea0:	b29b      	uxth	r3, r3
   11ea2:	2b04      	cmp	r3, #4
   11ea4:	d009      	beq.n	11eba <rpc_handle_data_message+0x1e>
   11ea6:	2b03      	cmp	r3, #3
   11ea8:	d010      	beq.n	11ecc <rpc_handle_data_message+0x30>
   11eaa:	2b06      	cmp	r3, #6
   11eac:	d010      	beq.n	11ed0 <rpc_handle_data_message+0x34>
   11eae:	2b07      	cmp	r3, #7
   11eb0:	d010      	beq.n	11ed4 <rpc_handle_data_message+0x38>
   11eb2:	6880      	ldr	r0, [r0, #8]
   11eb4:	b980      	cbnz	r0, 11ed8 <rpc_handle_data_message+0x3c>
   11eb6:	2000      	movs	r0, #0
   11eb8:	bd10      	pop	{r4, pc}
   11eba:	2300      	movs	r3, #0
   11ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11ec0:	4a07      	ldr	r2, [pc, #28]	; (11ee0 <rpc_handle_data_message+0x44>)
   11ec2:	2100      	movs	r1, #0
   11ec4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   11ec8:	685b      	ldr	r3, [r3, #4]
   11eca:	4718      	bx	r3
   11ecc:	2301      	movs	r3, #1
   11ece:	e7f5      	b.n	11ebc <rpc_handle_data_message+0x20>
   11ed0:	2302      	movs	r3, #2
   11ed2:	e7f3      	b.n	11ebc <rpc_handle_data_message+0x20>
   11ed4:	2303      	movs	r3, #3
   11ed6:	e7f1      	b.n	11ebc <rpc_handle_data_message+0x20>
   11ed8:	f006 fee0 	bl	18c9c <rpc_transport_data_free>
   11edc:	e7eb      	b.n	11eb6 <rpc_handle_data_message+0x1a>
   11ede:	bf00      	nop
   11ee0:	0001af98 	.word	0x0001af98

00011ee4 <ipc_trace_init>:
   11ee4:	4b01      	ldr	r3, [pc, #4]	; (11eec <ipc_trace_init+0x8>)
   11ee6:	6018      	str	r0, [r3, #0]
   11ee8:	4770      	bx	lr
   11eea:	bf00      	nop
   11eec:	20015124 	.word	0x20015124

00011ef0 <nrf_modem_os_trace_irq_handler>:
   11ef0:	b508      	push	{r3, lr}
   11ef2:	4b11      	ldr	r3, [pc, #68]	; (11f38 <nrf_modem_os_trace_irq_handler+0x48>)
   11ef4:	781b      	ldrb	r3, [r3, #0]
   11ef6:	b90b      	cbnz	r3, 11efc <nrf_modem_os_trace_irq_handler+0xc>
   11ef8:	f7fe faa6 	bl	10448 <nrf_modem_os_trace_irq_clear>
   11efc:	4b0f      	ldr	r3, [pc, #60]	; (11f3c <nrf_modem_os_trace_irq_handler+0x4c>)
   11efe:	6818      	ldr	r0, [r3, #0]
   11f00:	b128      	cbz	r0, 11f0e <nrf_modem_os_trace_irq_handler+0x1e>
   11f02:	6882      	ldr	r2, [r0, #8]
   11f04:	6843      	ldr	r3, [r0, #4]
   11f06:	429a      	cmp	r2, r3
   11f08:	d001      	beq.n	11f0e <nrf_modem_os_trace_irq_handler+0x1e>
   11f0a:	f006 fecb 	bl	18ca4 <trace_write>
   11f0e:	4b0c      	ldr	r3, [pc, #48]	; (11f40 <nrf_modem_os_trace_irq_handler+0x50>)
   11f10:	6818      	ldr	r0, [r3, #0]
   11f12:	b128      	cbz	r0, 11f20 <nrf_modem_os_trace_irq_handler+0x30>
   11f14:	6882      	ldr	r2, [r0, #8]
   11f16:	6843      	ldr	r3, [r0, #4]
   11f18:	429a      	cmp	r2, r3
   11f1a:	d001      	beq.n	11f20 <nrf_modem_os_trace_irq_handler+0x30>
   11f1c:	f006 fec2 	bl	18ca4 <trace_write>
   11f20:	4b08      	ldr	r3, [pc, #32]	; (11f44 <nrf_modem_os_trace_irq_handler+0x54>)
   11f22:	6818      	ldr	r0, [r3, #0]
   11f24:	b138      	cbz	r0, 11f36 <nrf_modem_os_trace_irq_handler+0x46>
   11f26:	6882      	ldr	r2, [r0, #8]
   11f28:	6843      	ldr	r3, [r0, #4]
   11f2a:	429a      	cmp	r2, r3
   11f2c:	d003      	beq.n	11f36 <nrf_modem_os_trace_irq_handler+0x46>
   11f2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11f32:	f006 beb7 	b.w	18ca4 <trace_write>
   11f36:	bd08      	pop	{r3, pc}
   11f38:	2001779d 	.word	0x2001779d
   11f3c:	20015120 	.word	0x20015120
   11f40:	20015118 	.word	0x20015118
   11f44:	2001511c 	.word	0x2001511c

00011f48 <ipc_trace_handle>:
   11f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f4c:	4b43      	ldr	r3, [pc, #268]	; (1205c <ipc_trace_handle+0x114>)
   11f4e:	681b      	ldr	r3, [r3, #0]
   11f50:	6919      	ldr	r1, [r3, #16]
   11f52:	f8d3 a014 	ldr.w	sl, [r3, #20]
   11f56:	7c1a      	ldrb	r2, [r3, #16]
   11f58:	2200      	movs	r2, #0
   11f5a:	741a      	strb	r2, [r3, #16]
   11f5c:	7c58      	ldrb	r0, [r3, #17]
   11f5e:	745a      	strb	r2, [r3, #17]
   11f60:	7c98      	ldrb	r0, [r3, #18]
   11f62:	749a      	strb	r2, [r3, #18]
   11f64:	7cd8      	ldrb	r0, [r3, #19]
   11f66:	74da      	strb	r2, [r3, #19]
   11f68:	7d18      	ldrb	r0, [r3, #20]
   11f6a:	751a      	strb	r2, [r3, #20]
   11f6c:	7d58      	ldrb	r0, [r3, #21]
   11f6e:	755a      	strb	r2, [r3, #21]
   11f70:	7d98      	ldrb	r0, [r3, #22]
   11f72:	759a      	strb	r2, [r3, #22]
   11f74:	7dd8      	ldrb	r0, [r3, #23]
   11f76:	75da      	strb	r2, [r3, #23]
   11f78:	2900      	cmp	r1, #0
   11f7a:	d033      	beq.n	11fe4 <ipc_trace_handle+0x9c>
   11f7c:	3901      	subs	r1, #1
   11f7e:	2903      	cmp	r1, #3
   11f80:	d830      	bhi.n	11fe4 <ipc_trace_handle+0x9c>
   11f82:	e8df f001 	tbb	[pc, r1]
   11f86:	6502      	.short	0x6502
   11f88:	534c      	.short	0x534c
   11f8a:	4a35      	ldr	r2, [pc, #212]	; (12060 <ipc_trace_handle+0x118>)
   11f8c:	7811      	ldrb	r1, [r2, #0]
   11f8e:	b109      	cbz	r1, 11f94 <ipc_trace_handle+0x4c>
   11f90:	2100      	movs	r1, #0
   11f92:	7011      	strb	r1, [r2, #0]
   11f94:	2200      	movs	r2, #0
   11f96:	4691      	mov	r9, r2
   11f98:	4617      	mov	r7, r2
   11f9a:	4614      	mov	r4, r2
   11f9c:	4d31      	ldr	r5, [pc, #196]	; (12064 <ipc_trace_handle+0x11c>)
   11f9e:	4932      	ldr	r1, [pc, #200]	; (12068 <ipc_trace_handle+0x120>)
   11fa0:	4832      	ldr	r0, [pc, #200]	; (1206c <ipc_trace_handle+0x124>)
   11fa2:	f8d5 e000 	ldr.w	lr, [r5]
   11fa6:	f8d1 8000 	ldr.w	r8, [r1]
   11faa:	6806      	ldr	r6, [r0, #0]
   11fac:	f8da b008 	ldr.w	fp, [sl, #8]
   11fb0:	9501      	str	r5, [sp, #4]
   11fb2:	45a3      	cmp	fp, r4
   11fb4:	d119      	bne.n	11fea <ipc_trace_handle+0xa2>
   11fb6:	b107      	cbz	r7, 11fba <ipc_trace_handle+0x72>
   11fb8:	6006      	str	r6, [r0, #0]
   11fba:	f1b9 0f00 	cmp.w	r9, #0
   11fbe:	d001      	beq.n	11fc4 <ipc_trace_handle+0x7c>
   11fc0:	f8c1 8000 	str.w	r8, [r1]
   11fc4:	b112      	cbz	r2, 11fcc <ipc_trace_handle+0x84>
   11fc6:	9a01      	ldr	r2, [sp, #4]
   11fc8:	f8c2 e000 	str.w	lr, [r2]
   11fcc:	7a1a      	ldrb	r2, [r3, #8]
   11fce:	2101      	movs	r1, #1
   11fd0:	2200      	movs	r2, #0
   11fd2:	7219      	strb	r1, [r3, #8]
   11fd4:	7a59      	ldrb	r1, [r3, #9]
   11fd6:	725a      	strb	r2, [r3, #9]
   11fd8:	7a99      	ldrb	r1, [r3, #10]
   11fda:	729a      	strb	r2, [r3, #10]
   11fdc:	7ada      	ldrb	r2, [r3, #11]
   11fde:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   11fe2:	72da      	strb	r2, [r3, #11]
   11fe4:	b003      	add	sp, #12
   11fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fea:	1ca5      	adds	r5, r4, #2
   11fec:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   11ff0:	686d      	ldr	r5, [r5, #4]
   11ff2:	f895 c000 	ldrb.w	ip, [r5]
   11ff6:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   11ffa:	d009      	beq.n	12010 <ipc_trace_handle+0xc8>
   11ffc:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   12000:	d00a      	beq.n	12018 <ipc_trace_handle+0xd0>
   12002:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   12006:	bf04      	itt	eq
   12008:	462e      	moveq	r6, r5
   1200a:	2701      	moveq	r7, #1
   1200c:	3401      	adds	r4, #1
   1200e:	e7d0      	b.n	11fb2 <ipc_trace_handle+0x6a>
   12010:	46a8      	mov	r8, r5
   12012:	f04f 0901 	mov.w	r9, #1
   12016:	e7f9      	b.n	1200c <ipc_trace_handle+0xc4>
   12018:	46ae      	mov	lr, r5
   1201a:	2201      	movs	r2, #1
   1201c:	e7f6      	b.n	1200c <ipc_trace_handle+0xc4>
   1201e:	2101      	movs	r1, #1
   12020:	4a0f      	ldr	r2, [pc, #60]	; (12060 <ipc_trace_handle+0x118>)
   12022:	7011      	strb	r1, [r2, #0]
   12024:	7a1a      	ldrb	r2, [r3, #8]
   12026:	2103      	movs	r1, #3
   12028:	2200      	movs	r2, #0
   1202a:	e7d2      	b.n	11fd2 <ipc_trace_handle+0x8a>
   1202c:	7a19      	ldrb	r1, [r3, #8]
   1202e:	2104      	movs	r1, #4
   12030:	7219      	strb	r1, [r3, #8]
   12032:	7a59      	ldrb	r1, [r3, #9]
   12034:	725a      	strb	r2, [r3, #9]
   12036:	7a99      	ldrb	r1, [r3, #10]
   12038:	729a      	strb	r2, [r3, #10]
   1203a:	7ad9      	ldrb	r1, [r3, #11]
   1203c:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   12040:	72d9      	strb	r1, [r3, #11]
   12042:	4b07      	ldr	r3, [pc, #28]	; (12060 <ipc_trace_handle+0x118>)
   12044:	701a      	strb	r2, [r3, #0]
   12046:	b003      	add	sp, #12
   12048:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1204c:	f7ff bf50 	b.w	11ef0 <nrf_modem_os_trace_irq_handler>
   12050:	b003      	add	sp, #12
   12052:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12056:	f7fe b9ef 	b.w	10438 <nrf_modem_os_trace_irq_set>
   1205a:	bf00      	nop
   1205c:	20015124 	.word	0x20015124
   12060:	2001779d 	.word	0x2001779d
   12064:	2001511c 	.word	0x2001511c
   12068:	20015118 	.word	0x20015118
   1206c:	20015120 	.word	0x20015120

00012070 <rpc_trace_coredump_in_progress>:
   12070:	4b01      	ldr	r3, [pc, #4]	; (12078 <rpc_trace_coredump_in_progress+0x8>)
   12072:	7818      	ldrb	r0, [r3, #0]
   12074:	4770      	bx	lr
   12076:	bf00      	nop
   12078:	2001779d 	.word	0x2001779d

0001207c <handle_modem_rpc_msg>:
   1207c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12080:	4606      	mov	r6, r0
   12082:	460f      	mov	r7, r1
   12084:	2500      	movs	r5, #0
   12086:	f8df 8074 	ldr.w	r8, [pc, #116]	; 120fc <handle_modem_rpc_msg+0x80>
   1208a:	6833      	ldr	r3, [r6, #0]
   1208c:	42ab      	cmp	r3, r5
   1208e:	d801      	bhi.n	12094 <handle_modem_rpc_msg+0x18>
   12090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12094:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   12098:	68a3      	ldr	r3, [r4, #8]
   1209a:	b1fb      	cbz	r3, 120dc <handle_modem_rpc_msg+0x60>
   1209c:	6863      	ldr	r3, [r4, #4]
   1209e:	b2db      	uxtb	r3, r3
   120a0:	2b01      	cmp	r3, #1
   120a2:	d11b      	bne.n	120dc <handle_modem_rpc_msg+0x60>
   120a4:	6862      	ldr	r2, [r4, #4]
   120a6:	f8b8 3000 	ldrh.w	r3, [r8]
   120aa:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   120ae:	d115      	bne.n	120dc <handle_modem_rpc_msg+0x60>
   120b0:	2f02      	cmp	r7, #2
   120b2:	68a0      	ldr	r0, [r4, #8]
   120b4:	d114      	bne.n	120e0 <handle_modem_rpc_msg+0x64>
   120b6:	f7ff fef1 	bl	11e9c <rpc_handle_data_message>
   120ba:	2802      	cmp	r0, #2
   120bc:	d00e      	beq.n	120dc <handle_modem_rpc_msg+0x60>
   120be:	2801      	cmp	r0, #1
   120c0:	d113      	bne.n	120ea <handle_modem_rpc_msg+0x6e>
   120c2:	6863      	ldr	r3, [r4, #4]
   120c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   120c8:	f043 0302 	orr.w	r3, r3, #2
   120cc:	6063      	str	r3, [r4, #4]
   120ce:	f8b8 3000 	ldrh.w	r3, [r8]
   120d2:	3301      	adds	r3, #1
   120d4:	f8a8 3000 	strh.w	r3, [r8]
   120d8:	f7fe f99e 	bl	10418 <nrf_modem_os_application_irq_set>
   120dc:	3501      	adds	r5, #1
   120de:	e7d4      	b.n	1208a <handle_modem_rpc_msg+0xe>
   120e0:	6801      	ldr	r1, [r0, #0]
   120e2:	0c09      	lsrs	r1, r1, #16
   120e4:	f006 fd70 	bl	18bc8 <rpc_handle_ctrl_message>
   120e8:	e7e7      	b.n	120ba <handle_modem_rpc_msg+0x3e>
   120ea:	2800      	cmp	r0, #0
   120ec:	d1ef      	bne.n	120ce <handle_modem_rpc_msg+0x52>
   120ee:	6863      	ldr	r3, [r4, #4]
   120f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   120f4:	f043 0303 	orr.w	r3, r3, #3
   120f8:	e7e8      	b.n	120cc <handle_modem_rpc_msg+0x50>
   120fa:	bf00      	nop
   120fc:	20015c38 	.word	0x20015c38

00012100 <rpc_transport_ipc_data_msg_send>:
   12100:	4b11      	ldr	r3, [pc, #68]	; (12148 <rpc_transport_ipc_data_msg_send+0x48>)
   12102:	b530      	push	{r4, r5, lr}
   12104:	7819      	ldrb	r1, [r3, #0]
   12106:	b9e1      	cbnz	r1, 12142 <rpc_transport_ipc_data_msg_send+0x42>
   12108:	4b10      	ldr	r3, [pc, #64]	; (1214c <rpc_transport_ipc_data_msg_send+0x4c>)
   1210a:	4a11      	ldr	r2, [pc, #68]	; (12150 <rpc_transport_ipc_data_msg_send+0x50>)
   1210c:	681b      	ldr	r3, [r3, #0]
   1210e:	6812      	ldr	r2, [r2, #0]
   12110:	1ac0      	subs	r0, r0, r3
   12112:	f3c0 1389 	ubfx	r3, r0, #6, #10
   12116:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1211a:	4d0e      	ldr	r5, [pc, #56]	; (12154 <rpc_transport_ipc_data_msg_send+0x54>)
   1211c:	685a      	ldr	r2, [r3, #4]
   1211e:	882c      	ldrh	r4, [r5, #0]
   12120:	b292      	uxth	r2, r2
   12122:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   12126:	605a      	str	r2, [r3, #4]
   12128:	685a      	ldr	r2, [r3, #4]
   1212a:	4608      	mov	r0, r1
   1212c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   12130:	f042 0201 	orr.w	r2, r2, #1
   12134:	605a      	str	r2, [r3, #4]
   12136:	2201      	movs	r2, #1
   12138:	4b07      	ldr	r3, [pc, #28]	; (12158 <rpc_transport_ipc_data_msg_send+0x58>)
   1213a:	3401      	adds	r4, #1
   1213c:	802c      	strh	r4, [r5, #0]
   1213e:	601a      	str	r2, [r3, #0]
   12140:	bd30      	pop	{r4, r5, pc}
   12142:	f04f 30ff 	mov.w	r0, #4294967295
   12146:	e7fb      	b.n	12140 <rpc_transport_ipc_data_msg_send+0x40>
   12148:	2001779f 	.word	0x2001779f
   1214c:	20015140 	.word	0x20015140
   12150:	20015144 	.word	0x20015144
   12154:	20015c3a 	.word	0x20015c3a
   12158:	4002a00c 	.word	0x4002a00c

0001215c <rpc_transport_ipc_ctrl_msg_send>:
   1215c:	4b0e      	ldr	r3, [pc, #56]	; (12198 <rpc_transport_ipc_ctrl_msg_send+0x3c>)
   1215e:	490f      	ldr	r1, [pc, #60]	; (1219c <rpc_transport_ipc_ctrl_msg_send+0x40>)
   12160:	681b      	ldr	r3, [r3, #0]
   12162:	880a      	ldrh	r2, [r1, #0]
   12164:	1ac0      	subs	r0, r0, r3
   12166:	f3c0 1389 	ubfx	r3, r0, #6, #10
   1216a:	480d      	ldr	r0, [pc, #52]	; (121a0 <rpc_transport_ipc_ctrl_msg_send+0x44>)
   1216c:	6800      	ldr	r0, [r0, #0]
   1216e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   12172:	6843      	ldr	r3, [r0, #4]
   12174:	b29b      	uxth	r3, r3
   12176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1217a:	3201      	adds	r2, #1
   1217c:	800a      	strh	r2, [r1, #0]
   1217e:	2201      	movs	r2, #1
   12180:	6043      	str	r3, [r0, #4]
   12182:	6843      	ldr	r3, [r0, #4]
   12184:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12188:	f043 0301 	orr.w	r3, r3, #1
   1218c:	6043      	str	r3, [r0, #4]
   1218e:	4b05      	ldr	r3, [pc, #20]	; (121a4 <rpc_transport_ipc_ctrl_msg_send+0x48>)
   12190:	2000      	movs	r0, #0
   12192:	601a      	str	r2, [r3, #0]
   12194:	4770      	bx	lr
   12196:	bf00      	nop
   12198:	20015138 	.word	0x20015138
   1219c:	20015c3a 	.word	0x20015c3a
   121a0:	2001513c 	.word	0x2001513c
   121a4:	4002a004 	.word	0x4002a004

000121a8 <rpc_transport_ipc_data_msg_alloc>:
   121a8:	4b05      	ldr	r3, [pc, #20]	; (121c0 <rpc_transport_ipc_data_msg_alloc+0x18>)
   121aa:	781b      	ldrb	r3, [r3, #0]
   121ac:	b933      	cbnz	r3, 121bc <rpc_transport_ipc_data_msg_alloc+0x14>
   121ae:	4b05      	ldr	r3, [pc, #20]	; (121c4 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   121b0:	2202      	movs	r2, #2
   121b2:	6819      	ldr	r1, [r3, #0]
   121b4:	4b04      	ldr	r3, [pc, #16]	; (121c8 <rpc_transport_ipc_data_msg_alloc+0x20>)
   121b6:	6818      	ldr	r0, [r3, #0]
   121b8:	f006 bdb3 	b.w	18d22 <rpc_transport_ipc_msg_alloc>
   121bc:	2000      	movs	r0, #0
   121be:	4770      	bx	lr
   121c0:	2001779f 	.word	0x2001779f
   121c4:	20015140 	.word	0x20015140
   121c8:	20015144 	.word	0x20015144

000121cc <rpc_transport_ipc_ctrl_msg_alloc>:
   121cc:	4b03      	ldr	r3, [pc, #12]	; (121dc <rpc_transport_ipc_ctrl_msg_alloc+0x10>)
   121ce:	2201      	movs	r2, #1
   121d0:	6819      	ldr	r1, [r3, #0]
   121d2:	4b03      	ldr	r3, [pc, #12]	; (121e0 <rpc_transport_ipc_ctrl_msg_alloc+0x14>)
   121d4:	6818      	ldr	r0, [r3, #0]
   121d6:	f006 bda4 	b.w	18d22 <rpc_transport_ipc_msg_alloc>
   121da:	bf00      	nop
   121dc:	20015138 	.word	0x20015138
   121e0:	2001513c 	.word	0x2001513c

000121e4 <rpc_transport_ipc_data_alloc>:
   121e4:	4b03      	ldr	r3, [pc, #12]	; (121f4 <rpc_transport_ipc_data_alloc+0x10>)
   121e6:	781b      	ldrb	r3, [r3, #0]
   121e8:	b90b      	cbnz	r3, 121ee <rpc_transport_ipc_data_alloc+0xa>
   121ea:	f7fe b94b 	b.w	10484 <nrf_modem_os_shm_tx_alloc>
   121ee:	2000      	movs	r0, #0
   121f0:	4770      	bx	lr
   121f2:	bf00      	nop
   121f4:	2001779f 	.word	0x2001779f

000121f8 <nrf_modem_os_application_irq_handler>:
   121f8:	b510      	push	{r4, lr}
   121fa:	4c06      	ldr	r4, [pc, #24]	; (12214 <nrf_modem_os_application_irq_handler+0x1c>)
   121fc:	f7fe f914 	bl	10428 <nrf_modem_os_application_irq_clear>
   12200:	6820      	ldr	r0, [r4, #0]
   12202:	2101      	movs	r1, #1
   12204:	f7ff ff3a 	bl	1207c <handle_modem_rpc_msg>
   12208:	6860      	ldr	r0, [r4, #4]
   1220a:	2102      	movs	r1, #2
   1220c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12210:	f7ff bf34 	b.w	1207c <handle_modem_rpc_msg>
   12214:	2001512c 	.word	0x2001512c

00012218 <rpc_transport_ipc_msg_free>:
   12218:	2300      	movs	r3, #0
   1221a:	4911      	ldr	r1, [pc, #68]	; (12260 <rpc_transport_ipc_msg_free+0x48>)
   1221c:	b530      	push	{r4, r5, lr}
   1221e:	680a      	ldr	r2, [r1, #0]
   12220:	6814      	ldr	r4, [r2, #0]
   12222:	42a3      	cmp	r3, r4
   12224:	d10b      	bne.n	1223e <rpc_transport_ipc_msg_free+0x26>
   12226:	2300      	movs	r3, #0
   12228:	684a      	ldr	r2, [r1, #4]
   1222a:	6811      	ldr	r1, [r2, #0]
   1222c:	428b      	cmp	r3, r1
   1222e:	d015      	beq.n	1225c <rpc_transport_ipc_msg_free+0x44>
   12230:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   12234:	68a4      	ldr	r4, [r4, #8]
   12236:	42a0      	cmp	r0, r4
   12238:	d008      	beq.n	1224c <rpc_transport_ipc_msg_free+0x34>
   1223a:	3301      	adds	r3, #1
   1223c:	e7f6      	b.n	1222c <rpc_transport_ipc_msg_free+0x14>
   1223e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   12242:	68ad      	ldr	r5, [r5, #8]
   12244:	42a8      	cmp	r0, r5
   12246:	d001      	beq.n	1224c <rpc_transport_ipc_msg_free+0x34>
   12248:	3301      	adds	r3, #1
   1224a:	e7ea      	b.n	12222 <rpc_transport_ipc_msg_free+0xa>
   1224c:	00db      	lsls	r3, r3, #3
   1224e:	3304      	adds	r3, #4
   12250:	58d1      	ldr	r1, [r2, r3]
   12252:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   12256:	f041 0103 	orr.w	r1, r1, #3
   1225a:	50d1      	str	r1, [r2, r3]
   1225c:	bd30      	pop	{r4, r5, pc}
   1225e:	bf00      	nop
   12260:	2001512c 	.word	0x2001512c

00012264 <rpc_transport_ipc_data_free>:
   12264:	4b0d      	ldr	r3, [pc, #52]	; (1229c <rpc_transport_ipc_data_free+0x38>)
   12266:	b510      	push	{r4, lr}
   12268:	681b      	ldr	r3, [r3, #0]
   1226a:	4604      	mov	r4, r0
   1226c:	4298      	cmp	r0, r3
   1226e:	d30a      	bcc.n	12286 <rpc_transport_ipc_data_free+0x22>
   12270:	4b0b      	ldr	r3, [pc, #44]	; (122a0 <rpc_transport_ipc_data_free+0x3c>)
   12272:	681b      	ldr	r3, [r3, #0]
   12274:	4298      	cmp	r0, r3
   12276:	d206      	bcs.n	12286 <rpc_transport_ipc_data_free+0x22>
   12278:	f7ff ffa8 	bl	121cc <rpc_transport_ipc_ctrl_msg_alloc>
   1227c:	b938      	cbnz	r0, 1228e <rpc_transport_ipc_data_free+0x2a>
   1227e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12282:	f7fe b8c9 	b.w	10418 <nrf_modem_os_application_irq_set>
   12286:	4620      	mov	r0, r4
   12288:	f7fe f90c 	bl	104a4 <nrf_modem_os_shm_tx_free>
   1228c:	e7f7      	b.n	1227e <rpc_transport_ipc_data_free+0x1a>
   1228e:	4a05      	ldr	r2, [pc, #20]	; (122a4 <rpc_transport_ipc_data_free+0x40>)
   12290:	6084      	str	r4, [r0, #8]
   12292:	6002      	str	r2, [r0, #0]
   12294:	f7ff ff62 	bl	1215c <rpc_transport_ipc_ctrl_msg_send>
   12298:	e7f1      	b.n	1227e <rpc_transport_ipc_data_free+0x1a>
   1229a:	bf00      	nop
   1229c:	2001514c 	.word	0x2001514c
   122a0:	20015148 	.word	0x20015148
   122a4:	00020001 	.word	0x00020001

000122a8 <rpc_transport_ipc_init>:
   122a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122ac:	2200      	movs	r2, #0
   122ae:	b095      	sub	sp, #84	; 0x54
   122b0:	4605      	mov	r5, r0
   122b2:	494f      	ldr	r1, [pc, #316]	; (123f0 <rpc_transport_ipc_init+0x148>)
   122b4:	7900      	ldrb	r0, [r0, #4]
   122b6:	f003 fba1 	bl	159fc <nrfx_ipc_init>
   122ba:	2238      	movs	r2, #56	; 0x38
   122bc:	2100      	movs	r1, #0
   122be:	a803      	add	r0, sp, #12
   122c0:	f005 fe37 	bl	17f32 <memset>
   122c4:	2302      	movs	r3, #2
   122c6:	9304      	str	r3, [sp, #16]
   122c8:	2308      	movs	r3, #8
   122ca:	9306      	str	r3, [sp, #24]
   122cc:	2320      	movs	r3, #32
   122ce:	9308      	str	r3, [sp, #32]
   122d0:	2301      	movs	r3, #1
   122d2:	930b      	str	r3, [sp, #44]	; 0x2c
   122d4:	2304      	movs	r3, #4
   122d6:	930d      	str	r3, [sp, #52]	; 0x34
   122d8:	2310      	movs	r3, #16
   122da:	f04f 0c40 	mov.w	ip, #64	; 0x40
   122de:	930f      	str	r3, [sp, #60]	; 0x3c
   122e0:	2380      	movs	r3, #128	; 0x80
   122e2:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   122e6:	23d5      	movs	r3, #213	; 0xd5
   122e8:	a803      	add	r0, sp, #12
   122ea:	9313      	str	r3, [sp, #76]	; 0x4c
   122ec:	f003 fb9e 	bl	15a2c <nrfx_ipc_config_load>
   122f0:	682b      	ldr	r3, [r5, #0]
   122f2:	2100      	movs	r1, #0
   122f4:	685a      	ldr	r2, [r3, #4]
   122f6:	6818      	ldr	r0, [r3, #0]
   122f8:	f005 fe1b 	bl	17f32 <memset>
   122fc:	682a      	ldr	r2, [r5, #0]
   122fe:	6814      	ldr	r4, [r2, #0]
   12300:	69d3      	ldr	r3, [r2, #28]
   12302:	f104 0660 	add.w	r6, r4, #96	; 0x60
   12306:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   1230a:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   1230e:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   12312:	f104 0920 	add.w	r9, r4, #32
   12316:	2b00      	cmp	r3, #0
   12318:	d065      	beq.n	123e6 <rpc_transport_ipc_init+0x13e>
   1231a:	f104 0840 	add.w	r8, r4, #64	; 0x40
   1231e:	4935      	ldr	r1, [pc, #212]	; (123f4 <rpc_transport_ipc_init+0x14c>)
   12320:	f8c1 9000 	str.w	r9, [r1]
   12324:	b13b      	cbz	r3, 12336 <rpc_transport_ipc_init+0x8e>
   12326:	6992      	ldr	r2, [r2, #24]
   12328:	4640      	mov	r0, r8
   1232a:	f8c8 2004 	str.w	r2, [r8, #4]
   1232e:	f8c8 3000 	str.w	r3, [r8]
   12332:	f7ff fdd7 	bl	11ee4 <ipc_trace_init>
   12336:	6828      	ldr	r0, [r5, #0]
   12338:	4d2f      	ldr	r5, [pc, #188]	; (123f8 <rpc_transport_ipc_init+0x150>)
   1233a:	2300      	movs	r3, #0
   1233c:	602f      	str	r7, [r5, #0]
   1233e:	4d2f      	ldr	r5, [pc, #188]	; (123fc <rpc_transport_ipc_init+0x154>)
   12340:	2101      	movs	r1, #1
   12342:	602e      	str	r6, [r5, #0]
   12344:	2508      	movs	r5, #8
   12346:	6902      	ldr	r2, [r0, #16]
   12348:	6940      	ldr	r0, [r0, #20]
   1234a:	7023      	strb	r3, [r4, #0]
   1234c:	7063      	strb	r3, [r4, #1]
   1234e:	70a1      	strb	r1, [r4, #2]
   12350:	70e3      	strb	r3, [r4, #3]
   12352:	6062      	str	r2, [r4, #4]
   12354:	60a0      	str	r0, [r4, #8]
   12356:	60e6      	str	r6, [r4, #12]
   12358:	6127      	str	r7, [r4, #16]
   1235a:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
   1235e:	f8c4 9014 	str.w	r9, [r4, #20]
   12362:	f8c4 8018 	str.w	r8, [r4, #24]
   12366:	707b      	strb	r3, [r7, #1]
   12368:	70bb      	strb	r3, [r7, #2]
   1236a:	70fb      	strb	r3, [r7, #3]
   1236c:	2714      	movs	r7, #20
   1236e:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
   12372:	4d23      	ldr	r5, [pc, #140]	; (12400 <rpc_transport_ipc_init+0x158>)
   12374:	7073      	strb	r3, [r6, #1]
   12376:	f8c5 b000 	str.w	fp, [r5]
   1237a:	4d22      	ldr	r5, [pc, #136]	; (12404 <rpc_transport_ipc_init+0x15c>)
   1237c:	70b3      	strb	r3, [r6, #2]
   1237e:	f8c5 a000 	str.w	sl, [r5]
   12382:	4d21      	ldr	r5, [pc, #132]	; (12408 <rpc_transport_ipc_init+0x160>)
   12384:	70f3      	strb	r3, [r6, #3]
   12386:	602a      	str	r2, [r5, #0]
   12388:	4402      	add	r2, r0
   1238a:	4820      	ldr	r0, [pc, #128]	; (1240c <rpc_transport_ipc_init+0x164>)
   1238c:	4d20      	ldr	r5, [pc, #128]	; (12410 <rpc_transport_ipc_init+0x168>)
   1238e:	6002      	str	r2, [r0, #0]
   12390:	4a20      	ldr	r2, [pc, #128]	; (12414 <rpc_transport_ipc_init+0x16c>)
   12392:	4e21      	ldr	r6, [pc, #132]	; (12418 <rpc_transport_ipc_init+0x170>)
   12394:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   12398:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   1239c:	4c1f      	ldr	r4, [pc, #124]	; (1241c <rpc_transport_ipc_init+0x174>)
   1239e:	7029      	strb	r1, [r5, #0]
   123a0:	491f      	ldr	r1, [pc, #124]	; (12420 <rpc_transport_ipc_init+0x178>)
   123a2:	6023      	str	r3, [r4, #0]
   123a4:	9302      	str	r3, [sp, #8]
   123a6:	600b      	str	r3, [r1, #0]
   123a8:	680b      	ldr	r3, [r1, #0]
   123aa:	9302      	str	r3, [sp, #8]
   123ac:	9b02      	ldr	r3, [sp, #8]
   123ae:	2000      	movs	r0, #0
   123b0:	a901      	add	r1, sp, #4
   123b2:	9701      	str	r7, [sp, #4]
   123b4:	f7fd fe18 	bl	ffe8 <nrf_modem_os_timedwait>
   123b8:	9b01      	ldr	r3, [sp, #4]
   123ba:	3b14      	subs	r3, #20
   123bc:	441e      	add	r6, r3
   123be:	782b      	ldrb	r3, [r5, #0]
   123c0:	2b01      	cmp	r3, #1
   123c2:	d104      	bne.n	123ce <rpc_transport_ipc_init+0x126>
   123c4:	2e00      	cmp	r6, #0
   123c6:	d1f2      	bne.n	123ae <rpc_transport_ipc_init+0x106>
   123c8:	f06f 033b 	mvn.w	r3, #59	; 0x3b
   123cc:	6023      	str	r3, [r4, #0]
   123ce:	6824      	ldr	r4, [r4, #0]
   123d0:	b95c      	cbnz	r4, 123ea <rpc_transport_ipc_init+0x142>
   123d2:	4b14      	ldr	r3, [pc, #80]	; (12424 <rpc_transport_ipc_init+0x17c>)
   123d4:	701c      	strb	r4, [r3, #0]
   123d6:	4b14      	ldr	r3, [pc, #80]	; (12428 <rpc_transport_ipc_init+0x180>)
   123d8:	801c      	strh	r4, [r3, #0]
   123da:	4b14      	ldr	r3, [pc, #80]	; (1242c <rpc_transport_ipc_init+0x184>)
   123dc:	801c      	strh	r4, [r3, #0]
   123de:	4620      	mov	r0, r4
   123e0:	b015      	add	sp, #84	; 0x54
   123e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123e6:	4698      	mov	r8, r3
   123e8:	e799      	b.n	1231e <rpc_transport_ipc_init+0x76>
   123ea:	f003 fb3f 	bl	15a6c <nrfx_ipc_uninit>
   123ee:	e7f6      	b.n	123de <rpc_transport_ipc_init+0x136>
   123f0:	00012431 	.word	0x00012431
   123f4:	20015134 	.word	0x20015134
   123f8:	20015144 	.word	0x20015144
   123fc:	2001513c 	.word	0x2001513c
   12400:	20015140 	.word	0x20015140
   12404:	20015138 	.word	0x20015138
   12408:	2001514c 	.word	0x2001514c
   1240c:	20015148 	.word	0x20015148
   12410:	2001779e 	.word	0x2001779e
   12414:	4002a000 	.word	0x4002a000
   12418:	000249f0 	.word	0x000249f0
   1241c:	20015128 	.word	0x20015128
   12420:	40005610 	.word	0x40005610
   12424:	2001779f 	.word	0x2001779f
   12428:	20015c3a 	.word	0x20015c3a
   1242c:	20015c38 	.word	0x20015c38

00012430 <ipc_irq_handler>:
   12430:	b570      	push	{r4, r5, r6, lr}
   12432:	4604      	mov	r4, r0
   12434:	0620      	lsls	r0, r4, #24
   12436:	d50c      	bpl.n	12452 <ipc_irq_handler+0x22>
   12438:	f7ff fd86 	bl	11f48 <ipc_trace_handle>
   1243c:	f7ff fe18 	bl	12070 <rpc_trace_coredump_in_progress>
   12440:	b138      	cbz	r0, 12452 <ipc_irq_handler+0x22>
   12442:	22e0      	movs	r2, #224	; 0xe0
   12444:	4b3f      	ldr	r3, [pc, #252]	; (12544 <ipc_irq_handler+0x114>)
   12446:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   1244a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1244e:	605a      	str	r2, [r3, #4]
   12450:	bd70      	pop	{r4, r5, r6, pc}
   12452:	07e1      	lsls	r1, r4, #31
   12454:	d548      	bpl.n	124e8 <ipc_irq_handler+0xb8>
   12456:	f248 0202 	movw	r2, #32770	; 0x8002
   1245a:	4b3b      	ldr	r3, [pc, #236]	; (12548 <ipc_irq_handler+0x118>)
   1245c:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   12460:	4293      	cmp	r3, r2
   12462:	d035      	beq.n	124d0 <ipc_irq_handler+0xa0>
   12464:	d81b      	bhi.n	1249e <ipc_irq_handler+0x6e>
   12466:	f243 0232 	movw	r2, #12338	; 0x3032
   1246a:	4293      	cmp	r3, r2
   1246c:	d036      	beq.n	124dc <ipc_irq_handler+0xac>
   1246e:	d80b      	bhi.n	12488 <ipc_irq_handler+0x58>
   12470:	3b01      	subs	r3, #1
   12472:	2b01      	cmp	r3, #1
   12474:	d8ec      	bhi.n	12450 <ipc_irq_handler+0x20>
   12476:	2203      	movs	r2, #3
   12478:	200e      	movs	r0, #14
   1247a:	4b34      	ldr	r3, [pc, #208]	; (1254c <ipc_irq_handler+0x11c>)
   1247c:	701a      	strb	r2, [r3, #0]
   1247e:	4b34      	ldr	r3, [pc, #208]	; (12550 <ipc_irq_handler+0x120>)
   12480:	6018      	str	r0, [r3, #0]
   12482:	f007 fd42 	bl	19f0a <rpc_transport_ipc_fault_handler>
   12486:	e7e3      	b.n	12450 <ipc_irq_handler+0x20>
   12488:	f248 0201 	movw	r2, #32769	; 0x8001
   1248c:	4293      	cmp	r3, r2
   1248e:	d1df      	bne.n	12450 <ipc_irq_handler+0x20>
   12490:	2203      	movs	r2, #3
   12492:	4b2e      	ldr	r3, [pc, #184]	; (1254c <ipc_irq_handler+0x11c>)
   12494:	701a      	strb	r2, [r3, #0]
   12496:	2216      	movs	r2, #22
   12498:	4b2d      	ldr	r3, [pc, #180]	; (12550 <ipc_irq_handler+0x120>)
   1249a:	601a      	str	r2, [r3, #0]
   1249c:	e7d8      	b.n	12450 <ipc_irq_handler+0x20>
   1249e:	4a2d      	ldr	r2, [pc, #180]	; (12554 <ipc_irq_handler+0x124>)
   124a0:	4293      	cmp	r3, r2
   124a2:	d80c      	bhi.n	124be <ipc_irq_handler+0x8e>
   124a4:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   124a8:	d80c      	bhi.n	124c4 <ipc_irq_handler+0x94>
   124aa:	f248 0203 	movw	r2, #32771	; 0x8003
   124ae:	4293      	cmp	r3, r2
   124b0:	d1ce      	bne.n	12450 <ipc_irq_handler+0x20>
   124b2:	2203      	movs	r2, #3
   124b4:	4b25      	ldr	r3, [pc, #148]	; (1254c <ipc_irq_handler+0x11c>)
   124b6:	701a      	strb	r2, [r3, #0]
   124b8:	220c      	movs	r2, #12
   124ba:	4b25      	ldr	r3, [pc, #148]	; (12550 <ipc_irq_handler+0x120>)
   124bc:	e7ed      	b.n	1249a <ipc_irq_handler+0x6a>
   124be:	4a26      	ldr	r2, [pc, #152]	; (12558 <ipc_irq_handler+0x128>)
   124c0:	4293      	cmp	r3, r2
   124c2:	d1c5      	bne.n	12450 <ipc_irq_handler+0x20>
   124c4:	2103      	movs	r1, #3
   124c6:	4a21      	ldr	r2, [pc, #132]	; (1254c <ipc_irq_handler+0x11c>)
   124c8:	7011      	strb	r1, [r2, #0]
   124ca:	4a21      	ldr	r2, [pc, #132]	; (12550 <ipc_irq_handler+0x120>)
   124cc:	6013      	str	r3, [r2, #0]
   124ce:	e7bf      	b.n	12450 <ipc_irq_handler+0x20>
   124d0:	2203      	movs	r2, #3
   124d2:	4b1e      	ldr	r3, [pc, #120]	; (1254c <ipc_irq_handler+0x11c>)
   124d4:	701a      	strb	r2, [r3, #0]
   124d6:	222d      	movs	r2, #45	; 0x2d
   124d8:	4b1d      	ldr	r3, [pc, #116]	; (12550 <ipc_irq_handler+0x120>)
   124da:	e7de      	b.n	1249a <ipc_irq_handler+0x6a>
   124dc:	2203      	movs	r2, #3
   124de:	4b1b      	ldr	r3, [pc, #108]	; (1254c <ipc_irq_handler+0x11c>)
   124e0:	701a      	strb	r2, [r3, #0]
   124e2:	2205      	movs	r2, #5
   124e4:	4b1a      	ldr	r3, [pc, #104]	; (12550 <ipc_irq_handler+0x120>)
   124e6:	e7d8      	b.n	1249a <ipc_irq_handler+0x6a>
   124e8:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   124ec:	d003      	beq.n	124f6 <ipc_irq_handler+0xc6>
   124ee:	2202      	movs	r2, #2
   124f0:	4b16      	ldr	r3, [pc, #88]	; (1254c <ipc_irq_handler+0x11c>)
   124f2:	701a      	strb	r2, [r3, #0]
   124f4:	e7ac      	b.n	12450 <ipc_irq_handler+0x20>
   124f6:	0762      	lsls	r2, r4, #29
   124f8:	d505      	bpl.n	12506 <ipc_irq_handler+0xd6>
   124fa:	4b14      	ldr	r3, [pc, #80]	; (1254c <ipc_irq_handler+0x11c>)
   124fc:	781a      	ldrb	r2, [r3, #0]
   124fe:	461e      	mov	r6, r3
   12500:	b93a      	cbnz	r2, 12512 <ipc_irq_handler+0xe2>
   12502:	f7fd ff89 	bl	10418 <nrf_modem_os_application_irq_set>
   12506:	06e3      	lsls	r3, r4, #27
   12508:	d5a2      	bpl.n	12450 <ipc_irq_handler+0x20>
   1250a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1250e:	f7fd bf83 	b.w	10418 <nrf_modem_os_application_irq_set>
   12512:	2a01      	cmp	r2, #1
   12514:	d1f7      	bne.n	12506 <ipc_irq_handler+0xd6>
   12516:	4a11      	ldr	r2, [pc, #68]	; (1255c <ipc_irq_handler+0x12c>)
   12518:	4811      	ldr	r0, [pc, #68]	; (12560 <ipc_irq_handler+0x130>)
   1251a:	6812      	ldr	r2, [r2, #0]
   1251c:	6891      	ldr	r1, [r2, #8]
   1251e:	6041      	str	r1, [r0, #4]
   12520:	6852      	ldr	r2, [r2, #4]
   12522:	6002      	str	r2, [r0, #0]
   12524:	b101      	cbz	r1, 12528 <ipc_irq_handler+0xf8>
   12526:	b92a      	cbnz	r2, 12534 <ipc_irq_handler+0x104>
   12528:	2303      	movs	r3, #3
   1252a:	2216      	movs	r2, #22
   1252c:	7033      	strb	r3, [r6, #0]
   1252e:	4b08      	ldr	r3, [pc, #32]	; (12550 <ipc_irq_handler+0x120>)
   12530:	601a      	str	r2, [r3, #0]
   12532:	e7e8      	b.n	12506 <ipc_irq_handler+0xd6>
   12534:	6809      	ldr	r1, [r1, #0]
   12536:	2910      	cmp	r1, #16
   12538:	d8f6      	bhi.n	12528 <ipc_irq_handler+0xf8>
   1253a:	6812      	ldr	r2, [r2, #0]
   1253c:	2a10      	cmp	r2, #16
   1253e:	d8f3      	bhi.n	12528 <ipc_irq_handler+0xf8>
   12540:	701d      	strb	r5, [r3, #0]
   12542:	e7e0      	b.n	12506 <ipc_irq_handler+0xd6>
   12544:	e000e100 	.word	0xe000e100
   12548:	4002a000 	.word	0x4002a000
   1254c:	2001779e 	.word	0x2001779e
   12550:	20015128 	.word	0x20015128
   12554:	04400004 	.word	0x04400004
   12558:	05500001 	.word	0x05500001
   1255c:	20015134 	.word	0x20015134
   12560:	2001512c 	.word	0x2001512c

00012564 <interface_init>:
   12564:	b508      	push	{r3, lr}
   12566:	f44f 72b4 	mov.w	r2, #360	; 0x168
   1256a:	2100      	movs	r1, #0
   1256c:	4802      	ldr	r0, [pc, #8]	; (12578 <interface_init+0x14>)
   1256e:	f005 fce0 	bl	17f32 <memset>
   12572:	2000      	movs	r0, #0
   12574:	bd08      	pop	{r3, pc}
   12576:	bf00      	nop
   12578:	20015150 	.word	0x20015150

0001257c <interface_socket_allocate>:
   1257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1257e:	4606      	mov	r6, r0
   12580:	2400      	movs	r4, #0
   12582:	2728      	movs	r7, #40	; 0x28
   12584:	4b0f      	ldr	r3, [pc, #60]	; (125c4 <interface_socket_allocate+0x48>)
   12586:	fb07 f004 	mul.w	r0, r7, r4
   1258a:	181d      	adds	r5, r3, r0
   1258c:	5818      	ldr	r0, [r3, r0]
   1258e:	b988      	cbnz	r0, 125b4 <interface_socket_allocate+0x38>
   12590:	f04f 37ff 	mov.w	r7, #4294967295
   12594:	2301      	movs	r3, #1
   12596:	4628      	mov	r0, r5
   12598:	61af      	str	r7, [r5, #24]
   1259a:	602b      	str	r3, [r5, #0]
   1259c:	f006 fdd0 	bl	19140 <packet_handler_alloc_and_init>
   125a0:	b168      	cbz	r0, 125be <interface_socket_allocate+0x42>
   125a2:	4628      	mov	r0, r5
   125a4:	f006 fde3 	bl	1916e <socket_free>
   125a8:	200c      	movs	r0, #12
   125aa:	f7fd fdd5 	bl	10158 <nrf_modem_os_errno_set>
   125ae:	f04f 34ff 	mov.w	r4, #4294967295
   125b2:	e005      	b.n	125c0 <interface_socket_allocate+0x44>
   125b4:	3401      	adds	r4, #1
   125b6:	2c09      	cmp	r4, #9
   125b8:	d1e5      	bne.n	12586 <interface_socket_allocate+0xa>
   125ba:	2069      	movs	r0, #105	; 0x69
   125bc:	e7f5      	b.n	125aa <interface_socket_allocate+0x2e>
   125be:	6035      	str	r5, [r6, #0]
   125c0:	4620      	mov	r0, r4
   125c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   125c4:	20015150 	.word	0x20015150

000125c8 <interface_socket_free>:
   125c8:	2808      	cmp	r0, #8
   125ca:	d805      	bhi.n	125d8 <interface_socket_free+0x10>
   125cc:	2228      	movs	r2, #40	; 0x28
   125ce:	4b03      	ldr	r3, [pc, #12]	; (125dc <interface_socket_free+0x14>)
   125d0:	fb02 3000 	mla	r0, r2, r0, r3
   125d4:	f006 bdcb 	b.w	1916e <socket_free>
   125d8:	4770      	bx	lr
   125da:	bf00      	nop
   125dc:	20015150 	.word	0x20015150

000125e0 <interface_socket_packet_handler_update>:
   125e0:	2808      	cmp	r0, #8
   125e2:	b570      	push	{r4, r5, r6, lr}
   125e4:	d812      	bhi.n	1260c <interface_socket_packet_handler_update+0x2c>
   125e6:	2328      	movs	r3, #40	; 0x28
   125e8:	4358      	muls	r0, r3
   125ea:	4c09      	ldr	r4, [pc, #36]	; (12610 <interface_socket_packet_handler_update+0x30>)
   125ec:	5823      	ldr	r3, [r4, r0]
   125ee:	1825      	adds	r5, r4, r0
   125f0:	b163      	cbz	r3, 1260c <interface_socket_packet_handler_update+0x2c>
   125f2:	4628      	mov	r0, r5
   125f4:	69ee      	ldr	r6, [r5, #28]
   125f6:	f006 fda3 	bl	19140 <packet_handler_alloc_and_init>
   125fa:	4604      	mov	r4, r0
   125fc:	b920      	cbnz	r0, 12608 <interface_socket_packet_handler_update+0x28>
   125fe:	4630      	mov	r0, r6
   12600:	f007 fc65 	bl	19ece <packet_handler_delete>
   12604:	4620      	mov	r0, r4
   12606:	bd70      	pop	{r4, r5, r6, pc}
   12608:	61ee      	str	r6, [r5, #28]
   1260a:	e7fb      	b.n	12604 <interface_socket_packet_handler_update+0x24>
   1260c:	2402      	movs	r4, #2
   1260e:	e7f9      	b.n	12604 <interface_socket_packet_handler_update+0x24>
   12610:	20015150 	.word	0x20015150

00012614 <interface_socket_wait>:
   12614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12618:	4615      	mov	r5, r2
   1261a:	2228      	movs	r2, #40	; 0x28
   1261c:	4350      	muls	r0, r2
   1261e:	461e      	mov	r6, r3
   12620:	4b0e      	ldr	r3, [pc, #56]	; (1265c <interface_socket_wait+0x48>)
   12622:	460c      	mov	r4, r1
   12624:	181f      	adds	r7, r3, r0
   12626:	581b      	ldr	r3, [r3, r0]
   12628:	402b      	ands	r3, r5
   1262a:	428b      	cmp	r3, r1
   1262c:	d102      	bne.n	12634 <interface_socket_wait+0x20>
   1262e:	2000      	movs	r0, #0
   12630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12634:	687b      	ldr	r3, [r7, #4]
   12636:	2b00      	cmp	r3, #0
   12638:	d1f9      	bne.n	1262e <interface_socket_wait+0x1a>
   1263a:	46b8      	mov	r8, r7
   1263c:	f8d8 3000 	ldr.w	r3, [r8]
   12640:	402b      	ands	r3, r5
   12642:	42a3      	cmp	r3, r4
   12644:	d0f3      	beq.n	1262e <interface_socket_wait+0x1a>
   12646:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1264a:	2b00      	cmp	r3, #0
   1264c:	d1ef      	bne.n	1262e <interface_socket_wait+0x1a>
   1264e:	4631      	mov	r1, r6
   12650:	4638      	mov	r0, r7
   12652:	f7fd fcc9 	bl	ffe8 <nrf_modem_os_timedwait>
   12656:	2800      	cmp	r0, #0
   12658:	d0f0      	beq.n	1263c <interface_socket_wait+0x28>
   1265a:	e7e9      	b.n	12630 <interface_socket_wait+0x1c>
   1265c:	20015150 	.word	0x20015150

00012660 <interface_from_internal_id_search>:
   12660:	4b0a      	ldr	r3, [pc, #40]	; (1268c <interface_from_internal_id_search+0x2c>)
   12662:	4602      	mov	r2, r0
   12664:	b530      	push	{r4, r5, lr}
   12666:	2000      	movs	r0, #0
   12668:	461c      	mov	r4, r3
   1266a:	2128      	movs	r1, #40	; 0x28
   1266c:	fb01 f500 	mul.w	r5, r1, r0
   12670:	5965      	ldr	r5, [r4, r5]
   12672:	b115      	cbz	r5, 1267a <interface_from_internal_id_search+0x1a>
   12674:	699d      	ldr	r5, [r3, #24]
   12676:	4295      	cmp	r5, r2
   12678:	d006      	beq.n	12688 <interface_from_internal_id_search+0x28>
   1267a:	3001      	adds	r0, #1
   1267c:	2809      	cmp	r0, #9
   1267e:	f103 0328 	add.w	r3, r3, #40	; 0x28
   12682:	d1f3      	bne.n	1266c <interface_from_internal_id_search+0xc>
   12684:	f04f 30ff 	mov.w	r0, #4294967295
   12688:	bd30      	pop	{r4, r5, pc}
   1268a:	bf00      	nop
   1268c:	20015150 	.word	0x20015150

00012690 <interface_socket_from_handle_get>:
   12690:	2808      	cmp	r0, #8
   12692:	d809      	bhi.n	126a8 <interface_socket_from_handle_get+0x18>
   12694:	2328      	movs	r3, #40	; 0x28
   12696:	4358      	muls	r0, r3
   12698:	4a04      	ldr	r2, [pc, #16]	; (126ac <interface_socket_from_handle_get+0x1c>)
   1269a:	1813      	adds	r3, r2, r0
   1269c:	5812      	ldr	r2, [r2, r0]
   1269e:	2a00      	cmp	r2, #0
   126a0:	bf14      	ite	ne
   126a2:	4618      	movne	r0, r3
   126a4:	2000      	moveq	r0, #0
   126a6:	4770      	bx	lr
   126a8:	2000      	movs	r0, #0
   126aa:	4770      	bx	lr
   126ac:	20015150 	.word	0x20015150

000126b0 <interface_socket_setopt>:
   126b0:	2808      	cmp	r0, #8
   126b2:	b538      	push	{r3, r4, r5, lr}
   126b4:	d82c      	bhi.n	12710 <interface_socket_setopt+0x60>
   126b6:	2428      	movs	r4, #40	; 0x28
   126b8:	4360      	muls	r0, r4
   126ba:	4d16      	ldr	r5, [pc, #88]	; (12714 <interface_socket_setopt+0x64>)
   126bc:	182c      	adds	r4, r5, r0
   126be:	5828      	ldr	r0, [r5, r0]
   126c0:	b330      	cbz	r0, 12710 <interface_socket_setopt+0x60>
   126c2:	2901      	cmp	r1, #1
   126c4:	d005      	beq.n	126d2 <interface_socket_setopt+0x22>
   126c6:	202a      	movs	r0, #42	; 0x2a
   126c8:	f7fd fd46 	bl	10158 <nrf_modem_os_errno_set>
   126cc:	f04f 30ff 	mov.w	r0, #4294967295
   126d0:	e01b      	b.n	1270a <interface_socket_setopt+0x5a>
   126d2:	f1a2 0114 	sub.w	r1, r2, #20
   126d6:	2901      	cmp	r1, #1
   126d8:	d8f5      	bhi.n	126c6 <interface_socket_setopt+0x16>
   126da:	9904      	ldr	r1, [sp, #16]
   126dc:	2908      	cmp	r1, #8
   126de:	d115      	bne.n	1270c <interface_socket_setopt+0x5c>
   126e0:	b1a3      	cbz	r3, 1270c <interface_socket_setopt+0x5c>
   126e2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   126e6:	6858      	ldr	r0, [r3, #4]
   126e8:	2100      	movs	r1, #0
   126ea:	fbb0 f0f5 	udiv	r0, r0, r5
   126ee:	681b      	ldr	r3, [r3, #0]
   126f0:	fbe5 0103 	umlal	r0, r1, r5, r3
   126f4:	2901      	cmp	r1, #1
   126f6:	bf08      	it	eq
   126f8:	2800      	cmpeq	r0, #0
   126fa:	d301      	bcc.n	12700 <interface_socket_setopt+0x50>
   126fc:	2025      	movs	r0, #37	; 0x25
   126fe:	e7e3      	b.n	126c8 <interface_socket_setopt+0x18>
   12700:	2a14      	cmp	r2, #20
   12702:	bf0c      	ite	eq
   12704:	6220      	streq	r0, [r4, #32]
   12706:	6260      	strne	r0, [r4, #36]	; 0x24
   12708:	2000      	movs	r0, #0
   1270a:	bd38      	pop	{r3, r4, r5, pc}
   1270c:	2016      	movs	r0, #22
   1270e:	e7db      	b.n	126c8 <interface_socket_setopt+0x18>
   12710:	2009      	movs	r0, #9
   12712:	e7d9      	b.n	126c8 <interface_socket_setopt+0x18>
   12714:	20015150 	.word	0x20015150

00012718 <interface_socket_getopt>:
   12718:	b570      	push	{r4, r5, r6, lr}
   1271a:	2808      	cmp	r0, #8
   1271c:	9d04      	ldr	r5, [sp, #16]
   1271e:	d832      	bhi.n	12786 <interface_socket_getopt+0x6e>
   12720:	2428      	movs	r4, #40	; 0x28
   12722:	4360      	muls	r0, r4
   12724:	4e19      	ldr	r6, [pc, #100]	; (1278c <interface_socket_getopt+0x74>)
   12726:	1834      	adds	r4, r6, r0
   12728:	5830      	ldr	r0, [r6, r0]
   1272a:	b360      	cbz	r0, 12786 <interface_socket_getopt+0x6e>
   1272c:	2901      	cmp	r1, #1
   1272e:	d005      	beq.n	1273c <interface_socket_getopt+0x24>
   12730:	202a      	movs	r0, #42	; 0x2a
   12732:	f7fd fd11 	bl	10158 <nrf_modem_os_errno_set>
   12736:	f04f 30ff 	mov.w	r0, #4294967295
   1273a:	e00c      	b.n	12756 <interface_socket_getopt+0x3e>
   1273c:	b103      	cbz	r3, 12740 <interface_socket_getopt+0x28>
   1273e:	b90d      	cbnz	r5, 12744 <interface_socket_getopt+0x2c>
   12740:	2016      	movs	r0, #22
   12742:	e7f6      	b.n	12732 <interface_socket_getopt+0x1a>
   12744:	2a04      	cmp	r2, #4
   12746:	d107      	bne.n	12758 <interface_socket_getopt+0x40>
   12748:	682a      	ldr	r2, [r5, #0]
   1274a:	2a04      	cmp	r2, #4
   1274c:	d1f8      	bne.n	12740 <interface_socket_getopt+0x28>
   1274e:	2000      	movs	r0, #0
   12750:	6862      	ldr	r2, [r4, #4]
   12752:	601a      	str	r2, [r3, #0]
   12754:	6060      	str	r0, [r4, #4]
   12756:	bd70      	pop	{r4, r5, r6, pc}
   12758:	f1a2 0114 	sub.w	r1, r2, #20
   1275c:	2901      	cmp	r1, #1
   1275e:	d8e7      	bhi.n	12730 <interface_socket_getopt+0x18>
   12760:	6829      	ldr	r1, [r5, #0]
   12762:	2908      	cmp	r1, #8
   12764:	d1ec      	bne.n	12740 <interface_socket_getopt+0x28>
   12766:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   1276a:	2a14      	cmp	r2, #20
   1276c:	bf18      	it	ne
   1276e:	4608      	movne	r0, r1
   12770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12774:	fbb0 f1f2 	udiv	r1, r0, r2
   12778:	6019      	str	r1, [r3, #0]
   1277a:	fb02 0111 	mls	r1, r2, r1, r0
   1277e:	434a      	muls	r2, r1
   12780:	2000      	movs	r0, #0
   12782:	605a      	str	r2, [r3, #4]
   12784:	e7e7      	b.n	12756 <interface_socket_getopt+0x3e>
   12786:	2009      	movs	r0, #9
   12788:	e7d3      	b.n	12732 <interface_socket_getopt+0x1a>
   1278a:	bf00      	nop
   1278c:	20015150 	.word	0x20015150

00012790 <interface_socket_fcntl>:
   12790:	2808      	cmp	r0, #8
   12792:	b510      	push	{r4, lr}
   12794:	d82c      	bhi.n	127f0 <interface_socket_fcntl+0x60>
   12796:	2328      	movs	r3, #40	; 0x28
   12798:	4343      	muls	r3, r0
   1279a:	4c16      	ldr	r4, [pc, #88]	; (127f4 <interface_socket_fcntl+0x64>)
   1279c:	58e0      	ldr	r0, [r4, r3]
   1279e:	b338      	cbz	r0, 127f0 <interface_socket_fcntl+0x60>
   127a0:	2901      	cmp	r1, #1
   127a2:	d11d      	bne.n	127e0 <interface_socket_fcntl+0x50>
   127a4:	f012 0001 	ands.w	r0, r2, #1
   127a8:	58e2      	ldr	r2, [r4, r3]
   127aa:	d004      	beq.n	127b6 <interface_socket_fcntl+0x26>
   127ac:	2000      	movs	r0, #0
   127ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   127b2:	50e2      	str	r2, [r4, r3]
   127b4:	bd10      	pop	{r4, pc}
   127b6:	0092      	lsls	r2, r2, #2
   127b8:	d407      	bmi.n	127ca <interface_socket_fcntl+0x3a>
   127ba:	58e2      	ldr	r2, [r4, r3]
   127bc:	b292      	uxth	r2, r2
   127be:	2a0a      	cmp	r2, #10
   127c0:	d003      	beq.n	127ca <interface_socket_fcntl+0x3a>
   127c2:	58e2      	ldr	r2, [r4, r3]
   127c4:	b292      	uxth	r2, r2
   127c6:	2a0b      	cmp	r2, #11
   127c8:	d105      	bne.n	127d6 <interface_socket_fcntl+0x46>
   127ca:	2023      	movs	r0, #35	; 0x23
   127cc:	f7fd fcc4 	bl	10158 <nrf_modem_os_errno_set>
   127d0:	f04f 30ff 	mov.w	r0, #4294967295
   127d4:	e7ee      	b.n	127b4 <interface_socket_fcntl+0x24>
   127d6:	58e2      	ldr	r2, [r4, r3]
   127d8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   127dc:	50e2      	str	r2, [r4, r3]
   127de:	e7e9      	b.n	127b4 <interface_socket_fcntl+0x24>
   127e0:	2902      	cmp	r1, #2
   127e2:	d103      	bne.n	127ec <interface_socket_fcntl+0x5c>
   127e4:	58e0      	ldr	r0, [r4, r3]
   127e6:	f3c0 7000 	ubfx	r0, r0, #28, #1
   127ea:	e7e3      	b.n	127b4 <interface_socket_fcntl+0x24>
   127ec:	2016      	movs	r0, #22
   127ee:	e7ed      	b.n	127cc <interface_socket_fcntl+0x3c>
   127f0:	2009      	movs	r0, #9
   127f2:	e7eb      	b.n	127cc <interface_socket_fcntl+0x3c>
   127f4:	20015150 	.word	0x20015150

000127f8 <rpc_error_to_nrf_errno>:
   127f8:	2810      	cmp	r0, #16
   127fa:	bf9a      	itte	ls
   127fc:	4b01      	ldrls	r3, [pc, #4]	; (12804 <rpc_error_to_nrf_errno+0xc>)
   127fe:	5618      	ldrsbls	r0, [r3, r0]
   12800:	202d      	movhi	r0, #45	; 0x2d
   12802:	4770      	bx	lr
   12804:	0001b552 	.word	0x0001b552

00012808 <ip_interface_init>:
   12808:	b510      	push	{r4, lr}
   1280a:	2400      	movs	r4, #0
   1280c:	4b06      	ldr	r3, [pc, #24]	; (12828 <ip_interface_init+0x20>)
   1280e:	2224      	movs	r2, #36	; 0x24
   12810:	601c      	str	r4, [r3, #0]
   12812:	4b06      	ldr	r3, [pc, #24]	; (1282c <ip_interface_init+0x24>)
   12814:	4621      	mov	r1, r4
   12816:	4806      	ldr	r0, [pc, #24]	; (12830 <ip_interface_init+0x28>)
   12818:	601c      	str	r4, [r3, #0]
   1281a:	f005 fb8a 	bl	17f32 <memset>
   1281e:	2201      	movs	r2, #1
   12820:	4b04      	ldr	r3, [pc, #16]	; (12834 <ip_interface_init+0x2c>)
   12822:	4620      	mov	r0, r4
   12824:	701a      	strb	r2, [r3, #0]
   12826:	bd10      	pop	{r4, pc}
   12828:	200152c8 	.word	0x200152c8
   1282c:	200152c4 	.word	0x200152c4
   12830:	200152cc 	.word	0x200152cc
   12834:	200177a0 	.word	0x200177a0

00012838 <ip_interface_open>:
   12838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1283a:	2300      	movs	r3, #0
   1283c:	f04f 34ff 	mov.w	r4, #4294967295
   12840:	e9cd 3400 	strd	r3, r4, [sp]
   12844:	4b3c      	ldr	r3, [pc, #240]	; (12938 <ip_interface_open+0x100>)
   12846:	4607      	mov	r7, r0
   12848:	781b      	ldrb	r3, [r3, #0]
   1284a:	460d      	mov	r5, r1
   1284c:	4616      	mov	r6, r2
   1284e:	b92b      	cbnz	r3, 1285c <ip_interface_open+0x24>
   12850:	2070      	movs	r0, #112	; 0x70
   12852:	f7fd fc81 	bl	10158 <nrf_modem_os_errno_set>
   12856:	4620      	mov	r0, r4
   12858:	b003      	add	sp, #12
   1285a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1285c:	f020 0308 	bic.w	r3, r0, #8
   12860:	2b02      	cmp	r3, #2
   12862:	d003      	beq.n	1286c <ip_interface_open+0x34>
   12864:	2805      	cmp	r0, #5
   12866:	d001      	beq.n	1286c <ip_interface_open+0x34>
   12868:	202f      	movs	r0, #47	; 0x2f
   1286a:	e7f2      	b.n	12852 <ip_interface_open+0x1a>
   1286c:	1e6b      	subs	r3, r5, #1
   1286e:	2b02      	cmp	r3, #2
   12870:	d905      	bls.n	1287e <ip_interface_open+0x46>
   12872:	2016      	movs	r0, #22
   12874:	f7fd fc70 	bl	10158 <nrf_modem_os_errno_set>
   12878:	f04f 34ff 	mov.w	r4, #4294967295
   1287c:	e7eb      	b.n	12856 <ip_interface_open+0x1e>
   1287e:	b15e      	cbz	r6, 12898 <ip_interface_open+0x60>
   12880:	2d01      	cmp	r5, #1
   12882:	d103      	bne.n	1288c <ip_interface_open+0x54>
   12884:	2e01      	cmp	r6, #1
   12886:	d105      	bne.n	12894 <ip_interface_open+0x5c>
   12888:	2602      	movs	r6, #2
   1288a:	e00a      	b.n	128a2 <ip_interface_open+0x6a>
   1288c:	2d02      	cmp	r5, #2
   1288e:	d1fb      	bne.n	12888 <ip_interface_open+0x50>
   12890:	2e02      	cmp	r6, #2
   12892:	d006      	beq.n	128a2 <ip_interface_open+0x6a>
   12894:	2029      	movs	r0, #41	; 0x29
   12896:	e7ed      	b.n	12874 <ip_interface_open+0x3c>
   12898:	2d01      	cmp	r5, #1
   1289a:	d010      	beq.n	128be <ip_interface_open+0x86>
   1289c:	2d03      	cmp	r5, #3
   1289e:	bf18      	it	ne
   128a0:	2602      	movne	r6, #2
   128a2:	4629      	mov	r1, r5
   128a4:	4668      	mov	r0, sp
   128a6:	4a25      	ldr	r2, [pc, #148]	; (1293c <ip_interface_open+0x104>)
   128a8:	f7ff fe68 	bl	1257c <interface_socket_allocate>
   128ac:	9b00      	ldr	r3, [sp, #0]
   128ae:	4604      	mov	r4, r0
   128b0:	b93b      	cbnz	r3, 128c2 <ip_interface_open+0x8a>
   128b2:	2669      	movs	r6, #105	; 0x69
   128b4:	4620      	mov	r0, r4
   128b6:	f7ff fe87 	bl	125c8 <interface_socket_free>
   128ba:	4630      	mov	r0, r6
   128bc:	e7da      	b.n	12874 <ip_interface_open+0x3c>
   128be:	462e      	mov	r6, r5
   128c0:	e7ef      	b.n	128a2 <ip_interface_open+0x6a>
   128c2:	f04f 31ff 	mov.w	r1, #4294967295
   128c6:	e9c3 7503 	strd	r7, r5, [r3, #12]
   128ca:	615e      	str	r6, [r3, #20]
   128cc:	f247 0201 	movw	r2, #28673	; 0x7001
   128d0:	2300      	movs	r3, #0
   128d2:	f006 fc9d 	bl	19210 <ip_interface_request_create>
   128d6:	4601      	mov	r1, r0
   128d8:	2800      	cmp	r0, #0
   128da:	d0ea      	beq.n	128b2 <ip_interface_open+0x7a>
   128dc:	6883      	ldr	r3, [r0, #8]
   128de:	2f05      	cmp	r7, #5
   128e0:	f103 030c 	add.w	r3, r3, #12
   128e4:	6083      	str	r3, [r0, #8]
   128e6:	d003      	beq.n	128f0 <ip_interface_open+0xb8>
   128e8:	2f0a      	cmp	r7, #10
   128ea:	bf0c      	ite	eq
   128ec:	2702      	moveq	r7, #2
   128ee:	2701      	movne	r7, #1
   128f0:	61ce      	str	r6, [r1, #28]
   128f2:	2301      	movs	r3, #1
   128f4:	f247 0201 	movw	r2, #28673	; 0x7001
   128f8:	9800      	ldr	r0, [sp, #0]
   128fa:	614f      	str	r7, [r1, #20]
   128fc:	618d      	str	r5, [r1, #24]
   128fe:	f006 fc9f 	bl	19240 <ip_interface_request_send>
   12902:	4606      	mov	r6, r0
   12904:	2800      	cmp	r0, #0
   12906:	d1d5      	bne.n	128b4 <ip_interface_open+0x7c>
   12908:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1290c:	2102      	movs	r1, #2
   1290e:	4620      	mov	r0, r4
   12910:	ab01      	add	r3, sp, #4
   12912:	f006 fca8 	bl	19266 <ip_interface_wait>
   12916:	4606      	mov	r6, r0
   12918:	2800      	cmp	r0, #0
   1291a:	d1cb      	bne.n	128b4 <ip_interface_open+0x7c>
   1291c:	3d02      	subs	r5, #2
   1291e:	2d01      	cmp	r5, #1
   12920:	d899      	bhi.n	12856 <ip_interface_open+0x1e>
   12922:	9b00      	ldr	r3, [sp, #0]
   12924:	681a      	ldr	r2, [r3, #0]
   12926:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1292a:	601a      	str	r2, [r3, #0]
   1292c:	681a      	ldr	r2, [r3, #0]
   1292e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   12932:	601a      	str	r2, [r3, #0]
   12934:	e78f      	b.n	12856 <ip_interface_open+0x1e>
   12936:	bf00      	nop
   12938:	200177a0 	.word	0x200177a0
   1293c:	000191af 	.word	0x000191af

00012940 <ip_interface_close>:
   12940:	f04f 33ff 	mov.w	r3, #4294967295
   12944:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12946:	4605      	mov	r5, r0
   12948:	9301      	str	r3, [sp, #4]
   1294a:	f7ff fea1 	bl	12690 <interface_socket_from_handle_get>
   1294e:	4604      	mov	r4, r0
   12950:	b3a0      	cbz	r0, 129bc <ip_interface_close+0x7c>
   12952:	6981      	ldr	r1, [r0, #24]
   12954:	6806      	ldr	r6, [r0, #0]
   12956:	2300      	movs	r3, #0
   12958:	f247 0209 	movw	r2, #28681	; 0x7009
   1295c:	4628      	mov	r0, r5
   1295e:	f006 fc57 	bl	19210 <ip_interface_request_create>
   12962:	4601      	mov	r1, r0
   12964:	b388      	cbz	r0, 129ca <ip_interface_close+0x8a>
   12966:	6823      	ldr	r3, [r4, #0]
   12968:	4620      	mov	r0, r4
   1296a:	0c1b      	lsrs	r3, r3, #16
   1296c:	041b      	lsls	r3, r3, #16
   1296e:	f043 030d 	orr.w	r3, r3, #13
   12972:	6023      	str	r3, [r4, #0]
   12974:	6823      	ldr	r3, [r4, #0]
   12976:	f247 0209 	movw	r2, #28681	; 0x7009
   1297a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1297e:	6023      	str	r3, [r4, #0]
   12980:	6823      	ldr	r3, [r4, #0]
   12982:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   12986:	6023      	str	r3, [r4, #0]
   12988:	4633      	mov	r3, r6
   1298a:	f006 fc59 	bl	19240 <ip_interface_request_send>
   1298e:	4604      	mov	r4, r0
   12990:	b9a8      	cbnz	r0, 129be <ip_interface_close+0x7e>
   12992:	4e0f      	ldr	r6, [pc, #60]	; (129d0 <ip_interface_close+0x90>)
   12994:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12998:	210e      	movs	r1, #14
   1299a:	4628      	mov	r0, r5
   1299c:	ab01      	add	r3, sp, #4
   1299e:	f006 fc62 	bl	19266 <ip_interface_wait>
   129a2:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
   129a6:	b118      	cbz	r0, 129b0 <ip_interface_close+0x70>
   129a8:	f006 fa37 	bl	18e1a <rpc_ip_client_message_free>
   129ac:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
   129b0:	4628      	mov	r0, r5
   129b2:	f7ff fe09 	bl	125c8 <interface_socket_free>
   129b6:	4620      	mov	r0, r4
   129b8:	b002      	add	sp, #8
   129ba:	bd70      	pop	{r4, r5, r6, pc}
   129bc:	2409      	movs	r4, #9
   129be:	4620      	mov	r0, r4
   129c0:	f7fd fbca 	bl	10158 <nrf_modem_os_errno_set>
   129c4:	f04f 34ff 	mov.w	r4, #4294967295
   129c8:	e7f5      	b.n	129b6 <ip_interface_close+0x76>
   129ca:	240c      	movs	r4, #12
   129cc:	e7f7      	b.n	129be <ip_interface_close+0x7e>
   129ce:	bf00      	nop
   129d0:	200152cc 	.word	0x200152cc

000129d4 <ip_interface_sendto>:
   129d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129d8:	4698      	mov	r8, r3
   129da:	2300      	movs	r3, #0
   129dc:	b089      	sub	sp, #36	; 0x24
   129de:	4606      	mov	r6, r0
   129e0:	4689      	mov	r9, r1
   129e2:	4615      	mov	r5, r2
   129e4:	9305      	str	r3, [sp, #20]
   129e6:	f7ff fe53 	bl	12690 <interface_socket_from_handle_get>
   129ea:	4604      	mov	r4, r0
   129ec:	2800      	cmp	r0, #0
   129ee:	f000 80e2 	beq.w	12bb6 <ip_interface_sendto+0x1e2>
   129f2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   129f6:	f300 80e1 	bgt.w	12bbc <ip_interface_sendto+0x1e8>
   129fa:	6903      	ldr	r3, [r0, #16]
   129fc:	2b01      	cmp	r3, #1
   129fe:	d103      	bne.n	12a08 <ip_interface_sendto+0x34>
   12a00:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12a02:	2a00      	cmp	r2, #0
   12a04:	f040 80dd 	bne.w	12bc2 <ip_interface_sendto+0x1ee>
   12a08:	6822      	ldr	r2, [r4, #0]
   12a0a:	0391      	lsls	r1, r2, #14
   12a0c:	d428      	bmi.n	12a60 <ip_interface_sendto+0x8c>
   12a0e:	6822      	ldr	r2, [r4, #0]
   12a10:	0092      	lsls	r2, r2, #2
   12a12:	d409      	bmi.n	12a28 <ip_interface_sendto+0x54>
   12a14:	2b01      	cmp	r3, #1
   12a16:	d103      	bne.n	12a20 <ip_interface_sendto+0x4c>
   12a18:	6823      	ldr	r3, [r4, #0]
   12a1a:	b29b      	uxth	r3, r3
   12a1c:	2b05      	cmp	r3, #5
   12a1e:	d103      	bne.n	12a28 <ip_interface_sendto+0x54>
   12a20:	6823      	ldr	r3, [r4, #0]
   12a22:	031f      	lsls	r7, r3, #12
   12a24:	f140 80d0 	bpl.w	12bc8 <ip_interface_sendto+0x1f4>
   12a28:	6823      	ldr	r3, [r4, #0]
   12a2a:	0318      	lsls	r0, r3, #12
   12a2c:	f140 80cf 	bpl.w	12bce <ip_interface_sendto+0x1fa>
   12a30:	f8d4 b008 	ldr.w	fp, [r4, #8]
   12a34:	f1bb 0f00 	cmp.w	fp, #0
   12a38:	f000 80cf 	beq.w	12bda <ip_interface_sendto+0x206>
   12a3c:	4658      	mov	r0, fp
   12a3e:	f7fd fb8b 	bl	10158 <nrf_modem_os_errno_set>
   12a42:	f04f 35ff 	mov.w	r5, #4294967295
   12a46:	4c72      	ldr	r4, [pc, #456]	; (12c10 <ip_interface_sendto+0x23c>)
   12a48:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   12a4c:	b120      	cbz	r0, 12a58 <ip_interface_sendto+0x84>
   12a4e:	f006 f9e4 	bl	18e1a <rpc_ip_client_message_free>
   12a52:	2300      	movs	r3, #0
   12a54:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   12a58:	4628      	mov	r0, r5
   12a5a:	b009      	add	sp, #36	; 0x24
   12a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a60:	f1b8 0f00 	cmp.w	r8, #0
   12a64:	d03a      	beq.n	12adc <ip_interface_sendto+0x108>
   12a66:	f018 0f02 	tst.w	r8, #2
   12a6a:	f000 80b3 	beq.w	12bd4 <ip_interface_sendto+0x200>
   12a6e:	2700      	movs	r7, #0
   12a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12a72:	f247 0a06 	movw	sl, #28678	; 0x7006
   12a76:	2b00      	cmp	r3, #0
   12a78:	bf08      	it	eq
   12a7a:	f04f 33ff 	moveq.w	r3, #4294967295
   12a7e:	9306      	str	r3, [sp, #24]
   12a80:	0433      	lsls	r3, r6, #16
   12a82:	9303      	str	r3, [sp, #12]
   12a84:	4629      	mov	r1, r5
   12a86:	a805      	add	r0, sp, #20
   12a88:	f006 f9a1 	bl	18dce <rpc_ip_client_request_alloc>
   12a8c:	280c      	cmp	r0, #12
   12a8e:	f040 80b9 	bne.w	12c04 <ip_interface_sendto+0x230>
   12a92:	2f00      	cmp	r7, #0
   12a94:	f000 8086 	beq.w	12ba4 <ip_interface_sendto+0x1d0>
   12a98:	9b06      	ldr	r3, [sp, #24]
   12a9a:	3301      	adds	r3, #1
   12a9c:	d0f2      	beq.n	12a84 <ip_interface_sendto+0xb0>
   12a9e:	230a      	movs	r3, #10
   12aa0:	2000      	movs	r0, #0
   12aa2:	a907      	add	r1, sp, #28
   12aa4:	9307      	str	r3, [sp, #28]
   12aa6:	f7fd fa9f 	bl	ffe8 <nrf_modem_os_timedwait>
   12aaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   12aae:	4413      	add	r3, r2
   12ab0:	3b0a      	subs	r3, #10
   12ab2:	2b00      	cmp	r3, #0
   12ab4:	9306      	str	r3, [sp, #24]
   12ab6:	dce5      	bgt.n	12a84 <ip_interface_sendto+0xb0>
   12ab8:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
   12abc:	6822      	ldr	r2, [r4, #0]
   12abe:	0313      	lsls	r3, r2, #12
   12ac0:	d4b8      	bmi.n	12a34 <ip_interface_sendto+0x60>
   12ac2:	6822      	ldr	r2, [r4, #0]
   12ac4:	b292      	uxth	r2, r2
   12ac6:	2a0d      	cmp	r2, #13
   12ac8:	d0b4      	beq.n	12a34 <ip_interface_sendto+0x60>
   12aca:	6822      	ldr	r2, [r4, #0]
   12acc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   12ad0:	6022      	str	r2, [r4, #0]
   12ad2:	6822      	ldr	r2, [r4, #0]
   12ad4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   12ad8:	6022      	str	r2, [r4, #0]
   12ada:	e7ab      	b.n	12a34 <ip_interface_sendto+0x60>
   12adc:	6827      	ldr	r7, [r4, #0]
   12ade:	f087 5780 	eor.w	r7, r7, #268435456	; 0x10000000
   12ae2:	f3c7 7700 	ubfx	r7, r7, #28, #1
   12ae6:	e7c3      	b.n	12a70 <ip_interface_sendto+0x9c>
   12ae8:	f04f 020c 	mov.w	r2, #12
   12aec:	9b05      	ldr	r3, [sp, #20]
   12aee:	721a      	strb	r2, [r3, #8]
   12af0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12af2:	7258      	strb	r0, [r3, #9]
   12af4:	7298      	strb	r0, [r3, #10]
   12af6:	72d8      	strb	r0, [r3, #11]
   12af8:	2a00      	cmp	r2, #0
   12afa:	d056      	beq.n	12baa <ip_interface_sendto+0x1d6>
   12afc:	f103 021c 	add.w	r2, r3, #28
   12b00:	9201      	str	r2, [sp, #4]
   12b02:	f103 0218 	add.w	r2, r3, #24
   12b06:	9200      	str	r2, [sp, #0]
   12b08:	68e0      	ldr	r0, [r4, #12]
   12b0a:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
   12b0e:	331a      	adds	r3, #26
   12b10:	f006 fb59 	bl	191c6 <ip_addr_parse>
   12b14:	9a05      	ldr	r2, [sp, #20]
   12b16:	4683      	mov	fp, r0
   12b18:	2800      	cmp	r0, #0
   12b1a:	d16b      	bne.n	12bf4 <ip_interface_sendto+0x220>
   12b1c:	f247 0a07 	movw	sl, #28679	; 0x7007
   12b20:	6893      	ldr	r3, [r2, #8]
   12b22:	8b51      	ldrh	r1, [r2, #26]
   12b24:	3304      	adds	r3, #4
   12b26:	440b      	add	r3, r1
   12b28:	f8c2 8014 	str.w	r8, [r2, #20]
   12b2c:	6093      	str	r3, [r2, #8]
   12b2e:	69a2      	ldr	r2, [r4, #24]
   12b30:	9b05      	ldr	r3, [sp, #20]
   12b32:	611a      	str	r2, [r3, #16]
   12b34:	9a03      	ldr	r2, [sp, #12]
   12b36:	605d      	str	r5, [r3, #4]
   12b38:	ea4a 0202 	orr.w	r2, sl, r2
   12b3c:	60da      	str	r2, [r3, #12]
   12b3e:	f1b9 0f00 	cmp.w	r9, #0
   12b42:	d004      	beq.n	12b4e <ip_interface_sendto+0x17a>
   12b44:	462a      	mov	r2, r5
   12b46:	4649      	mov	r1, r9
   12b48:	6818      	ldr	r0, [r3, #0]
   12b4a:	f005 f9c7 	bl	17edc <memcpy>
   12b4e:	6823      	ldr	r3, [r4, #0]
   12b50:	6822      	ldr	r2, [r4, #0]
   12b52:	4620      	mov	r0, r4
   12b54:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   12b58:	6022      	str	r2, [r4, #0]
   12b5a:	6822      	ldr	r2, [r4, #0]
   12b5c:	9905      	ldr	r1, [sp, #20]
   12b5e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   12b62:	6022      	str	r2, [r4, #0]
   12b64:	4652      	mov	r2, sl
   12b66:	f006 fb6b 	bl	19240 <ip_interface_request_send>
   12b6a:	4683      	mov	fp, r0
   12b6c:	2800      	cmp	r0, #0
   12b6e:	d1a5      	bne.n	12abc <ip_interface_sendto+0xe8>
   12b70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   12b74:	4630      	mov	r0, r6
   12b76:	4611      	mov	r1, r2
   12b78:	ab06      	add	r3, sp, #24
   12b7a:	f006 fb74 	bl	19266 <ip_interface_wait>
   12b7e:	4683      	mov	fp, r0
   12b80:	2800      	cmp	r0, #0
   12b82:	d09b      	beq.n	12abc <ip_interface_sendto+0xe8>
   12b84:	6822      	ldr	r2, [r4, #0]
   12b86:	0311      	lsls	r1, r2, #12
   12b88:	d412      	bmi.n	12bb0 <ip_interface_sendto+0x1dc>
   12b8a:	283c      	cmp	r0, #60	; 0x3c
   12b8c:	d096      	beq.n	12abc <ip_interface_sendto+0xe8>
   12b8e:	280c      	cmp	r0, #12
   12b90:	d194      	bne.n	12abc <ip_interface_sendto+0xe8>
   12b92:	4b1f      	ldr	r3, [pc, #124]	; (12c10 <ip_interface_sendto+0x23c>)
   12b94:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   12b98:	b108      	cbz	r0, 12b9e <ip_interface_sendto+0x1ca>
   12b9a:	f006 f93e 	bl	18e1a <rpc_ip_client_message_free>
   12b9e:	2f00      	cmp	r7, #0
   12ba0:	f47f af70 	bne.w	12a84 <ip_interface_sendto+0xb0>
   12ba4:	f04f 0b23 	mov.w	fp, #35	; 0x23
   12ba8:	e788      	b.n	12abc <ip_interface_sendto+0xe8>
   12baa:	f8c3 8014 	str.w	r8, [r3, #20]
   12bae:	e7be      	b.n	12b2e <ip_interface_sendto+0x15a>
   12bb0:	f8d4 b008 	ldr.w	fp, [r4, #8]
   12bb4:	e782      	b.n	12abc <ip_interface_sendto+0xe8>
   12bb6:	f04f 0b09 	mov.w	fp, #9
   12bba:	e73f      	b.n	12a3c <ip_interface_sendto+0x68>
   12bbc:	f04f 0b28 	mov.w	fp, #40	; 0x28
   12bc0:	e73c      	b.n	12a3c <ip_interface_sendto+0x68>
   12bc2:	f04f 0b38 	mov.w	fp, #56	; 0x38
   12bc6:	e739      	b.n	12a3c <ip_interface_sendto+0x68>
   12bc8:	f04f 0b23 	mov.w	fp, #35	; 0x23
   12bcc:	e736      	b.n	12a3c <ip_interface_sendto+0x68>
   12bce:	f04f 0b39 	mov.w	fp, #57	; 0x39
   12bd2:	e733      	b.n	12a3c <ip_interface_sendto+0x68>
   12bd4:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   12bd8:	e730      	b.n	12a3c <ip_interface_sendto+0x68>
   12bda:	6823      	ldr	r3, [r4, #0]
   12bdc:	011a      	lsls	r2, r3, #4
   12bde:	bf55      	itete	pl
   12be0:	4b0b      	ldrpl	r3, [pc, #44]	; (12c10 <ip_interface_sendto+0x23c>)
   12be2:	6823      	ldrmi	r3, [r4, #0]
   12be4:	f853 3026 	ldrpl.w	r3, [r3, r6, lsl #2]
   12be8:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   12bec:	bf54      	ite	pl
   12bee:	699d      	ldrpl	r5, [r3, #24]
   12bf0:	6023      	strmi	r3, [r4, #0]
   12bf2:	e728      	b.n	12a46 <ip_interface_sendto+0x72>
   12bf4:	6810      	ldr	r0, [r2, #0]
   12bf6:	b108      	cbz	r0, 12bfc <ip_interface_sendto+0x228>
   12bf8:	f006 f917 	bl	18e2a <rpc_ip_client_data_free>
   12bfc:	9805      	ldr	r0, [sp, #20]
   12bfe:	f006 f90c 	bl	18e1a <rpc_ip_client_message_free>
   12c02:	e75b      	b.n	12abc <ip_interface_sendto+0xe8>
   12c04:	2800      	cmp	r0, #0
   12c06:	f43f af6f 	beq.w	12ae8 <ip_interface_sendto+0x114>
   12c0a:	f04f 0b0c 	mov.w	fp, #12
   12c0e:	e755      	b.n	12abc <ip_interface_sendto+0xe8>
   12c10:	200152cc 	.word	0x200152cc

00012c14 <ip_interface_socketoption_get>:
   12c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c18:	461c      	mov	r4, r3
   12c1a:	f04f 33ff 	mov.w	r3, #4294967295
   12c1e:	9301      	str	r3, [sp, #4]
   12c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12c22:	4607      	mov	r7, r0
   12c24:	460d      	mov	r5, r1
   12c26:	4693      	mov	fp, r2
   12c28:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   12c2c:	2b00      	cmp	r3, #0
   12c2e:	d06a      	beq.n	12d06 <ip_interface_socketoption_get+0xf2>
   12c30:	f8d8 3000 	ldr.w	r3, [r8]
   12c34:	2b00      	cmp	r3, #0
   12c36:	d066      	beq.n	12d06 <ip_interface_socketoption_get+0xf2>
   12c38:	680b      	ldr	r3, [r1, #0]
   12c3a:	025e      	lsls	r6, r3, #9
   12c3c:	d465      	bmi.n	12d0a <ip_interface_socketoption_get+0xf6>
   12c3e:	680b      	ldr	r3, [r1, #0]
   12c40:	0219      	lsls	r1, r3, #8
   12c42:	d462      	bmi.n	12d0a <ip_interface_socketoption_get+0xf6>
   12c44:	682b      	ldr	r3, [r5, #0]
   12c46:	01da      	lsls	r2, r3, #7
   12c48:	d45f      	bmi.n	12d0a <ip_interface_socketoption_get+0xf6>
   12c4a:	682b      	ldr	r3, [r5, #0]
   12c4c:	019b      	lsls	r3, r3, #6
   12c4e:	d45c      	bmi.n	12d0a <ip_interface_socketoption_get+0xf6>
   12c50:	f8d5 a000 	ldr.w	sl, [r5]
   12c54:	682b      	ldr	r3, [r5, #0]
   12c56:	f247 0204 	movw	r2, #28676	; 0x7004
   12c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   12c5e:	602b      	str	r3, [r5, #0]
   12c60:	f8d8 3000 	ldr.w	r3, [r8]
   12c64:	69a9      	ldr	r1, [r5, #24]
   12c66:	f006 fad3 	bl	19210 <ip_interface_request_create>
   12c6a:	4606      	mov	r6, r0
   12c6c:	2800      	cmp	r0, #0
   12c6e:	d048      	beq.n	12d02 <ip_interface_socketoption_get+0xee>
   12c70:	6883      	ldr	r3, [r0, #8]
   12c72:	f8c0 b014 	str.w	fp, [r0, #20]
   12c76:	3308      	adds	r3, #8
   12c78:	6083      	str	r3, [r0, #8]
   12c7a:	6184      	str	r4, [r0, #24]
   12c7c:	4601      	mov	r1, r0
   12c7e:	f8d0 b000 	ldr.w	fp, [r0]
   12c82:	4653      	mov	r3, sl
   12c84:	f247 0204 	movw	r2, #28676	; 0x7004
   12c88:	4628      	mov	r0, r5
   12c8a:	f006 fad9 	bl	19240 <ip_interface_request_send>
   12c8e:	4604      	mov	r4, r0
   12c90:	bb20      	cbnz	r0, 12cdc <ip_interface_socketoption_get+0xc8>
   12c92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   12c96:	4638      	mov	r0, r7
   12c98:	4611      	mov	r1, r2
   12c9a:	ab01      	add	r3, sp, #4
   12c9c:	f006 fae3 	bl	19266 <ip_interface_wait>
   12ca0:	4604      	mov	r4, r0
   12ca2:	b9d8      	cbnz	r0, 12cdc <ip_interface_socketoption_get+0xc8>
   12ca4:	4b1a      	ldr	r3, [pc, #104]	; (12d10 <ip_interface_socketoption_get+0xfc>)
   12ca6:	f8d8 2000 	ldr.w	r2, [r8]
   12caa:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
   12cae:	4699      	mov	r9, r3
   12cb0:	b1f9      	cbz	r1, 12cf2 <ip_interface_socketoption_get+0xde>
   12cb2:	6848      	ldr	r0, [r1, #4]
   12cb4:	4290      	cmp	r0, r2
   12cb6:	d81a      	bhi.n	12cee <ip_interface_socketoption_get+0xda>
   12cb8:	6809      	ldr	r1, [r1, #0]
   12cba:	b1c1      	cbz	r1, 12cee <ip_interface_socketoption_get+0xda>
   12cbc:	4602      	mov	r2, r0
   12cbe:	980c      	ldr	r0, [sp, #48]	; 0x30
   12cc0:	f005 f90c 	bl	17edc <memcpy>
   12cc4:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
   12cc8:	6852      	ldr	r2, [r2, #4]
   12cca:	f8c8 2000 	str.w	r2, [r8]
   12cce:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   12cd2:	f006 f8a2 	bl	18e1a <rpc_ip_client_message_free>
   12cd6:	2200      	movs	r2, #0
   12cd8:	f849 2027 	str.w	r2, [r9, r7, lsl #2]
   12cdc:	4658      	mov	r0, fp
   12cde:	f006 f8a4 	bl	18e2a <rpc_ip_client_data_free>
   12ce2:	f8c5 a000 	str.w	sl, [r5]
   12ce6:	4620      	mov	r0, r4
   12ce8:	b003      	add	sp, #12
   12cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cee:	2416      	movs	r4, #22
   12cf0:	e7ed      	b.n	12cce <ip_interface_socketoption_get+0xba>
   12cf2:	4659      	mov	r1, fp
   12cf4:	980c      	ldr	r0, [sp, #48]	; 0x30
   12cf6:	f005 f8f1 	bl	17edc <memcpy>
   12cfa:	6873      	ldr	r3, [r6, #4]
   12cfc:	f8c8 3000 	str.w	r3, [r8]
   12d00:	e7ec      	b.n	12cdc <ip_interface_socketoption_get+0xc8>
   12d02:	240c      	movs	r4, #12
   12d04:	e7ed      	b.n	12ce2 <ip_interface_socketoption_get+0xce>
   12d06:	2416      	movs	r4, #22
   12d08:	e7ed      	b.n	12ce6 <ip_interface_socketoption_get+0xd2>
   12d0a:	2423      	movs	r4, #35	; 0x23
   12d0c:	e7eb      	b.n	12ce6 <ip_interface_socketoption_get+0xd2>
   12d0e:	bf00      	nop
   12d10:	200152cc 	.word	0x200152cc

00012d14 <ip_interface_bind>:
   12d14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12d18:	f04f 33ff 	mov.w	r3, #4294967295
   12d1c:	4607      	mov	r7, r0
   12d1e:	4690      	mov	r8, r2
   12d20:	460e      	mov	r6, r1
   12d22:	9303      	str	r3, [sp, #12]
   12d24:	2900      	cmp	r1, #0
   12d26:	d04e      	beq.n	12dc6 <ip_interface_bind+0xb2>
   12d28:	2a00      	cmp	r2, #0
   12d2a:	d04c      	beq.n	12dc6 <ip_interface_bind+0xb2>
   12d2c:	f7ff fcb0 	bl	12690 <interface_socket_from_handle_get>
   12d30:	4604      	mov	r4, r0
   12d32:	2800      	cmp	r0, #0
   12d34:	d049      	beq.n	12dca <ip_interface_bind+0xb6>
   12d36:	6803      	ldr	r3, [r0, #0]
   12d38:	b29b      	uxth	r3, r3
   12d3a:	2b02      	cmp	r3, #2
   12d3c:	d145      	bne.n	12dca <ip_interface_bind+0xb6>
   12d3e:	6981      	ldr	r1, [r0, #24]
   12d40:	2300      	movs	r3, #0
   12d42:	f247 0205 	movw	r2, #28677	; 0x7005
   12d46:	4638      	mov	r0, r7
   12d48:	f006 fa62 	bl	19210 <ip_interface_request_create>
   12d4c:	4605      	mov	r5, r0
   12d4e:	2800      	cmp	r0, #0
   12d50:	d03d      	beq.n	12dce <ip_interface_bind+0xba>
   12d52:	6883      	ldr	r3, [r0, #8]
   12d54:	4642      	mov	r2, r8
   12d56:	3304      	adds	r3, #4
   12d58:	6083      	str	r3, [r0, #8]
   12d5a:	f100 0318 	add.w	r3, r0, #24
   12d5e:	9301      	str	r3, [sp, #4]
   12d60:	f100 0314 	add.w	r3, r0, #20
   12d64:	9300      	str	r3, [sp, #0]
   12d66:	4631      	mov	r1, r6
   12d68:	f100 0316 	add.w	r3, r0, #22
   12d6c:	68e0      	ldr	r0, [r4, #12]
   12d6e:	f006 fa2a 	bl	191c6 <ip_addr_parse>
   12d72:	bb08      	cbnz	r0, 12db8 <ip_interface_bind+0xa4>
   12d74:	68ab      	ldr	r3, [r5, #8]
   12d76:	8aea      	ldrh	r2, [r5, #22]
   12d78:	4e16      	ldr	r6, [pc, #88]	; (12dd4 <ip_interface_bind+0xc0>)
   12d7a:	4413      	add	r3, r2
   12d7c:	60ab      	str	r3, [r5, #8]
   12d7e:	6823      	ldr	r3, [r4, #0]
   12d80:	f247 0205 	movw	r2, #28677	; 0x7005
   12d84:	4033      	ands	r3, r6
   12d86:	f043 0303 	orr.w	r3, r3, #3
   12d8a:	6023      	str	r3, [r4, #0]
   12d8c:	6823      	ldr	r3, [r4, #0]
   12d8e:	4629      	mov	r1, r5
   12d90:	4033      	ands	r3, r6
   12d92:	4620      	mov	r0, r4
   12d94:	f043 0302 	orr.w	r3, r3, #2
   12d98:	f006 fa52 	bl	19240 <ip_interface_request_send>
   12d9c:	b960      	cbnz	r0, 12db8 <ip_interface_bind+0xa4>
   12d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12da2:	2104      	movs	r1, #4
   12da4:	4638      	mov	r0, r7
   12da6:	ab03      	add	r3, sp, #12
   12da8:	f006 fa5d 	bl	19266 <ip_interface_wait>
   12dac:	b140      	cbz	r0, 12dc0 <ip_interface_bind+0xac>
   12dae:	6823      	ldr	r3, [r4, #0]
   12db0:	4033      	ands	r3, r6
   12db2:	f043 0302 	orr.w	r3, r3, #2
   12db6:	6023      	str	r3, [r4, #0]
   12db8:	f7fd f9ce 	bl	10158 <nrf_modem_os_errno_set>
   12dbc:	f04f 30ff 	mov.w	r0, #4294967295
   12dc0:	b004      	add	sp, #16
   12dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12dc6:	2016      	movs	r0, #22
   12dc8:	e7f6      	b.n	12db8 <ip_interface_bind+0xa4>
   12dca:	2009      	movs	r0, #9
   12dcc:	e7f4      	b.n	12db8 <ip_interface_bind+0xa4>
   12dce:	200c      	movs	r0, #12
   12dd0:	e7f2      	b.n	12db8 <ip_interface_bind+0xa4>
   12dd2:	bf00      	nop
   12dd4:	ffff0000 	.word	0xffff0000

00012dd8 <ip_interface_listen>:
   12dd8:	f04f 33ff 	mov.w	r3, #4294967295
   12ddc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12dde:	4605      	mov	r5, r0
   12de0:	9301      	str	r3, [sp, #4]
   12de2:	f7ff fc55 	bl	12690 <interface_socket_from_handle_get>
   12de6:	4604      	mov	r4, r0
   12de8:	2800      	cmp	r0, #0
   12dea:	d03c      	beq.n	12e66 <ip_interface_listen+0x8e>
   12dec:	6803      	ldr	r3, [r0, #0]
   12dee:	b29b      	uxth	r3, r3
   12df0:	2b04      	cmp	r3, #4
   12df2:	d003      	beq.n	12dfc <ip_interface_listen+0x24>
   12df4:	6803      	ldr	r3, [r0, #0]
   12df6:	b29b      	uxth	r3, r3
   12df8:	2b0b      	cmp	r3, #11
   12dfa:	d134      	bne.n	12e66 <ip_interface_listen+0x8e>
   12dfc:	2100      	movs	r1, #0
   12dfe:	4628      	mov	r0, r5
   12e00:	4a1c      	ldr	r2, [pc, #112]	; (12e74 <ip_interface_listen+0x9c>)
   12e02:	f7ff fbed 	bl	125e0 <interface_socket_packet_handler_update>
   12e06:	4603      	mov	r3, r0
   12e08:	bb78      	cbnz	r0, 12e6a <ip_interface_listen+0x92>
   12e0a:	69a1      	ldr	r1, [r4, #24]
   12e0c:	f247 0208 	movw	r2, #28680	; 0x7008
   12e10:	4628      	mov	r0, r5
   12e12:	f006 f9fd 	bl	19210 <ip_interface_request_create>
   12e16:	4601      	mov	r1, r0
   12e18:	b348      	cbz	r0, 12e6e <ip_interface_listen+0x96>
   12e1a:	6883      	ldr	r3, [r0, #8]
   12e1c:	4e16      	ldr	r6, [pc, #88]	; (12e78 <ip_interface_listen+0xa0>)
   12e1e:	3304      	adds	r3, #4
   12e20:	6083      	str	r3, [r0, #8]
   12e22:	6823      	ldr	r3, [r4, #0]
   12e24:	f247 0208 	movw	r2, #28680	; 0x7008
   12e28:	4033      	ands	r3, r6
   12e2a:	f043 0306 	orr.w	r3, r3, #6
   12e2e:	6023      	str	r3, [r4, #0]
   12e30:	6823      	ldr	r3, [r4, #0]
   12e32:	4620      	mov	r0, r4
   12e34:	4033      	ands	r3, r6
   12e36:	f043 0304 	orr.w	r3, r3, #4
   12e3a:	f006 fa01 	bl	19240 <ip_interface_request_send>
   12e3e:	b960      	cbnz	r0, 12e5a <ip_interface_listen+0x82>
   12e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12e44:	2107      	movs	r1, #7
   12e46:	4628      	mov	r0, r5
   12e48:	ab01      	add	r3, sp, #4
   12e4a:	f006 fa0c 	bl	19266 <ip_interface_wait>
   12e4e:	b140      	cbz	r0, 12e62 <ip_interface_listen+0x8a>
   12e50:	6823      	ldr	r3, [r4, #0]
   12e52:	4033      	ands	r3, r6
   12e54:	f043 0304 	orr.w	r3, r3, #4
   12e58:	6023      	str	r3, [r4, #0]
   12e5a:	f7fd f97d 	bl	10158 <nrf_modem_os_errno_set>
   12e5e:	f04f 30ff 	mov.w	r0, #4294967295
   12e62:	b002      	add	sp, #8
   12e64:	bd70      	pop	{r4, r5, r6, pc}
   12e66:	2009      	movs	r0, #9
   12e68:	e7f7      	b.n	12e5a <ip_interface_listen+0x82>
   12e6a:	2023      	movs	r0, #35	; 0x23
   12e6c:	e7f5      	b.n	12e5a <ip_interface_listen+0x82>
   12e6e:	200c      	movs	r0, #12
   12e70:	e7f3      	b.n	12e5a <ip_interface_listen+0x82>
   12e72:	bf00      	nop
   12e74:	000191af 	.word	0x000191af
   12e78:	ffff0000 	.word	0xffff0000

00012e7c <ip_interface_accept>:
   12e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e80:	f04f 33ff 	mov.w	r3, #4294967295
   12e84:	2600      	movs	r6, #0
   12e86:	4680      	mov	r8, r0
   12e88:	460f      	mov	r7, r1
   12e8a:	4692      	mov	sl, r2
   12e8c:	e9cd 6300 	strd	r6, r3, [sp]
   12e90:	f7ff fbfe 	bl	12690 <interface_socket_from_handle_get>
   12e94:	4604      	mov	r4, r0
   12e96:	2800      	cmp	r0, #0
   12e98:	f000 80b2 	beq.w	13000 <ip_interface_accept+0x184>
   12e9c:	6803      	ldr	r3, [r0, #0]
   12e9e:	b29b      	uxth	r3, r3
   12ea0:	2b07      	cmp	r3, #7
   12ea2:	f040 80b0 	bne.w	13006 <ip_interface_accept+0x18a>
   12ea6:	6803      	ldr	r3, [r0, #0]
   12ea8:	f013 5980 	ands.w	r9, r3, #268435456	; 0x10000000
   12eac:	d165      	bne.n	12f7a <ip_interface_accept+0xfe>
   12eae:	6803      	ldr	r3, [r0, #0]
   12eb0:	03db      	lsls	r3, r3, #15
   12eb2:	d466      	bmi.n	12f82 <ip_interface_accept+0x106>
   12eb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12eb8:	4640      	mov	r0, r8
   12eba:	4611      	mov	r1, r2
   12ebc:	ab01      	add	r3, sp, #4
   12ebe:	f006 f9d2 	bl	19266 <ip_interface_wait>
   12ec2:	4605      	mov	r5, r0
   12ec4:	6826      	ldr	r6, [r4, #0]
   12ec6:	f416 3680 	ands.w	r6, r6, #65536	; 0x10000
   12eca:	d05c      	beq.n	12f86 <ip_interface_accept+0x10a>
   12ecc:	4668      	mov	r0, sp
   12ece:	4a59      	ldr	r2, [pc, #356]	; (13034 <ip_interface_accept+0x1b8>)
   12ed0:	6921      	ldr	r1, [r4, #16]
   12ed2:	f7ff fb53 	bl	1257c <interface_socket_allocate>
   12ed6:	9b00      	ldr	r3, [sp, #0]
   12ed8:	4606      	mov	r6, r0
   12eda:	2b00      	cmp	r3, #0
   12edc:	f000 8095 	beq.w	1300a <ip_interface_accept+0x18e>
   12ee0:	6962      	ldr	r2, [r4, #20]
   12ee2:	69a1      	ldr	r1, [r4, #24]
   12ee4:	615a      	str	r2, [r3, #20]
   12ee6:	68e2      	ldr	r2, [r4, #12]
   12ee8:	4640      	mov	r0, r8
   12eea:	60da      	str	r2, [r3, #12]
   12eec:	6922      	ldr	r2, [r4, #16]
   12eee:	611a      	str	r2, [r3, #16]
   12ef0:	2300      	movs	r3, #0
   12ef2:	f247 020c 	movw	r2, #28684	; 0x700c
   12ef6:	f006 f98b 	bl	19210 <ip_interface_request_create>
   12efa:	4601      	mov	r1, r0
   12efc:	2800      	cmp	r0, #0
   12efe:	f000 8084 	beq.w	1300a <ip_interface_accept+0x18e>
   12f02:	6823      	ldr	r3, [r4, #0]
   12f04:	f8df b134 	ldr.w	fp, [pc, #308]	; 1303c <ip_interface_accept+0x1c0>
   12f08:	f247 020c 	movw	r2, #28684	; 0x700c
   12f0c:	ea03 030b 	and.w	r3, r3, fp
   12f10:	f043 0308 	orr.w	r3, r3, #8
   12f14:	6023      	str	r3, [r4, #0]
   12f16:	6823      	ldr	r3, [r4, #0]
   12f18:	4620      	mov	r0, r4
   12f1a:	ea03 030b 	and.w	r3, r3, fp
   12f1e:	f043 0307 	orr.w	r3, r3, #7
   12f22:	f006 f98d 	bl	19240 <ip_interface_request_send>
   12f26:	4605      	mov	r5, r0
   12f28:	b9d0      	cbnz	r0, 12f60 <ip_interface_accept+0xe4>
   12f2a:	6823      	ldr	r3, [r4, #0]
   12f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12f30:	ea23 0309 	bic.w	r3, r3, r9
   12f34:	6023      	str	r3, [r4, #0]
   12f36:	2109      	movs	r1, #9
   12f38:	ab01      	add	r3, sp, #4
   12f3a:	4640      	mov	r0, r8
   12f3c:	f006 f993 	bl	19266 <ip_interface_wait>
   12f40:	6823      	ldr	r3, [r4, #0]
   12f42:	4605      	mov	r5, r0
   12f44:	ea43 0309 	orr.w	r3, r3, r9
   12f48:	6023      	str	r3, [r4, #0]
   12f4a:	b1f0      	cbz	r0, 12f8a <ip_interface_accept+0x10e>
   12f4c:	6823      	ldr	r3, [r4, #0]
   12f4e:	ea03 030b 	and.w	r3, r3, fp
   12f52:	f043 0307 	orr.w	r3, r3, #7
   12f56:	6023      	str	r3, [r4, #0]
   12f58:	6823      	ldr	r3, [r4, #0]
   12f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   12f5e:	6023      	str	r3, [r4, #0]
   12f60:	9b00      	ldr	r3, [sp, #0]
   12f62:	b113      	cbz	r3, 12f6a <ip_interface_accept+0xee>
   12f64:	4630      	mov	r0, r6
   12f66:	f7ff fb2f 	bl	125c8 <interface_socket_free>
   12f6a:	4628      	mov	r0, r5
   12f6c:	f7fd f8f4 	bl	10158 <nrf_modem_os_errno_set>
   12f70:	f04f 30ff 	mov.w	r0, #4294967295
   12f74:	b003      	add	sp, #12
   12f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f7a:	2523      	movs	r5, #35	; 0x23
   12f7c:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
   12f80:	e7a0      	b.n	12ec4 <ip_interface_accept+0x48>
   12f82:	2509      	movs	r5, #9
   12f84:	e79e      	b.n	12ec4 <ip_interface_accept+0x48>
   12f86:	2d00      	cmp	r5, #0
   12f88:	d1ea      	bne.n	12f60 <ip_interface_accept+0xe4>
   12f8a:	4d2b      	ldr	r5, [pc, #172]	; (13038 <ip_interface_accept+0x1bc>)
   12f8c:	9b00      	ldr	r3, [sp, #0]
   12f8e:	f855 1028 	ldr.w	r1, [r5, r8, lsl #2]
   12f92:	698a      	ldr	r2, [r1, #24]
   12f94:	619a      	str	r2, [r3, #24]
   12f96:	b197      	cbz	r7, 12fbe <ip_interface_accept+0x142>
   12f98:	68db      	ldr	r3, [r3, #12]
   12f9a:	2b0a      	cmp	r3, #10
   12f9c:	d137      	bne.n	1300e <ip_interface_accept+0x192>
   12f9e:	f8da 2000 	ldr.w	r2, [sl]
   12fa2:	2a24      	cmp	r2, #36	; 0x24
   12fa4:	d10b      	bne.n	12fbe <ip_interface_accept+0x142>
   12fa6:	703a      	strb	r2, [r7, #0]
   12fa8:	607b      	str	r3, [r7, #4]
   12faa:	7f4a      	ldrb	r2, [r1, #29]
   12fac:	7f0b      	ldrb	r3, [r1, #28]
   12fae:	3120      	adds	r1, #32
   12fb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12fb4:	2210      	movs	r2, #16
   12fb6:	813b      	strh	r3, [r7, #8]
   12fb8:	18b8      	adds	r0, r7, r2
   12fba:	f004 ff8f 	bl	17edc <memcpy>
   12fbe:	9b00      	ldr	r3, [sp, #0]
   12fc0:	491e      	ldr	r1, [pc, #120]	; (1303c <ip_interface_accept+0x1c0>)
   12fc2:	681a      	ldr	r2, [r3, #0]
   12fc4:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
   12fc8:	400a      	ands	r2, r1
   12fca:	f042 0205 	orr.w	r2, r2, #5
   12fce:	601a      	str	r2, [r3, #0]
   12fd0:	681a      	ldr	r2, [r3, #0]
   12fd2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   12fd6:	601a      	str	r2, [r3, #0]
   12fd8:	681a      	ldr	r2, [r3, #0]
   12fda:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   12fde:	601a      	str	r2, [r3, #0]
   12fe0:	6823      	ldr	r3, [r4, #0]
   12fe2:	400b      	ands	r3, r1
   12fe4:	f043 0307 	orr.w	r3, r3, #7
   12fe8:	6023      	str	r3, [r4, #0]
   12fea:	6823      	ldr	r3, [r4, #0]
   12fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   12ff0:	6023      	str	r3, [r4, #0]
   12ff2:	f005 ff12 	bl	18e1a <rpc_ip_client_message_free>
   12ff6:	2300      	movs	r3, #0
   12ff8:	4630      	mov	r0, r6
   12ffa:	f845 3028 	str.w	r3, [r5, r8, lsl #2]
   12ffe:	e7b9      	b.n	12f74 <ip_interface_accept+0xf8>
   13000:	2509      	movs	r5, #9
   13002:	4606      	mov	r6, r0
   13004:	e7ac      	b.n	12f60 <ip_interface_accept+0xe4>
   13006:	2509      	movs	r5, #9
   13008:	e7aa      	b.n	12f60 <ip_interface_accept+0xe4>
   1300a:	250c      	movs	r5, #12
   1300c:	e7a8      	b.n	12f60 <ip_interface_accept+0xe4>
   1300e:	2b02      	cmp	r3, #2
   13010:	d1d5      	bne.n	12fbe <ip_interface_accept+0x142>
   13012:	f8da 2000 	ldr.w	r2, [sl]
   13016:	2a10      	cmp	r2, #16
   13018:	d1d1      	bne.n	12fbe <ip_interface_accept+0x142>
   1301a:	703a      	strb	r2, [r7, #0]
   1301c:	607b      	str	r3, [r7, #4]
   1301e:	7f4a      	ldrb	r2, [r1, #29]
   13020:	7f0b      	ldrb	r3, [r1, #28]
   13022:	f107 000c 	add.w	r0, r7, #12
   13026:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1302a:	813b      	strh	r3, [r7, #8]
   1302c:	2204      	movs	r2, #4
   1302e:	3120      	adds	r1, #32
   13030:	e7c3      	b.n	12fba <ip_interface_accept+0x13e>
   13032:	bf00      	nop
   13034:	000191af 	.word	0x000191af
   13038:	200152cc 	.word	0x200152cc
   1303c:	ffff0000 	.word	0xffff0000

00013040 <ip_interface_getaddrinfo>:
   13040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13044:	2601      	movs	r6, #1
   13046:	4607      	mov	r7, r0
   13048:	4608      	mov	r0, r1
   1304a:	2100      	movs	r1, #0
   1304c:	b085      	sub	sp, #20
   1304e:	4614      	mov	r4, r2
   13050:	9300      	str	r3, [sp, #0]
   13052:	4a5e      	ldr	r2, [pc, #376]	; (131cc <ip_interface_getaddrinfo+0x18c>)
   13054:	4b5e      	ldr	r3, [pc, #376]	; (131d0 <ip_interface_getaddrinfo+0x190>)
   13056:	6016      	str	r6, [r2, #0]
   13058:	601e      	str	r6, [r3, #0]
   1305a:	4e5e      	ldr	r6, [pc, #376]	; (131d4 <ip_interface_getaddrinfo+0x194>)
   1305c:	4d5e      	ldr	r5, [pc, #376]	; (131d8 <ip_interface_getaddrinfo+0x198>)
   1305e:	7836      	ldrb	r6, [r6, #0]
   13060:	469b      	mov	fp, r3
   13062:	8029      	strh	r1, [r5, #0]
   13064:	9201      	str	r2, [sp, #4]
   13066:	2e00      	cmp	r6, #0
   13068:	f000 80a9 	beq.w	131be <ip_interface_getaddrinfo+0x17e>
   1306c:	b150      	cbz	r0, 13084 <ip_interface_getaddrinfo+0x44>
   1306e:	220a      	movs	r2, #10
   13070:	f004 fdc9 	bl	17c06 <strtol>
   13074:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   13078:	1e42      	subs	r2, r0, #1
   1307a:	429a      	cmp	r2, r3
   1307c:	f200 80a1 	bhi.w	131c2 <ip_interface_getaddrinfo+0x182>
   13080:	ba40      	rev16	r0, r0
   13082:	8028      	strh	r0, [r5, #0]
   13084:	4e55      	ldr	r6, [pc, #340]	; (131dc <ip_interface_getaddrinfo+0x19c>)
   13086:	f8d6 a000 	ldr.w	sl, [r6]
   1308a:	f1ba 0f00 	cmp.w	sl, #0
   1308e:	f040 809a 	bne.w	131c6 <ip_interface_getaddrinfo+0x186>
   13092:	4953      	ldr	r1, [pc, #332]	; (131e0 <ip_interface_getaddrinfo+0x1a0>)
   13094:	4a53      	ldr	r2, [pc, #332]	; (131e4 <ip_interface_getaddrinfo+0x1a4>)
   13096:	4689      	mov	r9, r1
   13098:	4690      	mov	r8, r2
   1309a:	f8c1 a000 	str.w	sl, [r1]
   1309e:	f8c2 a000 	str.w	sl, [r2]
   130a2:	b11f      	cbz	r7, 130ac <ip_interface_getaddrinfo+0x6c>
   130a4:	4638      	mov	r0, r7
   130a6:	f004 fede 	bl	17e66 <strlen>
   130aa:	4682      	mov	sl, r0
   130ac:	2c00      	cmp	r4, #0
   130ae:	d142      	bne.n	13136 <ip_interface_getaddrinfo+0xf6>
   130b0:	f04f 31ff 	mov.w	r1, #4294967295
   130b4:	4653      	mov	r3, sl
   130b6:	f247 020d 	movw	r2, #28685	; 0x700d
   130ba:	4608      	mov	r0, r1
   130bc:	f006 f8a8 	bl	19210 <ip_interface_request_create>
   130c0:	4605      	mov	r5, r0
   130c2:	2800      	cmp	r0, #0
   130c4:	d074      	beq.n	131b0 <ip_interface_getaddrinfo+0x170>
   130c6:	2c00      	cmp	r4, #0
   130c8:	d064      	beq.n	13194 <ip_interface_getaddrinfo+0x154>
   130ca:	6862      	ldr	r2, [r4, #4]
   130cc:	f022 0108 	bic.w	r1, r2, #8
   130d0:	2902      	cmp	r1, #2
   130d2:	d049      	beq.n	13168 <ip_interface_getaddrinfo+0x128>
   130d4:	2a05      	cmp	r2, #5
   130d6:	d047      	beq.n	13168 <ip_interface_getaddrinfo+0x128>
   130d8:	202f      	movs	r0, #47	; 0x2f
   130da:	f7fd f83d 	bl	10158 <nrf_modem_os_errno_set>
   130de:	f04f 34ff 	mov.w	r4, #4294967295
   130e2:	68aa      	ldr	r2, [r5, #8]
   130e4:	3210      	adds	r2, #16
   130e6:	60aa      	str	r2, [r5, #8]
   130e8:	b12f      	cbz	r7, 130f6 <ip_interface_getaddrinfo+0xb6>
   130ea:	6828      	ldr	r0, [r5, #0]
   130ec:	b118      	cbz	r0, 130f6 <ip_interface_getaddrinfo+0xb6>
   130ee:	4652      	mov	r2, sl
   130f0:	4639      	mov	r1, r7
   130f2:	f004 fef3 	bl	17edc <memcpy>
   130f6:	2c00      	cmp	r4, #0
   130f8:	d15c      	bne.n	131b4 <ip_interface_getaddrinfo+0x174>
   130fa:	2301      	movs	r3, #1
   130fc:	f247 010d 	movw	r1, #28685	; 0x700d
   13100:	4628      	mov	r0, r5
   13102:	6033      	str	r3, [r6, #0]
   13104:	f005 fe75 	bl	18df2 <rpc_ip_client_request_send>
   13108:	2800      	cmp	r0, #0
   1310a:	d156      	bne.n	131ba <ip_interface_getaddrinfo+0x17a>
   1310c:	f04f 33ff 	mov.w	r3, #4294967295
   13110:	9303      	str	r3, [sp, #12]
   13112:	4628      	mov	r0, r5
   13114:	a903      	add	r1, sp, #12
   13116:	f7fc ff67 	bl	ffe8 <nrf_modem_os_timedwait>
   1311a:	6833      	ldr	r3, [r6, #0]
   1311c:	2b01      	cmp	r3, #1
   1311e:	d0f8      	beq.n	13112 <ip_interface_getaddrinfo+0xd2>
   13120:	f8d8 3000 	ldr.w	r3, [r8]
   13124:	2b00      	cmp	r3, #0
   13126:	d03b      	beq.n	131a0 <ip_interface_getaddrinfo+0x160>
   13128:	f8d8 4000 	ldr.w	r4, [r8]
   1312c:	2c00      	cmp	r4, #0
   1312e:	d03b      	beq.n	131a8 <ip_interface_getaddrinfo+0x168>
   13130:	2300      	movs	r3, #0
   13132:	6033      	str	r3, [r6, #0]
   13134:	e038      	b.n	131a8 <ip_interface_getaddrinfo+0x168>
   13136:	69e2      	ldr	r2, [r4, #28]
   13138:	2a00      	cmp	r2, #0
   1313a:	d0b9      	beq.n	130b0 <ip_interface_getaddrinfo+0x70>
   1313c:	6851      	ldr	r1, [r2, #4]
   1313e:	2966      	cmp	r1, #102	; 0x66
   13140:	d1b6      	bne.n	130b0 <ip_interface_getaddrinfo+0x70>
   13142:	6891      	ldr	r1, [r2, #8]
   13144:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   13148:	d1b2      	bne.n	130b0 <ip_interface_getaddrinfo+0x70>
   1314a:	f240 2102 	movw	r1, #514	; 0x202
   1314e:	68d0      	ldr	r0, [r2, #12]
   13150:	4288      	cmp	r0, r1
   13152:	d1ad      	bne.n	130b0 <ip_interface_getaddrinfo+0x70>
   13154:	6991      	ldr	r1, [r2, #24]
   13156:	2900      	cmp	r1, #0
   13158:	d0aa      	beq.n	130b0 <ip_interface_getaddrinfo+0x70>
   1315a:	6860      	ldr	r0, [r4, #4]
   1315c:	f002 f910 	bl	15380 <pdn_interface_pdn_id_get>
   13160:	1c43      	adds	r3, r0, #1
   13162:	d0a5      	beq.n	130b0 <ip_interface_getaddrinfo+0x70>
   13164:	4601      	mov	r1, r0
   13166:	e7a5      	b.n	130b4 <ip_interface_getaddrinfo+0x74>
   13168:	68a1      	ldr	r1, [r4, #8]
   1316a:	2902      	cmp	r1, #2
   1316c:	bf08      	it	eq
   1316e:	9b01      	ldreq	r3, [sp, #4]
   13170:	f8cb 1000 	str.w	r1, [fp]
   13174:	bf08      	it	eq
   13176:	6019      	streq	r1, [r3, #0]
   13178:	2a05      	cmp	r2, #5
   1317a:	d003      	beq.n	13184 <ip_interface_getaddrinfo+0x144>
   1317c:	2a0a      	cmp	r2, #10
   1317e:	bf0c      	ite	eq
   13180:	2202      	moveq	r2, #2
   13182:	2201      	movne	r2, #1
   13184:	61aa      	str	r2, [r5, #24]
   13186:	68e2      	ldr	r2, [r4, #12]
   13188:	61e9      	str	r1, [r5, #28]
   1318a:	622a      	str	r2, [r5, #32]
   1318c:	6822      	ldr	r2, [r4, #0]
   1318e:	2400      	movs	r4, #0
   13190:	616a      	str	r2, [r5, #20]
   13192:	e7a6      	b.n	130e2 <ip_interface_getaddrinfo+0xa2>
   13194:	2210      	movs	r2, #16
   13196:	4621      	mov	r1, r4
   13198:	3014      	adds	r0, #20
   1319a:	f004 feca 	bl	17f32 <memset>
   1319e:	e7a0      	b.n	130e2 <ip_interface_getaddrinfo+0xa2>
   131a0:	f8d9 3000 	ldr.w	r3, [r9]
   131a4:	9a00      	ldr	r2, [sp, #0]
   131a6:	6013      	str	r3, [r2, #0]
   131a8:	4620      	mov	r0, r4
   131aa:	b005      	add	sp, #20
   131ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131b0:	240c      	movs	r4, #12
   131b2:	e7bd      	b.n	13130 <ip_interface_getaddrinfo+0xf0>
   131b4:	f04f 34ff 	mov.w	r4, #4294967295
   131b8:	e7ba      	b.n	13130 <ip_interface_getaddrinfo+0xf0>
   131ba:	2423      	movs	r4, #35	; 0x23
   131bc:	e7b8      	b.n	13130 <ip_interface_getaddrinfo+0xf0>
   131be:	2470      	movs	r4, #112	; 0x70
   131c0:	e7f2      	b.n	131a8 <ip_interface_getaddrinfo+0x168>
   131c2:	2416      	movs	r4, #22
   131c4:	e7f0      	b.n	131a8 <ip_interface_getaddrinfo+0x168>
   131c6:	2473      	movs	r4, #115	; 0x73
   131c8:	e7ee      	b.n	131a8 <ip_interface_getaddrinfo+0x168>
   131ca:	bf00      	nop
   131cc:	200152b8 	.word	0x200152b8
   131d0:	200152bc 	.word	0x200152bc
   131d4:	200177a0 	.word	0x200177a0
   131d8:	20015c3c 	.word	0x20015c3c
   131dc:	200152c4 	.word	0x200152c4
   131e0:	200152c8 	.word	0x200152c8
   131e4:	200152c0 	.word	0x200152c0

000131e8 <ip_interface_freeaddrinfo>:
   131e8:	b538      	push	{r3, r4, r5, lr}
   131ea:	4d0a      	ldr	r5, [pc, #40]	; (13214 <ip_interface_freeaddrinfo+0x2c>)
   131ec:	4604      	mov	r4, r0
   131ee:	682a      	ldr	r2, [r5, #0]
   131f0:	2a02      	cmp	r2, #2
   131f2:	d10e      	bne.n	13212 <ip_interface_freeaddrinfo+0x2a>
   131f4:	b148      	cbz	r0, 1320a <ip_interface_freeaddrinfo+0x22>
   131f6:	6940      	ldr	r0, [r0, #20]
   131f8:	f7fd f93e 	bl	10478 <nrf_modem_os_free>
   131fc:	69a0      	ldr	r0, [r4, #24]
   131fe:	b108      	cbz	r0, 13204 <ip_interface_freeaddrinfo+0x1c>
   13200:	f7fd f93a 	bl	10478 <nrf_modem_os_free>
   13204:	4620      	mov	r0, r4
   13206:	f7fd f937 	bl	10478 <nrf_modem_os_free>
   1320a:	2300      	movs	r3, #0
   1320c:	4a02      	ldr	r2, [pc, #8]	; (13218 <ip_interface_freeaddrinfo+0x30>)
   1320e:	602b      	str	r3, [r5, #0]
   13210:	6013      	str	r3, [r2, #0]
   13212:	bd38      	pop	{r3, r4, r5, pc}
   13214:	200152c4 	.word	0x200152c4
   13218:	200152c0 	.word	0x200152c0

0001321c <rpc_ip_event_handler>:
   1321c:	f248 030d 	movw	r3, #32781	; 0x800d
   13220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13224:	4299      	cmp	r1, r3
   13226:	4604      	mov	r4, r0
   13228:	460e      	mov	r6, r1
   1322a:	b089      	sub	sp, #36	; 0x24
   1322c:	d038      	beq.n	132a0 <rpc_ip_event_handler+0x84>
   1322e:	f248 030f 	movw	r3, #32783	; 0x800f
   13232:	4299      	cmp	r1, r3
   13234:	f000 80c8 	beq.w	133c8 <rpc_ip_event_handler+0x1ac>
   13238:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1323c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   13240:	68c0      	ldr	r0, [r0, #12]
   13242:	f040 80ce 	bne.w	133e2 <rpc_ip_event_handler+0x1c6>
   13246:	f7ff fa0b 	bl	12660 <interface_from_internal_id_search>
   1324a:	4607      	mov	r7, r0
   1324c:	4638      	mov	r0, r7
   1324e:	f7ff fa1f 	bl	12690 <interface_socket_from_handle_get>
   13252:	4605      	mov	r5, r0
   13254:	2800      	cmp	r0, #0
   13256:	d056      	beq.n	13306 <rpc_ip_event_handler+0xea>
   13258:	4601      	mov	r1, r0
   1325a:	4633      	mov	r3, r6
   1325c:	4622      	mov	r2, r4
   1325e:	4638      	mov	r0, r7
   13260:	f000 fd94 	bl	13d8c <tls_rpc_ip_event_handler>
   13264:	2800      	cmp	r0, #0
   13266:	f000 80ba 	beq.w	133de <rpc_ip_event_handler+0x1c2>
   1326a:	f248 030c 	movw	r3, #32780	; 0x800c
   1326e:	429e      	cmp	r6, r3
   13270:	f200 80b9 	bhi.w	133e6 <rpc_ip_event_handler+0x1ca>
   13274:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   13278:	d945      	bls.n	13306 <rpc_ip_event_handler+0xea>
   1327a:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   1327e:	3e01      	subs	r6, #1
   13280:	2e0b      	cmp	r6, #11
   13282:	d840      	bhi.n	13306 <rpc_ip_event_handler+0xea>
   13284:	e8df f016 	tbh	[pc, r6, lsl #1]
   13288:	013e00f1 	.word	0x013e00f1
   1328c:	01f501e6 	.word	0x01f501e6
   13290:	01b9012f 	.word	0x01b9012f
   13294:	015d01b9 	.word	0x015d01b9
   13298:	003f00ff 	.word	0x003f00ff
   1329c:	0188003f 	.word	0x0188003f
   132a0:	4baf      	ldr	r3, [pc, #700]	; (13560 <rpc_ip_event_handler+0x344>)
   132a2:	681a      	ldr	r2, [r3, #0]
   132a4:	9303      	str	r3, [sp, #12]
   132a6:	2a01      	cmp	r2, #1
   132a8:	d12d      	bne.n	13306 <rpc_ip_event_handler+0xea>
   132aa:	6943      	ldr	r3, [r0, #20]
   132ac:	2b00      	cmp	r3, #0
   132ae:	f040 8083 	bne.w	133b8 <rpc_ip_event_handler+0x19c>
   132b2:	f8d0 9018 	ldr.w	r9, [r0, #24]
   132b6:	f8d0 a000 	ldr.w	sl, [r0]
   132ba:	ea4f 1349 	mov.w	r3, r9, lsl #5
   132be:	4618      	mov	r0, r3
   132c0:	9301      	str	r3, [sp, #4]
   132c2:	f7fd f8c9 	bl	10458 <nrf_modem_os_alloc>
   132c6:	4680      	mov	r8, r0
   132c8:	b310      	cbz	r0, 13310 <rpc_ip_event_handler+0xf4>
   132ca:	2024      	movs	r0, #36	; 0x24
   132cc:	fb00 f009 	mul.w	r0, r0, r9
   132d0:	f7fd f8c2 	bl	10458 <nrf_modem_os_alloc>
   132d4:	b1f0      	cbz	r0, 13314 <rpc_ip_event_handler+0xf8>
   132d6:	4605      	mov	r5, r0
   132d8:	2704      	movs	r7, #4
   132da:	eb00 03c9 	add.w	r3, r0, r9, lsl #3
   132de:	f108 0620 	add.w	r6, r8, #32
   132e2:	9302      	str	r3, [sp, #8]
   132e4:	9b02      	ldr	r3, [sp, #8]
   132e6:	42ab      	cmp	r3, r5
   132e8:	d118      	bne.n	1331c <rpc_ip_event_handler+0x100>
   132ea:	f1b9 0f00 	cmp.w	r9, #0
   132ee:	d004      	beq.n	132fa <rpc_ip_event_handler+0xde>
   132f0:	2200      	movs	r2, #0
   132f2:	9b01      	ldr	r3, [sp, #4]
   132f4:	4443      	add	r3, r8
   132f6:	f843 2c04 	str.w	r2, [r3, #-4]
   132fa:	4b9a      	ldr	r3, [pc, #616]	; (13564 <rpc_ip_event_handler+0x348>)
   132fc:	f8c3 8000 	str.w	r8, [r3]
   13300:	2302      	movs	r3, #2
   13302:	9a03      	ldr	r2, [sp, #12]
   13304:	6013      	str	r3, [r2, #0]
   13306:	6820      	ldr	r0, [r4, #0]
   13308:	2800      	cmp	r0, #0
   1330a:	f040 8173 	bne.w	135f4 <rpc_ip_event_handler+0x3d8>
   1330e:	e066      	b.n	133de <rpc_ip_event_handler+0x1c2>
   13310:	f7fd f8b2 	bl	10478 <nrf_modem_os_free>
   13314:	220c      	movs	r2, #12
   13316:	4b94      	ldr	r3, [pc, #592]	; (13568 <rpc_ip_event_handler+0x34c>)
   13318:	601a      	str	r2, [r3, #0]
   1331a:	e7ee      	b.n	132fa <rpc_ip_event_handler+0xde>
   1331c:	f85a 3007 	ldr.w	r3, [sl, r7]
   13320:	f846 3c20 	str.w	r3, [r6, #-32]
   13324:	eb0a 0307 	add.w	r3, sl, r7
   13328:	685a      	ldr	r2, [r3, #4]
   1332a:	f8b3 b012 	ldrh.w	fp, [r3, #18]
   1332e:	2a02      	cmp	r2, #2
   13330:	bf0c      	ite	eq
   13332:	220a      	moveq	r2, #10
   13334:	2202      	movne	r2, #2
   13336:	f846 2c1c 	str.w	r2, [r6, #-28]
   1333a:	4a8c      	ldr	r2, [pc, #560]	; (1356c <rpc_ip_event_handler+0x350>)
   1333c:	3714      	adds	r7, #20
   1333e:	6812      	ldr	r2, [r2, #0]
   13340:	eb0a 0107 	add.w	r1, sl, r7
   13344:	f846 2c18 	str.w	r2, [r6, #-24]
   13348:	4a89      	ldr	r2, [pc, #548]	; (13570 <rpc_ip_event_handler+0x354>)
   1334a:	6812      	ldr	r2, [r2, #0]
   1334c:	f846 2c14 	str.w	r2, [r6, #-20]
   13350:	8a1a      	ldrh	r2, [r3, #16]
   13352:	4b88      	ldr	r3, [pc, #544]	; (13574 <rpc_ip_event_handler+0x358>)
   13354:	2a04      	cmp	r2, #4
   13356:	881b      	ldrh	r3, [r3, #0]
   13358:	f846 2c10 	str.w	r2, [r6, #-16]
   1335c:	f846 5c0c 	str.w	r5, [r6, #-12]
   13360:	d122      	bne.n	133a8 <rpc_ip_event_handler+0x18c>
   13362:	2002      	movs	r0, #2
   13364:	6068      	str	r0, [r5, #4]
   13366:	2010      	movs	r0, #16
   13368:	812b      	strh	r3, [r5, #8]
   1336a:	7028      	strb	r0, [r5, #0]
   1336c:	f105 000c 	add.w	r0, r5, #12
   13370:	f004 fdb4 	bl	17edc <memcpy>
   13374:	f856 3c10 	ldr.w	r3, [r6, #-16]
   13378:	f10b 0001 	add.w	r0, fp, #1
   1337c:	441f      	add	r7, r3
   1337e:	f7fd f86b 	bl	10458 <nrf_modem_os_alloc>
   13382:	f846 0c08 	str.w	r0, [r6, #-8]
   13386:	b148      	cbz	r0, 1339c <rpc_ip_event_handler+0x180>
   13388:	465a      	mov	r2, fp
   1338a:	eb0a 0107 	add.w	r1, sl, r7
   1338e:	f004 fda5 	bl	17edc <memcpy>
   13392:	2200      	movs	r2, #0
   13394:	f856 3c08 	ldr.w	r3, [r6, #-8]
   13398:	f803 200b 	strb.w	r2, [r3, fp]
   1339c:	f846 6c04 	str.w	r6, [r6, #-4]
   133a0:	445f      	add	r7, fp
   133a2:	3620      	adds	r6, #32
   133a4:	3508      	adds	r5, #8
   133a6:	e79d      	b.n	132e4 <rpc_ip_event_handler+0xc8>
   133a8:	200a      	movs	r0, #10
   133aa:	6068      	str	r0, [r5, #4]
   133ac:	2024      	movs	r0, #36	; 0x24
   133ae:	812b      	strh	r3, [r5, #8]
   133b0:	7028      	strb	r0, [r5, #0]
   133b2:	f105 0010 	add.w	r0, r5, #16
   133b6:	e7db      	b.n	13370 <rpc_ip_event_handler+0x154>
   133b8:	2b10      	cmp	r3, #16
   133ba:	bf8e      	itee	hi
   133bc:	232d      	movhi	r3, #45	; 0x2d
   133be:	4a6e      	ldrls	r2, [pc, #440]	; (13578 <rpc_ip_event_handler+0x35c>)
   133c0:	56d3      	ldrsbls	r3, [r2, r3]
   133c2:	4a69      	ldr	r2, [pc, #420]	; (13568 <rpc_ip_event_handler+0x34c>)
   133c4:	6013      	str	r3, [r2, #0]
   133c6:	e79b      	b.n	13300 <rpc_ip_event_handler+0xe4>
   133c8:	6943      	ldr	r3, [r0, #20]
   133ca:	2b10      	cmp	r3, #16
   133cc:	bf8e      	itee	hi
   133ce:	232d      	movhi	r3, #45	; 0x2d
   133d0:	4a69      	ldrls	r2, [pc, #420]	; (13578 <rpc_ip_event_handler+0x35c>)
   133d2:	56d3      	ldrsbls	r3, [r2, r3]
   133d4:	4a69      	ldr	r2, [pc, #420]	; (1357c <rpc_ip_event_handler+0x360>)
   133d6:	6013      	str	r3, [r2, #0]
   133d8:	2201      	movs	r2, #1
   133da:	4b69      	ldr	r3, [pc, #420]	; (13580 <rpc_ip_event_handler+0x364>)
   133dc:	701a      	strb	r2, [r3, #0]
   133de:	2000      	movs	r0, #0
   133e0:	e04e      	b.n	13480 <rpc_ip_event_handler+0x264>
   133e2:	0c07      	lsrs	r7, r0, #16
   133e4:	e732      	b.n	1324c <rpc_ip_event_handler+0x30>
   133e6:	f249 0302 	movw	r3, #36866	; 0x9002
   133ea:	429e      	cmp	r6, r3
   133ec:	f000 80ca 	beq.w	13584 <rpc_ip_event_handler+0x368>
   133f0:	f249 0303 	movw	r3, #36867	; 0x9003
   133f4:	429e      	cmp	r6, r3
   133f6:	d055      	beq.n	134a4 <rpc_ip_event_handler+0x288>
   133f8:	f249 0301 	movw	r3, #36865	; 0x9001
   133fc:	429e      	cmp	r6, r3
   133fe:	d182      	bne.n	13306 <rpc_ip_event_handler+0xea>
   13400:	682e      	ldr	r6, [r5, #0]
   13402:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   13406:	f000 80f4 	beq.w	135f2 <rpc_ip_event_handler+0x3d6>
   1340a:	68a3      	ldr	r3, [r4, #8]
   1340c:	2b04      	cmp	r3, #4
   1340e:	f240 80ed 	bls.w	135ec <rpc_ip_event_handler+0x3d0>
   13412:	8a66      	ldrh	r6, [r4, #18]
   13414:	2e00      	cmp	r6, #0
   13416:	f000 80ea 	beq.w	135ee <rpc_ip_event_handler+0x3d2>
   1341a:	2024      	movs	r0, #36	; 0x24
   1341c:	f7fd f81c 	bl	10458 <nrf_modem_os_alloc>
   13420:	4607      	mov	r7, r0
   13422:	b300      	cbz	r0, 13466 <rpc_ip_event_handler+0x24a>
   13424:	8a62      	ldrh	r2, [r4, #18]
   13426:	2a10      	cmp	r2, #16
   13428:	f040 80c9 	bne.w	135be <rpc_ip_event_handler+0x3a2>
   1342c:	230a      	movs	r3, #10
   1342e:	2624      	movs	r6, #36	; 0x24
   13430:	6043      	str	r3, [r0, #4]
   13432:	7006      	strb	r6, [r0, #0]
   13434:	7c61      	ldrb	r1, [r4, #17]
   13436:	7c23      	ldrb	r3, [r4, #16]
   13438:	3010      	adds	r0, #16
   1343a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1343e:	f820 3c08 	strh.w	r3, [r0, #-8]
   13442:	f104 0114 	add.w	r1, r4, #20
   13446:	f004 fd49 	bl	17edc <memcpy>
   1344a:	6822      	ldr	r2, [r4, #0]
   1344c:	69e8      	ldr	r0, [r5, #28]
   1344e:	9204      	str	r2, [sp, #16]
   13450:	6803      	ldr	r3, [r0, #0]
   13452:	6862      	ldr	r2, [r4, #4]
   13454:	685b      	ldr	r3, [r3, #4]
   13456:	e9cd 2705 	strd	r2, r7, [sp, #20]
   1345a:	9607      	str	r6, [sp, #28]
   1345c:	a904      	add	r1, sp, #16
   1345e:	4798      	blx	r3
   13460:	3001      	adds	r0, #1
   13462:	f040 8094 	bne.w	1358e <rpc_ip_event_handler+0x372>
   13466:	2002      	movs	r0, #2
   13468:	e00a      	b.n	13480 <rpc_ip_event_handler+0x264>
   1346a:	682b      	ldr	r3, [r5, #0]
   1346c:	2b01      	cmp	r3, #1
   1346e:	d1b6      	bne.n	133de <rpc_ip_event_handler+0x1c2>
   13470:	6960      	ldr	r0, [r4, #20]
   13472:	2800      	cmp	r0, #0
   13474:	f040 80f8 	bne.w	13668 <rpc_ip_event_handler+0x44c>
   13478:	2302      	movs	r3, #2
   1347a:	602b      	str	r3, [r5, #0]
   1347c:	69a3      	ldr	r3, [r4, #24]
   1347e:	61ab      	str	r3, [r5, #24]
   13480:	b009      	add	sp, #36	; 0x24
   13482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13486:	682b      	ldr	r3, [r5, #0]
   13488:	b29b      	uxth	r3, r3
   1348a:	2b0d      	cmp	r3, #13
   1348c:	d1a7      	bne.n	133de <rpc_ip_event_handler+0x1c2>
   1348e:	6960      	ldr	r0, [r4, #20]
   13490:	2800      	cmp	r0, #0
   13492:	f040 80e9 	bne.w	13668 <rpc_ip_event_handler+0x44c>
   13496:	682b      	ldr	r3, [r5, #0]
   13498:	0c1b      	lsrs	r3, r3, #16
   1349a:	041b      	lsls	r3, r3, #16
   1349c:	f043 030e 	orr.w	r3, r3, #14
   134a0:	602b      	str	r3, [r5, #0]
   134a2:	e7ed      	b.n	13480 <rpc_ip_event_handler+0x264>
   134a4:	682b      	ldr	r3, [r5, #0]
   134a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   134aa:	602b      	str	r3, [r5, #0]
   134ac:	682b      	ldr	r3, [r5, #0]
   134ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   134b2:	602b      	str	r3, [r5, #0]
   134b4:	682b      	ldr	r3, [r5, #0]
   134b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   134ba:	602b      	str	r3, [r5, #0]
   134bc:	682b      	ldr	r3, [r5, #0]
   134be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   134c2:	602b      	str	r3, [r5, #0]
   134c4:	6923      	ldr	r3, [r4, #16]
   134c6:	2b6c      	cmp	r3, #108	; 0x6c
   134c8:	d107      	bne.n	134da <rpc_ip_event_handler+0x2be>
   134ca:	682b      	ldr	r3, [r5, #0]
   134cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   134d0:	602b      	str	r3, [r5, #0]
   134d2:	2339      	movs	r3, #57	; 0x39
   134d4:	606b      	str	r3, [r5, #4]
   134d6:	60ab      	str	r3, [r5, #8]
   134d8:	e781      	b.n	133de <rpc_ip_event_handler+0x1c2>
   134da:	2b10      	cmp	r3, #16
   134dc:	bf96      	itet	ls
   134de:	4a26      	ldrls	r2, [pc, #152]	; (13578 <rpc_ip_event_handler+0x35c>)
   134e0:	232d      	movhi	r3, #45	; 0x2d
   134e2:	56d3      	ldrsbls	r3, [r2, r3]
   134e4:	e7f6      	b.n	134d4 <rpc_ip_event_handler+0x2b8>
   134e6:	682b      	ldr	r3, [r5, #0]
   134e8:	b29b      	uxth	r3, r3
   134ea:	2b03      	cmp	r3, #3
   134ec:	f47f af77 	bne.w	133de <rpc_ip_event_handler+0x1c2>
   134f0:	6960      	ldr	r0, [r4, #20]
   134f2:	2800      	cmp	r0, #0
   134f4:	f040 80b8 	bne.w	13668 <rpc_ip_event_handler+0x44c>
   134f8:	682b      	ldr	r3, [r5, #0]
   134fa:	0c1b      	lsrs	r3, r3, #16
   134fc:	041b      	lsls	r3, r3, #16
   134fe:	f043 0304 	orr.w	r3, r3, #4
   13502:	e7cd      	b.n	134a0 <rpc_ip_event_handler+0x284>
   13504:	682b      	ldr	r3, [r5, #0]
   13506:	0098      	lsls	r0, r3, #2
   13508:	f57f af69 	bpl.w	133de <rpc_ip_event_handler+0x1c2>
   1350c:	682b      	ldr	r3, [r5, #0]
   1350e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   13512:	602b      	str	r3, [r5, #0]
   13514:	6960      	ldr	r0, [r4, #20]
   13516:	b968      	cbnz	r0, 13534 <rpc_ip_event_handler+0x318>
   13518:	682b      	ldr	r3, [r5, #0]
   1351a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1351e:	602b      	str	r3, [r5, #0]
   13520:	682b      	ldr	r3, [r5, #0]
   13522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13526:	602b      	str	r3, [r5, #0]
   13528:	682b      	ldr	r3, [r5, #0]
   1352a:	0c1b      	lsrs	r3, r3, #16
   1352c:	041b      	lsls	r3, r3, #16
   1352e:	f043 0305 	orr.w	r3, r3, #5
   13532:	e7b5      	b.n	134a0 <rpc_ip_event_handler+0x284>
   13534:	2810      	cmp	r0, #16
   13536:	f200 808b 	bhi.w	13650 <rpc_ip_event_handler+0x434>
   1353a:	4b0f      	ldr	r3, [pc, #60]	; (13578 <rpc_ip_event_handler+0x35c>)
   1353c:	561b      	ldrsb	r3, [r3, r0]
   1353e:	606b      	str	r3, [r5, #4]
   13540:	e076      	b.n	13630 <rpc_ip_event_handler+0x414>
   13542:	682b      	ldr	r3, [r5, #0]
   13544:	b29b      	uxth	r3, r3
   13546:	2b06      	cmp	r3, #6
   13548:	f47f af49 	bne.w	133de <rpc_ip_event_handler+0x1c2>
   1354c:	6960      	ldr	r0, [r4, #20]
   1354e:	2800      	cmp	r0, #0
   13550:	f040 808a 	bne.w	13668 <rpc_ip_event_handler+0x44c>
   13554:	682b      	ldr	r3, [r5, #0]
   13556:	0c1b      	lsrs	r3, r3, #16
   13558:	041b      	lsls	r3, r3, #16
   1355a:	f043 0307 	orr.w	r3, r3, #7
   1355e:	e79f      	b.n	134a0 <rpc_ip_event_handler+0x284>
   13560:	200152c4 	.word	0x200152c4
   13564:	200152c8 	.word	0x200152c8
   13568:	200152c0 	.word	0x200152c0
   1356c:	200152bc 	.word	0x200152bc
   13570:	200152b8 	.word	0x200152b8
   13574:	20015c3c 	.word	0x20015c3c
   13578:	0001b552 	.word	0x0001b552
   1357c:	200152f0 	.word	0x200152f0
   13580:	200177a1 	.word	0x200177a1
   13584:	682b      	ldr	r3, [r5, #0]
   13586:	b29b      	uxth	r3, r3
   13588:	2b07      	cmp	r3, #7
   1358a:	f47f af28 	bne.w	133de <rpc_ip_event_handler+0x1c2>
   1358e:	682b      	ldr	r3, [r5, #0]
   13590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   13594:	602b      	str	r3, [r5, #0]
   13596:	e722      	b.n	133de <rpc_ip_event_handler+0x1c2>
   13598:	682b      	ldr	r3, [r5, #0]
   1359a:	b29b      	uxth	r3, r3
   1359c:	2b08      	cmp	r3, #8
   1359e:	f47f af1e 	bne.w	133de <rpc_ip_event_handler+0x1c2>
   135a2:	6963      	ldr	r3, [r4, #20]
   135a4:	2b00      	cmp	r3, #0
   135a6:	d174      	bne.n	13692 <rpc_ip_event_handler+0x476>
   135a8:	4b3d      	ldr	r3, [pc, #244]	; (136a0 <rpc_ip_event_handler+0x484>)
   135aa:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   135ae:	682b      	ldr	r3, [r5, #0]
   135b0:	0c1b      	lsrs	r3, r3, #16
   135b2:	041b      	lsls	r3, r3, #16
   135b4:	f043 0309 	orr.w	r3, r3, #9
   135b8:	602b      	str	r3, [r5, #0]
   135ba:	2001      	movs	r0, #1
   135bc:	e760      	b.n	13480 <rpc_ip_event_handler+0x264>
   135be:	2a04      	cmp	r2, #4
   135c0:	d10d      	bne.n	135de <rpc_ip_event_handler+0x3c2>
   135c2:	2302      	movs	r3, #2
   135c4:	2610      	movs	r6, #16
   135c6:	6043      	str	r3, [r0, #4]
   135c8:	7006      	strb	r6, [r0, #0]
   135ca:	7c61      	ldrb	r1, [r4, #17]
   135cc:	7c23      	ldrb	r3, [r4, #16]
   135ce:	300c      	adds	r0, #12
   135d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   135d4:	f820 3c04 	strh.w	r3, [r0, #-4]
   135d8:	f104 0114 	add.w	r1, r4, #20
   135dc:	e733      	b.n	13446 <rpc_ip_event_handler+0x22a>
   135de:	6820      	ldr	r0, [r4, #0]
   135e0:	f005 fc23 	bl	18e2a <rpc_ip_client_data_free>
   135e4:	4638      	mov	r0, r7
   135e6:	f7fc ff47 	bl	10478 <nrf_modem_os_free>
   135ea:	e6f8      	b.n	133de <rpc_ip_event_handler+0x1c2>
   135ec:	2600      	movs	r6, #0
   135ee:	4637      	mov	r7, r6
   135f0:	e72b      	b.n	1344a <rpc_ip_event_handler+0x22e>
   135f2:	6820      	ldr	r0, [r4, #0]
   135f4:	f005 fc19 	bl	18e2a <rpc_ip_client_data_free>
   135f8:	e6f1      	b.n	133de <rpc_ip_event_handler+0x1c2>
   135fa:	682b      	ldr	r3, [r5, #0]
   135fc:	0299      	lsls	r1, r3, #10
   135fe:	f57f aeee 	bpl.w	133de <rpc_ip_event_handler+0x1c2>
   13602:	6963      	ldr	r3, [r4, #20]
   13604:	b93b      	cbnz	r3, 13616 <rpc_ip_event_handler+0x3fa>
   13606:	682b      	ldr	r3, [r5, #0]
   13608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1360c:	602b      	str	r3, [r5, #0]
   1360e:	4b24      	ldr	r3, [pc, #144]	; (136a0 <rpc_ip_event_handler+0x484>)
   13610:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   13614:	e7d1      	b.n	135ba <rpc_ip_event_handler+0x39e>
   13616:	2b6b      	cmp	r3, #107	; 0x6b
   13618:	d10e      	bne.n	13638 <rpc_ip_event_handler+0x41c>
   1361a:	692b      	ldr	r3, [r5, #16]
   1361c:	220c      	movs	r2, #12
   1361e:	2b01      	cmp	r3, #1
   13620:	d105      	bne.n	1362e <rpc_ip_event_handler+0x412>
   13622:	682b      	ldr	r3, [r5, #0]
   13624:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   13628:	602b      	str	r3, [r5, #0]
   1362a:	606a      	str	r2, [r5, #4]
   1362c:	e6d7      	b.n	133de <rpc_ip_event_handler+0x1c2>
   1362e:	606a      	str	r2, [r5, #4]
   13630:	682b      	ldr	r3, [r5, #0]
   13632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   13636:	e7ad      	b.n	13594 <rpc_ip_event_handler+0x378>
   13638:	f023 0202 	bic.w	r2, r3, #2
   1363c:	2a01      	cmp	r2, #1
   1363e:	d102      	bne.n	13646 <rpc_ip_event_handler+0x42a>
   13640:	230c      	movs	r3, #12
   13642:	606b      	str	r3, [r5, #4]
   13644:	e6cb      	b.n	133de <rpc_ip_event_handler+0x1c2>
   13646:	2b10      	cmp	r3, #16
   13648:	d802      	bhi.n	13650 <rpc_ip_event_handler+0x434>
   1364a:	4a16      	ldr	r2, [pc, #88]	; (136a4 <rpc_ip_event_handler+0x488>)
   1364c:	56d3      	ldrsb	r3, [r2, r3]
   1364e:	e776      	b.n	1353e <rpc_ip_event_handler+0x322>
   13650:	232d      	movs	r3, #45	; 0x2d
   13652:	e774      	b.n	1353e <rpc_ip_event_handler+0x322>
   13654:	682b      	ldr	r3, [r5, #0]
   13656:	025a      	lsls	r2, r3, #9
   13658:	f57f aec1 	bpl.w	133de <rpc_ip_event_handler+0x1c2>
   1365c:	6960      	ldr	r0, [r4, #20]
   1365e:	b918      	cbnz	r0, 13668 <rpc_ip_event_handler+0x44c>
   13660:	682b      	ldr	r3, [r5, #0]
   13662:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   13666:	e71b      	b.n	134a0 <rpc_ip_event_handler+0x284>
   13668:	2810      	cmp	r0, #16
   1366a:	d817      	bhi.n	1369c <rpc_ip_event_handler+0x480>
   1366c:	4b0d      	ldr	r3, [pc, #52]	; (136a4 <rpc_ip_event_handler+0x488>)
   1366e:	561b      	ldrsb	r3, [r3, r0]
   13670:	e7e7      	b.n	13642 <rpc_ip_event_handler+0x426>
   13672:	682b      	ldr	r3, [r5, #0]
   13674:	01db      	lsls	r3, r3, #7
   13676:	f57f aeb2 	bpl.w	133de <rpc_ip_event_handler+0x1c2>
   1367a:	6963      	ldr	r3, [r4, #20]
   1367c:	b94b      	cbnz	r3, 13692 <rpc_ip_event_handler+0x476>
   1367e:	6820      	ldr	r0, [r4, #0]
   13680:	b118      	cbz	r0, 1368a <rpc_ip_event_handler+0x46e>
   13682:	2001      	movs	r0, #1
   13684:	4b06      	ldr	r3, [pc, #24]	; (136a0 <rpc_ip_event_handler+0x484>)
   13686:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1368a:	682b      	ldr	r3, [r5, #0]
   1368c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   13690:	e706      	b.n	134a0 <rpc_ip_event_handler+0x284>
   13692:	2b10      	cmp	r3, #16
   13694:	d802      	bhi.n	1369c <rpc_ip_event_handler+0x480>
   13696:	4a03      	ldr	r2, [pc, #12]	; (136a4 <rpc_ip_event_handler+0x488>)
   13698:	56d3      	ldrsb	r3, [r2, r3]
   1369a:	e7d2      	b.n	13642 <rpc_ip_event_handler+0x426>
   1369c:	232d      	movs	r3, #45	; 0x2d
   1369e:	e7d0      	b.n	13642 <rpc_ip_event_handler+0x426>
   136a0:	200152cc 	.word	0x200152cc
   136a4:	0001b552 	.word	0x0001b552

000136a8 <hostname_free>:
   136a8:	b538      	push	{r3, r4, r5, lr}
   136aa:	4c07      	ldr	r4, [pc, #28]	; (136c8 <hostname_free+0x20>)
   136ac:	4605      	mov	r5, r0
   136ae:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   136b2:	b138      	cbz	r0, 136c4 <hostname_free+0x1c>
   136b4:	f7fc fee0 	bl	10478 <nrf_modem_os_free>
   136b8:	2300      	movs	r3, #0
   136ba:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   136be:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   136c2:	6063      	str	r3, [r4, #4]
   136c4:	bd38      	pop	{r3, r4, r5, pc}
   136c6:	bf00      	nop
   136c8:	200152f4 	.word	0x200152f4

000136cc <secure_socket_attach_initiate>:
   136cc:	f04f 33ff 	mov.w	r3, #4294967295
   136d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   136d4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 13764 <secure_socket_attach_initiate+0x98>
   136d8:	9301      	str	r3, [sp, #4]
   136da:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   136de:	460c      	mov	r4, r1
   136e0:	4616      	mov	r6, r2
   136e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   136e6:	f247 0281 	movw	r2, #28801	; 0x7081
   136ea:	6989      	ldr	r1, [r1, #24]
   136ec:	4607      	mov	r7, r0
   136ee:	f005 fd8f 	bl	19210 <ip_interface_request_create>
   136f2:	4605      	mov	r5, r0
   136f4:	b378      	cbz	r0, 13756 <secure_socket_attach_initiate+0x8a>
   136f6:	f8d9 2004 	ldr.w	r2, [r9, #4]
   136fa:	b122      	cbz	r2, 13706 <secure_socket_attach_initiate+0x3a>
   136fc:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   13700:	6800      	ldr	r0, [r0, #0]
   13702:	f004 fbeb 	bl	17edc <memcpy>
   13706:	2224      	movs	r2, #36	; 0x24
   13708:	4915      	ldr	r1, [pc, #84]	; (13760 <secure_socket_attach_initiate+0x94>)
   1370a:	f105 0014 	add.w	r0, r5, #20
   1370e:	fb02 1107 	mla	r1, r2, r7, r1
   13712:	f004 fbe3 	bl	17edc <memcpy>
   13716:	68ab      	ldr	r3, [r5, #8]
   13718:	f247 0281 	movw	r2, #28801	; 0x7081
   1371c:	3324      	adds	r3, #36	; 0x24
   1371e:	60ab      	str	r3, [r5, #8]
   13720:	6823      	ldr	r3, [r4, #0]
   13722:	4629      	mov	r1, r5
   13724:	0c1b      	lsrs	r3, r3, #16
   13726:	041b      	lsls	r3, r3, #16
   13728:	f043 030a 	orr.w	r3, r3, #10
   1372c:	6023      	str	r3, [r4, #0]
   1372e:	4620      	mov	r0, r4
   13730:	4633      	mov	r3, r6
   13732:	f005 fd85 	bl	19240 <ip_interface_request_send>
   13736:	b958      	cbnz	r0, 13750 <secure_socket_attach_initiate+0x84>
   13738:	6823      	ldr	r3, [r4, #0]
   1373a:	00db      	lsls	r3, r3, #3
   1373c:	d40d      	bmi.n	1375a <secure_socket_attach_initiate+0x8e>
   1373e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13742:	210b      	movs	r1, #11
   13744:	4638      	mov	r0, r7
   13746:	ab01      	add	r3, sp, #4
   13748:	f005 fd8d 	bl	19266 <ip_interface_wait>
   1374c:	b100      	cbz	r0, 13750 <secure_socket_attach_initiate+0x84>
   1374e:	6026      	str	r6, [r4, #0]
   13750:	b003      	add	sp, #12
   13752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13756:	200c      	movs	r0, #12
   13758:	e7fa      	b.n	13750 <secure_socket_attach_initiate+0x84>
   1375a:	2073      	movs	r0, #115	; 0x73
   1375c:	e7f8      	b.n	13750 <secure_socket_attach_initiate+0x84>
   1375e:	bf00      	nop
   13760:	200177a3 	.word	0x200177a3
   13764:	200152f4 	.word	0x200152f4

00013768 <tls_interface_init>:
   13768:	2201      	movs	r2, #1
   1376a:	4b02      	ldr	r3, [pc, #8]	; (13774 <tls_interface_init+0xc>)
   1376c:	2000      	movs	r0, #0
   1376e:	701a      	strb	r2, [r3, #0]
   13770:	4770      	bx	lr
   13772:	bf00      	nop
   13774:	200177a2 	.word	0x200177a2

00013778 <tls_interface_open>:
   13778:	b538      	push	{r3, r4, r5, lr}
   1377a:	4b1e      	ldr	r3, [pc, #120]	; (137f4 <tls_interface_open+0x7c>)
   1377c:	4615      	mov	r5, r2
   1377e:	781b      	ldrb	r3, [r3, #0]
   13780:	b92b      	cbnz	r3, 1378e <tls_interface_open+0x16>
   13782:	2070      	movs	r0, #112	; 0x70
   13784:	f7fc fce8 	bl	10158 <nrf_modem_os_errno_set>
   13788:	f04f 34ff 	mov.w	r4, #4294967295
   1378c:	e02b      	b.n	137e6 <tls_interface_open+0x6e>
   1378e:	1e4b      	subs	r3, r1, #1
   13790:	2b01      	cmp	r3, #1
   13792:	d809      	bhi.n	137a8 <tls_interface_open+0x30>
   13794:	b952      	cbnz	r2, 137ac <tls_interface_open+0x34>
   13796:	2901      	cmp	r1, #1
   13798:	bf0b      	itete	eq
   1379a:	2201      	moveq	r2, #1
   1379c:	2202      	movne	r2, #2
   1379e:	f44f 7582 	moveq.w	r5, #260	; 0x104
   137a2:	f44f 7587 	movne.w	r5, #270	; 0x10e
   137a6:	e007      	b.n	137b8 <tls_interface_open+0x40>
   137a8:	2029      	movs	r0, #41	; 0x29
   137aa:	e7eb      	b.n	13784 <tls_interface_open+0xc>
   137ac:	2901      	cmp	r1, #1
   137ae:	d11c      	bne.n	137ea <tls_interface_open+0x72>
   137b0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   137b4:	d1f8      	bne.n	137a8 <tls_interface_open+0x30>
   137b6:	460a      	mov	r2, r1
   137b8:	f7ff f83e 	bl	12838 <ip_interface_open>
   137bc:	1e04      	subs	r4, r0, #0
   137be:	dbe3      	blt.n	13788 <tls_interface_open+0x10>
   137c0:	2224      	movs	r2, #36	; 0x24
   137c2:	480d      	ldr	r0, [pc, #52]	; (137f8 <tls_interface_open+0x80>)
   137c4:	490d      	ldr	r1, [pc, #52]	; (137fc <tls_interface_open+0x84>)
   137c6:	fb02 0004 	mla	r0, r2, r4, r0
   137ca:	f004 fb87 	bl	17edc <memcpy>
   137ce:	4620      	mov	r0, r4
   137d0:	f7fe ff5e 	bl	12690 <interface_socket_from_handle_get>
   137d4:	6803      	ldr	r3, [r0, #0]
   137d6:	6145      	str	r5, [r0, #20]
   137d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   137dc:	6003      	str	r3, [r0, #0]
   137de:	6803      	ldr	r3, [r0, #0]
   137e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   137e4:	6003      	str	r3, [r0, #0]
   137e6:	4620      	mov	r0, r4
   137e8:	bd38      	pop	{r3, r4, r5, pc}
   137ea:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   137ee:	d1db      	bne.n	137a8 <tls_interface_open+0x30>
   137f0:	2202      	movs	r2, #2
   137f2:	e7e1      	b.n	137b8 <tls_interface_open+0x40>
   137f4:	200177a2 	.word	0x200177a2
   137f8:	200177a3 	.word	0x200177a3
   137fc:	0001b563 	.word	0x0001b563

00013800 <tls_interface_sendto>:
   13800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13804:	b085      	sub	sp, #20
   13806:	4606      	mov	r6, r0
   13808:	4691      	mov	r9, r2
   1380a:	461f      	mov	r7, r3
   1380c:	9103      	str	r1, [sp, #12]
   1380e:	f7fe ff3f 	bl	12690 <interface_socket_from_handle_get>
   13812:	4605      	mov	r5, r0
   13814:	2800      	cmp	r0, #0
   13816:	d06c      	beq.n	138f2 <tls_interface_sendto+0xf2>
   13818:	f04f 0a24 	mov.w	sl, #36	; 0x24
   1381c:	07bb      	lsls	r3, r7, #30
   1381e:	bf48      	it	mi
   13820:	2300      	movmi	r3, #0
   13822:	f04f 0400 	mov.w	r4, #0
   13826:	f04f 3bff 	mov.w	fp, #4294967295
   1382a:	bf58      	it	pl
   1382c:	6803      	ldrpl	r3, [r0, #0]
   1382e:	fb0a fa06 	mul.w	sl, sl, r6
   13832:	bf5c      	itt	pl
   13834:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   13838:	f3c3 7300 	ubfxpl	r3, r3, #28, #1
   1383c:	9302      	str	r3, [sp, #8]
   1383e:	6829      	ldr	r1, [r5, #0]
   13840:	eba9 0804 	sub.w	r8, r9, r4
   13844:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
   13848:	b289      	uxth	r1, r1
   1384a:	bfa8      	it	ge
   1384c:	f44f 6800 	movge.w	r8, #2048	; 0x800
   13850:	290c      	cmp	r1, #12
   13852:	d110      	bne.n	13876 <tls_interface_sendto+0x76>
   13854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13856:	9903      	ldr	r1, [sp, #12]
   13858:	9301      	str	r3, [sp, #4]
   1385a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1385c:	4642      	mov	r2, r8
   1385e:	9300      	str	r3, [sp, #0]
   13860:	4630      	mov	r0, r6
   13862:	463b      	mov	r3, r7
   13864:	4421      	add	r1, r4
   13866:	f7ff f8b5 	bl	129d4 <ip_interface_sendto>
   1386a:	f1b0 0b00 	subs.w	fp, r0, #0
   1386e:	da32      	bge.n	138d6 <tls_interface_sendto+0xd6>
   13870:	f04f 34ff 	mov.w	r4, #4294967295
   13874:	e034      	b.n	138e0 <tls_interface_sendto+0xe0>
   13876:	6829      	ldr	r1, [r5, #0]
   13878:	b289      	uxth	r1, r1
   1387a:	290b      	cmp	r1, #11
   1387c:	d109      	bne.n	13892 <tls_interface_sendto+0x92>
   1387e:	4b22      	ldr	r3, [pc, #136]	; (13908 <tls_interface_sendto+0x108>)
   13880:	f813 200a 	ldrb.w	r2, [r3, sl]
   13884:	2a02      	cmp	r2, #2
   13886:	d036      	beq.n	138f6 <tls_interface_sendto+0xf6>
   13888:	692a      	ldr	r2, [r5, #16]
   1388a:	2a01      	cmp	r2, #1
   1388c:	d135      	bne.n	138fa <tls_interface_sendto+0xfa>
   1388e:	202a      	movs	r0, #42	; 0x2a
   13890:	e02c      	b.n	138ec <tls_interface_sendto+0xec>
   13892:	4628      	mov	r0, r5
   13894:	f005 ffb6 	bl	19804 <attach_trigger_condition_verify>
   13898:	b398      	cbz	r0, 13902 <tls_interface_sendto+0x102>
   1389a:	4b1b      	ldr	r3, [pc, #108]	; (13908 <tls_interface_sendto+0x108>)
   1389c:	f813 100a 	ldrb.w	r1, [r3, sl]
   138a0:	2902      	cmp	r1, #2
   138a2:	d110      	bne.n	138c6 <tls_interface_sendto+0xc6>
   138a4:	4629      	mov	r1, r5
   138a6:	4630      	mov	r0, r6
   138a8:	f005 ffc3 	bl	19832 <secure_client_socket>
   138ac:	b970      	cbnz	r0, 138cc <tls_interface_sendto+0xcc>
   138ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   138b0:	9903      	ldr	r1, [sp, #12]
   138b2:	9301      	str	r3, [sp, #4]
   138b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   138b6:	4642      	mov	r2, r8
   138b8:	9300      	str	r3, [sp, #0]
   138ba:	4630      	mov	r0, r6
   138bc:	463b      	mov	r3, r7
   138be:	4421      	add	r1, r4
   138c0:	f7ff f888 	bl	129d4 <ip_interface_sendto>
   138c4:	4683      	mov	fp, r0
   138c6:	f1bb 0f00 	cmp.w	fp, #0
   138ca:	e7d0      	b.n	1386e <tls_interface_sendto+0x6e>
   138cc:	f1bb 3fff 	cmp.w	fp, #4294967295
   138d0:	d00a      	beq.n	138e8 <tls_interface_sendto+0xe8>
   138d2:	2800      	cmp	r0, #0
   138d4:	dc0a      	bgt.n	138ec <tls_interface_sendto+0xec>
   138d6:	9b02      	ldr	r3, [sp, #8]
   138d8:	445c      	add	r4, fp
   138da:	b10b      	cbz	r3, 138e0 <tls_interface_sendto+0xe0>
   138dc:	45a1      	cmp	r9, r4
   138de:	dcae      	bgt.n	1383e <tls_interface_sendto+0x3e>
   138e0:	4620      	mov	r0, r4
   138e2:	b005      	add	sp, #20
   138e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138e8:	2800      	cmp	r0, #0
   138ea:	ddc1      	ble.n	13870 <tls_interface_sendto+0x70>
   138ec:	f7fc fc34 	bl	10158 <nrf_modem_os_errno_set>
   138f0:	e7be      	b.n	13870 <tls_interface_sendto+0x70>
   138f2:	2009      	movs	r0, #9
   138f4:	e7fa      	b.n	138ec <tls_interface_sendto+0xec>
   138f6:	2023      	movs	r0, #35	; 0x23
   138f8:	e7f8      	b.n	138ec <tls_interface_sendto+0xec>
   138fa:	f1bb 3fff 	cmp.w	fp, #4294967295
   138fe:	d1ea      	bne.n	138d6 <tls_interface_sendto+0xd6>
   13900:	e7b6      	b.n	13870 <tls_interface_sendto+0x70>
   13902:	2039      	movs	r0, #57	; 0x39
   13904:	e7f2      	b.n	138ec <tls_interface_sendto+0xec>
   13906:	bf00      	nop
   13908:	200177a3 	.word	0x200177a3

0001390c <tls_interface_recvfrom>:
   1390c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1390e:	460d      	mov	r5, r1
   13910:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   13914:	4604      	mov	r4, r0
   13916:	e9cd 3200 	strd	r3, r2, [sp]
   1391a:	f7fe feb9 	bl	12690 <interface_socket_from_handle_get>
   1391e:	4601      	mov	r1, r0
   13920:	b388      	cbz	r0, 13986 <tls_interface_recvfrom+0x7a>
   13922:	e9dd 3200 	ldrd	r3, r2, [sp]
   13926:	f8d0 c000 	ldr.w	ip, [r0]
   1392a:	fa1f fc8c 	uxth.w	ip, ip
   1392e:	f1bc 0f0c 	cmp.w	ip, #12
   13932:	d006      	beq.n	13942 <tls_interface_recvfrom+0x36>
   13934:	f8d0 c000 	ldr.w	ip, [r0]
   13938:	fa1f fc8c 	uxth.w	ip, ip
   1393c:	f1bc 0f0d 	cmp.w	ip, #13
   13940:	d108      	bne.n	13954 <tls_interface_recvfrom+0x48>
   13942:	4629      	mov	r1, r5
   13944:	4620      	mov	r0, r4
   13946:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1394a:	b003      	add	sp, #12
   1394c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   13950:	f005 bc99 	b.w	19286 <ip_interface_recvfrom>
   13954:	e9cd 2300 	strd	r2, r3, [sp]
   13958:	f005 ff54 	bl	19804 <attach_trigger_condition_verify>
   1395c:	b1b8      	cbz	r0, 1398e <tls_interface_recvfrom+0x82>
   1395e:	2024      	movs	r0, #36	; 0x24
   13960:	4360      	muls	r0, r4
   13962:	f8df c030 	ldr.w	ip, [pc, #48]	; 13994 <tls_interface_recvfrom+0x88>
   13966:	f81c 0000 	ldrb.w	r0, [ip, r0]
   1396a:	2802      	cmp	r0, #2
   1396c:	d10f      	bne.n	1398e <tls_interface_recvfrom+0x82>
   1396e:	4620      	mov	r0, r4
   13970:	f005 ff5f 	bl	19832 <secure_client_socket>
   13974:	e9dd 2300 	ldrd	r2, r3, [sp]
   13978:	2800      	cmp	r0, #0
   1397a:	d0e2      	beq.n	13942 <tls_interface_recvfrom+0x36>
   1397c:	dc04      	bgt.n	13988 <tls_interface_recvfrom+0x7c>
   1397e:	f04f 30ff 	mov.w	r0, #4294967295
   13982:	b003      	add	sp, #12
   13984:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13986:	2009      	movs	r0, #9
   13988:	f7fc fbe6 	bl	10158 <nrf_modem_os_errno_set>
   1398c:	e7f7      	b.n	1397e <tls_interface_recvfrom+0x72>
   1398e:	2023      	movs	r0, #35	; 0x23
   13990:	e7fa      	b.n	13988 <tls_interface_recvfrom+0x7c>
   13992:	bf00      	nop
   13994:	200177a3 	.word	0x200177a3

00013998 <tls_interface_bind>:
   13998:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1399a:	4604      	mov	r4, r0
   1399c:	e9cd 2100 	strd	r2, r1, [sp]
   139a0:	f7fe fe76 	bl	12690 <interface_socket_from_handle_get>
   139a4:	4605      	mov	r5, r0
   139a6:	b1e0      	cbz	r0, 139e2 <tls_interface_bind+0x4a>
   139a8:	6803      	ldr	r3, [r0, #0]
   139aa:	b29b      	uxth	r3, r3
   139ac:	2b02      	cmp	r3, #2
   139ae:	d11a      	bne.n	139e6 <tls_interface_bind+0x4e>
   139b0:	e9dd 2100 	ldrd	r2, r1, [sp]
   139b4:	4620      	mov	r0, r4
   139b6:	f7ff f9ad 	bl	12d14 <ip_interface_bind>
   139ba:	b950      	cbnz	r0, 139d2 <tls_interface_bind+0x3a>
   139bc:	2324      	movs	r3, #36	; 0x24
   139be:	4363      	muls	r3, r4
   139c0:	4a0a      	ldr	r2, [pc, #40]	; (139ec <tls_interface_bind+0x54>)
   139c2:	5cd3      	ldrb	r3, [r2, r3]
   139c4:	2b01      	cmp	r3, #1
   139c6:	d10a      	bne.n	139de <tls_interface_bind+0x46>
   139c8:	2204      	movs	r2, #4
   139ca:	4629      	mov	r1, r5
   139cc:	4620      	mov	r0, r4
   139ce:	f7ff fe7d 	bl	136cc <secure_socket_attach_initiate>
   139d2:	2800      	cmp	r0, #0
   139d4:	dd03      	ble.n	139de <tls_interface_bind+0x46>
   139d6:	f7fc fbbf 	bl	10158 <nrf_modem_os_errno_set>
   139da:	f04f 30ff 	mov.w	r0, #4294967295
   139de:	b003      	add	sp, #12
   139e0:	bd30      	pop	{r4, r5, pc}
   139e2:	2009      	movs	r0, #9
   139e4:	e7f7      	b.n	139d6 <tls_interface_bind+0x3e>
   139e6:	202d      	movs	r0, #45	; 0x2d
   139e8:	e7f5      	b.n	139d6 <tls_interface_bind+0x3e>
   139ea:	bf00      	nop
   139ec:	200177a3 	.word	0x200177a3

000139f0 <tls_interface_connect>:
   139f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   139f2:	4605      	mov	r5, r0
   139f4:	e9cd 2100 	strd	r2, r1, [sp]
   139f8:	f7fe fe4a 	bl	12690 <interface_socket_from_handle_get>
   139fc:	4604      	mov	r4, r0
   139fe:	b1f8      	cbz	r0, 13a40 <tls_interface_connect+0x50>
   13a00:	2324      	movs	r3, #36	; 0x24
   13a02:	436b      	muls	r3, r5
   13a04:	4810      	ldr	r0, [pc, #64]	; (13a48 <tls_interface_connect+0x58>)
   13a06:	5cc3      	ldrb	r3, [r0, r3]
   13a08:	2b02      	cmp	r3, #2
   13a0a:	d11b      	bne.n	13a44 <tls_interface_connect+0x54>
   13a0c:	e9dd 2100 	ldrd	r2, r1, [sp]
   13a10:	6823      	ldr	r3, [r4, #0]
   13a12:	b29b      	uxth	r3, r3
   13a14:	2b02      	cmp	r3, #2
   13a16:	d003      	beq.n	13a20 <tls_interface_connect+0x30>
   13a18:	6823      	ldr	r3, [r4, #0]
   13a1a:	b29b      	uxth	r3, r3
   13a1c:	2b04      	cmp	r3, #4
   13a1e:	d111      	bne.n	13a44 <tls_interface_connect+0x54>
   13a20:	4628      	mov	r0, r5
   13a22:	f005 fd38 	bl	19496 <ip_interface_connect>
   13a26:	b918      	cbnz	r0, 13a30 <tls_interface_connect+0x40>
   13a28:	4621      	mov	r1, r4
   13a2a:	4628      	mov	r0, r5
   13a2c:	f005 ff01 	bl	19832 <secure_client_socket>
   13a30:	2800      	cmp	r0, #0
   13a32:	dd03      	ble.n	13a3c <tls_interface_connect+0x4c>
   13a34:	f7fc fb90 	bl	10158 <nrf_modem_os_errno_set>
   13a38:	f04f 30ff 	mov.w	r0, #4294967295
   13a3c:	b003      	add	sp, #12
   13a3e:	bd30      	pop	{r4, r5, pc}
   13a40:	2009      	movs	r0, #9
   13a42:	e7f7      	b.n	13a34 <tls_interface_connect+0x44>
   13a44:	202d      	movs	r0, #45	; 0x2d
   13a46:	e7f5      	b.n	13a34 <tls_interface_connect+0x44>
   13a48:	200177a3 	.word	0x200177a3

00013a4c <tls_interface_listen>:
   13a4c:	b538      	push	{r3, r4, r5, lr}
   13a4e:	4604      	mov	r4, r0
   13a50:	460d      	mov	r5, r1
   13a52:	f7fe fe1d 	bl	12690 <interface_socket_from_handle_get>
   13a56:	2800      	cmp	r0, #0
   13a58:	d034      	beq.n	13ac4 <tls_interface_listen+0x78>
   13a5a:	6803      	ldr	r3, [r0, #0]
   13a5c:	00db      	lsls	r3, r3, #3
   13a5e:	d433      	bmi.n	13ac8 <tls_interface_listen+0x7c>
   13a60:	6903      	ldr	r3, [r0, #16]
   13a62:	2b01      	cmp	r3, #1
   13a64:	d130      	bne.n	13ac8 <tls_interface_listen+0x7c>
   13a66:	6803      	ldr	r3, [r0, #0]
   13a68:	b29b      	uxth	r3, r3
   13a6a:	2b04      	cmp	r3, #4
   13a6c:	d105      	bne.n	13a7a <tls_interface_listen+0x2e>
   13a6e:	2324      	movs	r3, #36	; 0x24
   13a70:	4363      	muls	r3, r4
   13a72:	4a16      	ldr	r2, [pc, #88]	; (13acc <tls_interface_listen+0x80>)
   13a74:	5cd3      	ldrb	r3, [r2, r3]
   13a76:	2b02      	cmp	r3, #2
   13a78:	d009      	beq.n	13a8e <tls_interface_listen+0x42>
   13a7a:	6803      	ldr	r3, [r0, #0]
   13a7c:	b29b      	uxth	r3, r3
   13a7e:	2b0b      	cmp	r3, #11
   13a80:	d122      	bne.n	13ac8 <tls_interface_listen+0x7c>
   13a82:	2324      	movs	r3, #36	; 0x24
   13a84:	4363      	muls	r3, r4
   13a86:	4a11      	ldr	r2, [pc, #68]	; (13acc <tls_interface_listen+0x80>)
   13a88:	5cd3      	ldrb	r3, [r2, r3]
   13a8a:	2b01      	cmp	r3, #1
   13a8c:	d11c      	bne.n	13ac8 <tls_interface_listen+0x7c>
   13a8e:	2324      	movs	r3, #36	; 0x24
   13a90:	2101      	movs	r1, #1
   13a92:	4363      	muls	r3, r4
   13a94:	4a0d      	ldr	r2, [pc, #52]	; (13acc <tls_interface_listen+0x80>)
   13a96:	54d1      	strb	r1, [r2, r3]
   13a98:	6803      	ldr	r3, [r0, #0]
   13a9a:	2b0b      	cmp	r3, #11
   13a9c:	d10a      	bne.n	13ab4 <tls_interface_listen+0x68>
   13a9e:	4629      	mov	r1, r5
   13aa0:	4620      	mov	r0, r4
   13aa2:	f7ff f999 	bl	12dd8 <ip_interface_listen>
   13aa6:	2800      	cmp	r0, #0
   13aa8:	dd03      	ble.n	13ab2 <tls_interface_listen+0x66>
   13aaa:	f7fc fb55 	bl	10158 <nrf_modem_os_errno_set>
   13aae:	f04f 30ff 	mov.w	r0, #4294967295
   13ab2:	bd38      	pop	{r3, r4, r5, pc}
   13ab4:	4601      	mov	r1, r0
   13ab6:	6802      	ldr	r2, [r0, #0]
   13ab8:	4620      	mov	r0, r4
   13aba:	f7ff fe07 	bl	136cc <secure_socket_attach_initiate>
   13abe:	2800      	cmp	r0, #0
   13ac0:	d0ed      	beq.n	13a9e <tls_interface_listen+0x52>
   13ac2:	e7f0      	b.n	13aa6 <tls_interface_listen+0x5a>
   13ac4:	2009      	movs	r0, #9
   13ac6:	e7f0      	b.n	13aaa <tls_interface_listen+0x5e>
   13ac8:	202d      	movs	r0, #45	; 0x2d
   13aca:	e7ee      	b.n	13aaa <tls_interface_listen+0x5e>
   13acc:	200177a3 	.word	0x200177a3

00013ad0 <tls_interface_accept>:
   13ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ad4:	b086      	sub	sp, #24
   13ad6:	4606      	mov	r6, r0
   13ad8:	f04f 34ff 	mov.w	r4, #4294967295
   13adc:	e9cd 2102 	strd	r2, r1, [sp, #8]
   13ae0:	9301      	str	r3, [sp, #4]
   13ae2:	f7fe fdd5 	bl	12690 <interface_socket_from_handle_get>
   13ae6:	9405      	str	r4, [sp, #20]
   13ae8:	2800      	cmp	r0, #0
   13aea:	d048      	beq.n	13b7e <tls_interface_accept+0xae>
   13aec:	6805      	ldr	r5, [r0, #0]
   13aee:	b2ad      	uxth	r5, r5
   13af0:	2d07      	cmp	r5, #7
   13af2:	d144      	bne.n	13b7e <tls_interface_accept+0xae>
   13af4:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   13af8:	6800      	ldr	r0, [r0, #0]
   13afa:	9903      	ldr	r1, [sp, #12]
   13afc:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
   13b00:	d006      	beq.n	13b10 <tls_interface_accept+0x40>
   13b02:	202d      	movs	r0, #45	; 0x2d
   13b04:	f7fc fb28 	bl	10158 <nrf_modem_os_errno_set>
   13b08:	4620      	mov	r0, r4
   13b0a:	b006      	add	sp, #24
   13b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b10:	4630      	mov	r0, r6
   13b12:	f7ff f9b3 	bl	12e7c <ip_interface_accept>
   13b16:	1e04      	subs	r4, r0, #0
   13b18:	db2b      	blt.n	13b72 <tls_interface_accept+0xa2>
   13b1a:	f7fe fdb9 	bl	12690 <interface_socket_from_handle_get>
   13b1e:	2224      	movs	r2, #36	; 0x24
   13b20:	6803      	ldr	r3, [r0, #0]
   13b22:	fb02 f804 	mul.w	r8, r2, r4
   13b26:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13b2a:	6003      	str	r3, [r0, #0]
   13b2c:	6803      	ldr	r3, [r0, #0]
   13b2e:	4f15      	ldr	r7, [pc, #84]	; (13b84 <tls_interface_accept+0xb4>)
   13b30:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   13b34:	4605      	mov	r5, r0
   13b36:	fb02 7106 	mla	r1, r2, r6, r7
   13b3a:	6003      	str	r3, [r0, #0]
   13b3c:	eb07 0008 	add.w	r0, r7, r8
   13b40:	f004 f9cc 	bl	17edc <memcpy>
   13b44:	2302      	movs	r3, #2
   13b46:	f807 3008 	strb.w	r3, [r7, r8]
   13b4a:	682b      	ldr	r3, [r5, #0]
   13b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13b50:	0c1b      	lsrs	r3, r3, #16
   13b52:	041b      	lsls	r3, r3, #16
   13b54:	f043 030b 	orr.w	r3, r3, #11
   13b58:	602b      	str	r3, [r5, #0]
   13b5a:	210c      	movs	r1, #12
   13b5c:	4620      	mov	r0, r4
   13b5e:	ab05      	add	r3, sp, #20
   13b60:	f005 fb81 	bl	19266 <ip_interface_wait>
   13b64:	4605      	mov	r5, r0
   13b66:	2800      	cmp	r0, #0
   13b68:	d0ce      	beq.n	13b08 <tls_interface_accept+0x38>
   13b6a:	4620      	mov	r0, r4
   13b6c:	f7fe fee8 	bl	12940 <ip_interface_close>
   13b70:	462c      	mov	r4, r5
   13b72:	4620      	mov	r0, r4
   13b74:	f7fc faf0 	bl	10158 <nrf_modem_os_errno_set>
   13b78:	f04f 34ff 	mov.w	r4, #4294967295
   13b7c:	e7c4      	b.n	13b08 <tls_interface_accept+0x38>
   13b7e:	2409      	movs	r4, #9
   13b80:	e7f7      	b.n	13b72 <tls_interface_accept+0xa2>
   13b82:	bf00      	nop
   13b84:	200177a3 	.word	0x200177a3

00013b88 <tls_interface_setopt>:
   13b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13b8a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   13b8e:	4606      	mov	r6, r0
   13b90:	4614      	mov	r4, r2
   13b92:	461f      	mov	r7, r3
   13b94:	9d08      	ldr	r5, [sp, #32]
   13b96:	d004      	beq.n	13ba2 <tls_interface_setopt+0x1a>
   13b98:	b003      	add	sp, #12
   13b9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   13b9e:	f005 bd77 	b.w	19690 <ip_interface_setopt>
   13ba2:	b92b      	cbnz	r3, 13bb0 <tls_interface_setopt+0x28>
   13ba4:	200e      	movs	r0, #14
   13ba6:	f7fc fad7 	bl	10158 <nrf_modem_os_errno_set>
   13baa:	f04f 30ff 	mov.w	r0, #4294967295
   13bae:	e021      	b.n	13bf4 <tls_interface_setopt+0x6c>
   13bb0:	f7fe fd6e 	bl	12690 <interface_socket_from_handle_get>
   13bb4:	4601      	mov	r1, r0
   13bb6:	2800      	cmp	r0, #0
   13bb8:	d06d      	beq.n	13c96 <tls_interface_setopt+0x10e>
   13bba:	6803      	ldr	r3, [r0, #0]
   13bbc:	b29b      	uxth	r3, r3
   13bbe:	2b02      	cmp	r3, #2
   13bc0:	d007      	beq.n	13bd2 <tls_interface_setopt+0x4a>
   13bc2:	6803      	ldr	r3, [r0, #0]
   13bc4:	b29b      	uxth	r3, r3
   13bc6:	2b04      	cmp	r3, #4
   13bc8:	d003      	beq.n	13bd2 <tls_interface_setopt+0x4a>
   13bca:	6803      	ldr	r3, [r0, #0]
   13bcc:	b29b      	uxth	r3, r3
   13bce:	2b05      	cmp	r3, #5
   13bd0:	d161      	bne.n	13c96 <tls_interface_setopt+0x10e>
   13bd2:	1e62      	subs	r2, r4, #1
   13bd4:	2a05      	cmp	r2, #5
   13bd6:	d860      	bhi.n	13c9a <tls_interface_setopt+0x112>
   13bd8:	e8df f002 	tbb	[pc, r2]
   13bdc:	34162203 	.word	0x34162203
   13be0:	513f      	.short	0x513f
   13be2:	2d04      	cmp	r5, #4
   13be4:	d15b      	bne.n	13c9e <tls_interface_setopt+0x116>
   13be6:	6838      	ldr	r0, [r7, #0]
   13be8:	b930      	cbnz	r0, 13bf8 <tls_interface_setopt+0x70>
   13bea:	2324      	movs	r3, #36	; 0x24
   13bec:	2202      	movs	r2, #2
   13bee:	435e      	muls	r6, r3
   13bf0:	4b2d      	ldr	r3, [pc, #180]	; (13ca8 <tls_interface_setopt+0x120>)
   13bf2:	559a      	strb	r2, [r3, r6]
   13bf4:	b003      	add	sp, #12
   13bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13bf8:	2801      	cmp	r0, #1
   13bfa:	d150      	bne.n	13c9e <tls_interface_setopt+0x116>
   13bfc:	2324      	movs	r3, #36	; 0x24
   13bfe:	435e      	muls	r6, r3
   13c00:	4b29      	ldr	r3, [pc, #164]	; (13ca8 <tls_interface_setopt+0x120>)
   13c02:	5598      	strb	r0, [r3, r6]
   13c04:	2000      	movs	r0, #0
   13c06:	e7f5      	b.n	13bf4 <tls_interface_setopt+0x6c>
   13c08:	2d01      	cmp	r5, #1
   13c0a:	d148      	bne.n	13c9e <tls_interface_setopt+0x116>
   13c0c:	2024      	movs	r0, #36	; 0x24
   13c0e:	783b      	ldrb	r3, [r7, #0]
   13c10:	4a25      	ldr	r2, [pc, #148]	; (13ca8 <tls_interface_setopt+0x120>)
   13c12:	3b00      	subs	r3, #0
   13c14:	bf18      	it	ne
   13c16:	2301      	movne	r3, #1
   13c18:	fb00 2606 	mla	r6, r0, r6, r2
   13c1c:	7073      	strb	r3, [r6, #1]
   13c1e:	e7f1      	b.n	13c04 <tls_interface_setopt+0x7c>
   13c20:	2d03      	cmp	r5, #3
   13c22:	d93c      	bls.n	13c9e <tls_interface_setopt+0x116>
   13c24:	f015 0403 	ands.w	r4, r5, #3
   13c28:	d139      	bne.n	13c9e <tls_interface_setopt+0x116>
   13c2a:	2324      	movs	r3, #36	; 0x24
   13c2c:	435e      	muls	r6, r3
   13c2e:	481e      	ldr	r0, [pc, #120]	; (13ca8 <tls_interface_setopt+0x120>)
   13c30:	08aa      	lsrs	r2, r5, #2
   13c32:	1983      	adds	r3, r0, r6
   13c34:	70da      	strb	r2, [r3, #3]
   13c36:	4639      	mov	r1, r7
   13c38:	462a      	mov	r2, r5
   13c3a:	3604      	adds	r6, #4
   13c3c:	4430      	add	r0, r6
   13c3e:	f004 f94d 	bl	17edc <memcpy>
   13c42:	e7df      	b.n	13c04 <tls_interface_setopt+0x7c>
   13c44:	2d04      	cmp	r5, #4
   13c46:	d12a      	bne.n	13c9e <tls_interface_setopt+0x116>
   13c48:	683b      	ldr	r3, [r7, #0]
   13c4a:	2b02      	cmp	r3, #2
   13c4c:	d827      	bhi.n	13c9e <tls_interface_setopt+0x116>
   13c4e:	2024      	movs	r0, #36	; 0x24
   13c50:	4a15      	ldr	r2, [pc, #84]	; (13ca8 <tls_interface_setopt+0x120>)
   13c52:	fb00 2606 	mla	r6, r0, r6, r2
   13c56:	70b3      	strb	r3, [r6, #2]
   13c58:	e7d4      	b.n	13c04 <tls_interface_setopt+0x7c>
   13c5a:	4630      	mov	r0, r6
   13c5c:	f7ff fd24 	bl	136a8 <hostname_free>
   13c60:	2d00      	cmp	r5, #0
   13c62:	d0cf      	beq.n	13c04 <tls_interface_setopt+0x7c>
   13c64:	4628      	mov	r0, r5
   13c66:	f7fc fbf7 	bl	10458 <nrf_modem_os_alloc>
   13c6a:	4b10      	ldr	r3, [pc, #64]	; (13cac <tls_interface_setopt+0x124>)
   13c6c:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   13c70:	b1b8      	cbz	r0, 13ca2 <tls_interface_setopt+0x11a>
   13c72:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   13c76:	462a      	mov	r2, r5
   13c78:	4639      	mov	r1, r7
   13c7a:	6075      	str	r5, [r6, #4]
   13c7c:	e7df      	b.n	13c3e <tls_interface_setopt+0xb6>
   13c7e:	f247 0301 	movw	r3, #28673	; 0x7001
   13c82:	f44f 7280 	mov.w	r2, #256	; 0x100
   13c86:	4630      	mov	r0, r6
   13c88:	e9cd 7500 	strd	r7, r5, [sp]
   13c8c:	f005 fc98 	bl	195c0 <ip_interface_socketoption_send>
   13c90:	2800      	cmp	r0, #0
   13c92:	d0b7      	beq.n	13c04 <tls_interface_setopt+0x7c>
   13c94:	e787      	b.n	13ba6 <tls_interface_setopt+0x1e>
   13c96:	2009      	movs	r0, #9
   13c98:	e785      	b.n	13ba6 <tls_interface_setopt+0x1e>
   13c9a:	202a      	movs	r0, #42	; 0x2a
   13c9c:	e783      	b.n	13ba6 <tls_interface_setopt+0x1e>
   13c9e:	2016      	movs	r0, #22
   13ca0:	e781      	b.n	13ba6 <tls_interface_setopt+0x1e>
   13ca2:	200c      	movs	r0, #12
   13ca4:	e77f      	b.n	13ba6 <tls_interface_setopt+0x1e>
   13ca6:	bf00      	nop
   13ca8:	200177a3 	.word	0x200177a3
   13cac:	200152f4 	.word	0x200152f4

00013cb0 <tls_interface_getopt>:
   13cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13cb2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   13cb6:	4604      	mov	r4, r0
   13cb8:	4617      	mov	r7, r2
   13cba:	461d      	mov	r5, r3
   13cbc:	9e08      	ldr	r6, [sp, #32]
   13cbe:	d004      	beq.n	13cca <tls_interface_getopt+0x1a>
   13cc0:	b003      	add	sp, #12
   13cc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   13cc6:	f005 bd56 	b.w	19776 <ip_interface_getopt>
   13cca:	2b00      	cmp	r3, #0
   13ccc:	d054      	beq.n	13d78 <tls_interface_getopt+0xc8>
   13cce:	2e00      	cmp	r6, #0
   13cd0:	d052      	beq.n	13d78 <tls_interface_getopt+0xc8>
   13cd2:	f7fe fcdd 	bl	12690 <interface_socket_from_handle_get>
   13cd6:	4601      	mov	r1, r0
   13cd8:	2800      	cmp	r0, #0
   13cda:	d04f      	beq.n	13d7c <tls_interface_getopt+0xcc>
   13cdc:	1e7a      	subs	r2, r7, #1
   13cde:	2a05      	cmp	r2, #5
   13ce0:	d84e      	bhi.n	13d80 <tls_interface_getopt+0xd0>
   13ce2:	e8df f002 	tbb	[pc, r2]
   13ce6:	1b03      	.short	0x1b03
   13ce8:	3f4d360f 	.word	0x3f4d360f
   13cec:	6833      	ldr	r3, [r6, #0]
   13cee:	2b04      	cmp	r3, #4
   13cf0:	d148      	bne.n	13d84 <tls_interface_getopt+0xd4>
   13cf2:	2024      	movs	r0, #36	; 0x24
   13cf4:	4344      	muls	r4, r0
   13cf6:	4b24      	ldr	r3, [pc, #144]	; (13d88 <tls_interface_getopt+0xd8>)
   13cf8:	5d1b      	ldrb	r3, [r3, r4]
   13cfa:	1e59      	subs	r1, r3, #1
   13cfc:	424b      	negs	r3, r1
   13cfe:	414b      	adcs	r3, r1
   13d00:	602b      	str	r3, [r5, #0]
   13d02:	e008      	b.n	13d16 <tls_interface_getopt+0x66>
   13d04:	6833      	ldr	r3, [r6, #0]
   13d06:	2b01      	cmp	r3, #1
   13d08:	d13c      	bne.n	13d84 <tls_interface_getopt+0xd4>
   13d0a:	2024      	movs	r0, #36	; 0x24
   13d0c:	491e      	ldr	r1, [pc, #120]	; (13d88 <tls_interface_getopt+0xd8>)
   13d0e:	fb00 1404 	mla	r4, r0, r4, r1
   13d12:	7863      	ldrb	r3, [r4, #1]
   13d14:	702b      	strb	r3, [r5, #0]
   13d16:	2000      	movs	r0, #0
   13d18:	b003      	add	sp, #12
   13d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d1c:	2224      	movs	r2, #36	; 0x24
   13d1e:	491a      	ldr	r1, [pc, #104]	; (13d88 <tls_interface_getopt+0xd8>)
   13d20:	6833      	ldr	r3, [r6, #0]
   13d22:	fb02 1204 	mla	r2, r2, r4, r1
   13d26:	78d0      	ldrb	r0, [r2, #3]
   13d28:	079a      	lsls	r2, r3, #30
   13d2a:	bf14      	ite	ne
   13d2c:	2300      	movne	r3, #0
   13d2e:	089b      	lsreq	r3, r3, #2
   13d30:	4283      	cmp	r3, r0
   13d32:	bf28      	it	cs
   13d34:	4603      	movcs	r3, r0
   13d36:	009a      	lsls	r2, r3, #2
   13d38:	b143      	cbz	r3, 13d4c <tls_interface_getopt+0x9c>
   13d3a:	2024      	movs	r0, #36	; 0x24
   13d3c:	fb00 1104 	mla	r1, r0, r4, r1
   13d40:	6032      	str	r2, [r6, #0]
   13d42:	4628      	mov	r0, r5
   13d44:	3104      	adds	r1, #4
   13d46:	f004 f8c9 	bl	17edc <memcpy>
   13d4a:	e7e4      	b.n	13d16 <tls_interface_getopt+0x66>
   13d4c:	b9d0      	cbnz	r0, 13d84 <tls_interface_getopt+0xd4>
   13d4e:	6030      	str	r0, [r6, #0]
   13d50:	e7e2      	b.n	13d18 <tls_interface_getopt+0x68>
   13d52:	6833      	ldr	r3, [r6, #0]
   13d54:	2b04      	cmp	r3, #4
   13d56:	d115      	bne.n	13d84 <tls_interface_getopt+0xd4>
   13d58:	2024      	movs	r0, #36	; 0x24
   13d5a:	490b      	ldr	r1, [pc, #44]	; (13d88 <tls_interface_getopt+0xd8>)
   13d5c:	fb00 1404 	mla	r4, r0, r4, r1
   13d60:	78a3      	ldrb	r3, [r4, #2]
   13d62:	e7cd      	b.n	13d00 <tls_interface_getopt+0x50>
   13d64:	f247 0301 	movw	r3, #28673	; 0x7001
   13d68:	f44f 7280 	mov.w	r2, #256	; 0x100
   13d6c:	4620      	mov	r0, r4
   13d6e:	e9cd 5600 	strd	r5, r6, [sp]
   13d72:	f7fe ff4f 	bl	12c14 <ip_interface_socketoption_get>
   13d76:	e7cf      	b.n	13d18 <tls_interface_getopt+0x68>
   13d78:	200e      	movs	r0, #14
   13d7a:	e7cd      	b.n	13d18 <tls_interface_getopt+0x68>
   13d7c:	2009      	movs	r0, #9
   13d7e:	e7cb      	b.n	13d18 <tls_interface_getopt+0x68>
   13d80:	202a      	movs	r0, #42	; 0x2a
   13d82:	e7c9      	b.n	13d18 <tls_interface_getopt+0x68>
   13d84:	2016      	movs	r0, #22
   13d86:	e7c7      	b.n	13d18 <tls_interface_getopt+0x68>
   13d88:	200177a3 	.word	0x200177a3

00013d8c <tls_rpc_ip_event_handler>:
   13d8c:	b570      	push	{r4, r5, r6, lr}
   13d8e:	460c      	mov	r4, r1
   13d90:	f248 0181 	movw	r1, #32897	; 0x8081
   13d94:	428b      	cmp	r3, r1
   13d96:	4606      	mov	r6, r0
   13d98:	d035      	beq.n	13e06 <tls_rpc_ip_event_handler+0x7a>
   13d9a:	f249 0182 	movw	r1, #36994	; 0x9082
   13d9e:	428b      	cmp	r3, r1
   13da0:	d040      	beq.n	13e24 <tls_rpc_ip_event_handler+0x98>
   13da2:	f248 0102 	movw	r1, #32770	; 0x8002
   13da6:	428b      	cmp	r3, r1
   13da8:	d161      	bne.n	13e6e <tls_rpc_ip_event_handler+0xe2>
   13daa:	2c00      	cmp	r4, #0
   13dac:	d05f      	beq.n	13e6e <tls_rpc_ip_event_handler+0xe2>
   13dae:	6963      	ldr	r3, [r4, #20]
   13db0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   13db4:	d002      	beq.n	13dbc <tls_rpc_ip_event_handler+0x30>
   13db6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   13dba:	d158      	bne.n	13e6e <tls_rpc_ip_event_handler+0xe2>
   13dbc:	6823      	ldr	r3, [r4, #0]
   13dbe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   13dc2:	6023      	str	r3, [r4, #0]
   13dc4:	6955      	ldr	r5, [r2, #20]
   13dc6:	2d00      	cmp	r5, #0
   13dc8:	d14d      	bne.n	13e66 <tls_rpc_ip_event_handler+0xda>
   13dca:	6823      	ldr	r3, [r4, #0]
   13dcc:	0c1b      	lsrs	r3, r3, #16
   13dce:	041b      	lsls	r3, r3, #16
   13dd0:	f043 0305 	orr.w	r3, r3, #5
   13dd4:	6023      	str	r3, [r4, #0]
   13dd6:	6823      	ldr	r3, [r4, #0]
   13dd8:	00db      	lsls	r3, r3, #3
   13dda:	d401      	bmi.n	13de0 <tls_rpc_ip_event_handler+0x54>
   13ddc:	2000      	movs	r0, #0
   13dde:	e020      	b.n	13e22 <tls_rpc_ip_event_handler+0x96>
   13de0:	2324      	movs	r3, #36	; 0x24
   13de2:	4373      	muls	r3, r6
   13de4:	4a23      	ldr	r2, [pc, #140]	; (13e74 <tls_rpc_ip_event_handler+0xe8>)
   13de6:	5cd3      	ldrb	r3, [r2, r3]
   13de8:	2b02      	cmp	r3, #2
   13dea:	d1f7      	bne.n	13ddc <tls_rpc_ip_event_handler+0x50>
   13dec:	4621      	mov	r1, r4
   13dee:	4630      	mov	r0, r6
   13df0:	f005 fd1f 	bl	19832 <secure_client_socket>
   13df4:	2800      	cmp	r0, #0
   13df6:	d0f1      	beq.n	13ddc <tls_rpc_ip_event_handler+0x50>
   13df8:	2873      	cmp	r0, #115	; 0x73
   13dfa:	d0ef      	beq.n	13ddc <tls_rpc_ip_event_handler+0x50>
   13dfc:	6060      	str	r0, [r4, #4]
   13dfe:	6823      	ldr	r3, [r4, #0]
   13e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   13e04:	e02d      	b.n	13e62 <tls_rpc_ip_event_handler+0xd6>
   13e06:	2c00      	cmp	r4, #0
   13e08:	d0e8      	beq.n	13ddc <tls_rpc_ip_event_handler+0x50>
   13e0a:	6823      	ldr	r3, [r4, #0]
   13e0c:	b29b      	uxth	r3, r3
   13e0e:	2b0a      	cmp	r3, #10
   13e10:	d1e4      	bne.n	13ddc <tls_rpc_ip_event_handler+0x50>
   13e12:	6950      	ldr	r0, [r2, #20]
   13e14:	bb40      	cbnz	r0, 13e68 <tls_rpc_ip_event_handler+0xdc>
   13e16:	6823      	ldr	r3, [r4, #0]
   13e18:	0c1b      	lsrs	r3, r3, #16
   13e1a:	041b      	lsls	r3, r3, #16
   13e1c:	f043 030b 	orr.w	r3, r3, #11
   13e20:	6023      	str	r3, [r4, #0]
   13e22:	bd70      	pop	{r4, r5, r6, pc}
   13e24:	2c00      	cmp	r4, #0
   13e26:	d0d9      	beq.n	13ddc <tls_rpc_ip_event_handler+0x50>
   13e28:	6823      	ldr	r3, [r4, #0]
   13e2a:	b29b      	uxth	r3, r3
   13e2c:	2b0b      	cmp	r3, #11
   13e2e:	d1d5      	bne.n	13ddc <tls_rpc_ip_event_handler+0x50>
   13e30:	6915      	ldr	r5, [r2, #16]
   13e32:	b9c5      	cbnz	r5, 13e66 <tls_rpc_ip_event_handler+0xda>
   13e34:	6823      	ldr	r3, [r4, #0]
   13e36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   13e3a:	6023      	str	r3, [r4, #0]
   13e3c:	f7ff fc34 	bl	136a8 <hostname_free>
   13e40:	6823      	ldr	r3, [r4, #0]
   13e42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   13e46:	6023      	str	r3, [r4, #0]
   13e48:	6823      	ldr	r3, [r4, #0]
   13e4a:	0c1b      	lsrs	r3, r3, #16
   13e4c:	041b      	lsls	r3, r3, #16
   13e4e:	f043 030c 	orr.w	r3, r3, #12
   13e52:	6023      	str	r3, [r4, #0]
   13e54:	6823      	ldr	r3, [r4, #0]
   13e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13e5a:	6023      	str	r3, [r4, #0]
   13e5c:	6823      	ldr	r3, [r4, #0]
   13e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13e62:	6023      	str	r3, [r4, #0]
   13e64:	e7ba      	b.n	13ddc <tls_rpc_ip_event_handler+0x50>
   13e66:	4628      	mov	r0, r5
   13e68:	f7fe fcc6 	bl	127f8 <rpc_error_to_nrf_errno>
   13e6c:	e7c6      	b.n	13dfc <tls_rpc_ip_event_handler+0x70>
   13e6e:	2001      	movs	r0, #1
   13e70:	e7d7      	b.n	13e22 <tls_rpc_ip_event_handler+0x96>
   13e72:	bf00      	nop
   13e74:	200177a3 	.word	0x200177a3

00013e78 <at_interface_init>:
   13e78:	2201      	movs	r2, #1
   13e7a:	4b02      	ldr	r3, [pc, #8]	; (13e84 <at_interface_init+0xc>)
   13e7c:	2000      	movs	r0, #0
   13e7e:	701a      	strb	r2, [r3, #0]
   13e80:	4770      	bx	lr
   13e82:	bf00      	nop
   13e84:	200178e7 	.word	0x200178e7

00013e88 <at_interface_open>:
   13e88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   13e8c:	f04f 0800 	mov.w	r8, #0
   13e90:	4b19      	ldr	r3, [pc, #100]	; (13ef8 <at_interface_open+0x70>)
   13e92:	4607      	mov	r7, r0
   13e94:	781b      	ldrb	r3, [r3, #0]
   13e96:	460d      	mov	r5, r1
   13e98:	4616      	mov	r6, r2
   13e9a:	f8cd 800c 	str.w	r8, [sp, #12]
   13e9e:	b943      	cbnz	r3, 13eb2 <at_interface_open+0x2a>
   13ea0:	2070      	movs	r0, #112	; 0x70
   13ea2:	f7fc f959 	bl	10158 <nrf_modem_os_errno_set>
   13ea6:	f04f 34ff 	mov.w	r4, #4294967295
   13eaa:	4620      	mov	r0, r4
   13eac:	b004      	add	sp, #16
   13eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13eb2:	2902      	cmp	r1, #2
   13eb4:	d001      	beq.n	13eba <at_interface_open+0x32>
   13eb6:	2029      	movs	r0, #41	; 0x29
   13eb8:	e7f3      	b.n	13ea2 <at_interface_open+0x1a>
   13eba:	4a10      	ldr	r2, [pc, #64]	; (13efc <at_interface_open+0x74>)
   13ebc:	a803      	add	r0, sp, #12
   13ebe:	f7fe fb5d 	bl	1257c <interface_socket_allocate>
   13ec2:	9b03      	ldr	r3, [sp, #12]
   13ec4:	4604      	mov	r4, r0
   13ec6:	2b00      	cmp	r3, #0
   13ec8:	d0ef      	beq.n	13eaa <at_interface_open+0x22>
   13eca:	e9c3 7503 	strd	r7, r5, [r3, #12]
   13ece:	615e      	str	r6, [r3, #20]
   13ed0:	4642      	mov	r2, r8
   13ed2:	9500      	str	r5, [sp, #0]
   13ed4:	2305      	movs	r3, #5
   13ed6:	4641      	mov	r1, r8
   13ed8:	f005 fd09 	bl	198ee <send_message>
   13edc:	4605      	mov	r5, r0
   13ede:	b120      	cbz	r0, 13eea <at_interface_open+0x62>
   13ee0:	4620      	mov	r0, r4
   13ee2:	f7fe fb71 	bl	125c8 <interface_socket_free>
   13ee6:	4628      	mov	r0, r5
   13ee8:	e7db      	b.n	13ea2 <at_interface_open+0x1a>
   13eea:	9a03      	ldr	r2, [sp, #12]
   13eec:	6813      	ldr	r3, [r2, #0]
   13eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13ef2:	6013      	str	r3, [r2, #0]
   13ef4:	e7d9      	b.n	13eaa <at_interface_open+0x22>
   13ef6:	bf00      	nop
   13ef8:	200178e7 	.word	0x200178e7
   13efc:	000198c9 	.word	0x000198c9

00013f00 <rpc_dfu_message_send>:
   13f00:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13f02:	4605      	mov	r5, r0
   13f04:	460e      	mov	r6, r1
   13f06:	4668      	mov	r0, sp
   13f08:	4611      	mov	r1, r2
   13f0a:	4614      	mov	r4, r2
   13f0c:	f004 ff99 	bl	18e42 <rpc_dfu_client_request_alloc>
   13f10:	b138      	cbz	r0, 13f22 <rpc_dfu_message_send+0x22>
   13f12:	200c      	movs	r0, #12
   13f14:	f7fc f920 	bl	10158 <nrf_modem_os_errno_set>
   13f18:	f04f 34ff 	mov.w	r4, #4294967295
   13f1c:	4620      	mov	r0, r4
   13f1e:	b002      	add	sp, #8
   13f20:	bd70      	pop	{r4, r5, r6, pc}
   13f22:	b12c      	cbz	r4, 13f30 <rpc_dfu_message_send+0x30>
   13f24:	9b00      	ldr	r3, [sp, #0]
   13f26:	4622      	mov	r2, r4
   13f28:	4631      	mov	r1, r6
   13f2a:	6818      	ldr	r0, [r3, #0]
   13f2c:	f003 ffd6 	bl	17edc <memcpy>
   13f30:	4a1c      	ldr	r2, [pc, #112]	; (13fa4 <rpc_dfu_message_send+0xa4>)
   13f32:	9800      	ldr	r0, [sp, #0]
   13f34:	8813      	ldrh	r3, [r2, #0]
   13f36:	2d03      	cmp	r5, #3
   13f38:	f103 0301 	add.w	r3, r3, #1
   13f3c:	b29b      	uxth	r3, r3
   13f3e:	8013      	strh	r3, [r2, #0]
   13f40:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   13f44:	60c3      	str	r3, [r0, #12]
   13f46:	f04f 0300 	mov.w	r3, #0
   13f4a:	bf0a      	itet	eq
   13f4c:	4a16      	ldreq	r2, [pc, #88]	; (13fa8 <rpc_dfu_message_send+0xa8>)
   13f4e:	2204      	movne	r2, #4
   13f50:	6812      	ldreq	r2, [r2, #0]
   13f52:	7243      	strb	r3, [r0, #9]
   13f54:	bf04      	itt	eq
   13f56:	6102      	streq	r2, [r0, #16]
   13f58:	2208      	moveq	r2, #8
   13f5a:	7283      	strb	r3, [r0, #10]
   13f5c:	72c3      	strb	r3, [r0, #11]
   13f5e:	2300      	movs	r3, #0
   13f60:	4e12      	ldr	r6, [pc, #72]	; (13fac <rpc_dfu_message_send+0xac>)
   13f62:	6044      	str	r4, [r0, #4]
   13f64:	4629      	mov	r1, r5
   13f66:	7202      	strb	r2, [r0, #8]
   13f68:	6033      	str	r3, [r6, #0]
   13f6a:	f004 ff7c 	bl	18e66 <rpc_dfu_client_request_send>
   13f6e:	4604      	mov	r4, r0
   13f70:	b140      	cbz	r0, 13f84 <rpc_dfu_message_send+0x84>
   13f72:	9b00      	ldr	r3, [sp, #0]
   13f74:	6818      	ldr	r0, [r3, #0]
   13f76:	b108      	cbz	r0, 13f7c <rpc_dfu_message_send+0x7c>
   13f78:	f004 ff8f 	bl	18e9a <rpc_dfu_client_data_free>
   13f7c:	9800      	ldr	r0, [sp, #0]
   13f7e:	f004 ff84 	bl	18e8a <rpc_dfu_client_message_free>
   13f82:	e7c6      	b.n	13f12 <rpc_dfu_message_send+0x12>
   13f84:	f04f 33ff 	mov.w	r3, #4294967295
   13f88:	4d09      	ldr	r5, [pc, #36]	; (13fb0 <rpc_dfu_message_send+0xb0>)
   13f8a:	9301      	str	r3, [sp, #4]
   13f8c:	6833      	ldr	r3, [r6, #0]
   13f8e:	2b00      	cmp	r3, #0
   13f90:	d1c4      	bne.n	13f1c <rpc_dfu_message_send+0x1c>
   13f92:	4628      	mov	r0, r5
   13f94:	a901      	add	r1, sp, #4
   13f96:	f7fc f827 	bl	ffe8 <nrf_modem_os_timedwait>
   13f9a:	2800      	cmp	r0, #0
   13f9c:	d0f6      	beq.n	13f8c <rpc_dfu_message_send+0x8c>
   13f9e:	203c      	movs	r0, #60	; 0x3c
   13fa0:	e7b8      	b.n	13f14 <rpc_dfu_message_send+0x14>
   13fa2:	bf00      	nop
   13fa4:	20015c3e 	.word	0x20015c3e
   13fa8:	2001533c 	.word	0x2001533c
   13fac:	20015340 	.word	0x20015340
   13fb0:	20015334 	.word	0x20015334

00013fb4 <rpc_dfu_event_handler>:
   13fb4:	b508      	push	{r3, lr}
   13fb6:	4b08      	ldr	r3, [pc, #32]	; (13fd8 <rpc_dfu_event_handler+0x24>)
   13fb8:	68c2      	ldr	r2, [r0, #12]
   13fba:	881b      	ldrh	r3, [r3, #0]
   13fbc:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   13fc0:	d103      	bne.n	13fca <rpc_dfu_event_handler+0x16>
   13fc2:	4b06      	ldr	r3, [pc, #24]	; (13fdc <rpc_dfu_event_handler+0x28>)
   13fc4:	6018      	str	r0, [r3, #0]
   13fc6:	2001      	movs	r0, #1
   13fc8:	bd08      	pop	{r3, pc}
   13fca:	6800      	ldr	r0, [r0, #0]
   13fcc:	2800      	cmp	r0, #0
   13fce:	d0fb      	beq.n	13fc8 <rpc_dfu_event_handler+0x14>
   13fd0:	f004 ff63 	bl	18e9a <rpc_dfu_client_data_free>
   13fd4:	2000      	movs	r0, #0
   13fd6:	e7f7      	b.n	13fc8 <rpc_dfu_event_handler+0x14>
   13fd8:	20015c3e 	.word	0x20015c3e
   13fdc:	20015340 	.word	0x20015340

00013fe0 <mfu_interface_init>:
   13fe0:	2000      	movs	r0, #0
   13fe2:	2201      	movs	r2, #1
   13fe4:	4b04      	ldr	r3, [pc, #16]	; (13ff8 <mfu_interface_init+0x18>)
   13fe6:	8018      	strh	r0, [r3, #0]
   13fe8:	4b04      	ldr	r3, [pc, #16]	; (13ffc <mfu_interface_init+0x1c>)
   13fea:	6018      	str	r0, [r3, #0]
   13fec:	4b04      	ldr	r3, [pc, #16]	; (14000 <mfu_interface_init+0x20>)
   13fee:	6018      	str	r0, [r3, #0]
   13ff0:	4b04      	ldr	r3, [pc, #16]	; (14004 <mfu_interface_init+0x24>)
   13ff2:	601a      	str	r2, [r3, #0]
   13ff4:	4770      	bx	lr
   13ff6:	bf00      	nop
   13ff8:	20015c3e 	.word	0x20015c3e
   13ffc:	20015340 	.word	0x20015340
   14000:	2001533c 	.word	0x2001533c
   14004:	20015334 	.word	0x20015334

00014008 <mfu_interface_open>:
   14008:	b508      	push	{r3, lr}
   1400a:	4b07      	ldr	r3, [pc, #28]	; (14028 <mfu_interface_open+0x20>)
   1400c:	681a      	ldr	r2, [r3, #0]
   1400e:	2a01      	cmp	r2, #1
   14010:	d005      	beq.n	1401e <mfu_interface_open+0x16>
   14012:	2001      	movs	r0, #1
   14014:	f7fc f8a0 	bl	10158 <nrf_modem_os_errno_set>
   14018:	f04f 30ff 	mov.w	r0, #4294967295
   1401c:	bd08      	pop	{r3, pc}
   1401e:	2202      	movs	r2, #2
   14020:	4802      	ldr	r0, [pc, #8]	; (1402c <mfu_interface_open+0x24>)
   14022:	601a      	str	r2, [r3, #0]
   14024:	e7fa      	b.n	1401c <mfu_interface_open+0x14>
   14026:	bf00      	nop
   14028:	20015334 	.word	0x20015334
   1402c:	49765432 	.word	0x49765432

00014030 <mfu_interface_close>:
   14030:	b538      	push	{r3, r4, r5, lr}
   14032:	4c11      	ldr	r4, [pc, #68]	; (14078 <mfu_interface_close+0x48>)
   14034:	6822      	ldr	r2, [r4, #0]
   14036:	1e91      	subs	r1, r2, #2
   14038:	2901      	cmp	r1, #1
   1403a:	d905      	bls.n	14048 <mfu_interface_close+0x18>
   1403c:	2001      	movs	r0, #1
   1403e:	f7fc f88b 	bl	10158 <nrf_modem_os_errno_set>
   14042:	f04f 30ff 	mov.w	r0, #4294967295
   14046:	e015      	b.n	14074 <mfu_interface_close+0x44>
   14048:	2a03      	cmp	r2, #3
   1404a:	d110      	bne.n	1406e <mfu_interface_close+0x3e>
   1404c:	2200      	movs	r2, #0
   1404e:	2006      	movs	r0, #6
   14050:	4611      	mov	r1, r2
   14052:	f7ff ff55 	bl	13f00 <rpc_dfu_message_send>
   14056:	2800      	cmp	r0, #0
   14058:	d1f3      	bne.n	14042 <mfu_interface_close+0x12>
   1405a:	4b08      	ldr	r3, [pc, #32]	; (1407c <mfu_interface_close+0x4c>)
   1405c:	6818      	ldr	r0, [r3, #0]
   1405e:	6905      	ldr	r5, [r0, #16]
   14060:	f004 ff13 	bl	18e8a <rpc_dfu_client_message_free>
   14064:	b11d      	cbz	r5, 1406e <mfu_interface_close+0x3e>
   14066:	4b06      	ldr	r3, [pc, #24]	; (14080 <mfu_interface_close+0x50>)
   14068:	2008      	movs	r0, #8
   1406a:	601d      	str	r5, [r3, #0]
   1406c:	e7e7      	b.n	1403e <mfu_interface_close+0xe>
   1406e:	2301      	movs	r3, #1
   14070:	2000      	movs	r0, #0
   14072:	6023      	str	r3, [r4, #0]
   14074:	bd38      	pop	{r3, r4, r5, pc}
   14076:	bf00      	nop
   14078:	20015334 	.word	0x20015334
   1407c:	20015340 	.word	0x20015340
   14080:	20015338 	.word	0x20015338

00014084 <mfu_interface_sendto>:
   14084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14086:	4e1f      	ldr	r6, [pc, #124]	; (14104 <mfu_interface_sendto+0x80>)
   14088:	460d      	mov	r5, r1
   1408a:	6831      	ldr	r1, [r6, #0]
   1408c:	4614      	mov	r4, r2
   1408e:	1e88      	subs	r0, r1, #2
   14090:	2801      	cmp	r0, #1
   14092:	9a06      	ldr	r2, [sp, #24]
   14094:	d903      	bls.n	1409e <mfu_interface_sendto+0x1a>
   14096:	2001      	movs	r0, #1
   14098:	f7fc f85e 	bl	10158 <nrf_modem_os_errno_set>
   1409c:	e010      	b.n	140c0 <mfu_interface_sendto+0x3c>
   1409e:	b105      	cbz	r5, 140a2 <mfu_interface_sendto+0x1e>
   140a0:	b90c      	cbnz	r4, 140a6 <mfu_interface_sendto+0x22>
   140a2:	2016      	movs	r0, #22
   140a4:	e7f8      	b.n	14098 <mfu_interface_sendto+0x14>
   140a6:	b10b      	cbz	r3, 140ac <mfu_interface_sendto+0x28>
   140a8:	202d      	movs	r0, #45	; 0x2d
   140aa:	e7f5      	b.n	14098 <mfu_interface_sendto+0x14>
   140ac:	b10a      	cbz	r2, 140b2 <mfu_interface_sendto+0x2e>
   140ae:	2038      	movs	r0, #56	; 0x38
   140b0:	e7f2      	b.n	14098 <mfu_interface_sendto+0x14>
   140b2:	2902      	cmp	r1, #2
   140b4:	d114      	bne.n	140e0 <mfu_interface_sendto+0x5c>
   140b6:	4611      	mov	r1, r2
   140b8:	2003      	movs	r0, #3
   140ba:	f7ff ff21 	bl	13f00 <rpc_dfu_message_send>
   140be:	b118      	cbz	r0, 140c8 <mfu_interface_sendto+0x44>
   140c0:	f04f 34ff 	mov.w	r4, #4294967295
   140c4:	4620      	mov	r0, r4
   140c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   140c8:	4b0f      	ldr	r3, [pc, #60]	; (14108 <mfu_interface_sendto+0x84>)
   140ca:	6818      	ldr	r0, [r3, #0]
   140cc:	6907      	ldr	r7, [r0, #16]
   140ce:	f004 fedc 	bl	18e8a <rpc_dfu_client_message_free>
   140d2:	b11f      	cbz	r7, 140dc <mfu_interface_sendto+0x58>
   140d4:	4b0d      	ldr	r3, [pc, #52]	; (1410c <mfu_interface_sendto+0x88>)
   140d6:	601f      	str	r7, [r3, #0]
   140d8:	2008      	movs	r0, #8
   140da:	e7dd      	b.n	14098 <mfu_interface_sendto+0x14>
   140dc:	2303      	movs	r3, #3
   140de:	6033      	str	r3, [r6, #0]
   140e0:	4622      	mov	r2, r4
   140e2:	4629      	mov	r1, r5
   140e4:	2004      	movs	r0, #4
   140e6:	f7ff ff0b 	bl	13f00 <rpc_dfu_message_send>
   140ea:	2800      	cmp	r0, #0
   140ec:	d1e8      	bne.n	140c0 <mfu_interface_sendto+0x3c>
   140ee:	4b06      	ldr	r3, [pc, #24]	; (14108 <mfu_interface_sendto+0x84>)
   140f0:	6818      	ldr	r0, [r3, #0]
   140f2:	6905      	ldr	r5, [r0, #16]
   140f4:	f004 fec9 	bl	18e8a <rpc_dfu_client_message_free>
   140f8:	2d00      	cmp	r5, #0
   140fa:	d0e3      	beq.n	140c4 <mfu_interface_sendto+0x40>
   140fc:	4b03      	ldr	r3, [pc, #12]	; (1410c <mfu_interface_sendto+0x88>)
   140fe:	601d      	str	r5, [r3, #0]
   14100:	e7ea      	b.n	140d8 <mfu_interface_sendto+0x54>
   14102:	bf00      	nop
   14104:	20015334 	.word	0x20015334
   14108:	20015340 	.word	0x20015340
   1410c:	20015338 	.word	0x20015338

00014110 <mfu_interface_setopt>:
   14110:	481d      	ldr	r0, [pc, #116]	; (14188 <mfu_interface_setopt+0x78>)
   14112:	b510      	push	{r4, lr}
   14114:	6800      	ldr	r0, [r0, #0]
   14116:	3802      	subs	r0, #2
   14118:	2801      	cmp	r0, #1
   1411a:	d905      	bls.n	14128 <mfu_interface_setopt+0x18>
   1411c:	2001      	movs	r0, #1
   1411e:	f7fc f81b 	bl	10158 <nrf_modem_os_errno_set>
   14122:	f04f 30ff 	mov.w	r0, #4294967295
   14126:	e026      	b.n	14176 <mfu_interface_setopt+0x66>
   14128:	f240 2003 	movw	r0, #515	; 0x203
   1412c:	4281      	cmp	r1, r0
   1412e:	d001      	beq.n	14134 <mfu_interface_setopt+0x24>
   14130:	2016      	movs	r0, #22
   14132:	e7f4      	b.n	1411e <mfu_interface_setopt+0xe>
   14134:	3a04      	subs	r2, #4
   14136:	2a03      	cmp	r2, #3
   14138:	d81e      	bhi.n	14178 <mfu_interface_setopt+0x68>
   1413a:	e8df f002 	tbb	[pc, r2]
   1413e:	021f      	.short	0x021f
   14140:	1321      	.short	0x1321
   14142:	2007      	movs	r0, #7
   14144:	2200      	movs	r2, #0
   14146:	4611      	mov	r1, r2
   14148:	f7ff feda 	bl	13f00 <rpc_dfu_message_send>
   1414c:	2800      	cmp	r0, #0
   1414e:	d1e8      	bne.n	14122 <mfu_interface_setopt+0x12>
   14150:	4b0e      	ldr	r3, [pc, #56]	; (1418c <mfu_interface_setopt+0x7c>)
   14152:	6818      	ldr	r0, [r3, #0]
   14154:	6904      	ldr	r4, [r0, #16]
   14156:	f004 fe98 	bl	18e8a <rpc_dfu_client_message_free>
   1415a:	b19c      	cbz	r4, 14184 <mfu_interface_setopt+0x74>
   1415c:	4b0c      	ldr	r3, [pc, #48]	; (14190 <mfu_interface_setopt+0x80>)
   1415e:	2008      	movs	r0, #8
   14160:	601c      	str	r4, [r3, #0]
   14162:	e7dc      	b.n	1411e <mfu_interface_setopt+0xe>
   14164:	2b00      	cmp	r3, #0
   14166:	d0e3      	beq.n	14130 <mfu_interface_setopt+0x20>
   14168:	9a02      	ldr	r2, [sp, #8]
   1416a:	2a04      	cmp	r2, #4
   1416c:	d1e0      	bne.n	14130 <mfu_interface_setopt+0x20>
   1416e:	2000      	movs	r0, #0
   14170:	681a      	ldr	r2, [r3, #0]
   14172:	4b08      	ldr	r3, [pc, #32]	; (14194 <mfu_interface_setopt+0x84>)
   14174:	601a      	str	r2, [r3, #0]
   14176:	bd10      	pop	{r4, pc}
   14178:	202a      	movs	r0, #42	; 0x2a
   1417a:	e7d0      	b.n	1411e <mfu_interface_setopt+0xe>
   1417c:	2005      	movs	r0, #5
   1417e:	e7e1      	b.n	14144 <mfu_interface_setopt+0x34>
   14180:	2008      	movs	r0, #8
   14182:	e7df      	b.n	14144 <mfu_interface_setopt+0x34>
   14184:	4620      	mov	r0, r4
   14186:	e7f6      	b.n	14176 <mfu_interface_setopt+0x66>
   14188:	20015334 	.word	0x20015334
   1418c:	20015340 	.word	0x20015340
   14190:	20015338 	.word	0x20015338
   14194:	2001533c 	.word	0x2001533c

00014198 <mfu_interface_getopt>:
   14198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1419a:	461e      	mov	r6, r3
   1419c:	f240 2303 	movw	r3, #515	; 0x203
   141a0:	4299      	cmp	r1, r3
   141a2:	9d06      	ldr	r5, [sp, #24]
   141a4:	d101      	bne.n	141aa <mfu_interface_getopt+0x12>
   141a6:	b106      	cbz	r6, 141aa <mfu_interface_getopt+0x12>
   141a8:	b92d      	cbnz	r5, 141b6 <mfu_interface_getopt+0x1e>
   141aa:	2016      	movs	r0, #22
   141ac:	f7fb ffd4 	bl	10158 <nrf_modem_os_errno_set>
   141b0:	f04f 30ff 	mov.w	r0, #4294967295
   141b4:	e019      	b.n	141ea <mfu_interface_getopt+0x52>
   141b6:	4b22      	ldr	r3, [pc, #136]	; (14240 <mfu_interface_getopt+0xa8>)
   141b8:	681b      	ldr	r3, [r3, #0]
   141ba:	3b02      	subs	r3, #2
   141bc:	2b01      	cmp	r3, #1
   141be:	d901      	bls.n	141c4 <mfu_interface_getopt+0x2c>
   141c0:	2001      	movs	r0, #1
   141c2:	e7f3      	b.n	141ac <mfu_interface_getopt+0x14>
   141c4:	2a07      	cmp	r2, #7
   141c6:	d02b      	beq.n	14220 <mfu_interface_getopt+0x88>
   141c8:	dc05      	bgt.n	141d6 <mfu_interface_getopt+0x3e>
   141ca:	2a01      	cmp	r2, #1
   141cc:	d00e      	beq.n	141ec <mfu_interface_getopt+0x54>
   141ce:	2a02      	cmp	r2, #2
   141d0:	d023      	beq.n	1421a <mfu_interface_getopt+0x82>
   141d2:	202a      	movs	r0, #42	; 0x2a
   141d4:	e7ea      	b.n	141ac <mfu_interface_getopt+0x14>
   141d6:	2a14      	cmp	r2, #20
   141d8:	d1fb      	bne.n	141d2 <mfu_interface_getopt+0x3a>
   141da:	682b      	ldr	r3, [r5, #0]
   141dc:	2b04      	cmp	r3, #4
   141de:	d1e4      	bne.n	141aa <mfu_interface_getopt+0x12>
   141e0:	2000      	movs	r0, #0
   141e2:	4b18      	ldr	r3, [pc, #96]	; (14244 <mfu_interface_getopt+0xac>)
   141e4:	681a      	ldr	r2, [r3, #0]
   141e6:	6018      	str	r0, [r3, #0]
   141e8:	6032      	str	r2, [r6, #0]
   141ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   141ec:	682b      	ldr	r3, [r5, #0]
   141ee:	2b24      	cmp	r3, #36	; 0x24
   141f0:	d1db      	bne.n	141aa <mfu_interface_getopt+0x12>
   141f2:	4610      	mov	r0, r2
   141f4:	2200      	movs	r2, #0
   141f6:	4611      	mov	r1, r2
   141f8:	f7ff fe82 	bl	13f00 <rpc_dfu_message_send>
   141fc:	2800      	cmp	r0, #0
   141fe:	d1d7      	bne.n	141b0 <mfu_interface_getopt+0x18>
   14200:	4f11      	ldr	r7, [pc, #68]	; (14248 <mfu_interface_getopt+0xb0>)
   14202:	6839      	ldr	r1, [r7, #0]
   14204:	690c      	ldr	r4, [r1, #16]
   14206:	b184      	cbz	r4, 1422a <mfu_interface_getopt+0x92>
   14208:	4b0e      	ldr	r3, [pc, #56]	; (14244 <mfu_interface_getopt+0xac>)
   1420a:	2008      	movs	r0, #8
   1420c:	601c      	str	r4, [r3, #0]
   1420e:	f7fb ffa3 	bl	10158 <nrf_modem_os_errno_set>
   14212:	6838      	ldr	r0, [r7, #0]
   14214:	f004 fe39 	bl	18e8a <rpc_dfu_client_message_free>
   14218:	e7ca      	b.n	141b0 <mfu_interface_getopt+0x18>
   1421a:	682b      	ldr	r3, [r5, #0]
   1421c:	2b04      	cmp	r3, #4
   1421e:	e7e7      	b.n	141f0 <mfu_interface_getopt+0x58>
   14220:	682b      	ldr	r3, [r5, #0]
   14222:	2b04      	cmp	r3, #4
   14224:	d1c1      	bne.n	141aa <mfu_interface_getopt+0x12>
   14226:	2009      	movs	r0, #9
   14228:	e7e4      	b.n	141f4 <mfu_interface_getopt+0x5c>
   1422a:	682a      	ldr	r2, [r5, #0]
   1422c:	3114      	adds	r1, #20
   1422e:	4630      	mov	r0, r6
   14230:	f003 fe54 	bl	17edc <memcpy>
   14234:	6838      	ldr	r0, [r7, #0]
   14236:	f004 fe28 	bl	18e8a <rpc_dfu_client_message_free>
   1423a:	4620      	mov	r0, r4
   1423c:	e7d5      	b.n	141ea <mfu_interface_getopt+0x52>
   1423e:	bf00      	nop
   14240:	20015334 	.word	0x20015334
   14244:	20015338 	.word	0x20015338
   14248:	20015340 	.word	0x20015340

0001424c <send_message>:
   1424c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1424e:	b085      	sub	sp, #20
   14250:	4606      	mov	r6, r0
   14252:	460f      	mov	r7, r1
   14254:	a803      	add	r0, sp, #12
   14256:	4611      	mov	r1, r2
   14258:	9201      	str	r2, [sp, #4]
   1425a:	f004 fe2a 	bl	18eb2 <rpc_gnss_client_request_alloc>
   1425e:	9b03      	ldr	r3, [sp, #12]
   14260:	4604      	mov	r4, r0
   14262:	b958      	cbnz	r0, 1427c <send_message+0x30>
   14264:	9a01      	ldr	r2, [sp, #4]
   14266:	b98b      	cbnz	r3, 1428c <send_message+0x40>
   14268:	9803      	ldr	r0, [sp, #12]
   1426a:	f004 fe48 	bl	18efe <rpc_gnss_client_message_free>
   1426e:	2023      	movs	r0, #35	; 0x23
   14270:	f7fb ff72 	bl	10158 <nrf_modem_os_errno_set>
   14274:	f04f 30ff 	mov.w	r0, #4294967295
   14278:	b005      	add	sp, #20
   1427a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1427c:	2b00      	cmp	r3, #0
   1427e:	d0f3      	beq.n	14268 <send_message+0x1c>
   14280:	6818      	ldr	r0, [r3, #0]
   14282:	2800      	cmp	r0, #0
   14284:	d0f0      	beq.n	14268 <send_message+0x1c>
   14286:	f004 fe42 	bl	18f0e <rpc_gnss_client_data_free>
   1428a:	e7ed      	b.n	14268 <send_message+0x1c>
   1428c:	490f      	ldr	r1, [pc, #60]	; (142cc <send_message+0x80>)
   1428e:	880d      	ldrh	r5, [r1, #0]
   14290:	3501      	adds	r5, #1
   14292:	b2ad      	uxth	r5, r5
   14294:	800d      	strh	r5, [r1, #0]
   14296:	2143      	movs	r1, #67	; 0x43
   14298:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
   1429c:	603d      	str	r5, [r7, #0]
   1429e:	7319      	strb	r1, [r3, #12]
   142a0:	2154      	movs	r1, #84	; 0x54
   142a2:	7359      	strb	r1, [r3, #13]
   142a4:	2176      	movs	r1, #118	; 0x76
   142a6:	7399      	strb	r1, [r3, #14]
   142a8:	2149      	movs	r1, #73	; 0x49
   142aa:	605a      	str	r2, [r3, #4]
   142ac:	7218      	strb	r0, [r3, #8]
   142ae:	7258      	strb	r0, [r3, #9]
   142b0:	7298      	strb	r0, [r3, #10]
   142b2:	72d8      	strb	r0, [r3, #11]
   142b4:	73d9      	strb	r1, [r3, #15]
   142b6:	6818      	ldr	r0, [r3, #0]
   142b8:	4639      	mov	r1, r7
   142ba:	f003 fe0f 	bl	17edc <memcpy>
   142be:	4b04      	ldr	r3, [pc, #16]	; (142d0 <send_message+0x84>)
   142c0:	4631      	mov	r1, r6
   142c2:	9803      	ldr	r0, [sp, #12]
   142c4:	601c      	str	r4, [r3, #0]
   142c6:	f004 fe06 	bl	18ed6 <rpc_gnss_client_request_send>
   142ca:	e7d5      	b.n	14278 <send_message+0x2c>
   142cc:	20015c40 	.word	0x20015c40
   142d0:	20015348 	.word	0x20015348

000142d4 <rpc_gnss_event_handler>:
   142d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   142d6:	4b5b      	ldr	r3, [pc, #364]	; (14444 <rpc_gnss_event_handler+0x170>)
   142d8:	4605      	mov	r5, r0
   142da:	6800      	ldr	r0, [r0, #0]
   142dc:	881b      	ldrh	r3, [r3, #0]
   142de:	6802      	ldr	r2, [r0, #0]
   142e0:	460c      	mov	r4, r1
   142e2:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   142e6:	b085      	sub	sp, #20
   142e8:	d134      	bne.n	14354 <rpc_gnss_event_handler+0x80>
   142ea:	4b57      	ldr	r3, [pc, #348]	; (14448 <rpc_gnss_event_handler+0x174>)
   142ec:	4e57      	ldr	r6, [pc, #348]	; (1444c <rpc_gnss_event_handler+0x178>)
   142ee:	681a      	ldr	r2, [r3, #0]
   142f0:	6030      	str	r0, [r6, #0]
   142f2:	01d2      	lsls	r2, r2, #7
   142f4:	d50d      	bpl.n	14312 <rpc_gnss_event_handler+0x3e>
   142f6:	f242 1202 	movw	r2, #8450	; 0x2102
   142fa:	4291      	cmp	r1, r2
   142fc:	d109      	bne.n	14312 <rpc_gnss_event_handler+0x3e>
   142fe:	6842      	ldr	r2, [r0, #4]
   14300:	b91a      	cbnz	r2, 1430a <rpc_gnss_event_handler+0x36>
   14302:	681a      	ldr	r2, [r3, #0]
   14304:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   14308:	601a      	str	r2, [r3, #0]
   1430a:	681a      	ldr	r2, [r3, #0]
   1430c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   14310:	601a      	str	r2, [r3, #0]
   14312:	681a      	ldr	r2, [r3, #0]
   14314:	0257      	lsls	r7, r2, #9
   14316:	d50d      	bpl.n	14334 <rpc_gnss_event_handler+0x60>
   14318:	f242 1203 	movw	r2, #8451	; 0x2103
   1431c:	4294      	cmp	r4, r2
   1431e:	d109      	bne.n	14334 <rpc_gnss_event_handler+0x60>
   14320:	6842      	ldr	r2, [r0, #4]
   14322:	b91a      	cbnz	r2, 1432c <rpc_gnss_event_handler+0x58>
   14324:	681a      	ldr	r2, [r3, #0]
   14326:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   1432a:	601a      	str	r2, [r3, #0]
   1432c:	681a      	ldr	r2, [r3, #0]
   1432e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   14332:	e04a      	b.n	143ca <rpc_gnss_event_handler+0xf6>
   14334:	f242 0201 	movw	r2, #8193	; 0x2001
   14338:	4294      	cmp	r4, r2
   1433a:	d03e      	beq.n	143ba <rpc_gnss_event_handler+0xe6>
   1433c:	f242 0204 	movw	r2, #8196	; 0x2004
   14340:	4294      	cmp	r4, r2
   14342:	d044      	beq.n	143ce <rpc_gnss_event_handler+0xfa>
   14344:	f242 0205 	movw	r2, #8197	; 0x2005
   14348:	4294      	cmp	r4, r2
   1434a:	d05d      	beq.n	14408 <rpc_gnss_event_handler+0x134>
   1434c:	f004 fddf 	bl	18f0e <rpc_gnss_client_data_free>
   14350:	2300      	movs	r3, #0
   14352:	6033      	str	r3, [r6, #0]
   14354:	f504 433f 	add.w	r3, r4, #48896	; 0xbf00
   14358:	33ff      	adds	r3, #255	; 0xff
   1435a:	b29b      	uxth	r3, r3
   1435c:	2b02      	cmp	r3, #2
   1435e:	d869      	bhi.n	14434 <rpc_gnss_event_handler+0x160>
   14360:	4f39      	ldr	r7, [pc, #228]	; (14448 <rpc_gnss_event_handler+0x174>)
   14362:	683b      	ldr	r3, [r7, #0]
   14364:	075a      	lsls	r2, r3, #29
   14366:	d406      	bmi.n	14376 <rpc_gnss_event_handler+0xa2>
   14368:	683b      	ldr	r3, [r7, #0]
   1436a:	079b      	lsls	r3, r3, #30
   1436c:	d51c      	bpl.n	143a8 <rpc_gnss_event_handler+0xd4>
   1436e:	f244 0303 	movw	r3, #16387	; 0x4003
   14372:	429c      	cmp	r4, r3
   14374:	d118      	bne.n	143a8 <rpc_gnss_event_handler+0xd4>
   14376:	2002      	movs	r0, #2
   14378:	f7fc f86e 	bl	10458 <nrf_modem_os_alloc>
   1437c:	4606      	mov	r6, r0
   1437e:	6828      	ldr	r0, [r5, #0]
   14380:	2e00      	cmp	r6, #0
   14382:	d052      	beq.n	1442a <rpc_gnss_event_handler+0x156>
   14384:	8034      	strh	r4, [r6, #0]
   14386:	686b      	ldr	r3, [r5, #4]
   14388:	9000      	str	r0, [sp, #0]
   1438a:	e9cd 3601 	strd	r3, r6, [sp, #4]
   1438e:	2302      	movs	r3, #2
   14390:	9303      	str	r3, [sp, #12]
   14392:	4b2f      	ldr	r3, [pc, #188]	; (14450 <rpc_gnss_event_handler+0x17c>)
   14394:	4669      	mov	r1, sp
   14396:	6818      	ldr	r0, [r3, #0]
   14398:	6803      	ldr	r3, [r0, #0]
   1439a:	685b      	ldr	r3, [r3, #4]
   1439c:	4798      	blx	r3
   1439e:	3001      	adds	r0, #1
   143a0:	d14b      	bne.n	1443a <rpc_gnss_event_handler+0x166>
   143a2:	4630      	mov	r0, r6
   143a4:	f7fc f868 	bl	10478 <nrf_modem_os_free>
   143a8:	6828      	ldr	r0, [r5, #0]
   143aa:	2800      	cmp	r0, #0
   143ac:	d042      	beq.n	14434 <rpc_gnss_event_handler+0x160>
   143ae:	f004 fdae 	bl	18f0e <rpc_gnss_client_data_free>
   143b2:	2200      	movs	r2, #0
   143b4:	4b25      	ldr	r3, [pc, #148]	; (1444c <rpc_gnss_event_handler+0x178>)
   143b6:	601a      	str	r2, [r3, #0]
   143b8:	e03c      	b.n	14434 <rpc_gnss_event_handler+0x160>
   143ba:	6842      	ldr	r2, [r0, #4]
   143bc:	2a00      	cmp	r2, #0
   143be:	d1c5      	bne.n	1434c <rpc_gnss_event_handler+0x78>
   143c0:	681a      	ldr	r2, [r3, #0]
   143c2:	0c12      	lsrs	r2, r2, #16
   143c4:	0412      	lsls	r2, r2, #16
   143c6:	f042 0202 	orr.w	r2, r2, #2
   143ca:	601a      	str	r2, [r3, #0]
   143cc:	e7be      	b.n	1434c <rpc_gnss_event_handler+0x78>
   143ce:	6842      	ldr	r2, [r0, #4]
   143d0:	b9b2      	cbnz	r2, 14400 <rpc_gnss_event_handler+0x12c>
   143d2:	681a      	ldr	r2, [r3, #0]
   143d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   143d8:	601a      	str	r2, [r3, #0]
   143da:	681a      	ldr	r2, [r3, #0]
   143dc:	b292      	uxth	r2, r2
   143de:	2a03      	cmp	r2, #3
   143e0:	681a      	ldr	r2, [r3, #0]
   143e2:	d104      	bne.n	143ee <rpc_gnss_event_handler+0x11a>
   143e4:	0c12      	lsrs	r2, r2, #16
   143e6:	0412      	lsls	r2, r2, #16
   143e8:	f042 0204 	orr.w	r2, r2, #4
   143ec:	e79d      	b.n	1432a <rpc_gnss_event_handler+0x56>
   143ee:	b292      	uxth	r2, r2
   143f0:	2a04      	cmp	r2, #4
   143f2:	d19b      	bne.n	1432c <rpc_gnss_event_handler+0x58>
   143f4:	681a      	ldr	r2, [r3, #0]
   143f6:	0c12      	lsrs	r2, r2, #16
   143f8:	0412      	lsls	r2, r2, #16
   143fa:	f042 0202 	orr.w	r2, r2, #2
   143fe:	e794      	b.n	1432a <rpc_gnss_event_handler+0x56>
   14400:	681a      	ldr	r2, [r3, #0]
   14402:	b292      	uxth	r2, r2
   14404:	2a03      	cmp	r2, #3
   14406:	e7f4      	b.n	143f2 <rpc_gnss_event_handler+0x11e>
   14408:	681a      	ldr	r2, [r3, #0]
   1440a:	0291      	lsls	r1, r2, #10
   1440c:	d59e      	bpl.n	1434c <rpc_gnss_event_handler+0x78>
   1440e:	6842      	ldr	r2, [r0, #4]
   14410:	b93a      	cbnz	r2, 14422 <rpc_gnss_event_handler+0x14e>
   14412:	681a      	ldr	r2, [r3, #0]
   14414:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   14418:	601a      	str	r2, [r3, #0]
   1441a:	681a      	ldr	r2, [r3, #0]
   1441c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   14420:	e7d3      	b.n	143ca <rpc_gnss_event_handler+0xf6>
   14422:	681a      	ldr	r2, [r3, #0]
   14424:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   14428:	e7cf      	b.n	143ca <rpc_gnss_event_handler+0xf6>
   1442a:	b118      	cbz	r0, 14434 <rpc_gnss_event_handler+0x160>
   1442c:	f004 fd6f 	bl	18f0e <rpc_gnss_client_data_free>
   14430:	4b06      	ldr	r3, [pc, #24]	; (1444c <rpc_gnss_event_handler+0x178>)
   14432:	601e      	str	r6, [r3, #0]
   14434:	2000      	movs	r0, #0
   14436:	b005      	add	sp, #20
   14438:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1443a:	683b      	ldr	r3, [r7, #0]
   1443c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   14440:	603b      	str	r3, [r7, #0]
   14442:	e7f7      	b.n	14434 <rpc_gnss_event_handler+0x160>
   14444:	20015c40 	.word	0x20015c40
   14448:	20015344 	.word	0x20015344
   1444c:	20015348 	.word	0x20015348
   14450:	2001534c 	.word	0x2001534c

00014454 <gnss_interface_write>:
   14454:	b570      	push	{r4, r5, r6, lr}
   14456:	4604      	mov	r4, r0
   14458:	4a40      	ldr	r2, [pc, #256]	; (1455c <gnss_interface_write+0x108>)
   1445a:	b09e      	sub	sp, #120	; 0x78
   1445c:	4294      	cmp	r4, r2
   1445e:	4608      	mov	r0, r1
   14460:	9d22      	ldr	r5, [sp, #136]	; 0x88
   14462:	d005      	beq.n	14470 <gnss_interface_write+0x1c>
   14464:	2009      	movs	r0, #9
   14466:	f7fb fe77 	bl	10158 <nrf_modem_os_errno_set>
   1446a:	f04f 33ff 	mov.w	r3, #4294967295
   1446e:	e061      	b.n	14534 <gnss_interface_write+0xe0>
   14470:	b119      	cbz	r1, 1447a <gnss_interface_write+0x26>
   14472:	b115      	cbz	r5, 1447a <gnss_interface_write+0x26>
   14474:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   14476:	2a02      	cmp	r2, #2
   14478:	d001      	beq.n	1447e <gnss_interface_write+0x2a>
   1447a:	2016      	movs	r0, #22
   1447c:	e7f3      	b.n	14466 <gnss_interface_write+0x12>
   1447e:	4a38      	ldr	r2, [pc, #224]	; (14560 <gnss_interface_write+0x10c>)
   14480:	6811      	ldr	r1, [r2, #0]
   14482:	4614      	mov	r4, r2
   14484:	b289      	uxth	r1, r1
   14486:	2902      	cmp	r1, #2
   14488:	d005      	beq.n	14496 <gnss_interface_write+0x42>
   1448a:	6812      	ldr	r2, [r2, #0]
   1448c:	b292      	uxth	r2, r2
   1448e:	2a04      	cmp	r2, #4
   14490:	d001      	beq.n	14496 <gnss_interface_write+0x42>
   14492:	2039      	movs	r0, #57	; 0x39
   14494:	e7e7      	b.n	14466 <gnss_interface_write+0x12>
   14496:	b10b      	cbz	r3, 1449c <gnss_interface_write+0x48>
   14498:	202d      	movs	r0, #45	; 0x2d
   1449a:	e7e4      	b.n	14466 <gnss_interface_write+0x12>
   1449c:	6822      	ldr	r2, [r4, #0]
   1449e:	0396      	lsls	r6, r2, #14
   144a0:	d548      	bpl.n	14534 <gnss_interface_write+0xe0>
   144a2:	6823      	ldr	r3, [r4, #0]
   144a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   144a8:	6023      	str	r3, [r4, #0]
   144aa:	6823      	ldr	r3, [r4, #0]
   144ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   144b0:	6023      	str	r3, [r4, #0]
   144b2:	882b      	ldrh	r3, [r5, #0]
   144b4:	3b01      	subs	r3, #1
   144b6:	2b07      	cmp	r3, #7
   144b8:	d8df      	bhi.n	1447a <gnss_interface_write+0x26>
   144ba:	e8df f003 	tbb	[pc, r3]
   144be:	1704      	.short	0x1704
   144c0:	27231f1b 	.word	0x27231f1b
   144c4:	2f2b      	.short	0x2f2b
   144c6:	a902      	add	r1, sp, #8
   144c8:	f004 fd28 	bl	18f1c <rpc_gnss_serialize_utc>
   144cc:	2272      	movs	r2, #114	; 0x72
   144ce:	f241 0005 	movw	r0, #4101	; 0x1005
   144d2:	a901      	add	r1, sp, #4
   144d4:	f7ff feba 	bl	1424c <send_message>
   144d8:	4603      	mov	r3, r0
   144da:	bb18      	cbnz	r0, 14524 <gnss_interface_write+0xd0>
   144dc:	4d21      	ldr	r5, [pc, #132]	; (14564 <gnss_interface_write+0x110>)
   144de:	4e1f      	ldr	r6, [pc, #124]	; (1455c <gnss_interface_write+0x108>)
   144e0:	6822      	ldr	r2, [r4, #0]
   144e2:	0291      	lsls	r1, r2, #10
   144e4:	d52f      	bpl.n	14546 <gnss_interface_write+0xf2>
   144e6:	b343      	cbz	r3, 1453a <gnss_interface_write+0xe6>
   144e8:	4618      	mov	r0, r3
   144ea:	e7bc      	b.n	14466 <gnss_interface_write+0x12>
   144ec:	a902      	add	r1, sp, #8
   144ee:	f004 fd32 	bl	18f56 <rpc_gnss_serialize_ephe>
   144f2:	e7eb      	b.n	144cc <gnss_interface_write+0x78>
   144f4:	a902      	add	r1, sp, #8
   144f6:	f004 fd78 	bl	18fea <rpc_gnss_serialize_alm>
   144fa:	e7e7      	b.n	144cc <gnss_interface_write+0x78>
   144fc:	a902      	add	r1, sp, #8
   144fe:	f004 fda1 	bl	19044 <rpc_gnss_serialize_klob>
   14502:	e7e3      	b.n	144cc <gnss_interface_write+0x78>
   14504:	a902      	add	r1, sp, #8
   14506:	f004 fdb8 	bl	1907a <rpc_gnss_serialize_nequick>
   1450a:	e7df      	b.n	144cc <gnss_interface_write+0x78>
   1450c:	a902      	add	r1, sp, #8
   1450e:	f004 fdc9 	bl	190a4 <rpc_gnss_serialize_time_and_sv_tow>
   14512:	e7db      	b.n	144cc <gnss_interface_write+0x78>
   14514:	a902      	add	r1, sp, #8
   14516:	f004 fde8 	bl	190ea <rpc_gnss_serialize_location>
   1451a:	e7d7      	b.n	144cc <gnss_interface_write+0x78>
   1451c:	a902      	add	r1, sp, #8
   1451e:	f004 fe01 	bl	19124 <rpc_gnss_serialize_integrity>
   14522:	e7d3      	b.n	144cc <gnss_interface_write+0x78>
   14524:	6822      	ldr	r2, [r4, #0]
   14526:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   1452a:	6022      	str	r2, [r4, #0]
   1452c:	6822      	ldr	r2, [r4, #0]
   1452e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   14532:	6022      	str	r2, [r4, #0]
   14534:	4618      	mov	r0, r3
   14536:	b01e      	add	sp, #120	; 0x78
   14538:	bd70      	pop	{r4, r5, r6, pc}
   1453a:	4629      	mov	r1, r5
   1453c:	4630      	mov	r0, r6
   1453e:	f7fb fd53 	bl	ffe8 <nrf_modem_os_timedwait>
   14542:	4603      	mov	r3, r0
   14544:	e7cc      	b.n	144e0 <gnss_interface_write+0x8c>
   14546:	2b00      	cmp	r3, #0
   14548:	d1ce      	bne.n	144e8 <gnss_interface_write+0x94>
   1454a:	6822      	ldr	r2, [r4, #0]
   1454c:	0392      	lsls	r2, r2, #14
   1454e:	d4f1      	bmi.n	14534 <gnss_interface_write+0xe0>
   14550:	6823      	ldr	r3, [r4, #0]
   14552:	2005      	movs	r0, #5
   14554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   14558:	6023      	str	r3, [r4, #0]
   1455a:	e784      	b.n	14466 <gnss_interface_write+0x12>
   1455c:	49765443 	.word	0x49765443
   14560:	20015344 	.word	0x20015344
   14564:	2001458c 	.word	0x2001458c

00014568 <gnss_interface_read>:
   14568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1456c:	469a      	mov	sl, r3
   1456e:	4b7d      	ldr	r3, [pc, #500]	; (14764 <gnss_interface_read+0x1fc>)
   14570:	460c      	mov	r4, r1
   14572:	4298      	cmp	r0, r3
   14574:	b0b5      	sub	sp, #212	; 0xd4
   14576:	d008      	beq.n	1458a <gnss_interface_read+0x22>
   14578:	2009      	movs	r0, #9
   1457a:	f7fb fded 	bl	10158 <nrf_modem_os_errno_set>
   1457e:	f04f 35ff 	mov.w	r5, #4294967295
   14582:	4628      	mov	r0, r5
   14584:	b035      	add	sp, #212	; 0xd4
   14586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1458a:	b109      	cbz	r1, 14590 <gnss_interface_read+0x28>
   1458c:	2ad7      	cmp	r2, #215	; 0xd7
   1458e:	d801      	bhi.n	14594 <gnss_interface_read+0x2c>
   14590:	2016      	movs	r0, #22
   14592:	e7f2      	b.n	1457a <gnss_interface_read+0x12>
   14594:	4b74      	ldr	r3, [pc, #464]	; (14768 <gnss_interface_read+0x200>)
   14596:	681a      	ldr	r2, [r3, #0]
   14598:	461e      	mov	r6, r3
   1459a:	b292      	uxth	r2, r2
   1459c:	2a04      	cmp	r2, #4
   1459e:	d005      	beq.n	145ac <gnss_interface_read+0x44>
   145a0:	681b      	ldr	r3, [r3, #0]
   145a2:	b29b      	uxth	r3, r3
   145a4:	2b02      	cmp	r3, #2
   145a6:	d001      	beq.n	145ac <gnss_interface_read+0x44>
   145a8:	2039      	movs	r0, #57	; 0x39
   145aa:	e7e6      	b.n	1457a <gnss_interface_read+0x12>
   145ac:	f1ba 0f00 	cmp.w	sl, #0
   145b0:	d004      	beq.n	145bc <gnss_interface_read+0x54>
   145b2:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   145b6:	d101      	bne.n	145bc <gnss_interface_read+0x54>
   145b8:	202d      	movs	r0, #45	; 0x2d
   145ba:	e7de      	b.n	1457a <gnss_interface_read+0x12>
   145bc:	6833      	ldr	r3, [r6, #0]
   145be:	f04f 0900 	mov.w	r9, #0
   145c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   145c6:	6033      	str	r3, [r6, #0]
   145c8:	23b6      	movs	r3, #182	; 0xb6
   145ca:	9303      	str	r3, [sp, #12]
   145cc:	f10d 0306 	add.w	r3, sp, #6
   145d0:	9304      	str	r3, [sp, #16]
   145d2:	2302      	movs	r3, #2
   145d4:	f10d 0818 	add.w	r8, sp, #24
   145d8:	4f64      	ldr	r7, [pc, #400]	; (1476c <gnss_interface_read+0x204>)
   145da:	f8df b188 	ldr.w	fp, [pc, #392]	; 14764 <gnss_interface_read+0x1fc>
   145de:	f8cd 8008 	str.w	r8, [sp, #8]
   145e2:	9305      	str	r3, [sp, #20]
   145e4:	6838      	ldr	r0, [r7, #0]
   145e6:	a902      	add	r1, sp, #8
   145e8:	6802      	ldr	r2, [r0, #0]
   145ea:	6895      	ldr	r5, [r2, #8]
   145ec:	4652      	mov	r2, sl
   145ee:	47a8      	blx	r5
   145f0:	1e05      	subs	r5, r0, #0
   145f2:	da13      	bge.n	1461c <gnss_interface_read+0xb4>
   145f4:	f01a 0f02 	tst.w	sl, #2
   145f8:	d10e      	bne.n	14618 <gnss_interface_read+0xb0>
   145fa:	4d5d      	ldr	r5, [pc, #372]	; (14770 <gnss_interface_read+0x208>)
   145fc:	6832      	ldr	r2, [r6, #0]
   145fe:	495d      	ldr	r1, [pc, #372]	; (14774 <gnss_interface_read+0x20c>)
   14600:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
   14604:	ea52 0309 	orrs.w	r3, r2, r9
   14608:	7828      	ldrb	r0, [r5, #0]
   1460a:	d027      	beq.n	1465c <gnss_interface_read+0xf4>
   1460c:	2800      	cmp	r0, #0
   1460e:	d1e9      	bne.n	145e4 <gnss_interface_read+0x7c>
   14610:	f04f 0970 	mov.w	r9, #112	; 0x70
   14614:	4648      	mov	r0, r9
   14616:	e7b0      	b.n	1457a <gnss_interface_read+0x12>
   14618:	1c6b      	adds	r3, r5, #1
   1461a:	d026      	beq.n	1466a <gnss_interface_read+0x102>
   1461c:	f244 0202 	movw	r2, #16386	; 0x4002
   14620:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   14624:	4293      	cmp	r3, r2
   14626:	d127      	bne.n	14678 <gnss_interface_read+0x110>
   14628:	4640      	mov	r0, r8
   1462a:	f003 fc1c 	bl	17e66 <strlen>
   1462e:	2302      	movs	r3, #2
   14630:	1c45      	adds	r5, r0, #1
   14632:	f804 3b08 	strb.w	r3, [r4], #8
   14636:	b2ad      	uxth	r5, r5
   14638:	462a      	mov	r2, r5
   1463a:	4641      	mov	r1, r8
   1463c:	4620      	mov	r0, r4
   1463e:	f003 fc4d 	bl	17edc <memcpy>
   14642:	3508      	adds	r5, #8
   14644:	4b49      	ldr	r3, [pc, #292]	; (1476c <gnss_interface_read+0x204>)
   14646:	6818      	ldr	r0, [r3, #0]
   14648:	6803      	ldr	r3, [r0, #0]
   1464a:	68db      	ldr	r3, [r3, #12]
   1464c:	4798      	blx	r3
   1464e:	2800      	cmp	r0, #0
   14650:	bfc2      	ittt	gt
   14652:	6833      	ldrgt	r3, [r6, #0]
   14654:	f443 3380 	orrgt.w	r3, r3, #65536	; 0x10000
   14658:	6033      	strgt	r3, [r6, #0]
   1465a:	e792      	b.n	14582 <gnss_interface_read+0x1a>
   1465c:	2800      	cmp	r0, #0
   1465e:	d0d7      	beq.n	14610 <gnss_interface_read+0xa8>
   14660:	4658      	mov	r0, fp
   14662:	f7fb fcc1 	bl	ffe8 <nrf_modem_os_timedwait>
   14666:	4681      	mov	r9, r0
   14668:	e7c8      	b.n	145fc <gnss_interface_read+0x94>
   1466a:	f1b9 0f00 	cmp.w	r9, #0
   1466e:	d1d1      	bne.n	14614 <gnss_interface_read+0xac>
   14670:	2023      	movs	r0, #35	; 0x23
   14672:	f7fb fd71 	bl	10158 <nrf_modem_os_errno_set>
   14676:	e784      	b.n	14582 <gnss_interface_read+0x1a>
   14678:	f244 0201 	movw	r2, #16385	; 0x4001
   1467c:	4293      	cmp	r3, r2
   1467e:	d160      	bne.n	14742 <gnss_interface_read+0x1da>
   14680:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   14684:	2301      	movs	r3, #1
   14686:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   1468a:	7023      	strb	r3, [r4, #0]
   1468c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   14690:	e9c4 2304 	strd	r2, r3, [r4, #16]
   14694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14696:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
   1469a:	61a3      	str	r3, [r4, #24]
   1469c:	f8dd 5045 	ldr.w	r5, [sp, #69]	; 0x45
   146a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   146a2:	6365      	str	r5, [r4, #52]	; 0x34
   146a4:	61e3      	str	r3, [r4, #28]
   146a6:	f8dd 5049 	ldr.w	r5, [sp, #73]	; 0x49
   146aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   146ac:	63a5      	str	r5, [r4, #56]	; 0x38
   146ae:	6223      	str	r3, [r4, #32]
   146b0:	f8dd 504d 	ldr.w	r5, [sp, #77]	; 0x4d
   146b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   146b6:	63e5      	str	r5, [r4, #60]	; 0x3c
   146b8:	6263      	str	r3, [r4, #36]	; 0x24
   146ba:	f8dd 5051 	ldr.w	r5, [sp, #81]	; 0x51
   146be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   146c0:	6425      	str	r5, [r4, #64]	; 0x40
   146c2:	62a3      	str	r3, [r4, #40]	; 0x28
   146c4:	f89d 5042 	ldrb.w	r5, [sp, #66]	; 0x42
   146c8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   146cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
   146d0:	85a3      	strh	r3, [r4, #44]	; 0x2c
   146d2:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
   146d6:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   146da:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   146de:	200a      	movs	r0, #10
   146e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   146e4:	2200      	movs	r2, #0
   146e6:	8623      	strh	r3, [r4, #48]	; 0x30
   146e8:	f8b8 303e 	ldrh.w	r3, [r8, #62]	; 0x3e
   146ec:	340c      	adds	r4, #12
   146ee:	8763      	strh	r3, [r4, #58]	; 0x3a
   146f0:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
   146f4:	f108 080a 	add.w	r8, r8, #10
   146f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   146fc:	ab34      	add	r3, sp, #208	; 0xd0
   146fe:	fb00 3302 	mla	r3, r0, r2, r3
   14702:	f813 5c76 	ldrb.w	r5, [r3, #-118]
   14706:	f813 1c77 	ldrb.w	r1, [r3, #-119]
   1470a:	3201      	adds	r2, #1
   1470c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   14710:	87e1      	strh	r1, [r4, #62]	; 0x3e
   14712:	f813 1c75 	ldrb.w	r1, [r3, #-117]
   14716:	f813 5c74 	ldrb.w	r5, [r3, #-116]
   1471a:	2a0c      	cmp	r2, #12
   1471c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   14720:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
   14724:	f813 1c73 	ldrb.w	r1, [r3, #-115]
   14728:	f813 3c72 	ldrb.w	r3, [r3, #-114]
   1472c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
   14730:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
   14734:	f898 303d 	ldrb.w	r3, [r8, #61]	; 0x3d
   14738:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   1473c:	d1d4      	bne.n	146e8 <gnss_interface_read+0x180>
   1473e:	25d8      	movs	r5, #216	; 0xd8
   14740:	e780      	b.n	14644 <gnss_interface_read+0xdc>
   14742:	f244 0203 	movw	r2, #16387	; 0x4003
   14746:	4293      	cmp	r3, r2
   14748:	f47f af22 	bne.w	14590 <gnss_interface_read+0x28>
   1474c:	2303      	movs	r3, #3
   1474e:	7023      	strb	r3, [r4, #0]
   14750:	9b06      	ldr	r3, [sp, #24]
   14752:	2514      	movs	r5, #20
   14754:	60a3      	str	r3, [r4, #8]
   14756:	9b07      	ldr	r3, [sp, #28]
   14758:	60e3      	str	r3, [r4, #12]
   1475a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1475e:	6123      	str	r3, [r4, #16]
   14760:	e770      	b.n	14644 <gnss_interface_read+0xdc>
   14762:	bf00      	nop
   14764:	49765443 	.word	0x49765443
   14768:	20015344 	.word	0x20015344
   1476c:	2001534c 	.word	0x2001534c
   14770:	200178e8 	.word	0x200178e8
   14774:	2001458c 	.word	0x2001458c

00014778 <gnss_interface_setopt>:
   14778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1477c:	4c75      	ldr	r4, [pc, #468]	; (14954 <gnss_interface_setopt+0x1dc>)
   1477e:	4616      	mov	r6, r2
   14780:	6822      	ldr	r2, [r4, #0]
   14782:	b087      	sub	sp, #28
   14784:	b292      	uxth	r2, r2
   14786:	2a02      	cmp	r2, #2
   14788:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1478a:	d007      	beq.n	1479c <gnss_interface_setopt+0x24>
   1478c:	2e08      	cmp	r6, #8
   1478e:	d005      	beq.n	1479c <gnss_interface_setopt+0x24>
   14790:	f1a6 020a 	sub.w	r2, r6, #10
   14794:	2a01      	cmp	r2, #1
   14796:	d901      	bls.n	1479c <gnss_interface_setopt+0x24>
   14798:	200e      	movs	r0, #14
   1479a:	e003      	b.n	147a4 <gnss_interface_setopt+0x2c>
   1479c:	6822      	ldr	r2, [r4, #0]
   1479e:	0252      	lsls	r2, r2, #9
   147a0:	d508      	bpl.n	147b4 <gnss_interface_setopt+0x3c>
   147a2:	2073      	movs	r0, #115	; 0x73
   147a4:	f7fb fcd8 	bl	10158 <nrf_modem_os_errno_set>
   147a8:	f04f 35ff 	mov.w	r5, #4294967295
   147ac:	4628      	mov	r0, r5
   147ae:	b007      	add	sp, #28
   147b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   147b4:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   147b8:	d001      	beq.n	147be <gnss_interface_setopt+0x46>
   147ba:	202a      	movs	r0, #42	; 0x2a
   147bc:	e7f2      	b.n	147a4 <gnss_interface_setopt+0x2c>
   147be:	4a66      	ldr	r2, [pc, #408]	; (14958 <gnss_interface_setopt+0x1e0>)
   147c0:	4290      	cmp	r0, r2
   147c2:	d001      	beq.n	147c8 <gnss_interface_setopt+0x50>
   147c4:	2009      	movs	r0, #9
   147c6:	e7ed      	b.n	147a4 <gnss_interface_setopt+0x2c>
   147c8:	f1a6 020a 	sub.w	r2, r6, #10
   147cc:	2a01      	cmp	r2, #1
   147ce:	d902      	bls.n	147d6 <gnss_interface_setopt+0x5e>
   147d0:	b90b      	cbnz	r3, 147d6 <gnss_interface_setopt+0x5e>
   147d2:	2016      	movs	r0, #22
   147d4:	e7e6      	b.n	147a4 <gnss_interface_setopt+0x2c>
   147d6:	1e72      	subs	r2, r6, #1
   147d8:	2a0a      	cmp	r2, #10
   147da:	d8fa      	bhi.n	147d2 <gnss_interface_setopt+0x5a>
   147dc:	e8df f002 	tbb	[pc, r2]
   147e0:	4b45063d 	.word	0x4b45063d
   147e4:	806a5a53 	.word	0x806a5a53
   147e8:	9362      	.short	0x9362
   147ea:	a5          	.byte	0xa5
   147eb:	00          	.byte	0x00
   147ec:	2d02      	cmp	r5, #2
   147ee:	d1f0      	bne.n	147d2 <gnss_interface_setopt+0x5a>
   147f0:	2210      	movs	r2, #16
   147f2:	881b      	ldrh	r3, [r3, #0]
   147f4:	9202      	str	r2, [sp, #8]
   147f6:	f8ad 3011 	strh.w	r3, [sp, #17]
   147fa:	f241 1003 	movw	r0, #4355	; 0x1103
   147fe:	6823      	ldr	r3, [r4, #0]
   14800:	2212      	movs	r2, #18
   14802:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   14806:	a901      	add	r1, sp, #4
   14808:	6023      	str	r3, [r4, #0]
   1480a:	f7ff fd1f 	bl	1424c <send_message>
   1480e:	4605      	mov	r5, r0
   14810:	2800      	cmp	r0, #0
   14812:	f040 8091 	bne.w	14938 <gnss_interface_setopt+0x1c0>
   14816:	f8df 9148 	ldr.w	r9, [pc, #328]	; 14960 <gnss_interface_setopt+0x1e8>
   1481a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 14958 <gnss_interface_setopt+0x1e0>
   1481e:	4649      	mov	r1, r9
   14820:	4640      	mov	r0, r8
   14822:	f7fb fbe1 	bl	ffe8 <nrf_modem_os_timedwait>
   14826:	6827      	ldr	r7, [r4, #0]
   14828:	f417 0780 	ands.w	r7, r7, #4194304	; 0x400000
   1482c:	d1f7      	bne.n	1481e <gnss_interface_setopt+0xa6>
   1482e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 14964 <gnss_interface_setopt+0x1ec>
   14832:	f8d8 0000 	ldr.w	r0, [r8]
   14836:	b118      	cbz	r0, 14840 <gnss_interface_setopt+0xc8>
   14838:	f004 fb69 	bl	18f0e <rpc_gnss_client_data_free>
   1483c:	f8c8 7000 	str.w	r7, [r8]
   14840:	6823      	ldr	r3, [r4, #0]
   14842:	021b      	lsls	r3, r3, #8
   14844:	d47d      	bmi.n	14942 <gnss_interface_setopt+0x1ca>
   14846:	200e      	movs	r0, #14
   14848:	f7fb fc86 	bl	10158 <nrf_modem_os_errno_set>
   1484c:	f04f 35ff 	mov.w	r5, #4294967295
   14850:	6823      	ldr	r3, [r4, #0]
   14852:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   14856:	6023      	str	r3, [r4, #0]
   14858:	e7a8      	b.n	147ac <gnss_interface_setopt+0x34>
   1485a:	2d02      	cmp	r5, #2
   1485c:	d1b9      	bne.n	147d2 <gnss_interface_setopt+0x5a>
   1485e:	2208      	movs	r2, #8
   14860:	881b      	ldrh	r3, [r3, #0]
   14862:	9202      	str	r2, [sp, #8]
   14864:	f8ad 300f 	strh.w	r3, [sp, #15]
   14868:	e7c7      	b.n	147fa <gnss_interface_setopt+0x82>
   1486a:	2d01      	cmp	r5, #1
   1486c:	d1b1      	bne.n	147d2 <gnss_interface_setopt+0x5a>
   1486e:	781b      	ldrb	r3, [r3, #0]
   14870:	2b01      	cmp	r3, #1
   14872:	d0c2      	beq.n	147fa <gnss_interface_setopt+0x82>
   14874:	e7ad      	b.n	147d2 <gnss_interface_setopt+0x5a>
   14876:	2d02      	cmp	r5, #2
   14878:	d1ab      	bne.n	147d2 <gnss_interface_setopt+0x5a>
   1487a:	2220      	movs	r2, #32
   1487c:	881b      	ldrh	r3, [r3, #0]
   1487e:	9202      	str	r2, [sp, #8]
   14880:	f8ad 3013 	strh.w	r3, [sp, #19]
   14884:	e7b9      	b.n	147fa <gnss_interface_setopt+0x82>
   14886:	2d01      	cmp	r5, #1
   14888:	d1a3      	bne.n	147d2 <gnss_interface_setopt+0x5a>
   1488a:	781b      	ldrb	r3, [r3, #0]
   1488c:	9502      	str	r5, [sp, #8]
   1488e:	f88d 300c 	strb.w	r3, [sp, #12]
   14892:	e7b2      	b.n	147fa <gnss_interface_setopt+0x82>
   14894:	2d01      	cmp	r5, #1
   14896:	d19c      	bne.n	147d2 <gnss_interface_setopt+0x5a>
   14898:	2202      	movs	r2, #2
   1489a:	781b      	ldrb	r3, [r3, #0]
   1489c:	9202      	str	r2, [sp, #8]
   1489e:	f88d 300d 	strb.w	r3, [sp, #13]
   148a2:	e7aa      	b.n	147fa <gnss_interface_setopt+0x82>
   148a4:	2d01      	cmp	r5, #1
   148a6:	d194      	bne.n	147d2 <gnss_interface_setopt+0x5a>
   148a8:	2240      	movs	r2, #64	; 0x40
   148aa:	781b      	ldrb	r3, [r3, #0]
   148ac:	9202      	str	r2, [sp, #8]
   148ae:	f88d 3015 	strb.w	r3, [sp, #21]
   148b2:	e7a2      	b.n	147fa <gnss_interface_setopt+0x82>
   148b4:	6822      	ldr	r2, [r4, #0]
   148b6:	b292      	uxth	r2, r2
   148b8:	2a02      	cmp	r2, #2
   148ba:	f47f af6d 	bne.w	14798 <gnss_interface_setopt+0x20>
   148be:	2d04      	cmp	r5, #4
   148c0:	d187      	bne.n	147d2 <gnss_interface_setopt+0x5a>
   148c2:	2201      	movs	r2, #1
   148c4:	681b      	ldr	r3, [r3, #0]
   148c6:	f88d 2008 	strb.w	r2, [sp, #8]
   148ca:	f8cd 3009 	str.w	r3, [sp, #9]
   148ce:	6823      	ldr	r3, [r4, #0]
   148d0:	0c1b      	lsrs	r3, r3, #16
   148d2:	041b      	lsls	r3, r3, #16
   148d4:	f043 0303 	orr.w	r3, r3, #3
   148d8:	6023      	str	r3, [r4, #0]
   148da:	f241 0004 	movw	r0, #4100	; 0x1004
   148de:	e78e      	b.n	147fe <gnss_interface_setopt+0x86>
   148e0:	6822      	ldr	r2, [r4, #0]
   148e2:	b292      	uxth	r2, r2
   148e4:	2a04      	cmp	r2, #4
   148e6:	d004      	beq.n	148f2 <gnss_interface_setopt+0x17a>
   148e8:	6822      	ldr	r2, [r4, #0]
   148ea:	b292      	uxth	r2, r2
   148ec:	2a02      	cmp	r2, #2
   148ee:	f47f af53 	bne.w	14798 <gnss_interface_setopt+0x20>
   148f2:	2200      	movs	r2, #0
   148f4:	2d04      	cmp	r5, #4
   148f6:	f88d 2008 	strb.w	r2, [sp, #8]
   148fa:	f47f af6a 	bne.w	147d2 <gnss_interface_setopt+0x5a>
   148fe:	681b      	ldr	r3, [r3, #0]
   14900:	f8cd 3009 	str.w	r3, [sp, #9]
   14904:	e7e9      	b.n	148da <gnss_interface_setopt+0x162>
   14906:	6823      	ldr	r3, [r4, #0]
   14908:	b29b      	uxth	r3, r3
   1490a:	2b04      	cmp	r3, #4
   1490c:	f47f af44 	bne.w	14798 <gnss_interface_setopt+0x20>
   14910:	2302      	movs	r3, #2
   14912:	f88d 3008 	strb.w	r3, [sp, #8]
   14916:	2300      	movs	r3, #0
   14918:	f88d 3009 	strb.w	r3, [sp, #9]
   1491c:	f88d 300a 	strb.w	r3, [sp, #10]
   14920:	f88d 300b 	strb.w	r3, [sp, #11]
   14924:	f88d 300c 	strb.w	r3, [sp, #12]
   14928:	e7d7      	b.n	148da <gnss_interface_setopt+0x162>
   1492a:	6823      	ldr	r3, [r4, #0]
   1492c:	b29b      	uxth	r3, r3
   1492e:	2b04      	cmp	r3, #4
   14930:	f47f af32 	bne.w	14798 <gnss_interface_setopt+0x20>
   14934:	2303      	movs	r3, #3
   14936:	e7ec      	b.n	14912 <gnss_interface_setopt+0x19a>
   14938:	6823      	ldr	r3, [r4, #0]
   1493a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1493e:	6023      	str	r3, [r4, #0]
   14940:	e72a      	b.n	14798 <gnss_interface_setopt+0x20>
   14942:	2e08      	cmp	r6, #8
   14944:	d184      	bne.n	14850 <gnss_interface_setopt+0xd8>
   14946:	4b05      	ldr	r3, [pc, #20]	; (1495c <gnss_interface_setopt+0x1e4>)
   14948:	6818      	ldr	r0, [r3, #0]
   1494a:	6803      	ldr	r3, [r0, #0]
   1494c:	691b      	ldr	r3, [r3, #16]
   1494e:	4798      	blx	r3
   14950:	e77e      	b.n	14850 <gnss_interface_setopt+0xd8>
   14952:	bf00      	nop
   14954:	20015344 	.word	0x20015344
   14958:	49765443 	.word	0x49765443
   1495c:	2001534c 	.word	0x2001534c
   14960:	2001458c 	.word	0x2001458c
   14964:	20015348 	.word	0x20015348

00014968 <gnss_interface_getopt>:
   14968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1496c:	461d      	mov	r5, r3
   1496e:	4b44      	ldr	r3, [pc, #272]	; (14a80 <gnss_interface_getopt+0x118>)
   14970:	b087      	sub	sp, #28
   14972:	681e      	ldr	r6, [r3, #0]
   14974:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   14976:	b2b6      	uxth	r6, r6
   14978:	2e02      	cmp	r6, #2
   1497a:	461e      	mov	r6, r3
   1497c:	d001      	beq.n	14982 <gnss_interface_getopt+0x1a>
   1497e:	200e      	movs	r0, #14
   14980:	e003      	b.n	1498a <gnss_interface_getopt+0x22>
   14982:	681f      	ldr	r7, [r3, #0]
   14984:	03ff      	lsls	r7, r7, #15
   14986:	d508      	bpl.n	1499a <gnss_interface_getopt+0x32>
   14988:	2005      	movs	r0, #5
   1498a:	f7fb fbe5 	bl	10158 <nrf_modem_os_errno_set>
   1498e:	f04f 34ff 	mov.w	r4, #4294967295
   14992:	4620      	mov	r0, r4
   14994:	b007      	add	sp, #28
   14996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1499a:	681b      	ldr	r3, [r3, #0]
   1499c:	01df      	lsls	r7, r3, #7
   1499e:	d501      	bpl.n	149a4 <gnss_interface_getopt+0x3c>
   149a0:	2073      	movs	r0, #115	; 0x73
   149a2:	e7f2      	b.n	1498a <gnss_interface_getopt+0x22>
   149a4:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   149a8:	d001      	beq.n	149ae <gnss_interface_getopt+0x46>
   149aa:	202a      	movs	r0, #42	; 0x2a
   149ac:	e7ed      	b.n	1498a <gnss_interface_getopt+0x22>
   149ae:	4b35      	ldr	r3, [pc, #212]	; (14a84 <gnss_interface_getopt+0x11c>)
   149b0:	4298      	cmp	r0, r3
   149b2:	d001      	beq.n	149b8 <gnss_interface_getopt+0x50>
   149b4:	2009      	movs	r0, #9
   149b6:	e7e8      	b.n	1498a <gnss_interface_getopt+0x22>
   149b8:	b105      	cbz	r5, 149bc <gnss_interface_getopt+0x54>
   149ba:	b90c      	cbnz	r4, 149c0 <gnss_interface_getopt+0x58>
   149bc:	2016      	movs	r0, #22
   149be:	e7e4      	b.n	1498a <gnss_interface_getopt+0x22>
   149c0:	1e57      	subs	r7, r2, #1
   149c2:	2f05      	cmp	r7, #5
   149c4:	d8fa      	bhi.n	149bc <gnss_interface_getopt+0x54>
   149c6:	e8df f007 	tbb	[pc, r7]
   149ca:	0303      	.short	0x0303
   149cc:	30300330 	.word	0x30300330
   149d0:	6823      	ldr	r3, [r4, #0]
   149d2:	2b02      	cmp	r3, #2
   149d4:	d1f2      	bne.n	149bc <gnss_interface_getopt+0x54>
   149d6:	6833      	ldr	r3, [r6, #0]
   149d8:	2212      	movs	r2, #18
   149da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   149de:	2100      	movs	r1, #0
   149e0:	a801      	add	r0, sp, #4
   149e2:	6033      	str	r3, [r6, #0]
   149e4:	f003 faa5 	bl	17f32 <memset>
   149e8:	2212      	movs	r2, #18
   149ea:	f241 1002 	movw	r0, #4354	; 0x1102
   149ee:	a901      	add	r1, sp, #4
   149f0:	f7ff fc2c 	bl	1424c <send_message>
   149f4:	4604      	mov	r4, r0
   149f6:	b9d8      	cbnz	r0, 14a30 <gnss_interface_getopt+0xc8>
   149f8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 14a8c <gnss_interface_getopt+0x124>
   149fc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 14a84 <gnss_interface_getopt+0x11c>
   14a00:	4649      	mov	r1, r9
   14a02:	4640      	mov	r0, r8
   14a04:	f7fb faf0 	bl	ffe8 <nrf_modem_os_timedwait>
   14a08:	6833      	ldr	r3, [r6, #0]
   14a0a:	01d9      	lsls	r1, r3, #7
   14a0c:	d4f8      	bmi.n	14a00 <gnss_interface_getopt+0x98>
   14a0e:	4a1e      	ldr	r2, [pc, #120]	; (14a88 <gnss_interface_getopt+0x120>)
   14a10:	6813      	ldr	r3, [r2, #0]
   14a12:	4690      	mov	r8, r2
   14a14:	b1db      	cbz	r3, 14a4e <gnss_interface_getopt+0xe6>
   14a16:	6832      	ldr	r2, [r6, #0]
   14a18:	0192      	lsls	r2, r2, #6
   14a1a:	d518      	bpl.n	14a4e <gnss_interface_getopt+0xe6>
   14a1c:	2f05      	cmp	r7, #5
   14a1e:	d828      	bhi.n	14a72 <gnss_interface_getopt+0x10a>
   14a20:	e8df f007 	tbb	[pc, r7]
   14a24:	201d1a0b 	.word	0x201d1a0b
   14a28:	2523      	.short	0x2523
   14a2a:	6823      	ldr	r3, [r4, #0]
   14a2c:	2b01      	cmp	r3, #1
   14a2e:	e7d1      	b.n	149d4 <gnss_interface_getopt+0x6c>
   14a30:	6833      	ldr	r3, [r6, #0]
   14a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   14a36:	6033      	str	r3, [r6, #0]
   14a38:	e7a1      	b.n	1497e <gnss_interface_getopt+0x16>
   14a3a:	f8b3 300f 	ldrh.w	r3, [r3, #15]
   14a3e:	802b      	strh	r3, [r5, #0]
   14a40:	f8d8 0000 	ldr.w	r0, [r8]
   14a44:	f004 fa63 	bl	18f0e <rpc_gnss_client_data_free>
   14a48:	2300      	movs	r3, #0
   14a4a:	f8c8 3000 	str.w	r3, [r8]
   14a4e:	6833      	ldr	r3, [r6, #0]
   14a50:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   14a54:	6033      	str	r3, [r6, #0]
   14a56:	e79c      	b.n	14992 <gnss_interface_getopt+0x2a>
   14a58:	f8b3 3011 	ldrh.w	r3, [r3, #17]
   14a5c:	e7ef      	b.n	14a3e <gnss_interface_getopt+0xd6>
   14a5e:	7b9b      	ldrb	r3, [r3, #14]
   14a60:	702b      	strb	r3, [r5, #0]
   14a62:	e7ed      	b.n	14a40 <gnss_interface_getopt+0xd8>
   14a64:	f8b3 3013 	ldrh.w	r3, [r3, #19]
   14a68:	e7e9      	b.n	14a3e <gnss_interface_getopt+0xd6>
   14a6a:	7b1b      	ldrb	r3, [r3, #12]
   14a6c:	e7f8      	b.n	14a60 <gnss_interface_getopt+0xf8>
   14a6e:	7b5b      	ldrb	r3, [r3, #13]
   14a70:	e7f6      	b.n	14a60 <gnss_interface_getopt+0xf8>
   14a72:	2016      	movs	r0, #22
   14a74:	f7fb fb70 	bl	10158 <nrf_modem_os_errno_set>
   14a78:	f04f 34ff 	mov.w	r4, #4294967295
   14a7c:	e7e0      	b.n	14a40 <gnss_interface_getopt+0xd8>
   14a7e:	bf00      	nop
   14a80:	20015344 	.word	0x20015344
   14a84:	49765443 	.word	0x49765443
   14a88:	20015348 	.word	0x20015348
   14a8c:	2001458c 	.word	0x2001458c

00014a90 <gnss_interface_init>:
   14a90:	2000      	movs	r0, #0
   14a92:	4a09      	ldr	r2, [pc, #36]	; (14ab8 <gnss_interface_init+0x28>)
   14a94:	b510      	push	{r4, lr}
   14a96:	6811      	ldr	r1, [r2, #0]
   14a98:	4c08      	ldr	r4, [pc, #32]	; (14abc <gnss_interface_init+0x2c>)
   14a9a:	4b09      	ldr	r3, [pc, #36]	; (14ac0 <gnss_interface_init+0x30>)
   14a9c:	4021      	ands	r1, r4
   14a9e:	8018      	strh	r0, [r3, #0]
   14aa0:	4b08      	ldr	r3, [pc, #32]	; (14ac4 <gnss_interface_init+0x34>)
   14aa2:	6011      	str	r1, [r2, #0]
   14aa4:	6018      	str	r0, [r3, #0]
   14aa6:	6813      	ldr	r3, [r2, #0]
   14aa8:	4023      	ands	r3, r4
   14aaa:	f043 0301 	orr.w	r3, r3, #1
   14aae:	6013      	str	r3, [r2, #0]
   14ab0:	2201      	movs	r2, #1
   14ab2:	4b05      	ldr	r3, [pc, #20]	; (14ac8 <gnss_interface_init+0x38>)
   14ab4:	701a      	strb	r2, [r3, #0]
   14ab6:	bd10      	pop	{r4, pc}
   14ab8:	20015344 	.word	0x20015344
   14abc:	ffff0000 	.word	0xffff0000
   14ac0:	20015c40 	.word	0x20015c40
   14ac4:	20015348 	.word	0x20015348
   14ac8:	200178e8 	.word	0x200178e8

00014acc <gnss_interface_open>:
   14acc:	4b16      	ldr	r3, [pc, #88]	; (14b28 <gnss_interface_open+0x5c>)
   14ace:	4608      	mov	r0, r1
   14ad0:	781b      	ldrb	r3, [r3, #0]
   14ad2:	b510      	push	{r4, lr}
   14ad4:	b92b      	cbnz	r3, 14ae2 <gnss_interface_open+0x16>
   14ad6:	2070      	movs	r0, #112	; 0x70
   14ad8:	f7fb fb3e 	bl	10158 <nrf_modem_os_errno_set>
   14adc:	f04f 30ff 	mov.w	r0, #4294967295
   14ae0:	e01f      	b.n	14b22 <gnss_interface_open+0x56>
   14ae2:	2902      	cmp	r1, #2
   14ae4:	d001      	beq.n	14aea <gnss_interface_open+0x1e>
   14ae6:	2029      	movs	r0, #41	; 0x29
   14ae8:	e7f6      	b.n	14ad8 <gnss_interface_open+0xc>
   14aea:	4c10      	ldr	r4, [pc, #64]	; (14b2c <gnss_interface_open+0x60>)
   14aec:	6823      	ldr	r3, [r4, #0]
   14aee:	b29b      	uxth	r3, r3
   14af0:	2b01      	cmp	r3, #1
   14af2:	d001      	beq.n	14af8 <gnss_interface_open+0x2c>
   14af4:	2005      	movs	r0, #5
   14af6:	e7ef      	b.n	14ad8 <gnss_interface_open+0xc>
   14af8:	6823      	ldr	r3, [r4, #0]
   14afa:	2200      	movs	r2, #0
   14afc:	0c1b      	lsrs	r3, r3, #16
   14afe:	041b      	lsls	r3, r3, #16
   14b00:	f043 0302 	orr.w	r3, r3, #2
   14b04:	490a      	ldr	r1, [pc, #40]	; (14b30 <gnss_interface_open+0x64>)
   14b06:	6023      	str	r3, [r4, #0]
   14b08:	f000 fd20 	bl	1554c <packet_handler_create>
   14b0c:	4a09      	ldr	r2, [pc, #36]	; (14b34 <gnss_interface_open+0x68>)
   14b0e:	6010      	str	r0, [r2, #0]
   14b10:	b140      	cbz	r0, 14b24 <gnss_interface_open+0x58>
   14b12:	6822      	ldr	r2, [r4, #0]
   14b14:	6803      	ldr	r3, [r0, #0]
   14b16:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   14b1a:	681b      	ldr	r3, [r3, #0]
   14b1c:	6022      	str	r2, [r4, #0]
   14b1e:	4798      	blx	r3
   14b20:	4805      	ldr	r0, [pc, #20]	; (14b38 <gnss_interface_open+0x6c>)
   14b22:	bd10      	pop	{r4, pc}
   14b24:	200e      	movs	r0, #14
   14b26:	e7d7      	b.n	14ad8 <gnss_interface_open+0xc>
   14b28:	200178e8 	.word	0x200178e8
   14b2c:	20015344 	.word	0x20015344
   14b30:	00019b81 	.word	0x00019b81
   14b34:	2001534c 	.word	0x2001534c
   14b38:	49765443 	.word	0x49765443

00014b3c <gnss_interface_close>:
   14b3c:	b530      	push	{r4, r5, lr}
   14b3e:	4b14      	ldr	r3, [pc, #80]	; (14b90 <gnss_interface_close+0x54>)
   14b40:	b085      	sub	sp, #20
   14b42:	4298      	cmp	r0, r3
   14b44:	d006      	beq.n	14b54 <gnss_interface_close+0x18>
   14b46:	2009      	movs	r0, #9
   14b48:	f7fb fb06 	bl	10158 <nrf_modem_os_errno_set>
   14b4c:	f04f 30ff 	mov.w	r0, #4294967295
   14b50:	b005      	add	sp, #20
   14b52:	bd30      	pop	{r4, r5, pc}
   14b54:	4c0f      	ldr	r4, [pc, #60]	; (14b94 <gnss_interface_close+0x58>)
   14b56:	6823      	ldr	r3, [r4, #0]
   14b58:	b29b      	uxth	r3, r3
   14b5a:	2b04      	cmp	r3, #4
   14b5c:	d108      	bne.n	14b70 <gnss_interface_close+0x34>
   14b5e:	2200      	movs	r2, #0
   14b60:	9300      	str	r3, [sp, #0]
   14b62:	9203      	str	r2, [sp, #12]
   14b64:	f44f 7101 	mov.w	r1, #516	; 0x204
   14b68:	2208      	movs	r2, #8
   14b6a:	ab03      	add	r3, sp, #12
   14b6c:	f005 fae3 	bl	1a136 <nrf_setsockopt>
   14b70:	4d09      	ldr	r5, [pc, #36]	; (14b98 <gnss_interface_close+0x5c>)
   14b72:	6828      	ldr	r0, [r5, #0]
   14b74:	b118      	cbz	r0, 14b7e <gnss_interface_close+0x42>
   14b76:	f005 f9aa 	bl	19ece <packet_handler_delete>
   14b7a:	2300      	movs	r3, #0
   14b7c:	602b      	str	r3, [r5, #0]
   14b7e:	6823      	ldr	r3, [r4, #0]
   14b80:	2000      	movs	r0, #0
   14b82:	0c1b      	lsrs	r3, r3, #16
   14b84:	041b      	lsls	r3, r3, #16
   14b86:	f043 0301 	orr.w	r3, r3, #1
   14b8a:	6023      	str	r3, [r4, #0]
   14b8c:	e7e0      	b.n	14b50 <gnss_interface_close+0x14>
   14b8e:	bf00      	nop
   14b90:	49765443 	.word	0x49765443
   14b94:	20015344 	.word	0x20015344
   14b98:	2001534c 	.word	0x2001534c

00014b9c <handle_verify_and_covert>:
   14b9c:	4a0b      	ldr	r2, [pc, #44]	; (14bcc <handle_verify_and_covert+0x30>)
   14b9e:	0c03      	lsrs	r3, r0, #16
   14ba0:	041b      	lsls	r3, r3, #16
   14ba2:	4293      	cmp	r3, r2
   14ba4:	d10f      	bne.n	14bc6 <handle_verify_and_covert+0x2a>
   14ba6:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   14baa:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   14bae:	2809      	cmp	r0, #9
   14bb0:	dc09      	bgt.n	14bc6 <handle_verify_and_covert+0x2a>
   14bb2:	4b07      	ldr	r3, [pc, #28]	; (14bd0 <handle_verify_and_covert+0x34>)
   14bb4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   14bb8:	b12b      	cbz	r3, 14bc6 <handle_verify_and_covert+0x2a>
   14bba:	689b      	ldr	r3, [r3, #8]
   14bbc:	2b00      	cmp	r3, #0
   14bbe:	bf08      	it	eq
   14bc0:	f06f 0008 	mvneq.w	r0, #8
   14bc4:	4770      	bx	lr
   14bc6:	f06f 0008 	mvn.w	r0, #8
   14bca:	4770      	bx	lr
   14bcc:	789a0000 	.word	0x789a0000
   14bd0:	20015354 	.word	0x20015354

00014bd4 <command_write>:
   14bd4:	4b0c      	ldr	r3, [pc, #48]	; (14c08 <command_write+0x34>)
   14bd6:	b513      	push	{r0, r1, r4, lr}
   14bd8:	480c      	ldr	r0, [pc, #48]	; (14c0c <command_write+0x38>)
   14bda:	681c      	ldr	r4, [r3, #0]
   14bdc:	f003 f943 	bl	17e66 <strlen>
   14be0:	2300      	movs	r3, #0
   14be2:	4602      	mov	r2, r0
   14be4:	e9cd 3300 	strd	r3, r3, [sp]
   14be8:	4908      	ldr	r1, [pc, #32]	; (14c0c <command_write+0x38>)
   14bea:	4620      	mov	r0, r4
   14bec:	f004 febc 	bl	19968 <at_interface_write>
   14bf0:	4604      	mov	r4, r0
   14bf2:	4806      	ldr	r0, [pc, #24]	; (14c0c <command_write+0x38>)
   14bf4:	f003 f937 	bl	17e66 <strlen>
   14bf8:	42a0      	cmp	r0, r4
   14bfa:	bf14      	ite	ne
   14bfc:	f06f 0004 	mvnne.w	r0, #4
   14c00:	2000      	moveq	r0, #0
   14c02:	b002      	add	sp, #8
   14c04:	bd10      	pop	{r4, pc}
   14c06:	bf00      	nop
   14c08:	20015350 	.word	0x20015350
   14c0c:	200178ea 	.word	0x200178ea

00014c10 <event_wait>:
   14c10:	2300      	movs	r3, #0
   14c12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14c16:	e9cd 3300 	strd	r3, r3, [sp]
   14c1a:	4606      	mov	r6, r0
   14c1c:	4818      	ldr	r0, [pc, #96]	; (14c80 <event_wait+0x70>)
   14c1e:	460d      	mov	r5, r1
   14c20:	f44f 7280 	mov.w	r2, #256	; 0x100
   14c24:	4917      	ldr	r1, [pc, #92]	; (14c84 <event_wait+0x74>)
   14c26:	6800      	ldr	r0, [r0, #0]
   14c28:	f004 ff08 	bl	19a3c <at_interface_read>
   14c2c:	4c16      	ldr	r4, [pc, #88]	; (14c88 <event_wait+0x78>)
   14c2e:	4607      	mov	r7, r0
   14c30:	f854 8035 	ldr.w	r8, [r4, r5, lsl #3]
   14c34:	4640      	mov	r0, r8
   14c36:	f003 f916 	bl	17e66 <strlen>
   14c3a:	4287      	cmp	r7, r0
   14c3c:	4602      	mov	r2, r0
   14c3e:	db0d      	blt.n	14c5c <event_wait+0x4c>
   14c40:	4640      	mov	r0, r8
   14c42:	4910      	ldr	r1, [pc, #64]	; (14c84 <event_wait+0x74>)
   14c44:	f003 f92b 	bl	17e9e <strncmp>
   14c48:	b940      	cbnz	r0, 14c5c <event_wait+0x4c>
   14c4a:	4630      	mov	r0, r6
   14c4c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   14c50:	684b      	ldr	r3, [r1, #4]
   14c52:	490c      	ldr	r1, [pc, #48]	; (14c84 <event_wait+0x74>)
   14c54:	b002      	add	sp, #8
   14c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14c5a:	4718      	bx	r3
   14c5c:	480b      	ldr	r0, [pc, #44]	; (14c8c <event_wait+0x7c>)
   14c5e:	f003 f902 	bl	17e66 <strlen>
   14c62:	4908      	ldr	r1, [pc, #32]	; (14c84 <event_wait+0x74>)
   14c64:	4602      	mov	r2, r0
   14c66:	4809      	ldr	r0, [pc, #36]	; (14c8c <event_wait+0x7c>)
   14c68:	f003 f919 	bl	17e9e <strncmp>
   14c6c:	2800      	cmp	r0, #0
   14c6e:	bf14      	ite	ne
   14c70:	f06f 0004 	mvnne.w	r0, #4
   14c74:	f06f 0007 	mvneq.w	r0, #7
   14c78:	b002      	add	sp, #8
   14c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c7e:	bf00      	nop
   14c80:	20015350 	.word	0x20015350
   14c84:	200178ea 	.word	0x200178ea
   14c88:	0001afd8 	.word	0x0001afd8
   14c8c:	0001b587 	.word	0x0001b587

00014c90 <pdn_state_get_parser>:
   14c90:	2300      	movs	r3, #0
   14c92:	b530      	push	{r4, r5, lr}
   14c94:	4605      	mov	r5, r0
   14c96:	460c      	mov	r4, r1
   14c98:	b085      	sub	sp, #20
   14c9a:	4608      	mov	r0, r1
   14c9c:	e9cd 3300 	strd	r3, r3, [sp]
   14ca0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   14ca4:	f004 ff7a 	bl	19b9c <spaces_remove>
   14ca8:	4b08      	ldr	r3, [pc, #32]	; (14ccc <pdn_state_get_parser+0x3c>)
   14caa:	4a09      	ldr	r2, [pc, #36]	; (14cd0 <pdn_state_get_parser+0x40>)
   14cac:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   14cb0:	2110      	movs	r1, #16
   14cb2:	681b      	ldr	r3, [r3, #0]
   14cb4:	4668      	mov	r0, sp
   14cb6:	f7fa fcad 	bl	f614 <snprintf>
   14cba:	4669      	mov	r1, sp
   14cbc:	4620      	mov	r0, r4
   14cbe:	f003 f891 	bl	17de4 <strstr>
   14cc2:	3800      	subs	r0, #0
   14cc4:	bf18      	it	ne
   14cc6:	2001      	movne	r0, #1
   14cc8:	b005      	add	sp, #20
   14cca:	bd30      	pop	{r4, r5, pc}
   14ccc:	20015354 	.word	0x20015354
   14cd0:	0001b58d 	.word	0x0001b58d

00014cd4 <pdn_id_get_parser>:
   14cd4:	b510      	push	{r4, lr}
   14cd6:	4604      	mov	r4, r0
   14cd8:	4608      	mov	r0, r1
   14cda:	f004 ff5f 	bl	19b9c <spaces_remove>
   14cde:	213a      	movs	r1, #58	; 0x3a
   14ce0:	f003 f8b3 	bl	17e4a <strchr>
   14ce4:	b130      	cbz	r0, 14cf4 <pdn_id_get_parser+0x20>
   14ce6:	3001      	adds	r0, #1
   14ce8:	f002 ff67 	bl	17bba <atoi>
   14cec:	4b02      	ldr	r3, [pc, #8]	; (14cf8 <pdn_id_get_parser+0x24>)
   14cee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14cf2:	6058      	str	r0, [r3, #4]
   14cf4:	2000      	movs	r0, #0
   14cf6:	bd10      	pop	{r4, pc}
   14cf8:	20015354 	.word	0x20015354

00014cfc <context_create_parser>:
   14cfc:	b510      	push	{r4, lr}
   14cfe:	4604      	mov	r4, r0
   14d00:	4608      	mov	r0, r1
   14d02:	f004 ff4b 	bl	19b9c <spaces_remove>
   14d06:	213a      	movs	r1, #58	; 0x3a
   14d08:	f003 f89f 	bl	17e4a <strchr>
   14d0c:	b130      	cbz	r0, 14d1c <context_create_parser+0x20>
   14d0e:	4b04      	ldr	r3, [pc, #16]	; (14d20 <context_create_parser+0x24>)
   14d10:	3001      	adds	r0, #1
   14d12:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   14d16:	f002 ff50 	bl	17bba <atoi>
   14d1a:	6020      	str	r0, [r4, #0]
   14d1c:	2000      	movs	r0, #0
   14d1e:	bd10      	pop	{r4, pc}
   14d20:	20015354 	.word	0x20015354

00014d24 <connection_free>:
   14d24:	b538      	push	{r3, r4, r5, lr}
   14d26:	4d05      	ldr	r5, [pc, #20]	; (14d3c <connection_free+0x18>)
   14d28:	4604      	mov	r4, r0
   14d2a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   14d2e:	f7fb fba3 	bl	10478 <nrf_modem_os_free>
   14d32:	2300      	movs	r3, #0
   14d34:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   14d38:	bd38      	pop	{r3, r4, r5, pc}
   14d3a:	bf00      	nop
   14d3c:	20015354 	.word	0x20015354

00014d40 <pdn_id_get>:
   14d40:	b538      	push	{r3, r4, r5, lr}
   14d42:	4d0e      	ldr	r5, [pc, #56]	; (14d7c <pdn_id_get+0x3c>)
   14d44:	4604      	mov	r4, r0
   14d46:	f44f 7180 	mov.w	r1, #256	; 0x100
   14d4a:	4b0d      	ldr	r3, [pc, #52]	; (14d80 <pdn_id_get+0x40>)
   14d4c:	4a0d      	ldr	r2, [pc, #52]	; (14d84 <pdn_id_get+0x44>)
   14d4e:	4628      	mov	r0, r5
   14d50:	f7fa fc60 	bl	f614 <snprintf>
   14d54:	4b0c      	ldr	r3, [pc, #48]	; (14d88 <pdn_id_get+0x48>)
   14d56:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   14d5a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14d5e:	4a0b      	ldr	r2, [pc, #44]	; (14d8c <pdn_id_get+0x4c>)
   14d60:	681b      	ldr	r3, [r3, #0]
   14d62:	4428      	add	r0, r5
   14d64:	f7fa fc56 	bl	f614 <snprintf>
   14d68:	f7ff ff34 	bl	14bd4 <command_write>
   14d6c:	b928      	cbnz	r0, 14d7a <pdn_id_get+0x3a>
   14d6e:	4620      	mov	r0, r4
   14d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14d74:	2102      	movs	r1, #2
   14d76:	f7ff bf4b 	b.w	14c10 <event_wait>
   14d7a:	bd38      	pop	{r3, r4, r5, pc}
   14d7c:	200178ea 	.word	0x200178ea
   14d80:	0001b599 	.word	0x0001b599
   14d84:	0001b405 	.word	0x0001b405
   14d88:	20015354 	.word	0x20015354
   14d8c:	0001b5a7 	.word	0x0001b5a7

00014d90 <pdn_interface_init>:
   14d90:	b538      	push	{r3, r4, r5, lr}
   14d92:	f04f 34ff 	mov.w	r4, #4294967295
   14d96:	4d0b      	ldr	r5, [pc, #44]	; (14dc4 <pdn_interface_init+0x34>)
   14d98:	2228      	movs	r2, #40	; 0x28
   14d9a:	2100      	movs	r1, #0
   14d9c:	480a      	ldr	r0, [pc, #40]	; (14dc8 <pdn_interface_init+0x38>)
   14d9e:	602c      	str	r4, [r5, #0]
   14da0:	f003 f8c7 	bl	17f32 <memset>
   14da4:	f240 2201 	movw	r2, #513	; 0x201
   14da8:	2102      	movs	r1, #2
   14daa:	2066      	movs	r0, #102	; 0x66
   14dac:	f7ff f86c 	bl	13e88 <at_interface_open>
   14db0:	2800      	cmp	r0, #0
   14db2:	bfa4      	itt	ge
   14db4:	2201      	movge	r2, #1
   14db6:	4b05      	ldrge	r3, [pc, #20]	; (14dcc <pdn_interface_init+0x3c>)
   14db8:	6028      	str	r0, [r5, #0]
   14dba:	bfa6      	itte	ge
   14dbc:	701a      	strbge	r2, [r3, #0]
   14dbe:	2000      	movge	r0, #0
   14dc0:	4620      	movlt	r0, r4
   14dc2:	bd38      	pop	{r3, r4, r5, pc}
   14dc4:	20015350 	.word	0x20015350
   14dc8:	20015354 	.word	0x20015354
   14dcc:	200178e9 	.word	0x200178e9

00014dd0 <pdn_interface_open>:
   14dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14dd2:	4b28      	ldr	r3, [pc, #160]	; (14e74 <pdn_interface_open+0xa4>)
   14dd4:	781b      	ldrb	r3, [r3, #0]
   14dd6:	b92b      	cbnz	r3, 14de4 <pdn_interface_open+0x14>
   14dd8:	2070      	movs	r0, #112	; 0x70
   14dda:	f7fb f9bd 	bl	10158 <nrf_modem_os_errno_set>
   14dde:	f04f 30ff 	mov.w	r0, #4294967295
   14de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14de4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   14de8:	d141      	bne.n	14e6e <pdn_interface_open+0x9e>
   14dea:	4b23      	ldr	r3, [pc, #140]	; (14e78 <pdn_interface_open+0xa8>)
   14dec:	2500      	movs	r5, #0
   14dee:	461e      	mov	r6, r3
   14df0:	f853 4b04 	ldr.w	r4, [r3], #4
   14df4:	bb24      	cbnz	r4, 14e40 <pdn_interface_open+0x70>
   14df6:	2020      	movs	r0, #32
   14df8:	f7fb fb2e 	bl	10458 <nrf_modem_os_alloc>
   14dfc:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
   14e00:	b308      	cbz	r0, 14e46 <pdn_interface_open+0x76>
   14e02:	4621      	mov	r1, r4
   14e04:	2220      	movs	r2, #32
   14e06:	f003 f894 	bl	17f32 <memset>
   14e0a:	2203      	movs	r2, #3
   14e0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   14e10:	2701      	movs	r7, #1
   14e12:	60da      	str	r2, [r3, #12]
   14e14:	f04f 32ff 	mov.w	r2, #4294967295
   14e18:	f44f 7180 	mov.w	r1, #256	; 0x100
   14e1c:	605a      	str	r2, [r3, #4]
   14e1e:	609f      	str	r7, [r3, #8]
   14e20:	4a16      	ldr	r2, [pc, #88]	; (14e7c <pdn_interface_open+0xac>)
   14e22:	4b17      	ldr	r3, [pc, #92]	; (14e80 <pdn_interface_open+0xb0>)
   14e24:	4817      	ldr	r0, [pc, #92]	; (14e84 <pdn_interface_open+0xb4>)
   14e26:	f7fa fbf5 	bl	f614 <snprintf>
   14e2a:	f7ff fed3 	bl	14bd4 <command_write>
   14e2e:	4604      	mov	r4, r0
   14e30:	b160      	cbz	r0, 14e4c <pdn_interface_open+0x7c>
   14e32:	4628      	mov	r0, r5
   14e34:	f7ff ff76 	bl	14d24 <connection_free>
   14e38:	2c00      	cmp	r4, #0
   14e3a:	da13      	bge.n	14e64 <pdn_interface_open+0x94>
   14e3c:	4260      	negs	r0, r4
   14e3e:	e7cc      	b.n	14dda <pdn_interface_open+0xa>
   14e40:	3501      	adds	r5, #1
   14e42:	2d0a      	cmp	r5, #10
   14e44:	d1d4      	bne.n	14df0 <pdn_interface_open+0x20>
   14e46:	f06f 040b 	mvn.w	r4, #11
   14e4a:	e7f7      	b.n	14e3c <pdn_interface_open+0x6c>
   14e4c:	4639      	mov	r1, r7
   14e4e:	4628      	mov	r0, r5
   14e50:	f7ff fede 	bl	14c10 <event_wait>
   14e54:	4604      	mov	r4, r0
   14e56:	2800      	cmp	r0, #0
   14e58:	d1eb      	bne.n	14e32 <pdn_interface_open+0x62>
   14e5a:	2202      	movs	r2, #2
   14e5c:	462c      	mov	r4, r5
   14e5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   14e62:	609a      	str	r2, [r3, #8]
   14e64:	f044 40f1 	orr.w	r0, r4, #2021654528	; 0x78800000
   14e68:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   14e6c:	e7b9      	b.n	14de2 <pdn_interface_open+0x12>
   14e6e:	2029      	movs	r0, #41	; 0x29
   14e70:	e7b3      	b.n	14dda <pdn_interface_open+0xa>
   14e72:	bf00      	nop
   14e74:	200178e9 	.word	0x200178e9
   14e78:	20015354 	.word	0x20015354
   14e7c:	0001b405 	.word	0x0001b405
   14e80:	0001b5aa 	.word	0x0001b5aa
   14e84:	200178ea 	.word	0x200178ea

00014e88 <pdn_interface_connect>:
   14e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14e8c:	4691      	mov	r9, r2
   14e8e:	468a      	mov	sl, r1
   14e90:	b109      	cbz	r1, 14e96 <pdn_interface_connect+0xe>
   14e92:	2a64      	cmp	r2, #100	; 0x64
   14e94:	d905      	bls.n	14ea2 <pdn_interface_connect+0x1a>
   14e96:	2016      	movs	r0, #22
   14e98:	f7fb f95e 	bl	10158 <nrf_modem_os_errno_set>
   14e9c:	f04f 30ff 	mov.w	r0, #4294967295
   14ea0:	e0ec      	b.n	1507c <pdn_interface_connect+0x1f4>
   14ea2:	f7ff fe7b 	bl	14b9c <handle_verify_and_covert>
   14ea6:	1e04      	subs	r4, r0, #0
   14ea8:	da01      	bge.n	14eae <pdn_interface_connect+0x26>
   14eaa:	4260      	negs	r0, r4
   14eac:	e7f4      	b.n	14e98 <pdn_interface_connect+0x10>
   14eae:	4f76      	ldr	r7, [pc, #472]	; (15088 <pdn_interface_connect+0x200>)
   14eb0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   14eb4:	689b      	ldr	r3, [r3, #8]
   14eb6:	2b02      	cmp	r3, #2
   14eb8:	d001      	beq.n	14ebe <pdn_interface_connect+0x36>
   14eba:	2009      	movs	r0, #9
   14ebc:	e7ec      	b.n	14e98 <pdn_interface_connect+0x10>
   14ebe:	4e73      	ldr	r6, [pc, #460]	; (1508c <pdn_interface_connect+0x204>)
   14ec0:	f44f 7180 	mov.w	r1, #256	; 0x100
   14ec4:	4b72      	ldr	r3, [pc, #456]	; (15090 <pdn_interface_connect+0x208>)
   14ec6:	4a73      	ldr	r2, [pc, #460]	; (15094 <pdn_interface_connect+0x20c>)
   14ec8:	4630      	mov	r0, r6
   14eca:	f7fa fba3 	bl	f614 <snprintf>
   14ece:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   14ed2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   14ed6:	4605      	mov	r5, r0
   14ed8:	681b      	ldr	r3, [r3, #0]
   14eda:	4a6f      	ldr	r2, [pc, #444]	; (15098 <pdn_interface_connect+0x210>)
   14edc:	1830      	adds	r0, r6, r0
   14ede:	f7fa fb99 	bl	f614 <snprintf>
   14ee2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   14ee6:	4405      	add	r5, r0
   14ee8:	68db      	ldr	r3, [r3, #12]
   14eea:	46b0      	mov	r8, r6
   14eec:	f003 0203 	and.w	r2, r3, #3
   14ef0:	2a03      	cmp	r2, #3
   14ef2:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   14ef6:	eb06 0005 	add.w	r0, r6, r5
   14efa:	d159      	bne.n	14fb0 <pdn_interface_connect+0x128>
   14efc:	4b67      	ldr	r3, [pc, #412]	; (1509c <pdn_interface_connect+0x214>)
   14efe:	4a68      	ldr	r2, [pc, #416]	; (150a0 <pdn_interface_connect+0x218>)
   14f00:	f7fa fb88 	bl	f614 <snprintf>
   14f04:	f109 0303 	add.w	r3, r9, #3
   14f08:	4428      	add	r0, r5
   14f0a:	4403      	add	r3, r0
   14f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   14f10:	f300 80b6 	bgt.w	15080 <pdn_interface_connect+0x1f8>
   14f14:	2622      	movs	r6, #34	; 0x22
   14f16:	1c45      	adds	r5, r0, #1
   14f18:	464a      	mov	r2, r9
   14f1a:	f808 6000 	strb.w	r6, [r8, r0]
   14f1e:	4651      	mov	r1, sl
   14f20:	eb08 0005 	add.w	r0, r8, r5
   14f24:	f002 ff7e 	bl	17e24 <strncpy>
   14f28:	eb09 0305 	add.w	r3, r9, r5
   14f2c:	eb08 0203 	add.w	r2, r8, r3
   14f30:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   14f34:	b902      	cbnz	r2, 14f38 <pdn_interface_connect+0xb0>
   14f36:	3b01      	subs	r3, #1
   14f38:	2200      	movs	r2, #0
   14f3a:	f808 6003 	strb.w	r6, [r8, r3]
   14f3e:	4443      	add	r3, r8
   14f40:	705a      	strb	r2, [r3, #1]
   14f42:	f7ff fe47 	bl	14bd4 <command_write>
   14f46:	2800      	cmp	r0, #0
   14f48:	d176      	bne.n	15038 <pdn_interface_connect+0x1b0>
   14f4a:	4601      	mov	r1, r0
   14f4c:	4620      	mov	r0, r4
   14f4e:	f7ff fe5f 	bl	14c10 <event_wait>
   14f52:	2800      	cmp	r0, #0
   14f54:	d170      	bne.n	15038 <pdn_interface_connect+0x1b0>
   14f56:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   14f5a:	7c1b      	ldrb	r3, [r3, #16]
   14f5c:	bb6b      	cbnz	r3, 14fba <pdn_interface_connect+0x132>
   14f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
   14f62:	4b50      	ldr	r3, [pc, #320]	; (150a4 <pdn_interface_connect+0x21c>)
   14f64:	4a4b      	ldr	r2, [pc, #300]	; (15094 <pdn_interface_connect+0x20c>)
   14f66:	4849      	ldr	r0, [pc, #292]	; (1508c <pdn_interface_connect+0x204>)
   14f68:	f7fa fb54 	bl	f614 <snprintf>
   14f6c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   14f70:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   14f74:	681b      	ldr	r3, [r3, #0]
   14f76:	4a4c      	ldr	r2, [pc, #304]	; (150a8 <pdn_interface_connect+0x220>)
   14f78:	4440      	add	r0, r8
   14f7a:	f7fa fb4b 	bl	f614 <snprintf>
   14f7e:	f7ff fe29 	bl	14bd4 <command_write>
   14f82:	2800      	cmp	r0, #0
   14f84:	d158      	bne.n	15038 <pdn_interface_connect+0x1b0>
   14f86:	4601      	mov	r1, r0
   14f88:	4620      	mov	r0, r4
   14f8a:	f7ff fe41 	bl	14c10 <event_wait>
   14f8e:	2800      	cmp	r0, #0
   14f90:	d152      	bne.n	15038 <pdn_interface_connect+0x1b0>
   14f92:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   14f96:	f109 0320 	add.w	r3, r9, #32
   14f9a:	6950      	ldr	r0, [r2, #20]
   14f9c:	4403      	add	r3, r0
   14f9e:	6990      	ldr	r0, [r2, #24]
   14fa0:	4418      	add	r0, r3
   14fa2:	f7fb fa59 	bl	10458 <nrf_modem_os_alloc>
   14fa6:	4605      	mov	r5, r0
   14fa8:	2800      	cmp	r0, #0
   14faa:	d147      	bne.n	1503c <pdn_interface_connect+0x1b4>
   14fac:	200c      	movs	r0, #12
   14fae:	e773      	b.n	14e98 <pdn_interface_connect+0x10>
   14fb0:	079b      	lsls	r3, r3, #30
   14fb2:	bf4c      	ite	mi
   14fb4:	4b3d      	ldrmi	r3, [pc, #244]	; (150ac <pdn_interface_connect+0x224>)
   14fb6:	4b3e      	ldrpl	r3, [pc, #248]	; (150b0 <pdn_interface_connect+0x228>)
   14fb8:	e7a1      	b.n	14efe <pdn_interface_connect+0x76>
   14fba:	f44f 7180 	mov.w	r1, #256	; 0x100
   14fbe:	4b3d      	ldr	r3, [pc, #244]	; (150b4 <pdn_interface_connect+0x22c>)
   14fc0:	4a34      	ldr	r2, [pc, #208]	; (15094 <pdn_interface_connect+0x20c>)
   14fc2:	4832      	ldr	r0, [pc, #200]	; (1508c <pdn_interface_connect+0x204>)
   14fc4:	f7fa fb26 	bl	f614 <snprintf>
   14fc8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   14fcc:	4a32      	ldr	r2, [pc, #200]	; (15098 <pdn_interface_connect+0x210>)
   14fce:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   14fd2:	4606      	mov	r6, r0
   14fd4:	681b      	ldr	r3, [r3, #0]
   14fd6:	4440      	add	r0, r8
   14fd8:	f7fa fb1c 	bl	f614 <snprintf>
   14fdc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   14fe0:	4406      	add	r6, r0
   14fe2:	7c1b      	ldrb	r3, [r3, #16]
   14fe4:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   14fe8:	2b01      	cmp	r3, #1
   14fea:	bf0c      	ite	eq
   14fec:	4a32      	ldreq	r2, [pc, #200]	; (150b8 <pdn_interface_connect+0x230>)
   14fee:	4a33      	ldrne	r2, [pc, #204]	; (150bc <pdn_interface_connect+0x234>)
   14ff0:	eb08 0006 	add.w	r0, r8, r6
   14ff4:	f7fa fb0e 	bl	f614 <snprintf>
   14ff8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   14ffc:	4406      	add	r6, r0
   14ffe:	4a28      	ldr	r2, [pc, #160]	; (150a0 <pdn_interface_connect+0x218>)
   15000:	3320      	adds	r3, #32
   15002:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   15006:	eb08 0006 	add.w	r0, r8, r6
   1500a:	f7fa fb03 	bl	f614 <snprintf>
   1500e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   15012:	4430      	add	r0, r6
   15014:	695a      	ldr	r2, [r3, #20]
   15016:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1501a:	3220      	adds	r2, #32
   1501c:	4413      	add	r3, r2
   1501e:	4440      	add	r0, r8
   15020:	4a27      	ldr	r2, [pc, #156]	; (150c0 <pdn_interface_connect+0x238>)
   15022:	f7fa faf7 	bl	f614 <snprintf>
   15026:	f7ff fdd5 	bl	14bd4 <command_write>
   1502a:	b928      	cbnz	r0, 15038 <pdn_interface_connect+0x1b0>
   1502c:	4601      	mov	r1, r0
   1502e:	4620      	mov	r0, r4
   15030:	f7ff fdee 	bl	14c10 <event_wait>
   15034:	2800      	cmp	r0, #0
   15036:	d092      	beq.n	14f5e <pdn_interface_connect+0xd6>
   15038:	4240      	negs	r0, r0
   1503a:	e72d      	b.n	14e98 <pdn_interface_connect+0x10>
   1503c:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
   15040:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   15044:	441a      	add	r2, r3
   15046:	3220      	adds	r2, #32
   15048:	f002 ff48 	bl	17edc <memcpy>
   1504c:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   15050:	f7fb fa12 	bl	10478 <nrf_modem_os_free>
   15054:	2303      	movs	r3, #3
   15056:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   1505a:	60ab      	str	r3, [r5, #8]
   1505c:	e9d5 3005 	ldrd	r3, r0, [r5, #20]
   15060:	4403      	add	r3, r0
   15062:	3320      	adds	r3, #32
   15064:	464a      	mov	r2, r9
   15066:	4651      	mov	r1, sl
   15068:	f8c5 901c 	str.w	r9, [r5, #28]
   1506c:	18e8      	adds	r0, r5, r3
   1506e:	f002 ff35 	bl	17edc <memcpy>
   15072:	4620      	mov	r0, r4
   15074:	f7ff fe64 	bl	14d40 <pdn_id_get>
   15078:	2800      	cmp	r0, #0
   1507a:	d1dd      	bne.n	15038 <pdn_interface_connect+0x1b0>
   1507c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15080:	f04f 30ff 	mov.w	r0, #4294967295
   15084:	e7d8      	b.n	15038 <pdn_interface_connect+0x1b0>
   15086:	bf00      	nop
   15088:	20015354 	.word	0x20015354
   1508c:	200178ea 	.word	0x200178ea
   15090:	0001b5b6 	.word	0x0001b5b6
   15094:	0001b405 	.word	0x0001b405
   15098:	0001b5c2 	.word	0x0001b5c2
   1509c:	0001b5c6 	.word	0x0001b5c6
   150a0:	0001b5cd 	.word	0x0001b5cd
   150a4:	0001b5db 	.word	0x0001b5db
   150a8:	0001b5a7 	.word	0x0001b5a7
   150ac:	0001b5d3 	.word	0x0001b5d3
   150b0:	0001b5d8 	.word	0x0001b5d8
   150b4:	0001b5e7 	.word	0x0001b5e7
   150b8:	0001b5e4 	.word	0x0001b5e4
   150bc:	0001b5f2 	.word	0x0001b5f2
   150c0:	0001b5f5 	.word	0x0001b5f5

000150c4 <pdn_interface_close>:
   150c4:	b570      	push	{r4, r5, r6, lr}
   150c6:	f7ff fd69 	bl	14b9c <handle_verify_and_covert>
   150ca:	1e04      	subs	r4, r0, #0
   150cc:	da05      	bge.n	150da <pdn_interface_close+0x16>
   150ce:	4260      	negs	r0, r4
   150d0:	f7fb f842 	bl	10158 <nrf_modem_os_errno_set>
   150d4:	f04f 30ff 	mov.w	r0, #4294967295
   150d8:	bd70      	pop	{r4, r5, r6, pc}
   150da:	4d22      	ldr	r5, [pc, #136]	; (15164 <pdn_interface_close+0xa0>)
   150dc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   150e0:	689b      	ldr	r3, [r3, #8]
   150e2:	2b03      	cmp	r3, #3
   150e4:	d11b      	bne.n	1511e <pdn_interface_close+0x5a>
   150e6:	4e20      	ldr	r6, [pc, #128]	; (15168 <pdn_interface_close+0xa4>)
   150e8:	f44f 7180 	mov.w	r1, #256	; 0x100
   150ec:	4b1f      	ldr	r3, [pc, #124]	; (1516c <pdn_interface_close+0xa8>)
   150ee:	4a20      	ldr	r2, [pc, #128]	; (15170 <pdn_interface_close+0xac>)
   150f0:	4630      	mov	r0, r6
   150f2:	f7fa fa8f 	bl	f614 <snprintf>
   150f6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   150fa:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   150fe:	681b      	ldr	r3, [r3, #0]
   15100:	4a1c      	ldr	r2, [pc, #112]	; (15174 <pdn_interface_close+0xb0>)
   15102:	4430      	add	r0, r6
   15104:	f7fa fa86 	bl	f614 <snprintf>
   15108:	f7ff fd64 	bl	14bd4 <command_write>
   1510c:	4601      	mov	r1, r0
   1510e:	b910      	cbnz	r0, 15116 <pdn_interface_close+0x52>
   15110:	4620      	mov	r0, r4
   15112:	f7ff fd7d 	bl	14c10 <event_wait>
   15116:	2202      	movs	r2, #2
   15118:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1511c:	609a      	str	r2, [r3, #8]
   1511e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   15122:	689b      	ldr	r3, [r3, #8]
   15124:	2b02      	cmp	r3, #2
   15126:	d117      	bne.n	15158 <pdn_interface_close+0x94>
   15128:	4e0f      	ldr	r6, [pc, #60]	; (15168 <pdn_interface_close+0xa4>)
   1512a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1512e:	4b12      	ldr	r3, [pc, #72]	; (15178 <pdn_interface_close+0xb4>)
   15130:	4a0f      	ldr	r2, [pc, #60]	; (15170 <pdn_interface_close+0xac>)
   15132:	4630      	mov	r0, r6
   15134:	f7fa fa6e 	bl	f614 <snprintf>
   15138:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1513c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   15140:	681b      	ldr	r3, [r3, #0]
   15142:	4a0c      	ldr	r2, [pc, #48]	; (15174 <pdn_interface_close+0xb0>)
   15144:	4430      	add	r0, r6
   15146:	f7fa fa65 	bl	f614 <snprintf>
   1514a:	f7ff fd43 	bl	14bd4 <command_write>
   1514e:	4601      	mov	r1, r0
   15150:	b910      	cbnz	r0, 15158 <pdn_interface_close+0x94>
   15152:	4620      	mov	r0, r4
   15154:	f7ff fd5c 	bl	14c10 <event_wait>
   15158:	4620      	mov	r0, r4
   1515a:	f7ff fde3 	bl	14d24 <connection_free>
   1515e:	2000      	movs	r0, #0
   15160:	e7ba      	b.n	150d8 <pdn_interface_close+0x14>
   15162:	bf00      	nop
   15164:	20015354 	.word	0x20015354
   15168:	200178ea 	.word	0x200178ea
   1516c:	0001b5fa 	.word	0x0001b5fa
   15170:	0001b405 	.word	0x0001b405
   15174:	0001b5a7 	.word	0x0001b5a7
   15178:	0001b5b6 	.word	0x0001b5b6

0001517c <pdn_interface_setopt>:
   1517c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15180:	4614      	mov	r4, r2
   15182:	f240 2202 	movw	r2, #514	; 0x202
   15186:	4291      	cmp	r1, r2
   15188:	461e      	mov	r6, r3
   1518a:	9b08      	ldr	r3, [sp, #32]
   1518c:	d101      	bne.n	15192 <pdn_interface_setopt+0x16>
   1518e:	b106      	cbz	r6, 15192 <pdn_interface_setopt+0x16>
   15190:	b92b      	cbnz	r3, 1519e <pdn_interface_setopt+0x22>
   15192:	2016      	movs	r0, #22
   15194:	f7fa ffe0 	bl	10158 <nrf_modem_os_errno_set>
   15198:	f04f 30ff 	mov.w	r0, #4294967295
   1519c:	e067      	b.n	1526e <pdn_interface_setopt+0xf2>
   1519e:	f7ff fcfd 	bl	14b9c <handle_verify_and_covert>
   151a2:	1e05      	subs	r5, r0, #0
   151a4:	da01      	bge.n	151aa <pdn_interface_setopt+0x2e>
   151a6:	4268      	negs	r0, r5
   151a8:	e7f4      	b.n	15194 <pdn_interface_setopt+0x18>
   151aa:	2c01      	cmp	r4, #1
   151ac:	d005      	beq.n	151ba <pdn_interface_setopt+0x3e>
   151ae:	2c04      	cmp	r4, #4
   151b0:	d014      	beq.n	151dc <pdn_interface_setopt+0x60>
   151b2:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   151b6:	4240      	negs	r0, r0
   151b8:	e7ec      	b.n	15194 <pdn_interface_setopt+0x18>
   151ba:	4b32      	ldr	r3, [pc, #200]	; (15284 <pdn_interface_setopt+0x108>)
   151bc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   151c0:	689a      	ldr	r2, [r3, #8]
   151c2:	b14a      	cbz	r2, 151d8 <pdn_interface_setopt+0x5c>
   151c4:	689a      	ldr	r2, [r3, #8]
   151c6:	2a03      	cmp	r2, #3
   151c8:	d006      	beq.n	151d8 <pdn_interface_setopt+0x5c>
   151ca:	689b      	ldr	r3, [r3, #8]
   151cc:	2b04      	cmp	r3, #4
   151ce:	bf14      	ite	ne
   151d0:	2016      	movne	r0, #22
   151d2:	200e      	moveq	r0, #14
   151d4:	4240      	negs	r0, r0
   151d6:	e7ee      	b.n	151b6 <pdn_interface_setopt+0x3a>
   151d8:	200e      	movs	r0, #14
   151da:	e7fb      	b.n	151d4 <pdn_interface_setopt+0x58>
   151dc:	4f29      	ldr	r7, [pc, #164]	; (15284 <pdn_interface_setopt+0x108>)
   151de:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   151e2:	689a      	ldr	r2, [r3, #8]
   151e4:	2a00      	cmp	r2, #0
   151e6:	d044      	beq.n	15272 <pdn_interface_setopt+0xf6>
   151e8:	689a      	ldr	r2, [r3, #8]
   151ea:	2a03      	cmp	r2, #3
   151ec:	d041      	beq.n	15272 <pdn_interface_setopt+0xf6>
   151ee:	689b      	ldr	r3, [r3, #8]
   151f0:	2b04      	cmp	r3, #4
   151f2:	d03e      	beq.n	15272 <pdn_interface_setopt+0xf6>
   151f4:	4630      	mov	r0, r6
   151f6:	f002 fe36 	bl	17e66 <strlen>
   151fa:	f106 0a64 	add.w	sl, r6, #100	; 0x64
   151fe:	f100 0801 	add.w	r8, r0, #1
   15202:	4650      	mov	r0, sl
   15204:	f002 fe2f 	bl	17e66 <strlen>
   15208:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
   1520c:	f100 0901 	add.w	r9, r0, #1
   15210:	3b01      	subs	r3, #1
   15212:	2b01      	cmp	r3, #1
   15214:	d830      	bhi.n	15278 <pdn_interface_setopt+0xfc>
   15216:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
   1521a:	d82d      	bhi.n	15278 <pdn_interface_setopt+0xfc>
   1521c:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
   15220:	d82a      	bhi.n	15278 <pdn_interface_setopt+0xfc>
   15222:	eb08 0009 	add.w	r0, r8, r9
   15226:	3020      	adds	r0, #32
   15228:	f7fb f916 	bl	10458 <nrf_modem_os_alloc>
   1522c:	4604      	mov	r4, r0
   1522e:	b330      	cbz	r0, 1527e <pdn_interface_setopt+0x102>
   15230:	2220      	movs	r2, #32
   15232:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
   15236:	f002 fe51 	bl	17edc <memcpy>
   1523a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   1523e:	f7fb f91b 	bl	10478 <nrf_modem_os_free>
   15242:	e9c4 8905 	strd	r8, r9, [r4, #20]
   15246:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
   1524a:	4641      	mov	r1, r8
   1524c:	4a0e      	ldr	r2, [pc, #56]	; (15288 <pdn_interface_setopt+0x10c>)
   1524e:	7423      	strb	r3, [r4, #16]
   15250:	f104 0020 	add.w	r0, r4, #32
   15254:	4633      	mov	r3, r6
   15256:	f7fa f9dd 	bl	f614 <snprintf>
   1525a:	3021      	adds	r0, #33	; 0x21
   1525c:	4653      	mov	r3, sl
   1525e:	4a0a      	ldr	r2, [pc, #40]	; (15288 <pdn_interface_setopt+0x10c>)
   15260:	69a1      	ldr	r1, [r4, #24]
   15262:	4420      	add	r0, r4
   15264:	f7fa f9d6 	bl	f614 <snprintf>
   15268:	2000      	movs	r0, #0
   1526a:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
   1526e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15272:	f06f 000d 	mvn.w	r0, #13
   15276:	e79e      	b.n	151b6 <pdn_interface_setopt+0x3a>
   15278:	f06f 0015 	mvn.w	r0, #21
   1527c:	e79b      	b.n	151b6 <pdn_interface_setopt+0x3a>
   1527e:	f06f 000b 	mvn.w	r0, #11
   15282:	e798      	b.n	151b6 <pdn_interface_setopt+0x3a>
   15284:	20015354 	.word	0x20015354
   15288:	0001b405 	.word	0x0001b405

0001528c <pdn_interface_getopt>:
   1528c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15290:	461e      	mov	r6, r3
   15292:	f240 2302 	movw	r3, #514	; 0x202
   15296:	4299      	cmp	r1, r3
   15298:	4690      	mov	r8, r2
   1529a:	9d06      	ldr	r5, [sp, #24]
   1529c:	d101      	bne.n	152a2 <pdn_interface_getopt+0x16>
   1529e:	b106      	cbz	r6, 152a2 <pdn_interface_getopt+0x16>
   152a0:	b92d      	cbnz	r5, 152ae <pdn_interface_getopt+0x22>
   152a2:	2016      	movs	r0, #22
   152a4:	f7fa ff58 	bl	10158 <nrf_modem_os_errno_set>
   152a8:	f04f 34ff 	mov.w	r4, #4294967295
   152ac:	e02d      	b.n	1530a <pdn_interface_getopt+0x7e>
   152ae:	f7ff fc75 	bl	14b9c <handle_verify_and_covert>
   152b2:	1e07      	subs	r7, r0, #0
   152b4:	da01      	bge.n	152ba <pdn_interface_getopt+0x2e>
   152b6:	4278      	negs	r0, r7
   152b8:	e7f4      	b.n	152a4 <pdn_interface_getopt+0x18>
   152ba:	f1b8 0f02 	cmp.w	r8, #2
   152be:	d027      	beq.n	15310 <pdn_interface_getopt+0x84>
   152c0:	f1b8 0f03 	cmp.w	r8, #3
   152c4:	d02e      	beq.n	15324 <pdn_interface_getopt+0x98>
   152c6:	f1b8 0f01 	cmp.w	r8, #1
   152ca:	d142      	bne.n	15352 <pdn_interface_getopt+0xc6>
   152cc:	4b28      	ldr	r3, [pc, #160]	; (15370 <pdn_interface_getopt+0xe4>)
   152ce:	6829      	ldr	r1, [r5, #0]
   152d0:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   152d4:	689a      	ldr	r2, [r3, #8]
   152d6:	2a00      	cmp	r2, #0
   152d8:	d03f      	beq.n	1535a <pdn_interface_getopt+0xce>
   152da:	689a      	ldr	r2, [r3, #8]
   152dc:	2a04      	cmp	r2, #4
   152de:	d03c      	beq.n	1535a <pdn_interface_getopt+0xce>
   152e0:	2907      	cmp	r1, #7
   152e2:	f001 0203 	and.w	r2, r1, #3
   152e6:	d93b      	bls.n	15360 <pdn_interface_getopt+0xd4>
   152e8:	2a00      	cmp	r2, #0
   152ea:	d139      	bne.n	15360 <pdn_interface_getopt+0xd4>
   152ec:	68db      	ldr	r3, [r3, #12]
   152ee:	0799      	lsls	r1, r3, #30
   152f0:	bf42      	ittt	mi
   152f2:	220a      	movmi	r2, #10
   152f4:	6032      	strmi	r2, [r6, #0]
   152f6:	2201      	movmi	r2, #1
   152f8:	07db      	lsls	r3, r3, #31
   152fa:	bf42      	ittt	mi
   152fc:	2302      	movmi	r3, #2
   152fe:	f846 3022 	strmi.w	r3, [r6, r2, lsl #2]
   15302:	3201      	addmi	r2, #1
   15304:	0092      	lsls	r2, r2, #2
   15306:	602a      	str	r2, [r5, #0]
   15308:	2400      	movs	r4, #0
   1530a:	4620      	mov	r0, r4
   1530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15310:	682b      	ldr	r3, [r5, #0]
   15312:	b343      	cbz	r3, 15366 <pdn_interface_getopt+0xda>
   15314:	4b16      	ldr	r3, [pc, #88]	; (15370 <pdn_interface_getopt+0xe4>)
   15316:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   1531a:	681b      	ldr	r3, [r3, #0]
   1531c:	7033      	strb	r3, [r6, #0]
   1531e:	2301      	movs	r3, #1
   15320:	602b      	str	r3, [r5, #0]
   15322:	e7f1      	b.n	15308 <pdn_interface_getopt+0x7c>
   15324:	682b      	ldr	r3, [r5, #0]
   15326:	b1f3      	cbz	r3, 15366 <pdn_interface_getopt+0xda>
   15328:	f44f 7180 	mov.w	r1, #256	; 0x100
   1532c:	4b11      	ldr	r3, [pc, #68]	; (15374 <pdn_interface_getopt+0xe8>)
   1532e:	4a12      	ldr	r2, [pc, #72]	; (15378 <pdn_interface_getopt+0xec>)
   15330:	4812      	ldr	r0, [pc, #72]	; (1537c <pdn_interface_getopt+0xf0>)
   15332:	f7fa f96f 	bl	f614 <snprintf>
   15336:	f7ff fc4d 	bl	14bd4 <command_write>
   1533a:	4604      	mov	r4, r0
   1533c:	b958      	cbnz	r0, 15356 <pdn_interface_getopt+0xca>
   1533e:	4641      	mov	r1, r8
   15340:	4638      	mov	r0, r7
   15342:	f7ff fc65 	bl	14c10 <event_wait>
   15346:	2800      	cmp	r0, #0
   15348:	db0f      	blt.n	1536a <pdn_interface_getopt+0xde>
   1534a:	2301      	movs	r3, #1
   1534c:	7030      	strb	r0, [r6, #0]
   1534e:	602b      	str	r3, [r5, #0]
   15350:	e7db      	b.n	1530a <pdn_interface_getopt+0x7e>
   15352:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   15356:	4260      	negs	r0, r4
   15358:	e7a4      	b.n	152a4 <pdn_interface_getopt+0x18>
   1535a:	f06f 040d 	mvn.w	r4, #13
   1535e:	e7fa      	b.n	15356 <pdn_interface_getopt+0xca>
   15360:	f06f 0415 	mvn.w	r4, #21
   15364:	e7f7      	b.n	15356 <pdn_interface_getopt+0xca>
   15366:	2416      	movs	r4, #22
   15368:	e7f5      	b.n	15356 <pdn_interface_getopt+0xca>
   1536a:	4604      	mov	r4, r0
   1536c:	e7f3      	b.n	15356 <pdn_interface_getopt+0xca>
   1536e:	bf00      	nop
   15370:	20015354 	.word	0x20015354
   15374:	0001b606 	.word	0x0001b606
   15378:	0001b405 	.word	0x0001b405
   1537c:	200178ea 	.word	0x200178ea

00015380 <pdn_interface_pdn_id_get>:
   15380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15384:	4680      	mov	r8, r0
   15386:	460e      	mov	r6, r1
   15388:	2900      	cmp	r1, #0
   1538a:	d043      	beq.n	15414 <pdn_interface_pdn_id_get+0x94>
   1538c:	4c22      	ldr	r4, [pc, #136]	; (15418 <pdn_interface_pdn_id_get+0x98>)
   1538e:	2500      	movs	r5, #0
   15390:	4627      	mov	r7, r4
   15392:	f854 3b04 	ldr.w	r3, [r4], #4
   15396:	2b00      	cmp	r3, #0
   15398:	d039      	beq.n	1540e <pdn_interface_pdn_id_get+0x8e>
   1539a:	689b      	ldr	r3, [r3, #8]
   1539c:	2b03      	cmp	r3, #3
   1539e:	d136      	bne.n	1540e <pdn_interface_pdn_id_get+0x8e>
   153a0:	4630      	mov	r0, r6
   153a2:	f002 fd60 	bl	17e66 <strlen>
   153a6:	f854 1c04 	ldr.w	r1, [r4, #-4]
   153aa:	69ca      	ldr	r2, [r1, #28]
   153ac:	4282      	cmp	r2, r0
   153ae:	d12e      	bne.n	1540e <pdn_interface_pdn_id_get+0x8e>
   153b0:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
   153b4:	4403      	add	r3, r0
   153b6:	3320      	adds	r3, #32
   153b8:	4630      	mov	r0, r6
   153ba:	4419      	add	r1, r3
   153bc:	f002 fd6f 	bl	17e9e <strncmp>
   153c0:	bb28      	cbnz	r0, 1540e <pdn_interface_pdn_id_get+0x8e>
   153c2:	f1b8 0f0a 	cmp.w	r8, #10
   153c6:	d114      	bne.n	153f2 <pdn_interface_pdn_id_get+0x72>
   153c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   153cc:	68db      	ldr	r3, [r3, #12]
   153ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
   153d2:	b1e3      	cbz	r3, 1540e <pdn_interface_pdn_id_get+0x8e>
   153d4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   153d8:	685c      	ldr	r4, [r3, #4]
   153da:	3401      	adds	r4, #1
   153dc:	d112      	bne.n	15404 <pdn_interface_pdn_id_get+0x84>
   153de:	4628      	mov	r0, r5
   153e0:	f7ff fcae 	bl	14d40 <pdn_id_get>
   153e4:	b170      	cbz	r0, 15404 <pdn_interface_pdn_id_get+0x84>
   153e6:	4240      	negs	r0, r0
   153e8:	f7fa feb6 	bl	10158 <nrf_modem_os_errno_set>
   153ec:	f04f 30ff 	mov.w	r0, #4294967295
   153f0:	e00b      	b.n	1540a <pdn_interface_pdn_id_get+0x8a>
   153f2:	f1b8 0f02 	cmp.w	r8, #2
   153f6:	d10a      	bne.n	1540e <pdn_interface_pdn_id_get+0x8e>
   153f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   153fc:	68db      	ldr	r3, [r3, #12]
   153fe:	f003 0301 	and.w	r3, r3, #1
   15402:	e7e6      	b.n	153d2 <pdn_interface_pdn_id_get+0x52>
   15404:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15408:	6858      	ldr	r0, [r3, #4]
   1540a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1540e:	3501      	adds	r5, #1
   15410:	2d0a      	cmp	r5, #10
   15412:	d1be      	bne.n	15392 <pdn_interface_pdn_id_get+0x12>
   15414:	2016      	movs	r0, #22
   15416:	e7e7      	b.n	153e8 <pdn_interface_pdn_id_get+0x68>
   15418:	20015354 	.word	0x20015354

0001541c <full_dfu_ipc_irq_handler>:
   1541c:	2301      	movs	r3, #1
   1541e:	4a03      	ldr	r2, [pc, #12]	; (1542c <full_dfu_ipc_irq_handler+0x10>)
   15420:	6013      	str	r3, [r2, #0]
   15422:	07c2      	lsls	r2, r0, #31
   15424:	bf44      	itt	mi
   15426:	4a02      	ldrmi	r2, [pc, #8]	; (15430 <full_dfu_ipc_irq_handler+0x14>)
   15428:	7013      	strbmi	r3, [r2, #0]
   1542a:	4770      	bx	lr
   1542c:	2001537c 	.word	0x2001537c
   15430:	200179ea 	.word	0x200179ea

00015434 <modem_ipc_wait_for_event>:
   15434:	b538      	push	{r3, r4, r5, lr}
   15436:	2300      	movs	r3, #0
   15438:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   1543c:	4c0a      	ldr	r4, [pc, #40]	; (15468 <modem_ipc_wait_for_event+0x34>)
   1543e:	6023      	str	r3, [r4, #0]
   15440:	6823      	ldr	r3, [r4, #0]
   15442:	b92b      	cbnz	r3, 15450 <modem_ipc_wait_for_event+0x1c>
   15444:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   15448:	f000 f976 	bl	15738 <nrf_modem_busy_wait_us>
   1544c:	3d01      	subs	r5, #1
   1544e:	d1f7      	bne.n	15440 <modem_ipc_wait_for_event+0xc>
   15450:	6823      	ldr	r3, [r4, #0]
   15452:	b90b      	cbnz	r3, 15458 <modem_ipc_wait_for_event+0x24>
   15454:	203c      	movs	r0, #60	; 0x3c
   15456:	e005      	b.n	15464 <modem_ipc_wait_for_event+0x30>
   15458:	4b04      	ldr	r3, [pc, #16]	; (1546c <modem_ipc_wait_for_event+0x38>)
   1545a:	781b      	ldrb	r3, [r3, #0]
   1545c:	2b01      	cmp	r3, #1
   1545e:	bf14      	ite	ne
   15460:	2000      	movne	r0, #0
   15462:	2005      	moveq	r0, #5
   15464:	bd38      	pop	{r3, r4, r5, pc}
   15466:	bf00      	nop
   15468:	2001537c 	.word	0x2001537c
   1546c:	200179ea 	.word	0x200179ea

00015470 <nrf_modem_full_dfu_setup>:
   15470:	2200      	movs	r2, #0
   15472:	2300      	movs	r3, #0
   15474:	b5f0      	push	{r4, r5, r6, r7, lr}
   15476:	4d2d      	ldr	r5, [pc, #180]	; (1552c <nrf_modem_full_dfu_setup+0xbc>)
   15478:	4f2d      	ldr	r7, [pc, #180]	; (15530 <nrf_modem_full_dfu_setup+0xc0>)
   1547a:	e9c5 2302 	strd	r2, r3, [r5, #8]
   1547e:	e9c5 2304 	strd	r2, r3, [r5, #16]
   15482:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   15486:	4b2b      	ldr	r3, [pc, #172]	; (15534 <nrf_modem_full_dfu_setup+0xc4>)
   15488:	2400      	movs	r4, #0
   1548a:	601a      	str	r2, [r3, #0]
   1548c:	f100 031c 	add.w	r3, r0, #28
   15490:	603b      	str	r3, [r7, #0]
   15492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   15496:	6043      	str	r3, [r0, #4]
   15498:	231c      	movs	r3, #28
   1549a:	7203      	strb	r3, [r0, #8]
   1549c:	2320      	movs	r3, #32
   1549e:	2601      	movs	r6, #1
   154a0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   154a4:	7243      	strb	r3, [r0, #9]
   154a6:	4b24      	ldr	r3, [pc, #144]	; (15538 <nrf_modem_full_dfu_setup+0xc8>)
   154a8:	7086      	strb	r6, [r0, #2]
   154aa:	70c2      	strb	r2, [r0, #3]
   154ac:	7004      	strb	r4, [r0, #0]
   154ae:	7044      	strb	r4, [r0, #1]
   154b0:	7284      	strb	r4, [r0, #10]
   154b2:	72c4      	strb	r4, [r0, #11]
   154b4:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   154b8:	702c      	strb	r4, [r5, #0]
   154ba:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   154be:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   154c2:	4b1e      	ldr	r3, [pc, #120]	; (1553c <nrf_modem_full_dfu_setup+0xcc>)
   154c4:	b093      	sub	sp, #76	; 0x4c
   154c6:	4622      	mov	r2, r4
   154c8:	491d      	ldr	r1, [pc, #116]	; (15540 <nrf_modem_full_dfu_setup+0xd0>)
   154ca:	4620      	mov	r0, r4
   154cc:	701c      	strb	r4, [r3, #0]
   154ce:	f000 fa95 	bl	159fc <nrfx_ipc_init>
   154d2:	2240      	movs	r2, #64	; 0x40
   154d4:	4621      	mov	r1, r4
   154d6:	a801      	add	r0, sp, #4
   154d8:	f002 fd2b 	bl	17f32 <memset>
   154dc:	2302      	movs	r3, #2
   154de:	9302      	str	r3, [sp, #8]
   154e0:	2304      	movs	r3, #4
   154e2:	9609      	str	r6, [sp, #36]	; 0x24
   154e4:	2605      	movs	r6, #5
   154e6:	eb0d 0003 	add.w	r0, sp, r3
   154ea:	930b      	str	r3, [sp, #44]	; 0x2c
   154ec:	9611      	str	r6, [sp, #68]	; 0x44
   154ee:	f000 fa9d 	bl	15a2c <nrfx_ipc_config_load>
   154f2:	4b14      	ldr	r3, [pc, #80]	; (15544 <nrf_modem_full_dfu_setup+0xd4>)
   154f4:	9400      	str	r4, [sp, #0]
   154f6:	683f      	ldr	r7, [r7, #0]
   154f8:	601c      	str	r4, [r3, #0]
   154fa:	681b      	ldr	r3, [r3, #0]
   154fc:	9300      	str	r3, [sp, #0]
   154fe:	9b00      	ldr	r3, [sp, #0]
   15500:	f7ff ff98 	bl	15434 <modem_ipc_wait_for_event>
   15504:	4603      	mov	r3, r0
   15506:	b150      	cbz	r0, 1551e <nrf_modem_full_dfu_setup+0xae>
   15508:	2303      	movs	r3, #3
   1550a:	702b      	strb	r3, [r5, #0]
   1550c:	f7fa fe24 	bl	10158 <nrf_modem_os_errno_set>
   15510:	f000 faac 	bl	15a6c <nrfx_ipc_uninit>
   15514:	f04f 33ff 	mov.w	r3, #4294967295
   15518:	4618      	mov	r0, r3
   1551a:	b013      	add	sp, #76	; 0x4c
   1551c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1551e:	6839      	ldr	r1, [r7, #0]
   15520:	4a09      	ldr	r2, [pc, #36]	; (15548 <nrf_modem_full_dfu_setup+0xd8>)
   15522:	4291      	cmp	r1, r2
   15524:	d0f8      	beq.n	15518 <nrf_modem_full_dfu_setup+0xa8>
   15526:	4630      	mov	r0, r6
   15528:	e7f0      	b.n	1550c <nrf_modem_full_dfu_setup+0x9c>
   1552a:	bf00      	nop
   1552c:	20014a48 	.word	0x20014a48
   15530:	20015380 	.word	0x20015380
   15534:	20015384 	.word	0x20015384
   15538:	4002a000 	.word	0x4002a000
   1553c:	200179ea 	.word	0x200179ea
   15540:	0001541d 	.word	0x0001541d
   15544:	40005610 	.word	0x40005610
   15548:	a5000001 	.word	0xa5000001

0001554c <packet_handler_create>:
   1554c:	2801      	cmp	r0, #1
   1554e:	b570      	push	{r4, r5, r6, lr}
   15550:	4604      	mov	r4, r0
   15552:	460e      	mov	r6, r1
   15554:	4615      	mov	r5, r2
   15556:	d00f      	beq.n	15578 <packet_handler_create+0x2c>
   15558:	1e84      	subs	r4, r0, #2
   1555a:	2c01      	cmp	r4, #1
   1555c:	d810      	bhi.n	15580 <packet_handler_create+0x34>
   1555e:	2010      	movs	r0, #16
   15560:	f7fa ff7a 	bl	10458 <nrf_modem_os_alloc>
   15564:	2400      	movs	r4, #0
   15566:	b130      	cbz	r0, 15576 <packet_handler_create+0x2a>
   15568:	2218      	movs	r2, #24
   1556a:	4b08      	ldr	r3, [pc, #32]	; (1558c <packet_handler_create+0x40>)
   1556c:	6085      	str	r5, [r0, #8]
   1556e:	fb02 3404 	mla	r4, r2, r4, r3
   15572:	e9c0 4600 	strd	r4, r6, [r0]
   15576:	bd70      	pop	{r4, r5, r6, pc}
   15578:	2014      	movs	r0, #20
   1557a:	f7fa ff6d 	bl	10458 <nrf_modem_os_alloc>
   1557e:	e7f2      	b.n	15566 <packet_handler_create+0x1a>
   15580:	200c      	movs	r0, #12
   15582:	f7fa ff69 	bl	10458 <nrf_modem_os_alloc>
   15586:	2402      	movs	r4, #2
   15588:	e7ed      	b.n	15566 <packet_handler_create+0x1a>
   1558a:	bf00      	nop
   1558c:	0001b000 	.word	0x0001b000

00015590 <modem_off>:
   15590:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15592:	2501      	movs	r5, #1
   15594:	4c07      	ldr	r4, [pc, #28]	; (155b4 <modem_off+0x24>)
   15596:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   1559a:	6065      	str	r5, [r4, #4]
   1559c:	f000 f8cc 	bl	15738 <nrf_modem_busy_wait_us>
   155a0:	2300      	movs	r3, #0
   155a2:	6063      	str	r3, [r4, #4]
   155a4:	9301      	str	r3, [sp, #4]
   155a6:	6025      	str	r5, [r4, #0]
   155a8:	6823      	ldr	r3, [r4, #0]
   155aa:	9301      	str	r3, [sp, #4]
   155ac:	9b01      	ldr	r3, [sp, #4]
   155ae:	b003      	add	sp, #12
   155b0:	bd30      	pop	{r4, r5, pc}
   155b2:	bf00      	nop
   155b4:	40005610 	.word	0x40005610

000155b8 <nrf_modem_init>:
   155b8:	b570      	push	{r4, r5, r6, lr}
   155ba:	460d      	mov	r5, r1
   155bc:	b300      	cbz	r0, 15600 <nrf_modem_init+0x48>
   155be:	4e13      	ldr	r6, [pc, #76]	; (1560c <nrf_modem_init+0x54>)
   155c0:	7832      	ldrb	r2, [r6, #0]
   155c2:	b9ea      	cbnz	r2, 15600 <nrf_modem_init+0x48>
   155c4:	2901      	cmp	r1, #1
   155c6:	d113      	bne.n	155f0 <nrf_modem_init+0x38>
   155c8:	68c1      	ldr	r1, [r0, #12]
   155ca:	6842      	ldr	r2, [r0, #4]
   155cc:	440a      	add	r2, r1
   155ce:	6941      	ldr	r1, [r0, #20]
   155d0:	440a      	add	r2, r1
   155d2:	69c1      	ldr	r1, [r0, #28]
   155d4:	440a      	add	r2, r1
   155d6:	f242 011b 	movw	r1, #8219	; 0x201b
   155da:	428a      	cmp	r2, r1
   155dc:	d913      	bls.n	15606 <nrf_modem_init+0x4e>
   155de:	6800      	ldr	r0, [r0, #0]
   155e0:	f7ff ff46 	bl	15470 <nrf_modem_full_dfu_setup>
   155e4:	4604      	mov	r4, r0
   155e6:	b130      	cbz	r0, 155f6 <nrf_modem_init+0x3e>
   155e8:	f7ff ffd2 	bl	15590 <modem_off>
   155ec:	4620      	mov	r0, r4
   155ee:	bd70      	pop	{r4, r5, r6, pc}
   155f0:	f004 fc8d 	bl	19f0e <nrf_modem_platform_init>
   155f4:	e7f6      	b.n	155e4 <nrf_modem_init+0x2c>
   155f6:	4b06      	ldr	r3, [pc, #24]	; (15610 <nrf_modem_init+0x58>)
   155f8:	701d      	strb	r5, [r3, #0]
   155fa:	2301      	movs	r3, #1
   155fc:	7033      	strb	r3, [r6, #0]
   155fe:	e7f5      	b.n	155ec <nrf_modem_init+0x34>
   15600:	f04f 34ff 	mov.w	r4, #4294967295
   15604:	e7f2      	b.n	155ec <nrf_modem_init+0x34>
   15606:	240c      	movs	r4, #12
   15608:	e7f0      	b.n	155ec <nrf_modem_init+0x34>
   1560a:	bf00      	nop
   1560c:	200179eb 	.word	0x200179eb
   15610:	200179ec 	.word	0x200179ec

00015614 <nrf_modem_platform_af_method_table_get>:
   15614:	280a      	cmp	r0, #10
   15616:	b508      	push	{r3, lr}
   15618:	d80b      	bhi.n	15632 <nrf_modem_platform_af_method_table_get+0x1e>
   1561a:	2800      	cmp	r0, #0
   1561c:	d036      	beq.n	1568c <nrf_modem_platform_af_method_table_get+0x78>
   1561e:	3801      	subs	r0, #1
   15620:	2809      	cmp	r0, #9
   15622:	d833      	bhi.n	1568c <nrf_modem_platform_af_method_table_get+0x78>
   15624:	e8df f000 	tbb	[pc, r0]
   15628:	32321429 	.word	0x32321429
   1562c:	32323224 	.word	0x32323224
   15630:	1432      	.short	0x1432
   15632:	2866      	cmp	r0, #102	; 0x66
   15634:	d12a      	bne.n	1568c <nrf_modem_platform_af_method_table_get+0x78>
   15636:	f240 2301 	movw	r3, #513	; 0x201
   1563a:	429a      	cmp	r2, r3
   1563c:	d028      	beq.n	15690 <nrf_modem_platform_af_method_table_get+0x7c>
   1563e:	f240 2302 	movw	r3, #514	; 0x202
   15642:	429a      	cmp	r2, r3
   15644:	d026      	beq.n	15694 <nrf_modem_platform_af_method_table_get+0x80>
   15646:	202b      	movs	r0, #43	; 0x2b
   15648:	f7fa fd86 	bl	10158 <nrf_modem_os_errno_set>
   1564c:	2000      	movs	r0, #0
   1564e:	e009      	b.n	15664 <nrf_modem_platform_af_method_table_get+0x50>
   15650:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   15654:	d207      	bcs.n	15666 <nrf_modem_platform_af_method_table_get+0x52>
   15656:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1565a:	d207      	bcs.n	1566c <nrf_modem_platform_af_method_table_get+0x58>
   1565c:	3a01      	subs	r2, #1
   1565e:	2a01      	cmp	r2, #1
   15660:	d8f1      	bhi.n	15646 <nrf_modem_platform_af_method_table_get+0x32>
   15662:	480e      	ldr	r0, [pc, #56]	; (1569c <nrf_modem_platform_af_method_table_get+0x88>)
   15664:	bd08      	pop	{r3, pc}
   15666:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1566a:	d1ec      	bne.n	15646 <nrf_modem_platform_af_method_table_get+0x32>
   1566c:	480c      	ldr	r0, [pc, #48]	; (156a0 <nrf_modem_platform_af_method_table_get+0x8c>)
   1566e:	e7f9      	b.n	15664 <nrf_modem_platform_af_method_table_get+0x50>
   15670:	2903      	cmp	r1, #3
   15672:	480c      	ldr	r0, [pc, #48]	; (156a4 <nrf_modem_platform_af_method_table_get+0x90>)
   15674:	bf18      	it	ne
   15676:	2000      	movne	r0, #0
   15678:	e7f4      	b.n	15664 <nrf_modem_platform_af_method_table_get+0x50>
   1567a:	f240 2303 	movw	r3, #515	; 0x203
   1567e:	429a      	cmp	r2, r3
   15680:	d00a      	beq.n	15698 <nrf_modem_platform_af_method_table_get+0x84>
   15682:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   15686:	d1de      	bne.n	15646 <nrf_modem_platform_af_method_table_get+0x32>
   15688:	4807      	ldr	r0, [pc, #28]	; (156a8 <nrf_modem_platform_af_method_table_get+0x94>)
   1568a:	e7eb      	b.n	15664 <nrf_modem_platform_af_method_table_get+0x50>
   1568c:	2016      	movs	r0, #22
   1568e:	e7db      	b.n	15648 <nrf_modem_platform_af_method_table_get+0x34>
   15690:	4806      	ldr	r0, [pc, #24]	; (156ac <nrf_modem_platform_af_method_table_get+0x98>)
   15692:	e7e7      	b.n	15664 <nrf_modem_platform_af_method_table_get+0x50>
   15694:	4806      	ldr	r0, [pc, #24]	; (156b0 <nrf_modem_platform_af_method_table_get+0x9c>)
   15696:	e7e5      	b.n	15664 <nrf_modem_platform_af_method_table_get+0x50>
   15698:	4806      	ldr	r0, [pc, #24]	; (156b4 <nrf_modem_platform_af_method_table_get+0xa0>)
   1569a:	e7e3      	b.n	15664 <nrf_modem_platform_af_method_table_get+0x50>
   1569c:	0001b070 	.word	0x0001b070
   156a0:	0001b098 	.word	0x0001b098
   156a4:	0001b138 	.word	0x0001b138
   156a8:	0001b110 	.word	0x0001b110
   156ac:	0001b048 	.word	0x0001b048
   156b0:	0001b0e8 	.word	0x0001b0e8
   156b4:	0001b0c0 	.word	0x0001b0c0

000156b8 <nrf_modem_platform_fd_method_table_get>:
   156b8:	b538      	push	{r3, r4, r5, lr}
   156ba:	4605      	mov	r5, r0
   156bc:	f7fc ffe8 	bl	12690 <interface_socket_from_handle_get>
   156c0:	4604      	mov	r4, r0
   156c2:	b130      	cbz	r0, 156d2 <nrf_modem_platform_fd_method_table_get+0x1a>
   156c4:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   156c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   156cc:	68c0      	ldr	r0, [r0, #12]
   156ce:	f7ff bfa1 	b.w	15614 <nrf_modem_platform_af_method_table_get>
   156d2:	4b0b      	ldr	r3, [pc, #44]	; (15700 <nrf_modem_platform_fd_method_table_get+0x48>)
   156d4:	429d      	cmp	r5, r3
   156d6:	d00c      	beq.n	156f2 <nrf_modem_platform_fd_method_table_get+0x3a>
   156d8:	4a0a      	ldr	r2, [pc, #40]	; (15704 <nrf_modem_platform_fd_method_table_get+0x4c>)
   156da:	0c2b      	lsrs	r3, r5, #16
   156dc:	041b      	lsls	r3, r3, #16
   156de:	4293      	cmp	r3, r2
   156e0:	d009      	beq.n	156f6 <nrf_modem_platform_fd_method_table_get+0x3e>
   156e2:	4b09      	ldr	r3, [pc, #36]	; (15708 <nrf_modem_platform_fd_method_table_get+0x50>)
   156e4:	429d      	cmp	r5, r3
   156e6:	d008      	beq.n	156fa <nrf_modem_platform_fd_method_table_get+0x42>
   156e8:	2009      	movs	r0, #9
   156ea:	f7fa fd35 	bl	10158 <nrf_modem_os_errno_set>
   156ee:	4620      	mov	r0, r4
   156f0:	bd38      	pop	{r3, r4, r5, pc}
   156f2:	4c06      	ldr	r4, [pc, #24]	; (1570c <nrf_modem_platform_fd_method_table_get+0x54>)
   156f4:	e7fb      	b.n	156ee <nrf_modem_platform_fd_method_table_get+0x36>
   156f6:	4c06      	ldr	r4, [pc, #24]	; (15710 <nrf_modem_platform_fd_method_table_get+0x58>)
   156f8:	e7f9      	b.n	156ee <nrf_modem_platform_fd_method_table_get+0x36>
   156fa:	4c06      	ldr	r4, [pc, #24]	; (15714 <nrf_modem_platform_fd_method_table_get+0x5c>)
   156fc:	e7f7      	b.n	156ee <nrf_modem_platform_fd_method_table_get+0x36>
   156fe:	bf00      	nop
   15700:	49765432 	.word	0x49765432
   15704:	789a0000 	.word	0x789a0000
   15708:	49765443 	.word	0x49765443
   1570c:	0001b0c0 	.word	0x0001b0c0
   15710:	0001b0e8 	.word	0x0001b0e8
   15714:	0001b110 	.word	0x0001b110

00015718 <nrf_modem_platform_fcntl>:
   15718:	b508      	push	{r3, lr}
   1571a:	4b06      	ldr	r3, [pc, #24]	; (15734 <nrf_modem_platform_fcntl+0x1c>)
   1571c:	4298      	cmp	r0, r3
   1571e:	d003      	beq.n	15728 <nrf_modem_platform_fcntl+0x10>
   15720:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   15724:	f7fd b834 	b.w	12790 <interface_socket_fcntl>
   15728:	202d      	movs	r0, #45	; 0x2d
   1572a:	f7fa fd15 	bl	10158 <nrf_modem_os_errno_set>
   1572e:	f04f 30ff 	mov.w	r0, #4294967295
   15732:	bd08      	pop	{r3, pc}
   15734:	49765432 	.word	0x49765432

00015738 <nrf_modem_busy_wait_us>:
   15738:	b508      	push	{r3, lr}
   1573a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1573e:	4358      	muls	r0, r3
   15740:	f7f6 fec0 	bl	c4c4 <__aeabi_ui2d>
   15744:	4b0a      	ldr	r3, [pc, #40]	; (15770 <nrf_modem_busy_wait_us+0x38>)
   15746:	2200      	movs	r2, #0
   15748:	f7f7 f860 	bl	c80c <__aeabi_ddiv>
   1574c:	f7f7 f946 	bl	c9dc <__aeabi_d2f>
   15750:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
   15754:	ee07 0a90 	vmov	s15, r0
   15758:	eec7 7a87 	vdiv.f32	s15, s15, s14
   1575c:	2300      	movs	r3, #0
   1575e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   15762:	ee17 2a90 	vmov	r2, s15
   15766:	4293      	cmp	r3, r2
   15768:	d100      	bne.n	1576c <nrf_modem_busy_wait_us+0x34>
   1576a:	bd08      	pop	{r3, pc}
   1576c:	3301      	adds	r3, #1
   1576e:	e7f8      	b.n	15762 <nrf_modem_busy_wait_us+0x2a>
   15770:	402f4000 	.word	0x402f4000

00015774 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   15774:	4a07      	ldr	r2, [pc, #28]	; (15794 <SystemInit+0x20>)
   15776:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1577a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1577e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   15782:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15786:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1578a:	4b03      	ldr	r3, [pc, #12]	; (15798 <SystemInit+0x24>)
   1578c:	4a03      	ldr	r2, [pc, #12]	; (1579c <SystemInit+0x28>)
   1578e:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   15790:	4770      	bx	lr
   15792:	bf00      	nop
   15794:	e000ed00 	.word	0xe000ed00
   15798:	20014590 	.word	0x20014590
   1579c:	03d09000 	.word	0x03d09000

000157a0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   157a0:	4b04      	ldr	r3, [pc, #16]	; (157b4 <nrfx_clock_init+0x14>)
   157a2:	791a      	ldrb	r2, [r3, #4]
   157a4:	b922      	cbnz	r2, 157b0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   157a6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   157a8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   157aa:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   157ac:	4802      	ldr	r0, [pc, #8]	; (157b8 <nrfx_clock_init+0x18>)
   157ae:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   157b0:	4802      	ldr	r0, [pc, #8]	; (157bc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   157b2:	4770      	bx	lr
   157b4:	20015388 	.word	0x20015388
   157b8:	0bad0000 	.word	0x0bad0000
   157bc:	0bad000c 	.word	0x0bad000c

000157c0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   157c0:	b110      	cbz	r0, 157c8 <nrfx_clock_start+0x8>
   157c2:	2801      	cmp	r0, #1
   157c4:	d01e      	beq.n	15804 <nrfx_clock_start+0x44>
   157c6:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   157c8:	4b13      	ldr	r3, [pc, #76]	; (15818 <nrfx_clock_start+0x58>)
   157ca:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   157ce:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   157d2:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   157d6:	4619      	mov	r1, r3
   157d8:	d010      	beq.n	157fc <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   157da:	f002 0203 	and.w	r2, r2, #3
   157de:	2a02      	cmp	r2, #2
   157e0:	d10c      	bne.n	157fc <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   157e2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   157e6:	2200      	movs	r2, #0
   157e8:	4b0c      	ldr	r3, [pc, #48]	; (1581c <nrfx_clock_start+0x5c>)
   157ea:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   157ec:	2202      	movs	r2, #2
   157ee:	681b      	ldr	r3, [r3, #0]
   157f0:	4b09      	ldr	r3, [pc, #36]	; (15818 <nrfx_clock_start+0x58>)
   157f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   157f6:	2201      	movs	r2, #1
   157f8:	609a      	str	r2, [r3, #8]
}
   157fa:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   157fc:	2301      	movs	r3, #1
   157fe:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   15802:	e7f0      	b.n	157e6 <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15804:	2200      	movs	r2, #0
   15806:	4b06      	ldr	r3, [pc, #24]	; (15820 <nrfx_clock_start+0x60>)
   15808:	601a      	str	r2, [r3, #0]
   1580a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1580c:	4b02      	ldr	r3, [pc, #8]	; (15818 <nrfx_clock_start+0x58>)
   1580e:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15812:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   15814:	4770      	bx	lr
   15816:	bf00      	nop
   15818:	40005000 	.word	0x40005000
   1581c:	40005104 	.word	0x40005104
   15820:	40005100 	.word	0x40005100

00015824 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   15824:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   15826:	b110      	cbz	r0, 1582e <nrfx_clock_stop+0xa>
   15828:	2801      	cmp	r0, #1
   1582a:	d016      	beq.n	1585a <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1582c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1582e:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15830:	2101      	movs	r1, #1
   15832:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   15836:	4c16      	ldr	r4, [pc, #88]	; (15890 <nrfx_clock_stop+0x6c>)
   15838:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1583c:	4a15      	ldr	r2, [pc, #84]	; (15894 <nrfx_clock_stop+0x70>)
   1583e:	6010      	str	r0, [r2, #0]
   15840:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15842:	4a15      	ldr	r2, [pc, #84]	; (15898 <nrfx_clock_stop+0x74>)
   15844:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15846:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1584a:	03db      	lsls	r3, r3, #15
   1584c:	d5ee      	bpl.n	1582c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1584e:	2001      	movs	r0, #1
   15850:	f004 fcdc 	bl	1a20c <nrfx_busy_wait>
   15854:	3d01      	subs	r5, #1
   15856:	d1f6      	bne.n	15846 <nrfx_clock_stop+0x22>
   15858:	e7e8      	b.n	1582c <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1585a:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1585c:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15860:	4b0e      	ldr	r3, [pc, #56]	; (1589c <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
   15862:	4c0b      	ldr	r4, [pc, #44]	; (15890 <nrfx_clock_stop+0x6c>)
   15864:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15868:	601a      	str	r2, [r3, #0]
   1586a:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1586c:	4b0c      	ldr	r3, [pc, #48]	; (158a0 <nrfx_clock_stop+0x7c>)
   1586e:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15870:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15874:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15878:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1587c:	03d2      	lsls	r2, r2, #15
   1587e:	d5d5      	bpl.n	1582c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   15880:	2b00      	cmp	r3, #0
   15882:	d0d3      	beq.n	1582c <nrfx_clock_stop+0x8>
   15884:	2001      	movs	r0, #1
   15886:	f004 fcc1 	bl	1a20c <nrfx_busy_wait>
   1588a:	3d01      	subs	r5, #1
   1588c:	d1f0      	bne.n	15870 <nrfx_clock_stop+0x4c>
   1588e:	e7cd      	b.n	1582c <nrfx_clock_stop+0x8>
   15890:	40005000 	.word	0x40005000
   15894:	40005104 	.word	0x40005104
   15898:	4000500c 	.word	0x4000500c
   1589c:	40005100 	.word	0x40005100
   158a0:	40005004 	.word	0x40005004

000158a4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   158a4:	4b15      	ldr	r3, [pc, #84]	; (158fc <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   158a6:	b510      	push	{r4, lr}
   158a8:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   158aa:	b14a      	cbz	r2, 158c0 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   158ac:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   158ae:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   158b0:	6018      	str	r0, [r3, #0]
   158b2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   158b4:	4b12      	ldr	r3, [pc, #72]	; (15900 <nrfx_power_clock_irq_handler+0x5c>)
   158b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   158ba:	4b12      	ldr	r3, [pc, #72]	; (15904 <nrfx_power_clock_irq_handler+0x60>)
   158bc:	681b      	ldr	r3, [r3, #0]
   158be:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   158c0:	4b11      	ldr	r3, [pc, #68]	; (15908 <nrfx_power_clock_irq_handler+0x64>)
   158c2:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   158c4:	b182      	cbz	r2, 158e8 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   158c6:	2200      	movs	r2, #0
   158c8:	601a      	str	r2, [r3, #0]
   158ca:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   158cc:	4b0c      	ldr	r3, [pc, #48]	; (15900 <nrfx_power_clock_irq_handler+0x5c>)
   158ce:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   158d2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   158d6:	f002 0203 	and.w	r2, r2, #3
   158da:	2a01      	cmp	r2, #1
   158dc:	f04f 0102 	mov.w	r1, #2
   158e0:	d103      	bne.n	158ea <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
   158e2:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   158e6:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   158e8:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   158ea:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   158ee:	4b05      	ldr	r3, [pc, #20]	; (15904 <nrfx_power_clock_irq_handler+0x60>)
   158f0:	2001      	movs	r0, #1
}
   158f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   158f6:	681b      	ldr	r3, [r3, #0]
   158f8:	4718      	bx	r3
   158fa:	bf00      	nop
   158fc:	40005100 	.word	0x40005100
   15900:	40005000 	.word	0x40005000
   15904:	20015388 	.word	0x20015388
   15908:	40005104 	.word	0x40005104

0001590c <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   1590c:	4a0b      	ldr	r2, [pc, #44]	; (1593c <nrfx_dppi_channel_alloc+0x30>)
{
   1590e:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   15910:	6816      	ldr	r6, [r2, #0]
   15912:	43f1      	mvns	r1, r6
   15914:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
   15916:	b171      	cbz	r1, 15936 <nrfx_dppi_channel_alloc+0x2a>
   15918:	2500      	movs	r5, #0
   1591a:	b2ec      	uxtb	r4, r5
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   1591c:	fa21 f304 	lsr.w	r3, r1, r4
   15920:	07db      	lsls	r3, r3, #31
   15922:	f105 0501 	add.w	r5, r5, #1
   15926:	d5f8      	bpl.n	1591a <nrfx_dppi_channel_alloc+0xe>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   15928:	2301      	movs	r3, #1
   1592a:	40a3      	lsls	r3, r4
   1592c:	4333      	orrs	r3, r6
    *p_channel = channel;
   1592e:	7004      	strb	r4, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   15930:	4803      	ldr	r0, [pc, #12]	; (15940 <nrfx_dppi_channel_alloc+0x34>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   15932:	6013      	str	r3, [r2, #0]
}
   15934:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   15936:	4803      	ldr	r0, [pc, #12]	; (15944 <nrfx_dppi_channel_alloc+0x38>)
   15938:	e7fc      	b.n	15934 <nrfx_dppi_channel_alloc+0x28>
   1593a:	bf00      	nop
   1593c:	20015390 	.word	0x20015390
   15940:	0bad0000 	.word	0x0bad0000
   15944:	0bad0002 	.word	0x0bad0002

00015948 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   15948:	2301      	movs	r3, #1
   1594a:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1594e:	f010 0fff 	tst.w	r0, #255	; 0xff
   15952:	d012      	beq.n	1597a <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   15954:	f04f 0320 	mov.w	r3, #32
   15958:	f3ef 8111 	mrs	r1, BASEPRI
   1595c:	f383 8811 	msr	BASEPRI, r3
   15960:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   15964:	4a06      	ldr	r2, [pc, #24]	; (15980 <nrfx_gpiote_channel_free+0x38>)
   15966:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   15968:	ea23 0000 	bic.w	r0, r3, r0
   1596c:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   1596e:	f381 8811 	msr	BASEPRI, r1
   15972:	f3bf 8f6f 	isb	sy
   15976:	4803      	ldr	r0, [pc, #12]	; (15984 <nrfx_gpiote_channel_free+0x3c>)
   15978:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1597a:	4803      	ldr	r0, [pc, #12]	; (15988 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1597c:	4770      	bx	lr
   1597e:	bf00      	nop
   15980:	20015394 	.word	0x20015394
   15984:	0bad0000 	.word	0x0bad0000
   15988:	0bad0004 	.word	0x0bad0004

0001598c <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1598c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   15990:	22ff      	movs	r2, #255	; 0xff
{
   15992:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   15994:	2601      	movs	r6, #1
{
   15996:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   15998:	f8df e058 	ldr.w	lr, [pc, #88]	; 159f4 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1599c:	4814      	ldr	r0, [pc, #80]	; (159f0 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1599e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 159f8 <nrfx_gpiote_channel_alloc+0x6c>
   159a2:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   159a4:	f04f 0120 	mov.w	r1, #32
   159a8:	f3ef 8c11 	mrs	ip, BASEPRI
   159ac:	f381 8811 	msr	BASEPRI, r1
   159b0:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   159b4:	fa22 f103 	lsr.w	r1, r2, r3
   159b8:	07c9      	lsls	r1, r1, #31
   159ba:	d50a      	bpl.n	159d2 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   159bc:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   159c0:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   159c4:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   159c6:	bf01      	itttt	eq
   159c8:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   159ca:	4339      	orreq	r1, r7
   159cc:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            *p_channel = ch_idx;
   159d0:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   159d2:	f38c 8811 	msr	BASEPRI, ip
   159d6:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   159da:	4540      	cmp	r0, r8
   159dc:	d005      	beq.n	159ea <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   159de:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   159e2:	439a      	bics	r2, r3
   159e4:	f104 0401 	add.w	r4, r4, #1
   159e8:	d1db      	bne.n	159a2 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   159ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   159ee:	bf00      	nop
   159f0:	0bad0002 	.word	0x0bad0002
   159f4:	20015394 	.word	0x20015394
   159f8:	0bad0000 	.word	0x0bad0000

000159fc <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   159fc:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   159fe:	4c08      	ldr	r4, [pc, #32]	; (15a20 <nrfx_ipc_init+0x24>)
{
   15a00:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   15a02:	7923      	ldrb	r3, [r4, #4]
{
   15a04:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   15a06:	b943      	cbnz	r3, 15a1a <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   15a08:	202a      	movs	r0, #42	; 0x2a
   15a0a:	f7f9 f9e9 	bl	ede0 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   15a0e:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   15a10:	4804      	ldr	r0, [pc, #16]	; (15a24 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   15a12:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   15a14:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   15a16:	60a5      	str	r5, [r4, #8]
}
   15a18:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   15a1a:	4803      	ldr	r0, [pc, #12]	; (15a28 <nrfx_ipc_init+0x2c>)
   15a1c:	e7fc      	b.n	15a18 <nrfx_ipc_init+0x1c>
   15a1e:	bf00      	nop
   15a20:	200153e4 	.word	0x200153e4
   15a24:	0bad0000 	.word	0x0bad0000
   15a28:	0bad000c 	.word	0x0bad000c

00015a2c <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   15a2c:	2300      	movs	r3, #0
{
   15a2e:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   15a30:	4a0d      	ldr	r2, [pc, #52]	; (15a68 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   15a32:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   15a36:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   15a3a:	3301      	adds	r3, #1
   15a3c:	2b08      	cmp	r3, #8
   15a3e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   15a42:	d1f6      	bne.n	15a32 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   15a44:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   15a46:	4a08      	ldr	r2, [pc, #32]	; (15a68 <nrfx_ipc_config_load+0x3c>)
   15a48:	f100 0120 	add.w	r1, r0, #32
   15a4c:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   15a50:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   15a54:	3301      	adds	r3, #1
   15a56:	2b08      	cmp	r3, #8
   15a58:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   15a5c:	d1f6      	bne.n	15a4c <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   15a5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   15a60:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   15a64:	bd30      	pop	{r4, r5, pc}
   15a66:	bf00      	nop
   15a68:	4002a000 	.word	0x4002a000

00015a6c <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
   15a6c:	2300      	movs	r3, #0
   15a6e:	4a14      	ldr	r2, [pc, #80]	; (15ac0 <nrfx_ipc_uninit+0x54>)
   15a70:	4914      	ldr	r1, [pc, #80]	; (15ac4 <nrfx_ipc_uninit+0x58>)
   15a72:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   15a76:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   15a7a:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   15a7e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   15a82:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   15a86:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   15a8a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   15a8e:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    p_reg->RECEIVE_CNF[index] = channels_mask;
   15a92:	f8c1 3590 	str.w	r3, [r1, #1424]	; 0x590
   15a96:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   15a9a:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   15a9e:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   15aa2:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   15aa6:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   15aaa:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   15aae:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    p_reg->INTENCLR = mask;
   15ab2:	f04f 32ff 	mov.w	r2, #4294967295
   15ab6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   15aba:	4a03      	ldr	r2, [pc, #12]	; (15ac8 <nrfx_ipc_uninit+0x5c>)
   15abc:	7113      	strb	r3, [r2, #4]
}
   15abe:	4770      	bx	lr
   15ac0:	4002a004 	.word	0x4002a004
   15ac4:	4002a000 	.word	0x4002a000
   15ac8:	200153e4 	.word	0x200153e4

00015acc <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   15acc:	4b0c      	ldr	r3, [pc, #48]	; (15b00 <nrfx_ipc_irq_handler+0x34>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   15ace:	b430      	push	{r4, r5}
   15ad0:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = __CLZ(__RBIT(bitmask));
        bitmask &= ~(1UL << event_idx);
   15ad4:	2401      	movs	r4, #1
    uint32_t bitmask = events_map;
   15ad6:	4602      	mov	r2, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15ad8:	2500      	movs	r5, #0
    while (bitmask)
   15ada:	b922      	cbnz	r2, 15ae6 <nrfx_ipc_irq_handler+0x1a>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
}
   15adc:	bc30      	pop	{r4, r5}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   15ade:	4b09      	ldr	r3, [pc, #36]	; (15b04 <nrfx_ipc_irq_handler+0x38>)
   15ae0:	681a      	ldr	r2, [r3, #0]
   15ae2:	6899      	ldr	r1, [r3, #8]
   15ae4:	4710      	bx	r2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   15ae6:	fa92 f3a2 	rbit	r3, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
   15aea:	fab3 f383 	clz	r3, r3
        bitmask &= ~(1UL << event_idx);
   15aee:	fa04 f103 	lsl.w	r1, r4, r3
   15af2:	ea22 0201 	bic.w	r2, r2, r1
   15af6:	4904      	ldr	r1, [pc, #16]	; (15b08 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   15af8:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15afa:	50cd      	str	r5, [r1, r3]
}
   15afc:	e7ed      	b.n	15ada <nrfx_ipc_irq_handler+0xe>
   15afe:	bf00      	nop
   15b00:	4002a000 	.word	0x4002a000
   15b04:	200153e4 	.word	0x200153e4
   15b08:	4002a100 	.word	0x4002a100

00015b0c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   15b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15b0e:	4b10      	ldr	r3, [pc, #64]	; (15b50 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   15b10:	4f10      	ldr	r7, [pc, #64]	; (15b54 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15b12:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   15b16:	3001      	adds	r0, #1
   15b18:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   15b1c:	42ae      	cmp	r6, r5
   15b1e:	d800      	bhi.n	15b22 <z_sys_init_run_level+0x16>
		}
	}
}
   15b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   15b22:	e9d5 3400 	ldrd	r3, r4, [r5]
   15b26:	4620      	mov	r0, r4
   15b28:	4798      	blx	r3
   15b2a:	b170      	cbz	r0, 15b4a <z_sys_init_run_level+0x3e>
   15b2c:	b16c      	cbz	r4, 15b4a <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   15b2e:	2301      	movs	r3, #1
				(dev - __device_start));
   15b30:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   15b32:	4a09      	ldr	r2, [pc, #36]	; (15b58 <z_sys_init_run_level+0x4c>)
   15b34:	1124      	asrs	r4, r4, #4
   15b36:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   15b38:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   15b3c:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   15b40:	fa03 f404 	lsl.w	r4, r3, r4
   15b44:	4304      	orrs	r4, r0
   15b46:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15b4a:	3508      	adds	r5, #8
   15b4c:	e7e6      	b.n	15b1c <z_sys_init_run_level+0x10>
   15b4e:	bf00      	nop
   15b50:	0001b160 	.word	0x0001b160
   15b54:	200145a0 	.word	0x200145a0
   15b58:	20014610 	.word	0x20014610

00015b5c <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   15b5c:	4b08      	ldr	r3, [pc, #32]	; (15b80 <z_device_ready+0x24>)
   15b5e:	1ac0      	subs	r0, r0, r3
   15b60:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   15b62:	4b08      	ldr	r3, [pc, #32]	; (15b84 <z_device_ready+0x28>)
   15b64:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   15b66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   15b6a:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   15b6c:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   15b70:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   15b74:	4210      	tst	r0, r2
}
   15b76:	bf0c      	ite	eq
   15b78:	4618      	moveq	r0, r3
   15b7a:	2000      	movne	r0, #0
   15b7c:	4770      	bx	lr
   15b7e:	bf00      	nop
   15b80:	200145a0 	.word	0x200145a0
   15b84:	20014610 	.word	0x20014610

00015b88 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   15b88:	4911      	ldr	r1, [pc, #68]	; (15bd0 <z_impl_device_get_binding+0x48>)
{
   15b8a:	b570      	push	{r4, r5, r6, lr}
   15b8c:	4605      	mov	r5, r0
   15b8e:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   15b90:	4c10      	ldr	r4, [pc, #64]	; (15bd4 <z_impl_device_get_binding+0x4c>)
   15b92:	428c      	cmp	r4, r1
   15b94:	d104      	bne.n	15ba0 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   15b96:	4c0f      	ldr	r4, [pc, #60]	; (15bd4 <z_impl_device_get_binding+0x4c>)
   15b98:	42b4      	cmp	r4, r6
   15b9a:	d10a      	bne.n	15bb2 <z_impl_device_get_binding+0x2a>
	return NULL;
   15b9c:	2400      	movs	r4, #0
   15b9e:	e014      	b.n	15bca <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   15ba0:	4620      	mov	r0, r4
   15ba2:	f7ff ffdb 	bl	15b5c <z_device_ready>
   15ba6:	b110      	cbz	r0, 15bae <z_impl_device_get_binding+0x26>
   15ba8:	6823      	ldr	r3, [r4, #0]
   15baa:	42ab      	cmp	r3, r5
   15bac:	d00d      	beq.n	15bca <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   15bae:	3410      	adds	r4, #16
   15bb0:	e7ef      	b.n	15b92 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   15bb2:	4620      	mov	r0, r4
   15bb4:	f7ff ffd2 	bl	15b5c <z_device_ready>
   15bb8:	b908      	cbnz	r0, 15bbe <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   15bba:	3410      	adds	r4, #16
   15bbc:	e7ec      	b.n	15b98 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   15bbe:	4628      	mov	r0, r5
   15bc0:	6821      	ldr	r1, [r4, #0]
   15bc2:	f002 f960 	bl	17e86 <strcmp>
   15bc6:	2800      	cmp	r0, #0
   15bc8:	d1f7      	bne.n	15bba <z_impl_device_get_binding+0x32>
}
   15bca:	4620      	mov	r0, r4
   15bcc:	bd70      	pop	{r4, r5, r6, pc}
   15bce:	bf00      	nop
   15bd0:	20014610 	.word	0x20014610
   15bd4:	200145a0 	.word	0x200145a0

00015bd8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   15bd8:	4b01      	ldr	r3, [pc, #4]	; (15be0 <z_impl_z_errno+0x8>)
   15bda:	6898      	ldr	r0, [r3, #8]
}
   15bdc:	3068      	adds	r0, #104	; 0x68
   15bde:	4770      	bx	lr
   15be0:	200153f0 	.word	0x200153f0

00015be4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   15be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15be6:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   15be8:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   15bea:	4e15      	ldr	r6, [pc, #84]	; (15c40 <idle+0x5c>)
	__asm__ volatile(
   15bec:	f04f 0220 	mov.w	r2, #32
   15bf0:	f3ef 8311 	mrs	r3, BASEPRI
   15bf4:	f382 8811 	msr	BASEPRI, r2
   15bf8:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   15bfc:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   15bfe:	b188      	cbz	r0, 15c24 <idle+0x40>
			cpu->pending_abort = NULL;
   15c00:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   15c02:	f383 8811 	msr	BASEPRI, r3
   15c06:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   15c0a:	f000 fc3f 	bl	1648c <z_thread_single_abort>
	__asm__ volatile(
   15c0e:	f04f 0320 	mov.w	r3, #32
   15c12:	f3ef 8011 	mrs	r0, BASEPRI
   15c16:	f383 8811 	msr	BASEPRI, r3
   15c1a:	f3bf 8f6f 	isb	sy
   15c1e:	f004 fc25 	bl	1a46c <z_reschedule_irqlock>
			continue;
   15c22:	e7e3      	b.n	15bec <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   15c24:	f004 fd80 	bl	1a728 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   15c28:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   15c2a:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   15c2c:	2802      	cmp	r0, #2
   15c2e:	bfd8      	it	le
   15c30:	4608      	movle	r0, r1
   15c32:	f004 fd89 	bl	1a748 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   15c36:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   15c38:	f7f9 f9f4 	bl	f024 <arch_cpu_idle>
}
   15c3c:	e7d6      	b.n	15bec <idle+0x8>
   15c3e:	bf00      	nop
   15c40:	200153f0 	.word	0x200153f0

00015c44 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   15c44:	4802      	ldr	r0, [pc, #8]	; (15c50 <z_bss_zero+0xc>)
   15c46:	4a03      	ldr	r2, [pc, #12]	; (15c54 <z_bss_zero+0x10>)
   15c48:	2100      	movs	r1, #0
   15c4a:	1a12      	subs	r2, r2, r0
   15c4c:	f002 b971 	b.w	17f32 <memset>
   15c50:	20014788 	.word	0x20014788
   15c54:	200179f0 	.word	0x200179f0

00015c58 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   15c58:	2201      	movs	r2, #1
{
   15c5a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   15c5c:	4b09      	ldr	r3, [pc, #36]	; (15c84 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   15c5e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   15c60:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   15c62:	f7ff ff53 	bl	15b0c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   15c66:	f000 ff85 	bl	16b74 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   15c6a:	2003      	movs	r0, #3
   15c6c:	f7ff ff4e 	bl	15b0c <z_sys_init_run_level>

	z_init_static_threads();
   15c70:	f000 fea6 	bl	169c0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   15c74:	f7f7 fb3a 	bl	d2ec <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   15c78:	4a03      	ldr	r2, [pc, #12]	; (15c88 <bg_thread_main+0x30>)
   15c7a:	7b13      	ldrb	r3, [r2, #12]
   15c7c:	f023 0301 	bic.w	r3, r3, #1
   15c80:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   15c82:	bd08      	pop	{r3, pc}
   15c84:	200179ed 	.word	0x200179ed
   15c88:	20014b28 	.word	0x20014b28

00015c8c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   15c8c:	b580      	push	{r7, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   15c8e:	4b35      	ldr	r3, [pc, #212]	; (15d64 <z_cstart+0xd8>)
   15c90:	b0b8      	sub	sp, #224	; 0xe0
	uint32_t msp =
   15c92:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   15c96:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   15c9a:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15c9e:	2400      	movs	r4, #0
   15ca0:	23e0      	movs	r3, #224	; 0xe0
   15ca2:	4d31      	ldr	r5, [pc, #196]	; (15d68 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   15ca4:	4e31      	ldr	r6, [pc, #196]	; (15d6c <z_cstart+0xe0>)
   15ca6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   15caa:	77ec      	strb	r4, [r5, #31]
   15cac:	762c      	strb	r4, [r5, #24]
   15cae:	766c      	strb	r4, [r5, #25]
   15cb0:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   15cb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15cb4:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 15d88 <z_cstart+0xfc>
   15cb8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   15cbc:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   15cbe:	f7f9 faed 	bl	f29c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   15cc2:	f7f9 f9a9 	bl	f018 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   15cc6:	f04f 33ff 	mov.w	r3, #4294967295
   15cca:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   15ccc:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   15cce:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   15cd2:	4d27      	ldr	r5, [pc, #156]	; (15d70 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   15cd4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   15cd8:	ab06      	add	r3, sp, #24
   15cda:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   15cdc:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   15cde:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   15ce2:	f7ff ff13 	bl	15b0c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   15ce6:	2001      	movs	r0, #1
   15ce8:	f7ff ff10 	bl	15b0c <z_sys_init_run_level>
	z_sched_init();
   15cec:	f000 fd22 	bl	16734 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15cf0:	4b20      	ldr	r3, [pc, #128]	; (15d74 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   15cf2:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15cf4:	9305      	str	r3, [sp, #20]
   15cf6:	2303      	movs	r3, #3
   15cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   15cfc:	491e      	ldr	r1, [pc, #120]	; (15d78 <z_cstart+0xec>)
   15cfe:	e9cd 4303 	strd	r4, r3, [sp, #12]
   15d02:	4630      	mov	r0, r6
   15d04:	4653      	mov	r3, sl
   15d06:	e9cd 4401 	strd	r4, r4, [sp, #4]
   15d0a:	9400      	str	r4, [sp, #0]
   15d0c:	f000 fdfc 	bl	16908 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15d10:	7b73      	ldrb	r3, [r6, #13]
   15d12:	4680      	mov	r8, r0
   15d14:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   15d18:	4630      	mov	r0, r6
   15d1a:	7373      	strb	r3, [r6, #13]
   15d1c:	f004 fbe8 	bl	1a4f0 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   15d20:	230f      	movs	r3, #15
   15d22:	2201      	movs	r2, #1
   15d24:	4f15      	ldr	r7, [pc, #84]	; (15d7c <z_cstart+0xf0>)
   15d26:	e9cd 3203 	strd	r3, r2, [sp, #12]
   15d2a:	4915      	ldr	r1, [pc, #84]	; (15d80 <z_cstart+0xf4>)
   15d2c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   15d30:	4b14      	ldr	r3, [pc, #80]	; (15d84 <z_cstart+0xf8>)
   15d32:	4638      	mov	r0, r7
   15d34:	e9cd 4401 	strd	r4, r4, [sp, #4]
   15d38:	9405      	str	r4, [sp, #20]
   15d3a:	9500      	str	r5, [sp, #0]
   15d3c:	f000 fde4 	bl	16908 <z_setup_new_thread>
   15d40:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   15d42:	4652      	mov	r2, sl
   15d44:	f023 0304 	bic.w	r3, r3, #4
   15d48:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   15d4a:	f105 031c 	add.w	r3, r5, #28
   15d4e:	4641      	mov	r1, r8
   15d50:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   15d52:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   15d56:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   15d58:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   15d5a:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   15d5e:	f7f9 f89f 	bl	eea0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   15d62:	bf00      	nop
   15d64:	20019730 	.word	0x20019730
   15d68:	e000ed00 	.word	0xe000ed00
   15d6c:	20014b28 	.word	0x20014b28
   15d70:	200153f0 	.word	0x200153f0
   15d74:	0001b63b 	.word	0x0001b63b
   15d78:	200185f0 	.word	0x200185f0
   15d7c:	20014a60 	.word	0x20014a60
   15d80:	200195f0 	.word	0x200195f0
   15d84:	00015be5 	.word	0x00015be5
   15d88:	00015c59 	.word	0x00015c59

00015d8c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   15d8c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   15d8e:	4c06      	ldr	r4, [pc, #24]	; (15da8 <statics_init+0x1c>)
   15d90:	4d06      	ldr	r5, [pc, #24]	; (15dac <statics_init+0x20>)
   15d92:	42ac      	cmp	r4, r5
   15d94:	d301      	bcc.n	15d9a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   15d96:	2000      	movs	r0, #0
   15d98:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   15d9a:	4620      	mov	r0, r4
   15d9c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   15da0:	f004 fa5f 	bl	1a262 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   15da4:	3414      	adds	r4, #20
   15da6:	e7f4      	b.n	15d92 <statics_init+0x6>
   15da8:	20014644 	.word	0x20014644
   15dac:	2001466c 	.word	0x2001466c

00015db0 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   15db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15db4:	4604      	mov	r4, r0
   15db6:	4616      	mov	r6, r2
   15db8:	461f      	mov	r7, r3
   15dba:	b085      	sub	sp, #20

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   15dbc:	f100 0908 	add.w	r9, r0, #8
   15dc0:	f04f 0320 	mov.w	r3, #32
   15dc4:	f3ef 8811 	mrs	r8, BASEPRI
   15dc8:	f383 8811 	msr	BASEPRI, r3
   15dcc:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   15dd0:	6a02      	ldr	r2, [r0, #32]
   15dd2:	68c3      	ldr	r3, [r0, #12]
   15dd4:	429a      	cmp	r2, r3
   15dd6:	d22c      	bcs.n	15e32 <z_impl_k_msgq_put+0x82>
   15dd8:	9103      	str	r1, [sp, #12]
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   15dda:	f004 fbe4 	bl	1a5a6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   15dde:	9903      	ldr	r1, [sp, #12]
   15de0:	4605      	mov	r5, r0
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   15de2:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   15de4:	b180      	cbz	r0, 15e08 <z_impl_k_msgq_put+0x58>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   15de6:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   15de8:	6940      	ldr	r0, [r0, #20]
   15dea:	f002 f877 	bl	17edc <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   15dee:	4628      	mov	r0, r5
   15df0:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
   15df4:	f004 fb7c 	bl	1a4f0 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   15df8:	4648      	mov	r0, r9
   15dfa:	4641      	mov	r1, r8
   15dfc:	f000 f9c0 	bl	16180 <z_reschedule>
			return 0;
   15e00:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   15e02:	b005      	add	sp, #20
   15e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   15e08:	69e0      	ldr	r0, [r4, #28]
   15e0a:	f002 f867 	bl	17edc <memcpy>
		result = 0;
   15e0e:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   15e10:	69e3      	ldr	r3, [r4, #28]
   15e12:	68a2      	ldr	r2, [r4, #8]
   15e14:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   15e16:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   15e18:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   15e1a:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   15e1c:	bf04      	itt	eq
   15e1e:	6923      	ldreq	r3, [r4, #16]
   15e20:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   15e22:	6a23      	ldr	r3, [r4, #32]
   15e24:	3301      	adds	r3, #1
   15e26:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   15e28:	f388 8811 	msr	BASEPRI, r8
   15e2c:	f3bf 8f6f 	isb	sy
	return result;
   15e30:	e7e7      	b.n	15e02 <z_impl_k_msgq_put+0x52>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15e32:	ea56 0307 	orrs.w	r3, r6, r7
   15e36:	d00a      	beq.n	15e4e <z_impl_k_msgq_put+0x9e>
		_current->base.swap_data = (void *) data;
   15e38:	4b06      	ldr	r3, [pc, #24]	; (15e54 <z_impl_k_msgq_put+0xa4>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   15e3a:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
   15e3c:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   15e3e:	4648      	mov	r0, r9
		_current->base.swap_data = (void *) data;
   15e40:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   15e42:	4641      	mov	r1, r8
   15e44:	e9cd 6700 	strd	r6, r7, [sp]
   15e48:	f000 fbe2 	bl	16610 <z_pend_curr>
   15e4c:	e7d9      	b.n	15e02 <z_impl_k_msgq_put+0x52>
		result = -ENOMSG;
   15e4e:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   15e52:	e7e9      	b.n	15e28 <z_impl_k_msgq_put+0x78>
   15e54:	200153f0 	.word	0x200153f0

00015e58 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   15e58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15e5c:	4604      	mov	r4, r0
   15e5e:	4616      	mov	r6, r2
   15e60:	4608      	mov	r0, r1
   15e62:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   15e64:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   15e68:	f04f 0320 	mov.w	r3, #32
   15e6c:	f3ef 8811 	mrs	r8, BASEPRI
   15e70:	f383 8811 	msr	BASEPRI, r3
   15e74:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   15e78:	6a23      	ldr	r3, [r4, #32]
   15e7a:	2b00      	cmp	r3, #0
   15e7c:	d033      	beq.n	15ee6 <z_impl_k_msgq_get+0x8e>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   15e7e:	68a2      	ldr	r2, [r4, #8]
   15e80:	69a1      	ldr	r1, [r4, #24]
   15e82:	f002 f82b 	bl	17edc <memcpy>
		msgq->read_ptr += msgq->msg_size;
   15e86:	69a3      	ldr	r3, [r4, #24]
   15e88:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   15e8a:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   15e8c:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   15e8e:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   15e90:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   15e92:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   15e94:	bf04      	itt	eq
   15e96:	6923      	ldreq	r3, [r4, #16]
   15e98:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   15e9a:	6a23      	ldr	r3, [r4, #32]
   15e9c:	3b01      	subs	r3, #1
   15e9e:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   15ea0:	f004 fb81 	bl	1a5a6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   15ea4:	4605      	mov	r5, r0
   15ea6:	b370      	cbz	r0, 15f06 <z_impl_k_msgq_get+0xae>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   15ea8:	6941      	ldr	r1, [r0, #20]
   15eaa:	68a2      	ldr	r2, [r4, #8]
   15eac:	69e0      	ldr	r0, [r4, #28]
   15eae:	f002 f815 	bl	17edc <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   15eb2:	69e3      	ldr	r3, [r4, #28]
   15eb4:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   15eb6:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   15eb8:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   15eba:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   15ebc:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   15ebe:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   15ec0:	bf04      	itt	eq
   15ec2:	6923      	ldreq	r3, [r4, #16]
   15ec4:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   15ec6:	6a23      	ldr	r3, [r4, #32]
   15ec8:	3301      	adds	r3, #1
   15eca:	6223      	str	r3, [r4, #32]
   15ecc:	2400      	movs	r4, #0
   15ece:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
			z_ready_thread(pending_thread);
   15ed2:	f004 fb0d 	bl	1a4f0 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   15ed6:	4648      	mov	r0, r9
   15ed8:	4641      	mov	r1, r8
   15eda:	f000 f951 	bl	16180 <z_reschedule>
			return 0;
   15ede:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   15ee0:	b003      	add	sp, #12
   15ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15ee6:	ea56 0307 	orrs.w	r3, r6, r7
   15eea:	d00a      	beq.n	15f02 <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   15eec:	4b08      	ldr	r3, [pc, #32]	; (15f10 <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   15eee:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   15ef0:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   15ef2:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   15ef4:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   15ef6:	4641      	mov	r1, r8
   15ef8:	e9cd 6700 	strd	r6, r7, [sp]
   15efc:	f000 fb88 	bl	16610 <z_pend_curr>
   15f00:	e7ee      	b.n	15ee0 <z_impl_k_msgq_get+0x88>
		result = -ENOMSG;
   15f02:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   15f06:	f388 8811 	msr	BASEPRI, r8
   15f0a:	f3bf 8f6f 	isb	sy
	return result;
   15f0e:	e7e7      	b.n	15ee0 <z_impl_k_msgq_get+0x88>
   15f10:	200153f0 	.word	0x200153f0

00015f14 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   15f14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15f18:	4604      	mov	r4, r0
   15f1a:	4616      	mov	r6, r2
   15f1c:	461f      	mov	r7, r3
	__asm__ volatile(
   15f1e:	f04f 0320 	mov.w	r3, #32
   15f22:	f3ef 8811 	mrs	r8, BASEPRI
   15f26:	f383 8811 	msr	BASEPRI, r3
   15f2a:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   15f2e:	68c3      	ldr	r3, [r0, #12]
   15f30:	4a32      	ldr	r2, [pc, #200]	; (15ffc <z_impl_k_mutex_lock+0xe8>)
   15f32:	b16b      	cbz	r3, 15f50 <z_impl_k_mutex_lock+0x3c>
   15f34:	6880      	ldr	r0, [r0, #8]
   15f36:	6891      	ldr	r1, [r2, #8]
   15f38:	4288      	cmp	r0, r1
   15f3a:	d019      	beq.n	15f70 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   15f3c:	ea56 0307 	orrs.w	r3, r6, r7
   15f40:	d118      	bne.n	15f74 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   15f42:	f388 8811 	msr	BASEPRI, r8
   15f46:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   15f4a:	f06f 000f 	mvn.w	r0, #15
   15f4e:	e00c      	b.n	15f6a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   15f50:	6891      	ldr	r1, [r2, #8]
   15f52:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   15f56:	3301      	adds	r3, #1
   15f58:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   15f5a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   15f5c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   15f5e:	60a3      	str	r3, [r4, #8]
   15f60:	f388 8811 	msr	BASEPRI, r8
   15f64:	f3bf 8f6f 	isb	sy
		return 0;
   15f68:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   15f6a:	b002      	add	sp, #8
   15f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   15f70:	6921      	ldr	r1, [r4, #16]
   15f72:	e7f0      	b.n	15f56 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   15f74:	f990 300e 	ldrsb.w	r3, [r0, #14]
   15f78:	f991 100e 	ldrsb.w	r1, [r1, #14]
   15f7c:	4299      	cmp	r1, r3
   15f7e:	bfa8      	it	ge
   15f80:	4619      	movge	r1, r3
   15f82:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   15f86:	4299      	cmp	r1, r3
   15f88:	da2c      	bge.n	15fe4 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   15f8a:	f000 fb8f 	bl	166ac <z_set_prio>
   15f8e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   15f90:	4622      	mov	r2, r4
   15f92:	4641      	mov	r1, r8
   15f94:	e9cd 6700 	strd	r6, r7, [sp]
   15f98:	4819      	ldr	r0, [pc, #100]	; (16000 <z_impl_k_mutex_lock+0xec>)
   15f9a:	f000 fb39 	bl	16610 <z_pend_curr>
	if (got_mutex == 0) {
   15f9e:	2800      	cmp	r0, #0
   15fa0:	d0e3      	beq.n	15f6a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   15fa2:	f04f 0320 	mov.w	r3, #32
   15fa6:	f3ef 8611 	mrs	r6, BASEPRI
   15faa:	f383 8811 	msr	BASEPRI, r3
   15fae:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   15fb2:	6823      	ldr	r3, [r4, #0]
   15fb4:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15fb6:	42a3      	cmp	r3, r4
   15fb8:	d007      	beq.n	15fca <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   15fba:	b133      	cbz	r3, 15fca <z_impl_k_mutex_lock+0xb6>
   15fbc:	f993 300e 	ldrsb.w	r3, [r3, #14]
   15fc0:	4299      	cmp	r1, r3
   15fc2:	bfa8      	it	ge
   15fc4:	4619      	movge	r1, r3
   15fc6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   15fca:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   15fcc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   15fd0:	4299      	cmp	r1, r3
   15fd2:	d109      	bne.n	15fe8 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   15fd4:	b16d      	cbz	r5, 15ff2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   15fd6:	4631      	mov	r1, r6
   15fd8:	4809      	ldr	r0, [pc, #36]	; (16000 <z_impl_k_mutex_lock+0xec>)
   15fda:	f000 f8d1 	bl	16180 <z_reschedule>
	return -EAGAIN;
   15fde:	f06f 000a 	mvn.w	r0, #10
   15fe2:	e7c2      	b.n	15f6a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   15fe4:	2500      	movs	r5, #0
   15fe6:	e7d3      	b.n	15f90 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   15fe8:	f000 fb60 	bl	166ac <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   15fec:	2800      	cmp	r0, #0
   15fee:	d1f2      	bne.n	15fd6 <z_impl_k_mutex_lock+0xc2>
   15ff0:	e7f0      	b.n	15fd4 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   15ff2:	f386 8811 	msr	BASEPRI, r6
   15ff6:	f3bf 8f6f 	isb	sy
   15ffa:	e7f0      	b.n	15fde <z_impl_k_mutex_lock+0xca>
   15ffc:	200153f0 	.word	0x200153f0
   16000:	200179ee 	.word	0x200179ee

00016004 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   16004:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   16006:	6883      	ldr	r3, [r0, #8]
{
   16008:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1600a:	2b00      	cmp	r3, #0
   1600c:	d037      	beq.n	1607e <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1600e:	4a1f      	ldr	r2, [pc, #124]	; (1608c <z_impl_k_mutex_unlock+0x88>)
   16010:	6892      	ldr	r2, [r2, #8]
   16012:	4293      	cmp	r3, r2
   16014:	d136      	bne.n	16084 <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   16016:	7bda      	ldrb	r2, [r3, #15]
   16018:	3a01      	subs	r2, #1
   1601a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1601c:	68c3      	ldr	r3, [r0, #12]
   1601e:	2b01      	cmp	r3, #1
   16020:	d005      	beq.n	1602e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   16022:	3b01      	subs	r3, #1
   16024:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   16026:	f000 f90f 	bl	16248 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1602a:	2000      	movs	r0, #0
}
   1602c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1602e:	f04f 0320 	mov.w	r3, #32
   16032:	f3ef 8511 	mrs	r5, BASEPRI
   16036:	f383 8811 	msr	BASEPRI, r3
   1603a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1603e:	6901      	ldr	r1, [r0, #16]
   16040:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   16042:	f990 300e 	ldrsb.w	r3, [r0, #14]
   16046:	4299      	cmp	r1, r3
   16048:	d001      	beq.n	1604e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1604a:	f000 fb2f 	bl	166ac <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1604e:	4620      	mov	r0, r4
   16050:	f004 faa9 	bl	1a5a6 <z_unpend_first_thread>
	mutex->owner = new_owner;
   16054:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   16056:	b160      	cbz	r0, 16072 <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   16058:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1605c:	6122      	str	r2, [r4, #16]
   1605e:	2200      	movs	r2, #0
   16060:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   16064:	f004 fa44 	bl	1a4f0 <z_ready_thread>
		z_reschedule(&lock, key);
   16068:	4629      	mov	r1, r5
   1606a:	4809      	ldr	r0, [pc, #36]	; (16090 <z_impl_k_mutex_unlock+0x8c>)
   1606c:	f000 f888 	bl	16180 <z_reschedule>
   16070:	e7d9      	b.n	16026 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   16072:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   16074:	f385 8811 	msr	BASEPRI, r5
   16078:	f3bf 8f6f 	isb	sy
   1607c:	e7d3      	b.n	16026 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1607e:	f06f 0015 	mvn.w	r0, #21
   16082:	e7d3      	b.n	1602c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   16084:	f04f 30ff 	mov.w	r0, #4294967295
   16088:	e7d0      	b.n	1602c <z_impl_k_mutex_unlock+0x28>
   1608a:	bf00      	nop
   1608c:	200153f0 	.word	0x200153f0
   16090:	200179ee 	.word	0x200179ee

00016094 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   16094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16096:	4616      	mov	r6, r2
   16098:	461f      	mov	r7, r3
	__asm__ volatile(
   1609a:	f04f 0320 	mov.w	r3, #32
   1609e:	f3ef 8511 	mrs	r5, BASEPRI
   160a2:	f383 8811 	msr	BASEPRI, r3
   160a6:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   160aa:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   160ac:	b19c      	cbz	r4, 160d6 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   160ae:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   160b0:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   160b2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   160b6:	4294      	cmp	r4, r2
	list->head = node;
   160b8:	6003      	str	r3, [r0, #0]
	list->tail = node;
   160ba:	bf08      	it	eq
   160bc:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   160be:	2101      	movs	r1, #1
   160c0:	4620      	mov	r0, r4
   160c2:	f004 f9a7 	bl	1a414 <z_queue_node_peek>
   160c6:	4604      	mov	r4, r0
	__asm__ volatile(
   160c8:	f385 8811 	msr	BASEPRI, r5
   160cc:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   160d0:	4620      	mov	r0, r4
   160d2:	b003      	add	sp, #12
   160d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   160d6:	ea56 0307 	orrs.w	r3, r6, r7
   160da:	d0f5      	beq.n	160c8 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   160dc:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   160e0:	4629      	mov	r1, r5
   160e2:	4610      	mov	r0, r2
   160e4:	e9cd 6700 	strd	r6, r7, [sp]
   160e8:	f000 fa92 	bl	16610 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   160ec:	2800      	cmp	r0, #0
   160ee:	d1ef      	bne.n	160d0 <z_impl_k_queue_get+0x3c>
   160f0:	4b01      	ldr	r3, [pc, #4]	; (160f8 <z_impl_k_queue_get+0x64>)
   160f2:	689b      	ldr	r3, [r3, #8]
   160f4:	695c      	ldr	r4, [r3, #20]
   160f6:	e7eb      	b.n	160d0 <z_impl_k_queue_get+0x3c>
   160f8:	200153f0 	.word	0x200153f0

000160fc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   160fc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   160fe:	4c08      	ldr	r4, [pc, #32]	; (16120 <z_reset_time_slice+0x24>)
   16100:	6823      	ldr	r3, [r4, #0]
   16102:	b15b      	cbz	r3, 1611c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   16104:	f7f8 fe36 	bl	ed74 <z_clock_elapsed>
   16108:	6822      	ldr	r2, [r4, #0]
   1610a:	4906      	ldr	r1, [pc, #24]	; (16124 <z_reset_time_slice+0x28>)
   1610c:	4410      	add	r0, r2
   1610e:	6148      	str	r0, [r1, #20]
		z_set_timeout_expiry(slice_time, false);
	}
}
   16110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   16114:	2100      	movs	r1, #0
   16116:	4610      	mov	r0, r2
   16118:	f004 bb16 	b.w	1a748 <z_set_timeout_expiry>
}
   1611c:	bd10      	pop	{r4, pc}
   1611e:	bf00      	nop
   16120:	20015430 	.word	0x20015430
   16124:	200153f0 	.word	0x200153f0

00016128 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   16128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1612a:	460c      	mov	r4, r1
	__asm__ volatile(
   1612c:	f04f 0320 	mov.w	r3, #32
   16130:	f3ef 8511 	mrs	r5, BASEPRI
   16134:	f383 8811 	msr	BASEPRI, r3
   16138:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   1613c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   16140:	f240 36e7 	movw	r6, #999	; 0x3e7
   16144:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   16146:	2200      	movs	r2, #0
   16148:	fbe1 6700 	umlal	r6, r7, r1, r0
   1614c:	4b09      	ldr	r3, [pc, #36]	; (16174 <k_sched_time_slice_set+0x4c>)
   1614e:	4630      	mov	r0, r6
   16150:	615a      	str	r2, [r3, #20]
   16152:	4639      	mov	r1, r7
   16154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16158:	2300      	movs	r3, #0
   1615a:	f7f6 fcdf 	bl	cb1c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1615e:	4b06      	ldr	r3, [pc, #24]	; (16178 <k_sched_time_slice_set+0x50>)
   16160:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   16162:	4b06      	ldr	r3, [pc, #24]	; (1617c <k_sched_time_slice_set+0x54>)
   16164:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   16166:	f7ff ffc9 	bl	160fc <z_reset_time_slice>
	__asm__ volatile(
   1616a:	f385 8811 	msr	BASEPRI, r5
   1616e:	f3bf 8f6f 	isb	sy
	}
}
   16172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16174:	200153f0 	.word	0x200153f0
   16178:	20015430 	.word	0x20015430
   1617c:	2001542c 	.word	0x2001542c

00016180 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   16180:	b949      	cbnz	r1, 16196 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16182:	f3ef 8005 	mrs	r0, IPSR
   16186:	b930      	cbnz	r0, 16196 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   16188:	4b05      	ldr	r3, [pc, #20]	; (161a0 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1618a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1618c:	689b      	ldr	r3, [r3, #8]
   1618e:	429a      	cmp	r2, r3
   16190:	d001      	beq.n	16196 <z_reschedule+0x16>
	ret = arch_swap(key);
   16192:	f7f8 be09 	b.w	eda8 <arch_swap>
   16196:	f381 8811 	msr	BASEPRI, r1
   1619a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1619e:	4770      	bx	lr
   161a0:	200153f0 	.word	0x200153f0

000161a4 <k_sched_lock>:
	__asm__ volatile(
   161a4:	f04f 0320 	mov.w	r3, #32
   161a8:	f3ef 8111 	mrs	r1, BASEPRI
   161ac:	f383 8811 	msr	BASEPRI, r3
   161b0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   161b4:	4b04      	ldr	r3, [pc, #16]	; (161c8 <k_sched_lock+0x24>)
   161b6:	689a      	ldr	r2, [r3, #8]
   161b8:	7bd3      	ldrb	r3, [r2, #15]
   161ba:	3b01      	subs	r3, #1
   161bc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   161be:	f381 8811 	msr	BASEPRI, r1
   161c2:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   161c6:	4770      	bx	lr
   161c8:	200153f0 	.word	0x200153f0

000161cc <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   161cc:	4b09      	ldr	r3, [pc, #36]	; (161f4 <z_priq_dumb_remove+0x28>)
   161ce:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   161d2:	4282      	cmp	r2, r0
   161d4:	d105      	bne.n	161e2 <z_priq_dumb_remove+0x16>
   161d6:	689b      	ldr	r3, [r3, #8]
   161d8:	428b      	cmp	r3, r1
   161da:	d102      	bne.n	161e2 <z_priq_dumb_remove+0x16>
   161dc:	7b4b      	ldrb	r3, [r1, #13]
   161de:	06db      	lsls	r3, r3, #27
   161e0:	d106      	bne.n	161f0 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   161e2:	e9d1 3200 	ldrd	r3, r2, [r1]
   161e6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   161e8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   161ea:	2300      	movs	r3, #0
	node->prev = NULL;
   161ec:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   161f0:	4770      	bx	lr
   161f2:	bf00      	nop
   161f4:	200153f0 	.word	0x200153f0

000161f8 <update_cache>:
{
   161f8:	b538      	push	{r3, r4, r5, lr}
   161fa:	4c12      	ldr	r4, [pc, #72]	; (16244 <update_cache+0x4c>)
   161fc:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   161fe:	6923      	ldr	r3, [r4, #16]
   16200:	68a2      	ldr	r2, [r4, #8]
   16202:	b10b      	cbz	r3, 16208 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   16204:	68e5      	ldr	r5, [r4, #12]
   16206:	e00c      	b.n	16222 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   16208:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1620c:	f004 f966 	bl	1a4dc <z_priq_dumb_best>
   16210:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   16212:	7b53      	ldrb	r3, [r2, #13]
   16214:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   16216:	bf44      	itt	mi
   16218:	f043 0308 	orrmi.w	r3, r3, #8
   1621c:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1621e:	2d00      	cmp	r5, #0
   16220:	d0f0      	beq.n	16204 <update_cache+0xc>
	if (preempt_ok != 0) {
   16222:	b949      	cbnz	r1, 16238 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   16224:	7b53      	ldrb	r3, [r2, #13]
   16226:	06db      	lsls	r3, r3, #27
   16228:	d106      	bne.n	16238 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1622a:	69ab      	ldr	r3, [r5, #24]
   1622c:	b923      	cbnz	r3, 16238 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1622e:	89d3      	ldrh	r3, [r2, #14]
   16230:	2b7f      	cmp	r3, #127	; 0x7f
   16232:	d901      	bls.n	16238 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   16234:	62a2      	str	r2, [r4, #40]	; 0x28
}
   16236:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   16238:	4295      	cmp	r5, r2
   1623a:	d001      	beq.n	16240 <update_cache+0x48>
			z_reset_time_slice();
   1623c:	f7ff ff5e 	bl	160fc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   16240:	62a5      	str	r5, [r4, #40]	; 0x28
}
   16242:	e7f8      	b.n	16236 <update_cache+0x3e>
   16244:	200153f0 	.word	0x200153f0

00016248 <k_sched_unlock>:
{
   16248:	b510      	push	{r4, lr}
	__asm__ volatile(
   1624a:	f04f 0320 	mov.w	r3, #32
   1624e:	f3ef 8411 	mrs	r4, BASEPRI
   16252:	f383 8811 	msr	BASEPRI, r3
   16256:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1625a:	4b08      	ldr	r3, [pc, #32]	; (1627c <k_sched_unlock+0x34>)
		update_cache(0);
   1625c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1625e:	689a      	ldr	r2, [r3, #8]
   16260:	7bd3      	ldrb	r3, [r2, #15]
   16262:	3301      	adds	r3, #1
   16264:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   16266:	f7ff ffc7 	bl	161f8 <update_cache>
	__asm__ volatile(
   1626a:	f384 8811 	msr	BASEPRI, r4
   1626e:	f3bf 8f6f 	isb	sy
}
   16272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   16276:	f004 b905 	b.w	1a484 <z_reschedule_unlocked>
   1627a:	bf00      	nop
   1627c:	200153f0 	.word	0x200153f0

00016280 <ready_thread>:
{
   16280:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   16282:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   16286:	7b43      	ldrb	r3, [r0, #13]
   16288:	2a00      	cmp	r2, #0
   1628a:	db2c      	blt.n	162e6 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1628c:	06db      	lsls	r3, r3, #27
   1628e:	d12a      	bne.n	162e6 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   16290:	6983      	ldr	r3, [r0, #24]
   16292:	bb43      	cbnz	r3, 162e6 <ready_thread+0x66>
	return list->head == list;
   16294:	4a15      	ldr	r2, [pc, #84]	; (162ec <ready_thread+0x6c>)
   16296:	4611      	mov	r1, r2
   16298:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1629c:	428c      	cmp	r4, r1
   1629e:	bf18      	it	ne
   162a0:	4623      	movne	r3, r4
   162a2:	2b00      	cmp	r3, #0
   162a4:	bf38      	it	cc
   162a6:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   162a8:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   162aa:	b1b3      	cbz	r3, 162da <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   162ac:	f990 600e 	ldrsb.w	r6, [r0, #14]
   162b0:	f993 500e 	ldrsb.w	r5, [r3, #14]
   162b4:	42ae      	cmp	r6, r5
   162b6:	db03      	blt.n	162c0 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   162b8:	42a3      	cmp	r3, r4
   162ba:	d00e      	beq.n	162da <ready_thread+0x5a>
   162bc:	681b      	ldr	r3, [r3, #0]
   162be:	e7f4      	b.n	162aa <ready_thread+0x2a>
	node->prev = successor->prev;
   162c0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   162c2:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   162c6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   162c8:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   162ca:	7b43      	ldrb	r3, [r0, #13]
   162cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   162d0:	7343      	strb	r3, [r0, #13]
}
   162d2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   162d4:	2000      	movs	r0, #0
   162d6:	f7ff bf8f 	b.w	161f8 <update_cache>
	node->prev = list->tail;
   162da:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   162de:	6b13      	ldr	r3, [r2, #48]	; 0x30
   162e0:	6018      	str	r0, [r3, #0]
	list->tail = node;
   162e2:	6310      	str	r0, [r2, #48]	; 0x30
}
   162e4:	e7f1      	b.n	162ca <ready_thread+0x4a>
}
   162e6:	bc70      	pop	{r4, r5, r6}
   162e8:	4770      	bx	lr
   162ea:	bf00      	nop
   162ec:	200153f0 	.word	0x200153f0

000162f0 <z_sched_start>:
{
   162f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   162f2:	f04f 0220 	mov.w	r2, #32
   162f6:	f3ef 8411 	mrs	r4, BASEPRI
   162fa:	f382 8811 	msr	BASEPRI, r2
   162fe:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   16302:	7b42      	ldrb	r2, [r0, #13]
   16304:	0751      	lsls	r1, r2, #29
   16306:	d404      	bmi.n	16312 <z_sched_start+0x22>
	__asm__ volatile(
   16308:	f384 8811 	msr	BASEPRI, r4
   1630c:	f3bf 8f6f 	isb	sy
}
   16310:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16312:	f022 0204 	bic.w	r2, r2, #4
   16316:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   16318:	f7ff ffb2 	bl	16280 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1631c:	4621      	mov	r1, r4
}
   1631e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   16322:	4801      	ldr	r0, [pc, #4]	; (16328 <z_sched_start+0x38>)
   16324:	f7ff bf2c 	b.w	16180 <z_reschedule>
   16328:	200179ee 	.word	0x200179ee

0001632c <move_thread_to_end_of_prio_q>:
{
   1632c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1632e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   16332:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   16334:	2b00      	cmp	r3, #0
   16336:	da02      	bge.n	1633e <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   16338:	4817      	ldr	r0, [pc, #92]	; (16398 <move_thread_to_end_of_prio_q+0x6c>)
   1633a:	f7ff ff47 	bl	161cc <z_priq_dumb_remove>
	return list->head == list;
   1633e:	4a17      	ldr	r2, [pc, #92]	; (1639c <move_thread_to_end_of_prio_q+0x70>)
   16340:	4610      	mov	r0, r2
   16342:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16346:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16348:	4283      	cmp	r3, r0
   1634a:	bf08      	it	eq
   1634c:	2300      	moveq	r3, #0
   1634e:	2b00      	cmp	r3, #0
   16350:	bf38      	it	cc
   16352:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16354:	b1d3      	cbz	r3, 1638c <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   16356:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1635a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1635e:	42ae      	cmp	r6, r5
   16360:	db03      	blt.n	1636a <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   16362:	42a3      	cmp	r3, r4
   16364:	d012      	beq.n	1638c <move_thread_to_end_of_prio_q+0x60>
   16366:	681b      	ldr	r3, [r3, #0]
   16368:	e7f4      	b.n	16354 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1636a:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1636c:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   16370:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   16372:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   16374:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   16376:	6890      	ldr	r0, [r2, #8]
   16378:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1637c:	734b      	strb	r3, [r1, #13]
   1637e:	1a43      	subs	r3, r0, r1
   16380:	4258      	negs	r0, r3
   16382:	4158      	adcs	r0, r3
}
   16384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   16388:	f7ff bf36 	b.w	161f8 <update_cache>
	node->prev = list->tail;
   1638c:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   16390:	6b13      	ldr	r3, [r2, #48]	; 0x30
   16392:	6019      	str	r1, [r3, #0]
	list->tail = node;
   16394:	6311      	str	r1, [r2, #48]	; 0x30
}
   16396:	e7ed      	b.n	16374 <move_thread_to_end_of_prio_q+0x48>
   16398:	2001541c 	.word	0x2001541c
   1639c:	200153f0 	.word	0x200153f0

000163a0 <z_time_slice>:
{
   163a0:	4601      	mov	r1, r0
   163a2:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   163a4:	f04f 0320 	mov.w	r3, #32
   163a8:	f3ef 8411 	mrs	r4, BASEPRI
   163ac:	f383 8811 	msr	BASEPRI, r3
   163b0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   163b4:	4b16      	ldr	r3, [pc, #88]	; (16410 <z_time_slice+0x70>)
   163b6:	4a17      	ldr	r2, [pc, #92]	; (16414 <z_time_slice+0x74>)
   163b8:	6898      	ldr	r0, [r3, #8]
   163ba:	6815      	ldr	r5, [r2, #0]
   163bc:	42a8      	cmp	r0, r5
   163be:	461d      	mov	r5, r3
   163c0:	d106      	bne.n	163d0 <z_time_slice+0x30>
			z_reset_time_slice();
   163c2:	f7ff fe9b 	bl	160fc <z_reset_time_slice>
	__asm__ volatile(
   163c6:	f384 8811 	msr	BASEPRI, r4
   163ca:	f3bf 8f6f 	isb	sy
}
   163ce:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   163d0:	2600      	movs	r6, #0
   163d2:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   163d4:	4a10      	ldr	r2, [pc, #64]	; (16418 <z_time_slice+0x78>)
   163d6:	6812      	ldr	r2, [r2, #0]
   163d8:	b1ba      	cbz	r2, 1640a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   163da:	89c2      	ldrh	r2, [r0, #14]
   163dc:	2a7f      	cmp	r2, #127	; 0x7f
   163de:	d814      	bhi.n	1640a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   163e0:	7b42      	ldrb	r2, [r0, #13]
   163e2:	06d2      	lsls	r2, r2, #27
   163e4:	d111      	bne.n	1640a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   163e6:	4a0d      	ldr	r2, [pc, #52]	; (1641c <z_time_slice+0x7c>)
   163e8:	f990 600e 	ldrsb.w	r6, [r0, #14]
   163ec:	6812      	ldr	r2, [r2, #0]
   163ee:	4296      	cmp	r6, r2
   163f0:	db0b      	blt.n	1640a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   163f2:	4a0b      	ldr	r2, [pc, #44]	; (16420 <z_time_slice+0x80>)
   163f4:	4290      	cmp	r0, r2
   163f6:	d008      	beq.n	1640a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   163f8:	695a      	ldr	r2, [r3, #20]
   163fa:	428a      	cmp	r2, r1
   163fc:	dc02      	bgt.n	16404 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   163fe:	f7ff ff95 	bl	1632c <move_thread_to_end_of_prio_q>
   16402:	e7de      	b.n	163c2 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   16404:	1a52      	subs	r2, r2, r1
   16406:	615a      	str	r2, [r3, #20]
   16408:	e7dd      	b.n	163c6 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1640a:	2300      	movs	r3, #0
   1640c:	616b      	str	r3, [r5, #20]
   1640e:	e7da      	b.n	163c6 <z_time_slice+0x26>
   16410:	200153f0 	.word	0x200153f0
   16414:	20015428 	.word	0x20015428
   16418:	20015430 	.word	0x20015430
   1641c:	2001542c 	.word	0x2001542c
   16420:	20014a60 	.word	0x20014a60

00016424 <z_impl_k_thread_suspend>:
{
   16424:	b570      	push	{r4, r5, r6, lr}
   16426:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   16428:	3018      	adds	r0, #24
   1642a:	f004 f967 	bl	1a6fc <z_abort_timeout>
	__asm__ volatile(
   1642e:	f04f 0320 	mov.w	r3, #32
   16432:	f3ef 8611 	mrs	r6, BASEPRI
   16436:	f383 8811 	msr	BASEPRI, r3
   1643a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1643e:	f994 300d 	ldrsb.w	r3, [r4, #13]
   16442:	2b00      	cmp	r3, #0
   16444:	da07      	bge.n	16456 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   16446:	4621      	mov	r1, r4
   16448:	480e      	ldr	r0, [pc, #56]	; (16484 <z_impl_k_thread_suspend+0x60>)
   1644a:	f7ff febf 	bl	161cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1644e:	7b63      	ldrb	r3, [r4, #13]
   16450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16454:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   16456:	4d0c      	ldr	r5, [pc, #48]	; (16488 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   16458:	7b63      	ldrb	r3, [r4, #13]
   1645a:	68a8      	ldr	r0, [r5, #8]
   1645c:	f043 0310 	orr.w	r3, r3, #16
   16460:	7363      	strb	r3, [r4, #13]
   16462:	1b03      	subs	r3, r0, r4
   16464:	4258      	negs	r0, r3
   16466:	4158      	adcs	r0, r3
   16468:	f7ff fec6 	bl	161f8 <update_cache>
	__asm__ volatile(
   1646c:	f386 8811 	msr	BASEPRI, r6
   16470:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   16474:	68ab      	ldr	r3, [r5, #8]
   16476:	42a3      	cmp	r3, r4
   16478:	d103      	bne.n	16482 <z_impl_k_thread_suspend+0x5e>
}
   1647a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1647e:	f004 b801 	b.w	1a484 <z_reschedule_unlocked>
}
   16482:	bd70      	pop	{r4, r5, r6, pc}
   16484:	2001541c 	.word	0x2001541c
   16488:	200153f0 	.word	0x200153f0

0001648c <z_thread_single_abort>:
{
   1648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16490:	4604      	mov	r4, r0
	__asm__ volatile(
   16492:	f04f 0320 	mov.w	r3, #32
   16496:	f3ef 8211 	mrs	r2, BASEPRI
   1649a:	f383 8811 	msr	BASEPRI, r3
   1649e:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   164a2:	7b43      	ldrb	r3, [r0, #13]
   164a4:	f013 0f28 	tst.w	r3, #40	; 0x28
   164a8:	d005      	beq.n	164b6 <z_thread_single_abort+0x2a>
	__asm__ volatile(
   164aa:	f382 8811 	msr	BASEPRI, r2
   164ae:	f3bf 8f6f 	isb	sy
}
   164b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   164b6:	f043 0320 	orr.w	r3, r3, #32
   164ba:	7343      	strb	r3, [r0, #13]
   164bc:	f382 8811 	msr	BASEPRI, r2
   164c0:	f3bf 8f6f 	isb	sy
   164c4:	3018      	adds	r0, #24
   164c6:	f004 f919 	bl	1a6fc <z_abort_timeout>
	__asm__ volatile(
   164ca:	f04f 0320 	mov.w	r3, #32
   164ce:	f3ef 8611 	mrs	r6, BASEPRI
   164d2:	f383 8811 	msr	BASEPRI, r3
   164d6:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   164da:	7b63      	ldrb	r3, [r4, #13]
   164dc:	06d8      	lsls	r0, r3, #27
   164de:	d116      	bne.n	1650e <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   164e0:	69a2      	ldr	r2, [r4, #24]
   164e2:	b9a2      	cbnz	r2, 1650e <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   164e4:	0619      	lsls	r1, r3, #24
   164e6:	d507      	bpl.n	164f8 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   164e8:	4621      	mov	r1, r4
   164ea:	4826      	ldr	r0, [pc, #152]	; (16584 <z_thread_single_abort+0xf8>)
   164ec:	f7ff fe6e 	bl	161cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   164f0:	7b63      	ldrb	r3, [r4, #13]
   164f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   164f6:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   164f8:	4b23      	ldr	r3, [pc, #140]	; (16588 <z_thread_single_abort+0xfc>)
   164fa:	6898      	ldr	r0, [r3, #8]
   164fc:	1b02      	subs	r2, r0, r4
   164fe:	4250      	negs	r0, r2
   16500:	4150      	adcs	r0, r2
   16502:	f7ff fe79 	bl	161f8 <update_cache>
			waiter->base.pended_on = NULL;
   16506:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   16508:	f104 0830 	add.w	r8, r4, #48	; 0x30
   1650c:	e01e      	b.n	1654c <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   1650e:	079b      	lsls	r3, r3, #30
   16510:	d5f9      	bpl.n	16506 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   16512:	4621      	mov	r1, r4
   16514:	68a0      	ldr	r0, [r4, #8]
   16516:	f7ff fe59 	bl	161cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1651a:	7b63      	ldrb	r3, [r4, #13]
   1651c:	f023 0302 	bic.w	r3, r3, #2
   16520:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   16522:	2300      	movs	r3, #0
   16524:	60a3      	str	r3, [r4, #8]
   16526:	e7ee      	b.n	16506 <z_thread_single_abort+0x7a>
   16528:	f105 0018 	add.w	r0, r5, #24
   1652c:	f004 f8e6 	bl	1a6fc <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   16530:	68a8      	ldr	r0, [r5, #8]
   16532:	4629      	mov	r1, r5
   16534:	f7ff fe4a 	bl	161cc <z_priq_dumb_remove>
   16538:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1653a:	4628      	mov	r0, r5
   1653c:	f023 0302 	bic.w	r3, r3, #2
   16540:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   16542:	60af      	str	r7, [r5, #8]
   16544:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   16548:	f7ff fe9a 	bl	16280 <ready_thread>
	return list->head == list;
   1654c:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1654e:	4545      	cmp	r5, r8
   16550:	d001      	beq.n	16556 <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   16552:	2d00      	cmp	r5, #0
   16554:	d1e8      	bne.n	16528 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   16556:	4b0c      	ldr	r3, [pc, #48]	; (16588 <z_thread_single_abort+0xfc>)
   16558:	689a      	ldr	r2, [r3, #8]
   1655a:	4b0c      	ldr	r3, [pc, #48]	; (1658c <z_thread_single_abort+0x100>)
   1655c:	429a      	cmp	r2, r3
   1655e:	d102      	bne.n	16566 <z_thread_single_abort+0xda>
			update_cache(1);
   16560:	2001      	movs	r0, #1
   16562:	f7ff fe49 	bl	161f8 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   16566:	7b63      	ldrb	r3, [r4, #13]
   16568:	f043 0308 	orr.w	r3, r3, #8
   1656c:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1656e:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   16570:	f386 8811 	msr	BASEPRI, r6
   16574:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   16578:	2b00      	cmp	r3, #0
   1657a:	d09a      	beq.n	164b2 <z_thread_single_abort+0x26>
		fn_abort(thread);
   1657c:	4620      	mov	r0, r4
}
   1657e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   16582:	4718      	bx	r3
   16584:	2001541c 	.word	0x2001541c
   16588:	200153f0 	.word	0x200153f0
   1658c:	20014a60 	.word	0x20014a60

00016590 <unready_thread>:
{
   16590:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   16592:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   16596:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   16598:	2b00      	cmp	r3, #0
   1659a:	da06      	bge.n	165aa <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1659c:	4807      	ldr	r0, [pc, #28]	; (165bc <unready_thread+0x2c>)
   1659e:	f7ff fe15 	bl	161cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   165a2:	7b4b      	ldrb	r3, [r1, #13]
   165a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   165a8:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   165aa:	4b05      	ldr	r3, [pc, #20]	; (165c0 <unready_thread+0x30>)
   165ac:	6898      	ldr	r0, [r3, #8]
   165ae:	1a43      	subs	r3, r0, r1
   165b0:	4258      	negs	r0, r3
   165b2:	4158      	adcs	r0, r3
}
   165b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   165b8:	f7ff be1e 	b.w	161f8 <update_cache>
   165bc:	2001541c 	.word	0x2001541c
   165c0:	200153f0 	.word	0x200153f0

000165c4 <pend>:
{
   165c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   165c8:	4606      	mov	r6, r0
   165ca:	4614      	mov	r4, r2
   165cc:	461d      	mov	r5, r3
	__asm__ volatile(
   165ce:	f04f 0320 	mov.w	r3, #32
   165d2:	f3ef 8711 	mrs	r7, BASEPRI
   165d6:	f383 8811 	msr	BASEPRI, r3
   165da:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   165de:	f003 ffb7 	bl	1a550 <add_to_waitq_locked>
	__asm__ volatile(
   165e2:	f387 8811 	msr	BASEPRI, r7
   165e6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   165ea:	1c6b      	adds	r3, r5, #1
   165ec:	bf08      	it	eq
   165ee:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   165f2:	d008      	beq.n	16606 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   165f4:	4622      	mov	r2, r4
   165f6:	462b      	mov	r3, r5
   165f8:	f106 0018 	add.w	r0, r6, #24
   165fc:	4903      	ldr	r1, [pc, #12]	; (1660c <pend+0x48>)
}
   165fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16602:	f000 bb2d 	b.w	16c60 <z_add_timeout>
   16606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1660a:	bf00      	nop
   1660c:	0001a511 	.word	0x0001a511

00016610 <z_pend_curr>:
{
   16610:	b510      	push	{r4, lr}
   16612:	460c      	mov	r4, r1
	pending_current = _current;
   16614:	4b06      	ldr	r3, [pc, #24]	; (16630 <z_pend_curr+0x20>)
{
   16616:	4611      	mov	r1, r2
	pending_current = _current;
   16618:	6898      	ldr	r0, [r3, #8]
   1661a:	4b06      	ldr	r3, [pc, #24]	; (16634 <z_pend_curr+0x24>)
   1661c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1661e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   16622:	f7ff ffcf 	bl	165c4 <pend>
   16626:	4620      	mov	r0, r4
}
   16628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1662c:	f7f8 bbbc 	b.w	eda8 <arch_swap>
   16630:	200153f0 	.word	0x200153f0
   16634:	20015428 	.word	0x20015428

00016638 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   16638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1663a:	4605      	mov	r5, r0
   1663c:	9101      	str	r1, [sp, #4]
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
   1663e:	f004 f89e 	bl	1a77e <z_tick_get_32>
   16642:	4604      	mov	r4, r0
	__asm__ volatile(
   16644:	f04f 0220 	mov.w	r2, #32
   16648:	f3ef 8711 	mrs	r7, BASEPRI
   1664c:	f382 8811 	msr	BASEPRI, r2
   16650:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   16654:	4e12      	ldr	r6, [pc, #72]	; (166a0 <z_tick_sleep.part.0+0x68>)
   16656:	4a13      	ldr	r2, [pc, #76]	; (166a4 <z_tick_sleep.part.0+0x6c>)
   16658:	68b0      	ldr	r0, [r6, #8]
   1665a:	6010      	str	r0, [r2, #0]
#endif
	unready_thread(_current);
   1665c:	f7ff ff98 	bl	16590 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   16660:	68b0      	ldr	r0, [r6, #8]
   16662:	4911      	ldr	r1, [pc, #68]	; (166a8 <z_tick_sleep.part.0+0x70>)
   16664:	462a      	mov	r2, r5
   16666:	9b01      	ldr	r3, [sp, #4]
   16668:	3018      	adds	r0, #24
   1666a:	f000 faf9 	bl	16c60 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1666e:	68b2      	ldr	r2, [r6, #8]
   16670:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   16672:	7b53      	ldrb	r3, [r2, #13]
   16674:	f043 0310 	orr.w	r3, r3, #16
   16678:	7353      	strb	r3, [r2, #13]
   1667a:	f7f8 fb95 	bl	eda8 <arch_swap>
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1667e:	1960      	adds	r0, r4, r5

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   16680:	4604      	mov	r4, r0
   16682:	f004 f87c 	bl	1a77e <z_tick_get_32>
   16686:	2500      	movs	r5, #0
   16688:	1a24      	subs	r4, r4, r0
   1668a:	f165 0500 	sbc.w	r5, r5, #0
   1668e:	2c00      	cmp	r4, #0
   16690:	f175 0300 	sbcs.w	r3, r5, #0
   16694:	bfb8      	it	lt
   16696:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   16698:	4620      	mov	r0, r4
   1669a:	b003      	add	sp, #12
   1669c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1669e:	bf00      	nop
   166a0:	200153f0 	.word	0x200153f0
   166a4:	20015428 	.word	0x20015428
   166a8:	0001a511 	.word	0x0001a511

000166ac <z_set_prio>:
{
   166ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   166b0:	4604      	mov	r4, r0
   166b2:	f04f 0320 	mov.w	r3, #32
   166b6:	f3ef 8811 	mrs	r8, BASEPRI
   166ba:	f383 8811 	msr	BASEPRI, r3
   166be:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   166c2:	7b43      	ldrb	r3, [r0, #13]
   166c4:	b24e      	sxtb	r6, r1
   166c6:	06db      	lsls	r3, r3, #27
   166c8:	d12e      	bne.n	16728 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   166ca:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   166cc:	bb65      	cbnz	r5, 16728 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   166ce:	4f18      	ldr	r7, [pc, #96]	; (16730 <z_set_prio+0x84>)
   166d0:	4621      	mov	r1, r4
   166d2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   166d6:	f7ff fd79 	bl	161cc <z_priq_dumb_remove>
	return list->head == list;
   166da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   166dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   166de:	4283      	cmp	r3, r0
   166e0:	bf18      	it	ne
   166e2:	461d      	movne	r5, r3
   166e4:	2d00      	cmp	r5, #0
   166e6:	bf38      	it	cc
   166e8:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   166ea:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   166ec:	b1b5      	cbz	r5, 1671c <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   166ee:	f995 100e 	ldrsb.w	r1, [r5, #14]
   166f2:	42b1      	cmp	r1, r6
   166f4:	dc03      	bgt.n	166fe <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   166f6:	42aa      	cmp	r2, r5
   166f8:	d010      	beq.n	1671c <z_set_prio+0x70>
   166fa:	682d      	ldr	r5, [r5, #0]
   166fc:	e7f6      	b.n	166ec <z_set_prio+0x40>
	node->prev = successor->prev;
   166fe:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   16700:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   16704:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   16706:	606c      	str	r4, [r5, #4]
			update_cache(1);
   16708:	2001      	movs	r0, #1
   1670a:	f7ff fd75 	bl	161f8 <update_cache>
   1670e:	2001      	movs	r0, #1
	__asm__ volatile(
   16710:	f388 8811 	msr	BASEPRI, r8
   16714:	f3bf 8f6f 	isb	sy
}
   16718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1671c:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   16720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16722:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16724:	633c      	str	r4, [r7, #48]	; 0x30
}
   16726:	e7ef      	b.n	16708 <z_set_prio+0x5c>
			thread->base.prio = prio;
   16728:	2000      	movs	r0, #0
   1672a:	73a6      	strb	r6, [r4, #14]
   1672c:	e7f0      	b.n	16710 <z_set_prio+0x64>
   1672e:	bf00      	nop
   16730:	200153f0 	.word	0x200153f0

00016734 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   16734:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   16736:	4b04      	ldr	r3, [pc, #16]	; (16748 <z_sched_init+0x14>)
   16738:	4608      	mov	r0, r1
   1673a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1673e:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   16742:	f7ff bcf1 	b.w	16128 <k_sched_time_slice_set>
   16746:	bf00      	nop
   16748:	200153f0 	.word	0x200153f0

0001674c <z_impl_k_yield>:
{
   1674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1674e:	4c24      	ldr	r4, [pc, #144]	; (167e0 <z_impl_k_yield+0x94>)
   16750:	4b24      	ldr	r3, [pc, #144]	; (167e4 <z_impl_k_yield+0x98>)
   16752:	68a2      	ldr	r2, [r4, #8]
   16754:	429a      	cmp	r2, r3
   16756:	d030      	beq.n	167ba <z_impl_k_yield+0x6e>
	__asm__ volatile(
   16758:	f04f 0320 	mov.w	r3, #32
   1675c:	f3ef 8511 	mrs	r5, BASEPRI
   16760:	f383 8811 	msr	BASEPRI, r3
   16764:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   16768:	68a1      	ldr	r1, [r4, #8]
   1676a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1676e:	f7ff fd2d 	bl	161cc <z_priq_dumb_remove>
	return list->head == list;
   16772:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   16774:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16776:	4283      	cmp	r3, r0
   16778:	bf08      	it	eq
   1677a:	2300      	moveq	r3, #0
   1677c:	2b00      	cmp	r3, #0
   1677e:	bf38      	it	cc
   16780:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16782:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16784:	b32b      	cbz	r3, 167d2 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   16786:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1678a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1678e:	42b7      	cmp	r7, r6
   16790:	db03      	blt.n	1679a <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   16792:	428b      	cmp	r3, r1
   16794:	d01d      	beq.n	167d2 <z_impl_k_yield+0x86>
   16796:	681b      	ldr	r3, [r3, #0]
   16798:	e7f4      	b.n	16784 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1679a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1679c:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   167a0:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   167a2:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   167a4:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   167a6:	2001      	movs	r0, #1
   167a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   167ac:	7353      	strb	r3, [r2, #13]
   167ae:	f7ff fd23 	bl	161f8 <update_cache>
	__asm__ volatile(
   167b2:	f385 8811 	msr	BASEPRI, r5
   167b6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   167ba:	f04f 0320 	mov.w	r3, #32
   167be:	f3ef 8011 	mrs	r0, BASEPRI
   167c2:	f383 8811 	msr	BASEPRI, r3
   167c6:	f3bf 8f6f 	isb	sy
}
   167ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   167ce:	f7f8 baeb 	b.w	eda8 <arch_swap>
	node->prev = list->tail;
   167d2:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   167d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   167d8:	601a      	str	r2, [r3, #0]
	list->tail = node;
   167da:	6322      	str	r2, [r4, #48]	; 0x30
}
   167dc:	e7e2      	b.n	167a4 <z_impl_k_yield+0x58>
   167de:	bf00      	nop
   167e0:	200153f0 	.word	0x200153f0
   167e4:	20014a60 	.word	0x20014a60

000167e8 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   167e8:	f1b1 3fff 	cmp.w	r1, #4294967295
   167ec:	bf08      	it	eq
   167ee:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   167f2:	b508      	push	{r3, lr}
   167f4:	4602      	mov	r2, r0
   167f6:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   167f8:	d106      	bne.n	16808 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   167fa:	4b0b      	ldr	r3, [pc, #44]	; (16828 <z_impl_k_sleep+0x40>)
   167fc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   167fe:	f7ff fe11 	bl	16424 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   16802:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   16806:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   16808:	4313      	orrs	r3, r2
   1680a:	d10a      	bne.n	16822 <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   1680c:	f7ff ff9e 	bl	1674c <z_impl_k_yield>
		return 0;
   16810:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   16812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16816:	fb80 2303 	smull	r2, r3, r0, r3
   1681a:	0bd0      	lsrs	r0, r2, #15
   1681c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   16820:	e7f1      	b.n	16806 <z_impl_k_sleep+0x1e>
   16822:	f7ff ff09 	bl	16638 <z_tick_sleep.part.0>
   16826:	e7f4      	b.n	16812 <z_impl_k_sleep+0x2a>
   16828:	200153f0 	.word	0x200153f0

0001682c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1682c:	4b01      	ldr	r3, [pc, #4]	; (16834 <z_impl_k_current_get+0x8>)
   1682e:	6898      	ldr	r0, [r3, #8]
   16830:	4770      	bx	lr
   16832:	bf00      	nop
   16834:	200153f0 	.word	0x200153f0

00016838 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   16838:	b538      	push	{r3, r4, r5, lr}
   1683a:	4604      	mov	r4, r0
   1683c:	f04f 0320 	mov.w	r3, #32
   16840:	f3ef 8511 	mrs	r5, BASEPRI
   16844:	f383 8811 	msr	BASEPRI, r3
   16848:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1684c:	f003 feab 	bl	1a5a6 <z_unpend_first_thread>

	if (thread != NULL) {
   16850:	b150      	cbz	r0, 16868 <z_impl_k_sem_give+0x30>
   16852:	2200      	movs	r2, #0
   16854:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   16858:	f003 fe4a 	bl	1a4f0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1685c:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1685e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   16862:	4807      	ldr	r0, [pc, #28]	; (16880 <z_impl_k_sem_give+0x48>)
   16864:	f7ff bc8c 	b.w	16180 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   16868:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1686c:	429a      	cmp	r2, r3
   1686e:	bf18      	it	ne
   16870:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   16872:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   16874:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   16876:	f104 0010 	add.w	r0, r4, #16
   1687a:	f004 f8e2 	bl	1aa42 <z_handle_obj_poll_events>
}
   1687e:	e7ed      	b.n	1685c <z_impl_k_sem_give+0x24>
   16880:	200179ee 	.word	0x200179ee

00016884 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   16884:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16886:	4614      	mov	r4, r2
   16888:	461d      	mov	r5, r3
   1688a:	f04f 0320 	mov.w	r3, #32
   1688e:	f3ef 8111 	mrs	r1, BASEPRI
   16892:	f383 8811 	msr	BASEPRI, r3
   16896:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1689a:	6883      	ldr	r3, [r0, #8]
   1689c:	b143      	cbz	r3, 168b0 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1689e:	3b01      	subs	r3, #1
   168a0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   168a2:	f381 8811 	msr	BASEPRI, r1
   168a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   168aa:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   168ac:	b003      	add	sp, #12
   168ae:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   168b0:	ea54 0305 	orrs.w	r3, r4, r5
   168b4:	d106      	bne.n	168c4 <z_impl_k_sem_take+0x40>
   168b6:	f381 8811 	msr	BASEPRI, r1
   168ba:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   168be:	f06f 000f 	mvn.w	r0, #15
   168c2:	e7f3      	b.n	168ac <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   168c4:	4602      	mov	r2, r0
   168c6:	e9cd 4500 	strd	r4, r5, [sp]
   168ca:	4802      	ldr	r0, [pc, #8]	; (168d4 <z_impl_k_sem_take+0x50>)
   168cc:	f7ff fea0 	bl	16610 <z_pend_curr>
	return ret;
   168d0:	e7ec      	b.n	168ac <z_impl_k_sem_take+0x28>
   168d2:	bf00      	nop
   168d4:	200179ee 	.word	0x200179ee

000168d8 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   168d8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   168da:	4c08      	ldr	r4, [pc, #32]	; (168fc <k_sys_work_q_init+0x24>)
   168dc:	f04f 33ff 	mov.w	r3, #4294967295
   168e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   168e4:	4620      	mov	r0, r4
   168e6:	4906      	ldr	r1, [pc, #24]	; (16900 <k_sys_work_q_init+0x28>)
   168e8:	f000 f8dc 	bl	16aa4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   168ec:	4905      	ldr	r1, [pc, #20]	; (16904 <k_sys_work_q_init+0x2c>)
   168ee:	f104 0018 	add.w	r0, r4, #24
   168f2:	f003 fea7 	bl	1a644 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   168f6:	2000      	movs	r0, #0
   168f8:	bd10      	pop	{r4, pc}
   168fa:	bf00      	nop
   168fc:	20014bf0 	.word	0x20014bf0
   16900:	20019f30 	.word	0x20019f30
   16904:	0001b640 	.word	0x0001b640

00016908 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   16908:	e92d 41b0 	stmdb	sp!, {r4, r5, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1690c:	f100 0530 	add.w	r5, r0, #48	; 0x30
   16910:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
   16912:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   16916:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   16918:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
   1691a:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1691c:	2504      	movs	r5, #4
   1691e:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   16920:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   16922:	3207      	adds	r2, #7
	thread_base->prio = priority;
   16924:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
   16926:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   16928:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   1692c:	e9c0 121b 	strd	r1, r2, [r0, #108]	; 0x6c
	stack_ptr = (char *)stack + stack_obj_size;
   16930:	eb01 0802 	add.w	r8, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   16934:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	node->prev = NULL;
   16936:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->sched_locked = 0U;
   1693a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1693c:	6745      	str	r5, [r0, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1693e:	9202      	str	r2, [sp, #8]
   16940:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16942:	9201      	str	r2, [sp, #4]
   16944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16946:	9200      	str	r2, [sp, #0]
   16948:	4642      	mov	r2, r8
   1694a:	f7f8 fa8b 	bl	ee64 <arch_new_thread>
	if (!_current) {
   1694e:	4b05      	ldr	r3, [pc, #20]	; (16964 <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
   16950:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   16954:	689b      	ldr	r3, [r3, #8]
   16956:	b103      	cbz	r3, 1695a <z_setup_new_thread+0x52>
	new_thread->resource_pool = _current->resource_pool;
   16958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
   1695a:	4640      	mov	r0, r8
   1695c:	67a3      	str	r3, [r4, #120]	; 0x78
   1695e:	b005      	add	sp, #20
   16960:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
   16964:	200153f0 	.word	0x200153f0

00016968 <z_impl_k_thread_create>:
{
   16968:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1696a:	2500      	movs	r5, #0
{
   1696c:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1696e:	9505      	str	r5, [sp, #20]
   16970:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   16972:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   16976:	9504      	str	r5, [sp, #16]
   16978:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   1697a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1697c:	9503      	str	r5, [sp, #12]
   1697e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   16980:	9502      	str	r5, [sp, #8]
   16982:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   16984:	9501      	str	r5, [sp, #4]
   16986:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   16988:	9500      	str	r5, [sp, #0]
   1698a:	f7ff ffbd 	bl	16908 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1698e:	1c7b      	adds	r3, r7, #1
   16990:	bf08      	it	eq
   16992:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   16996:	d005      	beq.n	169a4 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16998:	ea56 0307 	orrs.w	r3, r6, r7
   1699c:	d105      	bne.n	169aa <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1699e:	4620      	mov	r0, r4
   169a0:	f7ff fca6 	bl	162f0 <z_sched_start>
}
   169a4:	4620      	mov	r0, r4
   169a6:	b007      	add	sp, #28
   169a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   169aa:	4632      	mov	r2, r6
   169ac:	463b      	mov	r3, r7
   169ae:	4903      	ldr	r1, [pc, #12]	; (169bc <z_impl_k_thread_create+0x54>)
   169b0:	f104 0018 	add.w	r0, r4, #24
   169b4:	f000 f954 	bl	16c60 <z_add_timeout>
   169b8:	e7f4      	b.n	169a4 <z_impl_k_thread_create+0x3c>
   169ba:	bf00      	nop
   169bc:	0001a511 	.word	0x0001a511

000169c0 <z_init_static_threads>:
{
   169c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   169c4:	4e2a      	ldr	r6, [pc, #168]	; (16a70 <z_init_static_threads+0xb0>)
   169c6:	4d2b      	ldr	r5, [pc, #172]	; (16a74 <z_init_static_threads+0xb4>)
   169c8:	46b0      	mov	r8, r6
{
   169ca:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   169cc:	42b5      	cmp	r5, r6
   169ce:	f105 0430 	add.w	r4, r5, #48	; 0x30
   169d2:	d310      	bcc.n	169f6 <z_init_static_threads+0x36>
	k_sched_lock();
   169d4:	f7ff fbe6 	bl	161a4 <k_sched_lock>
   169d8:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   169dc:	f240 36e7 	movw	r6, #999	; 0x3e7
   169e0:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   169e2:	4c24      	ldr	r4, [pc, #144]	; (16a74 <z_init_static_threads+0xb4>)
   169e4:	f8df a090 	ldr.w	sl, [pc, #144]	; 16a78 <z_init_static_threads+0xb8>
   169e8:	4544      	cmp	r4, r8
   169ea:	d321      	bcc.n	16a30 <z_init_static_threads+0x70>
}
   169ec:	b006      	add	sp, #24
   169ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   169f2:	f7ff bc29 	b.w	16248 <k_sched_unlock>
		z_setup_new_thread(
   169f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   169fa:	9305      	str	r3, [sp, #20]
   169fc:	f854 3c10 	ldr.w	r3, [r4, #-16]
   16a00:	9304      	str	r3, [sp, #16]
   16a02:	f854 3c14 	ldr.w	r3, [r4, #-20]
   16a06:	9303      	str	r3, [sp, #12]
   16a08:	f854 3c18 	ldr.w	r3, [r4, #-24]
   16a0c:	9302      	str	r3, [sp, #8]
   16a0e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   16a12:	9301      	str	r3, [sp, #4]
   16a14:	f854 3c20 	ldr.w	r3, [r4, #-32]
   16a18:	9300      	str	r3, [sp, #0]
   16a1a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   16a1e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   16a22:	f7ff ff71 	bl	16908 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   16a26:	f854 3c30 	ldr.w	r3, [r4, #-48]
   16a2a:	65dd      	str	r5, [r3, #92]	; 0x5c
   16a2c:	4625      	mov	r5, r4
   16a2e:	e7cd      	b.n	169cc <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   16a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16a32:	1c5a      	adds	r2, r3, #1
   16a34:	d00d      	beq.n	16a52 <z_init_static_threads+0x92>
   16a36:	4630      	mov	r0, r6
   16a38:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   16a3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   16a3e:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16a42:	42b9      	cmp	r1, r7
   16a44:	bf08      	it	eq
   16a46:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   16a48:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16a4a:	d104      	bne.n	16a56 <z_init_static_threads+0x96>
	z_sched_start(thread);
   16a4c:	4628      	mov	r0, r5
   16a4e:	f7ff fc4f 	bl	162f0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   16a52:	3430      	adds	r4, #48	; 0x30
   16a54:	e7c8      	b.n	169e8 <z_init_static_threads+0x28>
   16a56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16a5a:	2300      	movs	r3, #0
   16a5c:	f7f6 f85e 	bl	cb1c <__aeabi_uldivmod>
   16a60:	4602      	mov	r2, r0
   16a62:	460b      	mov	r3, r1
   16a64:	f105 0018 	add.w	r0, r5, #24
   16a68:	4651      	mov	r1, sl
   16a6a:	f000 f8f9 	bl	16c60 <z_add_timeout>
   16a6e:	e7f0      	b.n	16a52 <z_init_static_threads+0x92>
   16a70:	20014644 	.word	0x20014644
   16a74:	20014614 	.word	0x20014614
   16a78:	0001a511 	.word	0x0001a511

00016a7c <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   16a7c:	b508      	push	{r3, lr}
	__asm__ volatile(
   16a7e:	f04f 0320 	mov.w	r3, #32
   16a82:	f3ef 8411 	mrs	r4, BASEPRI
   16a86:	f383 8811 	msr	BASEPRI, r3
   16a8a:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   16a8e:	4b04      	ldr	r3, [pc, #16]	; (16aa0 <z_self_abort+0x24>)
   16a90:	6898      	ldr	r0, [r3, #8]
   16a92:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   16a94:	f7ff fcc6 	bl	16424 <z_impl_k_thread_suspend>
   16a98:	4620      	mov	r0, r4
   16a9a:	f7f8 f985 	bl	eda8 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   16a9e:	bf00      	nop
   16aa0:	200153f0 	.word	0x200153f0

00016aa4 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   16aa4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   16aa8:	b08a      	sub	sp, #40	; 0x28
   16aaa:	4604      	mov	r4, r0
   16aac:	461d      	mov	r5, r3
   16aae:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   16ab2:	f003 fcbb 	bl	1a42c <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   16ab6:	f104 0618 	add.w	r6, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16aba:	2000      	movs	r0, #0
   16abc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   16ac0:	f04f 0800 	mov.w	r8, #0
   16ac4:	f04f 0900 	mov.w	r9, #0
   16ac8:	e9cd 5003 	strd	r5, r0, [sp, #12]
   16acc:	e9cd 0001 	strd	r0, r0, [sp, #4]
   16ad0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   16ad4:	4630      	mov	r0, r6
   16ad6:	4b05      	ldr	r3, [pc, #20]	; (16aec <k_work_q_start+0x48>)
   16ad8:	9400      	str	r4, [sp, #0]
   16ada:	f7ff ff45 	bl	16968 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   16ade:	4630      	mov	r0, r6
   16ae0:	4903      	ldr	r1, [pc, #12]	; (16af0 <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   16ae2:	b00a      	add	sp, #40	; 0x28
   16ae4:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   16ae8:	f003 bdac 	b.w	1a644 <z_impl_k_thread_name_set>
   16aec:	000171f5 	.word	0x000171f5
   16af0:	0001b649 	.word	0x0001b649

00016af4 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   16af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16af8:	4606      	mov	r6, r0
   16afa:	460d      	mov	r5, r1
   16afc:	4690      	mov	r8, r2
   16afe:	4699      	mov	r9, r3
   16b00:	f04f 0320 	mov.w	r3, #32
   16b04:	f3ef 8711 	mrs	r7, BASEPRI
   16b08:	f383 8811 	msr	BASEPRI, r3
   16b0c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   16b10:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   16b12:	b17b      	cbz	r3, 16b34 <k_delayed_work_submit_to_queue+0x40>
   16b14:	4283      	cmp	r3, r0
   16b16:	d128      	bne.n	16b6a <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   16b18:	4628      	mov	r0, r5
   16b1a:	f003 fdaf 	bl	1a67c <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   16b1e:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   16b22:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   16b24:	d008      	beq.n	16b38 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   16b26:	2800      	cmp	r0, #0
   16b28:	da07      	bge.n	16b3a <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   16b2a:	f387 8811 	msr	BASEPRI, r7
   16b2e:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   16b32:	e00f      	b.n	16b54 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   16b34:	2800      	cmp	r0, #0
   16b36:	d0ef      	beq.n	16b18 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   16b38:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16b3a:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   16b3e:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16b40:	d10b      	bne.n	16b5a <k_delayed_work_submit_to_queue+0x66>
   16b42:	f387 8811 	msr	BASEPRI, r7
   16b46:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   16b4a:	4629      	mov	r1, r5
   16b4c:	4630      	mov	r0, r6
   16b4e:	f003 fd7c 	bl	1a64a <k_work_submit_to_queue>
		return 0;
   16b52:	2400      	movs	r4, #0
}
   16b54:	4620      	mov	r0, r4
   16b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   16b5a:	4642      	mov	r2, r8
   16b5c:	464b      	mov	r3, r9
   16b5e:	4904      	ldr	r1, [pc, #16]	; (16b70 <k_delayed_work_submit_to_queue+0x7c>)
   16b60:	f105 0010 	add.w	r0, r5, #16
   16b64:	f000 f87c 	bl	16c60 <z_add_timeout>
   16b68:	e7df      	b.n	16b2a <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   16b6a:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   16b6e:	e7dc      	b.n	16b2a <k_delayed_work_submit_to_queue+0x36>
   16b70:	0001a673 	.word	0x0001a673

00016b74 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   16b74:	4a02      	ldr	r2, [pc, #8]	; (16b80 <boot_banner+0xc>)
   16b76:	4903      	ldr	r1, [pc, #12]	; (16b84 <boot_banner+0x10>)
   16b78:	4803      	ldr	r0, [pc, #12]	; (16b88 <boot_banner+0x14>)
   16b7a:	f000 ba6b 	b.w	17054 <printk>
   16b7e:	bf00      	nop
   16b80:	0001b551 	.word	0x0001b551
   16b84:	0001b653 	.word	0x0001b653
   16b88:	0001b660 	.word	0x0001b660

00016b8c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   16b8c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   16b8e:	4806      	ldr	r0, [pc, #24]	; (16ba8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   16b90:	4a06      	ldr	r2, [pc, #24]	; (16bac <z_data_copy+0x20>)
   16b92:	4907      	ldr	r1, [pc, #28]	; (16bb0 <z_data_copy+0x24>)
   16b94:	1a12      	subs	r2, r2, r0
   16b96:	f001 f9a1 	bl	17edc <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   16b9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   16b9e:	4a05      	ldr	r2, [pc, #20]	; (16bb4 <z_data_copy+0x28>)
   16ba0:	4905      	ldr	r1, [pc, #20]	; (16bb8 <z_data_copy+0x2c>)
   16ba2:	4806      	ldr	r0, [pc, #24]	; (16bbc <z_data_copy+0x30>)
   16ba4:	f001 b99a 	b.w	17edc <memcpy>
   16ba8:	20014500 	.word	0x20014500
   16bac:	20014784 	.word	0x20014784
   16bb0:	0001b6a4 	.word	0x0001b6a4
   16bb4:	00000000 	.word	0x00000000
   16bb8:	0001b68c 	.word	0x0001b68c
   16bbc:	20014500 	.word	0x20014500

00016bc0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   16bc0:	4b03      	ldr	r3, [pc, #12]	; (16bd0 <elapsed+0x10>)
   16bc2:	681b      	ldr	r3, [r3, #0]
   16bc4:	b90b      	cbnz	r3, 16bca <elapsed+0xa>
   16bc6:	f7f8 b8d5 	b.w	ed74 <z_clock_elapsed>
}
   16bca:	2000      	movs	r0, #0
   16bcc:	4770      	bx	lr
   16bce:	bf00      	nop
   16bd0:	20015434 	.word	0x20015434

00016bd4 <remove_timeout>:
{
   16bd4:	b530      	push	{r4, r5, lr}
   16bd6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16bd8:	b168      	cbz	r0, 16bf6 <remove_timeout+0x22>
   16bda:	4a0a      	ldr	r2, [pc, #40]	; (16c04 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   16bdc:	6852      	ldr	r2, [r2, #4]
   16bde:	4290      	cmp	r0, r2
   16be0:	d009      	beq.n	16bf6 <remove_timeout+0x22>
	if (next(t) != NULL) {
   16be2:	b143      	cbz	r3, 16bf6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   16be4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   16be8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   16bec:	1912      	adds	r2, r2, r4
   16bee:	eb45 0101 	adc.w	r1, r5, r1
   16bf2:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   16bf6:	6842      	ldr	r2, [r0, #4]
   16bf8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   16bfa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16bfc:	2300      	movs	r3, #0
	node->prev = NULL;
   16bfe:	e9c0 3300 	strd	r3, r3, [r0]
}
   16c02:	bd30      	pop	{r4, r5, pc}
   16c04:	20014594 	.word	0x20014594

00016c08 <next_timeout>:
	return list->head == list;
   16c08:	4b13      	ldr	r3, [pc, #76]	; (16c58 <next_timeout+0x50>)

static int32_t next_timeout(void)
{
   16c0a:	b510      	push	{r4, lr}
   16c0c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16c0e:	429c      	cmp	r4, r3
   16c10:	bf08      	it	eq
   16c12:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   16c14:	f7ff ffd4 	bl	16bc0 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   16c18:	b1cc      	cbz	r4, 16c4e <next_timeout+0x46>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   16c1a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   16c1e:	1a12      	subs	r2, r2, r0
   16c20:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   16c24:	2a01      	cmp	r2, #1
   16c26:	f173 0100 	sbcs.w	r1, r3, #0
   16c2a:	db13      	blt.n	16c54 <next_timeout+0x4c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   16c2c:	4610      	mov	r0, r2
   16c2e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   16c32:	4619      	mov	r1, r3
   16c34:	2300      	movs	r3, #0
   16c36:	4282      	cmp	r2, r0
   16c38:	eb73 0401 	sbcs.w	r4, r3, r1
   16c3c:	da00      	bge.n	16c40 <next_timeout+0x38>
   16c3e:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   16c40:	4b06      	ldr	r3, [pc, #24]	; (16c5c <next_timeout+0x54>)
   16c42:	695b      	ldr	r3, [r3, #20]
   16c44:	b113      	cbz	r3, 16c4c <next_timeout+0x44>
   16c46:	4298      	cmp	r0, r3
   16c48:	bfa8      	it	ge
   16c4a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   16c4c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   16c4e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   16c52:	e7f5      	b.n	16c40 <next_timeout+0x38>
   16c54:	2000      	movs	r0, #0
   16c56:	e7f3      	b.n	16c40 <next_timeout+0x38>
   16c58:	20014594 	.word	0x20014594
   16c5c:	200153f0 	.word	0x200153f0

00016c60 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   16c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c64:	9101      	str	r1, [sp, #4]
   16c66:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16c68:	1c4b      	adds	r3, r1, #1
   16c6a:	bf08      	it	eq
   16c6c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   16c70:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16c72:	d070      	beq.n	16d56 <z_add_timeout+0xf6>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   16c74:	f06f 0301 	mvn.w	r3, #1
   16c78:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   16c7c:	1c54      	adds	r4, r2, #1
   16c7e:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   16c82:	ebb3 0804 	subs.w	r8, r3, r4
   16c86:	eb6b 0905 	sbc.w	r9, fp, r5
   16c8a:	f1b8 0f00 	cmp.w	r8, #0
   16c8e:	f179 0300 	sbcs.w	r3, r9, #0
   16c92:	db0f      	blt.n	16cb4 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   16c94:	f7ff ff94 	bl	16bc0 <elapsed>
   16c98:	f06f 0301 	mvn.w	r3, #1
   16c9c:	4a34      	ldr	r2, [pc, #208]	; (16d70 <z_add_timeout+0x110>)
   16c9e:	e9d2 1c00 	ldrd	r1, ip, [r2]
   16ca2:	1a5b      	subs	r3, r3, r1
   16ca4:	eb6b 020c 	sbc.w	r2, fp, ip
   16ca8:	1b1e      	subs	r6, r3, r4
   16caa:	eb62 0705 	sbc.w	r7, r2, r5
   16cae:	1a34      	subs	r4, r6, r0
   16cb0:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   16cb4:	9b01      	ldr	r3, [sp, #4]
   16cb6:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   16cba:	f04f 0320 	mov.w	r3, #32
   16cbe:	f3ef 8611 	mrs	r6, BASEPRI
   16cc2:	f383 8811 	msr	BASEPRI, r3
   16cc6:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   16cca:	f7ff ff79 	bl	16bc0 <elapsed>
	ticks = MAX(1, ticks);
   16cce:	2c01      	cmp	r4, #1
   16cd0:	f175 0300 	sbcs.w	r3, r5, #0
   16cd4:	bfbc      	itt	lt
   16cd6:	2401      	movlt	r4, #1
   16cd8:	2500      	movlt	r5, #0
	return list->head == list;
   16cda:	4b26      	ldr	r3, [pc, #152]	; (16d74 <z_add_timeout+0x114>)
		to->dticks = ticks + elapsed();
   16cdc:	1824      	adds	r4, r4, r0
   16cde:	681a      	ldr	r2, [r3, #0]
   16ce0:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16ce4:	429a      	cmp	r2, r3
   16ce6:	e9ca 4504 	strd	r4, r5, [sl, #16]
   16cea:	d001      	beq.n	16cf0 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16cec:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   16cee:	b952      	cbnz	r2, 16d06 <z_add_timeout+0xa6>
	node->prev = list->tail;
   16cf0:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   16cf2:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   16cf6:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   16cfa:	685a      	ldr	r2, [r3, #4]
   16cfc:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   16d00:	f8c3 a004 	str.w	sl, [r3, #4]
}
   16d04:	e014      	b.n	16d30 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   16d06:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   16d0a:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   16d0e:	4544      	cmp	r4, r8
   16d10:	eb75 0109 	sbcs.w	r1, r5, r9
   16d14:	da22      	bge.n	16d5c <z_add_timeout+0xfc>
				t->dticks -= to->dticks;
   16d16:	ebb8 0004 	subs.w	r0, r8, r4
   16d1a:	eb69 0105 	sbc.w	r1, r9, r5
   16d1e:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   16d22:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   16d24:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   16d28:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   16d2c:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   16d30:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16d32:	429a      	cmp	r2, r3
   16d34:	d00b      	beq.n	16d4e <z_add_timeout+0xee>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   16d36:	4592      	cmp	sl, r2
   16d38:	d109      	bne.n	16d4e <z_add_timeout+0xee>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   16d3a:	f7ff ff65 	bl	16c08 <next_timeout>

			if (next_time == 0 ||
   16d3e:	b118      	cbz	r0, 16d48 <z_add_timeout+0xe8>
			    _current_cpu->slice_ticks != next_time) {
   16d40:	4b0d      	ldr	r3, [pc, #52]	; (16d78 <z_add_timeout+0x118>)
			if (next_time == 0 ||
   16d42:	695b      	ldr	r3, [r3, #20]
   16d44:	4283      	cmp	r3, r0
   16d46:	d002      	beq.n	16d4e <z_add_timeout+0xee>
				z_clock_set_timeout(next_time, false);
   16d48:	2100      	movs	r1, #0
   16d4a:	f7f7 ffe1 	bl	ed10 <z_clock_set_timeout>
	__asm__ volatile(
   16d4e:	f386 8811 	msr	BASEPRI, r6
   16d52:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   16d56:	b003      	add	sp, #12
   16d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   16d5c:	ebb4 0008 	subs.w	r0, r4, r8
   16d60:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   16d64:	42ba      	cmp	r2, r7
   16d66:	e9ca 0104 	strd	r0, r1, [sl, #16]
   16d6a:	d0c1      	beq.n	16cf0 <z_add_timeout+0x90>
   16d6c:	6812      	ldr	r2, [r2, #0]
   16d6e:	e7be      	b.n	16cee <z_add_timeout+0x8e>
   16d70:	20014cd0 	.word	0x20014cd0
   16d74:	20014594 	.word	0x20014594
   16d78:	200153f0 	.word	0x200153f0

00016d7c <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   16d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d80:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   16d82:	f7ff fb0d 	bl	163a0 <z_time_slice>
	__asm__ volatile(
   16d86:	f04f 0320 	mov.w	r3, #32
   16d8a:	f3ef 8411 	mrs	r4, BASEPRI
   16d8e:	f383 8811 	msr	BASEPRI, r3
   16d92:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   16d96:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 16e48 <z_clock_announce+0xcc>
   16d9a:	4d2a      	ldr	r5, [pc, #168]	; (16e44 <z_clock_announce+0xc8>)
   16d9c:	4651      	mov	r1, sl
	return list->head == list;
   16d9e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 16e4c <z_clock_announce+0xd0>
   16da2:	602e      	str	r6, [r5, #0]
   16da4:	f8d5 c000 	ldr.w	ip, [r5]
   16da8:	f8db 0000 	ldr.w	r0, [fp]
   16dac:	4662      	mov	r2, ip
   16dae:	e9da 8900 	ldrd	r8, r9, [sl]
   16db2:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16db4:	4558      	cmp	r0, fp
   16db6:	e9cd 2300 	strd	r2, r3, [sp]
   16dba:	d00d      	beq.n	16dd8 <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   16dbc:	b160      	cbz	r0, 16dd8 <z_clock_announce+0x5c>
   16dbe:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   16dc2:	45b4      	cmp	ip, r6
   16dc4:	41bb      	sbcs	r3, r7
   16dc6:	da1d      	bge.n	16e04 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   16dc8:	9b00      	ldr	r3, [sp, #0]
   16dca:	ebb6 0c03 	subs.w	ip, r6, r3
   16dce:	9b01      	ldr	r3, [sp, #4]
   16dd0:	eb67 0603 	sbc.w	r6, r7, r3
   16dd4:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   16dd8:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   16dda:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   16ddc:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   16dde:	eb13 0208 	adds.w	r2, r3, r8
   16de2:	9b01      	ldr	r3, [sp, #4]
   16de4:	eb43 0309 	adc.w	r3, r3, r9
   16de8:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   16dec:	f7ff ff0c 	bl	16c08 <next_timeout>
   16df0:	4631      	mov	r1, r6
   16df2:	f7f7 ff8d 	bl	ed10 <z_clock_set_timeout>
	__asm__ volatile(
   16df6:	f384 8811 	msr	BASEPRI, r4
   16dfa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   16dfe:	b003      	add	sp, #12
   16e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   16e04:	2200      	movs	r2, #0
   16e06:	2300      	movs	r3, #0
		curr_tick += dt;
   16e08:	eb18 0806 	adds.w	r8, r8, r6
   16e0c:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   16e10:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   16e14:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   16e18:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   16e1c:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   16e1e:	f7ff fed9 	bl	16bd4 <remove_timeout>
   16e22:	f384 8811 	msr	BASEPRI, r4
   16e26:	f3bf 8f6f 	isb	sy
		t->fn(t);
   16e2a:	6883      	ldr	r3, [r0, #8]
   16e2c:	4798      	blx	r3
	__asm__ volatile(
   16e2e:	f04f 0320 	mov.w	r3, #32
   16e32:	f3ef 8411 	mrs	r4, BASEPRI
   16e36:	f383 8811 	msr	BASEPRI, r3
   16e3a:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   16e3e:	4902      	ldr	r1, [pc, #8]	; (16e48 <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   16e40:	e7b0      	b.n	16da4 <z_clock_announce+0x28>
   16e42:	bf00      	nop
   16e44:	20015434 	.word	0x20015434
   16e48:	20014cd0 	.word	0x20014cd0
   16e4c:	20014594 	.word	0x20014594

00016e50 <z_tick_get>:

int64_t z_tick_get(void)
{
   16e50:	b510      	push	{r4, lr}
   16e52:	f04f 0320 	mov.w	r3, #32
   16e56:	f3ef 8411 	mrs	r4, BASEPRI
   16e5a:	f383 8811 	msr	BASEPRI, r3
   16e5e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   16e62:	f7f7 ff87 	bl	ed74 <z_clock_elapsed>
   16e66:	4b06      	ldr	r3, [pc, #24]	; (16e80 <z_tick_get+0x30>)
   16e68:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e6c:	1812      	adds	r2, r2, r0
   16e6e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   16e72:	f384 8811 	msr	BASEPRI, r4
   16e76:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   16e7a:	4610      	mov	r0, r2
   16e7c:	4619      	mov	r1, r3
   16e7e:	bd10      	pop	{r4, pc}
   16e80:	20014cd0 	.word	0x20014cd0

00016e84 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   16e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   16e88:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   16e8a:	4b2a      	ldr	r3, [pc, #168]	; (16f34 <z_impl_k_poll+0xb0>)
{
   16e8c:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   16e8e:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   16e90:	2301      	movs	r3, #1
   16e92:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   16e96:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   16e9a:	ea52 0307 	orrs.w	r3, r2, r7
   16e9e:	bf0c      	ite	eq
   16ea0:	2301      	moveq	r3, #1
   16ea2:	2300      	movne	r3, #0
   16ea4:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   16ea8:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   16eaa:	f003 fd69 	bl	1a980 <register_events>
   16eae:	4681      	mov	r9, r0
	__asm__ volatile(
   16eb0:	f04f 0320 	mov.w	r3, #32
   16eb4:	f3ef 8a11 	mrs	sl, BASEPRI
   16eb8:	f383 8811 	msr	BASEPRI, r3
   16ebc:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   16ec0:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   16ec4:	b964      	cbnz	r4, 16ee0 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   16ec6:	4601      	mov	r1, r0
   16ec8:	4652      	mov	r2, sl
   16eca:	4640      	mov	r0, r8
   16ecc:	f003 fc86 	bl	1a7dc <clear_event_registrations>
	__asm__ volatile(
   16ed0:	f38a 8811 	msr	BASEPRI, sl
   16ed4:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   16ed8:	4620      	mov	r0, r4
   16eda:	b004      	add	sp, #16
   16edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   16ee0:	2300      	movs	r3, #0
   16ee2:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16ee6:	ea56 0307 	orrs.w	r3, r6, r7
   16eea:	d106      	bne.n	16efa <z_impl_k_poll+0x76>
   16eec:	f38a 8811 	msr	BASEPRI, sl
   16ef0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   16ef4:	f06f 040a 	mvn.w	r4, #10
   16ef8:	e7ee      	b.n	16ed8 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   16efa:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   16efc:	4651      	mov	r1, sl
   16efe:	e9cd 6700 	strd	r6, r7, [sp]
   16f02:	480d      	ldr	r0, [pc, #52]	; (16f38 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   16f04:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   16f08:	f7ff fb82 	bl	16610 <z_pend_curr>
   16f0c:	4604      	mov	r4, r0
	__asm__ volatile(
   16f0e:	f04f 0320 	mov.w	r3, #32
   16f12:	f3ef 8511 	mrs	r5, BASEPRI
   16f16:	f383 8811 	msr	BASEPRI, r3
   16f1a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   16f1e:	462a      	mov	r2, r5
   16f20:	4649      	mov	r1, r9
   16f22:	4640      	mov	r0, r8
   16f24:	f003 fc5a 	bl	1a7dc <clear_event_registrations>
	__asm__ volatile(
   16f28:	f385 8811 	msr	BASEPRI, r5
   16f2c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   16f30:	e7d2      	b.n	16ed8 <z_impl_k_poll+0x54>
   16f32:	bf00      	nop
   16f34:	200153f0 	.word	0x200153f0
   16f38:	200179ee 	.word	0x200179ee

00016f3c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   16f3c:	b538      	push	{r3, r4, r5, lr}
   16f3e:	4603      	mov	r3, r0
	__asm__ volatile(
   16f40:	f04f 0220 	mov.w	r2, #32
   16f44:	f3ef 8511 	mrs	r5, BASEPRI
   16f48:	f382 8811 	msr	BASEPRI, r2
   16f4c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   16f50:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   16f52:	2101      	movs	r1, #1
   16f54:	6081      	str	r1, [r0, #8]
	return list->head == list;
   16f56:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   16f58:	4283      	cmp	r3, r0
   16f5a:	d106      	bne.n	16f6a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   16f5c:	f385 8811 	msr	BASEPRI, r5
   16f60:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   16f64:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   16f66:	4620      	mov	r0, r4
   16f68:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   16f6a:	e9d0 3200 	ldrd	r3, r2, [r0]
   16f6e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   16f70:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16f72:	2300      	movs	r3, #0
	node->prev = NULL;
   16f74:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   16f78:	f003 fc6f 	bl	1a85a <signal_poll_event>
	z_reschedule(&lock, key);
   16f7c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   16f7e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   16f80:	4801      	ldr	r0, [pc, #4]	; (16f88 <z_impl_k_poll_signal_raise+0x4c>)
   16f82:	f7ff f8fd 	bl	16180 <z_reschedule>
	return rc;
   16f86:	e7ee      	b.n	16f66 <z_impl_k_poll_signal_raise+0x2a>
   16f88:	200179ee 	.word	0x200179ee

00016f8c <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   16f8c:	460a      	mov	r2, r1
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   16f8e:	4601      	mov	r1, r0
   16f90:	4801      	ldr	r0, [pc, #4]	; (16f98 <k_aligned_alloc+0xc>)
   16f92:	f003 bd64 	b.w	1aa5e <z_heap_aligned_alloc>
   16f96:	bf00      	nop
   16f98:	20014644 	.word	0x20014644

00016f9c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   16f9c:	b513      	push	{r0, r1, r4, lr}
   16f9e:	4604      	mov	r4, r0
   16fa0:	9101      	str	r1, [sp, #4]
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   16fa2:	f003 fb45 	bl	1a630 <k_is_in_isr>
   16fa6:	9a01      	ldr	r2, [sp, #4]
   16fa8:	b950      	cbnz	r0, 16fc0 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   16faa:	4b07      	ldr	r3, [pc, #28]	; (16fc8 <z_thread_aligned_alloc+0x2c>)
   16fac:	689b      	ldr	r3, [r3, #8]
   16fae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	}

	if (heap) {
   16fb0:	b143      	cbz	r3, 16fc4 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   16fb2:	4621      	mov	r1, r4
   16fb4:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   16fb6:	b002      	add	sp, #8
   16fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   16fbc:	f003 bd4f 	b.w	1aa5e <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   16fc0:	4b02      	ldr	r3, [pc, #8]	; (16fcc <z_thread_aligned_alloc+0x30>)
   16fc2:	e7f6      	b.n	16fb2 <z_thread_aligned_alloc+0x16>
}
   16fc4:	b002      	add	sp, #8
   16fc6:	bd10      	pop	{r4, pc}
   16fc8:	200153f0 	.word	0x200153f0
   16fcc:	20014644 	.word	0x20014644

00016fd0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   16fd0:	b140      	cbz	r0, 16fe4 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   16fd2:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   16fd4:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   16fd8:	2b02      	cmp	r3, #2
   16fda:	d006      	beq.n	16fea <sys_notify_validate+0x1a>
   16fdc:	2b03      	cmp	r3, #3
   16fde:	d004      	beq.n	16fea <sys_notify_validate+0x1a>
   16fe0:	2b01      	cmp	r3, #1
   16fe2:	d005      	beq.n	16ff0 <sys_notify_validate+0x20>
		return -EINVAL;
   16fe4:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   16fe8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   16fea:	6803      	ldr	r3, [r0, #0]
   16fec:	2b00      	cmp	r3, #0
   16fee:	d0f9      	beq.n	16fe4 <sys_notify_validate+0x14>
		notify->result = 0;
   16ff0:	2300      	movs	r3, #0
   16ff2:	6083      	str	r3, [r0, #8]
   16ff4:	4618      	mov	r0, r3
   16ff6:	4770      	bx	lr

00016ff8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   16ff8:	6843      	ldr	r3, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   16ffa:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   16ffc:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   17000:	2b02      	cmp	r3, #2
	notify->result = res;
   17002:	6081      	str	r1, [r0, #8]
	switch (method) {
   17004:	d00b      	beq.n	1701e <sys_notify_finalize+0x26>
   17006:	2b03      	cmp	r3, #3
   17008:	d10c      	bne.n	17024 <sys_notify_finalize+0x2c>
	struct k_poll_signal *sig = NULL;
   1700a:	2300      	movs	r3, #0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1700c:	6804      	ldr	r4, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1700e:	2200      	movs	r2, #0
   17010:	6042      	str	r2, [r0, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   17012:	b113      	cbz	r3, 1701a <sys_notify_finalize+0x22>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   17014:	4618      	mov	r0, r3
   17016:	f7ff ff91 	bl	16f3c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1701a:	4620      	mov	r0, r4
   1701c:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = 0;
   1701e:	2400      	movs	r4, #0
		sig = notify->method.signal;
   17020:	6803      	ldr	r3, [r0, #0]
		break;
   17022:	e7f4      	b.n	1700e <sys_notify_finalize+0x16>
	switch (method) {
   17024:	2400      	movs	r4, #0
   17026:	4623      	mov	r3, r4
   17028:	e7f1      	b.n	1700e <sys_notify_finalize+0x16>

0001702a <arch_printk_char_out>:
}
   1702a:	2000      	movs	r0, #0
   1702c:	4770      	bx	lr

0001702e <str_out>:
{
   1702e:	b530      	push	{r4, r5, lr}
   17030:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   17032:	680c      	ldr	r4, [r1, #0]
   17034:	1c55      	adds	r5, r2, #1
   17036:	b114      	cbz	r4, 1703e <str_out+0x10>
   17038:	684b      	ldr	r3, [r1, #4]
   1703a:	4293      	cmp	r3, r2
   1703c:	dc01      	bgt.n	17042 <str_out+0x14>
		ctx->count++;
   1703e:	608d      	str	r5, [r1, #8]
}
   17040:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   17042:	3b01      	subs	r3, #1
   17044:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   17046:	bf08      	it	eq
   17048:	2200      	moveq	r2, #0
   1704a:	608d      	str	r5, [r1, #8]
   1704c:	bf0c      	ite	eq
   1704e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   17050:	54a0      	strbne	r0, [r4, r2]
   17052:	e7f5      	b.n	17040 <str_out+0x12>

00017054 <printk>:
{
   17054:	b40f      	push	{r0, r1, r2, r3}
   17056:	b507      	push	{r0, r1, r2, lr}
   17058:	a904      	add	r1, sp, #16
   1705a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1705e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   17060:	f7f6 fa64 	bl	d52c <vprintk>
}
   17064:	b003      	add	sp, #12
   17066:	f85d eb04 	ldr.w	lr, [sp], #4
   1706a:	b004      	add	sp, #16
   1706c:	4770      	bx	lr

0001706e <snprintk>:
{
   1706e:	b40c      	push	{r2, r3}
   17070:	b507      	push	{r0, r1, r2, lr}
   17072:	ab04      	add	r3, sp, #16
   17074:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   17078:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1707a:	f7f6 fa65 	bl	d548 <vsnprintk>
}
   1707e:	b003      	add	sp, #12
   17080:	f85d eb04 	ldr.w	lr, [sp], #4
   17084:	b002      	add	sp, #8
   17086:	4770      	bx	lr

00017088 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   17088:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1708a:	f013 0307 	ands.w	r3, r3, #7
   1708e:	d105      	bne.n	1709c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   17090:	6803      	ldr	r3, [r0, #0]
   17092:	2b00      	cmp	r3, #0
		evt = EVT_START;
   17094:	bf0c      	ite	eq
   17096:	2000      	moveq	r0, #0
   17098:	2003      	movne	r0, #3
   1709a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1709c:	2b02      	cmp	r3, #2
   1709e:	d105      	bne.n	170ac <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   170a0:	8b43      	ldrh	r3, [r0, #26]
   170a2:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   170a4:	bf14      	ite	ne
   170a6:	2000      	movne	r0, #0
   170a8:	2004      	moveq	r0, #4
   170aa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   170ac:	2b01      	cmp	r3, #1
   170ae:	d105      	bne.n	170bc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   170b0:	6803      	ldr	r3, [r0, #0]
   170b2:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   170b4:	bf0c      	ite	eq
   170b6:	2000      	moveq	r0, #0
   170b8:	2005      	movne	r0, #5
   170ba:	4770      	bx	lr
	int evt = EVT_NOP;
   170bc:	2000      	movs	r0, #0
}
   170be:	4770      	bx	lr

000170c0 <notify_one>:
{
   170c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   170c2:	460d      	mov	r5, r1
   170c4:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   170c6:	4619      	mov	r1, r3
   170c8:	1d28      	adds	r0, r5, #4
{
   170ca:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   170cc:	9300      	str	r3, [sp, #0]
   170ce:	f7ff ff93 	bl	16ff8 <sys_notify_finalize>
	if (cb) {
   170d2:	4604      	mov	r4, r0
   170d4:	b140      	cbz	r0, 170e8 <notify_one+0x28>
		cb(mgr, cli, state, res);
   170d6:	e9dd 3200 	ldrd	r3, r2, [sp]
   170da:	4629      	mov	r1, r5
   170dc:	4630      	mov	r0, r6
   170de:	46a4      	mov	ip, r4
}
   170e0:	b002      	add	sp, #8
   170e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   170e6:	4760      	bx	ip
}
   170e8:	b002      	add	sp, #8
   170ea:	bd70      	pop	{r4, r5, r6, pc}

000170ec <transition_complete>:
{
   170ec:	b410      	push	{r4}
	__asm__ volatile(
   170ee:	f04f 0420 	mov.w	r4, #32
   170f2:	f3ef 8211 	mrs	r2, BASEPRI
   170f6:	f384 8811 	msr	BASEPRI, r4
   170fa:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   170fe:	6141      	str	r1, [r0, #20]
}
   17100:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   17104:	2101      	movs	r1, #1
   17106:	f7f6 ba33 	b.w	d570 <process_event>

0001710a <validate_args>:
{
   1710a:	b510      	push	{r4, lr}
   1710c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1710e:	b140      	cbz	r0, 17122 <validate_args+0x18>
   17110:	b139      	cbz	r1, 17122 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   17112:	1d08      	adds	r0, r1, #4
   17114:	f7ff ff5c 	bl	16fd0 <sys_notify_validate>
	if ((rv == 0)
   17118:	b928      	cbnz	r0, 17126 <validate_args+0x1c>
	    && ((cli->notify.flags
   1711a:	68a3      	ldr	r3, [r4, #8]
   1711c:	f033 0303 	bics.w	r3, r3, #3
   17120:	d001      	beq.n	17126 <validate_args+0x1c>
		rv = -EINVAL;
   17122:	f06f 0015 	mvn.w	r0, #21
}
   17126:	bd10      	pop	{r4, pc}

00017128 <onoff_manager_init>:
{
   17128:	b538      	push	{r3, r4, r5, lr}
   1712a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1712c:	4605      	mov	r5, r0
   1712e:	b158      	cbz	r0, 17148 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   17130:	b151      	cbz	r1, 17148 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   17132:	680b      	ldr	r3, [r1, #0]
   17134:	b143      	cbz	r3, 17148 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   17136:	684b      	ldr	r3, [r1, #4]
   17138:	b133      	cbz	r3, 17148 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1713a:	221c      	movs	r2, #28
   1713c:	2100      	movs	r1, #0
   1713e:	f000 fef8 	bl	17f32 <memset>
	return 0;
   17142:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   17144:	612c      	str	r4, [r5, #16]
}
   17146:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17148:	f06f 0015 	mvn.w	r0, #21
   1714c:	e7fb      	b.n	17146 <onoff_manager_init+0x1e>

0001714e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1714e:	b570      	push	{r4, r5, r6, lr}
   17150:	4604      	mov	r4, r0
   17152:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   17154:	f7ff ffd9 	bl	1710a <validate_args>

	if (rv < 0) {
   17158:	1e05      	subs	r5, r0, #0
   1715a:	db31      	blt.n	171c0 <onoff_request+0x72>
   1715c:	f04f 0320 	mov.w	r3, #32
   17160:	f3ef 8111 	mrs	r1, BASEPRI
   17164:	f383 8811 	msr	BASEPRI, r3
   17168:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1716c:	f64f 75ff 	movw	r5, #65535	; 0xffff
   17170:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   17172:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   17174:	42ab      	cmp	r3, r5
   17176:	f000 0207 	and.w	r2, r0, #7
   1717a:	d02e      	beq.n	171da <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1717c:	2a02      	cmp	r2, #2
   1717e:	d10e      	bne.n	1719e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   17180:	3301      	adds	r3, #1
   17182:	8363      	strh	r3, [r4, #26]
	rv = state;
   17184:	4615      	mov	r5, r2
		notify = true;
   17186:	2301      	movs	r3, #1
	__asm__ volatile(
   17188:	f381 8811 	msr	BASEPRI, r1
   1718c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   17190:	b1b3      	cbz	r3, 171c0 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   17192:	2300      	movs	r3, #0
   17194:	4631      	mov	r1, r6
   17196:	4620      	mov	r0, r4
   17198:	f7ff ff92 	bl	170c0 <notify_one>
   1719c:	e010      	b.n	171c0 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1719e:	0783      	lsls	r3, r0, #30
   171a0:	d001      	beq.n	171a6 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   171a2:	2a06      	cmp	r2, #6
   171a4:	d10e      	bne.n	171c4 <onoff_request+0x76>
	parent->next = child;
   171a6:	2300      	movs	r3, #0
   171a8:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   171aa:	6863      	ldr	r3, [r4, #4]
   171ac:	b993      	cbnz	r3, 171d4 <onoff_request+0x86>
	list->head = node;
   171ae:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   171b2:	4615      	mov	r5, r2
   171b4:	b962      	cbnz	r2, 171d0 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   171b6:	460a      	mov	r2, r1
   171b8:	4620      	mov	r0, r4
   171ba:	2102      	movs	r1, #2
   171bc:	f7f6 f9d8 	bl	d570 <process_event>
		}
	}

	return rv;
}
   171c0:	4628      	mov	r0, r5
   171c2:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   171c4:	2a05      	cmp	r2, #5
   171c6:	bf0c      	ite	eq
   171c8:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   171cc:	f06f 0504 	mvnne.w	r5, #4
   171d0:	2300      	movs	r3, #0
   171d2:	e7d9      	b.n	17188 <onoff_request+0x3a>
	parent->next = child;
   171d4:	601e      	str	r6, [r3, #0]
	list->tail = node;
   171d6:	6066      	str	r6, [r4, #4]
}
   171d8:	e7eb      	b.n	171b2 <onoff_request+0x64>
		rv = -EAGAIN;
   171da:	f06f 050a 	mvn.w	r5, #10
   171de:	e7f7      	b.n	171d0 <onoff_request+0x82>

000171e0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   171e0:	4604      	mov	r4, r0
   171e2:	b508      	push	{r3, lr}
   171e4:	4608      	mov	r0, r1
   171e6:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   171e8:	461a      	mov	r2, r3
   171ea:	47a0      	blx	r4
	return z_impl_k_current_get();
   171ec:	f7ff fb1e 	bl	1682c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   171f0:	f7f8 f87e 	bl	f2f0 <z_impl_k_thread_abort>

000171f4 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   171f4:	b510      	push	{r4, lr}
   171f6:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   171f8:	f04f 33ff 	mov.w	r3, #4294967295
   171fc:	f04f 32ff 	mov.w	r2, #4294967295
   17200:	4620      	mov	r0, r4
   17202:	f7fe ff47 	bl	16094 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   17206:	4603      	mov	r3, r0
   17208:	2800      	cmp	r0, #0
   1720a:	d0f5      	beq.n	171f8 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1720c:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1720e:	3308      	adds	r3, #8
   17210:	e8d3 1fef 	ldaex	r1, [r3]
   17214:	f021 0c01 	bic.w	ip, r1, #1
   17218:	e8c3 cfee 	stlex	lr, ip, [r3]
   1721c:	f1be 0f00 	cmp.w	lr, #0
   17220:	d1f6      	bne.n	17210 <z_work_q_main+0x1c>
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   17222:	07cb      	lsls	r3, r1, #31
   17224:	d500      	bpl.n	17228 <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   17226:	4790      	blx	r2
	z_impl_k_yield();
   17228:	f7ff fa90 	bl	1674c <z_impl_k_yield>
   1722c:	e7e4      	b.n	171f8 <z_work_q_main+0x4>

0001722e <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1722e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   17230:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   17234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   17238:	bf2c      	ite	cs
   1723a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1723e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   17242:	4770      	bx	lr

00017244 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   17244:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   17248:	6880      	ldr	r0, [r0, #8]
   1724a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1724e:	bf2c      	ite	cs
   17250:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   17254:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   17258:	4770      	bx	lr

0001725a <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1725a:	2201      	movs	r2, #1
{
   1725c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1725e:	f7ff ffe6 	bl	1722e <chunk_field>
}
   17262:	0840      	lsrs	r0, r0, #1
   17264:	bd08      	pop	{r3, pc}

00017266 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   17266:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   17268:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1726c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   17270:	d308      	bcc.n	17284 <set_chunk_used+0x1e>
		if (used) {
   17272:	684b      	ldr	r3, [r1, #4]
   17274:	b11a      	cbz	r2, 1727e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   17276:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1727a:	604b      	str	r3, [r1, #4]
   1727c:	4770      	bx	lr
   1727e:	f023 0301 	bic.w	r3, r3, #1
   17282:	e7fa      	b.n	1727a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   17284:	884b      	ldrh	r3, [r1, #2]
   17286:	b11a      	cbz	r2, 17290 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   17288:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1728c:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1728e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   17290:	f023 0301 	bic.w	r3, r3, #1
   17294:	e7fa      	b.n	1728c <set_chunk_used+0x26>

00017296 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   17296:	0053      	lsls	r3, r2, #1
   17298:	2201      	movs	r2, #1
   1729a:	f7ff bfd3 	b.w	17244 <chunk_set>

0001729e <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1729e:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   172a0:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   172a2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   172a6:	bf2c      	ite	cs
   172a8:	2002      	movcs	r0, #2
   172aa:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   172ac:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   172ae:	fab0 f080 	clz	r0, r0
}
   172b2:	f1c0 001f 	rsb	r0, r0, #31
   172b6:	4770      	bx	lr

000172b8 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   172b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   172ba:	4616      	mov	r6, r2
   172bc:	4604      	mov	r4, r0
   172be:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   172c0:	f7ff ffcb 	bl	1725a <chunk_size>
   172c4:	4631      	mov	r1, r6
   172c6:	4605      	mov	r5, r0
   172c8:	4620      	mov	r0, r4
   172ca:	f7ff ffc6 	bl	1725a <chunk_size>
   172ce:	182b      	adds	r3, r5, r0

	set_chunk_size(h, lc, newsz);
   172d0:	461a      	mov	r2, r3
   172d2:	4639      	mov	r1, r7
   172d4:	4620      	mov	r0, r4
   172d6:	9301      	str	r3, [sp, #4]
   172d8:	f7ff ffdd 	bl	17296 <set_chunk_size>
	return c + chunk_size(h, c);
   172dc:	4631      	mov	r1, r6
   172de:	4620      	mov	r0, r4
   172e0:	f7ff ffbb 	bl	1725a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   172e4:	2200      	movs	r2, #0
   172e6:	1831      	adds	r1, r6, r0
   172e8:	4620      	mov	r0, r4
   172ea:	9b01      	ldr	r3, [sp, #4]
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   172ec:	b003      	add	sp, #12
   172ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   172f2:	f7ff bfa7 	b.w	17244 <chunk_set>

000172f6 <split_chunks>:
{
   172f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   172f8:	4614      	mov	r4, r2
   172fa:	460e      	mov	r6, r1
   172fc:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   172fe:	f7ff ffac 	bl	1725a <chunk_size>
	size_t lsz = rc - lc;
   17302:	1ba3      	subs	r3, r4, r6
	size_t rsz = sz0 - lsz;
   17304:	1b32      	subs	r2, r6, r4
   17306:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   17308:	4631      	mov	r1, r6
   1730a:	461a      	mov	r2, r3
   1730c:	4628      	mov	r0, r5
   1730e:	9301      	str	r3, [sp, #4]
   17310:	f7ff ffc1 	bl	17296 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   17314:	463a      	mov	r2, r7
   17316:	4621      	mov	r1, r4
   17318:	4628      	mov	r0, r5
   1731a:	f7ff ffbc 	bl	17296 <set_chunk_size>
   1731e:	9b01      	ldr	r3, [sp, #4]
   17320:	2200      	movs	r2, #0
   17322:	4621      	mov	r1, r4
   17324:	4628      	mov	r0, r5
   17326:	f7ff ff8d 	bl	17244 <chunk_set>
	return c + chunk_size(h, c);
   1732a:	4621      	mov	r1, r4
   1732c:	4628      	mov	r0, r5
   1732e:	f7ff ff94 	bl	1725a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   17332:	463b      	mov	r3, r7
   17334:	1821      	adds	r1, r4, r0
   17336:	2200      	movs	r2, #0
   17338:	4628      	mov	r0, r5
}
   1733a:	b003      	add	sp, #12
   1733c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   17340:	f7ff bf80 	b.w	17244 <chunk_set>

00017344 <free_list_remove_bidx>:
{
   17344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17348:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1734a:	2203      	movs	r2, #3
   1734c:	460e      	mov	r6, r1
   1734e:	4604      	mov	r4, r0
   17350:	f7ff ff6d 	bl	1722e <chunk_field>
	if (next_free_chunk(h, c) == c) {
   17354:	4286      	cmp	r6, r0
   17356:	4605      	mov	r5, r0
   17358:	f107 0804 	add.w	r8, r7, #4
   1735c:	d10b      	bne.n	17376 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1735e:	2301      	movs	r3, #1
   17360:	fa03 f707 	lsl.w	r7, r3, r7
   17364:	68e3      	ldr	r3, [r4, #12]
   17366:	ea23 0307 	bic.w	r3, r3, r7
   1736a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1736c:	2300      	movs	r3, #0
   1736e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   17372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   17376:	4631      	mov	r1, r6
   17378:	2202      	movs	r2, #2
   1737a:	4620      	mov	r0, r4
   1737c:	f7ff ff57 	bl	1722e <chunk_field>
   17380:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   17382:	462b      	mov	r3, r5
   17384:	4601      	mov	r1, r0
   17386:	2203      	movs	r2, #3
   17388:	4620      	mov	r0, r4
		b->next = second;
   1738a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1738e:	f7ff ff59 	bl	17244 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   17392:	4633      	mov	r3, r6
   17394:	4629      	mov	r1, r5
   17396:	4620      	mov	r0, r4
}
   17398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1739c:	2202      	movs	r2, #2
   1739e:	f7ff bf51 	b.w	17244 <chunk_set>

000173a2 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   173a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   173a6:	4604      	mov	r4, r0
   173a8:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   173aa:	f7ff ff78 	bl	1729e <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   173ae:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   173b0:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   173b2:	4620      	mov	r0, r4
   173b4:	f7ff ff73 	bl	1729e <bucket_idx>
   173b8:	42a8      	cmp	r0, r5
   173ba:	da04      	bge.n	173c6 <alloc_chunk+0x24>
		return 0;
   173bc:	2100      	movs	r1, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   173be:	4608      	mov	r0, r1
   173c0:	b003      	add	sp, #12
   173c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (b->next) {
   173c6:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   173ca:	f8d9 8010 	ldr.w	r8, [r9, #16]
   173ce:	f1b8 0f00 	cmp.w	r8, #0
   173d2:	d019      	beq.n	17408 <alloc_chunk+0x66>
   173d4:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   173d6:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   173da:	4620      	mov	r0, r4
   173dc:	9101      	str	r1, [sp, #4]
   173de:	f7ff ff3c 	bl	1725a <chunk_size>
   173e2:	42b8      	cmp	r0, r7
   173e4:	9901      	ldr	r1, [sp, #4]
   173e6:	d305      	bcc.n	173f4 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   173e8:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   173ea:	4620      	mov	r0, r4
   173ec:	f7ff ffaa 	bl	17344 <free_list_remove_bidx>
   173f0:	9901      	ldr	r1, [sp, #4]
		return c;
   173f2:	e7e4      	b.n	173be <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   173f4:	2203      	movs	r2, #3
   173f6:	4620      	mov	r0, r4
   173f8:	f7ff ff19 	bl	1722e <chunk_field>
		} while (--i && b->next != first);
   173fc:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   173fe:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   17402:	d001      	beq.n	17408 <alloc_chunk+0x66>
   17404:	4580      	cmp	r8, r0
   17406:	d1e6      	bne.n	173d6 <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   17408:	f04f 32ff 	mov.w	r2, #4294967295
   1740c:	68e3      	ldr	r3, [r4, #12]
   1740e:	3501      	adds	r5, #1
   17410:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   17412:	401a      	ands	r2, r3
   17414:	d0d2      	beq.n	173bc <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   17416:	fa92 f2a2 	rbit	r2, r2
   1741a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1741e:	1d13      	adds	r3, r2, #4
   17420:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   17424:	9101      	str	r1, [sp, #4]
   17426:	e7e0      	b.n	173ea <alloc_chunk+0x48>

00017428 <free_list_add>:
{
   17428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1742c:	4604      	mov	r4, r0
   1742e:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   17430:	f7ff ff13 	bl	1725a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   17434:	68a3      	ldr	r3, [r4, #8]
   17436:	4601      	mov	r1, r0
   17438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1743c:	d301      	bcc.n	17442 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1743e:	2801      	cmp	r0, #1
   17440:	d035      	beq.n	174ae <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   17442:	4620      	mov	r0, r4
   17444:	f7ff ff2b 	bl	1729e <bucket_idx>
	if (b->next == 0U) {
   17448:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1744c:	6916      	ldr	r6, [r2, #16]
   1744e:	b99e      	cbnz	r6, 17478 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   17450:	2301      	movs	r3, #1
   17452:	fa03 f000 	lsl.w	r0, r3, r0
   17456:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   17458:	4629      	mov	r1, r5
   1745a:	4303      	orrs	r3, r0
   1745c:	60e3      	str	r3, [r4, #12]
   1745e:	4620      	mov	r0, r4
		b->next = c;
   17460:	6115      	str	r5, [r2, #16]
   17462:	462b      	mov	r3, r5
   17464:	2202      	movs	r2, #2
   17466:	f7ff feed 	bl	17244 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1746a:	2203      	movs	r2, #3
   1746c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1746e:	4620      	mov	r0, r4
}
   17470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17474:	f7ff bee6 	b.w	17244 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   17478:	2202      	movs	r2, #2
   1747a:	4631      	mov	r1, r6
   1747c:	4620      	mov	r0, r4
   1747e:	f7ff fed6 	bl	1722e <chunk_field>
   17482:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   17484:	4603      	mov	r3, r0
   17486:	2202      	movs	r2, #2
   17488:	4629      	mov	r1, r5
   1748a:	4620      	mov	r0, r4
   1748c:	f7ff feda 	bl	17244 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   17490:	4633      	mov	r3, r6
   17492:	2203      	movs	r2, #3
   17494:	4629      	mov	r1, r5
   17496:	4620      	mov	r0, r4
   17498:	f7ff fed4 	bl	17244 <chunk_set>
   1749c:	2203      	movs	r2, #3
   1749e:	4639      	mov	r1, r7
   174a0:	462b      	mov	r3, r5
   174a2:	4620      	mov	r0, r4
   174a4:	f7ff fece 	bl	17244 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   174a8:	2202      	movs	r2, #2
   174aa:	4631      	mov	r1, r6
   174ac:	e7df      	b.n	1746e <free_list_add+0x46>
   174ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000174b2 <free_list_remove>:
{
   174b2:	b538      	push	{r3, r4, r5, lr}
   174b4:	4604      	mov	r4, r0
   174b6:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   174b8:	f7ff fecf 	bl	1725a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   174bc:	68a3      	ldr	r3, [r4, #8]
   174be:	4601      	mov	r1, r0
   174c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   174c4:	d301      	bcc.n	174ca <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   174c6:	2801      	cmp	r0, #1
   174c8:	d009      	beq.n	174de <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   174ca:	4620      	mov	r0, r4
   174cc:	f7ff fee7 	bl	1729e <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   174d0:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   174d2:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   174d4:	4620      	mov	r0, r4
}
   174d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   174da:	f7ff bf33 	b.w	17344 <free_list_remove_bidx>
}
   174de:	bd38      	pop	{r3, r4, r5, pc}

000174e0 <free_chunk>:
{
   174e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   174e2:	4605      	mov	r5, r0
   174e4:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   174e6:	f7ff feb8 	bl	1725a <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   174ea:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   174ec:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   174ee:	4628      	mov	r0, r5
   174f0:	9101      	str	r1, [sp, #4]
   174f2:	f7ff fe9c 	bl	1722e <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   174f6:	f010 0f01 	tst.w	r0, #1
   174fa:	9901      	ldr	r1, [sp, #4]
   174fc:	d10b      	bne.n	17516 <free_chunk+0x36>
		free_list_remove(h, right_chunk(h, c));
   174fe:	4628      	mov	r0, r5
   17500:	f7ff ffd7 	bl	174b2 <free_list_remove>
	return c + chunk_size(h, c);
   17504:	4621      	mov	r1, r4
   17506:	4628      	mov	r0, r5
   17508:	f7ff fea7 	bl	1725a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1750c:	4621      	mov	r1, r4
   1750e:	1822      	adds	r2, r4, r0
   17510:	4628      	mov	r0, r5
   17512:	f7ff fed1 	bl	172b8 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   17516:	2200      	movs	r2, #0
   17518:	4621      	mov	r1, r4
   1751a:	4628      	mov	r0, r5
   1751c:	f7ff fe87 	bl	1722e <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   17520:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   17522:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   17524:	4628      	mov	r0, r5
   17526:	9101      	str	r1, [sp, #4]
   17528:	f7ff fe81 	bl	1722e <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1752c:	f010 0601 	ands.w	r6, r0, #1
   17530:	9901      	ldr	r1, [sp, #4]
   17532:	d112      	bne.n	1755a <free_chunk+0x7a>
		free_list_remove(h, left_chunk(h, c));
   17534:	4628      	mov	r0, r5
   17536:	f7ff ffbc 	bl	174b2 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1753a:	4621      	mov	r1, r4
   1753c:	4632      	mov	r2, r6
   1753e:	4628      	mov	r0, r5
   17540:	f7ff fe75 	bl	1722e <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   17544:	4622      	mov	r2, r4
   17546:	1a21      	subs	r1, r4, r0
   17548:	4628      	mov	r0, r5
   1754a:	f7ff feb5 	bl	172b8 <merge_chunks>
   1754e:	4621      	mov	r1, r4
   17550:	4632      	mov	r2, r6
   17552:	4628      	mov	r0, r5
   17554:	f7ff fe6b 	bl	1722e <chunk_field>
   17558:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1755a:	4621      	mov	r1, r4
   1755c:	4628      	mov	r0, r5
}
   1755e:	b002      	add	sp, #8
   17560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
   17564:	f7ff bf60 	b.w	17428 <free_list_add>

00017568 <sys_heap_free>:
{
   17568:	b507      	push	{r0, r1, r2, lr}
	if (mem == NULL) {
   1756a:	b199      	cbz	r1, 17594 <sys_heap_free+0x2c>
	struct z_heap *h = heap->heap;
   1756c:	6800      	ldr	r0, [r0, #0]
	set_chunk_used(h, c, false);
   1756e:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   17570:	6883      	ldr	r3, [r0, #8]
   17572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   17576:	bf2c      	ite	cs
   17578:	2308      	movcs	r3, #8
   1757a:	2304      	movcc	r3, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1757c:	1ac9      	subs	r1, r1, r3
   1757e:	1a09      	subs	r1, r1, r0
   17580:	08c9      	lsrs	r1, r1, #3
	set_chunk_used(h, c, false);
   17582:	9101      	str	r1, [sp, #4]
   17584:	f7ff fe6f 	bl	17266 <set_chunk_used>
	free_chunk(h, c);
   17588:	9901      	ldr	r1, [sp, #4]
}
   1758a:	b003      	add	sp, #12
   1758c:	f85d eb04 	ldr.w	lr, [sp], #4
	free_chunk(h, c);
   17590:	f7ff bfa6 	b.w	174e0 <free_chunk>
}
   17594:	b003      	add	sp, #12
   17596:	f85d fb04 	ldr.w	pc, [sp], #4

0001759a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1759a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1759c:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1759e:	b909      	cbnz	r1, 175a4 <sys_heap_alloc+0xa>
		return NULL;
   175a0:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   175a2:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   175a4:	68ab      	ldr	r3, [r5, #8]
   175a6:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   175aa:	d9f9      	bls.n	175a0 <sys_heap_alloc+0x6>
   175ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   175b0:	bf2c      	ite	cs
   175b2:	2208      	movcs	r2, #8
   175b4:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   175b6:	1dcc      	adds	r4, r1, #7
   175b8:	4414      	add	r4, r2
   175ba:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   175bc:	4621      	mov	r1, r4
   175be:	4628      	mov	r0, r5
   175c0:	f7ff feef 	bl	173a2 <alloc_chunk>
	if (c == 0U) {
   175c4:	4606      	mov	r6, r0
   175c6:	2800      	cmp	r0, #0
   175c8:	d0ea      	beq.n	175a0 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   175ca:	4601      	mov	r1, r0
   175cc:	4628      	mov	r0, r5
   175ce:	f7ff fe44 	bl	1725a <chunk_size>
   175d2:	42a0      	cmp	r0, r4
   175d4:	d909      	bls.n	175ea <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   175d6:	4434      	add	r4, r6
   175d8:	4631      	mov	r1, r6
   175da:	4628      	mov	r0, r5
   175dc:	4622      	mov	r2, r4
   175de:	f7ff fe8a 	bl	172f6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   175e2:	4621      	mov	r1, r4
   175e4:	4628      	mov	r0, r5
   175e6:	f7ff ff1f 	bl	17428 <free_list_add>
	set_chunk_used(h, c, true);
   175ea:	4628      	mov	r0, r5
   175ec:	2201      	movs	r2, #1
   175ee:	4631      	mov	r1, r6
   175f0:	f7ff fe39 	bl	17266 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   175f4:	68ab      	ldr	r3, [r5, #8]
   175f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   175fa:	bf2c      	ite	cs
   175fc:	2008      	movcs	r0, #8
   175fe:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   17600:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   17604:	4428      	add	r0, r5
	return chunk_mem(h, c);
   17606:	e7cc      	b.n	175a2 <sys_heap_alloc+0x8>

00017608 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   17608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap *h = heap->heap;
   1760c:	6805      	ldr	r5, [r0, #0]
{
   1760e:	4614      	mov	r4, r2
   17610:	68ab      	ldr	r3, [r5, #8]
   17612:	460f      	mov	r7, r1
   17614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   17618:	bf2c      	ite	cs
   1761a:	2208      	movcs	r2, #8
   1761c:	2204      	movcc	r2, #4

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (align <= chunk_header_bytes(h)) {
   1761e:	4291      	cmp	r1, r2
   17620:	d804      	bhi.n	1762c <sys_heap_aligned_alloc+0x24>
		return sys_heap_alloc(heap, bytes);
   17622:	4621      	mov	r1, r4
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   17624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sys_heap_alloc(heap, bytes);
   17628:	f7ff bfb7 	b.w	1759a <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1762c:	b91c      	cbnz	r4, 17636 <sys_heap_aligned_alloc+0x2e>
		return NULL;
   1762e:	2600      	movs	r6, #0
}
   17630:	4630      	mov	r0, r6
   17632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
   17636:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1763a:	d9f8      	bls.n	1762e <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1763c:	1de1      	adds	r1, r4, #7
   1763e:	4439      	add	r1, r7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   17640:	4628      	mov	r0, r5
   17642:	08c9      	lsrs	r1, r1, #3
   17644:	f7ff fead 	bl	173a2 <alloc_chunk>
	if (c0 == 0) {
   17648:	4680      	mov	r8, r0
   1764a:	2800      	cmp	r0, #0
   1764c:	d0ef      	beq.n	1762e <sys_heap_aligned_alloc+0x26>
	return big_heap(h) ? 8 : 4;
   1764e:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   17650:	1e7a      	subs	r2, r7, #1
   17652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   17656:	bf2c      	ite	cs
   17658:	2308      	movcs	r3, #8
   1765a:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1765c:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
   17660:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   17662:	427f      	negs	r7, r7
   17664:	4416      	add	r6, r2
   17666:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   17668:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1766a:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1766c:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1766e:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   17670:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   17674:	1b64      	subs	r4, r4, r5
	if (c > c0) {
   17676:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1767a:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1767e:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   17682:	d208      	bcs.n	17696 <sys_heap_aligned_alloc+0x8e>
		split_chunks(h, c0, c);
   17684:	4601      	mov	r1, r0
   17686:	463a      	mov	r2, r7
   17688:	4628      	mov	r0, r5
   1768a:	f7ff fe34 	bl	172f6 <split_chunks>
		free_list_add(h, c0);
   1768e:	4641      	mov	r1, r8
   17690:	4628      	mov	r0, r5
   17692:	f7ff fec9 	bl	17428 <free_list_add>
	return c + chunk_size(h, c);
   17696:	4639      	mov	r1, r7
   17698:	4628      	mov	r0, r5
   1769a:	f7ff fdde 	bl	1725a <chunk_size>
   1769e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   176a0:	4284      	cmp	r4, r0
   176a2:	d208      	bcs.n	176b6 <sys_heap_aligned_alloc+0xae>
		split_chunks(h, c, c_end);
   176a4:	4639      	mov	r1, r7
   176a6:	4628      	mov	r0, r5
   176a8:	4622      	mov	r2, r4
   176aa:	f7ff fe24 	bl	172f6 <split_chunks>
		free_list_add(h, c_end);
   176ae:	4621      	mov	r1, r4
   176b0:	4628      	mov	r0, r5
   176b2:	f7ff feb9 	bl	17428 <free_list_add>
	set_chunk_used(h, c, true);
   176b6:	2201      	movs	r2, #1
   176b8:	4639      	mov	r1, r7
   176ba:	4628      	mov	r0, r5
   176bc:	f7ff fdd3 	bl	17266 <set_chunk_used>
	return mem;
   176c0:	e7b6      	b.n	17630 <sys_heap_aligned_alloc+0x28>

000176c2 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   176c2:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   176c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   176c8:	bf2c      	ite	cs
   176ca:	2508      	movcs	r5, #8
   176cc:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   176ce:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   176d0:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   176d2:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   176d4:	1dcc      	adds	r4, r1, #7
   176d6:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   176da:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   176dc:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   176e0:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   176e2:	440d      	add	r5, r1
   176e4:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   176e8:	1b2d      	subs	r5, r5, r4
   176ea:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   176ec:	4629      	mov	r1, r5
   176ee:	4620      	mov	r0, r4
	h->len = buf_sz;
   176f0:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   176f2:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   176f4:	f7ff fdd3 	bl	1729e <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   176f8:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   176fa:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   176fc:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   176fe:	361b      	adds	r6, #27
   17700:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   17702:	f104 0210 	add.w	r2, r4, #16
   17706:	428b      	cmp	r3, r1
   17708:	db29      	blt.n	1775e <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1770a:	4632      	mov	r2, r6
   1770c:	4620      	mov	r0, r4
   1770e:	2100      	movs	r1, #0
   17710:	f7ff fdc1 	bl	17296 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   17714:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   17716:	4620      	mov	r0, r4
   17718:	2201      	movs	r2, #1
   1771a:	2100      	movs	r1, #0
   1771c:	f7ff fda3 	bl	17266 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   17720:	463a      	mov	r2, r7
   17722:	4631      	mov	r1, r6
   17724:	f7ff fdb7 	bl	17296 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   17728:	4633      	mov	r3, r6
   1772a:	4631      	mov	r1, r6
   1772c:	4620      	mov	r0, r4
   1772e:	2200      	movs	r2, #0
   17730:	f7ff fd88 	bl	17244 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   17734:	4629      	mov	r1, r5
   17736:	4620      	mov	r0, r4
   17738:	2200      	movs	r2, #0
   1773a:	f7ff fdac 	bl	17296 <set_chunk_size>
   1773e:	463b      	mov	r3, r7
   17740:	4629      	mov	r1, r5
   17742:	4620      	mov	r0, r4
   17744:	2200      	movs	r2, #0
   17746:	f7ff fd7d 	bl	17244 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1774a:	4629      	mov	r1, r5
   1774c:	4620      	mov	r0, r4
   1774e:	2201      	movs	r2, #1
   17750:	f7ff fd89 	bl	17266 <set_chunk_used>

	free_list_add(h, chunk0_size);
   17754:	4631      	mov	r1, r6
}
   17756:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1775a:	f7ff be65 	b.w	17428 <free_list_add>
		h->buckets[i].next = 0;
   1775e:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   17762:	3301      	adds	r3, #1
   17764:	e7cf      	b.n	17706 <sys_heap_init+0x44>

00017766 <_ldiv5>:
{
   17766:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
   1776a:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
   1776e:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   17772:	fba2 bc03 	umull	fp, ip, r2, r3
   17776:	eb1b 0603 	adds.w	r6, fp, r3
   1777a:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
   1777e:	462f      	mov	r7, r5
   17780:	2600      	movs	r6, #0
	result += (uint64_t)v_hi * m;
   17782:	fba4 4503 	umull	r4, r5, r4, r3
   17786:	eb1b 0204 	adds.w	r2, fp, r4
   1778a:	eb4c 0105 	adc.w	r1, ip, r5
   1778e:	19d2      	adds	r2, r2, r7
	result >>= 32;
   17790:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
   17792:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
   17796:	1863      	adds	r3, r4, r1
   17798:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
   1779c:	e9c0 3200 	strd	r3, r2, [r0]
}
   177a0:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

000177a4 <_get_digit>:
	if (*digit_count > 0) {
   177a4:	680b      	ldr	r3, [r1, #0]
{
   177a6:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   177a8:	2b00      	cmp	r3, #0
   177aa:	dd10      	ble.n	177ce <_get_digit+0x2a>
		--*digit_count;
   177ac:	3b01      	subs	r3, #1
   177ae:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   177b0:	210a      	movs	r1, #10
   177b2:	6802      	ldr	r2, [r0, #0]
   177b4:	6844      	ldr	r4, [r0, #4]
   177b6:	fba2 5601 	umull	r5, r6, r2, r1
   177ba:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= (BIT64(60) - 1U);
   177be:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   177c2:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   177c6:	0f31      	lsrs	r1, r6, #28
   177c8:	3130      	adds	r1, #48	; 0x30
}
   177ca:	4608      	mov	r0, r1
   177cc:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   177ce:	2130      	movs	r1, #48	; 0x30
   177d0:	e7fb      	b.n	177ca <_get_digit+0x26>

000177d2 <encode_uint>:
{
   177d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177d6:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   177d8:	78d3      	ldrb	r3, [r2, #3]
{
   177da:	4614      	mov	r4, r2
	switch (specifier) {
   177dc:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   177de:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   177e2:	4606      	mov	r6, r0
   177e4:	460f      	mov	r7, r1
   177e6:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   177e8:	d02d      	beq.n	17846 <encode_uint+0x74>
   177ea:	d828      	bhi.n	1783e <encode_uint+0x6c>
		return 16;
   177ec:	2b58      	cmp	r3, #88	; 0x58
   177ee:	bf14      	ite	ne
   177f0:	250a      	movne	r5, #10
   177f2:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
   177f4:	46aa      	mov	sl, r5
   177f6:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   177fa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   177fe:	4652      	mov	r2, sl
   17800:	465b      	mov	r3, fp
   17802:	4630      	mov	r0, r6
   17804:	4639      	mov	r1, r7
   17806:	f7f5 f989 	bl	cb1c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1780a:	2a09      	cmp	r2, #9
   1780c:	b2d3      	uxtb	r3, r2
   1780e:	d81f      	bhi.n	17850 <encode_uint+0x7e>
   17810:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   17812:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17814:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   17816:	bf08      	it	eq
   17818:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1781a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1781e:	d301      	bcc.n	17824 <encode_uint+0x52>
   17820:	45c8      	cmp	r8, r9
   17822:	d812      	bhi.n	1784a <encode_uint+0x78>
	if (conv->flag_hash) {
   17824:	7823      	ldrb	r3, [r4, #0]
   17826:	069b      	lsls	r3, r3, #26
   17828:	d505      	bpl.n	17836 <encode_uint+0x64>
		if (radix == 8) {
   1782a:	2d08      	cmp	r5, #8
   1782c:	d116      	bne.n	1785c <encode_uint+0x8a>
			conv->altform_0 = true;
   1782e:	78a3      	ldrb	r3, [r4, #2]
   17830:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   17834:	70a3      	strb	r3, [r4, #2]
}
   17836:	4640      	mov	r0, r8
   17838:	b003      	add	sp, #12
   1783a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1783e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   17842:	2b70      	cmp	r3, #112	; 0x70
   17844:	e7d3      	b.n	177ee <encode_uint+0x1c>
	switch (specifier) {
   17846:	2508      	movs	r5, #8
   17848:	e7d4      	b.n	177f4 <encode_uint+0x22>
		value /= radix;
   1784a:	4606      	mov	r6, r0
   1784c:	460f      	mov	r7, r1
   1784e:	e7d6      	b.n	177fe <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17850:	9a01      	ldr	r2, [sp, #4]
   17852:	2a19      	cmp	r2, #25
   17854:	bf94      	ite	ls
   17856:	3337      	addls	r3, #55	; 0x37
   17858:	3357      	addhi	r3, #87	; 0x57
   1785a:	e7da      	b.n	17812 <encode_uint+0x40>
		} else if (radix == 16) {
   1785c:	2d10      	cmp	r5, #16
   1785e:	d1ea      	bne.n	17836 <encode_uint+0x64>
			conv->altform_0c = true;
   17860:	78a3      	ldrb	r3, [r4, #2]
   17862:	f043 0310 	orr.w	r3, r3, #16
   17866:	e7e5      	b.n	17834 <encode_uint+0x62>

00017868 <outs>:
{
   17868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1786c:	4680      	mov	r8, r0
   1786e:	4689      	mov	r9, r1
   17870:	4616      	mov	r6, r2
   17872:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   17874:	4615      	mov	r5, r2
   17876:	42bd      	cmp	r5, r7
   17878:	eba5 0406 	sub.w	r4, r5, r6
   1787c:	d305      	bcc.n	1788a <outs+0x22>
   1787e:	b10f      	cbz	r7, 17884 <outs+0x1c>
	return (int)count;
   17880:	4620      	mov	r0, r4
   17882:	e008      	b.n	17896 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   17884:	782b      	ldrb	r3, [r5, #0]
   17886:	2b00      	cmp	r3, #0
   17888:	d0fa      	beq.n	17880 <outs+0x18>
		int rc = out((int)*sp++, ctx);
   1788a:	4649      	mov	r1, r9
   1788c:	f815 0b01 	ldrb.w	r0, [r5], #1
   17890:	47c0      	blx	r8
		if (rc < 0) {
   17892:	2800      	cmp	r0, #0
   17894:	daef      	bge.n	17876 <outs+0xe>
}
   17896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001789a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1789a:	4770      	bx	lr

0001789c <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1789c:	f7fd bf6a 	b.w	15774 <SystemInit>

000178a0 <sntp_init>:
{
   178a0:	b570      	push	{r4, r5, r6, lr}
   178a2:	460d      	mov	r5, r1
   178a4:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   178a6:	4604      	mov	r4, r0
   178a8:	b330      	cbz	r0, 178f8 <sntp_init+0x58>
   178aa:	b329      	cbz	r1, 178f8 <sntp_init+0x58>
	memset(ctx, 0, sizeof(struct sntp_ctx));
   178ac:	2214      	movs	r2, #20
   178ae:	2100      	movs	r1, #0
   178b0:	f000 fb3f 	bl	17f32 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   178b4:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   178b6:	2211      	movs	r2, #17
   178b8:	2102      	movs	r1, #2
   178ba:	f7f6 fe95 	bl	e5e8 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   178be:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   178c0:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   178c2:	da04      	bge.n	178ce <sntp_init+0x2e>
   178c4:	f7fe f988 	bl	15bd8 <z_impl_z_errno>
		return -errno;
   178c8:	6800      	ldr	r0, [r0, #0]
   178ca:	4240      	negs	r0, r0
}
   178cc:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   178ce:	4632      	mov	r2, r6
   178d0:	4629      	mov	r1, r5
   178d2:	f000 f843 	bl	1795c <z_impl_zsock_connect>
	if (ret < 0) {
   178d6:	2800      	cmp	r0, #0
   178d8:	68e0      	ldr	r0, [r4, #12]
   178da:	da02      	bge.n	178e2 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   178dc:	f000 f827 	bl	1792e <z_impl_zsock_close>
   178e0:	e7f0      	b.n	178c4 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   178e2:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   178e4:	68a3      	ldr	r3, [r4, #8]
   178e6:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   178ea:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   178ee:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   178f0:	8091      	strh	r1, [r2, #4]
	return 0;
   178f2:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   178f4:	60a3      	str	r3, [r4, #8]
	return 0;
   178f6:	e7e9      	b.n	178cc <sntp_init+0x2c>
		return -EFAULT;
   178f8:	f06f 000d 	mvn.w	r0, #13
   178fc:	e7e6      	b.n	178cc <sntp_init+0x2c>

000178fe <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   178fe:	b110      	cbz	r0, 17906 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   17900:	68c0      	ldr	r0, [r0, #12]
   17902:	f000 b814 	b.w	1792e <z_impl_zsock_close>
	}
}
   17906:	4770      	bx	lr

00017908 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   17908:	f7f6 bf96 	b.w	e838 <socket_offload_getaddrinfo>

0001790c <z_errno>:
   1790c:	f7fe b964 	b.w	15bd8 <z_impl_z_errno>

00017910 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   17910:	b40c      	push	{r2, r3}
   17912:	4603      	mov	r3, r0
   17914:	b507      	push	{r0, r1, r2, lr}
   17916:	aa04      	add	r2, sp, #16
   17918:	4608      	mov	r0, r1
   1791a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   1791e:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   17920:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   17922:	4798      	blx	r3
	va_end(args);

	return res;
}
   17924:	b003      	add	sp, #12
   17926:	f85d eb04 	ldr.w	lr, [sp], #4
   1792a:	b002      	add	sp, #8
   1792c:	4770      	bx	lr

0001792e <z_impl_zsock_close>:
{
   1792e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   17930:	a901      	add	r1, sp, #4
{
   17932:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   17934:	f7f5 fd7c 	bl	d430 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   17938:	b940      	cbnz	r0, 1794c <z_impl_zsock_close+0x1e>
		errno = EBADF;
   1793a:	f7ff ffe7 	bl	1790c <z_errno>
   1793e:	2309      	movs	r3, #9
		return -1;
   17940:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   17944:	6003      	str	r3, [r0, #0]
}
   17946:	4620      	mov	r0, r4
   17948:	b003      	add	sp, #12
   1794a:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   1794c:	9b01      	ldr	r3, [sp, #4]
   1794e:	689b      	ldr	r3, [r3, #8]
   17950:	4798      	blx	r3
   17952:	4604      	mov	r4, r0
	z_free_fd(sock);
   17954:	4628      	mov	r0, r5
   17956:	f7f5 fdbb 	bl	d4d0 <z_free_fd>
	return ret;
   1795a:	e7f4      	b.n	17946 <z_impl_zsock_close+0x18>

0001795c <z_impl_zsock_connect>:
{
   1795c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1795e:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   17960:	a903      	add	r1, sp, #12
{
   17962:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   17964:	f7f5 fd64 	bl	d430 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   17968:	b118      	cbz	r0, 17972 <z_impl_zsock_connect+0x16>
   1796a:	9b03      	ldr	r3, [sp, #12]
   1796c:	9a01      	ldr	r2, [sp, #4]
   1796e:	695b      	ldr	r3, [r3, #20]
   17970:	b93b      	cbnz	r3, 17982 <z_impl_zsock_connect+0x26>
   17972:	f7ff ffcb 	bl	1790c <z_errno>
   17976:	2309      	movs	r3, #9
   17978:	6003      	str	r3, [r0, #0]
   1797a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1797e:	b004      	add	sp, #16
   17980:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   17982:	4621      	mov	r1, r4
   17984:	4798      	blx	r3
   17986:	e7fa      	b.n	1797e <z_impl_zsock_connect+0x22>

00017988 <z_impl_zsock_sendto>:
{
   17988:	b530      	push	{r4, r5, lr}
   1798a:	b087      	sub	sp, #28
   1798c:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   1798e:	a905      	add	r1, sp, #20
{
   17990:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   17994:	f7f5 fd4c 	bl	d430 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   17998:	b120      	cbz	r0, 179a4 <z_impl_zsock_sendto+0x1c>
   1799a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1799e:	9905      	ldr	r1, [sp, #20]
   179a0:	6a0d      	ldr	r5, [r1, #32]
   179a2:	b93d      	cbnz	r5, 179b4 <z_impl_zsock_sendto+0x2c>
   179a4:	f7ff ffb2 	bl	1790c <z_errno>
   179a8:	2309      	movs	r3, #9
   179aa:	6003      	str	r3, [r0, #0]
   179ac:	f04f 30ff 	mov.w	r0, #4294967295
}
   179b0:	b007      	add	sp, #28
   179b2:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   179b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   179b6:	9101      	str	r1, [sp, #4]
   179b8:	990a      	ldr	r1, [sp, #40]	; 0x28
   179ba:	9100      	str	r1, [sp, #0]
   179bc:	4621      	mov	r1, r4
   179be:	47a8      	blx	r5
   179c0:	e7f6      	b.n	179b0 <z_impl_zsock_sendto+0x28>

000179c2 <z_impl_zsock_recvfrom>:
{
   179c2:	b530      	push	{r4, r5, lr}
   179c4:	b087      	sub	sp, #28
   179c6:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   179c8:	a905      	add	r1, sp, #20
{
   179ca:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   179ce:	f7f5 fd2f 	bl	d430 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   179d2:	b120      	cbz	r0, 179de <z_impl_zsock_recvfrom+0x1c>
   179d4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   179d8:	9905      	ldr	r1, [sp, #20]
   179da:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   179dc:	b93d      	cbnz	r5, 179ee <z_impl_zsock_recvfrom+0x2c>
   179de:	f7ff ff95 	bl	1790c <z_errno>
   179e2:	2309      	movs	r3, #9
   179e4:	6003      	str	r3, [r0, #0]
   179e6:	f04f 30ff 	mov.w	r0, #4294967295
}
   179ea:	b007      	add	sp, #28
   179ec:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   179ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
   179f0:	9101      	str	r1, [sp, #4]
   179f2:	990a      	ldr	r1, [sp, #40]	; 0x28
   179f4:	9100      	str	r1, [sp, #0]
   179f6:	4621      	mov	r1, r4
   179f8:	47a8      	blx	r5
   179fa:	e7f6      	b.n	179ea <z_impl_zsock_recvfrom+0x28>

000179fc <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   179fc:	b2cb      	uxtb	r3, r1
   179fe:	210c      	movs	r1, #12
   17a00:	68c2      	ldr	r2, [r0, #12]
   17a02:	fb03 2101 	mla	r1, r3, r1, r2
   17a06:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   17a08:	f000 0007 	and.w	r0, r0, #7
   17a0c:	4770      	bx	lr

00017a0e <set_off_state>:
	__asm__ volatile(
   17a0e:	f04f 0320 	mov.w	r3, #32
   17a12:	f3ef 8211 	mrs	r2, BASEPRI
   17a16:	f383 8811 	msr	BASEPRI, r3
   17a1a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   17a1e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   17a20:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   17a24:	d001      	beq.n	17a2a <set_off_state+0x1c>
   17a26:	428b      	cmp	r3, r1
   17a28:	d107      	bne.n	17a3a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   17a2a:	2301      	movs	r3, #1
   17a2c:	6003      	str	r3, [r0, #0]
	int err = 0;
   17a2e:	2000      	movs	r0, #0
	__asm__ volatile(
   17a30:	f382 8811 	msr	BASEPRI, r2
   17a34:	f3bf 8f6f 	isb	sy
}
   17a38:	4770      	bx	lr
		err = -EPERM;
   17a3a:	f04f 30ff 	mov.w	r0, #4294967295
   17a3e:	e7f7      	b.n	17a30 <set_off_state+0x22>

00017a40 <set_starting_state>:
{
   17a40:	b510      	push	{r4, lr}
	__asm__ volatile(
   17a42:	f04f 0320 	mov.w	r3, #32
   17a46:	f3ef 8211 	mrs	r2, BASEPRI
   17a4a:	f383 8811 	msr	BASEPRI, r3
   17a4e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   17a52:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   17a54:	f003 0407 	and.w	r4, r3, #7
   17a58:	2c01      	cmp	r4, #1
   17a5a:	d106      	bne.n	17a6a <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   17a5c:	6001      	str	r1, [r0, #0]
	int err = 0;
   17a5e:	2000      	movs	r0, #0
	__asm__ volatile(
   17a60:	f382 8811 	msr	BASEPRI, r2
   17a64:	f3bf 8f6f 	isb	sy
}
   17a68:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   17a6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   17a6e:	428b      	cmp	r3, r1
		err = -EALREADY;
   17a70:	bf14      	ite	ne
   17a72:	f04f 30ff 	movne.w	r0, #4294967295
   17a76:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   17a7a:	e7f1      	b.n	17a60 <set_starting_state+0x20>

00017a7c <set_on_state>:
	__asm__ volatile(
   17a7c:	f04f 0320 	mov.w	r3, #32
   17a80:	f3ef 8211 	mrs	r2, BASEPRI
   17a84:	f383 8811 	msr	BASEPRI, r3
   17a88:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   17a8c:	6803      	ldr	r3, [r0, #0]
   17a8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17a92:	f043 0302 	orr.w	r3, r3, #2
   17a96:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   17a98:	f382 8811 	msr	BASEPRI, r2
   17a9c:	f3bf 8f6f 	isb	sy
}
   17aa0:	4770      	bx	lr

00017aa2 <onoff_started_callback>:
{
   17aa2:	b410      	push	{r4}
	notify(mgr, 0);
   17aa4:	241c      	movs	r4, #28
	return &data->mgr[type];
   17aa6:	68c0      	ldr	r0, [r0, #12]
   17aa8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   17aaa:	fb03 0004 	mla	r0, r3, r4, r0
   17aae:	2100      	movs	r1, #0
}
   17ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   17ab4:	4710      	bx	r2

00017ab6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   17ab6:	2000      	movs	r0, #0
   17ab8:	f7fd be82 	b.w	157c0 <nrfx_clock_start>

00017abc <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   17abc:	2000      	movs	r0, #0
   17abe:	f7fd beb1 	b.w	15824 <nrfx_clock_stop>

00017ac2 <blocking_start_callback>:
{
   17ac2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   17ac4:	f7fe beb8 	b.w	16838 <z_impl_k_sem_give>

00017ac8 <api_stop>:
{
   17ac8:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   17aca:	230c      	movs	r3, #12
   17acc:	b2cc      	uxtb	r4, r1
   17ace:	4363      	muls	r3, r4
{
   17ad0:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   17ad2:	68c0      	ldr	r0, [r0, #12]
   17ad4:	3340      	adds	r3, #64	; 0x40
   17ad6:	2180      	movs	r1, #128	; 0x80
   17ad8:	4418      	add	r0, r3
   17ada:	f7ff ff98 	bl	17a0e <set_off_state>
	if (err < 0) {
   17ade:	2800      	cmp	r0, #0
   17ae0:	db05      	blt.n	17aee <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   17ae2:	6869      	ldr	r1, [r5, #4]
   17ae4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   17ae8:	6863      	ldr	r3, [r4, #4]
   17aea:	4798      	blx	r3
	return 0;
   17aec:	2000      	movs	r0, #0
}
   17aee:	bd38      	pop	{r3, r4, r5, pc}

00017af0 <api_start>:
{
   17af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	err = set_starting_state(&subdata->flags, ctx);
   17af4:	270c      	movs	r7, #12
   17af6:	b2cd      	uxtb	r5, r1
   17af8:	436f      	muls	r7, r5
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   17afa:	68c4      	ldr	r4, [r0, #12]
{
   17afc:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   17afe:	f107 0040 	add.w	r0, r7, #64	; 0x40
   17b02:	2180      	movs	r1, #128	; 0x80
   17b04:	4420      	add	r0, r4
{
   17b06:	4690      	mov	r8, r2
   17b08:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   17b0a:	f7ff ff99 	bl	17a40 <set_starting_state>
	if (err < 0) {
   17b0e:	2800      	cmp	r0, #0
   17b10:	db07      	blt.n	17b22 <api_start+0x32>
	subdata->cb = cb;
   17b12:	443c      	add	r4, r7
	subdata->user_data = user_data;
   17b14:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   17b18:	6873      	ldr	r3, [r6, #4]
   17b1a:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   17b1e:	4798      	blx	r3
	return 0;
   17b20:	2000      	movs	r0, #0
}
   17b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00017b26 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   17b26:	4770      	bx	lr

00017b28 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   17b28:	4770      	bx	lr

00017b2a <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   17b2a:	b510      	push	{r4, lr}
   17b2c:	b40f      	push	{r0, r1, r2, r3}
   17b2e:	f7fe fb39 	bl	161a4 <k_sched_lock>
   17b32:	bc0f      	pop	{r0, r1, r2, r3}
   17b34:	f7f0 fa58 	bl	7fe8 <spm_request_random_number_nse>
   17b38:	b40f      	push	{r0, r1, r2, r3}
   17b3a:	f7fe fb85 	bl	16248 <k_sched_unlock>
   17b3e:	bc0f      	pop	{r0, r1, r2, r3}
   17b40:	bd10      	pop	{r4, pc}

00017b42 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   17b42:	2100      	movs	r1, #0
   17b44:	2001      	movs	r0, #1
   17b46:	f000 b804 	b.w	17b52 <z_arm_fatal_error>

00017b4a <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   17b4a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   17b4c:	f383 880b 	msr	PSPLIM, r3
}
   17b50:	4770      	bx	lr

00017b52 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   17b52:	f002 bb68 	b.w	1a226 <z_fatal_error>

00017b56 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   17b56:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   17b58:	6800      	ldr	r0, [r0, #0]
   17b5a:	f002 bb64 	b.w	1a226 <z_fatal_error>

00017b5e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   17b5e:	b508      	push	{r3, lr}
	handler();
   17b60:	f7f7 fa78 	bl	f054 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   17b64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   17b68:	f7f7 baba 	b.w	f0e0 <z_arm_exc_exit>

00017b6c <mpu_configure_region>:
{
   17b6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
   17b6e:	890a      	ldrh	r2, [r1, #8]
   17b70:	7a8e      	ldrb	r6, [r1, #10]
	region_conf.base = new_region->start;
   17b72:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   17b74:	684d      	ldr	r5, [r1, #4]
   17b76:	f002 021f 	and.w	r2, r2, #31
   17b7a:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
   17b7e:	9300      	str	r3, [sp, #0]
   17b80:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   17b84:	f023 031f 	bic.w	r3, r3, #31
   17b88:	1e6a      	subs	r2, r5, #1
   17b8a:	4413      	add	r3, r2
   17b8c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   17b90:	280f      	cmp	r0, #15
   17b92:	9303      	str	r3, [sp, #12]
   17b94:	d804      	bhi.n	17ba0 <mpu_configure_region+0x34>
	region_init(index, region_conf);
   17b96:	4669      	mov	r1, sp
   17b98:	f7f7 fbe8 	bl	f36c <region_init>
}
   17b9c:	b004      	add	sp, #16
   17b9e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   17ba0:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
   17ba4:	e7fa      	b.n	17b9c <mpu_configure_region+0x30>

00017ba6 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   17ba6:	e840 f000 	tt	r0, r0
   17baa:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   17bac:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   17bb0:	bf14      	ite	ne
   17bb2:	4618      	movne	r0, r3
   17bb4:	f06f 0015 	mvneq.w	r0, #21
   17bb8:	4770      	bx	lr

00017bba <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   17bba:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   17bbc:	7802      	ldrb	r2, [r0, #0]
   17bbe:	4603      	mov	r3, r0
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   17bc0:	2a20      	cmp	r2, #32
   17bc2:	f100 0001 	add.w	r0, r0, #1
   17bc6:	d0f9      	beq.n	17bbc <atoi+0x2>
   17bc8:	f1a2 0109 	sub.w	r1, r2, #9
   17bcc:	2904      	cmp	r1, #4
   17bce:	d9f5      	bls.n	17bbc <atoi+0x2>
		s++;
	}
	switch (*s) {
   17bd0:	2a2b      	cmp	r2, #43	; 0x2b
   17bd2:	d008      	beq.n	17be6 <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   17bd4:	2a2d      	cmp	r2, #45	; 0x2d
   17bd6:	bf0a      	itet	eq
   17bd8:	4603      	moveq	r3, r0
   17bda:	2100      	movne	r1, #0
   17bdc:	2101      	moveq	r1, #1
	switch (*s) {
   17bde:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   17be0:	250a      	movs	r5, #10
   17be2:	3b01      	subs	r3, #1
   17be4:	e006      	b.n	17bf4 <atoi+0x3a>
		s++;
   17be6:	4603      	mov	r3, r0
	int neg = 0;
   17be8:	2100      	movs	r1, #0
   17bea:	e7f8      	b.n	17bde <atoi+0x24>
		n = 10*n - (*s++ - '0');
   17bec:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   17bf0:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   17bf4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   17bf8:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   17bfc:	2c09      	cmp	r4, #9
   17bfe:	d9f5      	bls.n	17bec <atoi+0x32>
	}
	return neg ? n : -n;
   17c00:	b901      	cbnz	r1, 17c04 <atoi+0x4a>
   17c02:	4240      	negs	r0, r0
}
   17c04:	bd30      	pop	{r4, r5, pc}

00017c06 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   17c06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17c0a:	4684      	mov	ip, r0
   17c0c:	4688      	mov	r8, r1
	register const char *s = nptr;
   17c0e:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   17c10:	460c      	mov	r4, r1
   17c12:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   17c16:	2b20      	cmp	r3, #32
   17c18:	d033      	beq.n	17c82 <strtol+0x7c>
   17c1a:	f1a3 0009 	sub.w	r0, r3, #9
   17c1e:	2804      	cmp	r0, #4
   17c20:	d92f      	bls.n	17c82 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   17c22:	2b2d      	cmp	r3, #45	; 0x2d
   17c24:	d12f      	bne.n	17c86 <strtol+0x80>
		neg = 1;
		c = *s++;
   17c26:	784b      	ldrb	r3, [r1, #1]
   17c28:	1c8c      	adds	r4, r1, #2
		neg = 1;
   17c2a:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   17c2c:	2a00      	cmp	r2, #0
   17c2e:	d05c      	beq.n	17cea <strtol+0xe4>
   17c30:	2a10      	cmp	r2, #16
   17c32:	d109      	bne.n	17c48 <strtol+0x42>
   17c34:	2b30      	cmp	r3, #48	; 0x30
   17c36:	d107      	bne.n	17c48 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   17c38:	7823      	ldrb	r3, [r4, #0]
   17c3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   17c3e:	2b58      	cmp	r3, #88	; 0x58
   17c40:	d14e      	bne.n	17ce0 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   17c42:	2210      	movs	r2, #16
		c = s[1];
   17c44:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   17c46:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   17c48:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   17c4a:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   17c4e:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   17c50:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   17c54:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   17c56:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   17c5a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   17c5e:	2d09      	cmp	r5, #9
   17c60:	d817      	bhi.n	17c92 <strtol+0x8c>
			c -= '0';
   17c62:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   17c64:	429a      	cmp	r2, r3
   17c66:	dd24      	ble.n	17cb2 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   17c68:	1c75      	adds	r5, r6, #1
   17c6a:	d007      	beq.n	17c7c <strtol+0x76>
   17c6c:	4570      	cmp	r0, lr
   17c6e:	d81d      	bhi.n	17cac <strtol+0xa6>
   17c70:	d101      	bne.n	17c76 <strtol+0x70>
   17c72:	454b      	cmp	r3, r9
   17c74:	dc1a      	bgt.n	17cac <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
   17c76:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   17c78:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   17c7c:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   17c80:	e7eb      	b.n	17c5a <strtol+0x54>
{
   17c82:	4621      	mov	r1, r4
   17c84:	e7c4      	b.n	17c10 <strtol+0xa>
	} else if (c == '+') {
   17c86:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   17c88:	bf04      	itt	eq
   17c8a:	784b      	ldrbeq	r3, [r1, #1]
   17c8c:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   17c8e:	2100      	movs	r1, #0
   17c90:	e7cc      	b.n	17c2c <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   17c92:	f043 0520 	orr.w	r5, r3, #32
   17c96:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   17c98:	2d19      	cmp	r5, #25
   17c9a:	d80a      	bhi.n	17cb2 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   17c9c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   17ca0:	2d1a      	cmp	r5, #26
   17ca2:	bf34      	ite	cc
   17ca4:	2537      	movcc	r5, #55	; 0x37
   17ca6:	2557      	movcs	r5, #87	; 0x57
   17ca8:	1b5b      	subs	r3, r3, r5
   17caa:	e7db      	b.n	17c64 <strtol+0x5e>
			any = -1;
   17cac:	f04f 36ff 	mov.w	r6, #4294967295
   17cb0:	e7e4      	b.n	17c7c <strtol+0x76>
		}
	}

	if (any < 0) {
   17cb2:	1c73      	adds	r3, r6, #1
   17cb4:	d109      	bne.n	17cca <strtol+0xc4>
   17cb6:	f7fd ff8f 	bl	15bd8 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   17cba:	2326      	movs	r3, #38	; 0x26
   17cbc:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   17cbe:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   17cc0:	f1b8 0f00 	cmp.w	r8, #0
   17cc4:	d107      	bne.n	17cd6 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   17cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   17cca:	b101      	cbz	r1, 17cce <strtol+0xc8>
		acc = -acc;
   17ccc:	4240      	negs	r0, r0
	if (endptr != NULL) {
   17cce:	f1b8 0f00 	cmp.w	r8, #0
   17cd2:	d0f8      	beq.n	17cc6 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   17cd4:	b10e      	cbz	r6, 17cda <strtol+0xd4>
   17cd6:	f104 3cff 	add.w	ip, r4, #4294967295
   17cda:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   17cde:	e7f2      	b.n	17cc6 <strtol+0xc0>
	if (base == 0) {
   17ce0:	2330      	movs	r3, #48	; 0x30
   17ce2:	2a00      	cmp	r2, #0
   17ce4:	d1b0      	bne.n	17c48 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   17ce6:	2208      	movs	r2, #8
   17ce8:	e7ae      	b.n	17c48 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   17cea:	2b30      	cmp	r3, #48	; 0x30
   17cec:	d0a4      	beq.n	17c38 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   17cee:	220a      	movs	r2, #10
   17cf0:	e7aa      	b.n	17c48 <strtol+0x42>

00017cf2 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   17cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17cf6:	4684      	mov	ip, r0
   17cf8:	460f      	mov	r7, r1
	register const char *s = nptr;
   17cfa:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   17cfc:	462c      	mov	r4, r5
   17cfe:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   17d02:	2b20      	cmp	r3, #32
   17d04:	d035      	beq.n	17d72 <strtoul+0x80>
   17d06:	f1a3 0109 	sub.w	r1, r3, #9
   17d0a:	2904      	cmp	r1, #4
   17d0c:	d931      	bls.n	17d72 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   17d0e:	2b2d      	cmp	r3, #45	; 0x2d
   17d10:	d131      	bne.n	17d76 <strtoul+0x84>
		neg = 1;
   17d12:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   17d16:	786b      	ldrb	r3, [r5, #1]
   17d18:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   17d1a:	2a00      	cmp	r2, #0
   17d1c:	d05e      	beq.n	17ddc <strtoul+0xea>
   17d1e:	2a10      	cmp	r2, #16
   17d20:	d109      	bne.n	17d36 <strtoul+0x44>
   17d22:	2b30      	cmp	r3, #48	; 0x30
   17d24:	d107      	bne.n	17d36 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   17d26:	7823      	ldrb	r3, [r4, #0]
   17d28:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   17d2c:	2b58      	cmp	r3, #88	; 0x58
   17d2e:	d150      	bne.n	17dd2 <strtoul+0xe0>
		c = s[1];
		s += 2;
		base = 16;
   17d30:	2210      	movs	r2, #16
		c = s[1];
   17d32:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   17d34:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   17d36:	f04f 31ff 	mov.w	r1, #4294967295
   17d3a:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   17d3e:	2600      	movs	r6, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   17d40:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   17d44:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   17d46:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   17d4a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   17d4e:	2d09      	cmp	r5, #9
   17d50:	d818      	bhi.n	17d84 <strtoul+0x92>
			c -= '0';
   17d52:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   17d54:	429a      	cmp	r2, r3
   17d56:	dd25      	ble.n	17da4 <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   17d58:	2e00      	cmp	r6, #0
   17d5a:	db20      	blt.n	17d9e <strtoul+0xac>
   17d5c:	4288      	cmp	r0, r1
   17d5e:	d81e      	bhi.n	17d9e <strtoul+0xac>
   17d60:	d101      	bne.n	17d66 <strtoul+0x74>
   17d62:	4543      	cmp	r3, r8
   17d64:	dc1b      	bgt.n	17d9e <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
   17d66:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   17d68:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   17d6c:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   17d70:	e7eb      	b.n	17d4a <strtoul+0x58>
{
   17d72:	4625      	mov	r5, r4
   17d74:	e7c2      	b.n	17cfc <strtoul+0xa>
	} else if (c == '+') {
   17d76:	2b2b      	cmp	r3, #43	; 0x2b
	register int neg = 0, any, cutlim;
   17d78:	f04f 0e00 	mov.w	lr, #0
		c = *s++;
   17d7c:	bf04      	itt	eq
   17d7e:	786b      	ldrbeq	r3, [r5, #1]
   17d80:	1cac      	addeq	r4, r5, #2
   17d82:	e7ca      	b.n	17d1a <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   17d84:	f043 0520 	orr.w	r5, r3, #32
   17d88:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   17d8a:	2d19      	cmp	r5, #25
   17d8c:	d80a      	bhi.n	17da4 <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   17d8e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   17d92:	2d1a      	cmp	r5, #26
   17d94:	bf34      	ite	cc
   17d96:	2537      	movcc	r5, #55	; 0x37
   17d98:	2557      	movcs	r5, #87	; 0x57
   17d9a:	1b5b      	subs	r3, r3, r5
   17d9c:	e7da      	b.n	17d54 <strtoul+0x62>
			any = -1;
   17d9e:	f04f 36ff 	mov.w	r6, #4294967295
   17da2:	e7e3      	b.n	17d6c <strtoul+0x7a>
		}
	}
	if (any < 0) {
   17da4:	2e00      	cmp	r6, #0
   17da6:	da08      	bge.n	17dba <strtoul+0xc8>
   17da8:	f7fd ff16 	bl	15bd8 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   17dac:	2326      	movs	r3, #38	; 0x26
   17dae:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   17db0:	f04f 30ff 	mov.w	r0, #4294967295
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   17db4:	b947      	cbnz	r7, 17dc8 <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   17db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   17dba:	f1be 0f00 	cmp.w	lr, #0
   17dbe:	d000      	beq.n	17dc2 <strtoul+0xd0>
		acc = -acc;
   17dc0:	4240      	negs	r0, r0
	if (endptr != NULL) {
   17dc2:	2f00      	cmp	r7, #0
   17dc4:	d0f7      	beq.n	17db6 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   17dc6:	b10e      	cbz	r6, 17dcc <strtoul+0xda>
   17dc8:	f104 3cff 	add.w	ip, r4, #4294967295
   17dcc:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   17dd0:	e7f1      	b.n	17db6 <strtoul+0xc4>
	if (base == 0) {
   17dd2:	2330      	movs	r3, #48	; 0x30
   17dd4:	2a00      	cmp	r2, #0
   17dd6:	d1ae      	bne.n	17d36 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   17dd8:	2208      	movs	r2, #8
   17dda:	e7ac      	b.n	17d36 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   17ddc:	2b30      	cmp	r3, #48	; 0x30
   17dde:	d0a2      	beq.n	17d26 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   17de0:	220a      	movs	r2, #10
   17de2:	e7a8      	b.n	17d36 <strtoul+0x44>

00017de4 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   17de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   17de8:	f891 8000 	ldrb.w	r8, [r1]
{
   17dec:	4605      	mov	r5, r0
	if (c != 0) {
   17dee:	f1b8 0f00 	cmp.w	r8, #0
   17df2:	d010      	beq.n	17e16 <strstr+0x32>
	c = *find++;
   17df4:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   17df6:	4620      	mov	r0, r4
   17df8:	f000 f835 	bl	17e66 <strlen>
   17dfc:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   17dfe:	462e      	mov	r6, r5
   17e00:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   17e04:	b163      	cbz	r3, 17e20 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   17e06:	4598      	cmp	r8, r3
   17e08:	d108      	bne.n	17e1c <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   17e0a:	463a      	mov	r2, r7
   17e0c:	4621      	mov	r1, r4
   17e0e:	4630      	mov	r0, r6
   17e10:	f000 f845 	bl	17e9e <strncmp>
   17e14:	b910      	cbnz	r0, 17e1c <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   17e16:	4628      	mov	r0, r5
   17e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   17e1c:	4635      	mov	r5, r6
   17e1e:	e7ee      	b.n	17dfe <strstr+0x1a>
					return NULL;
   17e20:	461d      	mov	r5, r3
   17e22:	e7f8      	b.n	17e16 <strstr+0x32>

00017e24 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   17e24:	b570      	push	{r4, r5, r6, lr}
   17e26:	4605      	mov	r5, r0
   17e28:	3901      	subs	r1, #1
   17e2a:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   17e2c:	b142      	cbz	r2, 17e40 <strncpy+0x1c>
   17e2e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   17e32:	1e56      	subs	r6, r2, #1
   17e34:	b92b      	cbnz	r3, 17e42 <strncpy+0x1e>
   17e36:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   17e38:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   17e3c:	42a2      	cmp	r2, r4
   17e3e:	d1fb      	bne.n	17e38 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   17e40:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   17e42:	4632      	mov	r2, r6
		*d = *s;
   17e44:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   17e48:	e7ef      	b.n	17e2a <strncpy+0x6>

00017e4a <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   17e4a:	4603      	mov	r3, r0
   17e4c:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   17e4e:	781a      	ldrb	r2, [r3, #0]
   17e50:	4618      	mov	r0, r3
   17e52:	428a      	cmp	r2, r1
   17e54:	f103 0301 	add.w	r3, r3, #1
   17e58:	d004      	beq.n	17e64 <strchr+0x1a>
   17e5a:	2a00      	cmp	r2, #0
   17e5c:	d1f7      	bne.n	17e4e <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   17e5e:	2900      	cmp	r1, #0
   17e60:	bf18      	it	ne
   17e62:	2000      	movne	r0, #0
}
   17e64:	4770      	bx	lr

00017e66 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   17e66:	4603      	mov	r3, r0
	size_t n = 0;
   17e68:	2000      	movs	r0, #0

	while (*s != '\0') {
   17e6a:	5c1a      	ldrb	r2, [r3, r0]
   17e6c:	b902      	cbnz	r2, 17e70 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   17e6e:	4770      	bx	lr
		n++;
   17e70:	3001      	adds	r0, #1
   17e72:	e7fa      	b.n	17e6a <strlen+0x4>

00017e74 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   17e74:	4603      	mov	r3, r0
	size_t n = 0;
   17e76:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   17e78:	5c1a      	ldrb	r2, [r3, r0]
   17e7a:	b10a      	cbz	r2, 17e80 <strnlen+0xc>
   17e7c:	4288      	cmp	r0, r1
   17e7e:	d100      	bne.n	17e82 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   17e80:	4770      	bx	lr
		n++;
   17e82:	3001      	adds	r0, #1
   17e84:	e7f8      	b.n	17e78 <strnlen+0x4>

00017e86 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   17e86:	3801      	subs	r0, #1
   17e88:	3901      	subs	r1, #1
   17e8a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   17e8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   17e92:	4293      	cmp	r3, r2
   17e94:	d101      	bne.n	17e9a <strcmp+0x14>
   17e96:	2b00      	cmp	r3, #0
   17e98:	d1f7      	bne.n	17e8a <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   17e9a:	1a98      	subs	r0, r3, r2
   17e9c:	4770      	bx	lr

00017e9e <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   17e9e:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   17ea0:	2400      	movs	r4, #0
   17ea2:	42a2      	cmp	r2, r4
   17ea4:	d008      	beq.n	17eb8 <strncmp+0x1a>
   17ea6:	5d03      	ldrb	r3, [r0, r4]
   17ea8:	5d0d      	ldrb	r5, [r1, r4]
   17eaa:	42ab      	cmp	r3, r5
   17eac:	d102      	bne.n	17eb4 <strncmp+0x16>
   17eae:	3401      	adds	r4, #1
   17eb0:	2b00      	cmp	r3, #0
   17eb2:	d1f6      	bne.n	17ea2 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   17eb4:	1b58      	subs	r0, r3, r5
   17eb6:	e000      	b.n	17eba <strncmp+0x1c>
   17eb8:	2000      	movs	r0, #0
}
   17eba:	bd30      	pop	{r4, r5, pc}

00017ebc <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   17ebc:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   17ebe:	b15a      	cbz	r2, 17ed8 <memcmp+0x1c>
   17ec0:	3901      	subs	r1, #1
   17ec2:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   17ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
   17ec8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   17ecc:	42a0      	cmp	r0, r4
   17ece:	d001      	beq.n	17ed4 <memcmp+0x18>
   17ed0:	429a      	cmp	r2, r3
   17ed2:	d0f7      	beq.n	17ec4 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   17ed4:	1ad0      	subs	r0, r2, r3
}
   17ed6:	bd10      	pop	{r4, pc}
		return 0;
   17ed8:	4610      	mov	r0, r2
   17eda:	e7fc      	b.n	17ed6 <memcmp+0x1a>

00017edc <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   17edc:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   17ede:	ea81 0400 	eor.w	r4, r1, r0
   17ee2:	07a5      	lsls	r5, r4, #30
   17ee4:	4603      	mov	r3, r0
   17ee6:	d00b      	beq.n	17f00 <memcpy+0x24>
   17ee8:	3b01      	subs	r3, #1
   17eea:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   17eec:	4291      	cmp	r1, r2
   17eee:	d11b      	bne.n	17f28 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   17ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   17ef2:	2a00      	cmp	r2, #0
   17ef4:	d0fc      	beq.n	17ef0 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   17ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   17efa:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   17efc:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   17f00:	079c      	lsls	r4, r3, #30
   17f02:	d1f6      	bne.n	17ef2 <memcpy+0x16>
   17f04:	f022 0403 	bic.w	r4, r2, #3
   17f08:	1f1d      	subs	r5, r3, #4
   17f0a:	0896      	lsrs	r6, r2, #2
   17f0c:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   17f0e:	42b9      	cmp	r1, r7
   17f10:	d105      	bne.n	17f1e <memcpy+0x42>
   17f12:	f06f 0503 	mvn.w	r5, #3
   17f16:	4423      	add	r3, r4
   17f18:	fb05 2206 	mla	r2, r5, r6, r2
   17f1c:	e7e4      	b.n	17ee8 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   17f1e:	f851 cb04 	ldr.w	ip, [r1], #4
   17f22:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   17f26:	e7f2      	b.n	17f0e <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   17f28:	f811 4b01 	ldrb.w	r4, [r1], #1
   17f2c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   17f30:	e7dc      	b.n	17eec <memcpy+0x10>

00017f32 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   17f32:	4603      	mov	r3, r0
{
   17f34:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   17f36:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   17f38:	079c      	lsls	r4, r3, #30
   17f3a:	d111      	bne.n	17f60 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   17f3c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   17f40:	f022 0603 	bic.w	r6, r2, #3
   17f44:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   17f48:	441e      	add	r6, r3
   17f4a:	0894      	lsrs	r4, r2, #2
   17f4c:	42b3      	cmp	r3, r6
   17f4e:	d10d      	bne.n	17f6c <memset+0x3a>
   17f50:	f06f 0503 	mvn.w	r5, #3
   17f54:	fb05 2204 	mla	r2, r5, r4, r2
   17f58:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   17f5a:	4293      	cmp	r3, r2
   17f5c:	d109      	bne.n	17f72 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   17f5e:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   17f60:	2a00      	cmp	r2, #0
   17f62:	d0fc      	beq.n	17f5e <memset+0x2c>
		*(d_byte++) = c_byte;
   17f64:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   17f68:	3a01      	subs	r2, #1
   17f6a:	e7e5      	b.n	17f38 <memset+0x6>
		*(d_word++) = c_word;
   17f6c:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   17f70:	e7ec      	b.n	17f4c <memset+0x1a>
		*(d_byte++) = c_byte;
   17f72:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   17f76:	e7f0      	b.n	17f5a <memset+0x28>

00017f78 <_stdout_hook_default>:
}
   17f78:	f04f 30ff 	mov.w	r0, #4294967295
   17f7c:	4770      	bx	lr

00017f7e <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   17f7e:	684b      	ldr	r3, [r1, #4]
   17f80:	2b01      	cmp	r3, #1
   17f82:	dd07      	ble.n	17f94 <sprintf_out+0x16>
		*(p->ptr) = c;
   17f84:	680b      	ldr	r3, [r1, #0]
   17f86:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   17f88:	680b      	ldr	r3, [r1, #0]
   17f8a:	3301      	adds	r3, #1
   17f8c:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   17f8e:	684b      	ldr	r3, [r1, #4]
   17f90:	3b01      	subs	r3, #1
   17f92:	604b      	str	r3, [r1, #4]
}
   17f94:	2000      	movs	r0, #0
   17f96:	4770      	bx	lr

00017f98 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   17f98:	b508      	push	{r3, lr}
	net_if_init();
   17f9a:	f7f7 fb6b 	bl	f674 <net_if_init>
	net_if_post_init();
   17f9e:	f7f7 fb7f 	bl	f6a0 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   17fa2:	2000      	movs	r0, #0
   17fa4:	bd08      	pop	{r3, pc}

00017fa6 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   17fa6:	b110      	cbz	r0, 17fae <net_if_l2+0x8>
   17fa8:	6800      	ldr	r0, [r0, #0]
   17faa:	b100      	cbz	r0, 17fae <net_if_l2+0x8>
	return iface->if_dev->l2;
   17fac:	6840      	ldr	r0, [r0, #4]
}
   17fae:	4770      	bx	lr

00017fb0 <l2_flags_get>:
{
   17fb0:	b510      	push	{r4, lr}
   17fb2:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   17fb4:	f7ff fff7 	bl	17fa6 <net_if_l2>
   17fb8:	b128      	cbz	r0, 17fc6 <l2_flags_get+0x16>
   17fba:	68c2      	ldr	r2, [r0, #12]
   17fbc:	b11a      	cbz	r2, 17fc6 <l2_flags_get+0x16>
}
   17fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   17fc2:	4618      	mov	r0, r3
   17fc4:	4710      	bx	r2
}
   17fc6:	2000      	movs	r0, #0
   17fc8:	bd10      	pop	{r4, pc}

00017fca <net_if_up>:
{
   17fca:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17fcc:	6803      	ldr	r3, [r0, #0]
   17fce:	4604      	mov	r4, r0
   17fd0:	330c      	adds	r3, #12
   17fd2:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   17fd6:	f013 0301 	ands.w	r3, r3, #1
   17fda:	d10b      	bne.n	17ff4 <net_if_up+0x2a>
	     net_if_is_socket_offloaded(iface))) {
   17fdc:	6802      	ldr	r2, [r0, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   17fde:	7e91      	ldrb	r1, [r2, #26]
   17fe0:	b151      	cbz	r1, 17ff8 <net_if_up+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17fe2:	320c      	adds	r2, #12
   17fe4:	e8d2 1fef 	ldaex	r1, [r2]
   17fe8:	f041 0101 	orr.w	r1, r1, #1
   17fec:	e8c2 1fe0 	stlex	r0, r1, [r2]
   17ff0:	2800      	cmp	r0, #0
   17ff2:	d1f7      	bne.n	17fe4 <net_if_up+0x1a>
		return 0;
   17ff4:	2000      	movs	r0, #0
   17ff6:	e018      	b.n	1802a <net_if_up+0x60>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   17ff8:	f7ff ffd5 	bl	17fa6 <net_if_l2>
   17ffc:	b968      	cbnz	r0, 1801a <net_if_up+0x50>
   17ffe:	6823      	ldr	r3, [r4, #0]
   18000:	330c      	adds	r3, #12
   18002:	e8d3 2fef 	ldaex	r2, [r3]
   18006:	f042 0201 	orr.w	r2, r2, #1
   1800a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1800e:	2900      	cmp	r1, #0
   18010:	d1f7      	bne.n	18002 <net_if_up+0x38>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   18012:	4620      	mov	r0, r4
   18014:	f7ff ffcc 	bl	17fb0 <l2_flags_get>
   18018:	e7ec      	b.n	17ff4 <net_if_up+0x2a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1801a:	6883      	ldr	r3, [r0, #8]
   1801c:	2b00      	cmp	r3, #0
   1801e:	d0ee      	beq.n	17ffe <net_if_up+0x34>
	status = net_if_l2(iface)->enable(iface, true);
   18020:	2101      	movs	r1, #1
   18022:	4620      	mov	r0, r4
   18024:	4798      	blx	r3
	if (status < 0) {
   18026:	2800      	cmp	r0, #0
   18028:	dae9      	bge.n	17ffe <net_if_up+0x34>
}
   1802a:	bd10      	pop	{r4, pc}

0001802c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1802c:	6843      	ldr	r3, [r0, #4]
}
   1802e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18030:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   18032:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   18034:	600b      	str	r3, [r1, #0]
}
   18036:	4770      	bx	lr

00018038 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18038:	6843      	ldr	r3, [r0, #4]
   1803a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1803c:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1803e:	4042      	eors	r2, r0
   18040:	400a      	ands	r2, r1
   18042:	4042      	eors	r2, r0
    p_reg->OUT = value;
   18044:	605a      	str	r2, [r3, #4]
}
   18046:	2000      	movs	r0, #0
   18048:	4770      	bx	lr

0001804a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1804a:	6843      	ldr	r3, [r0, #4]
}
   1804c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1804e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   18050:	6099      	str	r1, [r3, #8]
}
   18052:	4770      	bx	lr

00018054 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18054:	6843      	ldr	r3, [r0, #4]
}
   18056:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18058:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1805a:	60d9      	str	r1, [r3, #12]
}
   1805c:	4770      	bx	lr

0001805e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1805e:	6843      	ldr	r3, [r0, #4]
}
   18060:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18062:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   18064:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   18066:	4059      	eors	r1, r3
    p_reg->OUT = value;
   18068:	6051      	str	r1, [r2, #4]
}
   1806a:	4770      	bx	lr

0001806c <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1806c:	68c3      	ldr	r3, [r0, #12]
{
   1806e:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   18070:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   18072:	b158      	cbz	r0, 1808c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18074:	2400      	movs	r4, #0
   18076:	4281      	cmp	r1, r0
   18078:	d113      	bne.n	180a2 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1807a:	6808      	ldr	r0, [r1, #0]
   1807c:	b95c      	cbnz	r4, 18096 <gpio_nrfx_manage_callback+0x2a>
   1807e:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   18080:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   18082:	42a1      	cmp	r1, r4
   18084:	d100      	bne.n	18088 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   18086:	6098      	str	r0, [r3, #8]
	parent->next = child;
   18088:	2000      	movs	r0, #0
   1808a:	6008      	str	r0, [r1, #0]
	if (set) {
   1808c:	b972      	cbnz	r2, 180ac <gpio_nrfx_manage_callback+0x40>
	return 0;
   1808e:	2000      	movs	r0, #0
}
   18090:	bd30      	pop	{r4, r5, pc}
   18092:	4628      	mov	r0, r5
   18094:	e7ef      	b.n	18076 <gpio_nrfx_manage_callback+0xa>
   18096:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   18098:	6898      	ldr	r0, [r3, #8]
   1809a:	4281      	cmp	r1, r0
	list->tail = node;
   1809c:	bf08      	it	eq
   1809e:	609c      	streq	r4, [r3, #8]
}
   180a0:	e7f2      	b.n	18088 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   180a2:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   180a4:	4604      	mov	r4, r0
   180a6:	2d00      	cmp	r5, #0
   180a8:	d1f3      	bne.n	18092 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   180aa:	b13a      	cbz	r2, 180bc <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   180ac:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   180ae:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   180b0:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   180b2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   180b4:	2800      	cmp	r0, #0
   180b6:	d1ea      	bne.n	1808e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   180b8:	6099      	str	r1, [r3, #8]
}
   180ba:	e7e9      	b.n	18090 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   180bc:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   180c0:	e7e6      	b.n	18090 <gpio_nrfx_manage_callback+0x24>

000180c2 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   180c2:	6843      	ldr	r3, [r0, #4]
{
   180c4:	b410      	push	{r4}
	return config->uarte_regs;
   180c6:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   180c8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   180cc:	05d2      	lsls	r2, r2, #23
   180ce:	d518      	bpl.n	18102 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   180d0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   180d4:	b1aa      	cbz	r2, 18102 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   180d6:	f04f 0120 	mov.w	r1, #32
   180da:	f3ef 8211 	mrs	r2, BASEPRI
   180de:	f381 8811 	msr	BASEPRI, r1
   180e2:	f3bf 8f6f 	isb	sy
   180e6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   180ea:	b131      	cbz	r1, 180fa <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   180ec:	2100      	movs	r1, #0
   180ee:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   180f2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   180f6:	2101      	movs	r1, #1
   180f8:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   180fa:	f382 8811 	msr	BASEPRI, r2
   180fe:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   18102:	68c2      	ldr	r2, [r0, #12]
   18104:	68d2      	ldr	r2, [r2, #12]
   18106:	b15a      	cbz	r2, 18120 <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18108:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1810c:	b159      	cbz	r1, 18126 <uarte_nrfx_isr_int+0x64>
		data->int_driven->fifo_fill_lock = 0;
   1810e:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   18110:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   18112:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   18114:	b13c      	cbz	r4, 18126 <uarte_nrfx_isr_int+0x64>
    p_reg->INTENCLR = mask;
   18116:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1811a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1811e:	7391      	strb	r1, [r2, #14]
}
   18120:	f85d 4b04 	ldr.w	r4, [sp], #4
   18124:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18126:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1812a:	b121      	cbz	r1, 18136 <uarte_nrfx_isr_int+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1812c:	2100      	movs	r1, #0
   1812e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   18132:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   18136:	6813      	ldr	r3, [r2, #0]
   18138:	2b00      	cmp	r3, #0
   1813a:	d0f1      	beq.n	18120 <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1813c:	6851      	ldr	r1, [r2, #4]
}
   1813e:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   18142:	4718      	bx	r3

00018144 <uarte_nrfx_config_get>:
{
   18144:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   18146:	68c2      	ldr	r2, [r0, #12]
   18148:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1814c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   18150:	2000      	movs	r0, #0
   18152:	4770      	bx	lr

00018154 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   18154:	6843      	ldr	r3, [r0, #4]
   18156:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   18158:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1815c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   18160:	4770      	bx	lr

00018162 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   18162:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   18164:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18166:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1816a:	b938      	cbnz	r0, 1817c <is_tx_ready+0x1a>
   1816c:	7992      	ldrb	r2, [r2, #6]
   1816e:	b932      	cbnz	r2, 1817e <is_tx_ready+0x1c>
   18170:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   18174:	3800      	subs	r0, #0
   18176:	bf18      	it	ne
   18178:	2001      	movne	r0, #1
   1817a:	4770      	bx	lr
   1817c:	2001      	movs	r0, #1
}
   1817e:	4770      	bx	lr

00018180 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   18180:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   18182:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   18184:	681b      	ldr	r3, [r3, #0]
   18186:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1818a:	b148      	cbz	r0, 181a0 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1818c:	2000      	movs	r0, #0
	*c = data->rx_data;
   1818e:	7d52      	ldrb	r2, [r2, #21]
   18190:	700a      	strb	r2, [r1, #0]
   18192:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   18196:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1819a:	2201      	movs	r2, #1
   1819c:	601a      	str	r2, [r3, #0]
	return 0;
   1819e:	4770      	bx	lr
		return -1;
   181a0:	f04f 30ff 	mov.w	r0, #4294967295
}
   181a4:	4770      	bx	lr

000181a6 <uarte_nrfx_fifo_fill>:
{
   181a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   181a8:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   181aa:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   181ac:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   181ae:	68f3      	ldr	r3, [r6, #12]
   181b0:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   181b2:	3310      	adds	r3, #16
   181b4:	4294      	cmp	r4, r2
   181b6:	bfa8      	it	ge
   181b8:	4614      	movge	r4, r2
   181ba:	2201      	movs	r2, #1
   181bc:	e8d3 7fef 	ldaex	r7, [r3]
   181c0:	2f00      	cmp	r7, #0
   181c2:	d104      	bne.n	181ce <uarte_nrfx_fifo_fill+0x28>
   181c4:	e8c3 2fec 	stlex	ip, r2, [r3]
   181c8:	f1bc 0f00 	cmp.w	ip, #0
   181cc:	d1f6      	bne.n	181bc <uarte_nrfx_fifo_fill+0x16>
   181ce:	bf0c      	ite	eq
   181d0:	4613      	moveq	r3, r2
   181d2:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   181d4:	d01c      	beq.n	18210 <uarte_nrfx_fifo_fill+0x6a>
		return 0;
   181d6:	461c      	mov	r4, r3
}
   181d8:	4620      	mov	r0, r4
   181da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   181dc:	68f2      	ldr	r2, [r6, #12]
   181de:	5ccf      	ldrb	r7, [r1, r3]
   181e0:	6892      	ldr	r2, [r2, #8]
   181e2:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   181e4:	3301      	adds	r3, #1
   181e6:	42a3      	cmp	r3, r4
   181e8:	dbf8      	blt.n	181dc <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   181ea:	f04f 0320 	mov.w	r3, #32
   181ee:	f3ef 8111 	mrs	r1, BASEPRI
   181f2:	f383 8811 	msr	BASEPRI, r3
   181f6:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   181fa:	f7ff ffb2 	bl	18162 <is_tx_ready>
   181fe:	68f3      	ldr	r3, [r6, #12]
   18200:	b940      	cbnz	r0, 18214 <uarte_nrfx_fifo_fill+0x6e>
		len = 0;
   18202:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   18204:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   18206:	f381 8811 	msr	BASEPRI, r1
   1820a:	f3bf 8f6f 	isb	sy
	return len;
   1820e:	e7e3      	b.n	181d8 <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   18210:	2300      	movs	r3, #0
   18212:	e7e8      	b.n	181e6 <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   18214:	689b      	ldr	r3, [r3, #8]
   18216:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1821a:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   1821c:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18220:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   18224:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   18228:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   1822c:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18230:	2301      	movs	r3, #1
   18232:	60ab      	str	r3, [r5, #8]
}
   18234:	e7e7      	b.n	18206 <uarte_nrfx_fifo_fill+0x60>

00018236 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   18236:	6843      	ldr	r3, [r0, #4]
   18238:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1823a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1823e:	b153      	cbz	r3, 18256 <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   18240:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18242:	2000      	movs	r0, #0
   18244:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   18248:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1824c:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1824e:	7d5b      	ldrb	r3, [r3, #21]
   18250:	700b      	strb	r3, [r1, #0]
   18252:	6010      	str	r0, [r2, #0]
}
   18254:	4770      	bx	lr
	int num_rx = 0;
   18256:	4618      	mov	r0, r3
}
   18258:	4770      	bx	lr

0001825a <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1825a:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1825c:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   1825e:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   18260:	f04f 0020 	mov.w	r0, #32
   18264:	f3ef 8311 	mrs	r3, BASEPRI
   18268:	f380 8811 	msr	BASEPRI, r0
   1826c:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   18270:	2000      	movs	r0, #0
   18272:	68c9      	ldr	r1, [r1, #12]
   18274:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   18276:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1827a:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1827e:	f383 8811 	msr	BASEPRI, r3
   18282:	f3bf 8f6f 	isb	sy
}
   18286:	4770      	bx	lr

00018288 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   18288:	2201      	movs	r2, #1
   1828a:	68c3      	ldr	r3, [r0, #12]
   1828c:	68db      	ldr	r3, [r3, #12]
   1828e:	739a      	strb	r2, [r3, #14]
}
   18290:	4770      	bx	lr

00018292 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   18292:	68c3      	ldr	r3, [r0, #12]
   18294:	68db      	ldr	r3, [r3, #12]
   18296:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   18298:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1829c:	b962      	cbnz	r2, 182b8 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1829e:	6842      	ldr	r2, [r0, #4]
   182a0:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   182a2:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   182a6:	b140      	cbz	r0, 182ba <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   182a8:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   182ac:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   182b0:	d003      	beq.n	182ba <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   182b2:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   182b4:	6119      	str	r1, [r3, #16]
   182b6:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   182b8:	2000      	movs	r0, #0
}
   182ba:	4770      	bx	lr

000182bc <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   182bc:	6843      	ldr	r3, [r0, #4]
   182be:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   182c0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   182c4:	3800      	subs	r0, #0
   182c6:	bf18      	it	ne
   182c8:	2001      	movne	r0, #1
   182ca:	4770      	bx	lr

000182cc <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   182cc:	2210      	movs	r2, #16
	return config->uarte_regs;
   182ce:	6843      	ldr	r3, [r0, #4]
   182d0:	681b      	ldr	r3, [r3, #0]
   182d2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   182d6:	4770      	bx	lr

000182d8 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   182d8:	2210      	movs	r2, #16
	return config->uarte_regs;
   182da:	6843      	ldr	r3, [r0, #4]
   182dc:	681b      	ldr	r3, [r3, #0]
   182de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   182e2:	4770      	bx	lr

000182e4 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   182e4:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   182e8:	6843      	ldr	r3, [r0, #4]
   182ea:	681b      	ldr	r3, [r3, #0]
   182ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   182f0:	4770      	bx	lr

000182f2 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   182f2:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   182f6:	6843      	ldr	r3, [r0, #4]
   182f8:	681b      	ldr	r3, [r3, #0]
   182fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   182fe:	4770      	bx	lr

00018300 <uarte_nrfx_irq_update>:
}
   18300:	2001      	movs	r0, #1
   18302:	4770      	bx	lr

00018304 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   18304:	68c3      	ldr	r3, [r0, #12]
   18306:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   18308:	e9c3 1200 	strd	r1, r2, [r3]
}
   1830c:	4770      	bx	lr

0001830e <uarte_nrfx_irq_is_pending>:
{
   1830e:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   18310:	6843      	ldr	r3, [r0, #4]
{
   18312:	4604      	mov	r4, r0
	return config->uarte_regs;
   18314:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   18316:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1831a:	025b      	lsls	r3, r3, #9
   1831c:	d405      	bmi.n	1832a <uarte_nrfx_irq_is_pending+0x1c>
   1831e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   18322:	f010 0010 	ands.w	r0, r0, #16
   18326:	d106      	bne.n	18336 <uarte_nrfx_irq_is_pending+0x28>
}
   18328:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1832a:	f7ff ffb2 	bl	18292 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1832e:	2800      	cmp	r0, #0
   18330:	d0f5      	beq.n	1831e <uarte_nrfx_irq_is_pending+0x10>
		||
   18332:	2001      	movs	r0, #1
   18334:	e7f8      	b.n	18328 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   18336:	4620      	mov	r0, r4
   18338:	f7ff ffc0 	bl	182bc <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1833c:	3800      	subs	r0, #0
   1833e:	bf18      	it	ne
   18340:	2001      	movne	r0, #1
   18342:	e7f1      	b.n	18328 <uarte_nrfx_irq_is_pending+0x1a>

00018344 <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   18344:	2000      	movs	r0, #0
   18346:	4770      	bx	lr

00018348 <entropy_cc3xx_rng_get_entropy>:
{
   18348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1834c:	460f      	mov	r7, r1
   1834e:	4614      	mov	r4, r2
	size_t offset = 0;
   18350:	2600      	movs	r6, #0
	int res = -EINVAL;
   18352:	f06f 0515 	mvn.w	r5, #21
{
   18356:	b0a6      	sub	sp, #152	; 0x98
	while (length > 0) {
   18358:	b91c      	cbnz	r4, 18362 <entropy_cc3xx_rng_get_entropy+0x1a>
}
   1835a:	4628      	mov	r0, r5
   1835c:	b026      	add	sp, #152	; 0x98
   1835e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   18362:	2190      	movs	r1, #144	; 0x90
   18364:	aa01      	add	r2, sp, #4
   18366:	a802      	add	r0, sp, #8
   18368:	f7ff fbdf 	bl	17b2a <spm_request_random_number>
		if (res < 0) {
   1836c:	1e05      	subs	r5, r0, #0
   1836e:	dbf4      	blt.n	1835a <entropy_cc3xx_rng_get_entropy+0x12>
		if (olen != sizeof(spm_buf)) {
   18370:	9b01      	ldr	r3, [sp, #4]
   18372:	2b90      	cmp	r3, #144	; 0x90
   18374:	d10e      	bne.n	18394 <entropy_cc3xx_rng_get_entropy+0x4c>
		to_copy = MIN(length, sizeof(spm_buf));
   18376:	2c90      	cmp	r4, #144	; 0x90
   18378:	46a0      	mov	r8, r4
   1837a:	bf28      	it	cs
   1837c:	f04f 0890 	movcs.w	r8, #144	; 0x90
		memcpy(buffer + offset, spm_buf, to_copy);
   18380:	19b8      	adds	r0, r7, r6
   18382:	4642      	mov	r2, r8
   18384:	a902      	add	r1, sp, #8
		length -= to_copy;
   18386:	eba4 0408 	sub.w	r4, r4, r8
		memcpy(buffer + offset, spm_buf, to_copy);
   1838a:	f7ff fda7 	bl	17edc <memcpy>
		length -= to_copy;
   1838e:	b2a4      	uxth	r4, r4
		offset += to_copy;
   18390:	4446      	add	r6, r8
   18392:	e7e1      	b.n	18358 <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   18394:	f06f 0515 	mvn.w	r5, #21
   18398:	e7df      	b.n	1835a <entropy_cc3xx_rng_get_entropy+0x12>

0001839a <z_errno>:
   1839a:	f7fd bc1d 	b.w	15bd8 <z_impl_z_errno>

0001839e <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1839e:	4668      	mov	r0, sp
   183a0:	f020 0107 	bic.w	r1, r0, #7
   183a4:	468d      	mov	sp, r1
   183a6:	b501      	push	{r0, lr}
	nrf_modem_os_trace_irq_handler();
   183a8:	f7f9 fda2 	bl	11ef0 <nrf_modem_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   183ac:	f7f6 fd4c 	bl	ee48 <_arch_isr_direct_pm>
   183b0:	f7f6 fe96 	bl	f0e0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   183b4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   183b8:	4685      	mov	sp, r0
   183ba:	4770      	bx	lr

000183bc <trace_task_create>:
{
   183bc:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   183be:	201d      	movs	r0, #29
   183c0:	2200      	movs	r2, #0
   183c2:	2106      	movs	r1, #6
   183c4:	f7f6 fd2a 	bl	ee1c <z_arm_irq_priority_set>
}
   183c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   183cc:	201d      	movs	r0, #29
   183ce:	f7f6 bd07 	b.w	ede0 <arch_irq_enable>

000183d2 <read_task_create>:
{
   183d2:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   183d4:	201c      	movs	r0, #28
   183d6:	2200      	movs	r2, #0
   183d8:	2106      	movs	r1, #6
   183da:	f7f6 fd1f 	bl	ee1c <z_arm_irq_priority_set>
}
   183de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   183e2:	201c      	movs	r0, #28
   183e4:	f7f6 bcfc 	b.w	ede0 <arch_irq_enable>

000183e8 <nrf_modem_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   183e8:	2000      	movs	r0, #0
   183ea:	4770      	bx	lr

000183ec <z_to_nrf_flags>:
{
   183ec:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   183ee:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   183f2:	bf18      	it	ne
   183f4:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   183f6:	0799      	lsls	r1, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   183f8:	bf48      	it	mi
   183fa:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   183fe:	06da      	lsls	r2, r3, #27
		nrf_flags |= NRF_MSG_TRUNC;
   18400:	bf48      	it	mi
   18402:	f040 0020 	orrmi.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   18406:	069b      	lsls	r3, r3, #26
		nrf_flags |= NRF_MSG_WAITALL;
   18408:	bf48      	it	mi
   1840a:	f040 0010 	orrmi.w	r0, r0, #16
}
   1840e:	4770      	bx	lr

00018410 <z_to_nrf_family>:
	switch (z_family) {
   18410:	2806      	cmp	r0, #6
   18412:	d80a      	bhi.n	1842a <z_to_nrf_family+0x1a>
   18414:	b198      	cbz	r0, 1843e <z_to_nrf_family+0x2e>
   18416:	3801      	subs	r0, #1
   18418:	2805      	cmp	r0, #5
   1841a:	d810      	bhi.n	1843e <z_to_nrf_family+0x2e>
   1841c:	e8df f000 	tbb	[pc, r0]
   18420:	0f0d0312 	.word	0x0f0d0312
   18424:	0b0f      	.short	0x0b0f
   18426:	200a      	movs	r0, #10
   18428:	4770      	bx	lr
   1842a:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   1842c:	bf14      	ite	ne
   1842e:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   18432:	2066      	moveq	r0, #102	; 0x66
   18434:	4770      	bx	lr
		return NRF_AF_LOCAL;
   18436:	2001      	movs	r0, #1
   18438:	4770      	bx	lr
		return NRF_AF_PACKET;
   1843a:	2005      	movs	r0, #5
   1843c:	4770      	bx	lr
		return -EAFNOSUPPORT;
   1843e:	f06f 002e 	mvn.w	r0, #46	; 0x2e
   18442:	4770      	bx	lr
		return NRF_AF_INET;
   18444:	2002      	movs	r0, #2
}
   18446:	4770      	bx	lr

00018448 <z_to_nrf_protocol>:
	switch (proto) {
   18448:	f240 1311 	movw	r3, #273	; 0x111
   1844c:	4298      	cmp	r0, r3
   1844e:	d023      	beq.n	18498 <z_to_nrf_protocol+0x50>
   18450:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   18454:	da11      	bge.n	1847a <z_to_nrf_protocol+0x32>
   18456:	2811      	cmp	r0, #17
   18458:	d021      	beq.n	1849e <z_to_nrf_protocol+0x56>
   1845a:	dc06      	bgt.n	1846a <z_to_nrf_protocol+0x22>
   1845c:	b300      	cbz	r0, 184a0 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   1845e:	2806      	cmp	r0, #6
   18460:	bf14      	ite	ne
   18462:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   18466:	2001      	moveq	r0, #1
   18468:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   1846a:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1846e:	bf14      	ite	ne
   18470:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   18474:	f44f 7082 	moveq.w	r0, #260	; 0x104
   18478:	4770      	bx	lr
	switch (proto) {
   1847a:	f240 2302 	movw	r3, #514	; 0x202
   1847e:	4298      	cmp	r0, r3
   18480:	d00e      	beq.n	184a0 <z_to_nrf_protocol+0x58>
   18482:	f240 2303 	movw	r3, #515	; 0x203
   18486:	4298      	cmp	r0, r3
   18488:	d00a      	beq.n	184a0 <z_to_nrf_protocol+0x58>
   1848a:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   1848e:	4298      	cmp	r0, r3
   18490:	bf18      	it	ne
   18492:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   18496:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   18498:	f44f 7087 	mov.w	r0, #270	; 0x10e
   1849c:	4770      	bx	lr
	switch (proto) {
   1849e:	2002      	movs	r0, #2
}
   184a0:	4770      	bx	lr

000184a2 <nrf91_socket_is_supported>:
}
   184a2:	2001      	movs	r0, #1
   184a4:	4770      	bx	lr

000184a6 <nrf91_nrf_modem_lib_socket_offload_init>:
}
   184a6:	2000      	movs	r0, #0
   184a8:	4770      	bx	lr

000184aa <z_errno>:
   184aa:	f7fd bb95 	b.w	15bd8 <z_impl_z_errno>

000184ae <nrf91_socket_offload_getsockopt>:
{
   184ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   184b2:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   184b4:	2300      	movs	r3, #0
{
   184b6:	b086      	sub	sp, #24
   184b8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   184bc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   184c0:	f8d8 3000 	ldr.w	r3, [r8]
{
   184c4:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   184c6:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   184c8:	f240 2302 	movw	r3, #514	; 0x202
   184cc:	4299      	cmp	r1, r3
{
   184ce:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   184d0:	f100 37ff 	add.w	r7, r0, #4294967295
	switch (z_in_level) {
   184d4:	d005      	beq.n	184e2 <nrf91_socket_offload_getsockopt+0x34>
   184d6:	dc31      	bgt.n	1853c <nrf91_socket_offload_getsockopt+0x8e>
   184d8:	2901      	cmp	r1, #1
   184da:	d002      	beq.n	184e2 <nrf91_socket_offload_getsockopt+0x34>
   184dc:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   184e0:	d13d      	bne.n	1855e <nrf91_socket_offload_getsockopt+0xb0>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   184e2:	4631      	mov	r1, r6
   184e4:	4620      	mov	r0, r4
   184e6:	aa02      	add	r2, sp, #8
   184e8:	f7f8 f810 	bl	1050c <z_to_nrf_optname>
   184ec:	2800      	cmp	r0, #0
   184ee:	db36      	blt.n	1855e <nrf91_socket_offload_getsockopt+0xb0>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   184f0:	2c01      	cmp	r4, #1
   184f2:	d127      	bne.n	18544 <nrf91_socket_offload_getsockopt+0x96>
   184f4:	f1a6 0314 	sub.w	r3, r6, #20
   184f8:	2b01      	cmp	r3, #1
   184fa:	d823      	bhi.n	18544 <nrf91_socket_offload_getsockopt+0x96>
		nrf_optlen = sizeof(struct nrf_timeval);
   184fc:	2308      	movs	r3, #8
   184fe:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   18500:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   18502:	aa03      	add	r2, sp, #12
   18504:	4638      	mov	r0, r7
   18506:	9200      	str	r2, [sp, #0]
   18508:	4621      	mov	r1, r4
   1850a:	9a02      	ldr	r2, [sp, #8]
   1850c:	f001 fe2c 	bl	1a168 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   18510:	4607      	mov	r7, r0
   18512:	b978      	cbnz	r0, 18534 <nrf91_socket_offload_getsockopt+0x86>
   18514:	b175      	cbz	r5, 18534 <nrf91_socket_offload_getsockopt+0x86>
		*optlen = nrf_optlen;
   18516:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   18518:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1851a:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1851e:	d109      	bne.n	18534 <nrf91_socket_offload_getsockopt+0x86>
			if (optname == SO_ERROR) {
   18520:	2e04      	cmp	r6, #4
   18522:	d111      	bne.n	18548 <nrf91_socket_offload_getsockopt+0x9a>
				if (*(int *)optval != 0) {
   18524:	6828      	ldr	r0, [r5, #0]
   18526:	b128      	cbz	r0, 18534 <nrf91_socket_offload_getsockopt+0x86>
					nrf_modem_os_errno_set(*(int *)optval);
   18528:	f7f7 fe16 	bl	10158 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   1852c:	f7ff ffbd 	bl	184aa <z_errno>
   18530:	6803      	ldr	r3, [r0, #0]
   18532:	602b      	str	r3, [r5, #0]
}
   18534:	4638      	mov	r0, r7
   18536:	b006      	add	sp, #24
   18538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1853c:	f240 2303 	movw	r3, #515	; 0x203
   18540:	4299      	cmp	r1, r3
   18542:	e7cd      	b.n	184e0 <nrf91_socket_offload_getsockopt+0x32>
   18544:	462b      	mov	r3, r5
   18546:	e7dc      	b.n	18502 <nrf91_socket_offload_getsockopt+0x54>
			} else if ((optname == SO_RCVTIMEO) ||
   18548:	3e14      	subs	r6, #20
   1854a:	2e01      	cmp	r6, #1
   1854c:	d8f2      	bhi.n	18534 <nrf91_socket_offload_getsockopt+0x86>
				((struct timeval *)optval)->tv_sec =
   1854e:	9b04      	ldr	r3, [sp, #16]
   18550:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   18552:	9b05      	ldr	r3, [sp, #20]
   18554:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   18556:	2308      	movs	r3, #8
   18558:	f8c8 3000 	str.w	r3, [r8]
   1855c:	e7ea      	b.n	18534 <nrf91_socket_offload_getsockopt+0x86>
	errno = ENOPROTOOPT;
   1855e:	f7ff ffa4 	bl	184aa <z_errno>
   18562:	232a      	movs	r3, #42	; 0x2a
	return retval;
   18564:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   18568:	6003      	str	r3, [r0, #0]
	return retval;
   1856a:	e7e3      	b.n	18534 <nrf91_socket_offload_getsockopt+0x86>

0001856c <nrf91_socket_offload_recvfrom>:
{
   1856c:	b570      	push	{r4, r5, r6, lr}
	int sd = OBJ_TO_SD(obj);
   1856e:	1e45      	subs	r5, r0, #1
{
   18570:	b08e      	sub	sp, #56	; 0x38
   18572:	4618      	mov	r0, r3
   18574:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   18578:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1857c:	f7ff ff36 	bl	183ec <z_to_nrf_flags>
	if (from == NULL) {
   18580:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   18584:	4603      	mov	r3, r0
   18586:	b944      	cbnz	r4, 1859a <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   18588:	4628      	mov	r0, r5
   1858a:	e9cd 4400 	strd	r4, r4, [sp]
   1858e:	f001 fd6c 	bl	1a06a <nrf_recvfrom>
   18592:	4605      	mov	r5, r0
}
   18594:	4628      	mov	r0, r5
   18596:	b00e      	add	sp, #56	; 0x38
   18598:	bd70      	pop	{r4, r5, r6, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1859a:	2024      	movs	r0, #36	; 0x24
   1859c:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1859e:	a804      	add	r0, sp, #16
   185a0:	9001      	str	r0, [sp, #4]
   185a2:	a805      	add	r0, sp, #20
   185a4:	9000      	str	r0, [sp, #0]
   185a6:	4628      	mov	r0, r5
   185a8:	f001 fd5f 	bl	1a06a <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   185ac:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   185ae:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   185b0:	2b02      	cmp	r3, #2
   185b2:	d109      	bne.n	185c8 <nrf91_socket_offload_recvfrom+0x5c>
	ptr->sin_port = nrf_in->sin_port;
   185b4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   185b8:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   185ba:	2301      	movs	r3, #1
   185bc:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   185be:	9b08      	ldr	r3, [sp, #32]
   185c0:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   185c2:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   185c4:	6033      	str	r3, [r6, #0]
	return retval;
   185c6:	e7e5      	b.n	18594 <nrf91_socket_offload_recvfrom+0x28>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   185c8:	2b0a      	cmp	r3, #10
   185ca:	d1e3      	bne.n	18594 <nrf91_socket_offload_recvfrom+0x28>
	ptr->sin6_port = nrf_in->sin6_port;
   185cc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	ptr->sin6_family = AF_INET6;
   185d0:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   185d2:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   185d4:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   185d6:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   185d8:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   185dc:	a909      	add	r1, sp, #36	; 0x24
   185de:	f7ff fc7d 	bl	17edc <memcpy>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   185e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   185e4:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   185e6:	2318      	movs	r3, #24
   185e8:	e7ec      	b.n	185c4 <nrf91_socket_offload_recvfrom+0x58>

000185ea <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   185ea:	2300      	movs	r3, #0
{
   185ec:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   185ee:	e9cd 3300 	strd	r3, r3, [sp]
   185f2:	f7ff ffbb 	bl	1856c <nrf91_socket_offload_recvfrom>
}
   185f6:	b003      	add	sp, #12
   185f8:	f85d fb04 	ldr.w	pc, [sp], #4

000185fc <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   185fc:	3801      	subs	r0, #1
   185fe:	f001 bd61 	b.w	1a0c4 <nrf_listen>

00018602 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   18602:	3801      	subs	r0, #1
   18604:	f001 bd0a 	b.w	1a01c <nrf_close>

00018608 <nrf91_socket_offload_freeaddrinfo>:
{
   18608:	b538      	push	{r3, r4, r5, lr}
   1860a:	4604      	mov	r4, r0
	while (next != NULL) {
   1860c:	b904      	cbnz	r4, 18610 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1860e:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   18610:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   18612:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   18614:	f002 fa41 	bl	1aa9a <k_free>
		k_free(this);
   18618:	4620      	mov	r0, r4
   1861a:	f002 fa3e 	bl	1aa9a <k_free>
		next = next->ai_next;
   1861e:	462c      	mov	r4, r5
   18620:	e7f4      	b.n	1860c <nrf91_socket_offload_freeaddrinfo+0x4>

00018622 <z_to_nrf_addrinfo_hints>:
{
   18622:	b538      	push	{r3, r4, r5, lr}
   18624:	460c      	mov	r4, r1
   18626:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   18628:	2220      	movs	r2, #32
   1862a:	2100      	movs	r1, #0
   1862c:	4620      	mov	r0, r4
   1862e:	f7ff fc80 	bl	17f32 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   18632:	2300      	movs	r3, #0
   18634:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   18636:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   18638:	2b03      	cmp	r3, #3
   1863a:	d003      	beq.n	18644 <z_to_nrf_addrinfo_hints+0x22>
   1863c:	2b04      	cmp	r3, #4
   1863e:	bf08      	it	eq
   18640:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   18644:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   18646:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   18648:	f7ff fee2 	bl	18410 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1864c:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   18650:	d00b      	beq.n	1866a <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   18652:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   18654:	6928      	ldr	r0, [r5, #16]
   18656:	f7ff fef7 	bl	18448 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1865a:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1865e:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   18660:	d003      	beq.n	1866a <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   18662:	69e8      	ldr	r0, [r5, #28]
   18664:	b108      	cbz	r0, 1866a <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   18666:	61a0      	str	r0, [r4, #24]
	return 0;
   18668:	2000      	movs	r0, #0
}
   1866a:	bd38      	pop	{r3, r4, r5, pc}

0001866c <nrf91_socket_offload_connect>:
{
   1866c:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1866e:	880b      	ldrh	r3, [r1, #0]
{
   18670:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   18672:	2b01      	cmp	r3, #1
{
   18674:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   18676:	f100 35ff 	add.w	r5, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   1867a:	d10f      	bne.n	1869c <nrf91_socket_offload_connect+0x30>
	nrf_out->sin_port = ptr->sin_port;
   1867c:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1867e:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   18680:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   18684:	2302      	movs	r3, #2
   18686:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   18688:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1868a:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1868e:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   18690:	4628      	mov	r0, r5
   18692:	a901      	add	r1, sp, #4
   18694:	f001 fd03 	bl	1a09e <nrf_connect>
}
   18698:	b00a      	add	sp, #40	; 0x28
   1869a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1869c:	2b02      	cmp	r3, #2
   1869e:	d110      	bne.n	186c2 <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   186a0:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   186a2:	2624      	movs	r6, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   186a4:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   186a8:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   186aa:	2210      	movs	r2, #16
   186ac:	3104      	adds	r1, #4
   186ae:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   186b0:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   186b2:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   186b6:	f7ff fc11 	bl	17edc <memcpy>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   186ba:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   186bc:	4632      	mov	r2, r6
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   186be:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   186c0:	e7e6      	b.n	18690 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   186c2:	4628      	mov	r0, r5
   186c4:	f001 fceb 	bl	1a09e <nrf_connect>
		if (retval < 0) {
   186c8:	2800      	cmp	r0, #0
   186ca:	dae5      	bge.n	18698 <nrf91_socket_offload_connect+0x2c>
	errno = ENOTSUP;
   186cc:	f7ff feed 	bl	184aa <z_errno>
   186d0:	2323      	movs	r3, #35	; 0x23
   186d2:	6003      	str	r3, [r0, #0]
   186d4:	f04f 30ff 	mov.w	r0, #4294967295
   186d8:	e7de      	b.n	18698 <nrf91_socket_offload_connect+0x2c>

000186da <nrf91_socket_offload_sendto>:
{
   186da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   186de:	b08d      	sub	sp, #52	; 0x34
   186e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
   186e2:	460e      	mov	r6, r1
   186e4:	4617      	mov	r7, r2
   186e6:	4698      	mov	r8, r3
	int sd = OBJ_TO_SD(obj);
   186e8:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   186ea:	b96c      	cbnz	r4, 18708 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   186ec:	4618      	mov	r0, r3
   186ee:	f7ff fe7d 	bl	183ec <z_to_nrf_flags>
   186f2:	4603      	mov	r3, r0
   186f4:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   186f8:	463a      	mov	r2, r7
   186fa:	4631      	mov	r1, r6
   186fc:	4628      	mov	r0, r5
   186fe:	f001 fc9a 	bl	1a036 <nrf_sendto>
}
   18702:	b00d      	add	sp, #52	; 0x34
   18704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   18708:	8823      	ldrh	r3, [r4, #0]
   1870a:	2b01      	cmp	r3, #1
   1870c:	d113      	bne.n	18736 <nrf91_socket_offload_sendto+0x5c>
	nrf_out->sin_port = ptr->sin_port;
   1870e:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   18710:	f04f 0910 	mov.w	r9, #16
	nrf_out->sin_port = ptr->sin_port;
   18714:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   18718:	2302      	movs	r3, #2
   1871a:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1871c:	6863      	ldr	r3, [r4, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1871e:	f88d 900c 	strb.w	r9, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   18722:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   18724:	4640      	mov	r0, r8
   18726:	f7ff fe61 	bl	183ec <z_to_nrf_flags>
   1872a:	aa03      	add	r2, sp, #12
   1872c:	4603      	mov	r3, r0
   1872e:	f8cd 9004 	str.w	r9, [sp, #4]
   18732:	9200      	str	r2, [sp, #0]
   18734:	e7e0      	b.n	186f8 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   18736:	2b02      	cmp	r3, #2
   18738:	d110      	bne.n	1875c <nrf91_socket_offload_sendto+0x82>
	nrf_out->sin6_port = ptr->sin6_port;
   1873a:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1873c:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   18740:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   18744:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   18746:	2210      	movs	r2, #16
   18748:	1d21      	adds	r1, r4, #4
   1874a:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   1874c:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1874e:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   18752:	f7ff fbc3 	bl	17edc <memcpy>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   18756:	7d23      	ldrb	r3, [r4, #20]
   18758:	930b      	str	r3, [sp, #44]	; 0x2c
   1875a:	e7e3      	b.n	18724 <nrf91_socket_offload_sendto+0x4a>
	errno = ENOTSUP;
   1875c:	f7ff fea5 	bl	184aa <z_errno>
   18760:	2323      	movs	r3, #35	; 0x23
   18762:	6003      	str	r3, [r0, #0]
	return retval;
   18764:	f04f 30ff 	mov.w	r0, #4294967295
   18768:	e7cb      	b.n	18702 <nrf91_socket_offload_sendto+0x28>

0001876a <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   1876a:	2300      	movs	r3, #0
{
   1876c:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   1876e:	e9cd 3300 	strd	r3, r3, [sp]
   18772:	f7ff ffb2 	bl	186da <nrf91_socket_offload_sendto>
}
   18776:	b003      	add	sp, #12
   18778:	f85d fb04 	ldr.w	pc, [sp], #4

0001877c <nrf91_socket_offload_setsockopt>:
{
   1877c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18780:	461e      	mov	r6, r3
	switch (z_in_level) {
   18782:	f240 2302 	movw	r3, #514	; 0x202
{
   18786:	b086      	sub	sp, #24
	switch (z_in_level) {
   18788:	4299      	cmp	r1, r3
{
   1878a:	460c      	mov	r4, r1
   1878c:	4615      	mov	r5, r2
   1878e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   18790:	f100 38ff 	add.w	r8, r0, #4294967295
	switch (z_in_level) {
   18794:	d005      	beq.n	187a2 <nrf91_socket_offload_setsockopt+0x26>
   18796:	dc20      	bgt.n	187da <nrf91_socket_offload_setsockopt+0x5e>
   18798:	2901      	cmp	r1, #1
   1879a:	d002      	beq.n	187a2 <nrf91_socket_offload_setsockopt+0x26>
   1879c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   187a0:	d126      	bne.n	187f0 <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   187a2:	4629      	mov	r1, r5
   187a4:	4620      	mov	r0, r4
   187a6:	aa03      	add	r2, sp, #12
   187a8:	f7f7 feb0 	bl	1050c <z_to_nrf_optname>
   187ac:	2800      	cmp	r0, #0
   187ae:	db1f      	blt.n	187f0 <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   187b0:	2c01      	cmp	r4, #1
   187b2:	d116      	bne.n	187e2 <nrf91_socket_offload_setsockopt+0x66>
   187b4:	3d14      	subs	r5, #20
   187b6:	2d01      	cmp	r5, #1
   187b8:	d805      	bhi.n	187c6 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   187ba:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   187bc:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   187be:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   187c0:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   187c2:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   187c4:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   187c6:	4633      	mov	r3, r6
   187c8:	4621      	mov	r1, r4
   187ca:	4640      	mov	r0, r8
   187cc:	9a03      	ldr	r2, [sp, #12]
   187ce:	9700      	str	r7, [sp, #0]
   187d0:	f001 fcb1 	bl	1a136 <nrf_setsockopt>
}
   187d4:	b006      	add	sp, #24
   187d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   187da:	f240 2303 	movw	r3, #515	; 0x203
   187de:	4299      	cmp	r1, r3
   187e0:	e7de      	b.n	187a0 <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   187e2:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   187e6:	d1ee      	bne.n	187c6 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   187e8:	2d08      	cmp	r5, #8
   187ea:	bf08      	it	eq
   187ec:	2701      	moveq	r7, #1
   187ee:	e7ea      	b.n	187c6 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   187f0:	f7ff fe5b 	bl	184aa <z_errno>
   187f4:	232a      	movs	r3, #42	; 0x2a
   187f6:	6003      	str	r3, [r0, #0]
   187f8:	f04f 30ff 	mov.w	r0, #4294967295
   187fc:	e7ea      	b.n	187d4 <nrf91_socket_offload_setsockopt+0x58>

000187fe <nrf91_socket_offload_bind>:
{
   187fe:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   18800:	880b      	ldrh	r3, [r1, #0]
{
   18802:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   18804:	2b01      	cmp	r3, #1
{
   18806:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   18808:	f100 35ff 	add.w	r5, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   1880c:	d10f      	bne.n	1882e <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   1880e:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   18810:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   18812:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   18816:	2302      	movs	r3, #2
   18818:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1881a:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1881c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   18820:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   18822:	4628      	mov	r0, r5
   18824:	a901      	add	r1, sp, #4
   18826:	f001 fc73 	bl	1a110 <nrf_bind>
}
   1882a:	b00a      	add	sp, #40	; 0x28
   1882c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1882e:	2b02      	cmp	r3, #2
   18830:	d110      	bne.n	18854 <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   18832:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   18834:	2624      	movs	r6, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   18836:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1883a:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1883c:	2210      	movs	r2, #16
   1883e:	3104      	adds	r1, #4
   18840:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   18842:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   18844:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   18848:	f7ff fb48 	bl	17edc <memcpy>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1884c:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1884e:	4632      	mov	r2, r6
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   18850:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   18852:	e7e6      	b.n	18822 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   18854:	f7ff fe29 	bl	184aa <z_errno>
   18858:	2323      	movs	r3, #35	; 0x23
   1885a:	6003      	str	r3, [r0, #0]
   1885c:	f04f 30ff 	mov.w	r0, #4294967295
   18860:	e7e3      	b.n	1882a <nrf91_socket_offload_bind+0x2c>

00018862 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   18862:	6883      	ldr	r3, [r0, #8]
   18864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18866:	b103      	cbz	r3, 1886a <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   18868:	4718      	bx	r3
}
   1886a:	4770      	bx	lr

0001886c <response_handler>:
	write_uart_string(response);
   1886c:	4608      	mov	r0, r1
   1886e:	f7f8 bc4d 	b.w	1110c <write_uart_string>

00018872 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   18872:	280d      	cmp	r0, #13
   18874:	d004      	beq.n	18880 <is_lfcr+0xe>
   18876:	f1a0 030a 	sub.w	r3, r0, #10
   1887a:	4258      	negs	r0, r3
   1887c:	4158      	adcs	r0, r3
   1887e:	4770      	bx	lr
		return true;
   18880:	2001      	movs	r0, #1
}
   18882:	4770      	bx	lr

00018884 <skip_command_prefix>:
{
   18884:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   18886:	6801      	ldr	r1, [r0, #0]
{
   18888:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   1888a:	1c8b      	adds	r3, r1, #2
   1888c:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   1888e:	788c      	ldrb	r4, [r1, #2]
   18890:	4620      	mov	r0, r4
   18892:	f7ff ffee 	bl	18872 <is_lfcr>
   18896:	b910      	cbnz	r0, 1889e <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18898:	b10c      	cbz	r4, 1889e <skip_command_prefix+0x1a>
	(*cmd)++;
   1889a:	3103      	adds	r1, #3
   1889c:	6011      	str	r1, [r2, #0]
}
   1889e:	bd10      	pop	{r4, pc}

000188a0 <is_valid_notification_char>:
	return (int)((chr >= (int)'a' && chr <=
   188a0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   188a4:	2b19      	cmp	r3, #25
   188a6:	bf98      	it	ls
   188a8:	3820      	subls	r0, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   188aa:	3841      	subs	r0, #65	; 0x41
   188ac:	b2c0      	uxtb	r0, r0
}
   188ae:	2819      	cmp	r0, #25
   188b0:	bf8c      	ite	hi
   188b2:	2000      	movhi	r0, #0
   188b4:	2001      	movls	r0, #1
   188b6:	4770      	bx	lr

000188b8 <is_command>:
{
   188b8:	b510      	push	{r4, lr}
   188ba:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   188bc:	f7ff fad3 	bl	17e66 <strlen>
   188c0:	2801      	cmp	r0, #1
   188c2:	d91e      	bls.n	18902 <is_command+0x4a>
	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   188c4:	7823      	ldrb	r3, [r4, #0]
   188c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   188ca:	2a19      	cmp	r2, #25
   188cc:	bf98      	it	ls
   188ce:	3b20      	subls	r3, #32
   188d0:	2b41      	cmp	r3, #65	; 0x41
   188d2:	d116      	bne.n	18902 <is_command+0x4a>
   188d4:	7863      	ldrb	r3, [r4, #1]
   188d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   188da:	2a19      	cmp	r2, #25
   188dc:	bf98      	it	ls
   188de:	3b20      	subls	r3, #32
   188e0:	2b54      	cmp	r3, #84	; 0x54
   188e2:	d10e      	bne.n	18902 <is_command+0x4a>
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   188e4:	78a2      	ldrb	r2, [r4, #2]
   188e6:	2a25      	cmp	r2, #37	; 0x25
   188e8:	d00d      	beq.n	18906 <is_command+0x4e>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   188ea:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   188ee:	2b23      	cmp	r3, #35	; 0x23
   188f0:	d009      	beq.n	18906 <is_command+0x4e>
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   188f2:	4610      	mov	r0, r2
   188f4:	f7ff ffbd 	bl	18872 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   188f8:	b910      	cbnz	r0, 18900 <is_command+0x48>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   188fa:	fab2 f082 	clz	r0, r2
   188fe:	0940      	lsrs	r0, r0, #5
}
   18900:	bd10      	pop	{r4, pc}
		return false;
   18902:	2000      	movs	r0, #0
   18904:	e7fc      	b.n	18900 <is_command+0x48>
		return true;
   18906:	2001      	movs	r0, #1
   18908:	e7fa      	b.n	18900 <is_command+0x48>

0001890a <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   1890a:	6813      	ldr	r3, [r2, #0]
   1890c:	f7f8 bf0c 	b.w	11728 <at_parser_max_params_from_str>

00018910 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   18910:	6803      	ldr	r3, [r0, #0]
   18912:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   18914:	bf83      	ittte	hi
   18916:	230c      	movhi	r3, #12
   18918:	6840      	ldrhi	r0, [r0, #4]
   1891a:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   1891e:	2000      	movls	r0, #0
}
   18920:	4770      	bx	lr

00018922 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   18922:	7803      	ldrb	r3, [r0, #0]
   18924:	2b01      	cmp	r3, #1
   18926:	d006      	beq.n	18936 <at_param_size+0x14>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   18928:	2b02      	cmp	r3, #2
   1892a:	d006      	beq.n	1893a <at_param_size+0x18>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1892c:	3b03      	subs	r3, #3
   1892e:	2b01      	cmp	r3, #1
   18930:	d805      	bhi.n	1893e <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   18932:	6840      	ldr	r0, [r0, #4]
   18934:	4770      	bx	lr
		return sizeof(uint16_t);
   18936:	2002      	movs	r0, #2
   18938:	4770      	bx	lr
		return sizeof(uint32_t);
   1893a:	2004      	movs	r0, #4
   1893c:	4770      	bx	lr
	}

	return 0;
   1893e:	2000      	movs	r0, #0
}
   18940:	4770      	bx	lr

00018942 <at_param_clear>:
{
   18942:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   18944:	7803      	ldrb	r3, [r0, #0]
{
   18946:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   18948:	3b03      	subs	r3, #3
   1894a:	2b01      	cmp	r3, #1
   1894c:	d802      	bhi.n	18954 <at_param_clear+0x12>
		k_free(param->value.str_val);
   1894e:	6880      	ldr	r0, [r0, #8]
   18950:	f002 f8a3 	bl	1aa9a <k_free>
	param->value.int_val = 0;
   18954:	2300      	movs	r3, #0
   18956:	60a3      	str	r3, [r4, #8]
}
   18958:	bd10      	pop	{r4, pc}

0001895a <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   1895a:	b538      	push	{r3, r4, r5, lr}
   1895c:	460d      	mov	r5, r1
	if (list == NULL) {
   1895e:	4604      	mov	r4, r0
   18960:	b140      	cbz	r0, 18974 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   18962:	210c      	movs	r1, #12
   18964:	4628      	mov	r0, r5
   18966:	f002 f8a2 	bl	1aaae <k_calloc>
   1896a:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   1896c:	b128      	cbz	r0, 1897a <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   1896e:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   18970:	6025      	str	r5, [r4, #0]
}
   18972:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   18974:	f06f 0015 	mvn.w	r0, #21
   18978:	e7fb      	b.n	18972 <at_params_list_init+0x18>
		return -ENOMEM;
   1897a:	f06f 000b 	mvn.w	r0, #11
   1897e:	e7f8      	b.n	18972 <at_params_list_init+0x18>

00018980 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   18980:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   18982:	4604      	mov	r4, r0
   18984:	b130      	cbz	r0, 18994 <at_params_list_clear+0x14>
   18986:	6843      	ldr	r3, [r0, #4]
   18988:	b123      	cbz	r3, 18994 <at_params_list_clear+0x14>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1898a:	2500      	movs	r5, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   1898c:	260c      	movs	r6, #12
	for (size_t i = 0; i < list->param_count; ++i) {
   1898e:	6823      	ldr	r3, [r4, #0]
   18990:	429d      	cmp	r5, r3
   18992:	d301      	bcc.n	18998 <at_params_list_clear+0x18>
		at_param_init(&params[i]);
	}
}
   18994:	b002      	add	sp, #8
   18996:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   18998:	6860      	ldr	r0, [r4, #4]
   1899a:	fb06 0005 	mla	r0, r6, r5, r0
   1899e:	9001      	str	r0, [sp, #4]
   189a0:	f7ff ffcf 	bl	18942 <at_param_clear>
	memset(param, 0, sizeof(struct at_param));
   189a4:	220c      	movs	r2, #12
   189a6:	2100      	movs	r1, #0
   189a8:	9801      	ldr	r0, [sp, #4]
   189aa:	f7ff fac2 	bl	17f32 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   189ae:	3501      	adds	r5, #1
   189b0:	e7ed      	b.n	1898e <at_params_list_clear+0xe>

000189b2 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   189b2:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   189b4:	4604      	mov	r4, r0
   189b6:	b148      	cbz	r0, 189cc <at_params_list_free+0x1a>
   189b8:	6843      	ldr	r3, [r0, #4]
   189ba:	b13b      	cbz	r3, 189cc <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   189bc:	2500      	movs	r5, #0
	at_params_list_clear(list);
   189be:	f7ff ffdf 	bl	18980 <at_params_list_clear>
	k_free(list->params);
   189c2:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   189c4:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   189c6:	f002 f868 	bl	1aa9a <k_free>
	list->params = NULL;
   189ca:	6065      	str	r5, [r4, #4]
}
   189cc:	bd38      	pop	{r3, r4, r5, pc}

000189ce <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			int16_t value)
{
   189ce:	b538      	push	{r3, r4, r5, lr}
   189d0:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   189d2:	b160      	cbz	r0, 189ee <at_params_short_put+0x20>
   189d4:	6843      	ldr	r3, [r0, #4]
   189d6:	b153      	cbz	r3, 189ee <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   189d8:	f7ff ff9a 	bl	18910 <at_params_get>

	if (param == NULL) {
   189dc:	4604      	mov	r4, r0
   189de:	b130      	cbz	r0, 189ee <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   189e0:	f7ff ffaf 	bl	18942 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   189e4:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   189e6:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   189e8:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   189ea:	60a5      	str	r5, [r4, #8]
}
   189ec:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   189ee:	f06f 0015 	mvn.w	r0, #21
   189f2:	e7fb      	b.n	189ec <at_params_short_put+0x1e>

000189f4 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   189f4:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   189f6:	b160      	cbz	r0, 18a12 <at_params_empty_put+0x1e>
   189f8:	6843      	ldr	r3, [r0, #4]
   189fa:	b153      	cbz	r3, 18a12 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   189fc:	f7ff ff88 	bl	18910 <at_params_get>

	if (param == NULL) {
   18a00:	4604      	mov	r4, r0
   18a02:	b130      	cbz	r0, 18a12 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   18a04:	f7ff ff9d 	bl	18942 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   18a08:	2305      	movs	r3, #5
	param->value.int_val = 0;
   18a0a:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   18a0c:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   18a0e:	60a0      	str	r0, [r4, #8]

	return 0;
}
   18a10:	bd10      	pop	{r4, pc}
		return -EINVAL;
   18a12:	f06f 0015 	mvn.w	r0, #21
   18a16:	e7fb      	b.n	18a10 <at_params_empty_put+0x1c>

00018a18 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      int32_t value)
{
   18a18:	b538      	push	{r3, r4, r5, lr}
   18a1a:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   18a1c:	b160      	cbz	r0, 18a38 <at_params_int_put+0x20>
   18a1e:	6843      	ldr	r3, [r0, #4]
   18a20:	b153      	cbz	r3, 18a38 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   18a22:	f7ff ff75 	bl	18910 <at_params_get>

	if (param == NULL) {
   18a26:	4604      	mov	r4, r0
   18a28:	b130      	cbz	r0, 18a38 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   18a2a:	f7ff ff8a 	bl	18942 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   18a2e:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   18a30:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   18a32:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   18a34:	60a5      	str	r5, [r4, #8]
}
   18a36:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   18a38:	f06f 0015 	mvn.w	r0, #21
   18a3c:	e7fb      	b.n	18a36 <at_params_int_put+0x1e>

00018a3e <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   18a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a40:	4617      	mov	r7, r2
   18a42:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   18a44:	b1c8      	cbz	r0, 18a7a <at_params_string_put+0x3c>
   18a46:	6843      	ldr	r3, [r0, #4]
   18a48:	b1bb      	cbz	r3, 18a7a <at_params_string_put+0x3c>
   18a4a:	b1b2      	cbz	r2, 18a7a <at_params_string_put+0x3c>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   18a4c:	f7ff ff60 	bl	18910 <at_params_get>

	if (param == NULL) {
   18a50:	4604      	mov	r4, r0
   18a52:	b190      	cbz	r0, 18a7a <at_params_string_put+0x3c>
	return k_aligned_alloc(sizeof(void *), size);
   18a54:	2004      	movs	r0, #4
   18a56:	1c69      	adds	r1, r5, #1
   18a58:	f7fe fa98 	bl	16f8c <k_aligned_alloc>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);

	if (param_value == NULL) {
   18a5c:	4606      	mov	r6, r0
   18a5e:	b178      	cbz	r0, 18a80 <at_params_string_put+0x42>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);
   18a60:	462a      	mov	r2, r5
   18a62:	4639      	mov	r1, r7
   18a64:	f7ff fa3a 	bl	17edc <memcpy>

	at_param_clear(param);
   18a68:	4620      	mov	r0, r4
   18a6a:	f7ff ff6a 	bl	18942 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   18a6e:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   18a70:	2000      	movs	r0, #0
	param->size = str_len;
   18a72:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   18a74:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   18a76:	60a6      	str	r6, [r4, #8]
}
   18a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   18a7a:	f06f 0015 	mvn.w	r0, #21
   18a7e:	e7fb      	b.n	18a78 <at_params_string_put+0x3a>
		return -ENOMEM;
   18a80:	f06f 000b 	mvn.w	r0, #11
   18a84:	e7f8      	b.n	18a78 <at_params_string_put+0x3a>

00018a86 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   18a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a88:	4617      	mov	r7, r2
   18a8a:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   18a8c:	b1c8      	cbz	r0, 18ac2 <at_params_array_put+0x3c>
   18a8e:	6843      	ldr	r3, [r0, #4]
   18a90:	b1bb      	cbz	r3, 18ac2 <at_params_array_put+0x3c>
   18a92:	b1b2      	cbz	r2, 18ac2 <at_params_array_put+0x3c>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   18a94:	f7ff ff3c 	bl	18910 <at_params_get>

	if (param == NULL) {
   18a98:	4604      	mov	r4, r0
   18a9a:	b190      	cbz	r0, 18ac2 <at_params_array_put+0x3c>
   18a9c:	4629      	mov	r1, r5
   18a9e:	2004      	movs	r0, #4
   18aa0:	f7fe fa74 	bl	16f8c <k_aligned_alloc>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);

	if (param_value == NULL) {
   18aa4:	4606      	mov	r6, r0
   18aa6:	b178      	cbz	r0, 18ac8 <at_params_array_put+0x42>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);
   18aa8:	462a      	mov	r2, r5
   18aaa:	4639      	mov	r1, r7
   18aac:	f7ff fa16 	bl	17edc <memcpy>

	at_param_clear(param);
   18ab0:	4620      	mov	r0, r4
   18ab2:	f7ff ff46 	bl	18942 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   18ab6:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   18ab8:	2000      	movs	r0, #0
	param->size = array_len;
   18aba:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   18abc:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   18abe:	60a6      	str	r6, [r4, #8]
}
   18ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   18ac2:	f06f 0015 	mvn.w	r0, #21
   18ac6:	e7fb      	b.n	18ac0 <at_params_array_put+0x3a>
		return -ENOMEM;
   18ac8:	f06f 000b 	mvn.w	r0, #11
   18acc:	e7f8      	b.n	18ac0 <at_params_array_put+0x3a>

00018ace <at_params_int_get>:
	return 0;
}

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   18ace:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   18ad0:	b168      	cbz	r0, 18aee <at_params_int_get+0x20>
   18ad2:	6843      	ldr	r3, [r0, #4]
   18ad4:	b15b      	cbz	r3, 18aee <at_params_int_get+0x20>
   18ad6:	b152      	cbz	r2, 18aee <at_params_int_get+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   18ad8:	f7ff ff1a 	bl	18910 <at_params_get>

	if (param == NULL) {
   18adc:	b138      	cbz	r0, 18aee <at_params_int_get+0x20>
		return -EINVAL;
	}

	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   18ade:	7803      	ldrb	r3, [r0, #0]
   18ae0:	3b01      	subs	r3, #1
   18ae2:	2b01      	cmp	r3, #1
   18ae4:	d803      	bhi.n	18aee <at_params_int_get+0x20>
	    (param->type != AT_PARAM_TYPE_NUM_SHORT)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   18ae6:	6883      	ldr	r3, [r0, #8]
	return 0;
   18ae8:	2000      	movs	r0, #0
	*value = param->value.int_val;
   18aea:	6013      	str	r3, [r2, #0]
}
   18aec:	bd08      	pop	{r3, pc}
		return -EINVAL;
   18aee:	f06f 0015 	mvn.w	r0, #21
   18af2:	e7fb      	b.n	18aec <at_params_int_get+0x1e>

00018af4 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   18af4:	b570      	push	{r4, r5, r6, lr}
   18af6:	4616      	mov	r6, r2
   18af8:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   18afa:	b1c0      	cbz	r0, 18b2e <at_params_string_get+0x3a>
   18afc:	6843      	ldr	r3, [r0, #4]
   18afe:	b1b3      	cbz	r3, 18b2e <at_params_string_get+0x3a>
   18b00:	b1aa      	cbz	r2, 18b2e <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   18b02:	b1a4      	cbz	r4, 18b2e <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   18b04:	f7ff ff04 	bl	18910 <at_params_get>

	if (param == NULL) {
   18b08:	4601      	mov	r1, r0
   18b0a:	b180      	cbz	r0, 18b2e <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   18b0c:	7803      	ldrb	r3, [r0, #0]
   18b0e:	2b03      	cmp	r3, #3
   18b10:	d10d      	bne.n	18b2e <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   18b12:	f7ff ff06 	bl	18922 <at_param_size>

	if (*len < param_len) {
   18b16:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   18b18:	4605      	mov	r5, r0
	if (*len < param_len) {
   18b1a:	4283      	cmp	r3, r0
   18b1c:	d30a      	bcc.n	18b34 <at_params_string_get+0x40>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
   18b1e:	4602      	mov	r2, r0
   18b20:	6889      	ldr	r1, [r1, #8]
   18b22:	4630      	mov	r0, r6
   18b24:	f7ff f9da 	bl	17edc <memcpy>
	*len = param_len;

	return 0;
   18b28:	2000      	movs	r0, #0
	*len = param_len;
   18b2a:	6025      	str	r5, [r4, #0]
}
   18b2c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   18b2e:	f06f 0015 	mvn.w	r0, #21
   18b32:	e7fb      	b.n	18b2c <at_params_string_get+0x38>
		return -ENOMEM;
   18b34:	f06f 000b 	mvn.w	r0, #11
   18b38:	e7f8      	b.n	18b2c <at_params_string_get+0x38>

00018b3a <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   18b3a:	4602      	mov	r2, r0
{
   18b3c:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   18b3e:	b170      	cbz	r0, 18b5e <at_params_valid_count_get+0x24>
   18b40:	6840      	ldr	r0, [r0, #4]
   18b42:	b160      	cbz	r0, 18b5e <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   18b44:	6811      	ldr	r1, [r2, #0]
   18b46:	b141      	cbz	r1, 18b5a <at_params_valid_count_get+0x20>
   18b48:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   18b4a:	7803      	ldrb	r3, [r0, #0]
   18b4c:	b12b      	cbz	r3, 18b5a <at_params_valid_count_get+0x20>
		valid_i += 1;
		param = at_params_get(list, valid_i);
   18b4e:	4610      	mov	r0, r2
		valid_i += 1;
   18b50:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   18b52:	f7ff fedd 	bl	18910 <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   18b56:	2800      	cmp	r0, #0
   18b58:	d1f7      	bne.n	18b4a <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   18b5a:	4608      	mov	r0, r1
   18b5c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   18b5e:	f06f 0115 	mvn.w	r1, #21
   18b62:	e7fa      	b.n	18b5a <at_params_valid_count_get+0x20>

00018b64 <response_is_valid.part.0>:
static bool response_is_valid(const char *response, size_t response_len,
   18b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18b66:	4605      	mov	r5, r0
	if ((response_len < strlen(check)) ||
   18b68:	4610      	mov	r0, r2
static bool response_is_valid(const char *response, size_t response_len,
   18b6a:	460c      	mov	r4, r1
	if ((response_len < strlen(check)) ||
   18b6c:	9201      	str	r2, [sp, #4]
   18b6e:	f7ff f97a 	bl	17e66 <strlen>
   18b72:	42a0      	cmp	r0, r4
   18b74:	d809      	bhi.n	18b8a <response_is_valid.part.0+0x26>
	    (memcmp(response, check, response_len) != 0)) {
   18b76:	4622      	mov	r2, r4
   18b78:	4628      	mov	r0, r5
   18b7a:	9901      	ldr	r1, [sp, #4]
   18b7c:	f7ff f99e 	bl	17ebc <memcmp>
	if ((response_len < strlen(check)) ||
   18b80:	fab0 f080 	clz	r0, r0
   18b84:	0940      	lsrs	r0, r0, #5
}
   18b86:	b003      	add	sp, #12
   18b88:	bd30      	pop	{r4, r5, pc}
		return false;
   18b8a:	2000      	movs	r0, #0
   18b8c:	e7fb      	b.n	18b86 <response_is_valid.part.0+0x22>

00018b8e <lte_lc_init_and_connect_async>:
{
   18b8e:	b510      	push	{r4, lr}
   18b90:	4604      	mov	r4, r0
	err = w_lte_lc_init();
   18b92:	f7f8 ffcd 	bl	11b30 <w_lte_lc_init>
	if (err) {
   18b96:	b920      	cbnz	r0, 18ba2 <lte_lc_init_and_connect_async+0x14>
	return lte_lc_connect_async(handler);
   18b98:	4620      	mov	r0, r4
}
   18b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return lte_lc_connect_async(handler);
   18b9e:	f7f8 bf35 	b.w	11a0c <lte_lc_connect_async>
}
   18ba2:	bd10      	pop	{r4, pc}

00018ba4 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   18ba4:	2000      	movs	r0, #0
{
   18ba6:	b508      	push	{r3, lr}
	sys_arch_reboot(0);
   18ba8:	f7f6 fb84 	bl	f2b4 <sys_arch_reboot>

00018bac <k_uptime_get>:
{
   18bac:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   18bae:	f001 fdea 	bl	1a786 <z_impl_k_uptime_ticks>
   18bb2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   18bb6:	fba0 2304 	umull	r2, r3, r0, r4
   18bba:	fb04 3301 	mla	r3, r4, r1, r3
   18bbe:	0bd0      	lsrs	r0, r2, #15
}
   18bc0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   18bc4:	0bd9      	lsrs	r1, r3, #15
   18bc6:	bd10      	pop	{r4, pc}

00018bc8 <rpc_handle_ctrl_message>:
   18bc8:	2902      	cmp	r1, #2
   18bca:	b510      	push	{r4, lr}
   18bcc:	4604      	mov	r4, r0
   18bce:	d005      	beq.n	18bdc <rpc_handle_ctrl_message+0x14>
   18bd0:	2904      	cmp	r1, #4
   18bd2:	d001      	beq.n	18bd8 <rpc_handle_ctrl_message+0x10>
   18bd4:	2901      	cmp	r1, #1
   18bd6:	d107      	bne.n	18be8 <rpc_handle_ctrl_message+0x20>
   18bd8:	2000      	movs	r0, #0
   18bda:	bd10      	pop	{r4, pc}
   18bdc:	6880      	ldr	r0, [r0, #8]
   18bde:	2800      	cmp	r0, #0
   18be0:	d0fa      	beq.n	18bd8 <rpc_handle_ctrl_message+0x10>
   18be2:	f000 f85b 	bl	18c9c <rpc_transport_data_free>
   18be6:	e7f7      	b.n	18bd8 <rpc_handle_ctrl_message+0x10>
   18be8:	6880      	ldr	r0, [r0, #8]
   18bea:	b108      	cbz	r0, 18bf0 <rpc_handle_ctrl_message+0x28>
   18bec:	f000 f856 	bl	18c9c <rpc_transport_data_free>
   18bf0:	4620      	mov	r0, r4
   18bf2:	f000 f84f 	bl	18c94 <rpc_transport_msg_free>
   18bf6:	e7ef      	b.n	18bd8 <rpc_handle_ctrl_message+0x10>

00018bf8 <rpc_message_send>:
   18bf8:	b150      	cbz	r0, 18c10 <rpc_message_send+0x18>
   18bfa:	b159      	cbz	r1, 18c14 <rpc_message_send+0x1c>
   18bfc:	684b      	ldr	r3, [r1, #4]
   18bfe:	8008      	strh	r0, [r1, #0]
   18c00:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   18c04:	f043 0302 	orr.w	r3, r3, #2
   18c08:	4608      	mov	r0, r1
   18c0a:	604b      	str	r3, [r1, #4]
   18c0c:	f000 b848 	b.w	18ca0 <rpc_transport_data_msg_send>
   18c10:	2016      	movs	r0, #22
   18c12:	4770      	bx	lr
   18c14:	200e      	movs	r0, #14
   18c16:	4770      	bx	lr

00018c18 <rpc_message_alloc>:
   18c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c1a:	4607      	mov	r7, r0
   18c1c:	460d      	mov	r5, r1
   18c1e:	4616      	mov	r6, r2
   18c20:	b1d2      	cbz	r2, 18c58 <rpc_message_alloc+0x40>
   18c22:	b1d8      	cbz	r0, 18c5c <rpc_message_alloc+0x44>
   18c24:	2300      	movs	r3, #0
   18c26:	6013      	str	r3, [r2, #0]
   18c28:	b131      	cbz	r1, 18c38 <rpc_message_alloc+0x20>
   18c2a:	4608      	mov	r0, r1
   18c2c:	f000 f834 	bl	18c98 <rpc_transport_data_alloc>
   18c30:	4604      	mov	r4, r0
   18c32:	b910      	cbnz	r0, 18c3a <rpc_message_alloc+0x22>
   18c34:	200c      	movs	r0, #12
   18c36:	e008      	b.n	18c4a <rpc_message_alloc+0x32>
   18c38:	460c      	mov	r4, r1
   18c3a:	f000 f829 	bl	18c90 <rpc_transport_data_msg_alloc>
   18c3e:	b128      	cbz	r0, 18c4c <rpc_message_alloc+0x34>
   18c40:	60c5      	str	r5, [r0, #12]
   18c42:	6084      	str	r4, [r0, #8]
   18c44:	8007      	strh	r7, [r0, #0]
   18c46:	6030      	str	r0, [r6, #0]
   18c48:	2000      	movs	r0, #0
   18c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18c4c:	2c00      	cmp	r4, #0
   18c4e:	d0f1      	beq.n	18c34 <rpc_message_alloc+0x1c>
   18c50:	4620      	mov	r0, r4
   18c52:	f000 f823 	bl	18c9c <rpc_transport_data_free>
   18c56:	e7ed      	b.n	18c34 <rpc_message_alloc+0x1c>
   18c58:	200e      	movs	r0, #14
   18c5a:	e7f6      	b.n	18c4a <rpc_message_alloc+0x32>
   18c5c:	2016      	movs	r0, #22
   18c5e:	e7f4      	b.n	18c4a <rpc_message_alloc+0x32>

00018c60 <rpc_message_free>:
   18c60:	b508      	push	{r3, lr}
   18c62:	b128      	cbz	r0, 18c70 <rpc_message_free+0x10>
   18c64:	b131      	cbz	r1, 18c74 <rpc_message_free+0x14>
   18c66:	4608      	mov	r0, r1
   18c68:	f000 f814 	bl	18c94 <rpc_transport_msg_free>
   18c6c:	2000      	movs	r0, #0
   18c6e:	bd08      	pop	{r3, pc}
   18c70:	2016      	movs	r0, #22
   18c72:	e7fc      	b.n	18c6e <rpc_message_free+0xe>
   18c74:	200e      	movs	r0, #14
   18c76:	e7fa      	b.n	18c6e <rpc_message_free+0xe>

00018c78 <rpc_message_data_free>:
   18c78:	b508      	push	{r3, lr}
   18c7a:	b128      	cbz	r0, 18c88 <rpc_message_data_free+0x10>
   18c7c:	b131      	cbz	r1, 18c8c <rpc_message_data_free+0x14>
   18c7e:	4608      	mov	r0, r1
   18c80:	f000 f80c 	bl	18c9c <rpc_transport_data_free>
   18c84:	2000      	movs	r0, #0
   18c86:	bd08      	pop	{r3, pc}
   18c88:	2016      	movs	r0, #22
   18c8a:	e7fc      	b.n	18c86 <rpc_message_data_free+0xe>
   18c8c:	200e      	movs	r0, #14
   18c8e:	e7fa      	b.n	18c86 <rpc_message_data_free+0xe>

00018c90 <rpc_transport_data_msg_alloc>:
   18c90:	f7f9 ba8a 	b.w	121a8 <rpc_transport_ipc_data_msg_alloc>

00018c94 <rpc_transport_msg_free>:
   18c94:	f7f9 bac0 	b.w	12218 <rpc_transport_ipc_msg_free>

00018c98 <rpc_transport_data_alloc>:
   18c98:	f7f9 baa4 	b.w	121e4 <rpc_transport_ipc_data_alloc>

00018c9c <rpc_transport_data_free>:
   18c9c:	f7f9 bae2 	b.w	12264 <rpc_transport_ipc_data_free>

00018ca0 <rpc_transport_data_msg_send>:
   18ca0:	f7f9 ba2e 	b.w	12100 <rpc_transport_ipc_data_msg_send>

00018ca4 <trace_write>:
   18ca4:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   18ca8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18caa:	f8ad 3000 	strh.w	r3, [sp]
   18cae:	7803      	ldrb	r3, [r0, #0]
   18cb0:	4604      	mov	r4, r0
   18cb2:	f88d 3004 	strb.w	r3, [sp, #4]
   18cb6:	6843      	ldr	r3, [r0, #4]
   18cb8:	6882      	ldr	r2, [r0, #8]
   18cba:	2105      	movs	r1, #5
   18cbc:	4293      	cmp	r3, r2
   18cbe:	bf96      	itet	ls
   18cc0:	6906      	ldrls	r6, [r0, #16]
   18cc2:	1a9e      	subhi	r6, r3, r2
   18cc4:	1ab6      	subls	r6, r6, r2
   18cc6:	4293      	cmp	r3, r2
   18cc8:	bf2c      	ite	cs
   18cca:	2500      	movcs	r5, #0
   18ccc:	68c5      	ldrcc	r5, [r0, #12]
   18cce:	b2b6      	uxth	r6, r6
   18cd0:	bf38      	it	cc
   18cd2:	1b5b      	subcc	r3, r3, r5
   18cd4:	4668      	mov	r0, sp
   18cd6:	bf38      	it	cc
   18cd8:	b29d      	uxthcc	r5, r3
   18cda:	f8ad 6002 	strh.w	r6, [sp, #2]
   18cde:	f7ff fb83 	bl	183e8 <nrf_modem_os_trace_put>
   18ce2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18ce6:	68a0      	ldr	r0, [r4, #8]
   18ce8:	f7ff fb7e 	bl	183e8 <nrf_modem_os_trace_put>
   18cec:	68a3      	ldr	r3, [r4, #8]
   18cee:	441e      	add	r6, r3
   18cf0:	6923      	ldr	r3, [r4, #16]
   18cf2:	60a6      	str	r6, [r4, #8]
   18cf4:	429e      	cmp	r6, r3
   18cf6:	bf04      	itt	eq
   18cf8:	68e3      	ldreq	r3, [r4, #12]
   18cfa:	60a3      	streq	r3, [r4, #8]
   18cfc:	b17d      	cbz	r5, 18d1e <trace_write+0x7a>
   18cfe:	2105      	movs	r1, #5
   18d00:	4668      	mov	r0, sp
   18d02:	f8ad 5002 	strh.w	r5, [sp, #2]
   18d06:	f7ff fb6f 	bl	183e8 <nrf_modem_os_trace_put>
   18d0a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18d0e:	68e0      	ldr	r0, [r4, #12]
   18d10:	f7ff fb6a 	bl	183e8 <nrf_modem_os_trace_put>
   18d14:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   18d18:	68e3      	ldr	r3, [r4, #12]
   18d1a:	4413      	add	r3, r2
   18d1c:	60a3      	str	r3, [r4, #8]
   18d1e:	b002      	add	sp, #8
   18d20:	bd70      	pop	{r4, r5, r6, pc}

00018d22 <rpc_transport_ipc_msg_alloc>:
   18d22:	2300      	movs	r3, #0
   18d24:	b570      	push	{r4, r5, r6, lr}
   18d26:	6806      	ldr	r6, [r0, #0]
   18d28:	429e      	cmp	r6, r3
   18d2a:	d101      	bne.n	18d30 <rpc_transport_ipc_msg_alloc+0xe>
   18d2c:	2000      	movs	r0, #0
   18d2e:	e00d      	b.n	18d4c <rpc_transport_ipc_msg_alloc+0x2a>
   18d30:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
   18d34:	6865      	ldr	r5, [r4, #4]
   18d36:	b2ed      	uxtb	r5, r5
   18d38:	2d03      	cmp	r5, #3
   18d3a:	d108      	bne.n	18d4e <rpc_transport_ipc_msg_alloc+0x2c>
   18d3c:	eb01 1083 	add.w	r0, r1, r3, lsl #6
   18d40:	60a0      	str	r0, [r4, #8]
   18d42:	6863      	ldr	r3, [r4, #4]
   18d44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   18d48:	6063      	str	r3, [r4, #4]
   18d4a:	7102      	strb	r2, [r0, #4]
   18d4c:	bd70      	pop	{r4, r5, r6, pc}
   18d4e:	b915      	cbnz	r5, 18d56 <rpc_transport_ipc_msg_alloc+0x34>
   18d50:	68a5      	ldr	r5, [r4, #8]
   18d52:	2d00      	cmp	r5, #0
   18d54:	d0f2      	beq.n	18d3c <rpc_transport_ipc_msg_alloc+0x1a>
   18d56:	3301      	adds	r3, #1
   18d58:	e7e6      	b.n	18d28 <rpc_transport_ipc_msg_alloc+0x6>

00018d5a <at_client_evt_handler>:
   18d5a:	b120      	cbz	r0, 18d66 <at_client_evt_handler+0xc>
   18d5c:	f850 1b08 	ldr.w	r1, [r0], #8
   18d60:	0c09      	lsrs	r1, r1, #16
   18d62:	f000 bec3 	b.w	19aec <rpc_at_event_handler>
   18d66:	4770      	bx	lr

00018d68 <rpc_at_client_request_alloc>:
   18d68:	b513      	push	{r0, r1, r4, lr}
   18d6a:	4604      	mov	r4, r0
   18d6c:	b160      	cbz	r0, 18d88 <rpc_at_client_request_alloc+0x20>
   18d6e:	2300      	movs	r3, #0
   18d70:	2003      	movs	r0, #3
   18d72:	aa01      	add	r2, sp, #4
   18d74:	9301      	str	r3, [sp, #4]
   18d76:	f7ff ff4f 	bl	18c18 <rpc_message_alloc>
   18d7a:	b918      	cbnz	r0, 18d84 <rpc_at_client_request_alloc+0x1c>
   18d7c:	9b01      	ldr	r3, [sp, #4]
   18d7e:	b10b      	cbz	r3, 18d84 <rpc_at_client_request_alloc+0x1c>
   18d80:	3308      	adds	r3, #8
   18d82:	6023      	str	r3, [r4, #0]
   18d84:	b002      	add	sp, #8
   18d86:	bd10      	pop	{r4, pc}
   18d88:	200e      	movs	r0, #14
   18d8a:	e7fb      	b.n	18d84 <rpc_at_client_request_alloc+0x1c>

00018d8c <rpc_at_client_request_send>:
   18d8c:	b148      	cbz	r0, 18da2 <rpc_at_client_request_send+0x16>
   18d8e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   18d92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   18d96:	4601      	mov	r1, r0
   18d98:	2003      	movs	r0, #3
   18d9a:	f841 2d08 	str.w	r2, [r1, #-8]!
   18d9e:	f7ff bf2b 	b.w	18bf8 <rpc_message_send>
   18da2:	200e      	movs	r0, #14
   18da4:	4770      	bx	lr

00018da6 <rpc_at_client_message_free>:
   18da6:	b120      	cbz	r0, 18db2 <rpc_at_client_message_free+0xc>
   18da8:	f1a0 0108 	sub.w	r1, r0, #8
   18dac:	2003      	movs	r0, #3
   18dae:	f7ff bf57 	b.w	18c60 <rpc_message_free>
   18db2:	200e      	movs	r0, #14
   18db4:	4770      	bx	lr

00018db6 <rpc_at_client_data_free>:
   18db6:	4601      	mov	r1, r0
   18db8:	b110      	cbz	r0, 18dc0 <rpc_at_client_data_free+0xa>
   18dba:	2003      	movs	r0, #3
   18dbc:	f7ff bf5c 	b.w	18c78 <rpc_message_data_free>
   18dc0:	200e      	movs	r0, #14
   18dc2:	4770      	bx	lr

00018dc4 <ip_client_event_handler>:
   18dc4:	f850 1b08 	ldr.w	r1, [r0], #8
   18dc8:	0c09      	lsrs	r1, r1, #16
   18dca:	f7fa ba27 	b.w	1321c <rpc_ip_event_handler>

00018dce <rpc_ip_client_request_alloc>:
   18dce:	2300      	movs	r3, #0
   18dd0:	b513      	push	{r0, r1, r4, lr}
   18dd2:	4604      	mov	r4, r0
   18dd4:	9301      	str	r3, [sp, #4]
   18dd6:	b150      	cbz	r0, 18dee <rpc_ip_client_request_alloc+0x20>
   18dd8:	2004      	movs	r0, #4
   18dda:	aa01      	add	r2, sp, #4
   18ddc:	f7ff ff1c 	bl	18c18 <rpc_message_alloc>
   18de0:	b918      	cbnz	r0, 18dea <rpc_ip_client_request_alloc+0x1c>
   18de2:	9b01      	ldr	r3, [sp, #4]
   18de4:	b10b      	cbz	r3, 18dea <rpc_ip_client_request_alloc+0x1c>
   18de6:	3308      	adds	r3, #8
   18de8:	6023      	str	r3, [r4, #0]
   18dea:	b002      	add	sp, #8
   18dec:	bd10      	pop	{r4, pc}
   18dee:	200e      	movs	r0, #14
   18df0:	e7fb      	b.n	18dea <rpc_ip_client_request_alloc+0x1c>

00018df2 <rpc_ip_client_request_send>:
   18df2:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   18df6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   18dfa:	d10a      	bne.n	18e12 <rpc_ip_client_request_send+0x20>
   18dfc:	b158      	cbz	r0, 18e16 <rpc_ip_client_request_send+0x24>
   18dfe:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   18e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   18e06:	4601      	mov	r1, r0
   18e08:	2004      	movs	r0, #4
   18e0a:	f841 3d08 	str.w	r3, [r1, #-8]!
   18e0e:	f7ff bef3 	b.w	18bf8 <rpc_message_send>
   18e12:	2001      	movs	r0, #1
   18e14:	4770      	bx	lr
   18e16:	200e      	movs	r0, #14
   18e18:	4770      	bx	lr

00018e1a <rpc_ip_client_message_free>:
   18e1a:	b120      	cbz	r0, 18e26 <rpc_ip_client_message_free+0xc>
   18e1c:	f1a0 0108 	sub.w	r1, r0, #8
   18e20:	2004      	movs	r0, #4
   18e22:	f7ff bf1d 	b.w	18c60 <rpc_message_free>
   18e26:	200e      	movs	r0, #14
   18e28:	4770      	bx	lr

00018e2a <rpc_ip_client_data_free>:
   18e2a:	4601      	mov	r1, r0
   18e2c:	b110      	cbz	r0, 18e34 <rpc_ip_client_data_free+0xa>
   18e2e:	2004      	movs	r0, #4
   18e30:	f7ff bf22 	b.w	18c78 <rpc_message_data_free>
   18e34:	200e      	movs	r0, #14
   18e36:	4770      	bx	lr

00018e38 <dfu_client_event_handler>:
   18e38:	f850 1b08 	ldr.w	r1, [r0], #8
   18e3c:	0c09      	lsrs	r1, r1, #16
   18e3e:	f7fb b8b9 	b.w	13fb4 <rpc_dfu_event_handler>

00018e42 <rpc_dfu_client_request_alloc>:
   18e42:	2300      	movs	r3, #0
   18e44:	b513      	push	{r0, r1, r4, lr}
   18e46:	4604      	mov	r4, r0
   18e48:	9301      	str	r3, [sp, #4]
   18e4a:	b150      	cbz	r0, 18e62 <rpc_dfu_client_request_alloc+0x20>
   18e4c:	2006      	movs	r0, #6
   18e4e:	aa01      	add	r2, sp, #4
   18e50:	f7ff fee2 	bl	18c18 <rpc_message_alloc>
   18e54:	b918      	cbnz	r0, 18e5e <rpc_dfu_client_request_alloc+0x1c>
   18e56:	9b01      	ldr	r3, [sp, #4]
   18e58:	b10b      	cbz	r3, 18e5e <rpc_dfu_client_request_alloc+0x1c>
   18e5a:	3308      	adds	r3, #8
   18e5c:	6023      	str	r3, [r4, #0]
   18e5e:	b002      	add	sp, #8
   18e60:	bd10      	pop	{r4, pc}
   18e62:	200e      	movs	r0, #14
   18e64:	e7fb      	b.n	18e5e <rpc_dfu_client_request_alloc+0x1c>

00018e66 <rpc_dfu_client_request_send>:
   18e66:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   18e6a:	d10a      	bne.n	18e82 <rpc_dfu_client_request_send+0x1c>
   18e6c:	b158      	cbz	r0, 18e86 <rpc_dfu_client_request_send+0x20>
   18e6e:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   18e72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   18e76:	4601      	mov	r1, r0
   18e78:	2006      	movs	r0, #6
   18e7a:	f841 3d08 	str.w	r3, [r1, #-8]!
   18e7e:	f7ff bebb 	b.w	18bf8 <rpc_message_send>
   18e82:	2001      	movs	r0, #1
   18e84:	4770      	bx	lr
   18e86:	200e      	movs	r0, #14
   18e88:	4770      	bx	lr

00018e8a <rpc_dfu_client_message_free>:
   18e8a:	b120      	cbz	r0, 18e96 <rpc_dfu_client_message_free+0xc>
   18e8c:	f1a0 0108 	sub.w	r1, r0, #8
   18e90:	2006      	movs	r0, #6
   18e92:	f7ff bee5 	b.w	18c60 <rpc_message_free>
   18e96:	200e      	movs	r0, #14
   18e98:	4770      	bx	lr

00018e9a <rpc_dfu_client_data_free>:
   18e9a:	4601      	mov	r1, r0
   18e9c:	b110      	cbz	r0, 18ea4 <rpc_dfu_client_data_free+0xa>
   18e9e:	2006      	movs	r0, #6
   18ea0:	f7ff beea 	b.w	18c78 <rpc_message_data_free>
   18ea4:	200e      	movs	r0, #14
   18ea6:	4770      	bx	lr

00018ea8 <gnss_client_event_handler>:
   18ea8:	f850 1b08 	ldr.w	r1, [r0], #8
   18eac:	0c09      	lsrs	r1, r1, #16
   18eae:	f7fb ba11 	b.w	142d4 <rpc_gnss_event_handler>

00018eb2 <rpc_gnss_client_request_alloc>:
   18eb2:	2300      	movs	r3, #0
   18eb4:	b513      	push	{r0, r1, r4, lr}
   18eb6:	4604      	mov	r4, r0
   18eb8:	9301      	str	r3, [sp, #4]
   18eba:	b150      	cbz	r0, 18ed2 <rpc_gnss_client_request_alloc+0x20>
   18ebc:	2007      	movs	r0, #7
   18ebe:	aa01      	add	r2, sp, #4
   18ec0:	f7ff feaa 	bl	18c18 <rpc_message_alloc>
   18ec4:	b918      	cbnz	r0, 18ece <rpc_gnss_client_request_alloc+0x1c>
   18ec6:	9b01      	ldr	r3, [sp, #4]
   18ec8:	b10b      	cbz	r3, 18ece <rpc_gnss_client_request_alloc+0x1c>
   18eca:	3308      	adds	r3, #8
   18ecc:	6023      	str	r3, [r4, #0]
   18ece:	b002      	add	sp, #8
   18ed0:	bd10      	pop	{r4, pc}
   18ed2:	200e      	movs	r0, #14
   18ed4:	e7fb      	b.n	18ece <rpc_gnss_client_request_alloc+0x1c>

00018ed6 <rpc_gnss_client_request_send>:
   18ed6:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   18eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   18ede:	d10a      	bne.n	18ef6 <rpc_gnss_client_request_send+0x20>
   18ee0:	b158      	cbz	r0, 18efa <rpc_gnss_client_request_send+0x24>
   18ee2:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   18ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   18eea:	4601      	mov	r1, r0
   18eec:	2007      	movs	r0, #7
   18eee:	f841 3d08 	str.w	r3, [r1, #-8]!
   18ef2:	f7ff be81 	b.w	18bf8 <rpc_message_send>
   18ef6:	2001      	movs	r0, #1
   18ef8:	4770      	bx	lr
   18efa:	200e      	movs	r0, #14
   18efc:	4770      	bx	lr

00018efe <rpc_gnss_client_message_free>:
   18efe:	b120      	cbz	r0, 18f0a <rpc_gnss_client_message_free+0xc>
   18f00:	f1a0 0108 	sub.w	r1, r0, #8
   18f04:	2007      	movs	r0, #7
   18f06:	f7ff beab 	b.w	18c60 <rpc_message_free>
   18f0a:	200e      	movs	r0, #14
   18f0c:	4770      	bx	lr

00018f0e <rpc_gnss_client_data_free>:
   18f0e:	4601      	mov	r1, r0
   18f10:	b110      	cbz	r0, 18f18 <rpc_gnss_client_data_free+0xa>
   18f12:	2007      	movs	r0, #7
   18f14:	f7ff beb0 	b.w	18c78 <rpc_message_data_free>
   18f18:	200e      	movs	r0, #14
   18f1a:	4770      	bx	lr

00018f1c <rpc_gnss_serialize_utc>:
   18f1c:	b1c0      	cbz	r0, 18f50 <rpc_gnss_serialize_utc+0x34>
   18f1e:	b1b9      	cbz	r1, 18f50 <rpc_gnss_serialize_utc+0x34>
   18f20:	2301      	movs	r3, #1
   18f22:	700b      	strb	r3, [r1, #0]
   18f24:	2300      	movs	r3, #0
   18f26:	704b      	strb	r3, [r1, #1]
   18f28:	6843      	ldr	r3, [r0, #4]
   18f2a:	f8c1 3006 	str.w	r3, [r1, #6]
   18f2e:	6803      	ldr	r3, [r0, #0]
   18f30:	f8c1 3002 	str.w	r3, [r1, #2]
   18f34:	7a83      	ldrb	r3, [r0, #10]
   18f36:	730b      	strb	r3, [r1, #12]
   18f38:	7b43      	ldrb	r3, [r0, #13]
   18f3a:	73cb      	strb	r3, [r1, #15]
   18f3c:	7b03      	ldrb	r3, [r0, #12]
   18f3e:	738b      	strb	r3, [r1, #14]
   18f40:	7a03      	ldrb	r3, [r0, #8]
   18f42:	728b      	strb	r3, [r1, #10]
   18f44:	7ac3      	ldrb	r3, [r0, #11]
   18f46:	734b      	strb	r3, [r1, #13]
   18f48:	7a43      	ldrb	r3, [r0, #9]
   18f4a:	2010      	movs	r0, #16
   18f4c:	72cb      	strb	r3, [r1, #11]
   18f4e:	4770      	bx	lr
   18f50:	f04f 30ff 	mov.w	r0, #4294967295
   18f54:	4770      	bx	lr

00018f56 <rpc_gnss_serialize_ephe>:
   18f56:	2800      	cmp	r0, #0
   18f58:	d044      	beq.n	18fe4 <rpc_gnss_serialize_ephe+0x8e>
   18f5a:	2900      	cmp	r1, #0
   18f5c:	d042      	beq.n	18fe4 <rpc_gnss_serialize_ephe+0x8e>
   18f5e:	2302      	movs	r3, #2
   18f60:	700b      	strb	r3, [r1, #0]
   18f62:	2300      	movs	r3, #0
   18f64:	704b      	strb	r3, [r1, #1]
   18f66:	68c3      	ldr	r3, [r0, #12]
   18f68:	f8c1 300b 	str.w	r3, [r1, #11]
   18f6c:	8903      	ldrh	r3, [r0, #8]
   18f6e:	f8a1 3009 	strh.w	r3, [r1, #9]
   18f72:	7983      	ldrb	r3, [r0, #6]
   18f74:	720b      	strb	r3, [r1, #8]
   18f76:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   18f7a:	878b      	strh	r3, [r1, #60]	; 0x3c
   18f7c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   18f7e:	86cb      	strh	r3, [r1, #54]	; 0x36
   18f80:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   18f84:	874b      	strh	r3, [r1, #58]	; 0x3a
   18f86:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   18f88:	868b      	strh	r3, [r1, #52]	; 0x34
   18f8a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   18f8e:	87cb      	strh	r3, [r1, #62]	; 0x3e
   18f90:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   18f94:	870b      	strh	r3, [r1, #56]	; 0x38
   18f96:	8b83      	ldrh	r3, [r0, #28]
   18f98:	830b      	strh	r3, [r1, #24]
   18f9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   18f9c:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   18fa0:	7c83      	ldrb	r3, [r0, #18]
   18fa2:	744b      	strb	r3, [r1, #17]
   18fa4:	7843      	ldrb	r3, [r0, #1]
   18fa6:	70cb      	strb	r3, [r1, #3]
   18fa8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   18faa:	62cb      	str	r3, [r1, #44]	; 0x2c
   18fac:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   18fae:	84cb      	strh	r3, [r1, #38]	; 0x26
   18fb0:	8843      	ldrh	r3, [r0, #2]
   18fb2:	808b      	strh	r3, [r1, #4]
   18fb4:	6a03      	ldr	r3, [r0, #32]
   18fb6:	f8c1 301a 	str.w	r3, [r1, #26]
   18fba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   18fbc:	630b      	str	r3, [r1, #48]	; 0x30
   18fbe:	6a43      	ldr	r3, [r0, #36]	; 0x24
   18fc0:	f8c1 301e 	str.w	r3, [r1, #30]
   18fc4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   18fc6:	628b      	str	r3, [r1, #40]	; 0x28
   18fc8:	7803      	ldrb	r3, [r0, #0]
   18fca:	708b      	strb	r3, [r1, #2]
   18fcc:	7c03      	ldrb	r3, [r0, #16]
   18fce:	73cb      	strb	r3, [r1, #15]
   18fd0:	8883      	ldrh	r3, [r0, #4]
   18fd2:	80cb      	strh	r3, [r1, #6]
   18fd4:	8a83      	ldrh	r3, [r0, #20]
   18fd6:	824b      	strh	r3, [r1, #18]
   18fd8:	7c43      	ldrb	r3, [r0, #17]
   18fda:	740b      	strb	r3, [r1, #16]
   18fdc:	6983      	ldr	r3, [r0, #24]
   18fde:	2040      	movs	r0, #64	; 0x40
   18fe0:	614b      	str	r3, [r1, #20]
   18fe2:	4770      	bx	lr
   18fe4:	f04f 30ff 	mov.w	r0, #4294967295
   18fe8:	4770      	bx	lr

00018fea <rpc_gnss_serialize_alm>:
   18fea:	b340      	cbz	r0, 1903e <rpc_gnss_serialize_alm+0x54>
   18fec:	b339      	cbz	r1, 1903e <rpc_gnss_serialize_alm+0x54>
   18fee:	2303      	movs	r3, #3
   18ff0:	700b      	strb	r3, [r1, #0]
   18ff2:	2300      	movs	r3, #0
   18ff4:	704b      	strb	r3, [r1, #1]
   18ff6:	8b83      	ldrh	r3, [r0, #28]
   18ff8:	f8a1 301d 	strh.w	r3, [r1, #29]
   18ffc:	8bc3      	ldrh	r3, [r0, #30]
   18ffe:	f8a1 301f 	strh.w	r3, [r1, #31]
   19002:	88c3      	ldrh	r3, [r0, #6]
   19004:	810b      	strh	r3, [r1, #8]
   19006:	8883      	ldrh	r3, [r0, #4]
   19008:	80cb      	strh	r3, [r1, #6]
   1900a:	78c3      	ldrb	r3, [r0, #3]
   1900c:	714b      	strb	r3, [r1, #5]
   1900e:	6983      	ldr	r3, [r0, #24]
   19010:	f8c1 3019 	str.w	r3, [r1, #25]
   19014:	6903      	ldr	r3, [r0, #16]
   19016:	f8c1 3011 	str.w	r3, [r1, #17]
   1901a:	8903      	ldrh	r3, [r0, #8]
   1901c:	814b      	strh	r3, [r1, #10]
   1901e:	68c3      	ldr	r3, [r0, #12]
   19020:	f8c1 300d 	str.w	r3, [r1, #13]
   19024:	7a83      	ldrb	r3, [r0, #10]
   19026:	730b      	strb	r3, [r1, #12]
   19028:	7803      	ldrb	r3, [r0, #0]
   1902a:	708b      	strb	r3, [r1, #2]
   1902c:	7883      	ldrb	r3, [r0, #2]
   1902e:	710b      	strb	r3, [r1, #4]
   19030:	6943      	ldr	r3, [r0, #20]
   19032:	f8c1 3015 	str.w	r3, [r1, #21]
   19036:	7843      	ldrb	r3, [r0, #1]
   19038:	2021      	movs	r0, #33	; 0x21
   1903a:	70cb      	strb	r3, [r1, #3]
   1903c:	4770      	bx	lr
   1903e:	f04f 30ff 	mov.w	r0, #4294967295
   19042:	4770      	bx	lr

00019044 <rpc_gnss_serialize_klob>:
   19044:	b1b0      	cbz	r0, 19074 <rpc_gnss_serialize_klob+0x30>
   19046:	b1a9      	cbz	r1, 19074 <rpc_gnss_serialize_klob+0x30>
   19048:	2304      	movs	r3, #4
   1904a:	700b      	strb	r3, [r1, #0]
   1904c:	2300      	movs	r3, #0
   1904e:	704b      	strb	r3, [r1, #1]
   19050:	7803      	ldrb	r3, [r0, #0]
   19052:	708b      	strb	r3, [r1, #2]
   19054:	7843      	ldrb	r3, [r0, #1]
   19056:	70cb      	strb	r3, [r1, #3]
   19058:	7883      	ldrb	r3, [r0, #2]
   1905a:	710b      	strb	r3, [r1, #4]
   1905c:	78c3      	ldrb	r3, [r0, #3]
   1905e:	714b      	strb	r3, [r1, #5]
   19060:	7903      	ldrb	r3, [r0, #4]
   19062:	718b      	strb	r3, [r1, #6]
   19064:	7943      	ldrb	r3, [r0, #5]
   19066:	71cb      	strb	r3, [r1, #7]
   19068:	7983      	ldrb	r3, [r0, #6]
   1906a:	720b      	strb	r3, [r1, #8]
   1906c:	79c3      	ldrb	r3, [r0, #7]
   1906e:	200a      	movs	r0, #10
   19070:	724b      	strb	r3, [r1, #9]
   19072:	4770      	bx	lr
   19074:	f04f 30ff 	mov.w	r0, #4294967295
   19078:	4770      	bx	lr

0001907a <rpc_gnss_serialize_nequick>:
   1907a:	b180      	cbz	r0, 1909e <rpc_gnss_serialize_nequick+0x24>
   1907c:	b179      	cbz	r1, 1909e <rpc_gnss_serialize_nequick+0x24>
   1907e:	2305      	movs	r3, #5
   19080:	700b      	strb	r3, [r1, #0]
   19082:	2300      	movs	r3, #0
   19084:	704b      	strb	r3, [r1, #1]
   19086:	8803      	ldrh	r3, [r0, #0]
   19088:	804b      	strh	r3, [r1, #2]
   1908a:	8843      	ldrh	r3, [r0, #2]
   1908c:	808b      	strh	r3, [r1, #4]
   1908e:	8883      	ldrh	r3, [r0, #4]
   19090:	80cb      	strh	r3, [r1, #6]
   19092:	7983      	ldrb	r3, [r0, #6]
   19094:	720b      	strb	r3, [r1, #8]
   19096:	79c3      	ldrb	r3, [r0, #7]
   19098:	200a      	movs	r0, #10
   1909a:	724b      	strb	r3, [r1, #9]
   1909c:	4770      	bx	lr
   1909e:	f04f 30ff 	mov.w	r0, #4294967295
   190a2:	4770      	bx	lr

000190a4 <rpc_gnss_serialize_time_and_sv_tow>:
   190a4:	b570      	push	{r4, r5, r6, lr}
   190a6:	b1e8      	cbz	r0, 190e4 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   190a8:	b1e1      	cbz	r1, 190e4 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   190aa:	2206      	movs	r2, #6
   190ac:	2300      	movs	r3, #0
   190ae:	700a      	strb	r2, [r1, #0]
   190b0:	8802      	ldrh	r2, [r0, #0]
   190b2:	704b      	strb	r3, [r1, #1]
   190b4:	804a      	strh	r2, [r1, #2]
   190b6:	68c2      	ldr	r2, [r0, #12]
   190b8:	f101 0410 	add.w	r4, r1, #16
   190bc:	f8c1 200a 	str.w	r2, [r1, #10]
   190c0:	8902      	ldrh	r2, [r0, #8]
   190c2:	810a      	strh	r2, [r1, #8]
   190c4:	6842      	ldr	r2, [r0, #4]
   190c6:	604a      	str	r2, [r1, #4]
   190c8:	8a06      	ldrh	r6, [r0, #16]
   190ca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   190ce:	188d      	adds	r5, r1, r2
   190d0:	81ee      	strh	r6, [r5, #14]
   190d2:	7c85      	ldrb	r5, [r0, #18]
   190d4:	3301      	adds	r3, #1
   190d6:	2b20      	cmp	r3, #32
   190d8:	54a5      	strb	r5, [r4, r2]
   190da:	f100 0004 	add.w	r0, r0, #4
   190de:	d1f3      	bne.n	190c8 <rpc_gnss_serialize_time_and_sv_tow+0x24>
   190e0:	206e      	movs	r0, #110	; 0x6e
   190e2:	bd70      	pop	{r4, r5, r6, pc}
   190e4:	f04f 30ff 	mov.w	r0, #4294967295
   190e8:	e7fb      	b.n	190e2 <rpc_gnss_serialize_time_and_sv_tow+0x3e>

000190ea <rpc_gnss_serialize_location>:
   190ea:	b1c0      	cbz	r0, 1911e <rpc_gnss_serialize_location+0x34>
   190ec:	b1b9      	cbz	r1, 1911e <rpc_gnss_serialize_location+0x34>
   190ee:	2307      	movs	r3, #7
   190f0:	700b      	strb	r3, [r1, #0]
   190f2:	2300      	movs	r3, #0
   190f4:	704b      	strb	r3, [r1, #1]
   190f6:	8903      	ldrh	r3, [r0, #8]
   190f8:	814b      	strh	r3, [r1, #10]
   190fa:	7b83      	ldrb	r3, [r0, #14]
   190fc:	740b      	strb	r3, [r1, #16]
   190fe:	6803      	ldr	r3, [r0, #0]
   19100:	f8c1 3002 	str.w	r3, [r1, #2]
   19104:	6843      	ldr	r3, [r0, #4]
   19106:	f8c1 3006 	str.w	r3, [r1, #6]
   1910a:	7b03      	ldrb	r3, [r0, #12]
   1910c:	738b      	strb	r3, [r1, #14]
   1910e:	7b43      	ldrb	r3, [r0, #13]
   19110:	73cb      	strb	r3, [r1, #15]
   19112:	7a83      	ldrb	r3, [r0, #10]
   19114:	730b      	strb	r3, [r1, #12]
   19116:	7ac3      	ldrb	r3, [r0, #11]
   19118:	2011      	movs	r0, #17
   1911a:	734b      	strb	r3, [r1, #13]
   1911c:	4770      	bx	lr
   1911e:	f04f 30ff 	mov.w	r0, #4294967295
   19122:	4770      	bx	lr

00019124 <rpc_gnss_serialize_integrity>:
   19124:	b148      	cbz	r0, 1913a <rpc_gnss_serialize_integrity+0x16>
   19126:	b141      	cbz	r1, 1913a <rpc_gnss_serialize_integrity+0x16>
   19128:	2308      	movs	r3, #8
   1912a:	700b      	strb	r3, [r1, #0]
   1912c:	2300      	movs	r3, #0
   1912e:	704b      	strb	r3, [r1, #1]
   19130:	6803      	ldr	r3, [r0, #0]
   19132:	2006      	movs	r0, #6
   19134:	f8c1 3002 	str.w	r3, [r1, #2]
   19138:	4770      	bx	lr
   1913a:	f04f 30ff 	mov.w	r0, #4294967295
   1913e:	4770      	bx	lr

00019140 <packet_handler_alloc_and_init>:
   19140:	b538      	push	{r3, r4, r5, lr}
   19142:	4604      	mov	r4, r0
   19144:	4608      	mov	r0, r1
   19146:	4611      	mov	r1, r2
   19148:	4622      	mov	r2, r4
   1914a:	f7fc f9ff 	bl	1554c <packet_handler_create>
   1914e:	61e0      	str	r0, [r4, #28]
   19150:	b158      	cbz	r0, 1916a <packet_handler_alloc_and_init+0x2a>
   19152:	6803      	ldr	r3, [r0, #0]
   19154:	681b      	ldr	r3, [r3, #0]
   19156:	4798      	blx	r3
   19158:	4605      	mov	r5, r0
   1915a:	b120      	cbz	r0, 19166 <packet_handler_alloc_and_init+0x26>
   1915c:	69e0      	ldr	r0, [r4, #28]
   1915e:	f000 feb6 	bl	19ece <packet_handler_delete>
   19162:	2300      	movs	r3, #0
   19164:	61e3      	str	r3, [r4, #28]
   19166:	4628      	mov	r0, r5
   19168:	bd38      	pop	{r3, r4, r5, pc}
   1916a:	250c      	movs	r5, #12
   1916c:	e7fb      	b.n	19166 <packet_handler_alloc_and_init+0x26>

0001916e <socket_free>:
   1916e:	b510      	push	{r4, lr}
   19170:	4604      	mov	r4, r0
   19172:	69c0      	ldr	r0, [r0, #28]
   19174:	b108      	cbz	r0, 1917a <socket_free+0xc>
   19176:	f000 feaa 	bl	19ece <packet_handler_delete>
   1917a:	4620      	mov	r0, r4
   1917c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19180:	2228      	movs	r2, #40	; 0x28
   19182:	2100      	movs	r1, #0
   19184:	f7fe bed5 	b.w	17f32 <memset>

00019188 <interface_socket_event_get>:
   19188:	b508      	push	{r3, lr}
   1918a:	b169      	cbz	r1, 191a8 <interface_socket_event_get+0x20>
   1918c:	f7f9 fa80 	bl	12690 <interface_socket_from_handle_get>
   19190:	b158      	cbz	r0, 191aa <interface_socket_event_get+0x22>
   19192:	6803      	ldr	r3, [r0, #0]
   19194:	0c1b      	lsrs	r3, r3, #16
   19196:	f003 020a 	and.w	r2, r3, #10
   1919a:	2a0a      	cmp	r2, #10
   1919c:	bf14      	ite	ne
   1919e:	f003 030f 	andne.w	r3, r3, #15
   191a2:	f003 030d 	andeq.w	r3, r3, #13
   191a6:	600b      	str	r3, [r1, #0]
   191a8:	bd08      	pop	{r3, pc}
   191aa:	2310      	movs	r3, #16
   191ac:	e7fb      	b.n	191a6 <interface_socket_event_get+0x1e>

000191ae <ip_recvd_packet_free_cb>:
   191ae:	b510      	push	{r4, lr}
   191b0:	4604      	mov	r4, r0
   191b2:	6800      	ldr	r0, [r0, #0]
   191b4:	f7ff fe39 	bl	18e2a <rpc_ip_client_data_free>
   191b8:	68a0      	ldr	r0, [r4, #8]
   191ba:	b118      	cbz	r0, 191c4 <ip_recvd_packet_free_cb+0x16>
   191bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   191c0:	f7f7 b95a 	b.w	10478 <nrf_modem_os_free>
   191c4:	bd10      	pop	{r4, pc}

000191c6 <ip_addr_parse>:
   191c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   191c8:	684d      	ldr	r5, [r1, #4]
   191ca:	e9dd 7606 	ldrd	r7, r6, [sp, #24]
   191ce:	4285      	cmp	r5, r0
   191d0:	d11a      	bne.n	19208 <ip_addr_parse+0x42>
   191d2:	780c      	ldrb	r4, [r1, #0]
   191d4:	4294      	cmp	r4, r2
   191d6:	d119      	bne.n	1920c <ip_addr_parse+0x46>
   191d8:	2d02      	cmp	r5, #2
   191da:	d10b      	bne.n	191f4 <ip_addr_parse+0x2e>
   191dc:	2c10      	cmp	r4, #16
   191de:	d115      	bne.n	1920c <ip_addr_parse+0x46>
   191e0:	890a      	ldrh	r2, [r1, #8]
   191e2:	310c      	adds	r1, #12
   191e4:	803a      	strh	r2, [r7, #0]
   191e6:	2204      	movs	r2, #4
   191e8:	801a      	strh	r2, [r3, #0]
   191ea:	4630      	mov	r0, r6
   191ec:	f7fe fe76 	bl	17edc <memcpy>
   191f0:	2000      	movs	r0, #0
   191f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   191f4:	2d0a      	cmp	r5, #10
   191f6:	d109      	bne.n	1920c <ip_addr_parse+0x46>
   191f8:	2c24      	cmp	r4, #36	; 0x24
   191fa:	d107      	bne.n	1920c <ip_addr_parse+0x46>
   191fc:	890a      	ldrh	r2, [r1, #8]
   191fe:	803a      	strh	r2, [r7, #0]
   19200:	2210      	movs	r2, #16
   19202:	801a      	strh	r2, [r3, #0]
   19204:	4411      	add	r1, r2
   19206:	e7f0      	b.n	191ea <ip_addr_parse+0x24>
   19208:	202f      	movs	r0, #47	; 0x2f
   1920a:	e7f2      	b.n	191f2 <ip_addr_parse+0x2c>
   1920c:	2016      	movs	r0, #22
   1920e:	e7f0      	b.n	191f2 <ip_addr_parse+0x2c>

00019210 <ip_interface_request_create>:
   19210:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19212:	4614      	mov	r4, r2
   19214:	2200      	movs	r2, #0
   19216:	4606      	mov	r6, r0
   19218:	460d      	mov	r5, r1
   1921a:	a801      	add	r0, sp, #4
   1921c:	4619      	mov	r1, r3
   1921e:	9201      	str	r2, [sp, #4]
   19220:	f7ff fdd5 	bl	18dce <rpc_ip_client_request_alloc>
   19224:	9b01      	ldr	r3, [sp, #4]
   19226:	b940      	cbnz	r0, 1923a <ip_interface_request_create+0x2a>
   19228:	2208      	movs	r2, #8
   1922a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   1922e:	60dc      	str	r4, [r3, #12]
   19230:	611d      	str	r5, [r3, #16]
   19232:	721a      	strb	r2, [r3, #8]
   19234:	7258      	strb	r0, [r3, #9]
   19236:	7298      	strb	r0, [r3, #10]
   19238:	72d8      	strb	r0, [r3, #11]
   1923a:	4618      	mov	r0, r3
   1923c:	b002      	add	sp, #8
   1923e:	bd70      	pop	{r4, r5, r6, pc}

00019240 <ip_interface_request_send>:
   19240:	b570      	push	{r4, r5, r6, lr}
   19242:	460c      	mov	r4, r1
   19244:	4605      	mov	r5, r0
   19246:	4611      	mov	r1, r2
   19248:	4620      	mov	r0, r4
   1924a:	461e      	mov	r6, r3
   1924c:	f7ff fdd1 	bl	18df2 <rpc_ip_client_request_send>
   19250:	b140      	cbz	r0, 19264 <ip_interface_request_send+0x24>
   19252:	6820      	ldr	r0, [r4, #0]
   19254:	b108      	cbz	r0, 1925a <ip_interface_request_send+0x1a>
   19256:	f7ff fde8 	bl	18e2a <rpc_ip_client_data_free>
   1925a:	4620      	mov	r0, r4
   1925c:	f7ff fddd 	bl	18e1a <rpc_ip_client_message_free>
   19260:	2023      	movs	r0, #35	; 0x23
   19262:	602e      	str	r6, [r5, #0]
   19264:	bd70      	pop	{r4, r5, r6, pc}

00019266 <ip_interface_wait>:
   19266:	b538      	push	{r3, r4, r5, lr}
   19268:	4605      	mov	r5, r0
   1926a:	f7f9 f9d3 	bl	12614 <interface_socket_wait>
   1926e:	4604      	mov	r4, r0
   19270:	b938      	cbnz	r0, 19282 <ip_interface_wait+0x1c>
   19272:	4628      	mov	r0, r5
   19274:	f7f9 fa0c 	bl	12690 <interface_socket_from_handle_get>
   19278:	b118      	cbz	r0, 19282 <ip_interface_wait+0x1c>
   1927a:	6844      	ldr	r4, [r0, #4]
   1927c:	b10c      	cbz	r4, 19282 <ip_interface_wait+0x1c>
   1927e:	2300      	movs	r3, #0
   19280:	6043      	str	r3, [r0, #4]
   19282:	4620      	mov	r0, r4
   19284:	bd38      	pop	{r3, r4, r5, pc}

00019286 <ip_interface_recvfrom>:
   19286:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1928a:	b087      	sub	sp, #28
   1928c:	4681      	mov	r9, r0
   1928e:	461e      	mov	r6, r3
   19290:	4690      	mov	r8, r2
   19292:	9f11      	ldr	r7, [sp, #68]	; 0x44
   19294:	9101      	str	r1, [sp, #4]
   19296:	2a00      	cmp	r2, #0
   19298:	f000 80ee 	beq.w	19478 <ip_interface_recvfrom+0x1f2>
   1929c:	b11b      	cbz	r3, 192a6 <ip_interface_recvfrom+0x20>
   1929e:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   192a2:	f000 80eb 	beq.w	1947c <ip_interface_recvfrom+0x1f6>
   192a6:	4648      	mov	r0, r9
   192a8:	f7f9 f9f2 	bl	12690 <interface_socket_from_handle_get>
   192ac:	4604      	mov	r4, r0
   192ae:	2800      	cmp	r0, #0
   192b0:	f000 80e6 	beq.w	19480 <ip_interface_recvfrom+0x1fa>
   192b4:	6803      	ldr	r3, [r0, #0]
   192b6:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   192ba:	d10f      	bne.n	192dc <ip_interface_recvfrom+0x56>
   192bc:	6802      	ldr	r2, [r0, #0]
   192be:	b292      	uxth	r2, r2
   192c0:	2a06      	cmp	r2, #6
   192c2:	f000 8097 	beq.w	193f4 <ip_interface_recvfrom+0x16e>
   192c6:	6802      	ldr	r2, [r0, #0]
   192c8:	461e      	mov	r6, r3
   192ca:	b292      	uxth	r2, r2
   192cc:	2a07      	cmp	r2, #7
   192ce:	469a      	mov	sl, r3
   192d0:	f000 8092 	beq.w	193f8 <ip_interface_recvfrom+0x172>
   192d4:	2239      	movs	r2, #57	; 0x39
   192d6:	f04f 35ff 	mov.w	r5, #4294967295
   192da:	e07b      	b.n	193d4 <ip_interface_recvfrom+0x14e>
   192dc:	07b5      	lsls	r5, r6, #30
   192de:	bf48      	it	mi
   192e0:	f04f 0a00 	movmi.w	sl, #0
   192e4:	f04f 35ff 	mov.w	r5, #4294967295
   192e8:	bf58      	it	pl
   192ea:	6803      	ldrpl	r3, [r0, #0]
   192ec:	f006 0b10 	and.w	fp, r6, #16
   192f0:	bf5c      	itt	pl
   192f2:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   192f6:	f3c3 7a00 	ubfxpl	sl, r3, #28, #1
   192fa:	6822      	ldr	r2, [r4, #0]
   192fc:	03d0      	lsls	r0, r2, #15
   192fe:	d532      	bpl.n	19366 <ip_interface_recvfrom+0xe0>
   19300:	6822      	ldr	r2, [r4, #0]
   19302:	69e0      	ldr	r0, [r4, #28]
   19304:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   19308:	6022      	str	r2, [r4, #0]
   1930a:	6802      	ldr	r2, [r0, #0]
   1930c:	68d2      	ldr	r2, [r2, #12]
   1930e:	4790      	blx	r2
   19310:	1c41      	adds	r1, r0, #1
   19312:	4605      	mov	r5, r0
   19314:	d00d      	beq.n	19332 <ip_interface_recvfrom+0xac>
   19316:	4580      	cmp	r8, r0
   19318:	dd08      	ble.n	1932c <ip_interface_recvfrom+0xa6>
   1931a:	6923      	ldr	r3, [r4, #16]
   1931c:	2b01      	cmp	r3, #1
   1931e:	d105      	bne.n	1932c <ip_interface_recvfrom+0xa6>
   19320:	f1bb 0f00 	cmp.w	fp, #0
   19324:	d064      	beq.n	193f0 <ip_interface_recvfrom+0x16a>
   19326:	6823      	ldr	r3, [r4, #0]
   19328:	00da      	lsls	r2, r3, #3
   1932a:	d520      	bpl.n	1936e <ip_interface_recvfrom+0xe8>
   1932c:	f04f 0a00 	mov.w	sl, #0
   19330:	e03b      	b.n	193aa <ip_interface_recvfrom+0x124>
   19332:	6822      	ldr	r2, [r4, #0]
   19334:	0313      	lsls	r3, r2, #12
   19336:	d516      	bpl.n	19366 <ip_interface_recvfrom+0xe0>
   19338:	6822      	ldr	r2, [r4, #0]
   1933a:	b292      	uxth	r2, r2
   1933c:	2a0d      	cmp	r2, #13
   1933e:	d012      	beq.n	19366 <ip_interface_recvfrom+0xe0>
   19340:	6923      	ldr	r3, [r4, #16]
   19342:	2b01      	cmp	r3, #1
   19344:	f000 80a4 	beq.w	19490 <ip_interface_recvfrom+0x20a>
   19348:	f04f 0a00 	mov.w	sl, #0
   1934c:	2239      	movs	r2, #57	; 0x39
   1934e:	6823      	ldr	r3, [r4, #0]
   19350:	0c1b      	lsrs	r3, r3, #16
   19352:	041b      	lsls	r3, r3, #16
   19354:	f043 030d 	orr.w	r3, r3, #13
   19358:	6023      	str	r3, [r4, #0]
   1935a:	6823      	ldr	r3, [r4, #0]
   1935c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   19360:	6023      	str	r3, [r4, #0]
   19362:	2600      	movs	r6, #0
   19364:	e036      	b.n	193d4 <ip_interface_recvfrom+0x14e>
   19366:	f1ba 0f00 	cmp.w	sl, #0
   1936a:	f000 8092 	beq.w	19492 <ip_interface_recvfrom+0x20c>
   1936e:	6a23      	ldr	r3, [r4, #32]
   19370:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19374:	2b00      	cmp	r3, #0
   19376:	bf08      	it	eq
   19378:	f04f 33ff 	moveq.w	r3, #4294967295
   1937c:	4611      	mov	r1, r2
   1937e:	9302      	str	r3, [sp, #8]
   19380:	4648      	mov	r0, r9
   19382:	ab02      	add	r3, sp, #8
   19384:	f7ff ff6f 	bl	19266 <ip_interface_wait>
   19388:	4602      	mov	r2, r0
   1938a:	2800      	cmp	r0, #0
   1938c:	d07a      	beq.n	19484 <ip_interface_recvfrom+0x1fe>
   1938e:	6823      	ldr	r3, [r4, #0]
   19390:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   19394:	d079      	beq.n	1948a <ip_interface_recvfrom+0x204>
   19396:	6823      	ldr	r3, [r4, #0]
   19398:	b29b      	uxth	r3, r3
   1939a:	2b0d      	cmp	r3, #13
   1939c:	d075      	beq.n	1948a <ip_interface_recvfrom+0x204>
   1939e:	6923      	ldr	r3, [r4, #16]
   193a0:	1e5d      	subs	r5, r3, #1
   193a2:	f1d5 0a00 	rsbs	sl, r5, #0
   193a6:	eb4a 0a05 	adc.w	sl, sl, r5
   193aa:	b107      	cbz	r7, 193ae <ip_interface_recvfrom+0x128>
   193ac:	683f      	ldr	r7, [r7, #0]
   193ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
   193b0:	69e0      	ldr	r0, [r4, #28]
   193b2:	e9cd 2704 	strd	r2, r7, [sp, #16]
   193b6:	9b01      	ldr	r3, [sp, #4]
   193b8:	6802      	ldr	r2, [r0, #0]
   193ba:	e9cd 3802 	strd	r3, r8, [sp, #8]
   193be:	6895      	ldr	r5, [r2, #8]
   193c0:	a902      	add	r1, sp, #8
   193c2:	4632      	mov	r2, r6
   193c4:	47a8      	blx	r5
   193c6:	4605      	mov	r5, r0
   193c8:	1c68      	adds	r0, r5, #1
   193ca:	bf0b      	itete	eq
   193cc:	2600      	moveq	r6, #0
   193ce:	2601      	movne	r6, #1
   193d0:	2223      	moveq	r2, #35	; 0x23
   193d2:	2200      	movne	r2, #0
   193d4:	69e0      	ldr	r0, [r4, #28]
   193d6:	9201      	str	r2, [sp, #4]
   193d8:	6801      	ldr	r1, [r0, #0]
   193da:	68c9      	ldr	r1, [r1, #12]
   193dc:	4788      	blx	r1
   193de:	3001      	adds	r0, #1
   193e0:	9a01      	ldr	r2, [sp, #4]
   193e2:	d00b      	beq.n	193fc <ip_interface_recvfrom+0x176>
   193e4:	6823      	ldr	r3, [r4, #0]
   193e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   193ea:	6023      	str	r3, [r4, #0]
   193ec:	b1aa      	cbz	r2, 1941a <ip_interface_recvfrom+0x194>
   193ee:	e032      	b.n	19456 <ip_interface_recvfrom+0x1d0>
   193f0:	46da      	mov	sl, fp
   193f2:	e7da      	b.n	193aa <ip_interface_recvfrom+0x124>
   193f4:	461e      	mov	r6, r3
   193f6:	469a      	mov	sl, r3
   193f8:	2209      	movs	r2, #9
   193fa:	e76c      	b.n	192d6 <ip_interface_recvfrom+0x50>
   193fc:	f1ba 0f00 	cmp.w	sl, #0
   19400:	d00f      	beq.n	19422 <ip_interface_recvfrom+0x19c>
   19402:	b97e      	cbnz	r6, 19424 <ip_interface_recvfrom+0x19e>
   19404:	4635      	mov	r5, r6
   19406:	6823      	ldr	r3, [r4, #0]
   19408:	0c1b      	lsrs	r3, r3, #16
   1940a:	041b      	lsls	r3, r3, #16
   1940c:	f043 030d 	orr.w	r3, r3, #13
   19410:	6023      	str	r3, [r4, #0]
   19412:	6823      	ldr	r3, [r4, #0]
   19414:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   19418:	6023      	str	r3, [r4, #0]
   1941a:	4628      	mov	r0, r5
   1941c:	b007      	add	sp, #28
   1941e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19422:	b14e      	cbz	r6, 19438 <ip_interface_recvfrom+0x1b2>
   19424:	6823      	ldr	r3, [r4, #0]
   19426:	0319      	lsls	r1, r3, #12
   19428:	d506      	bpl.n	19438 <ip_interface_recvfrom+0x1b2>
   1942a:	6823      	ldr	r3, [r4, #0]
   1942c:	b29b      	uxth	r3, r3
   1942e:	2b0d      	cmp	r3, #13
   19430:	d002      	beq.n	19438 <ip_interface_recvfrom+0x1b2>
   19432:	6923      	ldr	r3, [r4, #16]
   19434:	2b01      	cmp	r3, #1
   19436:	d0d5      	beq.n	193e4 <ip_interface_recvfrom+0x15e>
   19438:	6823      	ldr	r3, [r4, #0]
   1943a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1943e:	6823      	ldr	r3, [r4, #0]
   19440:	d00f      	beq.n	19462 <ip_interface_recvfrom+0x1dc>
   19442:	2269      	movs	r2, #105	; 0x69
   19444:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   19448:	6023      	str	r3, [r4, #0]
   1944a:	6823      	ldr	r3, [r4, #0]
   1944c:	0c1b      	lsrs	r3, r3, #16
   1944e:	041b      	lsls	r3, r3, #16
   19450:	f043 030d 	orr.w	r3, r3, #13
   19454:	6023      	str	r3, [r4, #0]
   19456:	4610      	mov	r0, r2
   19458:	f7f6 fe7e 	bl	10158 <nrf_modem_os_errno_set>
   1945c:	f04f 35ff 	mov.w	r5, #4294967295
   19460:	e7db      	b.n	1941a <ip_interface_recvfrom+0x194>
   19462:	031b      	lsls	r3, r3, #12
   19464:	d5c2      	bpl.n	193ec <ip_interface_recvfrom+0x166>
   19466:	6823      	ldr	r3, [r4, #0]
   19468:	b29b      	uxth	r3, r3
   1946a:	2b0d      	cmp	r3, #13
   1946c:	d1be      	bne.n	193ec <ip_interface_recvfrom+0x166>
   1946e:	68a3      	ldr	r3, [r4, #8]
   19470:	2b00      	cmp	r3, #0
   19472:	d0bb      	beq.n	193ec <ip_interface_recvfrom+0x166>
   19474:	68a2      	ldr	r2, [r4, #8]
   19476:	e7b9      	b.n	193ec <ip_interface_recvfrom+0x166>
   19478:	2216      	movs	r2, #22
   1947a:	e7ec      	b.n	19456 <ip_interface_recvfrom+0x1d0>
   1947c:	222d      	movs	r2, #45	; 0x2d
   1947e:	e7ea      	b.n	19456 <ip_interface_recvfrom+0x1d0>
   19480:	2209      	movs	r2, #9
   19482:	e7e8      	b.n	19456 <ip_interface_recvfrom+0x1d0>
   19484:	f04f 0a01 	mov.w	sl, #1
   19488:	e737      	b.n	192fa <ip_interface_recvfrom+0x74>
   1948a:	2600      	movs	r6, #0
   1948c:	46b2      	mov	sl, r6
   1948e:	e7a1      	b.n	193d4 <ip_interface_recvfrom+0x14e>
   19490:	469a      	mov	sl, r3
   19492:	2223      	movs	r2, #35	; 0x23
   19494:	e765      	b.n	19362 <ip_interface_recvfrom+0xdc>

00019496 <ip_interface_connect>:
   19496:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1949a:	4606      	mov	r6, r0
   1949c:	4691      	mov	r9, r2
   1949e:	460f      	mov	r7, r1
   194a0:	b085      	sub	sp, #20
   194a2:	2900      	cmp	r1, #0
   194a4:	d065      	beq.n	19572 <ip_interface_connect+0xdc>
   194a6:	2a00      	cmp	r2, #0
   194a8:	d063      	beq.n	19572 <ip_interface_connect+0xdc>
   194aa:	f7f9 f8f1 	bl	12690 <interface_socket_from_handle_get>
   194ae:	4604      	mov	r4, r0
   194b0:	2800      	cmp	r0, #0
   194b2:	d060      	beq.n	19576 <ip_interface_connect+0xe0>
   194b4:	6803      	ldr	r3, [r0, #0]
   194b6:	b29b      	uxth	r3, r3
   194b8:	2b02      	cmp	r3, #2
   194ba:	d003      	beq.n	194c4 <ip_interface_connect+0x2e>
   194bc:	6803      	ldr	r3, [r0, #0]
   194be:	b29b      	uxth	r3, r3
   194c0:	2b04      	cmp	r3, #4
   194c2:	d14f      	bne.n	19564 <ip_interface_connect+0xce>
   194c4:	6823      	ldr	r3, [r4, #0]
   194c6:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   194ca:	d156      	bne.n	1957a <ip_interface_connect+0xe4>
   194cc:	f247 0202 	movw	r2, #28674	; 0x7002
   194d0:	4630      	mov	r0, r6
   194d2:	69a1      	ldr	r1, [r4, #24]
   194d4:	f7ff fe9c 	bl	19210 <ip_interface_request_create>
   194d8:	4605      	mov	r5, r0
   194da:	2800      	cmp	r0, #0
   194dc:	d04f      	beq.n	1957e <ip_interface_connect+0xe8>
   194de:	f247 0802 	movw	r8, #28674	; 0x7002
   194e2:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   194e6:	60c3      	str	r3, [r0, #12]
   194e8:	69a3      	ldr	r3, [r4, #24]
   194ea:	464a      	mov	r2, r9
   194ec:	6103      	str	r3, [r0, #16]
   194ee:	6883      	ldr	r3, [r0, #8]
   194f0:	4639      	mov	r1, r7
   194f2:	3304      	adds	r3, #4
   194f4:	6083      	str	r3, [r0, #8]
   194f6:	f100 0318 	add.w	r3, r0, #24
   194fa:	9301      	str	r3, [sp, #4]
   194fc:	f100 0314 	add.w	r3, r0, #20
   19500:	9300      	str	r3, [sp, #0]
   19502:	f100 0316 	add.w	r3, r0, #22
   19506:	68e0      	ldr	r0, [r4, #12]
   19508:	f7ff fe5d 	bl	191c6 <ip_addr_parse>
   1950c:	bb18      	cbnz	r0, 19556 <ip_interface_connect+0xc0>
   1950e:	68ab      	ldr	r3, [r5, #8]
   19510:	8aea      	ldrh	r2, [r5, #22]
   19512:	6827      	ldr	r7, [r4, #0]
   19514:	4413      	add	r3, r2
   19516:	60ab      	str	r3, [r5, #8]
   19518:	6823      	ldr	r3, [r4, #0]
   1951a:	4642      	mov	r2, r8
   1951c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   19520:	6023      	str	r3, [r4, #0]
   19522:	4629      	mov	r1, r5
   19524:	463b      	mov	r3, r7
   19526:	4620      	mov	r0, r4
   19528:	f7ff fe8a 	bl	19240 <ip_interface_request_send>
   1952c:	b998      	cbnz	r0, 19556 <ip_interface_connect+0xc0>
   1952e:	6823      	ldr	r3, [r4, #0]
   19530:	00db      	lsls	r3, r3, #3
   19532:	d426      	bmi.n	19582 <ip_interface_connect+0xec>
   19534:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19536:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1953a:	2b00      	cmp	r3, #0
   1953c:	bf08      	it	eq
   1953e:	f04f 33ff 	moveq.w	r3, #4294967295
   19542:	2105      	movs	r1, #5
   19544:	9303      	str	r3, [sp, #12]
   19546:	4630      	mov	r0, r6
   19548:	ab03      	add	r3, sp, #12
   1954a:	f7ff fe8c 	bl	19266 <ip_interface_wait>
   1954e:	b130      	cbz	r0, 1955e <ip_interface_connect+0xc8>
   19550:	2873      	cmp	r0, #115	; 0x73
   19552:	d000      	beq.n	19556 <ip_interface_connect+0xc0>
   19554:	6027      	str	r7, [r4, #0]
   19556:	f7f6 fdff 	bl	10158 <nrf_modem_os_errno_set>
   1955a:	f04f 30ff 	mov.w	r0, #4294967295
   1955e:	b005      	add	sp, #20
   19560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19564:	6803      	ldr	r3, [r0, #0]
   19566:	b29b      	uxth	r3, r3
   19568:	2b05      	cmp	r3, #5
   1956a:	bf14      	ite	ne
   1956c:	2009      	movne	r0, #9
   1956e:	2038      	moveq	r0, #56	; 0x38
   19570:	e7f1      	b.n	19556 <ip_interface_connect+0xc0>
   19572:	2016      	movs	r0, #22
   19574:	e7ef      	b.n	19556 <ip_interface_connect+0xc0>
   19576:	2009      	movs	r0, #9
   19578:	e7ed      	b.n	19556 <ip_interface_connect+0xc0>
   1957a:	2072      	movs	r0, #114	; 0x72
   1957c:	e7eb      	b.n	19556 <ip_interface_connect+0xc0>
   1957e:	200c      	movs	r0, #12
   19580:	e7e9      	b.n	19556 <ip_interface_connect+0xc0>
   19582:	2073      	movs	r0, #115	; 0x73
   19584:	e7e7      	b.n	19556 <ip_interface_connect+0xc0>

00019586 <getopt_check_and_send_int>:
   19586:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19588:	4604      	mov	r4, r0
   1958a:	460d      	mov	r5, r1
   1958c:	4618      	mov	r0, r3
   1958e:	4611      	mov	r1, r2
   19590:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19594:	b193      	cbz	r3, 195bc <getopt_check_and_send_int+0x36>
   19596:	681e      	ldr	r6, [r3, #0]
   19598:	2e04      	cmp	r6, #4
   1959a:	d10f      	bne.n	195bc <getopt_check_and_send_int+0x36>
   1959c:	b172      	cbz	r2, 195bc <getopt_check_and_send_int+0x36>
   1959e:	e9cd 2300 	strd	r2, r3, [sp]
   195a2:	462b      	mov	r3, r5
   195a4:	4622      	mov	r2, r4
   195a6:	f7f9 fb35 	bl	12c14 <ip_interface_socketoption_get>
   195aa:	4603      	mov	r3, r0
   195ac:	b118      	cbz	r0, 195b6 <getopt_check_and_send_int+0x30>
   195ae:	f7f6 fdd3 	bl	10158 <nrf_modem_os_errno_set>
   195b2:	f04f 33ff 	mov.w	r3, #4294967295
   195b6:	4618      	mov	r0, r3
   195b8:	b002      	add	sp, #8
   195ba:	bd70      	pop	{r4, r5, r6, pc}
   195bc:	2016      	movs	r0, #22
   195be:	e7f6      	b.n	195ae <getopt_check_and_send_int+0x28>

000195c0 <ip_interface_socketoption_send>:
   195c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195c4:	4699      	mov	r9, r3
   195c6:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   195ca:	f04f 33ff 	mov.w	r3, #4294967295
   195ce:	9301      	str	r3, [sp, #4]
   195d0:	680b      	ldr	r3, [r1, #0]
   195d2:	4606      	mov	r6, r0
   195d4:	025d      	lsls	r5, r3, #9
   195d6:	460c      	mov	r4, r1
   195d8:	4692      	mov	sl, r2
   195da:	d43c      	bmi.n	19656 <ip_interface_socketoption_send+0x96>
   195dc:	680b      	ldr	r3, [r1, #0]
   195de:	0219      	lsls	r1, r3, #8
   195e0:	d439      	bmi.n	19656 <ip_interface_socketoption_send+0x96>
   195e2:	6823      	ldr	r3, [r4, #0]
   195e4:	01da      	lsls	r2, r3, #7
   195e6:	d436      	bmi.n	19656 <ip_interface_socketoption_send+0x96>
   195e8:	6823      	ldr	r3, [r4, #0]
   195ea:	019b      	lsls	r3, r3, #6
   195ec:	d433      	bmi.n	19656 <ip_interface_socketoption_send+0x96>
   195ee:	f8d4 8000 	ldr.w	r8, [r4]
   195f2:	6823      	ldr	r3, [r4, #0]
   195f4:	f247 0203 	movw	r2, #28675	; 0x7003
   195f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   195fc:	6023      	str	r3, [r4, #0]
   195fe:	69a1      	ldr	r1, [r4, #24]
   19600:	463b      	mov	r3, r7
   19602:	f7ff fe05 	bl	19210 <ip_interface_request_create>
   19606:	4605      	mov	r5, r0
   19608:	b318      	cbz	r0, 19652 <ip_interface_socketoption_send+0x92>
   1960a:	6883      	ldr	r3, [r0, #8]
   1960c:	f8c0 a014 	str.w	sl, [r0, #20]
   19610:	3308      	adds	r3, #8
   19612:	6083      	str	r3, [r0, #8]
   19614:	f8c0 9018 	str.w	r9, [r0, #24]
   19618:	b13f      	cbz	r7, 1962a <ip_interface_socketoption_send+0x6a>
   1961a:	f1bb 0f00 	cmp.w	fp, #0
   1961e:	d004      	beq.n	1962a <ip_interface_socketoption_send+0x6a>
   19620:	463a      	mov	r2, r7
   19622:	4659      	mov	r1, fp
   19624:	6800      	ldr	r0, [r0, #0]
   19626:	f7fe fc59 	bl	17edc <memcpy>
   1962a:	4643      	mov	r3, r8
   1962c:	f247 0203 	movw	r2, #28675	; 0x7003
   19630:	4629      	mov	r1, r5
   19632:	4620      	mov	r0, r4
   19634:	f7ff fe04 	bl	19240 <ip_interface_request_send>
   19638:	b930      	cbnz	r0, 19648 <ip_interface_socketoption_send+0x88>
   1963a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1963e:	4630      	mov	r0, r6
   19640:	4611      	mov	r1, r2
   19642:	ab01      	add	r3, sp, #4
   19644:	f7ff fe0f 	bl	19266 <ip_interface_wait>
   19648:	f8c4 8000 	str.w	r8, [r4]
   1964c:	b003      	add	sp, #12
   1964e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19652:	200c      	movs	r0, #12
   19654:	e7f8      	b.n	19648 <ip_interface_socketoption_send+0x88>
   19656:	2023      	movs	r0, #35	; 0x23
   19658:	e7f8      	b.n	1964c <ip_interface_socketoption_send+0x8c>

0001965a <setopt_check_and_send_int>:
   1965a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1965c:	4604      	mov	r4, r0
   1965e:	460d      	mov	r5, r1
   19660:	4618      	mov	r0, r3
   19662:	4611      	mov	r1, r2
   19664:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   19668:	2a04      	cmp	r2, #4
   1966a:	d10f      	bne.n	1968c <setopt_check_and_send_int+0x32>
   1966c:	b173      	cbz	r3, 1968c <setopt_check_and_send_int+0x32>
   1966e:	e9cd 3200 	strd	r3, r2, [sp]
   19672:	462b      	mov	r3, r5
   19674:	4622      	mov	r2, r4
   19676:	f7ff ffa3 	bl	195c0 <ip_interface_socketoption_send>
   1967a:	4603      	mov	r3, r0
   1967c:	b118      	cbz	r0, 19686 <setopt_check_and_send_int+0x2c>
   1967e:	f7f6 fd6b 	bl	10158 <nrf_modem_os_errno_set>
   19682:	f04f 33ff 	mov.w	r3, #4294967295
   19686:	4618      	mov	r0, r3
   19688:	b003      	add	sp, #12
   1968a:	bd30      	pop	{r4, r5, pc}
   1968c:	2016      	movs	r0, #22
   1968e:	e7f6      	b.n	1967e <setopt_check_and_send_int+0x24>

00019690 <ip_interface_setopt>:
   19690:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19694:	2901      	cmp	r1, #1
   19696:	4606      	mov	r6, r0
   19698:	4690      	mov	r8, r2
   1969a:	461c      	mov	r4, r3
   1969c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1969e:	d007      	beq.n	196b0 <ip_interface_setopt+0x20>
   196a0:	202a      	movs	r0, #42	; 0x2a
   196a2:	f7f6 fd59 	bl	10158 <nrf_modem_os_errno_set>
   196a6:	f04f 30ff 	mov.w	r0, #4294967295
   196aa:	b004      	add	sp, #16
   196ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   196b0:	f7f8 ffee 	bl	12690 <interface_socket_from_handle_get>
   196b4:	4605      	mov	r5, r0
   196b6:	b908      	cbnz	r0, 196bc <ip_interface_setopt+0x2c>
   196b8:	2009      	movs	r0, #9
   196ba:	e7f2      	b.n	196a2 <ip_interface_setopt+0x12>
   196bc:	f1b8 0f19 	cmp.w	r8, #25
   196c0:	d00d      	beq.n	196de <ip_interface_setopt+0x4e>
   196c2:	f1a8 031e 	sub.w	r3, r8, #30
   196c6:	2b0a      	cmp	r3, #10
   196c8:	d84d      	bhi.n	19766 <ip_interface_setopt+0xd6>
   196ca:	2b0a      	cmp	r3, #10
   196cc:	d84b      	bhi.n	19766 <ip_interface_setopt+0xd6>
   196ce:	e8df f003 	tbb	[pc, r3]
   196d2:	3429      	.short	0x3429
   196d4:	4a4a4a3b 	.word	0x4a4a4a3b
   196d8:	4a4a4a4a 	.word	0x4a4a4a4a
   196dc:	42          	.byte	0x42
   196dd:	00          	.byte	0x00
   196de:	b90c      	cbnz	r4, 196e4 <ip_interface_setopt+0x54>
   196e0:	200e      	movs	r0, #14
   196e2:	e7de      	b.n	196a2 <ip_interface_setopt+0x12>
   196e4:	4620      	mov	r0, r4
   196e6:	f7fe fbbe 	bl	17e66 <strlen>
   196ea:	42b8      	cmp	r0, r7
   196ec:	d1f8      	bne.n	196e0 <ip_interface_setopt+0x50>
   196ee:	682b      	ldr	r3, [r5, #0]
   196f0:	b29b      	uxth	r3, r3
   196f2:	2b02      	cmp	r3, #2
   196f4:	d1e0      	bne.n	196b8 <ip_interface_setopt+0x28>
   196f6:	4621      	mov	r1, r4
   196f8:	68e8      	ldr	r0, [r5, #12]
   196fa:	f7fb fe41 	bl	15380 <pdn_interface_pdn_id_get>
   196fe:	9003      	str	r0, [sp, #12]
   19700:	3001      	adds	r0, #1
   19702:	d101      	bne.n	19708 <ip_interface_setopt+0x78>
   19704:	2016      	movs	r0, #22
   19706:	e7cc      	b.n	196a2 <ip_interface_setopt+0x12>
   19708:	2304      	movs	r3, #4
   1970a:	9301      	str	r3, [sp, #4]
   1970c:	ab03      	add	r3, sp, #12
   1970e:	9300      	str	r3, [sp, #0]
   19710:	2208      	movs	r2, #8
   19712:	f243 0310 	movw	r3, #12304	; 0x3010
   19716:	4629      	mov	r1, r5
   19718:	4630      	mov	r0, r6
   1971a:	f7ff ff51 	bl	195c0 <ip_interface_socketoption_send>
   1971e:	2800      	cmp	r0, #0
   19720:	d0c3      	beq.n	196aa <ip_interface_setopt+0x1a>
   19722:	e7be      	b.n	196a2 <ip_interface_setopt+0x12>
   19724:	4633      	mov	r3, r6
   19726:	4602      	mov	r2, r0
   19728:	f248 0101 	movw	r1, #32769	; 0x8001
   1972c:	e9cd 4700 	strd	r4, r7, [sp]
   19730:	f44f 7000 	mov.w	r0, #512	; 0x200
   19734:	f7ff ff91 	bl	1965a <setopt_check_and_send_int>
   19738:	e7b7      	b.n	196aa <ip_interface_setopt+0x1a>
   1973a:	4633      	mov	r3, r6
   1973c:	4602      	mov	r2, r0
   1973e:	f244 0110 	movw	r1, #16400	; 0x4010
   19742:	e9cd 4700 	strd	r4, r7, [sp]
   19746:	e7f3      	b.n	19730 <ip_interface_setopt+0xa0>
   19748:	4633      	mov	r3, r6
   1974a:	4602      	mov	r2, r0
   1974c:	f246 0110 	movw	r1, #24592	; 0x6010
   19750:	e9cd 4700 	strd	r4, r7, [sp]
   19754:	e7ec      	b.n	19730 <ip_interface_setopt+0xa0>
   19756:	4602      	mov	r2, r0
   19758:	4633      	mov	r3, r6
   1975a:	f241 0104 	movw	r1, #4100	; 0x1004
   1975e:	2008      	movs	r0, #8
   19760:	e9cd 4700 	strd	r4, r7, [sp]
   19764:	e7e6      	b.n	19734 <ip_interface_setopt+0xa4>
   19766:	4623      	mov	r3, r4
   19768:	4642      	mov	r2, r8
   1976a:	2101      	movs	r1, #1
   1976c:	4630      	mov	r0, r6
   1976e:	9700      	str	r7, [sp, #0]
   19770:	f7f8 ff9e 	bl	126b0 <interface_socket_setopt>
   19774:	e799      	b.n	196aa <ip_interface_setopt+0x1a>

00019776 <ip_interface_getopt>:
   19776:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19778:	2901      	cmp	r1, #1
   1977a:	4604      	mov	r4, r0
   1977c:	4617      	mov	r7, r2
   1977e:	461d      	mov	r5, r3
   19780:	9e08      	ldr	r6, [sp, #32]
   19782:	d006      	beq.n	19792 <ip_interface_getopt+0x1c>
   19784:	202a      	movs	r0, #42	; 0x2a
   19786:	f7f6 fce7 	bl	10158 <nrf_modem_os_errno_set>
   1978a:	f04f 30ff 	mov.w	r0, #4294967295
   1978e:	b003      	add	sp, #12
   19790:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19792:	f7f8 ff7d 	bl	12690 <interface_socket_from_handle_get>
   19796:	4602      	mov	r2, r0
   19798:	b908      	cbnz	r0, 1979e <ip_interface_getopt+0x28>
   1979a:	2009      	movs	r0, #9
   1979c:	e7f3      	b.n	19786 <ip_interface_getopt+0x10>
   1979e:	f1a7 031e 	sub.w	r3, r7, #30
   197a2:	2b0a      	cmp	r3, #10
   197a4:	d824      	bhi.n	197f0 <ip_interface_getopt+0x7a>
   197a6:	e8df f003 	tbb	[pc, r3]
   197aa:	1006      	.short	0x1006
   197ac:	23232316 	.word	0x23232316
   197b0:	23232323 	.word	0x23232323
   197b4:	1c          	.byte	0x1c
   197b5:	00          	.byte	0x00
   197b6:	4623      	mov	r3, r4
   197b8:	f248 0101 	movw	r1, #32769	; 0x8001
   197bc:	e9cd 5600 	strd	r5, r6, [sp]
   197c0:	f44f 7000 	mov.w	r0, #512	; 0x200
   197c4:	f7ff fedf 	bl	19586 <getopt_check_and_send_int>
   197c8:	e7e1      	b.n	1978e <ip_interface_getopt+0x18>
   197ca:	4623      	mov	r3, r4
   197cc:	f244 0110 	movw	r1, #16400	; 0x4010
   197d0:	e9cd 5600 	strd	r5, r6, [sp]
   197d4:	e7f4      	b.n	197c0 <ip_interface_getopt+0x4a>
   197d6:	4623      	mov	r3, r4
   197d8:	f246 0110 	movw	r1, #24592	; 0x6010
   197dc:	e9cd 5600 	strd	r5, r6, [sp]
   197e0:	e7ee      	b.n	197c0 <ip_interface_getopt+0x4a>
   197e2:	4623      	mov	r3, r4
   197e4:	f241 0104 	movw	r1, #4100	; 0x1004
   197e8:	2008      	movs	r0, #8
   197ea:	e9cd 5600 	strd	r5, r6, [sp]
   197ee:	e7e9      	b.n	197c4 <ip_interface_getopt+0x4e>
   197f0:	462b      	mov	r3, r5
   197f2:	463a      	mov	r2, r7
   197f4:	2101      	movs	r1, #1
   197f6:	4620      	mov	r0, r4
   197f8:	9608      	str	r6, [sp, #32]
   197fa:	b003      	add	sp, #12
   197fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   19800:	f7f8 bf8a 	b.w	12718 <interface_socket_getopt>

00019804 <attach_trigger_condition_verify>:
   19804:	6903      	ldr	r3, [r0, #16]
   19806:	2b01      	cmp	r3, #1
   19808:	d105      	bne.n	19816 <attach_trigger_condition_verify+0x12>
   1980a:	6800      	ldr	r0, [r0, #0]
   1980c:	b280      	uxth	r0, r0
   1980e:	1f43      	subs	r3, r0, #5
   19810:	4258      	negs	r0, r3
   19812:	4158      	adcs	r0, r3
   19814:	4770      	bx	lr
   19816:	2b02      	cmp	r3, #2
   19818:	d109      	bne.n	1982e <attach_trigger_condition_verify+0x2a>
   1981a:	6803      	ldr	r3, [r0, #0]
   1981c:	b29b      	uxth	r3, r3
   1981e:	2b02      	cmp	r3, #2
   19820:	d003      	beq.n	1982a <attach_trigger_condition_verify+0x26>
   19822:	6803      	ldr	r3, [r0, #0]
   19824:	b29b      	uxth	r3, r3
   19826:	2b04      	cmp	r3, #4
   19828:	d1ef      	bne.n	1980a <attach_trigger_condition_verify+0x6>
   1982a:	2001      	movs	r0, #1
   1982c:	4770      	bx	lr
   1982e:	2000      	movs	r0, #0
   19830:	4770      	bx	lr

00019832 <secure_client_socket>:
   19832:	f04f 33ff 	mov.w	r3, #4294967295
   19836:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19838:	9301      	str	r3, [sp, #4]
   1983a:	680b      	ldr	r3, [r1, #0]
   1983c:	4606      	mov	r6, r0
   1983e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   19842:	600b      	str	r3, [r1, #0]
   19844:	680b      	ldr	r3, [r1, #0]
   19846:	460c      	mov	r4, r1
   19848:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1984c:	600b      	str	r3, [r1, #0]
   1984e:	680f      	ldr	r7, [r1, #0]
   19850:	463a      	mov	r2, r7
   19852:	f7f9 ff3b 	bl	136cc <secure_socket_attach_initiate>
   19856:	4605      	mov	r5, r0
   19858:	b950      	cbnz	r0, 19870 <secure_client_socket+0x3e>
   1985a:	220c      	movs	r2, #12
   1985c:	4630      	mov	r0, r6
   1985e:	4611      	mov	r1, r2
   19860:	ab01      	add	r3, sp, #4
   19862:	f7ff fd00 	bl	19266 <ip_interface_wait>
   19866:	4605      	mov	r5, r0
   19868:	b128      	cbz	r0, 19876 <secure_client_socket+0x44>
   1986a:	2873      	cmp	r0, #115	; 0x73
   1986c:	d000      	beq.n	19870 <secure_client_socket+0x3e>
   1986e:	6027      	str	r7, [r4, #0]
   19870:	4628      	mov	r0, r5
   19872:	b003      	add	sp, #12
   19874:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19876:	4630      	mov	r0, r6
   19878:	f7f9 ff16 	bl	136a8 <hostname_free>
   1987c:	6823      	ldr	r3, [r4, #0]
   1987e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   19882:	6023      	str	r3, [r4, #0]
   19884:	6823      	ldr	r3, [r4, #0]
   19886:	0c1b      	lsrs	r3, r3, #16
   19888:	041b      	lsls	r3, r3, #16
   1988a:	f043 030c 	orr.w	r3, r3, #12
   1988e:	6023      	str	r3, [r4, #0]
   19890:	6823      	ldr	r3, [r4, #0]
   19892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19896:	6023      	str	r3, [r4, #0]
   19898:	6823      	ldr	r3, [r4, #0]
   1989a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1989e:	6023      	str	r3, [r4, #0]
   198a0:	e7e6      	b.n	19870 <secure_client_socket+0x3e>

000198a2 <tls_interface_close>:
   198a2:	b510      	push	{r4, lr}
   198a4:	4604      	mov	r4, r0
   198a6:	f7f8 fef3 	bl	12690 <interface_socket_from_handle_get>
   198aa:	b138      	cbz	r0, 198bc <tls_interface_close+0x1a>
   198ac:	4620      	mov	r0, r4
   198ae:	f7f9 fefb 	bl	136a8 <hostname_free>
   198b2:	4620      	mov	r0, r4
   198b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   198b8:	f7f9 b842 	b.w	12940 <ip_interface_close>
   198bc:	2009      	movs	r0, #9
   198be:	f7f6 fc4b 	bl	10158 <nrf_modem_os_errno_set>
   198c2:	f04f 30ff 	mov.w	r0, #4294967295
   198c6:	bd10      	pop	{r4, pc}

000198c8 <packet_free_cb>:
   198c8:	6800      	ldr	r0, [r0, #0]
   198ca:	f7ff ba74 	b.w	18db6 <rpc_at_client_data_free>

000198ce <at_interface_wait>:
   198ce:	b538      	push	{r3, r4, r5, lr}
   198d0:	4605      	mov	r5, r0
   198d2:	f7f8 fe9f 	bl	12614 <interface_socket_wait>
   198d6:	4604      	mov	r4, r0
   198d8:	b938      	cbnz	r0, 198ea <at_interface_wait+0x1c>
   198da:	4628      	mov	r0, r5
   198dc:	f7f8 fed8 	bl	12690 <interface_socket_from_handle_get>
   198e0:	b118      	cbz	r0, 198ea <at_interface_wait+0x1c>
   198e2:	6844      	ldr	r4, [r0, #4]
   198e4:	b10c      	cbz	r4, 198ea <at_interface_wait+0x1c>
   198e6:	2300      	movs	r3, #0
   198e8:	6043      	str	r3, [r0, #4]
   198ea:	4620      	mov	r0, r4
   198ec:	bd38      	pop	{r3, r4, r5, pc}

000198ee <send_message>:
   198ee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   198f2:	4606      	mov	r6, r0
   198f4:	4668      	mov	r0, sp
   198f6:	460f      	mov	r7, r1
   198f8:	4692      	mov	sl, r2
   198fa:	4699      	mov	r9, r3
   198fc:	f7ff fa34 	bl	18d68 <rpc_at_client_request_alloc>
   19900:	4605      	mov	r5, r0
   19902:	4630      	mov	r0, r6
   19904:	f7f8 fec4 	bl	12690 <interface_socket_from_handle_get>
   19908:	4680      	mov	r8, r0
   1990a:	bb5d      	cbnz	r5, 19964 <send_message+0x76>
   1990c:	2304      	movs	r3, #4
   1990e:	9c00      	ldr	r4, [sp, #0]
   19910:	7223      	strb	r3, [r4, #8]
   19912:	7265      	strb	r5, [r4, #9]
   19914:	72a5      	strb	r5, [r4, #10]
   19916:	72e5      	strb	r5, [r4, #11]
   19918:	60e6      	str	r6, [r4, #12]
   1991a:	b127      	cbz	r7, 19926 <send_message+0x38>
   1991c:	463a      	mov	r2, r7
   1991e:	4651      	mov	r1, sl
   19920:	6820      	ldr	r0, [r4, #0]
   19922:	f7fe fadb 	bl	17edc <memcpy>
   19926:	4649      	mov	r1, r9
   19928:	9800      	ldr	r0, [sp, #0]
   1992a:	f7ff fa2f 	bl	18d8c <rpc_at_client_request_send>
   1992e:	b158      	cbz	r0, 19948 <send_message+0x5a>
   19930:	b11f      	cbz	r7, 1993a <send_message+0x4c>
   19932:	9b00      	ldr	r3, [sp, #0]
   19934:	6818      	ldr	r0, [r3, #0]
   19936:	f7ff fa3e 	bl	18db6 <rpc_at_client_data_free>
   1993a:	9800      	ldr	r0, [sp, #0]
   1993c:	f7ff fa33 	bl	18da6 <rpc_at_client_message_free>
   19940:	2023      	movs	r0, #35	; 0x23
   19942:	b002      	add	sp, #8
   19944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19948:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   1994c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1994e:	2b00      	cmp	r3, #0
   19950:	bf08      	it	eq
   19952:	f04f 33ff 	moveq.w	r3, #4294967295
   19956:	4611      	mov	r1, r2
   19958:	9301      	str	r3, [sp, #4]
   1995a:	4630      	mov	r0, r6
   1995c:	ab01      	add	r3, sp, #4
   1995e:	f7ff ffb6 	bl	198ce <at_interface_wait>
   19962:	e7ee      	b.n	19942 <send_message+0x54>
   19964:	200c      	movs	r0, #12
   19966:	e7ec      	b.n	19942 <send_message+0x54>

00019968 <at_interface_write>:
   19968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1996c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1996e:	4607      	mov	r7, r0
   19970:	4688      	mov	r8, r1
   19972:	4615      	mov	r5, r2
   19974:	4699      	mov	r9, r3
   19976:	b146      	cbz	r6, 1998a <at_interface_write+0x22>
   19978:	2038      	movs	r0, #56	; 0x38
   1997a:	f7f6 fbed 	bl	10158 <nrf_modem_os_errno_set>
   1997e:	f04f 35ff 	mov.w	r5, #4294967295
   19982:	4628      	mov	r0, r5
   19984:	b003      	add	sp, #12
   19986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1998a:	f7f8 fe81 	bl	12690 <interface_socket_from_handle_get>
   1998e:	4604      	mov	r4, r0
   19990:	f1b9 0f00 	cmp.w	r9, #0
   19994:	d124      	bne.n	199e0 <at_interface_write+0x78>
   19996:	b908      	cbnz	r0, 1999c <at_interface_write+0x34>
   19998:	2016      	movs	r0, #22
   1999a:	e7ee      	b.n	1997a <at_interface_write+0x12>
   1999c:	2601      	movs	r6, #1
   1999e:	6822      	ldr	r2, [r4, #0]
   199a0:	0393      	lsls	r3, r2, #14
   199a2:	d518      	bpl.n	199d6 <at_interface_write+0x6e>
   199a4:	b1f6      	cbz	r6, 199e4 <at_interface_write+0x7c>
   199a6:	6823      	ldr	r3, [r4, #0]
   199a8:	4642      	mov	r2, r8
   199aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   199ae:	6023      	str	r3, [r4, #0]
   199b0:	6823      	ldr	r3, [r4, #0]
   199b2:	4629      	mov	r1, r5
   199b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   199b8:	6023      	str	r3, [r4, #0]
   199ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   199be:	4638      	mov	r0, r7
   199c0:	9300      	str	r3, [sp, #0]
   199c2:	2301      	movs	r3, #1
   199c4:	f7ff ff93 	bl	198ee <send_message>
   199c8:	2800      	cmp	r0, #0
   199ca:	d0da      	beq.n	19982 <at_interface_write+0x1a>
   199cc:	6823      	ldr	r3, [r4, #0]
   199ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   199d2:	6023      	str	r3, [r4, #0]
   199d4:	e7d1      	b.n	1997a <at_interface_write+0x12>
   199d6:	2e00      	cmp	r6, #0
   199d8:	bf14      	ite	ne
   199da:	2016      	movne	r0, #22
   199dc:	202d      	moveq	r0, #45	; 0x2d
   199de:	e7cc      	b.n	1997a <at_interface_write+0x12>
   199e0:	2800      	cmp	r0, #0
   199e2:	d1dc      	bne.n	1999e <at_interface_write+0x36>
   199e4:	202d      	movs	r0, #45	; 0x2d
   199e6:	e7c8      	b.n	1997a <at_interface_write+0x12>

000199e8 <at_interface_close>:
   199e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   199ea:	4606      	mov	r6, r0
   199ec:	f7f8 fe50 	bl	12690 <interface_socket_from_handle_get>
   199f0:	4604      	mov	r4, r0
   199f2:	b308      	cbz	r0, 19a38 <at_interface_close+0x50>
   199f4:	230d      	movs	r3, #13
   199f6:	6807      	ldr	r7, [r0, #0]
   199f8:	6003      	str	r3, [r0, #0]
   199fa:	6803      	ldr	r3, [r0, #0]
   199fc:	2200      	movs	r2, #0
   199fe:	039b      	lsls	r3, r3, #14
   19a00:	bf48      	it	mi
   19a02:	6803      	ldrmi	r3, [r0, #0]
   19a04:	4611      	mov	r1, r2
   19a06:	bf44      	itt	mi
   19a08:	f423 3300 	bicmi.w	r3, r3, #131072	; 0x20000
   19a0c:	6003      	strmi	r3, [r0, #0]
   19a0e:	230e      	movs	r3, #14
   19a10:	4630      	mov	r0, r6
   19a12:	9300      	str	r3, [sp, #0]
   19a14:	2306      	movs	r3, #6
   19a16:	f7ff ff6a 	bl	198ee <send_message>
   19a1a:	4605      	mov	r5, r0
   19a1c:	b130      	cbz	r0, 19a2c <at_interface_close+0x44>
   19a1e:	6027      	str	r7, [r4, #0]
   19a20:	4628      	mov	r0, r5
   19a22:	f7f6 fb99 	bl	10158 <nrf_modem_os_errno_set>
   19a26:	f04f 35ff 	mov.w	r5, #4294967295
   19a2a:	e002      	b.n	19a32 <at_interface_close+0x4a>
   19a2c:	4630      	mov	r0, r6
   19a2e:	f7f8 fdcb 	bl	125c8 <interface_socket_free>
   19a32:	4628      	mov	r0, r5
   19a34:	b003      	add	sp, #12
   19a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19a38:	2516      	movs	r5, #22
   19a3a:	e7f1      	b.n	19a20 <at_interface_close+0x38>

00019a3c <at_interface_read>:
   19a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19a40:	b087      	sub	sp, #28
   19a42:	4680      	mov	r8, r0
   19a44:	460e      	mov	r6, r1
   19a46:	4614      	mov	r4, r2
   19a48:	461f      	mov	r7, r3
   19a4a:	f7f8 fe21 	bl	12690 <interface_socket_from_handle_get>
   19a4e:	4605      	mov	r5, r0
   19a50:	2800      	cmp	r0, #0
   19a52:	d045      	beq.n	19ae0 <at_interface_read+0xa4>
   19a54:	2300      	movs	r3, #0
   19a56:	e9cd 6402 	strd	r6, r4, [sp, #8]
   19a5a:	9304      	str	r3, [sp, #16]
   19a5c:	b117      	cbz	r7, 19a64 <at_interface_read+0x28>
   19a5e:	f017 0f2a 	tst.w	r7, #42	; 0x2a
   19a62:	d022      	beq.n	19aaa <at_interface_read+0x6e>
   19a64:	2400      	movs	r4, #0
   19a66:	9305      	str	r3, [sp, #20]
   19a68:	f007 0902 	and.w	r9, r7, #2
   19a6c:	682b      	ldr	r3, [r5, #0]
   19a6e:	69e8      	ldr	r0, [r5, #28]
   19a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   19a74:	602b      	str	r3, [r5, #0]
   19a76:	6803      	ldr	r3, [r0, #0]
   19a78:	463a      	mov	r2, r7
   19a7a:	689b      	ldr	r3, [r3, #8]
   19a7c:	a902      	add	r1, sp, #8
   19a7e:	4798      	blx	r3
   19a80:	1e06      	subs	r6, r0, #0
   19a82:	da1b      	bge.n	19abc <at_interface_read+0x80>
   19a84:	f1b9 0f00 	cmp.w	r9, #0
   19a88:	d113      	bne.n	19ab2 <at_interface_read+0x76>
   19a8a:	b9bc      	cbnz	r4, 19abc <at_interface_read+0x80>
   19a8c:	6a2b      	ldr	r3, [r5, #32]
   19a8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19a92:	2b00      	cmp	r3, #0
   19a94:	bf08      	it	eq
   19a96:	f04f 33ff 	moveq.w	r3, #4294967295
   19a9a:	4611      	mov	r1, r2
   19a9c:	9301      	str	r3, [sp, #4]
   19a9e:	4640      	mov	r0, r8
   19aa0:	ab01      	add	r3, sp, #4
   19aa2:	f7ff ff14 	bl	198ce <at_interface_wait>
   19aa6:	4604      	mov	r4, r0
   19aa8:	e7e0      	b.n	19a6c <at_interface_read+0x30>
   19aaa:	242d      	movs	r4, #45	; 0x2d
   19aac:	f04f 36ff 	mov.w	r6, #4294967295
   19ab0:	e00f      	b.n	19ad2 <at_interface_read+0x96>
   19ab2:	1c73      	adds	r3, r6, #1
   19ab4:	d102      	bne.n	19abc <at_interface_read+0x80>
   19ab6:	2c00      	cmp	r4, #0
   19ab8:	bf08      	it	eq
   19aba:	2423      	moveq	r4, #35	; 0x23
   19abc:	69e8      	ldr	r0, [r5, #28]
   19abe:	6803      	ldr	r3, [r0, #0]
   19ac0:	68db      	ldr	r3, [r3, #12]
   19ac2:	4798      	blx	r3
   19ac4:	3001      	adds	r0, #1
   19ac6:	bf1e      	ittt	ne
   19ac8:	682b      	ldrne	r3, [r5, #0]
   19aca:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
   19ace:	602b      	strne	r3, [r5, #0]
   19ad0:	b114      	cbz	r4, 19ad8 <at_interface_read+0x9c>
   19ad2:	4620      	mov	r0, r4
   19ad4:	f7f6 fb40 	bl	10158 <nrf_modem_os_errno_set>
   19ad8:	4630      	mov	r0, r6
   19ada:	b007      	add	sp, #28
   19adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19ae0:	2416      	movs	r4, #22
   19ae2:	e7e3      	b.n	19aac <at_interface_read+0x70>

00019ae4 <at_interface_getopt>:
   19ae4:	f7f8 be18 	b.w	12718 <interface_socket_getopt>

00019ae8 <at_interface_setopt>:
   19ae8:	f7f8 bde2 	b.w	126b0 <interface_socket_setopt>

00019aec <rpc_at_event_handler>:
   19aec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   19aee:	4606      	mov	r6, r0
   19af0:	68c0      	ldr	r0, [r0, #12]
   19af2:	460d      	mov	r5, r1
   19af4:	f7f8 fdcc 	bl	12690 <interface_socket_from_handle_get>
   19af8:	4604      	mov	r4, r0
   19afa:	2800      	cmp	r0, #0
   19afc:	d03a      	beq.n	19b74 <rpc_at_event_handler+0x88>
   19afe:	6803      	ldr	r3, [r0, #0]
   19b00:	b29b      	uxth	r3, r3
   19b02:	2b01      	cmp	r3, #1
   19b04:	d104      	bne.n	19b10 <rpc_at_event_handler+0x24>
   19b06:	2d02      	cmp	r5, #2
   19b08:	d11c      	bne.n	19b44 <rpc_at_event_handler+0x58>
   19b0a:	6005      	str	r5, [r0, #0]
   19b0c:	2000      	movs	r0, #0
   19b0e:	e02b      	b.n	19b68 <rpc_at_event_handler+0x7c>
   19b10:	6803      	ldr	r3, [r0, #0]
   19b12:	b29b      	uxth	r3, r3
   19b14:	2b0d      	cmp	r3, #13
   19b16:	d104      	bne.n	19b22 <rpc_at_event_handler+0x36>
   19b18:	2d02      	cmp	r5, #2
   19b1a:	d113      	bne.n	19b44 <rpc_at_event_handler+0x58>
   19b1c:	230e      	movs	r3, #14
   19b1e:	6023      	str	r3, [r4, #0]
   19b20:	e7f4      	b.n	19b0c <rpc_at_event_handler+0x20>
   19b22:	6803      	ldr	r3, [r0, #0]
   19b24:	b29b      	uxth	r3, r3
   19b26:	2b02      	cmp	r3, #2
   19b28:	d10c      	bne.n	19b44 <rpc_at_event_handler+0x58>
   19b2a:	6803      	ldr	r3, [r0, #0]
   19b2c:	029b      	lsls	r3, r3, #10
   19b2e:	d509      	bpl.n	19b44 <rpc_at_event_handler+0x58>
   19b30:	2d02      	cmp	r5, #2
   19b32:	d107      	bne.n	19b44 <rpc_at_event_handler+0x58>
   19b34:	6803      	ldr	r3, [r0, #0]
   19b36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19b3a:	6003      	str	r3, [r0, #0]
   19b3c:	6803      	ldr	r3, [r0, #0]
   19b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19b42:	e7ec      	b.n	19b1e <rpc_at_event_handler+0x32>
   19b44:	3d03      	subs	r5, #3
   19b46:	2d01      	cmp	r5, #1
   19b48:	d8e0      	bhi.n	19b0c <rpc_at_event_handler+0x20>
   19b4a:	2500      	movs	r5, #0
   19b4c:	6833      	ldr	r3, [r6, #0]
   19b4e:	69e0      	ldr	r0, [r4, #28]
   19b50:	9300      	str	r3, [sp, #0]
   19b52:	6873      	ldr	r3, [r6, #4]
   19b54:	4669      	mov	r1, sp
   19b56:	9301      	str	r3, [sp, #4]
   19b58:	6803      	ldr	r3, [r0, #0]
   19b5a:	e9cd 5502 	strd	r5, r5, [sp, #8]
   19b5e:	685b      	ldr	r3, [r3, #4]
   19b60:	4798      	blx	r3
   19b62:	3001      	adds	r0, #1
   19b64:	d102      	bne.n	19b6c <rpc_at_event_handler+0x80>
   19b66:	2002      	movs	r0, #2
   19b68:	b004      	add	sp, #16
   19b6a:	bd70      	pop	{r4, r5, r6, pc}
   19b6c:	6823      	ldr	r3, [r4, #0]
   19b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19b72:	e7d4      	b.n	19b1e <rpc_at_event_handler+0x32>
   19b74:	6830      	ldr	r0, [r6, #0]
   19b76:	2800      	cmp	r0, #0
   19b78:	d0c8      	beq.n	19b0c <rpc_at_event_handler+0x20>
   19b7a:	f7ff f91c 	bl	18db6 <rpc_at_client_data_free>
   19b7e:	e7c5      	b.n	19b0c <rpc_at_event_handler+0x20>

00019b80 <packet_free_cb>:
   19b80:	b510      	push	{r4, lr}
   19b82:	4604      	mov	r4, r0
   19b84:	b118      	cbz	r0, 19b8e <packet_free_cb+0xe>
   19b86:	6800      	ldr	r0, [r0, #0]
   19b88:	b108      	cbz	r0, 19b8e <packet_free_cb+0xe>
   19b8a:	f7ff f9c0 	bl	18f0e <rpc_gnss_client_data_free>
   19b8e:	68a0      	ldr	r0, [r4, #8]
   19b90:	b118      	cbz	r0, 19b9a <packet_free_cb+0x1a>
   19b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19b96:	f7f6 bc6f 	b.w	10478 <nrf_modem_os_free>
   19b9a:	bd10      	pop	{r4, pc}

00019b9c <spaces_remove>:
   19b9c:	2200      	movs	r2, #0
   19b9e:	b510      	push	{r4, lr}
   19ba0:	1e44      	subs	r4, r0, #1
   19ba2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   19ba6:	1881      	adds	r1, r0, r2
   19ba8:	b90b      	cbnz	r3, 19bae <spaces_remove+0x12>
   19baa:	700b      	strb	r3, [r1, #0]
   19bac:	bd10      	pop	{r4, pc}
   19bae:	2b20      	cmp	r3, #32
   19bb0:	bf1c      	itt	ne
   19bb2:	700b      	strbne	r3, [r1, #0]
   19bb4:	3201      	addne	r2, #1
   19bb6:	e7f4      	b.n	19ba2 <spaces_remove+0x6>

00019bb8 <ok_rsp_parser>:
   19bb8:	2000      	movs	r0, #0
   19bba:	4770      	bx	lr

00019bbc <context_query_parser>:
   19bbc:	f06f 0004 	mvn.w	r0, #4
   19bc0:	4770      	bx	lr

00019bc2 <null_handler_init>:
   19bc2:	2000      	movs	r0, #0
   19bc4:	4770      	bx	lr

00019bc6 <null_handler_put>:
   19bc6:	b510      	push	{r4, lr}
   19bc8:	460c      	mov	r4, r1
   19bca:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   19bce:	4620      	mov	r0, r4
   19bd0:	4798      	blx	r3
   19bd2:	6860      	ldr	r0, [r4, #4]
   19bd4:	bd10      	pop	{r4, pc}

00019bd6 <null_handler_get>:
   19bd6:	f04f 30ff 	mov.w	r0, #4294967295
   19bda:	4770      	bx	lr

00019bdc <null_handler_available>:
   19bdc:	f04f 30ff 	mov.w	r0, #4294967295
   19be0:	4770      	bx	lr

00019be2 <null_handler_flush>:
   19be2:	2000      	movs	r0, #0
   19be4:	4770      	bx	lr

00019be6 <null_handler_free>:
   19be6:	4770      	bx	lr

00019be8 <stream_handler_free_packet>:
   19be8:	b530      	push	{r4, r5, lr}
   19bea:	4605      	mov	r5, r0
   19bec:	b085      	sub	sp, #20
   19bee:	68c0      	ldr	r0, [r0, #12]
   19bf0:	f000 faf7 	bl	1a1e2 <linked_list_pop>
   19bf4:	4604      	mov	r4, r0
   19bf6:	b170      	cbz	r0, 19c16 <stream_handler_free_packet+0x2e>
   19bf8:	6843      	ldr	r3, [r0, #4]
   19bfa:	9300      	str	r3, [sp, #0]
   19bfc:	6883      	ldr	r3, [r0, #8]
   19bfe:	9301      	str	r3, [sp, #4]
   19c00:	6903      	ldr	r3, [r0, #16]
   19c02:	9302      	str	r3, [sp, #8]
   19c04:	68c3      	ldr	r3, [r0, #12]
   19c06:	4668      	mov	r0, sp
   19c08:	9303      	str	r3, [sp, #12]
   19c0a:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   19c0e:	4798      	blx	r3
   19c10:	4620      	mov	r0, r4
   19c12:	f7f6 fc31 	bl	10478 <nrf_modem_os_free>
   19c16:	b005      	add	sp, #20
   19c18:	bd30      	pop	{r4, r5, pc}

00019c1a <stream_handler_init>:
   19c1a:	b510      	push	{r4, lr}
   19c1c:	4604      	mov	r4, r0
   19c1e:	200c      	movs	r0, #12
   19c20:	f7f6 fc1a 	bl	10458 <nrf_modem_os_alloc>
   19c24:	60e0      	str	r0, [r4, #12]
   19c26:	b128      	cbz	r0, 19c34 <stream_handler_init+0x1a>
   19c28:	2300      	movs	r3, #0
   19c2a:	6123      	str	r3, [r4, #16]
   19c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19c30:	f000 babb 	b.w	1a1aa <linked_list_init>
   19c34:	200c      	movs	r0, #12
   19c36:	bd10      	pop	{r4, pc}

00019c38 <stream_handler_put>:
   19c38:	b570      	push	{r4, r5, r6, lr}
   19c3a:	4606      	mov	r6, r0
   19c3c:	2014      	movs	r0, #20
   19c3e:	460d      	mov	r5, r1
   19c40:	f7f6 fc0a 	bl	10458 <nrf_modem_os_alloc>
   19c44:	4604      	mov	r4, r0
   19c46:	b178      	cbz	r0, 19c68 <stream_handler_put+0x30>
   19c48:	682b      	ldr	r3, [r5, #0]
   19c4a:	4601      	mov	r1, r0
   19c4c:	6043      	str	r3, [r0, #4]
   19c4e:	686b      	ldr	r3, [r5, #4]
   19c50:	6083      	str	r3, [r0, #8]
   19c52:	68eb      	ldr	r3, [r5, #12]
   19c54:	60c3      	str	r3, [r0, #12]
   19c56:	68ab      	ldr	r3, [r5, #8]
   19c58:	6103      	str	r3, [r0, #16]
   19c5a:	68f0      	ldr	r0, [r6, #12]
   19c5c:	f000 faae 	bl	1a1bc <linked_list_push>
   19c60:	b128      	cbz	r0, 19c6e <stream_handler_put+0x36>
   19c62:	4620      	mov	r0, r4
   19c64:	f7f6 fc08 	bl	10478 <nrf_modem_os_free>
   19c68:	f04f 30ff 	mov.w	r0, #4294967295
   19c6c:	e000      	b.n	19c70 <stream_handler_put+0x38>
   19c6e:	6868      	ldr	r0, [r5, #4]
   19c70:	bd70      	pop	{r4, r5, r6, pc}

00019c72 <stream_handler_get>:
   19c72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c76:	4606      	mov	r6, r0
   19c78:	b085      	sub	sp, #20
   19c7a:	68c0      	ldr	r0, [r0, #12]
   19c7c:	468a      	mov	sl, r1
   19c7e:	4617      	mov	r7, r2
   19c80:	f000 fab9 	bl	1a1f6 <linked_list_peek>
   19c84:	4604      	mov	r4, r0
   19c86:	2800      	cmp	r0, #0
   19c88:	d055      	beq.n	19d36 <stream_handler_get+0xc4>
   19c8a:	f8da 0008 	ldr.w	r0, [sl, #8]
   19c8e:	2800      	cmp	r0, #0
   19c90:	d049      	beq.n	19d26 <stream_handler_get+0xb4>
   19c92:	6921      	ldr	r1, [r4, #16]
   19c94:	2900      	cmp	r1, #0
   19c96:	d046      	beq.n	19d26 <stream_handler_get+0xb4>
   19c98:	68e2      	ldr	r2, [r4, #12]
   19c9a:	2a00      	cmp	r2, #0
   19c9c:	d043      	beq.n	19d26 <stream_handler_get+0xb4>
   19c9e:	f8da 500c 	ldr.w	r5, [sl, #12]
   19ca2:	42aa      	cmp	r2, r5
   19ca4:	bf28      	it	cs
   19ca6:	462a      	movcs	r2, r5
   19ca8:	f8ca 200c 	str.w	r2, [sl, #12]
   19cac:	f7fe f916 	bl	17edc <memcpy>
   19cb0:	2500      	movs	r5, #0
   19cb2:	f8da 3004 	ldr.w	r3, [sl, #4]
   19cb6:	6931      	ldr	r1, [r6, #16]
   19cb8:	9301      	str	r3, [sp, #4]
   19cba:	f8da 3000 	ldr.w	r3, [sl]
   19cbe:	9302      	str	r3, [sp, #8]
   19cc0:	f007 0320 	and.w	r3, r7, #32
   19cc4:	9303      	str	r3, [sp, #12]
   19cc6:	f007 0708 	and.w	r7, r7, #8
   19cca:	9b01      	ldr	r3, [sp, #4]
   19ccc:	42ab      	cmp	r3, r5
   19cce:	d924      	bls.n	19d1a <stream_handler_get+0xa8>
   19cd0:	68a2      	ldr	r2, [r4, #8]
   19cd2:	9b01      	ldr	r3, [sp, #4]
   19cd4:	eba2 0801 	sub.w	r8, r2, r1
   19cd8:	eba3 0b05 	sub.w	fp, r3, r5
   19cdc:	f8da 2000 	ldr.w	r2, [sl]
   19ce0:	45d8      	cmp	r8, fp
   19ce2:	46c1      	mov	r9, r8
   19ce4:	bf28      	it	cs
   19ce6:	46d9      	movcs	r9, fp
   19ce8:	b142      	cbz	r2, 19cfc <stream_handler_get+0x8a>
   19cea:	9b03      	ldr	r3, [sp, #12]
   19cec:	b933      	cbnz	r3, 19cfc <stream_handler_get+0x8a>
   19cee:	6860      	ldr	r0, [r4, #4]
   19cf0:	9b02      	ldr	r3, [sp, #8]
   19cf2:	4401      	add	r1, r0
   19cf4:	464a      	mov	r2, r9
   19cf6:	1958      	adds	r0, r3, r5
   19cf8:	f7fe f8f0 	bl	17edc <memcpy>
   19cfc:	4620      	mov	r0, r4
   19cfe:	f000 fa82 	bl	1a206 <linked_list_get_next>
   19d02:	4604      	mov	r4, r0
   19d04:	b92f      	cbnz	r7, 19d12 <stream_handler_get+0xa0>
   19d06:	45d8      	cmp	r8, fp
   19d08:	d811      	bhi.n	19d2e <stream_handler_get+0xbc>
   19d0a:	4630      	mov	r0, r6
   19d0c:	f7ff ff6c 	bl	19be8 <stream_handler_free_packet>
   19d10:	6137      	str	r7, [r6, #16]
   19d12:	2100      	movs	r1, #0
   19d14:	444d      	add	r5, r9
   19d16:	2c00      	cmp	r4, #0
   19d18:	d1d7      	bne.n	19cca <stream_handler_get+0x58>
   19d1a:	4628      	mov	r0, r5
   19d1c:	f8ca 5004 	str.w	r5, [sl, #4]
   19d20:	b005      	add	sp, #20
   19d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d26:	2200      	movs	r2, #0
   19d28:	f8ca 200c 	str.w	r2, [sl, #12]
   19d2c:	e7c0      	b.n	19cb0 <stream_handler_get+0x3e>
   19d2e:	6932      	ldr	r2, [r6, #16]
   19d30:	444a      	add	r2, r9
   19d32:	6132      	str	r2, [r6, #16]
   19d34:	e7ed      	b.n	19d12 <stream_handler_get+0xa0>
   19d36:	f04f 30ff 	mov.w	r0, #4294967295
   19d3a:	e7f1      	b.n	19d20 <stream_handler_get+0xae>

00019d3c <stream_handler_available>:
   19d3c:	b510      	push	{r4, lr}
   19d3e:	4604      	mov	r4, r0
   19d40:	68c0      	ldr	r0, [r0, #12]
   19d42:	f000 fa58 	bl	1a1f6 <linked_list_peek>
   19d46:	b150      	cbz	r0, 19d5e <stream_handler_available+0x22>
   19d48:	6924      	ldr	r4, [r4, #16]
   19d4a:	4264      	negs	r4, r4
   19d4c:	6883      	ldr	r3, [r0, #8]
   19d4e:	441c      	add	r4, r3
   19d50:	f000 fa59 	bl	1a206 <linked_list_get_next>
   19d54:	2800      	cmp	r0, #0
   19d56:	d1f9      	bne.n	19d4c <stream_handler_available+0x10>
   19d58:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   19d5c:	bd10      	pop	{r4, pc}
   19d5e:	f04f 30ff 	mov.w	r0, #4294967295
   19d62:	e7fb      	b.n	19d5c <stream_handler_available+0x20>

00019d64 <stream_handler_flush>:
   19d64:	68c3      	ldr	r3, [r0, #12]
   19d66:	b510      	push	{r4, lr}
   19d68:	4604      	mov	r4, r0
   19d6a:	b923      	cbnz	r3, 19d76 <stream_handler_flush+0x12>
   19d6c:	2016      	movs	r0, #22
   19d6e:	e007      	b.n	19d80 <stream_handler_flush+0x1c>
   19d70:	4620      	mov	r0, r4
   19d72:	f7ff ff39 	bl	19be8 <stream_handler_free_packet>
   19d76:	68e0      	ldr	r0, [r4, #12]
   19d78:	f000 fa43 	bl	1a202 <linked_list_size_get>
   19d7c:	2800      	cmp	r0, #0
   19d7e:	d1f7      	bne.n	19d70 <stream_handler_flush+0xc>
   19d80:	bd10      	pop	{r4, pc}

00019d82 <stream_handler_free>:
   19d82:	68c3      	ldr	r3, [r0, #12]
   19d84:	b510      	push	{r4, lr}
   19d86:	4604      	mov	r4, r0
   19d88:	b133      	cbz	r3, 19d98 <stream_handler_free+0x16>
   19d8a:	f7ff ffeb 	bl	19d64 <stream_handler_flush>
   19d8e:	68e0      	ldr	r0, [r4, #12]
   19d90:	f7f6 fb72 	bl	10478 <nrf_modem_os_free>
   19d94:	2300      	movs	r3, #0
   19d96:	60e3      	str	r3, [r4, #12]
   19d98:	bd10      	pop	{r4, pc}

00019d9a <datagram_handler_free_packet>:
   19d9a:	b530      	push	{r4, r5, lr}
   19d9c:	4605      	mov	r5, r0
   19d9e:	b085      	sub	sp, #20
   19da0:	68c0      	ldr	r0, [r0, #12]
   19da2:	f000 fa1e 	bl	1a1e2 <linked_list_pop>
   19da6:	4604      	mov	r4, r0
   19da8:	b170      	cbz	r0, 19dc8 <datagram_handler_free_packet+0x2e>
   19daa:	6843      	ldr	r3, [r0, #4]
   19dac:	9300      	str	r3, [sp, #0]
   19dae:	6883      	ldr	r3, [r0, #8]
   19db0:	9301      	str	r3, [sp, #4]
   19db2:	6903      	ldr	r3, [r0, #16]
   19db4:	9302      	str	r3, [sp, #8]
   19db6:	68c3      	ldr	r3, [r0, #12]
   19db8:	4668      	mov	r0, sp
   19dba:	9303      	str	r3, [sp, #12]
   19dbc:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   19dc0:	4798      	blx	r3
   19dc2:	4620      	mov	r0, r4
   19dc4:	f7f6 fb58 	bl	10478 <nrf_modem_os_free>
   19dc8:	b005      	add	sp, #20
   19dca:	bd30      	pop	{r4, r5, pc}

00019dcc <datagram_handler_init>:
   19dcc:	b510      	push	{r4, lr}
   19dce:	4604      	mov	r4, r0
   19dd0:	200c      	movs	r0, #12
   19dd2:	f7f6 fb41 	bl	10458 <nrf_modem_os_alloc>
   19dd6:	60e0      	str	r0, [r4, #12]
   19dd8:	b118      	cbz	r0, 19de2 <datagram_handler_init+0x16>
   19dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19dde:	f000 b9e4 	b.w	1a1aa <linked_list_init>
   19de2:	200c      	movs	r0, #12
   19de4:	bd10      	pop	{r4, pc}

00019de6 <datagram_handler_put>:
   19de6:	b570      	push	{r4, r5, r6, lr}
   19de8:	4606      	mov	r6, r0
   19dea:	2014      	movs	r0, #20
   19dec:	460d      	mov	r5, r1
   19dee:	f7f6 fb33 	bl	10458 <nrf_modem_os_alloc>
   19df2:	4604      	mov	r4, r0
   19df4:	b178      	cbz	r0, 19e16 <datagram_handler_put+0x30>
   19df6:	682b      	ldr	r3, [r5, #0]
   19df8:	4601      	mov	r1, r0
   19dfa:	6043      	str	r3, [r0, #4]
   19dfc:	686b      	ldr	r3, [r5, #4]
   19dfe:	6083      	str	r3, [r0, #8]
   19e00:	68eb      	ldr	r3, [r5, #12]
   19e02:	60c3      	str	r3, [r0, #12]
   19e04:	68ab      	ldr	r3, [r5, #8]
   19e06:	6103      	str	r3, [r0, #16]
   19e08:	68f0      	ldr	r0, [r6, #12]
   19e0a:	f000 f9d7 	bl	1a1bc <linked_list_push>
   19e0e:	b128      	cbz	r0, 19e1c <datagram_handler_put+0x36>
   19e10:	4620      	mov	r0, r4
   19e12:	f7f6 fb31 	bl	10478 <nrf_modem_os_free>
   19e16:	f04f 30ff 	mov.w	r0, #4294967295
   19e1a:	e000      	b.n	19e1e <datagram_handler_put+0x38>
   19e1c:	6868      	ldr	r0, [r5, #4]
   19e1e:	bd70      	pop	{r4, r5, r6, pc}

00019e20 <datagram_handler_get>:
   19e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e22:	4607      	mov	r7, r0
   19e24:	68c0      	ldr	r0, [r0, #12]
   19e26:	460c      	mov	r4, r1
   19e28:	4616      	mov	r6, r2
   19e2a:	f000 f9e4 	bl	1a1f6 <linked_list_peek>
   19e2e:	4605      	mov	r5, r0
   19e30:	b328      	cbz	r0, 19e7e <datagram_handler_get+0x5e>
   19e32:	6882      	ldr	r2, [r0, #8]
   19e34:	6863      	ldr	r3, [r4, #4]
   19e36:	6820      	ldr	r0, [r4, #0]
   19e38:	429a      	cmp	r2, r3
   19e3a:	bf28      	it	cs
   19e3c:	461a      	movcs	r2, r3
   19e3e:	6062      	str	r2, [r4, #4]
   19e40:	b110      	cbz	r0, 19e48 <datagram_handler_get+0x28>
   19e42:	6869      	ldr	r1, [r5, #4]
   19e44:	f7fe f84a 	bl	17edc <memcpy>
   19e48:	68a0      	ldr	r0, [r4, #8]
   19e4a:	b1a8      	cbz	r0, 19e78 <datagram_handler_get+0x58>
   19e4c:	6929      	ldr	r1, [r5, #16]
   19e4e:	b199      	cbz	r1, 19e78 <datagram_handler_get+0x58>
   19e50:	68eb      	ldr	r3, [r5, #12]
   19e52:	b18b      	cbz	r3, 19e78 <datagram_handler_get+0x58>
   19e54:	68e2      	ldr	r2, [r4, #12]
   19e56:	429a      	cmp	r2, r3
   19e58:	bf28      	it	cs
   19e5a:	461a      	movcs	r2, r3
   19e5c:	60e2      	str	r2, [r4, #12]
   19e5e:	f7fe f83d 	bl	17edc <memcpy>
   19e62:	0732      	lsls	r2, r6, #28
   19e64:	68ad      	ldr	r5, [r5, #8]
   19e66:	d402      	bmi.n	19e6e <datagram_handler_get+0x4e>
   19e68:	4638      	mov	r0, r7
   19e6a:	f7ff ff96 	bl	19d9a <datagram_handler_free_packet>
   19e6e:	06b3      	lsls	r3, r6, #26
   19e70:	bf4c      	ite	mi
   19e72:	4628      	movmi	r0, r5
   19e74:	6860      	ldrpl	r0, [r4, #4]
   19e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19e78:	2300      	movs	r3, #0
   19e7a:	60e3      	str	r3, [r4, #12]
   19e7c:	e7f1      	b.n	19e62 <datagram_handler_get+0x42>
   19e7e:	f04f 30ff 	mov.w	r0, #4294967295
   19e82:	e7f8      	b.n	19e76 <datagram_handler_get+0x56>

00019e84 <datagram_handler_available>:
   19e84:	b508      	push	{r3, lr}
   19e86:	68c0      	ldr	r0, [r0, #12]
   19e88:	f000 f9b5 	bl	1a1f6 <linked_list_peek>
   19e8c:	b108      	cbz	r0, 19e92 <datagram_handler_available+0xe>
   19e8e:	6880      	ldr	r0, [r0, #8]
   19e90:	bd08      	pop	{r3, pc}
   19e92:	f04f 30ff 	mov.w	r0, #4294967295
   19e96:	e7fb      	b.n	19e90 <datagram_handler_available+0xc>

00019e98 <datagram_handler_flush>:
   19e98:	68c3      	ldr	r3, [r0, #12]
   19e9a:	b510      	push	{r4, lr}
   19e9c:	4604      	mov	r4, r0
   19e9e:	b923      	cbnz	r3, 19eaa <datagram_handler_flush+0x12>
   19ea0:	2016      	movs	r0, #22
   19ea2:	e007      	b.n	19eb4 <datagram_handler_flush+0x1c>
   19ea4:	4620      	mov	r0, r4
   19ea6:	f7ff ff78 	bl	19d9a <datagram_handler_free_packet>
   19eaa:	68e0      	ldr	r0, [r4, #12]
   19eac:	f000 f9a9 	bl	1a202 <linked_list_size_get>
   19eb0:	2800      	cmp	r0, #0
   19eb2:	d1f7      	bne.n	19ea4 <datagram_handler_flush+0xc>
   19eb4:	bd10      	pop	{r4, pc}

00019eb6 <datagram_handler_free>:
   19eb6:	68c3      	ldr	r3, [r0, #12]
   19eb8:	b510      	push	{r4, lr}
   19eba:	4604      	mov	r4, r0
   19ebc:	b133      	cbz	r3, 19ecc <datagram_handler_free+0x16>
   19ebe:	f7ff ffeb 	bl	19e98 <datagram_handler_flush>
   19ec2:	68e0      	ldr	r0, [r4, #12]
   19ec4:	f7f6 fad8 	bl	10478 <nrf_modem_os_free>
   19ec8:	2300      	movs	r3, #0
   19eca:	60e3      	str	r3, [r4, #12]
   19ecc:	bd10      	pop	{r4, pc}

00019ece <packet_handler_delete>:
   19ece:	b510      	push	{r4, lr}
   19ed0:	4604      	mov	r4, r0
   19ed2:	6803      	ldr	r3, [r0, #0]
   19ed4:	691b      	ldr	r3, [r3, #16]
   19ed6:	4798      	blx	r3
   19ed8:	6823      	ldr	r3, [r4, #0]
   19eda:	4620      	mov	r0, r4
   19edc:	695b      	ldr	r3, [r3, #20]
   19ede:	4798      	blx	r3
   19ee0:	4620      	mov	r0, r4
   19ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19ee6:	f7f6 bac7 	b.w	10478 <nrf_modem_os_free>

00019eea <nrf_modem_recoverable_error_handler>:
   19eea:	4770      	bx	lr

00019eec <nrf_modem_platform_error_handler>:
   19eec:	b508      	push	{r3, lr}
   19eee:	f7ff fffc 	bl	19eea <nrf_modem_recoverable_error_handler>
   19ef2:	bd08      	pop	{r3, pc}

00019ef4 <unimplemented_method>:
   19ef4:	b40f      	push	{r0, r1, r2, r3}
   19ef6:	b508      	push	{r3, lr}
   19ef8:	202d      	movs	r0, #45	; 0x2d
   19efa:	f7f6 f92d 	bl	10158 <nrf_modem_os_errno_set>
   19efe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19f02:	f04f 30ff 	mov.w	r0, #4294967295
   19f06:	b004      	add	sp, #16
   19f08:	4770      	bx	lr

00019f0a <rpc_transport_ipc_fault_handler>:
   19f0a:	f7ff bfef 	b.w	19eec <nrf_modem_platform_error_handler>

00019f0e <nrf_modem_platform_init>:
   19f0e:	b513      	push	{r0, r1, r4, lr}
   19f10:	4604      	mov	r4, r0
   19f12:	f7f6 facd 	bl	104b0 <nrf_modem_os_init>
   19f16:	6a23      	ldr	r3, [r4, #32]
   19f18:	4668      	mov	r0, sp
   19f1a:	9400      	str	r4, [sp, #0]
   19f1c:	f88d 3004 	strb.w	r3, [sp, #4]
   19f20:	f7f8 f9c2 	bl	122a8 <rpc_transport_ipc_init>
   19f24:	b920      	cbnz	r0, 19f30 <nrf_modem_platform_init+0x22>
   19f26:	f7f8 fb1d 	bl	12564 <interface_init>
   19f2a:	b118      	cbz	r0, 19f34 <nrf_modem_platform_init+0x26>
   19f2c:	f04f 30ff 	mov.w	r0, #4294967295
   19f30:	b002      	add	sp, #8
   19f32:	bd10      	pop	{r4, pc}
   19f34:	f7f9 ffa0 	bl	13e78 <at_interface_init>
   19f38:	2800      	cmp	r0, #0
   19f3a:	d1f7      	bne.n	19f2c <nrf_modem_platform_init+0x1e>
   19f3c:	f7f8 fc64 	bl	12808 <ip_interface_init>
   19f40:	2800      	cmp	r0, #0
   19f42:	d1f3      	bne.n	19f2c <nrf_modem_platform_init+0x1e>
   19f44:	f7f9 fc10 	bl	13768 <tls_interface_init>
   19f48:	2800      	cmp	r0, #0
   19f4a:	d1ef      	bne.n	19f2c <nrf_modem_platform_init+0x1e>
   19f4c:	f7fa f848 	bl	13fe0 <mfu_interface_init>
   19f50:	2800      	cmp	r0, #0
   19f52:	d1eb      	bne.n	19f2c <nrf_modem_platform_init+0x1e>
   19f54:	f7fa ff1c 	bl	14d90 <pdn_interface_init>
   19f58:	2800      	cmp	r0, #0
   19f5a:	d1e7      	bne.n	19f2c <nrf_modem_platform_init+0x1e>
   19f5c:	f7fa fd98 	bl	14a90 <gnss_interface_init>
   19f60:	3800      	subs	r0, #0
   19f62:	bf18      	it	ne
   19f64:	2001      	movne	r0, #1
   19f66:	4240      	negs	r0, r0
   19f68:	e7e2      	b.n	19f30 <nrf_modem_platform_init+0x22>

00019f6a <internal_poll>:
   19f6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19f6e:	2600      	movs	r6, #0
   19f70:	4688      	mov	r8, r1
   19f72:	4605      	mov	r5, r0
   19f74:	4637      	mov	r7, r6
   19f76:	4546      	cmp	r6, r8
   19f78:	d103      	bne.n	19f82 <internal_poll+0x18>
   19f7a:	4638      	mov	r0, r7
   19f7c:	b002      	add	sp, #8
   19f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19f82:	88ab      	ldrh	r3, [r5, #4]
   19f84:	6828      	ldr	r0, [r5, #0]
   19f86:	f003 0303 	and.w	r3, r3, #3
   19f8a:	a901      	add	r1, sp, #4
   19f8c:	f043 041c 	orr.w	r4, r3, #28
   19f90:	f7ff f8fa 	bl	19188 <interface_socket_event_get>
   19f94:	9b01      	ldr	r3, [sp, #4]
   19f96:	4023      	ands	r3, r4
   19f98:	80eb      	strh	r3, [r5, #6]
   19f9a:	b103      	cbz	r3, 19f9e <internal_poll+0x34>
   19f9c:	3701      	adds	r7, #1
   19f9e:	3601      	adds	r6, #1
   19fa0:	3508      	adds	r5, #8
   19fa2:	e7e8      	b.n	19f76 <internal_poll+0xc>

00019fa4 <nrf_modem_platform_getaddrinfo>:
   19fa4:	f7f9 b84c 	b.w	13040 <ip_interface_getaddrinfo>

00019fa8 <nrf_modem_platform_freeaddrinfo>:
   19fa8:	f7f9 b91e 	b.w	131e8 <ip_interface_freeaddrinfo>

00019fac <nrf_modem_platform_poll>:
   19fac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19fae:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   19fb2:	460e      	mov	r6, r1
   19fb4:	4605      	mov	r5, r0
   19fb6:	9201      	str	r2, [sp, #4]
   19fb8:	b110      	cbz	r0, 19fc0 <nrf_modem_platform_poll+0x14>
   19fba:	1e4b      	subs	r3, r1, #1
   19fbc:	2b08      	cmp	r3, #8
   19fbe:	d906      	bls.n	19fce <nrf_modem_platform_poll+0x22>
   19fc0:	2016      	movs	r0, #22
   19fc2:	f7f6 f8c9 	bl	10158 <nrf_modem_os_errno_set>
   19fc6:	f04f 30ff 	mov.w	r0, #4294967295
   19fca:	b002      	add	sp, #8
   19fcc:	bd70      	pop	{r4, r5, r6, pc}
   19fce:	f7ff ffcc 	bl	19f6a <internal_poll>
   19fd2:	2400      	movs	r4, #0
   19fd4:	2800      	cmp	r0, #0
   19fd6:	d1f8      	bne.n	19fca <nrf_modem_platform_poll+0x1e>
   19fd8:	2c00      	cmp	r4, #0
   19fda:	d1f6      	bne.n	19fca <nrf_modem_platform_poll+0x1e>
   19fdc:	4628      	mov	r0, r5
   19fde:	a901      	add	r1, sp, #4
   19fe0:	f7f6 f802 	bl	ffe8 <nrf_modem_os_timedwait>
   19fe4:	4604      	mov	r4, r0
   19fe6:	b118      	cbz	r0, 19ff0 <nrf_modem_platform_poll+0x44>
   19fe8:	283c      	cmp	r0, #60	; 0x3c
   19fea:	d001      	beq.n	19ff0 <nrf_modem_platform_poll+0x44>
   19fec:	2023      	movs	r0, #35	; 0x23
   19fee:	e7e8      	b.n	19fc2 <nrf_modem_platform_poll+0x16>
   19ff0:	4631      	mov	r1, r6
   19ff2:	4628      	mov	r0, r5
   19ff4:	f7ff ffb9 	bl	19f6a <internal_poll>
   19ff8:	e7ec      	b.n	19fd4 <nrf_modem_platform_poll+0x28>

00019ffa <nrf_socket>:
   19ffa:	b570      	push	{r4, r5, r6, lr}
   19ffc:	4604      	mov	r4, r0
   19ffe:	460d      	mov	r5, r1
   1a000:	4616      	mov	r6, r2
   1a002:	f7fb fb07 	bl	15614 <nrf_modem_platform_af_method_table_get>
   1a006:	b130      	cbz	r0, 1a016 <nrf_socket+0x1c>
   1a008:	4632      	mov	r2, r6
   1a00a:	4629      	mov	r1, r5
   1a00c:	6803      	ldr	r3, [r0, #0]
   1a00e:	4620      	mov	r0, r4
   1a010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a014:	4718      	bx	r3
   1a016:	f04f 30ff 	mov.w	r0, #4294967295
   1a01a:	bd70      	pop	{r4, r5, r6, pc}

0001a01c <nrf_close>:
   1a01c:	b510      	push	{r4, lr}
   1a01e:	4604      	mov	r4, r0
   1a020:	f7fb fb4a 	bl	156b8 <nrf_modem_platform_fd_method_table_get>
   1a024:	b120      	cbz	r0, 1a030 <nrf_close+0x14>
   1a026:	6843      	ldr	r3, [r0, #4]
   1a028:	4620      	mov	r0, r4
   1a02a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a02e:	4718      	bx	r3
   1a030:	f04f 30ff 	mov.w	r0, #4294967295
   1a034:	bd10      	pop	{r4, pc}

0001a036 <nrf_sendto>:
   1a036:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1a038:	4604      	mov	r4, r0
   1a03a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   1a03e:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1a042:	9301      	str	r3, [sp, #4]
   1a044:	f7fb fb38 	bl	156b8 <nrf_modem_platform_fd_method_table_get>
   1a048:	b158      	cbz	r0, 1a062 <nrf_sendto+0x2c>
   1a04a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   1a04e:	e9cd 5608 	strd	r5, r6, [sp, #32]
   1a052:	6885      	ldr	r5, [r0, #8]
   1a054:	4620      	mov	r0, r4
   1a056:	46ac      	mov	ip, r5
   1a058:	9903      	ldr	r1, [sp, #12]
   1a05a:	b004      	add	sp, #16
   1a05c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a060:	4760      	bx	ip
   1a062:	f04f 30ff 	mov.w	r0, #4294967295
   1a066:	b004      	add	sp, #16
   1a068:	bd70      	pop	{r4, r5, r6, pc}

0001a06a <nrf_recvfrom>:
   1a06a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1a06c:	4604      	mov	r4, r0
   1a06e:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   1a072:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1a076:	9301      	str	r3, [sp, #4]
   1a078:	f7fb fb1e 	bl	156b8 <nrf_modem_platform_fd_method_table_get>
   1a07c:	b158      	cbz	r0, 1a096 <nrf_recvfrom+0x2c>
   1a07e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   1a082:	e9cd 5608 	strd	r5, r6, [sp, #32]
   1a086:	68c5      	ldr	r5, [r0, #12]
   1a088:	4620      	mov	r0, r4
   1a08a:	46ac      	mov	ip, r5
   1a08c:	9903      	ldr	r1, [sp, #12]
   1a08e:	b004      	add	sp, #16
   1a090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a094:	4760      	bx	ip
   1a096:	f04f 30ff 	mov.w	r0, #4294967295
   1a09a:	b004      	add	sp, #16
   1a09c:	bd70      	pop	{r4, r5, r6, pc}

0001a09e <nrf_connect>:
   1a09e:	b513      	push	{r0, r1, r4, lr}
   1a0a0:	4604      	mov	r4, r0
   1a0a2:	e9cd 2100 	strd	r2, r1, [sp]
   1a0a6:	f7fb fb07 	bl	156b8 <nrf_modem_platform_fd_method_table_get>
   1a0aa:	b138      	cbz	r0, 1a0bc <nrf_connect+0x1e>
   1a0ac:	e9dd 2100 	ldrd	r2, r1, [sp]
   1a0b0:	6943      	ldr	r3, [r0, #20]
   1a0b2:	4620      	mov	r0, r4
   1a0b4:	b002      	add	sp, #8
   1a0b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a0ba:	4718      	bx	r3
   1a0bc:	f04f 30ff 	mov.w	r0, #4294967295
   1a0c0:	b002      	add	sp, #8
   1a0c2:	bd10      	pop	{r4, pc}

0001a0c4 <nrf_listen>:
   1a0c4:	b513      	push	{r0, r1, r4, lr}
   1a0c6:	4604      	mov	r4, r0
   1a0c8:	9101      	str	r1, [sp, #4]
   1a0ca:	f7fb faf5 	bl	156b8 <nrf_modem_platform_fd_method_table_get>
   1a0ce:	b130      	cbz	r0, 1a0de <nrf_listen+0x1a>
   1a0d0:	6983      	ldr	r3, [r0, #24]
   1a0d2:	4620      	mov	r0, r4
   1a0d4:	9901      	ldr	r1, [sp, #4]
   1a0d6:	b002      	add	sp, #8
   1a0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a0dc:	4718      	bx	r3
   1a0de:	f04f 30ff 	mov.w	r0, #4294967295
   1a0e2:	b002      	add	sp, #8
   1a0e4:	bd10      	pop	{r4, pc}

0001a0e6 <nrf_accept>:
   1a0e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a0e8:	4604      	mov	r4, r0
   1a0ea:	e9cd 2100 	strd	r2, r1, [sp]
   1a0ee:	f7fb fae3 	bl	156b8 <nrf_modem_platform_fd_method_table_get>
   1a0f2:	b148      	cbz	r0, 1a108 <nrf_accept+0x22>
   1a0f4:	e9dd 2100 	ldrd	r2, r1, [sp]
   1a0f8:	69c5      	ldr	r5, [r0, #28]
   1a0fa:	2300      	movs	r3, #0
   1a0fc:	4620      	mov	r0, r4
   1a0fe:	46ac      	mov	ip, r5
   1a100:	b003      	add	sp, #12
   1a102:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1a106:	4760      	bx	ip
   1a108:	f04f 30ff 	mov.w	r0, #4294967295
   1a10c:	b003      	add	sp, #12
   1a10e:	bd30      	pop	{r4, r5, pc}

0001a110 <nrf_bind>:
   1a110:	b513      	push	{r0, r1, r4, lr}
   1a112:	4604      	mov	r4, r0
   1a114:	e9cd 2100 	strd	r2, r1, [sp]
   1a118:	f7fb face 	bl	156b8 <nrf_modem_platform_fd_method_table_get>
   1a11c:	b138      	cbz	r0, 1a12e <nrf_bind+0x1e>
   1a11e:	e9dd 2100 	ldrd	r2, r1, [sp]
   1a122:	6903      	ldr	r3, [r0, #16]
   1a124:	4620      	mov	r0, r4
   1a126:	b002      	add	sp, #8
   1a128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a12c:	4718      	bx	r3
   1a12e:	f04f 30ff 	mov.w	r0, #4294967295
   1a132:	b002      	add	sp, #8
   1a134:	bd10      	pop	{r4, pc}

0001a136 <nrf_setsockopt>:
   1a136:	b530      	push	{r4, r5, lr}
   1a138:	b085      	sub	sp, #20
   1a13a:	4604      	mov	r4, r0
   1a13c:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1a140:	9d08      	ldr	r5, [sp, #32]
   1a142:	9301      	str	r3, [sp, #4]
   1a144:	f7fb fab8 	bl	156b8 <nrf_modem_platform_fd_method_table_get>
   1a148:	b150      	cbz	r0, 1a160 <nrf_setsockopt+0x2a>
   1a14a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   1a14e:	9508      	str	r5, [sp, #32]
   1a150:	6a05      	ldr	r5, [r0, #32]
   1a152:	4620      	mov	r0, r4
   1a154:	46ac      	mov	ip, r5
   1a156:	9903      	ldr	r1, [sp, #12]
   1a158:	b005      	add	sp, #20
   1a15a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1a15e:	4760      	bx	ip
   1a160:	f04f 30ff 	mov.w	r0, #4294967295
   1a164:	b005      	add	sp, #20
   1a166:	bd30      	pop	{r4, r5, pc}

0001a168 <nrf_getsockopt>:
   1a168:	b530      	push	{r4, r5, lr}
   1a16a:	b085      	sub	sp, #20
   1a16c:	4604      	mov	r4, r0
   1a16e:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1a172:	9d08      	ldr	r5, [sp, #32]
   1a174:	9301      	str	r3, [sp, #4]
   1a176:	f7fb fa9f 	bl	156b8 <nrf_modem_platform_fd_method_table_get>
   1a17a:	b150      	cbz	r0, 1a192 <nrf_getsockopt+0x2a>
   1a17c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   1a180:	9508      	str	r5, [sp, #32]
   1a182:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1a184:	4620      	mov	r0, r4
   1a186:	46ac      	mov	ip, r5
   1a188:	9903      	ldr	r1, [sp, #12]
   1a18a:	b005      	add	sp, #20
   1a18c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1a190:	4760      	bx	ip
   1a192:	f04f 30ff 	mov.w	r0, #4294967295
   1a196:	b005      	add	sp, #20
   1a198:	bd30      	pop	{r4, r5, pc}

0001a19a <nrf_getaddrinfo>:
   1a19a:	f7ff bf03 	b.w	19fa4 <nrf_modem_platform_getaddrinfo>

0001a19e <nrf_freeaddrinfo>:
   1a19e:	f7ff bf03 	b.w	19fa8 <nrf_modem_platform_freeaddrinfo>

0001a1a2 <nrf_poll>:
   1a1a2:	f7ff bf03 	b.w	19fac <nrf_modem_platform_poll>

0001a1a6 <nrf_fcntl>:
   1a1a6:	f7fb bab7 	b.w	15718 <nrf_modem_platform_fcntl>

0001a1aa <linked_list_init>:
   1a1aa:	b128      	cbz	r0, 1a1b8 <linked_list_init+0xe>
   1a1ac:	2300      	movs	r3, #0
   1a1ae:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1a1b2:	6003      	str	r3, [r0, #0]
   1a1b4:	4618      	mov	r0, r3
   1a1b6:	4770      	bx	lr
   1a1b8:	2016      	movs	r0, #22
   1a1ba:	4770      	bx	lr

0001a1bc <linked_list_push>:
   1a1bc:	6803      	ldr	r3, [r0, #0]
   1a1be:	3301      	adds	r3, #1
   1a1c0:	d00d      	beq.n	1a1de <linked_list_push+0x22>
   1a1c2:	2300      	movs	r3, #0
   1a1c4:	600b      	str	r3, [r1, #0]
   1a1c6:	6803      	ldr	r3, [r0, #0]
   1a1c8:	b933      	cbnz	r3, 1a1d8 <linked_list_push+0x1c>
   1a1ca:	6041      	str	r1, [r0, #4]
   1a1cc:	6803      	ldr	r3, [r0, #0]
   1a1ce:	6081      	str	r1, [r0, #8]
   1a1d0:	3301      	adds	r3, #1
   1a1d2:	6003      	str	r3, [r0, #0]
   1a1d4:	2000      	movs	r0, #0
   1a1d6:	4770      	bx	lr
   1a1d8:	6883      	ldr	r3, [r0, #8]
   1a1da:	6019      	str	r1, [r3, #0]
   1a1dc:	e7f6      	b.n	1a1cc <linked_list_push+0x10>
   1a1de:	200c      	movs	r0, #12
   1a1e0:	4770      	bx	lr

0001a1e2 <linked_list_pop>:
   1a1e2:	4603      	mov	r3, r0
   1a1e4:	6800      	ldr	r0, [r0, #0]
   1a1e6:	b128      	cbz	r0, 1a1f4 <linked_list_pop+0x12>
   1a1e8:	6858      	ldr	r0, [r3, #4]
   1a1ea:	6802      	ldr	r2, [r0, #0]
   1a1ec:	605a      	str	r2, [r3, #4]
   1a1ee:	681a      	ldr	r2, [r3, #0]
   1a1f0:	3a01      	subs	r2, #1
   1a1f2:	601a      	str	r2, [r3, #0]
   1a1f4:	4770      	bx	lr

0001a1f6 <linked_list_peek>:
   1a1f6:	6803      	ldr	r3, [r0, #0]
   1a1f8:	b10b      	cbz	r3, 1a1fe <linked_list_peek+0x8>
   1a1fa:	6840      	ldr	r0, [r0, #4]
   1a1fc:	4770      	bx	lr
   1a1fe:	4618      	mov	r0, r3
   1a200:	4770      	bx	lr

0001a202 <linked_list_size_get>:
   1a202:	6800      	ldr	r0, [r0, #0]
   1a204:	4770      	bx	lr

0001a206 <linked_list_get_next>:
   1a206:	6800      	ldr	r0, [r0, #0]
   1a208:	4770      	bx	lr

0001a20a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1a20a:	4700      	bx	r0

0001a20c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1a20c:	f000 ba16 	b.w	1a63c <z_impl_k_busy_wait>

0001a210 <nrfx_clock_enable>:
{
   1a210:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1a212:	2005      	movs	r0, #5
   1a214:	f7f4 fdf4 	bl	ee00 <arch_irq_is_enabled>
   1a218:	b920      	cbnz	r0, 1a224 <nrfx_clock_enable+0x14>
}
   1a21a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1a21e:	2005      	movs	r0, #5
   1a220:	f7f4 bdde 	b.w	ede0 <arch_irq_enable>
   1a224:	bd08      	pop	{r3, pc}

0001a226 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1a226:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a228:	4605      	mov	r5, r0
   1a22a:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   1a22c:	f04f 0320 	mov.w	r3, #32
   1a230:	f3ef 8611 	mrs	r6, BASEPRI
   1a234:	f383 8811 	msr	BASEPRI, r3
   1a238:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1a23c:	f7fc faf6 	bl	1682c <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1a240:	9901      	ldr	r1, [sp, #4]
   1a242:	4604      	mov	r4, r0
   1a244:	4628      	mov	r0, r5
   1a246:	f7fe fcad 	bl	18ba4 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1a24a:	f386 8811 	msr	BASEPRI, r6
   1a24e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1a252:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1a254:	b002      	add	sp, #8
   1a256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a25a:	f7f5 b849 	b.w	f2f0 <z_impl_k_thread_abort>

0001a25e <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   1a25e:	f7fd bc63 	b.w	17b28 <z_clock_idle_exit>

0001a262 <k_heap_init>:
{
   1a262:	b410      	push	{r4}
   1a264:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1a268:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1a26c:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   1a270:	f7fd ba27 	b.w	176c2 <sys_heap_init>

0001a274 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a278:	b087      	sub	sp, #28
   1a27a:	4604      	mov	r4, r0
   1a27c:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   1a27e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   1a282:	4617      	mov	r7, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   1a284:	f000 fa81 	bl	1a78a <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1a288:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   1a28c:	4605      	mov	r5, r0
   1a28e:	4688      	mov	r8, r1
	__asm__ volatile(
   1a290:	f04f 0320 	mov.w	r3, #32
   1a294:	f3ef 8b11 	mrs	fp, BASEPRI
   1a298:	f383 8811 	msr	BASEPRI, r3
   1a29c:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1a2a0:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1a2a4:	463a      	mov	r2, r7
   1a2a6:	4631      	mov	r1, r6
   1a2a8:	4620      	mov	r0, r4
   1a2aa:	f7fd f9ad 	bl	17608 <sys_heap_aligned_alloc>
   1a2ae:	9005      	str	r0, [sp, #20]
		now = z_tick_get();
   1a2b0:	f7fc fdce 	bl	16e50 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   1a2b4:	9b05      	ldr	r3, [sp, #20]
   1a2b6:	b13b      	cbz	r3, 1a2c8 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1a2b8:	f38b 8811 	msr	BASEPRI, fp
   1a2bc:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1a2c0:	4618      	mov	r0, r3
   1a2c2:	b007      	add	sp, #28
   1a2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   1a2c8:	1a2a      	subs	r2, r5, r0
   1a2ca:	9202      	str	r2, [sp, #8]
   1a2cc:	eb68 0201 	sbc.w	r2, r8, r1
   1a2d0:	9203      	str	r2, [sp, #12]
   1a2d2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1a2d6:	2901      	cmp	r1, #1
   1a2d8:	f172 0200 	sbcs.w	r2, r2, #0
   1a2dc:	dbec      	blt.n	1a2b8 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1a2de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a2e2:	4659      	mov	r1, fp
   1a2e4:	e9cd 2300 	strd	r2, r3, [sp]
   1a2e8:	4648      	mov	r0, r9
   1a2ea:	4652      	mov	r2, sl
   1a2ec:	f7fc f990 	bl	16610 <z_pend_curr>
	__asm__ volatile(
   1a2f0:	f04f 0320 	mov.w	r3, #32
   1a2f4:	f3ef 8b11 	mrs	fp, BASEPRI
   1a2f8:	f383 8811 	msr	BASEPRI, r3
   1a2fc:	f3bf 8f6f 	isb	sy
   1a300:	e7d0      	b.n	1a2a4 <k_heap_aligned_alloc+0x30>

0001a302 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   1a302:	b538      	push	{r3, r4, r5, lr}
   1a304:	4604      	mov	r4, r0
   1a306:	f04f 0320 	mov.w	r3, #32
   1a30a:	f3ef 8511 	mrs	r5, BASEPRI
   1a30e:	f383 8811 	msr	BASEPRI, r3
   1a312:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1a316:	f7fd f927 	bl	17568 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   1a31a:	f104 000c 	add.w	r0, r4, #12
   1a31e:	f000 f967 	bl	1a5f0 <z_unpend_all>
   1a322:	b130      	cbz	r0, 1a332 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1a324:	4629      	mov	r1, r5
   1a326:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1a32a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1a32e:	f7fb bf27 	b.w	16180 <z_reschedule>
	__asm__ volatile(
   1a332:	f385 8811 	msr	BASEPRI, r5
   1a336:	f3bf 8f6f 	isb	sy
}
   1a33a:	bd38      	pop	{r3, r4, r5, pc}

0001a33c <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   1a33c:	2300      	movs	r3, #0
   1a33e:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   1a342:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1a346:	4618      	mov	r0, r3
   1a348:	4770      	bx	lr

0001a34a <queue_insert>:
{
   1a34a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a34e:	4699      	mov	r9, r3
   1a350:	4604      	mov	r4, r0
   1a352:	460d      	mov	r5, r1
   1a354:	4690      	mov	r8, r2
   1a356:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a35a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1a35e:	f04f 0220 	mov.w	r2, #32
   1a362:	f3ef 8711 	mrs	r7, BASEPRI
   1a366:	f382 8811 	msr	BASEPRI, r2
   1a36a:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1a36e:	b103      	cbz	r3, 1a372 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   1a370:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1a372:	4630      	mov	r0, r6
   1a374:	f000 f917 	bl	1a5a6 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1a378:	b160      	cbz	r0, 1a394 <queue_insert+0x4a>
   1a37a:	2400      	movs	r4, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1a37c:	f8c0 8014 	str.w	r8, [r0, #20]
   1a380:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
	z_ready_thread(thread);
   1a384:	f000 f8b4 	bl	1a4f0 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1a388:	4630      	mov	r0, r6
   1a38a:	4639      	mov	r1, r7
   1a38c:	f7fb fef8 	bl	16180 <z_reschedule>
	return 0;
   1a390:	2000      	movs	r0, #0
   1a392:	e00c      	b.n	1a3ae <queue_insert+0x64>
	if (alloc) {
   1a394:	f1b9 0f00 	cmp.w	r9, #0
   1a398:	d01b      	beq.n	1a3d2 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   1a39a:	2108      	movs	r1, #8
   1a39c:	f7fc fdfe 	bl	16f9c <z_thread_aligned_alloc>
		if (anode == NULL) {
   1a3a0:	b938      	cbnz	r0, 1a3b2 <queue_insert+0x68>
	__asm__ volatile(
   1a3a2:	f387 8811 	msr	BASEPRI, r7
   1a3a6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1a3aa:	f06f 000b 	mvn.w	r0, #11
}
   1a3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1a3b2:	2301      	movs	r3, #1
		anode->data = data;
   1a3b4:	f8c0 8004 	str.w	r8, [r0, #4]
   1a3b8:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1a3ba:	6803      	ldr	r3, [r0, #0]
   1a3bc:	f003 0203 	and.w	r2, r3, #3
   1a3c0:	b95d      	cbnz	r5, 1a3da <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a3c2:	6823      	ldr	r3, [r4, #0]
   1a3c4:	4313      	orrs	r3, r2
   1a3c6:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a3c8:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1a3ca:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a3cc:	b973      	cbnz	r3, 1a3ec <queue_insert+0xa2>
	list->tail = node;
   1a3ce:	6060      	str	r0, [r4, #4]
}
   1a3d0:	e00c      	b.n	1a3ec <queue_insert+0xa2>
}
   1a3d2:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1a3d4:	f8c8 9000 	str.w	r9, [r8]
}
   1a3d8:	e7ef      	b.n	1a3ba <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a3da:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1a3dc:	f033 0303 	bics.w	r3, r3, #3
   1a3e0:	d110      	bne.n	1a404 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a3e2:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1a3e4:	6862      	ldr	r2, [r4, #4]
   1a3e6:	b93a      	cbnz	r2, 1a3f8 <queue_insert+0xae>
	list->head = node;
   1a3e8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1a3ec:	2104      	movs	r1, #4
   1a3ee:	f104 0010 	add.w	r0, r4, #16
   1a3f2:	f000 fb26 	bl	1aa42 <z_handle_obj_poll_events>
   1a3f6:	e7c7      	b.n	1a388 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a3f8:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a3fa:	f003 0303 	and.w	r3, r3, #3
   1a3fe:	4303      	orrs	r3, r0
   1a400:	6013      	str	r3, [r2, #0]
   1a402:	e7e4      	b.n	1a3ce <queue_insert+0x84>
   1a404:	4313      	orrs	r3, r2
   1a406:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a408:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a40a:	f003 0303 	and.w	r3, r3, #3
   1a40e:	4303      	orrs	r3, r0
   1a410:	602b      	str	r3, [r5, #0]
}
   1a412:	e7eb      	b.n	1a3ec <queue_insert+0xa2>

0001a414 <z_queue_node_peek>:
{
   1a414:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1a416:	4604      	mov	r4, r0
   1a418:	b130      	cbz	r0, 1a428 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a41a:	6802      	ldr	r2, [r0, #0]
   1a41c:	0793      	lsls	r3, r2, #30
   1a41e:	d003      	beq.n	1a428 <z_queue_node_peek+0x14>
		ret = anode->data;
   1a420:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1a422:	b109      	cbz	r1, 1a428 <z_queue_node_peek+0x14>
			k_free(anode);
   1a424:	f000 fb39 	bl	1aa9a <k_free>
}
   1a428:	4620      	mov	r0, r4
   1a42a:	bd10      	pop	{r4, pc}

0001a42c <z_impl_k_queue_init>:
	list->head = NULL;
   1a42c:	2300      	movs	r3, #0
	list->tail = NULL;
   1a42e:	e9c0 3300 	strd	r3, r3, [r0]
   1a432:	f100 0308 	add.w	r3, r0, #8
   1a436:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1a43a:	f100 0310 	add.w	r3, r0, #16
   1a43e:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1a442:	4770      	bx	lr

0001a444 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1a444:	2301      	movs	r3, #1
{
   1a446:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1a448:	9300      	str	r3, [sp, #0]
   1a44a:	2300      	movs	r3, #0
{
   1a44c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1a44e:	4619      	mov	r1, r3
   1a450:	f7ff ff7b 	bl	1a34a <queue_insert>
}
   1a454:	b003      	add	sp, #12
   1a456:	f85d fb04 	ldr.w	pc, [sp], #4

0001a45a <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1a45a:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1a45e:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1a462:	4298      	cmp	r0, r3
   1a464:	bfac      	ite	ge
   1a466:	2000      	movge	r0, #0
   1a468:	2001      	movlt	r0, #1
   1a46a:	4770      	bx	lr

0001a46c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a46c:	4603      	mov	r3, r0
   1a46e:	b920      	cbnz	r0, 1a47a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1a470:	f3ef 8205 	mrs	r2, IPSR
   1a474:	b90a      	cbnz	r2, 1a47a <z_reschedule_irqlock+0xe>
   1a476:	f7f4 bc97 	b.w	eda8 <arch_swap>
   1a47a:	f383 8811 	msr	BASEPRI, r3
   1a47e:	f3bf 8f6f 	isb	sy
}
   1a482:	4770      	bx	lr

0001a484 <z_reschedule_unlocked>:
	__asm__ volatile(
   1a484:	f04f 0320 	mov.w	r3, #32
   1a488:	f3ef 8011 	mrs	r0, BASEPRI
   1a48c:	f383 8811 	msr	BASEPRI, r3
   1a490:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1a494:	f7ff bfea 	b.w	1a46c <z_reschedule_irqlock>

0001a498 <unpend_thread_no_timeout>:
{
   1a498:	4601      	mov	r1, r0
   1a49a:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1a49c:	6880      	ldr	r0, [r0, #8]
   1a49e:	f7fb fe95 	bl	161cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1a4a2:	7b4b      	ldrb	r3, [r1, #13]
   1a4a4:	f023 0302 	bic.w	r3, r3, #2
   1a4a8:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   1a4aa:	2300      	movs	r3, #0
   1a4ac:	608b      	str	r3, [r1, #8]
}
   1a4ae:	bd08      	pop	{r3, pc}

0001a4b0 <z_unpend_thread>:
{
   1a4b0:	b538      	push	{r3, r4, r5, lr}
   1a4b2:	4604      	mov	r4, r0
   1a4b4:	f04f 0320 	mov.w	r3, #32
   1a4b8:	f3ef 8511 	mrs	r5, BASEPRI
   1a4bc:	f383 8811 	msr	BASEPRI, r3
   1a4c0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1a4c4:	f7ff ffe8 	bl	1a498 <unpend_thread_no_timeout>
	__asm__ volatile(
   1a4c8:	f385 8811 	msr	BASEPRI, r5
   1a4cc:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   1a4d0:	f104 0018 	add.w	r0, r4, #24
}
   1a4d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1a4d8:	f000 b910 	b.w	1a6fc <z_abort_timeout>

0001a4dc <z_priq_dumb_best>:
	return list->head == list;
   1a4dc:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a4de:	4298      	cmp	r0, r3
   1a4e0:	d004      	beq.n	1a4ec <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1a4e2:	2b00      	cmp	r3, #0
   1a4e4:	bf38      	it	cc
   1a4e6:	2300      	movcc	r3, #0
   1a4e8:	4618      	mov	r0, r3
   1a4ea:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1a4ec:	2000      	movs	r0, #0
}
   1a4ee:	4770      	bx	lr

0001a4f0 <z_ready_thread>:
{
   1a4f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a4f2:	f04f 0320 	mov.w	r3, #32
   1a4f6:	f3ef 8411 	mrs	r4, BASEPRI
   1a4fa:	f383 8811 	msr	BASEPRI, r3
   1a4fe:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   1a502:	f7fb febd 	bl	16280 <ready_thread>
	__asm__ volatile(
   1a506:	f384 8811 	msr	BASEPRI, r4
   1a50a:	f3bf 8f6f 	isb	sy
}
   1a50e:	bd10      	pop	{r4, pc}

0001a510 <z_thread_timeout>:
{
   1a510:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a512:	4604      	mov	r4, r0
	__asm__ volatile(
   1a514:	f04f 0320 	mov.w	r3, #32
   1a518:	f3ef 8511 	mrs	r5, BASEPRI
   1a51c:	f383 8811 	msr	BASEPRI, r3
   1a520:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1a524:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   1a528:	3818      	subs	r0, #24
		if (thread->base.pended_on != NULL) {
   1a52a:	b11b      	cbz	r3, 1a534 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   1a52c:	9001      	str	r0, [sp, #4]
   1a52e:	f7ff ffb3 	bl	1a498 <unpend_thread_no_timeout>
   1a532:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1a534:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1a538:	f023 0314 	bic.w	r3, r3, #20
   1a53c:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   1a540:	f7fb fe9e 	bl	16280 <ready_thread>
	__asm__ volatile(
   1a544:	f385 8811 	msr	BASEPRI, r5
   1a548:	f3bf 8f6f 	isb	sy
}
   1a54c:	b003      	add	sp, #12
   1a54e:	bd30      	pop	{r4, r5, pc}

0001a550 <add_to_waitq_locked>:
{
   1a550:	b538      	push	{r3, r4, r5, lr}
   1a552:	4604      	mov	r4, r0
   1a554:	460d      	mov	r5, r1
	unready_thread(thread);
   1a556:	f7fc f81b 	bl	16590 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1a55a:	7b63      	ldrb	r3, [r4, #13]
   1a55c:	f043 0302 	orr.w	r3, r3, #2
   1a560:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1a562:	b1c5      	cbz	r5, 1a596 <add_to_waitq_locked+0x46>
	return list->head == list;
   1a564:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1a566:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a568:	429d      	cmp	r5, r3
   1a56a:	bf08      	it	eq
   1a56c:	2300      	moveq	r3, #0
   1a56e:	2b00      	cmp	r3, #0
   1a570:	bf38      	it	cc
   1a572:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a574:	b183      	cbz	r3, 1a598 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   1a576:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1a57a:	f993 200e 	ldrsb.w	r2, [r3, #14]
   1a57e:	4291      	cmp	r1, r2
   1a580:	db04      	blt.n	1a58c <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   1a582:	686a      	ldr	r2, [r5, #4]
   1a584:	429a      	cmp	r2, r3
   1a586:	d007      	beq.n	1a598 <add_to_waitq_locked+0x48>
   1a588:	681b      	ldr	r3, [r3, #0]
   1a58a:	e7f3      	b.n	1a574 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   1a58c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1a58e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1a592:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1a594:	605c      	str	r4, [r3, #4]
}
   1a596:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   1a598:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1a59a:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1a59c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1a59e:	686b      	ldr	r3, [r5, #4]
   1a5a0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a5a2:	606c      	str	r4, [r5, #4]
   1a5a4:	e7f7      	b.n	1a596 <add_to_waitq_locked+0x46>

0001a5a6 <z_unpend_first_thread>:
{
   1a5a6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a5a8:	f04f 0320 	mov.w	r3, #32
   1a5ac:	f3ef 8211 	mrs	r2, BASEPRI
   1a5b0:	f383 8811 	msr	BASEPRI, r3
   1a5b4:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1a5b8:	f7ff ff90 	bl	1a4dc <z_priq_dumb_best>
   1a5bc:	4604      	mov	r4, r0
	__asm__ volatile(
   1a5be:	f382 8811 	msr	BASEPRI, r2
   1a5c2:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1a5c6:	b188      	cbz	r0, 1a5ec <z_unpend_first_thread+0x46>
	__asm__ volatile(
   1a5c8:	f04f 0320 	mov.w	r3, #32
   1a5cc:	f3ef 8511 	mrs	r5, BASEPRI
   1a5d0:	f383 8811 	msr	BASEPRI, r3
   1a5d4:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1a5d8:	f7ff ff5e 	bl	1a498 <unpend_thread_no_timeout>
	__asm__ volatile(
   1a5dc:	f385 8811 	msr	BASEPRI, r5
   1a5e0:	f3bf 8f6f 	isb	sy
   1a5e4:	f104 0018 	add.w	r0, r4, #24
   1a5e8:	f000 f888 	bl	1a6fc <z_abort_timeout>
}
   1a5ec:	4620      	mov	r0, r4
   1a5ee:	bd38      	pop	{r3, r4, r5, pc}

0001a5f0 <z_unpend_all>:
{
   1a5f0:	b538      	push	{r3, r4, r5, lr}
   1a5f2:	4605      	mov	r5, r0
	int need_sched = 0;
   1a5f4:	2000      	movs	r0, #0
	return list->head == list;
   1a5f6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a5f8:	42a5      	cmp	r5, r4
   1a5fa:	d000      	beq.n	1a5fe <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1a5fc:	b904      	cbnz	r4, 1a600 <z_unpend_all+0x10>
}
   1a5fe:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1a600:	4620      	mov	r0, r4
   1a602:	f7ff ff55 	bl	1a4b0 <z_unpend_thread>
		z_ready_thread(thread);
   1a606:	4620      	mov	r0, r4
   1a608:	f7ff ff72 	bl	1a4f0 <z_ready_thread>
		need_sched = 1;
   1a60c:	2001      	movs	r0, #1
   1a60e:	e7f2      	b.n	1a5f6 <z_unpend_all+0x6>

0001a610 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1a610:	b15a      	cbz	r2, 1a62a <z_impl_k_sem_init+0x1a>
   1a612:	428a      	cmp	r2, r1
   1a614:	d309      	bcc.n	1a62a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1a616:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1a61a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1a61e:	e9c0 0000 	strd	r0, r0, [r0]
   1a622:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1a626:	2000      	movs	r0, #0
   1a628:	4770      	bx	lr
		return -EINVAL;
   1a62a:	f06f 0015 	mvn.w	r0, #21
}
   1a62e:	4770      	bx	lr

0001a630 <k_is_in_isr>:
   1a630:	f3ef 8005 	mrs	r0, IPSR
}
   1a634:	3800      	subs	r0, #0
   1a636:	bf18      	it	ne
   1a638:	2001      	movne	r0, #1
   1a63a:	4770      	bx	lr

0001a63c <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1a63c:	b108      	cbz	r0, 1a642 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1a63e:	f7f3 bfc9 	b.w	e5d4 <arch_busy_wait>
}
   1a642:	4770      	bx	lr

0001a644 <z_impl_k_thread_name_set>:
}
   1a644:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1a648:	4770      	bx	lr

0001a64a <k_work_submit_to_queue>:
{
   1a64a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a64c:	f101 0308 	add.w	r3, r1, #8
   1a650:	e8d3 2fef 	ldaex	r2, [r3]
   1a654:	f042 0c01 	orr.w	ip, r2, #1
   1a658:	e8c3 cfee 	stlex	lr, ip, [r3]
   1a65c:	f1be 0f00 	cmp.w	lr, #0
   1a660:	d1f6      	bne.n	1a650 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1a662:	07d3      	lsls	r3, r2, #31
   1a664:	d403      	bmi.n	1a66e <k_work_submit_to_queue+0x24>
}
   1a666:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1a66a:	f7ff beeb 	b.w	1a444 <k_queue_append>
}
   1a66e:	f85d fb04 	ldr.w	pc, [sp], #4

0001a672 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1a672:	f1a0 0110 	sub.w	r1, r0, #16
   1a676:	6980      	ldr	r0, [r0, #24]
   1a678:	f7ff bfe7 	b.w	1a64a <k_work_submit_to_queue>

0001a67c <work_cancel>:
{
   1a67c:	b570      	push	{r4, r5, r6, lr}
   1a67e:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1a680:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a684:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   1a688:	07db      	lsls	r3, r3, #31
   1a68a:	d52f      	bpl.n	1a6ec <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1a68c:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1a68e:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1a690:	6813      	ldr	r3, [r2, #0]
   1a692:	b913      	cbnz	r3, 1a69a <work_cancel+0x1e>
			return -EINVAL;
   1a694:	f06f 0015 	mvn.w	r0, #21
}
   1a698:	bd70      	pop	{r4, r5, r6, pc}
   1a69a:	429c      	cmp	r4, r3
   1a69c:	d121      	bne.n	1a6e2 <work_cancel+0x66>
Z_GENLIST_REMOVE(sflist, sfnode)
   1a69e:	6823      	ldr	r3, [r4, #0]
   1a6a0:	6856      	ldr	r6, [r2, #4]
   1a6a2:	f023 0003 	bic.w	r0, r3, #3
   1a6a6:	b991      	cbnz	r1, 1a6ce <work_cancel+0x52>
   1a6a8:	42b4      	cmp	r4, r6
	list->head = node;
   1a6aa:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1a6ac:	d100      	bne.n	1a6b0 <work_cancel+0x34>
	list->tail = node;
   1a6ae:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a6b0:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a6b2:	f003 0303 	and.w	r3, r3, #3
   1a6b6:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1a6b8:	2000      	movs	r0, #0
   1a6ba:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a6bc:	e8d5 3fef 	ldaex	r3, [r5]
   1a6c0:	f023 0301 	bic.w	r3, r3, #1
   1a6c4:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1a6c8:	2a00      	cmp	r2, #0
   1a6ca:	d0e5      	beq.n	1a698 <work_cancel+0x1c>
   1a6cc:	e7f6      	b.n	1a6bc <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a6ce:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1a6d0:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a6d2:	f003 0303 	and.w	r3, r3, #3
   1a6d6:	ea43 0300 	orr.w	r3, r3, r0
   1a6da:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1a6dc:	bf08      	it	eq
   1a6de:	6051      	streq	r1, [r2, #4]
}
   1a6e0:	e7e6      	b.n	1a6b0 <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a6e2:	6818      	ldr	r0, [r3, #0]
   1a6e4:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1a6e6:	f020 0303 	bic.w	r3, r0, #3
   1a6ea:	e7d2      	b.n	1a692 <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   1a6ec:	3010      	adds	r0, #16
   1a6ee:	f000 f805 	bl	1a6fc <z_abort_timeout>
		if (err) {
   1a6f2:	2800      	cmp	r0, #0
   1a6f4:	d0e0      	beq.n	1a6b8 <work_cancel+0x3c>
			return -EALREADY;
   1a6f6:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1a6fa:	e7cd      	b.n	1a698 <work_cancel+0x1c>

0001a6fc <z_abort_timeout>:
{
   1a6fc:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a6fe:	f04f 0220 	mov.w	r2, #32
   1a702:	f3ef 8411 	mrs	r4, BASEPRI
   1a706:	f382 8811 	msr	BASEPRI, r2
   1a70a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1a70e:	6803      	ldr	r3, [r0, #0]
   1a710:	b13b      	cbz	r3, 1a722 <z_abort_timeout+0x26>
			remove_timeout(to);
   1a712:	f7fc fa5f 	bl	16bd4 <remove_timeout>
			ret = 0;
   1a716:	2000      	movs	r0, #0
	__asm__ volatile(
   1a718:	f384 8811 	msr	BASEPRI, r4
   1a71c:	f3bf 8f6f 	isb	sy
}
   1a720:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1a722:	f06f 0015 	mvn.w	r0, #21
   1a726:	e7f7      	b.n	1a718 <z_abort_timeout+0x1c>

0001a728 <z_get_next_timeout_expiry>:
{
   1a728:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a72a:	f04f 0320 	mov.w	r3, #32
   1a72e:	f3ef 8411 	mrs	r4, BASEPRI
   1a732:	f383 8811 	msr	BASEPRI, r3
   1a736:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1a73a:	f7fc fa65 	bl	16c08 <next_timeout>
	__asm__ volatile(
   1a73e:	f384 8811 	msr	BASEPRI, r4
   1a742:	f3bf 8f6f 	isb	sy
}
   1a746:	bd10      	pop	{r4, pc}

0001a748 <z_set_timeout_expiry>:
{
   1a748:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a74a:	4604      	mov	r4, r0
   1a74c:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   1a74e:	f04f 0320 	mov.w	r3, #32
   1a752:	f3ef 8511 	mrs	r5, BASEPRI
   1a756:	f383 8811 	msr	BASEPRI, r3
   1a75a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1a75e:	f7fc fa53 	bl	16c08 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1a762:	2801      	cmp	r0, #1
   1a764:	dd05      	ble.n	1a772 <z_set_timeout_expiry+0x2a>
   1a766:	42a0      	cmp	r0, r4
   1a768:	9901      	ldr	r1, [sp, #4]
   1a76a:	dd02      	ble.n	1a772 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   1a76c:	4620      	mov	r0, r4
   1a76e:	f7f4 facf 	bl	ed10 <z_clock_set_timeout>
	__asm__ volatile(
   1a772:	f385 8811 	msr	BASEPRI, r5
   1a776:	f3bf 8f6f 	isb	sy
}
   1a77a:	b003      	add	sp, #12
   1a77c:	bd30      	pop	{r4, r5, pc}

0001a77e <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1a77e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1a780:	f7fc fb66 	bl	16e50 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1a784:	bd08      	pop	{r3, pc}

0001a786 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1a786:	f7fc bb63 	b.w	16e50 <z_tick_get>

0001a78a <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   1a78a:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a78c:	1c4b      	adds	r3, r1, #1
   1a78e:	bf08      	it	eq
   1a790:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1a794:	4604      	mov	r4, r0
   1a796:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a798:	d013      	beq.n	1a7c2 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a79a:	ea54 0105 	orrs.w	r1, r4, r5
   1a79e:	d103      	bne.n	1a7a8 <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   1a7a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1a7a4:	f7fc bb54 	b.w	16e50 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1a7a8:	f06f 0101 	mvn.w	r1, #1
   1a7ac:	1a0a      	subs	r2, r1, r0
   1a7ae:	f04f 31ff 	mov.w	r1, #4294967295
   1a7b2:	eb61 0305 	sbc.w	r3, r1, r5
   1a7b6:	2a00      	cmp	r2, #0
   1a7b8:	f173 0100 	sbcs.w	r1, r3, #0
   1a7bc:	db02      	blt.n	1a7c4 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   1a7be:	4610      	mov	r0, r2
   1a7c0:	4619      	mov	r1, r3
}
   1a7c2:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   1a7c4:	f7fc fb44 	bl	16e50 <z_tick_get>
   1a7c8:	2c01      	cmp	r4, #1
   1a7ca:	f175 0300 	sbcs.w	r3, r5, #0
   1a7ce:	bfbc      	itt	lt
   1a7d0:	2401      	movlt	r4, #1
   1a7d2:	2500      	movlt	r5, #0
   1a7d4:	1820      	adds	r0, r4, r0
   1a7d6:	eb45 0101 	adc.w	r1, r5, r1
   1a7da:	e7f2      	b.n	1a7c2 <z_timeout_end_calc+0x38>

0001a7dc <clear_event_registrations>:
	while (num_events--) {
   1a7dc:	2314      	movs	r3, #20
{
   1a7de:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   1a7e0:	2400      	movs	r4, #0
   1a7e2:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   1a7e6:	4281      	cmp	r1, r0
   1a7e8:	d100      	bne.n	1a7ec <clear_event_registrations+0x10>
}
   1a7ea:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   1a7ec:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1a7f0:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1a7f4:	f003 030f 	and.w	r3, r3, #15
   1a7f8:	2b02      	cmp	r3, #2
   1a7fa:	d80a      	bhi.n	1a812 <clear_event_registrations+0x36>
   1a7fc:	b15b      	cbz	r3, 1a816 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1a7fe:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1a802:	b143      	cbz	r3, 1a816 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   1a804:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1a808:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1a80a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1a80c:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   1a810:	e001      	b.n	1a816 <clear_event_registrations+0x3a>
	switch (event->type) {
   1a812:	2b04      	cmp	r3, #4
   1a814:	d0f3      	beq.n	1a7fe <clear_event_registrations+0x22>
   1a816:	f382 8811 	msr	BASEPRI, r2
   1a81a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a81e:	f04f 0320 	mov.w	r3, #32
   1a822:	f3ef 8211 	mrs	r2, BASEPRI
   1a826:	f383 8811 	msr	BASEPRI, r3
   1a82a:	f3bf 8f6f 	isb	sy
   1a82e:	3914      	subs	r1, #20
   1a830:	e7d9      	b.n	1a7e6 <clear_event_registrations+0xa>

0001a832 <k_work_submit_to_queue>:
{
   1a832:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a834:	f101 0308 	add.w	r3, r1, #8
   1a838:	e8d3 2fef 	ldaex	r2, [r3]
   1a83c:	f042 0c01 	orr.w	ip, r2, #1
   1a840:	e8c3 cfee 	stlex	lr, ip, [r3]
   1a844:	f1be 0f00 	cmp.w	lr, #0
   1a848:	d1f6      	bne.n	1a838 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1a84a:	07d3      	lsls	r3, r2, #31
   1a84c:	d403      	bmi.n	1a856 <k_work_submit_to_queue+0x24>
}
   1a84e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1a852:	f7ff bdf7 	b.w	1a444 <k_queue_append>
}
   1a856:	f85d fb04 	ldr.w	pc, [sp], #4

0001a85a <signal_poll_event>:
{
   1a85a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
   1a85e:	6884      	ldr	r4, [r0, #8]
{
   1a860:	4605      	mov	r5, r0
   1a862:	460e      	mov	r6, r1
	if (poller) {
   1a864:	b144      	cbz	r4, 1a878 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1a866:	7863      	ldrb	r3, [r4, #1]
   1a868:	2b01      	cmp	r3, #1
   1a86a:	d139      	bne.n	1a8e0 <signal_poll_event+0x86>
	if (!z_is_thread_pending(thread)) {
   1a86c:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   1a870:	f013 0302 	ands.w	r3, r3, #2
   1a874:	d10a      	bne.n	1a88c <signal_poll_event+0x32>
		poller->is_polling = false;
   1a876:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1a878:	2000      	movs	r0, #0
	event->state |= state;
   1a87a:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1a87c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1a87e:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1a882:	430e      	orrs	r6, r1
   1a884:	f366 3310 	bfi	r3, r6, #12, #5
   1a888:	60eb      	str	r3, [r5, #12]
	return retcode;
   1a88a:	e00d      	b.n	1a8a8 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   1a88c:	f04f 31ff 	mov.w	r1, #4294967295
   1a890:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   1a894:	f06f 0001 	mvn.w	r0, #1
   1a898:	428b      	cmp	r3, r1
   1a89a:	bf08      	it	eq
   1a89c:	4282      	cmpeq	r2, r0
   1a89e:	d106      	bne.n	1a8ae <signal_poll_event+0x54>
		poller->is_polling = false;
   1a8a0:	2300      	movs	r3, #0
		return -EAGAIN;
   1a8a2:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1a8a6:	7023      	strb	r3, [r4, #0]
}
   1a8a8:	b002      	add	sp, #8
   1a8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1a8ae:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
	z_unpend_thread(thread);
   1a8b2:	9001      	str	r0, [sp, #4]
   1a8b4:	f7ff fdfc 	bl	1a4b0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1a8b8:	2e08      	cmp	r6, #8
   1a8ba:	bf0c      	ite	eq
   1a8bc:	f06f 0303 	mvneq.w	r3, #3
   1a8c0:	2300      	movne	r3, #0
   1a8c2:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1a8c4:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   1a8c8:	06db      	lsls	r3, r3, #27
   1a8ca:	d103      	bne.n	1a8d4 <signal_poll_event+0x7a>
	if (!z_is_thread_ready(thread)) {
   1a8cc:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   1a8d0:	9801      	ldr	r0, [sp, #4]
   1a8d2:	b10f      	cbz	r7, 1a8d8 <signal_poll_event+0x7e>
		poller->is_polling = false;
   1a8d4:	2300      	movs	r3, #0
   1a8d6:	e7ce      	b.n	1a876 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1a8d8:	f7ff fe0a 	bl	1a4f0 <z_ready_thread>
		poller->is_polling = false;
   1a8dc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1a8de:	e7cb      	b.n	1a878 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1a8e0:	2b02      	cmp	r3, #2
   1a8e2:	d1f7      	bne.n	1a8d4 <signal_poll_event+0x7a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1a8e4:	7823      	ldrb	r3, [r4, #0]
   1a8e6:	2b00      	cmp	r3, #0
   1a8e8:	d0c6      	beq.n	1a878 <signal_poll_event+0x1e>
   1a8ea:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1a8ee:	2f00      	cmp	r7, #0
   1a8f0:	d0f4      	beq.n	1a8dc <signal_poll_event+0x82>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1a8f2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1a8f6:	f1a4 0110 	sub.w	r1, r4, #16
   1a8fa:	f104 0010 	add.w	r0, r4, #16
   1a8fe:	9101      	str	r1, [sp, #4]
   1a900:	f7ff fefc 	bl	1a6fc <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   1a904:	4638      	mov	r0, r7
   1a906:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
   1a908:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   1a90c:	f7ff ff91 	bl	1a832 <k_work_submit_to_queue>
		poller->is_polling = false;
   1a910:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1a914:	e7b0      	b.n	1a878 <signal_poll_event+0x1e>

0001a916 <add_event>:
{
   1a916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a918:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1a91a:	e9d0 2300 	ldrd	r2, r3, [r0]
   1a91e:	4290      	cmp	r0, r2
   1a920:	4604      	mov	r4, r0
   1a922:	460d      	mov	r5, r1
   1a924:	d106      	bne.n	1a934 <add_event+0x1e>
	node->prev = list->tail;
   1a926:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1a928:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1a92a:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1a92c:	6863      	ldr	r3, [r4, #4]
   1a92e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1a930:	6065      	str	r5, [r4, #4]
}
   1a932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1a934:	2b00      	cmp	r3, #0
   1a936:	d0f6      	beq.n	1a926 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1a938:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1a93a:	b100      	cbz	r0, 1a93e <add_event+0x28>
   1a93c:	3864      	subs	r0, #100	; 0x64
   1a93e:	b107      	cbz	r7, 1a942 <add_event+0x2c>
   1a940:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1a942:	4639      	mov	r1, r7
   1a944:	f7ff fd89 	bl	1a45a <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1a948:	2800      	cmp	r0, #0
   1a94a:	d1ec      	bne.n	1a926 <add_event+0x10>
	return list->head == list;
   1a94c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a94e:	42b4      	cmp	r4, r6
   1a950:	d0e9      	beq.n	1a926 <add_event+0x10>
   1a952:	2e00      	cmp	r6, #0
   1a954:	bf38      	it	cc
   1a956:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1a958:	2e00      	cmp	r6, #0
   1a95a:	d0e4      	beq.n	1a926 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1a95c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1a95e:	b101      	cbz	r1, 1a962 <add_event+0x4c>
   1a960:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1a962:	4638      	mov	r0, r7
   1a964:	f7ff fd79 	bl	1a45a <z_is_t1_higher_prio_than_t2>
   1a968:	b128      	cbz	r0, 1a976 <add_event+0x60>
	node->prev = successor->prev;
   1a96a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1a96c:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1a970:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1a972:	6075      	str	r5, [r6, #4]
			return;
   1a974:	e7dd      	b.n	1a932 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1a976:	6863      	ldr	r3, [r4, #4]
   1a978:	42b3      	cmp	r3, r6
   1a97a:	d0d4      	beq.n	1a926 <add_event+0x10>
   1a97c:	6836      	ldr	r6, [r6, #0]
   1a97e:	e7eb      	b.n	1a958 <add_event+0x42>

0001a980 <register_events>:
{
   1a980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1a984:	f04f 0a00 	mov.w	sl, #0
{
   1a988:	460e      	mov	r6, r1
   1a98a:	4614      	mov	r4, r2
   1a98c:	461f      	mov	r7, r3
   1a98e:	4683      	mov	fp, r0
	int events_registered = 0;
   1a990:	4655      	mov	r5, sl
	event->poller = NULL;
   1a992:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   1a994:	45b2      	cmp	sl, r6
   1a996:	db02      	blt.n	1a99e <register_events+0x1e>
}
   1a998:	4628      	mov	r0, r5
   1a99a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a99e:	f04f 0320 	mov.w	r3, #32
   1a9a2:	f3ef 8911 	mrs	r9, BASEPRI
   1a9a6:	f383 8811 	msr	BASEPRI, r3
   1a9aa:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1a9ae:	f89b 200d 	ldrb.w	r2, [fp, #13]
   1a9b2:	f002 020f 	and.w	r2, r2, #15
   1a9b6:	2a02      	cmp	r2, #2
   1a9b8:	d006      	beq.n	1a9c8 <register_events+0x48>
   1a9ba:	2a04      	cmp	r2, #4
   1a9bc:	d008      	beq.n	1a9d0 <register_events+0x50>
   1a9be:	2a01      	cmp	r2, #1
   1a9c0:	d120      	bne.n	1aa04 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   1a9c2:	f8db 3010 	ldr.w	r3, [fp, #16]
   1a9c6:	e001      	b.n	1a9cc <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   1a9c8:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   1a9cc:	689b      	ldr	r3, [r3, #8]
   1a9ce:	e002      	b.n	1a9d6 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   1a9d0:	f8db 3010 	ldr.w	r3, [fp, #16]
   1a9d4:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   1a9d6:	b1ab      	cbz	r3, 1aa04 <register_events+0x84>
	event->state |= state;
   1a9d8:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   1a9dc:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   1a9e0:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1a9e4:	430a      	orrs	r2, r1
   1a9e6:	f362 3310 	bfi	r3, r2, #12, #5
   1a9ea:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   1a9ee:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1a9f2:	f389 8811 	msr	BASEPRI, r9
   1a9f6:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1a9fa:	f10a 0a01 	add.w	sl, sl, #1
   1a9fe:	f10b 0b14 	add.w	fp, fp, #20
   1aa02:	e7c7      	b.n	1a994 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1aa04:	2f00      	cmp	r7, #0
   1aa06:	d1f4      	bne.n	1a9f2 <register_events+0x72>
   1aa08:	7823      	ldrb	r3, [r4, #0]
   1aa0a:	2b00      	cmp	r3, #0
   1aa0c:	d0f1      	beq.n	1a9f2 <register_events+0x72>
	switch (event->type) {
   1aa0e:	f89b 300d 	ldrb.w	r3, [fp, #13]
   1aa12:	f003 030f 	and.w	r3, r3, #15
   1aa16:	2b02      	cmp	r3, #2
   1aa18:	d008      	beq.n	1aa2c <register_events+0xac>
   1aa1a:	2b04      	cmp	r3, #4
   1aa1c:	d006      	beq.n	1aa2c <register_events+0xac>
   1aa1e:	2b01      	cmp	r3, #1
   1aa20:	d10b      	bne.n	1aa3a <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   1aa22:	4622      	mov	r2, r4
   1aa24:	4659      	mov	r1, fp
   1aa26:	f8db 0010 	ldr.w	r0, [fp, #16]
   1aa2a:	e004      	b.n	1aa36 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   1aa2c:	4622      	mov	r2, r4
   1aa2e:	4659      	mov	r1, fp
   1aa30:	f8db 0010 	ldr.w	r0, [fp, #16]
   1aa34:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1aa36:	f7ff ff6e 	bl	1a916 <add_event>
	event->poller = poller;
   1aa3a:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   1aa3e:	3501      	adds	r5, #1
   1aa40:	e7d7      	b.n	1a9f2 <register_events+0x72>

0001aa42 <z_handle_obj_poll_events>:
{
   1aa42:	4603      	mov	r3, r0
	return list->head == list;
   1aa44:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1aa46:	4283      	cmp	r3, r0
   1aa48:	d008      	beq.n	1aa5c <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1aa4a:	e9d0 3200 	ldrd	r3, r2, [r0]
   1aa4e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1aa50:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1aa52:	2300      	movs	r3, #0
	node->prev = NULL;
   1aa54:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1aa58:	f7ff beff 	b.w	1a85a <signal_poll_event>
}
   1aa5c:	4770      	bx	lr

0001aa5e <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1aa5e:	2904      	cmp	r1, #4
{
   1aa60:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1aa64:	460d      	mov	r5, r1
   1aa66:	bf38      	it	cc
   1aa68:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1aa6a:	1952      	adds	r2, r2, r5
{
   1aa6c:	4606      	mov	r6, r0
   1aa6e:	d209      	bcs.n	1aa84 <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   1aa70:	f04f 0800 	mov.w	r8, #0
   1aa74:	f04f 0900 	mov.w	r9, #0
   1aa78:	e9cd 8900 	strd	r8, r9, [sp]
   1aa7c:	f7ff fbfa 	bl	1a274 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1aa80:	4604      	mov	r4, r0
   1aa82:	b918      	cbnz	r0, 1aa8c <z_heap_aligned_alloc+0x2e>
		return NULL;
   1aa84:	2000      	movs	r0, #0
}
   1aa86:	b002      	add	sp, #8
   1aa88:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   1aa8c:	462a      	mov	r2, r5
   1aa8e:	21ff      	movs	r1, #255	; 0xff
   1aa90:	f7fd fa4f 	bl	17f32 <memset>
	*heap_ref = heap;
   1aa94:	6026      	str	r6, [r4, #0]
	return mem + excess;
   1aa96:	1960      	adds	r0, r4, r5
   1aa98:	e7f5      	b.n	1aa86 <z_heap_aligned_alloc+0x28>

0001aa9a <k_free>:
	if (ptr != NULL) {
   1aa9a:	b138      	cbz	r0, 1aaac <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1aa9c:	1f03      	subs	r3, r0, #4
   1aa9e:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   1aaa0:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1aaa4:	1c42      	adds	r2, r0, #1
   1aaa6:	d0fa      	beq.n	1aa9e <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   1aaa8:	f7ff bc2b 	b.w	1a302 <k_heap_free>
}
   1aaac:	4770      	bx	lr

0001aaae <k_calloc>:
{
   1aaae:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   1aab0:	fba0 4501 	umull	r4, r5, r0, r1
   1aab4:	b93d      	cbnz	r5, 1aac6 <k_calloc+0x18>
	return k_aligned_alloc(sizeof(void *), size);
   1aab6:	4621      	mov	r1, r4
   1aab8:	2004      	movs	r0, #4
   1aaba:	f7fc fa67 	bl	16f8c <k_aligned_alloc>
	if (ret != NULL) {
   1aabe:	4606      	mov	r6, r0
   1aac0:	b918      	cbnz	r0, 1aaca <k_calloc+0x1c>
}
   1aac2:	4630      	mov	r0, r6
   1aac4:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1aac6:	2600      	movs	r6, #0
   1aac8:	e7fb      	b.n	1aac2 <k_calloc+0x14>
		(void)memset(ret, 0, bounds);
   1aaca:	4622      	mov	r2, r4
   1aacc:	4629      	mov	r1, r5
   1aace:	f7fd fa30 	bl	17f32 <memset>
   1aad2:	e7f6      	b.n	1aac2 <k_calloc+0x14>

0001aad4 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1aad4:	4770      	bx	lr
