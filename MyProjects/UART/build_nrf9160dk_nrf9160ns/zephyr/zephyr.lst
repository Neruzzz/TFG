
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	20019f70 	.word	0x20019f70
    c004:	0000fed9 	.word	0x0000fed9
    c008:	000193c7 	.word	0x000193c7
    c00c:	0000ff09 	.word	0x0000ff09
    c010:	0000ff09 	.word	0x0000ff09
    c014:	0000ff09 	.word	0x0000ff09
    c018:	0000ff09 	.word	0x0000ff09
    c01c:	0000ff09 	.word	0x0000ff09
	...
    c02c:	0000fe35 	.word	0x0000fe35
    c030:	0000ff09 	.word	0x0000ff09
    c034:	00000000 	.word	0x00000000
    c038:	0000fd85 	.word	0x0000fd85
    c03c:	00019393 	.word	0x00019393

0000c040 <_irq_vector_table>:
    c040:	0000fe99 0000fe99 0000fe99 0000fe99     ................
    c050:	0000fe99 0000fe99 0000fe99 0000fe99     ................
    c060:	0000fe99 0000fe99 0000fe99 0000fe99     ................
    c070:	0000fe99 0000fe99 0000fe99 0000fe99     ................
    c080:	0000fe99 0000fe99 0000fe99 0000fe99     ................
    c090:	0000fe99 0000fe99 0000fe99 0000fe99     ................
    c0a0:	0000fe99 0000fe99 0000fe99 0000fe99     ................
    c0b0:	00011111 00019827 0000fe99 0000fe99     ....'...........
    c0c0:	0000fe99 0000fe99 0000fe99 0000fe99     ................
    c0d0:	0000fe99 0000fe99 0000fe99 0000fe99     ................
    c0e0:	0000fe99 0000fe99 0000fe99 0000fe99     ................
    c0f0:	0000fe99 0000fe99 0000fe99 0000fe99     ................
    c100:	0000fe99 0000fe99 0000fe99 0000fe99     ................
    c110:	0000fe99 0000fe99 0000fe99 0000fe99     ................
    c120:	0000fe99 0000fe99 0000fe99 0000fe99     ................
    c130:	0000fe99 0000fe99 0000fe99 0000fe99     ................
    c140:	0000fe99                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00011a64 00000001 0000c000 0000c000     d...............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c23c <__aeabi_drsub>:
    c23c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c240:	e002      	b.n	c248 <__adddf3>
    c242:	bf00      	nop

0000c244 <__aeabi_dsub>:
    c244:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c248 <__adddf3>:
    c248:	b530      	push	{r4, r5, lr}
    c24a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c24e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c252:	ea94 0f05 	teq	r4, r5
    c256:	bf08      	it	eq
    c258:	ea90 0f02 	teqeq	r0, r2
    c25c:	bf1f      	itttt	ne
    c25e:	ea54 0c00 	orrsne.w	ip, r4, r0
    c262:	ea55 0c02 	orrsne.w	ip, r5, r2
    c266:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c26e:	f000 80e2 	beq.w	c436 <__adddf3+0x1ee>
    c272:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c276:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27a:	bfb8      	it	lt
    c27c:	426d      	neglt	r5, r5
    c27e:	dd0c      	ble.n	c29a <__adddf3+0x52>
    c280:	442c      	add	r4, r5
    c282:	ea80 0202 	eor.w	r2, r0, r2
    c286:	ea81 0303 	eor.w	r3, r1, r3
    c28a:	ea82 0000 	eor.w	r0, r2, r0
    c28e:	ea83 0101 	eor.w	r1, r3, r1
    c292:	ea80 0202 	eor.w	r2, r0, r2
    c296:	ea81 0303 	eor.w	r3, r1, r3
    c29a:	2d36      	cmp	r5, #54	; 0x36
    c29c:	bf88      	it	hi
    c29e:	bd30      	pophi	{r4, r5, pc}
    c2a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b0:	d002      	beq.n	c2b8 <__adddf3+0x70>
    c2b2:	4240      	negs	r0, r0
    c2b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c4:	d002      	beq.n	c2cc <__adddf3+0x84>
    c2c6:	4252      	negs	r2, r2
    c2c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2cc:	ea94 0f05 	teq	r4, r5
    c2d0:	f000 80a7 	beq.w	c422 <__adddf3+0x1da>
    c2d4:	f1a4 0401 	sub.w	r4, r4, #1
    c2d8:	f1d5 0e20 	rsbs	lr, r5, #32
    c2dc:	db0d      	blt.n	c2fa <__adddf3+0xb2>
    c2de:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e2:	fa22 f205 	lsr.w	r2, r2, r5
    c2e6:	1880      	adds	r0, r0, r2
    c2e8:	f141 0100 	adc.w	r1, r1, #0
    c2ec:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f0:	1880      	adds	r0, r0, r2
    c2f2:	fa43 f305 	asr.w	r3, r3, r5
    c2f6:	4159      	adcs	r1, r3
    c2f8:	e00e      	b.n	c318 <__adddf3+0xd0>
    c2fa:	f1a5 0520 	sub.w	r5, r5, #32
    c2fe:	f10e 0e20 	add.w	lr, lr, #32
    c302:	2a01      	cmp	r2, #1
    c304:	fa03 fc0e 	lsl.w	ip, r3, lr
    c308:	bf28      	it	cs
    c30a:	f04c 0c02 	orrcs.w	ip, ip, #2
    c30e:	fa43 f305 	asr.w	r3, r3, r5
    c312:	18c0      	adds	r0, r0, r3
    c314:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c318:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c31c:	d507      	bpl.n	c32e <__adddf3+0xe6>
    c31e:	f04f 0e00 	mov.w	lr, #0
    c322:	f1dc 0c00 	rsbs	ip, ip, #0
    c326:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32a:	eb6e 0101 	sbc.w	r1, lr, r1
    c32e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c332:	d31b      	bcc.n	c36c <__adddf3+0x124>
    c334:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c338:	d30c      	bcc.n	c354 <__adddf3+0x10c>
    c33a:	0849      	lsrs	r1, r1, #1
    c33c:	ea5f 0030 	movs.w	r0, r0, rrx
    c340:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c344:	f104 0401 	add.w	r4, r4, #1
    c348:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c34c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c350:	f080 809a 	bcs.w	c488 <__adddf3+0x240>
    c354:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c358:	bf08      	it	eq
    c35a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c35e:	f150 0000 	adcs.w	r0, r0, #0
    c362:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c366:	ea41 0105 	orr.w	r1, r1, r5
    c36a:	bd30      	pop	{r4, r5, pc}
    c36c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c370:	4140      	adcs	r0, r0
    c372:	eb41 0101 	adc.w	r1, r1, r1
    c376:	3c01      	subs	r4, #1
    c378:	bf28      	it	cs
    c37a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c37e:	d2e9      	bcs.n	c354 <__adddf3+0x10c>
    c380:	f091 0f00 	teq	r1, #0
    c384:	bf04      	itt	eq
    c386:	4601      	moveq	r1, r0
    c388:	2000      	moveq	r0, #0
    c38a:	fab1 f381 	clz	r3, r1
    c38e:	bf08      	it	eq
    c390:	3320      	addeq	r3, #32
    c392:	f1a3 030b 	sub.w	r3, r3, #11
    c396:	f1b3 0220 	subs.w	r2, r3, #32
    c39a:	da0c      	bge.n	c3b6 <__adddf3+0x16e>
    c39c:	320c      	adds	r2, #12
    c39e:	dd08      	ble.n	c3b2 <__adddf3+0x16a>
    c3a0:	f102 0c14 	add.w	ip, r2, #20
    c3a4:	f1c2 020c 	rsb	r2, r2, #12
    c3a8:	fa01 f00c 	lsl.w	r0, r1, ip
    c3ac:	fa21 f102 	lsr.w	r1, r1, r2
    c3b0:	e00c      	b.n	c3cc <__adddf3+0x184>
    c3b2:	f102 0214 	add.w	r2, r2, #20
    c3b6:	bfd8      	it	le
    c3b8:	f1c2 0c20 	rsble	ip, r2, #32
    c3bc:	fa01 f102 	lsl.w	r1, r1, r2
    c3c0:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c4:	bfdc      	itt	le
    c3c6:	ea41 010c 	orrle.w	r1, r1, ip
    c3ca:	4090      	lslle	r0, r2
    c3cc:	1ae4      	subs	r4, r4, r3
    c3ce:	bfa2      	ittt	ge
    c3d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d4:	4329      	orrge	r1, r5
    c3d6:	bd30      	popge	{r4, r5, pc}
    c3d8:	ea6f 0404 	mvn.w	r4, r4
    c3dc:	3c1f      	subs	r4, #31
    c3de:	da1c      	bge.n	c41a <__adddf3+0x1d2>
    c3e0:	340c      	adds	r4, #12
    c3e2:	dc0e      	bgt.n	c402 <__adddf3+0x1ba>
    c3e4:	f104 0414 	add.w	r4, r4, #20
    c3e8:	f1c4 0220 	rsb	r2, r4, #32
    c3ec:	fa20 f004 	lsr.w	r0, r0, r4
    c3f0:	fa01 f302 	lsl.w	r3, r1, r2
    c3f4:	ea40 0003 	orr.w	r0, r0, r3
    c3f8:	fa21 f304 	lsr.w	r3, r1, r4
    c3fc:	ea45 0103 	orr.w	r1, r5, r3
    c400:	bd30      	pop	{r4, r5, pc}
    c402:	f1c4 040c 	rsb	r4, r4, #12
    c406:	f1c4 0220 	rsb	r2, r4, #32
    c40a:	fa20 f002 	lsr.w	r0, r0, r2
    c40e:	fa01 f304 	lsl.w	r3, r1, r4
    c412:	ea40 0003 	orr.w	r0, r0, r3
    c416:	4629      	mov	r1, r5
    c418:	bd30      	pop	{r4, r5, pc}
    c41a:	fa21 f004 	lsr.w	r0, r1, r4
    c41e:	4629      	mov	r1, r5
    c420:	bd30      	pop	{r4, r5, pc}
    c422:	f094 0f00 	teq	r4, #0
    c426:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42a:	bf06      	itte	eq
    c42c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c430:	3401      	addeq	r4, #1
    c432:	3d01      	subne	r5, #1
    c434:	e74e      	b.n	c2d4 <__adddf3+0x8c>
    c436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43a:	bf18      	it	ne
    c43c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c440:	d029      	beq.n	c496 <__adddf3+0x24e>
    c442:	ea94 0f05 	teq	r4, r5
    c446:	bf08      	it	eq
    c448:	ea90 0f02 	teqeq	r0, r2
    c44c:	d005      	beq.n	c45a <__adddf3+0x212>
    c44e:	ea54 0c00 	orrs.w	ip, r4, r0
    c452:	bf04      	itt	eq
    c454:	4619      	moveq	r1, r3
    c456:	4610      	moveq	r0, r2
    c458:	bd30      	pop	{r4, r5, pc}
    c45a:	ea91 0f03 	teq	r1, r3
    c45e:	bf1e      	ittt	ne
    c460:	2100      	movne	r1, #0
    c462:	2000      	movne	r0, #0
    c464:	bd30      	popne	{r4, r5, pc}
    c466:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46a:	d105      	bne.n	c478 <__adddf3+0x230>
    c46c:	0040      	lsls	r0, r0, #1
    c46e:	4149      	adcs	r1, r1
    c470:	bf28      	it	cs
    c472:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c476:	bd30      	pop	{r4, r5, pc}
    c478:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c47c:	bf3c      	itt	cc
    c47e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c482:	bd30      	popcc	{r4, r5, pc}
    c484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c488:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c48c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c490:	f04f 0000 	mov.w	r0, #0
    c494:	bd30      	pop	{r4, r5, pc}
    c496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49a:	bf1a      	itte	ne
    c49c:	4619      	movne	r1, r3
    c49e:	4610      	movne	r0, r2
    c4a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a4:	bf1c      	itt	ne
    c4a6:	460b      	movne	r3, r1
    c4a8:	4602      	movne	r2, r0
    c4aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4ae:	bf06      	itte	eq
    c4b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b4:	ea91 0f03 	teqeq	r1, r3
    c4b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4bc:	bd30      	pop	{r4, r5, pc}
    c4be:	bf00      	nop

0000c4c0 <__aeabi_ui2d>:
    c4c0:	f090 0f00 	teq	r0, #0
    c4c4:	bf04      	itt	eq
    c4c6:	2100      	moveq	r1, #0
    c4c8:	4770      	bxeq	lr
    c4ca:	b530      	push	{r4, r5, lr}
    c4cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d4:	f04f 0500 	mov.w	r5, #0
    c4d8:	f04f 0100 	mov.w	r1, #0
    c4dc:	e750      	b.n	c380 <__adddf3+0x138>
    c4de:	bf00      	nop

0000c4e0 <__aeabi_i2d>:
    c4e0:	f090 0f00 	teq	r0, #0
    c4e4:	bf04      	itt	eq
    c4e6:	2100      	moveq	r1, #0
    c4e8:	4770      	bxeq	lr
    c4ea:	b530      	push	{r4, r5, lr}
    c4ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4f8:	bf48      	it	mi
    c4fa:	4240      	negmi	r0, r0
    c4fc:	f04f 0100 	mov.w	r1, #0
    c500:	e73e      	b.n	c380 <__adddf3+0x138>
    c502:	bf00      	nop

0000c504 <__aeabi_f2d>:
    c504:	0042      	lsls	r2, r0, #1
    c506:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50a:	ea4f 0131 	mov.w	r1, r1, rrx
    c50e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c512:	bf1f      	itttt	ne
    c514:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c518:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c51c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c520:	4770      	bxne	lr
    c522:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c526:	bf08      	it	eq
    c528:	4770      	bxeq	lr
    c52a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c52e:	bf04      	itt	eq
    c530:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c534:	4770      	bxeq	lr
    c536:	b530      	push	{r4, r5, lr}
    c538:	f44f 7460 	mov.w	r4, #896	; 0x380
    c53c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c540:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c544:	e71c      	b.n	c380 <__adddf3+0x138>
    c546:	bf00      	nop

0000c548 <__aeabi_ul2d>:
    c548:	ea50 0201 	orrs.w	r2, r0, r1
    c54c:	bf08      	it	eq
    c54e:	4770      	bxeq	lr
    c550:	b530      	push	{r4, r5, lr}
    c552:	f04f 0500 	mov.w	r5, #0
    c556:	e00a      	b.n	c56e <__aeabi_l2d+0x16>

0000c558 <__aeabi_l2d>:
    c558:	ea50 0201 	orrs.w	r2, r0, r1
    c55c:	bf08      	it	eq
    c55e:	4770      	bxeq	lr
    c560:	b530      	push	{r4, r5, lr}
    c562:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c566:	d502      	bpl.n	c56e <__aeabi_l2d+0x16>
    c568:	4240      	negs	r0, r0
    c56a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c56e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c572:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c576:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57a:	f43f aed8 	beq.w	c32e <__adddf3+0xe6>
    c57e:	f04f 0203 	mov.w	r2, #3
    c582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c586:	bf18      	it	ne
    c588:	3203      	addne	r2, #3
    c58a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58e:	bf18      	it	ne
    c590:	3203      	addne	r2, #3
    c592:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c596:	f1c2 0320 	rsb	r3, r2, #32
    c59a:	fa00 fc03 	lsl.w	ip, r0, r3
    c59e:	fa20 f002 	lsr.w	r0, r0, r2
    c5a2:	fa01 fe03 	lsl.w	lr, r1, r3
    c5a6:	ea40 000e 	orr.w	r0, r0, lr
    c5aa:	fa21 f102 	lsr.w	r1, r1, r2
    c5ae:	4414      	add	r4, r2
    c5b0:	e6bd      	b.n	c32e <__adddf3+0xe6>
    c5b2:	bf00      	nop

0000c5b4 <__aeabi_dmul>:
    c5b4:	b570      	push	{r4, r5, r6, lr}
    c5b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c5ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c5be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c5c2:	bf1d      	ittte	ne
    c5c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c5c8:	ea94 0f0c 	teqne	r4, ip
    c5cc:	ea95 0f0c 	teqne	r5, ip
    c5d0:	f000 f8de 	bleq	c790 <__aeabi_dmul+0x1dc>
    c5d4:	442c      	add	r4, r5
    c5d6:	ea81 0603 	eor.w	r6, r1, r3
    c5da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c5de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c5e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c5e6:	bf18      	it	ne
    c5e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c5f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c5f4:	d038      	beq.n	c668 <__aeabi_dmul+0xb4>
    c5f6:	fba0 ce02 	umull	ip, lr, r0, r2
    c5fa:	f04f 0500 	mov.w	r5, #0
    c5fe:	fbe1 e502 	umlal	lr, r5, r1, r2
    c602:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c606:	fbe0 e503 	umlal	lr, r5, r0, r3
    c60a:	f04f 0600 	mov.w	r6, #0
    c60e:	fbe1 5603 	umlal	r5, r6, r1, r3
    c612:	f09c 0f00 	teq	ip, #0
    c616:	bf18      	it	ne
    c618:	f04e 0e01 	orrne.w	lr, lr, #1
    c61c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c620:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c624:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c628:	d204      	bcs.n	c634 <__aeabi_dmul+0x80>
    c62a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c62e:	416d      	adcs	r5, r5
    c630:	eb46 0606 	adc.w	r6, r6, r6
    c634:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c638:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c63c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c640:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c644:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c648:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c64c:	bf88      	it	hi
    c64e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c652:	d81e      	bhi.n	c692 <__aeabi_dmul+0xde>
    c654:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c658:	bf08      	it	eq
    c65a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c65e:	f150 0000 	adcs.w	r0, r0, #0
    c662:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c666:	bd70      	pop	{r4, r5, r6, pc}
    c668:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c66c:	ea46 0101 	orr.w	r1, r6, r1
    c670:	ea40 0002 	orr.w	r0, r0, r2
    c674:	ea81 0103 	eor.w	r1, r1, r3
    c678:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c67c:	bfc2      	ittt	gt
    c67e:	ebd4 050c 	rsbsgt	r5, r4, ip
    c682:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c686:	bd70      	popgt	{r4, r5, r6, pc}
    c688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c68c:	f04f 0e00 	mov.w	lr, #0
    c690:	3c01      	subs	r4, #1
    c692:	f300 80ab 	bgt.w	c7ec <__aeabi_dmul+0x238>
    c696:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c69a:	bfde      	ittt	le
    c69c:	2000      	movle	r0, #0
    c69e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c6a2:	bd70      	pople	{r4, r5, r6, pc}
    c6a4:	f1c4 0400 	rsb	r4, r4, #0
    c6a8:	3c20      	subs	r4, #32
    c6aa:	da35      	bge.n	c718 <__aeabi_dmul+0x164>
    c6ac:	340c      	adds	r4, #12
    c6ae:	dc1b      	bgt.n	c6e8 <__aeabi_dmul+0x134>
    c6b0:	f104 0414 	add.w	r4, r4, #20
    c6b4:	f1c4 0520 	rsb	r5, r4, #32
    c6b8:	fa00 f305 	lsl.w	r3, r0, r5
    c6bc:	fa20 f004 	lsr.w	r0, r0, r4
    c6c0:	fa01 f205 	lsl.w	r2, r1, r5
    c6c4:	ea40 0002 	orr.w	r0, r0, r2
    c6c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c6cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c6d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c6d4:	fa21 f604 	lsr.w	r6, r1, r4
    c6d8:	eb42 0106 	adc.w	r1, r2, r6
    c6dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c6e0:	bf08      	it	eq
    c6e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c6e6:	bd70      	pop	{r4, r5, r6, pc}
    c6e8:	f1c4 040c 	rsb	r4, r4, #12
    c6ec:	f1c4 0520 	rsb	r5, r4, #32
    c6f0:	fa00 f304 	lsl.w	r3, r0, r4
    c6f4:	fa20 f005 	lsr.w	r0, r0, r5
    c6f8:	fa01 f204 	lsl.w	r2, r1, r4
    c6fc:	ea40 0002 	orr.w	r0, r0, r2
    c700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c708:	f141 0100 	adc.w	r1, r1, #0
    c70c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c710:	bf08      	it	eq
    c712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c716:	bd70      	pop	{r4, r5, r6, pc}
    c718:	f1c4 0520 	rsb	r5, r4, #32
    c71c:	fa00 f205 	lsl.w	r2, r0, r5
    c720:	ea4e 0e02 	orr.w	lr, lr, r2
    c724:	fa20 f304 	lsr.w	r3, r0, r4
    c728:	fa01 f205 	lsl.w	r2, r1, r5
    c72c:	ea43 0302 	orr.w	r3, r3, r2
    c730:	fa21 f004 	lsr.w	r0, r1, r4
    c734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c738:	fa21 f204 	lsr.w	r2, r1, r4
    c73c:	ea20 0002 	bic.w	r0, r0, r2
    c740:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c748:	bf08      	it	eq
    c74a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c74e:	bd70      	pop	{r4, r5, r6, pc}
    c750:	f094 0f00 	teq	r4, #0
    c754:	d10f      	bne.n	c776 <__aeabi_dmul+0x1c2>
    c756:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c75a:	0040      	lsls	r0, r0, #1
    c75c:	eb41 0101 	adc.w	r1, r1, r1
    c760:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c764:	bf08      	it	eq
    c766:	3c01      	subeq	r4, #1
    c768:	d0f7      	beq.n	c75a <__aeabi_dmul+0x1a6>
    c76a:	ea41 0106 	orr.w	r1, r1, r6
    c76e:	f095 0f00 	teq	r5, #0
    c772:	bf18      	it	ne
    c774:	4770      	bxne	lr
    c776:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c77a:	0052      	lsls	r2, r2, #1
    c77c:	eb43 0303 	adc.w	r3, r3, r3
    c780:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c784:	bf08      	it	eq
    c786:	3d01      	subeq	r5, #1
    c788:	d0f7      	beq.n	c77a <__aeabi_dmul+0x1c6>
    c78a:	ea43 0306 	orr.w	r3, r3, r6
    c78e:	4770      	bx	lr
    c790:	ea94 0f0c 	teq	r4, ip
    c794:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c798:	bf18      	it	ne
    c79a:	ea95 0f0c 	teqne	r5, ip
    c79e:	d00c      	beq.n	c7ba <__aeabi_dmul+0x206>
    c7a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c7a4:	bf18      	it	ne
    c7a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c7aa:	d1d1      	bne.n	c750 <__aeabi_dmul+0x19c>
    c7ac:	ea81 0103 	eor.w	r1, r1, r3
    c7b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c7b4:	f04f 0000 	mov.w	r0, #0
    c7b8:	bd70      	pop	{r4, r5, r6, pc}
    c7ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c7be:	bf06      	itte	eq
    c7c0:	4610      	moveq	r0, r2
    c7c2:	4619      	moveq	r1, r3
    c7c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c7c8:	d019      	beq.n	c7fe <__aeabi_dmul+0x24a>
    c7ca:	ea94 0f0c 	teq	r4, ip
    c7ce:	d102      	bne.n	c7d6 <__aeabi_dmul+0x222>
    c7d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c7d4:	d113      	bne.n	c7fe <__aeabi_dmul+0x24a>
    c7d6:	ea95 0f0c 	teq	r5, ip
    c7da:	d105      	bne.n	c7e8 <__aeabi_dmul+0x234>
    c7dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c7e0:	bf1c      	itt	ne
    c7e2:	4610      	movne	r0, r2
    c7e4:	4619      	movne	r1, r3
    c7e6:	d10a      	bne.n	c7fe <__aeabi_dmul+0x24a>
    c7e8:	ea81 0103 	eor.w	r1, r1, r3
    c7ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c7f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c7f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c7f8:	f04f 0000 	mov.w	r0, #0
    c7fc:	bd70      	pop	{r4, r5, r6, pc}
    c7fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c802:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c806:	bd70      	pop	{r4, r5, r6, pc}

0000c808 <__aeabi_ddiv>:
    c808:	b570      	push	{r4, r5, r6, lr}
    c80a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c80e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c812:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c816:	bf1d      	ittte	ne
    c818:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c81c:	ea94 0f0c 	teqne	r4, ip
    c820:	ea95 0f0c 	teqne	r5, ip
    c824:	f000 f8a7 	bleq	c976 <__aeabi_ddiv+0x16e>
    c828:	eba4 0405 	sub.w	r4, r4, r5
    c82c:	ea81 0e03 	eor.w	lr, r1, r3
    c830:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c834:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c838:	f000 8088 	beq.w	c94c <__aeabi_ddiv+0x144>
    c83c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c840:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c844:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c848:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c84c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c850:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c854:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c858:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c85c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c860:	429d      	cmp	r5, r3
    c862:	bf08      	it	eq
    c864:	4296      	cmpeq	r6, r2
    c866:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c86a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c86e:	d202      	bcs.n	c876 <__aeabi_ddiv+0x6e>
    c870:	085b      	lsrs	r3, r3, #1
    c872:	ea4f 0232 	mov.w	r2, r2, rrx
    c876:	1ab6      	subs	r6, r6, r2
    c878:	eb65 0503 	sbc.w	r5, r5, r3
    c87c:	085b      	lsrs	r3, r3, #1
    c87e:	ea4f 0232 	mov.w	r2, r2, rrx
    c882:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c886:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c88a:	ebb6 0e02 	subs.w	lr, r6, r2
    c88e:	eb75 0e03 	sbcs.w	lr, r5, r3
    c892:	bf22      	ittt	cs
    c894:	1ab6      	subcs	r6, r6, r2
    c896:	4675      	movcs	r5, lr
    c898:	ea40 000c 	orrcs.w	r0, r0, ip
    c89c:	085b      	lsrs	r3, r3, #1
    c89e:	ea4f 0232 	mov.w	r2, r2, rrx
    c8a2:	ebb6 0e02 	subs.w	lr, r6, r2
    c8a6:	eb75 0e03 	sbcs.w	lr, r5, r3
    c8aa:	bf22      	ittt	cs
    c8ac:	1ab6      	subcs	r6, r6, r2
    c8ae:	4675      	movcs	r5, lr
    c8b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c8b4:	085b      	lsrs	r3, r3, #1
    c8b6:	ea4f 0232 	mov.w	r2, r2, rrx
    c8ba:	ebb6 0e02 	subs.w	lr, r6, r2
    c8be:	eb75 0e03 	sbcs.w	lr, r5, r3
    c8c2:	bf22      	ittt	cs
    c8c4:	1ab6      	subcs	r6, r6, r2
    c8c6:	4675      	movcs	r5, lr
    c8c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c8cc:	085b      	lsrs	r3, r3, #1
    c8ce:	ea4f 0232 	mov.w	r2, r2, rrx
    c8d2:	ebb6 0e02 	subs.w	lr, r6, r2
    c8d6:	eb75 0e03 	sbcs.w	lr, r5, r3
    c8da:	bf22      	ittt	cs
    c8dc:	1ab6      	subcs	r6, r6, r2
    c8de:	4675      	movcs	r5, lr
    c8e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c8e4:	ea55 0e06 	orrs.w	lr, r5, r6
    c8e8:	d018      	beq.n	c91c <__aeabi_ddiv+0x114>
    c8ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c8ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c8f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c8f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c8fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c8fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c902:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c906:	d1c0      	bne.n	c88a <__aeabi_ddiv+0x82>
    c908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c90c:	d10b      	bne.n	c926 <__aeabi_ddiv+0x11e>
    c90e:	ea41 0100 	orr.w	r1, r1, r0
    c912:	f04f 0000 	mov.w	r0, #0
    c916:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c91a:	e7b6      	b.n	c88a <__aeabi_ddiv+0x82>
    c91c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c920:	bf04      	itt	eq
    c922:	4301      	orreq	r1, r0
    c924:	2000      	moveq	r0, #0
    c926:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c92a:	bf88      	it	hi
    c92c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c930:	f63f aeaf 	bhi.w	c692 <__aeabi_dmul+0xde>
    c934:	ebb5 0c03 	subs.w	ip, r5, r3
    c938:	bf04      	itt	eq
    c93a:	ebb6 0c02 	subseq.w	ip, r6, r2
    c93e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c942:	f150 0000 	adcs.w	r0, r0, #0
    c946:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c94a:	bd70      	pop	{r4, r5, r6, pc}
    c94c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c950:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c954:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c958:	bfc2      	ittt	gt
    c95a:	ebd4 050c 	rsbsgt	r5, r4, ip
    c95e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c962:	bd70      	popgt	{r4, r5, r6, pc}
    c964:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c968:	f04f 0e00 	mov.w	lr, #0
    c96c:	3c01      	subs	r4, #1
    c96e:	e690      	b.n	c692 <__aeabi_dmul+0xde>
    c970:	ea45 0e06 	orr.w	lr, r5, r6
    c974:	e68d      	b.n	c692 <__aeabi_dmul+0xde>
    c976:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c97a:	ea94 0f0c 	teq	r4, ip
    c97e:	bf08      	it	eq
    c980:	ea95 0f0c 	teqeq	r5, ip
    c984:	f43f af3b 	beq.w	c7fe <__aeabi_dmul+0x24a>
    c988:	ea94 0f0c 	teq	r4, ip
    c98c:	d10a      	bne.n	c9a4 <__aeabi_ddiv+0x19c>
    c98e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c992:	f47f af34 	bne.w	c7fe <__aeabi_dmul+0x24a>
    c996:	ea95 0f0c 	teq	r5, ip
    c99a:	f47f af25 	bne.w	c7e8 <__aeabi_dmul+0x234>
    c99e:	4610      	mov	r0, r2
    c9a0:	4619      	mov	r1, r3
    c9a2:	e72c      	b.n	c7fe <__aeabi_dmul+0x24a>
    c9a4:	ea95 0f0c 	teq	r5, ip
    c9a8:	d106      	bne.n	c9b8 <__aeabi_ddiv+0x1b0>
    c9aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c9ae:	f43f aefd 	beq.w	c7ac <__aeabi_dmul+0x1f8>
    c9b2:	4610      	mov	r0, r2
    c9b4:	4619      	mov	r1, r3
    c9b6:	e722      	b.n	c7fe <__aeabi_dmul+0x24a>
    c9b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c9bc:	bf18      	it	ne
    c9be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c9c2:	f47f aec5 	bne.w	c750 <__aeabi_dmul+0x19c>
    c9c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c9ca:	f47f af0d 	bne.w	c7e8 <__aeabi_dmul+0x234>
    c9ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c9d2:	f47f aeeb 	bne.w	c7ac <__aeabi_dmul+0x1f8>
    c9d6:	e712      	b.n	c7fe <__aeabi_dmul+0x24a>

0000c9d8 <__aeabi_d2f>:
    c9d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c9dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c9e0:	bf24      	itt	cs
    c9e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c9e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c9ea:	d90d      	bls.n	ca08 <__aeabi_d2f+0x30>
    c9ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c9f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c9f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c9f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c9fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    ca00:	bf08      	it	eq
    ca02:	f020 0001 	biceq.w	r0, r0, #1
    ca06:	4770      	bx	lr
    ca08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    ca0c:	d121      	bne.n	ca52 <__aeabi_d2f+0x7a>
    ca0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    ca12:	bfbc      	itt	lt
    ca14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    ca18:	4770      	bxlt	lr
    ca1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ca1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    ca22:	f1c2 0218 	rsb	r2, r2, #24
    ca26:	f1c2 0c20 	rsb	ip, r2, #32
    ca2a:	fa10 f30c 	lsls.w	r3, r0, ip
    ca2e:	fa20 f002 	lsr.w	r0, r0, r2
    ca32:	bf18      	it	ne
    ca34:	f040 0001 	orrne.w	r0, r0, #1
    ca38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    ca3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    ca40:	fa03 fc0c 	lsl.w	ip, r3, ip
    ca44:	ea40 000c 	orr.w	r0, r0, ip
    ca48:	fa23 f302 	lsr.w	r3, r3, r2
    ca4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    ca50:	e7cc      	b.n	c9ec <__aeabi_d2f+0x14>
    ca52:	ea7f 5362 	mvns.w	r3, r2, asr #21
    ca56:	d107      	bne.n	ca68 <__aeabi_d2f+0x90>
    ca58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    ca5c:	bf1e      	ittt	ne
    ca5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    ca62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    ca66:	4770      	bxne	lr
    ca68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    ca6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    ca70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    ca74:	4770      	bx	lr
    ca76:	bf00      	nop

0000ca78 <__aeabi_uldivmod>:
    ca78:	b953      	cbnz	r3, ca90 <__aeabi_uldivmod+0x18>
    ca7a:	b94a      	cbnz	r2, ca90 <__aeabi_uldivmod+0x18>
    ca7c:	2900      	cmp	r1, #0
    ca7e:	bf08      	it	eq
    ca80:	2800      	cmpeq	r0, #0
    ca82:	bf1c      	itt	ne
    ca84:	f04f 31ff 	movne.w	r1, #4294967295
    ca88:	f04f 30ff 	movne.w	r0, #4294967295
    ca8c:	f000 b96c 	b.w	cd68 <__aeabi_idiv0>
    ca90:	f1ad 0c08 	sub.w	ip, sp, #8
    ca94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    ca98:	f000 f806 	bl	caa8 <__udivmoddi4>
    ca9c:	f8dd e004 	ldr.w	lr, [sp, #4]
    caa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    caa4:	b004      	add	sp, #16
    caa6:	4770      	bx	lr

0000caa8 <__udivmoddi4>:
    caa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    caac:	9d08      	ldr	r5, [sp, #32]
    caae:	4604      	mov	r4, r0
    cab0:	4688      	mov	r8, r1
    cab2:	2b00      	cmp	r3, #0
    cab4:	d17d      	bne.n	cbb2 <__udivmoddi4+0x10a>
    cab6:	428a      	cmp	r2, r1
    cab8:	4617      	mov	r7, r2
    caba:	d93f      	bls.n	cb3c <__udivmoddi4+0x94>
    cabc:	fab2 f282 	clz	r2, r2
    cac0:	b142      	cbz	r2, cad4 <__udivmoddi4+0x2c>
    cac2:	f1c2 0020 	rsb	r0, r2, #32
    cac6:	4091      	lsls	r1, r2
    cac8:	4097      	lsls	r7, r2
    caca:	fa24 f000 	lsr.w	r0, r4, r0
    cace:	4094      	lsls	r4, r2
    cad0:	ea40 0801 	orr.w	r8, r0, r1
    cad4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    cad8:	0c23      	lsrs	r3, r4, #16
    cada:	fa1f fe87 	uxth.w	lr, r7
    cade:	fbb8 f6fc 	udiv	r6, r8, ip
    cae2:	fb0c 8116 	mls	r1, ip, r6, r8
    cae6:	fb06 f00e 	mul.w	r0, r6, lr
    caea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    caee:	4298      	cmp	r0, r3
    caf0:	d905      	bls.n	cafe <__udivmoddi4+0x56>
    caf2:	18fb      	adds	r3, r7, r3
    caf4:	d202      	bcs.n	cafc <__udivmoddi4+0x54>
    caf6:	4298      	cmp	r0, r3
    caf8:	f200 8124 	bhi.w	cd44 <__udivmoddi4+0x29c>
    cafc:	3e01      	subs	r6, #1
    cafe:	1a19      	subs	r1, r3, r0
    cb00:	b2a3      	uxth	r3, r4
    cb02:	fbb1 f0fc 	udiv	r0, r1, ip
    cb06:	fb0c 1110 	mls	r1, ip, r0, r1
    cb0a:	fb00 fe0e 	mul.w	lr, r0, lr
    cb0e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    cb12:	45a6      	cmp	lr, r4
    cb14:	d905      	bls.n	cb22 <__udivmoddi4+0x7a>
    cb16:	193c      	adds	r4, r7, r4
    cb18:	d202      	bcs.n	cb20 <__udivmoddi4+0x78>
    cb1a:	45a6      	cmp	lr, r4
    cb1c:	f200 810f 	bhi.w	cd3e <__udivmoddi4+0x296>
    cb20:	3801      	subs	r0, #1
    cb22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    cb26:	eba4 040e 	sub.w	r4, r4, lr
    cb2a:	2600      	movs	r6, #0
    cb2c:	b11d      	cbz	r5, cb36 <__udivmoddi4+0x8e>
    cb2e:	40d4      	lsrs	r4, r2
    cb30:	2300      	movs	r3, #0
    cb32:	e9c5 4300 	strd	r4, r3, [r5]
    cb36:	4631      	mov	r1, r6
    cb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cb3c:	b902      	cbnz	r2, cb40 <__udivmoddi4+0x98>
    cb3e:	deff      	udf	#255	; 0xff
    cb40:	fab2 f282 	clz	r2, r2
    cb44:	2a00      	cmp	r2, #0
    cb46:	d150      	bne.n	cbea <__udivmoddi4+0x142>
    cb48:	1bcb      	subs	r3, r1, r7
    cb4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cb4e:	fa1f f887 	uxth.w	r8, r7
    cb52:	2601      	movs	r6, #1
    cb54:	0c21      	lsrs	r1, r4, #16
    cb56:	fbb3 fcfe 	udiv	ip, r3, lr
    cb5a:	fb0e 301c 	mls	r0, lr, ip, r3
    cb5e:	460b      	mov	r3, r1
    cb60:	fb08 f90c 	mul.w	r9, r8, ip
    cb64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cb68:	4589      	cmp	r9, r1
    cb6a:	d90a      	bls.n	cb82 <__udivmoddi4+0xda>
    cb6c:	1879      	adds	r1, r7, r1
    cb6e:	bf2c      	ite	cs
    cb70:	2301      	movcs	r3, #1
    cb72:	2300      	movcc	r3, #0
    cb74:	4589      	cmp	r9, r1
    cb76:	d902      	bls.n	cb7e <__udivmoddi4+0xd6>
    cb78:	2b00      	cmp	r3, #0
    cb7a:	f000 80d9 	beq.w	cd30 <__udivmoddi4+0x288>
    cb7e:	f10c 3cff 	add.w	ip, ip, #4294967295
    cb82:	eba1 0109 	sub.w	r1, r1, r9
    cb86:	b2a3      	uxth	r3, r4
    cb88:	fbb1 f0fe 	udiv	r0, r1, lr
    cb8c:	fb0e 1110 	mls	r1, lr, r0, r1
    cb90:	fb08 f800 	mul.w	r8, r8, r0
    cb94:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    cb98:	45a0      	cmp	r8, r4
    cb9a:	d905      	bls.n	cba8 <__udivmoddi4+0x100>
    cb9c:	193c      	adds	r4, r7, r4
    cb9e:	d202      	bcs.n	cba6 <__udivmoddi4+0xfe>
    cba0:	45a0      	cmp	r8, r4
    cba2:	f200 80c9 	bhi.w	cd38 <__udivmoddi4+0x290>
    cba6:	3801      	subs	r0, #1
    cba8:	eba4 0408 	sub.w	r4, r4, r8
    cbac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    cbb0:	e7bc      	b.n	cb2c <__udivmoddi4+0x84>
    cbb2:	428b      	cmp	r3, r1
    cbb4:	d909      	bls.n	cbca <__udivmoddi4+0x122>
    cbb6:	2d00      	cmp	r5, #0
    cbb8:	f000 80b1 	beq.w	cd1e <__udivmoddi4+0x276>
    cbbc:	2600      	movs	r6, #0
    cbbe:	e9c5 0100 	strd	r0, r1, [r5]
    cbc2:	4630      	mov	r0, r6
    cbc4:	4631      	mov	r1, r6
    cbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cbca:	fab3 f683 	clz	r6, r3
    cbce:	2e00      	cmp	r6, #0
    cbd0:	d146      	bne.n	cc60 <__udivmoddi4+0x1b8>
    cbd2:	428b      	cmp	r3, r1
    cbd4:	f0c0 80a6 	bcc.w	cd24 <__udivmoddi4+0x27c>
    cbd8:	4282      	cmp	r2, r0
    cbda:	f240 80a3 	bls.w	cd24 <__udivmoddi4+0x27c>
    cbde:	4630      	mov	r0, r6
    cbe0:	2d00      	cmp	r5, #0
    cbe2:	d0a8      	beq.n	cb36 <__udivmoddi4+0x8e>
    cbe4:	e9c5 4800 	strd	r4, r8, [r5]
    cbe8:	e7a5      	b.n	cb36 <__udivmoddi4+0x8e>
    cbea:	4097      	lsls	r7, r2
    cbec:	f1c2 0320 	rsb	r3, r2, #32
    cbf0:	fa01 f002 	lsl.w	r0, r1, r2
    cbf4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cbf8:	40d9      	lsrs	r1, r3
    cbfa:	fa24 f303 	lsr.w	r3, r4, r3
    cbfe:	fa1f f887 	uxth.w	r8, r7
    cc02:	4094      	lsls	r4, r2
    cc04:	4303      	orrs	r3, r0
    cc06:	fbb1 f0fe 	udiv	r0, r1, lr
    cc0a:	0c1e      	lsrs	r6, r3, #16
    cc0c:	fb0e 1110 	mls	r1, lr, r0, r1
    cc10:	fb00 fc08 	mul.w	ip, r0, r8
    cc14:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    cc18:	458c      	cmp	ip, r1
    cc1a:	d909      	bls.n	cc30 <__udivmoddi4+0x188>
    cc1c:	1879      	adds	r1, r7, r1
    cc1e:	bf2c      	ite	cs
    cc20:	2601      	movcs	r6, #1
    cc22:	2600      	movcc	r6, #0
    cc24:	458c      	cmp	ip, r1
    cc26:	d902      	bls.n	cc2e <__udivmoddi4+0x186>
    cc28:	2e00      	cmp	r6, #0
    cc2a:	f000 8093 	beq.w	cd54 <__udivmoddi4+0x2ac>
    cc2e:	3801      	subs	r0, #1
    cc30:	eba1 010c 	sub.w	r1, r1, ip
    cc34:	b29b      	uxth	r3, r3
    cc36:	fbb1 f6fe 	udiv	r6, r1, lr
    cc3a:	fb0e 1116 	mls	r1, lr, r6, r1
    cc3e:	fb06 fc08 	mul.w	ip, r6, r8
    cc42:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    cc46:	458c      	cmp	ip, r1
    cc48:	d905      	bls.n	cc56 <__udivmoddi4+0x1ae>
    cc4a:	1879      	adds	r1, r7, r1
    cc4c:	d202      	bcs.n	cc54 <__udivmoddi4+0x1ac>
    cc4e:	458c      	cmp	ip, r1
    cc50:	f200 8087 	bhi.w	cd62 <__udivmoddi4+0x2ba>
    cc54:	3e01      	subs	r6, #1
    cc56:	eba1 030c 	sub.w	r3, r1, ip
    cc5a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    cc5e:	e779      	b.n	cb54 <__udivmoddi4+0xac>
    cc60:	f1c6 0720 	rsb	r7, r6, #32
    cc64:	fa03 f406 	lsl.w	r4, r3, r6
    cc68:	fa02 fc06 	lsl.w	ip, r2, r6
    cc6c:	fa01 fe06 	lsl.w	lr, r1, r6
    cc70:	40fa      	lsrs	r2, r7
    cc72:	fa20 f807 	lsr.w	r8, r0, r7
    cc76:	40f9      	lsrs	r1, r7
    cc78:	fa00 f306 	lsl.w	r3, r0, r6
    cc7c:	4322      	orrs	r2, r4
    cc7e:	ea48 040e 	orr.w	r4, r8, lr
    cc82:	ea4f 4812 	mov.w	r8, r2, lsr #16
    cc86:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    cc8a:	fa1f f982 	uxth.w	r9, r2
    cc8e:	fbb1 faf8 	udiv	sl, r1, r8
    cc92:	fb08 111a 	mls	r1, r8, sl, r1
    cc96:	fb0a f009 	mul.w	r0, sl, r9
    cc9a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    cc9e:	4570      	cmp	r0, lr
    cca0:	d90a      	bls.n	ccb8 <__udivmoddi4+0x210>
    cca2:	eb12 0e0e 	adds.w	lr, r2, lr
    cca6:	bf2c      	ite	cs
    cca8:	2101      	movcs	r1, #1
    ccaa:	2100      	movcc	r1, #0
    ccac:	4570      	cmp	r0, lr
    ccae:	d901      	bls.n	ccb4 <__udivmoddi4+0x20c>
    ccb0:	2900      	cmp	r1, #0
    ccb2:	d052      	beq.n	cd5a <__udivmoddi4+0x2b2>
    ccb4:	f10a 3aff 	add.w	sl, sl, #4294967295
    ccb8:	ebae 0e00 	sub.w	lr, lr, r0
    ccbc:	b2a4      	uxth	r4, r4
    ccbe:	fbbe f0f8 	udiv	r0, lr, r8
    ccc2:	fb08 ee10 	mls	lr, r8, r0, lr
    ccc6:	fb00 f909 	mul.w	r9, r0, r9
    ccca:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
    ccce:	45f1      	cmp	r9, lr
    ccd0:	d905      	bls.n	ccde <__udivmoddi4+0x236>
    ccd2:	eb12 0e0e 	adds.w	lr, r2, lr
    ccd6:	d201      	bcs.n	ccdc <__udivmoddi4+0x234>
    ccd8:	45f1      	cmp	r9, lr
    ccda:	d838      	bhi.n	cd4e <__udivmoddi4+0x2a6>
    ccdc:	3801      	subs	r0, #1
    ccde:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    cce2:	ebae 0e09 	sub.w	lr, lr, r9
    cce6:	fba0 890c 	umull	r8, r9, r0, ip
    ccea:	45ce      	cmp	lr, r9
    ccec:	4641      	mov	r1, r8
    ccee:	464c      	mov	r4, r9
    ccf0:	d302      	bcc.n	ccf8 <__udivmoddi4+0x250>
    ccf2:	d106      	bne.n	cd02 <__udivmoddi4+0x25a>
    ccf4:	4543      	cmp	r3, r8
    ccf6:	d204      	bcs.n	cd02 <__udivmoddi4+0x25a>
    ccf8:	3801      	subs	r0, #1
    ccfa:	ebb8 010c 	subs.w	r1, r8, ip
    ccfe:	eb69 0402 	sbc.w	r4, r9, r2
    cd02:	b315      	cbz	r5, cd4a <__udivmoddi4+0x2a2>
    cd04:	1a5a      	subs	r2, r3, r1
    cd06:	eb6e 0e04 	sbc.w	lr, lr, r4
    cd0a:	40f2      	lsrs	r2, r6
    cd0c:	fa0e f707 	lsl.w	r7, lr, r7
    cd10:	fa2e f306 	lsr.w	r3, lr, r6
    cd14:	2600      	movs	r6, #0
    cd16:	4317      	orrs	r7, r2
    cd18:	e9c5 7300 	strd	r7, r3, [r5]
    cd1c:	e70b      	b.n	cb36 <__udivmoddi4+0x8e>
    cd1e:	462e      	mov	r6, r5
    cd20:	4628      	mov	r0, r5
    cd22:	e708      	b.n	cb36 <__udivmoddi4+0x8e>
    cd24:	1a84      	subs	r4, r0, r2
    cd26:	eb61 0103 	sbc.w	r1, r1, r3
    cd2a:	2001      	movs	r0, #1
    cd2c:	4688      	mov	r8, r1
    cd2e:	e757      	b.n	cbe0 <__udivmoddi4+0x138>
    cd30:	f1ac 0c02 	sub.w	ip, ip, #2
    cd34:	4439      	add	r1, r7
    cd36:	e724      	b.n	cb82 <__udivmoddi4+0xda>
    cd38:	3802      	subs	r0, #2
    cd3a:	443c      	add	r4, r7
    cd3c:	e734      	b.n	cba8 <__udivmoddi4+0x100>
    cd3e:	3802      	subs	r0, #2
    cd40:	443c      	add	r4, r7
    cd42:	e6ee      	b.n	cb22 <__udivmoddi4+0x7a>
    cd44:	3e02      	subs	r6, #2
    cd46:	443b      	add	r3, r7
    cd48:	e6d9      	b.n	cafe <__udivmoddi4+0x56>
    cd4a:	462e      	mov	r6, r5
    cd4c:	e6f3      	b.n	cb36 <__udivmoddi4+0x8e>
    cd4e:	3802      	subs	r0, #2
    cd50:	4496      	add	lr, r2
    cd52:	e7c4      	b.n	ccde <__udivmoddi4+0x236>
    cd54:	3802      	subs	r0, #2
    cd56:	4439      	add	r1, r7
    cd58:	e76a      	b.n	cc30 <__udivmoddi4+0x188>
    cd5a:	f1aa 0a02 	sub.w	sl, sl, #2
    cd5e:	4496      	add	lr, r2
    cd60:	e7aa      	b.n	ccb8 <__udivmoddi4+0x210>
    cd62:	3e02      	subs	r6, #2
    cd64:	4439      	add	r1, r7
    cd66:	e776      	b.n	cc56 <__udivmoddi4+0x1ae>

0000cd68 <__aeabi_idiv0>:
    cd68:	4770      	bx	lr
    cd6a:	bf00      	nop

0000cd6c <strcmp>:
    cd6c:	f810 2b01 	ldrb.w	r2, [r0], #1
    cd70:	f811 3b01 	ldrb.w	r3, [r1], #1
    cd74:	2a01      	cmp	r2, #1
    cd76:	bf28      	it	cs
    cd78:	429a      	cmpcs	r2, r3
    cd7a:	d0f7      	beq.n	cd6c <strcmp>
    cd7c:	1ad0      	subs	r0, r2, r3
    cd7e:	4770      	bx	lr

0000cd80 <strlen>:
    cd80:	4603      	mov	r3, r0
    cd82:	f813 2b01 	ldrb.w	r2, [r3], #1
    cd86:	2a00      	cmp	r2, #0
    cd88:	d1fb      	bne.n	cd82 <strlen+0x2>
    cd8a:	1a18      	subs	r0, r3, r0
    cd8c:	3801      	subs	r0, #1
    cd8e:	4770      	bx	lr

0000cd90 <dn_hdlc_init>:
//=========================== public ==========================================

/**
\brief Setting up the instance.
*/
void dn_hdlc_init(dn_hdlc_rxFrame_cbt rxFrame_cb) {
    cd90:	b538      	push	{r3, r4, r5, lr}
    cd92:	4604      	mov	r4, r0
   // reset local variables
   memset(&dn_hdlc_vars,   0, sizeof(dn_hdlc_vars));
    cd94:	4d05      	ldr	r5, [pc, #20]	; (cdac <dn_hdlc_init+0x1c>)
    cd96:	228c      	movs	r2, #140	; 0x8c
    cd98:	1d28      	adds	r0, r5, #4
    cd9a:	2100      	movs	r1, #0
    cd9c:	f00e fe83 	bl	1baa6 <memset>
   
   // store params
   dn_hdlc_vars.rxFrame_cb = rxFrame_cb;
    cda0:	602c      	str	r4, [r5, #0]
   
   // initialize UART
   dn_uart_init(dn_hdlc_rxByte);
    cda2:	4803      	ldr	r0, [pc, #12]	; (cdb0 <dn_hdlc_init+0x20>)
}
    cda4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dn_uart_init(dn_hdlc_rxByte);
    cda8:	f000 bc52 	b.w	d650 <dn_uart_init>
    cdac:	20014d00 	.word	0x20014d00
    cdb0:	0000cea5 	.word	0x0000cea5

0000cdb4 <dn_hdlc_outputOpen>:
/**
\brief Start an HDLC frame in the output buffer.
*/
void dn_hdlc_outputOpen() {
   // initialize the value of the CRC
   dn_hdlc_vars.outputCrc = DN_HDLC_CRCINIT;
    cdb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cdb8:	4b02      	ldr	r3, [pc, #8]	; (cdc4 <dn_hdlc_outputOpen+0x10>)
   
   // send opening HDLC flag
   dn_uart_txByte(DN_HDLC_FLAG);
    cdba:	207e      	movs	r0, #126	; 0x7e
   dn_hdlc_vars.outputCrc = DN_HDLC_CRCINIT;
    cdbc:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
   dn_uart_txByte(DN_HDLC_FLAG);
    cdc0:	f000 bc66 	b.w	d690 <dn_uart_txByte>
    cdc4:	20014d00 	.word	0x20014d00

0000cdc8 <dn_hdlc_inputOpen>:
/**
\brief Start an HDLC frame in the input buffer.
*/
void dn_hdlc_inputOpen() {
   // reset the input buffer index
   dn_hdlc_vars.inputBufFill = 0;
    cdc8:	2200      	movs	r2, #0
    cdca:	4b03      	ldr	r3, [pc, #12]	; (cdd8 <dn_hdlc_inputOpen+0x10>)
    cdcc:	729a      	strb	r2, [r3, #10]
   
   // initialize the value of the CRC
   dn_hdlc_vars.inputCrc = DN_HDLC_CRCINIT;
    cdce:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cdd2:	811a      	strh	r2, [r3, #8]
}
    cdd4:	4770      	bx	lr
    cdd6:	bf00      	nop
    cdd8:	20014d00 	.word	0x20014d00

0000cddc <dn_hdlc_inputClose>:
\brief Finalize the incoming HDLC frame.
*/
void dn_hdlc_inputClose() {
   
   // verify the validity of the frame
   if (dn_hdlc_vars.inputCrc==DN_HDLC_CRCGOOD) {
    cddc:	f24f 02b8 	movw	r2, #61624	; 0xf0b8
    cde0:	4b05      	ldr	r3, [pc, #20]	; (cdf8 <dn_hdlc_inputClose+0x1c>)
    cde2:	8919      	ldrh	r1, [r3, #8]
    cde4:	4291      	cmp	r1, r2
      dn_hdlc_vars.inputBufFill    -= 2;
   } else {
      // the CRC is incorrect
      
      // drop the incoming fram
      dn_hdlc_vars.inputBufFill     = 0;
    cde6:	bf11      	iteee	ne
    cde8:	2200      	movne	r2, #0
      dn_hdlc_vars.inputBufFill    -= 2;
    cdea:	7a9a      	ldrbeq	r2, [r3, #10]
    cdec:	3a02      	subeq	r2, #2
    cdee:	b2d2      	uxtbeq	r2, r2
    cdf0:	729a      	strb	r2, [r3, #10]
   }
   
   // reset escaping
   dn_hdlc_vars.inputEscaping = FALSE;
    cdf2:	2200      	movs	r2, #0
    cdf4:	719a      	strb	r2, [r3, #6]
}
    cdf6:	4770      	bx	lr
    cdf8:	20014d00 	.word	0x20014d00

0000cdfc <dn_hdlc_crcIteration>:
\param[in] b   The new byte.

\return The updated CRC running value.
*/
uint16_t dn_hdlc_crcIteration(uint16_t crc, uint8_t b) {
   return (crc >> 8) ^ dn_hdlc_fcstab[(crc ^ b) & 0xff];
    cdfc:	4041      	eors	r1, r0
    cdfe:	4b03      	ldr	r3, [pc, #12]	; (ce0c <dn_hdlc_crcIteration+0x10>)
    ce00:	b2c9      	uxtb	r1, r1
    ce02:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
}
    ce06:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
    ce0a:	4770      	bx	lr
    ce0c:	0001c5c0 	.word	0x0001c5c0

0000ce10 <dn_hdlc_outputWrite>:
   dn_hdlc_vars.outputCrc = dn_hdlc_crcIteration(dn_hdlc_vars.outputCrc,b);
    ce10:	4a0b      	ldr	r2, [pc, #44]	; (ce40 <dn_hdlc_outputWrite+0x30>)
void dn_hdlc_outputWrite(uint8_t b) {
    ce12:	b510      	push	{r4, lr}
    ce14:	4604      	mov	r4, r0
   dn_hdlc_vars.outputCrc = dn_hdlc_crcIteration(dn_hdlc_vars.outputCrc,b);
    ce16:	4601      	mov	r1, r0
    ce18:	f8b2 008c 	ldrh.w	r0, [r2, #140]	; 0x8c
    ce1c:	f7ff ffee 	bl	cdfc <dn_hdlc_crcIteration>
   if (b==DN_HDLC_FLAG || b==DN_HDLC_ESCAPE) {
    ce20:	f1a4 037d 	sub.w	r3, r4, #125	; 0x7d
    ce24:	2b01      	cmp	r3, #1
   dn_hdlc_vars.outputCrc = dn_hdlc_crcIteration(dn_hdlc_vars.outputCrc,b);
    ce26:	f8a2 008c 	strh.w	r0, [r2, #140]	; 0x8c
   if (b==DN_HDLC_FLAG || b==DN_HDLC_ESCAPE) {
    ce2a:	d804      	bhi.n	ce36 <dn_hdlc_outputWrite+0x26>
      dn_uart_txByte(DN_HDLC_ESCAPE);
    ce2c:	207d      	movs	r0, #125	; 0x7d
    ce2e:	f000 fc2f 	bl	d690 <dn_uart_txByte>
      b = b^DN_HDLC_ESCAPE_MASK;
    ce32:	f084 0420 	eor.w	r4, r4, #32
   dn_uart_txByte(b);
    ce36:	4620      	mov	r0, r4
}
    ce38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dn_uart_txByte(b);
    ce3c:	f000 bc28 	b.w	d690 <dn_uart_txByte>
    ce40:	20014d00 	.word	0x20014d00

0000ce44 <dn_hdlc_outputClose>:
   finalCrc   = ~dn_hdlc_vars.outputCrc;
    ce44:	4b09      	ldr	r3, [pc, #36]	; (ce6c <dn_hdlc_outputClose+0x28>)
void dn_hdlc_outputClose() {
    ce46:	b510      	push	{r4, lr}
   finalCrc   = ~dn_hdlc_vars.outputCrc;
    ce48:	f8b3 008c 	ldrh.w	r0, [r3, #140]	; 0x8c
    ce4c:	43c0      	mvns	r0, r0
    ce4e:	b284      	uxth	r4, r0
   dn_hdlc_outputWrite((finalCrc>>0)&0xff);
    ce50:	b2c0      	uxtb	r0, r0
    ce52:	f7ff ffdd 	bl	ce10 <dn_hdlc_outputWrite>
   dn_hdlc_outputWrite((finalCrc>>8)&0xff);
    ce56:	0a20      	lsrs	r0, r4, #8
    ce58:	f7ff ffda 	bl	ce10 <dn_hdlc_outputWrite>
   dn_uart_txByte(DN_HDLC_FLAG);
    ce5c:	207e      	movs	r0, #126	; 0x7e
    ce5e:	f000 fc17 	bl	d690 <dn_uart_txByte>
}
    ce62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dn_uart_txFlush();
    ce66:	f000 bc1f 	b.w	d6a8 <dn_uart_txFlush>
    ce6a:	bf00      	nop
    ce6c:	20014d00 	.word	0x20014d00

0000ce70 <dn_hdlc_inputWrite>:
   if (b==DN_HDLC_ESCAPE) {
    ce70:	287d      	cmp	r0, #125	; 0x7d
void dn_hdlc_inputWrite(uint8_t b) {
    ce72:	b508      	push	{r3, lr}
    ce74:	4a0a      	ldr	r2, [pc, #40]	; (cea0 <dn_hdlc_inputWrite+0x30>)
   if (b==DN_HDLC_ESCAPE) {
    ce76:	d102      	bne.n	ce7e <dn_hdlc_inputWrite+0xe>
      dn_hdlc_vars.inputEscaping = TRUE;
    ce78:	2301      	movs	r3, #1
    ce7a:	7193      	strb	r3, [r2, #6]
}
    ce7c:	bd08      	pop	{r3, pc}
      if (dn_hdlc_vars.inputEscaping==TRUE) {
    ce7e:	7993      	ldrb	r3, [r2, #6]
    ce80:	b11b      	cbz	r3, ce8a <dn_hdlc_inputWrite+0x1a>
         dn_hdlc_vars.inputEscaping = FALSE;
    ce82:	2300      	movs	r3, #0
         b = b^DN_HDLC_ESCAPE_MASK;
    ce84:	f080 0020 	eor.w	r0, r0, #32
         dn_hdlc_vars.inputEscaping = FALSE;
    ce88:	7193      	strb	r3, [r2, #6]
      dn_hdlc_vars.inputBuf[dn_hdlc_vars.inputBufFill] = b;
    ce8a:	7a93      	ldrb	r3, [r2, #10]
    ce8c:	18d1      	adds	r1, r2, r3
    ce8e:	72c8      	strb	r0, [r1, #11]
      dn_hdlc_vars.inputBufFill++;
    ce90:	3301      	adds	r3, #1
      dn_hdlc_vars.inputCrc = dn_hdlc_crcIteration(dn_hdlc_vars.inputCrc,b);
    ce92:	4601      	mov	r1, r0
    ce94:	8910      	ldrh	r0, [r2, #8]
      dn_hdlc_vars.inputBufFill++;
    ce96:	7293      	strb	r3, [r2, #10]
      dn_hdlc_vars.inputCrc = dn_hdlc_crcIteration(dn_hdlc_vars.inputCrc,b);
    ce98:	f7ff ffb0 	bl	cdfc <dn_hdlc_crcIteration>
    ce9c:	8110      	strh	r0, [r2, #8]
}
    ce9e:	e7ed      	b.n	ce7c <dn_hdlc_inputWrite+0xc>
    cea0:	20014d00 	.word	0x20014d00

0000cea4 <dn_hdlc_rxByte>:
void dn_hdlc_rxByte(uint8_t rxbyte) {
    cea4:	b538      	push	{r3, r4, r5, lr}
         dn_hdlc_vars.busyReceiving==FALSE  &&
    cea6:	4c18      	ldr	r4, [pc, #96]	; (cf08 <dn_hdlc_rxByte+0x64>)
void dn_hdlc_rxByte(uint8_t rxbyte) {
    cea8:	4605      	mov	r5, r0
   dn_lock();
    ceaa:	f00b fa53 	bl	18354 <dn_lock>
   if        (
    ceae:	7963      	ldrb	r3, [r4, #5]
    ceb0:	b983      	cbnz	r3, ced4 <dn_hdlc_rxByte+0x30>
         dn_hdlc_vars.busyReceiving==FALSE  &&
    ceb2:	7923      	ldrb	r3, [r4, #4]
    ceb4:	2b7e      	cmp	r3, #126	; 0x7e
    ceb6:	d108      	bne.n	ceca <dn_hdlc_rxByte+0x26>
         dn_hdlc_vars.lastRxByte==DN_HDLC_FLAG &&
    ceb8:	2d7e      	cmp	r5, #126	; 0x7e
    ceba:	d006      	beq.n	ceca <dn_hdlc_rxByte+0x26>
      dn_hdlc_vars.busyReceiving       = TRUE;
    cebc:	2301      	movs	r3, #1
    cebe:	7163      	strb	r3, [r4, #5]
      dn_hdlc_inputOpen();
    cec0:	f7ff ff82 	bl	cdc8 <dn_hdlc_inputOpen>
      dn_hdlc_inputWrite(rxbyte);
    cec4:	4628      	mov	r0, r5
    cec6:	f7ff ffd3 	bl	ce70 <dn_hdlc_inputWrite>
   dn_hdlc_vars.lastRxByte = rxbyte;
    ceca:	7125      	strb	r5, [r4, #4]
}
    cecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dn_unlock();
    ced0:	f00b ba41 	b.w	18356 <dn_unlock>
         dn_hdlc_vars.busyReceiving==TRUE   &&
    ced4:	2d7e      	cmp	r5, #126	; 0x7e
    ced6:	d00a      	beq.n	ceee <dn_hdlc_rxByte+0x4a>
      dn_hdlc_inputWrite(rxbyte);
    ced8:	4628      	mov	r0, r5
    ceda:	f7ff ffc9 	bl	ce70 <dn_hdlc_inputWrite>
      if (dn_hdlc_vars.inputBufFill+1>DN_HDLC_INPUT_BUFFER_SIZE) {
    cede:	7aa3      	ldrb	r3, [r4, #10]
    cee0:	3301      	adds	r3, #1
    cee2:	2b80      	cmp	r3, #128	; 0x80
    cee4:	ddf1      	ble.n	ceca <dn_hdlc_rxByte+0x26>
         dn_hdlc_vars.inputBufFill       = 0;
    cee6:	2300      	movs	r3, #0
    cee8:	72a3      	strb	r3, [r4, #10]
      dn_hdlc_vars.busyReceiving = FALSE;
    ceea:	7163      	strb	r3, [r4, #5]
    ceec:	e7ed      	b.n	ceca <dn_hdlc_rxByte+0x26>
      dn_hdlc_inputClose();
    ceee:	f7ff ff75 	bl	cddc <dn_hdlc_inputClose>
      if (dn_hdlc_vars.inputBufFill==0) {
    cef2:	7aa1      	ldrb	r1, [r4, #10]
    cef4:	b129      	cbz	r1, cf02 <dn_hdlc_rxByte+0x5e>
         dn_hdlc_vars.rxFrame_cb(&dn_hdlc_vars.inputBuf[0],dn_hdlc_vars.inputBufFill);
    cef6:	4620      	mov	r0, r4
    cef8:	f850 3b0b 	ldr.w	r3, [r0], #11
    cefc:	4798      	blx	r3
         dn_hdlc_vars.inputBufFill=0;
    cefe:	2300      	movs	r3, #0
    cf00:	72a3      	strb	r3, [r4, #10]
      dn_hdlc_vars.busyReceiving = FALSE;
    cf02:	2300      	movs	r3, #0
    cf04:	e7f1      	b.n	ceea <dn_hdlc_rxByte+0x46>
    cf06:	bf00      	nop
    cf08:	20014d00 	.word	0x20014d00

0000cf0c <dn_ipmg_rxSerialRequest>:
   uint8_t  notifType;
   uint8_t  subNotifType;
   uint32_t eventId;
   
   // abort if not a notification
   if (cmdId!=CMDID_NOTIFICATION) {
    cf0c:	2814      	cmp	r0, #20
void dn_ipmg_rxSerialRequest(uint8_t cmdId, uint8_t flags, uint8_t* payload, uint8_t len) {
    cf0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cf12:	4615      	mov	r5, r2
   if (cmdId!=CMDID_NOTIFICATION) {
    cf14:	d140      	bne.n	cf98 <dn_ipmg_rxSerialRequest+0x8c>
      return;
   }
   
   // abort no space for notifType
   if (len<DN_MIN_NOTIF_LEN) {
    cf16:	2b00      	cmp	r3, #0
    cf18:	d03e      	beq.n	cf98 <dn_ipmg_rxSerialRequest+0x8c>
      return;
   }
   
   notifType  = payload[0];
   payload    = &payload[1];
    cf1a:	4611      	mov	r1, r2
   len       -= 1;
    cf1c:	b25c      	sxtb	r4, r3
    cf1e:	f811 3b01 	ldrb.w	r3, [r1], #1
    cf22:	1e66      	subs	r6, r4, #1
    cf24:	3b01      	subs	r3, #1
    cf26:	b2f6      	uxtb	r6, r6
   
   // parse notification
   switch(notifType) {
    cf28:	2b05      	cmp	r3, #5
    cf2a:	d835      	bhi.n	cf98 <dn_ipmg_rxSerialRequest+0x8c>
    cf2c:	e8df f013 	tbh	[pc, r3, lsl #1]
    cf30:	01440006 	.word	0x01440006
    cf34:	015c0034 	.word	0x015c0034
    cf38:	01b4018e 	.word	0x01b4018e
      case DN_NOTIFID_NOTIFEVENT:

         // abort no space for subNotifType
         if (len<DN_MIN_EVENT_LEN) {
    cf3c:	2e04      	cmp	r6, #4
    cf3e:	d92b      	bls.n	cf98 <dn_ipmg_rxSerialRequest+0x8c>
            return;
         }
         
         // get subNotifType
         dn_read_uint32_t(&eventId,&payload[0]);
    cf40:	a801      	add	r0, sp, #4
    cf42:	f00b f9ea 	bl	1831a <dn_read_uint32_t>
         subNotifType   = payload[4];
         payload        = &payload[5];
    cf46:	796a      	ldrb	r2, [r5, #5]
         len           -= 5;
    cf48:	1fa3      	subs	r3, r4, #6
         payload        = &payload[5];
    cf4a:	1da9      	adds	r1, r5, #6
         len           -= 5;
    cf4c:	b2db      	uxtb	r3, r3
         
         switch (subNotifType) {
    cf4e:	2a0e      	cmp	r2, #14
    cf50:	d822      	bhi.n	cf98 <dn_ipmg_rxSerialRequest+0x8c>
    cf52:	e8df f012 	tbh	[pc, r2, lsl #1]
    cf56:	000f      	.short	0x000f
    cf58:	002d0024 	.word	0x002d0024
    cf5c:	004f003e 	.word	0x004f003e
    cf60:	00710060 	.word	0x00710060
    cf64:	00210098 	.word	0x00210098
    cf68:	00bb0021 	.word	0x00bb0021
    cf6c:	00ef00d5 	.word	0x00ef00d5
    cf70:	01190101 	.word	0x01190101
            case DN_EVENTID_EVENTMOTERESET:
               
               // verify len
               if (len<DN_EVENTMOTERESET_NOTIF_LEN) {
    cf74:	2b07      	cmp	r3, #7
    cf76:	d90f      	bls.n	cf98 <dn_ipmg_rxSerialRequest+0x8c>
                   return;
               }
               
               // cast notifBuf
               notif_eventMoteReset = (dn_ipmg_eventMoteReset_nt*)dn_ipmg_vars.notifBuf;
    cf78:	48d3      	ldr	r0, [pc, #844]	; (d2c8 <dn_ipmg_rxSerialRequest+0x3bc>)
               
               notif_eventMoteReset->eventId = eventId;
    cf7a:	9a01      	ldr	r2, [sp, #4]
               notif_eventMoteReset = (dn_ipmg_eventMoteReset_nt*)dn_ipmg_vars.notifBuf;
    cf7c:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
               notif_eventMoteReset->eventId = eventId;
    cf80:	4623      	mov	r3, r4
    cf82:	f843 2b04 	str.w	r2, [r3], #4
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    cf86:	680a      	ldr	r2, [r1, #0]
    cf88:	6062      	str	r2, [r4, #4]
    cf8a:	684a      	ldr	r2, [r1, #4]
               // parse the notification
               memcpy(&notif_eventMoteReset->macAddress[0],&payload[DN_EVENTMOTERESET_NOTIF_OFFS_MACADDRESS],8);
               
               // call the notif callback
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTMOTERESET);
    cf8c:	2100      	movs	r1, #0
    cf8e:	605a      	str	r2, [r3, #4]
    cf90:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    cf94:	2001      	movs	r0, #1
         memcpy(&notif_notifHealthReport->macAddress[0],&payload[DN_NOTIFHEALTHREPORT_NOTIF_OFFS_MACADDRESS],8);
         notif_notifHealthReport->payloadLen = len-DN_NOTIFHEALTHREPORT_NOTIF_OFFS_PAYLOAD;
         memcpy(&notif_notifHealthReport->payload[0],&payload[DN_NOTIFHEALTHREPORT_NOTIF_OFFS_PAYLOAD],len-DN_NOTIFHEALTHREPORT_NOTIF_OFFS_PAYLOAD);
         
         // call the notif callback
         dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFHEALTHREPORT,DN_SUBCMDID_NONE);
    cf96:	4798      	blx	r3
         
      default:
         // unknown notifType
         return;
   }
}
    cf98:	b002      	add	sp, #8
    cf9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               notif_eventNetworkReset = (dn_ipmg_eventNetworkReset_nt*)dn_ipmg_vars.notifBuf;
    cf9e:	4bca      	ldr	r3, [pc, #808]	; (d2c8 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventNetworkReset->eventId = eventId;
    cfa0:	9901      	ldr	r1, [sp, #4]
    cfa2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTNETWORKRESET);
    cfa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
               notif_eventNetworkReset->eventId = eventId;
    cfaa:	6011      	str	r1, [r2, #0]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTNETWORKRESET);
    cfac:	2101      	movs	r1, #1
    cfae:	e7f1      	b.n	cf94 <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTCOMMANDFINISHED_NOTIF_LEN) {
    cfb0:	2b04      	cmp	r3, #4
    cfb2:	d9f1      	bls.n	cf98 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventCommandFinished = (dn_ipmg_eventCommandFinished_nt*)dn_ipmg_vars.notifBuf;
    cfb4:	4cc4      	ldr	r4, [pc, #784]	; (d2c8 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventCommandFinished->eventId = eventId;
    cfb6:	9b01      	ldr	r3, [sp, #4]
               notif_eventCommandFinished = (dn_ipmg_eventCommandFinished_nt*)dn_ipmg_vars.notifBuf;
    cfb8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
               notif_eventCommandFinished->eventId = eventId;
    cfbc:	4630      	mov	r0, r6
    cfbe:	f840 3b04 	str.w	r3, [r0], #4
               dn_read_uint32_t(&notif_eventCommandFinished->callbackId,&payload[DN_EVENTCOMMANDFINISHED_NOTIF_OFFS_CALLBACKID]);
    cfc2:	f00b f9aa 	bl	1831a <dn_read_uint32_t>
               notif_eventCommandFinished->rc = payload[DN_EVENTCOMMANDFINISHED_NOTIF_OFFS_RC];
    cfc6:	7aab      	ldrb	r3, [r5, #10]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTCOMMANDFINISHED);
    cfc8:	2102      	movs	r1, #2
               notif_eventCommandFinished->rc = payload[DN_EVENTCOMMANDFINISHED_NOTIF_OFFS_RC];
    cfca:	7233      	strb	r3, [r6, #8]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTCOMMANDFINISHED);
    cfcc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    cfd0:	e7e0      	b.n	cf94 <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTMOTEJOIN_NOTIF_LEN) {
    cfd2:	2b07      	cmp	r3, #7
    cfd4:	d9e0      	bls.n	cf98 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventMoteJoin = (dn_ipmg_eventMoteJoin_nt*)dn_ipmg_vars.notifBuf;
    cfd6:	48bc      	ldr	r0, [pc, #752]	; (d2c8 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventMoteJoin->eventId = eventId;
    cfd8:	9a01      	ldr	r2, [sp, #4]
               notif_eventMoteJoin = (dn_ipmg_eventMoteJoin_nt*)dn_ipmg_vars.notifBuf;
    cfda:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
               notif_eventMoteJoin->eventId = eventId;
    cfde:	4623      	mov	r3, r4
    cfe0:	f843 2b04 	str.w	r2, [r3], #4
    cfe4:	680a      	ldr	r2, [r1, #0]
    cfe6:	6062      	str	r2, [r4, #4]
    cfe8:	684a      	ldr	r2, [r1, #4]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTMOTEJOIN);
    cfea:	2103      	movs	r1, #3
    cfec:	605a      	str	r2, [r3, #4]
    cfee:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    cff2:	e7cf      	b.n	cf94 <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTMOTEOPERATIONAL_NOTIF_LEN) {
    cff4:	2b07      	cmp	r3, #7
    cff6:	d9cf      	bls.n	cf98 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventMoteOperational = (dn_ipmg_eventMoteOperational_nt*)dn_ipmg_vars.notifBuf;
    cff8:	48b3      	ldr	r0, [pc, #716]	; (d2c8 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventMoteOperational->eventId = eventId;
    cffa:	9a01      	ldr	r2, [sp, #4]
               notif_eventMoteOperational = (dn_ipmg_eventMoteOperational_nt*)dn_ipmg_vars.notifBuf;
    cffc:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
               notif_eventMoteOperational->eventId = eventId;
    d000:	4623      	mov	r3, r4
    d002:	f843 2b04 	str.w	r2, [r3], #4
    d006:	680a      	ldr	r2, [r1, #0]
    d008:	6062      	str	r2, [r4, #4]
    d00a:	684a      	ldr	r2, [r1, #4]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTMOTEOPERATIONAL);
    d00c:	2104      	movs	r1, #4
    d00e:	605a      	str	r2, [r3, #4]
    d010:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    d014:	e7be      	b.n	cf94 <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTMOTELOST_NOTIF_LEN) {
    d016:	2b07      	cmp	r3, #7
    d018:	d9be      	bls.n	cf98 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventMoteLost = (dn_ipmg_eventMoteLost_nt*)dn_ipmg_vars.notifBuf;
    d01a:	48ab      	ldr	r0, [pc, #684]	; (d2c8 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventMoteLost->eventId = eventId;
    d01c:	9a01      	ldr	r2, [sp, #4]
               notif_eventMoteLost = (dn_ipmg_eventMoteLost_nt*)dn_ipmg_vars.notifBuf;
    d01e:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
               notif_eventMoteLost->eventId = eventId;
    d022:	4623      	mov	r3, r4
    d024:	f843 2b04 	str.w	r2, [r3], #4
    d028:	680a      	ldr	r2, [r1, #0]
    d02a:	6062      	str	r2, [r4, #4]
    d02c:	684a      	ldr	r2, [r1, #4]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTMOTELOST);
    d02e:	2105      	movs	r1, #5
    d030:	605a      	str	r2, [r3, #4]
    d032:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    d036:	e7ad      	b.n	cf94 <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTNETWORKTIME_NOTIF_LEN) {
    d038:	2b16      	cmp	r3, #22
    d03a:	d9ad      	bls.n	cf98 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventNetworkTime = (dn_ipmg_eventNetworkTime_nt*)dn_ipmg_vars.notifBuf;
    d03c:	4ea2      	ldr	r6, [pc, #648]	; (d2c8 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventNetworkTime->eventId = eventId;
    d03e:	9b01      	ldr	r3, [sp, #4]
               notif_eventNetworkTime = (dn_ipmg_eventNetworkTime_nt*)dn_ipmg_vars.notifBuf;
    d040:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
               notif_eventNetworkTime->eventId = eventId;
    d044:	4620      	mov	r0, r4
    d046:	f840 3b04 	str.w	r3, [r0], #4
               dn_read_uint32_t(&notif_eventNetworkTime->uptime,&payload[DN_EVENTNETWORKTIME_NOTIF_OFFS_UPTIME]);
    d04a:	f00b f966 	bl	1831a <dn_read_uint32_t>
    d04e:	462a      	mov	r2, r5
    d050:	f852 3f0a 	ldr.w	r3, [r2, #10]!
               dn_read_uint32_t(&notif_eventNetworkTime->utcUsecs,&payload[DN_EVENTNETWORKTIME_NOTIF_OFFS_UTCUSECS]);
    d054:	f105 0112 	add.w	r1, r5, #18
    d058:	60a3      	str	r3, [r4, #8]
    d05a:	6853      	ldr	r3, [r2, #4]
    d05c:	f104 0010 	add.w	r0, r4, #16
    d060:	60e3      	str	r3, [r4, #12]
    d062:	f00b f95a 	bl	1831a <dn_read_uint32_t>
    d066:	462b      	mov	r3, r5
    d068:	f853 2f16 	ldr.w	r2, [r3, #22]!
               dn_read_uint16_t(&notif_eventNetworkTime->asnOffset,&payload[DN_EVENTNETWORKTIME_NOTIF_OFFS_ASNOFFSET]);
    d06c:	f105 011b 	add.w	r1, r5, #27
    d070:	6162      	str	r2, [r4, #20]
    d072:	791b      	ldrb	r3, [r3, #4]
    d074:	f104 001a 	add.w	r0, r4, #26
    d078:	7623      	strb	r3, [r4, #24]
    d07a:	f00b f945 	bl	18308 <dn_read_uint16_t>
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTNETWORKTIME);
    d07e:	2106      	movs	r1, #6
    d080:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
    d084:	e786      	b.n	cf94 <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTPINGRESPONSE_NOTIF_LEN) {
    d086:	2b12      	cmp	r3, #18
    d088:	d986      	bls.n	cf98 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventPingResponse = (dn_ipmg_eventPingResponse_nt*)dn_ipmg_vars.notifBuf;
    d08a:	4e8f      	ldr	r6, [pc, #572]	; (d2c8 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventPingResponse->eventId = eventId;
    d08c:	9b01      	ldr	r3, [sp, #4]
               notif_eventPingResponse = (dn_ipmg_eventPingResponse_nt*)dn_ipmg_vars.notifBuf;
    d08e:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
               notif_eventPingResponse->eventId = eventId;
    d092:	4620      	mov	r0, r4
    d094:	f840 3b04 	str.w	r3, [r0], #4
               dn_read_uint32_t(&notif_eventPingResponse->callbackId,&payload[DN_EVENTPINGRESPONSE_NOTIF_OFFS_CALLBACKID]);
    d098:	f00b f93f 	bl	1831a <dn_read_uint32_t>
    d09c:	462a      	mov	r2, r5
    d09e:	f852 3f0a 	ldr.w	r3, [r2, #10]!
               dn_read_uint32_t(&notif_eventPingResponse->delay,&payload[DN_EVENTPINGRESPONSE_NOTIF_OFFS_DELAY]);
    d0a2:	f105 0112 	add.w	r1, r5, #18
    d0a6:	60a3      	str	r3, [r4, #8]
    d0a8:	6853      	ldr	r3, [r2, #4]
    d0aa:	f104 0010 	add.w	r0, r4, #16
    d0ae:	60e3      	str	r3, [r4, #12]
    d0b0:	f00b f933 	bl	1831a <dn_read_uint32_t>
               dn_read_uint16_t(&notif_eventPingResponse->voltage,&payload[DN_EVENTPINGRESPONSE_NOTIF_OFFS_VOLTAGE]);
    d0b4:	f105 0116 	add.w	r1, r5, #22
    d0b8:	f104 0014 	add.w	r0, r4, #20
    d0bc:	f00b f924 	bl	18308 <dn_read_uint16_t>
               notif_eventPingResponse->temperature = (int8_t)payload[DN_EVENTPINGRESPONSE_NOTIF_OFFS_TEMPERATURE];
    d0c0:	7e2b      	ldrb	r3, [r5, #24]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPINGRESPONSE);
    d0c2:	2107      	movs	r1, #7
               notif_eventPingResponse->temperature = (int8_t)payload[DN_EVENTPINGRESPONSE_NOTIF_OFFS_TEMPERATURE];
    d0c4:	75a3      	strb	r3, [r4, #22]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPINGRESPONSE);
    d0c6:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
    d0ca:	e763      	b.n	cf94 <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTPATHCREATE_NOTIF_LEN) {
    d0cc:	2b10      	cmp	r3, #16
    d0ce:	f67f af63 	bls.w	cf98 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventPathCreate = (dn_ipmg_eventPathCreate_nt*)dn_ipmg_vars.notifBuf;
    d0d2:	4c7d      	ldr	r4, [pc, #500]	; (d2c8 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventPathCreate->eventId = eventId;
    d0d4:	9801      	ldr	r0, [sp, #4]
               notif_eventPathCreate = (dn_ipmg_eventPathCreate_nt*)dn_ipmg_vars.notifBuf;
    d0d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
               notif_eventPathCreate->eventId = eventId;
    d0da:	461a      	mov	r2, r3
    d0dc:	f842 0b04 	str.w	r0, [r2], #4
    d0e0:	6808      	ldr	r0, [r1, #0]
    d0e2:	6058      	str	r0, [r3, #4]
    d0e4:	6848      	ldr	r0, [r1, #4]
    d0e6:	4629      	mov	r1, r5
    d0e8:	6050      	str	r0, [r2, #4]
    d0ea:	f851 2f0e 	ldr.w	r2, [r1, #14]!
    d0ee:	60da      	str	r2, [r3, #12]
    d0f0:	684a      	ldr	r2, [r1, #4]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPATHCREATE);
    d0f2:	210a      	movs	r1, #10
    d0f4:	611a      	str	r2, [r3, #16]
               notif_eventPathCreate->direction = payload[DN_EVENTPATHCREATE_NOTIF_OFFS_DIRECTION];
    d0f6:	7daa      	ldrb	r2, [r5, #22]
    d0f8:	751a      	strb	r2, [r3, #20]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPATHCREATE);
    d0fa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d0fe:	e749      	b.n	cf94 <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTPATHDELETE_NOTIF_LEN) {
    d100:	2b10      	cmp	r3, #16
    d102:	f67f af49 	bls.w	cf98 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventPathDelete = (dn_ipmg_eventPathDelete_nt*)dn_ipmg_vars.notifBuf;
    d106:	4c70      	ldr	r4, [pc, #448]	; (d2c8 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventPathDelete->eventId = eventId;
    d108:	9801      	ldr	r0, [sp, #4]
               notif_eventPathDelete = (dn_ipmg_eventPathDelete_nt*)dn_ipmg_vars.notifBuf;
    d10a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
               notif_eventPathDelete->eventId = eventId;
    d10e:	461a      	mov	r2, r3
    d110:	f842 0b04 	str.w	r0, [r2], #4
    d114:	6808      	ldr	r0, [r1, #0]
    d116:	6058      	str	r0, [r3, #4]
    d118:	6848      	ldr	r0, [r1, #4]
    d11a:	4629      	mov	r1, r5
    d11c:	6050      	str	r0, [r2, #4]
    d11e:	f851 2f0e 	ldr.w	r2, [r1, #14]!
    d122:	60da      	str	r2, [r3, #12]
    d124:	684a      	ldr	r2, [r1, #4]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPATHDELETE);
    d126:	210b      	movs	r1, #11
    d128:	611a      	str	r2, [r3, #16]
               notif_eventPathDelete->direction = payload[DN_EVENTPATHDELETE_NOTIF_OFFS_DIRECTION];
    d12a:	7daa      	ldrb	r2, [r5, #22]
    d12c:	751a      	strb	r2, [r3, #20]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPATHDELETE);
    d12e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d132:	e72f      	b.n	cf94 <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTPACKETSENT_NOTIF_LEN) {
    d134:	2b04      	cmp	r3, #4
    d136:	f67f af2f 	bls.w	cf98 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventPacketSent = (dn_ipmg_eventPacketSent_nt*)dn_ipmg_vars.notifBuf;
    d13a:	4c63      	ldr	r4, [pc, #396]	; (d2c8 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventPacketSent->eventId = eventId;
    d13c:	9b01      	ldr	r3, [sp, #4]
               notif_eventPacketSent = (dn_ipmg_eventPacketSent_nt*)dn_ipmg_vars.notifBuf;
    d13e:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
               notif_eventPacketSent->eventId = eventId;
    d142:	4630      	mov	r0, r6
    d144:	f840 3b04 	str.w	r3, [r0], #4
               dn_read_uint32_t(&notif_eventPacketSent->callbackId,&payload[DN_EVENTPACKETSENT_NOTIF_OFFS_CALLBACKID]);
    d148:	f00b f8e7 	bl	1831a <dn_read_uint32_t>
               notif_eventPacketSent->rc = payload[DN_EVENTPACKETSENT_NOTIF_OFFS_RC];
    d14c:	7aab      	ldrb	r3, [r5, #10]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPACKETSENT);
    d14e:	210c      	movs	r1, #12
               notif_eventPacketSent->rc = payload[DN_EVENTPACKETSENT_NOTIF_OFFS_RC];
    d150:	7233      	strb	r3, [r6, #8]
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTPACKETSENT);
    d152:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d156:	e71d      	b.n	cf94 <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTMOTECREATE_NOTIF_LEN) {
    d158:	2b09      	cmp	r3, #9
    d15a:	f67f af1d 	bls.w	cf98 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventMoteCreate = (dn_ipmg_eventMoteCreate_nt*)dn_ipmg_vars.notifBuf;
    d15e:	4c5a      	ldr	r4, [pc, #360]	; (d2c8 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventMoteCreate->eventId = eventId;
    d160:	9a01      	ldr	r2, [sp, #4]
               notif_eventMoteCreate = (dn_ipmg_eventMoteCreate_nt*)dn_ipmg_vars.notifBuf;
    d162:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
               notif_eventMoteCreate->eventId = eventId;
    d166:	4603      	mov	r3, r0
    d168:	f843 2b04 	str.w	r2, [r3], #4
    d16c:	680a      	ldr	r2, [r1, #0]
               dn_read_uint16_t(&notif_eventMoteCreate->moteId,&payload[DN_EVENTMOTECREATE_NOTIF_OFFS_MOTEID]);
    d16e:	300c      	adds	r0, #12
    d170:	f840 2c08 	str.w	r2, [r0, #-8]
    d174:	684a      	ldr	r2, [r1, #4]
    d176:	f105 010e 	add.w	r1, r5, #14
    d17a:	605a      	str	r2, [r3, #4]
    d17c:	f00b f8c4 	bl	18308 <dn_read_uint16_t>
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTMOTECREATE);
    d180:	210d      	movs	r1, #13
    d182:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d186:	e705      	b.n	cf94 <dn_ipmg_rxSerialRequest+0x88>
               if (len<DN_EVENTMOTEDELETE_NOTIF_LEN) {
    d188:	2b09      	cmp	r3, #9
    d18a:	f67f af05 	bls.w	cf98 <dn_ipmg_rxSerialRequest+0x8c>
               notif_eventMoteDelete = (dn_ipmg_eventMoteDelete_nt*)dn_ipmg_vars.notifBuf;
    d18e:	4c4e      	ldr	r4, [pc, #312]	; (d2c8 <dn_ipmg_rxSerialRequest+0x3bc>)
               notif_eventMoteDelete->eventId = eventId;
    d190:	9a01      	ldr	r2, [sp, #4]
               notif_eventMoteDelete = (dn_ipmg_eventMoteDelete_nt*)dn_ipmg_vars.notifBuf;
    d192:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
               notif_eventMoteDelete->eventId = eventId;
    d196:	4603      	mov	r3, r0
    d198:	f843 2b04 	str.w	r2, [r3], #4
    d19c:	680a      	ldr	r2, [r1, #0]
               dn_read_uint16_t(&notif_eventMoteDelete->moteId,&payload[DN_EVENTMOTEDELETE_NOTIF_OFFS_MOTEID]);
    d19e:	300c      	adds	r0, #12
    d1a0:	f840 2c08 	str.w	r2, [r0, #-8]
    d1a4:	684a      	ldr	r2, [r1, #4]
    d1a6:	f105 010e 	add.w	r1, r5, #14
    d1aa:	605a      	str	r2, [r3, #4]
    d1ac:	f00b f8ac 	bl	18308 <dn_read_uint16_t>
               dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFEVENT,DN_EVENTID_EVENTMOTEDELETE);
    d1b0:	210e      	movs	r1, #14
    d1b2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d1b6:	e6ed      	b.n	cf94 <dn_ipmg_rxSerialRequest+0x88>
         if (len<DN_NOTIFLOG_NOTIF_LEN) {
    d1b8:	2e07      	cmp	r6, #7
    d1ba:	f67f aeed 	bls.w	cf98 <dn_ipmg_rxSerialRequest+0x8c>
         notif_notifLog = (dn_ipmg_notifLog_nt*)dn_ipmg_vars.notifBuf;
    d1be:	4f42      	ldr	r7, [pc, #264]	; (d2c8 <dn_ipmg_rxSerialRequest+0x3bc>)
    d1c0:	680b      	ldr	r3, [r1, #0]
    d1c2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
         notif_notifLog->logMsgLen = len-DN_NOTIFLOG_NOTIF_OFFS_LOGMSG;
    d1c6:	3c09      	subs	r4, #9
    d1c8:	6003      	str	r3, [r0, #0]
    d1ca:	684b      	ldr	r3, [r1, #4]
    d1cc:	f1a6 0208 	sub.w	r2, r6, #8
    d1d0:	6043      	str	r3, [r0, #4]
    d1d2:	7204      	strb	r4, [r0, #8]
    d1d4:	f105 0109 	add.w	r1, r5, #9
    d1d8:	3009      	adds	r0, #9
    d1da:	f00e fc57 	bl	1ba8c <memcpy>
         dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFLOG,DN_SUBCMDID_NONE);
    d1de:	21ff      	movs	r1, #255	; 0xff
    d1e0:	2002      	movs	r0, #2
    d1e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    d1e6:	e6d6      	b.n	cf96 <dn_ipmg_rxSerialRequest+0x8a>
         if (len<DN_NOTIFDATA_NOTIF_LEN) {
    d1e8:	2e17      	cmp	r6, #23
    d1ea:	f67f aed5 	bls.w	cf98 <dn_ipmg_rxSerialRequest+0x8c>
         notif_notifData = (dn_ipmg_notifData_nt*)dn_ipmg_vars.notifBuf;
    d1ee:	f8df 80d8 	ldr.w	r8, [pc, #216]	; d2c8 <dn_ipmg_rxSerialRequest+0x3bc>
    d1f2:	680b      	ldr	r3, [r1, #0]
    d1f4:	f8d8 7090 	ldr.w	r7, [r8, #144]	; 0x90
         notif_notifData->dataLen = len-DN_NOTIFDATA_NOTIF_OFFS_DATA;
    d1f8:	3c19      	subs	r4, #25
    d1fa:	603b      	str	r3, [r7, #0]
    d1fc:	684b      	ldr	r3, [r1, #4]
         dn_read_uint32_t(&notif_notifData->utcUsecs,&payload[DN_NOTIFDATA_NOTIF_OFFS_UTCUSECS]);
    d1fe:	f107 0008 	add.w	r0, r7, #8
    d202:	607b      	str	r3, [r7, #4]
    d204:	f105 0109 	add.w	r1, r5, #9
    d208:	f00b f887 	bl	1831a <dn_read_uint32_t>
    d20c:	462a      	mov	r2, r5
    d20e:	f852 3f0d 	ldr.w	r3, [r2, #13]!
         dn_read_uint16_t(&notif_notifData->srcPort,&payload[DN_NOTIFDATA_NOTIF_OFFS_SRCPORT]);
    d212:	f105 0115 	add.w	r1, r5, #21
    d216:	60fb      	str	r3, [r7, #12]
    d218:	6853      	ldr	r3, [r2, #4]
    d21a:	f107 0014 	add.w	r0, r7, #20
    d21e:	613b      	str	r3, [r7, #16]
    d220:	f00b f872 	bl	18308 <dn_read_uint16_t>
         dn_read_uint16_t(&notif_notifData->dstPort,&payload[DN_NOTIFDATA_NOTIF_OFFS_DSTPORT]);
    d224:	f105 0117 	add.w	r1, r5, #23
    d228:	f107 0016 	add.w	r0, r7, #22
    d22c:	f00b f86c 	bl	18308 <dn_read_uint16_t>
    d230:	f105 0119 	add.w	r1, r5, #25
         notif_notifData->dataLen = len-DN_NOTIFDATA_NOTIF_OFFS_DATA;
    d234:	763c      	strb	r4, [r7, #24]
    d236:	f1a6 0218 	sub.w	r2, r6, #24
    d23a:	f107 0019 	add.w	r0, r7, #25
    d23e:	f00e fc25 	bl	1ba8c <memcpy>
         dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFDATA,DN_SUBCMDID_NONE);
    d242:	21ff      	movs	r1, #255	; 0xff
    d244:	2004      	movs	r0, #4
    d246:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
    d24a:	e6a4      	b.n	cf96 <dn_ipmg_rxSerialRequest+0x8a>
         if (len<DN_NOTIFIPDATA_NOTIF_LEN) {
    d24c:	2e13      	cmp	r6, #19
    d24e:	f67f aea3 	bls.w	cf98 <dn_ipmg_rxSerialRequest+0x8c>
         notif_notifIpData = (dn_ipmg_notifIpData_nt*)dn_ipmg_vars.notifBuf;
    d252:	f8df 8074 	ldr.w	r8, [pc, #116]	; d2c8 <dn_ipmg_rxSerialRequest+0x3bc>
    d256:	680b      	ldr	r3, [r1, #0]
    d258:	f8d8 7090 	ldr.w	r7, [r8, #144]	; 0x90
         notif_notifIpData->dataLen = len-DN_NOTIFIPDATA_NOTIF_OFFS_DATA;
    d25c:	3c15      	subs	r4, #21
    d25e:	603b      	str	r3, [r7, #0]
    d260:	684b      	ldr	r3, [r1, #4]
         dn_read_uint32_t(&notif_notifIpData->utcUsecs,&payload[DN_NOTIFIPDATA_NOTIF_OFFS_UTCUSECS]);
    d262:	f107 0008 	add.w	r0, r7, #8
    d266:	607b      	str	r3, [r7, #4]
    d268:	f105 0109 	add.w	r1, r5, #9
    d26c:	f00b f855 	bl	1831a <dn_read_uint32_t>
    d270:	462a      	mov	r2, r5
    d272:	f852 3f0d 	ldr.w	r3, [r2, #13]!
    d276:	f105 0115 	add.w	r1, r5, #21
    d27a:	60fb      	str	r3, [r7, #12]
    d27c:	6853      	ldr	r3, [r2, #4]
    d27e:	f107 0015 	add.w	r0, r7, #21
    d282:	613b      	str	r3, [r7, #16]
         notif_notifIpData->dataLen = len-DN_NOTIFIPDATA_NOTIF_OFFS_DATA;
    d284:	753c      	strb	r4, [r7, #20]
    d286:	f1a6 0214 	sub.w	r2, r6, #20
    d28a:	f00e fbff 	bl	1ba8c <memcpy>
         dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFIPDATA,DN_SUBCMDID_NONE);
    d28e:	21ff      	movs	r1, #255	; 0xff
    d290:	2005      	movs	r0, #5
    d292:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
    d296:	e67e      	b.n	cf96 <dn_ipmg_rxSerialRequest+0x8a>
         if (len<DN_NOTIFHEALTHREPORT_NOTIF_LEN) {
    d298:	2e07      	cmp	r6, #7
    d29a:	f67f ae7d 	bls.w	cf98 <dn_ipmg_rxSerialRequest+0x8c>
         notif_notifHealthReport = (dn_ipmg_notifHealthReport_nt*)dn_ipmg_vars.notifBuf;
    d29e:	4f0a      	ldr	r7, [pc, #40]	; (d2c8 <dn_ipmg_rxSerialRequest+0x3bc>)
    d2a0:	680b      	ldr	r3, [r1, #0]
    d2a2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
         notif_notifHealthReport->payloadLen = len-DN_NOTIFHEALTHREPORT_NOTIF_OFFS_PAYLOAD;
    d2a6:	3c09      	subs	r4, #9
    d2a8:	6003      	str	r3, [r0, #0]
    d2aa:	684b      	ldr	r3, [r1, #4]
    d2ac:	f1a6 0208 	sub.w	r2, r6, #8
    d2b0:	6043      	str	r3, [r0, #4]
    d2b2:	7204      	strb	r4, [r0, #8]
    d2b4:	f105 0109 	add.w	r1, r5, #9
    d2b8:	3009      	adds	r0, #9
    d2ba:	f00e fbe7 	bl	1ba8c <memcpy>
         dn_ipmg_vars.notifCb(DN_NOTIFID_NOTIFHEALTHREPORT,DN_SUBCMDID_NONE);
    d2be:	21ff      	movs	r1, #255	; 0xff
    d2c0:	2006      	movs	r0, #6
    d2c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    d2c6:	e666      	b.n	cf96 <dn_ipmg_rxSerialRequest+0x8a>
    d2c8:	20014d90 	.word	0x20014d90

0000d2cc <dn_ipmg_getSystemInfo_reply>:
void dn_ipmg_getSystemInfo_reply(uint8_t cmdId, uint8_t rc, uint8_t* payload, uint8_t len) {
    d2cc:	b538      	push	{r3, r4, r5, lr}
   if (dn_ipmg_vars.busyTx==FALSE || dn_ipmg_vars.cmdId!=cmdId) {
    d2ce:	4c19      	ldr	r4, [pc, #100]	; (d334 <dn_ipmg_getSystemInfo_reply+0x68>)
void dn_ipmg_getSystemInfo_reply(uint8_t cmdId, uint8_t rc, uint8_t* payload, uint8_t len) {
    d2d0:	4605      	mov	r5, r0
   if (dn_ipmg_vars.busyTx==FALSE || dn_ipmg_vars.cmdId!=cmdId) {
    d2d2:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
    d2d6:	b358      	cbz	r0, d330 <dn_ipmg_getSystemInfo_reply+0x64>
    d2d8:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    d2dc:	42a8      	cmp	r0, r5
    d2de:	d127      	bne.n	d330 <dn_ipmg_getSystemInfo_reply+0x64>
   if (rc==DN_SERIAL_RC_OK && len<DN_GETSYSTEMINFO_REPLY_LEN) {
    d2e0:	b909      	cbnz	r1, d2e6 <dn_ipmg_getSystemInfo_reply+0x1a>
    d2e2:	2b0e      	cmp	r3, #14
    d2e4:	d924      	bls.n	d330 <dn_ipmg_getSystemInfo_reply+0x64>
   reply = (dn_ipmg_getSystemInfo_rpt*)dn_ipmg_vars.replyContents;
    d2e6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   reply->RC = rc;
    d2ea:	7001      	strb	r1, [r0, #0]
   if (rc==DN_SERIAL_RC_OK) {
    d2ec:	b9c9      	cbnz	r1, d322 <dn_ipmg_getSystemInfo_reply+0x56>
    d2ee:	6811      	ldr	r1, [r2, #0]
      dn_read_uint16_t(&reply->swBuild,&payload[DN_GETSYSTEMINFO_REPLY_OFFS_SWBUILD]);
    d2f0:	300e      	adds	r0, #14
    d2f2:	f840 1c0d 	str.w	r1, [r0, #-13]
    d2f6:	6851      	ldr	r1, [r2, #4]
    d2f8:	f840 1c09 	str.w	r1, [r0, #-9]
      reply->hwModel = payload[DN_GETSYSTEMINFO_REPLY_OFFS_HWMODEL];
    d2fc:	7a11      	ldrb	r1, [r2, #8]
    d2fe:	f800 1c05 	strb.w	r1, [r0, #-5]
      reply->hwRev = payload[DN_GETSYSTEMINFO_REPLY_OFFS_HWREV];
    d302:	7a51      	ldrb	r1, [r2, #9]
    d304:	f800 1c04 	strb.w	r1, [r0, #-4]
      reply->swMajor = payload[DN_GETSYSTEMINFO_REPLY_OFFS_SWMAJOR];
    d308:	7a91      	ldrb	r1, [r2, #10]
    d30a:	f800 1c03 	strb.w	r1, [r0, #-3]
      reply->swMinor = payload[DN_GETSYSTEMINFO_REPLY_OFFS_SWMINOR];
    d30e:	7ad1      	ldrb	r1, [r2, #11]
    d310:	f800 1c02 	strb.w	r1, [r0, #-2]
      reply->swPatch = payload[DN_GETSYSTEMINFO_REPLY_OFFS_SWPATCH];
    d314:	7b11      	ldrb	r1, [r2, #12]
    d316:	f800 1c01 	strb.w	r1, [r0, #-1]
      dn_read_uint16_t(&reply->swBuild,&payload[DN_GETSYSTEMINFO_REPLY_OFFS_SWBUILD]);
    d31a:	f102 010d 	add.w	r1, r2, #13
    d31e:	f00a fff3 	bl	18308 <dn_read_uint16_t>
   dn_ipmg_vars.replyCb(cmdId);
    d322:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    d326:	4628      	mov	r0, r5
    d328:	4798      	blx	r3
   dn_ipmg_vars.busyTx=FALSE;
    d32a:	2300      	movs	r3, #0
    d32c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
    d330:	bd38      	pop	{r3, r4, r5, pc}
    d332:	bf00      	nop
    d334:	20014d90 	.word	0x20014d90

0000d338 <dn_ipmg_init>:
void dn_ipmg_init(dn_ipmg_notif_cbt notifCb, uint8_t* notifBuf, uint8_t notifBufLen, dn_ipmg_reply_cbt replyCb, dn_ipmg_status_cbt statusCb) {
    d338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d33c:	4680      	mov	r8, r0
    d33e:	460f      	mov	r7, r1
    d340:	4616      	mov	r6, r2
    d342:	461d      	mov	r5, r3
   memset(&dn_ipmg_vars,0,sizeof(dn_ipmg_vars));
    d344:	4c09      	ldr	r4, [pc, #36]	; (d36c <dn_ipmg_init+0x34>)
void dn_ipmg_init(dn_ipmg_notif_cbt notifCb, uint8_t* notifBuf, uint8_t notifBufLen, dn_ipmg_reply_cbt replyCb, dn_ipmg_status_cbt statusCb) {
    d346:	f8dd 9020 	ldr.w	r9, [sp, #32]
   memset(&dn_ipmg_vars,0,sizeof(dn_ipmg_vars));
    d34a:	2100      	movs	r1, #0
    d34c:	4620      	mov	r0, r4
    d34e:	2298      	movs	r2, #152	; 0x98
    d350:	f00e fba9 	bl	1baa6 <memset>
   dn_serial_mg_init(dn_ipmg_rxSerialRequest, statusCb);
    d354:	4649      	mov	r1, r9
   dn_ipmg_vars.notifBuf        = notifBuf;
    d356:	e9c4 8723 	strd	r8, r7, [r4, #140]	; 0x8c
   dn_ipmg_vars.notifBufLen     = notifBufLen;
    d35a:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
   dn_ipmg_vars.replyCb         = replyCb;
    d35e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   dn_serial_mg_init(dn_ipmg_rxSerialRequest, statusCb);
    d362:	4803      	ldr	r0, [pc, #12]	; (d370 <dn_ipmg_init+0x38>)
}
    d364:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dn_serial_mg_init(dn_ipmg_rxSerialRequest, statusCb);
    d368:	f000 b838 	b.w	d3dc <dn_serial_mg_init>
    d36c:	20014d90 	.word	0x20014d90
    d370:	0000cf0d 	.word	0x0000cf0d

0000d374 <dn_ipmg_cancelTx>:
void dn_ipmg_cancelTx() {
    d374:	b508      	push	{r3, lr}
   dn_lock();
    d376:	f00a ffed 	bl	18354 <dn_lock>
   dn_ipmg_vars.busyTx=FALSE;
    d37a:	2200      	movs	r2, #0
    d37c:	4b03      	ldr	r3, [pc, #12]	; (d38c <dn_ipmg_cancelTx+0x18>)
    d37e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
    d382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   dn_unlock();
    d386:	f00a bfe6 	b.w	18356 <dn_unlock>
    d38a:	bf00      	nop
    d38c:	20014d90 	.word	0x20014d90

0000d390 <dn_ipmg_getSystemInfo>:
dn_err_t dn_ipmg_getSystemInfo(dn_ipmg_getSystemInfo_rpt* reply) {
    d390:	b537      	push	{r0, r1, r2, r4, r5, lr}
   if (dn_ipmg_vars.busyTx) {
    d392:	4d10      	ldr	r5, [pc, #64]	; (d3d4 <dn_ipmg_getSystemInfo+0x44>)
dn_err_t dn_ipmg_getSystemInfo(dn_ipmg_getSystemInfo_rpt* reply) {
    d394:	4604      	mov	r4, r0
   dn_lock();
    d396:	f00a ffdd 	bl	18354 <dn_lock>
   if (dn_ipmg_vars.busyTx) {
    d39a:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
    d39e:	b12b      	cbz	r3, d3ac <dn_ipmg_getSystemInfo+0x1c>
      dn_unlock();
    d3a0:	f00a ffd9 	bl	18356 <dn_unlock>
      return DN_ERR_BUSY;
    d3a4:	2401      	movs	r4, #1
}
    d3a6:	4620      	mov	r0, r4
    d3a8:	b003      	add	sp, #12
    d3aa:	bd30      	pop	{r4, r5, pc}
   dn_ipmg_vars.cmdId          = CMDID_GETSYSTEMINFO;
    d3ac:	202e      	movs	r0, #46	; 0x2e
   rc = dn_serial_mg_sendRequest(
    d3ae:	4a0a      	ldr	r2, [pc, #40]	; (d3d8 <dn_ipmg_getSystemInfo+0x48>)
    d3b0:	4619      	mov	r1, r3
    d3b2:	9200      	str	r2, [sp, #0]
    d3b4:	462a      	mov	r2, r5
   dn_ipmg_vars.replyContents  = (uint8_t*)reply;
    d3b6:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
   dn_ipmg_vars.cmdId          = CMDID_GETSYSTEMINFO;
    d3ba:	f885 0081 	strb.w	r0, [r5, #129]	; 0x81
   rc = dn_serial_mg_sendRequest(
    d3be:	f000 f867 	bl	d490 <dn_serial_mg_sendRequest>
   if (rc==DN_ERR_NONE) {
    d3c2:	4604      	mov	r4, r0
    d3c4:	b910      	cbnz	r0, d3cc <dn_ipmg_getSystemInfo+0x3c>
      dn_ipmg_vars.busyTx         = TRUE;
    d3c6:	2301      	movs	r3, #1
    d3c8:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
   dn_unlock();
    d3cc:	f00a ffc3 	bl	18356 <dn_unlock>
   return rc;
    d3d0:	e7e9      	b.n	d3a6 <dn_ipmg_getSystemInfo+0x16>
    d3d2:	bf00      	nop
    d3d4:	20014d90 	.word	0x20014d90
    d3d8:	0000d2cd 	.word	0x0000d2cd

0000d3dc <dn_serial_mg_init>:
/**
\brief Setting up the instance.
*/
void dn_serial_mg_init(dn_serial_request_cbt requestCb, dn_status_change_cbt statusChangeCb) {
   // reset local variables
   memset(&dn_serial_mg_vars, 0, sizeof(dn_serial_mg_vars));
    d3dc:	2200      	movs	r2, #0
    d3de:	4b05      	ldr	r3, [pc, #20]	; (d3f4 <dn_serial_mg_init+0x18>)
    d3e0:	e9c3 2200 	strd	r2, r2, [r3]
   dn_serial_mg_vars.txPacketId      = 0x00;
   dn_serial_mg_vars.rxPacketIdInit  = FALSE;
   dn_serial_mg_vars.rxPacketId      = 0x00;
   
   dn_serial_mg_vars.requestCb       = requestCb;
   dn_serial_mg_vars.statusChangeCb  = statusChangeCb;
    d3e4:	e9c3 0103 	strd	r0, r1, [r3, #12]
   memset(&dn_serial_mg_vars, 0, sizeof(dn_serial_mg_vars));
    d3e8:	609a      	str	r2, [r3, #8]
   
   // initialize the HDLC module
   dn_hdlc_init(dn_serial_mg_rxHdlcFrame);
    d3ea:	4803      	ldr	r0, [pc, #12]	; (d3f8 <dn_serial_mg_init+0x1c>)
   dn_serial_mg_vars.rxPacketIdInit  = FALSE;
    d3ec:	805a      	strh	r2, [r3, #2]
   dn_serial_mg_vars.txPacketId      = 0x00;
    d3ee:	705a      	strb	r2, [r3, #1]
   dn_hdlc_init(dn_serial_mg_rxHdlcFrame);
    d3f0:	f7ff bcce 	b.w	cd90 <dn_hdlc_init>
    d3f4:	20014e28 	.word	0x20014e28
    d3f8:	0000d4e1 	.word	0x0000d4e1

0000d3fc <dn_serial_sendRequestNoCheck>:
   );
}

//=========================== private =========================================

dn_err_t dn_serial_sendRequestNoCheck(uint8_t cmdId, bool isAck, bool shouldBeAcked, uint8_t* payload, uint8_t length, dn_serial_reply_cbt replyCb) {
    d3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   uint8_t i;
   uint8_t control;
   
   // register reply callback
   dn_serial_mg_vars.replyCmdId      = cmdId;
    d400:	4d14      	ldr	r5, [pc, #80]	; (d454 <dn_serial_sendRequestNoCheck+0x58>)
dn_err_t dn_serial_sendRequestNoCheck(uint8_t cmdId, bool isAck, bool shouldBeAcked, uint8_t* payload, uint8_t length, dn_serial_reply_cbt replyCb) {
    d402:	461c      	mov	r4, r3
   dn_serial_mg_vars.replyCb         = replyCb;
    d404:	9b07      	ldr	r3, [sp, #28]
dn_err_t dn_serial_sendRequestNoCheck(uint8_t cmdId, bool isAck, bool shouldBeAcked, uint8_t* payload, uint8_t length, dn_serial_reply_cbt replyCb) {
    d406:	4680      	mov	r8, r0
   
   // create the control byte
   control         = 0;
   if (isAck==1) {
      control     |= DN_SERIAL_FLAG_ACK;
    d408:	460e      	mov	r6, r1
dn_err_t dn_serial_sendRequestNoCheck(uint8_t cmdId, bool isAck, bool shouldBeAcked, uint8_t* payload, uint8_t length, dn_serial_reply_cbt replyCb) {
    d40a:	f89d 7018 	ldrb.w	r7, [sp, #24]
   dn_serial_mg_vars.replyCmdId      = cmdId;
    d40e:	7128      	strb	r0, [r5, #4]
   dn_serial_mg_vars.replyCb         = replyCb;
    d410:	60ab      	str	r3, [r5, #8]
   } else {
      control     |= DN_SERIAL_FLAG_DATA;
   }
   if (shouldBeAcked==1) {
    d412:	b10a      	cbz	r2, d418 <dn_serial_sendRequestNoCheck+0x1c>
      control     |= DN_SERIAL_FLAG_ACKNOWLEDGED;
    d414:	f041 0602 	orr.w	r6, r1, #2
   } else {
      control     |= DN_SERIAL_FLAG_UNACKNOWLEDGED;
   }
   
   // send the frame over serial
   dn_hdlc_outputOpen();
    d418:	f7ff fccc 	bl	cdb4 <dn_hdlc_outputOpen>
   dn_hdlc_outputWrite(control);                      // Control
    d41c:	4630      	mov	r0, r6
    d41e:	f7ff fcf7 	bl	ce10 <dn_hdlc_outputWrite>
   dn_hdlc_outputWrite(cmdId);                        // Packet Type
    d422:	4640      	mov	r0, r8
    d424:	f7ff fcf4 	bl	ce10 <dn_hdlc_outputWrite>
   dn_hdlc_outputWrite(dn_serial_mg_vars.txPacketId);    // Seq. Number
    d428:	7868      	ldrb	r0, [r5, #1]
    d42a:	f7ff fcf1 	bl	ce10 <dn_hdlc_outputWrite>
   dn_hdlc_outputWrite(length);                       // Payload Length
    d42e:	4638      	mov	r0, r7
    d430:	f7ff fcee 	bl	ce10 <dn_hdlc_outputWrite>
   for (i=0; i<length; i++) {                         // Payload
    d434:	4427      	add	r7, r4
    d436:	42bc      	cmp	r4, r7
    d438:	d107      	bne.n	d44a <dn_serial_sendRequestNoCheck+0x4e>
      dn_hdlc_outputWrite(payload[i]);
   }
   dn_hdlc_outputClose();
    d43a:	f7ff fd03 	bl	ce44 <dn_hdlc_outputClose>
   
   // increment the txPacketId
   dn_serial_mg_vars.txPacketId++;
    d43e:	786b      	ldrb	r3, [r5, #1]
   
   return DN_ERR_NONE;
}
    d440:	2000      	movs	r0, #0
   dn_serial_mg_vars.txPacketId++;
    d442:	3301      	adds	r3, #1
    d444:	706b      	strb	r3, [r5, #1]
}
    d446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      dn_hdlc_outputWrite(payload[i]);
    d44a:	f814 0b01 	ldrb.w	r0, [r4], #1
    d44e:	f7ff fcdf 	bl	ce10 <dn_hdlc_outputWrite>
   for (i=0; i<length; i++) {                         // Payload
    d452:	e7f0      	b.n	d436 <dn_serial_sendRequestNoCheck+0x3a>
    d454:	20014e28 	.word	0x20014e28

0000d458 <dn_serial_mg_initiateConnect>:
   payload[0] = DN_API_VERSION;             // version
    d458:	2304      	movs	r3, #4
dn_err_t dn_serial_mg_initiateConnect() {
    d45a:	b530      	push	{r4, r5, lr}
   payload[1] = dn_serial_mg_vars.txPacketId;  // cliSeqNo
    d45c:	4d0b      	ldr	r5, [pc, #44]	; (d48c <dn_serial_mg_initiateConnect+0x34>)
dn_err_t dn_serial_mg_initiateConnect() {
    d45e:	b085      	sub	sp, #20
   payload[0] = DN_API_VERSION;             // version
    d460:	f88d 300c 	strb.w	r3, [sp, #12]
   payload[1] = dn_serial_mg_vars.txPacketId;  // cliSeqNo
    d464:	786b      	ldrb	r3, [r5, #1]
   payload[2] = 0;                          // mode
    d466:	2400      	movs	r4, #0
   payload[1] = dn_serial_mg_vars.txPacketId;  // cliSeqNo
    d468:	f88d 300d 	strb.w	r3, [sp, #13]
   dn_serial_sendRequestNoCheck(
    d46c:	2303      	movs	r3, #3
    d46e:	4622      	mov	r2, r4
    d470:	9300      	str	r3, [sp, #0]
    d472:	4621      	mov	r1, r4
    d474:	ab03      	add	r3, sp, #12
    d476:	9401      	str	r4, [sp, #4]
    d478:	2001      	movs	r0, #1
   payload[2] = 0;                          // mode
    d47a:	f88d 400e 	strb.w	r4, [sp, #14]
   dn_serial_sendRequestNoCheck(
    d47e:	f7ff ffbd 	bl	d3fc <dn_serial_sendRequestNoCheck>
   dn_serial_mg_vars.status = DN_SERIAL_ST_HELLO_SENT;
    d482:	2301      	movs	r3, #1
}
    d484:	4620      	mov	r0, r4
   dn_serial_mg_vars.status = DN_SERIAL_ST_HELLO_SENT;
    d486:	702b      	strb	r3, [r5, #0]
}
    d488:	b005      	add	sp, #20
    d48a:	bd30      	pop	{r4, r5, pc}
    d48c:	20014e28 	.word	0x20014e28

0000d490 <dn_serial_mg_sendRequest>:
dn_err_t dn_serial_mg_sendRequest(uint8_t cmdId, bool isAck, uint8_t* payload, uint8_t length, dn_serial_reply_cbt replyCb) {
    d490:	b537      	push	{r0, r1, r2, r4, r5, lr}
   if (dn_serial_mg_vars.status!=DN_SERIAL_ST_CONNECTED) {
    d492:	4d08      	ldr	r5, [pc, #32]	; (d4b4 <dn_serial_mg_sendRequest+0x24>)
    d494:	782d      	ldrb	r5, [r5, #0]
    d496:	2d02      	cmp	r5, #2
    d498:	d109      	bne.n	d4ae <dn_serial_mg_sendRequest+0x1e>
   return dn_serial_sendRequestNoCheck(
    d49a:	9d06      	ldr	r5, [sp, #24]
    d49c:	e9cd 3500 	strd	r3, r5, [sp]
    d4a0:	4613      	mov	r3, r2
    d4a2:	f081 0201 	eor.w	r2, r1, #1
    d4a6:	f7ff ffa9 	bl	d3fc <dn_serial_sendRequestNoCheck>
}
    d4aa:	b003      	add	sp, #12
    d4ac:	bd30      	pop	{r4, r5, pc}
      return DN_ERR_NOT_CONNECTED;
    d4ae:	2002      	movs	r0, #2
    d4b0:	e7fb      	b.n	d4aa <dn_serial_mg_sendRequest+0x1a>
    d4b2:	bf00      	nop
    d4b4:	20014e28 	.word	0x20014e28

0000d4b8 <dn_serial_mg_dispatch_response>:
            break;
      }
   }
}

void dn_serial_mg_dispatch_response(uint8_t cmdId, uint8_t* payload, uint8_t length) {
    d4b8:	b538      	push	{r3, r4, r5, lr}
   uint8_t rc;
   
   rc = payload[0];
   if (cmdId==dn_serial_mg_vars.replyCmdId && dn_serial_mg_vars.replyCb!=NULL) {
    d4ba:	4c08      	ldr	r4, [pc, #32]	; (d4dc <dn_serial_mg_dispatch_response+0x24>)
    d4bc:	7923      	ldrb	r3, [r4, #4]
    d4be:	4283      	cmp	r3, r0
    d4c0:	d10a      	bne.n	d4d8 <dn_serial_mg_dispatch_response+0x20>
    d4c2:	68a5      	ldr	r5, [r4, #8]
    d4c4:	b145      	cbz	r5, d4d8 <dn_serial_mg_dispatch_response+0x20>
      
      // call the callback
      (dn_serial_mg_vars.replyCb)(cmdId,rc,&payload[1],length-1);
    d4c6:	1e53      	subs	r3, r2, #1
    d4c8:	460a      	mov	r2, r1
    d4ca:	b2db      	uxtb	r3, r3
    d4cc:	f812 1b01 	ldrb.w	r1, [r2], #1
    d4d0:	47a8      	blx	r5
      
      // reset
      dn_serial_mg_vars.replyCmdId   = 0x00;
    d4d2:	2300      	movs	r3, #0
    d4d4:	7123      	strb	r3, [r4, #4]
      dn_serial_mg_vars.replyCb      = NULL;
    d4d6:	60a3      	str	r3, [r4, #8]
   }
}
    d4d8:	bd38      	pop	{r3, r4, r5, pc}
    d4da:	bf00      	nop
    d4dc:	20014e28 	.word	0x20014e28

0000d4e0 <dn_serial_mg_rxHdlcFrame>:
   if (rxFrameLen<4) {
    d4e0:	2903      	cmp	r1, #3
void dn_serial_mg_rxHdlcFrame(uint8_t* rxFrame, uint8_t rxFrameLen) {
    d4e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    d4e6:	4681      	mov	r9, r0
   if (rxFrameLen<4) {
    d4e8:	d963      	bls.n	d5b2 <dn_serial_mg_rxHdlcFrame+0xd2>
   control    =  rxFrame[0];
    d4ea:	f890 8000 	ldrb.w	r8, [r0]
   cmdId      =  rxFrame[1];
    d4ee:	7847      	ldrb	r7, [r0, #1]
   if (isAck) {
    d4f0:	f018 0601 	ands.w	r6, r8, #1
   length     =  rxFrame[3];
    d4f4:	78c5      	ldrb	r5, [r0, #3]
   payload    = &rxFrame[4];
    d4f6:	f100 0104 	add.w	r1, r0, #4
   if (isAck) {
    d4fa:	d008      	beq.n	d50e <dn_serial_mg_rxHdlcFrame+0x2e>
      if (length>0) {
    d4fc:	2d00      	cmp	r5, #0
    d4fe:	d058      	beq.n	d5b2 <dn_serial_mg_rxHdlcFrame+0xd2>
         dn_serial_mg_dispatch_response(cmdId,payload,length);
    d500:	462a      	mov	r2, r5
    d502:	4638      	mov	r0, r7
}
    d504:	b003      	add	sp, #12
    d506:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
         dn_serial_mg_dispatch_response(cmdId,payload,length);
    d50a:	f7ff bfd5 	b.w	d4b8 <dn_serial_mg_dispatch_response>
      if (dn_serial_mg_vars.rxPacketIdInit==TRUE && seqNum==dn_serial_mg_vars.rxPacketId) {
    d50e:	4c2a      	ldr	r4, [pc, #168]	; (d5b8 <dn_serial_mg_rxHdlcFrame+0xd8>)
   seqNum     =  rxFrame[2];
    d510:	7883      	ldrb	r3, [r0, #2]
      if (dn_serial_mg_vars.rxPacketIdInit==TRUE && seqNum==dn_serial_mg_vars.rxPacketId) {
    d512:	78a2      	ldrb	r2, [r4, #2]
    d514:	b112      	cbz	r2, d51c <dn_serial_mg_rxHdlcFrame+0x3c>
    d516:	78e2      	ldrb	r2, [r4, #3]
    d518:	429a      	cmp	r2, r3
    d51a:	d02b      	beq.n	d574 <dn_serial_mg_rxHdlcFrame+0x94>
         dn_serial_mg_vars.rxPacketIdInit   = TRUE;
    d51c:	2201      	movs	r2, #1
         dn_serial_mg_vars.rxPacketId       = seqNum;
    d51e:	70e3      	strb	r3, [r4, #3]
         dn_serial_mg_vars.rxPacketIdInit   = TRUE;
    d520:	70a2      	strb	r2, [r4, #2]
      if (shouldAck) {
    d522:	f018 0f02 	tst.w	r8, #2
    d526:	d014      	beq.n	d552 <dn_serial_mg_rxHdlcFrame+0x72>
    d528:	9101      	str	r1, [sp, #4]
         dn_hdlc_outputOpen();
    d52a:	f7ff fc43 	bl	cdb4 <dn_hdlc_outputOpen>
         dn_hdlc_outputWrite(DN_SERIAL_FLAG_ACK | DN_SERIAL_FLAG_UNACKNOWLEDGED); // Control
    d52e:	2001      	movs	r0, #1
    d530:	f7ff fc6e 	bl	ce10 <dn_hdlc_outputWrite>
         dn_hdlc_outputWrite(cmdId);                                              // Packet Type
    d534:	4638      	mov	r0, r7
    d536:	f7ff fc6b 	bl	ce10 <dn_hdlc_outputWrite>
         dn_hdlc_outputWrite(dn_serial_mg_vars.rxPacketId);                       // Seq. Number
    d53a:	78e0      	ldrb	r0, [r4, #3]
    d53c:	f7ff fc68 	bl	ce10 <dn_hdlc_outputWrite>
         dn_hdlc_outputWrite(1);                                                  // Payload Length
    d540:	2001      	movs	r0, #1
    d542:	f7ff fc65 	bl	ce10 <dn_hdlc_outputWrite>
         dn_hdlc_outputWrite(0);                                                  // Payload (RC==0x00)
    d546:	2000      	movs	r0, #0
    d548:	f7ff fc62 	bl	ce10 <dn_hdlc_outputWrite>
         dn_hdlc_outputClose();
    d54c:	f7ff fc7a 	bl	ce44 <dn_hdlc_outputClose>
    d550:	9901      	ldr	r1, [sp, #4]
      switch (cmdId) {
    d552:	2f02      	cmp	r7, #2
    d554:	d010      	beq.n	d578 <dn_serial_mg_rxHdlcFrame+0x98>
    d556:	2f03      	cmp	r7, #3
    d558:	d024      	beq.n	d5a4 <dn_serial_mg_rxHdlcFrame+0xc4>
            if (length>0 && dn_serial_mg_vars.requestCb!=NULL && isRepeatId==FALSE) {
    d55a:	b355      	cbz	r5, d5b2 <dn_serial_mg_rxHdlcFrame+0xd2>
    d55c:	68e4      	ldr	r4, [r4, #12]
    d55e:	b344      	cbz	r4, d5b2 <dn_serial_mg_rxHdlcFrame+0xd2>
    d560:	bb3e      	cbnz	r6, d5b2 <dn_serial_mg_rxHdlcFrame+0xd2>
               dn_serial_mg_vars.requestCb(cmdId,control,payload,length);
    d562:	460a      	mov	r2, r1
    d564:	462b      	mov	r3, r5
    d566:	4641      	mov	r1, r8
    d568:	4638      	mov	r0, r7
    d56a:	46a4      	mov	ip, r4
}
    d56c:	b003      	add	sp, #12
    d56e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
               dn_serial_mg_vars.requestCb(cmdId,control,payload,length);
    d572:	4760      	bx	ip
         isRepeatId                         = TRUE;
    d574:	2601      	movs	r6, #1
    d576:	e7d4      	b.n	d522 <dn_serial_mg_rxHdlcFrame+0x42>
            if (
    d578:	2d04      	cmp	r5, #4
    d57a:	d91a      	bls.n	d5b2 <dn_serial_mg_rxHdlcFrame+0xd2>
                  length>=5 &&
    d57c:	f899 3004 	ldrb.w	r3, [r9, #4]
    d580:	b9bb      	cbnz	r3, d5b2 <dn_serial_mg_rxHdlcFrame+0xd2>
                  payload[HELLO_RESP_OFFS_RC]      == 0 &&
    d582:	f899 3005 	ldrb.w	r3, [r9, #5]
    d586:	2b04      	cmp	r3, #4
    d588:	d113      	bne.n	d5b2 <dn_serial_mg_rxHdlcFrame+0xd2>
               dn_serial_mg_vars.rxPacketIdInit     = TRUE;
    d58a:	2301      	movs	r3, #1
    d58c:	70a3      	strb	r3, [r4, #2]
               dn_serial_mg_vars.rxPacketId         = payload[HELLO_RESP_OFFS_MGRSEQNO];
    d58e:	f899 3006 	ldrb.w	r3, [r9, #6]
               dn_serial_mg_vars.status = DN_SERIAL_ST_CONNECTED;
    d592:	7027      	strb	r7, [r4, #0]
               dn_serial_mg_vars.rxPacketId         = payload[HELLO_RESP_OFFS_MGRSEQNO];
    d594:	70e3      	strb	r3, [r4, #3]
               if (dn_serial_mg_vars.statusChangeCb) {
    d596:	6923      	ldr	r3, [r4, #16]
    d598:	b15b      	cbz	r3, d5b2 <dn_serial_mg_rxHdlcFrame+0xd2>
                  dn_serial_mg_vars.statusChangeCb(dn_serial_mg_vars.status);
    d59a:	4638      	mov	r0, r7
}
    d59c:	b003      	add	sp, #12
    d59e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                   dn_serial_mg_vars.statusChangeCb(dn_serial_mg_vars.status);
    d5a2:	4718      	bx	r3
            if (
    d5a4:	2d01      	cmp	r5, #1
    d5a6:	d904      	bls.n	d5b2 <dn_serial_mg_rxHdlcFrame+0xd2>
               dn_serial_mg_vars.status = DN_SERIAL_ST_DISCONNECTED;
    d5a8:	2000      	movs	r0, #0
               if (dn_serial_mg_vars.statusChangeCb) {
    d5aa:	6923      	ldr	r3, [r4, #16]
               dn_serial_mg_vars.status = DN_SERIAL_ST_DISCONNECTED;
    d5ac:	7020      	strb	r0, [r4, #0]
               if (dn_serial_mg_vars.statusChangeCb) {
    d5ae:	2b00      	cmp	r3, #0
    d5b0:	d1f4      	bne.n	d59c <dn_serial_mg_rxHdlcFrame+0xbc>
}
    d5b2:	b003      	add	sp, #12
    d5b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d5b8:	20014e28 	.word	0x20014e28

0000d5bc <uart_cb>:
   }

} */

void uart_cb(struct device *x)
{
    d5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5c0:	4604      	mov	r4, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
    d5c2:	6883      	ldr	r3, [r0, #8]
    d5c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d5c6:	b103      	cbz	r3, d5ca <uart_cb+0xe>
		return api->irq_update(dev);
    d5c8:	4798      	blx	r3
	if (api->irq_rx_ready) {
    d5ca:	68a3      	ldr	r3, [r4, #8]
    d5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d5ce:	b173      	cbz	r3, d5ee <uart_cb+0x32>
		return api->irq_rx_ready(dev);
    d5d0:	4620      	mov	r0, r4
    d5d2:	4798      	blx	r3
        //mandatory call to start processing interrupts
	uart_irq_update(x);
	int data_length = 0;

        //Check if UART RX buffer has a received char.
	if (uart_irq_rx_ready(x)) {
    d5d4:	b158      	cbz	r0, d5ee <uart_cb+0x32>
	if (api->fifo_read) {
    d5d6:	68a3      	ldr	r3, [r4, #8]
    d5d8:	699b      	ldr	r3, [r3, #24]
    d5da:	b11b      	cbz	r3, d5e4 <uart_cb+0x28>
		return api->fifo_read(dev, rx_data, size);
    d5dc:	2201      	movs	r2, #1
    d5de:	4620      	mov	r0, r4
    d5e0:	4917      	ldr	r1, [pc, #92]	; (d640 <uart_cb+0x84>)
    d5e2:	4798      	blx	r3
                //Read data from UART FIFO. Returns num of bytes read.
		data_length = uart_fifo_read(x, &uart_rx_buf[0], sizeof(uart_rx_buf[0]));
                //printk("received byte! -> %x\n", uart_rx_buf[0]); 
                dn_uart_vars.ipmt_uart_rxByte_cb(uart_rx_buf[0]);
    d5e4:	4b17      	ldr	r3, [pc, #92]	; (d644 <uart_cb+0x88>)
    d5e6:	4a16      	ldr	r2, [pc, #88]	; (d640 <uart_cb+0x84>)
    d5e8:	681b      	ldr	r3, [r3, #0]
    d5ea:	7810      	ldrb	r0, [r2, #0]
    d5ec:	4798      	blx	r3
	if (api->irq_tx_ready) {
    d5ee:	68a3      	ldr	r3, [r4, #8]
    d5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d5f2:	b31b      	cbz	r3, d63c <uart_cb+0x80>
		return api->irq_tx_ready(dev);
    d5f4:	4620      	mov	r0, r4
    d5f6:	4798      	blx	r3

	}
        //printk("%c\n",uart_rx_buf[0]);

        if (uart_irq_tx_ready(x)) {
    d5f8:	b300      	cbz	r0, d63c <uart_cb+0x80>
	if (api->fifo_fill) {
    d5fa:	68a3      	ldr	r3, [r4, #8]
    d5fc:	4e12      	ldr	r6, [pc, #72]	; (d648 <uart_cb+0x8c>)
    d5fe:	695d      	ldr	r5, [r3, #20]
    d600:	b125      	cbz	r5, d60c <uart_cb+0x50>
		return api->fifo_fill(dev, tx_data, size);
    d602:	4620      	mov	r0, r4
    d604:	7832      	ldrb	r2, [r6, #0]
    d606:	4911      	ldr	r1, [pc, #68]	; (d64c <uart_cb+0x90>)
    d608:	47a8      	blx	r5
    d60a:	4605      	mov	r5, r0
            //Fill FIFO with data. Returns the num of bytes sent.
            
           /****************VA BIEN ******************************/
            int written = uart_fifo_fill(x, &uart_tx_buf[0], idx_tx_buf);
            while (idx_tx_buf > written) {
		written += uart_fifo_fill(x, &uart_tx_buf[written], idx_tx_buf - written);
    d60c:	4f0f      	ldr	r7, [pc, #60]	; (d64c <uart_cb+0x90>)
            while (idx_tx_buf > written) {
    d60e:	7832      	ldrb	r2, [r6, #0]
    d610:	4295      	cmp	r5, r2
    d612:	db08      	blt.n	d626 <uart_cb+0x6a>
            }
            idx_tx_buf = 0;
    d614:	2300      	movs	r3, #0
    d616:	7033      	strb	r3, [r6, #0]
	if (api->irq_tx_disable) {
    d618:	68a3      	ldr	r3, [r4, #8]
    d61a:	6a1b      	ldr	r3, [r3, #32]
    d61c:	b173      	cbz	r3, d63c <uart_cb+0x80>
		api->irq_tx_disable(dev);
    d61e:	4620      	mov	r0, r4
            uart_irq_tx_disable(x);
            /***************VA BIEN******************************/
           
        }
	
}
    d620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d624:	4718      	bx	r3
	if (api->fifo_fill) {
    d626:	68a3      	ldr	r3, [r4, #8]
    d628:	695b      	ldr	r3, [r3, #20]
    d62a:	b12b      	cbz	r3, d638 <uart_cb+0x7c>
		return api->fifo_fill(dev, tx_data, size);
    d62c:	4620      	mov	r0, r4
    d62e:	1b52      	subs	r2, r2, r5
    d630:	1979      	adds	r1, r7, r5
    d632:	4798      	blx	r3
		written += uart_fifo_fill(x, &uart_tx_buf[written], idx_tx_buf - written);
    d634:	4405      	add	r5, r0
    d636:	e7ea      	b.n	d60e <uart_cb+0x52>
	return 0;
    d638:	4618      	mov	r0, r3
    d63a:	e7fb      	b.n	d634 <uart_cb+0x78>
}
    d63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d640:	20015eb3 	.word	0x20015eb3
    d644:	20014e3c 	.word	0x20014e3c
    d648:	20015eb2 	.word	0x20015eb2
    d64c:	200162b3 	.word	0x200162b3

0000d650 <dn_uart_init>:
//=========================== public ==========================================

void dn_uart_init(dn_uart_rxByte_cbt rxByte_cb){
   

    dn_uart_vars.ipmt_uart_rxByte_cb = rxByte_cb;
    d650:	4b0b      	ldr	r3, [pc, #44]	; (d680 <dn_uart_init+0x30>)
void dn_uart_init(dn_uart_rxByte_cbt rxByte_cb){
    d652:	b510      	push	{r4, lr}
    dn_uart_vars.ipmt_uart_rxByte_cb = rxByte_cb;
    d654:	6018      	str	r0, [r3, #0]
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    d656:	480b      	ldr	r0, [pc, #44]	; (d684 <dn_uart_init+0x34>)
    d658:	f008 ff98 	bl	1658c <z_impl_device_get_binding>


    //tell to nrf9160dk which UART is used.
    uart_dev = device_get_binding("UART_1");
    d65c:	4c0a      	ldr	r4, [pc, #40]	; (d688 <dn_uart_init+0x38>)
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    d65e:	6882      	ldr	r2, [r0, #8]
    d660:	6020      	str	r0, [r4, #0]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    d662:	b122      	cbz	r2, d66e <dn_uart_init+0x1e>
    d664:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d666:	b113      	cbz	r3, d66e <dn_uart_init+0x1e>
		api->irq_callback_set(dev, cb, user_data);
    d668:	2200      	movs	r2, #0
    d66a:	4908      	ldr	r1, [pc, #32]	; (d68c <dn_uart_init+0x3c>)
    d66c:	4798      	blx	r3
     */
 
    //bind the uart port used with its callback
    uart_irq_callback_set(uart_dev, uart_cb);
    //The callback is called when rx event happens.
    uart_irq_rx_enable(uart_dev);
    d66e:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable) {
    d670:	6883      	ldr	r3, [r0, #8]
    d672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d674:	b113      	cbz	r3, d67c <dn_uart_init+0x2c>
    
   

}
    d676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		api->irq_rx_enable(dev);
    d67a:	4718      	bx	r3
    d67c:	bd10      	pop	{r4, pc}
    d67e:	bf00      	nop
    d680:	20014e3c 	.word	0x20014e3c
    d684:	0001c7c0 	.word	0x0001c7c0
    d688:	20014e40 	.word	0x20014e40
    d68c:	0000d5bd 	.word	0x0000d5bd

0000d690 <dn_uart_txByte>:

void dn_uart_txByte(uint8_t byte){

    //uart_tx(uart_dev, &byte, 1, SYS_FOREVER_MS);

    uart_tx_buf[idx_tx_buf] = byte;
    d690:	4a03      	ldr	r2, [pc, #12]	; (d6a0 <dn_uart_txByte+0x10>)
    d692:	4904      	ldr	r1, [pc, #16]	; (d6a4 <dn_uart_txByte+0x14>)
    d694:	7813      	ldrb	r3, [r2, #0]
    d696:	54c8      	strb	r0, [r1, r3]
    ++idx_tx_buf;
    d698:	3301      	adds	r3, #1
    d69a:	7013      	strb	r3, [r2, #0]
    /****** VA BIEN *******/
    //uart_tx_buf[0] = byte;
    //uart_irq_tx_enable(uart_dev);
    //uart_irq_tx_disable(uart_dev);
    /******* VA BIEN *****/
}
    d69c:	4770      	bx	lr
    d69e:	bf00      	nop
    d6a0:	20015eb2 	.word	0x20015eb2
    d6a4:	200162b3 	.word	0x200162b3

0000d6a8 <dn_uart_txFlush>:

void dn_uart_txFlush(){
   uart_irq_tx_enable(uart_dev);
    d6a8:	4b03      	ldr	r3, [pc, #12]	; (d6b8 <dn_uart_txFlush+0x10>)
    d6aa:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable) {
    d6ac:	6883      	ldr	r3, [r0, #8]
    d6ae:	69db      	ldr	r3, [r3, #28]
    d6b0:	b103      	cbz	r3, d6b4 <dn_uart_txFlush+0xc>
		api->irq_tx_enable(dev);
    d6b2:	4718      	bx	r3
   // nothing to do since MSP430 driver is byte-oriented
}
    d6b4:	4770      	bx	lr
    d6b6:	bf00      	nop
    d6b8:	20014e40 	.word	0x20014e40

0000d6bc <dn_ipmg_reply_cb>:
}


void dn_ipmg_reply_cb(uint8_t cmdId) 
{
   app_vars.replyCb();
    d6bc:	4b01      	ldr	r3, [pc, #4]	; (d6c4 <dn_ipmg_reply_cb+0x8>)
    d6be:	685b      	ldr	r3, [r3, #4]
    d6c0:	4718      	bx	r3
    d6c2:	bf00      	nop
    d6c4:	20014e44 	.word	0x20014e44

0000d6c8 <timer_interrupt>:
}

void timer_interrupt(struct k_timer *dummy)
{
   //Call the callback function set in fsm_scheduleEvent()
   app_vars.fsmCb();
    d6c8:	4b01      	ldr	r3, [pc, #4]	; (d6d0 <timer_interrupt+0x8>)
    d6ca:	681b      	ldr	r3, [r3, #0]
    d6cc:	4718      	bx	r3
    d6ce:	bf00      	nop
    d6d0:	20014e44 	.word	0x20014e44

0000d6d4 <fsm_scheduleEvent>:
   app_vars.fsmCb       = cb;
    d6d4:	4b0d      	ldr	r3, [pc, #52]	; (d70c <fsm_scheduleEvent+0x38>)
{   
    d6d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   app_vars.fsmCb       = cb;
    d6d8:	6019      	str	r1, [r3, #0]
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    d6da:	f240 34e7 	movw	r4, #999	; 0x3e7
    d6de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    d6e2:	2500      	movs	r5, #0
    d6e4:	fbe0 4501 	umlal	r4, r5, r0, r1
    d6e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d6ec:	2300      	movs	r3, #0
    d6ee:	4620      	mov	r0, r4
    d6f0:	4629      	mov	r1, r5
    d6f2:	f7ff f9c1 	bl	ca78 <__aeabi_uldivmod>
    d6f6:	4602      	mov	r2, r0
    d6f8:	460b      	mov	r3, r1
		arch_syscall_invoke5(*(uintptr_t *)&timer, parm0.split.lo, parm0.split.hi, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
    d6fa:	2100      	movs	r1, #0
    d6fc:	2000      	movs	r0, #0
    d6fe:	e9cd 0100 	strd	r0, r1, [sp]
    d702:	4803      	ldr	r0, [pc, #12]	; (d710 <fsm_scheduleEvent+0x3c>)
    d704:	f00a f98a 	bl	17a1c <z_impl_k_timer_start>
}
    d708:	b003      	add	sp, #12
    d70a:	bd30      	pop	{r4, r5, pc}
    d70c:	20014e44 	.word	0x20014e44
    d710:	20014650 	.word	0x20014650

0000d714 <api_response_timeout>:
{
    d714:	b508      	push	{r3, lr}
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    d716:	4909      	ldr	r1, [pc, #36]	; (d73c <api_response_timeout+0x28>)
    d718:	4b09      	ldr	r3, [pc, #36]	; (d740 <api_response_timeout+0x2c>)
   LOG_ERR("[DUSTY_Thread] API response timeout! Reconnecting...");
    d71a:	480a      	ldr	r0, [pc, #40]	; (d744 <api_response_timeout+0x30>)
    d71c:	1ac9      	subs	r1, r1, r3
    d71e:	08c9      	lsrs	r1, r1, #3
    d720:	0189      	lsls	r1, r1, #6
    d722:	f041 0101 	orr.w	r1, r1, #1
    d726:	f00b fa6b 	bl	18c00 <log_0>
   dn_ipmg_cancelTx();
    d72a:	f7ff fe23 	bl	d374 <dn_ipmg_cancelTx>
}
    d72e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   fsm_scheduleEvent(BACKOFF_AFTER_TIMEOUT,api_initiateConnect);  
    d732:	2000      	movs	r0, #0
    d734:	4904      	ldr	r1, [pc, #16]	; (d748 <api_response_timeout+0x34>)
    d736:	f7ff bfcd 	b.w	d6d4 <fsm_scheduleEvent>
    d73a:	bf00      	nop
    d73c:	0001c0d4 	.word	0x0001c0d4
    d740:	0001c0d4 	.word	0x0001c0d4
    d744:	0001c7c7 	.word	0x0001c7c7
    d748:	0000d74d 	.word	0x0000d74d

0000d74c <api_initiateConnect>:
{
    d74c:	b508      	push	{r3, lr}
    d74e:	4909      	ldr	r1, [pc, #36]	; (d774 <api_initiateConnect+0x28>)
    d750:	4b09      	ldr	r3, [pc, #36]	; (d778 <api_initiateConnect+0x2c>)
   LOG_INF("[DUSTY_Thread] Initiating connection...");
    d752:	480a      	ldr	r0, [pc, #40]	; (d77c <api_initiateConnect+0x30>)
    d754:	1ac9      	subs	r1, r1, r3
    d756:	08c9      	lsrs	r1, r1, #3
    d758:	0189      	lsls	r1, r1, #6
    d75a:	f041 0103 	orr.w	r1, r1, #3
    d75e:	f00b fa4f 	bl	18c00 <log_0>
   dn_ipmg_initiateConnect();
    d762:	f00a fdeb 	bl	1833c <dn_ipmg_initiateConnect>
}
    d766:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   fsm_scheduleEvent(
    d76a:	2028      	movs	r0, #40	; 0x28
    d76c:	4904      	ldr	r1, [pc, #16]	; (d780 <api_initiateConnect+0x34>)
    d76e:	f7ff bfb1 	b.w	d6d4 <fsm_scheduleEvent>
    d772:	bf00      	nop
    d774:	0001c0d4 	.word	0x0001c0d4
    d778:	0001c0d4 	.word	0x0001c0d4
    d77c:	0001c7fc 	.word	0x0001c7fc
    d780:	0000d715 	.word	0x0000d715

0000d784 <api_getSystemInfo>:
void api_getSystemInfo(void){
    d784:	b508      	push	{r3, lr}
   app_vars.replyCb     = cb;
    d786:	4806      	ldr	r0, [pc, #24]	; (d7a0 <api_getSystemInfo+0x1c>)
    d788:	4b06      	ldr	r3, [pc, #24]	; (d7a4 <api_getSystemInfo+0x20>)
  dn_ipmg_getSystemInfo((dn_ipmg_getSystemInfo_rpt*)(app_vars.replyBuf));
    d78a:	3008      	adds	r0, #8
   app_vars.replyCb     = cb;
    d78c:	f840 3c04 	str.w	r3, [r0, #-4]
  dn_ipmg_getSystemInfo((dn_ipmg_getSystemInfo_rpt*)(app_vars.replyBuf));
    d790:	f7ff fdfe 	bl	d390 <dn_ipmg_getSystemInfo>
}
    d794:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  fsm_scheduleEvent(SERIAL_RESPONSE_TIMEOUT, api_response_timeout);
    d798:	2028      	movs	r0, #40	; 0x28
    d79a:	4903      	ldr	r1, [pc, #12]	; (d7a8 <api_getSystemInfo+0x24>)
    d79c:	f7ff bf9a 	b.w	d6d4 <fsm_scheduleEvent>
    d7a0:	20014e44 	.word	0x20014e44
    d7a4:	0000d7c5 	.word	0x0000d7c5
    d7a8:	0000d715 	.word	0x0000d715

0000d7ac <fsm_cancelEvent>:
{
    d7ac:	b508      	push	{r3, lr}
		arch_syscall_invoke1(*(uintptr_t *)&timer, K_SYSCALL_K_TIMER_STOP);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_stop(timer);
    d7ae:	4803      	ldr	r0, [pc, #12]	; (d7bc <fsm_cancelEvent+0x10>)
    d7b0:	f00e f881 	bl	1b8b6 <z_impl_k_timer_stop>
   app_vars.fsmCb       = NULL;
    d7b4:	2200      	movs	r2, #0
    d7b6:	4b02      	ldr	r3, [pc, #8]	; (d7c0 <fsm_cancelEvent+0x14>)
    d7b8:	601a      	str	r2, [r3, #0]
}
    d7ba:	bd08      	pop	{r3, pc}
    d7bc:	20014650 	.word	0x20014650
    d7c0:	20014e44 	.word	0x20014e44

0000d7c4 <api_getSystemInfo_reply>:
void api_getSystemInfo_reply(void){
    d7c4:	b530      	push	{r4, r5, lr}
  if(reply->RC == 0){
    d7c6:	4c1a      	ldr	r4, [pc, #104]	; (d830 <api_getSystemInfo_reply+0x6c>)
void api_getSystemInfo_reply(void){
    d7c8:	b091      	sub	sp, #68	; 0x44
  fsm_cancelEvent();
    d7ca:	f7ff ffef 	bl	d7ac <fsm_cancelEvent>
  if(reply->RC == 0){
    d7ce:	7a21      	ldrb	r1, [r4, #8]
    d7d0:	2900      	cmp	r1, #0
    d7d2:	d12a      	bne.n	d82a <api_getSystemInfo_reply+0x66>
     sprintf(MAC,"%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X", reply->macAddress[0], reply->macAddress[1], reply->macAddress[2], 
    d7d4:	7c23      	ldrb	r3, [r4, #16]
    d7d6:	2218      	movs	r2, #24
    d7d8:	9307      	str	r3, [sp, #28]
    d7da:	7be3      	ldrb	r3, [r4, #15]
    d7dc:	a80a      	add	r0, sp, #40	; 0x28
    d7de:	9306      	str	r3, [sp, #24]
    d7e0:	7ba3      	ldrb	r3, [r4, #14]
    d7e2:	4d14      	ldr	r5, [pc, #80]	; (d834 <api_getSystemInfo_reply+0x70>)
    d7e4:	9305      	str	r3, [sp, #20]
    d7e6:	7b63      	ldrb	r3, [r4, #13]
    d7e8:	9304      	str	r3, [sp, #16]
    d7ea:	7b23      	ldrb	r3, [r4, #12]
    d7ec:	9303      	str	r3, [sp, #12]
    d7ee:	7ae3      	ldrb	r3, [r4, #11]
    d7f0:	9302      	str	r3, [sp, #8]
    d7f2:	7aa3      	ldrb	r3, [r4, #10]
    d7f4:	9301      	str	r3, [sp, #4]
    d7f6:	7a63      	ldrb	r3, [r4, #9]
    d7f8:	9300      	str	r3, [sp, #0]
    d7fa:	4b0f      	ldr	r3, [pc, #60]	; (d838 <api_getSystemInfo_reply+0x74>)
    d7fc:	f00e f95b 	bl	1bab6 <__sprintf_chk>
    d800:	4b0e      	ldr	r3, [pc, #56]	; (d83c <api_getSystemInfo_reply+0x78>)
     LOG_INF("Hardware model: %i , Hardware Revision: %i , MAC Address: %s \n",reply->hwModel,reply->hwRev,log_strdup(MAC));
    d802:	7c61      	ldrb	r1, [r4, #17]
    d804:	7ca2      	ldrb	r2, [r4, #18]
    d806:	a80a      	add	r0, sp, #40	; 0x28
    d808:	1aed      	subs	r5, r5, r3
    d80a:	9109      	str	r1, [sp, #36]	; 0x24
    d80c:	9208      	str	r2, [sp, #32]
    d80e:	f001 fa31 	bl	ec74 <log_strdup>
    d812:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
    d816:	08ed      	lsrs	r5, r5, #3
    d818:	01ad      	lsls	r5, r5, #6
    d81a:	f045 0503 	orr.w	r5, r5, #3
    d81e:	4603      	mov	r3, r0
    d820:	f8ad 5000 	strh.w	r5, [sp]
    d824:	4806      	ldr	r0, [pc, #24]	; (d840 <api_getSystemInfo_reply+0x7c>)
    d826:	f00b fa2a 	bl	18c7e <log_3>
}
    d82a:	b011      	add	sp, #68	; 0x44
    d82c:	bd30      	pop	{r4, r5, pc}
    d82e:	bf00      	nop
    d830:	20014e44 	.word	0x20014e44
    d834:	0001c0d4 	.word	0x0001c0d4
    d838:	0001c824 	.word	0x0001c824
    d83c:	0001c0d4 	.word	0x0001c0d4
    d840:	0001c84c 	.word	0x0001c84c

0000d844 <dn_ipmg_status_cb>:
{
    d844:	b510      	push	{r4, lr}
   switch (newStatus) {
    d846:	b198      	cbz	r0, d870 <dn_ipmg_status_cb+0x2c>
    d848:	2802      	cmp	r0, #2
    d84a:	d11d      	bne.n	d888 <dn_ipmg_status_cb+0x44>
         fsm_cancelEvent();
    d84c:	f7ff ffae 	bl	d7ac <fsm_cancelEvent>
    d850:	4b0e      	ldr	r3, [pc, #56]	; (d88c <dn_ipmg_status_cb+0x48>)
    d852:	490f      	ldr	r1, [pc, #60]	; (d890 <dn_ipmg_status_cb+0x4c>)
         LOG_INF("[DUSTY_Thread] CONNECTED succesfully!");
    d854:	480f      	ldr	r0, [pc, #60]	; (d894 <dn_ipmg_status_cb+0x50>)
    d856:	1ac9      	subs	r1, r1, r3
    d858:	08c9      	lsrs	r1, r1, #3
    d85a:	0189      	lsls	r1, r1, #6
    d85c:	f041 0103 	orr.w	r1, r1, #3
    d860:	f00b f9ce 	bl	18c00 <log_0>
         fsm_scheduleEvent(
    d864:	490c      	ldr	r1, [pc, #48]	; (d898 <dn_ipmg_status_cb+0x54>)
    d866:	2000      	movs	r0, #0
}
    d868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
         fsm_scheduleEvent(
    d86c:	f7ff bf32 	b.w	d6d4 <fsm_scheduleEvent>
    d870:	4b06      	ldr	r3, [pc, #24]	; (d88c <dn_ipmg_status_cb+0x48>)
    d872:	4907      	ldr	r1, [pc, #28]	; (d890 <dn_ipmg_status_cb+0x4c>)
         LOG_ERR("[DUSTY_Thread] DISCONNECTED! Reconnecting...");
    d874:	4809      	ldr	r0, [pc, #36]	; (d89c <dn_ipmg_status_cb+0x58>)
    d876:	1ac9      	subs	r1, r1, r3
    d878:	08c9      	lsrs	r1, r1, #3
    d87a:	0189      	lsls	r1, r1, #6
    d87c:	f041 0101 	orr.w	r1, r1, #1
    d880:	f00b f9be 	bl	18c00 <log_0>
         fsm_scheduleEvent(
    d884:	4906      	ldr	r1, [pc, #24]	; (d8a0 <dn_ipmg_status_cb+0x5c>)
    d886:	e7ee      	b.n	d866 <dn_ipmg_status_cb+0x22>
}
    d888:	bd10      	pop	{r4, pc}
    d88a:	bf00      	nop
    d88c:	0001c0d4 	.word	0x0001c0d4
    d890:	0001c0d4 	.word	0x0001c0d4
    d894:	0001c88b 	.word	0x0001c88b
    d898:	0000d785 	.word	0x0000d785
    d89c:	0001c8b1 	.word	0x0001c8b1
    d8a0:	0000d74d 	.word	0x0000d74d

0000d8a4 <main>:
}


void main()
{
    d8a4:	b507      	push	{r0, r1, r2, lr}
   memset(&app_vars, 0, sizeof(app_vars));
    d8a6:	f44f 7284 	mov.w	r2, #264	; 0x108
    d8aa:	2100      	movs	r1, #0
    d8ac:	4809      	ldr	r0, [pc, #36]	; (d8d4 <main+0x30>)
    d8ae:	f00e f8fa 	bl	1baa6 <memset>
   // initialize the ipmg module
   dn_ipmg_init(
    d8b2:	2200      	movs	r2, #0
    d8b4:	4b08      	ldr	r3, [pc, #32]	; (d8d8 <main+0x34>)
    d8b6:	4611      	mov	r1, r2
    d8b8:	4610      	mov	r0, r2
    d8ba:	9300      	str	r3, [sp, #0]
    d8bc:	4b07      	ldr	r3, [pc, #28]	; (d8dc <main+0x38>)
    d8be:	f7ff fd3b 	bl	d338 <dn_ipmg_init>
      NULL,                            // notifBuf
      0,                               // notifBufLen
      dn_ipmg_reply_cb,                // replyCb
      dn_ipmg_status_cb                // statusCb
   );
   fsm_scheduleEvent(CMD_PERIOD, &api_initiateConnect);
    d8c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    d8c6:	4906      	ldr	r1, [pc, #24]	; (d8e0 <main+0x3c>)
}
    d8c8:	b003      	add	sp, #12
    d8ca:	f85d eb04 	ldr.w	lr, [sp], #4
   fsm_scheduleEvent(CMD_PERIOD, &api_initiateConnect);
    d8ce:	f7ff bf01 	b.w	d6d4 <fsm_scheduleEvent>
    d8d2:	bf00      	nop
    d8d4:	20014e44 	.word	0x20014e44
    d8d8:	0000d845 	.word	0x0000d845
    d8dc:	0000d6bd 	.word	0x0000d6bd
    d8e0:	0000d74d 	.word	0x0000d74d

0000d8e4 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    d8e4:	2803      	cmp	r0, #3
{
    d8e6:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    d8e8:	d906      	bls.n	d8f8 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
    d8ea:	f00b fd99 	bl	19420 <__errno>
    d8ee:	2309      	movs	r3, #9
    d8f0:	6003      	str	r3, [r0, #0]
    d8f2:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
    d8f6:	bd08      	pop	{r3, pc}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d8f8:	220c      	movs	r2, #12
    d8fa:	4b05      	ldr	r3, [pc, #20]	; (d910 <_check_fd+0x2c>)
    d8fc:	fb02 3000 	mla	r0, r2, r0, r3
    d900:	3008      	adds	r0, #8
    d902:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
    d906:	2b00      	cmp	r3, #0
    d908:	d0ef      	beq.n	d8ea <_check_fd+0x6>
	return 0;
    d90a:	2000      	movs	r0, #0
    d90c:	e7f3      	b.n	d8f6 <_check_fd+0x12>
    d90e:	bf00      	nop
    d910:	20014f4c 	.word	0x20014f4c

0000d914 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
    d914:	b570      	push	{r4, r5, r6, lr}
    d916:	4604      	mov	r4, r0
    d918:	460d      	mov	r5, r1
    d91a:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    d91c:	f7ff ffe2 	bl	d8e4 <_check_fd>
    d920:	2800      	cmp	r0, #0
    d922:	db0a      	blt.n	d93a <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
    d924:	4a08      	ldr	r2, [pc, #32]	; (d948 <z_get_fd_obj+0x34>)
    d926:	b155      	cbz	r5, d93e <z_get_fd_obj+0x2a>
    d928:	230c      	movs	r3, #12
    d92a:	fb03 2304 	mla	r3, r3, r4, r2
    d92e:	685b      	ldr	r3, [r3, #4]
    d930:	42ab      	cmp	r3, r5
    d932:	d004      	beq.n	d93e <z_get_fd_obj+0x2a>
		errno = err;
    d934:	f00b fd74 	bl	19420 <__errno>
    d938:	6006      	str	r6, [r0, #0]
		return NULL;
    d93a:	2000      	movs	r0, #0
    d93c:	e002      	b.n	d944 <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
    d93e:	200c      	movs	r0, #12
    d940:	4344      	muls	r4, r0
    d942:	5910      	ldr	r0, [r2, r4]
}
    d944:	bd70      	pop	{r4, r5, r6, pc}
    d946:	bf00      	nop
    d948:	20014f4c 	.word	0x20014f4c

0000d94c <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
    d94c:	b538      	push	{r3, r4, r5, lr}
    d94e:	4605      	mov	r5, r0
    d950:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    d952:	f7ff ffc7 	bl	d8e4 <_check_fd>
    d956:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
    d958:	bfa3      	ittte	ge
    d95a:	230c      	movge	r3, #12
    d95c:	fb03 f005 	mulge.w	r0, r3, r5
    d960:	4a03      	ldrge	r2, [pc, #12]	; (d970 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
    d962:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
    d964:	bfa1      	itttt	ge
    d966:	1813      	addge	r3, r2, r0
    d968:	685b      	ldrge	r3, [r3, #4]
    d96a:	6023      	strge	r3, [r4, #0]

	return fd_entry->obj;
    d96c:	5810      	ldrge	r0, [r2, r0]
}
    d96e:	bd38      	pop	{r3, r4, r5, pc}
    d970:	20014f4c 	.word	0x20014f4c

0000d974 <z_reserve_fd>:

int z_reserve_fd(void)
{
    d974:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    d976:	2400      	movs	r4, #0
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    d978:	f04f 33ff 	mov.w	r3, #4294967295
    d97c:	f04f 32ff 	mov.w	r2, #4294967295
    d980:	4812      	ldr	r0, [pc, #72]	; (d9cc <z_reserve_fd+0x58>)
    d982:	f009 f8ad 	bl	16ae0 <z_impl_k_mutex_lock>
    d986:	4b12      	ldr	r3, [pc, #72]	; (d9d0 <z_reserve_fd+0x5c>)
    d988:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
    d98c:	b17a      	cbz	r2, d9ae <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    d98e:	3401      	adds	r4, #1
    d990:	2c04      	cmp	r4, #4
    d992:	f103 030c 	add.w	r3, r3, #12
    d996:	d1f7      	bne.n	d988 <z_reserve_fd+0x14>
	errno = ENFILE;
    d998:	f00b fd42 	bl	19420 <__errno>
    d99c:	2317      	movs	r3, #23
	return -1;
    d99e:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
    d9a2:	6003      	str	r3, [r0, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    d9a4:	4809      	ldr	r0, [pc, #36]	; (d9cc <z_reserve_fd+0x58>)
    d9a6:	f009 f913 	bl	16bd0 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    d9aa:	4620      	mov	r0, r4
    d9ac:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d9ae:	e8d3 1fef 	ldaex	r1, [r3]
    d9b2:	3101      	adds	r1, #1
    d9b4:	e8c3 1fe0 	stlex	r0, r1, [r3]
    d9b8:	2800      	cmp	r0, #0
    d9ba:	d1f8      	bne.n	d9ae <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
    d9bc:	230c      	movs	r3, #12
    d9be:	4363      	muls	r3, r4
    d9c0:	4904      	ldr	r1, [pc, #16]	; (d9d4 <z_reserve_fd+0x60>)
    d9c2:	18c8      	adds	r0, r1, r3
    d9c4:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
    d9c6:	6042      	str	r2, [r0, #4]
    d9c8:	e7ec      	b.n	d9a4 <z_reserve_fd+0x30>
    d9ca:	bf00      	nop
    d9cc:	200146c4 	.word	0x200146c4
    d9d0:	20014f54 	.word	0x20014f54
    d9d4:	20014f4c 	.word	0x20014f4c

0000d9d8 <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
    d9d8:	230c      	movs	r3, #12
{
    d9da:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
    d9dc:	4358      	muls	r0, r3
    d9de:	4c02      	ldr	r4, [pc, #8]	; (d9e8 <z_finalize_fd+0x10>)
    d9e0:	1823      	adds	r3, r4, r0
    d9e2:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
    d9e4:	605a      	str	r2, [r3, #4]
}
    d9e6:	bd10      	pop	{r4, pc}
    d9e8:	20014f4c 	.word	0x20014f4c

0000d9ec <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
    d9ec:	230c      	movs	r3, #12
    d9ee:	4a0e      	ldr	r2, [pc, #56]	; (da28 <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
    d9f0:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
    d9f2:	fb03 2300 	mla	r3, r3, r0, r2
    d9f6:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d9f8:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
    d9fc:	b191      	cbz	r1, da24 <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
    d9fe:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    da00:	e8d3 5fef 	ldaex	r5, [r3]
    da04:	428d      	cmp	r5, r1
    da06:	d104      	bne.n	da12 <z_free_fd+0x26>
    da08:	e8c3 4fec 	stlex	ip, r4, [r3]
    da0c:	f1bc 0f00 	cmp.w	ip, #0
    da10:	d1f6      	bne.n	da00 <z_free_fd+0x14>
    da12:	d1f1      	bne.n	d9f8 <z_free_fd+0xc>
	if (old_rc != 1) {
    da14:	2901      	cmp	r1, #1
    da16:	d105      	bne.n	da24 <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
    da18:	230c      	movs	r3, #12
    da1a:	4358      	muls	r0, r3
    da1c:	2300      	movs	r3, #0
    da1e:	1811      	adds	r1, r2, r0
    da20:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
    da22:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
    da24:	bd30      	pop	{r4, r5, pc}
    da26:	bf00      	nop
    da28:	20014f4c 	.word	0x20014f4c

0000da2c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    da2c:	680b      	ldr	r3, [r1, #0]
    da2e:	3301      	adds	r3, #1
    da30:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    da32:	4b01      	ldr	r3, [pc, #4]	; (da38 <char_out+0xc>)
    da34:	681b      	ldr	r3, [r3, #0]
    da36:	4718      	bx	r3
    da38:	20014500 	.word	0x20014500

0000da3c <__printk_hook_install>:
	_char_out = fn;
    da3c:	4b01      	ldr	r3, [pc, #4]	; (da44 <__printk_hook_install+0x8>)
    da3e:	6018      	str	r0, [r3, #0]
}
    da40:	4770      	bx	lr
    da42:	bf00      	nop
    da44:	20014500 	.word	0x20014500

0000da48 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    da48:	b507      	push	{r0, r1, r2, lr}
    da4a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    da4c:	2100      	movs	r1, #0
{
    da4e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    da50:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    da52:	4803      	ldr	r0, [pc, #12]	; (da60 <vprintk+0x18>)
    da54:	a901      	add	r1, sp, #4
    da56:	f000 f967 	bl	dd28 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    da5a:	b003      	add	sp, #12
    da5c:	f85d fb04 	ldr.w	pc, [sp], #4
    da60:	0000da2d 	.word	0x0000da2d

0000da64 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    da64:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    da66:	2500      	movs	r5, #0
{
    da68:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    da6a:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    da6e:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    da70:	a901      	add	r1, sp, #4
    da72:	4805      	ldr	r0, [pc, #20]	; (da88 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    da74:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    da76:	f000 f957 	bl	dd28 <cbvprintf>

	if (ctx.count < ctx.max) {
    da7a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    da7e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    da80:	bfb8      	it	lt
    da82:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    da84:	b005      	add	sp, #20
    da86:	bd30      	pop	{r4, r5, pc}
    da88:	000183b7 	.word	0x000183b7

0000da8c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    da8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    da90:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    da94:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    da96:	f019 0808 	ands.w	r8, r9, #8
{
    da9a:	4693      	mov	fp, r2
	if (processing) {
    da9c:	d00e      	beq.n	dabc <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    da9e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    daa0:	bf0c      	ite	eq
    daa2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    daa6:	f049 0920 	orrne.w	r9, r9, #32
    daaa:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    daae:	f38b 8811 	msr	BASEPRI, fp
    dab2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    dab6:	b003      	add	sp, #12
    dab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    dabc:	f8df a198 	ldr.w	sl, [pc, #408]	; dc58 <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dac0:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    dac4:	2902      	cmp	r1, #2
    dac6:	d107      	bne.n	dad8 <process_event+0x4c>
			evt = process_recheck(mgr);
    dac8:	4620      	mov	r0, r4
    daca:	f00a fca1 	bl	18410 <process_recheck>
		if (evt == EVT_NOP) {
    dace:	2800      	cmp	r0, #0
    dad0:	d0ed      	beq.n	daae <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    dad2:	2801      	cmp	r0, #1
    dad4:	8b23      	ldrh	r3, [r4, #24]
    dad6:	d14d      	bne.n	db74 <process_event+0xe8>
			res = mgr->last_res;
    dad8:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dada:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    dadc:	2f00      	cmp	r7, #0
    dade:	da15      	bge.n	db0c <process_event+0x80>
		*clients = mgr->clients;
    dae0:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dae2:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    dae6:	e9c4 8800 	strd	r8, r8, [r4]
    daea:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    daee:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    daf0:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    daf2:	8b21      	ldrh	r1, [r4, #24]
    daf4:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    daf8:	454a      	cmp	r2, r9
    dafa:	d002      	beq.n	db02 <process_event+0x76>
		if (do_monitors
    dafc:	68a3      	ldr	r3, [r4, #8]
    dafe:	2b00      	cmp	r3, #0
    db00:	d159      	bne.n	dbb6 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    db02:	b90d      	cbnz	r5, db08 <process_event+0x7c>
		    || (transit != NULL)) {
    db04:	2e00      	cmp	r6, #0
    db06:	d071      	beq.n	dbec <process_event+0x160>
    db08:	2300      	movs	r3, #0
    db0a:	e055      	b.n	dbb8 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    db0c:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    db10:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    db12:	2a01      	cmp	r2, #1
    db14:	d81f      	bhi.n	db56 <process_event+0xca>
		*clients = mgr->clients;
    db16:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    db1a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    db1c:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    db1e:	b289      	uxth	r1, r1
	list->tail = NULL;
    db20:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    db24:	d10c      	bne.n	db40 <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    db26:	2d00      	cmp	r5, #0
    db28:	462b      	mov	r3, r5
    db2a:	bf38      	it	cc
    db2c:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    db2e:	b12b      	cbz	r3, db3c <process_event+0xb0>
				mgr->refs += 1U;
    db30:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    db32:	681b      	ldr	r3, [r3, #0]
    db34:	3201      	adds	r2, #1
    db36:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    db38:	2b00      	cmp	r3, #0
    db3a:	d1f8      	bne.n	db2e <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    db3c:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    db40:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    db42:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    db44:	f00a fc64 	bl	18410 <process_recheck>
    db48:	2800      	cmp	r0, #0
    db4a:	d0d1      	beq.n	daf0 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    db4c:	8b23      	ldrh	r3, [r4, #24]
    db4e:	f043 0320 	orr.w	r3, r3, #32
    db52:	8323      	strh	r3, [r4, #24]
    db54:	e7cc      	b.n	daf0 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    db56:	2b04      	cmp	r3, #4
    db58:	d10a      	bne.n	db70 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    db5a:	f021 0107 	bic.w	r1, r1, #7
    db5e:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    db60:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    db62:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    db64:	f00a fc54 	bl	18410 <process_recheck>
    db68:	b110      	cbz	r0, db70 <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    db6a:	f041 0120 	orr.w	r1, r1, #32
    db6e:	8321      	strh	r1, [r4, #24]
    db70:	2500      	movs	r5, #0
    db72:	e7bd      	b.n	daf0 <process_event+0x64>
		} else if (evt == EVT_START) {
    db74:	2803      	cmp	r0, #3
    db76:	d109      	bne.n	db8c <process_event+0x100>
			transit = mgr->transitions->start;
    db78:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    db7a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    db7e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    db80:	f043 0306 	orr.w	r3, r3, #6
}
    db84:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    db86:	8323      	strh	r3, [r4, #24]
		res = 0;
    db88:	462f      	mov	r7, r5
    db8a:	e7b2      	b.n	daf2 <process_event+0x66>
		} else if (evt == EVT_STOP) {
    db8c:	2804      	cmp	r0, #4
    db8e:	d106      	bne.n	db9e <process_event+0x112>
			transit = mgr->transitions->stop;
    db90:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    db92:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    db96:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    db98:	f043 0304 	orr.w	r3, r3, #4
    db9c:	e7f2      	b.n	db84 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    db9e:	2805      	cmp	r0, #5
    dba0:	d106      	bne.n	dbb0 <process_event+0x124>
			transit = mgr->transitions->reset;
    dba2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dba4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    dba8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dbaa:	f043 0305 	orr.w	r3, r3, #5
    dbae:	e7e9      	b.n	db84 <process_event+0xf8>
    dbb0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    dbb2:	462e      	mov	r6, r5
    dbb4:	e7e8      	b.n	db88 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    dbb6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    dbb8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    dbbc:	8321      	strh	r1, [r4, #24]
    dbbe:	f38b 8811 	msr	BASEPRI, fp
    dbc2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    dbc6:	bb03      	cbnz	r3, dc0a <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    dbc8:	2d00      	cmp	r5, #0
    dbca:	d134      	bne.n	dc36 <process_event+0x1aa>
			if (transit != NULL) {
    dbcc:	b116      	cbz	r6, dbd4 <process_event+0x148>
				transit(mgr, transition_complete);
    dbce:	4651      	mov	r1, sl
    dbd0:	4620      	mov	r0, r4
    dbd2:	47b0      	blx	r6
	__asm__ volatile(
    dbd4:	f04f 0320 	mov.w	r3, #32
    dbd8:	f3ef 8b11 	mrs	fp, BASEPRI
    dbdc:	f383 8811 	msr	BASEPRI, r3
    dbe0:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    dbe4:	8b23      	ldrh	r3, [r4, #24]
    dbe6:	f023 0308 	bic.w	r3, r3, #8
    dbea:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    dbec:	8b23      	ldrh	r3, [r4, #24]
    dbee:	06da      	lsls	r2, r3, #27
    dbf0:	d52a      	bpl.n	dc48 <process_event+0x1bc>
			evt = EVT_COMPLETE;
    dbf2:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    dbf4:	f023 0310 	bic.w	r3, r3, #16
    dbf8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    dbfa:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    dbfe:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    dc02:	2900      	cmp	r1, #0
    dc04:	f47f af5e 	bne.w	dac4 <process_event+0x38>
out:
    dc08:	e751      	b.n	daae <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    dc0a:	68a1      	ldr	r1, [r4, #8]
    dc0c:	2900      	cmp	r1, #0
    dc0e:	d0db      	beq.n	dbc8 <process_event+0x13c>
	return node->next;
    dc10:	680b      	ldr	r3, [r1, #0]
    dc12:	2b00      	cmp	r3, #0
    dc14:	bf38      	it	cc
    dc16:	2300      	movcc	r3, #0
    dc18:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
    dc1a:	4620      	mov	r0, r4
    dc1c:	463b      	mov	r3, r7
    dc1e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    dc22:	9201      	str	r2, [sp, #4]
    dc24:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    dc26:	9a01      	ldr	r2, [sp, #4]
    dc28:	f1b9 0f00 	cmp.w	r9, #0
    dc2c:	d0cc      	beq.n	dbc8 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    dc2e:	4649      	mov	r1, r9
    dc30:	f8d9 3000 	ldr.w	r3, [r9]
    dc34:	e7ed      	b.n	dc12 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    dc36:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    dc38:	463b      	mov	r3, r7
    dc3a:	4620      	mov	r0, r4
    dc3c:	9201      	str	r2, [sp, #4]
    dc3e:	682d      	ldr	r5, [r5, #0]
    dc40:	f00a fc02 	bl	18448 <notify_one>
	while (!sys_slist_is_empty(list)) {
    dc44:	9a01      	ldr	r2, [sp, #4]
    dc46:	e7bf      	b.n	dbc8 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    dc48:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    dc4c:	bf1e      	ittt	ne
    dc4e:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    dc52:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    dc54:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    dc56:	e7d0      	b.n	dbfa <process_event+0x16e>
    dc58:	00018475 	.word	0x00018475

0000dc5c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    dc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc5e:	4602      	mov	r2, r0
    dc60:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    dc62:	270a      	movs	r7, #10
	size_t val = 0;
    dc64:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    dc66:	4e07      	ldr	r6, [pc, #28]	; (dc84 <extract_decimal+0x28>)
    dc68:	460c      	mov	r4, r1
    dc6a:	7823      	ldrb	r3, [r4, #0]
    dc6c:	3101      	adds	r1, #1
    dc6e:	5d9d      	ldrb	r5, [r3, r6]
    dc70:	076d      	lsls	r5, r5, #29
    dc72:	d401      	bmi.n	dc78 <extract_decimal+0x1c>
	}
	*str = sp;
    dc74:	6014      	str	r4, [r2, #0]
	return val;
}
    dc76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    dc78:	fb07 3300 	mla	r3, r7, r0, r3
    dc7c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    dc80:	e7f2      	b.n	dc68 <extract_decimal+0xc>
    dc82:	bf00      	nop
    dc84:	0001d64b 	.word	0x0001d64b

0000dc88 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    dc88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc8c:	4614      	mov	r4, r2
    dc8e:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    dc90:	78d3      	ldrb	r3, [r2, #3]
    dc92:	4a24      	ldr	r2, [pc, #144]	; (dd24 <encode_uint+0x9c>)
	switch (specifier) {
    dc94:	2b6f      	cmp	r3, #111	; 0x6f
    dc96:	f813 a002 	ldrb.w	sl, [r3, r2]
{
    dc9a:	4606      	mov	r6, r0
    dc9c:	f00a 0203 	and.w	r2, sl, #3
    dca0:	460f      	mov	r7, r1
    dca2:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    dca4:	d02d      	beq.n	dd02 <encode_uint+0x7a>
    dca6:	d828      	bhi.n	dcfa <encode_uint+0x72>
		return 16;
    dca8:	2b58      	cmp	r3, #88	; 0x58
    dcaa:	bf14      	ite	ne
    dcac:	250a      	movne	r5, #10
    dcae:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    dcb0:	46aa      	mov	sl, r5
    dcb2:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
    dcb6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    dcba:	4652      	mov	r2, sl
    dcbc:	465b      	mov	r3, fp
    dcbe:	4630      	mov	r0, r6
    dcc0:	4639      	mov	r1, r7
    dcc2:	f7fe fed9 	bl	ca78 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    dcc6:	2a09      	cmp	r2, #9
    dcc8:	b2d3      	uxtb	r3, r2
    dcca:	d81f      	bhi.n	dd0c <encode_uint+0x84>
    dccc:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    dcce:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    dcd0:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    dcd2:	bf08      	it	eq
    dcd4:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    dcd6:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    dcda:	d301      	bcc.n	dce0 <encode_uint+0x58>
    dcdc:	45c8      	cmp	r8, r9
    dcde:	d812      	bhi.n	dd06 <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    dce0:	7823      	ldrb	r3, [r4, #0]
    dce2:	069b      	lsls	r3, r3, #26
    dce4:	d505      	bpl.n	dcf2 <encode_uint+0x6a>
		if (radix == 8) {
    dce6:	2d08      	cmp	r5, #8
    dce8:	d116      	bne.n	dd18 <encode_uint+0x90>
			conv->altform_0 = true;
    dcea:	78a3      	ldrb	r3, [r4, #2]
    dcec:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    dcf0:	70a3      	strb	r3, [r4, #2]
		}
	}

	return bp;
}
    dcf2:	4640      	mov	r0, r8
    dcf4:	b003      	add	sp, #12
    dcf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    dcfa:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    dcfe:	2b70      	cmp	r3, #112	; 0x70
    dd00:	e7d3      	b.n	dcaa <encode_uint+0x22>
	switch (specifier) {
    dd02:	2508      	movs	r5, #8
    dd04:	e7d4      	b.n	dcb0 <encode_uint+0x28>
		value /= radix;
    dd06:	4606      	mov	r6, r0
    dd08:	460f      	mov	r7, r1
    dd0a:	e7d6      	b.n	dcba <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    dd0c:	9a01      	ldr	r2, [sp, #4]
    dd0e:	2a01      	cmp	r2, #1
    dd10:	bf0c      	ite	eq
    dd12:	3337      	addeq	r3, #55	; 0x37
    dd14:	3357      	addne	r3, #87	; 0x57
    dd16:	e7da      	b.n	dcce <encode_uint+0x46>
		} else if (radix == 16) {
    dd18:	2d10      	cmp	r5, #16
    dd1a:	d1ea      	bne.n	dcf2 <encode_uint+0x6a>
			conv->altform_0c = true;
    dd1c:	78a3      	ldrb	r3, [r4, #2]
    dd1e:	f043 0310 	orr.w	r3, r3, #16
    dd22:	e7e5      	b.n	dcf0 <encode_uint+0x68>
    dd24:	0001d64b 	.word	0x0001d64b

0000dd28 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    dd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd2c:	4688      	mov	r8, r1
    dd2e:	4691      	mov	r9, r2
    dd30:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    dd32:	2500      	movs	r5, #0
{
    dd34:	b0a3      	sub	sp, #140	; 0x8c
    dd36:	9006      	str	r0, [sp, #24]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    dd38:	f899 0000 	ldrb.w	r0, [r9]
    dd3c:	b910      	cbnz	r0, dd44 <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
    dd3e:	4628      	mov	r0, r5
    dd40:	f000 bdae 	b.w	e8a0 <cbvprintf+0xb78>
		if (*fp != '%') {
    dd44:	f109 0301 	add.w	r3, r9, #1
    dd48:	2825      	cmp	r0, #37	; 0x25
    dd4a:	9307      	str	r3, [sp, #28]
    dd4c:	d007      	beq.n	dd5e <cbvprintf+0x36>
			OUTC(*fp++);
    dd4e:	4641      	mov	r1, r8
			OUTC('%');
    dd50:	9b06      	ldr	r3, [sp, #24]
    dd52:	4798      	blx	r3
    dd54:	2800      	cmp	r0, #0
    dd56:	f2c0 85a3 	blt.w	e8a0 <cbvprintf+0xb78>
    dd5a:	3501      	adds	r5, #1
		if (bps == NULL) {
    dd5c:	e224      	b.n	e1a8 <cbvprintf+0x480>
		} state = {
    dd5e:	2218      	movs	r2, #24
    dd60:	2100      	movs	r1, #0
    dd62:	a814      	add	r0, sp, #80	; 0x50
    dd64:	f00d fe9f 	bl	1baa6 <memset>
	if (*sp == '%') {
    dd68:	f899 3001 	ldrb.w	r3, [r9, #1]
    dd6c:	2b25      	cmp	r3, #37	; 0x25
    dd6e:	d059      	beq.n	de24 <cbvprintf+0xfc>
    dd70:	9a07      	ldr	r2, [sp, #28]
    dd72:	4616      	mov	r6, r2
		switch (*sp) {
    dd74:	f812 3b01 	ldrb.w	r3, [r2], #1
    dd78:	2b2b      	cmp	r3, #43	; 0x2b
    dd7a:	f000 808b 	beq.w	de94 <cbvprintf+0x16c>
    dd7e:	d879      	bhi.n	de74 <cbvprintf+0x14c>
    dd80:	2b20      	cmp	r3, #32
    dd82:	f000 808c 	beq.w	de9e <cbvprintf+0x176>
    dd86:	2b23      	cmp	r3, #35	; 0x23
    dd88:	f000 808e 	beq.w	dea8 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
    dd8c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    dd90:	f003 0244 	and.w	r2, r3, #68	; 0x44
    dd94:	2a44      	cmp	r2, #68	; 0x44
    dd96:	d103      	bne.n	dda0 <cbvprintf+0x78>
		conv->flag_zero = false;
    dd98:	f36f 1386 	bfc	r3, #6, #1
    dd9c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	conv->width_present = true;
    dda0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    dda4:	9612      	str	r6, [sp, #72]	; 0x48
    dda6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ddaa:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	if (*sp == '*') {
    ddae:	7833      	ldrb	r3, [r6, #0]
    ddb0:	2b2a      	cmp	r3, #42	; 0x2a
    ddb2:	d17e      	bne.n	deb2 <cbvprintf+0x18a>
		conv->width_star = true;
    ddb4:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    ddb8:	f043 0301 	orr.w	r3, r3, #1
    ddbc:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		return ++sp;
    ddc0:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    ddc2:	9312      	str	r3, [sp, #72]	; 0x48
	conv->prec_present = (*sp == '.');
    ddc4:	781a      	ldrb	r2, [r3, #0]
    ddc6:	2a2e      	cmp	r2, #46	; 0x2e
    ddc8:	bf0c      	ite	eq
    ddca:	2101      	moveq	r1, #1
    ddcc:	2100      	movne	r1, #0
    ddce:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
    ddd2:	f361 0241 	bfi	r2, r1, #1, #1
    ddd6:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	if (!conv->prec_present) {
    ddda:	d10b      	bne.n	ddf4 <cbvprintf+0xcc>
	++sp;
    dddc:	1c5a      	adds	r2, r3, #1
    ddde:	9212      	str	r2, [sp, #72]	; 0x48
	if (*sp == '*') {
    dde0:	785a      	ldrb	r2, [r3, #1]
    dde2:	2a2a      	cmp	r2, #42	; 0x2a
    dde4:	d17b      	bne.n	dede <cbvprintf+0x1b6>
		conv->prec_star = true;
    dde6:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
		return ++sp;
    ddea:	3302      	adds	r3, #2
		conv->prec_star = true;
    ddec:	f042 0204 	orr.w	r2, r2, #4
    ddf0:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	switch (*sp) {
    ddf4:	461a      	mov	r2, r3
    ddf6:	f812 0b01 	ldrb.w	r0, [r2], #1
    ddfa:	286c      	cmp	r0, #108	; 0x6c
    ddfc:	f000 80cf 	beq.w	df9e <cbvprintf+0x276>
    de00:	d87d      	bhi.n	defe <cbvprintf+0x1d6>
    de02:	2868      	cmp	r0, #104	; 0x68
    de04:	f000 8084 	beq.w	df10 <cbvprintf+0x1e8>
    de08:	286a      	cmp	r0, #106	; 0x6a
    de0a:	f000 80d2 	beq.w	dfb2 <cbvprintf+0x28a>
    de0e:	284c      	cmp	r0, #76	; 0x4c
    de10:	f000 80d6 	beq.w	dfc0 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
    de14:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
    de18:	f36f 02c6 	bfc	r2, #3, #4
    de1c:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
		break;
    de20:	461a      	mov	r2, r3
    de22:	e080      	b.n	df26 <cbvprintf+0x1fe>
		conv->specifier = *sp++;
    de24:	f109 0202 	add.w	r2, r9, #2
    de28:	9207      	str	r2, [sp, #28]
    de2a:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
		if (conv->width_star) {
    de2e:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    de32:	07de      	lsls	r6, r3, #31
    de34:	f140 816d 	bpl.w	e112 <cbvprintf+0x3ea>
			width = va_arg(ap, int);
    de38:	f854 ab04 	ldr.w	sl, [r4], #4
			if (width < 0) {
    de3c:	f1ba 0f00 	cmp.w	sl, #0
    de40:	da07      	bge.n	de52 <cbvprintf+0x12a>
				conv->flag_dash = true;
    de42:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
				width = -width;
    de46:	f1ca 0a00 	rsb	sl, sl, #0
				conv->flag_dash = true;
    de4a:	f042 0204 	orr.w	r2, r2, #4
    de4e:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
		if (conv->prec_star) {
    de52:	0758      	lsls	r0, r3, #29
    de54:	f140 8166 	bpl.w	e124 <cbvprintf+0x3fc>
			int arg = va_arg(ap, int);
    de58:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    de5c:	2f00      	cmp	r7, #0
    de5e:	f280 8165 	bge.w	e12c <cbvprintf+0x404>
				conv->prec_present = false;
    de62:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    de66:	f36f 0341 	bfc	r3, #1, #1
    de6a:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		int precision = -1;
    de6e:	f04f 37ff 	mov.w	r7, #4294967295
    de72:	e15b      	b.n	e12c <cbvprintf+0x404>
		switch (*sp) {
    de74:	2b2d      	cmp	r3, #45	; 0x2d
    de76:	d006      	beq.n	de86 <cbvprintf+0x15e>
    de78:	2b30      	cmp	r3, #48	; 0x30
    de7a:	d187      	bne.n	dd8c <cbvprintf+0x64>
			conv->flag_zero = true;
    de7c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    de80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    de84:	e003      	b.n	de8e <cbvprintf+0x166>
			conv->flag_dash = true;
    de86:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    de8a:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    de8e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
			break;
    de92:	e76e      	b.n	dd72 <cbvprintf+0x4a>
			conv->flag_plus = true;
    de94:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    de98:	f043 0308 	orr.w	r3, r3, #8
    de9c:	e7f7      	b.n	de8e <cbvprintf+0x166>
			conv->flag_space = true;
    de9e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    dea2:	f043 0310 	orr.w	r3, r3, #16
    dea6:	e7f2      	b.n	de8e <cbvprintf+0x166>
			conv->flag_hash = true;
    dea8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    deac:	f043 0320 	orr.w	r3, r3, #32
    deb0:	e7ed      	b.n	de8e <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
    deb2:	a812      	add	r0, sp, #72	; 0x48
    deb4:	f7ff fed2 	bl	dc5c <extract_decimal>
	if (sp != wp) {
    deb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    deba:	42b3      	cmp	r3, r6
    debc:	d081      	beq.n	ddc2 <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
    debe:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
		conv->width_value = width;
    dec2:	9017      	str	r0, [sp, #92]	; 0x5c
		conv->unsupported |= ((conv->width_value < 0)
    dec4:	f3c6 0140 	ubfx	r1, r6, #1, #1
    dec8:	ea41 70d0 	orr.w	r0, r1, r0, lsr #31
    decc:	0042      	lsls	r2, r0, #1
    dece:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ded2:	f006 067d 	and.w	r6, r6, #125	; 0x7d
    ded6:	4332      	orrs	r2, r6
    ded8:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
    dedc:	e771      	b.n	ddc2 <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
    dede:	a812      	add	r0, sp, #72	; 0x48
    dee0:	f7ff febc 	bl	dc5c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    dee4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
	conv->prec_value = prec;
    dee8:	9018      	str	r0, [sp, #96]	; 0x60
	conv->unsupported |= ((conv->prec_value < 0)
    deea:	f3c3 0240 	ubfx	r2, r3, #1, #1
    deee:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    def2:	f360 0341 	bfi	r3, r0, #1, #1
    def6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	return sp;
    defa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    defc:	e77a      	b.n	ddf4 <cbvprintf+0xcc>
	switch (*sp) {
    defe:	2874      	cmp	r0, #116	; 0x74
    df00:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
    df04:	d059      	beq.n	dfba <cbvprintf+0x292>
    df06:	287a      	cmp	r0, #122	; 0x7a
    df08:	d184      	bne.n	de14 <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
    df0a:	460b      	mov	r3, r1
    df0c:	2106      	movs	r1, #6
    df0e:	e041      	b.n	df94 <cbvprintf+0x26c>
		if (*++sp == 'h') {
    df10:	7859      	ldrb	r1, [r3, #1]
    df12:	2968      	cmp	r1, #104	; 0x68
    df14:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
    df18:	d13a      	bne.n	df90 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
    df1a:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
    df1c:	f362 01c6 	bfi	r1, r2, #3, #4
    df20:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
			++sp;
    df24:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
    df26:	4613      	mov	r3, r2
    df28:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
    df2c:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    df2e:	9307      	str	r3, [sp, #28]
    df30:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
	switch (conv->specifier) {
    df34:	f200 80c5 	bhi.w	e0c2 <cbvprintf+0x39a>
    df38:	2a57      	cmp	r2, #87	; 0x57
    df3a:	d84e      	bhi.n	dfda <cbvprintf+0x2b2>
    df3c:	2a41      	cmp	r2, #65	; 0x41
    df3e:	d004      	beq.n	df4a <cbvprintf+0x222>
    df40:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    df44:	2b02      	cmp	r3, #2
    df46:	f200 80bc 	bhi.w	e0c2 <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    df4a:	2104      	movs	r1, #4
    df4c:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			|| (conv->specifier == 'A');
    df50:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    df54:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    df58:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    df5c:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
    df60:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
			|| (conv->specifier == 'A');
    df64:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
    df68:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    df6c:	060a      	lsls	r2, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
    df6e:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		conv->specifier_a = (conv->specifier == 'a')
    df72:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
		if (conv->specifier_a
    df76:	b2cb      	uxtb	r3, r1
    df78:	f100 80c9 	bmi.w	e10e <cbvprintf+0x3e6>
		if (conv->length_mod == LENGTH_L) {
    df7c:	f003 0278 	and.w	r2, r3, #120	; 0x78
    df80:	2a18      	cmp	r2, #24
    df82:	f040 809b 	bne.w	e0bc <cbvprintf+0x394>
			conv->length_mod = LENGTH_NONE;
    df86:	f36f 03c6 	bfc	r3, #3, #4
    df8a:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    df8e:	e082      	b.n	e096 <cbvprintf+0x36e>
			conv->length_mod = LENGTH_H;
    df90:	460b      	mov	r3, r1
    df92:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
    df94:	f361 03c6 	bfi	r3, r1, #3, #4
    df98:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    df9c:	e7c3      	b.n	df26 <cbvprintf+0x1fe>
		if (*++sp == 'l') {
    df9e:	7859      	ldrb	r1, [r3, #1]
    dfa0:	296c      	cmp	r1, #108	; 0x6c
    dfa2:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
    dfa6:	d101      	bne.n	dfac <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
    dfa8:	2204      	movs	r2, #4
    dfaa:	e7b7      	b.n	df1c <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
    dfac:	460b      	mov	r3, r1
    dfae:	2103      	movs	r1, #3
    dfb0:	e7f0      	b.n	df94 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
    dfb2:	2105      	movs	r1, #5
    dfb4:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    dfb8:	e7ec      	b.n	df94 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
    dfba:	460b      	mov	r3, r1
    dfbc:	2107      	movs	r1, #7
    dfbe:	e7e9      	b.n	df94 <cbvprintf+0x26c>
		conv->unsupported = true;
    dfc0:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    dfc4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    dfc8:	f023 0302 	bic.w	r3, r3, #2
    dfcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    dfd0:	f043 0302 	orr.w	r3, r3, #2
    dfd4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
		break;
    dfd8:	e7a5      	b.n	df26 <cbvprintf+0x1fe>
    dfda:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    dfde:	2b20      	cmp	r3, #32
    dfe0:	d86f      	bhi.n	e0c2 <cbvprintf+0x39a>
    dfe2:	a101      	add	r1, pc, #4	; (adr r1, dfe8 <cbvprintf+0x2c0>)
    dfe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    dfe8:	0000e09b 	.word	0x0000e09b
    dfec:	0000e0c3 	.word	0x0000e0c3
    dff0:	0000e0c3 	.word	0x0000e0c3
    dff4:	0000e0c3 	.word	0x0000e0c3
    dff8:	0000e0c3 	.word	0x0000e0c3
    dffc:	0000e0c3 	.word	0x0000e0c3
    e000:	0000e0c3 	.word	0x0000e0c3
    e004:	0000e0c3 	.word	0x0000e0c3
    e008:	0000e0c3 	.word	0x0000e0c3
    e00c:	0000df4b 	.word	0x0000df4b
    e010:	0000e0c3 	.word	0x0000e0c3
    e014:	0000e09b 	.word	0x0000e09b
    e018:	0000e06d 	.word	0x0000e06d
    e01c:	0000df4b 	.word	0x0000df4b
    e020:	0000df4b 	.word	0x0000df4b
    e024:	0000df4b 	.word	0x0000df4b
    e028:	0000e0c3 	.word	0x0000e0c3
    e02c:	0000e06d 	.word	0x0000e06d
    e030:	0000e0c3 	.word	0x0000e0c3
    e034:	0000e0c3 	.word	0x0000e0c3
    e038:	0000e0c3 	.word	0x0000e0c3
    e03c:	0000e0c3 	.word	0x0000e0c3
    e040:	0000e0d1 	.word	0x0000e0d1
    e044:	0000e09b 	.word	0x0000e09b
    e048:	0000e0f1 	.word	0x0000e0f1
    e04c:	0000e0c3 	.word	0x0000e0c3
    e050:	0000e0c3 	.word	0x0000e0c3
    e054:	0000e0f1 	.word	0x0000e0f1
    e058:	0000e0c3 	.word	0x0000e0c3
    e05c:	0000e09b 	.word	0x0000e09b
    e060:	0000e0c3 	.word	0x0000e0c3
    e064:	0000e0c3 	.word	0x0000e0c3
    e068:	0000e09b 	.word	0x0000e09b
		conv->specifier_cat = SPECIFIER_SINT;
    e06c:	2101      	movs	r1, #1
    e06e:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		conv->specifier_cat = SPECIFIER_UINT;
    e072:	f361 0302 	bfi	r3, r1, #0, #3
    e076:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
    e07a:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    e07e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    e082:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    e084:	bf02      	ittt	eq
    e086:	f89d 1058 	ldrbeq.w	r1, [sp, #88]	; 0x58
    e08a:	f041 0101 	orreq.w	r1, r1, #1
    e08e:	f88d 1058 	strbeq.w	r1, [sp, #88]	; 0x58
		if (conv->specifier == 'c') {
    e092:	2a63      	cmp	r2, #99	; 0x63
    e094:	d005      	beq.n	e0a2 <cbvprintf+0x37a>
	bool unsupported = false;
    e096:	2300      	movs	r3, #0
    e098:	e006      	b.n	e0a8 <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_UINT;
    e09a:	2102      	movs	r1, #2
    e09c:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    e0a0:	e7e7      	b.n	e072 <cbvprintf+0x34a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    e0a2:	3b00      	subs	r3, #0
    e0a4:	bf18      	it	ne
    e0a6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    e0a8:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    e0ac:	f3c2 0140 	ubfx	r1, r2, #1, #1
    e0b0:	430b      	orrs	r3, r1
    e0b2:	f363 0241 	bfi	r2, r3, #1, #1
    e0b6:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
	return sp;
    e0ba:	e6b8      	b.n	de2e <cbvprintf+0x106>
		} else if ((conv->length_mod != LENGTH_NONE)
    e0bc:	f013 0f38 	tst.w	r3, #56	; 0x38
    e0c0:	d0e9      	beq.n	e096 <cbvprintf+0x36e>
			conv->invalid = true;
    e0c2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    e0c6:	f043 0301 	orr.w	r3, r3, #1
    e0ca:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    e0ce:	e7e2      	b.n	e096 <cbvprintf+0x36e>
		conv->specifier_cat = SPECIFIER_PTR;
    e0d0:	2203      	movs	r2, #3
    e0d2:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    e0d6:	f362 0302 	bfi	r3, r2, #0, #3
    e0da:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
    e0de:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    e0e2:	f003 0378 	and.w	r3, r3, #120	; 0x78
    e0e6:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
    e0ea:	427b      	negs	r3, r7
    e0ec:	417b      	adcs	r3, r7
    e0ee:	e7db      	b.n	e0a8 <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_PTR;
    e0f0:	2203      	movs	r2, #3
    e0f2:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    e0f6:	f362 0302 	bfi	r3, r2, #0, #3
    e0fa:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod != LENGTH_NONE) {
    e0fe:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    e102:	f013 0f78 	tst.w	r3, #120	; 0x78
    e106:	bf14      	ite	ne
    e108:	2301      	movne	r3, #1
    e10a:	2300      	moveq	r3, #0
    e10c:	e7cc      	b.n	e0a8 <cbvprintf+0x380>
			unsupported = true;
    e10e:	2301      	movs	r3, #1
    e110:	e7ca      	b.n	e0a8 <cbvprintf+0x380>
		} else if (conv->width_present) {
    e112:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
    e116:	2a00      	cmp	r2, #0
		int width = -1;
    e118:	bfac      	ite	ge
    e11a:	f04f 3aff 	movge.w	sl, #4294967295
			width = conv->width_value;
    e11e:	f8dd a05c 	ldrlt.w	sl, [sp, #92]	; 0x5c
    e122:	e696      	b.n	de52 <cbvprintf+0x12a>
		} else if (conv->prec_present) {
    e124:	0799      	lsls	r1, r3, #30
    e126:	f57f aea2 	bpl.w	de6e <cbvprintf+0x146>
			precision = conv->prec_value;
    e12a:	9f18      	ldr	r7, [sp, #96]	; 0x60
		conv->pad0_value = 0;
    e12c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    e12e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
		    && (conv->specifier_cat == SPECIFIER_FP)
    e132:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    e136:	f003 0307 	and.w	r3, r3, #7
    e13a:	2b04      	cmp	r3, #4
    e13c:	d109      	bne.n	e152 <cbvprintf+0x42a>
		    && !conv->prec_present) {
    e13e:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    e142:	079a      	lsls	r2, r3, #30
    e144:	d405      	bmi.n	e152 <cbvprintf+0x42a>
			if (conv->specifier_a) {
    e146:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
				precision = 6;
    e14a:	2b00      	cmp	r3, #0
    e14c:	bfb4      	ite	lt
    e14e:	270d      	movlt	r7, #13
    e150:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
    e152:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			= (enum length_mod_enum)conv->length_mod;
    e156:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
		enum specifier_cat_enum specifier_cat
    e15a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    e15e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    e160:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    e164:	d136      	bne.n	e1d4 <cbvprintf+0x4ac>
			switch (length_mod) {
    e166:	1ecb      	subs	r3, r1, #3
    e168:	2b04      	cmp	r3, #4
    e16a:	d820      	bhi.n	e1ae <cbvprintf+0x486>
    e16c:	e8df f003 	tbb	[pc, r3]
    e170:	1f070703 	.word	0x1f070703
    e174:	1f          	.byte	0x1f
    e175:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    e176:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    e17a:	17d3      	asrs	r3, r2, #31
    e17c:	e004      	b.n	e188 <cbvprintf+0x460>
					(sint_value_type)va_arg(ap, intmax_t);
    e17e:	3407      	adds	r4, #7
    e180:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    e184:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    e188:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		if (conv->invalid || conv->unsupported) {
    e18c:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
    e190:	07b3      	lsls	r3, r6, #30
    e192:	d055      	beq.n	e240 <cbvprintf+0x518>
			OUTS(sp, fp);
    e194:	464a      	mov	r2, r9
    e196:	4641      	mov	r1, r8
    e198:	9b07      	ldr	r3, [sp, #28]
    e19a:	9806      	ldr	r0, [sp, #24]
    e19c:	f00a fcf1 	bl	18b82 <outs>
    e1a0:	2800      	cmp	r0, #0
    e1a2:	f2c0 837d 	blt.w	e8a0 <cbvprintf+0xb78>
    e1a6:	4405      	add	r5, r0
			while (pad_len-- > 0) {
    e1a8:	f8dd 901c 	ldr.w	r9, [sp, #28]
    e1ac:	e5c4      	b.n	dd38 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    e1ae:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    e1b2:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    e1b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
    e1b8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			if (length_mod == LENGTH_HH) {
    e1bc:	d105      	bne.n	e1ca <cbvprintf+0x4a2>
				value->uint = (unsigned char)value->uint;
    e1be:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
				value->uint = (unsigned short)value->uint;
    e1c2:	9314      	str	r3, [sp, #80]	; 0x50
    e1c4:	2300      	movs	r3, #0
    e1c6:	9315      	str	r3, [sp, #84]	; 0x54
    e1c8:	e7e0      	b.n	e18c <cbvprintf+0x464>
			} else if (length_mod == LENGTH_H) {
    e1ca:	2902      	cmp	r1, #2
    e1cc:	d1de      	bne.n	e18c <cbvprintf+0x464>
				value->sint = (short)value->sint;
    e1ce:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
    e1d2:	e7d2      	b.n	e17a <cbvprintf+0x452>
		} else if (specifier_cat == SPECIFIER_UINT) {
    e1d4:	2b02      	cmp	r3, #2
    e1d6:	d123      	bne.n	e220 <cbvprintf+0x4f8>
			switch (length_mod) {
    e1d8:	1ecb      	subs	r3, r1, #3
    e1da:	2b04      	cmp	r3, #4
    e1dc:	d813      	bhi.n	e206 <cbvprintf+0x4de>
    e1de:	e8df f003 	tbb	[pc, r3]
    e1e2:	0a03      	.short	0x0a03
    e1e4:	120a      	.short	0x120a
    e1e6:	12          	.byte	0x12
    e1e7:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    e1e8:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    e1ea:	6822      	ldr	r2, [r4, #0]
    e1ec:	1d20      	adds	r0, r4, #4
    e1ee:	9214      	str	r2, [sp, #80]	; 0x50
    e1f0:	9315      	str	r3, [sp, #84]	; 0x54
					(uint_value_type)va_arg(ap, size_t);
    e1f2:	4604      	mov	r4, r0
    e1f4:	e7ca      	b.n	e18c <cbvprintf+0x464>
					(uint_value_type)va_arg(ap,
    e1f6:	3407      	adds	r4, #7
    e1f8:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    e1fc:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    e200:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
				break;
    e204:	e7f5      	b.n	e1f2 <cbvprintf+0x4ca>
					(uint_value_type)va_arg(ap, size_t);
    e206:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    e20a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    e20c:	9314      	str	r3, [sp, #80]	; 0x50
    e20e:	f04f 0300 	mov.w	r3, #0
    e212:	9315      	str	r3, [sp, #84]	; 0x54
			if (length_mod == LENGTH_HH) {
    e214:	d0d3      	beq.n	e1be <cbvprintf+0x496>
			} else if (length_mod == LENGTH_H) {
    e216:	2902      	cmp	r1, #2
    e218:	d1b8      	bne.n	e18c <cbvprintf+0x464>
				value->uint = (unsigned short)value->uint;
    e21a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    e21e:	e7d0      	b.n	e1c2 <cbvprintf+0x49a>
		} else if (specifier_cat == SPECIFIER_FP) {
    e220:	2b04      	cmp	r3, #4
    e222:	d107      	bne.n	e234 <cbvprintf+0x50c>
			if (length_mod == LENGTH_UPPER_L) {
    e224:	3407      	adds	r4, #7
    e226:	f024 0407 	bic.w	r4, r4, #7
    e22a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    e22e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    e232:	e7ab      	b.n	e18c <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_PTR) {
    e234:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    e236:	bf04      	itt	eq
    e238:	f854 3b04 	ldreq.w	r3, [r4], #4
    e23c:	9314      	streq	r3, [sp, #80]	; 0x50
    e23e:	e7a5      	b.n	e18c <cbvprintf+0x464>
		switch (conv->specifier) {
    e240:	f89d 905b 	ldrb.w	r9, [sp, #91]	; 0x5b
    e244:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    e248:	d8ae      	bhi.n	e1a8 <cbvprintf+0x480>
    e24a:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
    e24e:	f200 80a7 	bhi.w	e3a0 <cbvprintf+0x678>
    e252:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    e256:	f000 80ed 	beq.w	e434 <cbvprintf+0x70c>
    e25a:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
    e25e:	d9a3      	bls.n	e1a8 <cbvprintf+0x480>
    e260:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    e264:	d003      	beq.n	e26e <cbvprintf+0x546>
    e266:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
    e26a:	2b02      	cmp	r3, #2
    e26c:	d89c      	bhi.n	e1a8 <cbvprintf+0x480>
	} u = {
    e26e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	if ((u.u64 & SIGN_MASK) != 0U) {
    e272:	2a00      	cmp	r2, #0
    e274:	f173 0100 	sbcs.w	r1, r3, #0
    e278:	f2c0 8186 	blt.w	e588 <cbvprintf+0x860>
	} else if (conv->flag_plus) {
    e27c:	0731      	lsls	r1, r6, #28
    e27e:	f100 8185 	bmi.w	e58c <cbvprintf+0x864>
		*sign = ' ';
    e282:	f016 0610 	ands.w	r6, r6, #16
    e286:	bf18      	it	ne
    e288:	2620      	movne	r6, #32
	int exp = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    e28a:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    e28e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    e292:	9204      	str	r2, [sp, #16]
    e294:	9305      	str	r3, [sp, #20]
    e296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e29a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	bool is_subnormal = (exp == 0) && (fract != 0);
    e29e:	f1bb 0f00 	cmp.w	fp, #0
    e2a2:	f040 8175 	bne.w	e590 <cbvprintf+0x868>
    e2a6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    e2aa:	4313      	orrs	r3, r2
    e2ac:	bf14      	ite	ne
    e2ae:	f04f 0c01 	movne.w	ip, #1
    e2b2:	f04f 0c00 	moveq.w	ip, #0
	if ((exp | fract) != 0) {
    e2b6:	4658      	mov	r0, fp
	fract <<= EXPONENT_BITS;
    e2b8:	9905      	ldr	r1, [sp, #20]
		c = 'f';
    e2ba:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
	fract <<= EXPONENT_BITS;
    e2be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    e2c2:	9904      	ldr	r1, [sp, #16]
		c = 'f';
    e2c4:	bf08      	it	eq
    e2c6:	f04f 0966 	moveq.w	r9, #102	; 0x66
	fract <<= EXPONENT_BITS;
    e2ca:	02ca      	lsls	r2, r1, #11
    e2cc:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((exp | fract) != 0) {
    e2d0:	ea4b 0102 	orr.w	r1, fp, r2
    e2d4:	910a      	str	r1, [sp, #40]	; 0x28
    e2d6:	17c1      	asrs	r1, r0, #31
    e2d8:	4319      	orrs	r1, r3
    e2da:	910b      	str	r1, [sp, #44]	; 0x2c
    e2dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    e2e0:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
    e2e2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if ((exp | fract) != 0) {
    e2e6:	f000 81c7 	beq.w	e678 <cbvprintf+0x950>
		if (is_subnormal) {
    e2ea:	f1bc 0f00 	cmp.w	ip, #0
    e2ee:	f040 8187 	bne.w	e600 <cbvprintf+0x8d8>
		fract |= BIT_63;
    e2f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
		fract *= 5U;
    e2f4:	2105      	movs	r1, #5
		fract |= BIT_63;
    e2f6:	9302      	str	r3, [sp, #8]
    e2f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    e2fa:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
    e2fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e302:	9303      	str	r3, [sp, #12]
    e304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    e308:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    e30c:	2300      	movs	r3, #0
    e30e:	461a      	mov	r2, r3
	while (exp < -2) {
    e310:	f11b 0f02 	cmn.w	fp, #2
    e314:	f2c0 817d 	blt.w	e612 <cbvprintf+0x8ea>
    e318:	b11b      	cbz	r3, e322 <cbvprintf+0x5fa>
    e31a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    e31e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	while (exp > 0) {
    e322:	e9dd 3110 	ldrd	r3, r1, [sp, #64]	; 0x40
    e326:	f1bb 0f00 	cmp.w	fp, #0
    e32a:	f300 818d 	bgt.w	e648 <cbvprintf+0x920>
	fract >>= (4 - exp);
    e32e:	9911      	ldr	r1, [sp, #68]	; 0x44
    e330:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e332:	f1cb 0004 	rsb	r0, fp, #4
    e336:	f10b 0b1c 	add.w	fp, fp, #28
    e33a:	fa01 fb0b 	lsl.w	fp, r1, fp
    e33e:	f1a0 0c20 	sub.w	ip, r0, #32
    e342:	40c3      	lsrs	r3, r0
    e344:	fa21 fc0c 	lsr.w	ip, r1, ip
    e348:	ea43 030b 	orr.w	r3, r3, fp
    e34c:	ea43 030c 	orr.w	r3, r3, ip
    e350:	40c1      	lsrs	r1, r0
    e352:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	if ((c == 'g') || (c == 'G')) {
    e356:	f009 03df 	and.w	r3, r9, #223	; 0xdf
    e35a:	2b47      	cmp	r3, #71	; 0x47
    e35c:	f040 8193 	bne.w	e686 <cbvprintf+0x95e>
		if (decexp < (-4 + 1) || decexp > precision) {
    e360:	1cd0      	adds	r0, r2, #3
    e362:	db02      	blt.n	e36a <cbvprintf+0x642>
    e364:	4297      	cmp	r7, r2
    e366:	f280 818a 	bge.w	e67e <cbvprintf+0x956>
			c += 'e' - 'g';  /* e or E */
    e36a:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
    e36e:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    e370:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
    e374:	dd00      	ble.n	e378 <cbvprintf+0x650>
				precision--;
    e376:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
    e378:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    e37c:	0699      	lsls	r1, r3, #26
    e37e:	f100 8182 	bmi.w	e686 <cbvprintf+0x95e>
    e382:	2f00      	cmp	r7, #0
    e384:	bfd4      	ite	le
    e386:	2300      	movle	r3, #0
    e388:	2301      	movgt	r3, #1
	if (c == 'f') {
    e38a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
    e38e:	930c      	str	r3, [sp, #48]	; 0x30
	if (c == 'f') {
    e390:	f040 817b 	bne.w	e68a <cbvprintf+0x962>
		if (decimals < 0) {
    e394:	19d3      	adds	r3, r2, r7
    e396:	f140 8179 	bpl.w	e68c <cbvprintf+0x964>
			decimals = 0;
    e39a:	f04f 0b00 	mov.w	fp, #0
    e39e:	e179      	b.n	e694 <cbvprintf+0x96c>
    e3a0:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
    e3a4:	2b20      	cmp	r3, #32
    e3a6:	f63f aeff 	bhi.w	e1a8 <cbvprintf+0x480>
    e3aa:	a201      	add	r2, pc, #4	; (adr r2, e3b0 <cbvprintf+0x688>)
    e3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e3b0:	0000e529 	.word	0x0000e529
    e3b4:	0000e1a9 	.word	0x0000e1a9
    e3b8:	0000e1a9 	.word	0x0000e1a9
    e3bc:	0000e1a9 	.word	0x0000e1a9
    e3c0:	0000e1a9 	.word	0x0000e1a9
    e3c4:	0000e1a9 	.word	0x0000e1a9
    e3c8:	0000e1a9 	.word	0x0000e1a9
    e3cc:	0000e1a9 	.word	0x0000e1a9
    e3d0:	0000e1a9 	.word	0x0000e1a9
    e3d4:	0000e26f 	.word	0x0000e26f
    e3d8:	0000e1a9 	.word	0x0000e1a9
    e3dc:	0000e461 	.word	0x0000e461
    e3e0:	0000e4c9 	.word	0x0000e4c9
    e3e4:	0000e26f 	.word	0x0000e26f
    e3e8:	0000e26f 	.word	0x0000e26f
    e3ec:	0000e26f 	.word	0x0000e26f
    e3f0:	0000e1a9 	.word	0x0000e1a9
    e3f4:	0000e4c9 	.word	0x0000e4c9
    e3f8:	0000e1a9 	.word	0x0000e1a9
    e3fc:	0000e1a9 	.word	0x0000e1a9
    e400:	0000e1a9 	.word	0x0000e1a9
    e404:	0000e1a9 	.word	0x0000e1a9
    e408:	0000e55f 	.word	0x0000e55f
    e40c:	0000e529 	.word	0x0000e529
    e410:	0000e52d 	.word	0x0000e52d
    e414:	0000e1a9 	.word	0x0000e1a9
    e418:	0000e1a9 	.word	0x0000e1a9
    e41c:	0000e43b 	.word	0x0000e43b
    e420:	0000e1a9 	.word	0x0000e1a9
    e424:	0000e529 	.word	0x0000e529
    e428:	0000e1a9 	.word	0x0000e1a9
    e42c:	0000e1a9 	.word	0x0000e1a9
    e430:	0000e529 	.word	0x0000e529
			OUTC('%');
    e434:	4641      	mov	r1, r8
    e436:	4648      	mov	r0, r9
    e438:	e48a      	b.n	dd50 <cbvprintf+0x28>
			if (precision >= 0) {
    e43a:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    e43c:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
			if (precision >= 0) {
    e440:	db0a      	blt.n	e458 <cbvprintf+0x730>
				len = strnlen(bps, precision);
    e442:	4639      	mov	r1, r7
    e444:	4648      	mov	r0, r9
    e446:	f00d fb82 	bl	1bb4e <strnlen>
		char sign = 0;
    e44a:	2600      	movs	r6, #0
			bpe = bps + len;
    e44c:	eb09 0b00 	add.w	fp, r9, r0
		if (bps == NULL) {
    e450:	f1b9 0f00 	cmp.w	r9, #0
    e454:	d10c      	bne.n	e470 <cbvprintf+0x748>
    e456:	e6a7      	b.n	e1a8 <cbvprintf+0x480>
				len = strlen(bps);
    e458:	4648      	mov	r0, r9
    e45a:	f7fe fc91 	bl	cd80 <strlen>
    e45e:	e7f4      	b.n	e44a <cbvprintf+0x722>
		char sign = 0;
    e460:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    e462:	9b14      	ldr	r3, [sp, #80]	; 0x50
			bpe = buf + 1;
    e464:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    e468:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				bps = encode_float(value->dbl, conv, precision,
    e46c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
		size_t nj_len = (bpe - bps);
    e470:	ebab 0209 	sub.w	r2, fp, r9
		if (sign != 0) {
    e474:	b106      	cbz	r6, e478 <cbvprintf+0x750>
			nj_len += 1U;
    e476:	3201      	adds	r2, #1
		if (conv->altform_0c) {
    e478:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
    e47c:	06c3      	lsls	r3, r0, #27
    e47e:	f140 81ff 	bpl.w	e880 <cbvprintf+0xb58>
			nj_len += 2U;
    e482:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
    e484:	9917      	ldr	r1, [sp, #92]	; 0x5c
		if (conv->pad_fp) {
    e486:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    e488:	440a      	add	r2, r1
			nj_len += conv->pad0_pre_exp;
    e48a:	bf44      	itt	mi
    e48c:	9918      	ldrmi	r1, [sp, #96]	; 0x60
    e48e:	1852      	addmi	r2, r2, r1
		if (width > 0) {
    e490:	f1ba 0f00 	cmp.w	sl, #0
    e494:	f340 8211 	ble.w	e8ba <cbvprintf+0xb92>
			width -= (int)nj_len;
    e498:	ebaa 0a02 	sub.w	sl, sl, r2
			if (!conv->flag_dash) {
    e49c:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    e4a0:	0751      	lsls	r1, r2, #29
    e4a2:	f3c2 0780 	ubfx	r7, r2, #2, #1
    e4a6:	f100 8208 	bmi.w	e8ba <cbvprintf+0xb92>
				if (conv->flag_zero) {
    e4aa:	0653      	lsls	r3, r2, #25
    e4ac:	f140 81fb 	bpl.w	e8a6 <cbvprintf+0xb7e>
					if (sign != 0) {
    e4b0:	b146      	cbz	r6, e4c4 <cbvprintf+0x79c>
						OUTC(sign);
    e4b2:	4641      	mov	r1, r8
    e4b4:	4630      	mov	r0, r6
    e4b6:	9b06      	ldr	r3, [sp, #24]
    e4b8:	4798      	blx	r3
    e4ba:	2800      	cmp	r0, #0
    e4bc:	f2c0 81f0 	blt.w	e8a0 <cbvprintf+0xb78>
						sign = 0;
    e4c0:	463e      	mov	r6, r7
						OUTC(sign);
    e4c2:	3501      	adds	r5, #1
					pad = '0';
    e4c4:	2730      	movs	r7, #48	; 0x30
    e4c6:	e1ef      	b.n	e8a8 <cbvprintf+0xb80>
			if (conv->flag_plus) {
    e4c8:	0730      	lsls	r0, r6, #28
    e4ca:	d42b      	bmi.n	e524 <cbvprintf+0x7fc>
				sign = ' ';
    e4cc:	f016 0610 	ands.w	r6, r6, #16
    e4d0:	bf18      	it	ne
    e4d2:	2620      	movne	r6, #32
			if (value->sint < 0) {
    e4d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    e4d8:	2a00      	cmp	r2, #0
    e4da:	f173 0100 	sbcs.w	r1, r3, #0
    e4de:	da05      	bge.n	e4ec <cbvprintf+0x7c4>
				sign = '-';
    e4e0:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    e4e2:	4252      	negs	r2, r2
    e4e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    e4e8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			bps = encode_uint(value->uint, conv, buf, bpe);
    e4ec:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    e4f0:	f10d 0385 	add.w	r3, sp, #133	; 0x85
    e4f4:	9300      	str	r3, [sp, #0]
    e4f6:	aa16      	add	r2, sp, #88	; 0x58
    e4f8:	ab1b      	add	r3, sp, #108	; 0x6c
    e4fa:	f7ff fbc5 	bl	dc88 <encode_uint>
    e4fe:	4681      	mov	r9, r0
			if (precision >= 0) {
    e500:	2f00      	cmp	r7, #0
    e502:	f10d 0385 	add.w	r3, sp, #133	; 0x85
    e506:	db0b      	blt.n	e520 <cbvprintf+0x7f8>
				conv->flag_zero = false;
    e508:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
				size_t len = bpe - bps;
    e50c:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
    e510:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    e514:	4297      	cmp	r7, r2
				conv->flag_zero = false;
    e516:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
				if (len < (size_t)precision) {
    e51a:	d901      	bls.n	e520 <cbvprintf+0x7f8>
					conv->pad0_value = precision - (int)len;
    e51c:	1abf      	subs	r7, r7, r2
    e51e:	9717      	str	r7, [sp, #92]	; 0x5c
		const char *bpe = buf + sizeof(buf);
    e520:	469b      	mov	fp, r3
    e522:	e795      	b.n	e450 <cbvprintf+0x728>
				sign = '+';
    e524:	262b      	movs	r6, #43	; 0x2b
    e526:	e7d5      	b.n	e4d4 <cbvprintf+0x7ac>
		switch (conv->specifier) {
    e528:	2600      	movs	r6, #0
    e52a:	e7df      	b.n	e4ec <cbvprintf+0x7c4>
			if (value->ptr != NULL) {
    e52c:	9814      	ldr	r0, [sp, #80]	; 0x50
    e52e:	2800      	cmp	r0, #0
    e530:	f000 81a0 	beq.w	e874 <cbvprintf+0xb4c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    e534:	f10d 0385 	add.w	r3, sp, #133	; 0x85
    e538:	9300      	str	r3, [sp, #0]
    e53a:	2100      	movs	r1, #0
    e53c:	ab1b      	add	r3, sp, #108	; 0x6c
    e53e:	aa16      	add	r2, sp, #88	; 0x58
    e540:	f7ff fba2 	bl	dc88 <encode_uint>
				conv->altform_0c = true;
    e544:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
				bps = encode_uint((uintptr_t)value->ptr, conv,
    e548:	4681      	mov	r9, r0
				conv->altform_0c = true;
    e54a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    e54e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    e552:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    e556:	2600      	movs	r6, #0
				conv->altform_0c = true;
    e558:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
				goto prec_int_pad0;
    e55c:	e7d0      	b.n	e500 <cbvprintf+0x7d8>
				store_count(conv, value->ptr, count);
    e55e:	9b14      	ldr	r3, [sp, #80]	; 0x50
	switch ((enum length_mod_enum)conv->length_mod) {
    e560:	2907      	cmp	r1, #7
    e562:	f63f ae21 	bhi.w	e1a8 <cbvprintf+0x480>
    e566:	e8df f001 	tbb	[pc, r1]
    e56a:	040d      	.short	0x040d
    e56c:	08080d06 	.word	0x08080d06
    e570:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    e572:	701d      	strb	r5, [r3, #0]
		break;
    e574:	e618      	b.n	e1a8 <cbvprintf+0x480>
		*(short *)dp = (short)count;
    e576:	801d      	strh	r5, [r3, #0]
		break;
    e578:	e616      	b.n	e1a8 <cbvprintf+0x480>
		*(intmax_t *)dp = (intmax_t)count;
    e57a:	4628      	mov	r0, r5
    e57c:	17e9      	asrs	r1, r5, #31
    e57e:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    e582:	e611      	b.n	e1a8 <cbvprintf+0x480>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    e584:	601d      	str	r5, [r3, #0]
		break;
    e586:	e60f      	b.n	e1a8 <cbvprintf+0x480>
		*sign = '-';
    e588:	262d      	movs	r6, #45	; 0x2d
    e58a:	e67e      	b.n	e28a <cbvprintf+0x562>
		*sign = '+';
    e58c:	262b      	movs	r6, #43	; 0x2b
    e58e:	e67c      	b.n	e28a <cbvprintf+0x562>
	if (exp == BIT_MASK(EXPONENT_BITS)) {
    e590:	f240 73ff 	movw	r3, #2047	; 0x7ff
    e594:	459b      	cmp	fp, r3
    e596:	d12e      	bne.n	e5f6 <cbvprintf+0x8ce>
		if (fract == 0) {
    e598:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e59c:	4bba      	ldr	r3, [pc, #744]	; (e888 <cbvprintf+0xb60>)
    e59e:	430a      	orrs	r2, r1
    e5a0:	f819 3003 	ldrb.w	r3, [r9, r3]
    e5a4:	f003 0303 	and.w	r3, r3, #3
    e5a8:	d117      	bne.n	e5da <cbvprintf+0x8b2>
			if (isupper((int)c)) {
    e5aa:	2b01      	cmp	r3, #1
				*buf++ = 'I';
    e5ac:	bf0b      	itete	eq
    e5ae:	f644 6349 	movweq	r3, #20041	; 0x4e49
				*buf++ = 'i';
    e5b2:	f646 6369 	movwne	r3, #28265	; 0x6e69
				*buf++ = 'I';
    e5b6:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'i';
    e5ba:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'F';
    e5be:	bf0c      	ite	eq
    e5c0:	2346      	moveq	r3, #70	; 0x46
				*buf++ = 'f';
    e5c2:	2366      	movne	r3, #102	; 0x66
				*buf++ = 'n';
    e5c4:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
		conv->flag_zero = false;
    e5c8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		*bpe = buf;
    e5cc:	f10d 0b6f 	add.w	fp, sp, #111	; 0x6f
		conv->flag_zero = false;
    e5d0:	f36f 1386 	bfc	r3, #6, #1
    e5d4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		return bps;
    e5d8:	e748      	b.n	e46c <cbvprintf+0x744>
			if (isupper((int)c)) {
    e5da:	2b01      	cmp	r3, #1
				*buf++ = 'N';
    e5dc:	bf0b      	itete	eq
    e5de:	f244 134e 	movweq	r3, #16718	; 0x414e
				*buf++ = 'n';
    e5e2:	f246 136e 	movwne	r3, #24942	; 0x616e
				*buf++ = 'N';
    e5e6:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'n';
    e5ea:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'N';
    e5ee:	bf0c      	ite	eq
    e5f0:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'n';
    e5f2:	236e      	movne	r3, #110	; 0x6e
    e5f4:	e7e6      	b.n	e5c4 <cbvprintf+0x89c>
	bool is_subnormal = (exp == 0) && (fract != 0);
    e5f6:	f04f 0c00 	mov.w	ip, #0
    e5fa:	e65c      	b.n	e2b6 <cbvprintf+0x58e>
				exp--;
    e5fc:	f10b 3bff 	add.w	fp, fp, #4294967295
			while (((fract <<= 1) & BIT_63) == 0) {
    e600:	1892      	adds	r2, r2, r2
    e602:	415b      	adcs	r3, r3
    e604:	2a00      	cmp	r2, #0
    e606:	f173 0100 	sbcs.w	r1, r3, #0
    e60a:	daf7      	bge.n	e5fc <cbvprintf+0x8d4>
    e60c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    e610:	e66f      	b.n	e2f2 <cbvprintf+0x5ca>
			fract >>= 1;
    e612:	9b02      	ldr	r3, [sp, #8]
    e614:	9803      	ldr	r0, [sp, #12]
    e616:	085b      	lsrs	r3, r3, #1
    e618:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    e61c:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    e61e:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
    e622:	46de      	mov	lr, fp
			fract >>= 1;
    e624:	e9cd 3002 	strd	r3, r0, [sp, #8]
			exp++;
    e628:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    e62c:	d2f1      	bcs.n	e612 <cbvprintf+0x8ea>
		fract *= 5U;
    e62e:	fba3 bc01 	umull	fp, ip, r3, r1
    e632:	4348      	muls	r0, r1
    e634:	e9cd bc02 	strd	fp, ip, [sp, #8]
    e638:	9b03      	ldr	r3, [sp, #12]
		exp++;
    e63a:	f10e 0b02 	add.w	fp, lr, #2
		fract *= 5U;
    e63e:	18c3      	adds	r3, r0, r3
    e640:	9303      	str	r3, [sp, #12]
		decexp--;
    e642:	3a01      	subs	r2, #1
    e644:	2301      	movs	r3, #1
    e646:	e663      	b.n	e310 <cbvprintf+0x5e8>
		fract += 2;
    e648:	3302      	adds	r3, #2
    e64a:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    e64e:	a810      	add	r0, sp, #64	; 0x40
		fract += 2;
    e650:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
    e654:	920c      	str	r2, [sp, #48]	; 0x30
		_ldiv5(&fract);
    e656:	f00a fa5e 	bl	18b16 <_ldiv5>
		exp--;
    e65a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
		decexp++;
    e65e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		exp--;
    e660:	f10b 3bff 	add.w	fp, fp, #4294967295
		decexp++;
    e664:	3201      	adds	r2, #1
			fract <<= 1;
    e666:	1800      	adds	r0, r0, r0
    e668:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    e66a:	2800      	cmp	r0, #0
    e66c:	f171 0300 	sbcs.w	r3, r1, #0
			exp--;
    e670:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (!(fract & BIT_63));
    e674:	daf7      	bge.n	e666 <cbvprintf+0x93e>
    e676:	e652      	b.n	e31e <cbvprintf+0x5f6>
    e678:	2200      	movs	r2, #0
    e67a:	4693      	mov	fp, r2
    e67c:	e657      	b.n	e32e <cbvprintf+0x606>
			c = 'f';
    e67e:	f04f 0966 	mov.w	r9, #102	; 0x66
			precision -= decexp;
    e682:	1abf      	subs	r7, r7, r2
    e684:	e678      	b.n	e378 <cbvprintf+0x650>
	bool prune_zero = false;
    e686:	2300      	movs	r3, #0
    e688:	e67f      	b.n	e38a <cbvprintf+0x662>
		decimals = precision + 1;
    e68a:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
    e68c:	2b10      	cmp	r3, #16
    e68e:	bfa8      	it	ge
    e690:	2310      	movge	r3, #16
    e692:	469b      	mov	fp, r3
    e694:	2110      	movs	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
    e696:	2000      	movs	r0, #0
    e698:	910f      	str	r1, [sp, #60]	; 0x3c
    e69a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    e69e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (decimals--) {
    e6a2:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
    e6a6:	f10b 3bff 	add.w	fp, fp, #4294967295
    e6aa:	f1bb 3fff 	cmp.w	fp, #4294967295
    e6ae:	d11f      	bne.n	e6f0 <cbvprintf+0x9c8>
	fract += round;
    e6b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e6b2:	18cb      	adds	r3, r1, r3
    e6b4:	9308      	str	r3, [sp, #32]
    e6b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
	if (fract >= BIT64(60)) {
    e6b8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
	fract += round;
    e6bc:	eb40 0303 	adc.w	r3, r0, r3
	if (fract >= BIT64(60)) {
    e6c0:	f04f 30ff 	mov.w	r0, #4294967295
	fract += round;
    e6c4:	9309      	str	r3, [sp, #36]	; 0x24
	if (fract >= BIT64(60)) {
    e6c6:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
    e6ca:	4561      	cmp	r1, ip
    e6cc:	bf08      	it	eq
    e6ce:	4558      	cmpeq	r0, fp
    e6d0:	d31a      	bcc.n	e708 <cbvprintf+0x9e0>
	fract += round;
    e6d2:	4658      	mov	r0, fp
    e6d4:	4661      	mov	r1, ip
    e6d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	if (c == 'f') {
    e6da:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
    e6de:	d153      	bne.n	e788 <cbvprintf+0xa60>
		if (decexp > 0) {
    e6e0:	2a00      	cmp	r2, #0
    e6e2:	dc20      	bgt.n	e726 <cbvprintf+0x9fe>
			*buf++ = '0';
    e6e4:	2330      	movs	r3, #48	; 0x30
    e6e6:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
    e6ea:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    e6ee:	e02b      	b.n	e748 <cbvprintf+0xa20>
	*v >>= 1;
    e6f0:	0849      	lsrs	r1, r1, #1
    e6f2:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    e6f6:	0840      	lsrs	r0, r0, #1
    e6f8:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
	_ldiv5(v);
    e6fc:	a812      	add	r0, sp, #72	; 0x48
    e6fe:	920d      	str	r2, [sp, #52]	; 0x34
    e700:	f00a fa09 	bl	18b16 <_ldiv5>
    e704:	9a0d      	ldr	r2, [sp, #52]	; 0x34
}
    e706:	e7cc      	b.n	e6a2 <cbvprintf+0x97a>
	*v >>= 1;
    e708:	9b08      	ldr	r3, [sp, #32]
    e70a:	920d      	str	r2, [sp, #52]	; 0x34
    e70c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e70e:	085b      	lsrs	r3, r3, #1
    e710:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
    e714:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
    e716:	a810      	add	r0, sp, #64	; 0x40
	*v >>= 1;
    e718:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	_ldiv5(v);
    e71c:	f00a f9fb 	bl	18b16 <_ldiv5>
		decexp++;
    e720:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e722:	3201      	adds	r2, #1
    e724:	e7d9      	b.n	e6da <cbvprintf+0x9b2>
	char *buf = bps;
    e726:	f10d 0b6c 	add.w	fp, sp, #108	; 0x6c
			while (decexp > 0 && digit_count > 0) {
    e72a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e72c:	2900      	cmp	r1, #0
    e72e:	dd09      	ble.n	e744 <cbvprintf+0xa1c>
				*buf++ = _get_digit(&fract, &digit_count);
    e730:	a90f      	add	r1, sp, #60	; 0x3c
    e732:	a810      	add	r0, sp, #64	; 0x40
    e734:	920d      	str	r2, [sp, #52]	; 0x34
    e736:	f00a fa0d 	bl	18b54 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    e73a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
				*buf++ = _get_digit(&fract, &digit_count);
    e73c:	f80b 0b01 	strb.w	r0, [fp], #1
			while (decexp > 0 && digit_count > 0) {
    e740:	3a01      	subs	r2, #1
    e742:	d1f2      	bne.n	e72a <cbvprintf+0xa02>
			conv->pad0_value = decexp;
    e744:	9217      	str	r2, [sp, #92]	; 0x5c
			decexp = 0;
    e746:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
    e748:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
    e74c:	0688      	lsls	r0, r1, #26
    e74e:	d401      	bmi.n	e754 <cbvprintf+0xa2c>
    e750:	2f00      	cmp	r7, #0
    e752:	dd3f      	ble.n	e7d4 <cbvprintf+0xaac>
			*buf++ = '.';
    e754:	465b      	mov	r3, fp
    e756:	212e      	movs	r1, #46	; 0x2e
    e758:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
    e75c:	b192      	cbz	r2, e784 <cbvprintf+0xa5c>
    e75e:	2f00      	cmp	r7, #0
    e760:	dd76      	ble.n	e850 <cbvprintf+0xb28>
			conv->pad0_value = -decexp;
    e762:	4251      	negs	r1, r2
    e764:	42b9      	cmp	r1, r7
    e766:	bfa8      	it	ge
    e768:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    e76a:	2900      	cmp	r1, #0
			conv->pad0_value = -decexp;
    e76c:	9117      	str	r1, [sp, #92]	; 0x5c
			precision -= conv->pad0_value;
    e76e:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    e772:	bfd4      	ite	le
    e774:	2100      	movle	r1, #0
    e776:	2101      	movgt	r1, #1
    e778:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
    e77c:	f361 1045 	bfi	r0, r1, #5, #1
    e780:	f88d 005a 	strb.w	r0, [sp, #90]	; 0x5a
			*buf++ = '.';
    e784:	469b      	mov	fp, r3
    e786:	e020      	b.n	e7ca <cbvprintf+0xaa2>
		*buf = _get_digit(&fract, &digit_count);
    e788:	a90f      	add	r1, sp, #60	; 0x3c
    e78a:	a810      	add	r0, sp, #64	; 0x40
    e78c:	920d      	str	r2, [sp, #52]	; 0x34
    e78e:	f00a f9e1 	bl	18b54 <_get_digit>
		if (*buf++ != '0') {
    e792:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		if (conv->flag_hash || (precision > 0)) {
    e794:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		if (*buf++ != '0') {
    e798:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    e79a:	bf18      	it	ne
    e79c:	f102 32ff 	addne.w	r2, r2, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    e7a0:	0699      	lsls	r1, r3, #26
		*buf = _get_digit(&fract, &digit_count);
    e7a2:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
		if (conv->flag_hash || (precision > 0)) {
    e7a6:	d401      	bmi.n	e7ac <cbvprintf+0xa84>
    e7a8:	2f00      	cmp	r7, #0
    e7aa:	dd53      	ble.n	e854 <cbvprintf+0xb2c>
			*buf++ = '.';
    e7ac:	232e      	movs	r3, #46	; 0x2e
    e7ae:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
    e7b2:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
    e7b6:	e7e5      	b.n	e784 <cbvprintf+0xa5c>
		*buf++ = _get_digit(&fract, &digit_count);
    e7b8:	a90f      	add	r1, sp, #60	; 0x3c
    e7ba:	a810      	add	r0, sp, #64	; 0x40
    e7bc:	920d      	str	r2, [sp, #52]	; 0x34
    e7be:	f00a f9c9 	bl	18b54 <_get_digit>
    e7c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e7c4:	f80b 0b01 	strb.w	r0, [fp], #1
		precision--;
    e7c8:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
    e7ca:	2f00      	cmp	r7, #0
    e7cc:	dd02      	ble.n	e7d4 <cbvprintf+0xaac>
    e7ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e7d0:	2900      	cmp	r1, #0
    e7d2:	dcf1      	bgt.n	e7b8 <cbvprintf+0xa90>
	if (prune_zero) {
    e7d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e7d6:	2b00      	cmp	r3, #0
    e7d8:	d13f      	bne.n	e85a <cbvprintf+0xb32>
	conv->pad0_pre_exp = precision;
    e7da:	9718      	str	r7, [sp, #96]	; 0x60
	if ((c == 'e') || (c == 'E')) {
    e7dc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
    e7e0:	2945      	cmp	r1, #69	; 0x45
    e7e2:	d123      	bne.n	e82c <cbvprintf+0xb04>
		if (decexp < 0) {
    e7e4:	2a00      	cmp	r2, #0
			*buf++ = '-';
    e7e6:	bfb4      	ite	lt
    e7e8:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
    e7ea:	212b      	movge	r1, #43	; 0x2b
		*buf++ = c;
    e7ec:	4658      	mov	r0, fp
			decexp = -decexp;
    e7ee:	bfb8      	it	lt
    e7f0:	4252      	neglt	r2, r2
		if (decexp >= 100) {
    e7f2:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
    e7f4:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
    e7f8:	f88b 1001 	strb.w	r1, [fp, #1]
		if (decexp >= 100) {
    e7fc:	dd0a      	ble.n	e814 <cbvprintf+0xaec>
			*buf++ = (decexp / 100) + '0';
    e7fe:	2764      	movs	r7, #100	; 0x64
    e800:	fb92 f1f7 	sdiv	r1, r2, r7
			decexp %= 100;
    e804:	fb07 2211 	mls	r2, r7, r1, r2
			*buf++ = (decexp / 100) + '0';
    e808:	f101 0c30 	add.w	ip, r1, #48	; 0x30
    e80c:	f10b 0003 	add.w	r0, fp, #3
    e810:	f88b c002 	strb.w	ip, [fp, #2]
		*buf++ = (decexp / 10) + '0';
    e814:	270a      	movs	r7, #10
    e816:	fb92 f1f7 	sdiv	r1, r2, r7
    e81a:	4683      	mov	fp, r0
		*buf++ = (decexp % 10) + '0';
    e81c:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
    e820:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    e824:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    e826:	f80b cb02 	strb.w	ip, [fp], #2
		*buf++ = (decexp % 10) + '0';
    e82a:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
    e82c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    e82e:	2a00      	cmp	r2, #0
    e830:	dc1e      	bgt.n	e870 <cbvprintf+0xb48>
    e832:	9a18      	ldr	r2, [sp, #96]	; 0x60
    e834:	2a00      	cmp	r2, #0
    e836:	bfd4      	ite	le
    e838:	2200      	movle	r2, #0
    e83a:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
    e83c:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
    e840:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
    e844:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
    e846:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	*buf = 0;
    e84a:	f88b 2000 	strb.w	r2, [fp]
	return bps;
    e84e:	e60d      	b.n	e46c <cbvprintf+0x744>
			*buf++ = '.';
    e850:	469b      	mov	fp, r3
    e852:	e7bf      	b.n	e7d4 <cbvprintf+0xaac>
		if (*buf++ != '0') {
    e854:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
    e858:	e7bc      	b.n	e7d4 <cbvprintf+0xaac>
		conv->pad0_pre_exp = 0;
    e85a:	2100      	movs	r1, #0
    e85c:	9118      	str	r1, [sp, #96]	; 0x60
		while (*--buf == '0') {
    e85e:	4658      	mov	r0, fp
    e860:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
    e864:	2930      	cmp	r1, #48	; 0x30
    e866:	d0fa      	beq.n	e85e <cbvprintf+0xb36>
		if (*buf != '.') {
    e868:	292e      	cmp	r1, #46	; 0x2e
    e86a:	bf18      	it	ne
    e86c:	4683      	movne	fp, r0
    e86e:	e7b5      	b.n	e7dc <cbvprintf+0xab4>
		|| (conv->pad0_pre_exp > 0);
    e870:	2201      	movs	r2, #1
    e872:	e7e3      	b.n	e83c <cbvprintf+0xb14>
			bpe = bps + 5;
    e874:	f8df b014 	ldr.w	fp, [pc, #20]	; e88c <cbvprintf+0xb64>
		char sign = 0;
    e878:	4606      	mov	r6, r0
			bps = "(nil)";
    e87a:	f1ab 0905 	sub.w	r9, fp, #5
    e87e:	e5f7      	b.n	e470 <cbvprintf+0x748>
		} else if (conv->altform_0) {
    e880:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
    e882:	bf48      	it	mi
    e884:	3201      	addmi	r2, #1
    e886:	e5fd      	b.n	e484 <cbvprintf+0x75c>
    e888:	0001d64b 	.word	0x0001d64b
    e88c:	0001c8e7 	.word	0x0001c8e7
    e890:	930c      	str	r3, [sp, #48]	; 0x30
					OUTC(pad);
    e892:	4641      	mov	r1, r8
    e894:	9b06      	ldr	r3, [sp, #24]
    e896:	4638      	mov	r0, r7
    e898:	4798      	blx	r3
    e89a:	2800      	cmp	r0, #0
    e89c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e89e:	da05      	bge.n	e8ac <cbvprintf+0xb84>
#undef OUTS
#undef OUTC
}
    e8a0:	b023      	add	sp, #140	; 0x8c
    e8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    e8a6:	2720      	movs	r7, #32
    e8a8:	eb0a 0305 	add.w	r3, sl, r5
    e8ac:	4652      	mov	r2, sl
				while (width-- > 0) {
    e8ae:	2a00      	cmp	r2, #0
    e8b0:	eba3 050a 	sub.w	r5, r3, sl
    e8b4:	f10a 3aff 	add.w	sl, sl, #4294967295
    e8b8:	dcea      	bgt.n	e890 <cbvprintf+0xb68>
		if (sign != 0) {
    e8ba:	b136      	cbz	r6, e8ca <cbvprintf+0xba2>
			OUTC(sign);
    e8bc:	4641      	mov	r1, r8
    e8be:	4630      	mov	r0, r6
    e8c0:	9b06      	ldr	r3, [sp, #24]
    e8c2:	4798      	blx	r3
    e8c4:	2800      	cmp	r0, #0
    e8c6:	dbeb      	blt.n	e8a0 <cbvprintf+0xb78>
    e8c8:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    e8ca:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
    e8ce:	0650      	lsls	r0, r2, #25
    e8d0:	d57c      	bpl.n	e9cc <cbvprintf+0xca4>
			if (conv->specifier_a) {
    e8d2:	f99d 2059 	ldrsb.w	r2, [sp, #89]	; 0x59
    e8d6:	2a00      	cmp	r2, #0
    e8d8:	db2b      	blt.n	e932 <cbvprintf+0xc0a>
    e8da:	eba5 0509 	sub.w	r5, r5, r9
    e8de:	464e      	mov	r6, r9
				while (isdigit((int)*cp)) {
    e8e0:	f899 0000 	ldrb.w	r0, [r9]
    e8e4:	4b59      	ldr	r3, [pc, #356]	; (ea4c <cbvprintf+0xd24>)
    e8e6:	19af      	adds	r7, r5, r6
    e8e8:	5cc2      	ldrb	r2, [r0, r3]
    e8ea:	f109 0901 	add.w	r9, r9, #1
    e8ee:	0751      	lsls	r1, r2, #29
    e8f0:	d43f      	bmi.n	e972 <cbvprintf+0xc4a>
				if (!conv->pad_postdp) {
    e8f2:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
				pad_len = conv->pad0_value;
    e8f6:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
				if (!conv->pad_postdp) {
    e8fa:	0692      	lsls	r2, r2, #26
    e8fc:	d408      	bmi.n	e910 <cbvprintf+0xbe8>
    e8fe:	eb09 0507 	add.w	r5, r9, r7
    e902:	464a      	mov	r2, r9
					while (pad_len-- > 0) {
    e904:	2a00      	cmp	r2, #0
    e906:	eba5 0709 	sub.w	r7, r5, r9
    e90a:	f109 39ff 	add.w	r9, r9, #4294967295
    e90e:	dc36      	bgt.n	e97e <cbvprintf+0xc56>
				if (*cp == '.') {
    e910:	7830      	ldrb	r0, [r6, #0]
    e912:	282e      	cmp	r0, #46	; 0x2e
    e914:	d10a      	bne.n	e92c <cbvprintf+0xc04>
					OUTC(*cp++);
    e916:	4641      	mov	r1, r8
    e918:	9b06      	ldr	r3, [sp, #24]
    e91a:	4798      	blx	r3
						OUTC('0');
    e91c:	2800      	cmp	r0, #0
    e91e:	dbbf      	blt.n	e8a0 <cbvprintf+0xb78>
					while (pad_len-- > 0) {
    e920:	f1b9 0f00 	cmp.w	r9, #0
						OUTC('0');
    e924:	f107 0701 	add.w	r7, r7, #1
					while (pad_len-- > 0) {
    e928:	dc30      	bgt.n	e98c <cbvprintf+0xc64>
					OUTC(*cp++);
    e92a:	3601      	adds	r6, #1
    e92c:	46b1      	mov	r9, r6
    e92e:	1bbf      	subs	r7, r7, r6
    e930:	e039      	b.n	e9a6 <cbvprintf+0xc7e>
    e932:	eba5 0709 	sub.w	r7, r5, r9
    e936:	464d      	mov	r5, r9
    e938:	eb07 0609 	add.w	r6, r7, r9
				while (*cp != 'p') {
    e93c:	f819 0b01 	ldrb.w	r0, [r9], #1
    e940:	2870      	cmp	r0, #112	; 0x70
    e942:	d110      	bne.n	e966 <cbvprintf+0xc3e>
			while (pad_len-- > 0) {
    e944:	9f18      	ldr	r7, [sp, #96]	; 0x60
    e946:	4437      	add	r7, r6
    e948:	1bba      	subs	r2, r7, r6
    e94a:	2a00      	cmp	r2, #0
    e94c:	dc35      	bgt.n	e9ba <cbvprintf+0xc92>
			OUTS(cp, bpe);
    e94e:	465b      	mov	r3, fp
    e950:	462a      	mov	r2, r5
    e952:	4641      	mov	r1, r8
    e954:	9806      	ldr	r0, [sp, #24]
    e956:	f00a f914 	bl	18b82 <outs>
    e95a:	2800      	cmp	r0, #0
    e95c:	dba0      	blt.n	e8a0 <cbvprintf+0xb78>
    e95e:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    e960:	4605      	mov	r5, r0
    e962:	4482      	add	sl, r0
    e964:	e06c      	b.n	ea40 <cbvprintf+0xd18>
					OUTC(*cp++);
    e966:	4641      	mov	r1, r8
    e968:	9b06      	ldr	r3, [sp, #24]
    e96a:	4798      	blx	r3
    e96c:	2800      	cmp	r0, #0
    e96e:	dae2      	bge.n	e936 <cbvprintf+0xc0e>
    e970:	e796      	b.n	e8a0 <cbvprintf+0xb78>
					OUTC(*cp++);
    e972:	4641      	mov	r1, r8
    e974:	9b06      	ldr	r3, [sp, #24]
    e976:	4798      	blx	r3
    e978:	2800      	cmp	r0, #0
    e97a:	dab0      	bge.n	e8de <cbvprintf+0xbb6>
    e97c:	e790      	b.n	e8a0 <cbvprintf+0xb78>
						OUTC('0');
    e97e:	4641      	mov	r1, r8
    e980:	2030      	movs	r0, #48	; 0x30
    e982:	9b06      	ldr	r3, [sp, #24]
    e984:	4798      	blx	r3
    e986:	2800      	cmp	r0, #0
    e988:	dabb      	bge.n	e902 <cbvprintf+0xbda>
    e98a:	e789      	b.n	e8a0 <cbvprintf+0xb78>
						OUTC('0');
    e98c:	4641      	mov	r1, r8
    e98e:	2030      	movs	r0, #48	; 0x30
    e990:	9b06      	ldr	r3, [sp, #24]
    e992:	4798      	blx	r3
    e994:	f109 39ff 	add.w	r9, r9, #4294967295
    e998:	e7c0      	b.n	e91c <cbvprintf+0xbf4>
					OUTC(*cp++);
    e99a:	4641      	mov	r1, r8
    e99c:	9b06      	ldr	r3, [sp, #24]
    e99e:	4798      	blx	r3
    e9a0:	2800      	cmp	r0, #0
    e9a2:	f6ff af7d 	blt.w	e8a0 <cbvprintf+0xb78>
				while (isdigit((int)*cp)) {
    e9a6:	4b29      	ldr	r3, [pc, #164]	; (ea4c <cbvprintf+0xd24>)
    e9a8:	464d      	mov	r5, r9
    e9aa:	eb07 0609 	add.w	r6, r7, r9
    e9ae:	f819 0b01 	ldrb.w	r0, [r9], #1
    e9b2:	5cc2      	ldrb	r2, [r0, r3]
    e9b4:	0753      	lsls	r3, r2, #29
    e9b6:	d4f0      	bmi.n	e99a <cbvprintf+0xc72>
    e9b8:	e7c4      	b.n	e944 <cbvprintf+0xc1c>
				OUTC('0');
    e9ba:	4641      	mov	r1, r8
    e9bc:	2030      	movs	r0, #48	; 0x30
    e9be:	9b06      	ldr	r3, [sp, #24]
    e9c0:	4798      	blx	r3
    e9c2:	2800      	cmp	r0, #0
    e9c4:	f6ff af6c 	blt.w	e8a0 <cbvprintf+0xb78>
    e9c8:	3601      	adds	r6, #1
    e9ca:	e7bd      	b.n	e948 <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
    e9cc:	06d1      	lsls	r1, r2, #27
    e9ce:	d401      	bmi.n	e9d4 <cbvprintf+0xcac>
    e9d0:	0712      	lsls	r2, r2, #28
    e9d2:	d507      	bpl.n	e9e4 <cbvprintf+0xcbc>
				OUTC('0');
    e9d4:	4641      	mov	r1, r8
    e9d6:	2030      	movs	r0, #48	; 0x30
    e9d8:	9b06      	ldr	r3, [sp, #24]
    e9da:	4798      	blx	r3
    e9dc:	2800      	cmp	r0, #0
    e9de:	f6ff af5f 	blt.w	e8a0 <cbvprintf+0xb78>
    e9e2:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    e9e4:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
    e9e8:	06d3      	lsls	r3, r2, #27
    e9ea:	d508      	bpl.n	e9fe <cbvprintf+0xcd6>
				OUTC(conv->specifier);
    e9ec:	4641      	mov	r1, r8
    e9ee:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
    e9f2:	9b06      	ldr	r3, [sp, #24]
    e9f4:	4798      	blx	r3
    e9f6:	2800      	cmp	r0, #0
    e9f8:	f6ff af52 	blt.w	e8a0 <cbvprintf+0xb78>
    e9fc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    e9fe:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    ea00:	442f      	add	r7, r5
    ea02:	1b7a      	subs	r2, r7, r5
    ea04:	2a00      	cmp	r2, #0
    ea06:	dc0a      	bgt.n	ea1e <cbvprintf+0xcf6>
			OUTS(bps, bpe);
    ea08:	465b      	mov	r3, fp
    ea0a:	464a      	mov	r2, r9
    ea0c:	4641      	mov	r1, r8
    ea0e:	9806      	ldr	r0, [sp, #24]
    ea10:	f00a f8b7 	bl	18b82 <outs>
    ea14:	2800      	cmp	r0, #0
    ea16:	f6ff af43 	blt.w	e8a0 <cbvprintf+0xb78>
    ea1a:	4428      	add	r0, r5
    ea1c:	e7a0      	b.n	e960 <cbvprintf+0xc38>
				OUTC('0');
    ea1e:	4641      	mov	r1, r8
    ea20:	2030      	movs	r0, #48	; 0x30
    ea22:	9b06      	ldr	r3, [sp, #24]
    ea24:	4798      	blx	r3
    ea26:	2800      	cmp	r0, #0
    ea28:	f6ff af3a 	blt.w	e8a0 <cbvprintf+0xb78>
    ea2c:	3501      	adds	r5, #1
    ea2e:	e7e8      	b.n	ea02 <cbvprintf+0xcda>
			OUTC(' ');
    ea30:	4641      	mov	r1, r8
    ea32:	2020      	movs	r0, #32
    ea34:	9b06      	ldr	r3, [sp, #24]
    ea36:	4798      	blx	r3
    ea38:	2800      	cmp	r0, #0
    ea3a:	f6ff af31 	blt.w	e8a0 <cbvprintf+0xb78>
    ea3e:	3501      	adds	r5, #1
		while (width > 0) {
    ea40:	ebaa 0305 	sub.w	r3, sl, r5
    ea44:	2b00      	cmp	r3, #0
    ea46:	dcf3      	bgt.n	ea30 <cbvprintf+0xd08>
    ea48:	f7ff bbae 	b.w	e1a8 <cbvprintf+0x480>
    ea4c:	0001d64b 	.word	0x0001d64b

0000ea50 <nordicsemi_nrf91_init>:
    ea50:	f04f 0220 	mov.w	r2, #32
    ea54:	f3ef 8311 	mrs	r3, BASEPRI
    ea58:	f382 8811 	msr	BASEPRI, r2
    ea5c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    ea60:	2101      	movs	r1, #1
    ea62:	4a04      	ldr	r2, [pc, #16]	; (ea74 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14>)
    ea64:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    ea68:	f383 8811 	msr	BASEPRI, r3
    ea6c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    ea70:	2000      	movs	r0, #0
    ea72:	4770      	bx	lr
    ea74:	40039000 	.word	0x40039000

0000ea78 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    ea78:	b120      	cbz	r0, ea84 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    ea7a:	4b03      	ldr	r3, [pc, #12]	; (ea88 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    ea7c:	0180      	lsls	r0, r0, #6
    ea7e:	f043 0301 	orr.w	r3, r3, #1
    ea82:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    ea84:	4770      	bx	lr
    ea86:	bf00      	nop
    ea88:	0001c1b0 	.word	0x0001c1b0

0000ea8c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    ea8c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    ea8e:	2200      	movs	r2, #0
{
    ea90:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    ea92:	490f      	ldr	r1, [pc, #60]	; (ead0 <enable_logger+0x44>)
    ea94:	480f      	ldr	r0, [pc, #60]	; (ead4 <enable_logger+0x48>)
    ea96:	f00c ff02 	bl	1b89e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ea9a:	2200      	movs	r2, #0
    ea9c:	2300      	movs	r3, #0
    ea9e:	2400      	movs	r4, #0
    eaa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    eaa4:	230e      	movs	r3, #14
    eaa6:	4d0c      	ldr	r5, [pc, #48]	; (ead8 <enable_logger+0x4c>)
    eaa8:	e9cd 3403 	strd	r3, r4, [sp, #12]
    eaac:	f44f 7240 	mov.w	r2, #768	; 0x300
    eab0:	4628      	mov	r0, r5
    eab2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    eab6:	4b09      	ldr	r3, [pc, #36]	; (eadc <enable_logger+0x50>)
    eab8:	4909      	ldr	r1, [pc, #36]	; (eae0 <enable_logger+0x54>)
    eaba:	9400      	str	r4, [sp, #0]
    eabc:	f008 fd3a 	bl	17534 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    eac0:	4908      	ldr	r1, [pc, #32]	; (eae4 <enable_logger+0x58>)
    eac2:	4628      	mov	r0, r5
    eac4:	f00c fe76 	bl	1b7b4 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    eac8:	4620      	mov	r0, r4
    eaca:	b009      	add	sp, #36	; 0x24
    eacc:	bd30      	pop	{r4, r5, pc}
    eace:	bf00      	nop
    ead0:	0000eae9 	.word	0x0000eae9
    ead4:	200147c8 	.word	0x200147c8
    ead8:	20014800 	.word	0x20014800
    eadc:	0000ef1d 	.word	0x0000ef1d
    eae0:	20018470 	.word	0x20018470
    eae4:	0001c8ec 	.word	0x0001c8ec

0000eae8 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    eae8:	4801      	ldr	r0, [pc, #4]	; (eaf0 <log_process_thread_timer_expiry_fn+0x8>)
    eaea:	f008 bc8b 	b.w	17404 <z_impl_k_sem_give>
    eaee:	bf00      	nop
    eaf0:	20014790 	.word	0x20014790

0000eaf4 <z_log_get_s_mask>:
{
    eaf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    eaf6:	4605      	mov	r5, r0
	uint32_t mask = 0;
    eaf8:	2000      	movs	r0, #0
				mask |= BIT(arg);
    eafa:	2701      	movs	r7, #1
	uint32_t arg = 0;
    eafc:	4603      	mov	r3, r0
	bool arm = false;
    eafe:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
    eb00:	4e0d      	ldr	r6, [pc, #52]	; (eb38 <z_log_get_s_mask+0x44>)
	while ((curr = *str++) && arg < nargs) {
    eb02:	f815 4b01 	ldrb.w	r4, [r5], #1
    eb06:	b10c      	cbz	r4, eb0c <z_log_get_s_mask+0x18>
    eb08:	428b      	cmp	r3, r1
    eb0a:	d300      	bcc.n	eb0e <z_log_get_s_mask+0x1a>
}
    eb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    eb0e:	2c25      	cmp	r4, #37	; 0x25
    eb10:	d102      	bne.n	eb18 <z_log_get_s_mask+0x24>
			arm = !arm;
    eb12:	f082 0201 	eor.w	r2, r2, #1
    eb16:	e7f4      	b.n	eb02 <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
    eb18:	2a00      	cmp	r2, #0
    eb1a:	d0f2      	beq.n	eb02 <z_log_get_s_mask+0xe>
    eb1c:	f814 c006 	ldrb.w	ip, [r4, r6]
    eb20:	f01c 0f03 	tst.w	ip, #3
    eb24:	d0ed      	beq.n	eb02 <z_log_get_s_mask+0xe>
			if (curr == 's') {
    eb26:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    eb28:	bf04      	itt	eq
    eb2a:	fa07 f203 	lsleq.w	r2, r7, r3
    eb2e:	4310      	orreq	r0, r2
			arg++;
    eb30:	3301      	adds	r3, #1
			arm = false;
    eb32:	2200      	movs	r2, #0
    eb34:	e7e5      	b.n	eb02 <z_log_get_s_mask+0xe>
    eb36:	bf00      	nop
    eb38:	0001d64b 	.word	0x0001d64b

0000eb3c <log_core_init>:
{
    eb3c:	b508      	push	{r3, lr}
		log_msg_pool_init();
    eb3e:	f000 fa4b 	bl	efd8 <log_msg_pool_init>
		log_list_init(&list);
    eb42:	4809      	ldr	r0, [pc, #36]	; (eb68 <log_core_init+0x2c>)
    eb44:	f00a f839 	bl	18bba <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    eb48:	2304      	movs	r3, #4
    eb4a:	2234      	movs	r2, #52	; 0x34
    eb4c:	4907      	ldr	r1, [pc, #28]	; (eb6c <log_core_init+0x30>)
    eb4e:	4808      	ldr	r0, [pc, #32]	; (eb70 <log_core_init+0x34>)
    eb50:	f00c fc7a 	bl	1b448 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    eb54:	4b07      	ldr	r3, [pc, #28]	; (eb74 <log_core_init+0x38>)
    eb56:	4a08      	ldr	r2, [pc, #32]	; (eb78 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    eb58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    eb5c:	601a      	str	r2, [r3, #0]
}
    eb5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    eb62:	f000 bc85 	b.w	f470 <log_output_timestamp_freq_set>
    eb66:	bf00      	nop
    eb68:	20014f88 	.word	0x20014f88
    eb6c:	2001acb0 	.word	0x2001acb0
    eb70:	20014f90 	.word	0x20014f90
    eb74:	20014504 	.word	0x20014504
    eb78:	00018bf9 	.word	0x00018bf9

0000eb7c <dropped_notify>:
{
    eb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    eb7e:	2500      	movs	r5, #0
    eb80:	4b0c      	ldr	r3, [pc, #48]	; (ebb4 <dropped_notify+0x38>)
    eb82:	e8d3 7fef 	ldaex	r7, [r3]
    eb86:	e8c3 5fe2 	stlex	r2, r5, [r3]
    eb8a:	2a00      	cmp	r2, #0
    eb8c:	d1f9      	bne.n	eb82 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    eb8e:	4c0a      	ldr	r4, [pc, #40]	; (ebb8 <dropped_notify+0x3c>)
    eb90:	4e0a      	ldr	r6, [pc, #40]	; (ebbc <dropped_notify+0x40>)
    eb92:	1b36      	subs	r6, r6, r4
    eb94:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    eb96:	42b5      	cmp	r5, r6
    eb98:	db00      	blt.n	eb9c <dropped_notify+0x20>
}
    eb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    eb9c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    eb9e:	795b      	ldrb	r3, [r3, #5]
    eba0:	b12b      	cbz	r3, ebae <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    eba2:	6823      	ldr	r3, [r4, #0]
    eba4:	68db      	ldr	r3, [r3, #12]
    eba6:	b113      	cbz	r3, ebae <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    eba8:	4639      	mov	r1, r7
    ebaa:	4620      	mov	r0, r4
    ebac:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    ebae:	3501      	adds	r5, #1
    ebb0:	3410      	adds	r4, #16
    ebb2:	e7f0      	b.n	eb96 <dropped_notify+0x1a>
    ebb4:	20014f80 	.word	0x20014f80
    ebb8:	0001c154 	.word	0x0001c154
    ebbc:	0001c164 	.word	0x0001c164

0000ebc0 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ebc0:	4b04      	ldr	r3, [pc, #16]	; (ebd4 <log_dropped+0x14>)
    ebc2:	e8d3 2fef 	ldaex	r2, [r3]
    ebc6:	3201      	adds	r2, #1
    ebc8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ebcc:	2900      	cmp	r1, #0
    ebce:	d1f8      	bne.n	ebc2 <log_dropped+0x2>
}
    ebd0:	4770      	bx	lr
    ebd2:	bf00      	nop
    ebd4:	20014f80 	.word	0x20014f80

0000ebd8 <log_source_name_get>:
    ebd8:	4a04      	ldr	r2, [pc, #16]	; (ebec <log_source_name_get+0x14>)
    ebda:	4b05      	ldr	r3, [pc, #20]	; (ebf0 <log_source_name_get+0x18>)
    ebdc:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    ebde:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    ebe2:	bf34      	ite	cc
    ebe4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    ebe8:	2000      	movcs	r0, #0
}
    ebea:	4770      	bx	lr
    ebec:	0001c0d4 	.word	0x0001c0d4
    ebf0:	0001c154 	.word	0x0001c154

0000ebf4 <log_backend_enable>:
	id += backend - log_backend_get(0);
    ebf4:	4b09      	ldr	r3, [pc, #36]	; (ec1c <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    ebf6:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    ebf8:	1ac3      	subs	r3, r0, r3
    ebfa:	111b      	asrs	r3, r3, #4
    ebfc:	3301      	adds	r3, #1
{
    ebfe:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    ec00:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    ec02:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    ec04:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    ec06:	4c06      	ldr	r4, [pc, #24]	; (ec20 <log_backend_enable+0x2c>)
    ec08:	715a      	strb	r2, [r3, #5]
    ec0a:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    ec0c:	6019      	str	r1, [r3, #0]
    ec0e:	b912      	cbnz	r2, ec16 <log_backend_enable+0x22>
    ec10:	4804      	ldr	r0, [pc, #16]	; (ec24 <log_backend_enable+0x30>)
    ec12:	f008 fbf7 	bl	17404 <z_impl_k_sem_give>
	backend_attached = true;
    ec16:	2301      	movs	r3, #1
    ec18:	7023      	strb	r3, [r4, #0]
}
    ec1a:	bd10      	pop	{r4, pc}
    ec1c:	0001c154 	.word	0x0001c154
    ec20:	200166b3 	.word	0x200166b3
    ec24:	20014790 	.word	0x20014790

0000ec28 <log_init>:
{
    ec28:	b570      	push	{r4, r5, r6, lr}
    ec2a:	4b0f      	ldr	r3, [pc, #60]	; (ec68 <log_init+0x40>)
    ec2c:	e8d3 5fef 	ldaex	r5, [r3]
    ec30:	1c6a      	adds	r2, r5, #1
    ec32:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ec36:	2900      	cmp	r1, #0
    ec38:	d1f8      	bne.n	ec2c <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    ec3a:	b92d      	cbnz	r5, ec48 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    ec3c:	4c0b      	ldr	r4, [pc, #44]	; (ec6c <log_init+0x44>)
    ec3e:	4e0c      	ldr	r6, [pc, #48]	; (ec70 <log_init+0x48>)
    ec40:	1b36      	subs	r6, r6, r4
    ec42:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    ec44:	42b5      	cmp	r5, r6
    ec46:	db00      	blt.n	ec4a <log_init+0x22>
}
    ec48:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    ec4a:	7b23      	ldrb	r3, [r4, #12]
    ec4c:	b143      	cbz	r3, ec60 <log_init+0x38>
			if (backend->api->init != NULL) {
    ec4e:	6823      	ldr	r3, [r4, #0]
    ec50:	695b      	ldr	r3, [r3, #20]
    ec52:	b103      	cbz	r3, ec56 <log_init+0x2e>
				backend->api->init();
    ec54:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    ec56:	2204      	movs	r2, #4
    ec58:	2100      	movs	r1, #0
    ec5a:	4620      	mov	r0, r4
    ec5c:	f7ff ffca 	bl	ebf4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    ec60:	3501      	adds	r5, #1
    ec62:	3410      	adds	r4, #16
    ec64:	e7ee      	b.n	ec44 <log_init+0x1c>
    ec66:	bf00      	nop
    ec68:	20014f84 	.word	0x20014f84
    ec6c:	0001c154 	.word	0x0001c154
    ec70:	0001c164 	.word	0x0001c164

0000ec74 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    ec74:	4b15      	ldr	r3, [pc, #84]	; (eccc <log_strdup+0x58>)
{
    ec76:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    ec78:	4298      	cmp	r0, r3
{
    ec7a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    ec7c:	d302      	bcc.n	ec84 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    ec7e:	4b14      	ldr	r3, [pc, #80]	; (ecd0 <log_strdup+0x5c>)
    ec80:	4298      	cmp	r0, r3
    ec82:	d31d      	bcc.n	ecc0 <log_strdup+0x4c>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    ec84:	2200      	movs	r2, #0
    ec86:	2300      	movs	r3, #0
    ec88:	4812      	ldr	r0, [pc, #72]	; (ecd4 <log_strdup+0x60>)
    ec8a:	a901      	add	r1, sp, #4
    ec8c:	f007 fe18 	bl	168c0 <k_mem_slab_alloc>
	if (err != 0) {
    ec90:	4605      	mov	r5, r0
    ec92:	b9c0      	cbnz	r0, ecc6 <log_strdup+0x52>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ec94:	2201      	movs	r2, #1
    ec96:	9b01      	ldr	r3, [sp, #4]
    ec98:	e8d3 1fef 	ldaex	r1, [r3]
    ec9c:	e8c3 2fe0 	stlex	r0, r2, [r3]
    eca0:	2800      	cmp	r0, #0
    eca2:	d1f9      	bne.n	ec98 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    eca4:	9e01      	ldr	r6, [sp, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    eca6:	222d      	movs	r2, #45	; 0x2d
    eca8:	1d33      	adds	r3, r6, #4
    ecaa:	4618      	mov	r0, r3
    ecac:	4621      	mov	r1, r4
    ecae:	f00c ff3b 	bl	1bb28 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    ecb2:	227e      	movs	r2, #126	; 0x7e
    ecb4:	4603      	mov	r3, r0
    ecb6:	f886 2031 	strb.w	r2, [r6, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    ecba:	f886 5032 	strb.w	r5, [r6, #50]	; 0x32
	return dup->buf;
    ecbe:	461c      	mov	r4, r3
}
    ecc0:	4620      	mov	r0, r4
    ecc2:	b002      	add	sp, #8
    ecc4:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
    ecc6:	4b04      	ldr	r3, [pc, #16]	; (ecd8 <log_strdup+0x64>)
    ecc8:	e7f9      	b.n	ecbe <log_strdup+0x4a>
    ecca:	bf00      	nop
    eccc:	0001be20 	.word	0x0001be20
    ecd0:	0001d784 	.word	0x0001d784
    ecd4:	20014f90 	.word	0x20014f90
    ecd8:	0001c8f4 	.word	0x0001c8f4

0000ecdc <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    ecdc:	b148      	cbz	r0, ecf2 <log_is_strdup+0x16>
    ecde:	4b05      	ldr	r3, [pc, #20]	; (ecf4 <log_is_strdup+0x18>)
    ece0:	4298      	cmp	r0, r3
    ece2:	d305      	bcc.n	ecf0 <log_is_strdup+0x14>
    ece4:	33d0      	adds	r3, #208	; 0xd0
    ece6:	4298      	cmp	r0, r3
    ece8:	bf2c      	ite	cs
    ecea:	2000      	movcs	r0, #0
    ecec:	2001      	movcc	r0, #1
    ecee:	4770      	bx	lr
    ecf0:	2000      	movs	r0, #0
}
    ecf2:	4770      	bx	lr
    ecf4:	2001acb0 	.word	0x2001acb0

0000ecf8 <z_impl_log_process>:
{
    ecf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    ecfc:	4b4a      	ldr	r3, [pc, #296]	; (ee28 <z_impl_log_process+0x130>)
{
    ecfe:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    ed00:	781b      	ldrb	r3, [r3, #0]
{
    ed02:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
    ed04:	b903      	cbnz	r3, ed08 <z_impl_log_process+0x10>
    ed06:	b340      	cbz	r0, ed5a <z_impl_log_process+0x62>
	__asm__ volatile(
    ed08:	f04f 0320 	mov.w	r3, #32
    ed0c:	f3ef 8611 	mrs	r6, BASEPRI
    ed10:	f383 8811 	msr	BASEPRI, r3
    ed14:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    ed18:	4844      	ldr	r0, [pc, #272]	; (ee2c <z_impl_log_process+0x134>)
    ed1a:	f009 ff5e 	bl	18bda <log_list_head_get>
    ed1e:	4605      	mov	r5, r0
	__asm__ volatile(
    ed20:	f386 8811 	msr	BASEPRI, r6
    ed24:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    ed28:	b158      	cbz	r0, ed42 <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ed2a:	4b41      	ldr	r3, [pc, #260]	; (ee30 <z_impl_log_process+0x138>)
    ed2c:	e8d3 2fef 	ldaex	r2, [r3]
    ed30:	3a01      	subs	r2, #1
    ed32:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ed36:	2900      	cmp	r1, #0
    ed38:	d1f8      	bne.n	ed2c <z_impl_log_process+0x34>
	if (!bypass) {
    ed3a:	b194      	cbz	r4, ed62 <z_impl_log_process+0x6a>
	log_msg_put(msg);
    ed3c:	4628      	mov	r0, r5
    ed3e:	f00a f849 	bl	18dd4 <log_msg_put>
	if (!bypass && dropped_cnt) {
    ed42:	b924      	cbnz	r4, ed4e <z_impl_log_process+0x56>
    ed44:	4b3b      	ldr	r3, [pc, #236]	; (ee34 <z_impl_log_process+0x13c>)
    ed46:	681b      	ldr	r3, [r3, #0]
    ed48:	b10b      	cbz	r3, ed4e <z_impl_log_process+0x56>
		dropped_notify();
    ed4a:	f7ff ff17 	bl	eb7c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    ed4e:	4837      	ldr	r0, [pc, #220]	; (ee2c <z_impl_log_process+0x134>)
    ed50:	f009 ff41 	bl	18bd6 <log_list_head_peek>
    ed54:	1e04      	subs	r4, r0, #0
    ed56:	bf18      	it	ne
    ed58:	2401      	movne	r4, #1
}
    ed5a:	4620      	mov	r0, r4
    ed5c:	b005      	add	sp, #20
    ed5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    ed62:	4b35      	ldr	r3, [pc, #212]	; (ee38 <z_impl_log_process+0x140>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    ed64:	781b      	ldrb	r3, [r3, #0]
    ed66:	b9cb      	cbnz	r3, ed9c <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    ed68:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    ed6a:	07db      	lsls	r3, r3, #31
    ed6c:	d416      	bmi.n	ed9c <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
    ed6e:	f00a f840 	bl	18df2 <log_msg_str_get>
    ed72:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    ed74:	4628      	mov	r0, r5
    ed76:	f00a f80b 	bl	18d90 <log_msg_nargs_get>
    ed7a:	4601      	mov	r1, r0
    ed7c:	4640      	mov	r0, r8
    ed7e:	f7ff feb9 	bl	eaf4 <z_log_get_s_mask>
    ed82:	4606      	mov	r6, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    ed84:	4f2d      	ldr	r7, [pc, #180]	; (ee3c <z_impl_log_process+0x144>)
    ed86:	4b2e      	ldr	r3, [pc, #184]	; (ee40 <z_impl_log_process+0x148>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    ed88:	f8df b0d0 	ldr.w	fp, [pc, #208]	; ee5c <z_impl_log_process+0x164>
    ed8c:	1bdb      	subs	r3, r3, r7
    ed8e:	08db      	lsrs	r3, r3, #3
    ed90:	9303      	str	r3, [sp, #12]
    ed92:	4b2c      	ldr	r3, [pc, #176]	; (ee44 <z_impl_log_process+0x14c>)
    ed94:	1bdb      	subs	r3, r3, r7
    ed96:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    ed9a:	b936      	cbnz	r6, edaa <z_impl_log_process+0xb2>
    ed9c:	4e2a      	ldr	r6, [pc, #168]	; (ee48 <z_impl_log_process+0x150>)
    ed9e:	4f2b      	ldr	r7, [pc, #172]	; (ee4c <z_impl_log_process+0x154>)
    eda0:	f04f 0800 	mov.w	r8, #0
    eda4:	1bbf      	subs	r7, r7, r6
    eda6:	113f      	asrs	r7, r7, #4
    eda8:	e03a      	b.n	ee20 <z_impl_log_process+0x128>
		idx = 31 - __builtin_clz(mask);
    edaa:	fab6 f186 	clz	r1, r6
    edae:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    edb2:	4649      	mov	r1, r9
    edb4:	4628      	mov	r0, r5
    edb6:	f009 ffee 	bl	18d96 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    edba:	4b25      	ldr	r3, [pc, #148]	; (ee50 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
    edbc:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    edbe:	4298      	cmp	r0, r3
    edc0:	d302      	bcc.n	edc8 <z_impl_log_process+0xd0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    edc2:	4a24      	ldr	r2, [pc, #144]	; (ee54 <z_impl_log_process+0x15c>)
    edc4:	4290      	cmp	r0, r2
    edc6:	d31a      	bcc.n	edfe <z_impl_log_process+0x106>
    edc8:	4608      	mov	r0, r1
    edca:	f7ff ff87 	bl	ecdc <log_is_strdup>
    edce:	4602      	mov	r2, r0
    edd0:	b9a8      	cbnz	r0, edfe <z_impl_log_process+0x106>
    edd2:	4b21      	ldr	r3, [pc, #132]	; (ee58 <z_impl_log_process+0x160>)
    edd4:	4299      	cmp	r1, r3
    edd6:	d012      	beq.n	edfe <z_impl_log_process+0x106>
	return msg->hdr.ids.source_id;
    edd8:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    edda:	9903      	ldr	r1, [sp, #12]
    eddc:	f3c3 1389 	ubfx	r3, r3, #6, #10
    ede0:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    ede2:	bf38      	it	cc
    ede4:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    ede8:	ea4f 138a 	mov.w	r3, sl, lsl #6
    edec:	f043 0301 	orr.w	r3, r3, #1
    edf0:	f8ad 3000 	strh.w	r3, [sp]
    edf4:	4649      	mov	r1, r9
    edf6:	4643      	mov	r3, r8
    edf8:	4658      	mov	r0, fp
    edfa:	f009 ff40 	bl	18c7e <log_3>
		mask &= ~BIT(idx);
    edfe:	2301      	movs	r3, #1
    ee00:	fa03 f109 	lsl.w	r1, r3, r9
    ee04:	ea26 0601 	bic.w	r6, r6, r1
    ee08:	e7c7      	b.n	ed9a <z_impl_log_process+0xa2>
	return backend->cb->active;
    ee0a:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    ee0c:	795b      	ldrb	r3, [r3, #5]
    ee0e:	b123      	cbz	r3, ee1a <z_impl_log_process+0x122>
	backend->api->put(backend, msg);
    ee10:	6833      	ldr	r3, [r6, #0]
    ee12:	4629      	mov	r1, r5
    ee14:	4630      	mov	r0, r6
    ee16:	681b      	ldr	r3, [r3, #0]
    ee18:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    ee1a:	f108 0801 	add.w	r8, r8, #1
    ee1e:	3610      	adds	r6, #16
    ee20:	45b8      	cmp	r8, r7
    ee22:	dbf2      	blt.n	ee0a <z_impl_log_process+0x112>
    ee24:	e78a      	b.n	ed3c <z_impl_log_process+0x44>
    ee26:	bf00      	nop
    ee28:	200166b3 	.word	0x200166b3
    ee2c:	20014f88 	.word	0x20014f88
    ee30:	20014f7c 	.word	0x20014f7c
    ee34:	20014f80 	.word	0x20014f80
    ee38:	200166b4 	.word	0x200166b4
    ee3c:	0001c0d4 	.word	0x0001c0d4
    ee40:	0001c154 	.word	0x0001c154
    ee44:	0001c10c 	.word	0x0001c10c
    ee48:	0001c154 	.word	0x0001c154
    ee4c:	0001c164 	.word	0x0001c164
    ee50:	0001be20 	.word	0x0001be20
    ee54:	0001d784 	.word	0x0001d784
    ee58:	0001c8f4 	.word	0x0001c8f4
    ee5c:	0001c90e 	.word	0x0001c90e

0000ee60 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    ee60:	4b27      	ldr	r3, [pc, #156]	; (ef00 <msg_finalize+0xa0>)
{
    ee62:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    ee64:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    ee66:	8141      	strh	r1, [r0, #10]
{
    ee68:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    ee6a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ee6c:	4d25      	ldr	r5, [pc, #148]	; (ef04 <msg_finalize+0xa4>)
    ee6e:	60e0      	str	r0, [r4, #12]
    ee70:	e8d5 3fef 	ldaex	r3, [r5]
    ee74:	3301      	adds	r3, #1
    ee76:	e8c5 3fe2 	stlex	r2, r3, [r5]
    ee7a:	2a00      	cmp	r2, #0
    ee7c:	d1f8      	bne.n	ee70 <msg_finalize+0x10>
	__asm__ volatile(
    ee7e:	f04f 0320 	mov.w	r3, #32
    ee82:	f3ef 8611 	mrs	r6, BASEPRI
    ee86:	f383 8811 	msr	BASEPRI, r3
    ee8a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    ee8e:	481e      	ldr	r0, [pc, #120]	; (ef08 <msg_finalize+0xa8>)
    ee90:	4621      	mov	r1, r4
    ee92:	f009 fe96 	bl	18bc2 <log_list_add_tail>
	__asm__ volatile(
    ee96:	f386 8811 	msr	BASEPRI, r6
    ee9a:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    ee9e:	4b1b      	ldr	r3, [pc, #108]	; (ef0c <msg_finalize+0xac>)
    eea0:	781b      	ldrb	r3, [r3, #0]
    eea2:	b183      	cbz	r3, eec6 <msg_finalize+0x66>
	__asm__ volatile(
    eea4:	f04f 0320 	mov.w	r3, #32
    eea8:	f3ef 8411 	mrs	r4, BASEPRI
    eeac:	f383 8811 	msr	BASEPRI, r3
    eeb0:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    eeb4:	2000      	movs	r0, #0
    eeb6:	f7ff ff1f 	bl	ecf8 <z_impl_log_process>
	__asm__ volatile(
    eeba:	f384 8811 	msr	BASEPRI, r4
    eebe:	f3bf 8f6f 	isb	sy
}
    eec2:	b002      	add	sp, #8
    eec4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    eec6:	4a12      	ldr	r2, [pc, #72]	; (ef10 <msg_finalize+0xb0>)
    eec8:	682b      	ldr	r3, [r5, #0]
    eeca:	6812      	ldr	r2, [r2, #0]
    eecc:	2a00      	cmp	r2, #0
    eece:	d0f8      	beq.n	eec2 <msg_finalize+0x62>
    eed0:	2b01      	cmp	r3, #1
    eed2:	d10a      	bne.n	eeea <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
    eed4:	2200      	movs	r2, #0
    eed6:	2300      	movs	r3, #0
    eed8:	480e      	ldr	r0, [pc, #56]	; (ef14 <msg_finalize+0xb4>)
    eeda:	e9cd 2300 	strd	r2, r3, [sp]
    eede:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    eee2:	2300      	movs	r3, #0
    eee4:	f008 fd9a 	bl	17a1c <z_impl_k_timer_start>
    eee8:	e7eb      	b.n	eec2 <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    eeea:	2b0a      	cmp	r3, #10
    eeec:	d1e9      	bne.n	eec2 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    eeee:	4809      	ldr	r0, [pc, #36]	; (ef14 <msg_finalize+0xb4>)
    eef0:	f00c fce1 	bl	1b8b6 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    eef4:	4808      	ldr	r0, [pc, #32]	; (ef18 <msg_finalize+0xb8>)
}
    eef6:	b002      	add	sp, #8
    eef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eefc:	f008 ba82 	b.w	17404 <z_impl_k_sem_give>
    ef00:	20014504 	.word	0x20014504
    ef04:	20014f7c 	.word	0x20014f7c
    ef08:	20014f88 	.word	0x20014f88
    ef0c:	200166b4 	.word	0x200166b4
    ef10:	20014fac 	.word	0x20014fac
    ef14:	200147c8 	.word	0x200147c8
    ef18:	20014790 	.word	0x20014790

0000ef1c <log_process_thread_func>:
{
    ef1c:	b510      	push	{r4, lr}
	log_init();
    ef1e:	f7ff fe83 	bl	ec28 <log_init>
	return z_impl_k_current_get();
    ef22:	f008 fa69 	bl	173f8 <z_impl_k_current_get>
	proc_tid = process_tid;
    ef26:	4b0c      	ldr	r3, [pc, #48]	; (ef58 <log_process_thread_func+0x3c>)
    ef28:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    ef2a:	b130      	cbz	r0, ef3a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    ef2c:	4b0b      	ldr	r3, [pc, #44]	; (ef5c <log_process_thread_func+0x40>)
	    process_tid &&
    ef2e:	681b      	ldr	r3, [r3, #0]
    ef30:	2b09      	cmp	r3, #9
    ef32:	dd02      	ble.n	ef3a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    ef34:	480a      	ldr	r0, [pc, #40]	; (ef60 <log_process_thread_func+0x44>)
    ef36:	f008 fa65 	bl	17404 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    ef3a:	4c09      	ldr	r4, [pc, #36]	; (ef60 <log_process_thread_func+0x44>)
    ef3c:	2000      	movs	r0, #0
    ef3e:	f7ff fedb 	bl	ecf8 <z_impl_log_process>
		if (log_process(false) == false) {
    ef42:	2800      	cmp	r0, #0
    ef44:	d1fa      	bne.n	ef3c <log_process_thread_func+0x20>
    ef46:	f04f 32ff 	mov.w	r2, #4294967295
    ef4a:	f04f 33ff 	mov.w	r3, #4294967295
    ef4e:	4620      	mov	r0, r4
    ef50:	f008 fa7e 	bl	17450 <z_impl_k_sem_take>
    ef54:	e7f2      	b.n	ef3c <log_process_thread_func+0x20>
    ef56:	bf00      	nop
    ef58:	20014fac 	.word	0x20014fac
    ef5c:	20014f7c 	.word	0x20014f7c
    ef60:	20014790 	.word	0x20014790

0000ef64 <z_impl_log_panic>:
{
    ef64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    ef66:	4f0e      	ldr	r7, [pc, #56]	; (efa0 <z_impl_log_panic+0x3c>)
    ef68:	783d      	ldrb	r5, [r7, #0]
    ef6a:	b975      	cbnz	r5, ef8a <z_impl_log_panic+0x26>
	log_init();
    ef6c:	f7ff fe5c 	bl	ec28 <log_init>
	return __log_backends_end - __log_backends_start;
    ef70:	4c0c      	ldr	r4, [pc, #48]	; (efa4 <z_impl_log_panic+0x40>)
    ef72:	4e0d      	ldr	r6, [pc, #52]	; (efa8 <z_impl_log_panic+0x44>)
    ef74:	1b36      	subs	r6, r6, r4
    ef76:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    ef78:	42b5      	cmp	r5, r6
    ef7a:	db07      	blt.n	ef8c <z_impl_log_panic+0x28>
    ef7c:	2000      	movs	r0, #0
    ef7e:	f7ff febb 	bl	ecf8 <z_impl_log_process>
		while (log_process(false) == true) {
    ef82:	2800      	cmp	r0, #0
    ef84:	d1fa      	bne.n	ef7c <z_impl_log_panic+0x18>
	panic_mode = true;
    ef86:	2301      	movs	r3, #1
    ef88:	703b      	strb	r3, [r7, #0]
}
    ef8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    ef8c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ef8e:	795b      	ldrb	r3, [r3, #5]
    ef90:	b11b      	cbz	r3, ef9a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    ef92:	6823      	ldr	r3, [r4, #0]
    ef94:	4620      	mov	r0, r4
    ef96:	691b      	ldr	r3, [r3, #16]
    ef98:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    ef9a:	3501      	adds	r5, #1
    ef9c:	3410      	adds	r4, #16
    ef9e:	e7eb      	b.n	ef78 <z_impl_log_panic+0x14>
    efa0:	200166b4 	.word	0x200166b4
    efa4:	0001c154 	.word	0x0001c154
    efa8:	0001c164 	.word	0x0001c164

0000efac <log_free>:
{
    efac:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    efae:	3804      	subs	r0, #4
    efb0:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    efb2:	e8d0 3fef 	ldaex	r3, [r0]
    efb6:	1e5a      	subs	r2, r3, #1
    efb8:	e8c0 2fe1 	stlex	r1, r2, [r0]
    efbc:	2900      	cmp	r1, #0
    efbe:	d1f8      	bne.n	efb2 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    efc0:	2b01      	cmp	r3, #1
    efc2:	d103      	bne.n	efcc <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    efc4:	4803      	ldr	r0, [pc, #12]	; (efd4 <log_free+0x28>)
    efc6:	a901      	add	r1, sp, #4
    efc8:	f007 fcac 	bl	16924 <k_mem_slab_free>
}
    efcc:	b003      	add	sp, #12
    efce:	f85d fb04 	ldr.w	pc, [sp], #4
    efd2:	bf00      	nop
    efd4:	20014f90 	.word	0x20014f90

0000efd8 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    efd8:	2320      	movs	r3, #32
    efda:	4902      	ldr	r1, [pc, #8]	; (efe4 <log_msg_pool_init+0xc>)
    efdc:	461a      	mov	r2, r3
    efde:	4802      	ldr	r0, [pc, #8]	; (efe8 <log_msg_pool_init+0x10>)
    efe0:	f00c ba32 	b.w	1b448 <k_mem_slab_init>
    efe4:	2001ad80 	.word	0x2001ad80
    efe8:	20014fb0 	.word	0x20014fb0

0000efec <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    efec:	2300      	movs	r3, #0
{
    efee:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    eff0:	4d09      	ldr	r5, [pc, #36]	; (f018 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    eff2:	9301      	str	r3, [sp, #4]
    eff4:	2001      	movs	r0, #1
    eff6:	f7ff fe7f 	bl	ecf8 <z_impl_log_process>
    effa:	4604      	mov	r4, r0
			log_dropped();
    effc:	f7ff fde0 	bl	ebc0 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    f000:	2200      	movs	r2, #0
    f002:	2300      	movs	r3, #0
    f004:	4628      	mov	r0, r5
    f006:	a901      	add	r1, sp, #4
    f008:	f007 fc5a 	bl	168c0 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    f00c:	b108      	cbz	r0, f012 <log_msg_no_space_handle+0x26>
    f00e:	2c00      	cmp	r4, #0
    f010:	d1f0      	bne.n	eff4 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    f012:	9801      	ldr	r0, [sp, #4]
    f014:	b003      	add	sp, #12
    f016:	bd30      	pop	{r4, r5, pc}
    f018:	20014fb0 	.word	0x20014fb0

0000f01c <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
    f01c:	2300      	movs	r3, #0
{
    f01e:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    f020:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
    f022:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    f024:	4806      	ldr	r0, [pc, #24]	; (f040 <log_msg_chunk_alloc+0x24>)
    f026:	2300      	movs	r3, #0
    f028:	a901      	add	r1, sp, #4
    f02a:	f007 fc49 	bl	168c0 <k_mem_slab_alloc>
	if (err != 0) {
    f02e:	b110      	cbz	r0, f036 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    f030:	f7ff ffdc 	bl	efec <log_msg_no_space_handle>
    f034:	9001      	str	r0, [sp, #4]
}
    f036:	9801      	ldr	r0, [sp, #4]
    f038:	b003      	add	sp, #12
    f03a:	f85d fb04 	ldr.w	pc, [sp], #4
    f03e:	bf00      	nop
    f040:	20014fb0 	.word	0x20014fb0

0000f044 <msg_free>:
{
    f044:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f046:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    f048:	7a45      	ldrb	r5, [r0, #9]
{
    f04a:	b085      	sub	sp, #20
    f04c:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    f04e:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
    f050:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    f054:	d41c      	bmi.n	f090 <msg_free+0x4c>
    f056:	b1dd      	cbz	r5, f090 <msg_free+0x4c>
		uint32_t smask = 0;
    f058:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    f05a:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    f05c:	4631      	mov	r1, r6
    f05e:	9801      	ldr	r0, [sp, #4]
    f060:	f009 fe99 	bl	18d96 <log_msg_arg_get>
    f064:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    f066:	f7ff fe39 	bl	ecdc <log_is_strdup>
    f06a:	b170      	cbz	r0, f08a <msg_free+0x46>
				if (smask == 0) {
    f06c:	b934      	cbnz	r4, f07c <msg_free+0x38>
					smask = z_log_get_s_mask(
    f06e:	9b01      	ldr	r3, [sp, #4]
    f070:	4629      	mov	r1, r5
    f072:	6918      	ldr	r0, [r3, #16]
    f074:	f7ff fd3e 	bl	eaf4 <z_log_get_s_mask>
					if (smask == 0) {
    f078:	4604      	mov	r4, r0
    f07a:	b148      	cbz	r0, f090 <msg_free+0x4c>
				if (smask & BIT(i)) {
    f07c:	fa24 f306 	lsr.w	r3, r4, r6
    f080:	07d9      	lsls	r1, r3, #31
    f082:	d502      	bpl.n	f08a <msg_free+0x46>
					log_free(buf);
    f084:	4638      	mov	r0, r7
    f086:	f7ff ff91 	bl	efac <log_free>
		for (i = 0; i < nargs; i++) {
    f08a:	3601      	adds	r6, #1
    f08c:	42ae      	cmp	r6, r5
    f08e:	d3e5      	bcc.n	f05c <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
    f090:	9b01      	ldr	r3, [sp, #4]
    f092:	7a1a      	ldrb	r2, [r3, #8]
    f094:	0792      	lsls	r2, r2, #30
    f096:	d504      	bpl.n	f0a2 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
    f098:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f09a:	4c08      	ldr	r4, [pc, #32]	; (f0bc <msg_free+0x78>)
    f09c:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    f09e:	9b03      	ldr	r3, [sp, #12]
    f0a0:	b92b      	cbnz	r3, f0ae <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    f0a2:	4806      	ldr	r0, [pc, #24]	; (f0bc <msg_free+0x78>)
    f0a4:	a901      	add	r1, sp, #4
    f0a6:	f007 fc3d 	bl	16924 <k_mem_slab_free>
}
    f0aa:	b005      	add	sp, #20
    f0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    f0ae:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f0b0:	4620      	mov	r0, r4
    f0b2:	a903      	add	r1, sp, #12
    f0b4:	f007 fc36 	bl	16924 <k_mem_slab_free>
		cont = next;
    f0b8:	9503      	str	r5, [sp, #12]
    f0ba:	e7f0      	b.n	f09e <msg_free+0x5a>
    f0bc:	20014fb0 	.word	0x20014fb0

0000f0c0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    f0c0:	b40e      	push	{r1, r2, r3}
    f0c2:	b503      	push	{r0, r1, lr}
    f0c4:	ab03      	add	r3, sp, #12
    f0c6:	f853 2b04 	ldr.w	r2, [r3], #4
    f0ca:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    f0cc:	4804      	ldr	r0, [pc, #16]	; (f0e0 <print_formatted+0x20>)
	va_start(args, fmt);
    f0ce:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    f0d0:	f7fe fe2a 	bl	dd28 <cbvprintf>
	va_end(args);

	return length;
}
    f0d4:	b002      	add	sp, #8
    f0d6:	f85d eb04 	ldr.w	lr, [sp], #4
    f0da:	b003      	add	sp, #12
    f0dc:	4770      	bx	lr
    f0de:	bf00      	nop
    f0e0:	0001919b 	.word	0x0001919b

0000f0e4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    f0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    f0e8:	f011 0402 	ands.w	r4, r1, #2
{
    f0ec:	b085      	sub	sp, #20
    f0ee:	4606      	mov	r6, r0
    f0f0:	4690      	mov	r8, r2
    f0f2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    f0f6:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    f0fa:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    f0fe:	d007      	beq.n	f110 <prefix_print+0x2c>
	if (!format) {
    f100:	f011 0f44 	tst.w	r1, #68	; 0x44
    f104:	d137      	bne.n	f176 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    f106:	461a      	mov	r2, r3
    f108:	4932      	ldr	r1, [pc, #200]	; (f1d4 <prefix_print+0xf0>)
    f10a:	f7ff ffd9 	bl	f0c0 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    f10e:	4604      	mov	r4, r0
	if (color) {
    f110:	f1b9 0f00 	cmp.w	r9, #0
    f114:	d00a      	beq.n	f12c <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
    f116:	4b30      	ldr	r3, [pc, #192]	; (f1d8 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    f118:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
    f11a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    f11e:	4b2f      	ldr	r3, [pc, #188]	; (f1dc <prefix_print+0xf8>)
    f120:	492f      	ldr	r1, [pc, #188]	; (f1e0 <prefix_print+0xfc>)
    f122:	2a00      	cmp	r2, #0
    f124:	bf08      	it	eq
    f126:	461a      	moveq	r2, r3
    f128:	f7ff ffca 	bl	f0c0 <print_formatted>
	if (level_on) {
    f12c:	b13d      	cbz	r5, f13e <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    f12e:	4b2d      	ldr	r3, [pc, #180]	; (f1e4 <prefix_print+0x100>)
    f130:	4630      	mov	r0, r6
    f132:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    f136:	492c      	ldr	r1, [pc, #176]	; (f1e8 <prefix_print+0x104>)
    f138:	f7ff ffc2 	bl	f0c0 <print_formatted>
    f13c:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    f13e:	f1b8 0f00 	cmp.w	r8, #0
    f142:	d044      	beq.n	f1ce <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    f144:	2301      	movs	r3, #1
    f146:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    f14a:	4b28      	ldr	r3, [pc, #160]	; (f1ec <prefix_print+0x108>)
    f14c:	f017 0f10 	tst.w	r7, #16
    f150:	4f27      	ldr	r7, [pc, #156]	; (f1f0 <prefix_print+0x10c>)
    f152:	bf18      	it	ne
    f154:	461f      	movne	r7, r3
    f156:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    f15a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    f15e:	f7ff fd3b 	bl	ebd8 <log_source_name_get>
    f162:	4639      	mov	r1, r7
    f164:	4602      	mov	r2, r0
    f166:	4630      	mov	r0, r6
    f168:	f7ff ffaa 	bl	f0c0 <print_formatted>
    f16c:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    f16e:	4420      	add	r0, r4
    f170:	b005      	add	sp, #20
    f172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    f176:	4a1f      	ldr	r2, [pc, #124]	; (f1f4 <prefix_print+0x110>)
    f178:	6811      	ldr	r1, [r2, #0]
    f17a:	b331      	cbz	r1, f1ca <prefix_print+0xe6>
		timestamp /= timestamp_div;
    f17c:	4a1e      	ldr	r2, [pc, #120]	; (f1f8 <prefix_print+0x114>)
    f17e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    f182:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    f184:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    f188:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
    f18c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    f190:	fbb4 f2fe 	udiv	r2, r4, lr
    f194:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    f198:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    f19c:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f1a0:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    f1a4:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f1a8:	fb01 441b 	mls	r4, r1, fp, r4
    f1ac:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    f1b0:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f1b4:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    f1b8:	e9cd b101 	strd	fp, r1, [sp, #4]
    f1bc:	fb0a e113 	mls	r1, sl, r3, lr
    f1c0:	9100      	str	r1, [sp, #0]
    f1c2:	490e      	ldr	r1, [pc, #56]	; (f1fc <prefix_print+0x118>)
    f1c4:	f7ff ff7c 	bl	f0c0 <print_formatted>
    f1c8:	e7a1      	b.n	f10e <prefix_print+0x2a>
		length = 0;
    f1ca:	4608      	mov	r0, r1
    f1cc:	e79f      	b.n	f10e <prefix_print+0x2a>
	total += print_formatted(log_output,
    f1ce:	4f08      	ldr	r7, [pc, #32]	; (f1f0 <prefix_print+0x10c>)
    f1d0:	e7c1      	b.n	f156 <prefix_print+0x72>
    f1d2:	bf00      	nop
    f1d4:	0001c95f 	.word	0x0001c95f
    f1d8:	0001c1b8 	.word	0x0001c1b8
    f1dc:	0001c951 	.word	0x0001c951
    f1e0:	0001c984 	.word	0x0001c984
    f1e4:	0001c1cc 	.word	0x0001c1cc
    f1e8:	0001c987 	.word	0x0001c987
    f1ec:	0001c95b 	.word	0x0001c95b
    f1f0:	0001c956 	.word	0x0001c956
    f1f4:	20014fcc 	.word	0x20014fcc
    f1f8:	20014fd0 	.word	0x20014fd0
    f1fc:	0001c968 	.word	0x0001c968

0000f200 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    f200:	b538      	push	{r3, r4, r5, lr}
    f202:	460c      	mov	r4, r1
	if (color) {
    f204:	07e1      	lsls	r1, r4, #31
{
    f206:	4605      	mov	r5, r0
	if (color) {
    f208:	d503      	bpl.n	f212 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    f20a:	4a08      	ldr	r2, [pc, #32]	; (f22c <postfix_print+0x2c>)
    f20c:	4908      	ldr	r1, [pc, #32]	; (f230 <postfix_print+0x30>)
    f20e:	f7ff ff57 	bl	f0c0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f212:	06e2      	lsls	r2, r4, #27
    f214:	d408      	bmi.n	f228 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f216:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    f218:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    f21a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    f21e:	bf4c      	ite	mi
    f220:	4904      	ldrmi	r1, [pc, #16]	; (f234 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    f222:	4905      	ldrpl	r1, [pc, #20]	; (f238 <postfix_print+0x38>)
    f224:	f7ff bf4c 	b.w	f0c0 <print_formatted>
}
    f228:	bd38      	pop	{r3, r4, r5, pc}
    f22a:	bf00      	nop
    f22c:	0001c951 	.word	0x0001c951
    f230:	0001c984 	.word	0x0001c984
    f234:	0001d452 	.word	0x0001d452
    f238:	0001d451 	.word	0x0001d451

0000f23c <hexdump_line_print>:
{
    f23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f240:	461d      	mov	r5, r3
    f242:	9b08      	ldr	r3, [sp, #32]
    f244:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f246:	06da      	lsls	r2, r3, #27
{
    f248:	4604      	mov	r4, r0
    f24a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f24c:	d405      	bmi.n	f25a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f24e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    f250:	bf4c      	ite	mi
    f252:	492b      	ldrmi	r1, [pc, #172]	; (f300 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    f254:	492b      	ldrpl	r1, [pc, #172]	; (f304 <hexdump_line_print+0xc8>)
    f256:	f7ff ff33 	bl	f0c0 <print_formatted>
{
    f25a:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
    f25e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; f30c <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
    f262:	45a8      	cmp	r8, r5
    f264:	db2d      	blt.n	f2c2 <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f266:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    f268:	f8df 80a4 	ldr.w	r8, [pc, #164]	; f310 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
    f26c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; f314 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
    f270:	f8df a098 	ldr.w	sl, [pc, #152]	; f30c <hexdump_line_print+0xd0>
		if (i < length) {
    f274:	42bd      	cmp	r5, r7
    f276:	d232      	bcs.n	f2de <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
    f278:	4649      	mov	r1, r9
    f27a:	4620      	mov	r0, r4
    f27c:	5d72      	ldrb	r2, [r6, r5]
    f27e:	f7ff ff1f 	bl	f0c0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f282:	3501      	adds	r5, #1
    f284:	2d10      	cmp	r5, #16
    f286:	d123      	bne.n	f2d0 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
    f288:	4620      	mov	r0, r4
    f28a:	491f      	ldr	r1, [pc, #124]	; (f308 <hexdump_line_print+0xcc>)
    f28c:	f7ff ff18 	bl	f0c0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f290:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    f292:	f8df 8078 	ldr.w	r8, [pc, #120]	; f30c <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
    f296:	f8df 9080 	ldr.w	r9, [pc, #128]	; f318 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
    f29a:	f8df a080 	ldr.w	sl, [pc, #128]	; f31c <hexdump_line_print+0xe0>
		if (i < length) {
    f29e:	42af      	cmp	r7, r5
    f2a0:	d929      	bls.n	f2f6 <hexdump_line_print+0xba>
			char c = (char)data[i];
    f2a2:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    f2a4:	4651      	mov	r1, sl
    f2a6:	f812 3009 	ldrb.w	r3, [r2, r9]
    f2aa:	4620      	mov	r0, r4
    f2ac:	f013 0f97 	tst.w	r3, #151	; 0x97
    f2b0:	bf08      	it	eq
    f2b2:	222e      	moveq	r2, #46	; 0x2e
    f2b4:	f7ff ff04 	bl	f0c0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f2b8:	3501      	adds	r5, #1
    f2ba:	2d10      	cmp	r5, #16
    f2bc:	d114      	bne.n	f2e8 <hexdump_line_print+0xac>
}
    f2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    f2c2:	4649      	mov	r1, r9
    f2c4:	4620      	mov	r0, r4
    f2c6:	f7ff fefb 	bl	f0c0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    f2ca:	f108 0801 	add.w	r8, r8, #1
    f2ce:	e7c8      	b.n	f262 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    f2d0:	076a      	lsls	r2, r5, #29
    f2d2:	d1cf      	bne.n	f274 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    f2d4:	4651      	mov	r1, sl
    f2d6:	4620      	mov	r0, r4
    f2d8:	f7ff fef2 	bl	f0c0 <print_formatted>
    f2dc:	e7ca      	b.n	f274 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    f2de:	4641      	mov	r1, r8
    f2e0:	4620      	mov	r0, r4
    f2e2:	f7ff feed 	bl	f0c0 <print_formatted>
    f2e6:	e7cc      	b.n	f282 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    f2e8:	076b      	lsls	r3, r5, #29
    f2ea:	d1d8      	bne.n	f29e <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
    f2ec:	4641      	mov	r1, r8
    f2ee:	4620      	mov	r0, r4
    f2f0:	f7ff fee6 	bl	f0c0 <print_formatted>
    f2f4:	e7d3      	b.n	f29e <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
    f2f6:	4641      	mov	r1, r8
    f2f8:	4620      	mov	r0, r4
    f2fa:	f7ff fee1 	bl	f0c0 <print_formatted>
    f2fe:	e7db      	b.n	f2b8 <hexdump_line_print+0x7c>
    f300:	0001d452 	.word	0x0001d452
    f304:	0001d451 	.word	0x0001d451
    f308:	0001c997 	.word	0x0001c997
    f30c:	0001c995 	.word	0x0001c995
    f310:	0001c993 	.word	0x0001c993
    f314:	0001c98d 	.word	0x0001c98d
    f318:	0001d64b 	.word	0x0001d64b
    f31c:	0001c999 	.word	0x0001c999

0000f320 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    f320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    f324:	7a8b      	ldrb	r3, [r1, #10]
    f326:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f328:	f013 0807 	ands.w	r8, r3, #7
{
    f32c:	4605      	mov	r5, r0
    f32e:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f330:	7a0a      	ldrb	r2, [r1, #8]
    f332:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f334:	d021      	beq.n	f37a <log_output_msg_process+0x5a>
    f336:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    f338:	8949      	ldrh	r1, [r1, #10]
    f33a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f33e:	f3c1 1189 	ubfx	r1, r1, #6, #10
    f342:	e9cd 8300 	strd	r8, r3, [sp]
    f346:	9102      	str	r1, [sp, #8]
    f348:	68f3      	ldr	r3, [r6, #12]
    f34a:	4639      	mov	r1, r7
    f34c:	f002 0201 	and.w	r2, r2, #1
    f350:	f7ff fec8 	bl	f0e4 <prefix_print>
    f354:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f356:	7a34      	ldrb	r4, [r6, #8]
    f358:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    f35a:	f014 0401 	ands.w	r4, r4, #1
    f35e:	d00e      	beq.n	f37e <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    f360:	4629      	mov	r1, r5
    f362:	4630      	mov	r0, r6
    f364:	f009 fdaf 	bl	18ec6 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    f368:	f1b8 0f00 	cmp.w	r8, #0
    f36c:	d02b      	beq.n	f3c6 <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    f36e:	4642      	mov	r2, r8
    f370:	4639      	mov	r1, r7
    f372:	4628      	mov	r0, r5
    f374:	f7ff ff44 	bl	f200 <postfix_print>
    f378:	e025      	b.n	f3c6 <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f37a:	46c1      	mov	r9, r8
    f37c:	e7eb      	b.n	f356 <log_output_msg_process+0x36>
	} else if (raw_string) {
    f37e:	f1b8 0f00 	cmp.w	r8, #0
    f382:	d126      	bne.n	f3d2 <log_output_msg_process+0xb2>
	size_t offset = 0;
    f384:	4627      	mov	r7, r4
		length = log_output->size;
    f386:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f388:	aa06      	add	r2, sp, #24
		length = log_output->size;
    f38a:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f38c:	4630      	mov	r0, r6
    f38e:	463b      	mov	r3, r7
    f390:	68a9      	ldr	r1, [r5, #8]
    f392:	f009 fd84 	bl	18e9e <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    f396:	9a06      	ldr	r2, [sp, #24]
    f398:	686b      	ldr	r3, [r5, #4]
    f39a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    f39c:	b13a      	cbz	r2, f3ae <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    f39e:	68ab      	ldr	r3, [r5, #8]
    f3a0:	4413      	add	r3, r2
    f3a2:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    f3a6:	f1a4 030a 	sub.w	r3, r4, #10
    f3aa:	425c      	negs	r4, r3
    f3ac:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    f3ae:	4628      	mov	r0, r5
    f3b0:	f009 fee6 	bl	19180 <log_output_flush>
		offset += length;
    f3b4:	9b06      	ldr	r3, [sp, #24]
    f3b6:	441f      	add	r7, r3
	} while (length > 0);
    f3b8:	2b00      	cmp	r3, #0
    f3ba:	d1e4      	bne.n	f386 <log_output_msg_process+0x66>
	if (eol) {
    f3bc:	b11c      	cbz	r4, f3c6 <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    f3be:	4628      	mov	r0, r5
    f3c0:	4913      	ldr	r1, [pc, #76]	; (f410 <log_output_msg_process+0xf0>)
    f3c2:	f7ff fe7d 	bl	f0c0 <print_formatted>
	}

	log_output_flush(log_output);
    f3c6:	4628      	mov	r0, r5
    f3c8:	f009 feda 	bl	19180 <log_output_flush>
}
    f3cc:	b00a      	add	sp, #40	; 0x28
    f3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    f3d2:	4630      	mov	r0, r6
    f3d4:	f009 fd0d 	bl	18df2 <log_msg_str_get>
    f3d8:	490e      	ldr	r1, [pc, #56]	; (f414 <log_output_msg_process+0xf4>)
    f3da:	4602      	mov	r2, r0
    f3dc:	4628      	mov	r0, r5
    f3de:	f7ff fe6f 	bl	f0c0 <print_formatted>
		length = sizeof(buf);
    f3e2:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f3e6:	aa05      	add	r2, sp, #20
    f3e8:	4623      	mov	r3, r4
    f3ea:	4630      	mov	r0, r6
    f3ec:	a906      	add	r1, sp, #24
		length = sizeof(buf);
    f3ee:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f3f2:	f009 fd54 	bl	18e9e <log_msg_hexdump_data_get>
		if (length) {
    f3f6:	9a05      	ldr	r2, [sp, #20]
    f3f8:	2a00      	cmp	r2, #0
    f3fa:	d0b8      	beq.n	f36e <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    f3fc:	464b      	mov	r3, r9
    f3fe:	4628      	mov	r0, r5
    f400:	9700      	str	r7, [sp, #0]
    f402:	a906      	add	r1, sp, #24
    f404:	f7ff ff1a 	bl	f23c <hexdump_line_print>
			offset += length;
    f408:	9b05      	ldr	r3, [sp, #20]
    f40a:	441c      	add	r4, r3
		length = sizeof(buf);
    f40c:	e7eb      	b.n	f3e6 <log_output_msg_process+0xc6>
    f40e:	bf00      	nop
    f410:	0001c99c 	.word	0x0001c99c
    f414:	0001c984 	.word	0x0001c984

0000f418 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    f418:	f242 730f 	movw	r3, #9999	; 0x270f
{
    f41c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    f41e:	428b      	cmp	r3, r1
    f420:	bf28      	it	cs
    f422:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    f424:	6805      	ldr	r5, [r0, #0]
{
    f426:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    f428:	2105      	movs	r1, #5
    f42a:	4668      	mov	r0, sp
    f42c:	4a0d      	ldr	r2, [pc, #52]	; (f464 <log_output_dropped_process+0x4c>)
    f42e:	f008 ffe2 	bl	183f6 <snprintk>
    f432:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    f434:	6863      	ldr	r3, [r4, #4]
    f436:	4628      	mov	r0, r5
    f438:	220b      	movs	r2, #11
    f43a:	685b      	ldr	r3, [r3, #4]
    f43c:	490a      	ldr	r1, [pc, #40]	; (f468 <log_output_dropped_process+0x50>)
    f43e:	f009 fd35 	bl	18eac <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    f442:	6863      	ldr	r3, [r4, #4]
    f444:	4632      	mov	r2, r6
    f446:	4669      	mov	r1, sp
    f448:	4628      	mov	r0, r5
    f44a:	685b      	ldr	r3, [r3, #4]
    f44c:	f009 fd2e 	bl	18eac <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    f450:	6863      	ldr	r3, [r4, #4]
    f452:	221b      	movs	r2, #27
    f454:	4628      	mov	r0, r5
    f456:	685b      	ldr	r3, [r3, #4]
    f458:	4904      	ldr	r1, [pc, #16]	; (f46c <log_output_dropped_process+0x54>)
    f45a:	f009 fd27 	bl	18eac <buffer_write>
		     log_output->control_block->ctx);
}
    f45e:	b002      	add	sp, #8
    f460:	bd70      	pop	{r4, r5, r6, pc}
    f462:	bf00      	nop
    f464:	0001d392 	.word	0x0001d392
    f468:	0001c9da 	.word	0x0001c9da
    f46c:	0001c9be 	.word	0x0001c9be

0000f470 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    f470:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    f472:	2100      	movs	r1, #0
	timestamp_div = 1U;
    f474:	4a07      	ldr	r2, [pc, #28]	; (f494 <log_output_timestamp_freq_set+0x24>)
{
    f476:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    f478:	4c07      	ldr	r4, [pc, #28]	; (f498 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    f47a:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    f47c:	42a0      	cmp	r0, r4
    f47e:	d804      	bhi.n	f48a <log_output_timestamp_freq_set+0x1a>
    f480:	b101      	cbz	r1, f484 <log_output_timestamp_freq_set+0x14>
    f482:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    f484:	4b05      	ldr	r3, [pc, #20]	; (f49c <log_output_timestamp_freq_set+0x2c>)
    f486:	6018      	str	r0, [r3, #0]
}
    f488:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
    f48a:	2101      	movs	r1, #1
		frequency /= 2U;
    f48c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    f48e:	005b      	lsls	r3, r3, #1
    f490:	e7f4      	b.n	f47c <log_output_timestamp_freq_set+0xc>
    f492:	bf00      	nop
    f494:	20014fd0 	.word	0x20014fd0
    f498:	000f4240 	.word	0x000f4240
    f49c:	20014fcc 	.word	0x20014fcc

0000f4a0 <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    f4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f4a2:	460d      	mov	r5, r1
    f4a4:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    f4a6:	4f06      	ldr	r7, [pc, #24]	; (f4c0 <char_out+0x20>)
    f4a8:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    f4aa:	42b4      	cmp	r4, r6
    f4ac:	d101      	bne.n	f4b2 <char_out+0x12>
	}

	return length;
}
    f4ae:	4628      	mov	r0, r5
    f4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    f4b2:	6838      	ldr	r0, [r7, #0]
    f4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    f4b8:	6883      	ldr	r3, [r0, #8]
    f4ba:	685b      	ldr	r3, [r3, #4]
    f4bc:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    f4be:	e7f4      	b.n	f4aa <char_out+0xa>
    f4c0:	20014fe8 	.word	0x20014fe8

0000f4c4 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    f4c4:	4801      	ldr	r0, [pc, #4]	; (f4cc <panic+0x8>)
    f4c6:	f009 be5b 	b.w	19180 <log_output_flush>
    f4ca:	bf00      	nop
    f4cc:	0001c1f8 	.word	0x0001c1f8

0000f4d0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    f4d0:	4801      	ldr	r0, [pc, #4]	; (f4d8 <dropped+0x8>)
    f4d2:	f7ff bfa1 	b.w	f418 <log_output_dropped_process>
    f4d6:	bf00      	nop
    f4d8:	0001c1f8 	.word	0x0001c1f8

0000f4dc <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    f4dc:	b508      	push	{r3, lr}
    f4de:	4803      	ldr	r0, [pc, #12]	; (f4ec <log_backend_uart_init+0x10>)
    f4e0:	f007 f854 	bl	1658c <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    f4e4:	4b02      	ldr	r3, [pc, #8]	; (f4f0 <log_backend_uart_init+0x14>)
    f4e6:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
    f4e8:	bd08      	pop	{r3, pc}
    f4ea:	bf00      	nop
    f4ec:	0001c9e6 	.word	0x0001c9e6
    f4f0:	20014fe8 	.word	0x20014fe8

0000f4f4 <put>:
{
    f4f4:	b510      	push	{r4, lr}
    f4f6:	460c      	mov	r4, r1
	log_msg_get(msg);
    f4f8:	4608      	mov	r0, r1
    f4fa:	f009 fc40 	bl	18d7e <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    f4fe:	4621      	mov	r1, r4
    f500:	4804      	ldr	r0, [pc, #16]	; (f514 <put+0x20>)
    f502:	220f      	movs	r2, #15
    f504:	f7ff ff0c 	bl	f320 <log_output_msg_process>
	log_msg_put(msg);
    f508:	4620      	mov	r0, r4
}
    f50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f50e:	f009 bc61 	b.w	18dd4 <log_msg_put>
    f512:	bf00      	nop
    f514:	0001c1f8 	.word	0x0001c1f8

0000f518 <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
    f518:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f51a:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    f51c:	4c0f      	ldr	r4, [pc, #60]	; (f55c <z_impl_zsock_socket+0x44>)
    f51e:	4e10      	ldr	r6, [pc, #64]	; (f560 <z_impl_zsock_socket+0x48>)
    f520:	42b4      	cmp	r4, r6
    f522:	d307      	bcc.n	f534 <z_impl_zsock_socket+0x1c>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
    f524:	f009 ff7c 	bl	19420 <__errno>
    f528:	236a      	movs	r3, #106	; 0x6a
    f52a:	6003      	str	r3, [r0, #0]
	return -1;
}
    f52c:	f04f 30ff 	mov.w	r0, #4294967295
    f530:	b002      	add	sp, #8
    f532:	bd70      	pop	{r4, r5, r6, pc}
		if (sock_family->family != family &&
    f534:	6823      	ldr	r3, [r4, #0]
    f536:	42ab      	cmp	r3, r5
    f538:	d000      	beq.n	f53c <z_impl_zsock_socket+0x24>
    f53a:	b96b      	cbnz	r3, f558 <z_impl_zsock_socket+0x40>
		if (!sock_family->is_supported(family, type, proto)) {
    f53c:	4628      	mov	r0, r5
    f53e:	6863      	ldr	r3, [r4, #4]
    f540:	e9cd 1200 	strd	r1, r2, [sp]
    f544:	4798      	blx	r3
    f546:	e9dd 1200 	ldrd	r1, r2, [sp]
    f54a:	b128      	cbz	r0, f558 <z_impl_zsock_socket+0x40>
		return sock_family->handler(family, type, proto);
    f54c:	4628      	mov	r0, r5
    f54e:	68a3      	ldr	r3, [r4, #8]
}
    f550:	b002      	add	sp, #8
    f552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return sock_family->handler(family, type, proto);
    f556:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    f558:	340c      	adds	r4, #12
    f55a:	e7e1      	b.n	f520 <z_impl_zsock_socket+0x8>
    f55c:	0001c0c8 	.word	0x0001c0c8
    f560:	0001c0d4 	.word	0x0001c0d4

0000f564 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
    f564:	4b01      	ldr	r3, [pc, #4]	; (f56c <socket_offload_dns_register+0x8>)
    f566:	6018      	str	r0, [r3, #0]
}
    f568:	4770      	bx	lr
    f56a:	bf00      	nop
    f56c:	20014fec 	.word	0x20014fec

0000f570 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    f570:	b508      	push	{r3, lr}
    f572:	4806      	ldr	r0, [pc, #24]	; (f58c <uart_console_init+0x1c>)
    f574:	f007 f80a 	bl	1658c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    f578:	4b05      	ldr	r3, [pc, #20]	; (f590 <uart_console_init+0x20>)
    f57a:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    f57c:	4805      	ldr	r0, [pc, #20]	; (f594 <uart_console_init+0x24>)
    f57e:	f001 f8d9 	bl	10734 <__stdout_hook_install>
	__printk_hook_install(console_out);
    f582:	4804      	ldr	r0, [pc, #16]	; (f594 <uart_console_init+0x24>)
    f584:	f7fe fa5a 	bl	da3c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    f588:	2000      	movs	r0, #0
    f58a:	bd08      	pop	{r3, pc}
    f58c:	0001c9e6 	.word	0x0001c9e6
    f590:	20014ff0 	.word	0x20014ff0
    f594:	0000f599 	.word	0x0000f599

0000f598 <console_out>:
	if ('\n' == c) {
    f598:	280a      	cmp	r0, #10
{
    f59a:	b538      	push	{r3, r4, r5, lr}
    f59c:	4604      	mov	r4, r0
    f59e:	4d07      	ldr	r5, [pc, #28]	; (f5bc <console_out+0x24>)
	if ('\n' == c) {
    f5a0:	d104      	bne.n	f5ac <console_out+0x14>
    f5a2:	6828      	ldr	r0, [r5, #0]
    f5a4:	6883      	ldr	r3, [r0, #8]
    f5a6:	210d      	movs	r1, #13
    f5a8:	685b      	ldr	r3, [r3, #4]
    f5aa:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    f5ac:	6828      	ldr	r0, [r5, #0]
    f5ae:	6883      	ldr	r3, [r0, #8]
    f5b0:	b2e1      	uxtb	r1, r4
    f5b2:	685b      	ldr	r3, [r3, #4]
    f5b4:	4798      	blx	r3
}
    f5b6:	4620      	mov	r0, r4
    f5b8:	bd38      	pop	{r3, r4, r5, pc}
    f5ba:	bf00      	nop
    f5bc:	20014ff0 	.word	0x20014ff0

0000f5c0 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    f5c0:	b570      	push	{r4, r5, r6, lr}
    f5c2:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
    f5c4:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    f5c6:	480d      	ldr	r0, [pc, #52]	; (f5fc <onoff_stop+0x3c>)
{
    f5c8:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    f5ca:	1a23      	subs	r3, r4, r0
    f5cc:	109a      	asrs	r2, r3, #2
    f5ce:	4b0c      	ldr	r3, [pc, #48]	; (f600 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
    f5d0:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    f5d2:	4353      	muls	r3, r2
    f5d4:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    f5d6:	435d      	muls	r5, r3
    f5d8:	f105 0340 	add.w	r3, r5, #64	; 0x40
    f5dc:	4418      	add	r0, r3
    f5de:	f009 fe4d 	bl	1927c <set_off_state>
	if (err < 0) {
    f5e2:	1e01      	subs	r1, r0, #0
    f5e4:	db04      	blt.n	f5f0 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    f5e6:	4b07      	ldr	r3, [pc, #28]	; (f604 <onoff_stop+0x44>)
    f5e8:	442b      	add	r3, r5
    f5ea:	685b      	ldr	r3, [r3, #4]
    f5ec:	4798      	blx	r3
	return 0;
    f5ee:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    f5f0:	4620      	mov	r0, r4
    f5f2:	4633      	mov	r3, r6
}
    f5f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    f5f8:	4718      	bx	r3
    f5fa:	bf00      	nop
    f5fc:	20015004 	.word	0x20015004
    f600:	b6db6db7 	.word	0xb6db6db7
    f604:	0001c21c 	.word	0x0001c21c

0000f608 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    f608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    f60c:	4c0f      	ldr	r4, [pc, #60]	; (f64c <onoff_start+0x44>)
    f60e:	4d10      	ldr	r5, [pc, #64]	; (f650 <onoff_start+0x48>)
    f610:	1b03      	subs	r3, r0, r4
    f612:	109b      	asrs	r3, r3, #2
    f614:	435d      	muls	r5, r3
    f616:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    f618:	250c      	movs	r5, #12
    f61a:	435d      	muls	r5, r3
{
    f61c:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    f61e:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    f622:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    f624:	4420      	add	r0, r4
    f626:	2140      	movs	r1, #64	; 0x40
    f628:	f009 fe41 	bl	192ae <set_starting_state>
	if (err < 0) {
    f62c:	1e01      	subs	r1, r0, #0
    f62e:	db08      	blt.n	f642 <onoff_start+0x3a>
	subdata->cb = cb;
    f630:	4b08      	ldr	r3, [pc, #32]	; (f654 <onoff_start+0x4c>)
    f632:	442c      	add	r4, r5
	subdata->user_data = user_data;
    f634:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    f638:	4b07      	ldr	r3, [pc, #28]	; (f658 <onoff_start+0x50>)
    f63a:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    f63c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    f640:	4718      	bx	r3
		notify(mgr, err);
    f642:	4638      	mov	r0, r7
    f644:	4633      	mov	r3, r6
}
    f646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    f64a:	4718      	bx	r3
    f64c:	20015004 	.word	0x20015004
    f650:	b6db6db7 	.word	0xb6db6db7
    f654:	00019311 	.word	0x00019311
    f658:	0001c21c 	.word	0x0001c21c

0000f65c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    f65c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    f65e:	2200      	movs	r2, #0
    f660:	2101      	movs	r1, #1
{
    f662:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    f664:	2005      	movs	r0, #5
    f666:	f000 fa83 	bl	fb70 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    f66a:	2005      	movs	r0, #5
    f66c:	f000 fa62 	bl	fb34 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    f670:	480f      	ldr	r0, [pc, #60]	; (f6b0 <clk_init+0x54>)
    f672:	f006 fd97 	bl	161a4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    f676:	4b0f      	ldr	r3, [pc, #60]	; (f6b4 <clk_init+0x58>)
    f678:	4298      	cmp	r0, r3
    f67a:	d115      	bne.n	f6a8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    f67c:	f00b fe6a 	bl	1b354 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    f680:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    f682:	490d      	ldr	r1, [pc, #52]	; (f6b8 <clk_init+0x5c>)
    f684:	4630      	mov	r0, r6
    f686:	f008 ff13 	bl	184b0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    f68a:	2800      	cmp	r0, #0
    f68c:	db0b      	blt.n	f6a6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    f68e:	2501      	movs	r5, #1
    f690:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    f692:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    f694:	4908      	ldr	r1, [pc, #32]	; (f6b8 <clk_init+0x5c>)
    f696:	f104 001c 	add.w	r0, r4, #28
    f69a:	f008 ff09 	bl	184b0 <onoff_manager_init>
		if (err < 0) {
    f69e:	2800      	cmp	r0, #0
    f6a0:	db01      	blt.n	f6a6 <clk_init+0x4a>
	}

	return 0;
    f6a2:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    f6a4:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    f6a6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    f6a8:	f06f 0004 	mvn.w	r0, #4
    f6ac:	e7fb      	b.n	f6a6 <clk_init+0x4a>
    f6ae:	bf00      	nop
    f6b0:	0000f6f9 	.word	0x0000f6f9
    f6b4:	0bad0000 	.word	0x0bad0000
    f6b8:	0001c234 	.word	0x0001c234

0000f6bc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    f6bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    f6be:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    f6c0:	4601      	mov	r1, r0
	sub_data->cb = NULL;
    f6c2:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
    f6c4:	434b      	muls	r3, r1
    f6c6:	480a      	ldr	r0, [pc, #40]	; (f6f0 <clkstarted_handle.constprop.0+0x34>)
    f6c8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    f6ca:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    f6cc:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    f6d0:	4418      	add	r0, r3
	sub_data->cb = NULL;
    f6d2:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
    f6d4:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    f6d6:	f009 fe08 	bl	192ea <set_on_state>
	if (callback) {
    f6da:	b135      	cbz	r5, f6ea <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    f6dc:	462b      	mov	r3, r5
    f6de:	9a01      	ldr	r2, [sp, #4]
    f6e0:	4804      	ldr	r0, [pc, #16]	; (f6f4 <clkstarted_handle.constprop.0+0x38>)
}
    f6e2:	b002      	add	sp, #8
    f6e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    f6e8:	4718      	bx	r3
}
    f6ea:	b002      	add	sp, #8
    f6ec:	bd70      	pop	{r4, r5, r6, pc}
    f6ee:	bf00      	nop
    f6f0:	20015004 	.word	0x20015004
    f6f4:	200145dc 	.word	0x200145dc

0000f6f8 <clock_event_handler>:
	switch (event) {
    f6f8:	b110      	cbz	r0, f700 <clock_event_handler+0x8>
    f6fa:	2801      	cmp	r0, #1
    f6fc:	d004      	beq.n	f708 <clock_event_handler+0x10>
    f6fe:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    f700:	4b03      	ldr	r3, [pc, #12]	; (f710 <clock_event_handler+0x18>)
    f702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f704:	075b      	lsls	r3, r3, #29
    f706:	d101      	bne.n	f70c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    f708:	f7ff bfd8 	b.w	f6bc <clkstarted_handle.constprop.0>
}
    f70c:	4770      	bx	lr
    f70e:	bf00      	nop
    f710:	20015004 	.word	0x20015004

0000f714 <generic_hfclk_start>:
{
    f714:	b508      	push	{r3, lr}
	__asm__ volatile(
    f716:	f04f 0320 	mov.w	r3, #32
    f71a:	f3ef 8111 	mrs	r1, BASEPRI
    f71e:	f383 8811 	msr	BASEPRI, r3
    f722:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    f726:	4a11      	ldr	r2, [pc, #68]	; (f76c <generic_hfclk_start+0x58>)
    f728:	6813      	ldr	r3, [r2, #0]
    f72a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    f72e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    f732:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    f734:	d00b      	beq.n	f74e <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    f736:	4a0e      	ldr	r2, [pc, #56]	; (f770 <generic_hfclk_start+0x5c>)
    f738:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    f73c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    f740:	f013 0301 	ands.w	r3, r3, #1
    f744:	d003      	beq.n	f74e <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    f746:	480b      	ldr	r0, [pc, #44]	; (f774 <generic_hfclk_start+0x60>)
    f748:	f009 fdcf 	bl	192ea <set_on_state>
			already_started = true;
    f74c:	2301      	movs	r3, #1
	__asm__ volatile(
    f74e:	f381 8811 	msr	BASEPRI, r1
    f752:	f3bf 8f6f 	isb	sy
	if (already_started) {
    f756:	b123      	cbz	r3, f762 <generic_hfclk_start+0x4e>
}
    f758:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    f75c:	2000      	movs	r0, #0
    f75e:	f7ff bfad 	b.w	f6bc <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    f762:	2001      	movs	r0, #1
}
    f764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f768:	f006 bd2c 	b.w	161c4 <nrfx_clock_start>
    f76c:	20015054 	.word	0x20015054
    f770:	40005000 	.word	0x40005000
    f774:	20015044 	.word	0x20015044

0000f778 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f778:	4b07      	ldr	r3, [pc, #28]	; (f798 <generic_hfclk_stop+0x20>)
    f77a:	e8d3 2fef 	ldaex	r2, [r3]
    f77e:	f022 0102 	bic.w	r1, r2, #2
    f782:	e8c3 1fe0 	stlex	r0, r1, [r3]
    f786:	2800      	cmp	r0, #0
    f788:	d1f7      	bne.n	f77a <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    f78a:	07d3      	lsls	r3, r2, #31
    f78c:	d402      	bmi.n	f794 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    f78e:	2001      	movs	r0, #1
    f790:	f006 bd4a 	b.w	16228 <nrfx_clock_stop>
}
    f794:	4770      	bx	lr
    f796:	bf00      	nop
    f798:	20015054 	.word	0x20015054

0000f79c <api_blocking_start>:
{
    f79c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f79e:	2200      	movs	r2, #0
    f7a0:	2301      	movs	r3, #1
    f7a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    f7a6:	ab04      	add	r3, sp, #16
    f7a8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    f7ac:	4a09      	ldr	r2, [pc, #36]	; (f7d4 <api_blocking_start+0x38>)
    f7ae:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f7b0:	f8cd d000 	str.w	sp, [sp]
    f7b4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    f7b8:	f009 fdd1 	bl	1935e <api_start>
	if (err < 0) {
    f7bc:	2800      	cmp	r0, #0
    f7be:	db05      	blt.n	f7cc <api_blocking_start+0x30>
    f7c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    f7c4:	2300      	movs	r3, #0
    f7c6:	4668      	mov	r0, sp
    f7c8:	f007 fe42 	bl	17450 <z_impl_k_sem_take>
}
    f7cc:	b007      	add	sp, #28
    f7ce:	f85d fb04 	ldr.w	pc, [sp], #4
    f7d2:	bf00      	nop
    f7d4:	00019331 	.word	0x00019331

0000f7d8 <z_nrf_clock_control_lf_on>:
{
    f7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f7dc:	2201      	movs	r2, #1
    f7de:	4607      	mov	r7, r0
    f7e0:	4936      	ldr	r1, [pc, #216]	; (f8bc <z_nrf_clock_control_lf_on+0xe4>)
    f7e2:	e8d1 3fef 	ldaex	r3, [r1]
    f7e6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    f7ea:	2800      	cmp	r0, #0
    f7ec:	d1f9      	bne.n	f7e2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    f7ee:	b933      	cbnz	r3, f7fe <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    f7f0:	4933      	ldr	r1, [pc, #204]	; (f8c0 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
    f7f2:	4834      	ldr	r0, [pc, #208]	; (f8c4 <z_nrf_clock_control_lf_on+0xec>)
    f7f4:	604b      	str	r3, [r1, #4]
    f7f6:	60cb      	str	r3, [r1, #12]
    f7f8:	608a      	str	r2, [r1, #8]
    f7fa:	f008 fe6c 	bl	184d6 <onoff_request>
	switch (start_mode) {
    f7fe:	1e7b      	subs	r3, r7, #1
    f800:	2b01      	cmp	r3, #1
    f802:	d82e      	bhi.n	f862 <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    f804:	2f01      	cmp	r7, #1
    f806:	d106      	bne.n	f816 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    f808:	4b2f      	ldr	r3, [pc, #188]	; (f8c8 <z_nrf_clock_control_lf_on+0xf0>)
    f80a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    f80e:	f003 0303 	and.w	r3, r3, #3
    f812:	2b02      	cmp	r3, #2
    f814:	d025      	beq.n	f862 <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    f816:	f00b ffc3 	bl	1b7a0 <k_is_in_isr>
    f81a:	4604      	mov	r4, r0
    f81c:	b918      	cbnz	r0, f826 <z_nrf_clock_control_lf_on+0x4e>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    f81e:	4b2b      	ldr	r3, [pc, #172]	; (f8cc <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
    f820:	781b      	ldrb	r3, [r3, #0]
    f822:	2b00      	cmp	r3, #0
    f824:	d144      	bne.n	f8b0 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
    f826:	f04f 0320 	mov.w	r3, #32
    f82a:	f3ef 8611 	mrs	r6, BASEPRI
    f82e:	f383 8811 	msr	BASEPRI, r3
    f832:	f3bf 8f6f 	isb	sy
    f836:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f838:	4d23      	ldr	r5, [pc, #140]	; (f8c8 <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f83a:	f8df 809c 	ldr.w	r8, [pc, #156]	; f8d8 <z_nrf_clock_control_lf_on+0x100>
    f83e:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f840:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f844:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    f848:	03d2      	lsls	r2, r2, #15
    f84a:	d50c      	bpl.n	f866 <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    f84c:	f003 0303 	and.w	r3, r3, #3
    f850:	2b02      	cmp	r3, #2
    f852:	d001      	beq.n	f858 <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    f854:	2f01      	cmp	r7, #1
    f856:	d106      	bne.n	f866 <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
    f858:	b334      	cbz	r4, f8a8 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    f85a:	f386 8811 	msr	BASEPRI, r6
    f85e:	f3bf 8f6f 	isb	sy
}
    f862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    f866:	b1d4      	cbz	r4, f89e <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    f868:	4630      	mov	r0, r6
    f86a:	f000 fb07 	bl	fe7c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    f86e:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    f872:	b2db      	uxtb	r3, r3
    f874:	2b01      	cmp	r3, #1
    f876:	d1e3      	bne.n	f840 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f878:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
    f87c:	2a00      	cmp	r2, #0
    f87e:	d0df      	beq.n	f840 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f880:	2200      	movs	r2, #0
    f882:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    f886:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
    f88a:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f88c:	2120      	movs	r1, #32
    f88e:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    f892:	4a0f      	ldr	r2, [pc, #60]	; (f8d0 <z_nrf_clock_control_lf_on+0xf8>)
    f894:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f898:	4a0e      	ldr	r2, [pc, #56]	; (f8d4 <z_nrf_clock_control_lf_on+0xfc>)
    f89a:	6013      	str	r3, [r2, #0]
}
    f89c:	e7d0      	b.n	f840 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
    f89e:	2100      	movs	r1, #0
    f8a0:	2021      	movs	r0, #33	; 0x21
    f8a2:	f007 fd87 	bl	173b4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    f8a6:	e7e2      	b.n	f86e <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
    f8a8:	2302      	movs	r3, #2
    f8aa:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    f8ae:	e7d8      	b.n	f862 <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
    f8b0:	2202      	movs	r2, #2
    f8b2:	4b05      	ldr	r3, [pc, #20]	; (f8c8 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
    f8b4:	4606      	mov	r6, r0
    f8b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    f8ba:	e7bd      	b.n	f838 <z_nrf_clock_control_lf_on+0x60>
    f8bc:	20015058 	.word	0x20015058
    f8c0:	20014ff4 	.word	0x20014ff4
    f8c4:	20015020 	.word	0x20015020
    f8c8:	40005000 	.word	0x40005000
    f8cc:	20018459 	.word	0x20018459
    f8d0:	e000e100 	.word	0xe000e100
    f8d4:	40005008 	.word	0x40005008
    f8d8:	40005104 	.word	0x40005104

0000f8dc <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    f8dc:	4a04      	ldr	r2, [pc, #16]	; (f8f0 <sys_clock_timeout_handler+0x14>)
    f8de:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    f8e0:	1ac9      	subs	r1, r1, r3
    f8e2:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    f8e6:	4403      	add	r3, r0
    f8e8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    f8ea:	f007 bfed 	b.w	178c8 <z_clock_announce>
    f8ee:	bf00      	nop
    f8f0:	20015068 	.word	0x20015068

0000f8f4 <set_absolute_alarm>:
{
    f8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    f8f8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f8fc:	f04f 0900 	mov.w	r9, #0
    f900:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    f902:	f100 0450 	add.w	r4, r0, #80	; 0x50
    f906:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    f90a:	00a4      	lsls	r4, r4, #2
    f90c:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    f910:	b2a4      	uxth	r4, r4
    f912:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    f916:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    f91a:	f8df 806c 	ldr.w	r8, [pc, #108]	; f988 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    f91e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f922:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    f926:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    f928:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    f92c:	eba3 030a 	sub.w	r3, r3, sl
    f930:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    f934:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    f938:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    f93a:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    f93e:	d102      	bne.n	f946 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    f940:	2013      	movs	r0, #19
    f942:	f00b ff33 	bl	1b7ac <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    f946:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    f94a:	1aab      	subs	r3, r5, r2
    f94c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    f950:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    f954:	bf88      	it	hi
    f956:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f958:	f8c4 9000 	str.w	r9, [r4]
    f95c:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    f95e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    f962:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    f966:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    f96a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    f96e:	459a      	cmp	sl, r3
    f970:	d006      	beq.n	f980 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    f972:	1aeb      	subs	r3, r5, r3
    f974:	3b02      	subs	r3, #2
    f976:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    f97a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    f97e:	d801      	bhi.n	f984 <set_absolute_alarm+0x90>
}
    f980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    f984:	462b      	mov	r3, r5
    f986:	e7cf      	b.n	f928 <set_absolute_alarm+0x34>
    f988:	40015000 	.word	0x40015000

0000f98c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    f98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    f98e:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f990:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f992:	4e0f      	ldr	r6, [pc, #60]	; (f9d0 <rtc_nrf_isr+0x44>)
    f994:	4b0f      	ldr	r3, [pc, #60]	; (f9d4 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
    f996:	4a10      	ldr	r2, [pc, #64]	; (f9d8 <rtc_nrf_isr+0x4c>)
    f998:	4618      	mov	r0, r3
    f99a:	681d      	ldr	r5, [r3, #0]
    f99c:	b104      	cbz	r4, f9a0 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    f99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f9a0:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    f9a4:	03c9      	lsls	r1, r1, #15
    f9a6:	d5fa      	bpl.n	f99e <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f9a8:	6831      	ldr	r1, [r6, #0]
    f9aa:	2900      	cmp	r1, #0
    f9ac:	d0f7      	beq.n	f99e <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f9ae:	6034      	str	r4, [r6, #0]
    f9b0:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    f9b2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    f9b6:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    f9ba:	2401      	movs	r4, #1
    return p_reg->CC[ch];
    f9bc:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
    f9c0:	b125      	cbz	r5, f9cc <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
    f9c2:	2000      	movs	r0, #0
    f9c4:	685a      	ldr	r2, [r3, #4]
    f9c6:	601f      	str	r7, [r3, #0]
    f9c8:	47a8      	blx	r5
    f9ca:	e7e3      	b.n	f994 <rtc_nrf_isr+0x8>
    f9cc:	6005      	str	r5, [r0, #0]
}
    f9ce:	e7e6      	b.n	f99e <rtc_nrf_isr+0x12>
    f9d0:	40015140 	.word	0x40015140
    f9d4:	2001505c 	.word	0x2001505c
    f9d8:	40015000 	.word	0x40015000

0000f9dc <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    f9dc:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    f9de:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    f9e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    f9e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    f9e8:	4d0d      	ldr	r5, [pc, #52]	; (fa20 <z_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    f9ea:	2101      	movs	r1, #1
    f9ec:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    f9f0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    f9f4:	4b0b      	ldr	r3, [pc, #44]	; (fa24 <z_clock_driver_init+0x48>)
    f9f6:	2015      	movs	r0, #21
    f9f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    f9fc:	4622      	mov	r2, r4
    f9fe:	f000 f8b7 	bl	fb70 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    fa02:	2015      	movs	r0, #21
    fa04:	f000 f896 	bl	fb34 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    fa08:	2301      	movs	r3, #1
    fa0a:	4a07      	ldr	r2, [pc, #28]	; (fa28 <z_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    fa0c:	2002      	movs	r0, #2
    fa0e:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    fa10:	4a06      	ldr	r2, [pc, #24]	; (fa2c <z_clock_driver_init+0x50>)
    fa12:	602b      	str	r3, [r5, #0]
    fa14:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    fa16:	f7ff fedf 	bl	f7d8 <z_nrf_clock_control_lf_on>

	return 0;
}
    fa1a:	4620      	mov	r0, r4
    fa1c:	bd38      	pop	{r3, r4, r5, pc}
    fa1e:	bf00      	nop
    fa20:	40015000 	.word	0x40015000
    fa24:	e000e100 	.word	0xe000e100
    fa28:	40015008 	.word	0x40015008
    fa2c:	20015064 	.word	0x20015064

0000fa30 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    fa30:	4b13      	ldr	r3, [pc, #76]	; (fa80 <z_clock_set_timeout+0x50>)
    fa32:	f1b0 3fff 	cmp.w	r0, #4294967295
    fa36:	bf08      	it	eq
    fa38:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    fa3a:	3801      	subs	r0, #1
    fa3c:	2800      	cmp	r0, #0
    fa3e:	dd1c      	ble.n	fa7a <z_clock_set_timeout+0x4a>
    fa40:	4298      	cmp	r0, r3
    fa42:	bfa8      	it	ge
    fa44:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    fa46:	4b0f      	ldr	r3, [pc, #60]	; (fa84 <z_clock_set_timeout+0x54>)
    fa48:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    fa4c:	4b0e      	ldr	r3, [pc, #56]	; (fa88 <z_clock_set_timeout+0x58>)
    fa4e:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    fa50:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    fa52:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    fa56:	bf18      	it	ne
    fa58:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
    fa5a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    fa5e:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
    fa60:	4a0a      	ldr	r2, [pc, #40]	; (fa8c <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    fa62:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    fa64:	480a      	ldr	r0, [pc, #40]	; (fa90 <z_clock_set_timeout+0x60>)
    fa66:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    fa68:	2000      	movs	r0, #0
    fa6a:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    fa6c:	4a04      	ldr	r2, [pc, #16]	; (fa80 <z_clock_set_timeout+0x50>)
    fa6e:	4293      	cmp	r3, r2
    fa70:	bf94      	ite	ls
    fa72:	18c9      	addls	r1, r1, r3
    fa74:	1889      	addhi	r1, r1, r2
    fa76:	f7ff bf3d 	b.w	f8f4 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    fa7a:	2000      	movs	r0, #0
    fa7c:	e7e3      	b.n	fa46 <z_clock_set_timeout+0x16>
    fa7e:	bf00      	nop
    fa80:	007fffff 	.word	0x007fffff
    fa84:	40015000 	.word	0x40015000
    fa88:	20015068 	.word	0x20015068
    fa8c:	2001505c 	.word	0x2001505c
    fa90:	0000f8dd 	.word	0x0000f8dd

0000fa94 <z_clock_elapsed>:
	__asm__ volatile(
    fa94:	f04f 0220 	mov.w	r2, #32
    fa98:	f3ef 8311 	mrs	r3, BASEPRI
    fa9c:	f382 8811 	msr	BASEPRI, r2
    faa0:	f3bf 8f6f 	isb	sy
    faa4:	4a06      	ldr	r2, [pc, #24]	; (fac0 <z_clock_elapsed+0x2c>)
    faa6:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    faaa:	4a06      	ldr	r2, [pc, #24]	; (fac4 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    faac:	6812      	ldr	r2, [r2, #0]
    faae:	1a80      	subs	r0, r0, r2
    fab0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    fab4:	f383 8811 	msr	BASEPRI, r3
    fab8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    fabc:	4770      	bx	lr
    fabe:	bf00      	nop
    fac0:	40015000 	.word	0x40015000
    fac4:	20015068 	.word	0x20015068

0000fac8 <z_timer_cycle_get_32>:
	__asm__ volatile(
    fac8:	f04f 0320 	mov.w	r3, #32
    facc:	f3ef 8211 	mrs	r2, BASEPRI
    fad0:	f383 8811 	msr	BASEPRI, r3
    fad4:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    fad8:	4906      	ldr	r1, [pc, #24]	; (faf4 <z_timer_cycle_get_32+0x2c>)
    fada:	4b07      	ldr	r3, [pc, #28]	; (faf8 <z_timer_cycle_get_32+0x30>)
    fadc:	6808      	ldr	r0, [r1, #0]
    fade:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    fae2:	f382 8811 	msr	BASEPRI, r2
    fae6:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    faea:	1a1b      	subs	r3, r3, r0
    faec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    faf0:	4418      	add	r0, r3
    faf2:	4770      	bx	lr
    faf4:	20015068 	.word	0x20015068
    faf8:	40015000 	.word	0x40015000

0000fafc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    fafc:	4a0a      	ldr	r2, [pc, #40]	; (fb28 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    fafe:	490b      	ldr	r1, [pc, #44]	; (fb2c <arch_swap+0x30>)
	_current->arch.basepri = key;
    fb00:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    fb02:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    fb04:	67d8      	str	r0, [r3, #124]	; 0x7c
	_current->arch.swap_return_value = _k_neg_eagain;
    fb06:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    fb0a:	4909      	ldr	r1, [pc, #36]	; (fb30 <arch_swap+0x34>)
    fb0c:	684b      	ldr	r3, [r1, #4]
    fb0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    fb12:	604b      	str	r3, [r1, #4]
    fb14:	2300      	movs	r3, #0
    fb16:	f383 8811 	msr	BASEPRI, r3
    fb1a:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    fb1e:	6893      	ldr	r3, [r2, #8]
}
    fb20:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    fb24:	4770      	bx	lr
    fb26:	bf00      	nop
    fb28:	20015658 	.word	0x20015658
    fb2c:	0001c548 	.word	0x0001c548
    fb30:	e000ed00 	.word	0xe000ed00

0000fb34 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    fb34:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    fb36:	2b00      	cmp	r3, #0
    fb38:	db08      	blt.n	fb4c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fb3a:	2201      	movs	r2, #1
    fb3c:	f000 001f 	and.w	r0, r0, #31
    fb40:	fa02 f000 	lsl.w	r0, r2, r0
    fb44:	4a02      	ldr	r2, [pc, #8]	; (fb50 <arch_irq_enable+0x1c>)
    fb46:	095b      	lsrs	r3, r3, #5
    fb48:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    fb4c:	4770      	bx	lr
    fb4e:	bf00      	nop
    fb50:	e000e100 	.word	0xe000e100

0000fb54 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    fb54:	4b05      	ldr	r3, [pc, #20]	; (fb6c <arch_irq_is_enabled+0x18>)
    fb56:	0942      	lsrs	r2, r0, #5
    fb58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    fb5c:	2301      	movs	r3, #1
    fb5e:	f000 001f 	and.w	r0, r0, #31
    fb62:	fa03 f000 	lsl.w	r0, r3, r0
}
    fb66:	4010      	ands	r0, r2
    fb68:	4770      	bx	lr
    fb6a:	bf00      	nop
    fb6c:	e000e100 	.word	0xe000e100

0000fb70 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    fb70:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    fb72:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    fb74:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb78:	bfac      	ite	ge
    fb7a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb7e:	4b06      	ldrlt	r3, [pc, #24]	; (fb98 <z_arm_irq_priority_set+0x28>)
    fb80:	ea4f 1141 	mov.w	r1, r1, lsl #5
    fb84:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb86:	bfab      	itete	ge
    fb88:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb8c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb90:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb94:	5419      	strblt	r1, [r3, r0]
}
    fb96:	4770      	bx	lr
    fb98:	e000ed14 	.word	0xe000ed14

0000fb9c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    fb9c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    fb9e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    fba0:	4b04      	ldr	r3, [pc, #16]	; (fbb4 <_arch_isr_direct_pm+0x18>)
    fba2:	6a58      	ldr	r0, [r3, #36]	; 0x24
    fba4:	b118      	cbz	r0, fbae <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    fba6:	2200      	movs	r2, #0
    fba8:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
    fbaa:	f00b fbde 	bl	1b36a <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    fbae:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    fbb0:	bd08      	pop	{r3, pc}
    fbb2:	bf00      	nop
    fbb4:	20015658 	.word	0x20015658

0000fbb8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    fbb8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    fbbc:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    fbbe:	490c      	ldr	r1, [pc, #48]	; (fbf0 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
    fbc0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    fbc4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    fbc6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    fbca:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    fbce:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    fbd0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    fbd4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    fbd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    fbdc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    fbe0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    fbe2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    fbe4:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    fbe6:	67c3      	str	r3, [r0, #124]	; 0x7c

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
    fbe8:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    fbec:	4770      	bx	lr
    fbee:	bf00      	nop
    fbf0:	00018591 	.word	0x00018591

0000fbf4 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    fbf4:	b508      	push	{r3, lr}
    fbf6:	4604      	mov	r4, r0
    fbf8:	460e      	mov	r6, r1
    fbfa:	4615      	mov	r5, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    fbfc:	2300      	movs	r3, #0
    fbfe:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    fc02:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    fc06:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    fc0a:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    fc0e:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
    fc12:	f000 fbef 	bl	103f4 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    fc16:	4b09      	ldr	r3, [pc, #36]	; (fc3c <arch_switch_to_main_thread+0x48>)
    fc18:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    fc1a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    fc1c:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    fc20:	4628      	mov	r0, r5
    fc22:	f386 8809 	msr	PSP, r6
    fc26:	2100      	movs	r1, #0
    fc28:	b663      	cpsie	if
    fc2a:	f381 8811 	msr	BASEPRI, r1
    fc2e:	f3bf 8f6f 	isb	sy
    fc32:	2200      	movs	r2, #0
    fc34:	2300      	movs	r3, #0
    fc36:	f008 fcab 	bl	18590 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    fc3a:	bf00      	nop
    fc3c:	20015658 	.word	0x20015658

0000fc40 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    fc40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fc44:	4606      	mov	r6, r0

	if (esf != NULL) {
    fc46:	460d      	mov	r5, r1
{
    fc48:	b08b      	sub	sp, #44	; 0x2c
	if (esf != NULL) {
    fc4a:	2900      	cmp	r1, #0
    fc4c:	d054      	beq.n	fcf8 <z_arm_fatal_error+0xb8>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    fc4e:	4b2e      	ldr	r3, [pc, #184]	; (fd08 <z_arm_fatal_error+0xc8>)
    fc50:	4c2e      	ldr	r4, [pc, #184]	; (fd0c <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    fc52:	482f      	ldr	r0, [pc, #188]	; (fd10 <z_arm_fatal_error+0xd0>)
    fc54:	1ae4      	subs	r4, r4, r3
    fc56:	08e4      	lsrs	r4, r4, #3
    fc58:	01a4      	lsls	r4, r4, #6
    fc5a:	f044 0401 	orr.w	r4, r4, #1
    fc5e:	f8ad 4000 	strh.w	r4, [sp]
    fc62:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    fc66:	6809      	ldr	r1, [r1, #0]
    fc68:	f009 f809 	bl	18c7e <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    fc6c:	f8ad 4000 	strh.w	r4, [sp]
    fc70:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    fc74:	68e9      	ldr	r1, [r5, #12]
    fc76:	4827      	ldr	r0, [pc, #156]	; (fd14 <z_arm_fatal_error+0xd4>)
    fc78:	f009 f801 	bl	18c7e <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    fc7c:	4622      	mov	r2, r4
    fc7e:	69e9      	ldr	r1, [r5, #28]
    fc80:	4825      	ldr	r0, [pc, #148]	; (fd18 <z_arm_fatal_error+0xd8>)
    fc82:	f008 ffcc 	bl	18c1e <log_1>
	for (int i = 0; i < 16; i += 4) {
    fc86:	46a8      	mov	r8, r5
    fc88:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    fc8a:	f8df 9098 	ldr.w	r9, [pc, #152]	; fd24 <z_arm_fatal_error+0xe4>
    fc8e:	edd8 7a08 	vldr	s15, [r8, #32]
    fc92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fc96:	edcd 7a03 	vstr	s15, [sp, #12]
    fc9a:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
    fc9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fca2:	edcd 7a05 	vstr	s15, [sp, #20]
    fca6:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
    fcaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fcae:	edcd 7a07 	vstr	s15, [sp, #28]
    fcb2:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
    fcb6:	2208      	movs	r2, #8
    fcb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fcbc:	1c7b      	adds	r3, r7, #1
    fcbe:	9304      	str	r3, [sp, #16]
    fcc0:	1cbb      	adds	r3, r7, #2
    fcc2:	9306      	str	r3, [sp, #24]
    fcc4:	1cfb      	adds	r3, r7, #3
    fcc6:	9702      	str	r7, [sp, #8]
    fcc8:	9308      	str	r3, [sp, #32]
    fcca:	4648      	mov	r0, r9
    fccc:	4623      	mov	r3, r4
    fcce:	eb0d 0102 	add.w	r1, sp, r2
	for (int i = 0; i < 16; i += 4) {
    fcd2:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    fcd4:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    fcd8:	f008 fff0 	bl	18cbc <log_n>
	for (int i = 0; i < 16; i += 4) {
    fcdc:	2f10      	cmp	r7, #16
    fcde:	f108 0810 	add.w	r8, r8, #16
    fce2:	d1d4      	bne.n	fc8e <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    fce4:	4622      	mov	r2, r4
    fce6:	6e29      	ldr	r1, [r5, #96]	; 0x60
    fce8:	480c      	ldr	r0, [pc, #48]	; (fd1c <z_arm_fatal_error+0xdc>)
    fcea:	f008 ff98 	bl	18c1e <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    fcee:	4622      	mov	r2, r4
    fcf0:	69a9      	ldr	r1, [r5, #24]
    fcf2:	480b      	ldr	r0, [pc, #44]	; (fd20 <z_arm_fatal_error+0xe0>)
    fcf4:	f008 ff93 	bl	18c1e <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    fcf8:	4629      	mov	r1, r5
    fcfa:	4630      	mov	r0, r6
    fcfc:	f006 fc74 	bl	165e8 <z_fatal_error>
}
    fd00:	b00b      	add	sp, #44	; 0x2c
    fd02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fd06:	bf00      	nop
    fd08:	0001c0d4 	.word	0x0001c0d4
    fd0c:	0001c134 	.word	0x0001c134
    fd10:	0001ca2e 	.word	0x0001ca2e
    fd14:	0001ca5d 	.word	0x0001ca5d
    fd18:	0001ca8c 	.word	0x0001ca8c
    fd1c:	0001cade 	.word	0x0001cade
    fd20:	0001caed 	.word	0x0001caed
    fd24:	0001ca9b 	.word	0x0001ca9b

0000fd28 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    fd28:	4a14      	ldr	r2, [pc, #80]	; (fd7c <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    fd2a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    fd2c:	4b14      	ldr	r3, [pc, #80]	; (fd80 <z_arm_prep_c+0x58>)
    fd2e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    fd32:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    fd34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fd38:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    fd3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    fd40:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    fd44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    fd48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    fd4c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    fd50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    fd54:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    fd58:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    fd5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fd60:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    fd64:	2300      	movs	r3, #0
    fd66:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    fd6a:	f006 fccf 	bl	1670c <z_bss_zero>
	z_data_copy();
    fd6e:	f007 fcb3 	bl	176d8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    fd72:	f000 fb11 	bl	10398 <z_arm_interrupt_init>
	z_cstart();
    fd76:	f006 fced 	bl	16754 <z_cstart>
    fd7a:	bf00      	nop
    fd7c:	0000c000 	.word	0x0000c000
    fd80:	e000ed00 	.word	0xe000ed00

0000fd84 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    fd84:	4929      	ldr	r1, [pc, #164]	; (fe2c <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    fd86:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    fd88:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    fd8c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    fd8e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    fd92:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    fd96:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    fd9a:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    fd9e:	d004      	beq.n	fdaa <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    fda0:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    fda4:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    fda8:	e007      	b.n	fdba <out_fp_endif>

0000fdaa <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    fdaa:	f102 0084 	add.w	r0, r2, #132	; 0x84
    vstmia r0, {s16-s31}
    fdae:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    fdb2:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    fdb6:	f050 0004 	orrs.w	r0, r0, #4

0000fdba <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    fdba:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    fdbe:	2020      	movs	r0, #32
    msr BASEPRI, r0
    fdc0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    fdc4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    fdc8:	4f19      	ldr	r7, [pc, #100]	; (fe30 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    fdca:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    fdce:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    fdd0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    fdd2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    fdd4:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
    fdd6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    fdd8:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    fdda:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    fdde:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    fde2:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    fde6:	d105      	bne.n	fdf4 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    fde8:	2300      	movs	r3, #0
    vmsr fpscr, r3
    fdea:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    fdee:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    fdf2:	e005      	b.n	fe00 <in_fp_endif>

0000fdf4 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    fdf4:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    fdf8:	f102 0084 	add.w	r0, r2, #132	; 0x84
    vldmia r0, {s16-s31}
    fdfc:	ec90 8a10 	vldmia	r0, {s16-s31}

0000fe00 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    fe00:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    fe04:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    fe08:	f383 8814 	msr	CONTROL, r3
    isb
    fe0c:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    fe10:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    fe14:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    fe18:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    fe1c:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    fe20:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    fe22:	f009 fac8 	bl	193b6 <configure_builtin_stack_guard>
    pop {r2, lr}
    fe26:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    fe2a:	4770      	bx	lr
    ldr r1, =_kernel
    fe2c:	20015658 	.word	0x20015658
    ldr v4, =_SCS_ICSR
    fe30:	e000ed04 	.word	0xe000ed04

0000fe34 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    fe34:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    fe38:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    fe3a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    fe3e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    fe42:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    fe44:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    fe48:	2902      	cmp	r1, #2
    beq _oops
    fe4a:	d0ff      	beq.n	fe4c <_oops>

0000fe4c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    fe4c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    fe4e:	f009 fab6 	bl	193be <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    fe52:	bd01      	pop	{r0, pc}

0000fe54 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    fe54:	4901      	ldr	r1, [pc, #4]	; (fe5c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    fe56:	2210      	movs	r2, #16
	str	r2, [r1]
    fe58:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    fe5a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    fe5c:	e000ed10 	.word	0xe000ed10

0000fe60 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    fe60:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    fe62:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    fe64:	f380 8811 	msr	BASEPRI, r0
	isb
    fe68:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    fe6c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    fe70:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    fe72:	b662      	cpsie	i
	isb
    fe74:	f3bf 8f6f 	isb	sy

	bx	lr
    fe78:	4770      	bx	lr
    fe7a:	bf00      	nop

0000fe7c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    fe7c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    fe7e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    fe80:	f381 8811 	msr	BASEPRI, r1

	wfe
    fe84:	bf20      	wfe

	msr	BASEPRI, r0
    fe86:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    fe8a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    fe8c:	4770      	bx	lr
    fe8e:	bf00      	nop

0000fe90 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    fe90:	bf30      	wfi
    b z_SysNmiOnReset
    fe92:	f7ff bffd 	b.w	fe90 <z_SysNmiOnReset>
    fe96:	bf00      	nop

0000fe98 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    fe98:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    fe9a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    fe9c:	4a0b      	ldr	r2, [pc, #44]	; (fecc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    fe9e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    fea0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    fea2:	bf1e      	ittt	ne
	movne	r1, #0
    fea4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    fea6:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    fea8:	f00b fa5f 	blne	1b36a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    feac:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    feae:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    feb2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    feb6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    feba:	4905      	ldr	r1, [pc, #20]	; (fed0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    febc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    febe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    fec0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    fec2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    fec6:	4903      	ldr	r1, [pc, #12]	; (fed4 <_isr_wrapper+0x3c>)
	bx r1
    fec8:	4708      	bx	r1
    feca:	0000      	.short	0x0000
	ldr r2, =_kernel
    fecc:	20015658 	.word	0x20015658
	ldr r1, =_sw_isr_table
    fed0:	0001bec0 	.word	0x0001bec0
	ldr r1, =z_arm_int_exit
    fed4:	0000ff1d 	.word	0x0000ff1d

0000fed8 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    fed8:	f008 fe6d 	bl	18bb6 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    fedc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    fede:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    fee2:	4808      	ldr	r0, [pc, #32]	; (ff04 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    fee4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    fee8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    feea:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    feee:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    fef2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    fef4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    fef6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    fefa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    fefe:	f7ff ff13 	bl	fd28 <z_arm_prep_c>
    ff02:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    ff04:	2001a0b0 	.word	0x2001a0b0

0000ff08 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    ff08:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    ff0c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    ff10:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    ff12:	4672      	mov	r2, lr
	bl z_arm_fault
    ff14:	f000 f94e 	bl	101b4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    ff18:	bd01      	pop	{r0, pc}
    ff1a:	bf00      	nop

0000ff1c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    ff1c:	4b04      	ldr	r3, [pc, #16]	; (ff30 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    ff1e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    ff20:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    ff22:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    ff24:	d003      	beq.n	ff2e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    ff26:	4903      	ldr	r1, [pc, #12]	; (ff34 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    ff28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    ff2c:	600a      	str	r2, [r1, #0]

0000ff2e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    ff2e:	4770      	bx	lr
	ldr r3, =_kernel
    ff30:	20015658 	.word	0x20015658
	ldr r1, =_SCS_ICSR
    ff34:	e000ed04 	.word	0xe000ed04

0000ff38 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    ff38:	b570      	push	{r4, r5, r6, lr}
    ff3a:	4b28      	ldr	r3, [pc, #160]	; (ffdc <usage_fault.isra.0+0xa4>)
    ff3c:	4c28      	ldr	r4, [pc, #160]	; (ffe0 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    ff3e:	4d29      	ldr	r5, [pc, #164]	; (ffe4 <usage_fault.isra.0+0xac>)
    ff40:	1ae4      	subs	r4, r4, r3
    ff42:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
    ff44:	01a4      	lsls	r4, r4, #6
    ff46:	f044 0601 	orr.w	r6, r4, #1
    ff4a:	4631      	mov	r1, r6
    ff4c:	4826      	ldr	r0, [pc, #152]	; (ffe8 <usage_fault.isra.0+0xb0>)
    ff4e:	f008 fe57 	bl	18c00 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    ff52:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ff54:	0193      	lsls	r3, r2, #6
    ff56:	d503      	bpl.n	ff60 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    ff58:	4631      	mov	r1, r6
    ff5a:	4824      	ldr	r0, [pc, #144]	; (ffec <usage_fault.isra.0+0xb4>)
    ff5c:	f008 fe50 	bl	18c00 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    ff60:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ff62:	01dd      	lsls	r5, r3, #7
    ff64:	d504      	bpl.n	ff70 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    ff66:	4822      	ldr	r0, [pc, #136]	; (fff0 <usage_fault.isra.0+0xb8>)
    ff68:	f044 0101 	orr.w	r1, r4, #1
    ff6c:	f008 fe48 	bl	18c00 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    ff70:	4d1c      	ldr	r5, [pc, #112]	; (ffe4 <usage_fault.isra.0+0xac>)
    ff72:	6aae      	ldr	r6, [r5, #40]	; 0x28
    ff74:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
    ff78:	d005      	beq.n	ff86 <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    ff7a:	481e      	ldr	r0, [pc, #120]	; (fff4 <usage_fault.isra.0+0xbc>)
    ff7c:	f044 0101 	orr.w	r1, r4, #1
    ff80:	f008 fe3e 	bl	18c00 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    ff84:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    ff86:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ff88:	0318      	lsls	r0, r3, #12
    ff8a:	d504      	bpl.n	ff96 <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
    ff8c:	481a      	ldr	r0, [pc, #104]	; (fff8 <usage_fault.isra.0+0xc0>)
    ff8e:	f044 0101 	orr.w	r1, r4, #1
    ff92:	f008 fe35 	bl	18c00 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    ff96:	4d13      	ldr	r5, [pc, #76]	; (ffe4 <usage_fault.isra.0+0xac>)
    ff98:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ff9a:	0351      	lsls	r1, r2, #13
    ff9c:	d504      	bpl.n	ffa8 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    ff9e:	4817      	ldr	r0, [pc, #92]	; (fffc <usage_fault.isra.0+0xc4>)
    ffa0:	f044 0101 	orr.w	r1, r4, #1
    ffa4:	f008 fe2c 	bl	18c00 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    ffa8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ffaa:	039a      	lsls	r2, r3, #14
    ffac:	d504      	bpl.n	ffb8 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    ffae:	4814      	ldr	r0, [pc, #80]	; (10000 <usage_fault.isra.0+0xc8>)
    ffb0:	f044 0101 	orr.w	r1, r4, #1
    ffb4:	f008 fe24 	bl	18c00 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    ffb8:	4d0a      	ldr	r5, [pc, #40]	; (ffe4 <usage_fault.isra.0+0xac>)
    ffba:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ffbc:	03db      	lsls	r3, r3, #15
    ffbe:	d504      	bpl.n	ffca <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    ffc0:	4810      	ldr	r0, [pc, #64]	; (10004 <usage_fault.isra.0+0xcc>)
    ffc2:	f044 0101 	orr.w	r1, r4, #1
    ffc6:	f008 fe1b 	bl	18c00 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    ffca:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    ffcc:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    ffce:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    ffd2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    ffd6:	62ab      	str	r3, [r5, #40]	; 0x28
}
    ffd8:	bd70      	pop	{r4, r5, r6, pc}
    ffda:	bf00      	nop
    ffdc:	0001c0d4 	.word	0x0001c0d4
    ffe0:	0001c134 	.word	0x0001c134
    ffe4:	e000ed00 	.word	0xe000ed00
    ffe8:	0001cb1b 	.word	0x0001cb1b
    ffec:	0001cb33 	.word	0x0001cb33
    fff0:	0001cb46 	.word	0x0001cb46
    fff4:	0001cb60 	.word	0x0001cb60
    fff8:	0001cb8a 	.word	0x0001cb8a
    fffc:	0001cba8 	.word	0x0001cba8
   10000:	0001cbcd 	.word	0x0001cbcd
   10004:	0001cbe7 	.word	0x0001cbe7

00010008 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   10008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1000c:	4b28      	ldr	r3, [pc, #160]	; (100b0 <mem_manage_fault.isra.0+0xa8>)
   1000e:	4c29      	ldr	r4, [pc, #164]	; (100b4 <mem_manage_fault.isra.0+0xac>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   10010:	4d29      	ldr	r5, [pc, #164]	; (100b8 <mem_manage_fault.isra.0+0xb0>)
   10012:	1ae4      	subs	r4, r4, r3
   10014:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   10016:	01a4      	lsls	r4, r4, #6
   10018:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1001c:	4607      	mov	r7, r0
   1001e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   10020:	4826      	ldr	r0, [pc, #152]	; (100bc <mem_manage_fault.isra.0+0xb4>)
   10022:	4641      	mov	r1, r8
   10024:	f008 fdec 	bl	18c00 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   10028:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1002a:	06d0      	lsls	r0, r2, #27
   1002c:	d503      	bpl.n	10036 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1002e:	4641      	mov	r1, r8
   10030:	4823      	ldr	r0, [pc, #140]	; (100c0 <mem_manage_fault.isra.0+0xb8>)
   10032:	f008 fde5 	bl	18c00 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   10036:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10038:	0719      	lsls	r1, r3, #28
   1003a:	d504      	bpl.n	10046 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   1003c:	4821      	ldr	r0, [pc, #132]	; (100c4 <mem_manage_fault.isra.0+0xbc>)
   1003e:	f044 0101 	orr.w	r1, r4, #1
   10042:	f008 fddd 	bl	18c00 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   10046:	4d1c      	ldr	r5, [pc, #112]	; (100b8 <mem_manage_fault.isra.0+0xb0>)
   10048:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1004a:	079a      	lsls	r2, r3, #30
   1004c:	d512      	bpl.n	10074 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   1004e:	f044 0801 	orr.w	r8, r4, #1
   10052:	4641      	mov	r1, r8
   10054:	481c      	ldr	r0, [pc, #112]	; (100c8 <mem_manage_fault.isra.0+0xc0>)
   10056:	f008 fdd3 	bl	18c00 <log_0>
		uint32_t temp = SCB->MMFAR;
   1005a:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1005c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1005e:	061b      	lsls	r3, r3, #24
   10060:	d508      	bpl.n	10074 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   10062:	4642      	mov	r2, r8
   10064:	4819      	ldr	r0, [pc, #100]	; (100cc <mem_manage_fault.isra.0+0xc4>)
   10066:	f008 fdda 	bl	18c1e <log_1>
			if (from_hard_fault) {
   1006a:	b11f      	cbz	r7, 10074 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1006c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1006e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   10072:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   10074:	4d10      	ldr	r5, [pc, #64]	; (100b8 <mem_manage_fault.isra.0+0xb0>)
   10076:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   10078:	07d0      	lsls	r0, r2, #31
   1007a:	d504      	bpl.n	10086 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   1007c:	4814      	ldr	r0, [pc, #80]	; (100d0 <mem_manage_fault.isra.0+0xc8>)
   1007e:	f044 0101 	orr.w	r1, r4, #1
   10082:	f008 fdbd 	bl	18c00 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10086:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10088:	0699      	lsls	r1, r3, #26
   1008a:	d504      	bpl.n	10096 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   1008c:	4811      	ldr	r0, [pc, #68]	; (100d4 <mem_manage_fault.isra.0+0xcc>)
   1008e:	f044 0101 	orr.w	r1, r4, #1
   10092:	f008 fdb5 	bl	18c00 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   10096:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10098:	4b07      	ldr	r3, [pc, #28]	; (100b8 <mem_manage_fault.isra.0+0xb0>)
   1009a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1009c:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1009e:	bf58      	it	pl
   100a0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   100a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   100a4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   100a8:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   100aa:	7030      	strb	r0, [r6, #0]
}
   100ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   100b0:	0001c0d4 	.word	0x0001c0d4
   100b4:	0001c134 	.word	0x0001c134
   100b8:	e000ed00 	.word	0xe000ed00
   100bc:	0001cc12 	.word	0x0001cc12
   100c0:	0001cc28 	.word	0x0001cc28
   100c4:	0001cc5b 	.word	0x0001cc5b
   100c8:	0001cc6e 	.word	0x0001cc6e
   100cc:	0001cc86 	.word	0x0001cc86
   100d0:	0001cc9c 	.word	0x0001cc9c
   100d4:	0001ccbb 	.word	0x0001ccbb

000100d8 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   100d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   100dc:	4b2a      	ldr	r3, [pc, #168]	; (10188 <bus_fault.isra.0+0xb0>)
   100de:	4c2b      	ldr	r4, [pc, #172]	; (1018c <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   100e0:	4d2b      	ldr	r5, [pc, #172]	; (10190 <bus_fault.isra.0+0xb8>)
   100e2:	1ae4      	subs	r4, r4, r3
   100e4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   100e6:	01a4      	lsls	r4, r4, #6
   100e8:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   100ec:	4607      	mov	r7, r0
   100ee:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   100f0:	4828      	ldr	r0, [pc, #160]	; (10194 <bus_fault.isra.0+0xbc>)
   100f2:	4641      	mov	r1, r8
   100f4:	f008 fd84 	bl	18c00 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   100f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   100fa:	04d1      	lsls	r1, r2, #19
   100fc:	d503      	bpl.n	10106 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   100fe:	4641      	mov	r1, r8
   10100:	4825      	ldr	r0, [pc, #148]	; (10198 <bus_fault.isra.0+0xc0>)
   10102:	f008 fd7d 	bl	18c00 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   10106:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10108:	051a      	lsls	r2, r3, #20
   1010a:	d504      	bpl.n	10116 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   1010c:	4823      	ldr	r0, [pc, #140]	; (1019c <bus_fault.isra.0+0xc4>)
   1010e:	f044 0101 	orr.w	r1, r4, #1
   10112:	f008 fd75 	bl	18c00 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   10116:	4d1e      	ldr	r5, [pc, #120]	; (10190 <bus_fault.isra.0+0xb8>)
   10118:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1011a:	059b      	lsls	r3, r3, #22
   1011c:	d512      	bpl.n	10144 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   1011e:	f044 0801 	orr.w	r8, r4, #1
   10122:	4641      	mov	r1, r8
   10124:	481e      	ldr	r0, [pc, #120]	; (101a0 <bus_fault.isra.0+0xc8>)
   10126:	f008 fd6b 	bl	18c00 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   1012a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1012c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1012e:	0418      	lsls	r0, r3, #16
   10130:	d508      	bpl.n	10144 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   10132:	4642      	mov	r2, r8
   10134:	481b      	ldr	r0, [pc, #108]	; (101a4 <bus_fault.isra.0+0xcc>)
   10136:	f008 fd72 	bl	18c1e <log_1>
			if (from_hard_fault) {
   1013a:	b11f      	cbz	r7, 10144 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1013c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1013e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   10142:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   10144:	4d12      	ldr	r5, [pc, #72]	; (10190 <bus_fault.isra.0+0xb8>)
   10146:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10148:	0559      	lsls	r1, r3, #21
   1014a:	d504      	bpl.n	10156 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   1014c:	4816      	ldr	r0, [pc, #88]	; (101a8 <bus_fault.isra.0+0xd0>)
   1014e:	f044 0101 	orr.w	r1, r4, #1
   10152:	f008 fd55 	bl	18c00 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   10156:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10158:	05da      	lsls	r2, r3, #23
   1015a:	d50d      	bpl.n	10178 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   1015c:	4813      	ldr	r0, [pc, #76]	; (101ac <bus_fault.isra.0+0xd4>)
   1015e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10162:	f008 fd4d 	bl	18c00 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   10166:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10168:	4a09      	ldr	r2, [pc, #36]	; (10190 <bus_fault.isra.0+0xb8>)
   1016a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1016c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   10170:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   10172:	7030      	strb	r0, [r6, #0]
}
   10174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   10178:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1017a:	049b      	lsls	r3, r3, #18
   1017c:	d5f3      	bpl.n	10166 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1017e:	480c      	ldr	r0, [pc, #48]	; (101b0 <bus_fault.isra.0+0xd8>)
   10180:	f044 0101 	orr.w	r1, r4, #1
   10184:	e7ed      	b.n	10162 <bus_fault.isra.0+0x8a>
   10186:	bf00      	nop
   10188:	0001c0d4 	.word	0x0001c0d4
   1018c:	0001c134 	.word	0x0001c134
   10190:	e000ed00 	.word	0xe000ed00
   10194:	0001ccea 	.word	0x0001ccea
   10198:	0001cd00 	.word	0x0001cd00
   1019c:	0001cc5b 	.word	0x0001cc5b
   101a0:	0001cd11 	.word	0x0001cd11
   101a4:	0001cd2a 	.word	0x0001cd2a
   101a8:	0001cd3f 	.word	0x0001cd3f
   101ac:	0001cd5a 	.word	0x0001cd5a
   101b0:	0001ccbb 	.word	0x0001ccbb

000101b4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   101b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   101b8:	4b5a      	ldr	r3, [pc, #360]	; (10324 <z_arm_fault+0x170>)
{
   101ba:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   101bc:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   101c0:	460f      	mov	r7, r1
   101c2:	4614      	mov	r4, r2
   101c4:	2500      	movs	r5, #0
   101c6:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   101c8:	f3c8 0608 	ubfx	r6, r8, #0, #9
   101cc:	f385 8811 	msr	BASEPRI, r5
   101d0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   101d4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   101d8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   101dc:	d123      	bne.n	10226 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   101de:	07d0      	lsls	r0, r2, #31
   101e0:	d421      	bmi.n	10226 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   101e2:	0651      	lsls	r1, r2, #25
   101e4:	d403      	bmi.n	101ee <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   101e6:	0722      	lsls	r2, r4, #28
   101e8:	d40e      	bmi.n	10208 <z_arm_fault+0x54>
			*nested_exc = true;
   101ea:	2501      	movs	r5, #1
   101ec:	e00e      	b.n	1020c <z_arm_fault+0x58>
   101ee:	494e      	ldr	r1, [pc, #312]	; (10328 <z_arm_fault+0x174>)
   101f0:	4b4e      	ldr	r3, [pc, #312]	; (1032c <z_arm_fault+0x178>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   101f2:	484f      	ldr	r0, [pc, #316]	; (10330 <z_arm_fault+0x17c>)
   101f4:	1a5b      	subs	r3, r3, r1
   101f6:	08db      	lsrs	r3, r3, #3
   101f8:	019b      	lsls	r3, r3, #6
   101fa:	f043 0101 	orr.w	r1, r3, #1
   101fe:	f008 fcff 	bl	18c00 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   10202:	f014 0504 	ands.w	r5, r4, #4
   10206:	d001      	beq.n	1020c <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   10208:	46b9      	mov	r9, r7
	*nested_exc = false;
   1020a:	2500      	movs	r5, #0
	*recoverable = false;
   1020c:	2300      	movs	r3, #0
   1020e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   10212:	1ef3      	subs	r3, r6, #3
   10214:	2b09      	cmp	r3, #9
   10216:	d86c      	bhi.n	102f2 <z_arm_fault+0x13e>
   10218:	e8df f003 	tbb	[pc, r3]
   1021c:	3e5e5a07 	.word	0x3e5e5a07
   10220:	6b6b6b6b 	.word	0x6b6b6b6b
   10224:	626b      	.short	0x626b
		return NULL;
   10226:	46a9      	mov	r9, r5
   10228:	e7f0      	b.n	1020c <z_arm_fault+0x58>
	*recoverable = false;
   1022a:	f04f 0800 	mov.w	r8, #0
   1022e:	4b3e      	ldr	r3, [pc, #248]	; (10328 <z_arm_fault+0x174>)
   10230:	4e3e      	ldr	r6, [pc, #248]	; (1032c <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   10232:	4840      	ldr	r0, [pc, #256]	; (10334 <z_arm_fault+0x180>)
   10234:	1af6      	subs	r6, r6, r3
   10236:	08f6      	lsrs	r6, r6, #3
   10238:	01b6      	lsls	r6, r6, #6
   1023a:	f046 0601 	orr.w	r6, r6, #1
   1023e:	4631      	mov	r1, r6
   10240:	f008 fcde 	bl	18c00 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10244:	4b37      	ldr	r3, [pc, #220]	; (10324 <z_arm_fault+0x170>)
	*recoverable = false;
   10246:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1024a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1024c:	f014 0402 	ands.w	r4, r4, #2
   10250:	d005      	beq.n	1025e <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   10252:	4631      	mov	r1, r6
   10254:	4838      	ldr	r0, [pc, #224]	; (10338 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
   10256:	f008 fcd3 	bl	18c00 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1025a:	2400      	movs	r4, #0
}
   1025c:	e01f      	b.n	1029e <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1025e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10260:	005b      	lsls	r3, r3, #1
   10262:	d51c      	bpl.n	1029e <z_arm_fault+0xea>
		PR_EXC("  Fault escalation (see below)");
   10264:	4631      	mov	r1, r6
   10266:	4835      	ldr	r0, [pc, #212]	; (1033c <z_arm_fault+0x188>)
   10268:	f008 fcca 	bl	18c00 <log_0>
		if (SCB_MMFSR != 0) {
   1026c:	4b34      	ldr	r3, [pc, #208]	; (10340 <z_arm_fault+0x18c>)
   1026e:	781b      	ldrb	r3, [r3, #0]
   10270:	b12b      	cbz	r3, 1027e <z_arm_fault+0xca>
			reason = mem_manage_fault(esf, 1, recoverable);
   10272:	2001      	movs	r0, #1
   10274:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   10278:	f7ff fec6 	bl	10008 <mem_manage_fault.isra.0>
   1027c:	e00e      	b.n	1029c <z_arm_fault+0xe8>
		} else if (SCB_BFSR != 0) {
   1027e:	4b31      	ldr	r3, [pc, #196]	; (10344 <z_arm_fault+0x190>)
   10280:	781b      	ldrb	r3, [r3, #0]
   10282:	b12b      	cbz	r3, 10290 <z_arm_fault+0xdc>
			reason = bus_fault(esf, 1, recoverable);
   10284:	2001      	movs	r0, #1
   10286:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   1028a:	f7ff ff25 	bl	100d8 <bus_fault.isra.0>
   1028e:	e005      	b.n	1029c <z_arm_fault+0xe8>
		} else if (SCB_UFSR != 0) {
   10290:	4b2d      	ldr	r3, [pc, #180]	; (10348 <z_arm_fault+0x194>)
   10292:	881b      	ldrh	r3, [r3, #0]
   10294:	b29b      	uxth	r3, r3
   10296:	b113      	cbz	r3, 1029e <z_arm_fault+0xea>
			reason = usage_fault(esf);
   10298:	f7ff fe4e 	bl	ff38 <usage_fault.isra.0>
   1029c:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1029e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   102a2:	b993      	cbnz	r3, 102ca <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   102a4:	2268      	movs	r2, #104	; 0x68
   102a6:	4649      	mov	r1, r9
   102a8:	a802      	add	r0, sp, #8
   102aa:	f00b fbef 	bl	1ba8c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   102ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   102b0:	b39d      	cbz	r5, 1031a <z_arm_fault+0x166>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   102b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
   102b6:	b922      	cbnz	r2, 102c2 <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   102b8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   102bc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   102c0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   102c2:	4620      	mov	r0, r4
   102c4:	a902      	add	r1, sp, #8
   102c6:	f7ff fcbb 	bl	fc40 <z_arm_fatal_error>
}
   102ca:	b01d      	add	sp, #116	; 0x74
   102cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   102d0:	2000      	movs	r0, #0
   102d2:	f10d 0107 	add.w	r1, sp, #7
   102d6:	e7cf      	b.n	10278 <z_arm_fault+0xc4>
		reason = bus_fault(esf, 0, recoverable);
   102d8:	2000      	movs	r0, #0
   102da:	f10d 0107 	add.w	r1, sp, #7
   102de:	e7d4      	b.n	1028a <z_arm_fault+0xd6>
   102e0:	4912      	ldr	r1, [pc, #72]	; (1032c <z_arm_fault+0x178>)
   102e2:	4b11      	ldr	r3, [pc, #68]	; (10328 <z_arm_fault+0x174>)
	PR_FAULT_INFO(
   102e4:	4819      	ldr	r0, [pc, #100]	; (1034c <z_arm_fault+0x198>)
   102e6:	1ac9      	subs	r1, r1, r3
   102e8:	08c9      	lsrs	r1, r1, #3
   102ea:	0189      	lsls	r1, r1, #6
   102ec:	f041 0101 	orr.w	r1, r1, #1
   102f0:	e7b1      	b.n	10256 <z_arm_fault+0xa2>
   102f2:	4a0d      	ldr	r2, [pc, #52]	; (10328 <z_arm_fault+0x174>)
   102f4:	4b0d      	ldr	r3, [pc, #52]	; (1032c <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** %s %d) *****",
   102f6:	4816      	ldr	r0, [pc, #88]	; (10350 <z_arm_fault+0x19c>)
   102f8:	1a9b      	subs	r3, r3, r2
   102fa:	08db      	lsrs	r3, r3, #3
   102fc:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   10300:	ea4f 1383 	mov.w	r3, r3, lsl #6
   10304:	4913      	ldr	r1, [pc, #76]	; (10354 <z_arm_fault+0x1a0>)
   10306:	f043 0301 	orr.w	r3, r3, #1
   1030a:	bf18      	it	ne
   1030c:	4601      	movne	r1, r0
   1030e:	f1a6 0210 	sub.w	r2, r6, #16
   10312:	4811      	ldr	r0, [pc, #68]	; (10358 <z_arm_fault+0x1a4>)
   10314:	f008 fc9a 	bl	18c4c <log_2>
   10318:	e79f      	b.n	1025a <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1031a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1031e:	f023 0301 	bic.w	r3, r3, #1
   10322:	e7cd      	b.n	102c0 <z_arm_fault+0x10c>
   10324:	e000ed00 	.word	0xe000ed00
   10328:	0001c0d4 	.word	0x0001c0d4
   1032c:	0001c134 	.word	0x0001c134
   10330:	0001cd72 	.word	0x0001cd72
   10334:	0001cd95 	.word	0x0001cd95
   10338:	0001cdac 	.word	0x0001cdac
   1033c:	0001cdcd 	.word	0x0001cdcd
   10340:	e000ed28 	.word	0xe000ed28
   10344:	e000ed29 	.word	0xe000ed29
   10348:	e000ed2a 	.word	0xe000ed2a
   1034c:	0001cdec 	.word	0x0001cdec
   10350:	0001ce37 	.word	0x0001ce37
   10354:	0001ce22 	.word	0x0001ce22
   10358:	0001ce50 	.word	0x0001ce50

0001035c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1035c:	4b04      	ldr	r3, [pc, #16]	; (10370 <z_arm_fault_init+0x14>)
   1035e:	695a      	ldr	r2, [r3, #20]
   10360:	f042 0210 	orr.w	r2, r2, #16
   10364:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   10366:	695a      	ldr	r2, [r3, #20]
   10368:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1036c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1036e:	4770      	bx	lr
   10370:	e000ed00 	.word	0xe000ed00

00010374 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   10374:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   10378:	4905      	ldr	r1, [pc, #20]	; (10390 <sys_arch_reboot+0x1c>)
   1037a:	4b06      	ldr	r3, [pc, #24]	; (10394 <sys_arch_reboot+0x20>)
   1037c:	68ca      	ldr	r2, [r1, #12]
   1037e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   10382:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   10384:	60cb      	str	r3, [r1, #12]
   10386:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1038a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1038c:	e7fd      	b.n	1038a <sys_arch_reboot+0x16>
   1038e:	bf00      	nop
   10390:	e000ed00 	.word	0xe000ed00
   10394:	05fa0004 	.word	0x05fa0004

00010398 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   10398:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1039a:	2120      	movs	r1, #32
   1039c:	4803      	ldr	r0, [pc, #12]	; (103ac <z_arm_interrupt_init+0x14>)
   1039e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   103a0:	3301      	adds	r3, #1
   103a2:	2b41      	cmp	r3, #65	; 0x41
   103a4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   103a8:	d1f9      	bne.n	1039e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   103aa:	4770      	bx	lr
   103ac:	e000e100 	.word	0xe000e100

000103b0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   103b0:	b508      	push	{r3, lr}
	if (_current == thread) {
   103b2:	4b0e      	ldr	r3, [pc, #56]	; (103ec <z_impl_k_thread_abort+0x3c>)
   103b4:	689b      	ldr	r3, [r3, #8]
   103b6:	4283      	cmp	r3, r0
   103b8:	d107      	bne.n	103ca <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   103ba:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   103be:	b193      	cbz	r3, 103e6 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   103c0:	4a0b      	ldr	r2, [pc, #44]	; (103f0 <z_impl_k_thread_abort+0x40>)
   103c2:	6853      	ldr	r3, [r2, #4]
   103c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   103c8:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   103ca:	f006 fe45 	bl	17058 <z_thread_single_abort>
	__asm__ volatile(
   103ce:	f04f 0320 	mov.w	r3, #32
   103d2:	f3ef 8011 	mrs	r0, BASEPRI
   103d6:	f383 8811 	msr	BASEPRI, r3
   103da:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   103de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   103e2:	f00b b8fb 	b.w	1b5dc <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   103e6:	f007 f92f 	bl	17648 <z_self_abort>
   103ea:	bf00      	nop
   103ec:	20015658 	.word	0x20015658
   103f0:	e000ed00 	.word	0xe000ed00

000103f4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   103f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   103f6:	4c09      	ldr	r4, [pc, #36]	; (1041c <z_arm_configure_static_mpu_regions+0x28>)
   103f8:	4a09      	ldr	r2, [pc, #36]	; (10420 <z_arm_configure_static_mpu_regions+0x2c>)
   103fa:	4623      	mov	r3, r4
   103fc:	2101      	movs	r1, #1
   103fe:	4809      	ldr	r0, [pc, #36]	; (10424 <z_arm_configure_static_mpu_regions+0x30>)
   10400:	f000 f938 	bl	10674 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   10404:	2300      	movs	r3, #0
   10406:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   10408:	4b07      	ldr	r3, [pc, #28]	; (10428 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1040a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1040c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1040e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   10410:	9301      	str	r3, [sp, #4]
   10412:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10414:	f000 f938 	bl	10688 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   10418:	b004      	add	sp, #16
   1041a:	bd10      	pop	{r4, pc}
   1041c:	20040000 	.word	0x20040000
   10420:	20014500 	.word	0x20014500
   10424:	0001c240 	.word	0x0001c240
   10428:	200147c8 	.word	0x200147c8

0001042c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   1042c:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1042e:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   10430:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   10432:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   10436:	f004 031f 	and.w	r3, r4, #31
   1043a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1043c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1043e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10440:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   10444:	4904      	ldr	r1, [pc, #16]	; (10458 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10446:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1044a:	f043 0301 	orr.w	r3, r3, #1
   1044e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   10450:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   10452:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   10454:	bd10      	pop	{r4, pc}
   10456:	bf00      	nop
   10458:	e000ed90 	.word	0xe000ed90

0001045c <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   1045c:	280f      	cmp	r0, #15
{
   1045e:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
   10460:	d90d      	bls.n	1047e <region_allocate_and_init+0x22>
   10462:	4b08      	ldr	r3, [pc, #32]	; (10484 <region_allocate_and_init+0x28>)
   10464:	4a08      	ldr	r2, [pc, #32]	; (10488 <region_allocate_and_init+0x2c>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   10466:	4601      	mov	r1, r0
   10468:	1ad2      	subs	r2, r2, r3
   1046a:	08d2      	lsrs	r2, r2, #3
   1046c:	0192      	lsls	r2, r2, #6
   1046e:	4807      	ldr	r0, [pc, #28]	; (1048c <region_allocate_and_init+0x30>)
   10470:	f042 0201 	orr.w	r2, r2, #1
   10474:	f008 fbd3 	bl	18c1e <log_1>
		return -EINVAL;
   10478:	f06f 0015 	mvn.w	r0, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   1047c:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   1047e:	f7ff ffd5 	bl	1042c <region_init>
	return index;
   10482:	e7fb      	b.n	1047c <region_allocate_and_init+0x20>
   10484:	0001c0d4 	.word	0x0001c0d4
   10488:	0001c11c 	.word	0x0001c11c
   1048c:	0001ce67 	.word	0x0001ce67

00010490 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   10490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10494:	4689      	mov	r9, r1
   10496:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   10498:	4606      	mov	r6, r0
   1049a:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   1049e:	4d54      	ldr	r5, [pc, #336]	; (105f0 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   104a0:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   104a2:	45c8      	cmp	r8, r9
   104a4:	da33      	bge.n	1050e <mpu_configure_regions_and_partition.constprop.0+0x7e>
		if (regions[i].size == 0U) {
   104a6:	f8d6 a004 	ldr.w	sl, [r6, #4]
   104aa:	f1ba 0f00 	cmp.w	sl, #0
   104ae:	d04d      	beq.n	1054c <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
   104b0:	f1ba 0f1f 	cmp.w	sl, #31
   104b4:	d91e      	bls.n	104f4 <mpu_configure_regions_and_partition.constprop.0+0x64>
		&&
   104b6:	f01a 0f1f 	tst.w	sl, #31
   104ba:	d11b      	bne.n	104f4 <mpu_configure_regions_and_partition.constprop.0+0x64>
		((part->start &
   104bc:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   104c0:	f01b 0f1f 	tst.w	fp, #31
   104c4:	d116      	bne.n	104f4 <mpu_configure_regions_and_partition.constprop.0+0x64>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   104c6:	4658      	mov	r0, fp
   104c8:	f008 ff9d 	bl	19406 <arm_cmse_mpu_region_get>
   104cc:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   104ce:	eb0a 000b 	add.w	r0, sl, fp
   104d2:	3801      	subs	r0, #1
   104d4:	f008 ff97 	bl	19406 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   104d8:	4287      	cmp	r7, r0
   104da:	d01c      	beq.n	10516 <mpu_configure_regions_and_partition.constprop.0+0x86>
	return -EINVAL;
   104dc:	f06f 0715 	mvn.w	r7, #21
   104e0:	4a44      	ldr	r2, [pc, #272]	; (105f4 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   104e2:	4b45      	ldr	r3, [pc, #276]	; (105f8 <mpu_configure_regions_and_partition.constprop.0+0x168>)
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   104e4:	4639      	mov	r1, r7
   104e6:	1ad2      	subs	r2, r2, r3
   104e8:	08d2      	lsrs	r2, r2, #3
   104ea:	0192      	lsls	r2, r2, #6
   104ec:	4843      	ldr	r0, [pc, #268]	; (105fc <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   104ee:	f042 0201 	orr.w	r2, r2, #1
   104f2:	e008      	b.n	10506 <mpu_configure_regions_and_partition.constprop.0+0x76>
			LOG_ERR("Partition %u: sanity check failed.", i);
   104f4:	4641      	mov	r1, r8
   104f6:	4a3f      	ldr	r2, [pc, #252]	; (105f4 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   104f8:	4b3f      	ldr	r3, [pc, #252]	; (105f8 <mpu_configure_regions_and_partition.constprop.0+0x168>)
   104fa:	4841      	ldr	r0, [pc, #260]	; (10600 <mpu_configure_regions_and_partition.constprop.0+0x170>)
   104fc:	1ad2      	subs	r2, r2, r3
   104fe:	08d2      	lsrs	r2, r2, #3
   10500:	0192      	lsls	r2, r2, #6
   10502:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   10506:	f008 fb8a 	bl	18c1e <log_1>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   1050a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1050e:	4620      	mov	r0, r4
   10510:	b005      	add	sp, #20
   10512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   10516:	f117 0f16 	cmn.w	r7, #22
   1051a:	d0e1      	beq.n	104e0 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
   1051c:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   1051e:	42bb      	cmp	r3, r7
   10520:	dbde      	blt.n	104e0 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   10522:	60af      	str	r7, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10524:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
   10526:	60af      	str	r7, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10528:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1052a:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1052e:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   10532:	e9d6 3200 	ldrd	r3, r2, [r6]
   10536:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   10538:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1053a:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   1053e:	d11a      	bne.n	10576 <mpu_configure_regions_and_partition.constprop.0+0xe6>
   10540:	45d3      	cmp	fp, sl
   10542:	d107      	bne.n	10554 <mpu_configure_regions_and_partition.constprop.0+0xc4>
			mpu_configure_region(u_reg_index, &regions[i]);
   10544:	4631      	mov	r1, r6
   10546:	b2f8      	uxtb	r0, r7
   10548:	f008 ff44 	bl	193d4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1054c:	f108 0801 	add.w	r8, r8, #1
   10550:	360c      	adds	r6, #12
   10552:	e7a6      	b.n	104a2 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   10554:	4631      	mov	r1, r6
	MPU->RNR = index;
   10556:	60af      	str	r7, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10558:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   1055a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1055e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   10562:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10564:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
   10566:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   10568:	f008 ff34 	bl	193d4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1056c:	f110 0f16 	cmn.w	r0, #22
   10570:	d0cb      	beq.n	1050a <mpu_configure_regions_and_partition.constprop.0+0x7a>
			reg_index++;
   10572:	1c44      	adds	r4, r0, #1
   10574:	e7ea      	b.n	1054c <mpu_configure_regions_and_partition.constprop.0+0xbc>
		} else if (reg_last == u_reg_last) {
   10576:	3b01      	subs	r3, #1
   10578:	45d3      	cmp	fp, sl
   1057a:	b2e0      	uxtb	r0, r4
   1057c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   10580:	60af      	str	r7, [r5, #8]
		} else if (reg_last == u_reg_last) {
   10582:	d106      	bne.n	10592 <mpu_configure_regions_and_partition.constprop.0+0x102>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10584:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   10586:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10588:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1058c:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1058e:	612b      	str	r3, [r5, #16]
			reg_index =
   10590:	e7ea      	b.n	10568 <mpu_configure_regions_and_partition.constprop.0+0xd8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10592:	6929      	ldr	r1, [r5, #16]
   10594:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   10598:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1059a:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   1059c:	4631      	mov	r1, r6
   1059e:	f008 ff19 	bl	193d4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   105a2:	f110 0f16 	cmn.w	r0, #22
   105a6:	d0b0      	beq.n	1050a <mpu_configure_regions_and_partition.constprop.0+0x7a>
	MPU->RNR = index;
   105a8:	60af      	str	r7, [r5, #8]
	attr->rbar = MPU->RBAR &
   105aa:	68ea      	ldr	r2, [r5, #12]
   105ac:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   105b0:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   105b4:	f362 0304 	bfi	r3, r2, #0, #5
   105b8:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   105bc:	692b      	ldr	r3, [r5, #16]
   105be:	f89d 2008 	ldrb.w	r2, [sp, #8]
   105c2:	085b      	lsrs	r3, r3, #1
   105c4:	f363 1247 	bfi	r2, r3, #5, #3
   105c8:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
   105cc:	e9d6 3200 	ldrd	r3, r2, [r6]
   105d0:	4413      	add	r3, r2
   105d2:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   105d4:	f023 031f 	bic.w	r3, r3, #31
   105d8:	445b      	add	r3, fp
   105da:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   105de:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   105e0:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   105e4:	4669      	mov	r1, sp
   105e6:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   105e8:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   105ea:	f7ff ff37 	bl	1045c <region_allocate_and_init>
   105ee:	e7bd      	b.n	1056c <mpu_configure_regions_and_partition.constprop.0+0xdc>
   105f0:	e000ed90 	.word	0xe000ed90
   105f4:	0001c11c 	.word	0x0001c11c
   105f8:	0001c0d4 	.word	0x0001c0d4
   105fc:	0001ceb0 	.word	0x0001ceb0
   10600:	0001ce8d 	.word	0x0001ce8d

00010604 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   10604:	2205      	movs	r2, #5
   10606:	4b03      	ldr	r3, [pc, #12]	; (10614 <arm_core_mpu_enable+0x10>)
   10608:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1060a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1060e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   10612:	4770      	bx	lr
   10614:	e000ed90 	.word	0xe000ed90

00010618 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   10618:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1061c:	2200      	movs	r2, #0
   1061e:	4b01      	ldr	r3, [pc, #4]	; (10624 <arm_core_mpu_disable+0xc>)
   10620:	605a      	str	r2, [r3, #4]
}
   10622:	4770      	bx	lr
   10624:	e000ed90 	.word	0xe000ed90

00010628 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   10628:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1062a:	4c0e      	ldr	r4, [pc, #56]	; (10664 <arm_mpu_init+0x3c>)
   1062c:	6825      	ldr	r5, [r4, #0]
   1062e:	2d10      	cmp	r5, #16
   10630:	d814      	bhi.n	1065c <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   10632:	f7ff fff1 	bl	10618 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10636:	2000      	movs	r0, #0
	MPU->MAIR0 =
   10638:	4b0b      	ldr	r3, [pc, #44]	; (10668 <arm_mpu_init+0x40>)
   1063a:	4a0c      	ldr	r2, [pc, #48]	; (1066c <arm_mpu_init+0x44>)
   1063c:	631a      	str	r2, [r3, #48]	; 0x30
   1063e:	4285      	cmp	r5, r0
   10640:	d105      	bne.n	1064e <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   10642:	4b0b      	ldr	r3, [pc, #44]	; (10670 <arm_mpu_init+0x48>)
   10644:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   10646:	f7ff ffdd 	bl	10604 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   1064a:	2000      	movs	r0, #0
}
   1064c:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1064e:	6861      	ldr	r1, [r4, #4]
   10650:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   10654:	f7ff feea 	bl	1042c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10658:	3001      	adds	r0, #1
   1065a:	e7f0      	b.n	1063e <arm_mpu_init+0x16>
		return -1;
   1065c:	f04f 30ff 	mov.w	r0, #4294967295
   10660:	e7f4      	b.n	1064c <arm_mpu_init+0x24>
   10662:	bf00      	nop
   10664:	0001c24c 	.word	0x0001c24c
   10668:	e000ed90 	.word	0xe000ed90
   1066c:	0044ffaa 	.word	0x0044ffaa
   10670:	200166b6 	.word	0x200166b6

00010674 <arm_core_mpu_configure_static_mpu_regions>:
{
   10674:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   10676:	4c03      	ldr	r4, [pc, #12]	; (10684 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   10678:	7822      	ldrb	r2, [r4, #0]
   1067a:	f7ff ff09 	bl	10490 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1067e:	7020      	strb	r0, [r4, #0]
}
   10680:	bd10      	pop	{r4, pc}
   10682:	bf00      	nop
   10684:	200166b6 	.word	0x200166b6

00010688 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   10688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1068c:	4d26      	ldr	r5, [pc, #152]	; (10728 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   1068e:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10690:	4606      	mov	r6, r0
   10692:	f04f 0800 	mov.w	r8, #0
   10696:	46ab      	mov	fp, r5
	MPU->RNR = index;
   10698:	4f24      	ldr	r7, [pc, #144]	; (1072c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1069a:	45d0      	cmp	r8, sl
   1069c:	da1b      	bge.n	106d6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   1069e:	f8d6 9004 	ldr.w	r9, [r6, #4]
   106a2:	f1b9 0f00 	cmp.w	r9, #0
   106a6:	d039      	beq.n	1071c <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   106a8:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   106aa:	4608      	mov	r0, r1
   106ac:	9101      	str	r1, [sp, #4]
   106ae:	f008 feaa 	bl	19406 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   106b2:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   106b4:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   106b6:	eb09 0001 	add.w	r0, r9, r1
   106ba:	3801      	subs	r0, #1
   106bc:	f008 fea3 	bl	19406 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   106c0:	4284      	cmp	r4, r0
   106c2:	f04f 0214 	mov.w	r2, #20
   106c6:	4b1a      	ldr	r3, [pc, #104]	; (10730 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   106c8:	d008      	beq.n	106dc <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   106ca:	f06f 0315 	mvn.w	r3, #21
   106ce:	fb02 f808 	mul.w	r8, r2, r8
   106d2:	f84b 3008 	str.w	r3, [fp, r8]
}
   106d6:	b003      	add	sp, #12
   106d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   106dc:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   106e0:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   106e2:	d0f8      	beq.n	106d6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   106e4:	7819      	ldrb	r1, [r3, #0]
   106e6:	42a1      	cmp	r1, r4
   106e8:	ddf5      	ble.n	106d6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   106ea:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   106ee:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   106f0:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   106f2:	68fc      	ldr	r4, [r7, #12]
   106f4:	f100 0108 	add.w	r1, r0, #8
   106f8:	7b00      	ldrb	r0, [r0, #12]
   106fa:	f364 0004 	bfi	r0, r4, #0, #5
   106fe:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10700:	6938      	ldr	r0, [r7, #16]
   10702:	790c      	ldrb	r4, [r1, #4]
   10704:	0840      	lsrs	r0, r0, #1
   10706:	f360 1447 	bfi	r4, r0, #5, #3
   1070a:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1070c:	68f9      	ldr	r1, [r7, #12]
   1070e:	f021 011f 	bic.w	r1, r1, #31
   10712:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   10714:	6939      	ldr	r1, [r7, #16]
   10716:	f021 011f 	bic.w	r1, r1, #31
   1071a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1071c:	f108 0801 	add.w	r8, r8, #1
   10720:	3514      	adds	r5, #20
   10722:	360c      	adds	r6, #12
   10724:	e7b9      	b.n	1069a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   10726:	bf00      	nop
   10728:	2001506c 	.word	0x2001506c
   1072c:	e000ed90 	.word	0xe000ed90
   10730:	200166b6 	.word	0x200166b6

00010734 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   10734:	4b01      	ldr	r3, [pc, #4]	; (1073c <__stdout_hook_install+0x8>)
   10736:	6018      	str	r0, [r3, #0]
}
   10738:	4770      	bx	lr
   1073a:	bf00      	nop
   1073c:	20014508 	.word	0x20014508

00010740 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   10740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10742:	460d      	mov	r5, r1
   10744:	4f09      	ldr	r7, [pc, #36]	; (1076c <z_impl_zephyr_write_stdout+0x2c>)
   10746:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   10748:	f1c0 0401 	rsb	r4, r0, #1
   1074c:	19a3      	adds	r3, r4, r6
   1074e:	429d      	cmp	r5, r3
   10750:	dc01      	bgt.n	10756 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   10752:	4628      	mov	r0, r5
   10754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   10756:	7873      	ldrb	r3, [r6, #1]
   10758:	2b0a      	cmp	r3, #10
   1075a:	d102      	bne.n	10762 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   1075c:	200d      	movs	r0, #13
   1075e:	683b      	ldr	r3, [r7, #0]
   10760:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   10762:	683b      	ldr	r3, [r7, #0]
   10764:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   10768:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   1076a:	e7ef      	b.n	1074c <z_impl_zephyr_write_stdout+0xc>
   1076c:	20014508 	.word	0x20014508

00010770 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   10770:	b510      	push	{r4, lr}
   10772:	4604      	mov	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   10774:	f04f 32ff 	mov.w	r2, #4294967295
   10778:	f04f 33ff 	mov.w	r3, #4294967295
   1077c:	480a      	ldr	r0, [pc, #40]	; (107a8 <_sbrk+0x38>)
   1077e:	f007 fef8 	bl	18572 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   10782:	490a      	ldr	r1, [pc, #40]	; (107ac <_sbrk+0x3c>)
   10784:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   10786:	18e0      	adds	r0, r4, r3
   10788:	4c09      	ldr	r4, [pc, #36]	; (107b0 <_sbrk+0x40>)
   1078a:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   1078e:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   10792:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   10794:	bf2e      	itee	cs
   10796:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1079a:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   1079c:	6008      	strcc	r0, [r1, #0]
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   1079e:	4802      	ldr	r0, [pc, #8]	; (107a8 <_sbrk+0x38>)
   107a0:	f007 fee2 	bl	18568 <sys_sem_give>

	return ret;
}
   107a4:	4620      	mov	r0, r4
   107a6:	bd10      	pop	{r4, pc}
   107a8:	20014778 	.word	0x20014778
   107ac:	20015080 	.word	0x20015080
   107b0:	2001b2c8 	.word	0x2001b2c8

000107b4 <__chk_fail>:
	return z_impl_zephyr_write_stdout(buf, nbytes);
   107b4:	211d      	movs	r1, #29
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   107b6:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   107b8:	4804      	ldr	r0, [pc, #16]	; (107cc <__chk_fail+0x18>)
   107ba:	f7ff ffc1 	bl	10740 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   107be:	4040      	eors	r0, r0
   107c0:	f380 8811 	msr	BASEPRI, r0
   107c4:	f04f 0003 	mov.w	r0, #3
   107c8:	df02      	svc	2
	CODE_UNREACHABLE;
   107ca:	bf00      	nop
   107cc:	0001ced3 	.word	0x0001ced3

000107d0 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   107d0:	b538      	push	{r3, r4, r5, lr}
   107d2:	4c08      	ldr	r4, [pc, #32]	; (107f4 <net_if_init+0x24>)

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   107d4:	4d08      	ldr	r5, [pc, #32]	; (107f8 <net_if_init+0x28>)
   107d6:	42ac      	cmp	r4, r5
   107d8:	4620      	mov	r0, r4
   107da:	d300      	bcc.n	107de <net_if_init+0xe>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   107dc:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   107de:	6803      	ldr	r3, [r0, #0]
   107e0:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   107e2:	681b      	ldr	r3, [r3, #0]
   107e4:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   107e6:	2b00      	cmp	r3, #0
   107e8:	d0f5      	beq.n	107d6 <net_if_init+0x6>
   107ea:	681b      	ldr	r3, [r3, #0]
   107ec:	2b00      	cmp	r3, #0
   107ee:	d0f2      	beq.n	107d6 <net_if_init+0x6>
	api->init(iface);
   107f0:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   107f2:	e7f0      	b.n	107d6 <net_if_init+0x6>
   107f4:	200147a8 	.word	0x200147a8
   107f8:	200147ac 	.word	0x200147ac

000107fc <net_if_post_init>:

void net_if_post_init(void)
{
   107fc:	b538      	push	{r3, r4, r5, lr}
   107fe:	4c08      	ldr	r4, [pc, #32]	; (10820 <net_if_post_init+0x24>)
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   10800:	4d08      	ldr	r5, [pc, #32]	; (10824 <net_if_post_init+0x28>)
   10802:	42ac      	cmp	r4, r5
   10804:	4620      	mov	r0, r4
   10806:	d300      	bcc.n	1080a <net_if_post_init+0xe>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   10808:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1080a:	6803      	ldr	r3, [r0, #0]
   1080c:	3404      	adds	r4, #4
   1080e:	330c      	adds	r3, #12
   10810:	e8d3 3faf 	lda	r3, [r3]
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   10814:	071b      	lsls	r3, r3, #28
   10816:	d4f4      	bmi.n	10802 <net_if_post_init+0x6>
			net_if_up(iface);
   10818:	f008 fe1d 	bl	19456 <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1081c:	e7f1      	b.n	10802 <net_if_post_init+0x6>
   1081e:	bf00      	nop
   10820:	200147a8 	.word	0x200147a8
   10824:	200147ac 	.word	0x200147ac

00010828 <nrf_gpio_cfg_sense_set>:

NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10828:	4a06      	ldr	r2, [pc, #24]	; (10844 <nrf_gpio_cfg_sense_set+0x1c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1082a:	f000 001f 	and.w	r0, r0, #31
   1082e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10832:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   10836:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1083a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1083e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   10842:	4770      	bx	lr
   10844:	40842500 	.word	0x40842500

00010848 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   10848:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1084a:	4b09      	ldr	r3, [pc, #36]	; (10870 <gpio_nrfx_init+0x28>)
   1084c:	781a      	ldrb	r2, [r3, #0]
   1084e:	b96a      	cbnz	r2, 1086c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   10850:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   10852:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   10854:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   10856:	2105      	movs	r1, #5
   10858:	f7ff f98a 	bl	fb70 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1085c:	2031      	movs	r0, #49	; 0x31
   1085e:	f7ff f969 	bl	fb34 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   10862:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   10866:	4b03      	ldr	r3, [pc, #12]	; (10874 <gpio_nrfx_init+0x2c>)
   10868:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1086c:	2000      	movs	r0, #0
   1086e:	bd08      	pop	{r3, pc}
   10870:	200166b7 	.word	0x200166b7
   10874:	40031000 	.word	0x40031000

00010878 <gpio_nrfx_pin_interrupt_configure>:
{
   10878:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1087c:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1087e:	6841      	ldr	r1, [r0, #4]
   10880:	f006 071f 	and.w	r7, r6, #31
   10884:	7a09      	ldrb	r1, [r1, #8]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   10886:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
   1088a:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1088e:	ea47 1741 	orr.w	r7, r7, r1, lsl #5
   10892:	d10a      	bne.n	108aa <gpio_nrfx_pin_interrupt_configure+0x32>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   10894:	4862      	ldr	r0, [pc, #392]	; (10a20 <gpio_nrfx_pin_interrupt_configure+0x1a8>)
    *p_pin = pin_number & 0x1F;
   10896:	f007 011f 	and.w	r1, r7, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1089a:	3180      	adds	r1, #128	; 0x80
   1089c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   108a0:	07c9      	lsls	r1, r1, #31
   108a2:	d508      	bpl.n	108b6 <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
   108a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   108a8:	e09d      	b.n	109e6 <gpio_nrfx_pin_interrupt_configure+0x16e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   108aa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   108ae:	f8d8 100c 	ldr.w	r1, [r8, #12]
   108b2:	f000 809b 	beq.w	109ec <gpio_nrfx_pin_interrupt_configure+0x174>
   108b6:	2101      	movs	r1, #1
   108b8:	f8d8 000c 	ldr.w	r0, [r8, #12]
   108bc:	40b1      	lsls	r1, r6
   108be:	4301      	orrs	r1, r0
   108c0:	f8c8 100c 	str.w	r1, [r8, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   108c4:	2101      	movs	r1, #1
   108c6:	f8d8 0014 	ldr.w	r0, [r8, #20]
   108ca:	40b1      	lsls	r1, r6
   108cc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   108d0:	bf0c      	ite	eq
   108d2:	4308      	orreq	r0, r1
   108d4:	4388      	bicne	r0, r1
   108d6:	f8c8 0014 	str.w	r0, [r8, #20]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   108da:	2000      	movs	r0, #0
   108dc:	f8d8 2018 	ldr.w	r2, [r8, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   108e0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   108e4:	bf0c      	ite	eq
   108e6:	430a      	orreq	r2, r1
   108e8:	438a      	bicne	r2, r1
   108ea:	f8c8 2018 	str.w	r2, [r8, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   108ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
   108f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   108f6:	4d4b      	ldr	r5, [pc, #300]	; (10a24 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
   108f8:	bf0c      	ite	eq
   108fa:	4311      	orreq	r1, r2
   108fc:	ea22 0101 	bicne.w	r1, r2, r1
   10900:	f8c8 1010 	str.w	r1, [r8, #16]
   10904:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   10908:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1090a:	f500 72a2 	add.w	r2, r0, #324	; 0x144
   1090e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   10912:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   10916:	4297      	cmp	r7, r2
   10918:	d16d      	bne.n	109f6 <gpio_nrfx_pin_interrupt_configure+0x17e>
		    && (intenset & BIT(i))) {
   1091a:	fa23 f200 	lsr.w	r2, r3, r0
   1091e:	07d2      	lsls	r2, r2, #31
   10920:	d569      	bpl.n	109f6 <gpio_nrfx_pin_interrupt_configure+0x17e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   10922:	0083      	lsls	r3, r0, #2
   10924:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   10928:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   1092c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   10930:	f022 0201 	bic.w	r2, r2, #1
   10934:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   10938:	2301      	movs	r3, #1
   1093a:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1093c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   10940:	b2c0      	uxtb	r0, r0
   10942:	f005 fd03 	bl	1634c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   10946:	4638      	mov	r0, r7
   10948:	2100      	movs	r1, #0
   1094a:	f7ff ff6d 	bl	10828 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1094e:	f8d8 000c 	ldr.w	r0, [r8, #12]
   10952:	40f0      	lsrs	r0, r6
   10954:	f010 0001 	ands.w	r0, r0, #1
   10958:	d045      	beq.n	109e6 <gpio_nrfx_pin_interrupt_configure+0x16e>
		if (data->trig_edge & BIT(pin)) {
   1095a:	f8d8 0014 	ldr.w	r0, [r8, #20]
   1095e:	40f0      	lsrs	r0, r6
   10960:	f010 0401 	ands.w	r4, r0, #1
   10964:	d04e      	beq.n	10a04 <gpio_nrfx_pin_interrupt_configure+0x18c>
			if (data->double_edge & BIT(pin)) {
   10966:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1096a:	f10d 0007 	add.w	r0, sp, #7
			if (data->double_edge & BIT(pin)) {
   1096e:	40f3      	lsrs	r3, r6
   10970:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   10972:	bf57      	itett	pl
   10974:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   10978:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1097a:	fa21 f606 	lsrpl.w	r6, r1, r6
   1097e:	f006 0601 	andpl.w	r6, r6, #1
   10982:	bf5c      	itt	pl
   10984:	f1c6 0602 	rsbpl	r6, r6, #2
   10988:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1098a:	f005 fd01 	bl	16390 <nrfx_gpiote_channel_alloc>
   1098e:	4b26      	ldr	r3, [pc, #152]	; (10a28 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   10990:	4298      	cmp	r0, r3
   10992:	d134      	bne.n	109fe <gpio_nrfx_pin_interrupt_configure+0x186>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   10994:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10998:	023f      	lsls	r7, r7, #8
   1099a:	008b      	lsls	r3, r1, #2
   1099c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   109a0:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   109a4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   109a8:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   109ac:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   109b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   109b4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   109b8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   109bc:	0088      	lsls	r0, r1, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   109be:	4317      	orrs	r7, r2
    return ((uint32_t)p_reg + event);
   109c0:	4a1a      	ldr	r2, [pc, #104]	; (10a2c <gpio_nrfx_pin_interrupt_configure+0x1b4>)
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   109c2:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    return ((uint32_t)p_reg + event);
   109c6:	4402      	add	r2, r0
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   109c8:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   109ca:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   109ce:	6010      	str	r0, [r2, #0]
   109d0:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   109d2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   109d6:	f042 0201 	orr.w	r2, r2, #1
   109da:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   109de:	2301      	movs	r3, #1
   109e0:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
   109e2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
   109e6:	b002      	add	sp, #8
   109e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   109ec:	2001      	movs	r0, #1
   109ee:	40b0      	lsls	r0, r6
   109f0:	ea21 0100 	bic.w	r1, r1, r0
   109f4:	e764      	b.n	108c0 <gpio_nrfx_pin_interrupt_configure+0x48>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   109f6:	3001      	adds	r0, #1
   109f8:	2808      	cmp	r0, #8
   109fa:	d186      	bne.n	1090a <gpio_nrfx_pin_interrupt_configure+0x92>
   109fc:	e7a3      	b.n	10946 <gpio_nrfx_pin_interrupt_configure+0xce>
		return -ENODEV;
   109fe:	f06f 0012 	mvn.w	r0, #18
   10a02:	e7f0      	b.n	109e6 <gpio_nrfx_pin_interrupt_configure+0x16e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   10a04:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10a08:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   10a0a:	40f1      	lsrs	r1, r6
   10a0c:	f001 0101 	and.w	r1, r1, #1
   10a10:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10a14:	b2c9      	uxtb	r1, r1
   10a16:	f7ff ff07 	bl	10828 <nrf_gpio_cfg_sense_set>
	int res = 0;
   10a1a:	4620      	mov	r0, r4
   10a1c:	e7e3      	b.n	109e6 <gpio_nrfx_pin_interrupt_configure+0x16e>
   10a1e:	bf00      	nop
   10a20:	40842500 	.word	0x40842500
   10a24:	40031000 	.word	0x40031000
   10a28:	0bad0000 	.word	0x0bad0000
   10a2c:	40031100 	.word	0x40031100

00010a30 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10a30:	4b28      	ldr	r3, [pc, #160]	; (10ad4 <gpio_nrfx_config+0xa4>)
{
   10a32:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10a34:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10a36:	4828      	ldr	r0, [pc, #160]	; (10ad8 <gpio_nrfx_config+0xa8>)
   10a38:	4013      	ands	r3, r2
   10a3a:	4283      	cmp	r3, r0
   10a3c:	d03b      	beq.n	10ab6 <gpio_nrfx_config+0x86>
   10a3e:	d80d      	bhi.n	10a5c <gpio_nrfx_config+0x2c>
   10a40:	2b06      	cmp	r3, #6
   10a42:	d015      	beq.n	10a70 <gpio_nrfx_config+0x40>
   10a44:	d805      	bhi.n	10a52 <gpio_nrfx_config+0x22>
   10a46:	b19b      	cbz	r3, 10a70 <gpio_nrfx_config+0x40>
   10a48:	2b02      	cmp	r3, #2
   10a4a:	d036      	beq.n	10aba <gpio_nrfx_config+0x8a>
   10a4c:	f06f 0015 	mvn.w	r0, #21
   10a50:	e030      	b.n	10ab4 <gpio_nrfx_config+0x84>
   10a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   10a56:	d1f9      	bne.n	10a4c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   10a58:	2301      	movs	r3, #1
   10a5a:	e009      	b.n	10a70 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10a5c:	481f      	ldr	r0, [pc, #124]	; (10adc <gpio_nrfx_config+0xac>)
   10a5e:	4283      	cmp	r3, r0
   10a60:	d02d      	beq.n	10abe <gpio_nrfx_config+0x8e>
   10a62:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   10a66:	d02c      	beq.n	10ac2 <gpio_nrfx_config+0x92>
   10a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   10a6c:	d1ee      	bne.n	10a4c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   10a6e:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   10a70:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   10a72:	bf4c      	ite	mi
   10a74:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   10a76:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   10a7a:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   10a7e:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   10a82:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   10a86:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   10a8a:	d006      	beq.n	10a9a <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   10a8c:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10a90:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   10a92:	d018      	beq.n	10ac6 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
   10a94:	2201      	movs	r2, #1
   10a96:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   10a98:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   10a9a:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   10a9e:	2000      	movs	r0, #0
   10aa0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
   10aa4:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10aa8:	4a0d      	ldr	r2, [pc, #52]	; (10ae0 <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   10aaa:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10aae:	3180      	adds	r1, #128	; 0x80
   10ab0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   10ab4:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   10ab6:	2307      	movs	r3, #7
   10ab8:	e7da      	b.n	10a70 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   10aba:	2304      	movs	r3, #4
   10abc:	e7d8      	b.n	10a70 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   10abe:	2305      	movs	r3, #5
   10ac0:	e7d6      	b.n	10a70 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   10ac2:	2303      	movs	r3, #3
   10ac4:	e7d4      	b.n	10a70 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   10ac6:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   10ac8:	bf42      	ittt	mi
   10aca:	2201      	movmi	r2, #1
   10acc:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   10ace:	60f2      	strmi	r2, [r6, #12]
}
   10ad0:	e7e3      	b.n	10a9a <gpio_nrfx_config+0x6a>
   10ad2:	bf00      	nop
   10ad4:	00f00006 	.word	0x00f00006
   10ad8:	00100006 	.word	0x00100006
   10adc:	00400002 	.word	0x00400002
   10ae0:	40842500 	.word	0x40842500

00010ae4 <gpiote_event_handler>:
{
   10ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10ae8:	4f3f      	ldr	r7, [pc, #252]	; (10be8 <gpiote_event_handler+0x104>)
   10aea:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   10aec:	2e00      	cmp	r6, #0
   10aee:	d04f      	beq.n	10b90 <gpiote_event_handler+0xac>
	uint32_t bit = 1U << pin;
   10af0:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   10af4:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   10af8:	4b3c      	ldr	r3, [pc, #240]	; (10bec <gpiote_event_handler+0x108>)
   10afa:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   10afc:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   10b00:	430a      	orrs	r2, r1
   10b02:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   10b06:	4a3a      	ldr	r2, [pc, #232]	; (10bf0 <gpiote_event_handler+0x10c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   10b08:	691b      	ldr	r3, [r3, #16]
   10b0a:	6914      	ldr	r4, [r2, #16]
   10b0c:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   10b0e:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   10b12:	bb75      	cbnz	r5, 10b72 <gpiote_event_handler+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10b14:	603d      	str	r5, [r7, #0]
   10b16:	683b      	ldr	r3, [r7, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   10b18:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   10b1a:	2501      	movs	r5, #1
   10b1c:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   10b1e:	4835      	ldr	r0, [pc, #212]	; (10bf4 <gpiote_event_handler+0x110>)
   10b20:	4935      	ldr	r1, [pc, #212]	; (10bf8 <gpiote_event_handler+0x114>)
   10b22:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   10b26:	fa05 fc03 	lsl.w	ip, r5, r3
   10b2a:	ea1c 0f02 	tst.w	ip, r2
   10b2e:	d00f      	beq.n	10b50 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10b30:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   10b34:	b162      	cbz	r2, 10b50 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10b36:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   10b3a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10b3e:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10b42:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   10b46:	fa05 f202 	lsl.w	r2, r5, r2
   10b4a:	4314      	orrs	r4, r2
   10b4c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10b50:	3301      	adds	r3, #1
   10b52:	2b08      	cmp	r3, #8
   10b54:	d1e5      	bne.n	10b22 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   10b56:	b9ec      	cbnz	r4, 10b94 <gpiote_event_handler+0xb0>
	if (port_event) {
   10b58:	b14e      	cbz	r6, 10b6e <gpiote_event_handler+0x8a>
	uint32_t bit = 1U << pin;
   10b5a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   10b5c:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   10b5e:	4d23      	ldr	r5, [pc, #140]	; (10bec <gpiote_event_handler+0x108>)
   10b60:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   10b62:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   10b66:	430a      	orrs	r2, r1
   10b68:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   10b6c:	bb54      	cbnz	r4, 10bc4 <gpiote_event_handler+0xe0>
}
   10b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
   10b72:	ea15 0f08 	tst.w	r5, r8
   10b76:	d006      	beq.n	10b86 <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   10b78:	2100      	movs	r1, #0
   10b7a:	f009 001f 	and.w	r0, r9, #31
   10b7e:	f7ff fe53 	bl	10828 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   10b82:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   10b86:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   10b8a:	ea4f 0848 	mov.w	r8, r8, lsl #1
   10b8e:	e7c0      	b.n	10b12 <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   10b90:	4634      	mov	r4, r6
   10b92:	e7c1      	b.n	10b18 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10b94:	4b15      	ldr	r3, [pc, #84]	; (10bec <gpiote_event_handler+0x108>)
   10b96:	6859      	ldr	r1, [r3, #4]
   10b98:	2900      	cmp	r1, #0
   10b9a:	d0dd      	beq.n	10b58 <gpiote_event_handler+0x74>
	return node->next;
   10b9c:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   10b9e:	4f17      	ldr	r7, [pc, #92]	; (10bfc <gpiote_event_handler+0x118>)
   10ba0:	2d00      	cmp	r5, #0
   10ba2:	bf38      	it	cc
   10ba4:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   10ba6:	688a      	ldr	r2, [r1, #8]
   10ba8:	4022      	ands	r2, r4
   10baa:	d002      	beq.n	10bb2 <gpiote_event_handler+0xce>
			cb->handler(port, cb, cb->pin_mask & pins);
   10bac:	4638      	mov	r0, r7
   10bae:	684b      	ldr	r3, [r1, #4]
   10bb0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10bb2:	2d00      	cmp	r5, #0
   10bb4:	d0d0      	beq.n	10b58 <gpiote_event_handler+0x74>
   10bb6:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10bb8:	4629      	mov	r1, r5
   10bba:	2b00      	cmp	r3, #0
   10bbc:	bf38      	it	cc
   10bbe:	2300      	movcc	r3, #0
   10bc0:	461d      	mov	r5, r3
   10bc2:	e7f0      	b.n	10ba6 <gpiote_event_handler+0xc2>
		if (level_pins & bit) {
   10bc4:	4226      	tst	r6, r4
   10bc6:	d00c      	beq.n	10be2 <gpiote_event_handler+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   10bc8:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10bca:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   10bce:	40f9      	lsrs	r1, r7
   10bd0:	f001 0101 	and.w	r1, r1, #1
   10bd4:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10bd8:	b2c9      	uxtb	r1, r1
   10bda:	f7ff fe25 	bl	10828 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   10bde:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   10be2:	3701      	adds	r7, #1
		bit <<= 1;
   10be4:	0076      	lsls	r6, r6, #1
   10be6:	e7c1      	b.n	10b6c <gpiote_event_handler+0x88>
   10be8:	4003117c 	.word	0x4003117c
   10bec:	20015084 	.word	0x20015084
   10bf0:	40842500 	.word	0x40842500
   10bf4:	40031000 	.word	0x40031000
   10bf8:	40031100 	.word	0x40031100
   10bfc:	2001462c 	.word	0x2001462c

00010c00 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   10c00:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   10c02:	794b      	ldrb	r3, [r1, #5]
   10c04:	2b01      	cmp	r3, #1
   10c06:	d029      	beq.n	10c5c <uarte_nrfx_configure+0x5c>
   10c08:	2b03      	cmp	r3, #3
   10c0a:	d124      	bne.n	10c56 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   10c0c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   10c0e:	798b      	ldrb	r3, [r1, #6]
   10c10:	2b03      	cmp	r3, #3
   10c12:	d120      	bne.n	10c56 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   10c14:	79cc      	ldrb	r4, [r1, #7]
   10c16:	b124      	cbz	r4, 10c22 <uarte_nrfx_configure+0x22>
   10c18:	2c01      	cmp	r4, #1
   10c1a:	d11c      	bne.n	10c56 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   10c1c:	6843      	ldr	r3, [r0, #4]
   10c1e:	791b      	ldrb	r3, [r3, #4]
   10c20:	b1cb      	cbz	r3, 10c56 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   10c22:	790a      	ldrb	r2, [r1, #4]
   10c24:	b112      	cbz	r2, 10c2c <uarte_nrfx_configure+0x2c>
   10c26:	2a02      	cmp	r2, #2
   10c28:	d115      	bne.n	10c56 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   10c2a:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   10c2c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   10c2e:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   10c30:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   10c34:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   10c36:	d065      	beq.n	10d04 <uarte_nrfx_configure+0x104>
   10c38:	d82d      	bhi.n	10c96 <uarte_nrfx_configure+0x96>
   10c3a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   10c3e:	d064      	beq.n	10d0a <uarte_nrfx_configure+0x10a>
   10c40:	d816      	bhi.n	10c70 <uarte_nrfx_configure+0x70>
   10c42:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   10c46:	d062      	beq.n	10d0e <uarte_nrfx_configure+0x10e>
   10c48:	d80a      	bhi.n	10c60 <uarte_nrfx_configure+0x60>
   10c4a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   10c4e:	d061      	beq.n	10d14 <uarte_nrfx_configure+0x114>
   10c50:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   10c54:	d061      	beq.n	10d1a <uarte_nrfx_configure+0x11a>
   10c56:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10c5a:	e052      	b.n	10d02 <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   10c5c:	2600      	movs	r6, #0
   10c5e:	e7d6      	b.n	10c0e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   10c60:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   10c64:	d05c      	beq.n	10d20 <uarte_nrfx_configure+0x120>
   10c66:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   10c6a:	d1f4      	bne.n	10c56 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   10c6c:	4b37      	ldr	r3, [pc, #220]	; (10d4c <uarte_nrfx_configure+0x14c>)
   10c6e:	e03c      	b.n	10cea <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10c70:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   10c74:	d057      	beq.n	10d26 <uarte_nrfx_configure+0x126>
   10c76:	d807      	bhi.n	10c88 <uarte_nrfx_configure+0x88>
   10c78:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   10c7c:	d055      	beq.n	10d2a <uarte_nrfx_configure+0x12a>
   10c7e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   10c82:	d1e8      	bne.n	10c56 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   10c84:	4b32      	ldr	r3, [pc, #200]	; (10d50 <uarte_nrfx_configure+0x150>)
   10c86:	e030      	b.n	10cea <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10c88:	f647 2712 	movw	r7, #31250	; 0x7a12
   10c8c:	42bb      	cmp	r3, r7
   10c8e:	d1e2      	bne.n	10c56 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   10c90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   10c94:	e029      	b.n	10cea <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10c96:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   10c9a:	d048      	beq.n	10d2e <uarte_nrfx_configure+0x12e>
   10c9c:	d813      	bhi.n	10cc6 <uarte_nrfx_configure+0xc6>
   10c9e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   10ca2:	d047      	beq.n	10d34 <uarte_nrfx_configure+0x134>
   10ca4:	d809      	bhi.n	10cba <uarte_nrfx_configure+0xba>
   10ca6:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   10caa:	42bb      	cmp	r3, r7
   10cac:	d044      	beq.n	10d38 <uarte_nrfx_configure+0x138>
   10cae:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   10cb2:	d1d0      	bne.n	10c56 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   10cb4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   10cb8:	e017      	b.n	10cea <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10cba:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   10cbe:	d1ca      	bne.n	10c56 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   10cc0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   10cc4:	e011      	b.n	10cea <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10cc6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   10cca:	d038      	beq.n	10d3e <uarte_nrfx_configure+0x13e>
   10ccc:	d808      	bhi.n	10ce0 <uarte_nrfx_configure+0xe0>
   10cce:	4f21      	ldr	r7, [pc, #132]	; (10d54 <uarte_nrfx_configure+0x154>)
   10cd0:	42bb      	cmp	r3, r7
   10cd2:	d037      	beq.n	10d44 <uarte_nrfx_configure+0x144>
   10cd4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   10cd8:	d1bd      	bne.n	10c56 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   10cda:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   10cde:	e004      	b.n	10cea <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10ce0:	4f1d      	ldr	r7, [pc, #116]	; (10d58 <uarte_nrfx_configure+0x158>)
   10ce2:	42bb      	cmp	r3, r7
   10ce4:	d1b7      	bne.n	10c56 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   10ce6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   10cea:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   10cee:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   10cf0:	4334      	orrs	r4, r6
   10cf2:	4322      	orrs	r2, r4
   10cf4:	3304      	adds	r3, #4
   10cf6:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   10cf8:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   10cfc:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   10d00:	2000      	movs	r0, #0
}
   10d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   10d04:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   10d08:	e7ef      	b.n	10cea <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   10d0a:	4b14      	ldr	r3, [pc, #80]	; (10d5c <uarte_nrfx_configure+0x15c>)
   10d0c:	e7ed      	b.n	10cea <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   10d0e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   10d12:	e7ea      	b.n	10cea <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   10d14:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   10d18:	e7e7      	b.n	10cea <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10d1a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   10d1e:	e7e4      	b.n	10cea <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   10d20:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   10d24:	e7e1      	b.n	10cea <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   10d26:	4b0e      	ldr	r3, [pc, #56]	; (10d60 <uarte_nrfx_configure+0x160>)
   10d28:	e7df      	b.n	10cea <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   10d2a:	4b0e      	ldr	r3, [pc, #56]	; (10d64 <uarte_nrfx_configure+0x164>)
   10d2c:	e7dd      	b.n	10cea <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   10d2e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   10d32:	e7da      	b.n	10cea <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   10d34:	4b0c      	ldr	r3, [pc, #48]	; (10d68 <uarte_nrfx_configure+0x168>)
   10d36:	e7d8      	b.n	10cea <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   10d38:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   10d3c:	e7d5      	b.n	10cea <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   10d3e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   10d42:	e7d2      	b.n	10cea <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   10d44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   10d48:	e7cf      	b.n	10cea <uarte_nrfx_configure+0xea>
   10d4a:	bf00      	nop
   10d4c:	0013b000 	.word	0x0013b000
   10d50:	004ea000 	.word	0x004ea000
   10d54:	0003d090 	.word	0x0003d090
   10d58:	000f4240 	.word	0x000f4240
   10d5c:	00275000 	.word	0x00275000
   10d60:	0075c000 	.word	0x0075c000
   10d64:	003af000 	.word	0x003af000
   10d68:	013a9000 	.word	0x013a9000

00010d6c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   10d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d70:	4606      	mov	r6, r0
   10d72:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   10d74:	68c7      	ldr	r7, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10d76:	f00a fd13 	bl	1b7a0 <k_is_in_isr>
   10d7a:	b9b8      	cbnz	r0, 10dac <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   10d7c:	4b28      	ldr	r3, [pc, #160]	; (10e20 <uarte_nrfx_poll_out+0xb4>)
   10d7e:	781b      	ldrb	r3, [r3, #0]
   10d80:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   10d84:	6872      	ldr	r2, [r6, #4]
   10d86:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   10d88:	b193      	cbz	r3, 10db0 <uarte_nrfx_poll_out+0x44>
   10d8a:	f04f 0320 	mov.w	r3, #32
   10d8e:	f3ef 8411 	mrs	r4, BASEPRI
   10d92:	f383 8811 	msr	BASEPRI, r3
   10d96:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   10d9a:	4630      	mov	r0, r6
   10d9c:	f008 fc27 	bl	195ee <is_tx_ready>
   10da0:	bb38      	cbnz	r0, 10df2 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   10da2:	f384 8811 	msr	BASEPRI, r4
   10da6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10daa:	e7ee      	b.n	10d8a <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10dac:	2301      	movs	r3, #1
   10dae:	e7e9      	b.n	10d84 <uarte_nrfx_poll_out+0x18>
   10db0:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   10db2:	4630      	mov	r0, r6
   10db4:	f008 fc1b 	bl	195ee <is_tx_ready>
   10db8:	b970      	cbnz	r0, 10dd8 <uarte_nrfx_poll_out+0x6c>
   10dba:	2001      	movs	r0, #1
   10dbc:	f00a fac8 	bl	1b350 <nrfx_busy_wait>
   10dc0:	3c01      	subs	r4, #1
   10dc2:	d1f6      	bne.n	10db2 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   10dc4:	2100      	movs	r1, #0
   10dc6:	2021      	movs	r0, #33	; 0x21
   10dc8:	f006 faf4 	bl	173b4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   10dcc:	e7f0      	b.n	10db0 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   10dce:	f384 8811 	msr	BASEPRI, r4
   10dd2:	f3bf 8f6f 	isb	sy
}
   10dd6:	e7f5      	b.n	10dc4 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   10dd8:	f04f 0320 	mov.w	r3, #32
   10ddc:	f3ef 8411 	mrs	r4, BASEPRI
   10de0:	f383 8811 	msr	BASEPRI, r3
   10de4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   10de8:	4630      	mov	r0, r6
   10dea:	f008 fc00 	bl	195ee <is_tx_ready>
   10dee:	2800      	cmp	r0, #0
   10df0:	d0ed      	beq.n	10dce <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   10df2:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10df4:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   10df6:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   10dfa:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   10dfe:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10e02:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   10e06:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   10e0a:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   10e0e:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10e12:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   10e14:	f384 8811 	msr	BASEPRI, r4
   10e18:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   10e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e20:	20018459 	.word	0x20018459

00010e24 <uarte_instance_init.isra.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   10e24:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
   10e28:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   10e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   10e2e:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   10e30:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
   10e32:	460f      	mov	r7, r1
   10e34:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
   10e38:	4605      	mov	r5, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
   10e3a:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
   10e3c:	6808      	ldr	r0, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   10e3e:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
   10e40:	4b41      	ldr	r3, [pc, #260]	; (10f48 <uarte_instance_init.isra.0+0x124>)
    *p_pin = pin_number & 0x1F;
   10e42:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   10e46:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
   10e48:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10e4a:	2103      	movs	r1, #3
   10e4c:	3280      	adds	r2, #128	; 0x80
   10e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   10e52:	687a      	ldr	r2, [r7, #4]
   10e54:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
   10e56:	bf1e      	ittt	ne
   10e58:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10e5c:	3180      	addne	r1, #128	; 0x80
   10e5e:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   10e62:	68b9      	ldr	r1, [r7, #8]
    p_reg->PSEL.TXD = pseltxd;
   10e64:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   10e68:	1c48      	adds	r0, r1, #1
   10e6a:	bf18      	it	ne
   10e6c:	2000      	movne	r0, #0
    p_reg->PSEL.RXD = pselrxd;
   10e6e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
   10e72:	bf1e      	ittt	ne
   10e74:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10e78:	3280      	addne	r2, #128	; 0x80
   10e7a:	f843 0022 	strne.w	r0, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   10e7e:	68f8      	ldr	r0, [r7, #12]
   10e80:	1c42      	adds	r2, r0, #1
   10e82:	d00c      	beq.n	10e9e <uarte_instance_init.isra.0+0x7a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   10e84:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
   10e88:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   10e8c:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
   10e90:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10e94:	f04f 0c03 	mov.w	ip, #3
   10e98:	3280      	adds	r2, #128	; 0x80
   10e9a:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   10e9e:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   10ea2:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   10ea6:	68e9      	ldr	r1, [r5, #12]
   10ea8:	4628      	mov	r0, r5
   10eaa:	3104      	adds	r1, #4
   10eac:	f7ff fea8 	bl	10c00 <uarte_nrfx_configure>
	if (err) {
   10eb0:	4680      	mov	r8, r0
   10eb2:	b9a8      	cbnz	r0, 10ee0 <uarte_instance_init.isra.0+0xbc>

#ifdef CONFIG_PM_DEVICE
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
   10eb4:	686b      	ldr	r3, [r5, #4]
   10eb6:	799b      	ldrb	r3, [r3, #6]
   10eb8:	b313      	cbz	r3, 10f00 <uarte_instance_init.isra.0+0xdc>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   10eba:	f106 0016 	add.w	r0, r6, #22
   10ebe:	f005 fa27 	bl	16310 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   10ec2:	4b22      	ldr	r3, [pc, #136]	; (10f4c <uarte_instance_init.isra.0+0x128>)
   10ec4:	4298      	cmp	r0, r3
   10ec6:	d00e      	beq.n	10ee6 <uarte_instance_init.isra.0+0xc2>
   10ec8:	4b21      	ldr	r3, [pc, #132]	; (10f50 <uarte_instance_init.isra.0+0x12c>)
   10eca:	4922      	ldr	r1, [pc, #136]	; (10f54 <uarte_instance_init.isra.0+0x130>)
		LOG_ERR("Failed to allocate PPI Channel");
   10ecc:	4822      	ldr	r0, [pc, #136]	; (10f58 <uarte_instance_init.isra.0+0x134>)
   10ece:	1ac9      	subs	r1, r1, r3
   10ed0:	08c9      	lsrs	r1, r1, #3
   10ed2:	0189      	lsls	r1, r1, #6
   10ed4:	f041 0101 	orr.w	r1, r1, #1
   10ed8:	f007 fe92 	bl	18c00 <log_0>
		return -EIO;
   10edc:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   10ee0:	4640      	mov	r0, r8
   10ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   10ee6:	7db3      	ldrb	r3, [r6, #22]
   10ee8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10eec:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   10ef0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   10ef4:	2301      	movs	r3, #1
   10ef6:	7db2      	ldrb	r2, [r6, #22]
   10ef8:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   10efa:	4a18      	ldr	r2, [pc, #96]	; (10f5c <uarte_instance_init.isra.0+0x138>)
   10efc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   10f00:	2308      	movs	r3, #8
   10f02:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   10f06:	687b      	ldr	r3, [r7, #4]
   10f08:	3301      	adds	r3, #1
   10f0a:	d00c      	beq.n	10f26 <uarte_instance_init.isra.0+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10f0c:	2300      	movs	r3, #0
   10f0e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10f12:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   10f16:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   10f1a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   10f1e:	2301      	movs	r3, #1
   10f20:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10f24:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   10f26:	686b      	ldr	r3, [r5, #4]
   10f28:	799b      	ldrb	r3, [r3, #6]
   10f2a:	b91b      	cbnz	r3, 10f34 <uarte_instance_init.isra.0+0x110>
    p_reg->INTENSET = mask;
   10f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
   10f30:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   10f34:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   10f36:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   10f38:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   10f3c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10f40:	2301      	movs	r3, #1
   10f42:	60a3      	str	r3, [r4, #8]
   10f44:	60e3      	str	r3, [r4, #12]
	return 0;
   10f46:	e7cb      	b.n	10ee0 <uarte_instance_init.isra.0+0xbc>
   10f48:	40842500 	.word	0x40842500
   10f4c:	0bad0000 	.word	0x0bad0000
   10f50:	0001c0d4 	.word	0x0001c0d4
   10f54:	0001c14c 	.word	0x0001c14c
   10f58:	0001cf0f 	.word	0x0001cf0f
   10f5c:	40017000 	.word	0x40017000

00010f60 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   10f60:	b530      	push	{r4, r5, lr}
   10f62:	b085      	sub	sp, #20
   10f64:	466c      	mov	r4, sp
   10f66:	4605      	mov	r5, r0
   10f68:	4b08      	ldr	r3, [pc, #32]	; (10f8c <uarte_0_init+0x2c>)
   10f6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   10f6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   10f70:	2200      	movs	r2, #0
   10f72:	2101      	movs	r1, #1
   10f74:	2008      	movs	r0, #8
   10f76:	f7fe fdfb 	bl	fb70 <z_arm_irq_priority_set>
   10f7a:	2008      	movs	r0, #8
   10f7c:	f7fe fdda 	bl	fb34 <arch_irq_enable>
   10f80:	4621      	mov	r1, r4
   10f82:	4628      	mov	r0, r5
   10f84:	f7ff ff4e 	bl	10e24 <uarte_instance_init.isra.0>
   10f88:	b005      	add	sp, #20
   10f8a:	bd30      	pop	{r4, r5, pc}
   10f8c:	0001c170 	.word	0x0001c170

00010f90 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   10f90:	b530      	push	{r4, r5, lr}
   10f92:	b085      	sub	sp, #20
   10f94:	466c      	mov	r4, sp
   10f96:	4605      	mov	r5, r0
   10f98:	4b08      	ldr	r3, [pc, #32]	; (10fbc <uarte_1_init+0x2c>)
   10f9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   10f9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   10fa0:	2200      	movs	r2, #0
   10fa2:	2101      	movs	r1, #1
   10fa4:	2009      	movs	r0, #9
   10fa6:	f7fe fde3 	bl	fb70 <z_arm_irq_priority_set>
   10faa:	2009      	movs	r0, #9
   10fac:	f7fe fdc2 	bl	fb34 <arch_irq_enable>
   10fb0:	4621      	mov	r1, r4
   10fb2:	4628      	mov	r0, r5
   10fb4:	f7ff ff36 	bl	10e24 <uarte_instance_init.isra.0>
   10fb8:	b005      	add	sp, #20
   10fba:	bd30      	pop	{r4, r5, pc}
   10fbc:	0001c180 	.word	0x0001c180

00010fc0 <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   10fc0:	b538      	push	{r3, r4, r5, lr}
	if (!first_time_init) {
   10fc2:	4d19      	ldr	r5, [pc, #100]	; (11028 <_nrf_modem_lib_init+0x68>)
   10fc4:	4c19      	ldr	r4, [pc, #100]	; (1102c <_nrf_modem_lib_init+0x6c>)
   10fc6:	782b      	ldrb	r3, [r5, #0]
   10fc8:	b933      	cbnz	r3, 10fd8 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   10fca:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   10fce:	4818      	ldr	r0, [pc, #96]	; (11030 <_nrf_modem_lib_init+0x70>)
   10fd0:	f00a fa55 	bl	1b47e <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   10fd4:	2301      	movs	r3, #1
   10fd6:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   10fd8:	2200      	movs	r2, #0
   10fda:	202a      	movs	r0, #42	; 0x2a
   10fdc:	4611      	mov	r1, r2
   10fde:	f7fe fdc7 	bl	fb70 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   10fe2:	2100      	movs	r1, #0
   10fe4:	4813      	ldr	r0, [pc, #76]	; (11034 <_nrf_modem_lib_init+0x74>)
   10fe6:	f004 ffe9 	bl	15fbc <nrf_modem_init>
   10fea:	4b13      	ldr	r3, [pc, #76]	; (11038 <_nrf_modem_lib_init+0x78>)
   10fec:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   10fee:	f04f 32ff 	mov.w	r2, #4294967295
   10ff2:	f04f 33ff 	mov.w	r3, #4294967295
   10ff6:	480e      	ldr	r0, [pc, #56]	; (11030 <_nrf_modem_lib_init+0x70>)
   10ff8:	f005 fd72 	bl	16ae0 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   10ffc:	6820      	ldr	r0, [r4, #0]
   10ffe:	b170      	cbz	r0, 1101e <_nrf_modem_lib_init+0x5e>
	return node->next;
   11000:	6804      	ldr	r4, [r0, #0]
   11002:	2c00      	cmp	r4, #0
   11004:	bf38      	it	cc
   11006:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   11008:	3004      	adds	r0, #4
   1100a:	f006 f9fb 	bl	17404 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   1100e:	b134      	cbz	r4, 1101e <_nrf_modem_lib_init+0x5e>
   11010:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11012:	4620      	mov	r0, r4
   11014:	2b00      	cmp	r3, #0
   11016:	bf38      	it	cc
   11018:	2300      	movcc	r3, #0
   1101a:	461c      	mov	r4, r3
   1101c:	e7f4      	b.n	11008 <_nrf_modem_lib_init+0x48>
	return z_impl_k_mutex_unlock(mutex);
   1101e:	4804      	ldr	r0, [pc, #16]	; (11030 <_nrf_modem_lib_init+0x70>)
   11020:	f005 fdd6 	bl	16bd0 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   11024:	2000      	movs	r0, #0
   11026:	bd38      	pop	{r3, r4, r5, pc}
   11028:	200166f8 	.word	0x200166f8
   1102c:	200150a4 	.word	0x200150a4
   11030:	200150ac 	.word	0x200150ac
   11034:	0001c308 	.word	0x0001c308
   11038:	200150a0 	.word	0x200150a0

0001103c <nrf_modem_lib_shutdown_wait>:

void nrf_modem_lib_shutdown_wait(void)
{
   1103c:	b530      	push	{r4, r5, lr}
   1103e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   11040:	2201      	movs	r2, #1
   11042:	2100      	movs	r1, #0
   11044:	a802      	add	r0, sp, #8
   11046:	f00a fb9b 	bl	1b780 <z_impl_k_sem_init>
   1104a:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   1104c:	f04f 33ff 	mov.w	r3, #4294967295
   11050:	f04f 32ff 	mov.w	r2, #4294967295
   11054:	481c      	ldr	r0, [pc, #112]	; (110c8 <nrf_modem_lib_shutdown_wait+0x8c>)
   11056:	f005 fd43 	bl	16ae0 <z_impl_k_mutex_lock>
	parent->next = child;
   1105a:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   1105c:	4c1b      	ldr	r4, [pc, #108]	; (110cc <nrf_modem_lib_shutdown_wait+0x90>)
	parent->next = child;
   1105e:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   11060:	6863      	ldr	r3, [r4, #4]
   11062:	bb2b      	cbnz	r3, 110b0 <nrf_modem_lib_shutdown_wait+0x74>
	list->head = node;
   11064:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   11068:	4817      	ldr	r0, [pc, #92]	; (110c8 <nrf_modem_lib_shutdown_wait+0x8c>)
   1106a:	f005 fdb1 	bl	16bd0 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   1106e:	f04f 32ff 	mov.w	r2, #4294967295
   11072:	f04f 33ff 	mov.w	r3, #4294967295
   11076:	a802      	add	r0, sp, #8
   11078:	f006 f9ea 	bl	17450 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   1107c:	f04f 32ff 	mov.w	r2, #4294967295
   11080:	f04f 33ff 	mov.w	r3, #4294967295
   11084:	4810      	ldr	r0, [pc, #64]	; (110c8 <nrf_modem_lib_shutdown_wait+0x8c>)
   11086:	f005 fd2b 	bl	16ae0 <z_impl_k_mutex_lock>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1108a:	2200      	movs	r2, #0
   1108c:	6823      	ldr	r3, [r4, #0]
   1108e:	b153      	cbz	r3, 110a6 <nrf_modem_lib_shutdown_wait+0x6a>
   11090:	42ab      	cmp	r3, r5
   11092:	d116      	bne.n	110c2 <nrf_modem_lib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   11094:	9901      	ldr	r1, [sp, #4]
   11096:	b972      	cbnz	r2, 110b6 <nrf_modem_lib_shutdown_wait+0x7a>
   11098:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1109a:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1109c:	429a      	cmp	r2, r3
   1109e:	d100      	bne.n	110a2 <nrf_modem_lib_shutdown_wait+0x66>
	list->tail = node;
   110a0:	6061      	str	r1, [r4, #4]
	parent->next = child;
   110a2:	2300      	movs	r3, #0
   110a4:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   110a6:	4808      	ldr	r0, [pc, #32]	; (110c8 <nrf_modem_lib_shutdown_wait+0x8c>)
   110a8:	f005 fd92 	bl	16bd0 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   110ac:	b009      	add	sp, #36	; 0x24
   110ae:	bd30      	pop	{r4, r5, pc}
   110b0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   110b2:	6065      	str	r5, [r4, #4]
}
   110b4:	e7d8      	b.n	11068 <nrf_modem_lib_shutdown_wait+0x2c>
	parent->next = child;
   110b6:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   110b8:	6861      	ldr	r1, [r4, #4]
   110ba:	4299      	cmp	r1, r3
	list->tail = node;
   110bc:	bf08      	it	eq
   110be:	6062      	streq	r2, [r4, #4]
}
   110c0:	e7ef      	b.n	110a2 <nrf_modem_lib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   110c2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   110c4:	681b      	ldr	r3, [r3, #0]
   110c6:	e7e2      	b.n	1108e <nrf_modem_lib_shutdown_wait+0x52>
   110c8:	200150ac 	.word	0x200150ac
   110cc:	200150a4 	.word	0x200150a4

000110d0 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   110d0:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   110d2:	4c0d      	ldr	r4, [pc, #52]	; (11108 <thread_monitor_entry_get+0x38>)
{
   110d4:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   110d6:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   110d8:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   110da:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   110dc:	4b0b      	ldr	r3, [pc, #44]	; (1110c <thread_monitor_entry_get+0x3c>)
   110de:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   110e0:	6801      	ldr	r1, [r0, #0]
   110e2:	4291      	cmp	r1, r2
   110e4:	d00e      	beq.n	11104 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   110e6:	b151      	cbz	r1, 110fe <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   110e8:	6841      	ldr	r1, [r0, #4]
   110ea:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   110ec:	42b1      	cmp	r1, r6
   110ee:	bfc4      	itt	gt
   110f0:	4604      	movgt	r4, r0
   110f2:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   110f4:	3d01      	subs	r5, #1
   110f6:	f100 0008 	add.w	r0, r0, #8
   110fa:	d1f1      	bne.n	110e0 <thread_monitor_entry_get+0x10>
   110fc:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   110fe:	3b01      	subs	r3, #1
	new_entry->id = id;
   11100:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   11102:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   11104:	bd70      	pop	{r4, r5, r6, pc}
   11106:	bf00      	nop
   11108:	200152e8 	.word	0x200152e8
   1110c:	200152c4 	.word	0x200152c4

00011110 <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   11110:	4668      	mov	r0, sp
   11112:	f020 0107 	bic.w	r1, r0, #7
   11116:	468d      	mov	sp, r1
   11118:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1111a:	4b0f      	ldr	r3, [pc, #60]	; (11158 <rpc_proxy_irq_handler+0x48>)
   1111c:	e8d3 2fef 	ldaex	r2, [r3]
   11120:	3201      	adds	r2, #1
   11122:	e8c3 2fe1 	stlex	r1, r2, [r3]
   11126:	2900      	cmp	r1, #0
   11128:	d1f8      	bne.n	1111c <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_os_application_irq_handler();
   1112a:	f001 fd67 	bl	12bfc <nrf_modem_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1112e:	4b0b      	ldr	r3, [pc, #44]	; (1115c <rpc_proxy_irq_handler+0x4c>)
   11130:	681c      	ldr	r4, [r3, #0]
   11132:	2c00      	cmp	r4, #0
   11134:	bf38      	it	cc
   11136:	2400      	movcc	r4, #0
   11138:	b12c      	cbz	r4, 11146 <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   1113a:	1d20      	adds	r0, r4, #4
   1113c:	f006 f962 	bl	17404 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11140:	6824      	ldr	r4, [r4, #0]
   11142:	2c00      	cmp	r4, #0
   11144:	d1f8      	bne.n	11138 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   11146:	f7fe fd29 	bl	fb9c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1114a:	f7fe fee7 	bl	ff1c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1114e:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   11152:	4685      	mov	sp, r0
   11154:	4770      	bx	lr
   11156:	bf00      	nop
   11158:	200152c4 	.word	0x200152c4
   1115c:	200152e0 	.word	0x200152e0

00011160 <nrf_modem_os_timedwait>:
{
   11160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11164:	460c      	mov	r4, r1
   11166:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   11168:	f00a fb6e 	bl	1b848 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   1116c:	6823      	ldr	r3, [r4, #0]
   1116e:	4680      	mov	r8, r0
   11170:	2b00      	cmp	r3, #0
   11172:	468a      	mov	sl, r1
   11174:	d103      	bne.n	1117e <nrf_modem_os_timedwait+0x1e>
	z_impl_k_yield();
   11176:	f006 f8cf 	bl	17318 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   1117a:	203c      	movs	r0, #60	; 0x3c
   1117c:	e091      	b.n	112a2 <nrf_modem_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   1117e:	bfbc      	itt	lt
   11180:	f04f 33ff 	movlt.w	r3, #4294967295
   11184:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   11186:	2201      	movs	r2, #1
   11188:	2100      	movs	r1, #0
   1118a:	a802      	add	r0, sp, #8
   1118c:	f00a faf8 	bl	1b780 <z_impl_k_sem_init>
   11190:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   11192:	f04f 0320 	mov.w	r3, #32
   11196:	f3ef 8b11 	mrs	fp, BASEPRI
   1119a:	f383 8811 	msr	BASEPRI, r3
   1119e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   111a2:	f006 f929 	bl	173f8 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   111a6:	f7ff ff93 	bl	110d0 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   111aa:	4947      	ldr	r1, [pc, #284]	; (112c8 <nrf_modem_os_timedwait+0x168>)
   111ac:	6843      	ldr	r3, [r0, #4]
   111ae:	680a      	ldr	r2, [r1, #0]
   111b0:	4689      	mov	r9, r1
   111b2:	4293      	cmp	r3, r2
   111b4:	f04f 0300 	mov.w	r3, #0
   111b8:	d108      	bne.n	111cc <nrf_modem_os_timedwait+0x6c>
	parent->next = child;
   111ba:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   111bc:	4b43      	ldr	r3, [pc, #268]	; (112cc <nrf_modem_os_timedwait+0x16c>)
   111be:	685a      	ldr	r2, [r3, #4]
   111c0:	2a00      	cmp	r2, #0
   111c2:	d171      	bne.n	112a8 <nrf_modem_os_timedwait+0x148>
	list->head = node;
   111c4:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   111c8:	2301      	movs	r3, #1
}
   111ca:	e000      	b.n	111ce <nrf_modem_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   111cc:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   111ce:	f38b 8811 	msr	BASEPRI, fp
   111d2:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   111d6:	2b00      	cmp	r3, #0
   111d8:	d062      	beq.n	112a0 <nrf_modem_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   111da:	6823      	ldr	r3, [r4, #0]
   111dc:	1c5a      	adds	r2, r3, #1
   111de:	d066      	beq.n	112ae <nrf_modem_os_timedwait+0x14e>
   111e0:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   111e4:	f240 30e7 	movw	r0, #999	; 0x3e7
   111e8:	2100      	movs	r1, #0
   111ea:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   111ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   111f2:	2300      	movs	r3, #0
   111f4:	fbce 010c 	smlal	r0, r1, lr, ip
   111f8:	f7fb fc3e 	bl	ca78 <__aeabi_uldivmod>
   111fc:	4602      	mov	r2, r0
   111fe:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   11200:	a802      	add	r0, sp, #8
   11202:	f006 f925 	bl	17450 <z_impl_k_sem_take>
	__asm__ volatile(
   11206:	f04f 0320 	mov.w	r3, #32
   1120a:	f3ef 8b11 	mrs	fp, BASEPRI
   1120e:	f383 8811 	msr	BASEPRI, r3
   11212:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11216:	2000      	movs	r0, #0
   11218:	4b2c      	ldr	r3, [pc, #176]	; (112cc <nrf_modem_os_timedwait+0x16c>)
   1121a:	681a      	ldr	r2, [r3, #0]
   1121c:	b15a      	cbz	r2, 11236 <nrf_modem_os_timedwait+0xd6>
   1121e:	42aa      	cmp	r2, r5
   11220:	d14f      	bne.n	112c2 <nrf_modem_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   11222:	9d01      	ldr	r5, [sp, #4]
   11224:	2800      	cmp	r0, #0
   11226:	d146      	bne.n	112b6 <nrf_modem_os_timedwait+0x156>
   11228:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   1122a:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1122c:	4291      	cmp	r1, r2
   1122e:	d100      	bne.n	11232 <nrf_modem_os_timedwait+0xd2>
	list->tail = node;
   11230:	605d      	str	r5, [r3, #4]
	parent->next = child;
   11232:	2300      	movs	r3, #0
   11234:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   11236:	f006 f8df 	bl	173f8 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1123a:	f7ff ff49 	bl	110d0 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1123e:	f8d9 3000 	ldr.w	r3, [r9]
   11242:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   11244:	f38b 8811 	msr	BASEPRI, fp
   11248:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   1124c:	6825      	ldr	r5, [r4, #0]
   1124e:	1c6b      	adds	r3, r5, #1
   11250:	d026      	beq.n	112a0 <nrf_modem_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   11252:	f00a faf9 	bl	1b848 <z_impl_k_uptime_ticks>
   11256:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   1125a:	468e      	mov	lr, r1
   1125c:	fba8 890c 	umull	r8, r9, r8, ip
   11260:	fba0 010c 	umull	r0, r1, r0, ip
   11264:	fb0c 990a 	mla	r9, ip, sl, r9
   11268:	fb0c 110e 	mla	r1, ip, lr, r1
   1126c:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   11270:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   11274:	1952      	adds	r2, r2, r5
   11276:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   1127a:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   1127e:	0bc5      	lsrs	r5, r0, #15
   11280:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   11284:	1b56      	subs	r6, r2, r5
   11286:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   1128a:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   1128e:	2e00      	cmp	r6, #0
   11290:	f177 0300 	sbcs.w	r3, r7, #0
   11294:	bfb8      	it	lt
   11296:	2600      	movlt	r6, #0
   11298:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   1129a:	2e00      	cmp	r6, #0
   1129c:	f43f af6d 	beq.w	1117a <nrf_modem_os_timedwait+0x1a>
	return 0;
   112a0:	2000      	movs	r0, #0
}
   112a2:	b009      	add	sp, #36	; 0x24
   112a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112a8:	6015      	str	r5, [r2, #0]
	list->tail = node;
   112aa:	605d      	str	r5, [r3, #4]
   112ac:	e78c      	b.n	111c8 <nrf_modem_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   112ae:	f04f 32ff 	mov.w	r2, #4294967295
   112b2:	4613      	mov	r3, r2
   112b4:	e7a4      	b.n	11200 <nrf_modem_os_timedwait+0xa0>
	parent->next = child;
   112b6:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   112b8:	6859      	ldr	r1, [r3, #4]
   112ba:	4291      	cmp	r1, r2
	list->tail = node;
   112bc:	bf08      	it	eq
   112be:	6058      	streq	r0, [r3, #4]
}
   112c0:	e7b7      	b.n	11232 <nrf_modem_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   112c2:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   112c4:	6812      	ldr	r2, [r2, #0]
   112c6:	e7a9      	b.n	1121c <nrf_modem_os_timedwait+0xbc>
   112c8:	200152c4 	.word	0x200152c4
   112cc:	200152e0 	.word	0x200152e0

000112d0 <nrf_modem_os_errno_set>:
	switch (err_code) {
   112d0:	283c      	cmp	r0, #60	; 0x3c
{
   112d2:	4601      	mov	r1, r0
   112d4:	b508      	push	{r3, lr}
	switch (err_code) {
   112d6:	f300 808f 	bgt.w	113f8 <nrf_modem_os_errno_set+0x128>
   112da:	2800      	cmp	r0, #0
   112dc:	dc0d      	bgt.n	112fa <nrf_modem_os_errno_set+0x2a>
   112de:	4bb2      	ldr	r3, [pc, #712]	; (115a8 <nrf_modem_os_errno_set+0x2d8>)
   112e0:	4ab2      	ldr	r2, [pc, #712]	; (115ac <nrf_modem_os_errno_set+0x2dc>)
		LOG_ERR("Untranslated errno %d set by nrf_modem_lib!", err_code);
   112e2:	48b3      	ldr	r0, [pc, #716]	; (115b0 <nrf_modem_os_errno_set+0x2e0>)
   112e4:	1ad2      	subs	r2, r2, r3
   112e6:	08d2      	lsrs	r2, r2, #3
   112e8:	0192      	lsls	r2, r2, #6
   112ea:	f042 0201 	orr.w	r2, r2, #1
   112ee:	f007 fc96 	bl	18c1e <log_1>
		errno = 0xBAADBAAD;
   112f2:	f008 f895 	bl	19420 <__errno>
   112f6:	4baf      	ldr	r3, [pc, #700]	; (115b4 <nrf_modem_os_errno_set+0x2e4>)
   112f8:	e0bf      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
   112fa:	1e43      	subs	r3, r0, #1
   112fc:	2b3b      	cmp	r3, #59	; 0x3b
   112fe:	d8ee      	bhi.n	112de <nrf_modem_os_errno_set+0xe>
   11300:	a201      	add	r2, pc, #4	; (adr r2, 11308 <nrf_modem_os_errno_set+0x38>)
   11302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11306:	bf00      	nop
   11308:	00011475 	.word	0x00011475
   1130c:	0001147f 	.word	0x0001147f
   11310:	000112df 	.word	0x000112df
   11314:	000112df 	.word	0x000112df
   11318:	00011487 	.word	0x00011487
   1131c:	000112df 	.word	0x000112df
   11320:	000112df 	.word	0x000112df
   11324:	0001148f 	.word	0x0001148f
   11328:	00011497 	.word	0x00011497
   1132c:	000112df 	.word	0x000112df
   11330:	000112df 	.word	0x000112df
   11334:	0001149f 	.word	0x0001149f
   11338:	000114a7 	.word	0x000114a7
   1133c:	000114af 	.word	0x000114af
   11340:	000112df 	.word	0x000112df
   11344:	000112df 	.word	0x000112df
   11348:	000112df 	.word	0x000112df
   1134c:	000112df 	.word	0x000112df
   11350:	000112df 	.word	0x000112df
   11354:	000112df 	.word	0x000112df
   11358:	000112df 	.word	0x000112df
   1135c:	000114b7 	.word	0x000114b7
   11360:	000112df 	.word	0x000112df
   11364:	000114bf 	.word	0x000114bf
   11368:	000112df 	.word	0x000112df
   1136c:	000112df 	.word	0x000112df
   11370:	000112df 	.word	0x000112df
   11374:	000112df 	.word	0x000112df
   11378:	000112df 	.word	0x000112df
   1137c:	000112df 	.word	0x000112df
   11380:	000112df 	.word	0x000112df
   11384:	000112df 	.word	0x000112df
   11388:	000112df 	.word	0x000112df
   1138c:	000112df 	.word	0x000112df
   11390:	000114c7 	.word	0x000114c7
   11394:	000112df 	.word	0x000112df
   11398:	000114cf 	.word	0x000114cf
   1139c:	000112df 	.word	0x000112df
   113a0:	000112df 	.word	0x000112df
   113a4:	00011597 	.word	0x00011597
   113a8:	000114d7 	.word	0x000114d7
   113ac:	000114df 	.word	0x000114df
   113b0:	000114e7 	.word	0x000114e7
   113b4:	000114ef 	.word	0x000114ef
   113b8:	000114f7 	.word	0x000114f7
   113bc:	000112df 	.word	0x000112df
   113c0:	000114ff 	.word	0x000114ff
   113c4:	00011507 	.word	0x00011507
   113c8:	000112df 	.word	0x000112df
   113cc:	0001150f 	.word	0x0001150f
   113d0:	00011517 	.word	0x00011517
   113d4:	0001151f 	.word	0x0001151f
   113d8:	0001159f 	.word	0x0001159f
   113dc:	00011527 	.word	0x00011527
   113e0:	000112df 	.word	0x000112df
   113e4:	0001152f 	.word	0x0001152f
   113e8:	00011537 	.word	0x00011537
   113ec:	000112df 	.word	0x000112df
   113f0:	000112df 	.word	0x000112df
   113f4:	0001153f 	.word	0x0001153f
	switch (err_code) {
   113f8:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   113fc:	2b18      	cmp	r3, #24
   113fe:	f63f af6e 	bhi.w	112de <nrf_modem_os_errno_set+0xe>
   11402:	2b18      	cmp	r3, #24
   11404:	f63f af6b 	bhi.w	112de <nrf_modem_os_errno_set+0xe>
   11408:	a201      	add	r2, pc, #4	; (adr r2, 11410 <nrf_modem_os_errno_set+0x140>)
   1140a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1140e:	bf00      	nop
   11410:	00011547 	.word	0x00011547
   11414:	000112df 	.word	0x000112df
   11418:	000112df 	.word	0x000112df
   1141c:	000112df 	.word	0x000112df
   11420:	000112df 	.word	0x000112df
   11424:	000112df 	.word	0x000112df
   11428:	000112df 	.word	0x000112df
   1142c:	0001154f 	.word	0x0001154f
   11430:	000112df 	.word	0x000112df
   11434:	0001155f 	.word	0x0001155f
   11438:	00011557 	.word	0x00011557
   1143c:	000112df 	.word	0x000112df
   11440:	000112df 	.word	0x000112df
   11444:	000112df 	.word	0x000112df
   11448:	000112df 	.word	0x000112df
   1144c:	000112df 	.word	0x000112df
   11450:	000112df 	.word	0x000112df
   11454:	000112df 	.word	0x000112df
   11458:	000112df 	.word	0x000112df
   1145c:	000112df 	.word	0x000112df
   11460:	00011567 	.word	0x00011567
   11464:	0001156f 	.word	0x0001156f
   11468:	00011579 	.word	0x00011579
   1146c:	00011583 	.word	0x00011583
   11470:	0001158d 	.word	0x0001158d
		errno = EPERM;
   11474:	f007 ffd4 	bl	19420 <__errno>
   11478:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   1147a:	6003      	str	r3, [r0, #0]
}
   1147c:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   1147e:	f007 ffcf 	bl	19420 <__errno>
   11482:	2302      	movs	r3, #2
   11484:	e7f9      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EIO;
   11486:	f007 ffcb 	bl	19420 <__errno>
   1148a:	2305      	movs	r3, #5
   1148c:	e7f5      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = ENOEXEC;
   1148e:	f007 ffc7 	bl	19420 <__errno>
   11492:	2308      	movs	r3, #8
   11494:	e7f1      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EBADF;
   11496:	f007 ffc3 	bl	19420 <__errno>
   1149a:	2309      	movs	r3, #9
   1149c:	e7ed      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = ENOMEM;
   1149e:	f007 ffbf 	bl	19420 <__errno>
   114a2:	230c      	movs	r3, #12
   114a4:	e7e9      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EACCES;
   114a6:	f007 ffbb 	bl	19420 <__errno>
   114aa:	230d      	movs	r3, #13
   114ac:	e7e5      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EFAULT;
   114ae:	f007 ffb7 	bl	19420 <__errno>
   114b2:	230e      	movs	r3, #14
   114b4:	e7e1      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EINVAL;
   114b6:	f007 ffb3 	bl	19420 <__errno>
   114ba:	2316      	movs	r3, #22
   114bc:	e7dd      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EMFILE;
   114be:	f007 ffaf 	bl	19420 <__errno>
   114c2:	2318      	movs	r3, #24
   114c4:	e7d9      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EAGAIN;
   114c6:	f007 ffab 	bl	19420 <__errno>
   114ca:	230b      	movs	r3, #11
   114cc:	e7d5      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EDOM;
   114ce:	f007 ffa7 	bl	19420 <__errno>
   114d2:	2321      	movs	r3, #33	; 0x21
   114d4:	e7d1      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EPROTOTYPE;
   114d6:	f007 ffa3 	bl	19420 <__errno>
   114da:	236b      	movs	r3, #107	; 0x6b
   114dc:	e7cd      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = ENOPROTOOPT;
   114de:	f007 ff9f 	bl	19420 <__errno>
   114e2:	236d      	movs	r3, #109	; 0x6d
   114e4:	e7c9      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EPROTONOSUPPORT;
   114e6:	f007 ff9b 	bl	19420 <__errno>
   114ea:	237b      	movs	r3, #123	; 0x7b
   114ec:	e7c5      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = ESOCKTNOSUPPORT;
   114ee:	f007 ff97 	bl	19420 <__errno>
   114f2:	237c      	movs	r3, #124	; 0x7c
   114f4:	e7c1      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EOPNOTSUPP;
   114f6:	f007 ff93 	bl	19420 <__errno>
   114fa:	235f      	movs	r3, #95	; 0x5f
   114fc:	e7bd      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EAFNOSUPPORT;
   114fe:	f007 ff8f 	bl	19420 <__errno>
   11502:	236a      	movs	r3, #106	; 0x6a
   11504:	e7b9      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EADDRINUSE;
   11506:	f007 ff8b 	bl	19420 <__errno>
   1150a:	2370      	movs	r3, #112	; 0x70
   1150c:	e7b5      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = ENETDOWN;
   1150e:	f007 ff87 	bl	19420 <__errno>
   11512:	2373      	movs	r3, #115	; 0x73
   11514:	e7b1      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = ENETUNREACH;
   11516:	f007 ff83 	bl	19420 <__errno>
   1151a:	2372      	movs	r3, #114	; 0x72
   1151c:	e7ad      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = ENETRESET;
   1151e:	f007 ff7f 	bl	19420 <__errno>
   11522:	237e      	movs	r3, #126	; 0x7e
   11524:	e7a9      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = ECONNRESET;
   11526:	f007 ff7b 	bl	19420 <__errno>
   1152a:	2368      	movs	r3, #104	; 0x68
   1152c:	e7a5      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EISCONN;
   1152e:	f007 ff77 	bl	19420 <__errno>
   11532:	237f      	movs	r3, #127	; 0x7f
   11534:	e7a1      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = ENOTCONN;
   11536:	f007 ff73 	bl	19420 <__errno>
   1153a:	2380      	movs	r3, #128	; 0x80
   1153c:	e79d      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = ETIMEDOUT;
   1153e:	f007 ff6f 	bl	19420 <__errno>
   11542:	2374      	movs	r3, #116	; 0x74
   11544:	e799      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = ENOBUFS;
   11546:	f007 ff6b 	bl	19420 <__errno>
   1154a:	2369      	movs	r3, #105	; 0x69
   1154c:	e795      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EHOSTDOWN;
   1154e:	f007 ff67 	bl	19420 <__errno>
   11552:	2375      	movs	r3, #117	; 0x75
   11554:	e791      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EINPROGRESS;
   11556:	f007 ff63 	bl	19420 <__errno>
   1155a:	2377      	movs	r3, #119	; 0x77
   1155c:	e78d      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EALREADY;
   1155e:	f007 ff5f 	bl	19420 <__errno>
   11562:	2378      	movs	r3, #120	; 0x78
   11564:	e789      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = ECANCELED;
   11566:	f007 ff5b 	bl	19420 <__errno>
   1156a:	238c      	movs	r3, #140	; 0x8c
   1156c:	e785      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = ENOKEY;
   1156e:	f007 ff57 	bl	19420 <__errno>
   11572:	f240 73d1 	movw	r3, #2001	; 0x7d1
   11576:	e780      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EKEYEXPIRED;
   11578:	f007 ff52 	bl	19420 <__errno>
   1157c:	f240 73d2 	movw	r3, #2002	; 0x7d2
   11580:	e77b      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EKEYREVOKED;
   11582:	f007 ff4d 	bl	19420 <__errno>
   11586:	f240 73d3 	movw	r3, #2003	; 0x7d3
   1158a:	e776      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EKEYREJECTED;
   1158c:	f007 ff48 	bl	19420 <__errno>
   11590:	f240 73d4 	movw	r3, #2004	; 0x7d4
   11594:	e771      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = EMSGSIZE;
   11596:	f007 ff43 	bl	19420 <__errno>
   1159a:	237a      	movs	r3, #122	; 0x7a
   1159c:	e76d      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
		errno = ECONNABORTED;
   1159e:	f007 ff3f 	bl	19420 <__errno>
   115a2:	2371      	movs	r3, #113	; 0x71
   115a4:	e769      	b.n	1147a <nrf_modem_os_errno_set+0x1aa>
   115a6:	bf00      	nop
   115a8:	0001c0d4 	.word	0x0001c0d4
   115ac:	0001c12c 	.word	0x0001c12c
   115b0:	0001cf4c 	.word	0x0001cf4c
   115b4:	baadbaad 	.word	0xbaadbaad

000115b8 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   115b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   115bc:	4b01      	ldr	r3, [pc, #4]	; (115c4 <nrf_modem_os_application_irq_set+0xc>)
   115be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   115c2:	4770      	bx	lr
   115c4:	e000e100 	.word	0xe000e100

000115c8 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   115c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   115cc:	4b01      	ldr	r3, [pc, #4]	; (115d4 <nrf_modem_os_application_irq_clear+0xc>)
   115ce:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   115d2:	4770      	bx	lr
   115d4:	e000e100 	.word	0xe000e100

000115d8 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   115d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   115dc:	4b01      	ldr	r3, [pc, #4]	; (115e4 <nrf_modem_os_trace_irq_set+0xc>)
   115de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   115e2:	4770      	bx	lr
   115e4:	e000e100 	.word	0xe000e100

000115e8 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   115e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   115ec:	4b01      	ldr	r3, [pc, #4]	; (115f4 <nrf_modem_os_trace_irq_clear+0xc>)
   115ee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   115f2:	4770      	bx	lr
   115f4:	e000e100 	.word	0xe000e100

000115f8 <nrf_modem_os_alloc>:
	nrfx_uarte_init(&uarte_inst, &config, NULL);
#endif
}

void *nrf_modem_os_alloc(size_t bytes)
{
   115f8:	b507      	push	{r0, r1, r2, lr}
   115fa:	4602      	mov	r2, r0
	return k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   115fc:	2100      	movs	r1, #0
   115fe:	2000      	movs	r0, #0
   11600:	e9cd 0100 	strd	r0, r1, [sp]
   11604:	2104      	movs	r1, #4
   11606:	4803      	ldr	r0, [pc, #12]	; (11614 <nrf_modem_os_alloc+0x1c>)
   11608:	f009 feba 	bl	1b380 <k_heap_aligned_alloc>
	} else {
		heap_diag.failed_allocs++;
	}
#endif
	return addr;
}
   1160c:	b003      	add	sp, #12
   1160e:	f85d fb04 	ldr.w	pc, [sp], #4
   11612:	bf00      	nop
   11614:	2001469c 	.word	0x2001469c

00011618 <nrf_modem_os_free>:

void nrf_modem_os_free(void *mem)
{
   11618:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   1161a:	4801      	ldr	r0, [pc, #4]	; (11620 <nrf_modem_os_free+0x8>)
   1161c:	f009 bef7 	b.w	1b40e <k_heap_free>
   11620:	2001469c 	.word	0x2001469c

00011624 <nrf_modem_os_shm_tx_alloc>:
	LOG_INF("free(%p)", mem);
#endif
}

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   11624:	b507      	push	{r0, r1, r2, lr}
   11626:	4602      	mov	r2, r0
   11628:	2100      	movs	r1, #0
   1162a:	2000      	movs	r0, #0
   1162c:	e9cd 0100 	strd	r0, r1, [sp]
   11630:	2104      	movs	r1, #4
   11632:	4803      	ldr	r0, [pc, #12]	; (11640 <nrf_modem_os_shm_tx_alloc+0x1c>)
   11634:	f009 fea4 	bl	1b380 <k_heap_aligned_alloc>
	} else {
		shmem_diag.failed_allocs++;
	}
#endif
	return addr;
}
   11638:	b003      	add	sp, #12
   1163a:	f85d fb04 	ldr.w	pc, [sp], #4
   1163e:	bf00      	nop
   11640:	200152cc 	.word	0x200152cc

00011644 <nrf_modem_os_shm_tx_free>:

void nrf_modem_os_shm_tx_free(void *mem)
{
   11644:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   11646:	4801      	ldr	r0, [pc, #4]	; (1164c <nrf_modem_os_shm_tx_free+0x8>)
   11648:	f009 bee1 	b.w	1b40e <k_heap_free>
   1164c:	200152cc 	.word	0x200152cc

00011650 <nrf_modem_os_init>:
}
#endif

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   11650:	b510      	push	{r4, lr}
	list->head = NULL;
   11652:	2400      	movs	r4, #0
   11654:	4b0c      	ldr	r3, [pc, #48]	; (11688 <nrf_modem_os_init+0x38>)
	list->tail = NULL;
   11656:	e9c3 4400 	strd	r4, r4, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1165a:	4b0c      	ldr	r3, [pc, #48]	; (1168c <nrf_modem_os_init+0x3c>)
   1165c:	e8d3 2fef 	ldaex	r2, [r3]
   11660:	e8c3 4fe1 	stlex	r1, r4, [r3]
   11664:	2900      	cmp	r1, #0
   11666:	d1f9      	bne.n	1165c <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   11668:	f008 f8f7 	bl	1985a <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
   1166c:	f008 f8ea 	bl	19844 <trace_task_create>

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   11670:	4b07      	ldr	r3, [pc, #28]	; (11690 <nrf_modem_os_init+0x40>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   11672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	memset(&heap_diag, 0x00, sizeof(heap_diag));
   11676:	601c      	str	r4, [r3, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   11678:	4b06      	ldr	r3, [pc, #24]	; (11694 <nrf_modem_os_init+0x44>)
	k_heap_init(&shmem_heap,
   1167a:	4907      	ldr	r1, [pc, #28]	; (11698 <nrf_modem_os_init+0x48>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   1167c:	601c      	str	r4, [r3, #0]
	k_heap_init(&shmem_heap,
   1167e:	4807      	ldr	r0, [pc, #28]	; (1169c <nrf_modem_os_init+0x4c>)
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_delayed_work_init(&heap_task.work, diag_task);
	k_delayed_work_submit(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   11680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_heap_init(&shmem_heap,
   11684:	f009 be73 	b.w	1b36e <k_heap_init>
   11688:	200152e0 	.word	0x200152e0
   1168c:	200152c4 	.word	0x200152c4
   11690:	200150c0 	.word	0x200150c0
   11694:	200152c8 	.word	0x200152c8
   11698:	200104e8 	.word	0x200104e8
   1169c:	200152cc 	.word	0x200152cc

000116a0 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   116a0:	f240 2302 	movw	r3, #514	; 0x202
   116a4:	4298      	cmp	r0, r3
   116a6:	f000 8093 	beq.w	117d0 <z_to_nrf_optname+0x130>
   116aa:	dc07      	bgt.n	116bc <z_to_nrf_optname+0x1c>
   116ac:	2801      	cmp	r0, #1
   116ae:	d04d      	beq.n	1174c <z_to_nrf_optname+0xac>
   116b0:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   116b4:	d034      	beq.n	11720 <z_to_nrf_optname+0x80>
   116b6:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   116ba:	4770      	bx	lr
	switch (z_in_level) {
   116bc:	f240 2303 	movw	r3, #515	; 0x203
   116c0:	4298      	cmp	r0, r3
   116c2:	d1f8      	bne.n	116b6 <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   116c4:	3901      	subs	r1, #1
   116c6:	2913      	cmp	r1, #19
   116c8:	d8f5      	bhi.n	116b6 <z_to_nrf_optname+0x16>
   116ca:	a301      	add	r3, pc, #4	; (adr r3, 116d0 <z_to_nrf_optname+0x30>)
   116cc:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   116d0:	000117df 	.word	0x000117df
   116d4:	000117b9 	.word	0x000117b9
   116d8:	000117bd 	.word	0x000117bd
   116dc:	0001175d 	.word	0x0001175d
   116e0:	000117c1 	.word	0x000117c1
   116e4:	000117c5 	.word	0x000117c5
   116e8:	000117c9 	.word	0x000117c9
   116ec:	000116b7 	.word	0x000116b7
   116f0:	000116b7 	.word	0x000116b7
   116f4:	000116b7 	.word	0x000116b7
   116f8:	000116b7 	.word	0x000116b7
   116fc:	000116b7 	.word	0x000116b7
   11700:	000116b7 	.word	0x000116b7
   11704:	000116b7 	.word	0x000116b7
   11708:	000116b7 	.word	0x000116b7
   1170c:	000116b7 	.word	0x000116b7
   11710:	000116b7 	.word	0x000116b7
   11714:	000116b7 	.word	0x000116b7
   11718:	000116b7 	.word	0x000116b7
   1171c:	000117cd 	.word	0x000117cd
		switch (z_in_optname) {
   11720:	3901      	subs	r1, #1
   11722:	2907      	cmp	r1, #7
   11724:	d8c7      	bhi.n	116b6 <z_to_nrf_optname+0x16>
   11726:	a301      	add	r3, pc, #4	; (adr r3, 1172c <z_to_nrf_optname+0x8c>)
   11728:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1172c:	000117b9 	.word	0x000117b9
   11730:	000117c1 	.word	0x000117c1
   11734:	000117c5 	.word	0x000117c5
   11738:	000117c9 	.word	0x000117c9
   1173c:	0001175d 	.word	0x0001175d
   11740:	000117df 	.word	0x000117df
   11744:	000116b7 	.word	0x000116b7
   11748:	000117bd 	.word	0x000117bd
		switch (z_in_optname) {
   1174c:	2920      	cmp	r1, #32
   1174e:	dcb2      	bgt.n	116b6 <z_to_nrf_optname+0x16>
   11750:	2913      	cmp	r1, #19
   11752:	dc05      	bgt.n	11760 <z_to_nrf_optname+0xc0>
   11754:	2902      	cmp	r1, #2
   11756:	d027      	beq.n	117a8 <z_to_nrf_optname+0x108>
   11758:	2904      	cmp	r1, #4
   1175a:	d1ac      	bne.n	116b6 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   1175c:	2304      	movs	r3, #4
   1175e:	e03f      	b.n	117e0 <z_to_nrf_optname+0x140>
   11760:	3914      	subs	r1, #20
   11762:	290c      	cmp	r1, #12
   11764:	d8a7      	bhi.n	116b6 <z_to_nrf_optname+0x16>
   11766:	a301      	add	r3, pc, #4	; (adr r3, 1176c <z_to_nrf_optname+0xcc>)
   11768:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1176c:	000117cd 	.word	0x000117cd
   11770:	000117a1 	.word	0x000117a1
   11774:	000116b7 	.word	0x000116b7
   11778:	000116b7 	.word	0x000116b7
   1177c:	000116b7 	.word	0x000116b7
   11780:	000117a5 	.word	0x000117a5
   11784:	000116b7 	.word	0x000116b7
   11788:	000116b7 	.word	0x000116b7
   1178c:	000116b7 	.word	0x000116b7
   11790:	000116b7 	.word	0x000116b7
   11794:	000117ad 	.word	0x000117ad
   11798:	000117b1 	.word	0x000117b1
   1179c:	000117b5 	.word	0x000117b5
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   117a0:	2315      	movs	r3, #21
   117a2:	e01d      	b.n	117e0 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   117a4:	2319      	movs	r3, #25
   117a6:	e01b      	b.n	117e0 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   117a8:	2328      	movs	r3, #40	; 0x28
   117aa:	e019      	b.n	117e0 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   117ac:	231e      	movs	r3, #30
   117ae:	e017      	b.n	117e0 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_IP_ECHO_REPLY;
   117b0:	231f      	movs	r3, #31
   117b2:	e015      	b.n	117e0 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   117b4:	2320      	movs	r3, #32
   117b6:	e013      	b.n	117e0 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   117b8:	2302      	movs	r3, #2
   117ba:	e011      	b.n	117e0 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   117bc:	2303      	movs	r3, #3
   117be:	e00f      	b.n	117e0 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   117c0:	2305      	movs	r3, #5
   117c2:	e00d      	b.n	117e0 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   117c4:	2306      	movs	r3, #6
   117c6:	e00b      	b.n	117e0 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   117c8:	2307      	movs	r3, #7
   117ca:	e009      	b.n	117e0 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   117cc:	2314      	movs	r3, #20
   117ce:	e007      	b.n	117e0 <z_to_nrf_optname+0x140>
		switch (z_in_optname) {
   117d0:	2902      	cmp	r1, #2
   117d2:	d0f1      	beq.n	117b8 <z_to_nrf_optname+0x118>
   117d4:	2903      	cmp	r1, #3
   117d6:	d0f1      	beq.n	117bc <z_to_nrf_optname+0x11c>
   117d8:	2901      	cmp	r1, #1
   117da:	f47f af6c 	bne.w	116b6 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   117de:	2301      	movs	r3, #1
	int retval = 0;
   117e0:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   117e2:	6013      	str	r3, [r2, #0]
			break;
   117e4:	4770      	bx	lr
   117e6:	bf00      	nop

000117e8 <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   117e8:	f240 1303 	movw	r3, #259	; 0x103
{
   117ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   117f0:	4299      	cmp	r1, r3
{
   117f2:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   117f4:	f000 8097 	beq.w	11926 <nrf91_socket_offload_ioctl+0x13e>
   117f8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   117fc:	d005      	beq.n	1180a <nrf91_socket_offload_ioctl+0x22>
   117fe:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   11802:	d171      	bne.n	118e8 <nrf91_socket_offload_ioctl+0x100>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   11804:	f06f 0411 	mvn.w	r4, #17
   11808:	e01d      	b.n	11846 <nrf91_socket_offload_ioctl+0x5e>
	for (int i = 0; i < nfds; i++) {
   1180a:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   1180e:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   11812:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   11814:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   11818:	4668      	mov	r0, sp
   1181a:	2240      	movs	r2, #64	; 0x40
   1181c:	f00a f943 	bl	1baa6 <memset>
	for (int i = 0; i < nfds; i++) {
   11820:	466e      	mov	r6, sp
   11822:	4655      	mov	r5, sl
   11824:	4657      	mov	r7, sl
	int retval = 0;
   11826:	4644      	mov	r4, r8
		tmp[i].events = 0;
   11828:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   1182a:	4940      	ldr	r1, [pc, #256]	; (1192c <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   1182c:	45c1      	cmp	r9, r8
   1182e:	dc0e      	bgt.n	1184e <nrf91_socket_offload_ioctl+0x66>
	if (retval > 0) {
   11830:	2c00      	cmp	r4, #0
   11832:	dc08      	bgt.n	11846 <nrf91_socket_offload_ioctl+0x5e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   11834:	465a      	mov	r2, fp
   11836:	4649      	mov	r1, r9
   11838:	4668      	mov	r0, sp
   1183a:	f009 fd54 	bl	1b2e6 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1183e:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   11840:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   11842:	4599      	cmp	r9, r3
   11844:	dc28      	bgt.n	11898 <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   11846:	4620      	mov	r0, r4
   11848:	b011      	add	sp, #68	; 0x44
   1184a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   1184e:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   11850:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   11852:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   11854:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   11856:	da05      	bge.n	11864 <nrf91_socket_offload_ioctl+0x7c>
			tmp[i].fd = fds[i].fd;
   11858:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   1185a:	f108 0801 	add.w	r8, r8, #1
   1185e:	3608      	adds	r6, #8
   11860:	3708      	adds	r7, #8
   11862:	e7e3      	b.n	1182c <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   11864:	2286      	movs	r2, #134	; 0x86
   11866:	f7fc f855 	bl	d914 <z_get_fd_obj>
			if (obj != NULL) {
   1186a:	2300      	movs	r3, #0
   1186c:	492f      	ldr	r1, [pc, #188]	; (1192c <nrf91_socket_offload_ioctl+0x144>)
   1186e:	b178      	cbz	r0, 11890 <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   11870:	3801      	subs	r0, #1
   11872:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   11874:	88b8      	ldrh	r0, [r7, #4]
   11876:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   11878:	bf42      	ittt	mi
   1187a:	88b2      	ldrhmi	r2, [r6, #4]
   1187c:	f042 0201 	orrmi.w	r2, r2, #1
   11880:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   11882:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   11884:	bf42      	ittt	mi
   11886:	88b2      	ldrhmi	r2, [r6, #4]
   11888:	f042 0202 	orrmi.w	r2, r2, #2
   1188c:	80b2      	strhmi	r2, [r6, #4]
   1188e:	e7e4      	b.n	1185a <nrf91_socket_offload_ioctl+0x72>
				fds[i].revents = POLLNVAL;
   11890:	2220      	movs	r2, #32
				retval++;
   11892:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   11894:	80fa      	strh	r2, [r7, #6]
				retval++;
   11896:	e7ed      	b.n	11874 <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   11898:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   1189c:	2a00      	cmp	r2, #0
   1189e:	db20      	blt.n	118e2 <nrf91_socket_offload_ioctl+0xfa>
		if (tmp[i].revents & NRF_POLLIN) {
   118a0:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   118a4:	88d2      	ldrh	r2, [r2, #6]
   118a6:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   118a8:	bf42      	ittt	mi
   118aa:	88e9      	ldrhmi	r1, [r5, #6]
   118ac:	f041 0101 	orrmi.w	r1, r1, #1
   118b0:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   118b2:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   118b4:	bf42      	ittt	mi
   118b6:	88e9      	ldrhmi	r1, [r5, #6]
   118b8:	f041 0104 	orrmi.w	r1, r1, #4
   118bc:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   118be:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   118c0:	bf42      	ittt	mi
   118c2:	88e9      	ldrhmi	r1, [r5, #6]
   118c4:	f041 0108 	orrmi.w	r1, r1, #8
   118c8:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   118ca:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   118cc:	bf42      	ittt	mi
   118ce:	88e9      	ldrhmi	r1, [r5, #6]
   118d0:	f041 0120 	orrmi.w	r1, r1, #32
   118d4:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   118d6:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   118d8:	bf42      	ittt	mi
   118da:	88ea      	ldrhmi	r2, [r5, #6]
   118dc:	f042 0210 	orrmi.w	r2, r2, #16
   118e0:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   118e2:	3301      	adds	r3, #1
   118e4:	3508      	adds	r5, #8
   118e6:	e7ac      	b.n	11842 <nrf91_socket_offload_ioctl+0x5a>
	switch (cmd) {
   118e8:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   118ea:	f100 30ff 	add.w	r0, r0, #4294967295
	switch (cmd) {
   118ee:	d00b      	beq.n	11908 <nrf91_socket_offload_ioctl+0x120>
   118f0:	2904      	cmp	r1, #4
   118f2:	d111      	bne.n	11918 <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   118f4:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   118f6:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   118fa:	d10d      	bne.n	11918 <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   118fc:	2101      	movs	r1, #1
   118fe:	1392      	asrs	r2, r2, #14
   11900:	f009 fcf3 	bl	1b2ea <nrf_fcntl>
   11904:	4604      	mov	r4, r0
		break;
   11906:	e79e      	b.n	11846 <nrf91_socket_offload_ioctl+0x5e>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   11908:	2200      	movs	r2, #0
   1190a:	2102      	movs	r1, #2
   1190c:	f009 fced 	bl	1b2ea <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   11910:	0380      	lsls	r0, r0, #14
   11912:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   11916:	e796      	b.n	11846 <nrf91_socket_offload_ioctl+0x5e>
	errno = EINVAL;
   11918:	f007 fd82 	bl	19420 <__errno>
   1191c:	2316      	movs	r3, #22
	return retval;
   1191e:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   11922:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   11924:	e78f      	b.n	11846 <nrf91_socket_offload_ioctl+0x5e>
	switch (request) {
   11926:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1192a:	e78c      	b.n	11846 <nrf91_socket_offload_ioctl+0x5e>
   1192c:	0001c334 	.word	0x0001c334

00011930 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   11930:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   11932:	4b03      	ldr	r3, [pc, #12]	; (11940 <nrf91_socket_iface_init+0x10>)
   11934:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   11936:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   11938:	4802      	ldr	r0, [pc, #8]	; (11944 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   1193a:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1193c:	f7fd be12 	b.w	f564 <socket_offload_dns_register>
   11940:	20015338 	.word	0x20015338
   11944:	0001c32c 	.word	0x0001c32c

00011948 <nrf91_socket_offload_accept>:
{
   11948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1194c:	b08a      	sub	sp, #40	; 0x28
   1194e:	4607      	mov	r7, r0
   11950:	460c      	mov	r4, r1
   11952:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   11954:	f7fc f80e 	bl	d974 <z_reserve_fd>
   11958:	4606      	mov	r6, r0
	if (fd < 0) {
   1195a:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   1195c:	f107 30ff 	add.w	r0, r7, #4294967295
	if (fd < 0) {
   11960:	da05      	bge.n	1196e <nrf91_socket_offload_accept+0x26>
	return -1;
   11962:	f04f 36ff 	mov.w	r6, #4294967295
}
   11966:	4630      	mov	r0, r6
   11968:	b00a      	add	sp, #40	; 0x28
   1196a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   1196e:	b31c      	cbz	r4, 119b8 <nrf91_socket_offload_accept+0x70>
   11970:	b32d      	cbz	r5, 119be <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   11972:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   11974:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   11976:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   11978:	bf0c      	ite	eq
   1197a:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1197c:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1197e:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   11980:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   11982:	4639      	mov	r1, r7
   11984:	f009 fc51 	bl	1b22a <nrf_accept>
	if (new_sd < 0) {
   11988:	f1b0 0800 	subs.w	r8, r0, #0
   1198c:	dbe9      	blt.n	11962 <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   1198e:	b164      	cbz	r4, 119aa <nrf91_socket_offload_accept+0x62>
   11990:	b15d      	cbz	r5, 119aa <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   11992:	687b      	ldr	r3, [r7, #4]
   11994:	2b02      	cmp	r3, #2
   11996:	d115      	bne.n	119c4 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   11998:	2308      	movs	r3, #8
   1199a:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   1199c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   119a0:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   119a2:	2301      	movs	r3, #1
   119a4:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   119a6:	9b04      	ldr	r3, [sp, #16]
   119a8:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   119aa:	4630      	mov	r0, r6
   119ac:	4a0c      	ldr	r2, [pc, #48]	; (119e0 <nrf91_socket_offload_accept+0x98>)
   119ae:	f108 0101 	add.w	r1, r8, #1
   119b2:	f7fc f811 	bl	d9d8 <z_finalize_fd>
	return fd;
   119b6:	e7d6      	b.n	11966 <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   119b8:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   119ba:	4627      	mov	r7, r4
   119bc:	e7e1      	b.n	11982 <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   119be:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   119c0:	462f      	mov	r7, r5
   119c2:	e7de      	b.n	11982 <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   119c4:	2b0a      	cmp	r3, #10
   119c6:	d106      	bne.n	119d6 <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   119c8:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   119ca:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   119cc:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   119ce:	a901      	add	r1, sp, #4
   119d0:	f008 f846 	bl	19a60 <nrf_to_z_ipv6>
   119d4:	e7e9      	b.n	119aa <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   119d6:	4630      	mov	r0, r6
   119d8:	f7fc f808 	bl	d9ec <z_free_fd>
   119dc:	e7c1      	b.n	11962 <nrf91_socket_offload_accept+0x1a>
   119de:	bf00      	nop
   119e0:	0001c334 	.word	0x0001c334

000119e4 <nrf91_socket_offload_sendmsg>:
{
   119e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   119e8:	4680      	mov	r8, r0
   119ea:	4691      	mov	r9, r2
	if (msg == NULL) {
   119ec:	460c      	mov	r4, r1
   119ee:	b1f9      	cbz	r1, 11a30 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   119f0:	2300      	movs	r3, #0
	ssize_t len = 0;
   119f2:	461a      	mov	r2, r3
   119f4:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   119f6:	4283      	cmp	r3, r0
   119f8:	d124      	bne.n	11a44 <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   119fa:	2a80      	cmp	r2, #128	; 0x80
   119fc:	d86d      	bhi.n	11ada <_flash_used+0x76>
		for (i = 0; i < msg->msg_iovlen; i++) {
   119fe:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   11a00:	f04f 32ff 	mov.w	r2, #4294967295
   11a04:	f04f 33ff 	mov.w	r3, #4294967295
   11a08:	4836      	ldr	r0, [pc, #216]	; (11ae4 <_flash_used+0x80>)
   11a0a:	f005 f869 	bl	16ae0 <z_impl_k_mutex_lock>
		len = 0;
   11a0e:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   11a10:	4e35      	ldr	r6, [pc, #212]	; (11ae8 <_flash_used+0x84>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   11a12:	68e3      	ldr	r3, [r4, #12]
   11a14:	429d      	cmp	r5, r3
   11a16:	d31c      	bcc.n	11a52 <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   11a18:	2600      	movs	r6, #0
		ret = 0;
   11a1a:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   11a1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 11ae8 <_flash_used+0x84>
		while ((offset < len) && (ret >= 0)) {
   11a20:	42b7      	cmp	r7, r6
   11a22:	dd01      	ble.n	11a28 <nrf91_socket_offload_sendmsg+0x44>
   11a24:	2d00      	cmp	r5, #0
   11a26:	da25      	bge.n	11a74 <_flash_used+0x10>
	return z_impl_k_mutex_unlock(mutex);
   11a28:	482e      	ldr	r0, [pc, #184]	; (11ae4 <_flash_used+0x80>)
   11a2a:	f005 f8d1 	bl	16bd0 <z_impl_k_mutex_unlock>
		return ret;
   11a2e:	e005      	b.n	11a3c <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   11a30:	f007 fcf6 	bl	19420 <__errno>
   11a34:	2316      	movs	r3, #22
		return -1;
   11a36:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   11a3a:	6003      	str	r3, [r0, #0]
}
   11a3c:	4628      	mov	r0, r5
   11a3e:	b002      	add	sp, #8
   11a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   11a44:	68a1      	ldr	r1, [r4, #8]
   11a46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   11a4a:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   11a4c:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   11a4e:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   11a50:	e7d1      	b.n	119f6 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   11a52:	68a1      	ldr	r1, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11a54:	19f0      	adds	r0, r6, r7
   11a56:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   11a5a:	685a      	ldr	r2, [r3, #4]
   11a5c:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   11a60:	f00a f814 	bl	1ba8c <memcpy>
			len += msg->msg_iov[i].iov_len;
   11a64:	68a3      	ldr	r3, [r4, #8]
   11a66:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   11a6a:	4453      	add	r3, sl
   11a6c:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   11a6e:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   11a70:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   11a72:	e7ce      	b.n	11a12 <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   11a74:	6863      	ldr	r3, [r4, #4]
   11a76:	1bba      	subs	r2, r7, r6
   11a78:	9301      	str	r3, [sp, #4]
   11a7a:	6823      	ldr	r3, [r4, #0]
   11a7c:	eb0a 0106 	add.w	r1, sl, r6
   11a80:	9300      	str	r3, [sp, #0]
   11a82:	4640      	mov	r0, r8
   11a84:	464b      	mov	r3, r9
   11a86:	f008 f857 	bl	19b38 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   11a8a:	1e05      	subs	r5, r0, #0
				offset += ret;
   11a8c:	bfc8      	it	gt
   11a8e:	1976      	addgt	r6, r6, r5
   11a90:	e7c6      	b.n	11a20 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   11a92:	68a3      	ldr	r3, [r4, #8]
   11a94:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   11a98:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   11a9c:	685b      	ldr	r3, [r3, #4]
   11a9e:	b133      	cbz	r3, 11aae <_flash_used+0x4a>
		offset = 0;
   11aa0:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   11aa2:	68a3      	ldr	r3, [r4, #8]
   11aa4:	eb03 020a 	add.w	r2, r3, sl
   11aa8:	6852      	ldr	r2, [r2, #4]
   11aaa:	4297      	cmp	r7, r2
   11aac:	d304      	bcc.n	11ab8 <_flash_used+0x54>
	for (i = 0; i < msg->msg_iovlen; i++) {
   11aae:	3601      	adds	r6, #1
   11ab0:	68e3      	ldr	r3, [r4, #12]
   11ab2:	429e      	cmp	r6, r3
   11ab4:	d3ed      	bcc.n	11a92 <_flash_used+0x2e>
   11ab6:	e7c1      	b.n	11a3c <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   11ab8:	f853 100a 	ldr.w	r1, [r3, sl]
   11abc:	6863      	ldr	r3, [r4, #4]
   11abe:	4640      	mov	r0, r8
   11ac0:	9301      	str	r3, [sp, #4]
   11ac2:	6823      	ldr	r3, [r4, #0]
   11ac4:	1bd2      	subs	r2, r2, r7
   11ac6:	9300      	str	r3, [sp, #0]
   11ac8:	4439      	add	r1, r7
   11aca:	464b      	mov	r3, r9
   11acc:	f008 f834 	bl	19b38 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   11ad0:	1e03      	subs	r3, r0, #0
   11ad2:	db05      	blt.n	11ae0 <_flash_used+0x7c>
			offset += ret;
   11ad4:	441f      	add	r7, r3
			len += ret;
   11ad6:	441d      	add	r5, r3
   11ad8:	e7e3      	b.n	11aa2 <_flash_used+0x3e>
	for (i = 0; i < msg->msg_iovlen; i++) {
   11ada:	2600      	movs	r6, #0
	len = 0;
   11adc:	4635      	mov	r5, r6
   11ade:	e7e7      	b.n	11ab0 <_flash_used+0x4c>
			ret = nrf91_socket_offload_sendto(obj,
   11ae0:	461d      	mov	r5, r3
   11ae2:	e7ab      	b.n	11a3c <nrf91_socket_offload_sendmsg+0x58>
   11ae4:	20014714 	.word	0x20014714
   11ae8:	200166f9 	.word	0x200166f9

00011aec <nrf91_socket_offload_getaddrinfo>:
{
   11aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11af0:	4614      	mov	r4, r2
   11af2:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   11af4:	2100      	movs	r1, #0
{
   11af6:	b093      	sub	sp, #76	; 0x4c
   11af8:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   11afa:	2220      	movs	r2, #32
   11afc:	a802      	add	r0, sp, #8
{
   11afe:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   11b00:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   11b02:	f009 ffd0 	bl	1baa6 <memset>
	if (hints != NULL) {
   11b06:	b194      	cbz	r4, 11b2e <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   11b08:	4620      	mov	r0, r4
   11b0a:	a902      	add	r1, sp, #8
   11b0c:	f007 ff83 	bl	19a16 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   11b10:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   11b14:	f000 80e3 	beq.w	11cde <nrf91_socket_offload_getaddrinfo+0x1f2>
		} else if (error == -EAFNOSUPPORT) {
   11b18:	306a      	adds	r0, #106	; 0x6a
   11b1a:	f000 80e3 	beq.w	11ce4 <nrf91_socket_offload_getaddrinfo+0x1f8>
		if (hints->ai_next != NULL) {
   11b1e:	6820      	ldr	r0, [r4, #0]
   11b20:	b120      	cbz	r0, 11b2c <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   11b22:	ac0a      	add	r4, sp, #40	; 0x28
   11b24:	4621      	mov	r1, r4
   11b26:	f007 ff76 	bl	19a16 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   11b2a:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   11b2c:	ac02      	add	r4, sp, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   11b2e:	f04f 32ff 	mov.w	r2, #4294967295
   11b32:	f04f 33ff 	mov.w	r3, #4294967295
   11b36:	486d      	ldr	r0, [pc, #436]	; (11cec <nrf91_socket_offload_getaddrinfo+0x200>)
   11b38:	f004 ffd2 	bl	16ae0 <z_impl_k_mutex_lock>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   11b3c:	4628      	mov	r0, r5
   11b3e:	4622      	mov	r2, r4
   11b40:	4631      	mov	r1, r6
   11b42:	ab01      	add	r3, sp, #4
   11b44:	f009 fbcb 	bl	1b2de <nrf_getaddrinfo>
	if (retval != 0) {
   11b48:	4605      	mov	r5, r0
   11b4a:	b318      	cbz	r0, 11b94 <nrf91_socket_offload_getaddrinfo+0xa8>
	switch (nrf_error) {
   11b4c:	282f      	cmp	r0, #47	; 0x2f
   11b4e:	f000 80c0 	beq.w	11cd2 <nrf91_socket_offload_getaddrinfo+0x1e6>
   11b52:	dc0f      	bgt.n	11b74 <nrf91_socket_offload_getaddrinfo+0x88>
   11b54:	280c      	cmp	r0, #12
   11b56:	f000 80bf 	beq.w	11cd8 <nrf91_socket_offload_getaddrinfo+0x1ec>
		return DNS_EAI_AGAIN;
   11b5a:	2823      	cmp	r0, #35	; 0x23
   11b5c:	bf14      	ite	ne
   11b5e:	f06f 050a 	mvnne.w	r5, #10
   11b62:	f06f 0502 	mvneq.w	r5, #2
	return z_impl_k_mutex_unlock(mutex);
   11b66:	4861      	ldr	r0, [pc, #388]	; (11cec <nrf91_socket_offload_getaddrinfo+0x200>)
   11b68:	f005 f832 	bl	16bd0 <z_impl_k_mutex_unlock>
}
   11b6c:	4628      	mov	r0, r5
   11b6e:	b013      	add	sp, #76	; 0x4c
   11b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   11b74:	2833      	cmp	r0, #51	; 0x33
   11b76:	d006      	beq.n	11b86 <nrf91_socket_offload_getaddrinfo+0x9a>
		return DNS_EAI_INPROGRESS;
   11b78:	2873      	cmp	r0, #115	; 0x73
   11b7a:	bf14      	ite	ne
   11b7c:	f06f 050a 	mvnne.w	r5, #10
   11b80:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   11b84:	e7ef      	b.n	11b66 <nrf91_socket_offload_getaddrinfo+0x7a>
		errno = ENETUNREACH;
   11b86:	f007 fc4b 	bl	19420 <__errno>
   11b8a:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   11b8c:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   11b90:	6003      	str	r3, [r0, #0]
   11b92:	e7e8      	b.n	11b66 <nrf91_socket_offload_getaddrinfo+0x7a>
	struct zsock_addrinfo *latest_z_res = NULL;
   11b94:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   11b96:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   11b98:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   11b9a:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   11b9c:	b91e      	cbnz	r6, 11ba6 <nrf91_socket_offload_getaddrinfo+0xba>
	nrf_freeaddrinfo(nrf_res);
   11b9e:	9801      	ldr	r0, [sp, #4]
   11ba0:	f009 fb9f 	bl	1b2e2 <nrf_freeaddrinfo>
   11ba4:	e7df      	b.n	11b66 <nrf91_socket_offload_getaddrinfo+0x7a>
	return k_aligned_alloc(sizeof(void *), size);
   11ba6:	2150      	movs	r1, #80	; 0x50
   11ba8:	2004      	movs	r0, #4
   11baa:	f005 ffbb 	bl	17b24 <k_aligned_alloc>
		if (next_z_res == NULL) {
   11bae:	4604      	mov	r4, r0
   11bb0:	2800      	cmp	r0, #0
   11bb2:	f000 8083 	beq.w	11cbc <nrf91_socket_offload_getaddrinfo+0x1d0>
	family = nrf_to_z_family(nrf_in->ai_family);
   11bb6:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   11bb8:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   11bba:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   11bbc:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   11bc0:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   11bc4:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   11bc8:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   11bca:	dc23      	bgt.n	11c14 <nrf91_socket_offload_getaddrinfo+0x128>
   11bcc:	2900      	cmp	r1, #0
   11bce:	dd23      	ble.n	11c18 <nrf91_socket_offload_getaddrinfo+0x12c>
   11bd0:	1e4b      	subs	r3, r1, #1
   11bd2:	2b09      	cmp	r3, #9
   11bd4:	d820      	bhi.n	11c18 <nrf91_socket_offload_getaddrinfo+0x12c>
   11bd6:	e8df f003 	tbb	[pc, r3]
   11bda:	2905      	.short	0x2905
   11bdc:	1f251f1f 	.word	0x1f251f1f
   11be0:	271f1f1f 	.word	0x271f1f1f
		return AF_LOCAL;
   11be4:	2306      	movs	r3, #6
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   11be6:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   11be8:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   11bea:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   11bee:	d04c      	beq.n	11c8a <nrf91_socket_offload_getaddrinfo+0x19e>
   11bf0:	dc26      	bgt.n	11c40 <nrf91_socket_offload_getaddrinfo+0x154>
   11bf2:	2a02      	cmp	r2, #2
   11bf4:	d04d      	beq.n	11c92 <nrf91_socket_offload_getaddrinfo+0x1a6>
   11bf6:	dc1d      	bgt.n	11c34 <nrf91_socket_offload_getaddrinfo+0x148>
   11bf8:	b372      	cbz	r2, 11c58 <nrf91_socket_offload_getaddrinfo+0x16c>
   11bfa:	2a01      	cmp	r2, #1
   11bfc:	d04b      	beq.n	11c96 <nrf91_socket_offload_getaddrinfo+0x1aa>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   11bfe:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   11c02:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   11c04:	2300      	movs	r3, #0
   11c06:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   11c08:	4620      	mov	r0, r4
   11c0a:	f009 ff14 	bl	1ba36 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   11c0e:	f06f 0506 	mvn.w	r5, #6
   11c12:	e055      	b.n	11cc0 <nrf91_socket_offload_getaddrinfo+0x1d4>
	switch (nrf_family) {
   11c14:	2966      	cmp	r1, #102	; 0x66
   11c16:	d00b      	beq.n	11c30 <nrf91_socket_offload_getaddrinfo+0x144>
			k_free(next_z_res);
   11c18:	4620      	mov	r0, r4
   11c1a:	f009 ff0c 	bl	1ba36 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   11c1e:	f06f 0508 	mvn.w	r5, #8
   11c22:	e04d      	b.n	11cc0 <nrf91_socket_offload_getaddrinfo+0x1d4>
		return AF_PACKET;
   11c24:	2303      	movs	r3, #3
   11c26:	e7de      	b.n	11be6 <nrf91_socket_offload_getaddrinfo+0xfa>
		return AF_INET6;
   11c28:	2302      	movs	r3, #2
   11c2a:	e7dc      	b.n	11be6 <nrf91_socket_offload_getaddrinfo+0xfa>
	switch (nrf_family) {
   11c2c:	2301      	movs	r3, #1
   11c2e:	e7da      	b.n	11be6 <nrf91_socket_offload_getaddrinfo+0xfa>
		return AF_LTE;
   11c30:	460b      	mov	r3, r1
   11c32:	e7d8      	b.n	11be6 <nrf91_socket_offload_getaddrinfo+0xfa>
	switch (proto) {
   11c34:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   11c38:	d1e1      	bne.n	11bfe <nrf91_socket_offload_getaddrinfo+0x112>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   11c3a:	f44f 7381 	mov.w	r3, #258	; 0x102
   11c3e:	e026      	b.n	11c8e <nrf91_socket_offload_getaddrinfo+0x1a2>
	switch (proto) {
   11c40:	f240 2302 	movw	r3, #514	; 0x202
   11c44:	429a      	cmp	r2, r3
   11c46:	d007      	beq.n	11c58 <nrf91_socket_offload_getaddrinfo+0x16c>
   11c48:	f240 2303 	movw	r3, #515	; 0x203
   11c4c:	429a      	cmp	r2, r3
   11c4e:	d003      	beq.n	11c58 <nrf91_socket_offload_getaddrinfo+0x16c>
   11c50:	f240 2301 	movw	r3, #513	; 0x201
   11c54:	429a      	cmp	r2, r3
   11c56:	d1d2      	bne.n	11bfe <nrf91_socket_offload_getaddrinfo+0x112>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   11c58:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   11c5a:	2902      	cmp	r1, #2
   11c5c:	d11d      	bne.n	11c9a <nrf91_socket_offload_getaddrinfo+0x1ae>
   11c5e:	2108      	movs	r1, #8
   11c60:	2004      	movs	r0, #4
   11c62:	f005 ff5f 	bl	17b24 <k_aligned_alloc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   11c66:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   11c68:	b328      	cbz	r0, 11cb6 <nrf91_socket_offload_getaddrinfo+0x1ca>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   11c6a:	2308      	movs	r3, #8
   11c6c:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   11c6e:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   11c70:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   11c72:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   11c74:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   11c76:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   11c78:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   11c7a:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   11c7c:	f1b8 0f00 	cmp.w	r8, #0
   11c80:	d124      	bne.n	11ccc <nrf91_socket_offload_getaddrinfo+0x1e0>
			*res = next_z_res;
   11c82:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   11c84:	46a0      	mov	r8, r4
   11c86:	69f6      	ldr	r6, [r6, #28]
   11c88:	e788      	b.n	11b9c <nrf91_socket_offload_getaddrinfo+0xb0>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   11c8a:	f240 1311 	movw	r3, #273	; 0x111
   11c8e:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   11c90:	e7e3      	b.n	11c5a <nrf91_socket_offload_getaddrinfo+0x16e>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   11c92:	2311      	movs	r3, #17
   11c94:	e7fb      	b.n	11c8e <nrf91_socket_offload_getaddrinfo+0x1a2>
   11c96:	2306      	movs	r3, #6
   11c98:	e7f9      	b.n	11c8e <nrf91_socket_offload_getaddrinfo+0x1a2>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   11c9a:	290a      	cmp	r1, #10
   11c9c:	d1b4      	bne.n	11c08 <nrf91_socket_offload_getaddrinfo+0x11c>
   11c9e:	2118      	movs	r1, #24
   11ca0:	2004      	movs	r0, #4
   11ca2:	f005 ff3f 	bl	17b24 <k_aligned_alloc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   11ca6:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   11ca8:	b128      	cbz	r0, 11cb6 <nrf91_socket_offload_getaddrinfo+0x1ca>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   11caa:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   11cac:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   11cae:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   11cb0:	f007 fed6 	bl	19a60 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   11cb4:	e7e2      	b.n	11c7c <nrf91_socket_offload_getaddrinfo+0x190>
			k_free(next_z_res);
   11cb6:	4620      	mov	r0, r4
   11cb8:	f009 febd 	bl	1ba36 <k_free>
			retval = DNS_EAI_MEMORY;
   11cbc:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   11cc0:	6838      	ldr	r0, [r7, #0]
   11cc2:	f007 fe9b 	bl	199fc <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   11cc6:	2300      	movs	r3, #0
   11cc8:	603b      	str	r3, [r7, #0]
   11cca:	e768      	b.n	11b9e <nrf91_socket_offload_getaddrinfo+0xb2>
			latest_z_res->ai_next = next_z_res;
   11ccc:	f8c8 4000 	str.w	r4, [r8]
   11cd0:	e7d8      	b.n	11c84 <nrf91_socket_offload_getaddrinfo+0x198>
		return DNS_EAI_NONAME;
   11cd2:	f06f 0501 	mvn.w	r5, #1
   11cd6:	e746      	b.n	11b66 <nrf91_socket_offload_getaddrinfo+0x7a>
		return DNS_EAI_MEMORY;
   11cd8:	f06f 0509 	mvn.w	r5, #9
   11cdc:	e743      	b.n	11b66 <nrf91_socket_offload_getaddrinfo+0x7a>
			return DNS_EAI_SOCKTYPE;
   11cde:	f06f 0506 	mvn.w	r5, #6
   11ce2:	e743      	b.n	11b6c <nrf91_socket_offload_getaddrinfo+0x80>
			return DNS_EAI_ADDRFAMILY;
   11ce4:	f06f 0508 	mvn.w	r5, #8
   11ce8:	e740      	b.n	11b6c <nrf91_socket_offload_getaddrinfo+0x80>
   11cea:	bf00      	nop
   11cec:	200146d8 	.word	0x200146d8

00011cf0 <nrf91_socket_create>:
{
   11cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cf2:	4606      	mov	r6, r0
   11cf4:	460d      	mov	r5, r1
   11cf6:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   11cf8:	f7fb fe3c 	bl	d974 <z_reserve_fd>
	if (fd < 0) {
   11cfc:	1e04      	subs	r4, r0, #0
   11cfe:	db0d      	blt.n	11d1c <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   11d00:	b2b0      	uxth	r0, r6
   11d02:	f007 fdc9 	bl	19898 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   11d06:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   11d0a:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   11d0c:	d109      	bne.n	11d22 <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   11d0e:	f007 fb87 	bl	19420 <__errno>
   11d12:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   11d14:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   11d16:	4620      	mov	r0, r4
   11d18:	f7fb fe68 	bl	d9ec <z_free_fd>
		return -1;
   11d1c:	f04f 34ff 	mov.w	r4, #4294967295
   11d20:	e01b      	b.n	11d5a <nrf91_socket_create+0x6a>
	switch (socktype) {
   11d22:	2d03      	cmp	r5, #3
   11d24:	d003      	beq.n	11d2e <nrf91_socket_create+0x3e>
   11d26:	2d04      	cmp	r5, #4
   11d28:	bf08      	it	eq
   11d2a:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   11d2e:	4638      	mov	r0, r7
   11d30:	f007 fdce 	bl	198d0 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   11d34:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   11d38:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   11d3a:	d103      	bne.n	11d44 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   11d3c:	f007 fb70 	bl	19420 <__errno>
   11d40:	237b      	movs	r3, #123	; 0x7b
   11d42:	e7e7      	b.n	11d14 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   11d44:	4629      	mov	r1, r5
   11d46:	4630      	mov	r0, r6
   11d48:	f009 f9f9 	bl	1b13e <nrf_socket>
	if (sd < 0) {
   11d4c:	1e01      	subs	r1, r0, #0
   11d4e:	dbe2      	blt.n	11d16 <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   11d50:	4620      	mov	r0, r4
   11d52:	4a03      	ldr	r2, [pc, #12]	; (11d60 <nrf91_socket_create+0x70>)
   11d54:	3101      	adds	r1, #1
   11d56:	f7fb fe3f 	bl	d9d8 <z_finalize_fd>
}
   11d5a:	4620      	mov	r0, r4
   11d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d5e:	bf00      	nop
   11d60:	0001c334 	.word	0x0001c334

00011d64 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   11d64:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&family, *(uintptr_t *)&type, *(uintptr_t *)&proto, K_SYSCALL_ZSOCK_SOCKET);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_socket(family, type, proto);
   11d66:	f240 2201 	movw	r2, #513	; 0x201
   11d6a:	2102      	movs	r1, #2
   11d6c:	2066      	movs	r0, #102	; 0x66
   11d6e:	f7fd fbd3 	bl	f518 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   11d72:	4b05      	ldr	r3, [pc, #20]	; (11d88 <open_socket+0x24>)
   11d74:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   11d76:	3001      	adds	r0, #1
   11d78:	d104      	bne.n	11d84 <open_socket+0x20>
		return -errno;
   11d7a:	f007 fb51 	bl	19420 <__errno>
   11d7e:	6800      	ldr	r0, [r0, #0]
   11d80:	4240      	negs	r0, r0
	}

	return 0;
}
   11d82:	bd08      	pop	{r3, pc}
	return 0;
   11d84:	2000      	movs	r0, #0
   11d86:	e7fc      	b.n	11d82 <open_socket+0x1e>
   11d88:	2001533c 	.word	0x2001533c

00011d8c <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   11d8c:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   11d8e:	4d17      	ldr	r5, [pc, #92]	; (11dec <at_cmd_driver_init+0x60>)
{
   11d90:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   11d92:	782b      	ldrb	r3, [r5, #0]
   11d94:	bb43      	cbnz	r3, 11de8 <at_cmd_driver_init+0x5c>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   11d96:	f7ff ffe5 	bl	11d64 <open_socket>
	if (err) {
   11d9a:	4604      	mov	r4, r0
   11d9c:	b168      	cbz	r0, 11dba <at_cmd_driver_init+0x2e>
   11d9e:	4a14      	ldr	r2, [pc, #80]	; (11df0 <at_cmd_driver_init+0x64>)
   11da0:	4b14      	ldr	r3, [pc, #80]	; (11df4 <at_cmd_driver_init+0x68>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   11da2:	4601      	mov	r1, r0
   11da4:	1ad2      	subs	r2, r2, r3
   11da6:	08d2      	lsrs	r2, r2, #3
   11da8:	0192      	lsls	r2, r2, #6
   11daa:	4813      	ldr	r0, [pc, #76]	; (11df8 <at_cmd_driver_init+0x6c>)
   11dac:	f042 0201 	orr.w	r2, r2, #1
   11db0:	f006 ff35 	bl	18c1e <log_1>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   11db4:	4620      	mov	r0, r4
   11db6:	b009      	add	sp, #36	; 0x24
   11db8:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11dba:	2200      	movs	r2, #0
   11dbc:	2300      	movs	r3, #0
   11dbe:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11dc2:	230a      	movs	r3, #10
   11dc4:	e9cd 0000 	strd	r0, r0, [sp]
   11dc8:	e9cd 0302 	strd	r0, r3, [sp, #8]
   11dcc:	9004      	str	r0, [sp, #16]
   11dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11dd2:	4b0a      	ldr	r3, [pc, #40]	; (11dfc <at_cmd_driver_init+0x70>)
   11dd4:	490a      	ldr	r1, [pc, #40]	; (11e00 <at_cmd_driver_init+0x74>)
   11dd6:	480b      	ldr	r0, [pc, #44]	; (11e04 <at_cmd_driver_init+0x78>)
   11dd8:	f005 fbac 	bl	17534 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   11ddc:	490a      	ldr	r1, [pc, #40]	; (11e08 <at_cmd_driver_init+0x7c>)
   11dde:	f009 fce9 	bl	1b7b4 <z_impl_k_thread_name_set>
	initialized = true;
   11de2:	2301      	movs	r3, #1
   11de4:	702b      	strb	r3, [r5, #0]
	return 0;
   11de6:	e7e5      	b.n	11db4 <at_cmd_driver_init+0x28>
		return 0;
   11de8:	2400      	movs	r4, #0
   11dea:	e7e3      	b.n	11db4 <at_cmd_driver_init+0x28>
   11dec:	20017205 	.word	0x20017205
   11df0:	0001c0dc 	.word	0x0001c0dc
   11df4:	0001c0d4 	.word	0x0001c0d4
   11df8:	0001cfa7 	.word	0x0001cfa7
   11dfc:	00011f2d 	.word	0x00011f2d
   11e00:	20018770 	.word	0x20018770
   11e04:	200148c8 	.word	0x200148c8
   11e08:	0001cfc9 	.word	0x0001cfc9

00011e0c <complete_cmd>:
{
   11e0c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   11e0e:	4c08      	ldr	r4, [pc, #32]	; (11e30 <complete_cmd+0x24>)
   11e10:	f04f 32ff 	mov.w	r2, #4294967295
   11e14:	f04f 33ff 	mov.w	r3, #4294967295
   11e18:	4620      	mov	r0, r4
   11e1a:	f004 fe61 	bl	16ae0 <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   11e1e:	2200      	movs	r2, #0
   11e20:	4b04      	ldr	r3, [pc, #16]	; (11e34 <complete_cmd+0x28>)
   11e22:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   11e24:	4620      	mov	r0, r4
}
   11e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11e2a:	f004 bed1 	b.w	16bd0 <z_impl_k_mutex_unlock>
   11e2e:	bf00      	nop
   11e30:	200146b0 	.word	0x200146b0
   11e34:	20015340 	.word	0x20015340

00011e38 <load_cmd_and_write>:
{
   11e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e3c:	b086      	sub	sp, #24
		if (current_cmd.cmd != NULL ||
   11e3e:	4e32      	ldr	r6, [pc, #200]	; (11f08 <load_cmd_and_write+0xd0>)
	return z_impl_k_mutex_lock(mutex, timeout);
   11e40:	f04f 33ff 	mov.w	r3, #4294967295
   11e44:	4637      	mov	r7, r6
   11e46:	f04f 32ff 	mov.w	r2, #4294967295
   11e4a:	4830      	ldr	r0, [pc, #192]	; (11f0c <load_cmd_and_write+0xd4>)
   11e4c:	f004 fe48 	bl	16ae0 <z_impl_k_mutex_lock>
   11e50:	4d2f      	ldr	r5, [pc, #188]	; (11f10 <load_cmd_and_write+0xd8>)
   11e52:	4b30      	ldr	r3, [pc, #192]	; (11f14 <load_cmd_and_write+0xdc>)
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   11e54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 11f28 <load_cmd_and_write+0xf0>
   11e58:	1aed      	subs	r5, r5, r3
   11e5a:	08ed      	lsrs	r5, r5, #3
   11e5c:	6833      	ldr	r3, [r6, #0]
   11e5e:	2b00      	cmp	r3, #0
   11e60:	d14b      	bne.n	11efa <load_cmd_and_write+0xc2>
   11e62:	2200      	movs	r2, #0
   11e64:	2300      	movs	r3, #0
   11e66:	4631      	mov	r1, r6
   11e68:	4640      	mov	r0, r8
   11e6a:	f004 fddb 	bl	16a24 <z_impl_k_msgq_get>
   11e6e:	4604      	mov	r4, r0
   11e70:	2800      	cmp	r0, #0
   11e72:	d142      	bne.n	11efa <load_cmd_and_write+0xc2>
		ret = at_write(current_cmd.cmd);
   11e74:	6831      	ldr	r1, [r6, #0]
	int bytes_to_send = strlen(cmd);
   11e76:	4608      	mov	r0, r1
   11e78:	9103      	str	r1, [sp, #12]
   11e7a:	f7fa ff81 	bl	cd80 <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   11e7e:	4b26      	ldr	r3, [pc, #152]	; (11f18 <load_cmd_and_write+0xe0>)
	int bytes_to_send = strlen(cmd);
   11e80:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   11e82:	6818      	ldr	r0, [r3, #0]
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   11e84:	9903      	ldr	r1, [sp, #12]
   11e86:	4623      	mov	r3, r4
   11e88:	e9cd 4400 	strd	r4, r4, [sp]
   11e8c:	9202      	str	r2, [sp, #8]
   11e8e:	f007 f9b2 	bl	191f6 <z_impl_zsock_sendto>
   11e92:	4601      	mov	r1, r0
	if (bytes_sent == -1) {
   11e94:	1c48      	adds	r0, r1, #1
   11e96:	9a02      	ldr	r2, [sp, #8]
   11e98:	d126      	bne.n	11ee8 <load_cmd_and_write+0xb0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   11e9a:	f007 fac1 	bl	19420 <__errno>
   11e9e:	01ac      	lsls	r4, r5, #6
   11ea0:	f044 0401 	orr.w	r4, r4, #1
   11ea4:	4622      	mov	r2, r4
   11ea6:	6801      	ldr	r1, [r0, #0]
   11ea8:	481c      	ldr	r0, [pc, #112]	; (11f1c <load_cmd_and_write+0xe4>)
   11eaa:	f006 feb8 	bl	18c1e <log_1>
		return -errno;
   11eae:	f007 fab7 	bl	19420 <__errno>
   11eb2:	6804      	ldr	r4, [r0, #0]
   11eb4:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   11eb6:	7c3b      	ldrb	r3, [r7, #16]
   11eb8:	07da      	lsls	r2, r3, #31
   11eba:	d502      	bpl.n	11ec2 <load_cmd_and_write+0x8a>
			k_free(current_cmd.cmd);
   11ebc:	6838      	ldr	r0, [r7, #0]
   11ebe:	f009 fdba 	bl	1ba36 <k_free>
		if (ret != 0) {
   11ec2:	b1d4      	cbz	r4, 11efa <load_cmd_and_write+0xc2>
			resp.state = AT_CMD_ERROR_WRITE;
   11ec4:	2305      	movs	r3, #5
   11ec6:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   11eca:	7c3b      	ldrb	r3, [r7, #16]
			resp.code = ret;
   11ecc:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   11ece:	079b      	lsls	r3, r3, #30
   11ed0:	d507      	bpl.n	11ee2 <load_cmd_and_write+0xaa>
	return z_impl_k_msgq_put(msgq, data, timeout);
   11ed2:	f04f 32ff 	mov.w	r2, #4294967295
   11ed6:	f04f 33ff 	mov.w	r3, #4294967295
   11eda:	4811      	ldr	r0, [pc, #68]	; (11f20 <load_cmd_and_write+0xe8>)
   11edc:	a904      	add	r1, sp, #16
   11ede:	f004 fd4d 	bl	1697c <z_impl_k_msgq_put>
			complete_cmd();
   11ee2:	f7ff ff93 	bl	11e0c <complete_cmd>
	} while (ret != 0);
   11ee6:	e7b9      	b.n	11e5c <load_cmd_and_write+0x24>
	if (bytes_sent != bytes_to_send) {
   11ee8:	428a      	cmp	r2, r1
   11eea:	d0e4      	beq.n	11eb6 <load_cmd_and_write+0x7e>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   11eec:	01ab      	lsls	r3, r5, #6
   11eee:	480d      	ldr	r0, [pc, #52]	; (11f24 <load_cmd_and_write+0xec>)
   11ef0:	f043 0302 	orr.w	r3, r3, #2
   11ef4:	f006 feaa 	bl	18c4c <log_2>
   11ef8:	e7dd      	b.n	11eb6 <load_cmd_and_write+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   11efa:	4804      	ldr	r0, [pc, #16]	; (11f0c <load_cmd_and_write+0xd4>)
   11efc:	f004 fe68 	bl	16bd0 <z_impl_k_mutex_unlock>
}
   11f00:	b006      	add	sp, #24
   11f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f06:	bf00      	nop
   11f08:	20015340 	.word	0x20015340
   11f0c:	200146b0 	.word	0x200146b0
   11f10:	0001c0dc 	.word	0x0001c0dc
   11f14:	0001c0d4 	.word	0x0001c0d4
   11f18:	2001533c 	.word	0x2001533c
   11f1c:	0001cfde 	.word	0x0001cfde
   11f20:	20014750 	.word	0x20014750
   11f24:	0001d001 	.word	0x0001d001
   11f28:	20014728 	.word	0x20014728

00011f2c <socket_thread_fn>:
{
   11f2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   11f30:	f8df 9260 	ldr.w	r9, [pc, #608]	; 12194 <socket_thread_fn+0x268>
   11f34:	4f83      	ldr	r7, [pc, #524]	; (12144 <socket_thread_fn+0x218>)
   11f36:	46ca      	mov	sl, r9
   11f38:	4b83      	ldr	r3, [pc, #524]	; (12148 <socket_thread_fn+0x21c>)
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&max_len, *(uintptr_t *)&flags, *(uintptr_t *)&src_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_RECVFROM);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   11f3a:	4e84      	ldr	r6, [pc, #528]	; (1214c <socket_thread_fn+0x220>)
   11f3c:	1aff      	subs	r7, r7, r3
   11f3e:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   11f40:	f7ff ff7a 	bl	11e38 <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   11f44:	f8d9 0000 	ldr.w	r0, [r9]
   11f48:	2500      	movs	r5, #0
   11f4a:	f640 228c 	movw	r2, #2700	; 0xa8c
   11f4e:	462b      	mov	r3, r5
   11f50:	e9cd 5500 	strd	r5, r5, [sp]
   11f54:	497d      	ldr	r1, [pc, #500]	; (1214c <socket_thread_fn+0x220>)
   11f56:	f007 f96b 	bl	19230 <z_impl_zsock_recvfrom>
		ret.code  = 0;
   11f5a:	4c7d      	ldr	r4, [pc, #500]	; (12150 <socket_thread_fn+0x224>)
		if (bytes_read < 0) {
   11f5c:	f1b0 0800 	subs.w	r8, r0, #0
		ret.code  = 0;
   11f60:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   11f62:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   11f64:	da6c      	bge.n	12040 <socket_thread_fn+0x114>
			if (errno == EHOSTDOWN) {
   11f66:	f007 fa5b 	bl	19420 <__errno>
   11f6a:	6803      	ldr	r3, [r0, #0]
   11f6c:	2b75      	cmp	r3, #117	; 0x75
   11f6e:	d122      	bne.n	11fb6 <socket_thread_fn+0x8a>
   11f70:	2301      	movs	r3, #1
   11f72:	4c78      	ldr	r4, [pc, #480]	; (12154 <socket_thread_fn+0x228>)
   11f74:	e8d4 2fef 	ldaex	r2, [r4]
   11f78:	e8c4 3fe1 	stlex	r1, r3, [r4]
   11f7c:	2900      	cmp	r1, #0
   11f7e:	d1f9      	bne.n	11f74 <socket_thread_fn+0x48>
				close(common_socket_fd);
   11f80:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   11f84:	f007 f920 	bl	191c8 <z_impl_zsock_close>
				nrf_modem_lib_shutdown_wait();
   11f88:	f7ff f858 	bl	1103c <nrf_modem_lib_shutdown_wait>
   11f8c:	e8d4 3fef 	ldaex	r3, [r4]
   11f90:	e8c4 5fe2 	stlex	r2, r5, [r4]
   11f94:	2a00      	cmp	r2, #0
   11f96:	d1f9      	bne.n	11f8c <socket_thread_fn+0x60>
				if (open_socket() != 0) {
   11f98:	f7ff fee4 	bl	11d64 <open_socket>
   11f9c:	2800      	cmp	r0, #0
   11f9e:	d0cf      	beq.n	11f40 <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   11fa0:	f007 fa3e 	bl	19420 <__errno>
   11fa4:	01bc      	lsls	r4, r7, #6
   11fa6:	f044 0401 	orr.w	r4, r4, #1
   11faa:	6801      	ldr	r1, [r0, #0]
   11fac:	4622      	mov	r2, r4
   11fae:	486a      	ldr	r0, [pc, #424]	; (12158 <socket_thread_fn+0x22c>)
   11fb0:	f006 fe35 	bl	18c1e <log_1>
   11fb4:	e7c4      	b.n	11f40 <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   11fb6:	f007 fa33 	bl	19420 <__errno>
   11fba:	01bd      	lsls	r5, r7, #6
   11fbc:	f045 0801 	orr.w	r8, r5, #1
   11fc0:	6801      	ldr	r1, [r0, #0]
   11fc2:	4642      	mov	r2, r8
   11fc4:	4865      	ldr	r0, [pc, #404]	; (1215c <socket_thread_fn+0x230>)
   11fc6:	f006 fe2a 	bl	18c1e <log_1>
			if ((close(common_socket_fd) == 0) &&
   11fca:	f8d9 0000 	ldr.w	r0, [r9]
   11fce:	f007 f8fb 	bl	191c8 <z_impl_zsock_close>
   11fd2:	bb28      	cbnz	r0, 12020 <socket_thread_fn+0xf4>
			    (open_socket() == 0)) {
   11fd4:	f7ff fec6 	bl	11d64 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   11fd8:	bb10      	cbnz	r0, 12020 <socket_thread_fn+0xf4>
				LOG_INF("AT socket recovered");
   11fda:	4861      	ldr	r0, [pc, #388]	; (12160 <socket_thread_fn+0x234>)
   11fdc:	f045 0103 	orr.w	r1, r5, #3
   11fe0:	f006 fe0e 	bl	18c00 <log_0>
				ret.state = AT_CMD_ERROR_READ;
   11fe4:	2306      	movs	r3, #6
   11fe6:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   11fe8:	f007 fa1a 	bl	19420 <__errno>
   11fec:	6803      	ldr	r3, [r0, #0]
   11fee:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   11ff0:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   11ff2:	4b5c      	ldr	r3, [pc, #368]	; (12164 <socket_thread_fn+0x238>)
   11ff4:	681a      	ldr	r2, [r3, #0]
   11ff6:	b16a      	cbz	r2, 12014 <socket_thread_fn+0xe8>
   11ff8:	7c1b      	ldrb	r3, [r3, #16]
   11ffa:	079b      	lsls	r3, r3, #30
   11ffc:	d50a      	bpl.n	12014 <socket_thread_fn+0xe8>
		    current_cmd.flags & AT_CMD_SYNC &&
   11ffe:	7923      	ldrb	r3, [r4, #4]
   12000:	2b07      	cmp	r3, #7
   12002:	d09d      	beq.n	11f40 <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   12004:	f04f 32ff 	mov.w	r2, #4294967295
   12008:	f04f 33ff 	mov.w	r3, #4294967295
   1200c:	4950      	ldr	r1, [pc, #320]	; (12150 <socket_thread_fn+0x224>)
   1200e:	4856      	ldr	r0, [pc, #344]	; (12168 <socket_thread_fn+0x23c>)
   12010:	f004 fcb4 	bl	1697c <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   12014:	7923      	ldrb	r3, [r4, #4]
   12016:	2b07      	cmp	r3, #7
   12018:	d092      	beq.n	11f40 <socket_thread_fn+0x14>
			complete_cmd();
   1201a:	f7ff fef7 	bl	11e0c <complete_cmd>
   1201e:	e78f      	b.n	11f40 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   12020:	f007 f9fe 	bl	19420 <__errno>
   12024:	f045 0501 	orr.w	r5, r5, #1
   12028:	6801      	ldr	r1, [r0, #0]
   1202a:	462a      	mov	r2, r5
   1202c:	484f      	ldr	r0, [pc, #316]	; (1216c <socket_thread_fn+0x240>)
   1202e:	f006 fdf6 	bl	18c1e <log_1>
			close(common_socket_fd);
   12032:	f8da 0000 	ldr.w	r0, [sl]
}
   12036:	b002      	add	sp, #8
   12038:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1203c:	f007 b8c4 	b.w	191c8 <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   12040:	d10a      	bne.n	12058 <socket_thread_fn+0x12c>
			LOG_ERR("AT message empty");
   12042:	01b9      	lsls	r1, r7, #6
   12044:	484a      	ldr	r0, [pc, #296]	; (12170 <socket_thread_fn+0x244>)
   12046:	f041 0101 	orr.w	r1, r1, #1
   1204a:	f006 fdd9 	bl	18c00 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   1204e:	2306      	movs	r3, #6
   12050:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   12052:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   12056:	e7cb      	b.n	11ff0 <socket_thread_fn+0xc4>
		} else if (buf[bytes_read - 1] != '\0') {
   12058:	eb06 0308 	add.w	r3, r6, r8
   1205c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   12060:	b153      	cbz	r3, 12078 <socket_thread_fn+0x14c>
			LOG_ERR("AT message too large for reception buffer or "
   12062:	01b9      	lsls	r1, r7, #6
   12064:	4843      	ldr	r0, [pc, #268]	; (12174 <socket_thread_fn+0x248>)
   12066:	f041 0101 	orr.w	r1, r1, #1
   1206a:	f006 fdc9 	bl	18c00 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   1206e:	2306      	movs	r3, #6
   12070:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   12072:	f06f 0368 	mvn.w	r3, #104	; 0x68
   12076:	e7bb      	b.n	11ff0 <socket_thread_fn+0xc4>
	ret->state = AT_CMD_NOTIFICATION;
   12078:	2307      	movs	r3, #7
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   1207a:	483f      	ldr	r0, [pc, #252]	; (12178 <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   1207c:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   1207e:	f7fa fe7f 	bl	cd80 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   12082:	f1a8 0505 	sub.w	r5, r8, #5
   12086:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   12088:	4602      	mov	r2, r0
   1208a:	493b      	ldr	r1, [pc, #236]	; (12178 <socket_thread_fn+0x24c>)
   1208c:	4628      	mov	r0, r5
   1208e:	f009 fd39 	bl	1bb04 <strncmp>
		if (match) {
   12092:	b9c0      	cbnz	r0, 120c6 <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   12094:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   12096:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   12098:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   1209a:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   1209c:	3201      	adds	r2, #1
   1209e:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   120a0:	4d30      	ldr	r5, [pc, #192]	; (12164 <socket_thread_fn+0x238>)
   120a2:	682b      	ldr	r3, [r5, #0]
   120a4:	2b00      	cmp	r3, #0
   120a6:	d043      	beq.n	12130 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   120a8:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   120aa:	2800      	cmp	r0, #0
   120ac:	d040      	beq.n	12130 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   120ae:	7923      	ldrb	r3, [r4, #4]
   120b0:	2b07      	cmp	r3, #7
   120b2:	d12e      	bne.n	12112 <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   120b4:	4b31      	ldr	r3, [pc, #196]	; (1217c <socket_thread_fn+0x250>)
   120b6:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   120b8:	b913      	cbnz	r3, 120c0 <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   120ba:	68ab      	ldr	r3, [r5, #8]
   120bc:	2b00      	cmp	r3, #0
   120be:	d098      	beq.n	11ff2 <socket_thread_fn+0xc6>
			current_cmd.callback(buf);
   120c0:	4630      	mov	r0, r6
   120c2:	4798      	blx	r3
   120c4:	e795      	b.n	11ff2 <socket_thread_fn+0xc6>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   120c6:	4630      	mov	r0, r6
   120c8:	492d      	ldr	r1, [pc, #180]	; (12180 <socket_thread_fn+0x254>)
   120ca:	f009 fd4d 	bl	1bb68 <strstr>
		if (tmpstr) {
   120ce:	4605      	mov	r5, r0
   120d0:	b128      	cbz	r0, 120de <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   120d2:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   120d4:	482b      	ldr	r0, [pc, #172]	; (12184 <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   120d6:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   120d8:	f009 fcb8 	bl	1ba4c <atoi>
   120dc:	e7db      	b.n	12096 <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   120de:	4630      	mov	r0, r6
   120e0:	4929      	ldr	r1, [pc, #164]	; (12188 <socket_thread_fn+0x25c>)
   120e2:	f009 fd41 	bl	1bb68 <strstr>
		if (tmpstr) {
   120e6:	4605      	mov	r5, r0
   120e8:	b108      	cbz	r0, 120ee <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   120ea:	2303      	movs	r3, #3
   120ec:	e7f2      	b.n	120d4 <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   120ee:	4827      	ldr	r0, [pc, #156]	; (1218c <socket_thread_fn+0x260>)
   120f0:	f7fa fe46 	bl	cd80 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   120f4:	f1a8 0508 	sub.w	r5, r8, #8
   120f8:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   120fa:	4602      	mov	r2, r0
   120fc:	4923      	ldr	r1, [pc, #140]	; (1218c <socket_thread_fn+0x260>)
   120fe:	4628      	mov	r0, r5
   12100:	f009 fd00 	bl	1bb04 <strncmp>
		if (match) {
   12104:	b9c0      	cbnz	r0, 12138 <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   12106:	2301      	movs	r3, #1
   12108:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   1210a:	f06f 0307 	mvn.w	r3, #7
   1210e:	6023      	str	r3, [r4, #0]
			break;
   12110:	e7c2      	b.n	12098 <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   12112:	68eb      	ldr	r3, [r5, #12]
   12114:	429a      	cmp	r2, r3
   12116:	d908      	bls.n	1212a <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   12118:	01b9      	lsls	r1, r7, #6
   1211a:	481d      	ldr	r0, [pc, #116]	; (12190 <socket_thread_fn+0x264>)
   1211c:	f041 0101 	orr.w	r1, r1, #1
   12120:	f006 fd6e 	bl	18c00 <log_0>
				ret.code  = -EMSGSIZE;
   12124:	f06f 0379 	mvn.w	r3, #121	; 0x79
   12128:	e762      	b.n	11ff0 <socket_thread_fn+0xc4>
   1212a:	4631      	mov	r1, r6
   1212c:	f009 fcae 	bl	1ba8c <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   12130:	7923      	ldrb	r3, [r4, #4]
   12132:	2b07      	cmp	r3, #7
   12134:	d1c1      	bne.n	120ba <socket_thread_fn+0x18e>
   12136:	e7bd      	b.n	120b4 <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   12138:	4630      	mov	r0, r6
   1213a:	f7fa fe21 	bl	cd80 <strlen>
   1213e:	1c42      	adds	r2, r0, #1
   12140:	e7ae      	b.n	120a0 <socket_thread_fn+0x174>
   12142:	bf00      	nop
   12144:	0001c0dc 	.word	0x0001c0dc
   12148:	0001c0d4 	.word	0x0001c0d4
   1214c:	20016779 	.word	0x20016779
   12150:	20015358 	.word	0x20015358
   12154:	20015360 	.word	0x20015360
   12158:	0001d033 	.word	0x0001d033
   1215c:	0001d06e 	.word	0x0001d06e
   12160:	0001d090 	.word	0x0001d090
   12164:	20015340 	.word	0x20015340
   12168:	20014750 	.word	0x20014750
   1216c:	0001d0a4 	.word	0x0001d0a4
   12170:	0001d0db 	.word	0x0001d0db
   12174:	0001d0ec 	.word	0x0001d0ec
   12178:	0001d137 	.word	0x0001d137
   1217c:	20015354 	.word	0x20015354
   12180:	0001d13c 	.word	0x0001d13c
   12184:	20016784 	.word	0x20016784
   12188:	0001d148 	.word	0x0001d148
   1218c:	0001d154 	.word	0x0001d154
   12190:	0001d15c 	.word	0x0001d15c
   12194:	2001533c 	.word	0x2001533c

00012198 <at_cmd_write>:
{
   12198:	b530      	push	{r4, r5, lr}
   1219a:	461c      	mov	r4, r3
   1219c:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1219e:	4b32      	ldr	r3, [pc, #200]	; (12268 <at_cmd_write+0xd0>)
   121a0:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   121a4:	2b01      	cmp	r3, #1
   121a6:	d05c      	beq.n	12262 <at_cmd_write+0xca>
	if (cmd == NULL) {
   121a8:	b160      	cbz	r0, 121c4 <at_cmd_write+0x2c>
   121aa:	1e45      	subs	r5, r0, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   121ac:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   121b0:	b9d3      	cbnz	r3, 121e8 <at_cmd_write+0x50>
   121b2:	492e      	ldr	r1, [pc, #184]	; (1226c <at_cmd_write+0xd4>)
   121b4:	4b2e      	ldr	r3, [pc, #184]	; (12270 <at_cmd_write+0xd8>)
		LOG_ERR("Invalid command");
   121b6:	482f      	ldr	r0, [pc, #188]	; (12274 <at_cmd_write+0xdc>)
   121b8:	1ac9      	subs	r1, r1, r3
   121ba:	08c9      	lsrs	r1, r1, #3
   121bc:	0189      	lsls	r1, r1, #6
   121be:	f041 0101 	orr.w	r1, r1, #1
   121c2:	e007      	b.n	121d4 <at_cmd_write+0x3c>
   121c4:	4929      	ldr	r1, [pc, #164]	; (1226c <at_cmd_write+0xd4>)
   121c6:	4b2a      	ldr	r3, [pc, #168]	; (12270 <at_cmd_write+0xd8>)
		LOG_ERR("cmd is NULL");
   121c8:	482b      	ldr	r0, [pc, #172]	; (12278 <at_cmd_write+0xe0>)
   121ca:	1ac9      	subs	r1, r1, r3
   121cc:	08c9      	lsrs	r1, r1, #3
   121ce:	0189      	lsls	r1, r1, #6
   121d0:	f041 0101 	orr.w	r1, r1, #1
   121d4:	f006 fd14 	bl	18c00 <log_0>
		if (state) {
   121d8:	b91c      	cbnz	r4, 121e2 <at_cmd_write+0x4a>
		return -EINVAL;
   121da:	f06f 0015 	mvn.w	r0, #21
}
   121de:	b009      	add	sp, #36	; 0x24
   121e0:	bd30      	pop	{r4, r5, pc}
			*state = AT_CMD_ERROR_QUEUE;
   121e2:	2304      	movs	r3, #4
   121e4:	7023      	strb	r3, [r4, #0]
   121e6:	e7f8      	b.n	121da <at_cmd_write+0x42>
		if (*c > ' ') {
   121e8:	2b20      	cmp	r3, #32
   121ea:	d9df      	bls.n	121ac <at_cmd_write+0x14>
	command.callback = NULL;
   121ec:	2300      	movs	r3, #0
   121ee:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   121f0:	2302      	movs	r3, #2
	command.resp = buf;
   121f2:	e9cd 0103 	strd	r0, r1, [sp, #12]
	command.resp_size = buf_len;
   121f6:	9206      	str	r2, [sp, #24]
	command.flags = AT_CMD_SYNC;
   121f8:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   121fc:	f04f 32ff 	mov.w	r2, #4294967295
   12200:	f04f 33ff 	mov.w	r3, #4294967295
   12204:	481d      	ldr	r0, [pc, #116]	; (1227c <at_cmd_write+0xe4>)
   12206:	f004 fc6b 	bl	16ae0 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   1220a:	f04f 32ff 	mov.w	r2, #4294967295
   1220e:	a903      	add	r1, sp, #12
   12210:	f04f 33ff 	mov.w	r3, #4294967295
   12214:	481a      	ldr	r0, [pc, #104]	; (12280 <at_cmd_write+0xe8>)
   12216:	f004 fbb1 	bl	1697c <z_impl_k_msgq_put>
   1221a:	4601      	mov	r1, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   1221c:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   1221e:	b170      	cbz	r0, 1223e <at_cmd_write+0xa6>
   12220:	4a12      	ldr	r2, [pc, #72]	; (1226c <at_cmd_write+0xd4>)
   12222:	4b13      	ldr	r3, [pc, #76]	; (12270 <at_cmd_write+0xd8>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   12224:	4817      	ldr	r0, [pc, #92]	; (12284 <at_cmd_write+0xec>)
   12226:	1ad2      	subs	r2, r2, r3
   12228:	08d2      	lsrs	r2, r2, #3
   1222a:	0192      	lsls	r2, r2, #6
   1222c:	f042 0201 	orr.w	r2, r2, #1
   12230:	f006 fcf5 	bl	18c1e <log_1>
		if (state) {
   12234:	b10c      	cbz	r4, 1223a <at_cmd_write+0xa2>
			*state = AT_CMD_ERROR_QUEUE;
   12236:	2304      	movs	r3, #4
		*state = ret.state;
   12238:	7023      	strb	r3, [r4, #0]
	return ret.code;
   1223a:	9801      	ldr	r0, [sp, #4]
   1223c:	e7cf      	b.n	121de <at_cmd_write+0x46>
	load_cmd_and_write();
   1223e:	f7ff fdfb 	bl	11e38 <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   12242:	f04f 32ff 	mov.w	r2, #4294967295
   12246:	f04f 33ff 	mov.w	r3, #4294967295
   1224a:	a901      	add	r1, sp, #4
   1224c:	480e      	ldr	r0, [pc, #56]	; (12288 <at_cmd_write+0xf0>)
   1224e:	f004 fbe9 	bl	16a24 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   12252:	480a      	ldr	r0, [pc, #40]	; (1227c <at_cmd_write+0xe4>)
   12254:	f004 fcbc 	bl	16bd0 <z_impl_k_mutex_unlock>
	if (state) {
   12258:	2c00      	cmp	r4, #0
   1225a:	d0ee      	beq.n	1223a <at_cmd_write+0xa2>
		*state = ret.state;
   1225c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   12260:	e7ea      	b.n	12238 <at_cmd_write+0xa0>
		return -EHOSTDOWN;
   12262:	f06f 0074 	mvn.w	r0, #116	; 0x74
   12266:	e7ba      	b.n	121de <at_cmd_write+0x46>
   12268:	20015360 	.word	0x20015360
   1226c:	0001c0dc 	.word	0x0001c0dc
   12270:	0001c0d4 	.word	0x0001c0d4
   12274:	0001d189 	.word	0x0001d189
   12278:	0001d17d 	.word	0x0001d17d
   1227c:	20014700 	.word	0x20014700
   12280:	20014728 	.word	0x20014728
   12284:	0001d199 	.word	0x0001d199
   12288:	20014750 	.word	0x20014750

0001228c <at_cmd_set_notification_handler>:
{
   1228c:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   1228e:	4c09      	ldr	r4, [pc, #36]	; (122b4 <at_cmd_set_notification_handler+0x28>)
{
   12290:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   12292:	6821      	ldr	r1, [r4, #0]
   12294:	b159      	cbz	r1, 122ae <at_cmd_set_notification_handler+0x22>
   12296:	4281      	cmp	r1, r0
   12298:	d009      	beq.n	122ae <at_cmd_set_notification_handler+0x22>
   1229a:	4a07      	ldr	r2, [pc, #28]	; (122b8 <at_cmd_set_notification_handler+0x2c>)
   1229c:	4b07      	ldr	r3, [pc, #28]	; (122bc <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   1229e:	4808      	ldr	r0, [pc, #32]	; (122c0 <at_cmd_set_notification_handler+0x34>)
   122a0:	1ad2      	subs	r2, r2, r3
   122a2:	08d2      	lsrs	r2, r2, #3
   122a4:	0192      	lsls	r2, r2, #6
   122a6:	f042 0202 	orr.w	r2, r2, #2
   122aa:	f006 fcb8 	bl	18c1e <log_1>
	notification_handler = handler;
   122ae:	6025      	str	r5, [r4, #0]
}
   122b0:	bd38      	pop	{r3, r4, r5, pc}
   122b2:	bf00      	nop
   122b4:	20015354 	.word	0x20015354
   122b8:	0001c0dc 	.word	0x0001c0dc
   122bc:	0001c0d4 	.word	0x0001c0d4
   122c0:	0001d1b9 	.word	0x0001d1b9

000122c4 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   122c4:	4b0f      	ldr	r3, [pc, #60]	; (12304 <find_node+0x40>)
{
   122c6:	b570      	push	{r4, r5, r6, lr}
   122c8:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   122ca:	6818      	ldr	r0, [r3, #0]
   122cc:	b170      	cbz	r0, 122ec <find_node+0x28>
	return node->next;
   122ce:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   122d0:	4603      	mov	r3, r0
   122d2:	2d00      	cmp	r5, #0
   122d4:	4628      	mov	r0, r5
   122d6:	bf38      	it	cc
   122d8:	2000      	movcc	r0, #0
   122da:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   122dc:	685e      	ldr	r6, [r3, #4]
   122de:	428e      	cmp	r6, r1
   122e0:	d105      	bne.n	122ee <find_node+0x2a>
   122e2:	689e      	ldr	r6, [r3, #8]
   122e4:	4296      	cmp	r6, r2
   122e6:	d102      	bne.n	122ee <find_node+0x2a>
			*prev_out = prev;
			return curr;
   122e8:	4618      	mov	r0, r3
			*prev_out = prev;
   122ea:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   122ec:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   122ee:	2800      	cmp	r0, #0
   122f0:	d0fc      	beq.n	122ec <find_node+0x28>
	return node->next;
   122f2:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   122f4:	461d      	mov	r5, r3
   122f6:	2e00      	cmp	r6, #0
   122f8:	4603      	mov	r3, r0
   122fa:	4630      	mov	r0, r6
   122fc:	bf38      	it	cc
   122fe:	2000      	movcc	r0, #0
   12300:	e7ec      	b.n	122dc <find_node+0x18>
   12302:	bf00      	nop
   12304:	20015364 	.word	0x20015364

00012308 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   12308:	4a0c      	ldr	r2, [pc, #48]	; (1233c <module_init+0x34>)
{
   1230a:	b508      	push	{r3, lr}
	if (initialized) {
   1230c:	7813      	ldrb	r3, [r2, #0]
   1230e:	b15b      	cbz	r3, 12328 <module_init+0x20>
   12310:	490b      	ldr	r1, [pc, #44]	; (12340 <module_init+0x38>)
   12312:	4b0c      	ldr	r3, [pc, #48]	; (12344 <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   12314:	480c      	ldr	r0, [pc, #48]	; (12348 <module_init+0x40>)
   12316:	1ac9      	subs	r1, r1, r3
   12318:	08c9      	lsrs	r1, r1, #3
   1231a:	0189      	lsls	r1, r1, #6
   1231c:	f041 0102 	orr.w	r1, r1, #2
   12320:	f006 fc6e 	bl	18c00 <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   12324:	2000      	movs	r0, #0
   12326:	bd08      	pop	{r3, pc}
	initialized = true;
   12328:	2101      	movs	r1, #1
   1232a:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   1232c:	4a07      	ldr	r2, [pc, #28]	; (1234c <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   1232e:	4808      	ldr	r0, [pc, #32]	; (12350 <module_init+0x48>)
	list->tail = NULL;
   12330:	e9c2 3300 	strd	r3, r3, [r2]
   12334:	f7ff ffaa 	bl	1228c <at_cmd_set_notification_handler>
	return 0;
   12338:	e7f4      	b.n	12324 <module_init+0x1c>
   1233a:	bf00      	nop
   1233c:	20017206 	.word	0x20017206
   12340:	0001c0ec 	.word	0x0001c0ec
   12344:	0001c0d4 	.word	0x0001c0d4
   12348:	0001d1e9 	.word	0x0001d1e9
   1234c:	20015364 	.word	0x20015364
   12350:	00012361 	.word	0x00012361

00012354 <k_mutex_unlock.constprop.0>:
   12354:	4801      	ldr	r0, [pc, #4]	; (1235c <k_mutex_unlock.constprop.0+0x8>)
   12356:	f004 bc3b 	b.w	16bd0 <z_impl_k_mutex_unlock>
   1235a:	bf00      	nop
   1235c:	200146ec 	.word	0x200146ec

00012360 <notif_dispatch>:
{
   12360:	b538      	push	{r3, r4, r5, lr}
   12362:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   12364:	f04f 33ff 	mov.w	r3, #4294967295
   12368:	f04f 32ff 	mov.w	r2, #4294967295
   1236c:	480d      	ldr	r0, [pc, #52]	; (123a4 <notif_dispatch+0x44>)
   1236e:	f004 fbb7 	bl	16ae0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12372:	4b0d      	ldr	r3, [pc, #52]	; (123a8 <notif_dispatch+0x48>)
   12374:	681b      	ldr	r3, [r3, #0]
   12376:	b91b      	cbnz	r3, 12380 <notif_dispatch+0x20>
}
   12378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   1237c:	f7ff bfea 	b.w	12354 <k_mutex_unlock.constprop.0>
	return node->next;
   12380:	681c      	ldr	r4, [r3, #0]
   12382:	2c00      	cmp	r4, #0
   12384:	bf38      	it	cc
   12386:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   12388:	4629      	mov	r1, r5
   1238a:	689a      	ldr	r2, [r3, #8]
   1238c:	6858      	ldr	r0, [r3, #4]
   1238e:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12390:	2c00      	cmp	r4, #0
   12392:	d0f1      	beq.n	12378 <notif_dispatch+0x18>
   12394:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12396:	4623      	mov	r3, r4
   12398:	2a00      	cmp	r2, #0
   1239a:	bf38      	it	cc
   1239c:	2200      	movcc	r2, #0
   1239e:	4614      	mov	r4, r2
   123a0:	e7f2      	b.n	12388 <notif_dispatch+0x28>
   123a2:	bf00      	nop
   123a4:	200146ec 	.word	0x200146ec
   123a8:	20015364 	.word	0x20015364

000123ac <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   123ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   123ae:	4606      	mov	r6, r0
	if (handler == NULL) {
   123b0:	460d      	mov	r5, r1
   123b2:	b979      	cbnz	r1, 123d4 <at_notif_register_handler+0x28>
   123b4:	4a1e      	ldr	r2, [pc, #120]	; (12430 <at_notif_register_handler+0x84>)
   123b6:	4b1f      	ldr	r3, [pc, #124]	; (12434 <at_notif_register_handler+0x88>)
   123b8:	1a9b      	subs	r3, r3, r2
   123ba:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   123bc:	019b      	lsls	r3, r3, #6
   123be:	460a      	mov	r2, r1
   123c0:	f043 0301 	orr.w	r3, r3, #1
   123c4:	4601      	mov	r1, r0
   123c6:	481c      	ldr	r0, [pc, #112]	; (12438 <at_notif_register_handler+0x8c>)
   123c8:	f006 fc40 	bl	18c4c <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   123cc:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   123d0:	b002      	add	sp, #8
   123d2:	bd70      	pop	{r4, r5, r6, pc}
   123d4:	f04f 32ff 	mov.w	r2, #4294967295
   123d8:	f04f 33ff 	mov.w	r3, #4294967295
   123dc:	4817      	ldr	r0, [pc, #92]	; (1243c <at_notif_register_handler+0x90>)
   123de:	f004 fb7f 	bl	16ae0 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   123e2:	462a      	mov	r2, r5
   123e4:	4631      	mov	r1, r6
   123e6:	a801      	add	r0, sp, #4
   123e8:	f7ff ff6c 	bl	122c4 <find_node>
   123ec:	4604      	mov	r4, r0
   123ee:	b118      	cbz	r0, 123f8 <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   123f0:	f7ff ffb0 	bl	12354 <k_mutex_unlock.constprop.0>
		return 0;
   123f4:	2000      	movs	r0, #0
   123f6:	e7eb      	b.n	123d0 <at_notif_register_handler+0x24>
   123f8:	210c      	movs	r1, #12
   123fa:	2004      	movs	r0, #4
   123fc:	f005 fb92 	bl	17b24 <k_aligned_alloc>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   12400:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   12402:	b920      	cbnz	r0, 1240e <at_notif_register_handler+0x62>
		k_mutex_unlock(&list_mtx);
   12404:	f7ff ffa6 	bl	12354 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   12408:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1240c:	e7e0      	b.n	123d0 <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   1240e:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   12410:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   12412:	4a0b      	ldr	r2, [pc, #44]	; (12440 <at_notif_register_handler+0x94>)
   12414:	6044      	str	r4, [r0, #4]
   12416:	6084      	str	r4, [r0, #8]
	parent->next = child;
   12418:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   1241a:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   1241c:	e9c3 6501 	strd	r6, r5, [r3, #4]
   12420:	b911      	cbnz	r1, 12428 <at_notif_register_handler+0x7c>
	list->head = node;
   12422:	e9c2 3300 	strd	r3, r3, [r2]
}
   12426:	e7e3      	b.n	123f0 <at_notif_register_handler+0x44>
	parent->next = child;
   12428:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1242a:	6053      	str	r3, [r2, #4]
}
   1242c:	e7e0      	b.n	123f0 <at_notif_register_handler+0x44>
   1242e:	bf00      	nop
   12430:	0001c0d4 	.word	0x0001c0d4
   12434:	0001c0ec 	.word	0x0001c0ec
   12438:	0001d20c 	.word	0x0001d20c
   1243c:	200146ec 	.word	0x200146ec
   12440:	20015364 	.word	0x20015364

00012444 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   12444:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   12446:	4d05      	ldr	r5, [pc, #20]	; (1245c <write_uart_string+0x18>)
   12448:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   1244a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   1244e:	b901      	cbnz	r1, 12452 <write_uart_string+0xe>
	}
}
   12450:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   12452:	6828      	ldr	r0, [r5, #0]
   12454:	6883      	ldr	r3, [r0, #8]
   12456:	685b      	ldr	r3, [r3, #4]
   12458:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   1245a:	e7f6      	b.n	1244a <write_uart_string+0x6>
   1245c:	2001537c 	.word	0x2001537c

00012460 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   12460:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   12462:	4921      	ldr	r1, [pc, #132]	; (124e8 <cmd_send+0x88>)
{
   12464:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   12466:	4608      	mov	r0, r1
   12468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1246c:	f10d 030b 	add.w	r3, sp, #11
   12470:	f7ff fe92 	bl	12198 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   12474:	1e01      	subs	r1, r0, #0
   12476:	da0e      	bge.n	12496 <cmd_send+0x36>
   12478:	4b1c      	ldr	r3, [pc, #112]	; (124ec <cmd_send+0x8c>)
   1247a:	4a1d      	ldr	r2, [pc, #116]	; (124f0 <cmd_send+0x90>)
		LOG_ERR("Error while processing AT command: %d", err);
   1247c:	481d      	ldr	r0, [pc, #116]	; (124f4 <cmd_send+0x94>)
   1247e:	1ad2      	subs	r2, r2, r3
   12480:	08d2      	lsrs	r2, r2, #3
   12482:	0192      	lsls	r2, r2, #6
   12484:	f042 0201 	orr.w	r2, r2, #1
   12488:	f006 fbc9 	bl	18c1e <log_1>
		state = AT_CMD_ERROR;
   1248c:	2301      	movs	r3, #1
   1248e:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   12492:	4819      	ldr	r0, [pc, #100]	; (124f8 <cmd_send+0x98>)
   12494:	e012      	b.n	124bc <cmd_send+0x5c>
	switch (state) {
   12496:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1249a:	2b03      	cmp	r3, #3
   1249c:	d810      	bhi.n	124c0 <cmd_send+0x60>
   1249e:	a201      	add	r2, pc, #4	; (adr r2, 124a4 <cmd_send+0x44>)
   124a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   124a4:	000124b5 	.word	0x000124b5
   124a8:	00012493 	.word	0x00012493
   124ac:	000124cf 	.word	0x000124cf
   124b0:	000124e1 	.word	0x000124e1
		write_uart_string(at_buf);
   124b4:	480c      	ldr	r0, [pc, #48]	; (124e8 <cmd_send+0x88>)
   124b6:	f7ff ffc5 	bl	12444 <write_uart_string>
		write_uart_string(OK_STR);
   124ba:	4810      	ldr	r0, [pc, #64]	; (124fc <cmd_send+0x9c>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   124bc:	f7ff ffc2 	bl	12444 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   124c0:	4b0f      	ldr	r3, [pc, #60]	; (12500 <cmd_send+0xa0>)
   124c2:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   124c4:	f007 fc1a 	bl	19cfc <z_impl_uart_irq_rx_enable>
}
   124c8:	b00b      	add	sp, #44	; 0x2c
   124ca:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   124ce:	4b0d      	ldr	r3, [pc, #52]	; (12504 <cmd_send+0xa4>)
   124d0:	9100      	str	r1, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   124d2:	2219      	movs	r2, #25
   124d4:	2100      	movs	r1, #0
   124d6:	a803      	add	r0, sp, #12
   124d8:	f009 faed 	bl	1bab6 <__sprintf_chk>
		write_uart_string(str);
   124dc:	a803      	add	r0, sp, #12
   124de:	e7ed      	b.n	124bc <cmd_send+0x5c>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   124e0:	4b09      	ldr	r3, [pc, #36]	; (12508 <cmd_send+0xa8>)
   124e2:	9100      	str	r1, [sp, #0]
   124e4:	e7f5      	b.n	124d2 <cmd_send+0x72>
   124e6:	bf00      	nop
   124e8:	20017207 	.word	0x20017207
   124ec:	0001c0d4 	.word	0x0001c0d4
   124f0:	0001c0e4 	.word	0x0001c0e4
   124f4:	0001d246 	.word	0x0001d246
   124f8:	0001d154 	.word	0x0001d154
   124fc:	0001d137 	.word	0x0001d137
   12500:	2001537c 	.word	0x2001537c
   12504:	0001d26c 	.word	0x0001d26c
   12508:	0001d27d 	.word	0x0001d27d

0001250c <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   1250c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12510:	4604      	mov	r4, r0
	if (api->irq_update) {
   12512:	6883      	ldr	r3, [r0, #8]
   12514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   12516:	b103      	cbz	r3, 1251a <isr+0xe>
		return api->irq_update(dev);
   12518:	4798      	blx	r3
	if (api->irq_rx_ready) {
   1251a:	68a3      	ldr	r3, [r4, #8]
   1251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1251e:	b1bb      	cbz	r3, 12550 <isr+0x44>
		return api->irq_rx_ready(dev);
   12520:	4620      	mov	r0, r4
   12522:	4798      	blx	r3

	uint8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   12524:	b1a0      	cbz	r0, 12550 <isr+0x44>
   12526:	f8df 8140 	ldr.w	r8, [pc, #320]	; 12668 <isr+0x15c>
   1252a:	4e44      	ldr	r6, [pc, #272]	; (1263c <isr+0x130>)
   1252c:	4647      	mov	r7, r8
   1252e:	4b44      	ldr	r3, [pc, #272]	; (12640 <isr+0x134>)
		if (at_cmd_len > 0) {
   12530:	4d44      	ldr	r5, [pc, #272]	; (12644 <isr+0x138>)
   12532:	1af6      	subs	r6, r6, r3
   12534:	08f6      	lsrs	r6, r6, #3
   12536:	e8d8 3faf 	lda	r3, [r8]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   1253a:	07db      	lsls	r3, r3, #31
   1253c:	d408      	bmi.n	12550 <isr+0x44>
	if (api->fifo_read) {
   1253e:	68a3      	ldr	r3, [r4, #8]
   12540:	699b      	ldr	r3, [r3, #24]
   12542:	b12b      	cbz	r3, 12550 <isr+0x44>
		return api->fifo_read(dev, rx_data, size);
   12544:	2201      	movs	r2, #1
   12546:	4620      	mov	r0, r4
   12548:	f10d 0107 	add.w	r1, sp, #7
   1254c:	4798      	blx	r3
   1254e:	b910      	cbnz	r0, 12556 <isr+0x4a>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   12550:	b002      	add	sp, #8
   12552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uart_rx_handler(character);
   12556:	f89d 1007 	ldrb.w	r1, [sp, #7]
	switch (character) {
   1255a:	2908      	cmp	r1, #8
   1255c:	d001      	beq.n	12562 <isr+0x56>
   1255e:	297f      	cmp	r1, #127	; 0x7f
   12560:	d105      	bne.n	1256e <isr+0x62>
		if (at_cmd_len > 0) {
   12562:	682b      	ldr	r3, [r5, #0]
   12564:	2b00      	cmp	r3, #0
   12566:	d0e6      	beq.n	12536 <isr+0x2a>
			at_cmd_len--;
   12568:	3b01      	subs	r3, #1
   1256a:	602b      	str	r3, [r5, #0]
   1256c:	e7e3      	b.n	12536 <isr+0x2a>
	if (!inside_quotes) {
   1256e:	4836      	ldr	r0, [pc, #216]	; (12648 <isr+0x13c>)
   12570:	7803      	ldrb	r3, [r0, #0]
   12572:	b993      	cbnz	r3, 1259a <isr+0x8e>
		switch (character) {
   12574:	290a      	cmp	r1, #10
   12576:	d01e      	beq.n	125b6 <isr+0xaa>
   12578:	290d      	cmp	r1, #13
   1257a:	d00a      	beq.n	12592 <isr+0x86>
   1257c:	b969      	cbnz	r1, 1259a <isr+0x8e>
			if (term_mode == MODE_NULL_TERM) {
   1257e:	4b33      	ldr	r3, [pc, #204]	; (1264c <isr+0x140>)
   12580:	781b      	ldrb	r3, [r3, #0]
   12582:	b3a3      	cbz	r3, 125ee <isr+0xe2>
			LOG_WRN("Ignored null; would terminate string early.");
   12584:	01b1      	lsls	r1, r6, #6
   12586:	4832      	ldr	r0, [pc, #200]	; (12650 <isr+0x144>)
   12588:	f041 0102 	orr.w	r1, r1, #2
   1258c:	f006 fb38 	bl	18c00 <log_0>
			return;
   12590:	e7d1      	b.n	12536 <isr+0x2a>
			if (term_mode == MODE_CR) {
   12592:	4a2e      	ldr	r2, [pc, #184]	; (1264c <isr+0x140>)
   12594:	7812      	ldrb	r2, [r2, #0]
   12596:	2a01      	cmp	r2, #1
			    at_cmd_len > 0 &&
   12598:	d029      	beq.n	125ee <isr+0xe2>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   1259a:	f8d5 c000 	ldr.w	ip, [r5]
   1259e:	f10c 0201 	add.w	r2, ip, #1
   125a2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   125a6:	d317      	bcc.n	125d8 <isr+0xcc>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   125a8:	01b2      	lsls	r2, r6, #6
   125aa:	482a      	ldr	r0, [pc, #168]	; (12654 <isr+0x148>)
   125ac:	f042 0201 	orr.w	r2, r2, #1
   125b0:	f006 fb35 	bl	18c1e <log_1>
		return;
   125b4:	e7bf      	b.n	12536 <isr+0x2a>
			if (term_mode == MODE_LF) {
   125b6:	4a25      	ldr	r2, [pc, #148]	; (1264c <isr+0x140>)
   125b8:	7812      	ldrb	r2, [r2, #0]
   125ba:	2a02      	cmp	r2, #2
   125bc:	d017      	beq.n	125ee <isr+0xe2>
			if (term_mode == MODE_CR_LF &&
   125be:	2a03      	cmp	r2, #3
   125c0:	d1eb      	bne.n	1259a <isr+0x8e>
   125c2:	f8d5 c000 	ldr.w	ip, [r5]
   125c6:	f1bc 0f00 	cmp.w	ip, #0
   125ca:	d0e6      	beq.n	1259a <isr+0x8e>
			    at_buf[at_cmd_len - 1] == '\r') {
   125cc:	4a22      	ldr	r2, [pc, #136]	; (12658 <isr+0x14c>)
   125ce:	4462      	add	r2, ip
			    at_cmd_len > 0 &&
   125d0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   125d4:	2a0d      	cmp	r2, #13
   125d6:	e7df      	b.n	12598 <isr+0x8c>
	at_buf[at_cmd_len] = character;
   125d8:	f8df e07c 	ldr.w	lr, [pc, #124]	; 12658 <isr+0x14c>
	if (character == '"') {
   125dc:	2922      	cmp	r1, #34	; 0x22
	at_buf[at_cmd_len] = character;
   125de:	f80e 100c 	strb.w	r1, [lr, ip]
	at_cmd_len++;
   125e2:	602a      	str	r2, [r5, #0]
	if (character == '"') {
   125e4:	d1a7      	bne.n	12536 <isr+0x2a>
	if (!inside_quotes) {
   125e6:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   125ea:	7003      	strb	r3, [r0, #0]
   125ec:	e7a3      	b.n	12536 <isr+0x2a>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   125ee:	2200      	movs	r2, #0
   125f0:	6829      	ldr	r1, [r5, #0]
   125f2:	4b19      	ldr	r3, [pc, #100]	; (12658 <isr+0x14c>)
	inside_quotes = false;
   125f4:	7002      	strb	r2, [r0, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   125f6:	545a      	strb	r2, [r3, r1]
	at_cmd_len = 0;
   125f8:	4619      	mov	r1, r3
   125fa:	602a      	str	r2, [r5, #0]
		if (*c > ' ') {
   125fc:	f813 2b01 	ldrb.w	r2, [r3], #1
   12600:	2a20      	cmp	r2, #32
   12602:	d802      	bhi.n	1260a <isr+0xfe>
		} else if (*c == '\0') {
   12604:	2a00      	cmp	r2, #0
   12606:	d1f9      	bne.n	125fc <isr+0xf0>
   12608:	e795      	b.n	12536 <isr+0x2a>
	if (at_buf[0]) {
   1260a:	780b      	ldrb	r3, [r1, #0]
   1260c:	2b00      	cmp	r3, #0
   1260e:	d092      	beq.n	12536 <isr+0x2a>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   12610:	4b12      	ldr	r3, [pc, #72]	; (1265c <isr+0x150>)
   12612:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   12614:	6883      	ldr	r3, [r0, #8]
   12616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12618:	b103      	cbz	r3, 1261c <isr+0x110>
		api->irq_rx_disable(dev);
   1261a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1261c:	e8d7 3fef 	ldaex	r3, [r7]
   12620:	f043 0201 	orr.w	r2, r3, #1
   12624:	e8c7 2fe1 	stlex	r1, r2, [r7]
   12628:	2900      	cmp	r1, #0
   1262a:	d1f7      	bne.n	1261c <isr+0x110>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1262c:	07da      	lsls	r2, r3, #31
   1262e:	d482      	bmi.n	12536 <isr+0x2a>
		k_queue_append(&work_q->queue, work);
   12630:	490b      	ldr	r1, [pc, #44]	; (12660 <isr+0x154>)
   12632:	480c      	ldr	r0, [pc, #48]	; (12664 <isr+0x158>)
   12634:	f008 ffa7 	bl	1b586 <k_queue_append>
   12638:	e77d      	b.n	12536 <isr+0x2a>
   1263a:	bf00      	nop
   1263c:	0001c0e4 	.word	0x0001c0e4
   12640:	0001c0d4 	.word	0x0001c0d4
   12644:	2001536c 	.word	0x2001536c
   12648:	20018207 	.word	0x20018207
   1264c:	20018208 	.word	0x20018208
   12650:	0001d28e 	.word	0x0001d28e
   12654:	0001d2ba 	.word	0x0001d2ba
   12658:	20017207 	.word	0x20017207
   1265c:	2001537c 	.word	0x2001537c
   12660:	20015370 	.word	0x20015370
   12664:	20014990 	.word	0x20014990
   12668:	20015378 	.word	0x20015378

0001266c <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   1266c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   12670:	2201      	movs	r2, #1
   12672:	4b49      	ldr	r3, [pc, #292]	; (12798 <at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   12674:	2000      	movs	r0, #0
   12676:	4949      	ldr	r1, [pc, #292]	; (1279c <at_host_init+0x130>)
		term_mode = mode;
   12678:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   1267a:	f7ff fe97 	bl	123ac <at_notif_register_handler>
	if (err != 0) {
   1267e:	4c48      	ldr	r4, [pc, #288]	; (127a0 <at_host_init+0x134>)
   12680:	4a48      	ldr	r2, [pc, #288]	; (127a4 <at_host_init+0x138>)
   12682:	4606      	mov	r6, r0
   12684:	1aa4      	subs	r4, r4, r2
   12686:	08e4      	lsrs	r4, r4, #3
   12688:	b150      	cbz	r0, 126a0 <at_host_init+0x34>
		LOG_ERR("Can't register handler err=%d", err);
   1268a:	01a2      	lsls	r2, r4, #6
   1268c:	4601      	mov	r1, r0
   1268e:	f042 0201 	orr.w	r2, r2, #1
   12692:	4845      	ldr	r0, [pc, #276]	; (127a8 <at_host_init+0x13c>)
   12694:	f006 fac3 	bl	18c1e <log_1>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   12698:	4630      	mov	r0, r6
   1269a:	b003      	add	sp, #12
   1269c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126a0:	4842      	ldr	r0, [pc, #264]	; (127ac <at_host_init+0x140>)
   126a2:	f003 ff73 	bl	1658c <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   126a6:	4d42      	ldr	r5, [pc, #264]	; (127b0 <at_host_init+0x144>)
   126a8:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   126aa:	b988      	cbnz	r0, 126d0 <at_host_init+0x64>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   126ac:	01a2      	lsls	r2, r4, #6
   126ae:	493f      	ldr	r1, [pc, #252]	; (127ac <at_host_init+0x140>)
   126b0:	4840      	ldr	r0, [pc, #256]	; (127b4 <at_host_init+0x148>)
   126b2:	f042 0201 	orr.w	r2, r2, #1
   126b6:	f006 fab2 	bl	18c1e <log_1>
		return -EINVAL;
   126ba:	f06f 0115 	mvn.w	r1, #21
		LOG_ERR("UART could not be initialized: %d", err);
   126be:	01a2      	lsls	r2, r4, #6
   126c0:	483d      	ldr	r0, [pc, #244]	; (127b8 <at_host_init+0x14c>)
   126c2:	f042 0201 	orr.w	r2, r2, #1
   126c6:	f006 faaa 	bl	18c1e <log_1>
		return -EFAULT;
   126ca:	f06f 060d 	mvn.w	r6, #13
   126ce:	e7e3      	b.n	12698 <at_host_init+0x2c>
	return z_impl_k_uptime_ticks();
   126d0:	f009 f8ba 	bl	1b848 <z_impl_k_uptime_ticks>
   126d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   126d8:	460a      	mov	r2, r1
   126da:	fba0 0103 	umull	r0, r1, r0, r3
   126de:	fb03 1102 	mla	r1, r3, r2, r1
   126e2:	ea4f 38d0 	mov.w	r8, r0, lsr #15
   126e6:	ea4f 1984 	mov.w	r9, r4, lsl #6
			LOG_INF("UART check failed: %d. "
   126ea:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 127d4 <at_host_init+0x168>
   126ee:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   126f2:	f049 0a03 	orr.w	sl, r9, #3
		err = uart_err_check(uart_dev);
   126f6:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   126f8:	6883      	ldr	r3, [r0, #8]
   126fa:	689b      	ldr	r3, [r3, #8]
   126fc:	b393      	cbz	r3, 12764 <at_host_init+0xf8>
		return api->err_check(dev);
   126fe:	4798      	blx	r3
		if (err) {
   12700:	4607      	mov	r7, r0
   12702:	b378      	cbz	r0, 12764 <at_host_init+0xf8>
   12704:	f009 f8a0 	bl	1b848 <z_impl_k_uptime_ticks>
   12708:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1270c:	460a      	mov	r2, r1
   1270e:	fba0 0103 	umull	r0, r1, r0, r3
   12712:	fb03 1102 	mla	r1, r3, r2, r1
   12716:	0bc3      	lsrs	r3, r0, #15
   12718:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   1271c:	eba3 0308 	sub.w	r3, r3, r8
   12720:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   12724:	d908      	bls.n	12738 <at_host_init+0xcc>
				LOG_ERR("UART check failed: %d. "
   12726:	4639      	mov	r1, r7
   12728:	4824      	ldr	r0, [pc, #144]	; (127bc <at_host_init+0x150>)
   1272a:	f049 0201 	orr.w	r2, r9, #1
   1272e:	f006 fa76 	bl	18c1e <log_1>
				return -EIO;
   12732:	f06f 0104 	mvn.w	r1, #4
   12736:	e7c2      	b.n	126be <at_host_init+0x52>
			LOG_INF("UART check failed: %d. "
   12738:	4652      	mov	r2, sl
   1273a:	4639      	mov	r1, r7
   1273c:	4658      	mov	r0, fp
   1273e:	f006 fa6e 	bl	18c1e <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   12742:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   12744:	6883      	ldr	r3, [r0, #8]
   12746:	699b      	ldr	r3, [r3, #24]
   12748:	b92b      	cbnz	r3, 12756 <at_host_init+0xea>
	return z_impl_k_sleep(timeout);
   1274a:	2100      	movs	r1, #0
   1274c:	f44f 70a4 	mov.w	r0, #328	; 0x148
   12750:	f004 fe30 	bl	173b4 <z_impl_k_sleep>
	} while (err);
   12754:	e7cf      	b.n	126f6 <at_host_init+0x8a>
		return api->fifo_read(dev, rx_data, size);
   12756:	2201      	movs	r2, #1
   12758:	f10d 0107 	add.w	r1, sp, #7
   1275c:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   1275e:	2800      	cmp	r0, #0
   12760:	d1ef      	bne.n	12742 <at_host_init+0xd6>
   12762:	e7f2      	b.n	1274a <at_host_init+0xde>
	uart_irq_callback_set(uart_dev, isr);
   12764:	6828      	ldr	r0, [r5, #0]
	const struct uart_driver_api *api =
   12766:	6883      	ldr	r3, [r0, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   12768:	b123      	cbz	r3, 12774 <at_host_init+0x108>
   1276a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1276c:	b113      	cbz	r3, 12774 <at_host_init+0x108>
		api->irq_callback_set(dev, cb, user_data);
   1276e:	2200      	movs	r2, #0
   12770:	4913      	ldr	r1, [pc, #76]	; (127c0 <at_host_init+0x154>)
   12772:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   12774:	2200      	movs	r2, #0
   12776:	4b13      	ldr	r3, [pc, #76]	; (127c4 <at_host_init+0x158>)
   12778:	4913      	ldr	r1, [pc, #76]	; (127c8 <at_host_init+0x15c>)
   1277a:	601a      	str	r2, [r3, #0]
   1277c:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   12780:	4812      	ldr	r0, [pc, #72]	; (127cc <at_host_init+0x160>)
   12782:	230a      	movs	r3, #10
   12784:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12788:	4911      	ldr	r1, [pc, #68]	; (127d0 <at_host_init+0x164>)
   1278a:	f004 ff71 	bl	17670 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   1278e:	6828      	ldr	r0, [r5, #0]
   12790:	f007 fab4 	bl	19cfc <z_impl_uart_irq_rx_enable>
	return err;
   12794:	e780      	b.n	12698 <at_host_init+0x2c>
   12796:	bf00      	nop
   12798:	20018208 	.word	0x20018208
   1279c:	00019d07 	.word	0x00019d07
   127a0:	0001c0e4 	.word	0x0001c0e4
   127a4:	0001c0d4 	.word	0x0001c0d4
   127a8:	0001d2da 	.word	0x0001d2da
   127ac:	0001c9e6 	.word	0x0001c9e6
   127b0:	2001537c 	.word	0x2001537c
   127b4:	0001d2f8 	.word	0x0001d2f8
   127b8:	0001d373 	.word	0x0001d373
   127bc:	0001d308 	.word	0x0001d308
   127c0:	0001250d 	.word	0x0001250d
   127c4:	20015370 	.word	0x20015370
   127c8:	00012461 	.word	0x00012461
   127cc:	20014990 	.word	0x20014990
   127d0:	20018b70 	.word	0x20018b70
   127d4:	0001d33e 	.word	0x0001d33e

000127d8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   127d8:	b508      	push	{r3, lr}
	z_impl_log_panic();
   127da:	f7fc fbc3 	bl	ef64 <z_impl_log_panic>
   127de:	4b06      	ldr	r3, [pc, #24]	; (127f8 <k_sys_fatal_error_handler+0x20>)
   127e0:	4906      	ldr	r1, [pc, #24]	; (127fc <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   127e2:	4807      	ldr	r0, [pc, #28]	; (12800 <k_sys_fatal_error_handler+0x28>)
   127e4:	1ac9      	subs	r1, r1, r3
   127e6:	08c9      	lsrs	r1, r1, #3
   127e8:	0189      	lsls	r1, r1, #6
   127ea:	f041 0101 	orr.w	r1, r1, #1
   127ee:	f006 fa07 	bl	18c00 <log_0>
	sys_arch_reboot(0);
   127f2:	2000      	movs	r0, #0
   127f4:	f7fd fdbe 	bl	10374 <sys_arch_reboot>

	CODE_UNREACHABLE;
   127f8:	0001c0d4 	.word	0x0001c0d4
   127fc:	0001c104 	.word	0x0001c104
   12800:	0001d3db 	.word	0x0001d3db

00012804 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   12804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12808:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   1280a:	4c21      	ldr	r4, [pc, #132]	; (12890 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   1280c:	4e21      	ldr	r6, [pc, #132]	; (12894 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1280e:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   12812:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1289c <check_ext_api_requests+0x98>
{
   12816:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12818:	45a8      	cmp	r8, r5
   1281a:	d803      	bhi.n	12824 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   1281c:	2000      	movs	r0, #0
   1281e:	b005      	add	sp, #20
   12820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   12824:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12826:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1282a:	681f      	ldr	r7, [r3, #0]
   1282c:	ab01      	add	r3, sp, #4
   1282e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   12832:	220c      	movs	r2, #12
   12834:	4619      	mov	r1, r3
   12836:	4638      	mov	r0, r7
   12838:	f009 f91a 	bl	1ba70 <memcmp>
   1283c:	b990      	cbnz	r0, 12864 <check_ext_api_requests+0x60>
   1283e:	b18f      	cbz	r7, 12864 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   12840:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   12842:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   12844:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   12846:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   12848:	4291      	cmp	r1, r2
   1284a:	d10b      	bne.n	12864 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   1284c:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   1284e:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   12850:	4291      	cmp	r1, r2
   12852:	d807      	bhi.n	12864 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   12854:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   12856:	4291      	cmp	r1, r2
   12858:	d904      	bls.n	12864 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   1285a:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1285c:	695b      	ldr	r3, [r3, #20]
   1285e:	ea32 0303 	bics.w	r3, r2, r3
   12862:	d00a      	beq.n	1287a <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   12864:	6a27      	ldr	r7, [r4, #32]
   12866:	b167      	cbz	r7, 12882 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   12868:	480b      	ldr	r0, [pc, #44]	; (12898 <check_ext_api_requests+0x94>)
   1286a:	f005 fdb7 	bl	183dc <printk>
			k_panic();
   1286e:	4040      	eors	r0, r0
   12870:	f380 8811 	msr	BASEPRI, r0
   12874:	f04f 0004 	mov.w	r0, #4
   12878:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1287a:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1287c:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   1287e:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12880:	e7ca      	b.n	12818 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   12882:	4648      	mov	r0, r9
   12884:	f005 fdaa 	bl	183dc <printk>
			*ext_api_req->ext_api = NULL;
   12888:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1288a:	601f      	str	r7, [r3, #0]
   1288c:	e7f5      	b.n	1287a <check_ext_api_requests+0x76>
   1288e:	bf00      	nop
   12890:	0000c23c 	.word	0x0000c23c
   12894:	0001c190 	.word	0x0001c190
   12898:	0001d3f8 	.word	0x0001d3f8
   1289c:	0001d421 	.word	0x0001d421

000128a0 <rpc_handle_data_message>:
   128a0:	6803      	ldr	r3, [r0, #0]
   128a2:	b510      	push	{r4, lr}
   128a4:	b29b      	uxth	r3, r3
   128a6:	2b04      	cmp	r3, #4
   128a8:	d009      	beq.n	128be <rpc_handle_data_message+0x1e>
   128aa:	2b03      	cmp	r3, #3
   128ac:	d010      	beq.n	128d0 <rpc_handle_data_message+0x30>
   128ae:	2b06      	cmp	r3, #6
   128b0:	d010      	beq.n	128d4 <rpc_handle_data_message+0x34>
   128b2:	2b07      	cmp	r3, #7
   128b4:	d010      	beq.n	128d8 <rpc_handle_data_message+0x38>
   128b6:	6880      	ldr	r0, [r0, #8]
   128b8:	b980      	cbnz	r0, 128dc <rpc_handle_data_message+0x3c>
   128ba:	2000      	movs	r0, #0
   128bc:	bd10      	pop	{r4, pc}
   128be:	2300      	movs	r3, #0
   128c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   128c4:	4a07      	ldr	r2, [pc, #28]	; (128e4 <rpc_handle_data_message+0x44>)
   128c6:	2100      	movs	r1, #0
   128c8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   128cc:	685b      	ldr	r3, [r3, #4]
   128ce:	4718      	bx	r3
   128d0:	2301      	movs	r3, #1
   128d2:	e7f5      	b.n	128c0 <rpc_handle_data_message+0x20>
   128d4:	2302      	movs	r3, #2
   128d6:	e7f3      	b.n	128c0 <rpc_handle_data_message+0x20>
   128d8:	2303      	movs	r3, #3
   128da:	e7f1      	b.n	128c0 <rpc_handle_data_message+0x20>
   128dc:	f007 fa80 	bl	19de0 <rpc_transport_data_free>
   128e0:	e7eb      	b.n	128ba <rpc_handle_data_message+0x1a>
   128e2:	bf00      	nop
   128e4:	0001c36c 	.word	0x0001c36c

000128e8 <ipc_trace_init>:
   128e8:	4b01      	ldr	r3, [pc, #4]	; (128f0 <ipc_trace_init+0x8>)
   128ea:	6018      	str	r0, [r3, #0]
   128ec:	4770      	bx	lr
   128ee:	bf00      	nop
   128f0:	2001538c 	.word	0x2001538c

000128f4 <nrf_modem_os_trace_irq_handler>:
   128f4:	b508      	push	{r3, lr}
   128f6:	4b11      	ldr	r3, [pc, #68]	; (1293c <nrf_modem_os_trace_irq_handler+0x48>)
   128f8:	781b      	ldrb	r3, [r3, #0]
   128fa:	b90b      	cbnz	r3, 12900 <nrf_modem_os_trace_irq_handler+0xc>
   128fc:	f7fe fe74 	bl	115e8 <nrf_modem_os_trace_irq_clear>
   12900:	4b0f      	ldr	r3, [pc, #60]	; (12940 <nrf_modem_os_trace_irq_handler+0x4c>)
   12902:	6818      	ldr	r0, [r3, #0]
   12904:	b128      	cbz	r0, 12912 <nrf_modem_os_trace_irq_handler+0x1e>
   12906:	6882      	ldr	r2, [r0, #8]
   12908:	6843      	ldr	r3, [r0, #4]
   1290a:	429a      	cmp	r2, r3
   1290c:	d001      	beq.n	12912 <nrf_modem_os_trace_irq_handler+0x1e>
   1290e:	f007 fa6b 	bl	19de8 <trace_write>
   12912:	4b0c      	ldr	r3, [pc, #48]	; (12944 <nrf_modem_os_trace_irq_handler+0x50>)
   12914:	6818      	ldr	r0, [r3, #0]
   12916:	b128      	cbz	r0, 12924 <nrf_modem_os_trace_irq_handler+0x30>
   12918:	6882      	ldr	r2, [r0, #8]
   1291a:	6843      	ldr	r3, [r0, #4]
   1291c:	429a      	cmp	r2, r3
   1291e:	d001      	beq.n	12924 <nrf_modem_os_trace_irq_handler+0x30>
   12920:	f007 fa62 	bl	19de8 <trace_write>
   12924:	4b08      	ldr	r3, [pc, #32]	; (12948 <nrf_modem_os_trace_irq_handler+0x54>)
   12926:	6818      	ldr	r0, [r3, #0]
   12928:	b138      	cbz	r0, 1293a <nrf_modem_os_trace_irq_handler+0x46>
   1292a:	6882      	ldr	r2, [r0, #8]
   1292c:	6843      	ldr	r3, [r0, #4]
   1292e:	429a      	cmp	r2, r3
   12930:	d003      	beq.n	1293a <nrf_modem_os_trace_irq_handler+0x46>
   12932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12936:	f007 ba57 	b.w	19de8 <trace_write>
   1293a:	bd08      	pop	{r3, pc}
   1293c:	20018209 	.word	0x20018209
   12940:	20015388 	.word	0x20015388
   12944:	20015380 	.word	0x20015380
   12948:	20015384 	.word	0x20015384

0001294c <ipc_trace_handle>:
   1294c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12950:	4b43      	ldr	r3, [pc, #268]	; (12a60 <ipc_trace_handle+0x114>)
   12952:	681b      	ldr	r3, [r3, #0]
   12954:	6919      	ldr	r1, [r3, #16]
   12956:	f8d3 a014 	ldr.w	sl, [r3, #20]
   1295a:	7c1a      	ldrb	r2, [r3, #16]
   1295c:	2200      	movs	r2, #0
   1295e:	741a      	strb	r2, [r3, #16]
   12960:	7c58      	ldrb	r0, [r3, #17]
   12962:	745a      	strb	r2, [r3, #17]
   12964:	7c98      	ldrb	r0, [r3, #18]
   12966:	749a      	strb	r2, [r3, #18]
   12968:	7cd8      	ldrb	r0, [r3, #19]
   1296a:	74da      	strb	r2, [r3, #19]
   1296c:	7d18      	ldrb	r0, [r3, #20]
   1296e:	751a      	strb	r2, [r3, #20]
   12970:	7d58      	ldrb	r0, [r3, #21]
   12972:	755a      	strb	r2, [r3, #21]
   12974:	7d98      	ldrb	r0, [r3, #22]
   12976:	759a      	strb	r2, [r3, #22]
   12978:	7dd8      	ldrb	r0, [r3, #23]
   1297a:	75da      	strb	r2, [r3, #23]
   1297c:	2900      	cmp	r1, #0
   1297e:	d033      	beq.n	129e8 <ipc_trace_handle+0x9c>
   12980:	3901      	subs	r1, #1
   12982:	2903      	cmp	r1, #3
   12984:	d830      	bhi.n	129e8 <ipc_trace_handle+0x9c>
   12986:	e8df f001 	tbb	[pc, r1]
   1298a:	6502      	.short	0x6502
   1298c:	534c      	.short	0x534c
   1298e:	4a35      	ldr	r2, [pc, #212]	; (12a64 <ipc_trace_handle+0x118>)
   12990:	7811      	ldrb	r1, [r2, #0]
   12992:	b109      	cbz	r1, 12998 <ipc_trace_handle+0x4c>
   12994:	2100      	movs	r1, #0
   12996:	7011      	strb	r1, [r2, #0]
   12998:	2200      	movs	r2, #0
   1299a:	4691      	mov	r9, r2
   1299c:	4617      	mov	r7, r2
   1299e:	4614      	mov	r4, r2
   129a0:	4d31      	ldr	r5, [pc, #196]	; (12a68 <ipc_trace_handle+0x11c>)
   129a2:	4932      	ldr	r1, [pc, #200]	; (12a6c <ipc_trace_handle+0x120>)
   129a4:	4832      	ldr	r0, [pc, #200]	; (12a70 <ipc_trace_handle+0x124>)
   129a6:	f8d5 e000 	ldr.w	lr, [r5]
   129aa:	f8d1 8000 	ldr.w	r8, [r1]
   129ae:	6806      	ldr	r6, [r0, #0]
   129b0:	f8da b008 	ldr.w	fp, [sl, #8]
   129b4:	9501      	str	r5, [sp, #4]
   129b6:	45a3      	cmp	fp, r4
   129b8:	d119      	bne.n	129ee <ipc_trace_handle+0xa2>
   129ba:	b107      	cbz	r7, 129be <ipc_trace_handle+0x72>
   129bc:	6006      	str	r6, [r0, #0]
   129be:	f1b9 0f00 	cmp.w	r9, #0
   129c2:	d001      	beq.n	129c8 <ipc_trace_handle+0x7c>
   129c4:	f8c1 8000 	str.w	r8, [r1]
   129c8:	b112      	cbz	r2, 129d0 <ipc_trace_handle+0x84>
   129ca:	9a01      	ldr	r2, [sp, #4]
   129cc:	f8c2 e000 	str.w	lr, [r2]
   129d0:	7a1a      	ldrb	r2, [r3, #8]
   129d2:	2101      	movs	r1, #1
   129d4:	2200      	movs	r2, #0
   129d6:	7219      	strb	r1, [r3, #8]
   129d8:	7a59      	ldrb	r1, [r3, #9]
   129da:	725a      	strb	r2, [r3, #9]
   129dc:	7a99      	ldrb	r1, [r3, #10]
   129de:	729a      	strb	r2, [r3, #10]
   129e0:	7ada      	ldrb	r2, [r3, #11]
   129e2:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   129e6:	72da      	strb	r2, [r3, #11]
   129e8:	b003      	add	sp, #12
   129ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129ee:	1ca5      	adds	r5, r4, #2
   129f0:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   129f4:	686d      	ldr	r5, [r5, #4]
   129f6:	f895 c000 	ldrb.w	ip, [r5]
   129fa:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   129fe:	d009      	beq.n	12a14 <ipc_trace_handle+0xc8>
   12a00:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   12a04:	d00a      	beq.n	12a1c <ipc_trace_handle+0xd0>
   12a06:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   12a0a:	bf04      	itt	eq
   12a0c:	462e      	moveq	r6, r5
   12a0e:	2701      	moveq	r7, #1
   12a10:	3401      	adds	r4, #1
   12a12:	e7d0      	b.n	129b6 <ipc_trace_handle+0x6a>
   12a14:	46a8      	mov	r8, r5
   12a16:	f04f 0901 	mov.w	r9, #1
   12a1a:	e7f9      	b.n	12a10 <ipc_trace_handle+0xc4>
   12a1c:	46ae      	mov	lr, r5
   12a1e:	2201      	movs	r2, #1
   12a20:	e7f6      	b.n	12a10 <ipc_trace_handle+0xc4>
   12a22:	2101      	movs	r1, #1
   12a24:	4a0f      	ldr	r2, [pc, #60]	; (12a64 <ipc_trace_handle+0x118>)
   12a26:	7011      	strb	r1, [r2, #0]
   12a28:	7a1a      	ldrb	r2, [r3, #8]
   12a2a:	2103      	movs	r1, #3
   12a2c:	2200      	movs	r2, #0
   12a2e:	e7d2      	b.n	129d6 <ipc_trace_handle+0x8a>
   12a30:	7a19      	ldrb	r1, [r3, #8]
   12a32:	2104      	movs	r1, #4
   12a34:	7219      	strb	r1, [r3, #8]
   12a36:	7a59      	ldrb	r1, [r3, #9]
   12a38:	725a      	strb	r2, [r3, #9]
   12a3a:	7a99      	ldrb	r1, [r3, #10]
   12a3c:	729a      	strb	r2, [r3, #10]
   12a3e:	7ad9      	ldrb	r1, [r3, #11]
   12a40:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   12a44:	72d9      	strb	r1, [r3, #11]
   12a46:	4b07      	ldr	r3, [pc, #28]	; (12a64 <ipc_trace_handle+0x118>)
   12a48:	701a      	strb	r2, [r3, #0]
   12a4a:	b003      	add	sp, #12
   12a4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a50:	f7ff bf50 	b.w	128f4 <nrf_modem_os_trace_irq_handler>
   12a54:	b003      	add	sp, #12
   12a56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a5a:	f7fe bdbd 	b.w	115d8 <nrf_modem_os_trace_irq_set>
   12a5e:	bf00      	nop
   12a60:	2001538c 	.word	0x2001538c
   12a64:	20018209 	.word	0x20018209
   12a68:	20015384 	.word	0x20015384
   12a6c:	20015380 	.word	0x20015380
   12a70:	20015388 	.word	0x20015388

00012a74 <rpc_trace_coredump_in_progress>:
   12a74:	4b01      	ldr	r3, [pc, #4]	; (12a7c <rpc_trace_coredump_in_progress+0x8>)
   12a76:	7818      	ldrb	r0, [r3, #0]
   12a78:	4770      	bx	lr
   12a7a:	bf00      	nop
   12a7c:	20018209 	.word	0x20018209

00012a80 <handle_modem_rpc_msg>:
   12a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a84:	4606      	mov	r6, r0
   12a86:	460f      	mov	r7, r1
   12a88:	2500      	movs	r5, #0
   12a8a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 12b00 <handle_modem_rpc_msg+0x80>
   12a8e:	6833      	ldr	r3, [r6, #0]
   12a90:	42ab      	cmp	r3, r5
   12a92:	d801      	bhi.n	12a98 <handle_modem_rpc_msg+0x18>
   12a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a98:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   12a9c:	68a3      	ldr	r3, [r4, #8]
   12a9e:	b1fb      	cbz	r3, 12ae0 <handle_modem_rpc_msg+0x60>
   12aa0:	6863      	ldr	r3, [r4, #4]
   12aa2:	b2db      	uxtb	r3, r3
   12aa4:	2b01      	cmp	r3, #1
   12aa6:	d11b      	bne.n	12ae0 <handle_modem_rpc_msg+0x60>
   12aa8:	6862      	ldr	r2, [r4, #4]
   12aaa:	f8b8 3000 	ldrh.w	r3, [r8]
   12aae:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   12ab2:	d115      	bne.n	12ae0 <handle_modem_rpc_msg+0x60>
   12ab4:	2f02      	cmp	r7, #2
   12ab6:	68a0      	ldr	r0, [r4, #8]
   12ab8:	d114      	bne.n	12ae4 <handle_modem_rpc_msg+0x64>
   12aba:	f7ff fef1 	bl	128a0 <rpc_handle_data_message>
   12abe:	2802      	cmp	r0, #2
   12ac0:	d00e      	beq.n	12ae0 <handle_modem_rpc_msg+0x60>
   12ac2:	2801      	cmp	r0, #1
   12ac4:	d113      	bne.n	12aee <handle_modem_rpc_msg+0x6e>
   12ac6:	6863      	ldr	r3, [r4, #4]
   12ac8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12acc:	f043 0302 	orr.w	r3, r3, #2
   12ad0:	6063      	str	r3, [r4, #4]
   12ad2:	f8b8 3000 	ldrh.w	r3, [r8]
   12ad6:	3301      	adds	r3, #1
   12ad8:	f8a8 3000 	strh.w	r3, [r8]
   12adc:	f7fe fd6c 	bl	115b8 <nrf_modem_os_application_irq_set>
   12ae0:	3501      	adds	r5, #1
   12ae2:	e7d4      	b.n	12a8e <handle_modem_rpc_msg+0xe>
   12ae4:	6801      	ldr	r1, [r0, #0]
   12ae6:	0c09      	lsrs	r1, r1, #16
   12ae8:	f007 f910 	bl	19d0c <rpc_handle_ctrl_message>
   12aec:	e7e7      	b.n	12abe <handle_modem_rpc_msg+0x3e>
   12aee:	2800      	cmp	r0, #0
   12af0:	d1ef      	bne.n	12ad2 <handle_modem_rpc_msg+0x52>
   12af2:	6863      	ldr	r3, [r4, #4]
   12af4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12af8:	f043 0303 	orr.w	r3, r3, #3
   12afc:	e7e8      	b.n	12ad0 <handle_modem_rpc_msg+0x50>
   12afe:	bf00      	nop
   12b00:	20015ea8 	.word	0x20015ea8

00012b04 <rpc_transport_ipc_data_msg_send>:
   12b04:	4b11      	ldr	r3, [pc, #68]	; (12b4c <rpc_transport_ipc_data_msg_send+0x48>)
   12b06:	b530      	push	{r4, r5, lr}
   12b08:	7819      	ldrb	r1, [r3, #0]
   12b0a:	b9e1      	cbnz	r1, 12b46 <rpc_transport_ipc_data_msg_send+0x42>
   12b0c:	4b10      	ldr	r3, [pc, #64]	; (12b50 <rpc_transport_ipc_data_msg_send+0x4c>)
   12b0e:	4a11      	ldr	r2, [pc, #68]	; (12b54 <rpc_transport_ipc_data_msg_send+0x50>)
   12b10:	681b      	ldr	r3, [r3, #0]
   12b12:	6812      	ldr	r2, [r2, #0]
   12b14:	1ac0      	subs	r0, r0, r3
   12b16:	f3c0 1389 	ubfx	r3, r0, #6, #10
   12b1a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   12b1e:	4d0e      	ldr	r5, [pc, #56]	; (12b58 <rpc_transport_ipc_data_msg_send+0x54>)
   12b20:	685a      	ldr	r2, [r3, #4]
   12b22:	882c      	ldrh	r4, [r5, #0]
   12b24:	b292      	uxth	r2, r2
   12b26:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   12b2a:	605a      	str	r2, [r3, #4]
   12b2c:	685a      	ldr	r2, [r3, #4]
   12b2e:	4608      	mov	r0, r1
   12b30:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   12b34:	f042 0201 	orr.w	r2, r2, #1
   12b38:	605a      	str	r2, [r3, #4]
   12b3a:	2201      	movs	r2, #1
   12b3c:	4b07      	ldr	r3, [pc, #28]	; (12b5c <rpc_transport_ipc_data_msg_send+0x58>)
   12b3e:	3401      	adds	r4, #1
   12b40:	802c      	strh	r4, [r5, #0]
   12b42:	601a      	str	r2, [r3, #0]
   12b44:	bd30      	pop	{r4, r5, pc}
   12b46:	f04f 30ff 	mov.w	r0, #4294967295
   12b4a:	e7fb      	b.n	12b44 <rpc_transport_ipc_data_msg_send+0x40>
   12b4c:	2001820b 	.word	0x2001820b
   12b50:	200153a8 	.word	0x200153a8
   12b54:	200153ac 	.word	0x200153ac
   12b58:	20015eaa 	.word	0x20015eaa
   12b5c:	4002a00c 	.word	0x4002a00c

00012b60 <rpc_transport_ipc_ctrl_msg_send>:
   12b60:	4b0e      	ldr	r3, [pc, #56]	; (12b9c <rpc_transport_ipc_ctrl_msg_send+0x3c>)
   12b62:	490f      	ldr	r1, [pc, #60]	; (12ba0 <rpc_transport_ipc_ctrl_msg_send+0x40>)
   12b64:	681b      	ldr	r3, [r3, #0]
   12b66:	880a      	ldrh	r2, [r1, #0]
   12b68:	1ac0      	subs	r0, r0, r3
   12b6a:	f3c0 1389 	ubfx	r3, r0, #6, #10
   12b6e:	480d      	ldr	r0, [pc, #52]	; (12ba4 <rpc_transport_ipc_ctrl_msg_send+0x44>)
   12b70:	6800      	ldr	r0, [r0, #0]
   12b72:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   12b76:	6843      	ldr	r3, [r0, #4]
   12b78:	b29b      	uxth	r3, r3
   12b7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   12b7e:	3201      	adds	r2, #1
   12b80:	800a      	strh	r2, [r1, #0]
   12b82:	2201      	movs	r2, #1
   12b84:	6043      	str	r3, [r0, #4]
   12b86:	6843      	ldr	r3, [r0, #4]
   12b88:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12b8c:	f043 0301 	orr.w	r3, r3, #1
   12b90:	6043      	str	r3, [r0, #4]
   12b92:	4b05      	ldr	r3, [pc, #20]	; (12ba8 <rpc_transport_ipc_ctrl_msg_send+0x48>)
   12b94:	2000      	movs	r0, #0
   12b96:	601a      	str	r2, [r3, #0]
   12b98:	4770      	bx	lr
   12b9a:	bf00      	nop
   12b9c:	200153a0 	.word	0x200153a0
   12ba0:	20015eaa 	.word	0x20015eaa
   12ba4:	200153a4 	.word	0x200153a4
   12ba8:	4002a004 	.word	0x4002a004

00012bac <rpc_transport_ipc_data_msg_alloc>:
   12bac:	4b05      	ldr	r3, [pc, #20]	; (12bc4 <rpc_transport_ipc_data_msg_alloc+0x18>)
   12bae:	781b      	ldrb	r3, [r3, #0]
   12bb0:	b933      	cbnz	r3, 12bc0 <rpc_transport_ipc_data_msg_alloc+0x14>
   12bb2:	4b05      	ldr	r3, [pc, #20]	; (12bc8 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   12bb4:	2202      	movs	r2, #2
   12bb6:	6819      	ldr	r1, [r3, #0]
   12bb8:	4b04      	ldr	r3, [pc, #16]	; (12bcc <rpc_transport_ipc_data_msg_alloc+0x20>)
   12bba:	6818      	ldr	r0, [r3, #0]
   12bbc:	f007 b953 	b.w	19e66 <rpc_transport_ipc_msg_alloc>
   12bc0:	2000      	movs	r0, #0
   12bc2:	4770      	bx	lr
   12bc4:	2001820b 	.word	0x2001820b
   12bc8:	200153a8 	.word	0x200153a8
   12bcc:	200153ac 	.word	0x200153ac

00012bd0 <rpc_transport_ipc_ctrl_msg_alloc>:
   12bd0:	4b03      	ldr	r3, [pc, #12]	; (12be0 <rpc_transport_ipc_ctrl_msg_alloc+0x10>)
   12bd2:	2201      	movs	r2, #1
   12bd4:	6819      	ldr	r1, [r3, #0]
   12bd6:	4b03      	ldr	r3, [pc, #12]	; (12be4 <rpc_transport_ipc_ctrl_msg_alloc+0x14>)
   12bd8:	6818      	ldr	r0, [r3, #0]
   12bda:	f007 b944 	b.w	19e66 <rpc_transport_ipc_msg_alloc>
   12bde:	bf00      	nop
   12be0:	200153a0 	.word	0x200153a0
   12be4:	200153a4 	.word	0x200153a4

00012be8 <rpc_transport_ipc_data_alloc>:
   12be8:	4b03      	ldr	r3, [pc, #12]	; (12bf8 <rpc_transport_ipc_data_alloc+0x10>)
   12bea:	781b      	ldrb	r3, [r3, #0]
   12bec:	b90b      	cbnz	r3, 12bf2 <rpc_transport_ipc_data_alloc+0xa>
   12bee:	f7fe bd19 	b.w	11624 <nrf_modem_os_shm_tx_alloc>
   12bf2:	2000      	movs	r0, #0
   12bf4:	4770      	bx	lr
   12bf6:	bf00      	nop
   12bf8:	2001820b 	.word	0x2001820b

00012bfc <nrf_modem_os_application_irq_handler>:
   12bfc:	b510      	push	{r4, lr}
   12bfe:	4c06      	ldr	r4, [pc, #24]	; (12c18 <nrf_modem_os_application_irq_handler+0x1c>)
   12c00:	f7fe fce2 	bl	115c8 <nrf_modem_os_application_irq_clear>
   12c04:	6820      	ldr	r0, [r4, #0]
   12c06:	2101      	movs	r1, #1
   12c08:	f7ff ff3a 	bl	12a80 <handle_modem_rpc_msg>
   12c0c:	6860      	ldr	r0, [r4, #4]
   12c0e:	2102      	movs	r1, #2
   12c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12c14:	f7ff bf34 	b.w	12a80 <handle_modem_rpc_msg>
   12c18:	20015394 	.word	0x20015394

00012c1c <rpc_transport_ipc_msg_free>:
   12c1c:	2300      	movs	r3, #0
   12c1e:	4911      	ldr	r1, [pc, #68]	; (12c64 <rpc_transport_ipc_msg_free+0x48>)
   12c20:	b530      	push	{r4, r5, lr}
   12c22:	680a      	ldr	r2, [r1, #0]
   12c24:	6814      	ldr	r4, [r2, #0]
   12c26:	42a3      	cmp	r3, r4
   12c28:	d10b      	bne.n	12c42 <rpc_transport_ipc_msg_free+0x26>
   12c2a:	2300      	movs	r3, #0
   12c2c:	684a      	ldr	r2, [r1, #4]
   12c2e:	6811      	ldr	r1, [r2, #0]
   12c30:	428b      	cmp	r3, r1
   12c32:	d015      	beq.n	12c60 <rpc_transport_ipc_msg_free+0x44>
   12c34:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   12c38:	68a4      	ldr	r4, [r4, #8]
   12c3a:	42a0      	cmp	r0, r4
   12c3c:	d008      	beq.n	12c50 <rpc_transport_ipc_msg_free+0x34>
   12c3e:	3301      	adds	r3, #1
   12c40:	e7f6      	b.n	12c30 <rpc_transport_ipc_msg_free+0x14>
   12c42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   12c46:	68ad      	ldr	r5, [r5, #8]
   12c48:	42a8      	cmp	r0, r5
   12c4a:	d001      	beq.n	12c50 <rpc_transport_ipc_msg_free+0x34>
   12c4c:	3301      	adds	r3, #1
   12c4e:	e7ea      	b.n	12c26 <rpc_transport_ipc_msg_free+0xa>
   12c50:	00db      	lsls	r3, r3, #3
   12c52:	3304      	adds	r3, #4
   12c54:	58d1      	ldr	r1, [r2, r3]
   12c56:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   12c5a:	f041 0103 	orr.w	r1, r1, #3
   12c5e:	50d1      	str	r1, [r2, r3]
   12c60:	bd30      	pop	{r4, r5, pc}
   12c62:	bf00      	nop
   12c64:	20015394 	.word	0x20015394

00012c68 <rpc_transport_ipc_data_free>:
   12c68:	4b0d      	ldr	r3, [pc, #52]	; (12ca0 <rpc_transport_ipc_data_free+0x38>)
   12c6a:	b510      	push	{r4, lr}
   12c6c:	681b      	ldr	r3, [r3, #0]
   12c6e:	4604      	mov	r4, r0
   12c70:	4298      	cmp	r0, r3
   12c72:	d30a      	bcc.n	12c8a <rpc_transport_ipc_data_free+0x22>
   12c74:	4b0b      	ldr	r3, [pc, #44]	; (12ca4 <rpc_transport_ipc_data_free+0x3c>)
   12c76:	681b      	ldr	r3, [r3, #0]
   12c78:	4298      	cmp	r0, r3
   12c7a:	d206      	bcs.n	12c8a <rpc_transport_ipc_data_free+0x22>
   12c7c:	f7ff ffa8 	bl	12bd0 <rpc_transport_ipc_ctrl_msg_alloc>
   12c80:	b938      	cbnz	r0, 12c92 <rpc_transport_ipc_data_free+0x2a>
   12c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12c86:	f7fe bc97 	b.w	115b8 <nrf_modem_os_application_irq_set>
   12c8a:	4620      	mov	r0, r4
   12c8c:	f7fe fcda 	bl	11644 <nrf_modem_os_shm_tx_free>
   12c90:	e7f7      	b.n	12c82 <rpc_transport_ipc_data_free+0x1a>
   12c92:	4a05      	ldr	r2, [pc, #20]	; (12ca8 <rpc_transport_ipc_data_free+0x40>)
   12c94:	6084      	str	r4, [r0, #8]
   12c96:	6002      	str	r2, [r0, #0]
   12c98:	f7ff ff62 	bl	12b60 <rpc_transport_ipc_ctrl_msg_send>
   12c9c:	e7f1      	b.n	12c82 <rpc_transport_ipc_data_free+0x1a>
   12c9e:	bf00      	nop
   12ca0:	200153b4 	.word	0x200153b4
   12ca4:	200153b0 	.word	0x200153b0
   12ca8:	00020001 	.word	0x00020001

00012cac <rpc_transport_ipc_init>:
   12cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cb0:	2200      	movs	r2, #0
   12cb2:	b095      	sub	sp, #84	; 0x54
   12cb4:	4605      	mov	r5, r0
   12cb6:	494f      	ldr	r1, [pc, #316]	; (12df4 <rpc_transport_ipc_init+0x148>)
   12cb8:	7900      	ldrb	r0, [r0, #4]
   12cba:	f003 fba1 	bl	16400 <nrfx_ipc_init>
   12cbe:	2238      	movs	r2, #56	; 0x38
   12cc0:	2100      	movs	r1, #0
   12cc2:	a803      	add	r0, sp, #12
   12cc4:	f008 feef 	bl	1baa6 <memset>
   12cc8:	2302      	movs	r3, #2
   12cca:	9304      	str	r3, [sp, #16]
   12ccc:	2308      	movs	r3, #8
   12cce:	9306      	str	r3, [sp, #24]
   12cd0:	2320      	movs	r3, #32
   12cd2:	9308      	str	r3, [sp, #32]
   12cd4:	2301      	movs	r3, #1
   12cd6:	930b      	str	r3, [sp, #44]	; 0x2c
   12cd8:	2304      	movs	r3, #4
   12cda:	930d      	str	r3, [sp, #52]	; 0x34
   12cdc:	2310      	movs	r3, #16
   12cde:	f04f 0c40 	mov.w	ip, #64	; 0x40
   12ce2:	930f      	str	r3, [sp, #60]	; 0x3c
   12ce4:	2380      	movs	r3, #128	; 0x80
   12ce6:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   12cea:	23d5      	movs	r3, #213	; 0xd5
   12cec:	a803      	add	r0, sp, #12
   12cee:	9313      	str	r3, [sp, #76]	; 0x4c
   12cf0:	f003 fb9e 	bl	16430 <nrfx_ipc_config_load>
   12cf4:	682b      	ldr	r3, [r5, #0]
   12cf6:	2100      	movs	r1, #0
   12cf8:	685a      	ldr	r2, [r3, #4]
   12cfa:	6818      	ldr	r0, [r3, #0]
   12cfc:	f008 fed3 	bl	1baa6 <memset>
   12d00:	682a      	ldr	r2, [r5, #0]
   12d02:	6814      	ldr	r4, [r2, #0]
   12d04:	69d3      	ldr	r3, [r2, #28]
   12d06:	f104 0660 	add.w	r6, r4, #96	; 0x60
   12d0a:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   12d0e:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   12d12:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   12d16:	f104 0920 	add.w	r9, r4, #32
   12d1a:	2b00      	cmp	r3, #0
   12d1c:	d065      	beq.n	12dea <rpc_transport_ipc_init+0x13e>
   12d1e:	f104 0840 	add.w	r8, r4, #64	; 0x40
   12d22:	4935      	ldr	r1, [pc, #212]	; (12df8 <rpc_transport_ipc_init+0x14c>)
   12d24:	f8c1 9000 	str.w	r9, [r1]
   12d28:	b13b      	cbz	r3, 12d3a <rpc_transport_ipc_init+0x8e>
   12d2a:	6992      	ldr	r2, [r2, #24]
   12d2c:	4640      	mov	r0, r8
   12d2e:	f8c8 2004 	str.w	r2, [r8, #4]
   12d32:	f8c8 3000 	str.w	r3, [r8]
   12d36:	f7ff fdd7 	bl	128e8 <ipc_trace_init>
   12d3a:	6828      	ldr	r0, [r5, #0]
   12d3c:	4d2f      	ldr	r5, [pc, #188]	; (12dfc <rpc_transport_ipc_init+0x150>)
   12d3e:	2300      	movs	r3, #0
   12d40:	602f      	str	r7, [r5, #0]
   12d42:	4d2f      	ldr	r5, [pc, #188]	; (12e00 <rpc_transport_ipc_init+0x154>)
   12d44:	2101      	movs	r1, #1
   12d46:	602e      	str	r6, [r5, #0]
   12d48:	2508      	movs	r5, #8
   12d4a:	6902      	ldr	r2, [r0, #16]
   12d4c:	6940      	ldr	r0, [r0, #20]
   12d4e:	7023      	strb	r3, [r4, #0]
   12d50:	7063      	strb	r3, [r4, #1]
   12d52:	70a1      	strb	r1, [r4, #2]
   12d54:	70e3      	strb	r3, [r4, #3]
   12d56:	6062      	str	r2, [r4, #4]
   12d58:	60a0      	str	r0, [r4, #8]
   12d5a:	60e6      	str	r6, [r4, #12]
   12d5c:	6127      	str	r7, [r4, #16]
   12d5e:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
   12d62:	f8c4 9014 	str.w	r9, [r4, #20]
   12d66:	f8c4 8018 	str.w	r8, [r4, #24]
   12d6a:	707b      	strb	r3, [r7, #1]
   12d6c:	70bb      	strb	r3, [r7, #2]
   12d6e:	70fb      	strb	r3, [r7, #3]
   12d70:	2714      	movs	r7, #20
   12d72:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
   12d76:	4d23      	ldr	r5, [pc, #140]	; (12e04 <rpc_transport_ipc_init+0x158>)
   12d78:	7073      	strb	r3, [r6, #1]
   12d7a:	f8c5 b000 	str.w	fp, [r5]
   12d7e:	4d22      	ldr	r5, [pc, #136]	; (12e08 <rpc_transport_ipc_init+0x15c>)
   12d80:	70b3      	strb	r3, [r6, #2]
   12d82:	f8c5 a000 	str.w	sl, [r5]
   12d86:	4d21      	ldr	r5, [pc, #132]	; (12e0c <rpc_transport_ipc_init+0x160>)
   12d88:	70f3      	strb	r3, [r6, #3]
   12d8a:	602a      	str	r2, [r5, #0]
   12d8c:	4402      	add	r2, r0
   12d8e:	4820      	ldr	r0, [pc, #128]	; (12e10 <rpc_transport_ipc_init+0x164>)
   12d90:	4d20      	ldr	r5, [pc, #128]	; (12e14 <rpc_transport_ipc_init+0x168>)
   12d92:	6002      	str	r2, [r0, #0]
   12d94:	4a20      	ldr	r2, [pc, #128]	; (12e18 <rpc_transport_ipc_init+0x16c>)
   12d96:	4e21      	ldr	r6, [pc, #132]	; (12e1c <rpc_transport_ipc_init+0x170>)
   12d98:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   12d9c:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   12da0:	4c1f      	ldr	r4, [pc, #124]	; (12e20 <rpc_transport_ipc_init+0x174>)
   12da2:	7029      	strb	r1, [r5, #0]
   12da4:	491f      	ldr	r1, [pc, #124]	; (12e24 <rpc_transport_ipc_init+0x178>)
   12da6:	6023      	str	r3, [r4, #0]
   12da8:	9302      	str	r3, [sp, #8]
   12daa:	600b      	str	r3, [r1, #0]
   12dac:	680b      	ldr	r3, [r1, #0]
   12dae:	9302      	str	r3, [sp, #8]
   12db0:	9b02      	ldr	r3, [sp, #8]
   12db2:	2000      	movs	r0, #0
   12db4:	a901      	add	r1, sp, #4
   12db6:	9701      	str	r7, [sp, #4]
   12db8:	f7fe f9d2 	bl	11160 <nrf_modem_os_timedwait>
   12dbc:	9b01      	ldr	r3, [sp, #4]
   12dbe:	3b14      	subs	r3, #20
   12dc0:	441e      	add	r6, r3
   12dc2:	782b      	ldrb	r3, [r5, #0]
   12dc4:	2b01      	cmp	r3, #1
   12dc6:	d104      	bne.n	12dd2 <rpc_transport_ipc_init+0x126>
   12dc8:	2e00      	cmp	r6, #0
   12dca:	d1f2      	bne.n	12db2 <rpc_transport_ipc_init+0x106>
   12dcc:	f06f 033b 	mvn.w	r3, #59	; 0x3b
   12dd0:	6023      	str	r3, [r4, #0]
   12dd2:	6824      	ldr	r4, [r4, #0]
   12dd4:	b95c      	cbnz	r4, 12dee <rpc_transport_ipc_init+0x142>
   12dd6:	4b14      	ldr	r3, [pc, #80]	; (12e28 <rpc_transport_ipc_init+0x17c>)
   12dd8:	701c      	strb	r4, [r3, #0]
   12dda:	4b14      	ldr	r3, [pc, #80]	; (12e2c <rpc_transport_ipc_init+0x180>)
   12ddc:	801c      	strh	r4, [r3, #0]
   12dde:	4b14      	ldr	r3, [pc, #80]	; (12e30 <rpc_transport_ipc_init+0x184>)
   12de0:	801c      	strh	r4, [r3, #0]
   12de2:	4620      	mov	r0, r4
   12de4:	b015      	add	sp, #84	; 0x54
   12de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dea:	4698      	mov	r8, r3
   12dec:	e799      	b.n	12d22 <rpc_transport_ipc_init+0x76>
   12dee:	f003 fb3f 	bl	16470 <nrfx_ipc_uninit>
   12df2:	e7f6      	b.n	12de2 <rpc_transport_ipc_init+0x136>
   12df4:	00012e35 	.word	0x00012e35
   12df8:	2001539c 	.word	0x2001539c
   12dfc:	200153ac 	.word	0x200153ac
   12e00:	200153a4 	.word	0x200153a4
   12e04:	200153a8 	.word	0x200153a8
   12e08:	200153a0 	.word	0x200153a0
   12e0c:	200153b4 	.word	0x200153b4
   12e10:	200153b0 	.word	0x200153b0
   12e14:	2001820a 	.word	0x2001820a
   12e18:	4002a000 	.word	0x4002a000
   12e1c:	000249f0 	.word	0x000249f0
   12e20:	20015390 	.word	0x20015390
   12e24:	40005610 	.word	0x40005610
   12e28:	2001820b 	.word	0x2001820b
   12e2c:	20015eaa 	.word	0x20015eaa
   12e30:	20015ea8 	.word	0x20015ea8

00012e34 <ipc_irq_handler>:
   12e34:	b570      	push	{r4, r5, r6, lr}
   12e36:	4604      	mov	r4, r0
   12e38:	0620      	lsls	r0, r4, #24
   12e3a:	d50c      	bpl.n	12e56 <ipc_irq_handler+0x22>
   12e3c:	f7ff fd86 	bl	1294c <ipc_trace_handle>
   12e40:	f7ff fe18 	bl	12a74 <rpc_trace_coredump_in_progress>
   12e44:	b138      	cbz	r0, 12e56 <ipc_irq_handler+0x22>
   12e46:	22e0      	movs	r2, #224	; 0xe0
   12e48:	4b3f      	ldr	r3, [pc, #252]	; (12f48 <ipc_irq_handler+0x114>)
   12e4a:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   12e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12e52:	605a      	str	r2, [r3, #4]
   12e54:	bd70      	pop	{r4, r5, r6, pc}
   12e56:	07e1      	lsls	r1, r4, #31
   12e58:	d548      	bpl.n	12eec <ipc_irq_handler+0xb8>
   12e5a:	f248 0202 	movw	r2, #32770	; 0x8002
   12e5e:	4b3b      	ldr	r3, [pc, #236]	; (12f4c <ipc_irq_handler+0x118>)
   12e60:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   12e64:	4293      	cmp	r3, r2
   12e66:	d035      	beq.n	12ed4 <ipc_irq_handler+0xa0>
   12e68:	d81b      	bhi.n	12ea2 <ipc_irq_handler+0x6e>
   12e6a:	f243 0232 	movw	r2, #12338	; 0x3032
   12e6e:	4293      	cmp	r3, r2
   12e70:	d036      	beq.n	12ee0 <ipc_irq_handler+0xac>
   12e72:	d80b      	bhi.n	12e8c <ipc_irq_handler+0x58>
   12e74:	3b01      	subs	r3, #1
   12e76:	2b01      	cmp	r3, #1
   12e78:	d8ec      	bhi.n	12e54 <ipc_irq_handler+0x20>
   12e7a:	2203      	movs	r2, #3
   12e7c:	200e      	movs	r0, #14
   12e7e:	4b34      	ldr	r3, [pc, #208]	; (12f50 <ipc_irq_handler+0x11c>)
   12e80:	701a      	strb	r2, [r3, #0]
   12e82:	4b34      	ldr	r3, [pc, #208]	; (12f54 <ipc_irq_handler+0x120>)
   12e84:	6018      	str	r0, [r3, #0]
   12e86:	f008 f8e2 	bl	1b04e <rpc_transport_ipc_fault_handler>
   12e8a:	e7e3      	b.n	12e54 <ipc_irq_handler+0x20>
   12e8c:	f248 0201 	movw	r2, #32769	; 0x8001
   12e90:	4293      	cmp	r3, r2
   12e92:	d1df      	bne.n	12e54 <ipc_irq_handler+0x20>
   12e94:	2203      	movs	r2, #3
   12e96:	4b2e      	ldr	r3, [pc, #184]	; (12f50 <ipc_irq_handler+0x11c>)
   12e98:	701a      	strb	r2, [r3, #0]
   12e9a:	2216      	movs	r2, #22
   12e9c:	4b2d      	ldr	r3, [pc, #180]	; (12f54 <ipc_irq_handler+0x120>)
   12e9e:	601a      	str	r2, [r3, #0]
   12ea0:	e7d8      	b.n	12e54 <ipc_irq_handler+0x20>
   12ea2:	4a2d      	ldr	r2, [pc, #180]	; (12f58 <ipc_irq_handler+0x124>)
   12ea4:	4293      	cmp	r3, r2
   12ea6:	d80c      	bhi.n	12ec2 <ipc_irq_handler+0x8e>
   12ea8:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   12eac:	d80c      	bhi.n	12ec8 <ipc_irq_handler+0x94>
   12eae:	f248 0203 	movw	r2, #32771	; 0x8003
   12eb2:	4293      	cmp	r3, r2
   12eb4:	d1ce      	bne.n	12e54 <ipc_irq_handler+0x20>
   12eb6:	2203      	movs	r2, #3
   12eb8:	4b25      	ldr	r3, [pc, #148]	; (12f50 <ipc_irq_handler+0x11c>)
   12eba:	701a      	strb	r2, [r3, #0]
   12ebc:	220c      	movs	r2, #12
   12ebe:	4b25      	ldr	r3, [pc, #148]	; (12f54 <ipc_irq_handler+0x120>)
   12ec0:	e7ed      	b.n	12e9e <ipc_irq_handler+0x6a>
   12ec2:	4a26      	ldr	r2, [pc, #152]	; (12f5c <ipc_irq_handler+0x128>)
   12ec4:	4293      	cmp	r3, r2
   12ec6:	d1c5      	bne.n	12e54 <ipc_irq_handler+0x20>
   12ec8:	2103      	movs	r1, #3
   12eca:	4a21      	ldr	r2, [pc, #132]	; (12f50 <ipc_irq_handler+0x11c>)
   12ecc:	7011      	strb	r1, [r2, #0]
   12ece:	4a21      	ldr	r2, [pc, #132]	; (12f54 <ipc_irq_handler+0x120>)
   12ed0:	6013      	str	r3, [r2, #0]
   12ed2:	e7bf      	b.n	12e54 <ipc_irq_handler+0x20>
   12ed4:	2203      	movs	r2, #3
   12ed6:	4b1e      	ldr	r3, [pc, #120]	; (12f50 <ipc_irq_handler+0x11c>)
   12ed8:	701a      	strb	r2, [r3, #0]
   12eda:	222d      	movs	r2, #45	; 0x2d
   12edc:	4b1d      	ldr	r3, [pc, #116]	; (12f54 <ipc_irq_handler+0x120>)
   12ede:	e7de      	b.n	12e9e <ipc_irq_handler+0x6a>
   12ee0:	2203      	movs	r2, #3
   12ee2:	4b1b      	ldr	r3, [pc, #108]	; (12f50 <ipc_irq_handler+0x11c>)
   12ee4:	701a      	strb	r2, [r3, #0]
   12ee6:	2205      	movs	r2, #5
   12ee8:	4b1a      	ldr	r3, [pc, #104]	; (12f54 <ipc_irq_handler+0x120>)
   12eea:	e7d8      	b.n	12e9e <ipc_irq_handler+0x6a>
   12eec:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   12ef0:	d003      	beq.n	12efa <ipc_irq_handler+0xc6>
   12ef2:	2202      	movs	r2, #2
   12ef4:	4b16      	ldr	r3, [pc, #88]	; (12f50 <ipc_irq_handler+0x11c>)
   12ef6:	701a      	strb	r2, [r3, #0]
   12ef8:	e7ac      	b.n	12e54 <ipc_irq_handler+0x20>
   12efa:	0762      	lsls	r2, r4, #29
   12efc:	d505      	bpl.n	12f0a <ipc_irq_handler+0xd6>
   12efe:	4b14      	ldr	r3, [pc, #80]	; (12f50 <ipc_irq_handler+0x11c>)
   12f00:	781a      	ldrb	r2, [r3, #0]
   12f02:	461e      	mov	r6, r3
   12f04:	b93a      	cbnz	r2, 12f16 <ipc_irq_handler+0xe2>
   12f06:	f7fe fb57 	bl	115b8 <nrf_modem_os_application_irq_set>
   12f0a:	06e3      	lsls	r3, r4, #27
   12f0c:	d5a2      	bpl.n	12e54 <ipc_irq_handler+0x20>
   12f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12f12:	f7fe bb51 	b.w	115b8 <nrf_modem_os_application_irq_set>
   12f16:	2a01      	cmp	r2, #1
   12f18:	d1f7      	bne.n	12f0a <ipc_irq_handler+0xd6>
   12f1a:	4a11      	ldr	r2, [pc, #68]	; (12f60 <ipc_irq_handler+0x12c>)
   12f1c:	4811      	ldr	r0, [pc, #68]	; (12f64 <ipc_irq_handler+0x130>)
   12f1e:	6812      	ldr	r2, [r2, #0]
   12f20:	6891      	ldr	r1, [r2, #8]
   12f22:	6041      	str	r1, [r0, #4]
   12f24:	6852      	ldr	r2, [r2, #4]
   12f26:	6002      	str	r2, [r0, #0]
   12f28:	b101      	cbz	r1, 12f2c <ipc_irq_handler+0xf8>
   12f2a:	b92a      	cbnz	r2, 12f38 <ipc_irq_handler+0x104>
   12f2c:	2303      	movs	r3, #3
   12f2e:	2216      	movs	r2, #22
   12f30:	7033      	strb	r3, [r6, #0]
   12f32:	4b08      	ldr	r3, [pc, #32]	; (12f54 <ipc_irq_handler+0x120>)
   12f34:	601a      	str	r2, [r3, #0]
   12f36:	e7e8      	b.n	12f0a <ipc_irq_handler+0xd6>
   12f38:	6809      	ldr	r1, [r1, #0]
   12f3a:	2910      	cmp	r1, #16
   12f3c:	d8f6      	bhi.n	12f2c <ipc_irq_handler+0xf8>
   12f3e:	6812      	ldr	r2, [r2, #0]
   12f40:	2a10      	cmp	r2, #16
   12f42:	d8f3      	bhi.n	12f2c <ipc_irq_handler+0xf8>
   12f44:	701d      	strb	r5, [r3, #0]
   12f46:	e7e0      	b.n	12f0a <ipc_irq_handler+0xd6>
   12f48:	e000e100 	.word	0xe000e100
   12f4c:	4002a000 	.word	0x4002a000
   12f50:	2001820a 	.word	0x2001820a
   12f54:	20015390 	.word	0x20015390
   12f58:	04400004 	.word	0x04400004
   12f5c:	05500001 	.word	0x05500001
   12f60:	2001539c 	.word	0x2001539c
   12f64:	20015394 	.word	0x20015394

00012f68 <interface_init>:
   12f68:	b508      	push	{r3, lr}
   12f6a:	f44f 72b4 	mov.w	r2, #360	; 0x168
   12f6e:	2100      	movs	r1, #0
   12f70:	4802      	ldr	r0, [pc, #8]	; (12f7c <interface_init+0x14>)
   12f72:	f008 fd98 	bl	1baa6 <memset>
   12f76:	2000      	movs	r0, #0
   12f78:	bd08      	pop	{r3, pc}
   12f7a:	bf00      	nop
   12f7c:	200153b8 	.word	0x200153b8

00012f80 <interface_socket_allocate>:
   12f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f82:	4606      	mov	r6, r0
   12f84:	2400      	movs	r4, #0
   12f86:	2728      	movs	r7, #40	; 0x28
   12f88:	4b0f      	ldr	r3, [pc, #60]	; (12fc8 <interface_socket_allocate+0x48>)
   12f8a:	fb07 f004 	mul.w	r0, r7, r4
   12f8e:	181d      	adds	r5, r3, r0
   12f90:	5818      	ldr	r0, [r3, r0]
   12f92:	b988      	cbnz	r0, 12fb8 <interface_socket_allocate+0x38>
   12f94:	f04f 37ff 	mov.w	r7, #4294967295
   12f98:	2301      	movs	r3, #1
   12f9a:	4628      	mov	r0, r5
   12f9c:	61af      	str	r7, [r5, #24]
   12f9e:	602b      	str	r3, [r5, #0]
   12fa0:	f007 f970 	bl	1a284 <packet_handler_alloc_and_init>
   12fa4:	b168      	cbz	r0, 12fc2 <interface_socket_allocate+0x42>
   12fa6:	4628      	mov	r0, r5
   12fa8:	f007 f983 	bl	1a2b2 <socket_free>
   12fac:	200c      	movs	r0, #12
   12fae:	f7fe f98f 	bl	112d0 <nrf_modem_os_errno_set>
   12fb2:	f04f 34ff 	mov.w	r4, #4294967295
   12fb6:	e005      	b.n	12fc4 <interface_socket_allocate+0x44>
   12fb8:	3401      	adds	r4, #1
   12fba:	2c09      	cmp	r4, #9
   12fbc:	d1e5      	bne.n	12f8a <interface_socket_allocate+0xa>
   12fbe:	2069      	movs	r0, #105	; 0x69
   12fc0:	e7f5      	b.n	12fae <interface_socket_allocate+0x2e>
   12fc2:	6035      	str	r5, [r6, #0]
   12fc4:	4620      	mov	r0, r4
   12fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12fc8:	200153b8 	.word	0x200153b8

00012fcc <interface_socket_free>:
   12fcc:	2808      	cmp	r0, #8
   12fce:	d805      	bhi.n	12fdc <interface_socket_free+0x10>
   12fd0:	2228      	movs	r2, #40	; 0x28
   12fd2:	4b03      	ldr	r3, [pc, #12]	; (12fe0 <interface_socket_free+0x14>)
   12fd4:	fb02 3000 	mla	r0, r2, r0, r3
   12fd8:	f007 b96b 	b.w	1a2b2 <socket_free>
   12fdc:	4770      	bx	lr
   12fde:	bf00      	nop
   12fe0:	200153b8 	.word	0x200153b8

00012fe4 <interface_socket_packet_handler_update>:
   12fe4:	2808      	cmp	r0, #8
   12fe6:	b570      	push	{r4, r5, r6, lr}
   12fe8:	d812      	bhi.n	13010 <interface_socket_packet_handler_update+0x2c>
   12fea:	2328      	movs	r3, #40	; 0x28
   12fec:	4358      	muls	r0, r3
   12fee:	4c09      	ldr	r4, [pc, #36]	; (13014 <interface_socket_packet_handler_update+0x30>)
   12ff0:	5823      	ldr	r3, [r4, r0]
   12ff2:	1825      	adds	r5, r4, r0
   12ff4:	b163      	cbz	r3, 13010 <interface_socket_packet_handler_update+0x2c>
   12ff6:	4628      	mov	r0, r5
   12ff8:	69ee      	ldr	r6, [r5, #28]
   12ffa:	f007 f943 	bl	1a284 <packet_handler_alloc_and_init>
   12ffe:	4604      	mov	r4, r0
   13000:	b920      	cbnz	r0, 1300c <interface_socket_packet_handler_update+0x28>
   13002:	4630      	mov	r0, r6
   13004:	f008 f805 	bl	1b012 <packet_handler_delete>
   13008:	4620      	mov	r0, r4
   1300a:	bd70      	pop	{r4, r5, r6, pc}
   1300c:	61ee      	str	r6, [r5, #28]
   1300e:	e7fb      	b.n	13008 <interface_socket_packet_handler_update+0x24>
   13010:	2402      	movs	r4, #2
   13012:	e7f9      	b.n	13008 <interface_socket_packet_handler_update+0x24>
   13014:	200153b8 	.word	0x200153b8

00013018 <interface_socket_wait>:
   13018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1301c:	4615      	mov	r5, r2
   1301e:	2228      	movs	r2, #40	; 0x28
   13020:	4350      	muls	r0, r2
   13022:	461e      	mov	r6, r3
   13024:	4b0e      	ldr	r3, [pc, #56]	; (13060 <interface_socket_wait+0x48>)
   13026:	460c      	mov	r4, r1
   13028:	181f      	adds	r7, r3, r0
   1302a:	581b      	ldr	r3, [r3, r0]
   1302c:	402b      	ands	r3, r5
   1302e:	428b      	cmp	r3, r1
   13030:	d102      	bne.n	13038 <interface_socket_wait+0x20>
   13032:	2000      	movs	r0, #0
   13034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13038:	687b      	ldr	r3, [r7, #4]
   1303a:	2b00      	cmp	r3, #0
   1303c:	d1f9      	bne.n	13032 <interface_socket_wait+0x1a>
   1303e:	46b8      	mov	r8, r7
   13040:	f8d8 3000 	ldr.w	r3, [r8]
   13044:	402b      	ands	r3, r5
   13046:	42a3      	cmp	r3, r4
   13048:	d0f3      	beq.n	13032 <interface_socket_wait+0x1a>
   1304a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1304e:	2b00      	cmp	r3, #0
   13050:	d1ef      	bne.n	13032 <interface_socket_wait+0x1a>
   13052:	4631      	mov	r1, r6
   13054:	4638      	mov	r0, r7
   13056:	f7fe f883 	bl	11160 <nrf_modem_os_timedwait>
   1305a:	2800      	cmp	r0, #0
   1305c:	d0f0      	beq.n	13040 <interface_socket_wait+0x28>
   1305e:	e7e9      	b.n	13034 <interface_socket_wait+0x1c>
   13060:	200153b8 	.word	0x200153b8

00013064 <interface_from_internal_id_search>:
   13064:	4b0a      	ldr	r3, [pc, #40]	; (13090 <interface_from_internal_id_search+0x2c>)
   13066:	4602      	mov	r2, r0
   13068:	b530      	push	{r4, r5, lr}
   1306a:	2000      	movs	r0, #0
   1306c:	461c      	mov	r4, r3
   1306e:	2128      	movs	r1, #40	; 0x28
   13070:	fb01 f500 	mul.w	r5, r1, r0
   13074:	5965      	ldr	r5, [r4, r5]
   13076:	b115      	cbz	r5, 1307e <interface_from_internal_id_search+0x1a>
   13078:	699d      	ldr	r5, [r3, #24]
   1307a:	4295      	cmp	r5, r2
   1307c:	d006      	beq.n	1308c <interface_from_internal_id_search+0x28>
   1307e:	3001      	adds	r0, #1
   13080:	2809      	cmp	r0, #9
   13082:	f103 0328 	add.w	r3, r3, #40	; 0x28
   13086:	d1f3      	bne.n	13070 <interface_from_internal_id_search+0xc>
   13088:	f04f 30ff 	mov.w	r0, #4294967295
   1308c:	bd30      	pop	{r4, r5, pc}
   1308e:	bf00      	nop
   13090:	200153b8 	.word	0x200153b8

00013094 <interface_socket_from_handle_get>:
   13094:	2808      	cmp	r0, #8
   13096:	d809      	bhi.n	130ac <interface_socket_from_handle_get+0x18>
   13098:	2328      	movs	r3, #40	; 0x28
   1309a:	4358      	muls	r0, r3
   1309c:	4a04      	ldr	r2, [pc, #16]	; (130b0 <interface_socket_from_handle_get+0x1c>)
   1309e:	1813      	adds	r3, r2, r0
   130a0:	5812      	ldr	r2, [r2, r0]
   130a2:	2a00      	cmp	r2, #0
   130a4:	bf14      	ite	ne
   130a6:	4618      	movne	r0, r3
   130a8:	2000      	moveq	r0, #0
   130aa:	4770      	bx	lr
   130ac:	2000      	movs	r0, #0
   130ae:	4770      	bx	lr
   130b0:	200153b8 	.word	0x200153b8

000130b4 <interface_socket_setopt>:
   130b4:	2808      	cmp	r0, #8
   130b6:	b538      	push	{r3, r4, r5, lr}
   130b8:	d82c      	bhi.n	13114 <interface_socket_setopt+0x60>
   130ba:	2428      	movs	r4, #40	; 0x28
   130bc:	4360      	muls	r0, r4
   130be:	4d16      	ldr	r5, [pc, #88]	; (13118 <interface_socket_setopt+0x64>)
   130c0:	182c      	adds	r4, r5, r0
   130c2:	5828      	ldr	r0, [r5, r0]
   130c4:	b330      	cbz	r0, 13114 <interface_socket_setopt+0x60>
   130c6:	2901      	cmp	r1, #1
   130c8:	d005      	beq.n	130d6 <interface_socket_setopt+0x22>
   130ca:	202a      	movs	r0, #42	; 0x2a
   130cc:	f7fe f900 	bl	112d0 <nrf_modem_os_errno_set>
   130d0:	f04f 30ff 	mov.w	r0, #4294967295
   130d4:	e01b      	b.n	1310e <interface_socket_setopt+0x5a>
   130d6:	f1a2 0114 	sub.w	r1, r2, #20
   130da:	2901      	cmp	r1, #1
   130dc:	d8f5      	bhi.n	130ca <interface_socket_setopt+0x16>
   130de:	9904      	ldr	r1, [sp, #16]
   130e0:	2908      	cmp	r1, #8
   130e2:	d115      	bne.n	13110 <interface_socket_setopt+0x5c>
   130e4:	b1a3      	cbz	r3, 13110 <interface_socket_setopt+0x5c>
   130e6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   130ea:	6858      	ldr	r0, [r3, #4]
   130ec:	2100      	movs	r1, #0
   130ee:	fbb0 f0f5 	udiv	r0, r0, r5
   130f2:	681b      	ldr	r3, [r3, #0]
   130f4:	fbe5 0103 	umlal	r0, r1, r5, r3
   130f8:	2901      	cmp	r1, #1
   130fa:	bf08      	it	eq
   130fc:	2800      	cmpeq	r0, #0
   130fe:	d301      	bcc.n	13104 <interface_socket_setopt+0x50>
   13100:	2025      	movs	r0, #37	; 0x25
   13102:	e7e3      	b.n	130cc <interface_socket_setopt+0x18>
   13104:	2a14      	cmp	r2, #20
   13106:	bf0c      	ite	eq
   13108:	6220      	streq	r0, [r4, #32]
   1310a:	6260      	strne	r0, [r4, #36]	; 0x24
   1310c:	2000      	movs	r0, #0
   1310e:	bd38      	pop	{r3, r4, r5, pc}
   13110:	2016      	movs	r0, #22
   13112:	e7db      	b.n	130cc <interface_socket_setopt+0x18>
   13114:	2009      	movs	r0, #9
   13116:	e7d9      	b.n	130cc <interface_socket_setopt+0x18>
   13118:	200153b8 	.word	0x200153b8

0001311c <interface_socket_getopt>:
   1311c:	b570      	push	{r4, r5, r6, lr}
   1311e:	2808      	cmp	r0, #8
   13120:	9d04      	ldr	r5, [sp, #16]
   13122:	d832      	bhi.n	1318a <interface_socket_getopt+0x6e>
   13124:	2428      	movs	r4, #40	; 0x28
   13126:	4360      	muls	r0, r4
   13128:	4e19      	ldr	r6, [pc, #100]	; (13190 <interface_socket_getopt+0x74>)
   1312a:	1834      	adds	r4, r6, r0
   1312c:	5830      	ldr	r0, [r6, r0]
   1312e:	b360      	cbz	r0, 1318a <interface_socket_getopt+0x6e>
   13130:	2901      	cmp	r1, #1
   13132:	d005      	beq.n	13140 <interface_socket_getopt+0x24>
   13134:	202a      	movs	r0, #42	; 0x2a
   13136:	f7fe f8cb 	bl	112d0 <nrf_modem_os_errno_set>
   1313a:	f04f 30ff 	mov.w	r0, #4294967295
   1313e:	e00c      	b.n	1315a <interface_socket_getopt+0x3e>
   13140:	b103      	cbz	r3, 13144 <interface_socket_getopt+0x28>
   13142:	b90d      	cbnz	r5, 13148 <interface_socket_getopt+0x2c>
   13144:	2016      	movs	r0, #22
   13146:	e7f6      	b.n	13136 <interface_socket_getopt+0x1a>
   13148:	2a04      	cmp	r2, #4
   1314a:	d107      	bne.n	1315c <interface_socket_getopt+0x40>
   1314c:	682a      	ldr	r2, [r5, #0]
   1314e:	2a04      	cmp	r2, #4
   13150:	d1f8      	bne.n	13144 <interface_socket_getopt+0x28>
   13152:	2000      	movs	r0, #0
   13154:	6862      	ldr	r2, [r4, #4]
   13156:	601a      	str	r2, [r3, #0]
   13158:	6060      	str	r0, [r4, #4]
   1315a:	bd70      	pop	{r4, r5, r6, pc}
   1315c:	f1a2 0114 	sub.w	r1, r2, #20
   13160:	2901      	cmp	r1, #1
   13162:	d8e7      	bhi.n	13134 <interface_socket_getopt+0x18>
   13164:	6829      	ldr	r1, [r5, #0]
   13166:	2908      	cmp	r1, #8
   13168:	d1ec      	bne.n	13144 <interface_socket_getopt+0x28>
   1316a:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   1316e:	2a14      	cmp	r2, #20
   13170:	bf18      	it	ne
   13172:	4608      	movne	r0, r1
   13174:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13178:	fbb0 f1f2 	udiv	r1, r0, r2
   1317c:	6019      	str	r1, [r3, #0]
   1317e:	fb02 0111 	mls	r1, r2, r1, r0
   13182:	434a      	muls	r2, r1
   13184:	2000      	movs	r0, #0
   13186:	605a      	str	r2, [r3, #4]
   13188:	e7e7      	b.n	1315a <interface_socket_getopt+0x3e>
   1318a:	2009      	movs	r0, #9
   1318c:	e7d3      	b.n	13136 <interface_socket_getopt+0x1a>
   1318e:	bf00      	nop
   13190:	200153b8 	.word	0x200153b8

00013194 <interface_socket_fcntl>:
   13194:	2808      	cmp	r0, #8
   13196:	b510      	push	{r4, lr}
   13198:	d82c      	bhi.n	131f4 <interface_socket_fcntl+0x60>
   1319a:	2328      	movs	r3, #40	; 0x28
   1319c:	4343      	muls	r3, r0
   1319e:	4c16      	ldr	r4, [pc, #88]	; (131f8 <interface_socket_fcntl+0x64>)
   131a0:	58e0      	ldr	r0, [r4, r3]
   131a2:	b338      	cbz	r0, 131f4 <interface_socket_fcntl+0x60>
   131a4:	2901      	cmp	r1, #1
   131a6:	d11d      	bne.n	131e4 <interface_socket_fcntl+0x50>
   131a8:	f012 0001 	ands.w	r0, r2, #1
   131ac:	58e2      	ldr	r2, [r4, r3]
   131ae:	d004      	beq.n	131ba <interface_socket_fcntl+0x26>
   131b0:	2000      	movs	r0, #0
   131b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   131b6:	50e2      	str	r2, [r4, r3]
   131b8:	bd10      	pop	{r4, pc}
   131ba:	0092      	lsls	r2, r2, #2
   131bc:	d407      	bmi.n	131ce <interface_socket_fcntl+0x3a>
   131be:	58e2      	ldr	r2, [r4, r3]
   131c0:	b292      	uxth	r2, r2
   131c2:	2a0a      	cmp	r2, #10
   131c4:	d003      	beq.n	131ce <interface_socket_fcntl+0x3a>
   131c6:	58e2      	ldr	r2, [r4, r3]
   131c8:	b292      	uxth	r2, r2
   131ca:	2a0b      	cmp	r2, #11
   131cc:	d105      	bne.n	131da <interface_socket_fcntl+0x46>
   131ce:	2023      	movs	r0, #35	; 0x23
   131d0:	f7fe f87e 	bl	112d0 <nrf_modem_os_errno_set>
   131d4:	f04f 30ff 	mov.w	r0, #4294967295
   131d8:	e7ee      	b.n	131b8 <interface_socket_fcntl+0x24>
   131da:	58e2      	ldr	r2, [r4, r3]
   131dc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   131e0:	50e2      	str	r2, [r4, r3]
   131e2:	e7e9      	b.n	131b8 <interface_socket_fcntl+0x24>
   131e4:	2902      	cmp	r1, #2
   131e6:	d103      	bne.n	131f0 <interface_socket_fcntl+0x5c>
   131e8:	58e0      	ldr	r0, [r4, r3]
   131ea:	f3c0 7000 	ubfx	r0, r0, #28, #1
   131ee:	e7e3      	b.n	131b8 <interface_socket_fcntl+0x24>
   131f0:	2016      	movs	r0, #22
   131f2:	e7ed      	b.n	131d0 <interface_socket_fcntl+0x3c>
   131f4:	2009      	movs	r0, #9
   131f6:	e7eb      	b.n	131d0 <interface_socket_fcntl+0x3c>
   131f8:	200153b8 	.word	0x200153b8

000131fc <rpc_error_to_nrf_errno>:
   131fc:	2810      	cmp	r0, #16
   131fe:	bf9a      	itte	ls
   13200:	4b01      	ldrls	r3, [pc, #4]	; (13208 <rpc_error_to_nrf_errno+0xc>)
   13202:	5618      	ldrsbls	r0, [r3, r0]
   13204:	202d      	movhi	r0, #45	; 0x2d
   13206:	4770      	bx	lr
   13208:	0001d454 	.word	0x0001d454

0001320c <ip_interface_init>:
   1320c:	b510      	push	{r4, lr}
   1320e:	2400      	movs	r4, #0
   13210:	4b06      	ldr	r3, [pc, #24]	; (1322c <ip_interface_init+0x20>)
   13212:	2224      	movs	r2, #36	; 0x24
   13214:	601c      	str	r4, [r3, #0]
   13216:	4b06      	ldr	r3, [pc, #24]	; (13230 <ip_interface_init+0x24>)
   13218:	4621      	mov	r1, r4
   1321a:	4806      	ldr	r0, [pc, #24]	; (13234 <ip_interface_init+0x28>)
   1321c:	601c      	str	r4, [r3, #0]
   1321e:	f008 fc42 	bl	1baa6 <memset>
   13222:	2201      	movs	r2, #1
   13224:	4b04      	ldr	r3, [pc, #16]	; (13238 <ip_interface_init+0x2c>)
   13226:	4620      	mov	r0, r4
   13228:	701a      	strb	r2, [r3, #0]
   1322a:	bd10      	pop	{r4, pc}
   1322c:	20015530 	.word	0x20015530
   13230:	2001552c 	.word	0x2001552c
   13234:	20015534 	.word	0x20015534
   13238:	2001820c 	.word	0x2001820c

0001323c <ip_interface_open>:
   1323c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1323e:	2300      	movs	r3, #0
   13240:	f04f 34ff 	mov.w	r4, #4294967295
   13244:	e9cd 3400 	strd	r3, r4, [sp]
   13248:	4b3c      	ldr	r3, [pc, #240]	; (1333c <ip_interface_open+0x100>)
   1324a:	4607      	mov	r7, r0
   1324c:	781b      	ldrb	r3, [r3, #0]
   1324e:	460d      	mov	r5, r1
   13250:	4616      	mov	r6, r2
   13252:	b92b      	cbnz	r3, 13260 <ip_interface_open+0x24>
   13254:	2070      	movs	r0, #112	; 0x70
   13256:	f7fe f83b 	bl	112d0 <nrf_modem_os_errno_set>
   1325a:	4620      	mov	r0, r4
   1325c:	b003      	add	sp, #12
   1325e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13260:	f020 0308 	bic.w	r3, r0, #8
   13264:	2b02      	cmp	r3, #2
   13266:	d003      	beq.n	13270 <ip_interface_open+0x34>
   13268:	2805      	cmp	r0, #5
   1326a:	d001      	beq.n	13270 <ip_interface_open+0x34>
   1326c:	202f      	movs	r0, #47	; 0x2f
   1326e:	e7f2      	b.n	13256 <ip_interface_open+0x1a>
   13270:	1e6b      	subs	r3, r5, #1
   13272:	2b02      	cmp	r3, #2
   13274:	d905      	bls.n	13282 <ip_interface_open+0x46>
   13276:	2016      	movs	r0, #22
   13278:	f7fe f82a 	bl	112d0 <nrf_modem_os_errno_set>
   1327c:	f04f 34ff 	mov.w	r4, #4294967295
   13280:	e7eb      	b.n	1325a <ip_interface_open+0x1e>
   13282:	b15e      	cbz	r6, 1329c <ip_interface_open+0x60>
   13284:	2d01      	cmp	r5, #1
   13286:	d103      	bne.n	13290 <ip_interface_open+0x54>
   13288:	2e01      	cmp	r6, #1
   1328a:	d105      	bne.n	13298 <ip_interface_open+0x5c>
   1328c:	2602      	movs	r6, #2
   1328e:	e00a      	b.n	132a6 <ip_interface_open+0x6a>
   13290:	2d02      	cmp	r5, #2
   13292:	d1fb      	bne.n	1328c <ip_interface_open+0x50>
   13294:	2e02      	cmp	r6, #2
   13296:	d006      	beq.n	132a6 <ip_interface_open+0x6a>
   13298:	2029      	movs	r0, #41	; 0x29
   1329a:	e7ed      	b.n	13278 <ip_interface_open+0x3c>
   1329c:	2d01      	cmp	r5, #1
   1329e:	d010      	beq.n	132c2 <ip_interface_open+0x86>
   132a0:	2d03      	cmp	r5, #3
   132a2:	bf18      	it	ne
   132a4:	2602      	movne	r6, #2
   132a6:	4629      	mov	r1, r5
   132a8:	4668      	mov	r0, sp
   132aa:	4a25      	ldr	r2, [pc, #148]	; (13340 <ip_interface_open+0x104>)
   132ac:	f7ff fe68 	bl	12f80 <interface_socket_allocate>
   132b0:	9b00      	ldr	r3, [sp, #0]
   132b2:	4604      	mov	r4, r0
   132b4:	b93b      	cbnz	r3, 132c6 <ip_interface_open+0x8a>
   132b6:	2669      	movs	r6, #105	; 0x69
   132b8:	4620      	mov	r0, r4
   132ba:	f7ff fe87 	bl	12fcc <interface_socket_free>
   132be:	4630      	mov	r0, r6
   132c0:	e7da      	b.n	13278 <ip_interface_open+0x3c>
   132c2:	462e      	mov	r6, r5
   132c4:	e7ef      	b.n	132a6 <ip_interface_open+0x6a>
   132c6:	f04f 31ff 	mov.w	r1, #4294967295
   132ca:	e9c3 7503 	strd	r7, r5, [r3, #12]
   132ce:	615e      	str	r6, [r3, #20]
   132d0:	f247 0201 	movw	r2, #28673	; 0x7001
   132d4:	2300      	movs	r3, #0
   132d6:	f007 f83d 	bl	1a354 <ip_interface_request_create>
   132da:	4601      	mov	r1, r0
   132dc:	2800      	cmp	r0, #0
   132de:	d0ea      	beq.n	132b6 <ip_interface_open+0x7a>
   132e0:	6883      	ldr	r3, [r0, #8]
   132e2:	2f05      	cmp	r7, #5
   132e4:	f103 030c 	add.w	r3, r3, #12
   132e8:	6083      	str	r3, [r0, #8]
   132ea:	d003      	beq.n	132f4 <ip_interface_open+0xb8>
   132ec:	2f0a      	cmp	r7, #10
   132ee:	bf0c      	ite	eq
   132f0:	2702      	moveq	r7, #2
   132f2:	2701      	movne	r7, #1
   132f4:	61ce      	str	r6, [r1, #28]
   132f6:	2301      	movs	r3, #1
   132f8:	f247 0201 	movw	r2, #28673	; 0x7001
   132fc:	9800      	ldr	r0, [sp, #0]
   132fe:	614f      	str	r7, [r1, #20]
   13300:	618d      	str	r5, [r1, #24]
   13302:	f007 f83f 	bl	1a384 <ip_interface_request_send>
   13306:	4606      	mov	r6, r0
   13308:	2800      	cmp	r0, #0
   1330a:	d1d5      	bne.n	132b8 <ip_interface_open+0x7c>
   1330c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13310:	2102      	movs	r1, #2
   13312:	4620      	mov	r0, r4
   13314:	ab01      	add	r3, sp, #4
   13316:	f007 f848 	bl	1a3aa <ip_interface_wait>
   1331a:	4606      	mov	r6, r0
   1331c:	2800      	cmp	r0, #0
   1331e:	d1cb      	bne.n	132b8 <ip_interface_open+0x7c>
   13320:	3d02      	subs	r5, #2
   13322:	2d01      	cmp	r5, #1
   13324:	d899      	bhi.n	1325a <ip_interface_open+0x1e>
   13326:	9b00      	ldr	r3, [sp, #0]
   13328:	681a      	ldr	r2, [r3, #0]
   1332a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1332e:	601a      	str	r2, [r3, #0]
   13330:	681a      	ldr	r2, [r3, #0]
   13332:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   13336:	601a      	str	r2, [r3, #0]
   13338:	e78f      	b.n	1325a <ip_interface_open+0x1e>
   1333a:	bf00      	nop
   1333c:	2001820c 	.word	0x2001820c
   13340:	0001a2f3 	.word	0x0001a2f3

00013344 <ip_interface_close>:
   13344:	f04f 33ff 	mov.w	r3, #4294967295
   13348:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1334a:	4605      	mov	r5, r0
   1334c:	9301      	str	r3, [sp, #4]
   1334e:	f7ff fea1 	bl	13094 <interface_socket_from_handle_get>
   13352:	4604      	mov	r4, r0
   13354:	b3a0      	cbz	r0, 133c0 <ip_interface_close+0x7c>
   13356:	6981      	ldr	r1, [r0, #24]
   13358:	6806      	ldr	r6, [r0, #0]
   1335a:	2300      	movs	r3, #0
   1335c:	f247 0209 	movw	r2, #28681	; 0x7009
   13360:	4628      	mov	r0, r5
   13362:	f006 fff7 	bl	1a354 <ip_interface_request_create>
   13366:	4601      	mov	r1, r0
   13368:	b388      	cbz	r0, 133ce <ip_interface_close+0x8a>
   1336a:	6823      	ldr	r3, [r4, #0]
   1336c:	4620      	mov	r0, r4
   1336e:	0c1b      	lsrs	r3, r3, #16
   13370:	041b      	lsls	r3, r3, #16
   13372:	f043 030d 	orr.w	r3, r3, #13
   13376:	6023      	str	r3, [r4, #0]
   13378:	6823      	ldr	r3, [r4, #0]
   1337a:	f247 0209 	movw	r2, #28681	; 0x7009
   1337e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13382:	6023      	str	r3, [r4, #0]
   13384:	6823      	ldr	r3, [r4, #0]
   13386:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1338a:	6023      	str	r3, [r4, #0]
   1338c:	4633      	mov	r3, r6
   1338e:	f006 fff9 	bl	1a384 <ip_interface_request_send>
   13392:	4604      	mov	r4, r0
   13394:	b9a8      	cbnz	r0, 133c2 <ip_interface_close+0x7e>
   13396:	4e0f      	ldr	r6, [pc, #60]	; (133d4 <ip_interface_close+0x90>)
   13398:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1339c:	210e      	movs	r1, #14
   1339e:	4628      	mov	r0, r5
   133a0:	ab01      	add	r3, sp, #4
   133a2:	f007 f802 	bl	1a3aa <ip_interface_wait>
   133a6:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
   133aa:	b118      	cbz	r0, 133b4 <ip_interface_close+0x70>
   133ac:	f006 fdd7 	bl	19f5e <rpc_ip_client_message_free>
   133b0:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
   133b4:	4628      	mov	r0, r5
   133b6:	f7ff fe09 	bl	12fcc <interface_socket_free>
   133ba:	4620      	mov	r0, r4
   133bc:	b002      	add	sp, #8
   133be:	bd70      	pop	{r4, r5, r6, pc}
   133c0:	2409      	movs	r4, #9
   133c2:	4620      	mov	r0, r4
   133c4:	f7fd ff84 	bl	112d0 <nrf_modem_os_errno_set>
   133c8:	f04f 34ff 	mov.w	r4, #4294967295
   133cc:	e7f5      	b.n	133ba <ip_interface_close+0x76>
   133ce:	240c      	movs	r4, #12
   133d0:	e7f7      	b.n	133c2 <ip_interface_close+0x7e>
   133d2:	bf00      	nop
   133d4:	20015534 	.word	0x20015534

000133d8 <ip_interface_sendto>:
   133d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133dc:	4698      	mov	r8, r3
   133de:	2300      	movs	r3, #0
   133e0:	b089      	sub	sp, #36	; 0x24
   133e2:	4606      	mov	r6, r0
   133e4:	4689      	mov	r9, r1
   133e6:	4615      	mov	r5, r2
   133e8:	9305      	str	r3, [sp, #20]
   133ea:	f7ff fe53 	bl	13094 <interface_socket_from_handle_get>
   133ee:	4604      	mov	r4, r0
   133f0:	2800      	cmp	r0, #0
   133f2:	f000 80e2 	beq.w	135ba <ip_interface_sendto+0x1e2>
   133f6:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   133fa:	f300 80e1 	bgt.w	135c0 <ip_interface_sendto+0x1e8>
   133fe:	6903      	ldr	r3, [r0, #16]
   13400:	2b01      	cmp	r3, #1
   13402:	d103      	bne.n	1340c <ip_interface_sendto+0x34>
   13404:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13406:	2a00      	cmp	r2, #0
   13408:	f040 80dd 	bne.w	135c6 <ip_interface_sendto+0x1ee>
   1340c:	6822      	ldr	r2, [r4, #0]
   1340e:	0391      	lsls	r1, r2, #14
   13410:	d428      	bmi.n	13464 <ip_interface_sendto+0x8c>
   13412:	6822      	ldr	r2, [r4, #0]
   13414:	0092      	lsls	r2, r2, #2
   13416:	d409      	bmi.n	1342c <ip_interface_sendto+0x54>
   13418:	2b01      	cmp	r3, #1
   1341a:	d103      	bne.n	13424 <ip_interface_sendto+0x4c>
   1341c:	6823      	ldr	r3, [r4, #0]
   1341e:	b29b      	uxth	r3, r3
   13420:	2b05      	cmp	r3, #5
   13422:	d103      	bne.n	1342c <ip_interface_sendto+0x54>
   13424:	6823      	ldr	r3, [r4, #0]
   13426:	031f      	lsls	r7, r3, #12
   13428:	f140 80d0 	bpl.w	135cc <ip_interface_sendto+0x1f4>
   1342c:	6823      	ldr	r3, [r4, #0]
   1342e:	0318      	lsls	r0, r3, #12
   13430:	f140 80cf 	bpl.w	135d2 <ip_interface_sendto+0x1fa>
   13434:	f8d4 b008 	ldr.w	fp, [r4, #8]
   13438:	f1bb 0f00 	cmp.w	fp, #0
   1343c:	f000 80cf 	beq.w	135de <ip_interface_sendto+0x206>
   13440:	4658      	mov	r0, fp
   13442:	f7fd ff45 	bl	112d0 <nrf_modem_os_errno_set>
   13446:	f04f 35ff 	mov.w	r5, #4294967295
   1344a:	4c72      	ldr	r4, [pc, #456]	; (13614 <ip_interface_sendto+0x23c>)
   1344c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   13450:	b120      	cbz	r0, 1345c <ip_interface_sendto+0x84>
   13452:	f006 fd84 	bl	19f5e <rpc_ip_client_message_free>
   13456:	2300      	movs	r3, #0
   13458:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   1345c:	4628      	mov	r0, r5
   1345e:	b009      	add	sp, #36	; 0x24
   13460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13464:	f1b8 0f00 	cmp.w	r8, #0
   13468:	d03a      	beq.n	134e0 <ip_interface_sendto+0x108>
   1346a:	f018 0f02 	tst.w	r8, #2
   1346e:	f000 80b3 	beq.w	135d8 <ip_interface_sendto+0x200>
   13472:	2700      	movs	r7, #0
   13474:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13476:	f247 0a06 	movw	sl, #28678	; 0x7006
   1347a:	2b00      	cmp	r3, #0
   1347c:	bf08      	it	eq
   1347e:	f04f 33ff 	moveq.w	r3, #4294967295
   13482:	9306      	str	r3, [sp, #24]
   13484:	0433      	lsls	r3, r6, #16
   13486:	9303      	str	r3, [sp, #12]
   13488:	4629      	mov	r1, r5
   1348a:	a805      	add	r0, sp, #20
   1348c:	f006 fd41 	bl	19f12 <rpc_ip_client_request_alloc>
   13490:	280c      	cmp	r0, #12
   13492:	f040 80b9 	bne.w	13608 <ip_interface_sendto+0x230>
   13496:	2f00      	cmp	r7, #0
   13498:	f000 8086 	beq.w	135a8 <ip_interface_sendto+0x1d0>
   1349c:	9b06      	ldr	r3, [sp, #24]
   1349e:	3301      	adds	r3, #1
   134a0:	d0f2      	beq.n	13488 <ip_interface_sendto+0xb0>
   134a2:	230a      	movs	r3, #10
   134a4:	2000      	movs	r0, #0
   134a6:	a907      	add	r1, sp, #28
   134a8:	9307      	str	r3, [sp, #28]
   134aa:	f7fd fe59 	bl	11160 <nrf_modem_os_timedwait>
   134ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   134b2:	4413      	add	r3, r2
   134b4:	3b0a      	subs	r3, #10
   134b6:	2b00      	cmp	r3, #0
   134b8:	9306      	str	r3, [sp, #24]
   134ba:	dce5      	bgt.n	13488 <ip_interface_sendto+0xb0>
   134bc:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
   134c0:	6822      	ldr	r2, [r4, #0]
   134c2:	0313      	lsls	r3, r2, #12
   134c4:	d4b8      	bmi.n	13438 <ip_interface_sendto+0x60>
   134c6:	6822      	ldr	r2, [r4, #0]
   134c8:	b292      	uxth	r2, r2
   134ca:	2a0d      	cmp	r2, #13
   134cc:	d0b4      	beq.n	13438 <ip_interface_sendto+0x60>
   134ce:	6822      	ldr	r2, [r4, #0]
   134d0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   134d4:	6022      	str	r2, [r4, #0]
   134d6:	6822      	ldr	r2, [r4, #0]
   134d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   134dc:	6022      	str	r2, [r4, #0]
   134de:	e7ab      	b.n	13438 <ip_interface_sendto+0x60>
   134e0:	6827      	ldr	r7, [r4, #0]
   134e2:	f087 5780 	eor.w	r7, r7, #268435456	; 0x10000000
   134e6:	f3c7 7700 	ubfx	r7, r7, #28, #1
   134ea:	e7c3      	b.n	13474 <ip_interface_sendto+0x9c>
   134ec:	f04f 020c 	mov.w	r2, #12
   134f0:	9b05      	ldr	r3, [sp, #20]
   134f2:	721a      	strb	r2, [r3, #8]
   134f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   134f6:	7258      	strb	r0, [r3, #9]
   134f8:	7298      	strb	r0, [r3, #10]
   134fa:	72d8      	strb	r0, [r3, #11]
   134fc:	2a00      	cmp	r2, #0
   134fe:	d056      	beq.n	135ae <ip_interface_sendto+0x1d6>
   13500:	f103 021c 	add.w	r2, r3, #28
   13504:	9201      	str	r2, [sp, #4]
   13506:	f103 0218 	add.w	r2, r3, #24
   1350a:	9200      	str	r2, [sp, #0]
   1350c:	68e0      	ldr	r0, [r4, #12]
   1350e:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
   13512:	331a      	adds	r3, #26
   13514:	f006 fef9 	bl	1a30a <ip_addr_parse>
   13518:	9a05      	ldr	r2, [sp, #20]
   1351a:	4683      	mov	fp, r0
   1351c:	2800      	cmp	r0, #0
   1351e:	d16b      	bne.n	135f8 <ip_interface_sendto+0x220>
   13520:	f247 0a07 	movw	sl, #28679	; 0x7007
   13524:	6893      	ldr	r3, [r2, #8]
   13526:	8b51      	ldrh	r1, [r2, #26]
   13528:	3304      	adds	r3, #4
   1352a:	440b      	add	r3, r1
   1352c:	f8c2 8014 	str.w	r8, [r2, #20]
   13530:	6093      	str	r3, [r2, #8]
   13532:	69a2      	ldr	r2, [r4, #24]
   13534:	9b05      	ldr	r3, [sp, #20]
   13536:	611a      	str	r2, [r3, #16]
   13538:	9a03      	ldr	r2, [sp, #12]
   1353a:	605d      	str	r5, [r3, #4]
   1353c:	ea4a 0202 	orr.w	r2, sl, r2
   13540:	60da      	str	r2, [r3, #12]
   13542:	f1b9 0f00 	cmp.w	r9, #0
   13546:	d004      	beq.n	13552 <ip_interface_sendto+0x17a>
   13548:	462a      	mov	r2, r5
   1354a:	4649      	mov	r1, r9
   1354c:	6818      	ldr	r0, [r3, #0]
   1354e:	f008 fa9d 	bl	1ba8c <memcpy>
   13552:	6823      	ldr	r3, [r4, #0]
   13554:	6822      	ldr	r2, [r4, #0]
   13556:	4620      	mov	r0, r4
   13558:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   1355c:	6022      	str	r2, [r4, #0]
   1355e:	6822      	ldr	r2, [r4, #0]
   13560:	9905      	ldr	r1, [sp, #20]
   13562:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   13566:	6022      	str	r2, [r4, #0]
   13568:	4652      	mov	r2, sl
   1356a:	f006 ff0b 	bl	1a384 <ip_interface_request_send>
   1356e:	4683      	mov	fp, r0
   13570:	2800      	cmp	r0, #0
   13572:	d1a5      	bne.n	134c0 <ip_interface_sendto+0xe8>
   13574:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   13578:	4630      	mov	r0, r6
   1357a:	4611      	mov	r1, r2
   1357c:	ab06      	add	r3, sp, #24
   1357e:	f006 ff14 	bl	1a3aa <ip_interface_wait>
   13582:	4683      	mov	fp, r0
   13584:	2800      	cmp	r0, #0
   13586:	d09b      	beq.n	134c0 <ip_interface_sendto+0xe8>
   13588:	6822      	ldr	r2, [r4, #0]
   1358a:	0311      	lsls	r1, r2, #12
   1358c:	d412      	bmi.n	135b4 <ip_interface_sendto+0x1dc>
   1358e:	283c      	cmp	r0, #60	; 0x3c
   13590:	d096      	beq.n	134c0 <ip_interface_sendto+0xe8>
   13592:	280c      	cmp	r0, #12
   13594:	d194      	bne.n	134c0 <ip_interface_sendto+0xe8>
   13596:	4b1f      	ldr	r3, [pc, #124]	; (13614 <ip_interface_sendto+0x23c>)
   13598:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   1359c:	b108      	cbz	r0, 135a2 <ip_interface_sendto+0x1ca>
   1359e:	f006 fcde 	bl	19f5e <rpc_ip_client_message_free>
   135a2:	2f00      	cmp	r7, #0
   135a4:	f47f af70 	bne.w	13488 <ip_interface_sendto+0xb0>
   135a8:	f04f 0b23 	mov.w	fp, #35	; 0x23
   135ac:	e788      	b.n	134c0 <ip_interface_sendto+0xe8>
   135ae:	f8c3 8014 	str.w	r8, [r3, #20]
   135b2:	e7be      	b.n	13532 <ip_interface_sendto+0x15a>
   135b4:	f8d4 b008 	ldr.w	fp, [r4, #8]
   135b8:	e782      	b.n	134c0 <ip_interface_sendto+0xe8>
   135ba:	f04f 0b09 	mov.w	fp, #9
   135be:	e73f      	b.n	13440 <ip_interface_sendto+0x68>
   135c0:	f04f 0b28 	mov.w	fp, #40	; 0x28
   135c4:	e73c      	b.n	13440 <ip_interface_sendto+0x68>
   135c6:	f04f 0b38 	mov.w	fp, #56	; 0x38
   135ca:	e739      	b.n	13440 <ip_interface_sendto+0x68>
   135cc:	f04f 0b23 	mov.w	fp, #35	; 0x23
   135d0:	e736      	b.n	13440 <ip_interface_sendto+0x68>
   135d2:	f04f 0b39 	mov.w	fp, #57	; 0x39
   135d6:	e733      	b.n	13440 <ip_interface_sendto+0x68>
   135d8:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   135dc:	e730      	b.n	13440 <ip_interface_sendto+0x68>
   135de:	6823      	ldr	r3, [r4, #0]
   135e0:	011a      	lsls	r2, r3, #4
   135e2:	bf55      	itete	pl
   135e4:	4b0b      	ldrpl	r3, [pc, #44]	; (13614 <ip_interface_sendto+0x23c>)
   135e6:	6823      	ldrmi	r3, [r4, #0]
   135e8:	f853 3026 	ldrpl.w	r3, [r3, r6, lsl #2]
   135ec:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   135f0:	bf54      	ite	pl
   135f2:	699d      	ldrpl	r5, [r3, #24]
   135f4:	6023      	strmi	r3, [r4, #0]
   135f6:	e728      	b.n	1344a <ip_interface_sendto+0x72>
   135f8:	6810      	ldr	r0, [r2, #0]
   135fa:	b108      	cbz	r0, 13600 <ip_interface_sendto+0x228>
   135fc:	f006 fcb7 	bl	19f6e <rpc_ip_client_data_free>
   13600:	9805      	ldr	r0, [sp, #20]
   13602:	f006 fcac 	bl	19f5e <rpc_ip_client_message_free>
   13606:	e75b      	b.n	134c0 <ip_interface_sendto+0xe8>
   13608:	2800      	cmp	r0, #0
   1360a:	f43f af6f 	beq.w	134ec <ip_interface_sendto+0x114>
   1360e:	f04f 0b0c 	mov.w	fp, #12
   13612:	e755      	b.n	134c0 <ip_interface_sendto+0xe8>
   13614:	20015534 	.word	0x20015534

00013618 <ip_interface_socketoption_get>:
   13618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1361c:	461c      	mov	r4, r3
   1361e:	f04f 33ff 	mov.w	r3, #4294967295
   13622:	9301      	str	r3, [sp, #4]
   13624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13626:	4607      	mov	r7, r0
   13628:	460d      	mov	r5, r1
   1362a:	4693      	mov	fp, r2
   1362c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   13630:	2b00      	cmp	r3, #0
   13632:	d06a      	beq.n	1370a <ip_interface_socketoption_get+0xf2>
   13634:	f8d8 3000 	ldr.w	r3, [r8]
   13638:	2b00      	cmp	r3, #0
   1363a:	d066      	beq.n	1370a <ip_interface_socketoption_get+0xf2>
   1363c:	680b      	ldr	r3, [r1, #0]
   1363e:	025e      	lsls	r6, r3, #9
   13640:	d465      	bmi.n	1370e <ip_interface_socketoption_get+0xf6>
   13642:	680b      	ldr	r3, [r1, #0]
   13644:	0219      	lsls	r1, r3, #8
   13646:	d462      	bmi.n	1370e <ip_interface_socketoption_get+0xf6>
   13648:	682b      	ldr	r3, [r5, #0]
   1364a:	01da      	lsls	r2, r3, #7
   1364c:	d45f      	bmi.n	1370e <ip_interface_socketoption_get+0xf6>
   1364e:	682b      	ldr	r3, [r5, #0]
   13650:	019b      	lsls	r3, r3, #6
   13652:	d45c      	bmi.n	1370e <ip_interface_socketoption_get+0xf6>
   13654:	f8d5 a000 	ldr.w	sl, [r5]
   13658:	682b      	ldr	r3, [r5, #0]
   1365a:	f247 0204 	movw	r2, #28676	; 0x7004
   1365e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   13662:	602b      	str	r3, [r5, #0]
   13664:	f8d8 3000 	ldr.w	r3, [r8]
   13668:	69a9      	ldr	r1, [r5, #24]
   1366a:	f006 fe73 	bl	1a354 <ip_interface_request_create>
   1366e:	4606      	mov	r6, r0
   13670:	2800      	cmp	r0, #0
   13672:	d048      	beq.n	13706 <ip_interface_socketoption_get+0xee>
   13674:	6883      	ldr	r3, [r0, #8]
   13676:	f8c0 b014 	str.w	fp, [r0, #20]
   1367a:	3308      	adds	r3, #8
   1367c:	6083      	str	r3, [r0, #8]
   1367e:	6184      	str	r4, [r0, #24]
   13680:	4601      	mov	r1, r0
   13682:	f8d0 b000 	ldr.w	fp, [r0]
   13686:	4653      	mov	r3, sl
   13688:	f247 0204 	movw	r2, #28676	; 0x7004
   1368c:	4628      	mov	r0, r5
   1368e:	f006 fe79 	bl	1a384 <ip_interface_request_send>
   13692:	4604      	mov	r4, r0
   13694:	bb20      	cbnz	r0, 136e0 <ip_interface_socketoption_get+0xc8>
   13696:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1369a:	4638      	mov	r0, r7
   1369c:	4611      	mov	r1, r2
   1369e:	ab01      	add	r3, sp, #4
   136a0:	f006 fe83 	bl	1a3aa <ip_interface_wait>
   136a4:	4604      	mov	r4, r0
   136a6:	b9d8      	cbnz	r0, 136e0 <ip_interface_socketoption_get+0xc8>
   136a8:	4b1a      	ldr	r3, [pc, #104]	; (13714 <ip_interface_socketoption_get+0xfc>)
   136aa:	f8d8 2000 	ldr.w	r2, [r8]
   136ae:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
   136b2:	4699      	mov	r9, r3
   136b4:	b1f9      	cbz	r1, 136f6 <ip_interface_socketoption_get+0xde>
   136b6:	6848      	ldr	r0, [r1, #4]
   136b8:	4290      	cmp	r0, r2
   136ba:	d81a      	bhi.n	136f2 <ip_interface_socketoption_get+0xda>
   136bc:	6809      	ldr	r1, [r1, #0]
   136be:	b1c1      	cbz	r1, 136f2 <ip_interface_socketoption_get+0xda>
   136c0:	4602      	mov	r2, r0
   136c2:	980c      	ldr	r0, [sp, #48]	; 0x30
   136c4:	f008 f9e2 	bl	1ba8c <memcpy>
   136c8:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
   136cc:	6852      	ldr	r2, [r2, #4]
   136ce:	f8c8 2000 	str.w	r2, [r8]
   136d2:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   136d6:	f006 fc42 	bl	19f5e <rpc_ip_client_message_free>
   136da:	2200      	movs	r2, #0
   136dc:	f849 2027 	str.w	r2, [r9, r7, lsl #2]
   136e0:	4658      	mov	r0, fp
   136e2:	f006 fc44 	bl	19f6e <rpc_ip_client_data_free>
   136e6:	f8c5 a000 	str.w	sl, [r5]
   136ea:	4620      	mov	r0, r4
   136ec:	b003      	add	sp, #12
   136ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136f2:	2416      	movs	r4, #22
   136f4:	e7ed      	b.n	136d2 <ip_interface_socketoption_get+0xba>
   136f6:	4659      	mov	r1, fp
   136f8:	980c      	ldr	r0, [sp, #48]	; 0x30
   136fa:	f008 f9c7 	bl	1ba8c <memcpy>
   136fe:	6873      	ldr	r3, [r6, #4]
   13700:	f8c8 3000 	str.w	r3, [r8]
   13704:	e7ec      	b.n	136e0 <ip_interface_socketoption_get+0xc8>
   13706:	240c      	movs	r4, #12
   13708:	e7ed      	b.n	136e6 <ip_interface_socketoption_get+0xce>
   1370a:	2416      	movs	r4, #22
   1370c:	e7ed      	b.n	136ea <ip_interface_socketoption_get+0xd2>
   1370e:	2423      	movs	r4, #35	; 0x23
   13710:	e7eb      	b.n	136ea <ip_interface_socketoption_get+0xd2>
   13712:	bf00      	nop
   13714:	20015534 	.word	0x20015534

00013718 <ip_interface_bind>:
   13718:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1371c:	f04f 33ff 	mov.w	r3, #4294967295
   13720:	4607      	mov	r7, r0
   13722:	4690      	mov	r8, r2
   13724:	460e      	mov	r6, r1
   13726:	9303      	str	r3, [sp, #12]
   13728:	2900      	cmp	r1, #0
   1372a:	d04e      	beq.n	137ca <ip_interface_bind+0xb2>
   1372c:	2a00      	cmp	r2, #0
   1372e:	d04c      	beq.n	137ca <ip_interface_bind+0xb2>
   13730:	f7ff fcb0 	bl	13094 <interface_socket_from_handle_get>
   13734:	4604      	mov	r4, r0
   13736:	2800      	cmp	r0, #0
   13738:	d049      	beq.n	137ce <ip_interface_bind+0xb6>
   1373a:	6803      	ldr	r3, [r0, #0]
   1373c:	b29b      	uxth	r3, r3
   1373e:	2b02      	cmp	r3, #2
   13740:	d145      	bne.n	137ce <ip_interface_bind+0xb6>
   13742:	6981      	ldr	r1, [r0, #24]
   13744:	2300      	movs	r3, #0
   13746:	f247 0205 	movw	r2, #28677	; 0x7005
   1374a:	4638      	mov	r0, r7
   1374c:	f006 fe02 	bl	1a354 <ip_interface_request_create>
   13750:	4605      	mov	r5, r0
   13752:	2800      	cmp	r0, #0
   13754:	d03d      	beq.n	137d2 <ip_interface_bind+0xba>
   13756:	6883      	ldr	r3, [r0, #8]
   13758:	4642      	mov	r2, r8
   1375a:	3304      	adds	r3, #4
   1375c:	6083      	str	r3, [r0, #8]
   1375e:	f100 0318 	add.w	r3, r0, #24
   13762:	9301      	str	r3, [sp, #4]
   13764:	f100 0314 	add.w	r3, r0, #20
   13768:	9300      	str	r3, [sp, #0]
   1376a:	4631      	mov	r1, r6
   1376c:	f100 0316 	add.w	r3, r0, #22
   13770:	68e0      	ldr	r0, [r4, #12]
   13772:	f006 fdca 	bl	1a30a <ip_addr_parse>
   13776:	bb08      	cbnz	r0, 137bc <ip_interface_bind+0xa4>
   13778:	68ab      	ldr	r3, [r5, #8]
   1377a:	8aea      	ldrh	r2, [r5, #22]
   1377c:	4e16      	ldr	r6, [pc, #88]	; (137d8 <ip_interface_bind+0xc0>)
   1377e:	4413      	add	r3, r2
   13780:	60ab      	str	r3, [r5, #8]
   13782:	6823      	ldr	r3, [r4, #0]
   13784:	f247 0205 	movw	r2, #28677	; 0x7005
   13788:	4033      	ands	r3, r6
   1378a:	f043 0303 	orr.w	r3, r3, #3
   1378e:	6023      	str	r3, [r4, #0]
   13790:	6823      	ldr	r3, [r4, #0]
   13792:	4629      	mov	r1, r5
   13794:	4033      	ands	r3, r6
   13796:	4620      	mov	r0, r4
   13798:	f043 0302 	orr.w	r3, r3, #2
   1379c:	f006 fdf2 	bl	1a384 <ip_interface_request_send>
   137a0:	b960      	cbnz	r0, 137bc <ip_interface_bind+0xa4>
   137a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   137a6:	2104      	movs	r1, #4
   137a8:	4638      	mov	r0, r7
   137aa:	ab03      	add	r3, sp, #12
   137ac:	f006 fdfd 	bl	1a3aa <ip_interface_wait>
   137b0:	b140      	cbz	r0, 137c4 <ip_interface_bind+0xac>
   137b2:	6823      	ldr	r3, [r4, #0]
   137b4:	4033      	ands	r3, r6
   137b6:	f043 0302 	orr.w	r3, r3, #2
   137ba:	6023      	str	r3, [r4, #0]
   137bc:	f7fd fd88 	bl	112d0 <nrf_modem_os_errno_set>
   137c0:	f04f 30ff 	mov.w	r0, #4294967295
   137c4:	b004      	add	sp, #16
   137c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   137ca:	2016      	movs	r0, #22
   137cc:	e7f6      	b.n	137bc <ip_interface_bind+0xa4>
   137ce:	2009      	movs	r0, #9
   137d0:	e7f4      	b.n	137bc <ip_interface_bind+0xa4>
   137d2:	200c      	movs	r0, #12
   137d4:	e7f2      	b.n	137bc <ip_interface_bind+0xa4>
   137d6:	bf00      	nop
   137d8:	ffff0000 	.word	0xffff0000

000137dc <ip_interface_listen>:
   137dc:	f04f 33ff 	mov.w	r3, #4294967295
   137e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   137e2:	4605      	mov	r5, r0
   137e4:	9301      	str	r3, [sp, #4]
   137e6:	f7ff fc55 	bl	13094 <interface_socket_from_handle_get>
   137ea:	4604      	mov	r4, r0
   137ec:	2800      	cmp	r0, #0
   137ee:	d03c      	beq.n	1386a <ip_interface_listen+0x8e>
   137f0:	6803      	ldr	r3, [r0, #0]
   137f2:	b29b      	uxth	r3, r3
   137f4:	2b04      	cmp	r3, #4
   137f6:	d003      	beq.n	13800 <ip_interface_listen+0x24>
   137f8:	6803      	ldr	r3, [r0, #0]
   137fa:	b29b      	uxth	r3, r3
   137fc:	2b0b      	cmp	r3, #11
   137fe:	d134      	bne.n	1386a <ip_interface_listen+0x8e>
   13800:	2100      	movs	r1, #0
   13802:	4628      	mov	r0, r5
   13804:	4a1c      	ldr	r2, [pc, #112]	; (13878 <ip_interface_listen+0x9c>)
   13806:	f7ff fbed 	bl	12fe4 <interface_socket_packet_handler_update>
   1380a:	4603      	mov	r3, r0
   1380c:	bb78      	cbnz	r0, 1386e <ip_interface_listen+0x92>
   1380e:	69a1      	ldr	r1, [r4, #24]
   13810:	f247 0208 	movw	r2, #28680	; 0x7008
   13814:	4628      	mov	r0, r5
   13816:	f006 fd9d 	bl	1a354 <ip_interface_request_create>
   1381a:	4601      	mov	r1, r0
   1381c:	b348      	cbz	r0, 13872 <ip_interface_listen+0x96>
   1381e:	6883      	ldr	r3, [r0, #8]
   13820:	4e16      	ldr	r6, [pc, #88]	; (1387c <ip_interface_listen+0xa0>)
   13822:	3304      	adds	r3, #4
   13824:	6083      	str	r3, [r0, #8]
   13826:	6823      	ldr	r3, [r4, #0]
   13828:	f247 0208 	movw	r2, #28680	; 0x7008
   1382c:	4033      	ands	r3, r6
   1382e:	f043 0306 	orr.w	r3, r3, #6
   13832:	6023      	str	r3, [r4, #0]
   13834:	6823      	ldr	r3, [r4, #0]
   13836:	4620      	mov	r0, r4
   13838:	4033      	ands	r3, r6
   1383a:	f043 0304 	orr.w	r3, r3, #4
   1383e:	f006 fda1 	bl	1a384 <ip_interface_request_send>
   13842:	b960      	cbnz	r0, 1385e <ip_interface_listen+0x82>
   13844:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13848:	2107      	movs	r1, #7
   1384a:	4628      	mov	r0, r5
   1384c:	ab01      	add	r3, sp, #4
   1384e:	f006 fdac 	bl	1a3aa <ip_interface_wait>
   13852:	b140      	cbz	r0, 13866 <ip_interface_listen+0x8a>
   13854:	6823      	ldr	r3, [r4, #0]
   13856:	4033      	ands	r3, r6
   13858:	f043 0304 	orr.w	r3, r3, #4
   1385c:	6023      	str	r3, [r4, #0]
   1385e:	f7fd fd37 	bl	112d0 <nrf_modem_os_errno_set>
   13862:	f04f 30ff 	mov.w	r0, #4294967295
   13866:	b002      	add	sp, #8
   13868:	bd70      	pop	{r4, r5, r6, pc}
   1386a:	2009      	movs	r0, #9
   1386c:	e7f7      	b.n	1385e <ip_interface_listen+0x82>
   1386e:	2023      	movs	r0, #35	; 0x23
   13870:	e7f5      	b.n	1385e <ip_interface_listen+0x82>
   13872:	200c      	movs	r0, #12
   13874:	e7f3      	b.n	1385e <ip_interface_listen+0x82>
   13876:	bf00      	nop
   13878:	0001a2f3 	.word	0x0001a2f3
   1387c:	ffff0000 	.word	0xffff0000

00013880 <ip_interface_accept>:
   13880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13884:	f04f 33ff 	mov.w	r3, #4294967295
   13888:	2600      	movs	r6, #0
   1388a:	4680      	mov	r8, r0
   1388c:	460f      	mov	r7, r1
   1388e:	4692      	mov	sl, r2
   13890:	e9cd 6300 	strd	r6, r3, [sp]
   13894:	f7ff fbfe 	bl	13094 <interface_socket_from_handle_get>
   13898:	4604      	mov	r4, r0
   1389a:	2800      	cmp	r0, #0
   1389c:	f000 80b2 	beq.w	13a04 <ip_interface_accept+0x184>
   138a0:	6803      	ldr	r3, [r0, #0]
   138a2:	b29b      	uxth	r3, r3
   138a4:	2b07      	cmp	r3, #7
   138a6:	f040 80b0 	bne.w	13a0a <ip_interface_accept+0x18a>
   138aa:	6803      	ldr	r3, [r0, #0]
   138ac:	f013 5980 	ands.w	r9, r3, #268435456	; 0x10000000
   138b0:	d165      	bne.n	1397e <ip_interface_accept+0xfe>
   138b2:	6803      	ldr	r3, [r0, #0]
   138b4:	03db      	lsls	r3, r3, #15
   138b6:	d466      	bmi.n	13986 <ip_interface_accept+0x106>
   138b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   138bc:	4640      	mov	r0, r8
   138be:	4611      	mov	r1, r2
   138c0:	ab01      	add	r3, sp, #4
   138c2:	f006 fd72 	bl	1a3aa <ip_interface_wait>
   138c6:	4605      	mov	r5, r0
   138c8:	6826      	ldr	r6, [r4, #0]
   138ca:	f416 3680 	ands.w	r6, r6, #65536	; 0x10000
   138ce:	d05c      	beq.n	1398a <ip_interface_accept+0x10a>
   138d0:	4668      	mov	r0, sp
   138d2:	4a59      	ldr	r2, [pc, #356]	; (13a38 <ip_interface_accept+0x1b8>)
   138d4:	6921      	ldr	r1, [r4, #16]
   138d6:	f7ff fb53 	bl	12f80 <interface_socket_allocate>
   138da:	9b00      	ldr	r3, [sp, #0]
   138dc:	4606      	mov	r6, r0
   138de:	2b00      	cmp	r3, #0
   138e0:	f000 8095 	beq.w	13a0e <ip_interface_accept+0x18e>
   138e4:	6962      	ldr	r2, [r4, #20]
   138e6:	69a1      	ldr	r1, [r4, #24]
   138e8:	615a      	str	r2, [r3, #20]
   138ea:	68e2      	ldr	r2, [r4, #12]
   138ec:	4640      	mov	r0, r8
   138ee:	60da      	str	r2, [r3, #12]
   138f0:	6922      	ldr	r2, [r4, #16]
   138f2:	611a      	str	r2, [r3, #16]
   138f4:	2300      	movs	r3, #0
   138f6:	f247 020c 	movw	r2, #28684	; 0x700c
   138fa:	f006 fd2b 	bl	1a354 <ip_interface_request_create>
   138fe:	4601      	mov	r1, r0
   13900:	2800      	cmp	r0, #0
   13902:	f000 8084 	beq.w	13a0e <ip_interface_accept+0x18e>
   13906:	6823      	ldr	r3, [r4, #0]
   13908:	f8df b134 	ldr.w	fp, [pc, #308]	; 13a40 <ip_interface_accept+0x1c0>
   1390c:	f247 020c 	movw	r2, #28684	; 0x700c
   13910:	ea03 030b 	and.w	r3, r3, fp
   13914:	f043 0308 	orr.w	r3, r3, #8
   13918:	6023      	str	r3, [r4, #0]
   1391a:	6823      	ldr	r3, [r4, #0]
   1391c:	4620      	mov	r0, r4
   1391e:	ea03 030b 	and.w	r3, r3, fp
   13922:	f043 0307 	orr.w	r3, r3, #7
   13926:	f006 fd2d 	bl	1a384 <ip_interface_request_send>
   1392a:	4605      	mov	r5, r0
   1392c:	b9d0      	cbnz	r0, 13964 <ip_interface_accept+0xe4>
   1392e:	6823      	ldr	r3, [r4, #0]
   13930:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13934:	ea23 0309 	bic.w	r3, r3, r9
   13938:	6023      	str	r3, [r4, #0]
   1393a:	2109      	movs	r1, #9
   1393c:	ab01      	add	r3, sp, #4
   1393e:	4640      	mov	r0, r8
   13940:	f006 fd33 	bl	1a3aa <ip_interface_wait>
   13944:	6823      	ldr	r3, [r4, #0]
   13946:	4605      	mov	r5, r0
   13948:	ea43 0309 	orr.w	r3, r3, r9
   1394c:	6023      	str	r3, [r4, #0]
   1394e:	b1f0      	cbz	r0, 1398e <ip_interface_accept+0x10e>
   13950:	6823      	ldr	r3, [r4, #0]
   13952:	ea03 030b 	and.w	r3, r3, fp
   13956:	f043 0307 	orr.w	r3, r3, #7
   1395a:	6023      	str	r3, [r4, #0]
   1395c:	6823      	ldr	r3, [r4, #0]
   1395e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   13962:	6023      	str	r3, [r4, #0]
   13964:	9b00      	ldr	r3, [sp, #0]
   13966:	b113      	cbz	r3, 1396e <ip_interface_accept+0xee>
   13968:	4630      	mov	r0, r6
   1396a:	f7ff fb2f 	bl	12fcc <interface_socket_free>
   1396e:	4628      	mov	r0, r5
   13970:	f7fd fcae 	bl	112d0 <nrf_modem_os_errno_set>
   13974:	f04f 30ff 	mov.w	r0, #4294967295
   13978:	b003      	add	sp, #12
   1397a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1397e:	2523      	movs	r5, #35	; 0x23
   13980:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
   13984:	e7a0      	b.n	138c8 <ip_interface_accept+0x48>
   13986:	2509      	movs	r5, #9
   13988:	e79e      	b.n	138c8 <ip_interface_accept+0x48>
   1398a:	2d00      	cmp	r5, #0
   1398c:	d1ea      	bne.n	13964 <ip_interface_accept+0xe4>
   1398e:	4d2b      	ldr	r5, [pc, #172]	; (13a3c <ip_interface_accept+0x1bc>)
   13990:	9b00      	ldr	r3, [sp, #0]
   13992:	f855 1028 	ldr.w	r1, [r5, r8, lsl #2]
   13996:	698a      	ldr	r2, [r1, #24]
   13998:	619a      	str	r2, [r3, #24]
   1399a:	b197      	cbz	r7, 139c2 <ip_interface_accept+0x142>
   1399c:	68db      	ldr	r3, [r3, #12]
   1399e:	2b0a      	cmp	r3, #10
   139a0:	d137      	bne.n	13a12 <ip_interface_accept+0x192>
   139a2:	f8da 2000 	ldr.w	r2, [sl]
   139a6:	2a24      	cmp	r2, #36	; 0x24
   139a8:	d10b      	bne.n	139c2 <ip_interface_accept+0x142>
   139aa:	703a      	strb	r2, [r7, #0]
   139ac:	607b      	str	r3, [r7, #4]
   139ae:	7f4a      	ldrb	r2, [r1, #29]
   139b0:	7f0b      	ldrb	r3, [r1, #28]
   139b2:	3120      	adds	r1, #32
   139b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   139b8:	2210      	movs	r2, #16
   139ba:	813b      	strh	r3, [r7, #8]
   139bc:	18b8      	adds	r0, r7, r2
   139be:	f008 f865 	bl	1ba8c <memcpy>
   139c2:	9b00      	ldr	r3, [sp, #0]
   139c4:	491e      	ldr	r1, [pc, #120]	; (13a40 <ip_interface_accept+0x1c0>)
   139c6:	681a      	ldr	r2, [r3, #0]
   139c8:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
   139cc:	400a      	ands	r2, r1
   139ce:	f042 0205 	orr.w	r2, r2, #5
   139d2:	601a      	str	r2, [r3, #0]
   139d4:	681a      	ldr	r2, [r3, #0]
   139d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   139da:	601a      	str	r2, [r3, #0]
   139dc:	681a      	ldr	r2, [r3, #0]
   139de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   139e2:	601a      	str	r2, [r3, #0]
   139e4:	6823      	ldr	r3, [r4, #0]
   139e6:	400b      	ands	r3, r1
   139e8:	f043 0307 	orr.w	r3, r3, #7
   139ec:	6023      	str	r3, [r4, #0]
   139ee:	6823      	ldr	r3, [r4, #0]
   139f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   139f4:	6023      	str	r3, [r4, #0]
   139f6:	f006 fab2 	bl	19f5e <rpc_ip_client_message_free>
   139fa:	2300      	movs	r3, #0
   139fc:	4630      	mov	r0, r6
   139fe:	f845 3028 	str.w	r3, [r5, r8, lsl #2]
   13a02:	e7b9      	b.n	13978 <ip_interface_accept+0xf8>
   13a04:	2509      	movs	r5, #9
   13a06:	4606      	mov	r6, r0
   13a08:	e7ac      	b.n	13964 <ip_interface_accept+0xe4>
   13a0a:	2509      	movs	r5, #9
   13a0c:	e7aa      	b.n	13964 <ip_interface_accept+0xe4>
   13a0e:	250c      	movs	r5, #12
   13a10:	e7a8      	b.n	13964 <ip_interface_accept+0xe4>
   13a12:	2b02      	cmp	r3, #2
   13a14:	d1d5      	bne.n	139c2 <ip_interface_accept+0x142>
   13a16:	f8da 2000 	ldr.w	r2, [sl]
   13a1a:	2a10      	cmp	r2, #16
   13a1c:	d1d1      	bne.n	139c2 <ip_interface_accept+0x142>
   13a1e:	703a      	strb	r2, [r7, #0]
   13a20:	607b      	str	r3, [r7, #4]
   13a22:	7f4a      	ldrb	r2, [r1, #29]
   13a24:	7f0b      	ldrb	r3, [r1, #28]
   13a26:	f107 000c 	add.w	r0, r7, #12
   13a2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13a2e:	813b      	strh	r3, [r7, #8]
   13a30:	2204      	movs	r2, #4
   13a32:	3120      	adds	r1, #32
   13a34:	e7c3      	b.n	139be <ip_interface_accept+0x13e>
   13a36:	bf00      	nop
   13a38:	0001a2f3 	.word	0x0001a2f3
   13a3c:	20015534 	.word	0x20015534
   13a40:	ffff0000 	.word	0xffff0000

00013a44 <ip_interface_getaddrinfo>:
   13a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a48:	2601      	movs	r6, #1
   13a4a:	4607      	mov	r7, r0
   13a4c:	4608      	mov	r0, r1
   13a4e:	2100      	movs	r1, #0
   13a50:	b085      	sub	sp, #20
   13a52:	4614      	mov	r4, r2
   13a54:	9300      	str	r3, [sp, #0]
   13a56:	4a5e      	ldr	r2, [pc, #376]	; (13bd0 <ip_interface_getaddrinfo+0x18c>)
   13a58:	4b5e      	ldr	r3, [pc, #376]	; (13bd4 <ip_interface_getaddrinfo+0x190>)
   13a5a:	6016      	str	r6, [r2, #0]
   13a5c:	601e      	str	r6, [r3, #0]
   13a5e:	4e5e      	ldr	r6, [pc, #376]	; (13bd8 <ip_interface_getaddrinfo+0x194>)
   13a60:	4d5e      	ldr	r5, [pc, #376]	; (13bdc <ip_interface_getaddrinfo+0x198>)
   13a62:	7836      	ldrb	r6, [r6, #0]
   13a64:	469b      	mov	fp, r3
   13a66:	8029      	strh	r1, [r5, #0]
   13a68:	9201      	str	r2, [sp, #4]
   13a6a:	2e00      	cmp	r6, #0
   13a6c:	f000 80a9 	beq.w	13bc2 <ip_interface_getaddrinfo+0x17e>
   13a70:	b150      	cbz	r0, 13a88 <ip_interface_getaddrinfo+0x44>
   13a72:	220a      	movs	r2, #10
   13a74:	f004 f9de 	bl	17e34 <strtol>
   13a78:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   13a7c:	1e42      	subs	r2, r0, #1
   13a7e:	429a      	cmp	r2, r3
   13a80:	f200 80a1 	bhi.w	13bc6 <ip_interface_getaddrinfo+0x182>
   13a84:	ba40      	rev16	r0, r0
   13a86:	8028      	strh	r0, [r5, #0]
   13a88:	4e55      	ldr	r6, [pc, #340]	; (13be0 <ip_interface_getaddrinfo+0x19c>)
   13a8a:	f8d6 a000 	ldr.w	sl, [r6]
   13a8e:	f1ba 0f00 	cmp.w	sl, #0
   13a92:	f040 809a 	bne.w	13bca <ip_interface_getaddrinfo+0x186>
   13a96:	4953      	ldr	r1, [pc, #332]	; (13be4 <ip_interface_getaddrinfo+0x1a0>)
   13a98:	4a53      	ldr	r2, [pc, #332]	; (13be8 <ip_interface_getaddrinfo+0x1a4>)
   13a9a:	4689      	mov	r9, r1
   13a9c:	4690      	mov	r8, r2
   13a9e:	f8c1 a000 	str.w	sl, [r1]
   13aa2:	f8c2 a000 	str.w	sl, [r2]
   13aa6:	b11f      	cbz	r7, 13ab0 <ip_interface_getaddrinfo+0x6c>
   13aa8:	4638      	mov	r0, r7
   13aaa:	f7f9 f969 	bl	cd80 <strlen>
   13aae:	4682      	mov	sl, r0
   13ab0:	2c00      	cmp	r4, #0
   13ab2:	d142      	bne.n	13b3a <ip_interface_getaddrinfo+0xf6>
   13ab4:	f04f 31ff 	mov.w	r1, #4294967295
   13ab8:	4653      	mov	r3, sl
   13aba:	f247 020d 	movw	r2, #28685	; 0x700d
   13abe:	4608      	mov	r0, r1
   13ac0:	f006 fc48 	bl	1a354 <ip_interface_request_create>
   13ac4:	4605      	mov	r5, r0
   13ac6:	2800      	cmp	r0, #0
   13ac8:	d074      	beq.n	13bb4 <ip_interface_getaddrinfo+0x170>
   13aca:	2c00      	cmp	r4, #0
   13acc:	d064      	beq.n	13b98 <ip_interface_getaddrinfo+0x154>
   13ace:	6862      	ldr	r2, [r4, #4]
   13ad0:	f022 0108 	bic.w	r1, r2, #8
   13ad4:	2902      	cmp	r1, #2
   13ad6:	d049      	beq.n	13b6c <ip_interface_getaddrinfo+0x128>
   13ad8:	2a05      	cmp	r2, #5
   13ada:	d047      	beq.n	13b6c <ip_interface_getaddrinfo+0x128>
   13adc:	202f      	movs	r0, #47	; 0x2f
   13ade:	f7fd fbf7 	bl	112d0 <nrf_modem_os_errno_set>
   13ae2:	f04f 34ff 	mov.w	r4, #4294967295
   13ae6:	68aa      	ldr	r2, [r5, #8]
   13ae8:	3210      	adds	r2, #16
   13aea:	60aa      	str	r2, [r5, #8]
   13aec:	b12f      	cbz	r7, 13afa <ip_interface_getaddrinfo+0xb6>
   13aee:	6828      	ldr	r0, [r5, #0]
   13af0:	b118      	cbz	r0, 13afa <ip_interface_getaddrinfo+0xb6>
   13af2:	4652      	mov	r2, sl
   13af4:	4639      	mov	r1, r7
   13af6:	f007 ffc9 	bl	1ba8c <memcpy>
   13afa:	2c00      	cmp	r4, #0
   13afc:	d15c      	bne.n	13bb8 <ip_interface_getaddrinfo+0x174>
   13afe:	2301      	movs	r3, #1
   13b00:	f247 010d 	movw	r1, #28685	; 0x700d
   13b04:	4628      	mov	r0, r5
   13b06:	6033      	str	r3, [r6, #0]
   13b08:	f006 fa15 	bl	19f36 <rpc_ip_client_request_send>
   13b0c:	2800      	cmp	r0, #0
   13b0e:	d156      	bne.n	13bbe <ip_interface_getaddrinfo+0x17a>
   13b10:	f04f 33ff 	mov.w	r3, #4294967295
   13b14:	9303      	str	r3, [sp, #12]
   13b16:	4628      	mov	r0, r5
   13b18:	a903      	add	r1, sp, #12
   13b1a:	f7fd fb21 	bl	11160 <nrf_modem_os_timedwait>
   13b1e:	6833      	ldr	r3, [r6, #0]
   13b20:	2b01      	cmp	r3, #1
   13b22:	d0f8      	beq.n	13b16 <ip_interface_getaddrinfo+0xd2>
   13b24:	f8d8 3000 	ldr.w	r3, [r8]
   13b28:	2b00      	cmp	r3, #0
   13b2a:	d03b      	beq.n	13ba4 <ip_interface_getaddrinfo+0x160>
   13b2c:	f8d8 4000 	ldr.w	r4, [r8]
   13b30:	2c00      	cmp	r4, #0
   13b32:	d03b      	beq.n	13bac <ip_interface_getaddrinfo+0x168>
   13b34:	2300      	movs	r3, #0
   13b36:	6033      	str	r3, [r6, #0]
   13b38:	e038      	b.n	13bac <ip_interface_getaddrinfo+0x168>
   13b3a:	69e2      	ldr	r2, [r4, #28]
   13b3c:	2a00      	cmp	r2, #0
   13b3e:	d0b9      	beq.n	13ab4 <ip_interface_getaddrinfo+0x70>
   13b40:	6851      	ldr	r1, [r2, #4]
   13b42:	2966      	cmp	r1, #102	; 0x66
   13b44:	d1b6      	bne.n	13ab4 <ip_interface_getaddrinfo+0x70>
   13b46:	6891      	ldr	r1, [r2, #8]
   13b48:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   13b4c:	d1b2      	bne.n	13ab4 <ip_interface_getaddrinfo+0x70>
   13b4e:	f240 2102 	movw	r1, #514	; 0x202
   13b52:	68d0      	ldr	r0, [r2, #12]
   13b54:	4288      	cmp	r0, r1
   13b56:	d1ad      	bne.n	13ab4 <ip_interface_getaddrinfo+0x70>
   13b58:	6991      	ldr	r1, [r2, #24]
   13b5a:	2900      	cmp	r1, #0
   13b5c:	d0aa      	beq.n	13ab4 <ip_interface_getaddrinfo+0x70>
   13b5e:	6860      	ldr	r0, [r4, #4]
   13b60:	f002 f910 	bl	15d84 <pdn_interface_pdn_id_get>
   13b64:	1c43      	adds	r3, r0, #1
   13b66:	d0a5      	beq.n	13ab4 <ip_interface_getaddrinfo+0x70>
   13b68:	4601      	mov	r1, r0
   13b6a:	e7a5      	b.n	13ab8 <ip_interface_getaddrinfo+0x74>
   13b6c:	68a1      	ldr	r1, [r4, #8]
   13b6e:	2902      	cmp	r1, #2
   13b70:	bf08      	it	eq
   13b72:	9b01      	ldreq	r3, [sp, #4]
   13b74:	f8cb 1000 	str.w	r1, [fp]
   13b78:	bf08      	it	eq
   13b7a:	6019      	streq	r1, [r3, #0]
   13b7c:	2a05      	cmp	r2, #5
   13b7e:	d003      	beq.n	13b88 <ip_interface_getaddrinfo+0x144>
   13b80:	2a0a      	cmp	r2, #10
   13b82:	bf0c      	ite	eq
   13b84:	2202      	moveq	r2, #2
   13b86:	2201      	movne	r2, #1
   13b88:	61aa      	str	r2, [r5, #24]
   13b8a:	68e2      	ldr	r2, [r4, #12]
   13b8c:	61e9      	str	r1, [r5, #28]
   13b8e:	622a      	str	r2, [r5, #32]
   13b90:	6822      	ldr	r2, [r4, #0]
   13b92:	2400      	movs	r4, #0
   13b94:	616a      	str	r2, [r5, #20]
   13b96:	e7a6      	b.n	13ae6 <ip_interface_getaddrinfo+0xa2>
   13b98:	2210      	movs	r2, #16
   13b9a:	4621      	mov	r1, r4
   13b9c:	3014      	adds	r0, #20
   13b9e:	f007 ff82 	bl	1baa6 <memset>
   13ba2:	e7a0      	b.n	13ae6 <ip_interface_getaddrinfo+0xa2>
   13ba4:	f8d9 3000 	ldr.w	r3, [r9]
   13ba8:	9a00      	ldr	r2, [sp, #0]
   13baa:	6013      	str	r3, [r2, #0]
   13bac:	4620      	mov	r0, r4
   13bae:	b005      	add	sp, #20
   13bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bb4:	240c      	movs	r4, #12
   13bb6:	e7bd      	b.n	13b34 <ip_interface_getaddrinfo+0xf0>
   13bb8:	f04f 34ff 	mov.w	r4, #4294967295
   13bbc:	e7ba      	b.n	13b34 <ip_interface_getaddrinfo+0xf0>
   13bbe:	2423      	movs	r4, #35	; 0x23
   13bc0:	e7b8      	b.n	13b34 <ip_interface_getaddrinfo+0xf0>
   13bc2:	2470      	movs	r4, #112	; 0x70
   13bc4:	e7f2      	b.n	13bac <ip_interface_getaddrinfo+0x168>
   13bc6:	2416      	movs	r4, #22
   13bc8:	e7f0      	b.n	13bac <ip_interface_getaddrinfo+0x168>
   13bca:	2473      	movs	r4, #115	; 0x73
   13bcc:	e7ee      	b.n	13bac <ip_interface_getaddrinfo+0x168>
   13bce:	bf00      	nop
   13bd0:	20015520 	.word	0x20015520
   13bd4:	20015524 	.word	0x20015524
   13bd8:	2001820c 	.word	0x2001820c
   13bdc:	20015eac 	.word	0x20015eac
   13be0:	2001552c 	.word	0x2001552c
   13be4:	20015530 	.word	0x20015530
   13be8:	20015528 	.word	0x20015528

00013bec <ip_interface_freeaddrinfo>:
   13bec:	b538      	push	{r3, r4, r5, lr}
   13bee:	4d0a      	ldr	r5, [pc, #40]	; (13c18 <ip_interface_freeaddrinfo+0x2c>)
   13bf0:	4604      	mov	r4, r0
   13bf2:	682a      	ldr	r2, [r5, #0]
   13bf4:	2a02      	cmp	r2, #2
   13bf6:	d10e      	bne.n	13c16 <ip_interface_freeaddrinfo+0x2a>
   13bf8:	b148      	cbz	r0, 13c0e <ip_interface_freeaddrinfo+0x22>
   13bfa:	6940      	ldr	r0, [r0, #20]
   13bfc:	f7fd fd0c 	bl	11618 <nrf_modem_os_free>
   13c00:	69a0      	ldr	r0, [r4, #24]
   13c02:	b108      	cbz	r0, 13c08 <ip_interface_freeaddrinfo+0x1c>
   13c04:	f7fd fd08 	bl	11618 <nrf_modem_os_free>
   13c08:	4620      	mov	r0, r4
   13c0a:	f7fd fd05 	bl	11618 <nrf_modem_os_free>
   13c0e:	2300      	movs	r3, #0
   13c10:	4a02      	ldr	r2, [pc, #8]	; (13c1c <ip_interface_freeaddrinfo+0x30>)
   13c12:	602b      	str	r3, [r5, #0]
   13c14:	6013      	str	r3, [r2, #0]
   13c16:	bd38      	pop	{r3, r4, r5, pc}
   13c18:	2001552c 	.word	0x2001552c
   13c1c:	20015528 	.word	0x20015528

00013c20 <rpc_ip_event_handler>:
   13c20:	f248 030d 	movw	r3, #32781	; 0x800d
   13c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c28:	4299      	cmp	r1, r3
   13c2a:	4604      	mov	r4, r0
   13c2c:	460e      	mov	r6, r1
   13c2e:	b089      	sub	sp, #36	; 0x24
   13c30:	d038      	beq.n	13ca4 <rpc_ip_event_handler+0x84>
   13c32:	f248 030f 	movw	r3, #32783	; 0x800f
   13c36:	4299      	cmp	r1, r3
   13c38:	f000 80c8 	beq.w	13dcc <rpc_ip_event_handler+0x1ac>
   13c3c:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   13c40:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   13c44:	68c0      	ldr	r0, [r0, #12]
   13c46:	f040 80ce 	bne.w	13de6 <rpc_ip_event_handler+0x1c6>
   13c4a:	f7ff fa0b 	bl	13064 <interface_from_internal_id_search>
   13c4e:	4607      	mov	r7, r0
   13c50:	4638      	mov	r0, r7
   13c52:	f7ff fa1f 	bl	13094 <interface_socket_from_handle_get>
   13c56:	4605      	mov	r5, r0
   13c58:	2800      	cmp	r0, #0
   13c5a:	d056      	beq.n	13d0a <rpc_ip_event_handler+0xea>
   13c5c:	4601      	mov	r1, r0
   13c5e:	4633      	mov	r3, r6
   13c60:	4622      	mov	r2, r4
   13c62:	4638      	mov	r0, r7
   13c64:	f000 fd94 	bl	14790 <tls_rpc_ip_event_handler>
   13c68:	2800      	cmp	r0, #0
   13c6a:	f000 80ba 	beq.w	13de2 <rpc_ip_event_handler+0x1c2>
   13c6e:	f248 030c 	movw	r3, #32780	; 0x800c
   13c72:	429e      	cmp	r6, r3
   13c74:	f200 80b9 	bhi.w	13dea <rpc_ip_event_handler+0x1ca>
   13c78:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   13c7c:	d945      	bls.n	13d0a <rpc_ip_event_handler+0xea>
   13c7e:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   13c82:	3e01      	subs	r6, #1
   13c84:	2e0b      	cmp	r6, #11
   13c86:	d840      	bhi.n	13d0a <rpc_ip_event_handler+0xea>
   13c88:	e8df f016 	tbh	[pc, r6, lsl #1]
   13c8c:	013e00f1 	.word	0x013e00f1
   13c90:	01f501e6 	.word	0x01f501e6
   13c94:	01b9012f 	.word	0x01b9012f
   13c98:	015d01b9 	.word	0x015d01b9
   13c9c:	003f00ff 	.word	0x003f00ff
   13ca0:	0188003f 	.word	0x0188003f
   13ca4:	4baf      	ldr	r3, [pc, #700]	; (13f64 <rpc_ip_event_handler+0x344>)
   13ca6:	681a      	ldr	r2, [r3, #0]
   13ca8:	9303      	str	r3, [sp, #12]
   13caa:	2a01      	cmp	r2, #1
   13cac:	d12d      	bne.n	13d0a <rpc_ip_event_handler+0xea>
   13cae:	6943      	ldr	r3, [r0, #20]
   13cb0:	2b00      	cmp	r3, #0
   13cb2:	f040 8083 	bne.w	13dbc <rpc_ip_event_handler+0x19c>
   13cb6:	f8d0 9018 	ldr.w	r9, [r0, #24]
   13cba:	f8d0 a000 	ldr.w	sl, [r0]
   13cbe:	ea4f 1349 	mov.w	r3, r9, lsl #5
   13cc2:	4618      	mov	r0, r3
   13cc4:	9301      	str	r3, [sp, #4]
   13cc6:	f7fd fc97 	bl	115f8 <nrf_modem_os_alloc>
   13cca:	4680      	mov	r8, r0
   13ccc:	b310      	cbz	r0, 13d14 <rpc_ip_event_handler+0xf4>
   13cce:	2024      	movs	r0, #36	; 0x24
   13cd0:	fb00 f009 	mul.w	r0, r0, r9
   13cd4:	f7fd fc90 	bl	115f8 <nrf_modem_os_alloc>
   13cd8:	b1f0      	cbz	r0, 13d18 <rpc_ip_event_handler+0xf8>
   13cda:	4605      	mov	r5, r0
   13cdc:	2704      	movs	r7, #4
   13cde:	eb00 03c9 	add.w	r3, r0, r9, lsl #3
   13ce2:	f108 0620 	add.w	r6, r8, #32
   13ce6:	9302      	str	r3, [sp, #8]
   13ce8:	9b02      	ldr	r3, [sp, #8]
   13cea:	42ab      	cmp	r3, r5
   13cec:	d118      	bne.n	13d20 <rpc_ip_event_handler+0x100>
   13cee:	f1b9 0f00 	cmp.w	r9, #0
   13cf2:	d004      	beq.n	13cfe <rpc_ip_event_handler+0xde>
   13cf4:	2200      	movs	r2, #0
   13cf6:	9b01      	ldr	r3, [sp, #4]
   13cf8:	4443      	add	r3, r8
   13cfa:	f843 2c04 	str.w	r2, [r3, #-4]
   13cfe:	4b9a      	ldr	r3, [pc, #616]	; (13f68 <rpc_ip_event_handler+0x348>)
   13d00:	f8c3 8000 	str.w	r8, [r3]
   13d04:	2302      	movs	r3, #2
   13d06:	9a03      	ldr	r2, [sp, #12]
   13d08:	6013      	str	r3, [r2, #0]
   13d0a:	6820      	ldr	r0, [r4, #0]
   13d0c:	2800      	cmp	r0, #0
   13d0e:	f040 8173 	bne.w	13ff8 <rpc_ip_event_handler+0x3d8>
   13d12:	e066      	b.n	13de2 <rpc_ip_event_handler+0x1c2>
   13d14:	f7fd fc80 	bl	11618 <nrf_modem_os_free>
   13d18:	220c      	movs	r2, #12
   13d1a:	4b94      	ldr	r3, [pc, #592]	; (13f6c <rpc_ip_event_handler+0x34c>)
   13d1c:	601a      	str	r2, [r3, #0]
   13d1e:	e7ee      	b.n	13cfe <rpc_ip_event_handler+0xde>
   13d20:	f85a 3007 	ldr.w	r3, [sl, r7]
   13d24:	f846 3c20 	str.w	r3, [r6, #-32]
   13d28:	eb0a 0307 	add.w	r3, sl, r7
   13d2c:	685a      	ldr	r2, [r3, #4]
   13d2e:	f8b3 b012 	ldrh.w	fp, [r3, #18]
   13d32:	2a02      	cmp	r2, #2
   13d34:	bf0c      	ite	eq
   13d36:	220a      	moveq	r2, #10
   13d38:	2202      	movne	r2, #2
   13d3a:	f846 2c1c 	str.w	r2, [r6, #-28]
   13d3e:	4a8c      	ldr	r2, [pc, #560]	; (13f70 <rpc_ip_event_handler+0x350>)
   13d40:	3714      	adds	r7, #20
   13d42:	6812      	ldr	r2, [r2, #0]
   13d44:	eb0a 0107 	add.w	r1, sl, r7
   13d48:	f846 2c18 	str.w	r2, [r6, #-24]
   13d4c:	4a89      	ldr	r2, [pc, #548]	; (13f74 <rpc_ip_event_handler+0x354>)
   13d4e:	6812      	ldr	r2, [r2, #0]
   13d50:	f846 2c14 	str.w	r2, [r6, #-20]
   13d54:	8a1a      	ldrh	r2, [r3, #16]
   13d56:	4b88      	ldr	r3, [pc, #544]	; (13f78 <rpc_ip_event_handler+0x358>)
   13d58:	2a04      	cmp	r2, #4
   13d5a:	881b      	ldrh	r3, [r3, #0]
   13d5c:	f846 2c10 	str.w	r2, [r6, #-16]
   13d60:	f846 5c0c 	str.w	r5, [r6, #-12]
   13d64:	d122      	bne.n	13dac <rpc_ip_event_handler+0x18c>
   13d66:	2002      	movs	r0, #2
   13d68:	6068      	str	r0, [r5, #4]
   13d6a:	2010      	movs	r0, #16
   13d6c:	812b      	strh	r3, [r5, #8]
   13d6e:	7028      	strb	r0, [r5, #0]
   13d70:	f105 000c 	add.w	r0, r5, #12
   13d74:	f007 fe8a 	bl	1ba8c <memcpy>
   13d78:	f856 3c10 	ldr.w	r3, [r6, #-16]
   13d7c:	f10b 0001 	add.w	r0, fp, #1
   13d80:	441f      	add	r7, r3
   13d82:	f7fd fc39 	bl	115f8 <nrf_modem_os_alloc>
   13d86:	f846 0c08 	str.w	r0, [r6, #-8]
   13d8a:	b148      	cbz	r0, 13da0 <rpc_ip_event_handler+0x180>
   13d8c:	465a      	mov	r2, fp
   13d8e:	eb0a 0107 	add.w	r1, sl, r7
   13d92:	f007 fe7b 	bl	1ba8c <memcpy>
   13d96:	2200      	movs	r2, #0
   13d98:	f856 3c08 	ldr.w	r3, [r6, #-8]
   13d9c:	f803 200b 	strb.w	r2, [r3, fp]
   13da0:	f846 6c04 	str.w	r6, [r6, #-4]
   13da4:	445f      	add	r7, fp
   13da6:	3620      	adds	r6, #32
   13da8:	3508      	adds	r5, #8
   13daa:	e79d      	b.n	13ce8 <rpc_ip_event_handler+0xc8>
   13dac:	200a      	movs	r0, #10
   13dae:	6068      	str	r0, [r5, #4]
   13db0:	2024      	movs	r0, #36	; 0x24
   13db2:	812b      	strh	r3, [r5, #8]
   13db4:	7028      	strb	r0, [r5, #0]
   13db6:	f105 0010 	add.w	r0, r5, #16
   13dba:	e7db      	b.n	13d74 <rpc_ip_event_handler+0x154>
   13dbc:	2b10      	cmp	r3, #16
   13dbe:	bf8e      	itee	hi
   13dc0:	232d      	movhi	r3, #45	; 0x2d
   13dc2:	4a6e      	ldrls	r2, [pc, #440]	; (13f7c <rpc_ip_event_handler+0x35c>)
   13dc4:	56d3      	ldrsbls	r3, [r2, r3]
   13dc6:	4a69      	ldr	r2, [pc, #420]	; (13f6c <rpc_ip_event_handler+0x34c>)
   13dc8:	6013      	str	r3, [r2, #0]
   13dca:	e79b      	b.n	13d04 <rpc_ip_event_handler+0xe4>
   13dcc:	6943      	ldr	r3, [r0, #20]
   13dce:	2b10      	cmp	r3, #16
   13dd0:	bf8e      	itee	hi
   13dd2:	232d      	movhi	r3, #45	; 0x2d
   13dd4:	4a69      	ldrls	r2, [pc, #420]	; (13f7c <rpc_ip_event_handler+0x35c>)
   13dd6:	56d3      	ldrsbls	r3, [r2, r3]
   13dd8:	4a69      	ldr	r2, [pc, #420]	; (13f80 <rpc_ip_event_handler+0x360>)
   13dda:	6013      	str	r3, [r2, #0]
   13ddc:	2201      	movs	r2, #1
   13dde:	4b69      	ldr	r3, [pc, #420]	; (13f84 <rpc_ip_event_handler+0x364>)
   13de0:	701a      	strb	r2, [r3, #0]
   13de2:	2000      	movs	r0, #0
   13de4:	e04e      	b.n	13e84 <rpc_ip_event_handler+0x264>
   13de6:	0c07      	lsrs	r7, r0, #16
   13de8:	e732      	b.n	13c50 <rpc_ip_event_handler+0x30>
   13dea:	f249 0302 	movw	r3, #36866	; 0x9002
   13dee:	429e      	cmp	r6, r3
   13df0:	f000 80ca 	beq.w	13f88 <rpc_ip_event_handler+0x368>
   13df4:	f249 0303 	movw	r3, #36867	; 0x9003
   13df8:	429e      	cmp	r6, r3
   13dfa:	d055      	beq.n	13ea8 <rpc_ip_event_handler+0x288>
   13dfc:	f249 0301 	movw	r3, #36865	; 0x9001
   13e00:	429e      	cmp	r6, r3
   13e02:	d182      	bne.n	13d0a <rpc_ip_event_handler+0xea>
   13e04:	682e      	ldr	r6, [r5, #0]
   13e06:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   13e0a:	f000 80f4 	beq.w	13ff6 <rpc_ip_event_handler+0x3d6>
   13e0e:	68a3      	ldr	r3, [r4, #8]
   13e10:	2b04      	cmp	r3, #4
   13e12:	f240 80ed 	bls.w	13ff0 <rpc_ip_event_handler+0x3d0>
   13e16:	8a66      	ldrh	r6, [r4, #18]
   13e18:	2e00      	cmp	r6, #0
   13e1a:	f000 80ea 	beq.w	13ff2 <rpc_ip_event_handler+0x3d2>
   13e1e:	2024      	movs	r0, #36	; 0x24
   13e20:	f7fd fbea 	bl	115f8 <nrf_modem_os_alloc>
   13e24:	4607      	mov	r7, r0
   13e26:	b300      	cbz	r0, 13e6a <rpc_ip_event_handler+0x24a>
   13e28:	8a62      	ldrh	r2, [r4, #18]
   13e2a:	2a10      	cmp	r2, #16
   13e2c:	f040 80c9 	bne.w	13fc2 <rpc_ip_event_handler+0x3a2>
   13e30:	230a      	movs	r3, #10
   13e32:	2624      	movs	r6, #36	; 0x24
   13e34:	6043      	str	r3, [r0, #4]
   13e36:	7006      	strb	r6, [r0, #0]
   13e38:	7c61      	ldrb	r1, [r4, #17]
   13e3a:	7c23      	ldrb	r3, [r4, #16]
   13e3c:	3010      	adds	r0, #16
   13e3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   13e42:	f820 3c08 	strh.w	r3, [r0, #-8]
   13e46:	f104 0114 	add.w	r1, r4, #20
   13e4a:	f007 fe1f 	bl	1ba8c <memcpy>
   13e4e:	6822      	ldr	r2, [r4, #0]
   13e50:	69e8      	ldr	r0, [r5, #28]
   13e52:	9204      	str	r2, [sp, #16]
   13e54:	6803      	ldr	r3, [r0, #0]
   13e56:	6862      	ldr	r2, [r4, #4]
   13e58:	685b      	ldr	r3, [r3, #4]
   13e5a:	e9cd 2705 	strd	r2, r7, [sp, #20]
   13e5e:	9607      	str	r6, [sp, #28]
   13e60:	a904      	add	r1, sp, #16
   13e62:	4798      	blx	r3
   13e64:	3001      	adds	r0, #1
   13e66:	f040 8094 	bne.w	13f92 <rpc_ip_event_handler+0x372>
   13e6a:	2002      	movs	r0, #2
   13e6c:	e00a      	b.n	13e84 <rpc_ip_event_handler+0x264>
   13e6e:	682b      	ldr	r3, [r5, #0]
   13e70:	2b01      	cmp	r3, #1
   13e72:	d1b6      	bne.n	13de2 <rpc_ip_event_handler+0x1c2>
   13e74:	6960      	ldr	r0, [r4, #20]
   13e76:	2800      	cmp	r0, #0
   13e78:	f040 80f8 	bne.w	1406c <rpc_ip_event_handler+0x44c>
   13e7c:	2302      	movs	r3, #2
   13e7e:	602b      	str	r3, [r5, #0]
   13e80:	69a3      	ldr	r3, [r4, #24]
   13e82:	61ab      	str	r3, [r5, #24]
   13e84:	b009      	add	sp, #36	; 0x24
   13e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e8a:	682b      	ldr	r3, [r5, #0]
   13e8c:	b29b      	uxth	r3, r3
   13e8e:	2b0d      	cmp	r3, #13
   13e90:	d1a7      	bne.n	13de2 <rpc_ip_event_handler+0x1c2>
   13e92:	6960      	ldr	r0, [r4, #20]
   13e94:	2800      	cmp	r0, #0
   13e96:	f040 80e9 	bne.w	1406c <rpc_ip_event_handler+0x44c>
   13e9a:	682b      	ldr	r3, [r5, #0]
   13e9c:	0c1b      	lsrs	r3, r3, #16
   13e9e:	041b      	lsls	r3, r3, #16
   13ea0:	f043 030e 	orr.w	r3, r3, #14
   13ea4:	602b      	str	r3, [r5, #0]
   13ea6:	e7ed      	b.n	13e84 <rpc_ip_event_handler+0x264>
   13ea8:	682b      	ldr	r3, [r5, #0]
   13eaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   13eae:	602b      	str	r3, [r5, #0]
   13eb0:	682b      	ldr	r3, [r5, #0]
   13eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   13eb6:	602b      	str	r3, [r5, #0]
   13eb8:	682b      	ldr	r3, [r5, #0]
   13eba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   13ebe:	602b      	str	r3, [r5, #0]
   13ec0:	682b      	ldr	r3, [r5, #0]
   13ec2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13ec6:	602b      	str	r3, [r5, #0]
   13ec8:	6923      	ldr	r3, [r4, #16]
   13eca:	2b6c      	cmp	r3, #108	; 0x6c
   13ecc:	d107      	bne.n	13ede <rpc_ip_event_handler+0x2be>
   13ece:	682b      	ldr	r3, [r5, #0]
   13ed0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   13ed4:	602b      	str	r3, [r5, #0]
   13ed6:	2339      	movs	r3, #57	; 0x39
   13ed8:	606b      	str	r3, [r5, #4]
   13eda:	60ab      	str	r3, [r5, #8]
   13edc:	e781      	b.n	13de2 <rpc_ip_event_handler+0x1c2>
   13ede:	2b10      	cmp	r3, #16
   13ee0:	bf96      	itet	ls
   13ee2:	4a26      	ldrls	r2, [pc, #152]	; (13f7c <rpc_ip_event_handler+0x35c>)
   13ee4:	232d      	movhi	r3, #45	; 0x2d
   13ee6:	56d3      	ldrsbls	r3, [r2, r3]
   13ee8:	e7f6      	b.n	13ed8 <rpc_ip_event_handler+0x2b8>
   13eea:	682b      	ldr	r3, [r5, #0]
   13eec:	b29b      	uxth	r3, r3
   13eee:	2b03      	cmp	r3, #3
   13ef0:	f47f af77 	bne.w	13de2 <rpc_ip_event_handler+0x1c2>
   13ef4:	6960      	ldr	r0, [r4, #20]
   13ef6:	2800      	cmp	r0, #0
   13ef8:	f040 80b8 	bne.w	1406c <rpc_ip_event_handler+0x44c>
   13efc:	682b      	ldr	r3, [r5, #0]
   13efe:	0c1b      	lsrs	r3, r3, #16
   13f00:	041b      	lsls	r3, r3, #16
   13f02:	f043 0304 	orr.w	r3, r3, #4
   13f06:	e7cd      	b.n	13ea4 <rpc_ip_event_handler+0x284>
   13f08:	682b      	ldr	r3, [r5, #0]
   13f0a:	0098      	lsls	r0, r3, #2
   13f0c:	f57f af69 	bpl.w	13de2 <rpc_ip_event_handler+0x1c2>
   13f10:	682b      	ldr	r3, [r5, #0]
   13f12:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   13f16:	602b      	str	r3, [r5, #0]
   13f18:	6960      	ldr	r0, [r4, #20]
   13f1a:	b968      	cbnz	r0, 13f38 <rpc_ip_event_handler+0x318>
   13f1c:	682b      	ldr	r3, [r5, #0]
   13f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13f22:	602b      	str	r3, [r5, #0]
   13f24:	682b      	ldr	r3, [r5, #0]
   13f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13f2a:	602b      	str	r3, [r5, #0]
   13f2c:	682b      	ldr	r3, [r5, #0]
   13f2e:	0c1b      	lsrs	r3, r3, #16
   13f30:	041b      	lsls	r3, r3, #16
   13f32:	f043 0305 	orr.w	r3, r3, #5
   13f36:	e7b5      	b.n	13ea4 <rpc_ip_event_handler+0x284>
   13f38:	2810      	cmp	r0, #16
   13f3a:	f200 808b 	bhi.w	14054 <rpc_ip_event_handler+0x434>
   13f3e:	4b0f      	ldr	r3, [pc, #60]	; (13f7c <rpc_ip_event_handler+0x35c>)
   13f40:	561b      	ldrsb	r3, [r3, r0]
   13f42:	606b      	str	r3, [r5, #4]
   13f44:	e076      	b.n	14034 <rpc_ip_event_handler+0x414>
   13f46:	682b      	ldr	r3, [r5, #0]
   13f48:	b29b      	uxth	r3, r3
   13f4a:	2b06      	cmp	r3, #6
   13f4c:	f47f af49 	bne.w	13de2 <rpc_ip_event_handler+0x1c2>
   13f50:	6960      	ldr	r0, [r4, #20]
   13f52:	2800      	cmp	r0, #0
   13f54:	f040 808a 	bne.w	1406c <rpc_ip_event_handler+0x44c>
   13f58:	682b      	ldr	r3, [r5, #0]
   13f5a:	0c1b      	lsrs	r3, r3, #16
   13f5c:	041b      	lsls	r3, r3, #16
   13f5e:	f043 0307 	orr.w	r3, r3, #7
   13f62:	e79f      	b.n	13ea4 <rpc_ip_event_handler+0x284>
   13f64:	2001552c 	.word	0x2001552c
   13f68:	20015530 	.word	0x20015530
   13f6c:	20015528 	.word	0x20015528
   13f70:	20015524 	.word	0x20015524
   13f74:	20015520 	.word	0x20015520
   13f78:	20015eac 	.word	0x20015eac
   13f7c:	0001d454 	.word	0x0001d454
   13f80:	20015558 	.word	0x20015558
   13f84:	2001820d 	.word	0x2001820d
   13f88:	682b      	ldr	r3, [r5, #0]
   13f8a:	b29b      	uxth	r3, r3
   13f8c:	2b07      	cmp	r3, #7
   13f8e:	f47f af28 	bne.w	13de2 <rpc_ip_event_handler+0x1c2>
   13f92:	682b      	ldr	r3, [r5, #0]
   13f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   13f98:	602b      	str	r3, [r5, #0]
   13f9a:	e722      	b.n	13de2 <rpc_ip_event_handler+0x1c2>
   13f9c:	682b      	ldr	r3, [r5, #0]
   13f9e:	b29b      	uxth	r3, r3
   13fa0:	2b08      	cmp	r3, #8
   13fa2:	f47f af1e 	bne.w	13de2 <rpc_ip_event_handler+0x1c2>
   13fa6:	6963      	ldr	r3, [r4, #20]
   13fa8:	2b00      	cmp	r3, #0
   13faa:	d174      	bne.n	14096 <rpc_ip_event_handler+0x476>
   13fac:	4b3d      	ldr	r3, [pc, #244]	; (140a4 <rpc_ip_event_handler+0x484>)
   13fae:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   13fb2:	682b      	ldr	r3, [r5, #0]
   13fb4:	0c1b      	lsrs	r3, r3, #16
   13fb6:	041b      	lsls	r3, r3, #16
   13fb8:	f043 0309 	orr.w	r3, r3, #9
   13fbc:	602b      	str	r3, [r5, #0]
   13fbe:	2001      	movs	r0, #1
   13fc0:	e760      	b.n	13e84 <rpc_ip_event_handler+0x264>
   13fc2:	2a04      	cmp	r2, #4
   13fc4:	d10d      	bne.n	13fe2 <rpc_ip_event_handler+0x3c2>
   13fc6:	2302      	movs	r3, #2
   13fc8:	2610      	movs	r6, #16
   13fca:	6043      	str	r3, [r0, #4]
   13fcc:	7006      	strb	r6, [r0, #0]
   13fce:	7c61      	ldrb	r1, [r4, #17]
   13fd0:	7c23      	ldrb	r3, [r4, #16]
   13fd2:	300c      	adds	r0, #12
   13fd4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   13fd8:	f820 3c04 	strh.w	r3, [r0, #-4]
   13fdc:	f104 0114 	add.w	r1, r4, #20
   13fe0:	e733      	b.n	13e4a <rpc_ip_event_handler+0x22a>
   13fe2:	6820      	ldr	r0, [r4, #0]
   13fe4:	f005 ffc3 	bl	19f6e <rpc_ip_client_data_free>
   13fe8:	4638      	mov	r0, r7
   13fea:	f7fd fb15 	bl	11618 <nrf_modem_os_free>
   13fee:	e6f8      	b.n	13de2 <rpc_ip_event_handler+0x1c2>
   13ff0:	2600      	movs	r6, #0
   13ff2:	4637      	mov	r7, r6
   13ff4:	e72b      	b.n	13e4e <rpc_ip_event_handler+0x22e>
   13ff6:	6820      	ldr	r0, [r4, #0]
   13ff8:	f005 ffb9 	bl	19f6e <rpc_ip_client_data_free>
   13ffc:	e6f1      	b.n	13de2 <rpc_ip_event_handler+0x1c2>
   13ffe:	682b      	ldr	r3, [r5, #0]
   14000:	0299      	lsls	r1, r3, #10
   14002:	f57f aeee 	bpl.w	13de2 <rpc_ip_event_handler+0x1c2>
   14006:	6963      	ldr	r3, [r4, #20]
   14008:	b93b      	cbnz	r3, 1401a <rpc_ip_event_handler+0x3fa>
   1400a:	682b      	ldr	r3, [r5, #0]
   1400c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   14010:	602b      	str	r3, [r5, #0]
   14012:	4b24      	ldr	r3, [pc, #144]	; (140a4 <rpc_ip_event_handler+0x484>)
   14014:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   14018:	e7d1      	b.n	13fbe <rpc_ip_event_handler+0x39e>
   1401a:	2b6b      	cmp	r3, #107	; 0x6b
   1401c:	d10e      	bne.n	1403c <rpc_ip_event_handler+0x41c>
   1401e:	692b      	ldr	r3, [r5, #16]
   14020:	220c      	movs	r2, #12
   14022:	2b01      	cmp	r3, #1
   14024:	d105      	bne.n	14032 <rpc_ip_event_handler+0x412>
   14026:	682b      	ldr	r3, [r5, #0]
   14028:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   1402c:	602b      	str	r3, [r5, #0]
   1402e:	606a      	str	r2, [r5, #4]
   14030:	e6d7      	b.n	13de2 <rpc_ip_event_handler+0x1c2>
   14032:	606a      	str	r2, [r5, #4]
   14034:	682b      	ldr	r3, [r5, #0]
   14036:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1403a:	e7ad      	b.n	13f98 <rpc_ip_event_handler+0x378>
   1403c:	f023 0202 	bic.w	r2, r3, #2
   14040:	2a01      	cmp	r2, #1
   14042:	d102      	bne.n	1404a <rpc_ip_event_handler+0x42a>
   14044:	230c      	movs	r3, #12
   14046:	606b      	str	r3, [r5, #4]
   14048:	e6cb      	b.n	13de2 <rpc_ip_event_handler+0x1c2>
   1404a:	2b10      	cmp	r3, #16
   1404c:	d802      	bhi.n	14054 <rpc_ip_event_handler+0x434>
   1404e:	4a16      	ldr	r2, [pc, #88]	; (140a8 <rpc_ip_event_handler+0x488>)
   14050:	56d3      	ldrsb	r3, [r2, r3]
   14052:	e776      	b.n	13f42 <rpc_ip_event_handler+0x322>
   14054:	232d      	movs	r3, #45	; 0x2d
   14056:	e774      	b.n	13f42 <rpc_ip_event_handler+0x322>
   14058:	682b      	ldr	r3, [r5, #0]
   1405a:	025a      	lsls	r2, r3, #9
   1405c:	f57f aec1 	bpl.w	13de2 <rpc_ip_event_handler+0x1c2>
   14060:	6960      	ldr	r0, [r4, #20]
   14062:	b918      	cbnz	r0, 1406c <rpc_ip_event_handler+0x44c>
   14064:	682b      	ldr	r3, [r5, #0]
   14066:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1406a:	e71b      	b.n	13ea4 <rpc_ip_event_handler+0x284>
   1406c:	2810      	cmp	r0, #16
   1406e:	d817      	bhi.n	140a0 <rpc_ip_event_handler+0x480>
   14070:	4b0d      	ldr	r3, [pc, #52]	; (140a8 <rpc_ip_event_handler+0x488>)
   14072:	561b      	ldrsb	r3, [r3, r0]
   14074:	e7e7      	b.n	14046 <rpc_ip_event_handler+0x426>
   14076:	682b      	ldr	r3, [r5, #0]
   14078:	01db      	lsls	r3, r3, #7
   1407a:	f57f aeb2 	bpl.w	13de2 <rpc_ip_event_handler+0x1c2>
   1407e:	6963      	ldr	r3, [r4, #20]
   14080:	b94b      	cbnz	r3, 14096 <rpc_ip_event_handler+0x476>
   14082:	6820      	ldr	r0, [r4, #0]
   14084:	b118      	cbz	r0, 1408e <rpc_ip_event_handler+0x46e>
   14086:	2001      	movs	r0, #1
   14088:	4b06      	ldr	r3, [pc, #24]	; (140a4 <rpc_ip_event_handler+0x484>)
   1408a:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1408e:	682b      	ldr	r3, [r5, #0]
   14090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   14094:	e706      	b.n	13ea4 <rpc_ip_event_handler+0x284>
   14096:	2b10      	cmp	r3, #16
   14098:	d802      	bhi.n	140a0 <rpc_ip_event_handler+0x480>
   1409a:	4a03      	ldr	r2, [pc, #12]	; (140a8 <rpc_ip_event_handler+0x488>)
   1409c:	56d3      	ldrsb	r3, [r2, r3]
   1409e:	e7d2      	b.n	14046 <rpc_ip_event_handler+0x426>
   140a0:	232d      	movs	r3, #45	; 0x2d
   140a2:	e7d0      	b.n	14046 <rpc_ip_event_handler+0x426>
   140a4:	20015534 	.word	0x20015534
   140a8:	0001d454 	.word	0x0001d454

000140ac <hostname_free>:
   140ac:	b538      	push	{r3, r4, r5, lr}
   140ae:	4c07      	ldr	r4, [pc, #28]	; (140cc <hostname_free+0x20>)
   140b0:	4605      	mov	r5, r0
   140b2:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   140b6:	b138      	cbz	r0, 140c8 <hostname_free+0x1c>
   140b8:	f7fd faae 	bl	11618 <nrf_modem_os_free>
   140bc:	2300      	movs	r3, #0
   140be:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   140c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   140c6:	6063      	str	r3, [r4, #4]
   140c8:	bd38      	pop	{r3, r4, r5, pc}
   140ca:	bf00      	nop
   140cc:	2001555c 	.word	0x2001555c

000140d0 <secure_socket_attach_initiate>:
   140d0:	f04f 33ff 	mov.w	r3, #4294967295
   140d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   140d8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 14168 <secure_socket_attach_initiate+0x98>
   140dc:	9301      	str	r3, [sp, #4]
   140de:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   140e2:	460c      	mov	r4, r1
   140e4:	4616      	mov	r6, r2
   140e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   140ea:	f247 0281 	movw	r2, #28801	; 0x7081
   140ee:	6989      	ldr	r1, [r1, #24]
   140f0:	4607      	mov	r7, r0
   140f2:	f006 f92f 	bl	1a354 <ip_interface_request_create>
   140f6:	4605      	mov	r5, r0
   140f8:	b378      	cbz	r0, 1415a <secure_socket_attach_initiate+0x8a>
   140fa:	f8d9 2004 	ldr.w	r2, [r9, #4]
   140fe:	b122      	cbz	r2, 1410a <secure_socket_attach_initiate+0x3a>
   14100:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   14104:	6800      	ldr	r0, [r0, #0]
   14106:	f007 fcc1 	bl	1ba8c <memcpy>
   1410a:	2224      	movs	r2, #36	; 0x24
   1410c:	4915      	ldr	r1, [pc, #84]	; (14164 <secure_socket_attach_initiate+0x94>)
   1410e:	f105 0014 	add.w	r0, r5, #20
   14112:	fb02 1107 	mla	r1, r2, r7, r1
   14116:	f007 fcb9 	bl	1ba8c <memcpy>
   1411a:	68ab      	ldr	r3, [r5, #8]
   1411c:	f247 0281 	movw	r2, #28801	; 0x7081
   14120:	3324      	adds	r3, #36	; 0x24
   14122:	60ab      	str	r3, [r5, #8]
   14124:	6823      	ldr	r3, [r4, #0]
   14126:	4629      	mov	r1, r5
   14128:	0c1b      	lsrs	r3, r3, #16
   1412a:	041b      	lsls	r3, r3, #16
   1412c:	f043 030a 	orr.w	r3, r3, #10
   14130:	6023      	str	r3, [r4, #0]
   14132:	4620      	mov	r0, r4
   14134:	4633      	mov	r3, r6
   14136:	f006 f925 	bl	1a384 <ip_interface_request_send>
   1413a:	b958      	cbnz	r0, 14154 <secure_socket_attach_initiate+0x84>
   1413c:	6823      	ldr	r3, [r4, #0]
   1413e:	00db      	lsls	r3, r3, #3
   14140:	d40d      	bmi.n	1415e <secure_socket_attach_initiate+0x8e>
   14142:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14146:	210b      	movs	r1, #11
   14148:	4638      	mov	r0, r7
   1414a:	ab01      	add	r3, sp, #4
   1414c:	f006 f92d 	bl	1a3aa <ip_interface_wait>
   14150:	b100      	cbz	r0, 14154 <secure_socket_attach_initiate+0x84>
   14152:	6026      	str	r6, [r4, #0]
   14154:	b003      	add	sp, #12
   14156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1415a:	200c      	movs	r0, #12
   1415c:	e7fa      	b.n	14154 <secure_socket_attach_initiate+0x84>
   1415e:	2073      	movs	r0, #115	; 0x73
   14160:	e7f8      	b.n	14154 <secure_socket_attach_initiate+0x84>
   14162:	bf00      	nop
   14164:	2001820f 	.word	0x2001820f
   14168:	2001555c 	.word	0x2001555c

0001416c <tls_interface_init>:
   1416c:	2201      	movs	r2, #1
   1416e:	4b02      	ldr	r3, [pc, #8]	; (14178 <tls_interface_init+0xc>)
   14170:	2000      	movs	r0, #0
   14172:	701a      	strb	r2, [r3, #0]
   14174:	4770      	bx	lr
   14176:	bf00      	nop
   14178:	2001820e 	.word	0x2001820e

0001417c <tls_interface_open>:
   1417c:	b538      	push	{r3, r4, r5, lr}
   1417e:	4b1e      	ldr	r3, [pc, #120]	; (141f8 <tls_interface_open+0x7c>)
   14180:	4615      	mov	r5, r2
   14182:	781b      	ldrb	r3, [r3, #0]
   14184:	b92b      	cbnz	r3, 14192 <tls_interface_open+0x16>
   14186:	2070      	movs	r0, #112	; 0x70
   14188:	f7fd f8a2 	bl	112d0 <nrf_modem_os_errno_set>
   1418c:	f04f 34ff 	mov.w	r4, #4294967295
   14190:	e02b      	b.n	141ea <tls_interface_open+0x6e>
   14192:	1e4b      	subs	r3, r1, #1
   14194:	2b01      	cmp	r3, #1
   14196:	d809      	bhi.n	141ac <tls_interface_open+0x30>
   14198:	b952      	cbnz	r2, 141b0 <tls_interface_open+0x34>
   1419a:	2901      	cmp	r1, #1
   1419c:	bf0b      	itete	eq
   1419e:	2201      	moveq	r2, #1
   141a0:	2202      	movne	r2, #2
   141a2:	f44f 7582 	moveq.w	r5, #260	; 0x104
   141a6:	f44f 7587 	movne.w	r5, #270	; 0x10e
   141aa:	e007      	b.n	141bc <tls_interface_open+0x40>
   141ac:	2029      	movs	r0, #41	; 0x29
   141ae:	e7eb      	b.n	14188 <tls_interface_open+0xc>
   141b0:	2901      	cmp	r1, #1
   141b2:	d11c      	bne.n	141ee <tls_interface_open+0x72>
   141b4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   141b8:	d1f8      	bne.n	141ac <tls_interface_open+0x30>
   141ba:	460a      	mov	r2, r1
   141bc:	f7ff f83e 	bl	1323c <ip_interface_open>
   141c0:	1e04      	subs	r4, r0, #0
   141c2:	dbe3      	blt.n	1418c <tls_interface_open+0x10>
   141c4:	2224      	movs	r2, #36	; 0x24
   141c6:	480d      	ldr	r0, [pc, #52]	; (141fc <tls_interface_open+0x80>)
   141c8:	490d      	ldr	r1, [pc, #52]	; (14200 <tls_interface_open+0x84>)
   141ca:	fb02 0004 	mla	r0, r2, r4, r0
   141ce:	f007 fc5d 	bl	1ba8c <memcpy>
   141d2:	4620      	mov	r0, r4
   141d4:	f7fe ff5e 	bl	13094 <interface_socket_from_handle_get>
   141d8:	6803      	ldr	r3, [r0, #0]
   141da:	6145      	str	r5, [r0, #20]
   141dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   141e0:	6003      	str	r3, [r0, #0]
   141e2:	6803      	ldr	r3, [r0, #0]
   141e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   141e8:	6003      	str	r3, [r0, #0]
   141ea:	4620      	mov	r0, r4
   141ec:	bd38      	pop	{r3, r4, r5, pc}
   141ee:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   141f2:	d1db      	bne.n	141ac <tls_interface_open+0x30>
   141f4:	2202      	movs	r2, #2
   141f6:	e7e1      	b.n	141bc <tls_interface_open+0x40>
   141f8:	2001820e 	.word	0x2001820e
   141fc:	2001820f 	.word	0x2001820f
   14200:	0001d465 	.word	0x0001d465

00014204 <tls_interface_sendto>:
   14204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14208:	b085      	sub	sp, #20
   1420a:	4606      	mov	r6, r0
   1420c:	4691      	mov	r9, r2
   1420e:	461f      	mov	r7, r3
   14210:	9103      	str	r1, [sp, #12]
   14212:	f7fe ff3f 	bl	13094 <interface_socket_from_handle_get>
   14216:	4605      	mov	r5, r0
   14218:	2800      	cmp	r0, #0
   1421a:	d06c      	beq.n	142f6 <tls_interface_sendto+0xf2>
   1421c:	f04f 0a24 	mov.w	sl, #36	; 0x24
   14220:	07bb      	lsls	r3, r7, #30
   14222:	bf48      	it	mi
   14224:	2300      	movmi	r3, #0
   14226:	f04f 0400 	mov.w	r4, #0
   1422a:	f04f 3bff 	mov.w	fp, #4294967295
   1422e:	bf58      	it	pl
   14230:	6803      	ldrpl	r3, [r0, #0]
   14232:	fb0a fa06 	mul.w	sl, sl, r6
   14236:	bf5c      	itt	pl
   14238:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   1423c:	f3c3 7300 	ubfxpl	r3, r3, #28, #1
   14240:	9302      	str	r3, [sp, #8]
   14242:	6829      	ldr	r1, [r5, #0]
   14244:	eba9 0804 	sub.w	r8, r9, r4
   14248:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
   1424c:	b289      	uxth	r1, r1
   1424e:	bfa8      	it	ge
   14250:	f44f 6800 	movge.w	r8, #2048	; 0x800
   14254:	290c      	cmp	r1, #12
   14256:	d110      	bne.n	1427a <tls_interface_sendto+0x76>
   14258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1425a:	9903      	ldr	r1, [sp, #12]
   1425c:	9301      	str	r3, [sp, #4]
   1425e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14260:	4642      	mov	r2, r8
   14262:	9300      	str	r3, [sp, #0]
   14264:	4630      	mov	r0, r6
   14266:	463b      	mov	r3, r7
   14268:	4421      	add	r1, r4
   1426a:	f7ff f8b5 	bl	133d8 <ip_interface_sendto>
   1426e:	f1b0 0b00 	subs.w	fp, r0, #0
   14272:	da32      	bge.n	142da <tls_interface_sendto+0xd6>
   14274:	f04f 34ff 	mov.w	r4, #4294967295
   14278:	e034      	b.n	142e4 <tls_interface_sendto+0xe0>
   1427a:	6829      	ldr	r1, [r5, #0]
   1427c:	b289      	uxth	r1, r1
   1427e:	290b      	cmp	r1, #11
   14280:	d109      	bne.n	14296 <tls_interface_sendto+0x92>
   14282:	4b22      	ldr	r3, [pc, #136]	; (1430c <tls_interface_sendto+0x108>)
   14284:	f813 200a 	ldrb.w	r2, [r3, sl]
   14288:	2a02      	cmp	r2, #2
   1428a:	d036      	beq.n	142fa <tls_interface_sendto+0xf6>
   1428c:	692a      	ldr	r2, [r5, #16]
   1428e:	2a01      	cmp	r2, #1
   14290:	d135      	bne.n	142fe <tls_interface_sendto+0xfa>
   14292:	202a      	movs	r0, #42	; 0x2a
   14294:	e02c      	b.n	142f0 <tls_interface_sendto+0xec>
   14296:	4628      	mov	r0, r5
   14298:	f006 fb56 	bl	1a948 <attach_trigger_condition_verify>
   1429c:	b398      	cbz	r0, 14306 <tls_interface_sendto+0x102>
   1429e:	4b1b      	ldr	r3, [pc, #108]	; (1430c <tls_interface_sendto+0x108>)
   142a0:	f813 100a 	ldrb.w	r1, [r3, sl]
   142a4:	2902      	cmp	r1, #2
   142a6:	d110      	bne.n	142ca <tls_interface_sendto+0xc6>
   142a8:	4629      	mov	r1, r5
   142aa:	4630      	mov	r0, r6
   142ac:	f006 fb63 	bl	1a976 <secure_client_socket>
   142b0:	b970      	cbnz	r0, 142d0 <tls_interface_sendto+0xcc>
   142b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   142b4:	9903      	ldr	r1, [sp, #12]
   142b6:	9301      	str	r3, [sp, #4]
   142b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   142ba:	4642      	mov	r2, r8
   142bc:	9300      	str	r3, [sp, #0]
   142be:	4630      	mov	r0, r6
   142c0:	463b      	mov	r3, r7
   142c2:	4421      	add	r1, r4
   142c4:	f7ff f888 	bl	133d8 <ip_interface_sendto>
   142c8:	4683      	mov	fp, r0
   142ca:	f1bb 0f00 	cmp.w	fp, #0
   142ce:	e7d0      	b.n	14272 <tls_interface_sendto+0x6e>
   142d0:	f1bb 3fff 	cmp.w	fp, #4294967295
   142d4:	d00a      	beq.n	142ec <tls_interface_sendto+0xe8>
   142d6:	2800      	cmp	r0, #0
   142d8:	dc0a      	bgt.n	142f0 <tls_interface_sendto+0xec>
   142da:	9b02      	ldr	r3, [sp, #8]
   142dc:	445c      	add	r4, fp
   142de:	b10b      	cbz	r3, 142e4 <tls_interface_sendto+0xe0>
   142e0:	45a1      	cmp	r9, r4
   142e2:	dcae      	bgt.n	14242 <tls_interface_sendto+0x3e>
   142e4:	4620      	mov	r0, r4
   142e6:	b005      	add	sp, #20
   142e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142ec:	2800      	cmp	r0, #0
   142ee:	ddc1      	ble.n	14274 <tls_interface_sendto+0x70>
   142f0:	f7fc ffee 	bl	112d0 <nrf_modem_os_errno_set>
   142f4:	e7be      	b.n	14274 <tls_interface_sendto+0x70>
   142f6:	2009      	movs	r0, #9
   142f8:	e7fa      	b.n	142f0 <tls_interface_sendto+0xec>
   142fa:	2023      	movs	r0, #35	; 0x23
   142fc:	e7f8      	b.n	142f0 <tls_interface_sendto+0xec>
   142fe:	f1bb 3fff 	cmp.w	fp, #4294967295
   14302:	d1ea      	bne.n	142da <tls_interface_sendto+0xd6>
   14304:	e7b6      	b.n	14274 <tls_interface_sendto+0x70>
   14306:	2039      	movs	r0, #57	; 0x39
   14308:	e7f2      	b.n	142f0 <tls_interface_sendto+0xec>
   1430a:	bf00      	nop
   1430c:	2001820f 	.word	0x2001820f

00014310 <tls_interface_recvfrom>:
   14310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14312:	460d      	mov	r5, r1
   14314:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   14318:	4604      	mov	r4, r0
   1431a:	e9cd 3200 	strd	r3, r2, [sp]
   1431e:	f7fe feb9 	bl	13094 <interface_socket_from_handle_get>
   14322:	4601      	mov	r1, r0
   14324:	b388      	cbz	r0, 1438a <tls_interface_recvfrom+0x7a>
   14326:	e9dd 3200 	ldrd	r3, r2, [sp]
   1432a:	f8d0 c000 	ldr.w	ip, [r0]
   1432e:	fa1f fc8c 	uxth.w	ip, ip
   14332:	f1bc 0f0c 	cmp.w	ip, #12
   14336:	d006      	beq.n	14346 <tls_interface_recvfrom+0x36>
   14338:	f8d0 c000 	ldr.w	ip, [r0]
   1433c:	fa1f fc8c 	uxth.w	ip, ip
   14340:	f1bc 0f0d 	cmp.w	ip, #13
   14344:	d108      	bne.n	14358 <tls_interface_recvfrom+0x48>
   14346:	4629      	mov	r1, r5
   14348:	4620      	mov	r0, r4
   1434a:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1434e:	b003      	add	sp, #12
   14350:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   14354:	f006 b839 	b.w	1a3ca <ip_interface_recvfrom>
   14358:	e9cd 2300 	strd	r2, r3, [sp]
   1435c:	f006 faf4 	bl	1a948 <attach_trigger_condition_verify>
   14360:	b1b8      	cbz	r0, 14392 <tls_interface_recvfrom+0x82>
   14362:	2024      	movs	r0, #36	; 0x24
   14364:	4360      	muls	r0, r4
   14366:	f8df c030 	ldr.w	ip, [pc, #48]	; 14398 <tls_interface_recvfrom+0x88>
   1436a:	f81c 0000 	ldrb.w	r0, [ip, r0]
   1436e:	2802      	cmp	r0, #2
   14370:	d10f      	bne.n	14392 <tls_interface_recvfrom+0x82>
   14372:	4620      	mov	r0, r4
   14374:	f006 faff 	bl	1a976 <secure_client_socket>
   14378:	e9dd 2300 	ldrd	r2, r3, [sp]
   1437c:	2800      	cmp	r0, #0
   1437e:	d0e2      	beq.n	14346 <tls_interface_recvfrom+0x36>
   14380:	dc04      	bgt.n	1438c <tls_interface_recvfrom+0x7c>
   14382:	f04f 30ff 	mov.w	r0, #4294967295
   14386:	b003      	add	sp, #12
   14388:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1438a:	2009      	movs	r0, #9
   1438c:	f7fc ffa0 	bl	112d0 <nrf_modem_os_errno_set>
   14390:	e7f7      	b.n	14382 <tls_interface_recvfrom+0x72>
   14392:	2023      	movs	r0, #35	; 0x23
   14394:	e7fa      	b.n	1438c <tls_interface_recvfrom+0x7c>
   14396:	bf00      	nop
   14398:	2001820f 	.word	0x2001820f

0001439c <tls_interface_bind>:
   1439c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1439e:	4604      	mov	r4, r0
   143a0:	e9cd 2100 	strd	r2, r1, [sp]
   143a4:	f7fe fe76 	bl	13094 <interface_socket_from_handle_get>
   143a8:	4605      	mov	r5, r0
   143aa:	b1e0      	cbz	r0, 143e6 <tls_interface_bind+0x4a>
   143ac:	6803      	ldr	r3, [r0, #0]
   143ae:	b29b      	uxth	r3, r3
   143b0:	2b02      	cmp	r3, #2
   143b2:	d11a      	bne.n	143ea <tls_interface_bind+0x4e>
   143b4:	e9dd 2100 	ldrd	r2, r1, [sp]
   143b8:	4620      	mov	r0, r4
   143ba:	f7ff f9ad 	bl	13718 <ip_interface_bind>
   143be:	b950      	cbnz	r0, 143d6 <tls_interface_bind+0x3a>
   143c0:	2324      	movs	r3, #36	; 0x24
   143c2:	4363      	muls	r3, r4
   143c4:	4a0a      	ldr	r2, [pc, #40]	; (143f0 <tls_interface_bind+0x54>)
   143c6:	5cd3      	ldrb	r3, [r2, r3]
   143c8:	2b01      	cmp	r3, #1
   143ca:	d10a      	bne.n	143e2 <tls_interface_bind+0x46>
   143cc:	2204      	movs	r2, #4
   143ce:	4629      	mov	r1, r5
   143d0:	4620      	mov	r0, r4
   143d2:	f7ff fe7d 	bl	140d0 <secure_socket_attach_initiate>
   143d6:	2800      	cmp	r0, #0
   143d8:	dd03      	ble.n	143e2 <tls_interface_bind+0x46>
   143da:	f7fc ff79 	bl	112d0 <nrf_modem_os_errno_set>
   143de:	f04f 30ff 	mov.w	r0, #4294967295
   143e2:	b003      	add	sp, #12
   143e4:	bd30      	pop	{r4, r5, pc}
   143e6:	2009      	movs	r0, #9
   143e8:	e7f7      	b.n	143da <tls_interface_bind+0x3e>
   143ea:	202d      	movs	r0, #45	; 0x2d
   143ec:	e7f5      	b.n	143da <tls_interface_bind+0x3e>
   143ee:	bf00      	nop
   143f0:	2001820f 	.word	0x2001820f

000143f4 <tls_interface_connect>:
   143f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   143f6:	4605      	mov	r5, r0
   143f8:	e9cd 2100 	strd	r2, r1, [sp]
   143fc:	f7fe fe4a 	bl	13094 <interface_socket_from_handle_get>
   14400:	4604      	mov	r4, r0
   14402:	b1f8      	cbz	r0, 14444 <tls_interface_connect+0x50>
   14404:	2324      	movs	r3, #36	; 0x24
   14406:	436b      	muls	r3, r5
   14408:	4810      	ldr	r0, [pc, #64]	; (1444c <tls_interface_connect+0x58>)
   1440a:	5cc3      	ldrb	r3, [r0, r3]
   1440c:	2b02      	cmp	r3, #2
   1440e:	d11b      	bne.n	14448 <tls_interface_connect+0x54>
   14410:	e9dd 2100 	ldrd	r2, r1, [sp]
   14414:	6823      	ldr	r3, [r4, #0]
   14416:	b29b      	uxth	r3, r3
   14418:	2b02      	cmp	r3, #2
   1441a:	d003      	beq.n	14424 <tls_interface_connect+0x30>
   1441c:	6823      	ldr	r3, [r4, #0]
   1441e:	b29b      	uxth	r3, r3
   14420:	2b04      	cmp	r3, #4
   14422:	d111      	bne.n	14448 <tls_interface_connect+0x54>
   14424:	4628      	mov	r0, r5
   14426:	f006 f8d8 	bl	1a5da <ip_interface_connect>
   1442a:	b918      	cbnz	r0, 14434 <tls_interface_connect+0x40>
   1442c:	4621      	mov	r1, r4
   1442e:	4628      	mov	r0, r5
   14430:	f006 faa1 	bl	1a976 <secure_client_socket>
   14434:	2800      	cmp	r0, #0
   14436:	dd03      	ble.n	14440 <tls_interface_connect+0x4c>
   14438:	f7fc ff4a 	bl	112d0 <nrf_modem_os_errno_set>
   1443c:	f04f 30ff 	mov.w	r0, #4294967295
   14440:	b003      	add	sp, #12
   14442:	bd30      	pop	{r4, r5, pc}
   14444:	2009      	movs	r0, #9
   14446:	e7f7      	b.n	14438 <tls_interface_connect+0x44>
   14448:	202d      	movs	r0, #45	; 0x2d
   1444a:	e7f5      	b.n	14438 <tls_interface_connect+0x44>
   1444c:	2001820f 	.word	0x2001820f

00014450 <tls_interface_listen>:
   14450:	b538      	push	{r3, r4, r5, lr}
   14452:	4604      	mov	r4, r0
   14454:	460d      	mov	r5, r1
   14456:	f7fe fe1d 	bl	13094 <interface_socket_from_handle_get>
   1445a:	2800      	cmp	r0, #0
   1445c:	d034      	beq.n	144c8 <tls_interface_listen+0x78>
   1445e:	6803      	ldr	r3, [r0, #0]
   14460:	00db      	lsls	r3, r3, #3
   14462:	d433      	bmi.n	144cc <tls_interface_listen+0x7c>
   14464:	6903      	ldr	r3, [r0, #16]
   14466:	2b01      	cmp	r3, #1
   14468:	d130      	bne.n	144cc <tls_interface_listen+0x7c>
   1446a:	6803      	ldr	r3, [r0, #0]
   1446c:	b29b      	uxth	r3, r3
   1446e:	2b04      	cmp	r3, #4
   14470:	d105      	bne.n	1447e <tls_interface_listen+0x2e>
   14472:	2324      	movs	r3, #36	; 0x24
   14474:	4363      	muls	r3, r4
   14476:	4a16      	ldr	r2, [pc, #88]	; (144d0 <tls_interface_listen+0x80>)
   14478:	5cd3      	ldrb	r3, [r2, r3]
   1447a:	2b02      	cmp	r3, #2
   1447c:	d009      	beq.n	14492 <tls_interface_listen+0x42>
   1447e:	6803      	ldr	r3, [r0, #0]
   14480:	b29b      	uxth	r3, r3
   14482:	2b0b      	cmp	r3, #11
   14484:	d122      	bne.n	144cc <tls_interface_listen+0x7c>
   14486:	2324      	movs	r3, #36	; 0x24
   14488:	4363      	muls	r3, r4
   1448a:	4a11      	ldr	r2, [pc, #68]	; (144d0 <tls_interface_listen+0x80>)
   1448c:	5cd3      	ldrb	r3, [r2, r3]
   1448e:	2b01      	cmp	r3, #1
   14490:	d11c      	bne.n	144cc <tls_interface_listen+0x7c>
   14492:	2324      	movs	r3, #36	; 0x24
   14494:	2101      	movs	r1, #1
   14496:	4363      	muls	r3, r4
   14498:	4a0d      	ldr	r2, [pc, #52]	; (144d0 <tls_interface_listen+0x80>)
   1449a:	54d1      	strb	r1, [r2, r3]
   1449c:	6803      	ldr	r3, [r0, #0]
   1449e:	2b0b      	cmp	r3, #11
   144a0:	d10a      	bne.n	144b8 <tls_interface_listen+0x68>
   144a2:	4629      	mov	r1, r5
   144a4:	4620      	mov	r0, r4
   144a6:	f7ff f999 	bl	137dc <ip_interface_listen>
   144aa:	2800      	cmp	r0, #0
   144ac:	dd03      	ble.n	144b6 <tls_interface_listen+0x66>
   144ae:	f7fc ff0f 	bl	112d0 <nrf_modem_os_errno_set>
   144b2:	f04f 30ff 	mov.w	r0, #4294967295
   144b6:	bd38      	pop	{r3, r4, r5, pc}
   144b8:	4601      	mov	r1, r0
   144ba:	6802      	ldr	r2, [r0, #0]
   144bc:	4620      	mov	r0, r4
   144be:	f7ff fe07 	bl	140d0 <secure_socket_attach_initiate>
   144c2:	2800      	cmp	r0, #0
   144c4:	d0ed      	beq.n	144a2 <tls_interface_listen+0x52>
   144c6:	e7f0      	b.n	144aa <tls_interface_listen+0x5a>
   144c8:	2009      	movs	r0, #9
   144ca:	e7f0      	b.n	144ae <tls_interface_listen+0x5e>
   144cc:	202d      	movs	r0, #45	; 0x2d
   144ce:	e7ee      	b.n	144ae <tls_interface_listen+0x5e>
   144d0:	2001820f 	.word	0x2001820f

000144d4 <tls_interface_accept>:
   144d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   144d8:	b086      	sub	sp, #24
   144da:	4606      	mov	r6, r0
   144dc:	f04f 34ff 	mov.w	r4, #4294967295
   144e0:	e9cd 2102 	strd	r2, r1, [sp, #8]
   144e4:	9301      	str	r3, [sp, #4]
   144e6:	f7fe fdd5 	bl	13094 <interface_socket_from_handle_get>
   144ea:	9405      	str	r4, [sp, #20]
   144ec:	2800      	cmp	r0, #0
   144ee:	d048      	beq.n	14582 <tls_interface_accept+0xae>
   144f0:	6805      	ldr	r5, [r0, #0]
   144f2:	b2ad      	uxth	r5, r5
   144f4:	2d07      	cmp	r5, #7
   144f6:	d144      	bne.n	14582 <tls_interface_accept+0xae>
   144f8:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   144fc:	6800      	ldr	r0, [r0, #0]
   144fe:	9903      	ldr	r1, [sp, #12]
   14500:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
   14504:	d006      	beq.n	14514 <tls_interface_accept+0x40>
   14506:	202d      	movs	r0, #45	; 0x2d
   14508:	f7fc fee2 	bl	112d0 <nrf_modem_os_errno_set>
   1450c:	4620      	mov	r0, r4
   1450e:	b006      	add	sp, #24
   14510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14514:	4630      	mov	r0, r6
   14516:	f7ff f9b3 	bl	13880 <ip_interface_accept>
   1451a:	1e04      	subs	r4, r0, #0
   1451c:	db2b      	blt.n	14576 <tls_interface_accept+0xa2>
   1451e:	f7fe fdb9 	bl	13094 <interface_socket_from_handle_get>
   14522:	2224      	movs	r2, #36	; 0x24
   14524:	6803      	ldr	r3, [r0, #0]
   14526:	fb02 f804 	mul.w	r8, r2, r4
   1452a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1452e:	6003      	str	r3, [r0, #0]
   14530:	6803      	ldr	r3, [r0, #0]
   14532:	4f15      	ldr	r7, [pc, #84]	; (14588 <tls_interface_accept+0xb4>)
   14534:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   14538:	4605      	mov	r5, r0
   1453a:	fb02 7106 	mla	r1, r2, r6, r7
   1453e:	6003      	str	r3, [r0, #0]
   14540:	eb07 0008 	add.w	r0, r7, r8
   14544:	f007 faa2 	bl	1ba8c <memcpy>
   14548:	2302      	movs	r3, #2
   1454a:	f807 3008 	strb.w	r3, [r7, r8]
   1454e:	682b      	ldr	r3, [r5, #0]
   14550:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14554:	0c1b      	lsrs	r3, r3, #16
   14556:	041b      	lsls	r3, r3, #16
   14558:	f043 030b 	orr.w	r3, r3, #11
   1455c:	602b      	str	r3, [r5, #0]
   1455e:	210c      	movs	r1, #12
   14560:	4620      	mov	r0, r4
   14562:	ab05      	add	r3, sp, #20
   14564:	f005 ff21 	bl	1a3aa <ip_interface_wait>
   14568:	4605      	mov	r5, r0
   1456a:	2800      	cmp	r0, #0
   1456c:	d0ce      	beq.n	1450c <tls_interface_accept+0x38>
   1456e:	4620      	mov	r0, r4
   14570:	f7fe fee8 	bl	13344 <ip_interface_close>
   14574:	462c      	mov	r4, r5
   14576:	4620      	mov	r0, r4
   14578:	f7fc feaa 	bl	112d0 <nrf_modem_os_errno_set>
   1457c:	f04f 34ff 	mov.w	r4, #4294967295
   14580:	e7c4      	b.n	1450c <tls_interface_accept+0x38>
   14582:	2409      	movs	r4, #9
   14584:	e7f7      	b.n	14576 <tls_interface_accept+0xa2>
   14586:	bf00      	nop
   14588:	2001820f 	.word	0x2001820f

0001458c <tls_interface_setopt>:
   1458c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1458e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   14592:	4606      	mov	r6, r0
   14594:	4614      	mov	r4, r2
   14596:	461f      	mov	r7, r3
   14598:	9d08      	ldr	r5, [sp, #32]
   1459a:	d004      	beq.n	145a6 <tls_interface_setopt+0x1a>
   1459c:	b003      	add	sp, #12
   1459e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   145a2:	f006 b917 	b.w	1a7d4 <ip_interface_setopt>
   145a6:	b92b      	cbnz	r3, 145b4 <tls_interface_setopt+0x28>
   145a8:	200e      	movs	r0, #14
   145aa:	f7fc fe91 	bl	112d0 <nrf_modem_os_errno_set>
   145ae:	f04f 30ff 	mov.w	r0, #4294967295
   145b2:	e021      	b.n	145f8 <tls_interface_setopt+0x6c>
   145b4:	f7fe fd6e 	bl	13094 <interface_socket_from_handle_get>
   145b8:	4601      	mov	r1, r0
   145ba:	2800      	cmp	r0, #0
   145bc:	d06d      	beq.n	1469a <tls_interface_setopt+0x10e>
   145be:	6803      	ldr	r3, [r0, #0]
   145c0:	b29b      	uxth	r3, r3
   145c2:	2b02      	cmp	r3, #2
   145c4:	d007      	beq.n	145d6 <tls_interface_setopt+0x4a>
   145c6:	6803      	ldr	r3, [r0, #0]
   145c8:	b29b      	uxth	r3, r3
   145ca:	2b04      	cmp	r3, #4
   145cc:	d003      	beq.n	145d6 <tls_interface_setopt+0x4a>
   145ce:	6803      	ldr	r3, [r0, #0]
   145d0:	b29b      	uxth	r3, r3
   145d2:	2b05      	cmp	r3, #5
   145d4:	d161      	bne.n	1469a <tls_interface_setopt+0x10e>
   145d6:	1e62      	subs	r2, r4, #1
   145d8:	2a05      	cmp	r2, #5
   145da:	d860      	bhi.n	1469e <tls_interface_setopt+0x112>
   145dc:	e8df f002 	tbb	[pc, r2]
   145e0:	34162203 	.word	0x34162203
   145e4:	513f      	.short	0x513f
   145e6:	2d04      	cmp	r5, #4
   145e8:	d15b      	bne.n	146a2 <tls_interface_setopt+0x116>
   145ea:	6838      	ldr	r0, [r7, #0]
   145ec:	b930      	cbnz	r0, 145fc <tls_interface_setopt+0x70>
   145ee:	2324      	movs	r3, #36	; 0x24
   145f0:	2202      	movs	r2, #2
   145f2:	435e      	muls	r6, r3
   145f4:	4b2d      	ldr	r3, [pc, #180]	; (146ac <tls_interface_setopt+0x120>)
   145f6:	559a      	strb	r2, [r3, r6]
   145f8:	b003      	add	sp, #12
   145fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   145fc:	2801      	cmp	r0, #1
   145fe:	d150      	bne.n	146a2 <tls_interface_setopt+0x116>
   14600:	2324      	movs	r3, #36	; 0x24
   14602:	435e      	muls	r6, r3
   14604:	4b29      	ldr	r3, [pc, #164]	; (146ac <tls_interface_setopt+0x120>)
   14606:	5598      	strb	r0, [r3, r6]
   14608:	2000      	movs	r0, #0
   1460a:	e7f5      	b.n	145f8 <tls_interface_setopt+0x6c>
   1460c:	2d01      	cmp	r5, #1
   1460e:	d148      	bne.n	146a2 <tls_interface_setopt+0x116>
   14610:	2024      	movs	r0, #36	; 0x24
   14612:	783b      	ldrb	r3, [r7, #0]
   14614:	4a25      	ldr	r2, [pc, #148]	; (146ac <tls_interface_setopt+0x120>)
   14616:	3b00      	subs	r3, #0
   14618:	bf18      	it	ne
   1461a:	2301      	movne	r3, #1
   1461c:	fb00 2606 	mla	r6, r0, r6, r2
   14620:	7073      	strb	r3, [r6, #1]
   14622:	e7f1      	b.n	14608 <tls_interface_setopt+0x7c>
   14624:	2d03      	cmp	r5, #3
   14626:	d93c      	bls.n	146a2 <tls_interface_setopt+0x116>
   14628:	f015 0403 	ands.w	r4, r5, #3
   1462c:	d139      	bne.n	146a2 <tls_interface_setopt+0x116>
   1462e:	2324      	movs	r3, #36	; 0x24
   14630:	435e      	muls	r6, r3
   14632:	481e      	ldr	r0, [pc, #120]	; (146ac <tls_interface_setopt+0x120>)
   14634:	08aa      	lsrs	r2, r5, #2
   14636:	1983      	adds	r3, r0, r6
   14638:	70da      	strb	r2, [r3, #3]
   1463a:	4639      	mov	r1, r7
   1463c:	462a      	mov	r2, r5
   1463e:	3604      	adds	r6, #4
   14640:	4430      	add	r0, r6
   14642:	f007 fa23 	bl	1ba8c <memcpy>
   14646:	e7df      	b.n	14608 <tls_interface_setopt+0x7c>
   14648:	2d04      	cmp	r5, #4
   1464a:	d12a      	bne.n	146a2 <tls_interface_setopt+0x116>
   1464c:	683b      	ldr	r3, [r7, #0]
   1464e:	2b02      	cmp	r3, #2
   14650:	d827      	bhi.n	146a2 <tls_interface_setopt+0x116>
   14652:	2024      	movs	r0, #36	; 0x24
   14654:	4a15      	ldr	r2, [pc, #84]	; (146ac <tls_interface_setopt+0x120>)
   14656:	fb00 2606 	mla	r6, r0, r6, r2
   1465a:	70b3      	strb	r3, [r6, #2]
   1465c:	e7d4      	b.n	14608 <tls_interface_setopt+0x7c>
   1465e:	4630      	mov	r0, r6
   14660:	f7ff fd24 	bl	140ac <hostname_free>
   14664:	2d00      	cmp	r5, #0
   14666:	d0cf      	beq.n	14608 <tls_interface_setopt+0x7c>
   14668:	4628      	mov	r0, r5
   1466a:	f7fc ffc5 	bl	115f8 <nrf_modem_os_alloc>
   1466e:	4b10      	ldr	r3, [pc, #64]	; (146b0 <tls_interface_setopt+0x124>)
   14670:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   14674:	b1b8      	cbz	r0, 146a6 <tls_interface_setopt+0x11a>
   14676:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   1467a:	462a      	mov	r2, r5
   1467c:	4639      	mov	r1, r7
   1467e:	6075      	str	r5, [r6, #4]
   14680:	e7df      	b.n	14642 <tls_interface_setopt+0xb6>
   14682:	f247 0301 	movw	r3, #28673	; 0x7001
   14686:	f44f 7280 	mov.w	r2, #256	; 0x100
   1468a:	4630      	mov	r0, r6
   1468c:	e9cd 7500 	strd	r7, r5, [sp]
   14690:	f006 f838 	bl	1a704 <ip_interface_socketoption_send>
   14694:	2800      	cmp	r0, #0
   14696:	d0b7      	beq.n	14608 <tls_interface_setopt+0x7c>
   14698:	e787      	b.n	145aa <tls_interface_setopt+0x1e>
   1469a:	2009      	movs	r0, #9
   1469c:	e785      	b.n	145aa <tls_interface_setopt+0x1e>
   1469e:	202a      	movs	r0, #42	; 0x2a
   146a0:	e783      	b.n	145aa <tls_interface_setopt+0x1e>
   146a2:	2016      	movs	r0, #22
   146a4:	e781      	b.n	145aa <tls_interface_setopt+0x1e>
   146a6:	200c      	movs	r0, #12
   146a8:	e77f      	b.n	145aa <tls_interface_setopt+0x1e>
   146aa:	bf00      	nop
   146ac:	2001820f 	.word	0x2001820f
   146b0:	2001555c 	.word	0x2001555c

000146b4 <tls_interface_getopt>:
   146b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   146b6:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   146ba:	4604      	mov	r4, r0
   146bc:	4617      	mov	r7, r2
   146be:	461d      	mov	r5, r3
   146c0:	9e08      	ldr	r6, [sp, #32]
   146c2:	d004      	beq.n	146ce <tls_interface_getopt+0x1a>
   146c4:	b003      	add	sp, #12
   146c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   146ca:	f006 b8f6 	b.w	1a8ba <ip_interface_getopt>
   146ce:	2b00      	cmp	r3, #0
   146d0:	d054      	beq.n	1477c <tls_interface_getopt+0xc8>
   146d2:	2e00      	cmp	r6, #0
   146d4:	d052      	beq.n	1477c <tls_interface_getopt+0xc8>
   146d6:	f7fe fcdd 	bl	13094 <interface_socket_from_handle_get>
   146da:	4601      	mov	r1, r0
   146dc:	2800      	cmp	r0, #0
   146de:	d04f      	beq.n	14780 <tls_interface_getopt+0xcc>
   146e0:	1e7a      	subs	r2, r7, #1
   146e2:	2a05      	cmp	r2, #5
   146e4:	d84e      	bhi.n	14784 <tls_interface_getopt+0xd0>
   146e6:	e8df f002 	tbb	[pc, r2]
   146ea:	1b03      	.short	0x1b03
   146ec:	3f4d360f 	.word	0x3f4d360f
   146f0:	6833      	ldr	r3, [r6, #0]
   146f2:	2b04      	cmp	r3, #4
   146f4:	d148      	bne.n	14788 <tls_interface_getopt+0xd4>
   146f6:	2024      	movs	r0, #36	; 0x24
   146f8:	4344      	muls	r4, r0
   146fa:	4b24      	ldr	r3, [pc, #144]	; (1478c <tls_interface_getopt+0xd8>)
   146fc:	5d1b      	ldrb	r3, [r3, r4]
   146fe:	1e59      	subs	r1, r3, #1
   14700:	424b      	negs	r3, r1
   14702:	414b      	adcs	r3, r1
   14704:	602b      	str	r3, [r5, #0]
   14706:	e008      	b.n	1471a <tls_interface_getopt+0x66>
   14708:	6833      	ldr	r3, [r6, #0]
   1470a:	2b01      	cmp	r3, #1
   1470c:	d13c      	bne.n	14788 <tls_interface_getopt+0xd4>
   1470e:	2024      	movs	r0, #36	; 0x24
   14710:	491e      	ldr	r1, [pc, #120]	; (1478c <tls_interface_getopt+0xd8>)
   14712:	fb00 1404 	mla	r4, r0, r4, r1
   14716:	7863      	ldrb	r3, [r4, #1]
   14718:	702b      	strb	r3, [r5, #0]
   1471a:	2000      	movs	r0, #0
   1471c:	b003      	add	sp, #12
   1471e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14720:	2224      	movs	r2, #36	; 0x24
   14722:	491a      	ldr	r1, [pc, #104]	; (1478c <tls_interface_getopt+0xd8>)
   14724:	6833      	ldr	r3, [r6, #0]
   14726:	fb02 1204 	mla	r2, r2, r4, r1
   1472a:	78d0      	ldrb	r0, [r2, #3]
   1472c:	079a      	lsls	r2, r3, #30
   1472e:	bf14      	ite	ne
   14730:	2300      	movne	r3, #0
   14732:	089b      	lsreq	r3, r3, #2
   14734:	4283      	cmp	r3, r0
   14736:	bf28      	it	cs
   14738:	4603      	movcs	r3, r0
   1473a:	009a      	lsls	r2, r3, #2
   1473c:	b143      	cbz	r3, 14750 <tls_interface_getopt+0x9c>
   1473e:	2024      	movs	r0, #36	; 0x24
   14740:	fb00 1104 	mla	r1, r0, r4, r1
   14744:	6032      	str	r2, [r6, #0]
   14746:	4628      	mov	r0, r5
   14748:	3104      	adds	r1, #4
   1474a:	f007 f99f 	bl	1ba8c <memcpy>
   1474e:	e7e4      	b.n	1471a <tls_interface_getopt+0x66>
   14750:	b9d0      	cbnz	r0, 14788 <tls_interface_getopt+0xd4>
   14752:	6030      	str	r0, [r6, #0]
   14754:	e7e2      	b.n	1471c <tls_interface_getopt+0x68>
   14756:	6833      	ldr	r3, [r6, #0]
   14758:	2b04      	cmp	r3, #4
   1475a:	d115      	bne.n	14788 <tls_interface_getopt+0xd4>
   1475c:	2024      	movs	r0, #36	; 0x24
   1475e:	490b      	ldr	r1, [pc, #44]	; (1478c <tls_interface_getopt+0xd8>)
   14760:	fb00 1404 	mla	r4, r0, r4, r1
   14764:	78a3      	ldrb	r3, [r4, #2]
   14766:	e7cd      	b.n	14704 <tls_interface_getopt+0x50>
   14768:	f247 0301 	movw	r3, #28673	; 0x7001
   1476c:	f44f 7280 	mov.w	r2, #256	; 0x100
   14770:	4620      	mov	r0, r4
   14772:	e9cd 5600 	strd	r5, r6, [sp]
   14776:	f7fe ff4f 	bl	13618 <ip_interface_socketoption_get>
   1477a:	e7cf      	b.n	1471c <tls_interface_getopt+0x68>
   1477c:	200e      	movs	r0, #14
   1477e:	e7cd      	b.n	1471c <tls_interface_getopt+0x68>
   14780:	2009      	movs	r0, #9
   14782:	e7cb      	b.n	1471c <tls_interface_getopt+0x68>
   14784:	202a      	movs	r0, #42	; 0x2a
   14786:	e7c9      	b.n	1471c <tls_interface_getopt+0x68>
   14788:	2016      	movs	r0, #22
   1478a:	e7c7      	b.n	1471c <tls_interface_getopt+0x68>
   1478c:	2001820f 	.word	0x2001820f

00014790 <tls_rpc_ip_event_handler>:
   14790:	b570      	push	{r4, r5, r6, lr}
   14792:	460c      	mov	r4, r1
   14794:	f248 0181 	movw	r1, #32897	; 0x8081
   14798:	428b      	cmp	r3, r1
   1479a:	4606      	mov	r6, r0
   1479c:	d035      	beq.n	1480a <tls_rpc_ip_event_handler+0x7a>
   1479e:	f249 0182 	movw	r1, #36994	; 0x9082
   147a2:	428b      	cmp	r3, r1
   147a4:	d040      	beq.n	14828 <tls_rpc_ip_event_handler+0x98>
   147a6:	f248 0102 	movw	r1, #32770	; 0x8002
   147aa:	428b      	cmp	r3, r1
   147ac:	d161      	bne.n	14872 <tls_rpc_ip_event_handler+0xe2>
   147ae:	2c00      	cmp	r4, #0
   147b0:	d05f      	beq.n	14872 <tls_rpc_ip_event_handler+0xe2>
   147b2:	6963      	ldr	r3, [r4, #20]
   147b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   147b8:	d002      	beq.n	147c0 <tls_rpc_ip_event_handler+0x30>
   147ba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   147be:	d158      	bne.n	14872 <tls_rpc_ip_event_handler+0xe2>
   147c0:	6823      	ldr	r3, [r4, #0]
   147c2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   147c6:	6023      	str	r3, [r4, #0]
   147c8:	6955      	ldr	r5, [r2, #20]
   147ca:	2d00      	cmp	r5, #0
   147cc:	d14d      	bne.n	1486a <tls_rpc_ip_event_handler+0xda>
   147ce:	6823      	ldr	r3, [r4, #0]
   147d0:	0c1b      	lsrs	r3, r3, #16
   147d2:	041b      	lsls	r3, r3, #16
   147d4:	f043 0305 	orr.w	r3, r3, #5
   147d8:	6023      	str	r3, [r4, #0]
   147da:	6823      	ldr	r3, [r4, #0]
   147dc:	00db      	lsls	r3, r3, #3
   147de:	d401      	bmi.n	147e4 <tls_rpc_ip_event_handler+0x54>
   147e0:	2000      	movs	r0, #0
   147e2:	e020      	b.n	14826 <tls_rpc_ip_event_handler+0x96>
   147e4:	2324      	movs	r3, #36	; 0x24
   147e6:	4373      	muls	r3, r6
   147e8:	4a23      	ldr	r2, [pc, #140]	; (14878 <tls_rpc_ip_event_handler+0xe8>)
   147ea:	5cd3      	ldrb	r3, [r2, r3]
   147ec:	2b02      	cmp	r3, #2
   147ee:	d1f7      	bne.n	147e0 <tls_rpc_ip_event_handler+0x50>
   147f0:	4621      	mov	r1, r4
   147f2:	4630      	mov	r0, r6
   147f4:	f006 f8bf 	bl	1a976 <secure_client_socket>
   147f8:	2800      	cmp	r0, #0
   147fa:	d0f1      	beq.n	147e0 <tls_rpc_ip_event_handler+0x50>
   147fc:	2873      	cmp	r0, #115	; 0x73
   147fe:	d0ef      	beq.n	147e0 <tls_rpc_ip_event_handler+0x50>
   14800:	6060      	str	r0, [r4, #4]
   14802:	6823      	ldr	r3, [r4, #0]
   14804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   14808:	e02d      	b.n	14866 <tls_rpc_ip_event_handler+0xd6>
   1480a:	2c00      	cmp	r4, #0
   1480c:	d0e8      	beq.n	147e0 <tls_rpc_ip_event_handler+0x50>
   1480e:	6823      	ldr	r3, [r4, #0]
   14810:	b29b      	uxth	r3, r3
   14812:	2b0a      	cmp	r3, #10
   14814:	d1e4      	bne.n	147e0 <tls_rpc_ip_event_handler+0x50>
   14816:	6950      	ldr	r0, [r2, #20]
   14818:	bb40      	cbnz	r0, 1486c <tls_rpc_ip_event_handler+0xdc>
   1481a:	6823      	ldr	r3, [r4, #0]
   1481c:	0c1b      	lsrs	r3, r3, #16
   1481e:	041b      	lsls	r3, r3, #16
   14820:	f043 030b 	orr.w	r3, r3, #11
   14824:	6023      	str	r3, [r4, #0]
   14826:	bd70      	pop	{r4, r5, r6, pc}
   14828:	2c00      	cmp	r4, #0
   1482a:	d0d9      	beq.n	147e0 <tls_rpc_ip_event_handler+0x50>
   1482c:	6823      	ldr	r3, [r4, #0]
   1482e:	b29b      	uxth	r3, r3
   14830:	2b0b      	cmp	r3, #11
   14832:	d1d5      	bne.n	147e0 <tls_rpc_ip_event_handler+0x50>
   14834:	6915      	ldr	r5, [r2, #16]
   14836:	b9c5      	cbnz	r5, 1486a <tls_rpc_ip_event_handler+0xda>
   14838:	6823      	ldr	r3, [r4, #0]
   1483a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1483e:	6023      	str	r3, [r4, #0]
   14840:	f7ff fc34 	bl	140ac <hostname_free>
   14844:	6823      	ldr	r3, [r4, #0]
   14846:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1484a:	6023      	str	r3, [r4, #0]
   1484c:	6823      	ldr	r3, [r4, #0]
   1484e:	0c1b      	lsrs	r3, r3, #16
   14850:	041b      	lsls	r3, r3, #16
   14852:	f043 030c 	orr.w	r3, r3, #12
   14856:	6023      	str	r3, [r4, #0]
   14858:	6823      	ldr	r3, [r4, #0]
   1485a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1485e:	6023      	str	r3, [r4, #0]
   14860:	6823      	ldr	r3, [r4, #0]
   14862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   14866:	6023      	str	r3, [r4, #0]
   14868:	e7ba      	b.n	147e0 <tls_rpc_ip_event_handler+0x50>
   1486a:	4628      	mov	r0, r5
   1486c:	f7fe fcc6 	bl	131fc <rpc_error_to_nrf_errno>
   14870:	e7c6      	b.n	14800 <tls_rpc_ip_event_handler+0x70>
   14872:	2001      	movs	r0, #1
   14874:	e7d7      	b.n	14826 <tls_rpc_ip_event_handler+0x96>
   14876:	bf00      	nop
   14878:	2001820f 	.word	0x2001820f

0001487c <at_interface_init>:
   1487c:	2201      	movs	r2, #1
   1487e:	4b02      	ldr	r3, [pc, #8]	; (14888 <at_interface_init+0xc>)
   14880:	2000      	movs	r0, #0
   14882:	701a      	strb	r2, [r3, #0]
   14884:	4770      	bx	lr
   14886:	bf00      	nop
   14888:	20018353 	.word	0x20018353

0001488c <at_interface_open>:
   1488c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14890:	f04f 0800 	mov.w	r8, #0
   14894:	4b19      	ldr	r3, [pc, #100]	; (148fc <at_interface_open+0x70>)
   14896:	4607      	mov	r7, r0
   14898:	781b      	ldrb	r3, [r3, #0]
   1489a:	460d      	mov	r5, r1
   1489c:	4616      	mov	r6, r2
   1489e:	f8cd 800c 	str.w	r8, [sp, #12]
   148a2:	b943      	cbnz	r3, 148b6 <at_interface_open+0x2a>
   148a4:	2070      	movs	r0, #112	; 0x70
   148a6:	f7fc fd13 	bl	112d0 <nrf_modem_os_errno_set>
   148aa:	f04f 34ff 	mov.w	r4, #4294967295
   148ae:	4620      	mov	r0, r4
   148b0:	b004      	add	sp, #16
   148b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148b6:	2902      	cmp	r1, #2
   148b8:	d001      	beq.n	148be <at_interface_open+0x32>
   148ba:	2029      	movs	r0, #41	; 0x29
   148bc:	e7f3      	b.n	148a6 <at_interface_open+0x1a>
   148be:	4a10      	ldr	r2, [pc, #64]	; (14900 <at_interface_open+0x74>)
   148c0:	a803      	add	r0, sp, #12
   148c2:	f7fe fb5d 	bl	12f80 <interface_socket_allocate>
   148c6:	9b03      	ldr	r3, [sp, #12]
   148c8:	4604      	mov	r4, r0
   148ca:	2b00      	cmp	r3, #0
   148cc:	d0ef      	beq.n	148ae <at_interface_open+0x22>
   148ce:	e9c3 7503 	strd	r7, r5, [r3, #12]
   148d2:	615e      	str	r6, [r3, #20]
   148d4:	4642      	mov	r2, r8
   148d6:	9500      	str	r5, [sp, #0]
   148d8:	2305      	movs	r3, #5
   148da:	4641      	mov	r1, r8
   148dc:	f006 f8a9 	bl	1aa32 <send_message>
   148e0:	4605      	mov	r5, r0
   148e2:	b120      	cbz	r0, 148ee <at_interface_open+0x62>
   148e4:	4620      	mov	r0, r4
   148e6:	f7fe fb71 	bl	12fcc <interface_socket_free>
   148ea:	4628      	mov	r0, r5
   148ec:	e7db      	b.n	148a6 <at_interface_open+0x1a>
   148ee:	9a03      	ldr	r2, [sp, #12]
   148f0:	6813      	ldr	r3, [r2, #0]
   148f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   148f6:	6013      	str	r3, [r2, #0]
   148f8:	e7d9      	b.n	148ae <at_interface_open+0x22>
   148fa:	bf00      	nop
   148fc:	20018353 	.word	0x20018353
   14900:	0001aa0d 	.word	0x0001aa0d

00014904 <rpc_dfu_message_send>:
   14904:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14906:	4605      	mov	r5, r0
   14908:	460e      	mov	r6, r1
   1490a:	4668      	mov	r0, sp
   1490c:	4611      	mov	r1, r2
   1490e:	4614      	mov	r4, r2
   14910:	f005 fb39 	bl	19f86 <rpc_dfu_client_request_alloc>
   14914:	b138      	cbz	r0, 14926 <rpc_dfu_message_send+0x22>
   14916:	200c      	movs	r0, #12
   14918:	f7fc fcda 	bl	112d0 <nrf_modem_os_errno_set>
   1491c:	f04f 34ff 	mov.w	r4, #4294967295
   14920:	4620      	mov	r0, r4
   14922:	b002      	add	sp, #8
   14924:	bd70      	pop	{r4, r5, r6, pc}
   14926:	b12c      	cbz	r4, 14934 <rpc_dfu_message_send+0x30>
   14928:	9b00      	ldr	r3, [sp, #0]
   1492a:	4622      	mov	r2, r4
   1492c:	4631      	mov	r1, r6
   1492e:	6818      	ldr	r0, [r3, #0]
   14930:	f007 f8ac 	bl	1ba8c <memcpy>
   14934:	4a1c      	ldr	r2, [pc, #112]	; (149a8 <rpc_dfu_message_send+0xa4>)
   14936:	9800      	ldr	r0, [sp, #0]
   14938:	8813      	ldrh	r3, [r2, #0]
   1493a:	2d03      	cmp	r5, #3
   1493c:	f103 0301 	add.w	r3, r3, #1
   14940:	b29b      	uxth	r3, r3
   14942:	8013      	strh	r3, [r2, #0]
   14944:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   14948:	60c3      	str	r3, [r0, #12]
   1494a:	f04f 0300 	mov.w	r3, #0
   1494e:	bf0a      	itet	eq
   14950:	4a16      	ldreq	r2, [pc, #88]	; (149ac <rpc_dfu_message_send+0xa8>)
   14952:	2204      	movne	r2, #4
   14954:	6812      	ldreq	r2, [r2, #0]
   14956:	7243      	strb	r3, [r0, #9]
   14958:	bf04      	itt	eq
   1495a:	6102      	streq	r2, [r0, #16]
   1495c:	2208      	moveq	r2, #8
   1495e:	7283      	strb	r3, [r0, #10]
   14960:	72c3      	strb	r3, [r0, #11]
   14962:	2300      	movs	r3, #0
   14964:	4e12      	ldr	r6, [pc, #72]	; (149b0 <rpc_dfu_message_send+0xac>)
   14966:	6044      	str	r4, [r0, #4]
   14968:	4629      	mov	r1, r5
   1496a:	7202      	strb	r2, [r0, #8]
   1496c:	6033      	str	r3, [r6, #0]
   1496e:	f005 fb1c 	bl	19faa <rpc_dfu_client_request_send>
   14972:	4604      	mov	r4, r0
   14974:	b140      	cbz	r0, 14988 <rpc_dfu_message_send+0x84>
   14976:	9b00      	ldr	r3, [sp, #0]
   14978:	6818      	ldr	r0, [r3, #0]
   1497a:	b108      	cbz	r0, 14980 <rpc_dfu_message_send+0x7c>
   1497c:	f005 fb2f 	bl	19fde <rpc_dfu_client_data_free>
   14980:	9800      	ldr	r0, [sp, #0]
   14982:	f005 fb24 	bl	19fce <rpc_dfu_client_message_free>
   14986:	e7c6      	b.n	14916 <rpc_dfu_message_send+0x12>
   14988:	f04f 33ff 	mov.w	r3, #4294967295
   1498c:	4d09      	ldr	r5, [pc, #36]	; (149b4 <rpc_dfu_message_send+0xb0>)
   1498e:	9301      	str	r3, [sp, #4]
   14990:	6833      	ldr	r3, [r6, #0]
   14992:	2b00      	cmp	r3, #0
   14994:	d1c4      	bne.n	14920 <rpc_dfu_message_send+0x1c>
   14996:	4628      	mov	r0, r5
   14998:	a901      	add	r1, sp, #4
   1499a:	f7fc fbe1 	bl	11160 <nrf_modem_os_timedwait>
   1499e:	2800      	cmp	r0, #0
   149a0:	d0f6      	beq.n	14990 <rpc_dfu_message_send+0x8c>
   149a2:	203c      	movs	r0, #60	; 0x3c
   149a4:	e7b8      	b.n	14918 <rpc_dfu_message_send+0x14>
   149a6:	bf00      	nop
   149a8:	20015eae 	.word	0x20015eae
   149ac:	200155a4 	.word	0x200155a4
   149b0:	200155a8 	.word	0x200155a8
   149b4:	2001559c 	.word	0x2001559c

000149b8 <rpc_dfu_event_handler>:
   149b8:	b508      	push	{r3, lr}
   149ba:	4b08      	ldr	r3, [pc, #32]	; (149dc <rpc_dfu_event_handler+0x24>)
   149bc:	68c2      	ldr	r2, [r0, #12]
   149be:	881b      	ldrh	r3, [r3, #0]
   149c0:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   149c4:	d103      	bne.n	149ce <rpc_dfu_event_handler+0x16>
   149c6:	4b06      	ldr	r3, [pc, #24]	; (149e0 <rpc_dfu_event_handler+0x28>)
   149c8:	6018      	str	r0, [r3, #0]
   149ca:	2001      	movs	r0, #1
   149cc:	bd08      	pop	{r3, pc}
   149ce:	6800      	ldr	r0, [r0, #0]
   149d0:	2800      	cmp	r0, #0
   149d2:	d0fb      	beq.n	149cc <rpc_dfu_event_handler+0x14>
   149d4:	f005 fb03 	bl	19fde <rpc_dfu_client_data_free>
   149d8:	2000      	movs	r0, #0
   149da:	e7f7      	b.n	149cc <rpc_dfu_event_handler+0x14>
   149dc:	20015eae 	.word	0x20015eae
   149e0:	200155a8 	.word	0x200155a8

000149e4 <mfu_interface_init>:
   149e4:	2000      	movs	r0, #0
   149e6:	2201      	movs	r2, #1
   149e8:	4b04      	ldr	r3, [pc, #16]	; (149fc <mfu_interface_init+0x18>)
   149ea:	8018      	strh	r0, [r3, #0]
   149ec:	4b04      	ldr	r3, [pc, #16]	; (14a00 <mfu_interface_init+0x1c>)
   149ee:	6018      	str	r0, [r3, #0]
   149f0:	4b04      	ldr	r3, [pc, #16]	; (14a04 <mfu_interface_init+0x20>)
   149f2:	6018      	str	r0, [r3, #0]
   149f4:	4b04      	ldr	r3, [pc, #16]	; (14a08 <mfu_interface_init+0x24>)
   149f6:	601a      	str	r2, [r3, #0]
   149f8:	4770      	bx	lr
   149fa:	bf00      	nop
   149fc:	20015eae 	.word	0x20015eae
   14a00:	200155a8 	.word	0x200155a8
   14a04:	200155a4 	.word	0x200155a4
   14a08:	2001559c 	.word	0x2001559c

00014a0c <mfu_interface_open>:
   14a0c:	b508      	push	{r3, lr}
   14a0e:	4b07      	ldr	r3, [pc, #28]	; (14a2c <mfu_interface_open+0x20>)
   14a10:	681a      	ldr	r2, [r3, #0]
   14a12:	2a01      	cmp	r2, #1
   14a14:	d005      	beq.n	14a22 <mfu_interface_open+0x16>
   14a16:	2001      	movs	r0, #1
   14a18:	f7fc fc5a 	bl	112d0 <nrf_modem_os_errno_set>
   14a1c:	f04f 30ff 	mov.w	r0, #4294967295
   14a20:	bd08      	pop	{r3, pc}
   14a22:	2202      	movs	r2, #2
   14a24:	4802      	ldr	r0, [pc, #8]	; (14a30 <mfu_interface_open+0x24>)
   14a26:	601a      	str	r2, [r3, #0]
   14a28:	e7fa      	b.n	14a20 <mfu_interface_open+0x14>
   14a2a:	bf00      	nop
   14a2c:	2001559c 	.word	0x2001559c
   14a30:	49765432 	.word	0x49765432

00014a34 <mfu_interface_close>:
   14a34:	b538      	push	{r3, r4, r5, lr}
   14a36:	4c11      	ldr	r4, [pc, #68]	; (14a7c <mfu_interface_close+0x48>)
   14a38:	6822      	ldr	r2, [r4, #0]
   14a3a:	1e91      	subs	r1, r2, #2
   14a3c:	2901      	cmp	r1, #1
   14a3e:	d905      	bls.n	14a4c <mfu_interface_close+0x18>
   14a40:	2001      	movs	r0, #1
   14a42:	f7fc fc45 	bl	112d0 <nrf_modem_os_errno_set>
   14a46:	f04f 30ff 	mov.w	r0, #4294967295
   14a4a:	e015      	b.n	14a78 <mfu_interface_close+0x44>
   14a4c:	2a03      	cmp	r2, #3
   14a4e:	d110      	bne.n	14a72 <mfu_interface_close+0x3e>
   14a50:	2200      	movs	r2, #0
   14a52:	2006      	movs	r0, #6
   14a54:	4611      	mov	r1, r2
   14a56:	f7ff ff55 	bl	14904 <rpc_dfu_message_send>
   14a5a:	2800      	cmp	r0, #0
   14a5c:	d1f3      	bne.n	14a46 <mfu_interface_close+0x12>
   14a5e:	4b08      	ldr	r3, [pc, #32]	; (14a80 <mfu_interface_close+0x4c>)
   14a60:	6818      	ldr	r0, [r3, #0]
   14a62:	6905      	ldr	r5, [r0, #16]
   14a64:	f005 fab3 	bl	19fce <rpc_dfu_client_message_free>
   14a68:	b11d      	cbz	r5, 14a72 <mfu_interface_close+0x3e>
   14a6a:	4b06      	ldr	r3, [pc, #24]	; (14a84 <mfu_interface_close+0x50>)
   14a6c:	2008      	movs	r0, #8
   14a6e:	601d      	str	r5, [r3, #0]
   14a70:	e7e7      	b.n	14a42 <mfu_interface_close+0xe>
   14a72:	2301      	movs	r3, #1
   14a74:	2000      	movs	r0, #0
   14a76:	6023      	str	r3, [r4, #0]
   14a78:	bd38      	pop	{r3, r4, r5, pc}
   14a7a:	bf00      	nop
   14a7c:	2001559c 	.word	0x2001559c
   14a80:	200155a8 	.word	0x200155a8
   14a84:	200155a0 	.word	0x200155a0

00014a88 <mfu_interface_sendto>:
   14a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a8a:	4e1f      	ldr	r6, [pc, #124]	; (14b08 <mfu_interface_sendto+0x80>)
   14a8c:	460d      	mov	r5, r1
   14a8e:	6831      	ldr	r1, [r6, #0]
   14a90:	4614      	mov	r4, r2
   14a92:	1e88      	subs	r0, r1, #2
   14a94:	2801      	cmp	r0, #1
   14a96:	9a06      	ldr	r2, [sp, #24]
   14a98:	d903      	bls.n	14aa2 <mfu_interface_sendto+0x1a>
   14a9a:	2001      	movs	r0, #1
   14a9c:	f7fc fc18 	bl	112d0 <nrf_modem_os_errno_set>
   14aa0:	e010      	b.n	14ac4 <mfu_interface_sendto+0x3c>
   14aa2:	b105      	cbz	r5, 14aa6 <mfu_interface_sendto+0x1e>
   14aa4:	b90c      	cbnz	r4, 14aaa <mfu_interface_sendto+0x22>
   14aa6:	2016      	movs	r0, #22
   14aa8:	e7f8      	b.n	14a9c <mfu_interface_sendto+0x14>
   14aaa:	b10b      	cbz	r3, 14ab0 <mfu_interface_sendto+0x28>
   14aac:	202d      	movs	r0, #45	; 0x2d
   14aae:	e7f5      	b.n	14a9c <mfu_interface_sendto+0x14>
   14ab0:	b10a      	cbz	r2, 14ab6 <mfu_interface_sendto+0x2e>
   14ab2:	2038      	movs	r0, #56	; 0x38
   14ab4:	e7f2      	b.n	14a9c <mfu_interface_sendto+0x14>
   14ab6:	2902      	cmp	r1, #2
   14ab8:	d114      	bne.n	14ae4 <mfu_interface_sendto+0x5c>
   14aba:	4611      	mov	r1, r2
   14abc:	2003      	movs	r0, #3
   14abe:	f7ff ff21 	bl	14904 <rpc_dfu_message_send>
   14ac2:	b118      	cbz	r0, 14acc <mfu_interface_sendto+0x44>
   14ac4:	f04f 34ff 	mov.w	r4, #4294967295
   14ac8:	4620      	mov	r0, r4
   14aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14acc:	4b0f      	ldr	r3, [pc, #60]	; (14b0c <mfu_interface_sendto+0x84>)
   14ace:	6818      	ldr	r0, [r3, #0]
   14ad0:	6907      	ldr	r7, [r0, #16]
   14ad2:	f005 fa7c 	bl	19fce <rpc_dfu_client_message_free>
   14ad6:	b11f      	cbz	r7, 14ae0 <mfu_interface_sendto+0x58>
   14ad8:	4b0d      	ldr	r3, [pc, #52]	; (14b10 <mfu_interface_sendto+0x88>)
   14ada:	601f      	str	r7, [r3, #0]
   14adc:	2008      	movs	r0, #8
   14ade:	e7dd      	b.n	14a9c <mfu_interface_sendto+0x14>
   14ae0:	2303      	movs	r3, #3
   14ae2:	6033      	str	r3, [r6, #0]
   14ae4:	4622      	mov	r2, r4
   14ae6:	4629      	mov	r1, r5
   14ae8:	2004      	movs	r0, #4
   14aea:	f7ff ff0b 	bl	14904 <rpc_dfu_message_send>
   14aee:	2800      	cmp	r0, #0
   14af0:	d1e8      	bne.n	14ac4 <mfu_interface_sendto+0x3c>
   14af2:	4b06      	ldr	r3, [pc, #24]	; (14b0c <mfu_interface_sendto+0x84>)
   14af4:	6818      	ldr	r0, [r3, #0]
   14af6:	6905      	ldr	r5, [r0, #16]
   14af8:	f005 fa69 	bl	19fce <rpc_dfu_client_message_free>
   14afc:	2d00      	cmp	r5, #0
   14afe:	d0e3      	beq.n	14ac8 <mfu_interface_sendto+0x40>
   14b00:	4b03      	ldr	r3, [pc, #12]	; (14b10 <mfu_interface_sendto+0x88>)
   14b02:	601d      	str	r5, [r3, #0]
   14b04:	e7ea      	b.n	14adc <mfu_interface_sendto+0x54>
   14b06:	bf00      	nop
   14b08:	2001559c 	.word	0x2001559c
   14b0c:	200155a8 	.word	0x200155a8
   14b10:	200155a0 	.word	0x200155a0

00014b14 <mfu_interface_setopt>:
   14b14:	481d      	ldr	r0, [pc, #116]	; (14b8c <mfu_interface_setopt+0x78>)
   14b16:	b510      	push	{r4, lr}
   14b18:	6800      	ldr	r0, [r0, #0]
   14b1a:	3802      	subs	r0, #2
   14b1c:	2801      	cmp	r0, #1
   14b1e:	d905      	bls.n	14b2c <mfu_interface_setopt+0x18>
   14b20:	2001      	movs	r0, #1
   14b22:	f7fc fbd5 	bl	112d0 <nrf_modem_os_errno_set>
   14b26:	f04f 30ff 	mov.w	r0, #4294967295
   14b2a:	e026      	b.n	14b7a <mfu_interface_setopt+0x66>
   14b2c:	f240 2003 	movw	r0, #515	; 0x203
   14b30:	4281      	cmp	r1, r0
   14b32:	d001      	beq.n	14b38 <mfu_interface_setopt+0x24>
   14b34:	2016      	movs	r0, #22
   14b36:	e7f4      	b.n	14b22 <mfu_interface_setopt+0xe>
   14b38:	3a04      	subs	r2, #4
   14b3a:	2a03      	cmp	r2, #3
   14b3c:	d81e      	bhi.n	14b7c <mfu_interface_setopt+0x68>
   14b3e:	e8df f002 	tbb	[pc, r2]
   14b42:	021f      	.short	0x021f
   14b44:	1321      	.short	0x1321
   14b46:	2007      	movs	r0, #7
   14b48:	2200      	movs	r2, #0
   14b4a:	4611      	mov	r1, r2
   14b4c:	f7ff feda 	bl	14904 <rpc_dfu_message_send>
   14b50:	2800      	cmp	r0, #0
   14b52:	d1e8      	bne.n	14b26 <mfu_interface_setopt+0x12>
   14b54:	4b0e      	ldr	r3, [pc, #56]	; (14b90 <mfu_interface_setopt+0x7c>)
   14b56:	6818      	ldr	r0, [r3, #0]
   14b58:	6904      	ldr	r4, [r0, #16]
   14b5a:	f005 fa38 	bl	19fce <rpc_dfu_client_message_free>
   14b5e:	b19c      	cbz	r4, 14b88 <mfu_interface_setopt+0x74>
   14b60:	4b0c      	ldr	r3, [pc, #48]	; (14b94 <mfu_interface_setopt+0x80>)
   14b62:	2008      	movs	r0, #8
   14b64:	601c      	str	r4, [r3, #0]
   14b66:	e7dc      	b.n	14b22 <mfu_interface_setopt+0xe>
   14b68:	2b00      	cmp	r3, #0
   14b6a:	d0e3      	beq.n	14b34 <mfu_interface_setopt+0x20>
   14b6c:	9a02      	ldr	r2, [sp, #8]
   14b6e:	2a04      	cmp	r2, #4
   14b70:	d1e0      	bne.n	14b34 <mfu_interface_setopt+0x20>
   14b72:	2000      	movs	r0, #0
   14b74:	681a      	ldr	r2, [r3, #0]
   14b76:	4b08      	ldr	r3, [pc, #32]	; (14b98 <mfu_interface_setopt+0x84>)
   14b78:	601a      	str	r2, [r3, #0]
   14b7a:	bd10      	pop	{r4, pc}
   14b7c:	202a      	movs	r0, #42	; 0x2a
   14b7e:	e7d0      	b.n	14b22 <mfu_interface_setopt+0xe>
   14b80:	2005      	movs	r0, #5
   14b82:	e7e1      	b.n	14b48 <mfu_interface_setopt+0x34>
   14b84:	2008      	movs	r0, #8
   14b86:	e7df      	b.n	14b48 <mfu_interface_setopt+0x34>
   14b88:	4620      	mov	r0, r4
   14b8a:	e7f6      	b.n	14b7a <mfu_interface_setopt+0x66>
   14b8c:	2001559c 	.word	0x2001559c
   14b90:	200155a8 	.word	0x200155a8
   14b94:	200155a0 	.word	0x200155a0
   14b98:	200155a4 	.word	0x200155a4

00014b9c <mfu_interface_getopt>:
   14b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14b9e:	461e      	mov	r6, r3
   14ba0:	f240 2303 	movw	r3, #515	; 0x203
   14ba4:	4299      	cmp	r1, r3
   14ba6:	9d06      	ldr	r5, [sp, #24]
   14ba8:	d101      	bne.n	14bae <mfu_interface_getopt+0x12>
   14baa:	b106      	cbz	r6, 14bae <mfu_interface_getopt+0x12>
   14bac:	b92d      	cbnz	r5, 14bba <mfu_interface_getopt+0x1e>
   14bae:	2016      	movs	r0, #22
   14bb0:	f7fc fb8e 	bl	112d0 <nrf_modem_os_errno_set>
   14bb4:	f04f 30ff 	mov.w	r0, #4294967295
   14bb8:	e019      	b.n	14bee <mfu_interface_getopt+0x52>
   14bba:	4b22      	ldr	r3, [pc, #136]	; (14c44 <mfu_interface_getopt+0xa8>)
   14bbc:	681b      	ldr	r3, [r3, #0]
   14bbe:	3b02      	subs	r3, #2
   14bc0:	2b01      	cmp	r3, #1
   14bc2:	d901      	bls.n	14bc8 <mfu_interface_getopt+0x2c>
   14bc4:	2001      	movs	r0, #1
   14bc6:	e7f3      	b.n	14bb0 <mfu_interface_getopt+0x14>
   14bc8:	2a07      	cmp	r2, #7
   14bca:	d02b      	beq.n	14c24 <mfu_interface_getopt+0x88>
   14bcc:	dc05      	bgt.n	14bda <mfu_interface_getopt+0x3e>
   14bce:	2a01      	cmp	r2, #1
   14bd0:	d00e      	beq.n	14bf0 <mfu_interface_getopt+0x54>
   14bd2:	2a02      	cmp	r2, #2
   14bd4:	d023      	beq.n	14c1e <mfu_interface_getopt+0x82>
   14bd6:	202a      	movs	r0, #42	; 0x2a
   14bd8:	e7ea      	b.n	14bb0 <mfu_interface_getopt+0x14>
   14bda:	2a14      	cmp	r2, #20
   14bdc:	d1fb      	bne.n	14bd6 <mfu_interface_getopt+0x3a>
   14bde:	682b      	ldr	r3, [r5, #0]
   14be0:	2b04      	cmp	r3, #4
   14be2:	d1e4      	bne.n	14bae <mfu_interface_getopt+0x12>
   14be4:	2000      	movs	r0, #0
   14be6:	4b18      	ldr	r3, [pc, #96]	; (14c48 <mfu_interface_getopt+0xac>)
   14be8:	681a      	ldr	r2, [r3, #0]
   14bea:	6018      	str	r0, [r3, #0]
   14bec:	6032      	str	r2, [r6, #0]
   14bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14bf0:	682b      	ldr	r3, [r5, #0]
   14bf2:	2b24      	cmp	r3, #36	; 0x24
   14bf4:	d1db      	bne.n	14bae <mfu_interface_getopt+0x12>
   14bf6:	4610      	mov	r0, r2
   14bf8:	2200      	movs	r2, #0
   14bfa:	4611      	mov	r1, r2
   14bfc:	f7ff fe82 	bl	14904 <rpc_dfu_message_send>
   14c00:	2800      	cmp	r0, #0
   14c02:	d1d7      	bne.n	14bb4 <mfu_interface_getopt+0x18>
   14c04:	4f11      	ldr	r7, [pc, #68]	; (14c4c <mfu_interface_getopt+0xb0>)
   14c06:	6839      	ldr	r1, [r7, #0]
   14c08:	690c      	ldr	r4, [r1, #16]
   14c0a:	b184      	cbz	r4, 14c2e <mfu_interface_getopt+0x92>
   14c0c:	4b0e      	ldr	r3, [pc, #56]	; (14c48 <mfu_interface_getopt+0xac>)
   14c0e:	2008      	movs	r0, #8
   14c10:	601c      	str	r4, [r3, #0]
   14c12:	f7fc fb5d 	bl	112d0 <nrf_modem_os_errno_set>
   14c16:	6838      	ldr	r0, [r7, #0]
   14c18:	f005 f9d9 	bl	19fce <rpc_dfu_client_message_free>
   14c1c:	e7ca      	b.n	14bb4 <mfu_interface_getopt+0x18>
   14c1e:	682b      	ldr	r3, [r5, #0]
   14c20:	2b04      	cmp	r3, #4
   14c22:	e7e7      	b.n	14bf4 <mfu_interface_getopt+0x58>
   14c24:	682b      	ldr	r3, [r5, #0]
   14c26:	2b04      	cmp	r3, #4
   14c28:	d1c1      	bne.n	14bae <mfu_interface_getopt+0x12>
   14c2a:	2009      	movs	r0, #9
   14c2c:	e7e4      	b.n	14bf8 <mfu_interface_getopt+0x5c>
   14c2e:	682a      	ldr	r2, [r5, #0]
   14c30:	3114      	adds	r1, #20
   14c32:	4630      	mov	r0, r6
   14c34:	f006 ff2a 	bl	1ba8c <memcpy>
   14c38:	6838      	ldr	r0, [r7, #0]
   14c3a:	f005 f9c8 	bl	19fce <rpc_dfu_client_message_free>
   14c3e:	4620      	mov	r0, r4
   14c40:	e7d5      	b.n	14bee <mfu_interface_getopt+0x52>
   14c42:	bf00      	nop
   14c44:	2001559c 	.word	0x2001559c
   14c48:	200155a0 	.word	0x200155a0
   14c4c:	200155a8 	.word	0x200155a8

00014c50 <send_message>:
   14c50:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c52:	b085      	sub	sp, #20
   14c54:	4606      	mov	r6, r0
   14c56:	460f      	mov	r7, r1
   14c58:	a803      	add	r0, sp, #12
   14c5a:	4611      	mov	r1, r2
   14c5c:	9201      	str	r2, [sp, #4]
   14c5e:	f005 f9ca 	bl	19ff6 <rpc_gnss_client_request_alloc>
   14c62:	9b03      	ldr	r3, [sp, #12]
   14c64:	4604      	mov	r4, r0
   14c66:	b958      	cbnz	r0, 14c80 <send_message+0x30>
   14c68:	9a01      	ldr	r2, [sp, #4]
   14c6a:	b98b      	cbnz	r3, 14c90 <send_message+0x40>
   14c6c:	9803      	ldr	r0, [sp, #12]
   14c6e:	f005 f9e8 	bl	1a042 <rpc_gnss_client_message_free>
   14c72:	2023      	movs	r0, #35	; 0x23
   14c74:	f7fc fb2c 	bl	112d0 <nrf_modem_os_errno_set>
   14c78:	f04f 30ff 	mov.w	r0, #4294967295
   14c7c:	b005      	add	sp, #20
   14c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14c80:	2b00      	cmp	r3, #0
   14c82:	d0f3      	beq.n	14c6c <send_message+0x1c>
   14c84:	6818      	ldr	r0, [r3, #0]
   14c86:	2800      	cmp	r0, #0
   14c88:	d0f0      	beq.n	14c6c <send_message+0x1c>
   14c8a:	f005 f9e2 	bl	1a052 <rpc_gnss_client_data_free>
   14c8e:	e7ed      	b.n	14c6c <send_message+0x1c>
   14c90:	490f      	ldr	r1, [pc, #60]	; (14cd0 <send_message+0x80>)
   14c92:	880d      	ldrh	r5, [r1, #0]
   14c94:	3501      	adds	r5, #1
   14c96:	b2ad      	uxth	r5, r5
   14c98:	800d      	strh	r5, [r1, #0]
   14c9a:	2143      	movs	r1, #67	; 0x43
   14c9c:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
   14ca0:	603d      	str	r5, [r7, #0]
   14ca2:	7319      	strb	r1, [r3, #12]
   14ca4:	2154      	movs	r1, #84	; 0x54
   14ca6:	7359      	strb	r1, [r3, #13]
   14ca8:	2176      	movs	r1, #118	; 0x76
   14caa:	7399      	strb	r1, [r3, #14]
   14cac:	2149      	movs	r1, #73	; 0x49
   14cae:	605a      	str	r2, [r3, #4]
   14cb0:	7218      	strb	r0, [r3, #8]
   14cb2:	7258      	strb	r0, [r3, #9]
   14cb4:	7298      	strb	r0, [r3, #10]
   14cb6:	72d8      	strb	r0, [r3, #11]
   14cb8:	73d9      	strb	r1, [r3, #15]
   14cba:	6818      	ldr	r0, [r3, #0]
   14cbc:	4639      	mov	r1, r7
   14cbe:	f006 fee5 	bl	1ba8c <memcpy>
   14cc2:	4b04      	ldr	r3, [pc, #16]	; (14cd4 <send_message+0x84>)
   14cc4:	4631      	mov	r1, r6
   14cc6:	9803      	ldr	r0, [sp, #12]
   14cc8:	601c      	str	r4, [r3, #0]
   14cca:	f005 f9a6 	bl	1a01a <rpc_gnss_client_request_send>
   14cce:	e7d5      	b.n	14c7c <send_message+0x2c>
   14cd0:	20015eb0 	.word	0x20015eb0
   14cd4:	200155b0 	.word	0x200155b0

00014cd8 <rpc_gnss_event_handler>:
   14cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14cda:	4b5b      	ldr	r3, [pc, #364]	; (14e48 <rpc_gnss_event_handler+0x170>)
   14cdc:	4605      	mov	r5, r0
   14cde:	6800      	ldr	r0, [r0, #0]
   14ce0:	881b      	ldrh	r3, [r3, #0]
   14ce2:	6802      	ldr	r2, [r0, #0]
   14ce4:	460c      	mov	r4, r1
   14ce6:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   14cea:	b085      	sub	sp, #20
   14cec:	d134      	bne.n	14d58 <rpc_gnss_event_handler+0x80>
   14cee:	4b57      	ldr	r3, [pc, #348]	; (14e4c <rpc_gnss_event_handler+0x174>)
   14cf0:	4e57      	ldr	r6, [pc, #348]	; (14e50 <rpc_gnss_event_handler+0x178>)
   14cf2:	681a      	ldr	r2, [r3, #0]
   14cf4:	6030      	str	r0, [r6, #0]
   14cf6:	01d2      	lsls	r2, r2, #7
   14cf8:	d50d      	bpl.n	14d16 <rpc_gnss_event_handler+0x3e>
   14cfa:	f242 1202 	movw	r2, #8450	; 0x2102
   14cfe:	4291      	cmp	r1, r2
   14d00:	d109      	bne.n	14d16 <rpc_gnss_event_handler+0x3e>
   14d02:	6842      	ldr	r2, [r0, #4]
   14d04:	b91a      	cbnz	r2, 14d0e <rpc_gnss_event_handler+0x36>
   14d06:	681a      	ldr	r2, [r3, #0]
   14d08:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   14d0c:	601a      	str	r2, [r3, #0]
   14d0e:	681a      	ldr	r2, [r3, #0]
   14d10:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   14d14:	601a      	str	r2, [r3, #0]
   14d16:	681a      	ldr	r2, [r3, #0]
   14d18:	0257      	lsls	r7, r2, #9
   14d1a:	d50d      	bpl.n	14d38 <rpc_gnss_event_handler+0x60>
   14d1c:	f242 1203 	movw	r2, #8451	; 0x2103
   14d20:	4294      	cmp	r4, r2
   14d22:	d109      	bne.n	14d38 <rpc_gnss_event_handler+0x60>
   14d24:	6842      	ldr	r2, [r0, #4]
   14d26:	b91a      	cbnz	r2, 14d30 <rpc_gnss_event_handler+0x58>
   14d28:	681a      	ldr	r2, [r3, #0]
   14d2a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   14d2e:	601a      	str	r2, [r3, #0]
   14d30:	681a      	ldr	r2, [r3, #0]
   14d32:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   14d36:	e04a      	b.n	14dce <rpc_gnss_event_handler+0xf6>
   14d38:	f242 0201 	movw	r2, #8193	; 0x2001
   14d3c:	4294      	cmp	r4, r2
   14d3e:	d03e      	beq.n	14dbe <rpc_gnss_event_handler+0xe6>
   14d40:	f242 0204 	movw	r2, #8196	; 0x2004
   14d44:	4294      	cmp	r4, r2
   14d46:	d044      	beq.n	14dd2 <rpc_gnss_event_handler+0xfa>
   14d48:	f242 0205 	movw	r2, #8197	; 0x2005
   14d4c:	4294      	cmp	r4, r2
   14d4e:	d05d      	beq.n	14e0c <rpc_gnss_event_handler+0x134>
   14d50:	f005 f97f 	bl	1a052 <rpc_gnss_client_data_free>
   14d54:	2300      	movs	r3, #0
   14d56:	6033      	str	r3, [r6, #0]
   14d58:	f504 433f 	add.w	r3, r4, #48896	; 0xbf00
   14d5c:	33ff      	adds	r3, #255	; 0xff
   14d5e:	b29b      	uxth	r3, r3
   14d60:	2b02      	cmp	r3, #2
   14d62:	d869      	bhi.n	14e38 <rpc_gnss_event_handler+0x160>
   14d64:	4f39      	ldr	r7, [pc, #228]	; (14e4c <rpc_gnss_event_handler+0x174>)
   14d66:	683b      	ldr	r3, [r7, #0]
   14d68:	075a      	lsls	r2, r3, #29
   14d6a:	d406      	bmi.n	14d7a <rpc_gnss_event_handler+0xa2>
   14d6c:	683b      	ldr	r3, [r7, #0]
   14d6e:	079b      	lsls	r3, r3, #30
   14d70:	d51c      	bpl.n	14dac <rpc_gnss_event_handler+0xd4>
   14d72:	f244 0303 	movw	r3, #16387	; 0x4003
   14d76:	429c      	cmp	r4, r3
   14d78:	d118      	bne.n	14dac <rpc_gnss_event_handler+0xd4>
   14d7a:	2002      	movs	r0, #2
   14d7c:	f7fc fc3c 	bl	115f8 <nrf_modem_os_alloc>
   14d80:	4606      	mov	r6, r0
   14d82:	6828      	ldr	r0, [r5, #0]
   14d84:	2e00      	cmp	r6, #0
   14d86:	d052      	beq.n	14e2e <rpc_gnss_event_handler+0x156>
   14d88:	8034      	strh	r4, [r6, #0]
   14d8a:	686b      	ldr	r3, [r5, #4]
   14d8c:	9000      	str	r0, [sp, #0]
   14d8e:	e9cd 3601 	strd	r3, r6, [sp, #4]
   14d92:	2302      	movs	r3, #2
   14d94:	9303      	str	r3, [sp, #12]
   14d96:	4b2f      	ldr	r3, [pc, #188]	; (14e54 <rpc_gnss_event_handler+0x17c>)
   14d98:	4669      	mov	r1, sp
   14d9a:	6818      	ldr	r0, [r3, #0]
   14d9c:	6803      	ldr	r3, [r0, #0]
   14d9e:	685b      	ldr	r3, [r3, #4]
   14da0:	4798      	blx	r3
   14da2:	3001      	adds	r0, #1
   14da4:	d14b      	bne.n	14e3e <rpc_gnss_event_handler+0x166>
   14da6:	4630      	mov	r0, r6
   14da8:	f7fc fc36 	bl	11618 <nrf_modem_os_free>
   14dac:	6828      	ldr	r0, [r5, #0]
   14dae:	2800      	cmp	r0, #0
   14db0:	d042      	beq.n	14e38 <rpc_gnss_event_handler+0x160>
   14db2:	f005 f94e 	bl	1a052 <rpc_gnss_client_data_free>
   14db6:	2200      	movs	r2, #0
   14db8:	4b25      	ldr	r3, [pc, #148]	; (14e50 <rpc_gnss_event_handler+0x178>)
   14dba:	601a      	str	r2, [r3, #0]
   14dbc:	e03c      	b.n	14e38 <rpc_gnss_event_handler+0x160>
   14dbe:	6842      	ldr	r2, [r0, #4]
   14dc0:	2a00      	cmp	r2, #0
   14dc2:	d1c5      	bne.n	14d50 <rpc_gnss_event_handler+0x78>
   14dc4:	681a      	ldr	r2, [r3, #0]
   14dc6:	0c12      	lsrs	r2, r2, #16
   14dc8:	0412      	lsls	r2, r2, #16
   14dca:	f042 0202 	orr.w	r2, r2, #2
   14dce:	601a      	str	r2, [r3, #0]
   14dd0:	e7be      	b.n	14d50 <rpc_gnss_event_handler+0x78>
   14dd2:	6842      	ldr	r2, [r0, #4]
   14dd4:	b9b2      	cbnz	r2, 14e04 <rpc_gnss_event_handler+0x12c>
   14dd6:	681a      	ldr	r2, [r3, #0]
   14dd8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   14ddc:	601a      	str	r2, [r3, #0]
   14dde:	681a      	ldr	r2, [r3, #0]
   14de0:	b292      	uxth	r2, r2
   14de2:	2a03      	cmp	r2, #3
   14de4:	681a      	ldr	r2, [r3, #0]
   14de6:	d104      	bne.n	14df2 <rpc_gnss_event_handler+0x11a>
   14de8:	0c12      	lsrs	r2, r2, #16
   14dea:	0412      	lsls	r2, r2, #16
   14dec:	f042 0204 	orr.w	r2, r2, #4
   14df0:	e79d      	b.n	14d2e <rpc_gnss_event_handler+0x56>
   14df2:	b292      	uxth	r2, r2
   14df4:	2a04      	cmp	r2, #4
   14df6:	d19b      	bne.n	14d30 <rpc_gnss_event_handler+0x58>
   14df8:	681a      	ldr	r2, [r3, #0]
   14dfa:	0c12      	lsrs	r2, r2, #16
   14dfc:	0412      	lsls	r2, r2, #16
   14dfe:	f042 0202 	orr.w	r2, r2, #2
   14e02:	e794      	b.n	14d2e <rpc_gnss_event_handler+0x56>
   14e04:	681a      	ldr	r2, [r3, #0]
   14e06:	b292      	uxth	r2, r2
   14e08:	2a03      	cmp	r2, #3
   14e0a:	e7f4      	b.n	14df6 <rpc_gnss_event_handler+0x11e>
   14e0c:	681a      	ldr	r2, [r3, #0]
   14e0e:	0291      	lsls	r1, r2, #10
   14e10:	d59e      	bpl.n	14d50 <rpc_gnss_event_handler+0x78>
   14e12:	6842      	ldr	r2, [r0, #4]
   14e14:	b93a      	cbnz	r2, 14e26 <rpc_gnss_event_handler+0x14e>
   14e16:	681a      	ldr	r2, [r3, #0]
   14e18:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   14e1c:	601a      	str	r2, [r3, #0]
   14e1e:	681a      	ldr	r2, [r3, #0]
   14e20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   14e24:	e7d3      	b.n	14dce <rpc_gnss_event_handler+0xf6>
   14e26:	681a      	ldr	r2, [r3, #0]
   14e28:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   14e2c:	e7cf      	b.n	14dce <rpc_gnss_event_handler+0xf6>
   14e2e:	b118      	cbz	r0, 14e38 <rpc_gnss_event_handler+0x160>
   14e30:	f005 f90f 	bl	1a052 <rpc_gnss_client_data_free>
   14e34:	4b06      	ldr	r3, [pc, #24]	; (14e50 <rpc_gnss_event_handler+0x178>)
   14e36:	601e      	str	r6, [r3, #0]
   14e38:	2000      	movs	r0, #0
   14e3a:	b005      	add	sp, #20
   14e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14e3e:	683b      	ldr	r3, [r7, #0]
   14e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   14e44:	603b      	str	r3, [r7, #0]
   14e46:	e7f7      	b.n	14e38 <rpc_gnss_event_handler+0x160>
   14e48:	20015eb0 	.word	0x20015eb0
   14e4c:	200155ac 	.word	0x200155ac
   14e50:	200155b0 	.word	0x200155b0
   14e54:	200155b4 	.word	0x200155b4

00014e58 <gnss_interface_write>:
   14e58:	b570      	push	{r4, r5, r6, lr}
   14e5a:	4604      	mov	r4, r0
   14e5c:	4a40      	ldr	r2, [pc, #256]	; (14f60 <gnss_interface_write+0x108>)
   14e5e:	b09e      	sub	sp, #120	; 0x78
   14e60:	4294      	cmp	r4, r2
   14e62:	4608      	mov	r0, r1
   14e64:	9d22      	ldr	r5, [sp, #136]	; 0x88
   14e66:	d005      	beq.n	14e74 <gnss_interface_write+0x1c>
   14e68:	2009      	movs	r0, #9
   14e6a:	f7fc fa31 	bl	112d0 <nrf_modem_os_errno_set>
   14e6e:	f04f 33ff 	mov.w	r3, #4294967295
   14e72:	e061      	b.n	14f38 <gnss_interface_write+0xe0>
   14e74:	b119      	cbz	r1, 14e7e <gnss_interface_write+0x26>
   14e76:	b115      	cbz	r5, 14e7e <gnss_interface_write+0x26>
   14e78:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   14e7a:	2a02      	cmp	r2, #2
   14e7c:	d001      	beq.n	14e82 <gnss_interface_write+0x2a>
   14e7e:	2016      	movs	r0, #22
   14e80:	e7f3      	b.n	14e6a <gnss_interface_write+0x12>
   14e82:	4a38      	ldr	r2, [pc, #224]	; (14f64 <gnss_interface_write+0x10c>)
   14e84:	6811      	ldr	r1, [r2, #0]
   14e86:	4614      	mov	r4, r2
   14e88:	b289      	uxth	r1, r1
   14e8a:	2902      	cmp	r1, #2
   14e8c:	d005      	beq.n	14e9a <gnss_interface_write+0x42>
   14e8e:	6812      	ldr	r2, [r2, #0]
   14e90:	b292      	uxth	r2, r2
   14e92:	2a04      	cmp	r2, #4
   14e94:	d001      	beq.n	14e9a <gnss_interface_write+0x42>
   14e96:	2039      	movs	r0, #57	; 0x39
   14e98:	e7e7      	b.n	14e6a <gnss_interface_write+0x12>
   14e9a:	b10b      	cbz	r3, 14ea0 <gnss_interface_write+0x48>
   14e9c:	202d      	movs	r0, #45	; 0x2d
   14e9e:	e7e4      	b.n	14e6a <gnss_interface_write+0x12>
   14ea0:	6822      	ldr	r2, [r4, #0]
   14ea2:	0396      	lsls	r6, r2, #14
   14ea4:	d548      	bpl.n	14f38 <gnss_interface_write+0xe0>
   14ea6:	6823      	ldr	r3, [r4, #0]
   14ea8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   14eac:	6023      	str	r3, [r4, #0]
   14eae:	6823      	ldr	r3, [r4, #0]
   14eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   14eb4:	6023      	str	r3, [r4, #0]
   14eb6:	882b      	ldrh	r3, [r5, #0]
   14eb8:	3b01      	subs	r3, #1
   14eba:	2b07      	cmp	r3, #7
   14ebc:	d8df      	bhi.n	14e7e <gnss_interface_write+0x26>
   14ebe:	e8df f003 	tbb	[pc, r3]
   14ec2:	1704      	.short	0x1704
   14ec4:	27231f1b 	.word	0x27231f1b
   14ec8:	2f2b      	.short	0x2f2b
   14eca:	a902      	add	r1, sp, #8
   14ecc:	f005 f8c8 	bl	1a060 <rpc_gnss_serialize_utc>
   14ed0:	2272      	movs	r2, #114	; 0x72
   14ed2:	f241 0005 	movw	r0, #4101	; 0x1005
   14ed6:	a901      	add	r1, sp, #4
   14ed8:	f7ff feba 	bl	14c50 <send_message>
   14edc:	4603      	mov	r3, r0
   14ede:	bb18      	cbnz	r0, 14f28 <gnss_interface_write+0xd0>
   14ee0:	4d21      	ldr	r5, [pc, #132]	; (14f68 <gnss_interface_write+0x110>)
   14ee2:	4e1f      	ldr	r6, [pc, #124]	; (14f60 <gnss_interface_write+0x108>)
   14ee4:	6822      	ldr	r2, [r4, #0]
   14ee6:	0291      	lsls	r1, r2, #10
   14ee8:	d52f      	bpl.n	14f4a <gnss_interface_write+0xf2>
   14eea:	b343      	cbz	r3, 14f3e <gnss_interface_write+0xe6>
   14eec:	4618      	mov	r0, r3
   14eee:	e7bc      	b.n	14e6a <gnss_interface_write+0x12>
   14ef0:	a902      	add	r1, sp, #8
   14ef2:	f005 f8d2 	bl	1a09a <rpc_gnss_serialize_ephe>
   14ef6:	e7eb      	b.n	14ed0 <gnss_interface_write+0x78>
   14ef8:	a902      	add	r1, sp, #8
   14efa:	f005 f918 	bl	1a12e <rpc_gnss_serialize_alm>
   14efe:	e7e7      	b.n	14ed0 <gnss_interface_write+0x78>
   14f00:	a902      	add	r1, sp, #8
   14f02:	f005 f941 	bl	1a188 <rpc_gnss_serialize_klob>
   14f06:	e7e3      	b.n	14ed0 <gnss_interface_write+0x78>
   14f08:	a902      	add	r1, sp, #8
   14f0a:	f005 f958 	bl	1a1be <rpc_gnss_serialize_nequick>
   14f0e:	e7df      	b.n	14ed0 <gnss_interface_write+0x78>
   14f10:	a902      	add	r1, sp, #8
   14f12:	f005 f969 	bl	1a1e8 <rpc_gnss_serialize_time_and_sv_tow>
   14f16:	e7db      	b.n	14ed0 <gnss_interface_write+0x78>
   14f18:	a902      	add	r1, sp, #8
   14f1a:	f005 f988 	bl	1a22e <rpc_gnss_serialize_location>
   14f1e:	e7d7      	b.n	14ed0 <gnss_interface_write+0x78>
   14f20:	a902      	add	r1, sp, #8
   14f22:	f005 f9a1 	bl	1a268 <rpc_gnss_serialize_integrity>
   14f26:	e7d3      	b.n	14ed0 <gnss_interface_write+0x78>
   14f28:	6822      	ldr	r2, [r4, #0]
   14f2a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   14f2e:	6022      	str	r2, [r4, #0]
   14f30:	6822      	ldr	r2, [r4, #0]
   14f32:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   14f36:	6022      	str	r2, [r4, #0]
   14f38:	4618      	mov	r0, r3
   14f3a:	b01e      	add	sp, #120	; 0x78
   14f3c:	bd70      	pop	{r4, r5, r6, pc}
   14f3e:	4629      	mov	r1, r5
   14f40:	4630      	mov	r0, r6
   14f42:	f7fc f90d 	bl	11160 <nrf_modem_os_timedwait>
   14f46:	4603      	mov	r3, r0
   14f48:	e7cc      	b.n	14ee4 <gnss_interface_write+0x8c>
   14f4a:	2b00      	cmp	r3, #0
   14f4c:	d1ce      	bne.n	14eec <gnss_interface_write+0x94>
   14f4e:	6822      	ldr	r2, [r4, #0]
   14f50:	0392      	lsls	r2, r2, #14
   14f52:	d4f1      	bmi.n	14f38 <gnss_interface_write+0xe0>
   14f54:	6823      	ldr	r3, [r4, #0]
   14f56:	2005      	movs	r0, #5
   14f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   14f5c:	6023      	str	r3, [r4, #0]
   14f5e:	e784      	b.n	14e6a <gnss_interface_write+0x12>
   14f60:	49765443 	.word	0x49765443
   14f64:	200155ac 	.word	0x200155ac
   14f68:	20014568 	.word	0x20014568

00014f6c <gnss_interface_read>:
   14f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f70:	469a      	mov	sl, r3
   14f72:	4b7d      	ldr	r3, [pc, #500]	; (15168 <gnss_interface_read+0x1fc>)
   14f74:	460c      	mov	r4, r1
   14f76:	4298      	cmp	r0, r3
   14f78:	b0b5      	sub	sp, #212	; 0xd4
   14f7a:	d008      	beq.n	14f8e <gnss_interface_read+0x22>
   14f7c:	2009      	movs	r0, #9
   14f7e:	f7fc f9a7 	bl	112d0 <nrf_modem_os_errno_set>
   14f82:	f04f 35ff 	mov.w	r5, #4294967295
   14f86:	4628      	mov	r0, r5
   14f88:	b035      	add	sp, #212	; 0xd4
   14f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f8e:	b109      	cbz	r1, 14f94 <gnss_interface_read+0x28>
   14f90:	2ad7      	cmp	r2, #215	; 0xd7
   14f92:	d801      	bhi.n	14f98 <gnss_interface_read+0x2c>
   14f94:	2016      	movs	r0, #22
   14f96:	e7f2      	b.n	14f7e <gnss_interface_read+0x12>
   14f98:	4b74      	ldr	r3, [pc, #464]	; (1516c <gnss_interface_read+0x200>)
   14f9a:	681a      	ldr	r2, [r3, #0]
   14f9c:	461e      	mov	r6, r3
   14f9e:	b292      	uxth	r2, r2
   14fa0:	2a04      	cmp	r2, #4
   14fa2:	d005      	beq.n	14fb0 <gnss_interface_read+0x44>
   14fa4:	681b      	ldr	r3, [r3, #0]
   14fa6:	b29b      	uxth	r3, r3
   14fa8:	2b02      	cmp	r3, #2
   14faa:	d001      	beq.n	14fb0 <gnss_interface_read+0x44>
   14fac:	2039      	movs	r0, #57	; 0x39
   14fae:	e7e6      	b.n	14f7e <gnss_interface_read+0x12>
   14fb0:	f1ba 0f00 	cmp.w	sl, #0
   14fb4:	d004      	beq.n	14fc0 <gnss_interface_read+0x54>
   14fb6:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   14fba:	d101      	bne.n	14fc0 <gnss_interface_read+0x54>
   14fbc:	202d      	movs	r0, #45	; 0x2d
   14fbe:	e7de      	b.n	14f7e <gnss_interface_read+0x12>
   14fc0:	6833      	ldr	r3, [r6, #0]
   14fc2:	f04f 0900 	mov.w	r9, #0
   14fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   14fca:	6033      	str	r3, [r6, #0]
   14fcc:	23b6      	movs	r3, #182	; 0xb6
   14fce:	9303      	str	r3, [sp, #12]
   14fd0:	f10d 0306 	add.w	r3, sp, #6
   14fd4:	9304      	str	r3, [sp, #16]
   14fd6:	2302      	movs	r3, #2
   14fd8:	f10d 0818 	add.w	r8, sp, #24
   14fdc:	4f64      	ldr	r7, [pc, #400]	; (15170 <gnss_interface_read+0x204>)
   14fde:	f8df b188 	ldr.w	fp, [pc, #392]	; 15168 <gnss_interface_read+0x1fc>
   14fe2:	f8cd 8008 	str.w	r8, [sp, #8]
   14fe6:	9305      	str	r3, [sp, #20]
   14fe8:	6838      	ldr	r0, [r7, #0]
   14fea:	a902      	add	r1, sp, #8
   14fec:	6802      	ldr	r2, [r0, #0]
   14fee:	6895      	ldr	r5, [r2, #8]
   14ff0:	4652      	mov	r2, sl
   14ff2:	47a8      	blx	r5
   14ff4:	1e05      	subs	r5, r0, #0
   14ff6:	da13      	bge.n	15020 <gnss_interface_read+0xb4>
   14ff8:	f01a 0f02 	tst.w	sl, #2
   14ffc:	d10e      	bne.n	1501c <gnss_interface_read+0xb0>
   14ffe:	4d5d      	ldr	r5, [pc, #372]	; (15174 <gnss_interface_read+0x208>)
   15000:	6832      	ldr	r2, [r6, #0]
   15002:	495d      	ldr	r1, [pc, #372]	; (15178 <gnss_interface_read+0x20c>)
   15004:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
   15008:	ea52 0309 	orrs.w	r3, r2, r9
   1500c:	7828      	ldrb	r0, [r5, #0]
   1500e:	d027      	beq.n	15060 <gnss_interface_read+0xf4>
   15010:	2800      	cmp	r0, #0
   15012:	d1e9      	bne.n	14fe8 <gnss_interface_read+0x7c>
   15014:	f04f 0970 	mov.w	r9, #112	; 0x70
   15018:	4648      	mov	r0, r9
   1501a:	e7b0      	b.n	14f7e <gnss_interface_read+0x12>
   1501c:	1c6b      	adds	r3, r5, #1
   1501e:	d026      	beq.n	1506e <gnss_interface_read+0x102>
   15020:	f244 0202 	movw	r2, #16386	; 0x4002
   15024:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   15028:	4293      	cmp	r3, r2
   1502a:	d127      	bne.n	1507c <gnss_interface_read+0x110>
   1502c:	4640      	mov	r0, r8
   1502e:	f7f7 fea7 	bl	cd80 <strlen>
   15032:	2302      	movs	r3, #2
   15034:	1c45      	adds	r5, r0, #1
   15036:	f804 3b08 	strb.w	r3, [r4], #8
   1503a:	b2ad      	uxth	r5, r5
   1503c:	462a      	mov	r2, r5
   1503e:	4641      	mov	r1, r8
   15040:	4620      	mov	r0, r4
   15042:	f006 fd23 	bl	1ba8c <memcpy>
   15046:	3508      	adds	r5, #8
   15048:	4b49      	ldr	r3, [pc, #292]	; (15170 <gnss_interface_read+0x204>)
   1504a:	6818      	ldr	r0, [r3, #0]
   1504c:	6803      	ldr	r3, [r0, #0]
   1504e:	68db      	ldr	r3, [r3, #12]
   15050:	4798      	blx	r3
   15052:	2800      	cmp	r0, #0
   15054:	bfc2      	ittt	gt
   15056:	6833      	ldrgt	r3, [r6, #0]
   15058:	f443 3380 	orrgt.w	r3, r3, #65536	; 0x10000
   1505c:	6033      	strgt	r3, [r6, #0]
   1505e:	e792      	b.n	14f86 <gnss_interface_read+0x1a>
   15060:	2800      	cmp	r0, #0
   15062:	d0d7      	beq.n	15014 <gnss_interface_read+0xa8>
   15064:	4658      	mov	r0, fp
   15066:	f7fc f87b 	bl	11160 <nrf_modem_os_timedwait>
   1506a:	4681      	mov	r9, r0
   1506c:	e7c8      	b.n	15000 <gnss_interface_read+0x94>
   1506e:	f1b9 0f00 	cmp.w	r9, #0
   15072:	d1d1      	bne.n	15018 <gnss_interface_read+0xac>
   15074:	2023      	movs	r0, #35	; 0x23
   15076:	f7fc f92b 	bl	112d0 <nrf_modem_os_errno_set>
   1507a:	e784      	b.n	14f86 <gnss_interface_read+0x1a>
   1507c:	f244 0201 	movw	r2, #16385	; 0x4001
   15080:	4293      	cmp	r3, r2
   15082:	d160      	bne.n	15146 <gnss_interface_read+0x1da>
   15084:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   15088:	2301      	movs	r3, #1
   1508a:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   1508e:	7023      	strb	r3, [r4, #0]
   15090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   15094:	e9c4 2304 	strd	r2, r3, [r4, #16]
   15098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1509a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
   1509e:	61a3      	str	r3, [r4, #24]
   150a0:	f8dd 5045 	ldr.w	r5, [sp, #69]	; 0x45
   150a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   150a6:	6365      	str	r5, [r4, #52]	; 0x34
   150a8:	61e3      	str	r3, [r4, #28]
   150aa:	f8dd 5049 	ldr.w	r5, [sp, #73]	; 0x49
   150ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   150b0:	63a5      	str	r5, [r4, #56]	; 0x38
   150b2:	6223      	str	r3, [r4, #32]
   150b4:	f8dd 504d 	ldr.w	r5, [sp, #77]	; 0x4d
   150b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   150ba:	63e5      	str	r5, [r4, #60]	; 0x3c
   150bc:	6263      	str	r3, [r4, #36]	; 0x24
   150be:	f8dd 5051 	ldr.w	r5, [sp, #81]	; 0x51
   150c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   150c4:	6425      	str	r5, [r4, #64]	; 0x40
   150c6:	62a3      	str	r3, [r4, #40]	; 0x28
   150c8:	f89d 5042 	ldrb.w	r5, [sp, #66]	; 0x42
   150cc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   150d0:	e9c4 0102 	strd	r0, r1, [r4, #8]
   150d4:	85a3      	strh	r3, [r4, #44]	; 0x2c
   150d6:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
   150da:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   150de:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   150e2:	200a      	movs	r0, #10
   150e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   150e8:	2200      	movs	r2, #0
   150ea:	8623      	strh	r3, [r4, #48]	; 0x30
   150ec:	f8b8 303e 	ldrh.w	r3, [r8, #62]	; 0x3e
   150f0:	340c      	adds	r4, #12
   150f2:	8763      	strh	r3, [r4, #58]	; 0x3a
   150f4:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
   150f8:	f108 080a 	add.w	r8, r8, #10
   150fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   15100:	ab34      	add	r3, sp, #208	; 0xd0
   15102:	fb00 3302 	mla	r3, r0, r2, r3
   15106:	f813 5c76 	ldrb.w	r5, [r3, #-118]
   1510a:	f813 1c77 	ldrb.w	r1, [r3, #-119]
   1510e:	3201      	adds	r2, #1
   15110:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   15114:	87e1      	strh	r1, [r4, #62]	; 0x3e
   15116:	f813 1c75 	ldrb.w	r1, [r3, #-117]
   1511a:	f813 5c74 	ldrb.w	r5, [r3, #-116]
   1511e:	2a0c      	cmp	r2, #12
   15120:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   15124:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
   15128:	f813 1c73 	ldrb.w	r1, [r3, #-115]
   1512c:	f813 3c72 	ldrb.w	r3, [r3, #-114]
   15130:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
   15134:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
   15138:	f898 303d 	ldrb.w	r3, [r8, #61]	; 0x3d
   1513c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   15140:	d1d4      	bne.n	150ec <gnss_interface_read+0x180>
   15142:	25d8      	movs	r5, #216	; 0xd8
   15144:	e780      	b.n	15048 <gnss_interface_read+0xdc>
   15146:	f244 0203 	movw	r2, #16387	; 0x4003
   1514a:	4293      	cmp	r3, r2
   1514c:	f47f af22 	bne.w	14f94 <gnss_interface_read+0x28>
   15150:	2303      	movs	r3, #3
   15152:	7023      	strb	r3, [r4, #0]
   15154:	9b06      	ldr	r3, [sp, #24]
   15156:	2514      	movs	r5, #20
   15158:	60a3      	str	r3, [r4, #8]
   1515a:	9b07      	ldr	r3, [sp, #28]
   1515c:	60e3      	str	r3, [r4, #12]
   1515e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   15162:	6123      	str	r3, [r4, #16]
   15164:	e770      	b.n	15048 <gnss_interface_read+0xdc>
   15166:	bf00      	nop
   15168:	49765443 	.word	0x49765443
   1516c:	200155ac 	.word	0x200155ac
   15170:	200155b4 	.word	0x200155b4
   15174:	20018354 	.word	0x20018354
   15178:	20014568 	.word	0x20014568

0001517c <gnss_interface_setopt>:
   1517c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15180:	4c75      	ldr	r4, [pc, #468]	; (15358 <gnss_interface_setopt+0x1dc>)
   15182:	4616      	mov	r6, r2
   15184:	6822      	ldr	r2, [r4, #0]
   15186:	b087      	sub	sp, #28
   15188:	b292      	uxth	r2, r2
   1518a:	2a02      	cmp	r2, #2
   1518c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1518e:	d007      	beq.n	151a0 <gnss_interface_setopt+0x24>
   15190:	2e08      	cmp	r6, #8
   15192:	d005      	beq.n	151a0 <gnss_interface_setopt+0x24>
   15194:	f1a6 020a 	sub.w	r2, r6, #10
   15198:	2a01      	cmp	r2, #1
   1519a:	d901      	bls.n	151a0 <gnss_interface_setopt+0x24>
   1519c:	200e      	movs	r0, #14
   1519e:	e003      	b.n	151a8 <gnss_interface_setopt+0x2c>
   151a0:	6822      	ldr	r2, [r4, #0]
   151a2:	0252      	lsls	r2, r2, #9
   151a4:	d508      	bpl.n	151b8 <gnss_interface_setopt+0x3c>
   151a6:	2073      	movs	r0, #115	; 0x73
   151a8:	f7fc f892 	bl	112d0 <nrf_modem_os_errno_set>
   151ac:	f04f 35ff 	mov.w	r5, #4294967295
   151b0:	4628      	mov	r0, r5
   151b2:	b007      	add	sp, #28
   151b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   151b8:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   151bc:	d001      	beq.n	151c2 <gnss_interface_setopt+0x46>
   151be:	202a      	movs	r0, #42	; 0x2a
   151c0:	e7f2      	b.n	151a8 <gnss_interface_setopt+0x2c>
   151c2:	4a66      	ldr	r2, [pc, #408]	; (1535c <gnss_interface_setopt+0x1e0>)
   151c4:	4290      	cmp	r0, r2
   151c6:	d001      	beq.n	151cc <gnss_interface_setopt+0x50>
   151c8:	2009      	movs	r0, #9
   151ca:	e7ed      	b.n	151a8 <gnss_interface_setopt+0x2c>
   151cc:	f1a6 020a 	sub.w	r2, r6, #10
   151d0:	2a01      	cmp	r2, #1
   151d2:	d902      	bls.n	151da <gnss_interface_setopt+0x5e>
   151d4:	b90b      	cbnz	r3, 151da <gnss_interface_setopt+0x5e>
   151d6:	2016      	movs	r0, #22
   151d8:	e7e6      	b.n	151a8 <gnss_interface_setopt+0x2c>
   151da:	1e72      	subs	r2, r6, #1
   151dc:	2a0a      	cmp	r2, #10
   151de:	d8fa      	bhi.n	151d6 <gnss_interface_setopt+0x5a>
   151e0:	e8df f002 	tbb	[pc, r2]
   151e4:	4b45063d 	.word	0x4b45063d
   151e8:	806a5a53 	.word	0x806a5a53
   151ec:	9362      	.short	0x9362
   151ee:	a5          	.byte	0xa5
   151ef:	00          	.byte	0x00
   151f0:	2d02      	cmp	r5, #2
   151f2:	d1f0      	bne.n	151d6 <gnss_interface_setopt+0x5a>
   151f4:	2210      	movs	r2, #16
   151f6:	881b      	ldrh	r3, [r3, #0]
   151f8:	9202      	str	r2, [sp, #8]
   151fa:	f8ad 3011 	strh.w	r3, [sp, #17]
   151fe:	f241 1003 	movw	r0, #4355	; 0x1103
   15202:	6823      	ldr	r3, [r4, #0]
   15204:	2212      	movs	r2, #18
   15206:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1520a:	a901      	add	r1, sp, #4
   1520c:	6023      	str	r3, [r4, #0]
   1520e:	f7ff fd1f 	bl	14c50 <send_message>
   15212:	4605      	mov	r5, r0
   15214:	2800      	cmp	r0, #0
   15216:	f040 8091 	bne.w	1533c <gnss_interface_setopt+0x1c0>
   1521a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 15364 <gnss_interface_setopt+0x1e8>
   1521e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 1535c <gnss_interface_setopt+0x1e0>
   15222:	4649      	mov	r1, r9
   15224:	4640      	mov	r0, r8
   15226:	f7fb ff9b 	bl	11160 <nrf_modem_os_timedwait>
   1522a:	6827      	ldr	r7, [r4, #0]
   1522c:	f417 0780 	ands.w	r7, r7, #4194304	; 0x400000
   15230:	d1f7      	bne.n	15222 <gnss_interface_setopt+0xa6>
   15232:	f8df 8134 	ldr.w	r8, [pc, #308]	; 15368 <gnss_interface_setopt+0x1ec>
   15236:	f8d8 0000 	ldr.w	r0, [r8]
   1523a:	b118      	cbz	r0, 15244 <gnss_interface_setopt+0xc8>
   1523c:	f004 ff09 	bl	1a052 <rpc_gnss_client_data_free>
   15240:	f8c8 7000 	str.w	r7, [r8]
   15244:	6823      	ldr	r3, [r4, #0]
   15246:	021b      	lsls	r3, r3, #8
   15248:	d47d      	bmi.n	15346 <gnss_interface_setopt+0x1ca>
   1524a:	200e      	movs	r0, #14
   1524c:	f7fc f840 	bl	112d0 <nrf_modem_os_errno_set>
   15250:	f04f 35ff 	mov.w	r5, #4294967295
   15254:	6823      	ldr	r3, [r4, #0]
   15256:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1525a:	6023      	str	r3, [r4, #0]
   1525c:	e7a8      	b.n	151b0 <gnss_interface_setopt+0x34>
   1525e:	2d02      	cmp	r5, #2
   15260:	d1b9      	bne.n	151d6 <gnss_interface_setopt+0x5a>
   15262:	2208      	movs	r2, #8
   15264:	881b      	ldrh	r3, [r3, #0]
   15266:	9202      	str	r2, [sp, #8]
   15268:	f8ad 300f 	strh.w	r3, [sp, #15]
   1526c:	e7c7      	b.n	151fe <gnss_interface_setopt+0x82>
   1526e:	2d01      	cmp	r5, #1
   15270:	d1b1      	bne.n	151d6 <gnss_interface_setopt+0x5a>
   15272:	781b      	ldrb	r3, [r3, #0]
   15274:	2b01      	cmp	r3, #1
   15276:	d0c2      	beq.n	151fe <gnss_interface_setopt+0x82>
   15278:	e7ad      	b.n	151d6 <gnss_interface_setopt+0x5a>
   1527a:	2d02      	cmp	r5, #2
   1527c:	d1ab      	bne.n	151d6 <gnss_interface_setopt+0x5a>
   1527e:	2220      	movs	r2, #32
   15280:	881b      	ldrh	r3, [r3, #0]
   15282:	9202      	str	r2, [sp, #8]
   15284:	f8ad 3013 	strh.w	r3, [sp, #19]
   15288:	e7b9      	b.n	151fe <gnss_interface_setopt+0x82>
   1528a:	2d01      	cmp	r5, #1
   1528c:	d1a3      	bne.n	151d6 <gnss_interface_setopt+0x5a>
   1528e:	781b      	ldrb	r3, [r3, #0]
   15290:	9502      	str	r5, [sp, #8]
   15292:	f88d 300c 	strb.w	r3, [sp, #12]
   15296:	e7b2      	b.n	151fe <gnss_interface_setopt+0x82>
   15298:	2d01      	cmp	r5, #1
   1529a:	d19c      	bne.n	151d6 <gnss_interface_setopt+0x5a>
   1529c:	2202      	movs	r2, #2
   1529e:	781b      	ldrb	r3, [r3, #0]
   152a0:	9202      	str	r2, [sp, #8]
   152a2:	f88d 300d 	strb.w	r3, [sp, #13]
   152a6:	e7aa      	b.n	151fe <gnss_interface_setopt+0x82>
   152a8:	2d01      	cmp	r5, #1
   152aa:	d194      	bne.n	151d6 <gnss_interface_setopt+0x5a>
   152ac:	2240      	movs	r2, #64	; 0x40
   152ae:	781b      	ldrb	r3, [r3, #0]
   152b0:	9202      	str	r2, [sp, #8]
   152b2:	f88d 3015 	strb.w	r3, [sp, #21]
   152b6:	e7a2      	b.n	151fe <gnss_interface_setopt+0x82>
   152b8:	6822      	ldr	r2, [r4, #0]
   152ba:	b292      	uxth	r2, r2
   152bc:	2a02      	cmp	r2, #2
   152be:	f47f af6d 	bne.w	1519c <gnss_interface_setopt+0x20>
   152c2:	2d04      	cmp	r5, #4
   152c4:	d187      	bne.n	151d6 <gnss_interface_setopt+0x5a>
   152c6:	2201      	movs	r2, #1
   152c8:	681b      	ldr	r3, [r3, #0]
   152ca:	f88d 2008 	strb.w	r2, [sp, #8]
   152ce:	f8cd 3009 	str.w	r3, [sp, #9]
   152d2:	6823      	ldr	r3, [r4, #0]
   152d4:	0c1b      	lsrs	r3, r3, #16
   152d6:	041b      	lsls	r3, r3, #16
   152d8:	f043 0303 	orr.w	r3, r3, #3
   152dc:	6023      	str	r3, [r4, #0]
   152de:	f241 0004 	movw	r0, #4100	; 0x1004
   152e2:	e78e      	b.n	15202 <gnss_interface_setopt+0x86>
   152e4:	6822      	ldr	r2, [r4, #0]
   152e6:	b292      	uxth	r2, r2
   152e8:	2a04      	cmp	r2, #4
   152ea:	d004      	beq.n	152f6 <gnss_interface_setopt+0x17a>
   152ec:	6822      	ldr	r2, [r4, #0]
   152ee:	b292      	uxth	r2, r2
   152f0:	2a02      	cmp	r2, #2
   152f2:	f47f af53 	bne.w	1519c <gnss_interface_setopt+0x20>
   152f6:	2200      	movs	r2, #0
   152f8:	2d04      	cmp	r5, #4
   152fa:	f88d 2008 	strb.w	r2, [sp, #8]
   152fe:	f47f af6a 	bne.w	151d6 <gnss_interface_setopt+0x5a>
   15302:	681b      	ldr	r3, [r3, #0]
   15304:	f8cd 3009 	str.w	r3, [sp, #9]
   15308:	e7e9      	b.n	152de <gnss_interface_setopt+0x162>
   1530a:	6823      	ldr	r3, [r4, #0]
   1530c:	b29b      	uxth	r3, r3
   1530e:	2b04      	cmp	r3, #4
   15310:	f47f af44 	bne.w	1519c <gnss_interface_setopt+0x20>
   15314:	2302      	movs	r3, #2
   15316:	f88d 3008 	strb.w	r3, [sp, #8]
   1531a:	2300      	movs	r3, #0
   1531c:	f88d 3009 	strb.w	r3, [sp, #9]
   15320:	f88d 300a 	strb.w	r3, [sp, #10]
   15324:	f88d 300b 	strb.w	r3, [sp, #11]
   15328:	f88d 300c 	strb.w	r3, [sp, #12]
   1532c:	e7d7      	b.n	152de <gnss_interface_setopt+0x162>
   1532e:	6823      	ldr	r3, [r4, #0]
   15330:	b29b      	uxth	r3, r3
   15332:	2b04      	cmp	r3, #4
   15334:	f47f af32 	bne.w	1519c <gnss_interface_setopt+0x20>
   15338:	2303      	movs	r3, #3
   1533a:	e7ec      	b.n	15316 <gnss_interface_setopt+0x19a>
   1533c:	6823      	ldr	r3, [r4, #0]
   1533e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   15342:	6023      	str	r3, [r4, #0]
   15344:	e72a      	b.n	1519c <gnss_interface_setopt+0x20>
   15346:	2e08      	cmp	r6, #8
   15348:	d184      	bne.n	15254 <gnss_interface_setopt+0xd8>
   1534a:	4b05      	ldr	r3, [pc, #20]	; (15360 <gnss_interface_setopt+0x1e4>)
   1534c:	6818      	ldr	r0, [r3, #0]
   1534e:	6803      	ldr	r3, [r0, #0]
   15350:	691b      	ldr	r3, [r3, #16]
   15352:	4798      	blx	r3
   15354:	e77e      	b.n	15254 <gnss_interface_setopt+0xd8>
   15356:	bf00      	nop
   15358:	200155ac 	.word	0x200155ac
   1535c:	49765443 	.word	0x49765443
   15360:	200155b4 	.word	0x200155b4
   15364:	20014568 	.word	0x20014568
   15368:	200155b0 	.word	0x200155b0

0001536c <gnss_interface_getopt>:
   1536c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15370:	461d      	mov	r5, r3
   15372:	4b44      	ldr	r3, [pc, #272]	; (15484 <gnss_interface_getopt+0x118>)
   15374:	b087      	sub	sp, #28
   15376:	681e      	ldr	r6, [r3, #0]
   15378:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1537a:	b2b6      	uxth	r6, r6
   1537c:	2e02      	cmp	r6, #2
   1537e:	461e      	mov	r6, r3
   15380:	d001      	beq.n	15386 <gnss_interface_getopt+0x1a>
   15382:	200e      	movs	r0, #14
   15384:	e003      	b.n	1538e <gnss_interface_getopt+0x22>
   15386:	681f      	ldr	r7, [r3, #0]
   15388:	03ff      	lsls	r7, r7, #15
   1538a:	d508      	bpl.n	1539e <gnss_interface_getopt+0x32>
   1538c:	2005      	movs	r0, #5
   1538e:	f7fb ff9f 	bl	112d0 <nrf_modem_os_errno_set>
   15392:	f04f 34ff 	mov.w	r4, #4294967295
   15396:	4620      	mov	r0, r4
   15398:	b007      	add	sp, #28
   1539a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1539e:	681b      	ldr	r3, [r3, #0]
   153a0:	01df      	lsls	r7, r3, #7
   153a2:	d501      	bpl.n	153a8 <gnss_interface_getopt+0x3c>
   153a4:	2073      	movs	r0, #115	; 0x73
   153a6:	e7f2      	b.n	1538e <gnss_interface_getopt+0x22>
   153a8:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   153ac:	d001      	beq.n	153b2 <gnss_interface_getopt+0x46>
   153ae:	202a      	movs	r0, #42	; 0x2a
   153b0:	e7ed      	b.n	1538e <gnss_interface_getopt+0x22>
   153b2:	4b35      	ldr	r3, [pc, #212]	; (15488 <gnss_interface_getopt+0x11c>)
   153b4:	4298      	cmp	r0, r3
   153b6:	d001      	beq.n	153bc <gnss_interface_getopt+0x50>
   153b8:	2009      	movs	r0, #9
   153ba:	e7e8      	b.n	1538e <gnss_interface_getopt+0x22>
   153bc:	b105      	cbz	r5, 153c0 <gnss_interface_getopt+0x54>
   153be:	b90c      	cbnz	r4, 153c4 <gnss_interface_getopt+0x58>
   153c0:	2016      	movs	r0, #22
   153c2:	e7e4      	b.n	1538e <gnss_interface_getopt+0x22>
   153c4:	1e57      	subs	r7, r2, #1
   153c6:	2f05      	cmp	r7, #5
   153c8:	d8fa      	bhi.n	153c0 <gnss_interface_getopt+0x54>
   153ca:	e8df f007 	tbb	[pc, r7]
   153ce:	0303      	.short	0x0303
   153d0:	30300330 	.word	0x30300330
   153d4:	6823      	ldr	r3, [r4, #0]
   153d6:	2b02      	cmp	r3, #2
   153d8:	d1f2      	bne.n	153c0 <gnss_interface_getopt+0x54>
   153da:	6833      	ldr	r3, [r6, #0]
   153dc:	2212      	movs	r2, #18
   153de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   153e2:	2100      	movs	r1, #0
   153e4:	a801      	add	r0, sp, #4
   153e6:	6033      	str	r3, [r6, #0]
   153e8:	f006 fb5d 	bl	1baa6 <memset>
   153ec:	2212      	movs	r2, #18
   153ee:	f241 1002 	movw	r0, #4354	; 0x1102
   153f2:	a901      	add	r1, sp, #4
   153f4:	f7ff fc2c 	bl	14c50 <send_message>
   153f8:	4604      	mov	r4, r0
   153fa:	b9d8      	cbnz	r0, 15434 <gnss_interface_getopt+0xc8>
   153fc:	f8df 9090 	ldr.w	r9, [pc, #144]	; 15490 <gnss_interface_getopt+0x124>
   15400:	f8df 8084 	ldr.w	r8, [pc, #132]	; 15488 <gnss_interface_getopt+0x11c>
   15404:	4649      	mov	r1, r9
   15406:	4640      	mov	r0, r8
   15408:	f7fb feaa 	bl	11160 <nrf_modem_os_timedwait>
   1540c:	6833      	ldr	r3, [r6, #0]
   1540e:	01d9      	lsls	r1, r3, #7
   15410:	d4f8      	bmi.n	15404 <gnss_interface_getopt+0x98>
   15412:	4a1e      	ldr	r2, [pc, #120]	; (1548c <gnss_interface_getopt+0x120>)
   15414:	6813      	ldr	r3, [r2, #0]
   15416:	4690      	mov	r8, r2
   15418:	b1db      	cbz	r3, 15452 <gnss_interface_getopt+0xe6>
   1541a:	6832      	ldr	r2, [r6, #0]
   1541c:	0192      	lsls	r2, r2, #6
   1541e:	d518      	bpl.n	15452 <gnss_interface_getopt+0xe6>
   15420:	2f05      	cmp	r7, #5
   15422:	d828      	bhi.n	15476 <gnss_interface_getopt+0x10a>
   15424:	e8df f007 	tbb	[pc, r7]
   15428:	201d1a0b 	.word	0x201d1a0b
   1542c:	2523      	.short	0x2523
   1542e:	6823      	ldr	r3, [r4, #0]
   15430:	2b01      	cmp	r3, #1
   15432:	e7d1      	b.n	153d8 <gnss_interface_getopt+0x6c>
   15434:	6833      	ldr	r3, [r6, #0]
   15436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1543a:	6033      	str	r3, [r6, #0]
   1543c:	e7a1      	b.n	15382 <gnss_interface_getopt+0x16>
   1543e:	f8b3 300f 	ldrh.w	r3, [r3, #15]
   15442:	802b      	strh	r3, [r5, #0]
   15444:	f8d8 0000 	ldr.w	r0, [r8]
   15448:	f004 fe03 	bl	1a052 <rpc_gnss_client_data_free>
   1544c:	2300      	movs	r3, #0
   1544e:	f8c8 3000 	str.w	r3, [r8]
   15452:	6833      	ldr	r3, [r6, #0]
   15454:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   15458:	6033      	str	r3, [r6, #0]
   1545a:	e79c      	b.n	15396 <gnss_interface_getopt+0x2a>
   1545c:	f8b3 3011 	ldrh.w	r3, [r3, #17]
   15460:	e7ef      	b.n	15442 <gnss_interface_getopt+0xd6>
   15462:	7b9b      	ldrb	r3, [r3, #14]
   15464:	702b      	strb	r3, [r5, #0]
   15466:	e7ed      	b.n	15444 <gnss_interface_getopt+0xd8>
   15468:	f8b3 3013 	ldrh.w	r3, [r3, #19]
   1546c:	e7e9      	b.n	15442 <gnss_interface_getopt+0xd6>
   1546e:	7b1b      	ldrb	r3, [r3, #12]
   15470:	e7f8      	b.n	15464 <gnss_interface_getopt+0xf8>
   15472:	7b5b      	ldrb	r3, [r3, #13]
   15474:	e7f6      	b.n	15464 <gnss_interface_getopt+0xf8>
   15476:	2016      	movs	r0, #22
   15478:	f7fb ff2a 	bl	112d0 <nrf_modem_os_errno_set>
   1547c:	f04f 34ff 	mov.w	r4, #4294967295
   15480:	e7e0      	b.n	15444 <gnss_interface_getopt+0xd8>
   15482:	bf00      	nop
   15484:	200155ac 	.word	0x200155ac
   15488:	49765443 	.word	0x49765443
   1548c:	200155b0 	.word	0x200155b0
   15490:	20014568 	.word	0x20014568

00015494 <gnss_interface_init>:
   15494:	2000      	movs	r0, #0
   15496:	4a09      	ldr	r2, [pc, #36]	; (154bc <gnss_interface_init+0x28>)
   15498:	b510      	push	{r4, lr}
   1549a:	6811      	ldr	r1, [r2, #0]
   1549c:	4c08      	ldr	r4, [pc, #32]	; (154c0 <gnss_interface_init+0x2c>)
   1549e:	4b09      	ldr	r3, [pc, #36]	; (154c4 <gnss_interface_init+0x30>)
   154a0:	4021      	ands	r1, r4
   154a2:	8018      	strh	r0, [r3, #0]
   154a4:	4b08      	ldr	r3, [pc, #32]	; (154c8 <gnss_interface_init+0x34>)
   154a6:	6011      	str	r1, [r2, #0]
   154a8:	6018      	str	r0, [r3, #0]
   154aa:	6813      	ldr	r3, [r2, #0]
   154ac:	4023      	ands	r3, r4
   154ae:	f043 0301 	orr.w	r3, r3, #1
   154b2:	6013      	str	r3, [r2, #0]
   154b4:	2201      	movs	r2, #1
   154b6:	4b05      	ldr	r3, [pc, #20]	; (154cc <gnss_interface_init+0x38>)
   154b8:	701a      	strb	r2, [r3, #0]
   154ba:	bd10      	pop	{r4, pc}
   154bc:	200155ac 	.word	0x200155ac
   154c0:	ffff0000 	.word	0xffff0000
   154c4:	20015eb0 	.word	0x20015eb0
   154c8:	200155b0 	.word	0x200155b0
   154cc:	20018354 	.word	0x20018354

000154d0 <gnss_interface_open>:
   154d0:	4b16      	ldr	r3, [pc, #88]	; (1552c <gnss_interface_open+0x5c>)
   154d2:	4608      	mov	r0, r1
   154d4:	781b      	ldrb	r3, [r3, #0]
   154d6:	b510      	push	{r4, lr}
   154d8:	b92b      	cbnz	r3, 154e6 <gnss_interface_open+0x16>
   154da:	2070      	movs	r0, #112	; 0x70
   154dc:	f7fb fef8 	bl	112d0 <nrf_modem_os_errno_set>
   154e0:	f04f 30ff 	mov.w	r0, #4294967295
   154e4:	e01f      	b.n	15526 <gnss_interface_open+0x56>
   154e6:	2902      	cmp	r1, #2
   154e8:	d001      	beq.n	154ee <gnss_interface_open+0x1e>
   154ea:	2029      	movs	r0, #41	; 0x29
   154ec:	e7f6      	b.n	154dc <gnss_interface_open+0xc>
   154ee:	4c10      	ldr	r4, [pc, #64]	; (15530 <gnss_interface_open+0x60>)
   154f0:	6823      	ldr	r3, [r4, #0]
   154f2:	b29b      	uxth	r3, r3
   154f4:	2b01      	cmp	r3, #1
   154f6:	d001      	beq.n	154fc <gnss_interface_open+0x2c>
   154f8:	2005      	movs	r0, #5
   154fa:	e7ef      	b.n	154dc <gnss_interface_open+0xc>
   154fc:	6823      	ldr	r3, [r4, #0]
   154fe:	2200      	movs	r2, #0
   15500:	0c1b      	lsrs	r3, r3, #16
   15502:	041b      	lsls	r3, r3, #16
   15504:	f043 0302 	orr.w	r3, r3, #2
   15508:	490a      	ldr	r1, [pc, #40]	; (15534 <gnss_interface_open+0x64>)
   1550a:	6023      	str	r3, [r4, #0]
   1550c:	f000 fd20 	bl	15f50 <packet_handler_create>
   15510:	4a09      	ldr	r2, [pc, #36]	; (15538 <gnss_interface_open+0x68>)
   15512:	6010      	str	r0, [r2, #0]
   15514:	b140      	cbz	r0, 15528 <gnss_interface_open+0x58>
   15516:	6822      	ldr	r2, [r4, #0]
   15518:	6803      	ldr	r3, [r0, #0]
   1551a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1551e:	681b      	ldr	r3, [r3, #0]
   15520:	6022      	str	r2, [r4, #0]
   15522:	4798      	blx	r3
   15524:	4805      	ldr	r0, [pc, #20]	; (1553c <gnss_interface_open+0x6c>)
   15526:	bd10      	pop	{r4, pc}
   15528:	200e      	movs	r0, #14
   1552a:	e7d7      	b.n	154dc <gnss_interface_open+0xc>
   1552c:	20018354 	.word	0x20018354
   15530:	200155ac 	.word	0x200155ac
   15534:	0001acc5 	.word	0x0001acc5
   15538:	200155b4 	.word	0x200155b4
   1553c:	49765443 	.word	0x49765443

00015540 <gnss_interface_close>:
   15540:	b530      	push	{r4, r5, lr}
   15542:	4b14      	ldr	r3, [pc, #80]	; (15594 <gnss_interface_close+0x54>)
   15544:	b085      	sub	sp, #20
   15546:	4298      	cmp	r0, r3
   15548:	d006      	beq.n	15558 <gnss_interface_close+0x18>
   1554a:	2009      	movs	r0, #9
   1554c:	f7fb fec0 	bl	112d0 <nrf_modem_os_errno_set>
   15550:	f04f 30ff 	mov.w	r0, #4294967295
   15554:	b005      	add	sp, #20
   15556:	bd30      	pop	{r4, r5, pc}
   15558:	4c0f      	ldr	r4, [pc, #60]	; (15598 <gnss_interface_close+0x58>)
   1555a:	6823      	ldr	r3, [r4, #0]
   1555c:	b29b      	uxth	r3, r3
   1555e:	2b04      	cmp	r3, #4
   15560:	d108      	bne.n	15574 <gnss_interface_close+0x34>
   15562:	2200      	movs	r2, #0
   15564:	9300      	str	r3, [sp, #0]
   15566:	9203      	str	r2, [sp, #12]
   15568:	f44f 7101 	mov.w	r1, #516	; 0x204
   1556c:	2208      	movs	r2, #8
   1556e:	ab03      	add	r3, sp, #12
   15570:	f005 fe83 	bl	1b27a <nrf_setsockopt>
   15574:	4d09      	ldr	r5, [pc, #36]	; (1559c <gnss_interface_close+0x5c>)
   15576:	6828      	ldr	r0, [r5, #0]
   15578:	b118      	cbz	r0, 15582 <gnss_interface_close+0x42>
   1557a:	f005 fd4a 	bl	1b012 <packet_handler_delete>
   1557e:	2300      	movs	r3, #0
   15580:	602b      	str	r3, [r5, #0]
   15582:	6823      	ldr	r3, [r4, #0]
   15584:	2000      	movs	r0, #0
   15586:	0c1b      	lsrs	r3, r3, #16
   15588:	041b      	lsls	r3, r3, #16
   1558a:	f043 0301 	orr.w	r3, r3, #1
   1558e:	6023      	str	r3, [r4, #0]
   15590:	e7e0      	b.n	15554 <gnss_interface_close+0x14>
   15592:	bf00      	nop
   15594:	49765443 	.word	0x49765443
   15598:	200155ac 	.word	0x200155ac
   1559c:	200155b4 	.word	0x200155b4

000155a0 <handle_verify_and_covert>:
   155a0:	4a0b      	ldr	r2, [pc, #44]	; (155d0 <handle_verify_and_covert+0x30>)
   155a2:	0c03      	lsrs	r3, r0, #16
   155a4:	041b      	lsls	r3, r3, #16
   155a6:	4293      	cmp	r3, r2
   155a8:	d10f      	bne.n	155ca <handle_verify_and_covert+0x2a>
   155aa:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   155ae:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   155b2:	2809      	cmp	r0, #9
   155b4:	dc09      	bgt.n	155ca <handle_verify_and_covert+0x2a>
   155b6:	4b07      	ldr	r3, [pc, #28]	; (155d4 <handle_verify_and_covert+0x34>)
   155b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   155bc:	b12b      	cbz	r3, 155ca <handle_verify_and_covert+0x2a>
   155be:	689b      	ldr	r3, [r3, #8]
   155c0:	2b00      	cmp	r3, #0
   155c2:	bf08      	it	eq
   155c4:	f06f 0008 	mvneq.w	r0, #8
   155c8:	4770      	bx	lr
   155ca:	f06f 0008 	mvn.w	r0, #8
   155ce:	4770      	bx	lr
   155d0:	789a0000 	.word	0x789a0000
   155d4:	200155bc 	.word	0x200155bc

000155d8 <command_write>:
   155d8:	4b0c      	ldr	r3, [pc, #48]	; (1560c <command_write+0x34>)
   155da:	b513      	push	{r0, r1, r4, lr}
   155dc:	480c      	ldr	r0, [pc, #48]	; (15610 <command_write+0x38>)
   155de:	681c      	ldr	r4, [r3, #0]
   155e0:	f7f7 fbce 	bl	cd80 <strlen>
   155e4:	2300      	movs	r3, #0
   155e6:	4602      	mov	r2, r0
   155e8:	e9cd 3300 	strd	r3, r3, [sp]
   155ec:	4908      	ldr	r1, [pc, #32]	; (15610 <command_write+0x38>)
   155ee:	4620      	mov	r0, r4
   155f0:	f005 fa5c 	bl	1aaac <at_interface_write>
   155f4:	4604      	mov	r4, r0
   155f6:	4806      	ldr	r0, [pc, #24]	; (15610 <command_write+0x38>)
   155f8:	f7f7 fbc2 	bl	cd80 <strlen>
   155fc:	42a0      	cmp	r0, r4
   155fe:	bf14      	ite	ne
   15600:	f06f 0004 	mvnne.w	r0, #4
   15604:	2000      	moveq	r0, #0
   15606:	b002      	add	sp, #8
   15608:	bd10      	pop	{r4, pc}
   1560a:	bf00      	nop
   1560c:	200155b8 	.word	0x200155b8
   15610:	20018356 	.word	0x20018356

00015614 <event_wait>:
   15614:	2300      	movs	r3, #0
   15616:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1561a:	e9cd 3300 	strd	r3, r3, [sp]
   1561e:	4606      	mov	r6, r0
   15620:	4818      	ldr	r0, [pc, #96]	; (15684 <event_wait+0x70>)
   15622:	460d      	mov	r5, r1
   15624:	f44f 7280 	mov.w	r2, #256	; 0x100
   15628:	4917      	ldr	r1, [pc, #92]	; (15688 <event_wait+0x74>)
   1562a:	6800      	ldr	r0, [r0, #0]
   1562c:	f005 faa8 	bl	1ab80 <at_interface_read>
   15630:	4c16      	ldr	r4, [pc, #88]	; (1568c <event_wait+0x78>)
   15632:	4607      	mov	r7, r0
   15634:	f854 8035 	ldr.w	r8, [r4, r5, lsl #3]
   15638:	4640      	mov	r0, r8
   1563a:	f7f7 fba1 	bl	cd80 <strlen>
   1563e:	4287      	cmp	r7, r0
   15640:	4602      	mov	r2, r0
   15642:	db0d      	blt.n	15660 <event_wait+0x4c>
   15644:	4640      	mov	r0, r8
   15646:	4910      	ldr	r1, [pc, #64]	; (15688 <event_wait+0x74>)
   15648:	f006 fa5c 	bl	1bb04 <strncmp>
   1564c:	b940      	cbnz	r0, 15660 <event_wait+0x4c>
   1564e:	4630      	mov	r0, r6
   15650:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   15654:	684b      	ldr	r3, [r1, #4]
   15656:	490c      	ldr	r1, [pc, #48]	; (15688 <event_wait+0x74>)
   15658:	b002      	add	sp, #8
   1565a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1565e:	4718      	bx	r3
   15660:	480b      	ldr	r0, [pc, #44]	; (15690 <event_wait+0x7c>)
   15662:	f7f7 fb8d 	bl	cd80 <strlen>
   15666:	4908      	ldr	r1, [pc, #32]	; (15688 <event_wait+0x74>)
   15668:	4602      	mov	r2, r0
   1566a:	4809      	ldr	r0, [pc, #36]	; (15690 <event_wait+0x7c>)
   1566c:	f006 fa4a 	bl	1bb04 <strncmp>
   15670:	2800      	cmp	r0, #0
   15672:	bf14      	ite	ne
   15674:	f06f 0004 	mvnne.w	r0, #4
   15678:	f06f 0007 	mvneq.w	r0, #7
   1567c:	b002      	add	sp, #8
   1567e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15682:	bf00      	nop
   15684:	200155b8 	.word	0x200155b8
   15688:	20018356 	.word	0x20018356
   1568c:	0001c3ac 	.word	0x0001c3ac
   15690:	0001d489 	.word	0x0001d489

00015694 <pdn_state_get_parser>:
   15694:	2300      	movs	r3, #0
   15696:	b530      	push	{r4, r5, lr}
   15698:	4605      	mov	r5, r0
   1569a:	460c      	mov	r4, r1
   1569c:	b085      	sub	sp, #20
   1569e:	4608      	mov	r0, r1
   156a0:	e9cd 3300 	strd	r3, r3, [sp]
   156a4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   156a8:	f005 fb1a 	bl	1ace0 <spaces_remove>
   156ac:	4b08      	ldr	r3, [pc, #32]	; (156d0 <pdn_state_get_parser+0x3c>)
   156ae:	4a09      	ldr	r2, [pc, #36]	; (156d4 <pdn_state_get_parser+0x40>)
   156b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   156b4:	2110      	movs	r1, #16
   156b6:	681b      	ldr	r3, [r3, #0]
   156b8:	4668      	mov	r0, sp
   156ba:	f002 fb0f 	bl	17cdc <sniprintf>
   156be:	4669      	mov	r1, sp
   156c0:	4620      	mov	r0, r4
   156c2:	f006 fa51 	bl	1bb68 <strstr>
   156c6:	3800      	subs	r0, #0
   156c8:	bf18      	it	ne
   156ca:	2001      	movne	r0, #1
   156cc:	b005      	add	sp, #20
   156ce:	bd30      	pop	{r4, r5, pc}
   156d0:	200155bc 	.word	0x200155bc
   156d4:	0001d48f 	.word	0x0001d48f

000156d8 <pdn_id_get_parser>:
   156d8:	b510      	push	{r4, lr}
   156da:	4604      	mov	r4, r0
   156dc:	4608      	mov	r0, r1
   156de:	f005 faff 	bl	1ace0 <spaces_remove>
   156e2:	213a      	movs	r1, #58	; 0x3a
   156e4:	f006 fa01 	bl	1baea <strchr>
   156e8:	b130      	cbz	r0, 156f8 <pdn_id_get_parser+0x20>
   156ea:	3001      	adds	r0, #1
   156ec:	f006 f9ae 	bl	1ba4c <atoi>
   156f0:	4b02      	ldr	r3, [pc, #8]	; (156fc <pdn_id_get_parser+0x24>)
   156f2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   156f6:	6058      	str	r0, [r3, #4]
   156f8:	2000      	movs	r0, #0
   156fa:	bd10      	pop	{r4, pc}
   156fc:	200155bc 	.word	0x200155bc

00015700 <context_create_parser>:
   15700:	b510      	push	{r4, lr}
   15702:	4604      	mov	r4, r0
   15704:	4608      	mov	r0, r1
   15706:	f005 faeb 	bl	1ace0 <spaces_remove>
   1570a:	213a      	movs	r1, #58	; 0x3a
   1570c:	f006 f9ed 	bl	1baea <strchr>
   15710:	b130      	cbz	r0, 15720 <context_create_parser+0x20>
   15712:	4b04      	ldr	r3, [pc, #16]	; (15724 <context_create_parser+0x24>)
   15714:	3001      	adds	r0, #1
   15716:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   1571a:	f006 f997 	bl	1ba4c <atoi>
   1571e:	6020      	str	r0, [r4, #0]
   15720:	2000      	movs	r0, #0
   15722:	bd10      	pop	{r4, pc}
   15724:	200155bc 	.word	0x200155bc

00015728 <connection_free>:
   15728:	b538      	push	{r3, r4, r5, lr}
   1572a:	4d05      	ldr	r5, [pc, #20]	; (15740 <connection_free+0x18>)
   1572c:	4604      	mov	r4, r0
   1572e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   15732:	f7fb ff71 	bl	11618 <nrf_modem_os_free>
   15736:	2300      	movs	r3, #0
   15738:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   1573c:	bd38      	pop	{r3, r4, r5, pc}
   1573e:	bf00      	nop
   15740:	200155bc 	.word	0x200155bc

00015744 <pdn_id_get>:
   15744:	b538      	push	{r3, r4, r5, lr}
   15746:	4d0e      	ldr	r5, [pc, #56]	; (15780 <pdn_id_get+0x3c>)
   15748:	4604      	mov	r4, r0
   1574a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1574e:	4b0d      	ldr	r3, [pc, #52]	; (15784 <pdn_id_get+0x40>)
   15750:	4a0d      	ldr	r2, [pc, #52]	; (15788 <pdn_id_get+0x44>)
   15752:	4628      	mov	r0, r5
   15754:	f002 fac2 	bl	17cdc <sniprintf>
   15758:	4b0c      	ldr	r3, [pc, #48]	; (1578c <pdn_id_get+0x48>)
   1575a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1575e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   15762:	4a0b      	ldr	r2, [pc, #44]	; (15790 <pdn_id_get+0x4c>)
   15764:	681b      	ldr	r3, [r3, #0]
   15766:	4428      	add	r0, r5
   15768:	f002 fab8 	bl	17cdc <sniprintf>
   1576c:	f7ff ff34 	bl	155d8 <command_write>
   15770:	b928      	cbnz	r0, 1577e <pdn_id_get+0x3a>
   15772:	4620      	mov	r0, r4
   15774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15778:	2102      	movs	r1, #2
   1577a:	f7ff bf4b 	b.w	15614 <event_wait>
   1577e:	bd38      	pop	{r3, r4, r5, pc}
   15780:	20018356 	.word	0x20018356
   15784:	0001d49b 	.word	0x0001d49b
   15788:	0001c984 	.word	0x0001c984
   1578c:	200155bc 	.word	0x200155bc
   15790:	0001d392 	.word	0x0001d392

00015794 <pdn_interface_init>:
   15794:	b538      	push	{r3, r4, r5, lr}
   15796:	f04f 34ff 	mov.w	r4, #4294967295
   1579a:	4d0b      	ldr	r5, [pc, #44]	; (157c8 <pdn_interface_init+0x34>)
   1579c:	2228      	movs	r2, #40	; 0x28
   1579e:	2100      	movs	r1, #0
   157a0:	480a      	ldr	r0, [pc, #40]	; (157cc <pdn_interface_init+0x38>)
   157a2:	602c      	str	r4, [r5, #0]
   157a4:	f006 f97f 	bl	1baa6 <memset>
   157a8:	f240 2201 	movw	r2, #513	; 0x201
   157ac:	2102      	movs	r1, #2
   157ae:	2066      	movs	r0, #102	; 0x66
   157b0:	f7ff f86c 	bl	1488c <at_interface_open>
   157b4:	2800      	cmp	r0, #0
   157b6:	bfa4      	itt	ge
   157b8:	2201      	movge	r2, #1
   157ba:	4b05      	ldrge	r3, [pc, #20]	; (157d0 <pdn_interface_init+0x3c>)
   157bc:	6028      	str	r0, [r5, #0]
   157be:	bfa6      	itte	ge
   157c0:	701a      	strbge	r2, [r3, #0]
   157c2:	2000      	movge	r0, #0
   157c4:	4620      	movlt	r0, r4
   157c6:	bd38      	pop	{r3, r4, r5, pc}
   157c8:	200155b8 	.word	0x200155b8
   157cc:	200155bc 	.word	0x200155bc
   157d0:	20018355 	.word	0x20018355

000157d4 <pdn_interface_open>:
   157d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   157d6:	4b28      	ldr	r3, [pc, #160]	; (15878 <pdn_interface_open+0xa4>)
   157d8:	781b      	ldrb	r3, [r3, #0]
   157da:	b92b      	cbnz	r3, 157e8 <pdn_interface_open+0x14>
   157dc:	2070      	movs	r0, #112	; 0x70
   157de:	f7fb fd77 	bl	112d0 <nrf_modem_os_errno_set>
   157e2:	f04f 30ff 	mov.w	r0, #4294967295
   157e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   157e8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   157ec:	d141      	bne.n	15872 <pdn_interface_open+0x9e>
   157ee:	4b23      	ldr	r3, [pc, #140]	; (1587c <pdn_interface_open+0xa8>)
   157f0:	2500      	movs	r5, #0
   157f2:	461e      	mov	r6, r3
   157f4:	f853 4b04 	ldr.w	r4, [r3], #4
   157f8:	bb24      	cbnz	r4, 15844 <pdn_interface_open+0x70>
   157fa:	2020      	movs	r0, #32
   157fc:	f7fb fefc 	bl	115f8 <nrf_modem_os_alloc>
   15800:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
   15804:	b308      	cbz	r0, 1584a <pdn_interface_open+0x76>
   15806:	4621      	mov	r1, r4
   15808:	2220      	movs	r2, #32
   1580a:	f006 f94c 	bl	1baa6 <memset>
   1580e:	2203      	movs	r2, #3
   15810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   15814:	2701      	movs	r7, #1
   15816:	60da      	str	r2, [r3, #12]
   15818:	f04f 32ff 	mov.w	r2, #4294967295
   1581c:	f44f 7180 	mov.w	r1, #256	; 0x100
   15820:	605a      	str	r2, [r3, #4]
   15822:	609f      	str	r7, [r3, #8]
   15824:	4a16      	ldr	r2, [pc, #88]	; (15880 <pdn_interface_open+0xac>)
   15826:	4b17      	ldr	r3, [pc, #92]	; (15884 <pdn_interface_open+0xb0>)
   15828:	4817      	ldr	r0, [pc, #92]	; (15888 <pdn_interface_open+0xb4>)
   1582a:	f002 fa57 	bl	17cdc <sniprintf>
   1582e:	f7ff fed3 	bl	155d8 <command_write>
   15832:	4604      	mov	r4, r0
   15834:	b160      	cbz	r0, 15850 <pdn_interface_open+0x7c>
   15836:	4628      	mov	r0, r5
   15838:	f7ff ff76 	bl	15728 <connection_free>
   1583c:	2c00      	cmp	r4, #0
   1583e:	da13      	bge.n	15868 <pdn_interface_open+0x94>
   15840:	4260      	negs	r0, r4
   15842:	e7cc      	b.n	157de <pdn_interface_open+0xa>
   15844:	3501      	adds	r5, #1
   15846:	2d0a      	cmp	r5, #10
   15848:	d1d4      	bne.n	157f4 <pdn_interface_open+0x20>
   1584a:	f06f 040b 	mvn.w	r4, #11
   1584e:	e7f7      	b.n	15840 <pdn_interface_open+0x6c>
   15850:	4639      	mov	r1, r7
   15852:	4628      	mov	r0, r5
   15854:	f7ff fede 	bl	15614 <event_wait>
   15858:	4604      	mov	r4, r0
   1585a:	2800      	cmp	r0, #0
   1585c:	d1eb      	bne.n	15836 <pdn_interface_open+0x62>
   1585e:	2202      	movs	r2, #2
   15860:	462c      	mov	r4, r5
   15862:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   15866:	609a      	str	r2, [r3, #8]
   15868:	f044 40f1 	orr.w	r0, r4, #2021654528	; 0x78800000
   1586c:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   15870:	e7b9      	b.n	157e6 <pdn_interface_open+0x12>
   15872:	2029      	movs	r0, #41	; 0x29
   15874:	e7b3      	b.n	157de <pdn_interface_open+0xa>
   15876:	bf00      	nop
   15878:	20018355 	.word	0x20018355
   1587c:	200155bc 	.word	0x200155bc
   15880:	0001c984 	.word	0x0001c984
   15884:	0001d4a9 	.word	0x0001d4a9
   15888:	20018356 	.word	0x20018356

0001588c <pdn_interface_connect>:
   1588c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15890:	4691      	mov	r9, r2
   15892:	468a      	mov	sl, r1
   15894:	b109      	cbz	r1, 1589a <pdn_interface_connect+0xe>
   15896:	2a64      	cmp	r2, #100	; 0x64
   15898:	d905      	bls.n	158a6 <pdn_interface_connect+0x1a>
   1589a:	2016      	movs	r0, #22
   1589c:	f7fb fd18 	bl	112d0 <nrf_modem_os_errno_set>
   158a0:	f04f 30ff 	mov.w	r0, #4294967295
   158a4:	e0ec      	b.n	15a80 <pdn_interface_connect+0x1f4>
   158a6:	f7ff fe7b 	bl	155a0 <handle_verify_and_covert>
   158aa:	1e04      	subs	r4, r0, #0
   158ac:	da01      	bge.n	158b2 <pdn_interface_connect+0x26>
   158ae:	4260      	negs	r0, r4
   158b0:	e7f4      	b.n	1589c <pdn_interface_connect+0x10>
   158b2:	4f76      	ldr	r7, [pc, #472]	; (15a8c <pdn_interface_connect+0x200>)
   158b4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   158b8:	689b      	ldr	r3, [r3, #8]
   158ba:	2b02      	cmp	r3, #2
   158bc:	d001      	beq.n	158c2 <pdn_interface_connect+0x36>
   158be:	2009      	movs	r0, #9
   158c0:	e7ec      	b.n	1589c <pdn_interface_connect+0x10>
   158c2:	4e73      	ldr	r6, [pc, #460]	; (15a90 <pdn_interface_connect+0x204>)
   158c4:	f44f 7180 	mov.w	r1, #256	; 0x100
   158c8:	4b72      	ldr	r3, [pc, #456]	; (15a94 <pdn_interface_connect+0x208>)
   158ca:	4a73      	ldr	r2, [pc, #460]	; (15a98 <pdn_interface_connect+0x20c>)
   158cc:	4630      	mov	r0, r6
   158ce:	f002 fa05 	bl	17cdc <sniprintf>
   158d2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   158d6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   158da:	4605      	mov	r5, r0
   158dc:	681b      	ldr	r3, [r3, #0]
   158de:	4a6f      	ldr	r2, [pc, #444]	; (15a9c <pdn_interface_connect+0x210>)
   158e0:	1830      	adds	r0, r6, r0
   158e2:	f002 f9fb 	bl	17cdc <sniprintf>
   158e6:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   158ea:	4405      	add	r5, r0
   158ec:	68db      	ldr	r3, [r3, #12]
   158ee:	46b0      	mov	r8, r6
   158f0:	f003 0203 	and.w	r2, r3, #3
   158f4:	2a03      	cmp	r2, #3
   158f6:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   158fa:	eb06 0005 	add.w	r0, r6, r5
   158fe:	d159      	bne.n	159b4 <pdn_interface_connect+0x128>
   15900:	4b67      	ldr	r3, [pc, #412]	; (15aa0 <pdn_interface_connect+0x214>)
   15902:	4a68      	ldr	r2, [pc, #416]	; (15aa4 <pdn_interface_connect+0x218>)
   15904:	f002 f9ea 	bl	17cdc <sniprintf>
   15908:	f109 0303 	add.w	r3, r9, #3
   1590c:	4428      	add	r0, r5
   1590e:	4403      	add	r3, r0
   15910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   15914:	f300 80b6 	bgt.w	15a84 <pdn_interface_connect+0x1f8>
   15918:	2622      	movs	r6, #34	; 0x22
   1591a:	1c45      	adds	r5, r0, #1
   1591c:	464a      	mov	r2, r9
   1591e:	f808 6000 	strb.w	r6, [r8, r0]
   15922:	4651      	mov	r1, sl
   15924:	eb08 0005 	add.w	r0, r8, r5
   15928:	f006 f8fe 	bl	1bb28 <strncpy>
   1592c:	eb09 0305 	add.w	r3, r9, r5
   15930:	eb08 0203 	add.w	r2, r8, r3
   15934:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   15938:	b902      	cbnz	r2, 1593c <pdn_interface_connect+0xb0>
   1593a:	3b01      	subs	r3, #1
   1593c:	2200      	movs	r2, #0
   1593e:	f808 6003 	strb.w	r6, [r8, r3]
   15942:	4443      	add	r3, r8
   15944:	705a      	strb	r2, [r3, #1]
   15946:	f7ff fe47 	bl	155d8 <command_write>
   1594a:	2800      	cmp	r0, #0
   1594c:	d176      	bne.n	15a3c <pdn_interface_connect+0x1b0>
   1594e:	4601      	mov	r1, r0
   15950:	4620      	mov	r0, r4
   15952:	f7ff fe5f 	bl	15614 <event_wait>
   15956:	2800      	cmp	r0, #0
   15958:	d170      	bne.n	15a3c <pdn_interface_connect+0x1b0>
   1595a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1595e:	7c1b      	ldrb	r3, [r3, #16]
   15960:	bb6b      	cbnz	r3, 159be <pdn_interface_connect+0x132>
   15962:	f44f 7180 	mov.w	r1, #256	; 0x100
   15966:	4b50      	ldr	r3, [pc, #320]	; (15aa8 <pdn_interface_connect+0x21c>)
   15968:	4a4b      	ldr	r2, [pc, #300]	; (15a98 <pdn_interface_connect+0x20c>)
   1596a:	4849      	ldr	r0, [pc, #292]	; (15a90 <pdn_interface_connect+0x204>)
   1596c:	f002 f9b6 	bl	17cdc <sniprintf>
   15970:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   15974:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   15978:	681b      	ldr	r3, [r3, #0]
   1597a:	4a4c      	ldr	r2, [pc, #304]	; (15aac <pdn_interface_connect+0x220>)
   1597c:	4440      	add	r0, r8
   1597e:	f002 f9ad 	bl	17cdc <sniprintf>
   15982:	f7ff fe29 	bl	155d8 <command_write>
   15986:	2800      	cmp	r0, #0
   15988:	d158      	bne.n	15a3c <pdn_interface_connect+0x1b0>
   1598a:	4601      	mov	r1, r0
   1598c:	4620      	mov	r0, r4
   1598e:	f7ff fe41 	bl	15614 <event_wait>
   15992:	2800      	cmp	r0, #0
   15994:	d152      	bne.n	15a3c <pdn_interface_connect+0x1b0>
   15996:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1599a:	f109 0320 	add.w	r3, r9, #32
   1599e:	6950      	ldr	r0, [r2, #20]
   159a0:	4403      	add	r3, r0
   159a2:	6990      	ldr	r0, [r2, #24]
   159a4:	4418      	add	r0, r3
   159a6:	f7fb fe27 	bl	115f8 <nrf_modem_os_alloc>
   159aa:	4605      	mov	r5, r0
   159ac:	2800      	cmp	r0, #0
   159ae:	d147      	bne.n	15a40 <pdn_interface_connect+0x1b4>
   159b0:	200c      	movs	r0, #12
   159b2:	e773      	b.n	1589c <pdn_interface_connect+0x10>
   159b4:	079b      	lsls	r3, r3, #30
   159b6:	bf4c      	ite	mi
   159b8:	4b3d      	ldrmi	r3, [pc, #244]	; (15ab0 <pdn_interface_connect+0x224>)
   159ba:	4b3e      	ldrpl	r3, [pc, #248]	; (15ab4 <pdn_interface_connect+0x228>)
   159bc:	e7a1      	b.n	15902 <pdn_interface_connect+0x76>
   159be:	f44f 7180 	mov.w	r1, #256	; 0x100
   159c2:	4b3d      	ldr	r3, [pc, #244]	; (15ab8 <pdn_interface_connect+0x22c>)
   159c4:	4a34      	ldr	r2, [pc, #208]	; (15a98 <pdn_interface_connect+0x20c>)
   159c6:	4832      	ldr	r0, [pc, #200]	; (15a90 <pdn_interface_connect+0x204>)
   159c8:	f002 f988 	bl	17cdc <sniprintf>
   159cc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   159d0:	4a32      	ldr	r2, [pc, #200]	; (15a9c <pdn_interface_connect+0x210>)
   159d2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   159d6:	4606      	mov	r6, r0
   159d8:	681b      	ldr	r3, [r3, #0]
   159da:	4440      	add	r0, r8
   159dc:	f002 f97e 	bl	17cdc <sniprintf>
   159e0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   159e4:	4406      	add	r6, r0
   159e6:	7c1b      	ldrb	r3, [r3, #16]
   159e8:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   159ec:	2b01      	cmp	r3, #1
   159ee:	bf0c      	ite	eq
   159f0:	4a32      	ldreq	r2, [pc, #200]	; (15abc <pdn_interface_connect+0x230>)
   159f2:	4a33      	ldrne	r2, [pc, #204]	; (15ac0 <pdn_interface_connect+0x234>)
   159f4:	eb08 0006 	add.w	r0, r8, r6
   159f8:	f002 f970 	bl	17cdc <sniprintf>
   159fc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   15a00:	4406      	add	r6, r0
   15a02:	4a28      	ldr	r2, [pc, #160]	; (15aa4 <pdn_interface_connect+0x218>)
   15a04:	3320      	adds	r3, #32
   15a06:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   15a0a:	eb08 0006 	add.w	r0, r8, r6
   15a0e:	f002 f965 	bl	17cdc <sniprintf>
   15a12:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   15a16:	4430      	add	r0, r6
   15a18:	695a      	ldr	r2, [r3, #20]
   15a1a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   15a1e:	3220      	adds	r2, #32
   15a20:	4413      	add	r3, r2
   15a22:	4440      	add	r0, r8
   15a24:	4a27      	ldr	r2, [pc, #156]	; (15ac4 <pdn_interface_connect+0x238>)
   15a26:	f002 f959 	bl	17cdc <sniprintf>
   15a2a:	f7ff fdd5 	bl	155d8 <command_write>
   15a2e:	b928      	cbnz	r0, 15a3c <pdn_interface_connect+0x1b0>
   15a30:	4601      	mov	r1, r0
   15a32:	4620      	mov	r0, r4
   15a34:	f7ff fdee 	bl	15614 <event_wait>
   15a38:	2800      	cmp	r0, #0
   15a3a:	d092      	beq.n	15962 <pdn_interface_connect+0xd6>
   15a3c:	4240      	negs	r0, r0
   15a3e:	e72d      	b.n	1589c <pdn_interface_connect+0x10>
   15a40:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
   15a44:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   15a48:	441a      	add	r2, r3
   15a4a:	3220      	adds	r2, #32
   15a4c:	f006 f81e 	bl	1ba8c <memcpy>
   15a50:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   15a54:	f7fb fde0 	bl	11618 <nrf_modem_os_free>
   15a58:	2303      	movs	r3, #3
   15a5a:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   15a5e:	60ab      	str	r3, [r5, #8]
   15a60:	e9d5 3005 	ldrd	r3, r0, [r5, #20]
   15a64:	4403      	add	r3, r0
   15a66:	3320      	adds	r3, #32
   15a68:	464a      	mov	r2, r9
   15a6a:	4651      	mov	r1, sl
   15a6c:	f8c5 901c 	str.w	r9, [r5, #28]
   15a70:	18e8      	adds	r0, r5, r3
   15a72:	f006 f80b 	bl	1ba8c <memcpy>
   15a76:	4620      	mov	r0, r4
   15a78:	f7ff fe64 	bl	15744 <pdn_id_get>
   15a7c:	2800      	cmp	r0, #0
   15a7e:	d1dd      	bne.n	15a3c <pdn_interface_connect+0x1b0>
   15a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15a84:	f04f 30ff 	mov.w	r0, #4294967295
   15a88:	e7d8      	b.n	15a3c <pdn_interface_connect+0x1b0>
   15a8a:	bf00      	nop
   15a8c:	200155bc 	.word	0x200155bc
   15a90:	20018356 	.word	0x20018356
   15a94:	0001d4b5 	.word	0x0001d4b5
   15a98:	0001c984 	.word	0x0001c984
   15a9c:	0001d4c1 	.word	0x0001d4c1
   15aa0:	0001d4c5 	.word	0x0001d4c5
   15aa4:	0001d4cc 	.word	0x0001d4cc
   15aa8:	0001d4da 	.word	0x0001d4da
   15aac:	0001d392 	.word	0x0001d392
   15ab0:	0001d4d2 	.word	0x0001d4d2
   15ab4:	0001d4d7 	.word	0x0001d4d7
   15ab8:	0001d4e6 	.word	0x0001d4e6
   15abc:	0001d4e3 	.word	0x0001d4e3
   15ac0:	0001d4f1 	.word	0x0001d4f1
   15ac4:	0001d4f4 	.word	0x0001d4f4

00015ac8 <pdn_interface_close>:
   15ac8:	b570      	push	{r4, r5, r6, lr}
   15aca:	f7ff fd69 	bl	155a0 <handle_verify_and_covert>
   15ace:	1e04      	subs	r4, r0, #0
   15ad0:	da05      	bge.n	15ade <pdn_interface_close+0x16>
   15ad2:	4260      	negs	r0, r4
   15ad4:	f7fb fbfc 	bl	112d0 <nrf_modem_os_errno_set>
   15ad8:	f04f 30ff 	mov.w	r0, #4294967295
   15adc:	bd70      	pop	{r4, r5, r6, pc}
   15ade:	4d22      	ldr	r5, [pc, #136]	; (15b68 <pdn_interface_close+0xa0>)
   15ae0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   15ae4:	689b      	ldr	r3, [r3, #8]
   15ae6:	2b03      	cmp	r3, #3
   15ae8:	d11b      	bne.n	15b22 <pdn_interface_close+0x5a>
   15aea:	4e20      	ldr	r6, [pc, #128]	; (15b6c <pdn_interface_close+0xa4>)
   15aec:	f44f 7180 	mov.w	r1, #256	; 0x100
   15af0:	4b1f      	ldr	r3, [pc, #124]	; (15b70 <pdn_interface_close+0xa8>)
   15af2:	4a20      	ldr	r2, [pc, #128]	; (15b74 <pdn_interface_close+0xac>)
   15af4:	4630      	mov	r0, r6
   15af6:	f002 f8f1 	bl	17cdc <sniprintf>
   15afa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   15afe:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   15b02:	681b      	ldr	r3, [r3, #0]
   15b04:	4a1c      	ldr	r2, [pc, #112]	; (15b78 <pdn_interface_close+0xb0>)
   15b06:	4430      	add	r0, r6
   15b08:	f002 f8e8 	bl	17cdc <sniprintf>
   15b0c:	f7ff fd64 	bl	155d8 <command_write>
   15b10:	4601      	mov	r1, r0
   15b12:	b910      	cbnz	r0, 15b1a <pdn_interface_close+0x52>
   15b14:	4620      	mov	r0, r4
   15b16:	f7ff fd7d 	bl	15614 <event_wait>
   15b1a:	2202      	movs	r2, #2
   15b1c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   15b20:	609a      	str	r2, [r3, #8]
   15b22:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   15b26:	689b      	ldr	r3, [r3, #8]
   15b28:	2b02      	cmp	r3, #2
   15b2a:	d117      	bne.n	15b5c <pdn_interface_close+0x94>
   15b2c:	4e0f      	ldr	r6, [pc, #60]	; (15b6c <pdn_interface_close+0xa4>)
   15b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
   15b32:	4b12      	ldr	r3, [pc, #72]	; (15b7c <pdn_interface_close+0xb4>)
   15b34:	4a0f      	ldr	r2, [pc, #60]	; (15b74 <pdn_interface_close+0xac>)
   15b36:	4630      	mov	r0, r6
   15b38:	f002 f8d0 	bl	17cdc <sniprintf>
   15b3c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   15b40:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   15b44:	681b      	ldr	r3, [r3, #0]
   15b46:	4a0c      	ldr	r2, [pc, #48]	; (15b78 <pdn_interface_close+0xb0>)
   15b48:	4430      	add	r0, r6
   15b4a:	f002 f8c7 	bl	17cdc <sniprintf>
   15b4e:	f7ff fd43 	bl	155d8 <command_write>
   15b52:	4601      	mov	r1, r0
   15b54:	b910      	cbnz	r0, 15b5c <pdn_interface_close+0x94>
   15b56:	4620      	mov	r0, r4
   15b58:	f7ff fd5c 	bl	15614 <event_wait>
   15b5c:	4620      	mov	r0, r4
   15b5e:	f7ff fde3 	bl	15728 <connection_free>
   15b62:	2000      	movs	r0, #0
   15b64:	e7ba      	b.n	15adc <pdn_interface_close+0x14>
   15b66:	bf00      	nop
   15b68:	200155bc 	.word	0x200155bc
   15b6c:	20018356 	.word	0x20018356
   15b70:	0001d4f9 	.word	0x0001d4f9
   15b74:	0001c984 	.word	0x0001c984
   15b78:	0001d392 	.word	0x0001d392
   15b7c:	0001d4b5 	.word	0x0001d4b5

00015b80 <pdn_interface_setopt>:
   15b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15b84:	4614      	mov	r4, r2
   15b86:	f240 2202 	movw	r2, #514	; 0x202
   15b8a:	4291      	cmp	r1, r2
   15b8c:	461e      	mov	r6, r3
   15b8e:	9b08      	ldr	r3, [sp, #32]
   15b90:	d101      	bne.n	15b96 <pdn_interface_setopt+0x16>
   15b92:	b106      	cbz	r6, 15b96 <pdn_interface_setopt+0x16>
   15b94:	b92b      	cbnz	r3, 15ba2 <pdn_interface_setopt+0x22>
   15b96:	2016      	movs	r0, #22
   15b98:	f7fb fb9a 	bl	112d0 <nrf_modem_os_errno_set>
   15b9c:	f04f 30ff 	mov.w	r0, #4294967295
   15ba0:	e067      	b.n	15c72 <pdn_interface_setopt+0xf2>
   15ba2:	f7ff fcfd 	bl	155a0 <handle_verify_and_covert>
   15ba6:	1e05      	subs	r5, r0, #0
   15ba8:	da01      	bge.n	15bae <pdn_interface_setopt+0x2e>
   15baa:	4268      	negs	r0, r5
   15bac:	e7f4      	b.n	15b98 <pdn_interface_setopt+0x18>
   15bae:	2c01      	cmp	r4, #1
   15bb0:	d005      	beq.n	15bbe <pdn_interface_setopt+0x3e>
   15bb2:	2c04      	cmp	r4, #4
   15bb4:	d014      	beq.n	15be0 <pdn_interface_setopt+0x60>
   15bb6:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   15bba:	4240      	negs	r0, r0
   15bbc:	e7ec      	b.n	15b98 <pdn_interface_setopt+0x18>
   15bbe:	4b32      	ldr	r3, [pc, #200]	; (15c88 <pdn_interface_setopt+0x108>)
   15bc0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   15bc4:	689a      	ldr	r2, [r3, #8]
   15bc6:	b14a      	cbz	r2, 15bdc <pdn_interface_setopt+0x5c>
   15bc8:	689a      	ldr	r2, [r3, #8]
   15bca:	2a03      	cmp	r2, #3
   15bcc:	d006      	beq.n	15bdc <pdn_interface_setopt+0x5c>
   15bce:	689b      	ldr	r3, [r3, #8]
   15bd0:	2b04      	cmp	r3, #4
   15bd2:	bf14      	ite	ne
   15bd4:	2016      	movne	r0, #22
   15bd6:	200e      	moveq	r0, #14
   15bd8:	4240      	negs	r0, r0
   15bda:	e7ee      	b.n	15bba <pdn_interface_setopt+0x3a>
   15bdc:	200e      	movs	r0, #14
   15bde:	e7fb      	b.n	15bd8 <pdn_interface_setopt+0x58>
   15be0:	4f29      	ldr	r7, [pc, #164]	; (15c88 <pdn_interface_setopt+0x108>)
   15be2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15be6:	689a      	ldr	r2, [r3, #8]
   15be8:	2a00      	cmp	r2, #0
   15bea:	d044      	beq.n	15c76 <pdn_interface_setopt+0xf6>
   15bec:	689a      	ldr	r2, [r3, #8]
   15bee:	2a03      	cmp	r2, #3
   15bf0:	d041      	beq.n	15c76 <pdn_interface_setopt+0xf6>
   15bf2:	689b      	ldr	r3, [r3, #8]
   15bf4:	2b04      	cmp	r3, #4
   15bf6:	d03e      	beq.n	15c76 <pdn_interface_setopt+0xf6>
   15bf8:	4630      	mov	r0, r6
   15bfa:	f7f7 f8c1 	bl	cd80 <strlen>
   15bfe:	f106 0a64 	add.w	sl, r6, #100	; 0x64
   15c02:	f100 0801 	add.w	r8, r0, #1
   15c06:	4650      	mov	r0, sl
   15c08:	f7f7 f8ba 	bl	cd80 <strlen>
   15c0c:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
   15c10:	f100 0901 	add.w	r9, r0, #1
   15c14:	3b01      	subs	r3, #1
   15c16:	2b01      	cmp	r3, #1
   15c18:	d830      	bhi.n	15c7c <pdn_interface_setopt+0xfc>
   15c1a:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
   15c1e:	d82d      	bhi.n	15c7c <pdn_interface_setopt+0xfc>
   15c20:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
   15c24:	d82a      	bhi.n	15c7c <pdn_interface_setopt+0xfc>
   15c26:	eb08 0009 	add.w	r0, r8, r9
   15c2a:	3020      	adds	r0, #32
   15c2c:	f7fb fce4 	bl	115f8 <nrf_modem_os_alloc>
   15c30:	4604      	mov	r4, r0
   15c32:	b330      	cbz	r0, 15c82 <pdn_interface_setopt+0x102>
   15c34:	2220      	movs	r2, #32
   15c36:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
   15c3a:	f005 ff27 	bl	1ba8c <memcpy>
   15c3e:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   15c42:	f7fb fce9 	bl	11618 <nrf_modem_os_free>
   15c46:	e9c4 8905 	strd	r8, r9, [r4, #20]
   15c4a:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
   15c4e:	4641      	mov	r1, r8
   15c50:	4a0e      	ldr	r2, [pc, #56]	; (15c8c <pdn_interface_setopt+0x10c>)
   15c52:	7423      	strb	r3, [r4, #16]
   15c54:	f104 0020 	add.w	r0, r4, #32
   15c58:	4633      	mov	r3, r6
   15c5a:	f002 f83f 	bl	17cdc <sniprintf>
   15c5e:	3021      	adds	r0, #33	; 0x21
   15c60:	4653      	mov	r3, sl
   15c62:	4a0a      	ldr	r2, [pc, #40]	; (15c8c <pdn_interface_setopt+0x10c>)
   15c64:	69a1      	ldr	r1, [r4, #24]
   15c66:	4420      	add	r0, r4
   15c68:	f002 f838 	bl	17cdc <sniprintf>
   15c6c:	2000      	movs	r0, #0
   15c6e:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
   15c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15c76:	f06f 000d 	mvn.w	r0, #13
   15c7a:	e79e      	b.n	15bba <pdn_interface_setopt+0x3a>
   15c7c:	f06f 0015 	mvn.w	r0, #21
   15c80:	e79b      	b.n	15bba <pdn_interface_setopt+0x3a>
   15c82:	f06f 000b 	mvn.w	r0, #11
   15c86:	e798      	b.n	15bba <pdn_interface_setopt+0x3a>
   15c88:	200155bc 	.word	0x200155bc
   15c8c:	0001c984 	.word	0x0001c984

00015c90 <pdn_interface_getopt>:
   15c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c94:	461e      	mov	r6, r3
   15c96:	f240 2302 	movw	r3, #514	; 0x202
   15c9a:	4299      	cmp	r1, r3
   15c9c:	4690      	mov	r8, r2
   15c9e:	9d06      	ldr	r5, [sp, #24]
   15ca0:	d101      	bne.n	15ca6 <pdn_interface_getopt+0x16>
   15ca2:	b106      	cbz	r6, 15ca6 <pdn_interface_getopt+0x16>
   15ca4:	b92d      	cbnz	r5, 15cb2 <pdn_interface_getopt+0x22>
   15ca6:	2016      	movs	r0, #22
   15ca8:	f7fb fb12 	bl	112d0 <nrf_modem_os_errno_set>
   15cac:	f04f 34ff 	mov.w	r4, #4294967295
   15cb0:	e02d      	b.n	15d0e <pdn_interface_getopt+0x7e>
   15cb2:	f7ff fc75 	bl	155a0 <handle_verify_and_covert>
   15cb6:	1e07      	subs	r7, r0, #0
   15cb8:	da01      	bge.n	15cbe <pdn_interface_getopt+0x2e>
   15cba:	4278      	negs	r0, r7
   15cbc:	e7f4      	b.n	15ca8 <pdn_interface_getopt+0x18>
   15cbe:	f1b8 0f02 	cmp.w	r8, #2
   15cc2:	d027      	beq.n	15d14 <pdn_interface_getopt+0x84>
   15cc4:	f1b8 0f03 	cmp.w	r8, #3
   15cc8:	d02e      	beq.n	15d28 <pdn_interface_getopt+0x98>
   15cca:	f1b8 0f01 	cmp.w	r8, #1
   15cce:	d142      	bne.n	15d56 <pdn_interface_getopt+0xc6>
   15cd0:	4b28      	ldr	r3, [pc, #160]	; (15d74 <pdn_interface_getopt+0xe4>)
   15cd2:	6829      	ldr	r1, [r5, #0]
   15cd4:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   15cd8:	689a      	ldr	r2, [r3, #8]
   15cda:	2a00      	cmp	r2, #0
   15cdc:	d03f      	beq.n	15d5e <pdn_interface_getopt+0xce>
   15cde:	689a      	ldr	r2, [r3, #8]
   15ce0:	2a04      	cmp	r2, #4
   15ce2:	d03c      	beq.n	15d5e <pdn_interface_getopt+0xce>
   15ce4:	2907      	cmp	r1, #7
   15ce6:	f001 0203 	and.w	r2, r1, #3
   15cea:	d93b      	bls.n	15d64 <pdn_interface_getopt+0xd4>
   15cec:	2a00      	cmp	r2, #0
   15cee:	d139      	bne.n	15d64 <pdn_interface_getopt+0xd4>
   15cf0:	68db      	ldr	r3, [r3, #12]
   15cf2:	0799      	lsls	r1, r3, #30
   15cf4:	bf42      	ittt	mi
   15cf6:	220a      	movmi	r2, #10
   15cf8:	6032      	strmi	r2, [r6, #0]
   15cfa:	2201      	movmi	r2, #1
   15cfc:	07db      	lsls	r3, r3, #31
   15cfe:	bf42      	ittt	mi
   15d00:	2302      	movmi	r3, #2
   15d02:	f846 3022 	strmi.w	r3, [r6, r2, lsl #2]
   15d06:	3201      	addmi	r2, #1
   15d08:	0092      	lsls	r2, r2, #2
   15d0a:	602a      	str	r2, [r5, #0]
   15d0c:	2400      	movs	r4, #0
   15d0e:	4620      	mov	r0, r4
   15d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15d14:	682b      	ldr	r3, [r5, #0]
   15d16:	b343      	cbz	r3, 15d6a <pdn_interface_getopt+0xda>
   15d18:	4b16      	ldr	r3, [pc, #88]	; (15d74 <pdn_interface_getopt+0xe4>)
   15d1a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   15d1e:	681b      	ldr	r3, [r3, #0]
   15d20:	7033      	strb	r3, [r6, #0]
   15d22:	2301      	movs	r3, #1
   15d24:	602b      	str	r3, [r5, #0]
   15d26:	e7f1      	b.n	15d0c <pdn_interface_getopt+0x7c>
   15d28:	682b      	ldr	r3, [r5, #0]
   15d2a:	b1f3      	cbz	r3, 15d6a <pdn_interface_getopt+0xda>
   15d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
   15d30:	4b11      	ldr	r3, [pc, #68]	; (15d78 <pdn_interface_getopt+0xe8>)
   15d32:	4a12      	ldr	r2, [pc, #72]	; (15d7c <pdn_interface_getopt+0xec>)
   15d34:	4812      	ldr	r0, [pc, #72]	; (15d80 <pdn_interface_getopt+0xf0>)
   15d36:	f001 ffd1 	bl	17cdc <sniprintf>
   15d3a:	f7ff fc4d 	bl	155d8 <command_write>
   15d3e:	4604      	mov	r4, r0
   15d40:	b958      	cbnz	r0, 15d5a <pdn_interface_getopt+0xca>
   15d42:	4641      	mov	r1, r8
   15d44:	4638      	mov	r0, r7
   15d46:	f7ff fc65 	bl	15614 <event_wait>
   15d4a:	2800      	cmp	r0, #0
   15d4c:	db0f      	blt.n	15d6e <pdn_interface_getopt+0xde>
   15d4e:	2301      	movs	r3, #1
   15d50:	7030      	strb	r0, [r6, #0]
   15d52:	602b      	str	r3, [r5, #0]
   15d54:	e7db      	b.n	15d0e <pdn_interface_getopt+0x7e>
   15d56:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   15d5a:	4260      	negs	r0, r4
   15d5c:	e7a4      	b.n	15ca8 <pdn_interface_getopt+0x18>
   15d5e:	f06f 040d 	mvn.w	r4, #13
   15d62:	e7fa      	b.n	15d5a <pdn_interface_getopt+0xca>
   15d64:	f06f 0415 	mvn.w	r4, #21
   15d68:	e7f7      	b.n	15d5a <pdn_interface_getopt+0xca>
   15d6a:	2416      	movs	r4, #22
   15d6c:	e7f5      	b.n	15d5a <pdn_interface_getopt+0xca>
   15d6e:	4604      	mov	r4, r0
   15d70:	e7f3      	b.n	15d5a <pdn_interface_getopt+0xca>
   15d72:	bf00      	nop
   15d74:	200155bc 	.word	0x200155bc
   15d78:	0001d505 	.word	0x0001d505
   15d7c:	0001c984 	.word	0x0001c984
   15d80:	20018356 	.word	0x20018356

00015d84 <pdn_interface_pdn_id_get>:
   15d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d88:	4680      	mov	r8, r0
   15d8a:	460e      	mov	r6, r1
   15d8c:	2900      	cmp	r1, #0
   15d8e:	d043      	beq.n	15e18 <pdn_interface_pdn_id_get+0x94>
   15d90:	4c22      	ldr	r4, [pc, #136]	; (15e1c <pdn_interface_pdn_id_get+0x98>)
   15d92:	2500      	movs	r5, #0
   15d94:	4627      	mov	r7, r4
   15d96:	f854 3b04 	ldr.w	r3, [r4], #4
   15d9a:	2b00      	cmp	r3, #0
   15d9c:	d039      	beq.n	15e12 <pdn_interface_pdn_id_get+0x8e>
   15d9e:	689b      	ldr	r3, [r3, #8]
   15da0:	2b03      	cmp	r3, #3
   15da2:	d136      	bne.n	15e12 <pdn_interface_pdn_id_get+0x8e>
   15da4:	4630      	mov	r0, r6
   15da6:	f7f6 ffeb 	bl	cd80 <strlen>
   15daa:	f854 1c04 	ldr.w	r1, [r4, #-4]
   15dae:	69ca      	ldr	r2, [r1, #28]
   15db0:	4282      	cmp	r2, r0
   15db2:	d12e      	bne.n	15e12 <pdn_interface_pdn_id_get+0x8e>
   15db4:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
   15db8:	4403      	add	r3, r0
   15dba:	3320      	adds	r3, #32
   15dbc:	4630      	mov	r0, r6
   15dbe:	4419      	add	r1, r3
   15dc0:	f005 fea0 	bl	1bb04 <strncmp>
   15dc4:	bb28      	cbnz	r0, 15e12 <pdn_interface_pdn_id_get+0x8e>
   15dc6:	f1b8 0f0a 	cmp.w	r8, #10
   15dca:	d114      	bne.n	15df6 <pdn_interface_pdn_id_get+0x72>
   15dcc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   15dd0:	68db      	ldr	r3, [r3, #12]
   15dd2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   15dd6:	b1e3      	cbz	r3, 15e12 <pdn_interface_pdn_id_get+0x8e>
   15dd8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15ddc:	685c      	ldr	r4, [r3, #4]
   15dde:	3401      	adds	r4, #1
   15de0:	d112      	bne.n	15e08 <pdn_interface_pdn_id_get+0x84>
   15de2:	4628      	mov	r0, r5
   15de4:	f7ff fcae 	bl	15744 <pdn_id_get>
   15de8:	b170      	cbz	r0, 15e08 <pdn_interface_pdn_id_get+0x84>
   15dea:	4240      	negs	r0, r0
   15dec:	f7fb fa70 	bl	112d0 <nrf_modem_os_errno_set>
   15df0:	f04f 30ff 	mov.w	r0, #4294967295
   15df4:	e00b      	b.n	15e0e <pdn_interface_pdn_id_get+0x8a>
   15df6:	f1b8 0f02 	cmp.w	r8, #2
   15dfa:	d10a      	bne.n	15e12 <pdn_interface_pdn_id_get+0x8e>
   15dfc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   15e00:	68db      	ldr	r3, [r3, #12]
   15e02:	f003 0301 	and.w	r3, r3, #1
   15e06:	e7e6      	b.n	15dd6 <pdn_interface_pdn_id_get+0x52>
   15e08:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   15e0c:	6858      	ldr	r0, [r3, #4]
   15e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15e12:	3501      	adds	r5, #1
   15e14:	2d0a      	cmp	r5, #10
   15e16:	d1be      	bne.n	15d96 <pdn_interface_pdn_id_get+0x12>
   15e18:	2016      	movs	r0, #22
   15e1a:	e7e7      	b.n	15dec <pdn_interface_pdn_id_get+0x68>
   15e1c:	200155bc 	.word	0x200155bc

00015e20 <full_dfu_ipc_irq_handler>:
   15e20:	2301      	movs	r3, #1
   15e22:	4a03      	ldr	r2, [pc, #12]	; (15e30 <full_dfu_ipc_irq_handler+0x10>)
   15e24:	6013      	str	r3, [r2, #0]
   15e26:	07c2      	lsls	r2, r0, #31
   15e28:	bf44      	itt	mi
   15e2a:	4a02      	ldrmi	r2, [pc, #8]	; (15e34 <full_dfu_ipc_irq_handler+0x14>)
   15e2c:	7013      	strbmi	r3, [r2, #0]
   15e2e:	4770      	bx	lr
   15e30:	200155e4 	.word	0x200155e4
   15e34:	20018456 	.word	0x20018456

00015e38 <modem_ipc_wait_for_event>:
   15e38:	b538      	push	{r3, r4, r5, lr}
   15e3a:	2300      	movs	r3, #0
   15e3c:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   15e40:	4c0a      	ldr	r4, [pc, #40]	; (15e6c <modem_ipc_wait_for_event+0x34>)
   15e42:	6023      	str	r3, [r4, #0]
   15e44:	6823      	ldr	r3, [r4, #0]
   15e46:	b92b      	cbnz	r3, 15e54 <modem_ipc_wait_for_event+0x1c>
   15e48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   15e4c:	f000 f976 	bl	1613c <nrf_modem_busy_wait_us>
   15e50:	3d01      	subs	r5, #1
   15e52:	d1f7      	bne.n	15e44 <modem_ipc_wait_for_event+0xc>
   15e54:	6823      	ldr	r3, [r4, #0]
   15e56:	b90b      	cbnz	r3, 15e5c <modem_ipc_wait_for_event+0x24>
   15e58:	203c      	movs	r0, #60	; 0x3c
   15e5a:	e005      	b.n	15e68 <modem_ipc_wait_for_event+0x30>
   15e5c:	4b04      	ldr	r3, [pc, #16]	; (15e70 <modem_ipc_wait_for_event+0x38>)
   15e5e:	781b      	ldrb	r3, [r3, #0]
   15e60:	2b01      	cmp	r3, #1
   15e62:	bf14      	ite	ne
   15e64:	2000      	movne	r0, #0
   15e66:	2005      	moveq	r0, #5
   15e68:	bd38      	pop	{r3, r4, r5, pc}
   15e6a:	bf00      	nop
   15e6c:	200155e4 	.word	0x200155e4
   15e70:	20018456 	.word	0x20018456

00015e74 <nrf_modem_full_dfu_setup>:
   15e74:	2200      	movs	r2, #0
   15e76:	2300      	movs	r3, #0
   15e78:	b5f0      	push	{r4, r5, r6, r7, lr}
   15e7a:	4d2d      	ldr	r5, [pc, #180]	; (15f30 <nrf_modem_full_dfu_setup+0xbc>)
   15e7c:	4f2d      	ldr	r7, [pc, #180]	; (15f34 <nrf_modem_full_dfu_setup+0xc0>)
   15e7e:	e9c5 2302 	strd	r2, r3, [r5, #8]
   15e82:	e9c5 2304 	strd	r2, r3, [r5, #16]
   15e86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   15e8a:	4b2b      	ldr	r3, [pc, #172]	; (15f38 <nrf_modem_full_dfu_setup+0xc4>)
   15e8c:	2400      	movs	r4, #0
   15e8e:	601a      	str	r2, [r3, #0]
   15e90:	f100 031c 	add.w	r3, r0, #28
   15e94:	603b      	str	r3, [r7, #0]
   15e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   15e9a:	6043      	str	r3, [r0, #4]
   15e9c:	231c      	movs	r3, #28
   15e9e:	7203      	strb	r3, [r0, #8]
   15ea0:	2320      	movs	r3, #32
   15ea2:	2601      	movs	r6, #1
   15ea4:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   15ea8:	7243      	strb	r3, [r0, #9]
   15eaa:	4b24      	ldr	r3, [pc, #144]	; (15f3c <nrf_modem_full_dfu_setup+0xc8>)
   15eac:	7086      	strb	r6, [r0, #2]
   15eae:	70c2      	strb	r2, [r0, #3]
   15eb0:	7004      	strb	r4, [r0, #0]
   15eb2:	7044      	strb	r4, [r0, #1]
   15eb4:	7284      	strb	r4, [r0, #10]
   15eb6:	72c4      	strb	r4, [r0, #11]
   15eb8:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   15ebc:	702c      	strb	r4, [r5, #0]
   15ebe:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   15ec2:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   15ec6:	4b1e      	ldr	r3, [pc, #120]	; (15f40 <nrf_modem_full_dfu_setup+0xcc>)
   15ec8:	b093      	sub	sp, #76	; 0x4c
   15eca:	4622      	mov	r2, r4
   15ecc:	491d      	ldr	r1, [pc, #116]	; (15f44 <nrf_modem_full_dfu_setup+0xd0>)
   15ece:	4620      	mov	r0, r4
   15ed0:	701c      	strb	r4, [r3, #0]
   15ed2:	f000 fa95 	bl	16400 <nrfx_ipc_init>
   15ed6:	2240      	movs	r2, #64	; 0x40
   15ed8:	4621      	mov	r1, r4
   15eda:	a801      	add	r0, sp, #4
   15edc:	f005 fde3 	bl	1baa6 <memset>
   15ee0:	2302      	movs	r3, #2
   15ee2:	9302      	str	r3, [sp, #8]
   15ee4:	2304      	movs	r3, #4
   15ee6:	9609      	str	r6, [sp, #36]	; 0x24
   15ee8:	2605      	movs	r6, #5
   15eea:	eb0d 0003 	add.w	r0, sp, r3
   15eee:	930b      	str	r3, [sp, #44]	; 0x2c
   15ef0:	9611      	str	r6, [sp, #68]	; 0x44
   15ef2:	f000 fa9d 	bl	16430 <nrfx_ipc_config_load>
   15ef6:	4b14      	ldr	r3, [pc, #80]	; (15f48 <nrf_modem_full_dfu_setup+0xd4>)
   15ef8:	9400      	str	r4, [sp, #0]
   15efa:	683f      	ldr	r7, [r7, #0]
   15efc:	601c      	str	r4, [r3, #0]
   15efe:	681b      	ldr	r3, [r3, #0]
   15f00:	9300      	str	r3, [sp, #0]
   15f02:	9b00      	ldr	r3, [sp, #0]
   15f04:	f7ff ff98 	bl	15e38 <modem_ipc_wait_for_event>
   15f08:	4603      	mov	r3, r0
   15f0a:	b150      	cbz	r0, 15f22 <nrf_modem_full_dfu_setup+0xae>
   15f0c:	2303      	movs	r3, #3
   15f0e:	702b      	strb	r3, [r5, #0]
   15f10:	f7fb f9de 	bl	112d0 <nrf_modem_os_errno_set>
   15f14:	f000 faac 	bl	16470 <nrfx_ipc_uninit>
   15f18:	f04f 33ff 	mov.w	r3, #4294967295
   15f1c:	4618      	mov	r0, r3
   15f1e:	b013      	add	sp, #76	; 0x4c
   15f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15f22:	6839      	ldr	r1, [r7, #0]
   15f24:	4a09      	ldr	r2, [pc, #36]	; (15f4c <nrf_modem_full_dfu_setup+0xd8>)
   15f26:	4291      	cmp	r1, r2
   15f28:	d0f8      	beq.n	15f1c <nrf_modem_full_dfu_setup+0xa8>
   15f2a:	4630      	mov	r0, r6
   15f2c:	e7f0      	b.n	15f10 <nrf_modem_full_dfu_setup+0x9c>
   15f2e:	bf00      	nop
   15f30:	20014a70 	.word	0x20014a70
   15f34:	200155e8 	.word	0x200155e8
   15f38:	200155ec 	.word	0x200155ec
   15f3c:	4002a000 	.word	0x4002a000
   15f40:	20018456 	.word	0x20018456
   15f44:	00015e21 	.word	0x00015e21
   15f48:	40005610 	.word	0x40005610
   15f4c:	a5000001 	.word	0xa5000001

00015f50 <packet_handler_create>:
   15f50:	2801      	cmp	r0, #1
   15f52:	b570      	push	{r4, r5, r6, lr}
   15f54:	4604      	mov	r4, r0
   15f56:	460e      	mov	r6, r1
   15f58:	4615      	mov	r5, r2
   15f5a:	d00f      	beq.n	15f7c <packet_handler_create+0x2c>
   15f5c:	1e84      	subs	r4, r0, #2
   15f5e:	2c01      	cmp	r4, #1
   15f60:	d810      	bhi.n	15f84 <packet_handler_create+0x34>
   15f62:	2010      	movs	r0, #16
   15f64:	f7fb fb48 	bl	115f8 <nrf_modem_os_alloc>
   15f68:	2400      	movs	r4, #0
   15f6a:	b130      	cbz	r0, 15f7a <packet_handler_create+0x2a>
   15f6c:	2218      	movs	r2, #24
   15f6e:	4b08      	ldr	r3, [pc, #32]	; (15f90 <packet_handler_create+0x40>)
   15f70:	6085      	str	r5, [r0, #8]
   15f72:	fb02 3404 	mla	r4, r2, r4, r3
   15f76:	e9c0 4600 	strd	r4, r6, [r0]
   15f7a:	bd70      	pop	{r4, r5, r6, pc}
   15f7c:	2014      	movs	r0, #20
   15f7e:	f7fb fb3b 	bl	115f8 <nrf_modem_os_alloc>
   15f82:	e7f2      	b.n	15f6a <packet_handler_create+0x1a>
   15f84:	200c      	movs	r0, #12
   15f86:	f7fb fb37 	bl	115f8 <nrf_modem_os_alloc>
   15f8a:	2402      	movs	r4, #2
   15f8c:	e7ed      	b.n	15f6a <packet_handler_create+0x1a>
   15f8e:	bf00      	nop
   15f90:	0001c3d4 	.word	0x0001c3d4

00015f94 <modem_off>:
   15f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15f96:	2501      	movs	r5, #1
   15f98:	4c07      	ldr	r4, [pc, #28]	; (15fb8 <modem_off+0x24>)
   15f9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   15f9e:	6065      	str	r5, [r4, #4]
   15fa0:	f000 f8cc 	bl	1613c <nrf_modem_busy_wait_us>
   15fa4:	2300      	movs	r3, #0
   15fa6:	6063      	str	r3, [r4, #4]
   15fa8:	9301      	str	r3, [sp, #4]
   15faa:	6025      	str	r5, [r4, #0]
   15fac:	6823      	ldr	r3, [r4, #0]
   15fae:	9301      	str	r3, [sp, #4]
   15fb0:	9b01      	ldr	r3, [sp, #4]
   15fb2:	b003      	add	sp, #12
   15fb4:	bd30      	pop	{r4, r5, pc}
   15fb6:	bf00      	nop
   15fb8:	40005610 	.word	0x40005610

00015fbc <nrf_modem_init>:
   15fbc:	b570      	push	{r4, r5, r6, lr}
   15fbe:	460d      	mov	r5, r1
   15fc0:	b300      	cbz	r0, 16004 <nrf_modem_init+0x48>
   15fc2:	4e13      	ldr	r6, [pc, #76]	; (16010 <nrf_modem_init+0x54>)
   15fc4:	7832      	ldrb	r2, [r6, #0]
   15fc6:	b9ea      	cbnz	r2, 16004 <nrf_modem_init+0x48>
   15fc8:	2901      	cmp	r1, #1
   15fca:	d113      	bne.n	15ff4 <nrf_modem_init+0x38>
   15fcc:	68c1      	ldr	r1, [r0, #12]
   15fce:	6842      	ldr	r2, [r0, #4]
   15fd0:	440a      	add	r2, r1
   15fd2:	6941      	ldr	r1, [r0, #20]
   15fd4:	440a      	add	r2, r1
   15fd6:	69c1      	ldr	r1, [r0, #28]
   15fd8:	440a      	add	r2, r1
   15fda:	f242 011b 	movw	r1, #8219	; 0x201b
   15fde:	428a      	cmp	r2, r1
   15fe0:	d913      	bls.n	1600a <nrf_modem_init+0x4e>
   15fe2:	6800      	ldr	r0, [r0, #0]
   15fe4:	f7ff ff46 	bl	15e74 <nrf_modem_full_dfu_setup>
   15fe8:	4604      	mov	r4, r0
   15fea:	b130      	cbz	r0, 15ffa <nrf_modem_init+0x3e>
   15fec:	f7ff ffd2 	bl	15f94 <modem_off>
   15ff0:	4620      	mov	r0, r4
   15ff2:	bd70      	pop	{r4, r5, r6, pc}
   15ff4:	f005 f82d 	bl	1b052 <nrf_modem_platform_init>
   15ff8:	e7f6      	b.n	15fe8 <nrf_modem_init+0x2c>
   15ffa:	4b06      	ldr	r3, [pc, #24]	; (16014 <nrf_modem_init+0x58>)
   15ffc:	701d      	strb	r5, [r3, #0]
   15ffe:	2301      	movs	r3, #1
   16000:	7033      	strb	r3, [r6, #0]
   16002:	e7f5      	b.n	15ff0 <nrf_modem_init+0x34>
   16004:	f04f 34ff 	mov.w	r4, #4294967295
   16008:	e7f2      	b.n	15ff0 <nrf_modem_init+0x34>
   1600a:	240c      	movs	r4, #12
   1600c:	e7f0      	b.n	15ff0 <nrf_modem_init+0x34>
   1600e:	bf00      	nop
   16010:	20018457 	.word	0x20018457
   16014:	20018458 	.word	0x20018458

00016018 <nrf_modem_platform_af_method_table_get>:
   16018:	280a      	cmp	r0, #10
   1601a:	b508      	push	{r3, lr}
   1601c:	d80b      	bhi.n	16036 <nrf_modem_platform_af_method_table_get+0x1e>
   1601e:	2800      	cmp	r0, #0
   16020:	d036      	beq.n	16090 <nrf_modem_platform_af_method_table_get+0x78>
   16022:	3801      	subs	r0, #1
   16024:	2809      	cmp	r0, #9
   16026:	d833      	bhi.n	16090 <nrf_modem_platform_af_method_table_get+0x78>
   16028:	e8df f000 	tbb	[pc, r0]
   1602c:	32321429 	.word	0x32321429
   16030:	32323224 	.word	0x32323224
   16034:	1432      	.short	0x1432
   16036:	2866      	cmp	r0, #102	; 0x66
   16038:	d12a      	bne.n	16090 <nrf_modem_platform_af_method_table_get+0x78>
   1603a:	f240 2301 	movw	r3, #513	; 0x201
   1603e:	429a      	cmp	r2, r3
   16040:	d028      	beq.n	16094 <nrf_modem_platform_af_method_table_get+0x7c>
   16042:	f240 2302 	movw	r3, #514	; 0x202
   16046:	429a      	cmp	r2, r3
   16048:	d026      	beq.n	16098 <nrf_modem_platform_af_method_table_get+0x80>
   1604a:	202b      	movs	r0, #43	; 0x2b
   1604c:	f7fb f940 	bl	112d0 <nrf_modem_os_errno_set>
   16050:	2000      	movs	r0, #0
   16052:	e009      	b.n	16068 <nrf_modem_platform_af_method_table_get+0x50>
   16054:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   16058:	d207      	bcs.n	1606a <nrf_modem_platform_af_method_table_get+0x52>
   1605a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1605e:	d207      	bcs.n	16070 <nrf_modem_platform_af_method_table_get+0x58>
   16060:	3a01      	subs	r2, #1
   16062:	2a01      	cmp	r2, #1
   16064:	d8f1      	bhi.n	1604a <nrf_modem_platform_af_method_table_get+0x32>
   16066:	480e      	ldr	r0, [pc, #56]	; (160a0 <nrf_modem_platform_af_method_table_get+0x88>)
   16068:	bd08      	pop	{r3, pc}
   1606a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1606e:	d1ec      	bne.n	1604a <nrf_modem_platform_af_method_table_get+0x32>
   16070:	480c      	ldr	r0, [pc, #48]	; (160a4 <nrf_modem_platform_af_method_table_get+0x8c>)
   16072:	e7f9      	b.n	16068 <nrf_modem_platform_af_method_table_get+0x50>
   16074:	2903      	cmp	r1, #3
   16076:	480c      	ldr	r0, [pc, #48]	; (160a8 <nrf_modem_platform_af_method_table_get+0x90>)
   16078:	bf18      	it	ne
   1607a:	2000      	movne	r0, #0
   1607c:	e7f4      	b.n	16068 <nrf_modem_platform_af_method_table_get+0x50>
   1607e:	f240 2303 	movw	r3, #515	; 0x203
   16082:	429a      	cmp	r2, r3
   16084:	d00a      	beq.n	1609c <nrf_modem_platform_af_method_table_get+0x84>
   16086:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1608a:	d1de      	bne.n	1604a <nrf_modem_platform_af_method_table_get+0x32>
   1608c:	4807      	ldr	r0, [pc, #28]	; (160ac <nrf_modem_platform_af_method_table_get+0x94>)
   1608e:	e7eb      	b.n	16068 <nrf_modem_platform_af_method_table_get+0x50>
   16090:	2016      	movs	r0, #22
   16092:	e7db      	b.n	1604c <nrf_modem_platform_af_method_table_get+0x34>
   16094:	4806      	ldr	r0, [pc, #24]	; (160b0 <nrf_modem_platform_af_method_table_get+0x98>)
   16096:	e7e7      	b.n	16068 <nrf_modem_platform_af_method_table_get+0x50>
   16098:	4806      	ldr	r0, [pc, #24]	; (160b4 <nrf_modem_platform_af_method_table_get+0x9c>)
   1609a:	e7e5      	b.n	16068 <nrf_modem_platform_af_method_table_get+0x50>
   1609c:	4806      	ldr	r0, [pc, #24]	; (160b8 <nrf_modem_platform_af_method_table_get+0xa0>)
   1609e:	e7e3      	b.n	16068 <nrf_modem_platform_af_method_table_get+0x50>
   160a0:	0001c444 	.word	0x0001c444
   160a4:	0001c46c 	.word	0x0001c46c
   160a8:	0001c50c 	.word	0x0001c50c
   160ac:	0001c4e4 	.word	0x0001c4e4
   160b0:	0001c41c 	.word	0x0001c41c
   160b4:	0001c4bc 	.word	0x0001c4bc
   160b8:	0001c494 	.word	0x0001c494

000160bc <nrf_modem_platform_fd_method_table_get>:
   160bc:	b538      	push	{r3, r4, r5, lr}
   160be:	4605      	mov	r5, r0
   160c0:	f7fc ffe8 	bl	13094 <interface_socket_from_handle_get>
   160c4:	4604      	mov	r4, r0
   160c6:	b130      	cbz	r0, 160d6 <nrf_modem_platform_fd_method_table_get+0x1a>
   160c8:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   160cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   160d0:	68c0      	ldr	r0, [r0, #12]
   160d2:	f7ff bfa1 	b.w	16018 <nrf_modem_platform_af_method_table_get>
   160d6:	4b0b      	ldr	r3, [pc, #44]	; (16104 <nrf_modem_platform_fd_method_table_get+0x48>)
   160d8:	429d      	cmp	r5, r3
   160da:	d00c      	beq.n	160f6 <nrf_modem_platform_fd_method_table_get+0x3a>
   160dc:	4a0a      	ldr	r2, [pc, #40]	; (16108 <nrf_modem_platform_fd_method_table_get+0x4c>)
   160de:	0c2b      	lsrs	r3, r5, #16
   160e0:	041b      	lsls	r3, r3, #16
   160e2:	4293      	cmp	r3, r2
   160e4:	d009      	beq.n	160fa <nrf_modem_platform_fd_method_table_get+0x3e>
   160e6:	4b09      	ldr	r3, [pc, #36]	; (1610c <nrf_modem_platform_fd_method_table_get+0x50>)
   160e8:	429d      	cmp	r5, r3
   160ea:	d008      	beq.n	160fe <nrf_modem_platform_fd_method_table_get+0x42>
   160ec:	2009      	movs	r0, #9
   160ee:	f7fb f8ef 	bl	112d0 <nrf_modem_os_errno_set>
   160f2:	4620      	mov	r0, r4
   160f4:	bd38      	pop	{r3, r4, r5, pc}
   160f6:	4c06      	ldr	r4, [pc, #24]	; (16110 <nrf_modem_platform_fd_method_table_get+0x54>)
   160f8:	e7fb      	b.n	160f2 <nrf_modem_platform_fd_method_table_get+0x36>
   160fa:	4c06      	ldr	r4, [pc, #24]	; (16114 <nrf_modem_platform_fd_method_table_get+0x58>)
   160fc:	e7f9      	b.n	160f2 <nrf_modem_platform_fd_method_table_get+0x36>
   160fe:	4c06      	ldr	r4, [pc, #24]	; (16118 <nrf_modem_platform_fd_method_table_get+0x5c>)
   16100:	e7f7      	b.n	160f2 <nrf_modem_platform_fd_method_table_get+0x36>
   16102:	bf00      	nop
   16104:	49765432 	.word	0x49765432
   16108:	789a0000 	.word	0x789a0000
   1610c:	49765443 	.word	0x49765443
   16110:	0001c494 	.word	0x0001c494
   16114:	0001c4bc 	.word	0x0001c4bc
   16118:	0001c4e4 	.word	0x0001c4e4

0001611c <nrf_modem_platform_fcntl>:
   1611c:	b508      	push	{r3, lr}
   1611e:	4b06      	ldr	r3, [pc, #24]	; (16138 <nrf_modem_platform_fcntl+0x1c>)
   16120:	4298      	cmp	r0, r3
   16122:	d003      	beq.n	1612c <nrf_modem_platform_fcntl+0x10>
   16124:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   16128:	f7fd b834 	b.w	13194 <interface_socket_fcntl>
   1612c:	202d      	movs	r0, #45	; 0x2d
   1612e:	f7fb f8cf 	bl	112d0 <nrf_modem_os_errno_set>
   16132:	f04f 30ff 	mov.w	r0, #4294967295
   16136:	bd08      	pop	{r3, pc}
   16138:	49765432 	.word	0x49765432

0001613c <nrf_modem_busy_wait_us>:
   1613c:	b508      	push	{r3, lr}
   1613e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16142:	4358      	muls	r0, r3
   16144:	f7f6 f9bc 	bl	c4c0 <__aeabi_ui2d>
   16148:	4b0a      	ldr	r3, [pc, #40]	; (16174 <nrf_modem_busy_wait_us+0x38>)
   1614a:	2200      	movs	r2, #0
   1614c:	f7f6 fb5c 	bl	c808 <__aeabi_ddiv>
   16150:	f7f6 fc42 	bl	c9d8 <__aeabi_d2f>
   16154:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
   16158:	ee07 0a90 	vmov	s15, r0
   1615c:	eec7 7a87 	vdiv.f32	s15, s15, s14
   16160:	2300      	movs	r3, #0
   16162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   16166:	ee17 2a90 	vmov	r2, s15
   1616a:	4293      	cmp	r3, r2
   1616c:	d100      	bne.n	16170 <nrf_modem_busy_wait_us+0x34>
   1616e:	bd08      	pop	{r3, pc}
   16170:	3301      	adds	r3, #1
   16172:	e7f8      	b.n	16166 <nrf_modem_busy_wait_us+0x2a>
   16174:	402f4000 	.word	0x402f4000

00016178 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   16178:	4a07      	ldr	r2, [pc, #28]	; (16198 <SystemInit+0x20>)
   1617a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1617e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   16182:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   16186:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1618a:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1618e:	4b03      	ldr	r3, [pc, #12]	; (1619c <SystemInit+0x24>)
   16190:	4a03      	ldr	r2, [pc, #12]	; (161a0 <SystemInit+0x28>)
   16192:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   16194:	4770      	bx	lr
   16196:	bf00      	nop
   16198:	e000ed00 	.word	0xe000ed00
   1619c:	2001456c 	.word	0x2001456c
   161a0:	03d09000 	.word	0x03d09000

000161a4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   161a4:	4b04      	ldr	r3, [pc, #16]	; (161b8 <nrfx_clock_init+0x14>)
   161a6:	791a      	ldrb	r2, [r3, #4]
   161a8:	b922      	cbnz	r2, 161b4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   161aa:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   161ac:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   161ae:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   161b0:	4802      	ldr	r0, [pc, #8]	; (161bc <nrfx_clock_init+0x18>)
   161b2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   161b4:	4802      	ldr	r0, [pc, #8]	; (161c0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   161b6:	4770      	bx	lr
   161b8:	200155f0 	.word	0x200155f0
   161bc:	0bad0000 	.word	0x0bad0000
   161c0:	0bad000c 	.word	0x0bad000c

000161c4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   161c4:	b110      	cbz	r0, 161cc <nrfx_clock_start+0x8>
   161c6:	2801      	cmp	r0, #1
   161c8:	d01e      	beq.n	16208 <nrfx_clock_start+0x44>
   161ca:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   161cc:	4b13      	ldr	r3, [pc, #76]	; (1621c <nrfx_clock_start+0x58>)
   161ce:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   161d2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   161d6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   161da:	4619      	mov	r1, r3
   161dc:	d010      	beq.n	16200 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   161de:	f002 0203 	and.w	r2, r2, #3
   161e2:	2a02      	cmp	r2, #2
   161e4:	d10c      	bne.n	16200 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   161e6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   161ea:	2200      	movs	r2, #0
   161ec:	4b0c      	ldr	r3, [pc, #48]	; (16220 <nrfx_clock_start+0x5c>)
   161ee:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   161f0:	2202      	movs	r2, #2
   161f2:	681b      	ldr	r3, [r3, #0]
   161f4:	4b09      	ldr	r3, [pc, #36]	; (1621c <nrfx_clock_start+0x58>)
   161f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   161fa:	2201      	movs	r2, #1
   161fc:	609a      	str	r2, [r3, #8]
}
   161fe:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   16200:	2301      	movs	r3, #1
   16202:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   16206:	e7f0      	b.n	161ea <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16208:	2200      	movs	r2, #0
   1620a:	4b06      	ldr	r3, [pc, #24]	; (16224 <nrfx_clock_start+0x60>)
   1620c:	601a      	str	r2, [r3, #0]
   1620e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   16210:	4b02      	ldr	r3, [pc, #8]	; (1621c <nrfx_clock_start+0x58>)
   16212:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16216:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   16218:	4770      	bx	lr
   1621a:	bf00      	nop
   1621c:	40005000 	.word	0x40005000
   16220:	40005104 	.word	0x40005104
   16224:	40005100 	.word	0x40005100

00016228 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   16228:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1622a:	b110      	cbz	r0, 16232 <nrfx_clock_stop+0xa>
   1622c:	2801      	cmp	r0, #1
   1622e:	d016      	beq.n	1625e <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   16230:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   16232:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16234:	2101      	movs	r1, #1
   16236:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   1623a:	4c16      	ldr	r4, [pc, #88]	; (16294 <nrfx_clock_stop+0x6c>)
   1623c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16240:	4a15      	ldr	r2, [pc, #84]	; (16298 <nrfx_clock_stop+0x70>)
   16242:	6010      	str	r0, [r2, #0]
   16244:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16246:	4a15      	ldr	r2, [pc, #84]	; (1629c <nrfx_clock_stop+0x74>)
   16248:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1624a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1624e:	03db      	lsls	r3, r3, #15
   16250:	d5ee      	bpl.n	16230 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   16252:	2001      	movs	r0, #1
   16254:	f005 f87c 	bl	1b350 <nrfx_busy_wait>
   16258:	3d01      	subs	r5, #1
   1625a:	d1f6      	bne.n	1624a <nrfx_clock_stop+0x22>
   1625c:	e7e8      	b.n	16230 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1625e:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16260:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16264:	4b0e      	ldr	r3, [pc, #56]	; (162a0 <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
   16266:	4c0b      	ldr	r4, [pc, #44]	; (16294 <nrfx_clock_stop+0x6c>)
   16268:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1626c:	601a      	str	r2, [r3, #0]
   1626e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16270:	4b0c      	ldr	r3, [pc, #48]	; (162a4 <nrfx_clock_stop+0x7c>)
   16272:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16274:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16278:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1627c:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16280:	03d2      	lsls	r2, r2, #15
   16282:	d5d5      	bpl.n	16230 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   16284:	2b00      	cmp	r3, #0
   16286:	d0d3      	beq.n	16230 <nrfx_clock_stop+0x8>
   16288:	2001      	movs	r0, #1
   1628a:	f005 f861 	bl	1b350 <nrfx_busy_wait>
   1628e:	3d01      	subs	r5, #1
   16290:	d1f0      	bne.n	16274 <nrfx_clock_stop+0x4c>
   16292:	e7cd      	b.n	16230 <nrfx_clock_stop+0x8>
   16294:	40005000 	.word	0x40005000
   16298:	40005104 	.word	0x40005104
   1629c:	4000500c 	.word	0x4000500c
   162a0:	40005100 	.word	0x40005100
   162a4:	40005004 	.word	0x40005004

000162a8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   162a8:	4b15      	ldr	r3, [pc, #84]	; (16300 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   162aa:	b510      	push	{r4, lr}
   162ac:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   162ae:	b14a      	cbz	r2, 162c4 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   162b0:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   162b2:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   162b4:	6018      	str	r0, [r3, #0]
   162b6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   162b8:	4b12      	ldr	r3, [pc, #72]	; (16304 <nrfx_power_clock_irq_handler+0x5c>)
   162ba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   162be:	4b12      	ldr	r3, [pc, #72]	; (16308 <nrfx_power_clock_irq_handler+0x60>)
   162c0:	681b      	ldr	r3, [r3, #0]
   162c2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   162c4:	4b11      	ldr	r3, [pc, #68]	; (1630c <nrfx_power_clock_irq_handler+0x64>)
   162c6:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   162c8:	b182      	cbz	r2, 162ec <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   162ca:	2200      	movs	r2, #0
   162cc:	601a      	str	r2, [r3, #0]
   162ce:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   162d0:	4b0c      	ldr	r3, [pc, #48]	; (16304 <nrfx_power_clock_irq_handler+0x5c>)
   162d2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   162d6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   162da:	f002 0203 	and.w	r2, r2, #3
   162de:	2a01      	cmp	r2, #1
   162e0:	f04f 0102 	mov.w	r1, #2
   162e4:	d103      	bne.n	162ee <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
   162e6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   162ea:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   162ec:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   162ee:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   162f2:	4b05      	ldr	r3, [pc, #20]	; (16308 <nrfx_power_clock_irq_handler+0x60>)
   162f4:	2001      	movs	r0, #1
}
   162f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   162fa:	681b      	ldr	r3, [r3, #0]
   162fc:	4718      	bx	r3
   162fe:	bf00      	nop
   16300:	40005100 	.word	0x40005100
   16304:	40005000 	.word	0x40005000
   16308:	200155f0 	.word	0x200155f0
   1630c:	40005104 	.word	0x40005104

00016310 <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   16310:	4a0b      	ldr	r2, [pc, #44]	; (16340 <nrfx_dppi_channel_alloc+0x30>)
{
   16312:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   16314:	6816      	ldr	r6, [r2, #0]
   16316:	43f1      	mvns	r1, r6
   16318:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
   1631a:	b171      	cbz	r1, 1633a <nrfx_dppi_channel_alloc+0x2a>
   1631c:	2500      	movs	r5, #0
   1631e:	b2ec      	uxtb	r4, r5
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   16320:	fa21 f304 	lsr.w	r3, r1, r4
   16324:	07db      	lsls	r3, r3, #31
   16326:	f105 0501 	add.w	r5, r5, #1
   1632a:	d5f8      	bpl.n	1631e <nrfx_dppi_channel_alloc+0xe>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   1632c:	2301      	movs	r3, #1
   1632e:	40a3      	lsls	r3, r4
   16330:	4333      	orrs	r3, r6
    *p_channel = channel;
   16332:	7004      	strb	r4, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   16334:	4803      	ldr	r0, [pc, #12]	; (16344 <nrfx_dppi_channel_alloc+0x34>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   16336:	6013      	str	r3, [r2, #0]
}
   16338:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   1633a:	4803      	ldr	r0, [pc, #12]	; (16348 <nrfx_dppi_channel_alloc+0x38>)
   1633c:	e7fc      	b.n	16338 <nrfx_dppi_channel_alloc+0x28>
   1633e:	bf00      	nop
   16340:	200155f8 	.word	0x200155f8
   16344:	0bad0000 	.word	0x0bad0000
   16348:	0bad0002 	.word	0x0bad0002

0001634c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1634c:	2301      	movs	r3, #1
   1634e:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   16352:	f010 0fff 	tst.w	r0, #255	; 0xff
   16356:	d012      	beq.n	1637e <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   16358:	f04f 0320 	mov.w	r3, #32
   1635c:	f3ef 8111 	mrs	r1, BASEPRI
   16360:	f383 8811 	msr	BASEPRI, r3
   16364:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   16368:	4a06      	ldr	r2, [pc, #24]	; (16384 <nrfx_gpiote_channel_free+0x38>)
   1636a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1636c:	ea23 0000 	bic.w	r0, r3, r0
   16370:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   16372:	f381 8811 	msr	BASEPRI, r1
   16376:	f3bf 8f6f 	isb	sy
   1637a:	4803      	ldr	r0, [pc, #12]	; (16388 <nrfx_gpiote_channel_free+0x3c>)
   1637c:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1637e:	4803      	ldr	r0, [pc, #12]	; (1638c <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16380:	4770      	bx	lr
   16382:	bf00      	nop
   16384:	200155fc 	.word	0x200155fc
   16388:	0bad0000 	.word	0x0bad0000
   1638c:	0bad0004 	.word	0x0bad0004

00016390 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   16390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   16394:	22ff      	movs	r2, #255	; 0xff
{
   16396:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   16398:	2601      	movs	r6, #1
{
   1639a:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1639c:	f8df e058 	ldr.w	lr, [pc, #88]	; 163f8 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   163a0:	4814      	ldr	r0, [pc, #80]	; (163f4 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   163a2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 163fc <nrfx_gpiote_channel_alloc+0x6c>
   163a6:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   163a8:	f04f 0120 	mov.w	r1, #32
   163ac:	f3ef 8c11 	mrs	ip, BASEPRI
   163b0:	f381 8811 	msr	BASEPRI, r1
   163b4:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   163b8:	fa22 f103 	lsr.w	r1, r2, r3
   163bc:	07c9      	lsls	r1, r1, #31
   163be:	d50a      	bpl.n	163d6 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   163c0:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   163c4:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   163c8:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   163ca:	bf01      	itttt	eq
   163cc:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   163ce:	4339      	orreq	r1, r7
   163d0:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            *p_channel = ch_idx;
   163d4:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   163d6:	f38c 8811 	msr	BASEPRI, ip
   163da:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   163de:	4540      	cmp	r0, r8
   163e0:	d005      	beq.n	163ee <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   163e2:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   163e6:	439a      	bics	r2, r3
   163e8:	f104 0401 	add.w	r4, r4, #1
   163ec:	d1db      	bne.n	163a6 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   163ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   163f2:	bf00      	nop
   163f4:	0bad0002 	.word	0x0bad0002
   163f8:	200155fc 	.word	0x200155fc
   163fc:	0bad0000 	.word	0x0bad0000

00016400 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   16400:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   16402:	4c08      	ldr	r4, [pc, #32]	; (16424 <nrfx_ipc_init+0x24>)
{
   16404:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   16406:	7923      	ldrb	r3, [r4, #4]
{
   16408:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1640a:	b943      	cbnz	r3, 1641e <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1640c:	202a      	movs	r0, #42	; 0x2a
   1640e:	f7f9 fb91 	bl	fb34 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   16412:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   16414:	4804      	ldr	r0, [pc, #16]	; (16428 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   16416:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   16418:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1641a:	60a5      	str	r5, [r4, #8]
}
   1641c:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1641e:	4803      	ldr	r0, [pc, #12]	; (1642c <nrfx_ipc_init+0x2c>)
   16420:	e7fc      	b.n	1641c <nrfx_ipc_init+0x1c>
   16422:	bf00      	nop
   16424:	2001564c 	.word	0x2001564c
   16428:	0bad0000 	.word	0x0bad0000
   1642c:	0bad000c 	.word	0x0bad000c

00016430 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16430:	2300      	movs	r3, #0
{
   16432:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   16434:	4a0d      	ldr	r2, [pc, #52]	; (1646c <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   16436:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1643a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1643e:	3301      	adds	r3, #1
   16440:	2b08      	cmp	r3, #8
   16442:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   16446:	d1f6      	bne.n	16436 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   16448:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1644a:	4a08      	ldr	r2, [pc, #32]	; (1646c <nrfx_ipc_config_load+0x3c>)
   1644c:	f100 0120 	add.w	r1, r0, #32
   16450:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   16454:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16458:	3301      	adds	r3, #1
   1645a:	2b08      	cmp	r3, #8
   1645c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   16460:	d1f6      	bne.n	16450 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   16462:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   16464:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16468:	bd30      	pop	{r4, r5, pc}
   1646a:	bf00      	nop
   1646c:	4002a000 	.word	0x4002a000

00016470 <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
   16470:	2300      	movs	r3, #0
   16472:	4a14      	ldr	r2, [pc, #80]	; (164c4 <nrfx_ipc_uninit+0x54>)
   16474:	4914      	ldr	r1, [pc, #80]	; (164c8 <nrfx_ipc_uninit+0x58>)
   16476:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1647a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1647e:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   16482:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   16486:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   1648a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   1648e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   16492:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    p_reg->RECEIVE_CNF[index] = channels_mask;
   16496:	f8c1 3590 	str.w	r3, [r1, #1424]	; 0x590
   1649a:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   1649e:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   164a2:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   164a6:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   164aa:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   164ae:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   164b2:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    p_reg->INTENCLR = mask;
   164b6:	f04f 32ff 	mov.w	r2, #4294967295
   164ba:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   164be:	4a03      	ldr	r2, [pc, #12]	; (164cc <nrfx_ipc_uninit+0x5c>)
   164c0:	7113      	strb	r3, [r2, #4]
}
   164c2:	4770      	bx	lr
   164c4:	4002a004 	.word	0x4002a004
   164c8:	4002a000 	.word	0x4002a000
   164cc:	2001564c 	.word	0x2001564c

000164d0 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   164d0:	4b0c      	ldr	r3, [pc, #48]	; (16504 <nrfx_ipc_irq_handler+0x34>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   164d2:	b430      	push	{r4, r5}
   164d4:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = __CLZ(__RBIT(bitmask));
        bitmask &= ~(1UL << event_idx);
   164d8:	2401      	movs	r4, #1
    uint32_t bitmask = events_map;
   164da:	4602      	mov	r2, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   164dc:	2500      	movs	r5, #0
    while (bitmask)
   164de:	b922      	cbnz	r2, 164ea <nrfx_ipc_irq_handler+0x1a>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
}
   164e0:	bc30      	pop	{r4, r5}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   164e2:	4b09      	ldr	r3, [pc, #36]	; (16508 <nrfx_ipc_irq_handler+0x38>)
   164e4:	681a      	ldr	r2, [r3, #0]
   164e6:	6899      	ldr	r1, [r3, #8]
   164e8:	4710      	bx	r2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   164ea:	fa92 f3a2 	rbit	r3, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
   164ee:	fab3 f383 	clz	r3, r3
        bitmask &= ~(1UL << event_idx);
   164f2:	fa04 f103 	lsl.w	r1, r4, r3
   164f6:	ea22 0201 	bic.w	r2, r2, r1
   164fa:	4904      	ldr	r1, [pc, #16]	; (1650c <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   164fc:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   164fe:	50cd      	str	r5, [r1, r3]
}
   16500:	e7ed      	b.n	164de <nrfx_ipc_irq_handler+0xe>
   16502:	bf00      	nop
   16504:	4002a000 	.word	0x4002a000
   16508:	2001564c 	.word	0x2001564c
   1650c:	4002a100 	.word	0x4002a100

00016510 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   16510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16512:	4b10      	ldr	r3, [pc, #64]	; (16554 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   16514:	4f10      	ldr	r7, [pc, #64]	; (16558 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16516:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1651a:	3001      	adds	r0, #1
   1651c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   16520:	42ae      	cmp	r6, r5
   16522:	d800      	bhi.n	16526 <z_sys_init_run_level+0x16>
		}
	}
}
   16524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   16526:	e9d5 3400 	ldrd	r3, r4, [r5]
   1652a:	4620      	mov	r0, r4
   1652c:	4798      	blx	r3
   1652e:	b170      	cbz	r0, 1654e <z_sys_init_run_level+0x3e>
   16530:	b16c      	cbz	r4, 1654e <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   16532:	2301      	movs	r3, #1
				(dev - __device_start));
   16534:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   16536:	4a09      	ldr	r2, [pc, #36]	; (1655c <z_sys_init_run_level+0x4c>)
   16538:	1124      	asrs	r4, r4, #4
   1653a:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   1653c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   16540:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   16544:	fa03 f404 	lsl.w	r4, r3, r4
   16548:	4304      	orrs	r4, r0
   1654a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1654e:	3508      	adds	r5, #8
   16550:	e7e6      	b.n	16520 <z_sys_init_run_level+0x10>
   16552:	bf00      	nop
   16554:	0001c534 	.word	0x0001c534
   16558:	200145dc 	.word	0x200145dc
   1655c:	2001464c 	.word	0x2001464c

00016560 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   16560:	4b08      	ldr	r3, [pc, #32]	; (16584 <z_device_ready+0x24>)
   16562:	1ac0      	subs	r0, r0, r3
   16564:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   16566:	4b08      	ldr	r3, [pc, #32]	; (16588 <z_device_ready+0x28>)
   16568:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   1656a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1656e:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   16570:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   16574:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   16578:	4210      	tst	r0, r2
}
   1657a:	bf0c      	ite	eq
   1657c:	4618      	moveq	r0, r3
   1657e:	2000      	movne	r0, #0
   16580:	4770      	bx	lr
   16582:	bf00      	nop
   16584:	200145dc 	.word	0x200145dc
   16588:	2001464c 	.word	0x2001464c

0001658c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1658c:	4911      	ldr	r1, [pc, #68]	; (165d4 <z_impl_device_get_binding+0x48>)
{
   1658e:	b570      	push	{r4, r5, r6, lr}
   16590:	4605      	mov	r5, r0
   16592:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   16594:	4c10      	ldr	r4, [pc, #64]	; (165d8 <z_impl_device_get_binding+0x4c>)
   16596:	428c      	cmp	r4, r1
   16598:	d104      	bne.n	165a4 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1659a:	4c0f      	ldr	r4, [pc, #60]	; (165d8 <z_impl_device_get_binding+0x4c>)
   1659c:	42b4      	cmp	r4, r6
   1659e:	d10a      	bne.n	165b6 <z_impl_device_get_binding+0x2a>
	return NULL;
   165a0:	2400      	movs	r4, #0
   165a2:	e014      	b.n	165ce <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   165a4:	4620      	mov	r0, r4
   165a6:	f7ff ffdb 	bl	16560 <z_device_ready>
   165aa:	b110      	cbz	r0, 165b2 <z_impl_device_get_binding+0x26>
   165ac:	6823      	ldr	r3, [r4, #0]
   165ae:	42ab      	cmp	r3, r5
   165b0:	d00d      	beq.n	165ce <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   165b2:	3410      	adds	r4, #16
   165b4:	e7ef      	b.n	16596 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   165b6:	4620      	mov	r0, r4
   165b8:	f7ff ffd2 	bl	16560 <z_device_ready>
   165bc:	b908      	cbnz	r0, 165c2 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   165be:	3410      	adds	r4, #16
   165c0:	e7ec      	b.n	1659c <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   165c2:	4628      	mov	r0, r5
   165c4:	6821      	ldr	r1, [r4, #0]
   165c6:	f7f6 fbd1 	bl	cd6c <strcmp>
   165ca:	2800      	cmp	r0, #0
   165cc:	d1f7      	bne.n	165be <z_impl_device_get_binding+0x32>
}
   165ce:	4620      	mov	r0, r4
   165d0:	bd70      	pop	{r4, r5, r6, pc}
   165d2:	bf00      	nop
   165d4:	2001464c 	.word	0x2001464c
   165d8:	200145dc 	.word	0x200145dc

000165dc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   165dc:	4b01      	ldr	r3, [pc, #4]	; (165e4 <z_impl_z_errno+0x8>)
   165de:	6898      	ldr	r0, [r3, #8]
}
   165e0:	3068      	adds	r0, #104	; 0x68
   165e2:	4770      	bx	lr
   165e4:	20015658 	.word	0x20015658

000165e8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   165e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   165ec:	4606      	mov	r6, r0
   165ee:	460f      	mov	r7, r1
	__asm__ volatile(
   165f0:	f04f 0320 	mov.w	r3, #32
   165f4:	f3ef 8811 	mrs	r8, BASEPRI
   165f8:	f383 8811 	msr	BASEPRI, r3
   165fc:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   16600:	f000 fefa 	bl	173f8 <z_impl_k_current_get>
   16604:	4c21      	ldr	r4, [pc, #132]	; (1668c <z_fatal_error+0xa4>)
   16606:	4b22      	ldr	r3, [pc, #136]	; (16690 <z_fatal_error+0xa8>)
   16608:	2e04      	cmp	r6, #4
   1660a:	eba4 0403 	sub.w	r4, r4, r3
   1660e:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   16612:	bf98      	it	ls
   16614:	4a1f      	ldrls	r2, [pc, #124]	; (16694 <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   16616:	ea4f 1484 	mov.w	r4, r4, lsl #6
   1661a:	f044 0301 	orr.w	r3, r4, #1
   1661e:	4605      	mov	r5, r0
	switch (reason) {
   16620:	bf94      	ite	ls
   16622:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   16626:	4a1c      	ldrhi	r2, [pc, #112]	; (16698 <z_fatal_error+0xb0>)
   16628:	f8ad 3000 	strh.w	r3, [sp]
   1662c:	4631      	mov	r1, r6
   1662e:	2300      	movs	r3, #0
   16630:	481a      	ldr	r0, [pc, #104]	; (1669c <z_fatal_error+0xb4>)
   16632:	f002 fb24 	bl	18c7e <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   16636:	b147      	cbz	r7, 1664a <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   16638:	69fb      	ldr	r3, [r7, #28]
   1663a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1663e:	b123      	cbz	r3, 1664a <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   16640:	4817      	ldr	r0, [pc, #92]	; (166a0 <z_fatal_error+0xb8>)
   16642:	f044 0101 	orr.w	r1, r4, #1
   16646:	f002 fadb 	bl	18c00 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1664a:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1664e:	b12d      	cbz	r5, 1665c <z_fatal_error+0x74>
   16650:	4628      	mov	r0, r5
   16652:	f005 f8b2 	bl	1b7ba <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   16656:	b108      	cbz	r0, 1665c <z_fatal_error+0x74>
   16658:	7803      	ldrb	r3, [r0, #0]
   1665a:	b903      	cbnz	r3, 1665e <z_fatal_error+0x76>
		thread_name = "unknown";
   1665c:	4811      	ldr	r0, [pc, #68]	; (166a4 <z_fatal_error+0xbc>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1665e:	f7f8 fb09 	bl	ec74 <log_strdup>
   16662:	4623      	mov	r3, r4
   16664:	4602      	mov	r2, r0
   16666:	4629      	mov	r1, r5
   16668:	480f      	ldr	r0, [pc, #60]	; (166a8 <z_fatal_error+0xc0>)
   1666a:	f002 faef 	bl	18c4c <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1666e:	4639      	mov	r1, r7
   16670:	4630      	mov	r0, r6
   16672:	f7fc f8b1 	bl	127d8 <k_sys_fatal_error_handler>
	__asm__ volatile(
   16676:	f388 8811 	msr	BASEPRI, r8
   1667a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1667e:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   16680:	b002      	add	sp, #8
   16682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16686:	f7f9 be93 	b.w	103b0 <z_impl_k_thread_abort>
   1668a:	bf00      	nop
   1668c:	0001c134 	.word	0x0001c134
   16690:	0001c0d4 	.word	0x0001c0d4
   16694:	0001c54c 	.word	0x0001c54c
   16698:	0001d53a 	.word	0x0001d53a
   1669c:	0001d550 	.word	0x0001d550
   166a0:	0001d578 	.word	0x0001d578
   166a4:	0001d548 	.word	0x0001d548
   166a8:	0001d599 	.word	0x0001d599

000166ac <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   166ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   166ae:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   166b0:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   166b2:	4e15      	ldr	r6, [pc, #84]	; (16708 <idle+0x5c>)
	__asm__ volatile(
   166b4:	f04f 0220 	mov.w	r2, #32
   166b8:	f3ef 8311 	mrs	r3, BASEPRI
   166bc:	f382 8811 	msr	BASEPRI, r2
   166c0:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   166c4:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   166c6:	b188      	cbz	r0, 166ec <idle+0x40>
			cpu->pending_abort = NULL;
   166c8:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   166ca:	f383 8811 	msr	BASEPRI, r3
   166ce:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   166d2:	f000 fcc1 	bl	17058 <z_thread_single_abort>
	__asm__ volatile(
   166d6:	f04f 0320 	mov.w	r3, #32
   166da:	f3ef 8011 	mrs	r0, BASEPRI
   166de:	f383 8811 	msr	BASEPRI, r3
   166e2:	f3bf 8f6f 	isb	sy
   166e6:	f004 ff79 	bl	1b5dc <z_reschedule_irqlock>
			continue;
   166ea:	e7e3      	b.n	166b4 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   166ec:	f005 f87d 	bl	1b7ea <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   166f0:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   166f2:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   166f4:	2802      	cmp	r0, #2
   166f6:	bfd8      	it	le
   166f8:	4608      	movle	r0, r1
   166fa:	f005 f886 	bl	1b80a <z_set_timeout_expiry>
		_kernel.idle = ticks;
   166fe:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   16700:	f7f9 fbae 	bl	fe60 <arch_cpu_idle>
}
   16704:	e7d6      	b.n	166b4 <idle+0x8>
   16706:	bf00      	nop
   16708:	20015658 	.word	0x20015658

0001670c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1670c:	4802      	ldr	r0, [pc, #8]	; (16718 <z_bss_zero+0xc>)
   1670e:	4a03      	ldr	r2, [pc, #12]	; (1671c <z_bss_zero+0x10>)
   16710:	2100      	movs	r1, #0
   16712:	1a12      	subs	r2, r2, r0
   16714:	f005 b9c7 	b.w	1baa6 <memset>
   16718:	200147c8 	.word	0x200147c8
   1671c:	2001846c 	.word	0x2001846c

00016720 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   16720:	2201      	movs	r2, #1
{
   16722:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   16724:	4b09      	ldr	r3, [pc, #36]	; (1674c <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   16726:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   16728:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1672a:	f7ff fef1 	bl	16510 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1672e:	f000 ffc7 	bl	176c0 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   16732:	2003      	movs	r0, #3
   16734:	f7ff feec 	bl	16510 <z_sys_init_run_level>

	z_init_static_threads();
   16738:	f000 ff28 	bl	1758c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1673c:	f7f7 f8b2 	bl	d8a4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   16740:	4a03      	ldr	r2, [pc, #12]	; (16750 <bg_thread_main+0x30>)
   16742:	7b13      	ldrb	r3, [r2, #12]
   16744:	f023 0301 	bic.w	r3, r3, #1
   16748:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1674a:	bd08      	pop	{r3, pc}
   1674c:	20018459 	.word	0x20018459
   16750:	20014b50 	.word	0x20014b50

00016754 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   16754:	b580      	push	{r7, lr}
   16756:	b0b8      	sub	sp, #224	; 0xe0
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   16758:	f7f8 f9f0 	bl	eb3c <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1675c:	4b34      	ldr	r3, [pc, #208]	; (16830 <z_cstart+0xdc>)
	uint32_t msp =
   1675e:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   16762:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   16766:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1676a:	2400      	movs	r4, #0
   1676c:	23e0      	movs	r3, #224	; 0xe0
   1676e:	4d31      	ldr	r5, [pc, #196]	; (16834 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
   16770:	4e31      	ldr	r6, [pc, #196]	; (16838 <z_cstart+0xe4>)
   16772:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   16776:	77ec      	strb	r4, [r5, #31]
   16778:	762c      	strb	r4, [r5, #24]
   1677a:	766c      	strb	r4, [r5, #25]
   1677c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1677e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16780:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 16854 <z_cstart+0x100>
   16784:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   16788:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1678a:	f7f9 fde7 	bl	1035c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1678e:	f7f9 fb61 	bl	fe54 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   16792:	f04f 33ff 	mov.w	r3, #4294967295
   16796:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   16798:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1679a:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1679e:	4d27      	ldr	r5, [pc, #156]	; (1683c <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   167a0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   167a4:	ab06      	add	r3, sp, #24
   167a6:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   167a8:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   167aa:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   167ae:	f7ff feaf 	bl	16510 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   167b2:	2001      	movs	r0, #1
   167b4:	f7ff feac 	bl	16510 <z_sys_init_run_level>
	z_sched_init();
   167b8:	f000 fda2 	bl	17300 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   167bc:	4b20      	ldr	r3, [pc, #128]	; (16840 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   167be:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   167c0:	9305      	str	r3, [sp, #20]
   167c2:	2303      	movs	r3, #3
   167c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   167c8:	491e      	ldr	r1, [pc, #120]	; (16844 <z_cstart+0xf0>)
   167ca:	e9cd 4303 	strd	r4, r3, [sp, #12]
   167ce:	4630      	mov	r0, r6
   167d0:	4653      	mov	r3, sl
   167d2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   167d6:	9400      	str	r4, [sp, #0]
   167d8:	f000 fe7c 	bl	174d4 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   167dc:	7b73      	ldrb	r3, [r6, #13]
   167de:	4680      	mov	r8, r0
   167e0:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   167e4:	4630      	mov	r0, r6
   167e6:	7373      	strb	r3, [r6, #13]
   167e8:	f004 ff3a 	bl	1b660 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   167ec:	230f      	movs	r3, #15
   167ee:	2201      	movs	r2, #1
   167f0:	4f15      	ldr	r7, [pc, #84]	; (16848 <z_cstart+0xf4>)
   167f2:	e9cd 3203 	strd	r3, r2, [sp, #12]
   167f6:	4915      	ldr	r1, [pc, #84]	; (1684c <z_cstart+0xf8>)
   167f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   167fc:	4b14      	ldr	r3, [pc, #80]	; (16850 <z_cstart+0xfc>)
   167fe:	4638      	mov	r0, r7
   16800:	e9cd 4401 	strd	r4, r4, [sp, #4]
   16804:	9405      	str	r4, [sp, #20]
   16806:	9500      	str	r5, [sp, #0]
   16808:	f000 fe64 	bl	174d4 <z_setup_new_thread>
   1680c:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1680e:	4652      	mov	r2, sl
   16810:	f023 0304 	bic.w	r3, r3, #4
   16814:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   16816:	f105 031c 	add.w	r3, r5, #28
   1681a:	4641      	mov	r1, r8
   1681c:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   1681e:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   16822:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   16824:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   16826:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1682a:	f7f9 f9e3 	bl	fbf4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1682e:	bf00      	nop
   16830:	2001a0b0 	.word	0x2001a0b0
   16834:	e000ed00 	.word	0xe000ed00
   16838:	20014b50 	.word	0x20014b50
   1683c:	20015658 	.word	0x20015658
   16840:	0001d5fb 	.word	0x0001d5fb
   16844:	20018f70 	.word	0x20018f70
   16848:	20014a88 	.word	0x20014a88
   1684c:	20019f70 	.word	0x20019f70
   16850:	000166ad 	.word	0x000166ad
   16854:	00016721 	.word	0x00016721

00016858 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   16858:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1685a:	4c06      	ldr	r4, [pc, #24]	; (16874 <statics_init+0x1c>)
   1685c:	4d06      	ldr	r5, [pc, #24]	; (16878 <statics_init+0x20>)
   1685e:	42ac      	cmp	r4, r5
   16860:	d301      	bcc.n	16866 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   16862:	2000      	movs	r0, #0
   16864:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   16866:	4620      	mov	r0, r4
   16868:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1686c:	f004 fd7f 	bl	1b36e <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   16870:	3414      	adds	r4, #20
   16872:	e7f4      	b.n	1685e <statics_init+0x6>
   16874:	20014688 	.word	0x20014688
   16878:	200146b0 	.word	0x200146b0

0001687c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1687c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1687e:	4b0e      	ldr	r3, [pc, #56]	; (168b8 <init_mem_slab_module+0x3c>)
   16880:	4c0e      	ldr	r4, [pc, #56]	; (168bc <init_mem_slab_module+0x40>)
   16882:	42a3      	cmp	r3, r4
   16884:	d301      	bcc.n	1688a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   16886:	2000      	movs	r0, #0
	return rc;
}
   16888:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1688a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1688e:	ea41 0200 	orr.w	r2, r1, r0
   16892:	f012 0203 	ands.w	r2, r2, #3
   16896:	d10b      	bne.n	168b0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   16898:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1689a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1689c:	42aa      	cmp	r2, r5
   1689e:	d101      	bne.n	168a4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   168a0:	331c      	adds	r3, #28
   168a2:	e7ee      	b.n	16882 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   168a4:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   168a6:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   168a8:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   168aa:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   168ac:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   168ae:	e7f5      	b.n	1689c <init_mem_slab_module+0x20>
		return -EINVAL;
   168b0:	f06f 0015 	mvn.w	r0, #21
	return rc;
   168b4:	e7e8      	b.n	16888 <init_mem_slab_module+0xc>
   168b6:	bf00      	nop
   168b8:	20014688 	.word	0x20014688
   168bc:	20014688 	.word	0x20014688

000168c0 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   168c0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   168c2:	460c      	mov	r4, r1
   168c4:	4616      	mov	r6, r2
   168c6:	461f      	mov	r7, r3
   168c8:	f04f 0320 	mov.w	r3, #32
   168cc:	f3ef 8111 	mrs	r1, BASEPRI
   168d0:	f383 8811 	msr	BASEPRI, r3
   168d4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   168d8:	6943      	ldr	r3, [r0, #20]
   168da:	b15b      	cbz	r3, 168f4 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   168dc:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   168de:	681b      	ldr	r3, [r3, #0]
   168e0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   168e2:	6983      	ldr	r3, [r0, #24]
   168e4:	3301      	adds	r3, #1
   168e6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   168e8:	2000      	movs	r0, #0
	__asm__ volatile(
   168ea:	f381 8811 	msr	BASEPRI, r1
   168ee:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   168f2:	e011      	b.n	16918 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   168f4:	ea56 0207 	orrs.w	r2, r6, r7
   168f8:	d103      	bne.n	16902 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   168fa:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   168fe:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   16900:	e7f3      	b.n	168ea <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   16902:	4602      	mov	r2, r0
   16904:	e9cd 6700 	strd	r6, r7, [sp]
   16908:	4804      	ldr	r0, [pc, #16]	; (1691c <k_mem_slab_alloc+0x5c>)
   1690a:	f000 fc67 	bl	171dc <z_pend_curr>
		if (result == 0) {
   1690e:	b918      	cbnz	r0, 16918 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   16910:	4b03      	ldr	r3, [pc, #12]	; (16920 <k_mem_slab_alloc+0x60>)
   16912:	689b      	ldr	r3, [r3, #8]
   16914:	695b      	ldr	r3, [r3, #20]
   16916:	6023      	str	r3, [r4, #0]
}
   16918:	b002      	add	sp, #8
   1691a:	bdd0      	pop	{r4, r6, r7, pc}
   1691c:	2001845a 	.word	0x2001845a
   16920:	20015658 	.word	0x20015658

00016924 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   16924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16926:	4604      	mov	r4, r0
   16928:	460d      	mov	r5, r1
	__asm__ volatile(
   1692a:	f04f 0320 	mov.w	r3, #32
   1692e:	f3ef 8611 	mrs	r6, BASEPRI
   16932:	f383 8811 	msr	BASEPRI, r3
   16936:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1693a:	6947      	ldr	r7, [r0, #20]
   1693c:	b977      	cbnz	r7, 1695c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1693e:	f004 feea 	bl	1b716 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   16942:	b158      	cbz	r0, 1695c <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   16944:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   16946:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1694a:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1694c:	f004 fe88 	bl	1b660 <z_ready_thread>
			z_reschedule(&lock, key);
   16950:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   16952:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   16956:	4808      	ldr	r0, [pc, #32]	; (16978 <k_mem_slab_free+0x54>)
   16958:	f000 b9f8 	b.w	16d4c <z_reschedule>
	**(char ***) mem = slab->free_list;
   1695c:	682b      	ldr	r3, [r5, #0]
   1695e:	6962      	ldr	r2, [r4, #20]
   16960:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   16962:	682b      	ldr	r3, [r5, #0]
   16964:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   16966:	69a3      	ldr	r3, [r4, #24]
   16968:	3b01      	subs	r3, #1
   1696a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1696c:	f386 8811 	msr	BASEPRI, r6
   16970:	f3bf 8f6f 	isb	sy
}
   16974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16976:	bf00      	nop
   16978:	2001845a 	.word	0x2001845a

0001697c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   1697c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16980:	4604      	mov	r4, r0
   16982:	4616      	mov	r6, r2
   16984:	461f      	mov	r7, r3
   16986:	b085      	sub	sp, #20

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   16988:	f100 0908 	add.w	r9, r0, #8
	__asm__ volatile(
   1698c:	f04f 0320 	mov.w	r3, #32
   16990:	f3ef 8811 	mrs	r8, BASEPRI
   16994:	f383 8811 	msr	BASEPRI, r3
   16998:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   1699c:	6a02      	ldr	r2, [r0, #32]
   1699e:	68c3      	ldr	r3, [r0, #12]
   169a0:	429a      	cmp	r2, r3
   169a2:	d22c      	bcs.n	169fe <z_impl_k_msgq_put+0x82>
   169a4:	9103      	str	r1, [sp, #12]
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   169a6:	f004 feb6 	bl	1b716 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   169aa:	68a2      	ldr	r2, [r4, #8]
   169ac:	4605      	mov	r5, r0
   169ae:	9903      	ldr	r1, [sp, #12]
   169b0:	b180      	cbz	r0, 169d4 <z_impl_k_msgq_put+0x58>
   169b2:	2400      	movs	r4, #0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   169b4:	6940      	ldr	r0, [r0, #20]
   169b6:	f005 f869 	bl	1ba8c <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   169ba:	4628      	mov	r0, r5
   169bc:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
   169c0:	f004 fe4e 	bl	1b660 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   169c4:	4648      	mov	r0, r9
   169c6:	4641      	mov	r1, r8
   169c8:	f000 f9c0 	bl	16d4c <z_reschedule>
			return 0;
   169cc:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   169ce:	b005      	add	sp, #20
   169d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   169d4:	69e0      	ldr	r0, [r4, #28]
   169d6:	f005 f859 	bl	1ba8c <memcpy>
		result = 0;
   169da:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   169dc:	69e3      	ldr	r3, [r4, #28]
   169de:	68a2      	ldr	r2, [r4, #8]
   169e0:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   169e2:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   169e4:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   169e6:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   169e8:	bf04      	itt	eq
   169ea:	6923      	ldreq	r3, [r4, #16]
   169ec:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   169ee:	6a23      	ldr	r3, [r4, #32]
   169f0:	3301      	adds	r3, #1
   169f2:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   169f4:	f388 8811 	msr	BASEPRI, r8
   169f8:	f3bf 8f6f 	isb	sy
	return result;
   169fc:	e7e7      	b.n	169ce <z_impl_k_msgq_put+0x52>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   169fe:	ea56 0307 	orrs.w	r3, r6, r7
   16a02:	d00a      	beq.n	16a1a <z_impl_k_msgq_put+0x9e>
		_current->base.swap_data = (void *) data;
   16a04:	4b06      	ldr	r3, [pc, #24]	; (16a20 <z_impl_k_msgq_put+0xa4>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   16a06:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
   16a08:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   16a0a:	4648      	mov	r0, r9
		_current->base.swap_data = (void *) data;
   16a0c:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   16a0e:	4641      	mov	r1, r8
   16a10:	e9cd 6700 	strd	r6, r7, [sp]
   16a14:	f000 fbe2 	bl	171dc <z_pend_curr>
   16a18:	e7d9      	b.n	169ce <z_impl_k_msgq_put+0x52>
		result = -ENOMSG;
   16a1a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   16a1e:	e7e9      	b.n	169f4 <z_impl_k_msgq_put+0x78>
   16a20:	20015658 	.word	0x20015658

00016a24 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   16a24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   16a28:	4604      	mov	r4, r0
   16a2a:	4616      	mov	r6, r2
   16a2c:	4608      	mov	r0, r1
   16a2e:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   16a30:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   16a34:	f04f 0320 	mov.w	r3, #32
   16a38:	f3ef 8811 	mrs	r8, BASEPRI
   16a3c:	f383 8811 	msr	BASEPRI, r3
   16a40:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   16a44:	6a23      	ldr	r3, [r4, #32]
   16a46:	2b00      	cmp	r3, #0
   16a48:	d033      	beq.n	16ab2 <z_impl_k_msgq_get+0x8e>
   16a4a:	68a2      	ldr	r2, [r4, #8]
   16a4c:	69a1      	ldr	r1, [r4, #24]
   16a4e:	f005 f81d 	bl	1ba8c <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   16a52:	69a3      	ldr	r3, [r4, #24]
   16a54:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   16a56:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   16a58:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   16a5a:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   16a5c:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   16a5e:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   16a60:	bf04      	itt	eq
   16a62:	6923      	ldreq	r3, [r4, #16]
   16a64:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   16a66:	6a23      	ldr	r3, [r4, #32]
   16a68:	3b01      	subs	r3, #1
   16a6a:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   16a6c:	f004 fe53 	bl	1b716 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   16a70:	4605      	mov	r5, r0
   16a72:	b370      	cbz	r0, 16ad2 <z_impl_k_msgq_get+0xae>
   16a74:	6941      	ldr	r1, [r0, #20]
   16a76:	68a2      	ldr	r2, [r4, #8]
   16a78:	69e0      	ldr	r0, [r4, #28]
   16a7a:	f005 f807 	bl	1ba8c <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   16a7e:	69e3      	ldr	r3, [r4, #28]
   16a80:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   16a82:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   16a84:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   16a86:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   16a88:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   16a8a:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   16a8c:	bf04      	itt	eq
   16a8e:	6923      	ldreq	r3, [r4, #16]
   16a90:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   16a92:	6a23      	ldr	r3, [r4, #32]
   16a94:	3301      	adds	r3, #1
   16a96:	6223      	str	r3, [r4, #32]
   16a98:	2400      	movs	r4, #0
   16a9a:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
			z_ready_thread(pending_thread);
   16a9e:	f004 fddf 	bl	1b660 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   16aa2:	4648      	mov	r0, r9
   16aa4:	4641      	mov	r1, r8
   16aa6:	f000 f951 	bl	16d4c <z_reschedule>
			return 0;
   16aaa:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   16aac:	b003      	add	sp, #12
   16aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16ab2:	ea56 0307 	orrs.w	r3, r6, r7
   16ab6:	d00a      	beq.n	16ace <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   16ab8:	4b08      	ldr	r3, [pc, #32]	; (16adc <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   16aba:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   16abc:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   16abe:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   16ac0:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   16ac2:	4641      	mov	r1, r8
   16ac4:	e9cd 6700 	strd	r6, r7, [sp]
   16ac8:	f000 fb88 	bl	171dc <z_pend_curr>
   16acc:	e7ee      	b.n	16aac <z_impl_k_msgq_get+0x88>
		result = -ENOMSG;
   16ace:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   16ad2:	f388 8811 	msr	BASEPRI, r8
   16ad6:	f3bf 8f6f 	isb	sy
	return result;
   16ada:	e7e7      	b.n	16aac <z_impl_k_msgq_get+0x88>
   16adc:	20015658 	.word	0x20015658

00016ae0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   16ae0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16ae4:	4604      	mov	r4, r0
   16ae6:	4616      	mov	r6, r2
   16ae8:	461f      	mov	r7, r3
	__asm__ volatile(
   16aea:	f04f 0320 	mov.w	r3, #32
   16aee:	f3ef 8811 	mrs	r8, BASEPRI
   16af2:	f383 8811 	msr	BASEPRI, r3
   16af6:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   16afa:	68c3      	ldr	r3, [r0, #12]
   16afc:	4a32      	ldr	r2, [pc, #200]	; (16bc8 <z_impl_k_mutex_lock+0xe8>)
   16afe:	b16b      	cbz	r3, 16b1c <z_impl_k_mutex_lock+0x3c>
   16b00:	6880      	ldr	r0, [r0, #8]
   16b02:	6891      	ldr	r1, [r2, #8]
   16b04:	4288      	cmp	r0, r1
   16b06:	d019      	beq.n	16b3c <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   16b08:	ea56 0307 	orrs.w	r3, r6, r7
   16b0c:	d118      	bne.n	16b40 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   16b0e:	f388 8811 	msr	BASEPRI, r8
   16b12:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   16b16:	f06f 000f 	mvn.w	r0, #15
   16b1a:	e00c      	b.n	16b36 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   16b1c:	6891      	ldr	r1, [r2, #8]
   16b1e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   16b22:	3301      	adds	r3, #1
   16b24:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   16b26:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   16b28:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   16b2a:	60a3      	str	r3, [r4, #8]
   16b2c:	f388 8811 	msr	BASEPRI, r8
   16b30:	f3bf 8f6f 	isb	sy
		return 0;
   16b34:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   16b36:	b002      	add	sp, #8
   16b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   16b3c:	6921      	ldr	r1, [r4, #16]
   16b3e:	e7f0      	b.n	16b22 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   16b40:	f990 300e 	ldrsb.w	r3, [r0, #14]
   16b44:	f991 100e 	ldrsb.w	r1, [r1, #14]
   16b48:	4299      	cmp	r1, r3
   16b4a:	bfa8      	it	ge
   16b4c:	4619      	movge	r1, r3
   16b4e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   16b52:	428b      	cmp	r3, r1
   16b54:	dd2c      	ble.n	16bb0 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   16b56:	f000 fb8f 	bl	17278 <z_set_prio>
   16b5a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   16b5c:	4622      	mov	r2, r4
   16b5e:	4641      	mov	r1, r8
   16b60:	e9cd 6700 	strd	r6, r7, [sp]
   16b64:	4819      	ldr	r0, [pc, #100]	; (16bcc <z_impl_k_mutex_lock+0xec>)
   16b66:	f000 fb39 	bl	171dc <z_pend_curr>
	if (got_mutex == 0) {
   16b6a:	2800      	cmp	r0, #0
   16b6c:	d0e3      	beq.n	16b36 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   16b6e:	f04f 0320 	mov.w	r3, #32
   16b72:	f3ef 8611 	mrs	r6, BASEPRI
   16b76:	f383 8811 	msr	BASEPRI, r3
   16b7a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   16b7e:	6823      	ldr	r3, [r4, #0]
   16b80:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16b82:	42a3      	cmp	r3, r4
   16b84:	d007      	beq.n	16b96 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   16b86:	b133      	cbz	r3, 16b96 <z_impl_k_mutex_lock+0xb6>
   16b88:	f993 300e 	ldrsb.w	r3, [r3, #14]
   16b8c:	4299      	cmp	r1, r3
   16b8e:	bfa8      	it	ge
   16b90:	4619      	movge	r1, r3
   16b92:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   16b96:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   16b98:	f990 300e 	ldrsb.w	r3, [r0, #14]
   16b9c:	4299      	cmp	r1, r3
   16b9e:	d109      	bne.n	16bb4 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   16ba0:	b16d      	cbz	r5, 16bbe <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   16ba2:	4631      	mov	r1, r6
   16ba4:	4809      	ldr	r0, [pc, #36]	; (16bcc <z_impl_k_mutex_lock+0xec>)
   16ba6:	f000 f8d1 	bl	16d4c <z_reschedule>
	return -EAGAIN;
   16baa:	f06f 000a 	mvn.w	r0, #10
   16bae:	e7c2      	b.n	16b36 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   16bb0:	2500      	movs	r5, #0
   16bb2:	e7d3      	b.n	16b5c <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   16bb4:	f000 fb60 	bl	17278 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   16bb8:	2800      	cmp	r0, #0
   16bba:	d1f2      	bne.n	16ba2 <z_impl_k_mutex_lock+0xc2>
   16bbc:	e7f0      	b.n	16ba0 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   16bbe:	f386 8811 	msr	BASEPRI, r6
   16bc2:	f3bf 8f6f 	isb	sy
   16bc6:	e7f0      	b.n	16baa <z_impl_k_mutex_lock+0xca>
   16bc8:	20015658 	.word	0x20015658
   16bcc:	2001845a 	.word	0x2001845a

00016bd0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   16bd0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   16bd2:	6883      	ldr	r3, [r0, #8]
{
   16bd4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   16bd6:	2b00      	cmp	r3, #0
   16bd8:	d037      	beq.n	16c4a <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   16bda:	4a1f      	ldr	r2, [pc, #124]	; (16c58 <z_impl_k_mutex_unlock+0x88>)
   16bdc:	6892      	ldr	r2, [r2, #8]
   16bde:	4293      	cmp	r3, r2
   16be0:	d136      	bne.n	16c50 <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   16be2:	7bda      	ldrb	r2, [r3, #15]
   16be4:	3a01      	subs	r2, #1
   16be6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   16be8:	68c3      	ldr	r3, [r0, #12]
   16bea:	2b01      	cmp	r3, #1
   16bec:	d005      	beq.n	16bfa <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   16bee:	3b01      	subs	r3, #1
   16bf0:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   16bf2:	f000 f90f 	bl	16e14 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   16bf6:	2000      	movs	r0, #0
}
   16bf8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   16bfa:	f04f 0320 	mov.w	r3, #32
   16bfe:	f3ef 8511 	mrs	r5, BASEPRI
   16c02:	f383 8811 	msr	BASEPRI, r3
   16c06:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   16c0a:	6901      	ldr	r1, [r0, #16]
   16c0c:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   16c0e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   16c12:	4299      	cmp	r1, r3
   16c14:	d001      	beq.n	16c1a <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   16c16:	f000 fb2f 	bl	17278 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   16c1a:	4620      	mov	r0, r4
   16c1c:	f004 fd7b 	bl	1b716 <z_unpend_first_thread>
	mutex->owner = new_owner;
   16c20:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   16c22:	b160      	cbz	r0, 16c3e <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   16c24:	f990 200e 	ldrsb.w	r2, [r0, #14]
   16c28:	6122      	str	r2, [r4, #16]
   16c2a:	2200      	movs	r2, #0
   16c2c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   16c30:	f004 fd16 	bl	1b660 <z_ready_thread>
		z_reschedule(&lock, key);
   16c34:	4629      	mov	r1, r5
   16c36:	4809      	ldr	r0, [pc, #36]	; (16c5c <z_impl_k_mutex_unlock+0x8c>)
   16c38:	f000 f888 	bl	16d4c <z_reschedule>
   16c3c:	e7d9      	b.n	16bf2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   16c3e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   16c40:	f385 8811 	msr	BASEPRI, r5
   16c44:	f3bf 8f6f 	isb	sy
   16c48:	e7d3      	b.n	16bf2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   16c4a:	f06f 0015 	mvn.w	r0, #21
   16c4e:	e7d3      	b.n	16bf8 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   16c50:	f04f 30ff 	mov.w	r0, #4294967295
   16c54:	e7d0      	b.n	16bf8 <z_impl_k_mutex_unlock+0x28>
   16c56:	bf00      	nop
   16c58:	20015658 	.word	0x20015658
   16c5c:	2001845a 	.word	0x2001845a

00016c60 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   16c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16c62:	4616      	mov	r6, r2
   16c64:	461f      	mov	r7, r3
	__asm__ volatile(
   16c66:	f04f 0320 	mov.w	r3, #32
   16c6a:	f3ef 8511 	mrs	r5, BASEPRI
   16c6e:	f383 8811 	msr	BASEPRI, r3
   16c72:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   16c76:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   16c78:	b19c      	cbz	r4, 16ca2 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   16c7a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   16c7c:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   16c7e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   16c82:	4294      	cmp	r4, r2
	list->head = node;
   16c84:	6003      	str	r3, [r0, #0]
	list->tail = node;
   16c86:	bf08      	it	eq
   16c88:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   16c8a:	2101      	movs	r1, #1
   16c8c:	4620      	mov	r0, r4
   16c8e:	f004 fc62 	bl	1b556 <z_queue_node_peek>
   16c92:	4604      	mov	r4, r0
	__asm__ volatile(
   16c94:	f385 8811 	msr	BASEPRI, r5
   16c98:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   16c9c:	4620      	mov	r0, r4
   16c9e:	b003      	add	sp, #12
   16ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16ca2:	ea56 0307 	orrs.w	r3, r6, r7
   16ca6:	d0f5      	beq.n	16c94 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   16ca8:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   16cac:	4629      	mov	r1, r5
   16cae:	4610      	mov	r0, r2
   16cb0:	e9cd 6700 	strd	r6, r7, [sp]
   16cb4:	f000 fa92 	bl	171dc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   16cb8:	2800      	cmp	r0, #0
   16cba:	d1ef      	bne.n	16c9c <z_impl_k_queue_get+0x3c>
   16cbc:	4b01      	ldr	r3, [pc, #4]	; (16cc4 <z_impl_k_queue_get+0x64>)
   16cbe:	689b      	ldr	r3, [r3, #8]
   16cc0:	695c      	ldr	r4, [r3, #20]
   16cc2:	e7eb      	b.n	16c9c <z_impl_k_queue_get+0x3c>
   16cc4:	20015658 	.word	0x20015658

00016cc8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   16cc8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   16cca:	4c08      	ldr	r4, [pc, #32]	; (16cec <z_reset_time_slice+0x24>)
   16ccc:	6823      	ldr	r3, [r4, #0]
   16cce:	b15b      	cbz	r3, 16ce8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   16cd0:	f7f8 fee0 	bl	fa94 <z_clock_elapsed>
   16cd4:	6822      	ldr	r2, [r4, #0]
   16cd6:	4906      	ldr	r1, [pc, #24]	; (16cf0 <z_reset_time_slice+0x28>)
   16cd8:	4410      	add	r0, r2
   16cda:	6148      	str	r0, [r1, #20]
		z_set_timeout_expiry(slice_time, false);
	}
}
   16cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   16ce0:	2100      	movs	r1, #0
   16ce2:	4610      	mov	r0, r2
   16ce4:	f004 bd91 	b.w	1b80a <z_set_timeout_expiry>
}
   16ce8:	bd10      	pop	{r4, pc}
   16cea:	bf00      	nop
   16cec:	20015698 	.word	0x20015698
   16cf0:	20015658 	.word	0x20015658

00016cf4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   16cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16cf6:	460c      	mov	r4, r1
	__asm__ volatile(
   16cf8:	f04f 0320 	mov.w	r3, #32
   16cfc:	f3ef 8511 	mrs	r5, BASEPRI
   16d00:	f383 8811 	msr	BASEPRI, r3
   16d04:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   16d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   16d0c:	f240 36e7 	movw	r6, #999	; 0x3e7
   16d10:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   16d12:	2200      	movs	r2, #0
   16d14:	fbe1 6700 	umlal	r6, r7, r1, r0
   16d18:	4b09      	ldr	r3, [pc, #36]	; (16d40 <k_sched_time_slice_set+0x4c>)
   16d1a:	4630      	mov	r0, r6
   16d1c:	615a      	str	r2, [r3, #20]
   16d1e:	4639      	mov	r1, r7
   16d20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16d24:	2300      	movs	r3, #0
   16d26:	f7f5 fea7 	bl	ca78 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   16d2a:	4b06      	ldr	r3, [pc, #24]	; (16d44 <k_sched_time_slice_set+0x50>)
   16d2c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   16d2e:	4b06      	ldr	r3, [pc, #24]	; (16d48 <k_sched_time_slice_set+0x54>)
   16d30:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   16d32:	f7ff ffc9 	bl	16cc8 <z_reset_time_slice>
	__asm__ volatile(
   16d36:	f385 8811 	msr	BASEPRI, r5
   16d3a:	f3bf 8f6f 	isb	sy
	}
}
   16d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16d40:	20015658 	.word	0x20015658
   16d44:	20015698 	.word	0x20015698
   16d48:	20015694 	.word	0x20015694

00016d4c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   16d4c:	b949      	cbnz	r1, 16d62 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16d4e:	f3ef 8005 	mrs	r0, IPSR
   16d52:	b930      	cbnz	r0, 16d62 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   16d54:	4b05      	ldr	r3, [pc, #20]	; (16d6c <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   16d56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   16d58:	689b      	ldr	r3, [r3, #8]
   16d5a:	429a      	cmp	r2, r3
   16d5c:	d001      	beq.n	16d62 <z_reschedule+0x16>
	ret = arch_swap(key);
   16d5e:	f7f8 becd 	b.w	fafc <arch_swap>
   16d62:	f381 8811 	msr	BASEPRI, r1
   16d66:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   16d6a:	4770      	bx	lr
   16d6c:	20015658 	.word	0x20015658

00016d70 <k_sched_lock>:
	__asm__ volatile(
   16d70:	f04f 0320 	mov.w	r3, #32
   16d74:	f3ef 8111 	mrs	r1, BASEPRI
   16d78:	f383 8811 	msr	BASEPRI, r3
   16d7c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   16d80:	4b04      	ldr	r3, [pc, #16]	; (16d94 <k_sched_lock+0x24>)
   16d82:	689a      	ldr	r2, [r3, #8]
   16d84:	7bd3      	ldrb	r3, [r2, #15]
   16d86:	3b01      	subs	r3, #1
   16d88:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   16d8a:	f381 8811 	msr	BASEPRI, r1
   16d8e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   16d92:	4770      	bx	lr
   16d94:	20015658 	.word	0x20015658

00016d98 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   16d98:	4b09      	ldr	r3, [pc, #36]	; (16dc0 <z_priq_dumb_remove+0x28>)
   16d9a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   16d9e:	4282      	cmp	r2, r0
   16da0:	d105      	bne.n	16dae <z_priq_dumb_remove+0x16>
   16da2:	689b      	ldr	r3, [r3, #8]
   16da4:	428b      	cmp	r3, r1
   16da6:	d102      	bne.n	16dae <z_priq_dumb_remove+0x16>
   16da8:	7b4b      	ldrb	r3, [r1, #13]
   16daa:	06db      	lsls	r3, r3, #27
   16dac:	d106      	bne.n	16dbc <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   16dae:	e9d1 3200 	ldrd	r3, r2, [r1]
   16db2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   16db4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16db6:	2300      	movs	r3, #0
	node->prev = NULL;
   16db8:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   16dbc:	4770      	bx	lr
   16dbe:	bf00      	nop
   16dc0:	20015658 	.word	0x20015658

00016dc4 <update_cache>:
{
   16dc4:	b538      	push	{r3, r4, r5, lr}
   16dc6:	4c12      	ldr	r4, [pc, #72]	; (16e10 <update_cache+0x4c>)
   16dc8:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   16dca:	6923      	ldr	r3, [r4, #16]
   16dcc:	68a2      	ldr	r2, [r4, #8]
   16dce:	b10b      	cbz	r3, 16dd4 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   16dd0:	68e5      	ldr	r5, [r4, #12]
   16dd2:	e00c      	b.n	16dee <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   16dd4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   16dd8:	f004 fc38 	bl	1b64c <z_priq_dumb_best>
   16ddc:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   16dde:	7b53      	ldrb	r3, [r2, #13]
   16de0:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   16de2:	bf44      	itt	mi
   16de4:	f043 0308 	orrmi.w	r3, r3, #8
   16de8:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   16dea:	2d00      	cmp	r5, #0
   16dec:	d0f0      	beq.n	16dd0 <update_cache+0xc>
	if (preempt_ok != 0) {
   16dee:	b949      	cbnz	r1, 16e04 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   16df0:	7b53      	ldrb	r3, [r2, #13]
   16df2:	06db      	lsls	r3, r3, #27
   16df4:	d106      	bne.n	16e04 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   16df6:	69ab      	ldr	r3, [r5, #24]
   16df8:	b923      	cbnz	r3, 16e04 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   16dfa:	89d3      	ldrh	r3, [r2, #14]
   16dfc:	2b7f      	cmp	r3, #127	; 0x7f
   16dfe:	d901      	bls.n	16e04 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   16e00:	62a2      	str	r2, [r4, #40]	; 0x28
}
   16e02:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   16e04:	4295      	cmp	r5, r2
   16e06:	d001      	beq.n	16e0c <update_cache+0x48>
			z_reset_time_slice();
   16e08:	f7ff ff5e 	bl	16cc8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   16e0c:	62a5      	str	r5, [r4, #40]	; 0x28
}
   16e0e:	e7f8      	b.n	16e02 <update_cache+0x3e>
   16e10:	20015658 	.word	0x20015658

00016e14 <k_sched_unlock>:
{
   16e14:	b510      	push	{r4, lr}
	__asm__ volatile(
   16e16:	f04f 0320 	mov.w	r3, #32
   16e1a:	f3ef 8411 	mrs	r4, BASEPRI
   16e1e:	f383 8811 	msr	BASEPRI, r3
   16e22:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   16e26:	4b08      	ldr	r3, [pc, #32]	; (16e48 <k_sched_unlock+0x34>)
		update_cache(0);
   16e28:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   16e2a:	689a      	ldr	r2, [r3, #8]
   16e2c:	7bd3      	ldrb	r3, [r2, #15]
   16e2e:	3301      	adds	r3, #1
   16e30:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   16e32:	f7ff ffc7 	bl	16dc4 <update_cache>
	__asm__ volatile(
   16e36:	f384 8811 	msr	BASEPRI, r4
   16e3a:	f3bf 8f6f 	isb	sy
}
   16e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   16e42:	f004 bbd7 	b.w	1b5f4 <z_reschedule_unlocked>
   16e46:	bf00      	nop
   16e48:	20015658 	.word	0x20015658

00016e4c <ready_thread>:
{
   16e4c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   16e4e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   16e52:	7b43      	ldrb	r3, [r0, #13]
   16e54:	2a00      	cmp	r2, #0
   16e56:	db2c      	blt.n	16eb2 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   16e58:	06db      	lsls	r3, r3, #27
   16e5a:	d12a      	bne.n	16eb2 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   16e5c:	6983      	ldr	r3, [r0, #24]
   16e5e:	bb43      	cbnz	r3, 16eb2 <ready_thread+0x66>
	return list->head == list;
   16e60:	4a15      	ldr	r2, [pc, #84]	; (16eb8 <ready_thread+0x6c>)
   16e62:	4611      	mov	r1, r2
   16e64:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16e68:	428c      	cmp	r4, r1
   16e6a:	bf18      	it	ne
   16e6c:	4623      	movne	r3, r4
   16e6e:	2b00      	cmp	r3, #0
   16e70:	bf38      	it	cc
   16e72:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16e74:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16e76:	b1b3      	cbz	r3, 16ea6 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   16e78:	f990 600e 	ldrsb.w	r6, [r0, #14]
   16e7c:	f993 500e 	ldrsb.w	r5, [r3, #14]
   16e80:	42ae      	cmp	r6, r5
   16e82:	db03      	blt.n	16e8c <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   16e84:	42a3      	cmp	r3, r4
   16e86:	d00e      	beq.n	16ea6 <ready_thread+0x5a>
   16e88:	681b      	ldr	r3, [r3, #0]
   16e8a:	e7f4      	b.n	16e76 <ready_thread+0x2a>
	node->prev = successor->prev;
   16e8c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   16e8e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   16e92:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   16e94:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   16e96:	7b43      	ldrb	r3, [r0, #13]
   16e98:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16e9c:	7343      	strb	r3, [r0, #13]
}
   16e9e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   16ea0:	2000      	movs	r0, #0
   16ea2:	f7ff bf8f 	b.w	16dc4 <update_cache>
	node->prev = list->tail;
   16ea6:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   16eaa:	6b13      	ldr	r3, [r2, #48]	; 0x30
   16eac:	6018      	str	r0, [r3, #0]
	list->tail = node;
   16eae:	6310      	str	r0, [r2, #48]	; 0x30
}
   16eb0:	e7f1      	b.n	16e96 <ready_thread+0x4a>
}
   16eb2:	bc70      	pop	{r4, r5, r6}
   16eb4:	4770      	bx	lr
   16eb6:	bf00      	nop
   16eb8:	20015658 	.word	0x20015658

00016ebc <z_sched_start>:
{
   16ebc:	b510      	push	{r4, lr}
	__asm__ volatile(
   16ebe:	f04f 0220 	mov.w	r2, #32
   16ec2:	f3ef 8411 	mrs	r4, BASEPRI
   16ec6:	f382 8811 	msr	BASEPRI, r2
   16eca:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   16ece:	7b42      	ldrb	r2, [r0, #13]
   16ed0:	0751      	lsls	r1, r2, #29
   16ed2:	d404      	bmi.n	16ede <z_sched_start+0x22>
	__asm__ volatile(
   16ed4:	f384 8811 	msr	BASEPRI, r4
   16ed8:	f3bf 8f6f 	isb	sy
}
   16edc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16ede:	f022 0204 	bic.w	r2, r2, #4
   16ee2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   16ee4:	f7ff ffb2 	bl	16e4c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   16ee8:	4621      	mov	r1, r4
}
   16eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   16eee:	4801      	ldr	r0, [pc, #4]	; (16ef4 <z_sched_start+0x38>)
   16ef0:	f7ff bf2c 	b.w	16d4c <z_reschedule>
   16ef4:	2001845a 	.word	0x2001845a

00016ef8 <move_thread_to_end_of_prio_q>:
{
   16ef8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   16efa:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   16efe:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   16f00:	2b00      	cmp	r3, #0
   16f02:	da02      	bge.n	16f0a <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   16f04:	4817      	ldr	r0, [pc, #92]	; (16f64 <move_thread_to_end_of_prio_q+0x6c>)
   16f06:	f7ff ff47 	bl	16d98 <z_priq_dumb_remove>
	return list->head == list;
   16f0a:	4a17      	ldr	r2, [pc, #92]	; (16f68 <move_thread_to_end_of_prio_q+0x70>)
   16f0c:	4610      	mov	r0, r2
   16f0e:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16f12:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16f14:	4283      	cmp	r3, r0
   16f16:	bf08      	it	eq
   16f18:	2300      	moveq	r3, #0
   16f1a:	2b00      	cmp	r3, #0
   16f1c:	bf38      	it	cc
   16f1e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16f20:	b1d3      	cbz	r3, 16f58 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   16f22:	f991 600e 	ldrsb.w	r6, [r1, #14]
   16f26:	f993 500e 	ldrsb.w	r5, [r3, #14]
   16f2a:	42ae      	cmp	r6, r5
   16f2c:	db03      	blt.n	16f36 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   16f2e:	42a3      	cmp	r3, r4
   16f30:	d012      	beq.n	16f58 <move_thread_to_end_of_prio_q+0x60>
   16f32:	681b      	ldr	r3, [r3, #0]
   16f34:	e7f4      	b.n	16f20 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   16f36:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   16f38:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   16f3c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   16f3e:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   16f40:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   16f42:	6890      	ldr	r0, [r2, #8]
   16f44:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16f48:	734b      	strb	r3, [r1, #13]
   16f4a:	1a43      	subs	r3, r0, r1
   16f4c:	4258      	negs	r0, r3
   16f4e:	4158      	adcs	r0, r3
}
   16f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   16f54:	f7ff bf36 	b.w	16dc4 <update_cache>
	node->prev = list->tail;
   16f58:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   16f5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   16f5e:	6019      	str	r1, [r3, #0]
	list->tail = node;
   16f60:	6311      	str	r1, [r2, #48]	; 0x30
}
   16f62:	e7ed      	b.n	16f40 <move_thread_to_end_of_prio_q+0x48>
   16f64:	20015684 	.word	0x20015684
   16f68:	20015658 	.word	0x20015658

00016f6c <z_time_slice>:
{
   16f6c:	4601      	mov	r1, r0
   16f6e:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   16f70:	f04f 0320 	mov.w	r3, #32
   16f74:	f3ef 8411 	mrs	r4, BASEPRI
   16f78:	f383 8811 	msr	BASEPRI, r3
   16f7c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   16f80:	4b16      	ldr	r3, [pc, #88]	; (16fdc <z_time_slice+0x70>)
   16f82:	4a17      	ldr	r2, [pc, #92]	; (16fe0 <z_time_slice+0x74>)
   16f84:	6898      	ldr	r0, [r3, #8]
   16f86:	6815      	ldr	r5, [r2, #0]
   16f88:	42a8      	cmp	r0, r5
   16f8a:	461d      	mov	r5, r3
   16f8c:	d106      	bne.n	16f9c <z_time_slice+0x30>
			z_reset_time_slice();
   16f8e:	f7ff fe9b 	bl	16cc8 <z_reset_time_slice>
	__asm__ volatile(
   16f92:	f384 8811 	msr	BASEPRI, r4
   16f96:	f3bf 8f6f 	isb	sy
}
   16f9a:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   16f9c:	2600      	movs	r6, #0
   16f9e:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   16fa0:	4a10      	ldr	r2, [pc, #64]	; (16fe4 <z_time_slice+0x78>)
   16fa2:	6812      	ldr	r2, [r2, #0]
   16fa4:	b1ba      	cbz	r2, 16fd6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   16fa6:	89c2      	ldrh	r2, [r0, #14]
   16fa8:	2a7f      	cmp	r2, #127	; 0x7f
   16faa:	d814      	bhi.n	16fd6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   16fac:	7b42      	ldrb	r2, [r0, #13]
   16fae:	06d2      	lsls	r2, r2, #27
   16fb0:	d111      	bne.n	16fd6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   16fb2:	4a0d      	ldr	r2, [pc, #52]	; (16fe8 <z_time_slice+0x7c>)
   16fb4:	f990 600e 	ldrsb.w	r6, [r0, #14]
   16fb8:	6812      	ldr	r2, [r2, #0]
   16fba:	4296      	cmp	r6, r2
   16fbc:	db0b      	blt.n	16fd6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   16fbe:	4a0b      	ldr	r2, [pc, #44]	; (16fec <z_time_slice+0x80>)
   16fc0:	4290      	cmp	r0, r2
   16fc2:	d008      	beq.n	16fd6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   16fc4:	695a      	ldr	r2, [r3, #20]
   16fc6:	428a      	cmp	r2, r1
   16fc8:	dc02      	bgt.n	16fd0 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   16fca:	f7ff ff95 	bl	16ef8 <move_thread_to_end_of_prio_q>
   16fce:	e7de      	b.n	16f8e <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   16fd0:	1a52      	subs	r2, r2, r1
   16fd2:	615a      	str	r2, [r3, #20]
   16fd4:	e7dd      	b.n	16f92 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   16fd6:	2300      	movs	r3, #0
   16fd8:	616b      	str	r3, [r5, #20]
   16fda:	e7da      	b.n	16f92 <z_time_slice+0x26>
   16fdc:	20015658 	.word	0x20015658
   16fe0:	20015690 	.word	0x20015690
   16fe4:	20015698 	.word	0x20015698
   16fe8:	20015694 	.word	0x20015694
   16fec:	20014a88 	.word	0x20014a88

00016ff0 <z_impl_k_thread_suspend>:
{
   16ff0:	b570      	push	{r4, r5, r6, lr}
   16ff2:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   16ff4:	3018      	adds	r0, #24
   16ff6:	f004 fbe2 	bl	1b7be <z_abort_timeout>
	__asm__ volatile(
   16ffa:	f04f 0320 	mov.w	r3, #32
   16ffe:	f3ef 8611 	mrs	r6, BASEPRI
   17002:	f383 8811 	msr	BASEPRI, r3
   17006:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1700a:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1700e:	2b00      	cmp	r3, #0
   17010:	da07      	bge.n	17022 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   17012:	4621      	mov	r1, r4
   17014:	480e      	ldr	r0, [pc, #56]	; (17050 <z_impl_k_thread_suspend+0x60>)
   17016:	f7ff febf 	bl	16d98 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1701a:	7b63      	ldrb	r3, [r4, #13]
   1701c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17020:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   17022:	4d0c      	ldr	r5, [pc, #48]	; (17054 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   17024:	7b63      	ldrb	r3, [r4, #13]
   17026:	68a8      	ldr	r0, [r5, #8]
   17028:	f043 0310 	orr.w	r3, r3, #16
   1702c:	7363      	strb	r3, [r4, #13]
   1702e:	1b03      	subs	r3, r0, r4
   17030:	4258      	negs	r0, r3
   17032:	4158      	adcs	r0, r3
   17034:	f7ff fec6 	bl	16dc4 <update_cache>
	__asm__ volatile(
   17038:	f386 8811 	msr	BASEPRI, r6
   1703c:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   17040:	68ab      	ldr	r3, [r5, #8]
   17042:	42a3      	cmp	r3, r4
   17044:	d103      	bne.n	1704e <z_impl_k_thread_suspend+0x5e>
}
   17046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1704a:	f004 bad3 	b.w	1b5f4 <z_reschedule_unlocked>
}
   1704e:	bd70      	pop	{r4, r5, r6, pc}
   17050:	20015684 	.word	0x20015684
   17054:	20015658 	.word	0x20015658

00017058 <z_thread_single_abort>:
{
   17058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1705c:	4604      	mov	r4, r0
	__asm__ volatile(
   1705e:	f04f 0320 	mov.w	r3, #32
   17062:	f3ef 8211 	mrs	r2, BASEPRI
   17066:	f383 8811 	msr	BASEPRI, r3
   1706a:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   1706e:	7b43      	ldrb	r3, [r0, #13]
   17070:	f013 0f28 	tst.w	r3, #40	; 0x28
   17074:	d005      	beq.n	17082 <z_thread_single_abort+0x2a>
	__asm__ volatile(
   17076:	f382 8811 	msr	BASEPRI, r2
   1707a:	f3bf 8f6f 	isb	sy
}
   1707e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   17082:	f043 0320 	orr.w	r3, r3, #32
   17086:	7343      	strb	r3, [r0, #13]
   17088:	f382 8811 	msr	BASEPRI, r2
   1708c:	f3bf 8f6f 	isb	sy
   17090:	3018      	adds	r0, #24
   17092:	f004 fb94 	bl	1b7be <z_abort_timeout>
	__asm__ volatile(
   17096:	f04f 0320 	mov.w	r3, #32
   1709a:	f3ef 8611 	mrs	r6, BASEPRI
   1709e:	f383 8811 	msr	BASEPRI, r3
   170a2:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   170a6:	7b63      	ldrb	r3, [r4, #13]
   170a8:	06d8      	lsls	r0, r3, #27
   170aa:	d116      	bne.n	170da <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   170ac:	69a2      	ldr	r2, [r4, #24]
   170ae:	b9a2      	cbnz	r2, 170da <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   170b0:	0619      	lsls	r1, r3, #24
   170b2:	d507      	bpl.n	170c4 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   170b4:	4621      	mov	r1, r4
   170b6:	4826      	ldr	r0, [pc, #152]	; (17150 <z_thread_single_abort+0xf8>)
   170b8:	f7ff fe6e 	bl	16d98 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   170bc:	7b63      	ldrb	r3, [r4, #13]
   170be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   170c2:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   170c4:	4b23      	ldr	r3, [pc, #140]	; (17154 <z_thread_single_abort+0xfc>)
   170c6:	6898      	ldr	r0, [r3, #8]
   170c8:	1b02      	subs	r2, r0, r4
   170ca:	4250      	negs	r0, r2
   170cc:	4150      	adcs	r0, r2
   170ce:	f7ff fe79 	bl	16dc4 <update_cache>
			waiter->base.pended_on = NULL;
   170d2:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   170d4:	f104 0830 	add.w	r8, r4, #48	; 0x30
   170d8:	e01e      	b.n	17118 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   170da:	079b      	lsls	r3, r3, #30
   170dc:	d5f9      	bpl.n	170d2 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   170de:	4621      	mov	r1, r4
   170e0:	68a0      	ldr	r0, [r4, #8]
   170e2:	f7ff fe59 	bl	16d98 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   170e6:	7b63      	ldrb	r3, [r4, #13]
   170e8:	f023 0302 	bic.w	r3, r3, #2
   170ec:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   170ee:	2300      	movs	r3, #0
   170f0:	60a3      	str	r3, [r4, #8]
   170f2:	e7ee      	b.n	170d2 <z_thread_single_abort+0x7a>
   170f4:	f105 0018 	add.w	r0, r5, #24
   170f8:	f004 fb61 	bl	1b7be <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   170fc:	68a8      	ldr	r0, [r5, #8]
   170fe:	4629      	mov	r1, r5
   17100:	f7ff fe4a 	bl	16d98 <z_priq_dumb_remove>
   17104:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   17106:	4628      	mov	r0, r5
   17108:	f023 0302 	bic.w	r3, r3, #2
   1710c:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1710e:	60af      	str	r7, [r5, #8]
   17110:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   17114:	f7ff fe9a 	bl	16e4c <ready_thread>
	return list->head == list;
   17118:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1711a:	4545      	cmp	r5, r8
   1711c:	d001      	beq.n	17122 <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1711e:	2d00      	cmp	r5, #0
   17120:	d1e8      	bne.n	170f4 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   17122:	4b0c      	ldr	r3, [pc, #48]	; (17154 <z_thread_single_abort+0xfc>)
   17124:	689a      	ldr	r2, [r3, #8]
   17126:	4b0c      	ldr	r3, [pc, #48]	; (17158 <z_thread_single_abort+0x100>)
   17128:	429a      	cmp	r2, r3
   1712a:	d102      	bne.n	17132 <z_thread_single_abort+0xda>
			update_cache(1);
   1712c:	2001      	movs	r0, #1
   1712e:	f7ff fe49 	bl	16dc4 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   17132:	7b63      	ldrb	r3, [r4, #13]
   17134:	f043 0308 	orr.w	r3, r3, #8
   17138:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1713a:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   1713c:	f386 8811 	msr	BASEPRI, r6
   17140:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   17144:	2b00      	cmp	r3, #0
   17146:	d09a      	beq.n	1707e <z_thread_single_abort+0x26>
		fn_abort(thread);
   17148:	4620      	mov	r0, r4
}
   1714a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   1714e:	4718      	bx	r3
   17150:	20015684 	.word	0x20015684
   17154:	20015658 	.word	0x20015658
   17158:	20014a88 	.word	0x20014a88

0001715c <unready_thread>:
{
   1715c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1715e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   17162:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   17164:	2b00      	cmp	r3, #0
   17166:	da06      	bge.n	17176 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   17168:	4807      	ldr	r0, [pc, #28]	; (17188 <unready_thread+0x2c>)
   1716a:	f7ff fe15 	bl	16d98 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1716e:	7b4b      	ldrb	r3, [r1, #13]
   17170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17174:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   17176:	4b05      	ldr	r3, [pc, #20]	; (1718c <unready_thread+0x30>)
   17178:	6898      	ldr	r0, [r3, #8]
   1717a:	1a43      	subs	r3, r0, r1
   1717c:	4258      	negs	r0, r3
   1717e:	4158      	adcs	r0, r3
}
   17180:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   17184:	f7ff be1e 	b.w	16dc4 <update_cache>
   17188:	20015684 	.word	0x20015684
   1718c:	20015658 	.word	0x20015658

00017190 <pend>:
{
   17190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17194:	4606      	mov	r6, r0
   17196:	4614      	mov	r4, r2
   17198:	461d      	mov	r5, r3
	__asm__ volatile(
   1719a:	f04f 0320 	mov.w	r3, #32
   1719e:	f3ef 8711 	mrs	r7, BASEPRI
   171a2:	f383 8811 	msr	BASEPRI, r3
   171a6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   171aa:	f004 fa89 	bl	1b6c0 <add_to_waitq_locked>
	__asm__ volatile(
   171ae:	f387 8811 	msr	BASEPRI, r7
   171b2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   171b6:	1c6b      	adds	r3, r5, #1
   171b8:	bf08      	it	eq
   171ba:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   171be:	d008      	beq.n	171d2 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   171c0:	4622      	mov	r2, r4
   171c2:	462b      	mov	r3, r5
   171c4:	f106 0018 	add.w	r0, r6, #24
   171c8:	4903      	ldr	r1, [pc, #12]	; (171d8 <pend+0x48>)
}
   171ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   171ce:	f000 baed 	b.w	177ac <z_add_timeout>
   171d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   171d6:	bf00      	nop
   171d8:	0001b681 	.word	0x0001b681

000171dc <z_pend_curr>:
{
   171dc:	b510      	push	{r4, lr}
   171de:	460c      	mov	r4, r1
	pending_current = _current;
   171e0:	4b06      	ldr	r3, [pc, #24]	; (171fc <z_pend_curr+0x20>)
{
   171e2:	4611      	mov	r1, r2
	pending_current = _current;
   171e4:	6898      	ldr	r0, [r3, #8]
   171e6:	4b06      	ldr	r3, [pc, #24]	; (17200 <z_pend_curr+0x24>)
   171e8:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   171ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   171ee:	f7ff ffcf 	bl	17190 <pend>
   171f2:	4620      	mov	r0, r4
}
   171f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   171f8:	f7f8 bc80 	b.w	fafc <arch_swap>
   171fc:	20015658 	.word	0x20015658
   17200:	20015690 	.word	0x20015690

00017204 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   17204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17206:	4605      	mov	r5, r0
   17208:	9101      	str	r1, [sp, #4]
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
   1720a:	f004 fb19 	bl	1b840 <z_tick_get_32>
   1720e:	4604      	mov	r4, r0
	__asm__ volatile(
   17210:	f04f 0220 	mov.w	r2, #32
   17214:	f3ef 8711 	mrs	r7, BASEPRI
   17218:	f382 8811 	msr	BASEPRI, r2
   1721c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   17220:	4e12      	ldr	r6, [pc, #72]	; (1726c <z_tick_sleep.part.0+0x68>)
   17222:	4a13      	ldr	r2, [pc, #76]	; (17270 <z_tick_sleep.part.0+0x6c>)
   17224:	68b0      	ldr	r0, [r6, #8]
   17226:	6010      	str	r0, [r2, #0]
#endif
	unready_thread(_current);
   17228:	f7ff ff98 	bl	1715c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1722c:	68b0      	ldr	r0, [r6, #8]
   1722e:	4911      	ldr	r1, [pc, #68]	; (17274 <z_tick_sleep.part.0+0x70>)
   17230:	462a      	mov	r2, r5
   17232:	9b01      	ldr	r3, [sp, #4]
   17234:	3018      	adds	r0, #24
   17236:	f000 fab9 	bl	177ac <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1723a:	68b2      	ldr	r2, [r6, #8]
   1723c:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1723e:	7b53      	ldrb	r3, [r2, #13]
   17240:	f043 0310 	orr.w	r3, r3, #16
   17244:	7353      	strb	r3, [r2, #13]
   17246:	f7f8 fc59 	bl	fafc <arch_swap>
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1724a:	1960      	adds	r0, r4, r5

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1724c:	4604      	mov	r4, r0
   1724e:	f004 faf7 	bl	1b840 <z_tick_get_32>
   17252:	2500      	movs	r5, #0
   17254:	1a24      	subs	r4, r4, r0
   17256:	f165 0500 	sbc.w	r5, r5, #0
   1725a:	2c00      	cmp	r4, #0
   1725c:	f175 0300 	sbcs.w	r3, r5, #0
   17260:	bfb8      	it	lt
   17262:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   17264:	4620      	mov	r0, r4
   17266:	b003      	add	sp, #12
   17268:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1726a:	bf00      	nop
   1726c:	20015658 	.word	0x20015658
   17270:	20015690 	.word	0x20015690
   17274:	0001b681 	.word	0x0001b681

00017278 <z_set_prio>:
{
   17278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1727c:	4604      	mov	r4, r0
   1727e:	f04f 0320 	mov.w	r3, #32
   17282:	f3ef 8811 	mrs	r8, BASEPRI
   17286:	f383 8811 	msr	BASEPRI, r3
   1728a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1728e:	7b43      	ldrb	r3, [r0, #13]
   17290:	b24e      	sxtb	r6, r1
   17292:	06db      	lsls	r3, r3, #27
   17294:	d12e      	bne.n	172f4 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   17296:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   17298:	bb65      	cbnz	r5, 172f4 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1729a:	4f18      	ldr	r7, [pc, #96]	; (172fc <z_set_prio+0x84>)
   1729c:	4621      	mov	r1, r4
   1729e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   172a2:	f7ff fd79 	bl	16d98 <z_priq_dumb_remove>
	return list->head == list;
   172a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   172a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   172aa:	4283      	cmp	r3, r0
   172ac:	bf18      	it	ne
   172ae:	461d      	movne	r5, r3
   172b0:	2d00      	cmp	r5, #0
   172b2:	bf38      	it	cc
   172b4:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   172b6:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   172b8:	b1b5      	cbz	r5, 172e8 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   172ba:	f995 100e 	ldrsb.w	r1, [r5, #14]
   172be:	42b1      	cmp	r1, r6
   172c0:	dc03      	bgt.n	172ca <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   172c2:	42aa      	cmp	r2, r5
   172c4:	d010      	beq.n	172e8 <z_set_prio+0x70>
   172c6:	682d      	ldr	r5, [r5, #0]
   172c8:	e7f6      	b.n	172b8 <z_set_prio+0x40>
	node->prev = successor->prev;
   172ca:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   172cc:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   172d0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   172d2:	606c      	str	r4, [r5, #4]
			update_cache(1);
   172d4:	2001      	movs	r0, #1
   172d6:	f7ff fd75 	bl	16dc4 <update_cache>
   172da:	2001      	movs	r0, #1
	__asm__ volatile(
   172dc:	f388 8811 	msr	BASEPRI, r8
   172e0:	f3bf 8f6f 	isb	sy
}
   172e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   172e8:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   172ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   172ee:	601c      	str	r4, [r3, #0]
	list->tail = node;
   172f0:	633c      	str	r4, [r7, #48]	; 0x30
}
   172f2:	e7ef      	b.n	172d4 <z_set_prio+0x5c>
			thread->base.prio = prio;
   172f4:	2000      	movs	r0, #0
   172f6:	73a6      	strb	r6, [r4, #14]
   172f8:	e7f0      	b.n	172dc <z_set_prio+0x64>
   172fa:	bf00      	nop
   172fc:	20015658 	.word	0x20015658

00017300 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   17300:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   17302:	4b04      	ldr	r3, [pc, #16]	; (17314 <z_sched_init+0x14>)
   17304:	4608      	mov	r0, r1
   17306:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1730a:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1730e:	f7ff bcf1 	b.w	16cf4 <k_sched_time_slice_set>
   17312:	bf00      	nop
   17314:	20015658 	.word	0x20015658

00017318 <z_impl_k_yield>:
{
   17318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1731a:	4c24      	ldr	r4, [pc, #144]	; (173ac <z_impl_k_yield+0x94>)
   1731c:	4b24      	ldr	r3, [pc, #144]	; (173b0 <z_impl_k_yield+0x98>)
   1731e:	68a2      	ldr	r2, [r4, #8]
   17320:	429a      	cmp	r2, r3
   17322:	d030      	beq.n	17386 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   17324:	f04f 0320 	mov.w	r3, #32
   17328:	f3ef 8511 	mrs	r5, BASEPRI
   1732c:	f383 8811 	msr	BASEPRI, r3
   17330:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   17334:	68a1      	ldr	r1, [r4, #8]
   17336:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1733a:	f7ff fd2d 	bl	16d98 <z_priq_dumb_remove>
	return list->head == list;
   1733e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   17340:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17342:	4283      	cmp	r3, r0
   17344:	bf08      	it	eq
   17346:	2300      	moveq	r3, #0
   17348:	2b00      	cmp	r3, #0
   1734a:	bf38      	it	cc
   1734c:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1734e:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17350:	b32b      	cbz	r3, 1739e <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   17352:	f992 700e 	ldrsb.w	r7, [r2, #14]
   17356:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1735a:	42b7      	cmp	r7, r6
   1735c:	db03      	blt.n	17366 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1735e:	428b      	cmp	r3, r1
   17360:	d01d      	beq.n	1739e <z_impl_k_yield+0x86>
   17362:	681b      	ldr	r3, [r3, #0]
   17364:	e7f4      	b.n	17350 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   17366:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   17368:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1736c:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1736e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   17370:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   17372:	2001      	movs	r0, #1
   17374:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17378:	7353      	strb	r3, [r2, #13]
   1737a:	f7ff fd23 	bl	16dc4 <update_cache>
	__asm__ volatile(
   1737e:	f385 8811 	msr	BASEPRI, r5
   17382:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   17386:	f04f 0320 	mov.w	r3, #32
   1738a:	f3ef 8011 	mrs	r0, BASEPRI
   1738e:	f383 8811 	msr	BASEPRI, r3
   17392:	f3bf 8f6f 	isb	sy
}
   17396:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1739a:	f7f8 bbaf 	b.w	fafc <arch_swap>
	node->prev = list->tail;
   1739e:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   173a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   173a4:	601a      	str	r2, [r3, #0]
	list->tail = node;
   173a6:	6322      	str	r2, [r4, #48]	; 0x30
}
   173a8:	e7e2      	b.n	17370 <z_impl_k_yield+0x58>
   173aa:	bf00      	nop
   173ac:	20015658 	.word	0x20015658
   173b0:	20014a88 	.word	0x20014a88

000173b4 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   173b4:	f1b1 3fff 	cmp.w	r1, #4294967295
   173b8:	bf08      	it	eq
   173ba:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   173be:	b508      	push	{r3, lr}
   173c0:	4602      	mov	r2, r0
   173c2:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   173c4:	d106      	bne.n	173d4 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   173c6:	4b0b      	ldr	r3, [pc, #44]	; (173f4 <z_impl_k_sleep+0x40>)
   173c8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   173ca:	f7ff fe11 	bl	16ff0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   173ce:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   173d2:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   173d4:	4313      	orrs	r3, r2
   173d6:	d10a      	bne.n	173ee <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   173d8:	f7ff ff9e 	bl	17318 <z_impl_k_yield>
		return 0;
   173dc:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   173de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   173e2:	fb80 2303 	smull	r2, r3, r0, r3
   173e6:	0bd0      	lsrs	r0, r2, #15
   173e8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   173ec:	e7f1      	b.n	173d2 <z_impl_k_sleep+0x1e>
   173ee:	f7ff ff09 	bl	17204 <z_tick_sleep.part.0>
   173f2:	e7f4      	b.n	173de <z_impl_k_sleep+0x2a>
   173f4:	20015658 	.word	0x20015658

000173f8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   173f8:	4b01      	ldr	r3, [pc, #4]	; (17400 <z_impl_k_current_get+0x8>)
   173fa:	6898      	ldr	r0, [r3, #8]
   173fc:	4770      	bx	lr
   173fe:	bf00      	nop
   17400:	20015658 	.word	0x20015658

00017404 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   17404:	b538      	push	{r3, r4, r5, lr}
   17406:	4604      	mov	r4, r0
   17408:	f04f 0320 	mov.w	r3, #32
   1740c:	f3ef 8511 	mrs	r5, BASEPRI
   17410:	f383 8811 	msr	BASEPRI, r3
   17414:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   17418:	f004 f97d 	bl	1b716 <z_unpend_first_thread>

	if (thread != NULL) {
   1741c:	b150      	cbz	r0, 17434 <z_impl_k_sem_give+0x30>
   1741e:	2200      	movs	r2, #0
   17420:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   17424:	f004 f91c 	bl	1b660 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   17428:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1742a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1742e:	4807      	ldr	r0, [pc, #28]	; (1744c <z_impl_k_sem_give+0x48>)
   17430:	f7ff bc8c 	b.w	16d4c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   17434:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   17438:	429a      	cmp	r2, r3
   1743a:	bf18      	it	ne
   1743c:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1743e:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   17440:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   17442:	f104 0010 	add.w	r0, r4, #16
   17446:	f004 faca 	bl	1b9de <z_handle_obj_poll_events>
}
   1744a:	e7ed      	b.n	17428 <z_impl_k_sem_give+0x24>
   1744c:	2001845a 	.word	0x2001845a

00017450 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   17450:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17452:	4614      	mov	r4, r2
   17454:	461d      	mov	r5, r3
   17456:	f04f 0320 	mov.w	r3, #32
   1745a:	f3ef 8111 	mrs	r1, BASEPRI
   1745e:	f383 8811 	msr	BASEPRI, r3
   17462:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   17466:	6883      	ldr	r3, [r0, #8]
   17468:	b143      	cbz	r3, 1747c <z_impl_k_sem_take+0x2c>
		sem->count--;
   1746a:	3b01      	subs	r3, #1
   1746c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1746e:	f381 8811 	msr	BASEPRI, r1
   17472:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   17476:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   17478:	b003      	add	sp, #12
   1747a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1747c:	ea54 0305 	orrs.w	r3, r4, r5
   17480:	d106      	bne.n	17490 <z_impl_k_sem_take+0x40>
   17482:	f381 8811 	msr	BASEPRI, r1
   17486:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1748a:	f06f 000f 	mvn.w	r0, #15
   1748e:	e7f3      	b.n	17478 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   17490:	4602      	mov	r2, r0
   17492:	e9cd 4500 	strd	r4, r5, [sp]
   17496:	4802      	ldr	r0, [pc, #8]	; (174a0 <z_impl_k_sem_take+0x50>)
   17498:	f7ff fea0 	bl	171dc <z_pend_curr>
	return ret;
   1749c:	e7ec      	b.n	17478 <z_impl_k_sem_take+0x28>
   1749e:	bf00      	nop
   174a0:	2001845a 	.word	0x2001845a

000174a4 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   174a4:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   174a6:	4c08      	ldr	r4, [pc, #32]	; (174c8 <k_sys_work_q_init+0x24>)
   174a8:	f04f 33ff 	mov.w	r3, #4294967295
   174ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
   174b0:	4620      	mov	r0, r4
   174b2:	4906      	ldr	r1, [pc, #24]	; (174cc <k_sys_work_q_init+0x28>)
   174b4:	f000 f8dc 	bl	17670 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   174b8:	4905      	ldr	r1, [pc, #20]	; (174d0 <k_sys_work_q_init+0x2c>)
   174ba:	f104 0018 	add.w	r0, r4, #24
   174be:	f004 f979 	bl	1b7b4 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   174c2:	2000      	movs	r0, #0
   174c4:	bd10      	pop	{r4, pc}
   174c6:	bf00      	nop
   174c8:	20014c18 	.word	0x20014c18
   174cc:	2001a8b0 	.word	0x2001a8b0
   174d0:	0001d603 	.word	0x0001d603

000174d4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   174d4:	e92d 41b0 	stmdb	sp!, {r4, r5, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   174d8:	f100 0530 	add.w	r5, r0, #48	; 0x30
   174dc:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
   174de:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   174e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   174e4:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
   174e6:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   174e8:	2504      	movs	r5, #4
   174ea:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   174ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   174ee:	3207      	adds	r2, #7
	thread_base->prio = priority;
   174f0:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
   174f2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   174f4:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   174f8:	e9c0 121b 	strd	r1, r2, [r0, #108]	; 0x6c
	stack_ptr = (char *)stack + stack_obj_size;
   174fc:	eb01 0802 	add.w	r8, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17500:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	node->prev = NULL;
   17502:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->sched_locked = 0U;
   17506:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   17508:	6745      	str	r5, [r0, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1750a:	9202      	str	r2, [sp, #8]
   1750c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1750e:	9201      	str	r2, [sp, #4]
   17510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17512:	9200      	str	r2, [sp, #0]
   17514:	4642      	mov	r2, r8
   17516:	f7f8 fb4f 	bl	fbb8 <arch_new_thread>
	if (!_current) {
   1751a:	4b05      	ldr	r3, [pc, #20]	; (17530 <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
   1751c:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   17520:	689b      	ldr	r3, [r3, #8]
   17522:	b103      	cbz	r3, 17526 <z_setup_new_thread+0x52>
	new_thread->resource_pool = _current->resource_pool;
   17524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
   17526:	4640      	mov	r0, r8
   17528:	67a3      	str	r3, [r4, #120]	; 0x78
   1752a:	b005      	add	sp, #20
   1752c:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
   17530:	20015658 	.word	0x20015658

00017534 <z_impl_k_thread_create>:
{
   17534:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17536:	2500      	movs	r5, #0
{
   17538:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1753a:	9505      	str	r5, [sp, #20]
   1753c:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   1753e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17542:	9504      	str	r5, [sp, #16]
   17544:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   17546:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17548:	9503      	str	r5, [sp, #12]
   1754a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1754c:	9502      	str	r5, [sp, #8]
   1754e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   17550:	9501      	str	r5, [sp, #4]
   17552:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   17554:	9500      	str	r5, [sp, #0]
   17556:	f7ff ffbd 	bl	174d4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1755a:	1c7b      	adds	r3, r7, #1
   1755c:	bf08      	it	eq
   1755e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   17562:	d005      	beq.n	17570 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17564:	ea56 0307 	orrs.w	r3, r6, r7
   17568:	d105      	bne.n	17576 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1756a:	4620      	mov	r0, r4
   1756c:	f7ff fca6 	bl	16ebc <z_sched_start>
}
   17570:	4620      	mov	r0, r4
   17572:	b007      	add	sp, #28
   17574:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   17576:	4632      	mov	r2, r6
   17578:	463b      	mov	r3, r7
   1757a:	4903      	ldr	r1, [pc, #12]	; (17588 <z_impl_k_thread_create+0x54>)
   1757c:	f104 0018 	add.w	r0, r4, #24
   17580:	f000 f914 	bl	177ac <z_add_timeout>
   17584:	e7f4      	b.n	17570 <z_impl_k_thread_create+0x3c>
   17586:	bf00      	nop
   17588:	0001b681 	.word	0x0001b681

0001758c <z_init_static_threads>:
{
   1758c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   17590:	4e2a      	ldr	r6, [pc, #168]	; (1763c <z_init_static_threads+0xb0>)
   17592:	4d2b      	ldr	r5, [pc, #172]	; (17640 <z_init_static_threads+0xb4>)
   17594:	46b0      	mov	r8, r6
{
   17596:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   17598:	42b5      	cmp	r5, r6
   1759a:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1759e:	d310      	bcc.n	175c2 <z_init_static_threads+0x36>
	k_sched_lock();
   175a0:	f7ff fbe6 	bl	16d70 <k_sched_lock>
   175a4:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   175a8:	f240 36e7 	movw	r6, #999	; 0x3e7
   175ac:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   175ae:	4c24      	ldr	r4, [pc, #144]	; (17640 <z_init_static_threads+0xb4>)
   175b0:	f8df a090 	ldr.w	sl, [pc, #144]	; 17644 <z_init_static_threads+0xb8>
   175b4:	4544      	cmp	r4, r8
   175b6:	d321      	bcc.n	175fc <z_init_static_threads+0x70>
}
   175b8:	b006      	add	sp, #24
   175ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   175be:	f7ff bc29 	b.w	16e14 <k_sched_unlock>
		z_setup_new_thread(
   175c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   175c6:	9305      	str	r3, [sp, #20]
   175c8:	f854 3c10 	ldr.w	r3, [r4, #-16]
   175cc:	9304      	str	r3, [sp, #16]
   175ce:	f854 3c14 	ldr.w	r3, [r4, #-20]
   175d2:	9303      	str	r3, [sp, #12]
   175d4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   175d8:	9302      	str	r3, [sp, #8]
   175da:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   175de:	9301      	str	r3, [sp, #4]
   175e0:	f854 3c20 	ldr.w	r3, [r4, #-32]
   175e4:	9300      	str	r3, [sp, #0]
   175e6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   175ea:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   175ee:	f7ff ff71 	bl	174d4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   175f2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   175f6:	65dd      	str	r5, [r3, #92]	; 0x5c
   175f8:	4625      	mov	r5, r4
   175fa:	e7cd      	b.n	17598 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   175fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   175fe:	1c5a      	adds	r2, r3, #1
   17600:	d00d      	beq.n	1761e <z_init_static_threads+0x92>
   17602:	4630      	mov	r0, r6
   17604:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   17606:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1760a:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1760e:	42b9      	cmp	r1, r7
   17610:	bf08      	it	eq
   17612:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   17614:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17616:	d104      	bne.n	17622 <z_init_static_threads+0x96>
	z_sched_start(thread);
   17618:	4628      	mov	r0, r5
   1761a:	f7ff fc4f 	bl	16ebc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1761e:	3430      	adds	r4, #48	; 0x30
   17620:	e7c8      	b.n	175b4 <z_init_static_threads+0x28>
   17622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17626:	2300      	movs	r3, #0
   17628:	f7f5 fa26 	bl	ca78 <__aeabi_uldivmod>
   1762c:	4602      	mov	r2, r0
   1762e:	460b      	mov	r3, r1
   17630:	f105 0018 	add.w	r0, r5, #24
   17634:	4651      	mov	r1, sl
   17636:	f000 f8b9 	bl	177ac <z_add_timeout>
   1763a:	e7f0      	b.n	1761e <z_init_static_threads+0x92>
   1763c:	20014650 	.word	0x20014650
   17640:	20014650 	.word	0x20014650
   17644:	0001b681 	.word	0x0001b681

00017648 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   17648:	b508      	push	{r3, lr}
	__asm__ volatile(
   1764a:	f04f 0320 	mov.w	r3, #32
   1764e:	f3ef 8411 	mrs	r4, BASEPRI
   17652:	f383 8811 	msr	BASEPRI, r3
   17656:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   1765a:	4b04      	ldr	r3, [pc, #16]	; (1766c <z_self_abort+0x24>)
   1765c:	6898      	ldr	r0, [r3, #8]
   1765e:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   17660:	f7ff fcc6 	bl	16ff0 <z_impl_k_thread_suspend>
   17664:	4620      	mov	r0, r4
   17666:	f7f8 fa49 	bl	fafc <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1766a:	bf00      	nop
   1766c:	20015658 	.word	0x20015658

00017670 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   17670:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   17674:	b08a      	sub	sp, #40	; 0x28
   17676:	4604      	mov	r4, r0
   17678:	461d      	mov	r5, r3
   1767a:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   1767e:	f003 ff76 	bl	1b56e <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   17682:	f104 0618 	add.w	r6, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17686:	2000      	movs	r0, #0
   17688:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   1768c:	f04f 0800 	mov.w	r8, #0
   17690:	f04f 0900 	mov.w	r9, #0
   17694:	e9cd 5003 	strd	r5, r0, [sp, #12]
   17698:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1769c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   176a0:	4630      	mov	r0, r6
   176a2:	4b05      	ldr	r3, [pc, #20]	; (176b8 <k_work_q_start+0x48>)
   176a4:	9400      	str	r4, [sp, #0]
   176a6:	f7ff ff45 	bl	17534 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   176aa:	4630      	mov	r0, r6
   176ac:	4903      	ldr	r1, [pc, #12]	; (176bc <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   176ae:	b00a      	add	sp, #40	; 0x28
   176b0:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   176b4:	f004 b87e 	b.w	1b7b4 <z_impl_k_thread_name_set>
   176b8:	000185a5 	.word	0x000185a5
   176bc:	0001d60c 	.word	0x0001d60c

000176c0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   176c0:	4a02      	ldr	r2, [pc, #8]	; (176cc <boot_banner+0xc>)
   176c2:	4903      	ldr	r1, [pc, #12]	; (176d0 <boot_banner+0x10>)
   176c4:	4803      	ldr	r0, [pc, #12]	; (176d4 <boot_banner+0x14>)
   176c6:	f000 be89 	b.w	183dc <printk>
   176ca:	bf00      	nop
   176cc:	0001d453 	.word	0x0001d453
   176d0:	0001d616 	.word	0x0001d616
   176d4:	0001d623 	.word	0x0001d623

000176d8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   176d8:	b508      	push	{r3, lr}
   176da:	4806      	ldr	r0, [pc, #24]	; (176f4 <z_data_copy+0x1c>)
   176dc:	4a06      	ldr	r2, [pc, #24]	; (176f8 <z_data_copy+0x20>)
   176de:	4907      	ldr	r1, [pc, #28]	; (176fc <z_data_copy+0x24>)
   176e0:	1a12      	subs	r2, r2, r0
   176e2:	f004 f9d3 	bl	1ba8c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   176e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   176ea:	4a05      	ldr	r2, [pc, #20]	; (17700 <z_data_copy+0x28>)
   176ec:	4905      	ldr	r1, [pc, #20]	; (17704 <z_data_copy+0x2c>)
   176ee:	4806      	ldr	r0, [pc, #24]	; (17708 <z_data_copy+0x30>)
   176f0:	f004 b9cc 	b.w	1ba8c <memcpy>
   176f4:	20014500 	.word	0x20014500
   176f8:	200147c8 	.word	0x200147c8
   176fc:	0001d79c 	.word	0x0001d79c
   17700:	00000000 	.word	0x00000000
   17704:	0001d784 	.word	0x0001d784
   17708:	20014500 	.word	0x20014500

0001770c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   1770c:	4b03      	ldr	r3, [pc, #12]	; (1771c <elapsed+0x10>)
   1770e:	681b      	ldr	r3, [r3, #0]
   17710:	b90b      	cbnz	r3, 17716 <elapsed+0xa>
   17712:	f7f8 b9bf 	b.w	fa94 <z_clock_elapsed>
}
   17716:	2000      	movs	r0, #0
   17718:	4770      	bx	lr
   1771a:	bf00      	nop
   1771c:	2001569c 	.word	0x2001569c

00017720 <remove_timeout>:
{
   17720:	b530      	push	{r4, r5, lr}
   17722:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17724:	b168      	cbz	r0, 17742 <remove_timeout+0x22>
   17726:	4a0a      	ldr	r2, [pc, #40]	; (17750 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   17728:	6852      	ldr	r2, [r2, #4]
   1772a:	4290      	cmp	r0, r2
   1772c:	d009      	beq.n	17742 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1772e:	b143      	cbz	r3, 17742 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   17730:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   17734:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   17738:	1912      	adds	r2, r2, r4
   1773a:	eb45 0101 	adc.w	r1, r5, r1
   1773e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   17742:	6842      	ldr	r2, [r0, #4]
   17744:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   17746:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   17748:	2300      	movs	r3, #0
	node->prev = NULL;
   1774a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1774e:	bd30      	pop	{r4, r5, pc}
   17750:	20014570 	.word	0x20014570

00017754 <next_timeout>:
	return list->head == list;
   17754:	4b13      	ldr	r3, [pc, #76]	; (177a4 <next_timeout+0x50>)

static int32_t next_timeout(void)
{
   17756:	b510      	push	{r4, lr}
   17758:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1775a:	429c      	cmp	r4, r3
   1775c:	bf08      	it	eq
   1775e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   17760:	f7ff ffd4 	bl	1770c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   17764:	b1cc      	cbz	r4, 1779a <next_timeout+0x46>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   17766:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1776a:	1a12      	subs	r2, r2, r0
   1776c:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   17770:	2a01      	cmp	r2, #1
   17772:	f173 0100 	sbcs.w	r1, r3, #0
   17776:	db13      	blt.n	177a0 <next_timeout+0x4c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   17778:	4610      	mov	r0, r2
   1777a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1777e:	4619      	mov	r1, r3
   17780:	2300      	movs	r3, #0
   17782:	4282      	cmp	r2, r0
   17784:	eb73 0401 	sbcs.w	r4, r3, r1
   17788:	da00      	bge.n	1778c <next_timeout+0x38>
   1778a:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1778c:	4b06      	ldr	r3, [pc, #24]	; (177a8 <next_timeout+0x54>)
   1778e:	695b      	ldr	r3, [r3, #20]
   17790:	b113      	cbz	r3, 17798 <next_timeout+0x44>
   17792:	4298      	cmp	r0, r3
   17794:	bfa8      	it	ge
   17796:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   17798:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1779a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1779e:	e7f5      	b.n	1778c <next_timeout+0x38>
   177a0:	2000      	movs	r0, #0
   177a2:	e7f3      	b.n	1778c <next_timeout+0x38>
   177a4:	20014570 	.word	0x20014570
   177a8:	20015658 	.word	0x20015658

000177ac <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   177ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177b0:	9101      	str	r1, [sp, #4]
   177b2:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   177b4:	1c4b      	adds	r3, r1, #1
   177b6:	bf08      	it	eq
   177b8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   177bc:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   177be:	d070      	beq.n	178a2 <z_add_timeout+0xf6>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   177c0:	f06f 0301 	mvn.w	r3, #1
   177c4:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   177c8:	1c54      	adds	r4, r2, #1
   177ca:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   177ce:	ebb3 0804 	subs.w	r8, r3, r4
   177d2:	eb6b 0905 	sbc.w	r9, fp, r5
   177d6:	f1b8 0f00 	cmp.w	r8, #0
   177da:	f179 0300 	sbcs.w	r3, r9, #0
   177de:	db0f      	blt.n	17800 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   177e0:	f7ff ff94 	bl	1770c <elapsed>
   177e4:	f06f 0301 	mvn.w	r3, #1
   177e8:	4a34      	ldr	r2, [pc, #208]	; (178bc <z_add_timeout+0x110>)
   177ea:	e9d2 1c00 	ldrd	r1, ip, [r2]
   177ee:	1a5b      	subs	r3, r3, r1
   177f0:	eb6b 020c 	sbc.w	r2, fp, ip
   177f4:	1b1e      	subs	r6, r3, r4
   177f6:	eb62 0705 	sbc.w	r7, r2, r5
   177fa:	1a34      	subs	r4, r6, r0
   177fc:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   17800:	9b01      	ldr	r3, [sp, #4]
   17802:	f8ca 3008 	str.w	r3, [sl, #8]
   17806:	f04f 0320 	mov.w	r3, #32
   1780a:	f3ef 8611 	mrs	r6, BASEPRI
   1780e:	f383 8811 	msr	BASEPRI, r3
   17812:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   17816:	f7ff ff79 	bl	1770c <elapsed>
	ticks = MAX(1, ticks);
   1781a:	2c01      	cmp	r4, #1
   1781c:	f175 0300 	sbcs.w	r3, r5, #0
   17820:	bfbc      	itt	lt
   17822:	2401      	movlt	r4, #1
   17824:	2500      	movlt	r5, #0
	return list->head == list;
   17826:	4b26      	ldr	r3, [pc, #152]	; (178c0 <z_add_timeout+0x114>)
		to->dticks = ticks + elapsed();
   17828:	1824      	adds	r4, r4, r0
   1782a:	681a      	ldr	r2, [r3, #0]
   1782c:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17830:	429a      	cmp	r2, r3
   17832:	e9ca 4504 	strd	r4, r5, [sl, #16]
   17836:	d001      	beq.n	1783c <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17838:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1783a:	b952      	cbnz	r2, 17852 <z_add_timeout+0xa6>
	node->prev = list->tail;
   1783c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1783e:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   17842:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   17846:	685a      	ldr	r2, [r3, #4]
   17848:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1784c:	f8c3 a004 	str.w	sl, [r3, #4]
}
   17850:	e014      	b.n	1787c <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   17852:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   17856:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1785a:	4544      	cmp	r4, r8
   1785c:	eb75 0109 	sbcs.w	r1, r5, r9
   17860:	da22      	bge.n	178a8 <z_add_timeout+0xfc>
				t->dticks -= to->dticks;
   17862:	ebb8 0004 	subs.w	r0, r8, r4
   17866:	eb69 0105 	sbc.w	r1, r9, r5
   1786a:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1786e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   17870:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   17874:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   17878:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1787c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1787e:	429a      	cmp	r2, r3
   17880:	d00b      	beq.n	1789a <z_add_timeout+0xee>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   17882:	4592      	cmp	sl, r2
   17884:	d109      	bne.n	1789a <z_add_timeout+0xee>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   17886:	f7ff ff65 	bl	17754 <next_timeout>

			if (next_time == 0 ||
   1788a:	b118      	cbz	r0, 17894 <z_add_timeout+0xe8>
			    _current_cpu->slice_ticks != next_time) {
   1788c:	4b0d      	ldr	r3, [pc, #52]	; (178c4 <z_add_timeout+0x118>)
			if (next_time == 0 ||
   1788e:	695b      	ldr	r3, [r3, #20]
   17890:	4283      	cmp	r3, r0
   17892:	d002      	beq.n	1789a <z_add_timeout+0xee>
				z_clock_set_timeout(next_time, false);
   17894:	2100      	movs	r1, #0
   17896:	f7f8 f8cb 	bl	fa30 <z_clock_set_timeout>
	__asm__ volatile(
   1789a:	f386 8811 	msr	BASEPRI, r6
   1789e:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   178a2:	b003      	add	sp, #12
   178a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   178a8:	ebb4 0008 	subs.w	r0, r4, r8
   178ac:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   178b0:	42ba      	cmp	r2, r7
   178b2:	e9ca 0104 	strd	r0, r1, [sl, #16]
   178b6:	d0c1      	beq.n	1783c <z_add_timeout+0x90>
   178b8:	6812      	ldr	r2, [r2, #0]
   178ba:	e7be      	b.n	1783a <z_add_timeout+0x8e>
   178bc:	20014cf8 	.word	0x20014cf8
   178c0:	20014570 	.word	0x20014570
   178c4:	20015658 	.word	0x20015658

000178c8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   178c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178cc:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   178ce:	f7ff fb4d 	bl	16f6c <z_time_slice>
	__asm__ volatile(
   178d2:	f04f 0320 	mov.w	r3, #32
   178d6:	f3ef 8411 	mrs	r4, BASEPRI
   178da:	f383 8811 	msr	BASEPRI, r3
   178de:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   178e2:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 17994 <z_clock_announce+0xcc>
   178e6:	4d2a      	ldr	r5, [pc, #168]	; (17990 <z_clock_announce+0xc8>)
   178e8:	4651      	mov	r1, sl
	return list->head == list;
   178ea:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 17998 <z_clock_announce+0xd0>
   178ee:	602e      	str	r6, [r5, #0]
   178f0:	f8d5 c000 	ldr.w	ip, [r5]
   178f4:	f8db 0000 	ldr.w	r0, [fp]
   178f8:	4662      	mov	r2, ip
   178fa:	e9da 8900 	ldrd	r8, r9, [sl]
   178fe:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17900:	4558      	cmp	r0, fp
   17902:	e9cd 2300 	strd	r2, r3, [sp]
   17906:	d00d      	beq.n	17924 <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   17908:	b160      	cbz	r0, 17924 <z_clock_announce+0x5c>
   1790a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1790e:	45b4      	cmp	ip, r6
   17910:	41bb      	sbcs	r3, r7
   17912:	da1d      	bge.n	17950 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   17914:	9b00      	ldr	r3, [sp, #0]
   17916:	ebb6 0c03 	subs.w	ip, r6, r3
   1791a:	9b01      	ldr	r3, [sp, #4]
   1791c:	eb67 0603 	sbc.w	r6, r7, r3
   17920:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   17924:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   17926:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   17928:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   1792a:	eb13 0208 	adds.w	r2, r3, r8
   1792e:	9b01      	ldr	r3, [sp, #4]
   17930:	eb43 0309 	adc.w	r3, r3, r9
   17934:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   17938:	f7ff ff0c 	bl	17754 <next_timeout>
   1793c:	4631      	mov	r1, r6
   1793e:	f7f8 f877 	bl	fa30 <z_clock_set_timeout>
	__asm__ volatile(
   17942:	f384 8811 	msr	BASEPRI, r4
   17946:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1794a:	b003      	add	sp, #12
   1794c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   17950:	2200      	movs	r2, #0
   17952:	2300      	movs	r3, #0
		curr_tick += dt;
   17954:	eb18 0806 	adds.w	r8, r8, r6
   17958:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1795c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   17960:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   17964:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   17968:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1796a:	f7ff fed9 	bl	17720 <remove_timeout>
   1796e:	f384 8811 	msr	BASEPRI, r4
   17972:	f3bf 8f6f 	isb	sy
		t->fn(t);
   17976:	6883      	ldr	r3, [r0, #8]
   17978:	4798      	blx	r3
	__asm__ volatile(
   1797a:	f04f 0320 	mov.w	r3, #32
   1797e:	f3ef 8411 	mrs	r4, BASEPRI
   17982:	f383 8811 	msr	BASEPRI, r3
   17986:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1798a:	4902      	ldr	r1, [pc, #8]	; (17994 <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1798c:	e7b0      	b.n	178f0 <z_clock_announce+0x28>
   1798e:	bf00      	nop
   17990:	2001569c 	.word	0x2001569c
   17994:	20014cf8 	.word	0x20014cf8
   17998:	20014570 	.word	0x20014570

0001799c <z_tick_get>:

int64_t z_tick_get(void)
{
   1799c:	b510      	push	{r4, lr}
   1799e:	f04f 0320 	mov.w	r3, #32
   179a2:	f3ef 8411 	mrs	r4, BASEPRI
   179a6:	f383 8811 	msr	BASEPRI, r3
   179aa:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   179ae:	f7f8 f871 	bl	fa94 <z_clock_elapsed>
   179b2:	4b06      	ldr	r3, [pc, #24]	; (179cc <z_tick_get+0x30>)
   179b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   179b8:	1812      	adds	r2, r2, r0
   179ba:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   179be:	f384 8811 	msr	BASEPRI, r4
   179c2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   179c6:	4610      	mov	r0, r2
   179c8:	4619      	mov	r1, r3
   179ca:	bd10      	pop	{r4, pc}
   179cc:	20014cf8 	.word	0x20014cf8

000179d0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   179d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   179d2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   179d6:	1c56      	adds	r6, r2, #1
   179d8:	f143 0700 	adc.w	r7, r3, #0
   179dc:	2f00      	cmp	r7, #0
   179de:	bf08      	it	eq
   179e0:	2e02      	cmpeq	r6, #2
{
   179e2:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   179e4:	d302      	bcc.n	179ec <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   179e6:	490c      	ldr	r1, [pc, #48]	; (17a18 <z_timer_expiration_handler+0x48>)
   179e8:	f7ff fee0 	bl	177ac <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   179ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   179ee:	3301      	adds	r3, #1
   179f0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   179f2:	6a23      	ldr	r3, [r4, #32]
   179f4:	b10b      	cbz	r3, 179fa <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   179f6:	4620      	mov	r0, r4
   179f8:	4798      	blx	r3
	return list->head == list;
   179fa:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   179fe:	42a5      	cmp	r5, r4
   17a00:	d009      	beq.n	17a16 <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   17a02:	b145      	cbz	r5, 17a16 <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   17a04:	4628      	mov	r0, r5
   17a06:	f003 fdd9 	bl	1b5bc <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   17a0a:	4628      	mov	r0, r5
   17a0c:	f003 fe28 	bl	1b660 <z_ready_thread>
   17a10:	2300      	movs	r3, #0
   17a12:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   17a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17a18:	000179d1 	.word	0x000179d1

00017a1c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   17a1c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   17a20:	4619      	mov	r1, r3
   17a22:	4606      	mov	r6, r0
   17a24:	4610      	mov	r0, r2
   17a26:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   17a2a:	1c4c      	adds	r4, r1, #1
   17a2c:	bf08      	it	eq
   17a2e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   17a32:	4680      	mov	r8, r0
   17a34:	4689      	mov	r9, r1
   17a36:	d047      	beq.n	17ac8 <z_impl_k_timer_start+0xac>
   17a38:	4614      	mov	r4, r2
   17a3a:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   17a3c:	ea54 0305 	orrs.w	r3, r4, r5
   17a40:	d016      	beq.n	17a70 <z_impl_k_timer_start+0x54>
   17a42:	f06f 0301 	mvn.w	r3, #1
   17a46:	ebb3 0a02 	subs.w	sl, r3, r2
   17a4a:	f04f 33ff 	mov.w	r3, #4294967295
   17a4e:	eb63 0b05 	sbc.w	fp, r3, r5
   17a52:	f1ba 0f00 	cmp.w	sl, #0
   17a56:	f17b 0300 	sbcs.w	r3, fp, #0
   17a5a:	da09      	bge.n	17a70 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   17a5c:	f112 34ff 	adds.w	r4, r2, #4294967295
   17a60:	f145 35ff 	adc.w	r5, r5, #4294967295
   17a64:	2c01      	cmp	r4, #1
   17a66:	f175 0300 	sbcs.w	r3, r5, #0
   17a6a:	bfbc      	itt	lt
   17a6c:	2401      	movlt	r4, #1
   17a6e:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   17a70:	f06f 0301 	mvn.w	r3, #1
   17a74:	1a1b      	subs	r3, r3, r0
   17a76:	9300      	str	r3, [sp, #0]
   17a78:	f04f 33ff 	mov.w	r3, #4294967295
   17a7c:	eb63 0301 	sbc.w	r3, r3, r1
   17a80:	9301      	str	r3, [sp, #4]
   17a82:	e9dd 2300 	ldrd	r2, r3, [sp]
   17a86:	2a00      	cmp	r2, #0
   17a88:	f173 0300 	sbcs.w	r3, r3, #0
   17a8c:	da0c      	bge.n	17aa8 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   17a8e:	f110 38ff 	adds.w	r8, r0, #4294967295
   17a92:	f141 39ff 	adc.w	r9, r1, #4294967295
   17a96:	f1b8 0f00 	cmp.w	r8, #0
   17a9a:	f179 0300 	sbcs.w	r3, r9, #0
   17a9e:	bfbc      	itt	lt
   17aa0:	f04f 0800 	movlt.w	r8, #0
   17aa4:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   17aa8:	4630      	mov	r0, r6
   17aaa:	f003 fe88 	bl	1b7be <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   17aae:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   17ab0:	4642      	mov	r2, r8
	timer->status = 0U;
   17ab2:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   17ab4:	4630      	mov	r0, r6
   17ab6:	464b      	mov	r3, r9
   17ab8:	4905      	ldr	r1, [pc, #20]	; (17ad0 <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   17aba:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   17abe:	b002      	add	sp, #8
   17ac0:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   17ac4:	f7ff be72 	b.w	177ac <z_add_timeout>
}
   17ac8:	b002      	add	sp, #8
   17aca:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   17ace:	bf00      	nop
   17ad0:	000179d1 	.word	0x000179d1

00017ad4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   17ad4:	b538      	push	{r3, r4, r5, lr}
   17ad6:	4603      	mov	r3, r0
	__asm__ volatile(
   17ad8:	f04f 0220 	mov.w	r2, #32
   17adc:	f3ef 8511 	mrs	r5, BASEPRI
   17ae0:	f382 8811 	msr	BASEPRI, r2
   17ae4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   17ae8:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   17aea:	2101      	movs	r1, #1
   17aec:	6081      	str	r1, [r0, #8]
	return list->head == list;
   17aee:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   17af0:	4283      	cmp	r3, r0
   17af2:	d106      	bne.n	17b02 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   17af4:	f385 8811 	msr	BASEPRI, r5
   17af8:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   17afc:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   17afe:	4620      	mov	r0, r4
   17b00:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   17b02:	e9d0 3200 	ldrd	r3, r2, [r0]
   17b06:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   17b08:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   17b0a:	2300      	movs	r3, #0
	node->prev = NULL;
   17b0c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   17b10:	f003 ff07 	bl	1b922 <signal_poll_event>
	z_reschedule(&lock, key);
   17b14:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   17b16:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   17b18:	4801      	ldr	r0, [pc, #4]	; (17b20 <z_impl_k_poll_signal_raise+0x4c>)
   17b1a:	f7ff f917 	bl	16d4c <z_reschedule>
	return rc;
   17b1e:	e7ee      	b.n	17afe <z_impl_k_poll_signal_raise+0x2a>
   17b20:	2001845a 	.word	0x2001845a

00017b24 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   17b24:	460a      	mov	r2, r1
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   17b26:	4601      	mov	r1, r0
   17b28:	4801      	ldr	r0, [pc, #4]	; (17b30 <k_aligned_alloc+0xc>)
   17b2a:	f003 bf66 	b.w	1b9fa <z_heap_aligned_alloc>
   17b2e:	bf00      	nop
   17b30:	20014688 	.word	0x20014688

00017b34 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   17b34:	b513      	push	{r0, r1, r4, lr}
   17b36:	4604      	mov	r4, r0
   17b38:	9101      	str	r1, [sp, #4]
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   17b3a:	f003 fe31 	bl	1b7a0 <k_is_in_isr>
   17b3e:	9a01      	ldr	r2, [sp, #4]
   17b40:	b950      	cbnz	r0, 17b58 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   17b42:	4b07      	ldr	r3, [pc, #28]	; (17b60 <z_thread_aligned_alloc+0x2c>)
   17b44:	689b      	ldr	r3, [r3, #8]
   17b46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	}

	if (heap) {
   17b48:	b143      	cbz	r3, 17b5c <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   17b4a:	4621      	mov	r1, r4
   17b4c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   17b4e:	b002      	add	sp, #8
   17b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   17b54:	f003 bf51 	b.w	1b9fa <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   17b58:	4b02      	ldr	r3, [pc, #8]	; (17b64 <z_thread_aligned_alloc+0x30>)
   17b5a:	e7f6      	b.n	17b4a <z_thread_aligned_alloc+0x16>
}
   17b5c:	b002      	add	sp, #8
   17b5e:	bd10      	pop	{r4, pc}
   17b60:	20015658 	.word	0x20015658
   17b64:	20014688 	.word	0x20014688

00017b68 <_free_r>:
   17b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17b6a:	2900      	cmp	r1, #0
   17b6c:	d047      	beq.n	17bfe <_free_r+0x96>
   17b6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   17b72:	1f0c      	subs	r4, r1, #4
   17b74:	9001      	str	r0, [sp, #4]
   17b76:	2b00      	cmp	r3, #0
   17b78:	bfb8      	it	lt
   17b7a:	18e4      	addlt	r4, r4, r3
   17b7c:	f000 f992 	bl	17ea4 <__malloc_lock>
   17b80:	4a20      	ldr	r2, [pc, #128]	; (17c04 <_free_r+0x9c>)
   17b82:	9801      	ldr	r0, [sp, #4]
   17b84:	6813      	ldr	r3, [r2, #0]
   17b86:	4615      	mov	r5, r2
   17b88:	b933      	cbnz	r3, 17b98 <_free_r+0x30>
   17b8a:	6063      	str	r3, [r4, #4]
   17b8c:	6014      	str	r4, [r2, #0]
   17b8e:	b003      	add	sp, #12
   17b90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   17b94:	f000 b98c 	b.w	17eb0 <__malloc_unlock>
   17b98:	42a3      	cmp	r3, r4
   17b9a:	d90b      	bls.n	17bb4 <_free_r+0x4c>
   17b9c:	6821      	ldr	r1, [r4, #0]
   17b9e:	1862      	adds	r2, r4, r1
   17ba0:	4293      	cmp	r3, r2
   17ba2:	bf02      	ittt	eq
   17ba4:	681a      	ldreq	r2, [r3, #0]
   17ba6:	685b      	ldreq	r3, [r3, #4]
   17ba8:	1852      	addeq	r2, r2, r1
   17baa:	6063      	str	r3, [r4, #4]
   17bac:	bf08      	it	eq
   17bae:	6022      	streq	r2, [r4, #0]
   17bb0:	602c      	str	r4, [r5, #0]
   17bb2:	e7ec      	b.n	17b8e <_free_r+0x26>
   17bb4:	461a      	mov	r2, r3
   17bb6:	685b      	ldr	r3, [r3, #4]
   17bb8:	b10b      	cbz	r3, 17bbe <_free_r+0x56>
   17bba:	42a3      	cmp	r3, r4
   17bbc:	d9fa      	bls.n	17bb4 <_free_r+0x4c>
   17bbe:	6811      	ldr	r1, [r2, #0]
   17bc0:	1855      	adds	r5, r2, r1
   17bc2:	42a5      	cmp	r5, r4
   17bc4:	d10b      	bne.n	17bde <_free_r+0x76>
   17bc6:	6824      	ldr	r4, [r4, #0]
   17bc8:	4421      	add	r1, r4
   17bca:	1854      	adds	r4, r2, r1
   17bcc:	6011      	str	r1, [r2, #0]
   17bce:	42a3      	cmp	r3, r4
   17bd0:	d1dd      	bne.n	17b8e <_free_r+0x26>
   17bd2:	681c      	ldr	r4, [r3, #0]
   17bd4:	685b      	ldr	r3, [r3, #4]
   17bd6:	4421      	add	r1, r4
   17bd8:	6053      	str	r3, [r2, #4]
   17bda:	6011      	str	r1, [r2, #0]
   17bdc:	e7d7      	b.n	17b8e <_free_r+0x26>
   17bde:	d902      	bls.n	17be6 <_free_r+0x7e>
   17be0:	230c      	movs	r3, #12
   17be2:	6003      	str	r3, [r0, #0]
   17be4:	e7d3      	b.n	17b8e <_free_r+0x26>
   17be6:	6825      	ldr	r5, [r4, #0]
   17be8:	1961      	adds	r1, r4, r5
   17bea:	428b      	cmp	r3, r1
   17bec:	bf02      	ittt	eq
   17bee:	6819      	ldreq	r1, [r3, #0]
   17bf0:	685b      	ldreq	r3, [r3, #4]
   17bf2:	1949      	addeq	r1, r1, r5
   17bf4:	6063      	str	r3, [r4, #4]
   17bf6:	bf08      	it	eq
   17bf8:	6021      	streq	r1, [r4, #0]
   17bfa:	6054      	str	r4, [r2, #4]
   17bfc:	e7c7      	b.n	17b8e <_free_r+0x26>
   17bfe:	b003      	add	sp, #12
   17c00:	bd30      	pop	{r4, r5, pc}
   17c02:	bf00      	nop
   17c04:	20015ea0 	.word	0x20015ea0

00017c08 <_malloc_r>:
   17c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17c0a:	1ccd      	adds	r5, r1, #3
   17c0c:	4606      	mov	r6, r0
   17c0e:	f025 0503 	bic.w	r5, r5, #3
   17c12:	3508      	adds	r5, #8
   17c14:	2d0c      	cmp	r5, #12
   17c16:	bf38      	it	cc
   17c18:	250c      	movcc	r5, #12
   17c1a:	2d00      	cmp	r5, #0
   17c1c:	db01      	blt.n	17c22 <_malloc_r+0x1a>
   17c1e:	42a9      	cmp	r1, r5
   17c20:	d903      	bls.n	17c2a <_malloc_r+0x22>
   17c22:	230c      	movs	r3, #12
   17c24:	6033      	str	r3, [r6, #0]
   17c26:	2000      	movs	r0, #0
   17c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17c2a:	f000 f93b 	bl	17ea4 <__malloc_lock>
   17c2e:	4921      	ldr	r1, [pc, #132]	; (17cb4 <_malloc_r+0xac>)
   17c30:	680a      	ldr	r2, [r1, #0]
   17c32:	4614      	mov	r4, r2
   17c34:	b99c      	cbnz	r4, 17c5e <_malloc_r+0x56>
   17c36:	4f20      	ldr	r7, [pc, #128]	; (17cb8 <_malloc_r+0xb0>)
   17c38:	683b      	ldr	r3, [r7, #0]
   17c3a:	b923      	cbnz	r3, 17c46 <_malloc_r+0x3e>
   17c3c:	4621      	mov	r1, r4
   17c3e:	4630      	mov	r0, r6
   17c40:	f000 f83c 	bl	17cbc <_sbrk_r>
   17c44:	6038      	str	r0, [r7, #0]
   17c46:	4629      	mov	r1, r5
   17c48:	4630      	mov	r0, r6
   17c4a:	f000 f837 	bl	17cbc <_sbrk_r>
   17c4e:	1c43      	adds	r3, r0, #1
   17c50:	d123      	bne.n	17c9a <_malloc_r+0x92>
   17c52:	230c      	movs	r3, #12
   17c54:	4630      	mov	r0, r6
   17c56:	6033      	str	r3, [r6, #0]
   17c58:	f000 f92a 	bl	17eb0 <__malloc_unlock>
   17c5c:	e7e3      	b.n	17c26 <_malloc_r+0x1e>
   17c5e:	6823      	ldr	r3, [r4, #0]
   17c60:	1b5b      	subs	r3, r3, r5
   17c62:	d417      	bmi.n	17c94 <_malloc_r+0x8c>
   17c64:	2b0b      	cmp	r3, #11
   17c66:	d903      	bls.n	17c70 <_malloc_r+0x68>
   17c68:	6023      	str	r3, [r4, #0]
   17c6a:	441c      	add	r4, r3
   17c6c:	6025      	str	r5, [r4, #0]
   17c6e:	e004      	b.n	17c7a <_malloc_r+0x72>
   17c70:	6863      	ldr	r3, [r4, #4]
   17c72:	42a2      	cmp	r2, r4
   17c74:	bf0c      	ite	eq
   17c76:	600b      	streq	r3, [r1, #0]
   17c78:	6053      	strne	r3, [r2, #4]
   17c7a:	4630      	mov	r0, r6
   17c7c:	f000 f918 	bl	17eb0 <__malloc_unlock>
   17c80:	f104 000b 	add.w	r0, r4, #11
   17c84:	1d23      	adds	r3, r4, #4
   17c86:	f020 0007 	bic.w	r0, r0, #7
   17c8a:	1ac2      	subs	r2, r0, r3
   17c8c:	d0cc      	beq.n	17c28 <_malloc_r+0x20>
   17c8e:	1a1b      	subs	r3, r3, r0
   17c90:	50a3      	str	r3, [r4, r2]
   17c92:	e7c9      	b.n	17c28 <_malloc_r+0x20>
   17c94:	4622      	mov	r2, r4
   17c96:	6864      	ldr	r4, [r4, #4]
   17c98:	e7cc      	b.n	17c34 <_malloc_r+0x2c>
   17c9a:	1cc4      	adds	r4, r0, #3
   17c9c:	f024 0403 	bic.w	r4, r4, #3
   17ca0:	42a0      	cmp	r0, r4
   17ca2:	d0e3      	beq.n	17c6c <_malloc_r+0x64>
   17ca4:	1a21      	subs	r1, r4, r0
   17ca6:	4630      	mov	r0, r6
   17ca8:	f000 f808 	bl	17cbc <_sbrk_r>
   17cac:	3001      	adds	r0, #1
   17cae:	d1dd      	bne.n	17c6c <_malloc_r+0x64>
   17cb0:	e7cf      	b.n	17c52 <_malloc_r+0x4a>
   17cb2:	bf00      	nop
   17cb4:	20015ea0 	.word	0x20015ea0
   17cb8:	20015ea4 	.word	0x20015ea4

00017cbc <_sbrk_r>:
   17cbc:	b538      	push	{r3, r4, r5, lr}
   17cbe:	2300      	movs	r3, #0
   17cc0:	4d05      	ldr	r5, [pc, #20]	; (17cd8 <_sbrk_r+0x1c>)
   17cc2:	4604      	mov	r4, r0
   17cc4:	4608      	mov	r0, r1
   17cc6:	602b      	str	r3, [r5, #0]
   17cc8:	f7f8 fd52 	bl	10770 <_sbrk>
   17ccc:	1c43      	adds	r3, r0, #1
   17cce:	d102      	bne.n	17cd6 <_sbrk_r+0x1a>
   17cd0:	682b      	ldr	r3, [r5, #0]
   17cd2:	b103      	cbz	r3, 17cd6 <_sbrk_r+0x1a>
   17cd4:	6023      	str	r3, [r4, #0]
   17cd6:	bd38      	pop	{r3, r4, r5, pc}
   17cd8:	2001845c 	.word	0x2001845c

00017cdc <sniprintf>:
   17cdc:	b40c      	push	{r2, r3}
   17cde:	4b18      	ldr	r3, [pc, #96]	; (17d40 <sniprintf+0x64>)
   17ce0:	b530      	push	{r4, r5, lr}
   17ce2:	1e0c      	subs	r4, r1, #0
   17ce4:	b09d      	sub	sp, #116	; 0x74
   17ce6:	681d      	ldr	r5, [r3, #0]
   17ce8:	da08      	bge.n	17cfc <sniprintf+0x20>
   17cea:	238b      	movs	r3, #139	; 0x8b
   17cec:	f04f 30ff 	mov.w	r0, #4294967295
   17cf0:	602b      	str	r3, [r5, #0]
   17cf2:	b01d      	add	sp, #116	; 0x74
   17cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   17cf8:	b002      	add	sp, #8
   17cfa:	4770      	bx	lr
   17cfc:	f44f 7302 	mov.w	r3, #520	; 0x208
   17d00:	9002      	str	r0, [sp, #8]
   17d02:	9006      	str	r0, [sp, #24]
   17d04:	a902      	add	r1, sp, #8
   17d06:	f8ad 3014 	strh.w	r3, [sp, #20]
   17d0a:	bf14      	ite	ne
   17d0c:	f104 33ff 	addne.w	r3, r4, #4294967295
   17d10:	4623      	moveq	r3, r4
   17d12:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17d14:	4628      	mov	r0, r5
   17d16:	9304      	str	r3, [sp, #16]
   17d18:	9307      	str	r3, [sp, #28]
   17d1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17d1e:	f8ad 3016 	strh.w	r3, [sp, #22]
   17d22:	ab21      	add	r3, sp, #132	; 0x84
   17d24:	9301      	str	r3, [sp, #4]
   17d26:	f000 f8c9 	bl	17ebc <_svfiprintf_r>
   17d2a:	1c43      	adds	r3, r0, #1
   17d2c:	bfbc      	itt	lt
   17d2e:	238b      	movlt	r3, #139	; 0x8b
   17d30:	602b      	strlt	r3, [r5, #0]
   17d32:	2c00      	cmp	r4, #0
   17d34:	d0dd      	beq.n	17cf2 <sniprintf+0x16>
   17d36:	9b02      	ldr	r3, [sp, #8]
   17d38:	2200      	movs	r2, #0
   17d3a:	701a      	strb	r2, [r3, #0]
   17d3c:	e7d9      	b.n	17cf2 <sniprintf+0x16>
   17d3e:	bf00      	nop
   17d40:	20014578 	.word	0x20014578

00017d44 <_strtol_l.isra.0>:
   17d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17d48:	468c      	mov	ip, r1
   17d4a:	4686      	mov	lr, r0
   17d4c:	4e38      	ldr	r6, [pc, #224]	; (17e30 <_strtol_l.isra.0+0xec>)
   17d4e:	4660      	mov	r0, ip
   17d50:	f81c 4b01 	ldrb.w	r4, [ip], #1
   17d54:	5da5      	ldrb	r5, [r4, r6]
   17d56:	f015 0508 	ands.w	r5, r5, #8
   17d5a:	d1f8      	bne.n	17d4e <_strtol_l.isra.0+0xa>
   17d5c:	2c2d      	cmp	r4, #45	; 0x2d
   17d5e:	d133      	bne.n	17dc8 <_strtol_l.isra.0+0x84>
   17d60:	f89c 4000 	ldrb.w	r4, [ip]
   17d64:	f04f 0801 	mov.w	r8, #1
   17d68:	f100 0c02 	add.w	ip, r0, #2
   17d6c:	2b00      	cmp	r3, #0
   17d6e:	d05b      	beq.n	17e28 <_strtol_l.isra.0+0xe4>
   17d70:	2b10      	cmp	r3, #16
   17d72:	d10c      	bne.n	17d8e <_strtol_l.isra.0+0x4a>
   17d74:	2c30      	cmp	r4, #48	; 0x30
   17d76:	d10a      	bne.n	17d8e <_strtol_l.isra.0+0x4a>
   17d78:	f89c 0000 	ldrb.w	r0, [ip]
   17d7c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   17d80:	2858      	cmp	r0, #88	; 0x58
   17d82:	d14c      	bne.n	17e1e <_strtol_l.isra.0+0xda>
   17d84:	f89c 4001 	ldrb.w	r4, [ip, #1]
   17d88:	2310      	movs	r3, #16
   17d8a:	f10c 0c02 	add.w	ip, ip, #2
   17d8e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   17d92:	2600      	movs	r6, #0
   17d94:	3f01      	subs	r7, #1
   17d96:	4630      	mov	r0, r6
   17d98:	fbb7 f9f3 	udiv	r9, r7, r3
   17d9c:	fb03 7a19 	mls	sl, r3, r9, r7
   17da0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   17da4:	2d09      	cmp	r5, #9
   17da6:	d817      	bhi.n	17dd8 <_strtol_l.isra.0+0x94>
   17da8:	462c      	mov	r4, r5
   17daa:	42a3      	cmp	r3, r4
   17dac:	dd23      	ble.n	17df6 <_strtol_l.isra.0+0xb2>
   17dae:	1c75      	adds	r5, r6, #1
   17db0:	d007      	beq.n	17dc2 <_strtol_l.isra.0+0x7e>
   17db2:	4581      	cmp	r9, r0
   17db4:	d31c      	bcc.n	17df0 <_strtol_l.isra.0+0xac>
   17db6:	d101      	bne.n	17dbc <_strtol_l.isra.0+0x78>
   17db8:	45a2      	cmp	sl, r4
   17dba:	db19      	blt.n	17df0 <_strtol_l.isra.0+0xac>
   17dbc:	fb00 4003 	mla	r0, r0, r3, r4
   17dc0:	2601      	movs	r6, #1
   17dc2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   17dc6:	e7eb      	b.n	17da0 <_strtol_l.isra.0+0x5c>
   17dc8:	2c2b      	cmp	r4, #43	; 0x2b
   17dca:	46a8      	mov	r8, r5
   17dcc:	bf04      	itt	eq
   17dce:	f89c 4000 	ldrbeq.w	r4, [ip]
   17dd2:	f100 0c02 	addeq.w	ip, r0, #2
   17dd6:	e7c9      	b.n	17d6c <_strtol_l.isra.0+0x28>
   17dd8:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   17ddc:	2d19      	cmp	r5, #25
   17dde:	d801      	bhi.n	17de4 <_strtol_l.isra.0+0xa0>
   17de0:	3c37      	subs	r4, #55	; 0x37
   17de2:	e7e2      	b.n	17daa <_strtol_l.isra.0+0x66>
   17de4:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   17de8:	2d19      	cmp	r5, #25
   17dea:	d804      	bhi.n	17df6 <_strtol_l.isra.0+0xb2>
   17dec:	3c57      	subs	r4, #87	; 0x57
   17dee:	e7dc      	b.n	17daa <_strtol_l.isra.0+0x66>
   17df0:	f04f 36ff 	mov.w	r6, #4294967295
   17df4:	e7e5      	b.n	17dc2 <_strtol_l.isra.0+0x7e>
   17df6:	1c73      	adds	r3, r6, #1
   17df8:	d106      	bne.n	17e08 <_strtol_l.isra.0+0xc4>
   17dfa:	2322      	movs	r3, #34	; 0x22
   17dfc:	4638      	mov	r0, r7
   17dfe:	f8ce 3000 	str.w	r3, [lr]
   17e02:	b942      	cbnz	r2, 17e16 <_strtol_l.isra.0+0xd2>
   17e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17e08:	f1b8 0f00 	cmp.w	r8, #0
   17e0c:	d000      	beq.n	17e10 <_strtol_l.isra.0+0xcc>
   17e0e:	4240      	negs	r0, r0
   17e10:	2a00      	cmp	r2, #0
   17e12:	d0f7      	beq.n	17e04 <_strtol_l.isra.0+0xc0>
   17e14:	b10e      	cbz	r6, 17e1a <_strtol_l.isra.0+0xd6>
   17e16:	f10c 31ff 	add.w	r1, ip, #4294967295
   17e1a:	6011      	str	r1, [r2, #0]
   17e1c:	e7f2      	b.n	17e04 <_strtol_l.isra.0+0xc0>
   17e1e:	2430      	movs	r4, #48	; 0x30
   17e20:	2b00      	cmp	r3, #0
   17e22:	d1b4      	bne.n	17d8e <_strtol_l.isra.0+0x4a>
   17e24:	2308      	movs	r3, #8
   17e26:	e7b2      	b.n	17d8e <_strtol_l.isra.0+0x4a>
   17e28:	2c30      	cmp	r4, #48	; 0x30
   17e2a:	d0a5      	beq.n	17d78 <_strtol_l.isra.0+0x34>
   17e2c:	230a      	movs	r3, #10
   17e2e:	e7ae      	b.n	17d8e <_strtol_l.isra.0+0x4a>
   17e30:	0001d64b 	.word	0x0001d64b

00017e34 <strtol>:
   17e34:	4613      	mov	r3, r2
   17e36:	460a      	mov	r2, r1
   17e38:	4601      	mov	r1, r0
   17e3a:	4802      	ldr	r0, [pc, #8]	; (17e44 <strtol+0x10>)
   17e3c:	6800      	ldr	r0, [r0, #0]
   17e3e:	f7ff bf81 	b.w	17d44 <_strtol_l.isra.0>
   17e42:	bf00      	nop
   17e44:	20014578 	.word	0x20014578

00017e48 <vsniprintf>:
   17e48:	b507      	push	{r0, r1, r2, lr}
   17e4a:	9300      	str	r3, [sp, #0]
   17e4c:	4613      	mov	r3, r2
   17e4e:	460a      	mov	r2, r1
   17e50:	4601      	mov	r1, r0
   17e52:	4803      	ldr	r0, [pc, #12]	; (17e60 <vsniprintf+0x18>)
   17e54:	6800      	ldr	r0, [r0, #0]
   17e56:	f003 fe9e 	bl	1bb96 <_vsniprintf_r>
   17e5a:	b003      	add	sp, #12
   17e5c:	f85d fb04 	ldr.w	pc, [sp], #4
   17e60:	20014578 	.word	0x20014578

00017e64 <_vsiprintf_r>:
   17e64:	b500      	push	{lr}
   17e66:	b09b      	sub	sp, #108	; 0x6c
   17e68:	9100      	str	r1, [sp, #0]
   17e6a:	9104      	str	r1, [sp, #16]
   17e6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   17e70:	9105      	str	r1, [sp, #20]
   17e72:	9102      	str	r1, [sp, #8]
   17e74:	4905      	ldr	r1, [pc, #20]	; (17e8c <_vsiprintf_r+0x28>)
   17e76:	9103      	str	r1, [sp, #12]
   17e78:	4669      	mov	r1, sp
   17e7a:	f000 f81f 	bl	17ebc <_svfiprintf_r>
   17e7e:	9b00      	ldr	r3, [sp, #0]
   17e80:	2200      	movs	r2, #0
   17e82:	701a      	strb	r2, [r3, #0]
   17e84:	b01b      	add	sp, #108	; 0x6c
   17e86:	f85d fb04 	ldr.w	pc, [sp], #4
   17e8a:	bf00      	nop
   17e8c:	ffff0208 	.word	0xffff0208

00017e90 <vsiprintf>:
   17e90:	4613      	mov	r3, r2
   17e92:	460a      	mov	r2, r1
   17e94:	4601      	mov	r1, r0
   17e96:	4802      	ldr	r0, [pc, #8]	; (17ea0 <vsiprintf+0x10>)
   17e98:	6800      	ldr	r0, [r0, #0]
   17e9a:	f7ff bfe3 	b.w	17e64 <_vsiprintf_r>
   17e9e:	bf00      	nop
   17ea0:	20014578 	.word	0x20014578

00017ea4 <__malloc_lock>:
   17ea4:	4801      	ldr	r0, [pc, #4]	; (17eac <__malloc_lock+0x8>)
   17ea6:	f003 bf93 	b.w	1bdd0 <__retarget_lock_acquire_recursive>
   17eaa:	bf00      	nop
   17eac:	20018464 	.word	0x20018464

00017eb0 <__malloc_unlock>:
   17eb0:	4801      	ldr	r0, [pc, #4]	; (17eb8 <__malloc_unlock+0x8>)
   17eb2:	f003 bf8e 	b.w	1bdd2 <__retarget_lock_release_recursive>
   17eb6:	bf00      	nop
   17eb8:	20018464 	.word	0x20018464

00017ebc <_svfiprintf_r>:
   17ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ec0:	4698      	mov	r8, r3
   17ec2:	898b      	ldrh	r3, [r1, #12]
   17ec4:	b09d      	sub	sp, #116	; 0x74
   17ec6:	4607      	mov	r7, r0
   17ec8:	061b      	lsls	r3, r3, #24
   17eca:	460d      	mov	r5, r1
   17ecc:	4614      	mov	r4, r2
   17ece:	d50e      	bpl.n	17eee <_svfiprintf_r+0x32>
   17ed0:	690b      	ldr	r3, [r1, #16]
   17ed2:	b963      	cbnz	r3, 17eee <_svfiprintf_r+0x32>
   17ed4:	2140      	movs	r1, #64	; 0x40
   17ed6:	f7ff fe97 	bl	17c08 <_malloc_r>
   17eda:	6028      	str	r0, [r5, #0]
   17edc:	6128      	str	r0, [r5, #16]
   17ede:	b920      	cbnz	r0, 17eea <_svfiprintf_r+0x2e>
   17ee0:	230c      	movs	r3, #12
   17ee2:	603b      	str	r3, [r7, #0]
   17ee4:	f04f 30ff 	mov.w	r0, #4294967295
   17ee8:	e0d1      	b.n	1808e <_svfiprintf_r+0x1d2>
   17eea:	2340      	movs	r3, #64	; 0x40
   17eec:	616b      	str	r3, [r5, #20]
   17eee:	2300      	movs	r3, #0
   17ef0:	f8cd 800c 	str.w	r8, [sp, #12]
   17ef4:	f04f 0901 	mov.w	r9, #1
   17ef8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 180a8 <_svfiprintf_r+0x1ec>
   17efc:	9309      	str	r3, [sp, #36]	; 0x24
   17efe:	2320      	movs	r3, #32
   17f00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   17f04:	2330      	movs	r3, #48	; 0x30
   17f06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   17f0a:	4623      	mov	r3, r4
   17f0c:	469a      	mov	sl, r3
   17f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
   17f12:	b10a      	cbz	r2, 17f18 <_svfiprintf_r+0x5c>
   17f14:	2a25      	cmp	r2, #37	; 0x25
   17f16:	d1f9      	bne.n	17f0c <_svfiprintf_r+0x50>
   17f18:	ebba 0b04 	subs.w	fp, sl, r4
   17f1c:	d00b      	beq.n	17f36 <_svfiprintf_r+0x7a>
   17f1e:	465b      	mov	r3, fp
   17f20:	4622      	mov	r2, r4
   17f22:	4629      	mov	r1, r5
   17f24:	4638      	mov	r0, r7
   17f26:	f003 fe88 	bl	1bc3a <__ssputs_r>
   17f2a:	3001      	adds	r0, #1
   17f2c:	f000 80aa 	beq.w	18084 <_svfiprintf_r+0x1c8>
   17f30:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17f32:	445a      	add	r2, fp
   17f34:	9209      	str	r2, [sp, #36]	; 0x24
   17f36:	f89a 3000 	ldrb.w	r3, [sl]
   17f3a:	2b00      	cmp	r3, #0
   17f3c:	f000 80a2 	beq.w	18084 <_svfiprintf_r+0x1c8>
   17f40:	2300      	movs	r3, #0
   17f42:	f04f 32ff 	mov.w	r2, #4294967295
   17f46:	f10a 0a01 	add.w	sl, sl, #1
   17f4a:	9304      	str	r3, [sp, #16]
   17f4c:	9307      	str	r3, [sp, #28]
   17f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   17f52:	931a      	str	r3, [sp, #104]	; 0x68
   17f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
   17f58:	4654      	mov	r4, sl
   17f5a:	2205      	movs	r2, #5
   17f5c:	4852      	ldr	r0, [pc, #328]	; (180a8 <_svfiprintf_r+0x1ec>)
   17f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
   17f62:	f003 fd77 	bl	1ba54 <memchr>
   17f66:	9a04      	ldr	r2, [sp, #16]
   17f68:	b9d8      	cbnz	r0, 17fa2 <_svfiprintf_r+0xe6>
   17f6a:	06d0      	lsls	r0, r2, #27
   17f6c:	bf44      	itt	mi
   17f6e:	2320      	movmi	r3, #32
   17f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   17f74:	0711      	lsls	r1, r2, #28
   17f76:	bf44      	itt	mi
   17f78:	232b      	movmi	r3, #43	; 0x2b
   17f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   17f7e:	f89a 3000 	ldrb.w	r3, [sl]
   17f82:	2b2a      	cmp	r3, #42	; 0x2a
   17f84:	d015      	beq.n	17fb2 <_svfiprintf_r+0xf6>
   17f86:	9a07      	ldr	r2, [sp, #28]
   17f88:	4654      	mov	r4, sl
   17f8a:	2000      	movs	r0, #0
   17f8c:	f04f 0c0a 	mov.w	ip, #10
   17f90:	4621      	mov	r1, r4
   17f92:	f811 3b01 	ldrb.w	r3, [r1], #1
   17f96:	3b30      	subs	r3, #48	; 0x30
   17f98:	2b09      	cmp	r3, #9
   17f9a:	d94e      	bls.n	1803a <_svfiprintf_r+0x17e>
   17f9c:	b1b0      	cbz	r0, 17fcc <_svfiprintf_r+0x110>
   17f9e:	9207      	str	r2, [sp, #28]
   17fa0:	e014      	b.n	17fcc <_svfiprintf_r+0x110>
   17fa2:	eba0 0308 	sub.w	r3, r0, r8
   17fa6:	46a2      	mov	sl, r4
   17fa8:	fa09 f303 	lsl.w	r3, r9, r3
   17fac:	4313      	orrs	r3, r2
   17fae:	9304      	str	r3, [sp, #16]
   17fb0:	e7d2      	b.n	17f58 <_svfiprintf_r+0x9c>
   17fb2:	9b03      	ldr	r3, [sp, #12]
   17fb4:	1d19      	adds	r1, r3, #4
   17fb6:	681b      	ldr	r3, [r3, #0]
   17fb8:	2b00      	cmp	r3, #0
   17fba:	9103      	str	r1, [sp, #12]
   17fbc:	bfbb      	ittet	lt
   17fbe:	425b      	neglt	r3, r3
   17fc0:	f042 0202 	orrlt.w	r2, r2, #2
   17fc4:	9307      	strge	r3, [sp, #28]
   17fc6:	9307      	strlt	r3, [sp, #28]
   17fc8:	bfb8      	it	lt
   17fca:	9204      	strlt	r2, [sp, #16]
   17fcc:	7823      	ldrb	r3, [r4, #0]
   17fce:	2b2e      	cmp	r3, #46	; 0x2e
   17fd0:	d10c      	bne.n	17fec <_svfiprintf_r+0x130>
   17fd2:	7863      	ldrb	r3, [r4, #1]
   17fd4:	2b2a      	cmp	r3, #42	; 0x2a
   17fd6:	d135      	bne.n	18044 <_svfiprintf_r+0x188>
   17fd8:	9b03      	ldr	r3, [sp, #12]
   17fda:	3402      	adds	r4, #2
   17fdc:	1d1a      	adds	r2, r3, #4
   17fde:	681b      	ldr	r3, [r3, #0]
   17fe0:	2b00      	cmp	r3, #0
   17fe2:	9203      	str	r2, [sp, #12]
   17fe4:	bfb8      	it	lt
   17fe6:	f04f 33ff 	movlt.w	r3, #4294967295
   17fea:	9305      	str	r3, [sp, #20]
   17fec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 180b8 <_svfiprintf_r+0x1fc>
   17ff0:	2203      	movs	r2, #3
   17ff2:	7821      	ldrb	r1, [r4, #0]
   17ff4:	4650      	mov	r0, sl
   17ff6:	f003 fd2d 	bl	1ba54 <memchr>
   17ffa:	b140      	cbz	r0, 1800e <_svfiprintf_r+0x152>
   17ffc:	2340      	movs	r3, #64	; 0x40
   17ffe:	eba0 000a 	sub.w	r0, r0, sl
   18002:	3401      	adds	r4, #1
   18004:	fa03 f000 	lsl.w	r0, r3, r0
   18008:	9b04      	ldr	r3, [sp, #16]
   1800a:	4303      	orrs	r3, r0
   1800c:	9304      	str	r3, [sp, #16]
   1800e:	f814 1b01 	ldrb.w	r1, [r4], #1
   18012:	2206      	movs	r2, #6
   18014:	4825      	ldr	r0, [pc, #148]	; (180ac <_svfiprintf_r+0x1f0>)
   18016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1801a:	f003 fd1b 	bl	1ba54 <memchr>
   1801e:	2800      	cmp	r0, #0
   18020:	d038      	beq.n	18094 <_svfiprintf_r+0x1d8>
   18022:	4b23      	ldr	r3, [pc, #140]	; (180b0 <_svfiprintf_r+0x1f4>)
   18024:	bb1b      	cbnz	r3, 1806e <_svfiprintf_r+0x1b2>
   18026:	9b03      	ldr	r3, [sp, #12]
   18028:	3307      	adds	r3, #7
   1802a:	f023 0307 	bic.w	r3, r3, #7
   1802e:	3308      	adds	r3, #8
   18030:	9303      	str	r3, [sp, #12]
   18032:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18034:	4433      	add	r3, r6
   18036:	9309      	str	r3, [sp, #36]	; 0x24
   18038:	e767      	b.n	17f0a <_svfiprintf_r+0x4e>
   1803a:	fb0c 3202 	mla	r2, ip, r2, r3
   1803e:	460c      	mov	r4, r1
   18040:	2001      	movs	r0, #1
   18042:	e7a5      	b.n	17f90 <_svfiprintf_r+0xd4>
   18044:	2300      	movs	r3, #0
   18046:	3401      	adds	r4, #1
   18048:	f04f 0c0a 	mov.w	ip, #10
   1804c:	4619      	mov	r1, r3
   1804e:	9305      	str	r3, [sp, #20]
   18050:	4620      	mov	r0, r4
   18052:	f810 2b01 	ldrb.w	r2, [r0], #1
   18056:	3a30      	subs	r2, #48	; 0x30
   18058:	2a09      	cmp	r2, #9
   1805a:	d903      	bls.n	18064 <_svfiprintf_r+0x1a8>
   1805c:	2b00      	cmp	r3, #0
   1805e:	d0c5      	beq.n	17fec <_svfiprintf_r+0x130>
   18060:	9105      	str	r1, [sp, #20]
   18062:	e7c3      	b.n	17fec <_svfiprintf_r+0x130>
   18064:	fb0c 2101 	mla	r1, ip, r1, r2
   18068:	4604      	mov	r4, r0
   1806a:	2301      	movs	r3, #1
   1806c:	e7f0      	b.n	18050 <_svfiprintf_r+0x194>
   1806e:	ab03      	add	r3, sp, #12
   18070:	462a      	mov	r2, r5
   18072:	a904      	add	r1, sp, #16
   18074:	4638      	mov	r0, r7
   18076:	9300      	str	r3, [sp, #0]
   18078:	4b0e      	ldr	r3, [pc, #56]	; (180b4 <_svfiprintf_r+0x1f8>)
   1807a:	e000      	b.n	1807e <_svfiprintf_r+0x1c2>
   1807c:	bf00      	nop
   1807e:	1c42      	adds	r2, r0, #1
   18080:	4606      	mov	r6, r0
   18082:	d1d6      	bne.n	18032 <_svfiprintf_r+0x176>
   18084:	89ab      	ldrh	r3, [r5, #12]
   18086:	065b      	lsls	r3, r3, #25
   18088:	f53f af2c 	bmi.w	17ee4 <_svfiprintf_r+0x28>
   1808c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1808e:	b01d      	add	sp, #116	; 0x74
   18090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18094:	ab03      	add	r3, sp, #12
   18096:	462a      	mov	r2, r5
   18098:	a904      	add	r1, sp, #16
   1809a:	4638      	mov	r0, r7
   1809c:	9300      	str	r3, [sp, #0]
   1809e:	4b05      	ldr	r3, [pc, #20]	; (180b4 <_svfiprintf_r+0x1f8>)
   180a0:	f000 f80c 	bl	180bc <_printf_i>
   180a4:	e7eb      	b.n	1807e <_svfiprintf_r+0x1c2>
   180a6:	bf00      	nop
   180a8:	0001d74b 	.word	0x0001d74b
   180ac:	0001d755 	.word	0x0001d755
   180b0:	00000000 	.word	0x00000000
   180b4:	0001bc3b 	.word	0x0001bc3b
   180b8:	0001d751 	.word	0x0001d751

000180bc <_printf_i>:
   180bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   180c0:	460c      	mov	r4, r1
   180c2:	4691      	mov	r9, r2
   180c4:	4680      	mov	r8, r0
   180c6:	469a      	mov	sl, r3
   180c8:	7e27      	ldrb	r7, [r4, #24]
   180ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
   180ce:	990c      	ldr	r1, [sp, #48]	; 0x30
   180d0:	2f78      	cmp	r7, #120	; 0x78
   180d2:	d807      	bhi.n	180e4 <_printf_i+0x28>
   180d4:	2f62      	cmp	r7, #98	; 0x62
   180d6:	d80a      	bhi.n	180ee <_printf_i+0x32>
   180d8:	2f00      	cmp	r7, #0
   180da:	f000 80d8 	beq.w	1828e <_printf_i+0x1d2>
   180de:	2f58      	cmp	r7, #88	; 0x58
   180e0:	f000 80a3 	beq.w	1822a <_printf_i+0x16e>
   180e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
   180e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   180ec:	e03a      	b.n	18164 <_printf_i+0xa8>
   180ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   180f2:	2b15      	cmp	r3, #21
   180f4:	d8f6      	bhi.n	180e4 <_printf_i+0x28>
   180f6:	a001      	add	r0, pc, #4	; (adr r0, 180fc <_printf_i+0x40>)
   180f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   180fc:	00018155 	.word	0x00018155
   18100:	00018169 	.word	0x00018169
   18104:	000180e5 	.word	0x000180e5
   18108:	000180e5 	.word	0x000180e5
   1810c:	000180e5 	.word	0x000180e5
   18110:	000180e5 	.word	0x000180e5
   18114:	00018169 	.word	0x00018169
   18118:	000180e5 	.word	0x000180e5
   1811c:	000180e5 	.word	0x000180e5
   18120:	000180e5 	.word	0x000180e5
   18124:	000180e5 	.word	0x000180e5
   18128:	00018275 	.word	0x00018275
   1812c:	00018199 	.word	0x00018199
   18130:	00018257 	.word	0x00018257
   18134:	000180e5 	.word	0x000180e5
   18138:	000180e5 	.word	0x000180e5
   1813c:	00018297 	.word	0x00018297
   18140:	000180e5 	.word	0x000180e5
   18144:	00018199 	.word	0x00018199
   18148:	000180e5 	.word	0x000180e5
   1814c:	000180e5 	.word	0x000180e5
   18150:	0001825f 	.word	0x0001825f
   18154:	680b      	ldr	r3, [r1, #0]
   18156:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1815a:	1d1a      	adds	r2, r3, #4
   1815c:	681b      	ldr	r3, [r3, #0]
   1815e:	600a      	str	r2, [r1, #0]
   18160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   18164:	2301      	movs	r3, #1
   18166:	e0a3      	b.n	182b0 <_printf_i+0x1f4>
   18168:	6825      	ldr	r5, [r4, #0]
   1816a:	6808      	ldr	r0, [r1, #0]
   1816c:	062e      	lsls	r6, r5, #24
   1816e:	f100 0304 	add.w	r3, r0, #4
   18172:	d50a      	bpl.n	1818a <_printf_i+0xce>
   18174:	6805      	ldr	r5, [r0, #0]
   18176:	600b      	str	r3, [r1, #0]
   18178:	2d00      	cmp	r5, #0
   1817a:	da03      	bge.n	18184 <_printf_i+0xc8>
   1817c:	232d      	movs	r3, #45	; 0x2d
   1817e:	426d      	negs	r5, r5
   18180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   18184:	485e      	ldr	r0, [pc, #376]	; (18300 <_printf_i+0x244>)
   18186:	230a      	movs	r3, #10
   18188:	e019      	b.n	181be <_printf_i+0x102>
   1818a:	f015 0f40 	tst.w	r5, #64	; 0x40
   1818e:	6805      	ldr	r5, [r0, #0]
   18190:	600b      	str	r3, [r1, #0]
   18192:	bf18      	it	ne
   18194:	b22d      	sxthne	r5, r5
   18196:	e7ef      	b.n	18178 <_printf_i+0xbc>
   18198:	680b      	ldr	r3, [r1, #0]
   1819a:	6825      	ldr	r5, [r4, #0]
   1819c:	1d18      	adds	r0, r3, #4
   1819e:	6008      	str	r0, [r1, #0]
   181a0:	0628      	lsls	r0, r5, #24
   181a2:	d501      	bpl.n	181a8 <_printf_i+0xec>
   181a4:	681d      	ldr	r5, [r3, #0]
   181a6:	e002      	b.n	181ae <_printf_i+0xf2>
   181a8:	0669      	lsls	r1, r5, #25
   181aa:	d5fb      	bpl.n	181a4 <_printf_i+0xe8>
   181ac:	881d      	ldrh	r5, [r3, #0]
   181ae:	2f6f      	cmp	r7, #111	; 0x6f
   181b0:	4853      	ldr	r0, [pc, #332]	; (18300 <_printf_i+0x244>)
   181b2:	bf0c      	ite	eq
   181b4:	2308      	moveq	r3, #8
   181b6:	230a      	movne	r3, #10
   181b8:	2100      	movs	r1, #0
   181ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   181be:	6866      	ldr	r6, [r4, #4]
   181c0:	2e00      	cmp	r6, #0
   181c2:	60a6      	str	r6, [r4, #8]
   181c4:	bfa2      	ittt	ge
   181c6:	6821      	ldrge	r1, [r4, #0]
   181c8:	f021 0104 	bicge.w	r1, r1, #4
   181cc:	6021      	strge	r1, [r4, #0]
   181ce:	b90d      	cbnz	r5, 181d4 <_printf_i+0x118>
   181d0:	2e00      	cmp	r6, #0
   181d2:	d04d      	beq.n	18270 <_printf_i+0x1b4>
   181d4:	4616      	mov	r6, r2
   181d6:	fbb5 f1f3 	udiv	r1, r5, r3
   181da:	fb03 5711 	mls	r7, r3, r1, r5
   181de:	5dc7      	ldrb	r7, [r0, r7]
   181e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
   181e4:	462f      	mov	r7, r5
   181e6:	460d      	mov	r5, r1
   181e8:	42bb      	cmp	r3, r7
   181ea:	d9f4      	bls.n	181d6 <_printf_i+0x11a>
   181ec:	2b08      	cmp	r3, #8
   181ee:	d10b      	bne.n	18208 <_printf_i+0x14c>
   181f0:	6823      	ldr	r3, [r4, #0]
   181f2:	07df      	lsls	r7, r3, #31
   181f4:	d508      	bpl.n	18208 <_printf_i+0x14c>
   181f6:	6923      	ldr	r3, [r4, #16]
   181f8:	6861      	ldr	r1, [r4, #4]
   181fa:	4299      	cmp	r1, r3
   181fc:	bfde      	ittt	le
   181fe:	2330      	movle	r3, #48	; 0x30
   18200:	f806 3c01 	strble.w	r3, [r6, #-1]
   18204:	f106 36ff 	addle.w	r6, r6, #4294967295
   18208:	1b92      	subs	r2, r2, r6
   1820a:	6122      	str	r2, [r4, #16]
   1820c:	464b      	mov	r3, r9
   1820e:	aa03      	add	r2, sp, #12
   18210:	4621      	mov	r1, r4
   18212:	4640      	mov	r0, r8
   18214:	f8cd a000 	str.w	sl, [sp]
   18218:	f003 fd6a 	bl	1bcf0 <_printf_common>
   1821c:	3001      	adds	r0, #1
   1821e:	d14c      	bne.n	182ba <_printf_i+0x1fe>
   18220:	f04f 30ff 	mov.w	r0, #4294967295
   18224:	b004      	add	sp, #16
   18226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1822a:	4835      	ldr	r0, [pc, #212]	; (18300 <_printf_i+0x244>)
   1822c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   18230:	6823      	ldr	r3, [r4, #0]
   18232:	680e      	ldr	r6, [r1, #0]
   18234:	061f      	lsls	r7, r3, #24
   18236:	f856 5b04 	ldr.w	r5, [r6], #4
   1823a:	600e      	str	r6, [r1, #0]
   1823c:	d514      	bpl.n	18268 <_printf_i+0x1ac>
   1823e:	07d9      	lsls	r1, r3, #31
   18240:	bf44      	itt	mi
   18242:	f043 0320 	orrmi.w	r3, r3, #32
   18246:	6023      	strmi	r3, [r4, #0]
   18248:	b91d      	cbnz	r5, 18252 <_printf_i+0x196>
   1824a:	6823      	ldr	r3, [r4, #0]
   1824c:	f023 0320 	bic.w	r3, r3, #32
   18250:	6023      	str	r3, [r4, #0]
   18252:	2310      	movs	r3, #16
   18254:	e7b0      	b.n	181b8 <_printf_i+0xfc>
   18256:	6823      	ldr	r3, [r4, #0]
   18258:	f043 0320 	orr.w	r3, r3, #32
   1825c:	6023      	str	r3, [r4, #0]
   1825e:	2378      	movs	r3, #120	; 0x78
   18260:	4828      	ldr	r0, [pc, #160]	; (18304 <_printf_i+0x248>)
   18262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   18266:	e7e3      	b.n	18230 <_printf_i+0x174>
   18268:	065e      	lsls	r6, r3, #25
   1826a:	bf48      	it	mi
   1826c:	b2ad      	uxthmi	r5, r5
   1826e:	e7e6      	b.n	1823e <_printf_i+0x182>
   18270:	4616      	mov	r6, r2
   18272:	e7bb      	b.n	181ec <_printf_i+0x130>
   18274:	680b      	ldr	r3, [r1, #0]
   18276:	6826      	ldr	r6, [r4, #0]
   18278:	1d1d      	adds	r5, r3, #4
   1827a:	6960      	ldr	r0, [r4, #20]
   1827c:	600d      	str	r5, [r1, #0]
   1827e:	0635      	lsls	r5, r6, #24
   18280:	681b      	ldr	r3, [r3, #0]
   18282:	d501      	bpl.n	18288 <_printf_i+0x1cc>
   18284:	6018      	str	r0, [r3, #0]
   18286:	e002      	b.n	1828e <_printf_i+0x1d2>
   18288:	0671      	lsls	r1, r6, #25
   1828a:	d5fb      	bpl.n	18284 <_printf_i+0x1c8>
   1828c:	8018      	strh	r0, [r3, #0]
   1828e:	2300      	movs	r3, #0
   18290:	4616      	mov	r6, r2
   18292:	6123      	str	r3, [r4, #16]
   18294:	e7ba      	b.n	1820c <_printf_i+0x150>
   18296:	680b      	ldr	r3, [r1, #0]
   18298:	1d1a      	adds	r2, r3, #4
   1829a:	600a      	str	r2, [r1, #0]
   1829c:	2100      	movs	r1, #0
   1829e:	681e      	ldr	r6, [r3, #0]
   182a0:	6862      	ldr	r2, [r4, #4]
   182a2:	4630      	mov	r0, r6
   182a4:	f003 fbd6 	bl	1ba54 <memchr>
   182a8:	b108      	cbz	r0, 182ae <_printf_i+0x1f2>
   182aa:	1b80      	subs	r0, r0, r6
   182ac:	6060      	str	r0, [r4, #4]
   182ae:	6863      	ldr	r3, [r4, #4]
   182b0:	6123      	str	r3, [r4, #16]
   182b2:	2300      	movs	r3, #0
   182b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   182b8:	e7a8      	b.n	1820c <_printf_i+0x150>
   182ba:	6923      	ldr	r3, [r4, #16]
   182bc:	4632      	mov	r2, r6
   182be:	4649      	mov	r1, r9
   182c0:	4640      	mov	r0, r8
   182c2:	47d0      	blx	sl
   182c4:	3001      	adds	r0, #1
   182c6:	d0ab      	beq.n	18220 <_printf_i+0x164>
   182c8:	6823      	ldr	r3, [r4, #0]
   182ca:	079b      	lsls	r3, r3, #30
   182cc:	d413      	bmi.n	182f6 <_printf_i+0x23a>
   182ce:	68e0      	ldr	r0, [r4, #12]
   182d0:	9b03      	ldr	r3, [sp, #12]
   182d2:	4298      	cmp	r0, r3
   182d4:	bfb8      	it	lt
   182d6:	4618      	movlt	r0, r3
   182d8:	e7a4      	b.n	18224 <_printf_i+0x168>
   182da:	2301      	movs	r3, #1
   182dc:	4632      	mov	r2, r6
   182de:	4649      	mov	r1, r9
   182e0:	4640      	mov	r0, r8
   182e2:	47d0      	blx	sl
   182e4:	3001      	adds	r0, #1
   182e6:	d09b      	beq.n	18220 <_printf_i+0x164>
   182e8:	3501      	adds	r5, #1
   182ea:	68e3      	ldr	r3, [r4, #12]
   182ec:	9903      	ldr	r1, [sp, #12]
   182ee:	1a5b      	subs	r3, r3, r1
   182f0:	42ab      	cmp	r3, r5
   182f2:	dcf2      	bgt.n	182da <_printf_i+0x21e>
   182f4:	e7eb      	b.n	182ce <_printf_i+0x212>
   182f6:	2500      	movs	r5, #0
   182f8:	f104 0619 	add.w	r6, r4, #25
   182fc:	e7f5      	b.n	182ea <_printf_i+0x22e>
   182fe:	bf00      	nop
   18300:	0001d75c 	.word	0x0001d75c
   18304:	0001d76d 	.word	0x0001d76d

00018308 <dn_read_uint16_t>:
   ptr[3]     = (val>>0)  & 0xff;
}

void dn_read_uint16_t(uint16_t* to, uint8_t* from){
   // MSP430 is a little-endian platform
   *to        = 0;
   18308:	2300      	movs	r3, #0
   1830a:	8003      	strh	r3, [r0, #0]
   *to       |= (from[1]<<0);
   1830c:	784b      	ldrb	r3, [r1, #1]
   1830e:	8003      	strh	r3, [r0, #0]
   *to       |= (from[0]<<8);
   18310:	780a      	ldrb	r2, [r1, #0]
   18312:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18316:	8003      	strh	r3, [r0, #0]
}
   18318:	4770      	bx	lr

0001831a <dn_read_uint32_t>:

void dn_read_uint32_t(uint32_t* to, uint8_t* from){
   // MSP430 is a little-endian platform
   *to        = 0;
   1831a:	2300      	movs	r3, #0
   1831c:	6003      	str	r3, [r0, #0]
   *to       |= ( ((uint32_t)from[3])<<0 );
   1831e:	78cb      	ldrb	r3, [r1, #3]
   18320:	6003      	str	r3, [r0, #0]
   *to       |= ( ((uint32_t)from[2])<<8 );
   18322:	788a      	ldrb	r2, [r1, #2]
   18324:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18328:	6003      	str	r3, [r0, #0]
   *to       |= ( ((uint32_t)from[1])<<16);
   1832a:	784a      	ldrb	r2, [r1, #1]
   1832c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   18330:	6003      	str	r3, [r0, #0]
   *to       |= ( ((uint32_t)from[0])<<24);
   18332:	780a      	ldrb	r2, [r1, #0]
   18334:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   18338:	6003      	str	r3, [r0, #0]
}
   1833a:	4770      	bx	lr

0001833c <dn_ipmg_initiateConnect>:
dn_err_t dn_ipmg_initiateConnect() {
   1833c:	b507      	push	{r0, r1, r2, lr}
   dn_lock();
   1833e:	f000 f809 	bl	18354 <dn_lock>
   rc = dn_serial_mg_initiateConnect();
   18342:	f7f5 f889 	bl	d458 <dn_serial_mg_initiateConnect>
   18346:	9001      	str	r0, [sp, #4]
   dn_unlock();
   18348:	f000 f805 	bl	18356 <dn_unlock>
}
   1834c:	9801      	ldr	r0, [sp, #4]
   1834e:	b003      	add	sp, #12
   18350:	f85d fb04 	ldr.w	pc, [sp], #4

00018354 <dn_lock>:

//=========================== public ==========================================

void dn_lock() {
   // this sample is single threaded, no need to lock.
}
   18354:	4770      	bx	lr

00018356 <dn_unlock>:
   18356:	4770      	bx	lr

00018358 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   18358:	b140      	cbz	r0, 1836c <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1835a:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1835c:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   18360:	2b02      	cmp	r3, #2
   18362:	d006      	beq.n	18372 <sys_notify_validate+0x1a>
   18364:	2b03      	cmp	r3, #3
   18366:	d004      	beq.n	18372 <sys_notify_validate+0x1a>
   18368:	2b01      	cmp	r3, #1
   1836a:	d005      	beq.n	18378 <sys_notify_validate+0x20>
		return -EINVAL;
   1836c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   18370:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   18372:	6803      	ldr	r3, [r0, #0]
   18374:	2b00      	cmp	r3, #0
   18376:	d0f9      	beq.n	1836c <sys_notify_validate+0x14>
		notify->result = 0;
   18378:	2300      	movs	r3, #0
   1837a:	6083      	str	r3, [r0, #8]
   1837c:	4618      	mov	r0, r3
   1837e:	4770      	bx	lr

00018380 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   18380:	6843      	ldr	r3, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   18382:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   18384:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   18388:	2b02      	cmp	r3, #2
	notify->result = res;
   1838a:	6081      	str	r1, [r0, #8]
	switch (method) {
   1838c:	d00b      	beq.n	183a6 <sys_notify_finalize+0x26>
   1838e:	2b03      	cmp	r3, #3
   18390:	d10c      	bne.n	183ac <sys_notify_finalize+0x2c>
	struct k_poll_signal *sig = NULL;
   18392:	2300      	movs	r3, #0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   18394:	6804      	ldr	r4, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   18396:	2200      	movs	r2, #0
   18398:	6042      	str	r2, [r0, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1839a:	b113      	cbz	r3, 183a2 <sys_notify_finalize+0x22>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   1839c:	4618      	mov	r0, r3
   1839e:	f7ff fb99 	bl	17ad4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   183a2:	4620      	mov	r0, r4
   183a4:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = 0;
   183a6:	2400      	movs	r4, #0
		sig = notify->method.signal;
   183a8:	6803      	ldr	r3, [r0, #0]
		break;
   183aa:	e7f4      	b.n	18396 <sys_notify_finalize+0x16>
	switch (method) {
   183ac:	2400      	movs	r4, #0
   183ae:	4623      	mov	r3, r4
   183b0:	e7f1      	b.n	18396 <sys_notify_finalize+0x16>

000183b2 <arch_printk_char_out>:
}
   183b2:	2000      	movs	r0, #0
   183b4:	4770      	bx	lr

000183b6 <str_out>:
{
   183b6:	b530      	push	{r4, r5, lr}
   183b8:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   183ba:	680c      	ldr	r4, [r1, #0]
   183bc:	1c55      	adds	r5, r2, #1
   183be:	b114      	cbz	r4, 183c6 <str_out+0x10>
   183c0:	684b      	ldr	r3, [r1, #4]
   183c2:	4293      	cmp	r3, r2
   183c4:	dc01      	bgt.n	183ca <str_out+0x14>
		ctx->count++;
   183c6:	608d      	str	r5, [r1, #8]
}
   183c8:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   183ca:	3b01      	subs	r3, #1
   183cc:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   183ce:	bf08      	it	eq
   183d0:	2200      	moveq	r2, #0
   183d2:	608d      	str	r5, [r1, #8]
   183d4:	bf0c      	ite	eq
   183d6:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   183d8:	54a0      	strbne	r0, [r4, r2]
   183da:	e7f5      	b.n	183c8 <str_out+0x12>

000183dc <printk>:
{
   183dc:	b40f      	push	{r0, r1, r2, r3}
   183de:	b507      	push	{r0, r1, r2, lr}
   183e0:	a904      	add	r1, sp, #16
   183e2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   183e6:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   183e8:	f7f5 fb2e 	bl	da48 <vprintk>
}
   183ec:	b003      	add	sp, #12
   183ee:	f85d eb04 	ldr.w	lr, [sp], #4
   183f2:	b004      	add	sp, #16
   183f4:	4770      	bx	lr

000183f6 <snprintk>:
{
   183f6:	b40c      	push	{r2, r3}
   183f8:	b507      	push	{r0, r1, r2, lr}
   183fa:	ab04      	add	r3, sp, #16
   183fc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   18400:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   18402:	f7f5 fb2f 	bl	da64 <vsnprintk>
}
   18406:	b003      	add	sp, #12
   18408:	f85d eb04 	ldr.w	lr, [sp], #4
   1840c:	b002      	add	sp, #8
   1840e:	4770      	bx	lr

00018410 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   18410:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   18412:	f013 0307 	ands.w	r3, r3, #7
   18416:	d105      	bne.n	18424 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   18418:	6803      	ldr	r3, [r0, #0]
   1841a:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1841c:	bf0c      	ite	eq
   1841e:	2000      	moveq	r0, #0
   18420:	2003      	movne	r0, #3
   18422:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   18424:	2b02      	cmp	r3, #2
   18426:	d105      	bne.n	18434 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   18428:	8b43      	ldrh	r3, [r0, #26]
   1842a:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1842c:	bf14      	ite	ne
   1842e:	2000      	movne	r0, #0
   18430:	2004      	moveq	r0, #4
   18432:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   18434:	2b01      	cmp	r3, #1
   18436:	d105      	bne.n	18444 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   18438:	6803      	ldr	r3, [r0, #0]
   1843a:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1843c:	bf0c      	ite	eq
   1843e:	2000      	moveq	r0, #0
   18440:	2005      	movne	r0, #5
   18442:	4770      	bx	lr
	int evt = EVT_NOP;
   18444:	2000      	movs	r0, #0
}
   18446:	4770      	bx	lr

00018448 <notify_one>:
{
   18448:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1844a:	460d      	mov	r5, r1
   1844c:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1844e:	4619      	mov	r1, r3
   18450:	1d28      	adds	r0, r5, #4
{
   18452:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   18454:	9300      	str	r3, [sp, #0]
   18456:	f7ff ff93 	bl	18380 <sys_notify_finalize>
	if (cb) {
   1845a:	4604      	mov	r4, r0
   1845c:	b140      	cbz	r0, 18470 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1845e:	e9dd 3200 	ldrd	r3, r2, [sp]
   18462:	4629      	mov	r1, r5
   18464:	4630      	mov	r0, r6
   18466:	46a4      	mov	ip, r4
}
   18468:	b002      	add	sp, #8
   1846a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   1846e:	4760      	bx	ip
}
   18470:	b002      	add	sp, #8
   18472:	bd70      	pop	{r4, r5, r6, pc}

00018474 <transition_complete>:
{
   18474:	b410      	push	{r4}
	__asm__ volatile(
   18476:	f04f 0420 	mov.w	r4, #32
   1847a:	f3ef 8211 	mrs	r2, BASEPRI
   1847e:	f384 8811 	msr	BASEPRI, r4
   18482:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   18486:	6141      	str	r1, [r0, #20]
}
   18488:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   1848c:	2101      	movs	r1, #1
   1848e:	f7f5 bafd 	b.w	da8c <process_event>

00018492 <validate_args>:
{
   18492:	b510      	push	{r4, lr}
   18494:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   18496:	b140      	cbz	r0, 184aa <validate_args+0x18>
   18498:	b139      	cbz	r1, 184aa <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1849a:	1d08      	adds	r0, r1, #4
   1849c:	f7ff ff5c 	bl	18358 <sys_notify_validate>
	if ((rv == 0)
   184a0:	b928      	cbnz	r0, 184ae <validate_args+0x1c>
	    && ((cli->notify.flags
   184a2:	68a3      	ldr	r3, [r4, #8]
   184a4:	f033 0303 	bics.w	r3, r3, #3
   184a8:	d001      	beq.n	184ae <validate_args+0x1c>
		rv = -EINVAL;
   184aa:	f06f 0015 	mvn.w	r0, #21
}
   184ae:	bd10      	pop	{r4, pc}

000184b0 <onoff_manager_init>:
{
   184b0:	b538      	push	{r3, r4, r5, lr}
   184b2:	460c      	mov	r4, r1
	if ((mgr == NULL)
   184b4:	4605      	mov	r5, r0
   184b6:	b158      	cbz	r0, 184d0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   184b8:	b151      	cbz	r1, 184d0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   184ba:	680b      	ldr	r3, [r1, #0]
   184bc:	b143      	cbz	r3, 184d0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   184be:	684b      	ldr	r3, [r1, #4]
   184c0:	b133      	cbz	r3, 184d0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   184c2:	221c      	movs	r2, #28
   184c4:	2100      	movs	r1, #0
   184c6:	f003 faee 	bl	1baa6 <memset>
	return 0;
   184ca:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   184cc:	612c      	str	r4, [r5, #16]
}
   184ce:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   184d0:	f06f 0015 	mvn.w	r0, #21
   184d4:	e7fb      	b.n	184ce <onoff_manager_init+0x1e>

000184d6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   184d6:	b570      	push	{r4, r5, r6, lr}
   184d8:	4604      	mov	r4, r0
   184da:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   184dc:	f7ff ffd9 	bl	18492 <validate_args>

	if (rv < 0) {
   184e0:	1e05      	subs	r5, r0, #0
   184e2:	db31      	blt.n	18548 <onoff_request+0x72>
   184e4:	f04f 0320 	mov.w	r3, #32
   184e8:	f3ef 8111 	mrs	r1, BASEPRI
   184ec:	f383 8811 	msr	BASEPRI, r3
   184f0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   184f4:	f64f 75ff 	movw	r5, #65535	; 0xffff
   184f8:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   184fa:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   184fc:	42ab      	cmp	r3, r5
   184fe:	f000 0207 	and.w	r2, r0, #7
   18502:	d02e      	beq.n	18562 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   18504:	2a02      	cmp	r2, #2
   18506:	d10e      	bne.n	18526 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   18508:	3301      	adds	r3, #1
   1850a:	8363      	strh	r3, [r4, #26]
	rv = state;
   1850c:	4615      	mov	r5, r2
		notify = true;
   1850e:	2301      	movs	r3, #1
	__asm__ volatile(
   18510:	f381 8811 	msr	BASEPRI, r1
   18514:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   18518:	b1b3      	cbz	r3, 18548 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1851a:	2300      	movs	r3, #0
   1851c:	4631      	mov	r1, r6
   1851e:	4620      	mov	r0, r4
   18520:	f7ff ff92 	bl	18448 <notify_one>
   18524:	e010      	b.n	18548 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   18526:	0783      	lsls	r3, r0, #30
   18528:	d001      	beq.n	1852e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1852a:	2a06      	cmp	r2, #6
   1852c:	d10e      	bne.n	1854c <onoff_request+0x76>
	parent->next = child;
   1852e:	2300      	movs	r3, #0
   18530:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   18532:	6863      	ldr	r3, [r4, #4]
   18534:	b993      	cbnz	r3, 1855c <onoff_request+0x86>
	list->head = node;
   18536:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1853a:	4615      	mov	r5, r2
   1853c:	b962      	cbnz	r2, 18558 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1853e:	460a      	mov	r2, r1
   18540:	4620      	mov	r0, r4
   18542:	2102      	movs	r1, #2
   18544:	f7f5 faa2 	bl	da8c <process_event>
		}
	}

	return rv;
}
   18548:	4628      	mov	r0, r5
   1854a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1854c:	2a05      	cmp	r2, #5
   1854e:	bf0c      	ite	eq
   18550:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   18554:	f06f 0504 	mvnne.w	r5, #4
   18558:	2300      	movs	r3, #0
   1855a:	e7d9      	b.n	18510 <onoff_request+0x3a>
	parent->next = child;
   1855c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1855e:	6066      	str	r6, [r4, #4]
}
   18560:	e7eb      	b.n	1853a <onoff_request+0x64>
		rv = -EAGAIN;
   18562:	f06f 050a 	mvn.w	r5, #10
   18566:	e7f7      	b.n	18558 <onoff_request+0x82>

00018568 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   18568:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1856a:	f7fe ff4b 	bl	17404 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   1856e:	2000      	movs	r0, #0
   18570:	bd08      	pop	{r3, pc}

00018572 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   18572:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   18574:	f7fe ff6c 	bl	17450 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   18578:	f110 0f0b 	cmn.w	r0, #11
   1857c:	d005      	beq.n	1858a <sys_sem_take+0x18>
   1857e:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   18582:	bf08      	it	eq
   18584:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   18588:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   1858a:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   1858e:	e7fb      	b.n	18588 <sys_sem_take+0x16>

00018590 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   18590:	4604      	mov	r4, r0
   18592:	b508      	push	{r3, lr}
   18594:	4608      	mov	r0, r1
   18596:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   18598:	461a      	mov	r2, r3
   1859a:	47a0      	blx	r4
	return z_impl_k_current_get();
   1859c:	f7fe ff2c 	bl	173f8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   185a0:	f7f7 ff06 	bl	103b0 <z_impl_k_thread_abort>

000185a4 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   185a4:	b510      	push	{r4, lr}
   185a6:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   185a8:	f04f 33ff 	mov.w	r3, #4294967295
   185ac:	f04f 32ff 	mov.w	r2, #4294967295
   185b0:	4620      	mov	r0, r4
   185b2:	f7fe fb55 	bl	16c60 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   185b6:	4603      	mov	r3, r0
   185b8:	2800      	cmp	r0, #0
   185ba:	d0f5      	beq.n	185a8 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   185bc:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   185be:	3308      	adds	r3, #8
   185c0:	e8d3 1fef 	ldaex	r1, [r3]
   185c4:	f021 0c01 	bic.w	ip, r1, #1
   185c8:	e8c3 cfee 	stlex	lr, ip, [r3]
   185cc:	f1be 0f00 	cmp.w	lr, #0
   185d0:	d1f6      	bne.n	185c0 <z_work_q_main+0x1c>
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   185d2:	07cb      	lsls	r3, r1, #31
   185d4:	d500      	bpl.n	185d8 <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   185d6:	4790      	blx	r2
	z_impl_k_yield();
   185d8:	f7fe fe9e 	bl	17318 <z_impl_k_yield>
   185dc:	e7e4      	b.n	185a8 <z_work_q_main+0x4>

000185de <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   185de:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   185e0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   185e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   185e8:	bf2c      	ite	cs
   185ea:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   185ee:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   185f2:	4770      	bx	lr

000185f4 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   185f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   185f8:	6880      	ldr	r0, [r0, #8]
   185fa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   185fe:	bf2c      	ite	cs
   18600:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   18604:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   18608:	4770      	bx	lr

0001860a <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1860a:	2201      	movs	r2, #1
{
   1860c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1860e:	f7ff ffe6 	bl	185de <chunk_field>
}
   18612:	0840      	lsrs	r0, r0, #1
   18614:	bd08      	pop	{r3, pc}

00018616 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   18616:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   18618:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1861c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18620:	d308      	bcc.n	18634 <set_chunk_used+0x1e>
		if (used) {
   18622:	684b      	ldr	r3, [r1, #4]
   18624:	b11a      	cbz	r2, 1862e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   18626:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1862a:	604b      	str	r3, [r1, #4]
   1862c:	4770      	bx	lr
   1862e:	f023 0301 	bic.w	r3, r3, #1
   18632:	e7fa      	b.n	1862a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   18634:	884b      	ldrh	r3, [r1, #2]
   18636:	b11a      	cbz	r2, 18640 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   18638:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1863c:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1863e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   18640:	f023 0301 	bic.w	r3, r3, #1
   18644:	e7fa      	b.n	1863c <set_chunk_used+0x26>

00018646 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   18646:	0053      	lsls	r3, r2, #1
   18648:	2201      	movs	r2, #1
   1864a:	f7ff bfd3 	b.w	185f4 <chunk_set>

0001864e <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1864e:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   18650:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   18652:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   18656:	bf2c      	ite	cs
   18658:	2002      	movcs	r0, #2
   1865a:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1865c:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1865e:	fab0 f080 	clz	r0, r0
}
   18662:	f1c0 001f 	rsb	r0, r0, #31
   18666:	4770      	bx	lr

00018668 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   18668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1866a:	4616      	mov	r6, r2
   1866c:	4604      	mov	r4, r0
   1866e:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   18670:	f7ff ffcb 	bl	1860a <chunk_size>
   18674:	4631      	mov	r1, r6
   18676:	4605      	mov	r5, r0
   18678:	4620      	mov	r0, r4
   1867a:	f7ff ffc6 	bl	1860a <chunk_size>
   1867e:	182b      	adds	r3, r5, r0

	set_chunk_size(h, lc, newsz);
   18680:	461a      	mov	r2, r3
   18682:	4639      	mov	r1, r7
   18684:	4620      	mov	r0, r4
   18686:	9301      	str	r3, [sp, #4]
   18688:	f7ff ffdd 	bl	18646 <set_chunk_size>
	return c + chunk_size(h, c);
   1868c:	4631      	mov	r1, r6
   1868e:	4620      	mov	r0, r4
   18690:	f7ff ffbb 	bl	1860a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   18694:	2200      	movs	r2, #0
   18696:	1831      	adds	r1, r6, r0
   18698:	4620      	mov	r0, r4
   1869a:	9b01      	ldr	r3, [sp, #4]
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1869c:	b003      	add	sp, #12
   1869e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   186a2:	f7ff bfa7 	b.w	185f4 <chunk_set>

000186a6 <split_chunks>:
{
   186a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   186a8:	4614      	mov	r4, r2
   186aa:	460e      	mov	r6, r1
   186ac:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   186ae:	f7ff ffac 	bl	1860a <chunk_size>
	size_t lsz = rc - lc;
   186b2:	1ba3      	subs	r3, r4, r6
	size_t rsz = sz0 - lsz;
   186b4:	1b32      	subs	r2, r6, r4
   186b6:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   186b8:	4631      	mov	r1, r6
   186ba:	461a      	mov	r2, r3
   186bc:	4628      	mov	r0, r5
   186be:	9301      	str	r3, [sp, #4]
   186c0:	f7ff ffc1 	bl	18646 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   186c4:	463a      	mov	r2, r7
   186c6:	4621      	mov	r1, r4
   186c8:	4628      	mov	r0, r5
   186ca:	f7ff ffbc 	bl	18646 <set_chunk_size>
   186ce:	9b01      	ldr	r3, [sp, #4]
   186d0:	2200      	movs	r2, #0
   186d2:	4621      	mov	r1, r4
   186d4:	4628      	mov	r0, r5
   186d6:	f7ff ff8d 	bl	185f4 <chunk_set>
	return c + chunk_size(h, c);
   186da:	4621      	mov	r1, r4
   186dc:	4628      	mov	r0, r5
   186de:	f7ff ff94 	bl	1860a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   186e2:	463b      	mov	r3, r7
   186e4:	1821      	adds	r1, r4, r0
   186e6:	2200      	movs	r2, #0
   186e8:	4628      	mov	r0, r5
}
   186ea:	b003      	add	sp, #12
   186ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   186f0:	f7ff bf80 	b.w	185f4 <chunk_set>

000186f4 <free_list_remove_bidx>:
{
   186f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   186f8:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   186fa:	2203      	movs	r2, #3
   186fc:	460e      	mov	r6, r1
   186fe:	4604      	mov	r4, r0
   18700:	f7ff ff6d 	bl	185de <chunk_field>
	if (next_free_chunk(h, c) == c) {
   18704:	4286      	cmp	r6, r0
   18706:	4605      	mov	r5, r0
   18708:	f107 0804 	add.w	r8, r7, #4
   1870c:	d10b      	bne.n	18726 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1870e:	2301      	movs	r3, #1
   18710:	fa03 f707 	lsl.w	r7, r3, r7
   18714:	68e3      	ldr	r3, [r4, #12]
   18716:	ea23 0307 	bic.w	r3, r3, r7
   1871a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1871c:	2300      	movs	r3, #0
   1871e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   18722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   18726:	4631      	mov	r1, r6
   18728:	2202      	movs	r2, #2
   1872a:	4620      	mov	r0, r4
   1872c:	f7ff ff57 	bl	185de <chunk_field>
   18730:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   18732:	462b      	mov	r3, r5
   18734:	4601      	mov	r1, r0
   18736:	2203      	movs	r2, #3
   18738:	4620      	mov	r0, r4
		b->next = second;
   1873a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1873e:	f7ff ff59 	bl	185f4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   18742:	4633      	mov	r3, r6
   18744:	4629      	mov	r1, r5
   18746:	4620      	mov	r0, r4
}
   18748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1874c:	2202      	movs	r2, #2
   1874e:	f7ff bf51 	b.w	185f4 <chunk_set>

00018752 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   18752:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18756:	4604      	mov	r4, r0
   18758:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   1875a:	f7ff ff78 	bl	1864e <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1875e:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   18760:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   18762:	4620      	mov	r0, r4
   18764:	f7ff ff73 	bl	1864e <bucket_idx>
   18768:	42a8      	cmp	r0, r5
   1876a:	da04      	bge.n	18776 <alloc_chunk+0x24>
		return 0;
   1876c:	2100      	movs	r1, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1876e:	4608      	mov	r0, r1
   18770:	b003      	add	sp, #12
   18772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (b->next) {
   18776:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   1877a:	f8d9 8010 	ldr.w	r8, [r9, #16]
   1877e:	f1b8 0f00 	cmp.w	r8, #0
   18782:	d019      	beq.n	187b8 <alloc_chunk+0x66>
   18784:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   18786:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   1878a:	4620      	mov	r0, r4
   1878c:	9101      	str	r1, [sp, #4]
   1878e:	f7ff ff3c 	bl	1860a <chunk_size>
   18792:	42b8      	cmp	r0, r7
   18794:	9901      	ldr	r1, [sp, #4]
   18796:	d305      	bcc.n	187a4 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   18798:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1879a:	4620      	mov	r0, r4
   1879c:	f7ff ffaa 	bl	186f4 <free_list_remove_bidx>
   187a0:	9901      	ldr	r1, [sp, #4]
		return c;
   187a2:	e7e4      	b.n	1876e <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   187a4:	2203      	movs	r2, #3
   187a6:	4620      	mov	r0, r4
   187a8:	f7ff ff19 	bl	185de <chunk_field>
		} while (--i && b->next != first);
   187ac:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   187ae:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   187b2:	d001      	beq.n	187b8 <alloc_chunk+0x66>
   187b4:	4580      	cmp	r8, r0
   187b6:	d1e6      	bne.n	18786 <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   187b8:	f04f 32ff 	mov.w	r2, #4294967295
   187bc:	68e3      	ldr	r3, [r4, #12]
   187be:	3501      	adds	r5, #1
   187c0:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   187c2:	401a      	ands	r2, r3
   187c4:	d0d2      	beq.n	1876c <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   187c6:	fa92 f2a2 	rbit	r2, r2
   187ca:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   187ce:	1d13      	adds	r3, r2, #4
   187d0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   187d4:	9101      	str	r1, [sp, #4]
   187d6:	e7e0      	b.n	1879a <alloc_chunk+0x48>

000187d8 <free_list_add>:
{
   187d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187dc:	4604      	mov	r4, r0
   187de:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   187e0:	f7ff ff13 	bl	1860a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   187e4:	68a3      	ldr	r3, [r4, #8]
   187e6:	4601      	mov	r1, r0
   187e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   187ec:	d301      	bcc.n	187f2 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   187ee:	2801      	cmp	r0, #1
   187f0:	d035      	beq.n	1885e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   187f2:	4620      	mov	r0, r4
   187f4:	f7ff ff2b 	bl	1864e <bucket_idx>
	if (b->next == 0U) {
   187f8:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   187fc:	6916      	ldr	r6, [r2, #16]
   187fe:	b99e      	cbnz	r6, 18828 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   18800:	2301      	movs	r3, #1
   18802:	fa03 f000 	lsl.w	r0, r3, r0
   18806:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   18808:	4629      	mov	r1, r5
   1880a:	4303      	orrs	r3, r0
   1880c:	60e3      	str	r3, [r4, #12]
   1880e:	4620      	mov	r0, r4
		b->next = c;
   18810:	6115      	str	r5, [r2, #16]
   18812:	462b      	mov	r3, r5
   18814:	2202      	movs	r2, #2
   18816:	f7ff feed 	bl	185f4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1881a:	2203      	movs	r2, #3
   1881c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1881e:	4620      	mov	r0, r4
}
   18820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18824:	f7ff bee6 	b.w	185f4 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   18828:	2202      	movs	r2, #2
   1882a:	4631      	mov	r1, r6
   1882c:	4620      	mov	r0, r4
   1882e:	f7ff fed6 	bl	185de <chunk_field>
   18832:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   18834:	4603      	mov	r3, r0
   18836:	2202      	movs	r2, #2
   18838:	4629      	mov	r1, r5
   1883a:	4620      	mov	r0, r4
   1883c:	f7ff feda 	bl	185f4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   18840:	4633      	mov	r3, r6
   18842:	2203      	movs	r2, #3
   18844:	4629      	mov	r1, r5
   18846:	4620      	mov	r0, r4
   18848:	f7ff fed4 	bl	185f4 <chunk_set>
   1884c:	2203      	movs	r2, #3
   1884e:	4639      	mov	r1, r7
   18850:	462b      	mov	r3, r5
   18852:	4620      	mov	r0, r4
   18854:	f7ff fece 	bl	185f4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   18858:	2202      	movs	r2, #2
   1885a:	4631      	mov	r1, r6
   1885c:	e7df      	b.n	1881e <free_list_add+0x46>
   1885e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018862 <free_list_remove>:
{
   18862:	b538      	push	{r3, r4, r5, lr}
   18864:	4604      	mov	r4, r0
   18866:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   18868:	f7ff fecf 	bl	1860a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1886c:	68a3      	ldr	r3, [r4, #8]
   1886e:	4601      	mov	r1, r0
   18870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18874:	d301      	bcc.n	1887a <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   18876:	2801      	cmp	r0, #1
   18878:	d009      	beq.n	1888e <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1887a:	4620      	mov	r0, r4
   1887c:	f7ff fee7 	bl	1864e <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   18880:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   18882:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   18884:	4620      	mov	r0, r4
}
   18886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1888a:	f7ff bf33 	b.w	186f4 <free_list_remove_bidx>
}
   1888e:	bd38      	pop	{r3, r4, r5, pc}

00018890 <free_chunk>:
{
   18890:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18892:	4605      	mov	r5, r0
   18894:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   18896:	f7ff feb8 	bl	1860a <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1889a:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   1889c:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1889e:	4628      	mov	r0, r5
   188a0:	9101      	str	r1, [sp, #4]
   188a2:	f7ff fe9c 	bl	185de <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   188a6:	f010 0f01 	tst.w	r0, #1
   188aa:	9901      	ldr	r1, [sp, #4]
   188ac:	d10b      	bne.n	188c6 <free_chunk+0x36>
		free_list_remove(h, right_chunk(h, c));
   188ae:	4628      	mov	r0, r5
   188b0:	f7ff ffd7 	bl	18862 <free_list_remove>
	return c + chunk_size(h, c);
   188b4:	4621      	mov	r1, r4
   188b6:	4628      	mov	r0, r5
   188b8:	f7ff fea7 	bl	1860a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   188bc:	4621      	mov	r1, r4
   188be:	1822      	adds	r2, r4, r0
   188c0:	4628      	mov	r0, r5
   188c2:	f7ff fed1 	bl	18668 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   188c6:	2200      	movs	r2, #0
   188c8:	4621      	mov	r1, r4
   188ca:	4628      	mov	r0, r5
   188cc:	f7ff fe87 	bl	185de <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   188d0:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   188d2:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   188d4:	4628      	mov	r0, r5
   188d6:	9101      	str	r1, [sp, #4]
   188d8:	f7ff fe81 	bl	185de <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   188dc:	f010 0601 	ands.w	r6, r0, #1
   188e0:	9901      	ldr	r1, [sp, #4]
   188e2:	d112      	bne.n	1890a <free_chunk+0x7a>
		free_list_remove(h, left_chunk(h, c));
   188e4:	4628      	mov	r0, r5
   188e6:	f7ff ffbc 	bl	18862 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   188ea:	4621      	mov	r1, r4
   188ec:	4632      	mov	r2, r6
   188ee:	4628      	mov	r0, r5
   188f0:	f7ff fe75 	bl	185de <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   188f4:	4622      	mov	r2, r4
   188f6:	1a21      	subs	r1, r4, r0
   188f8:	4628      	mov	r0, r5
   188fa:	f7ff feb5 	bl	18668 <merge_chunks>
   188fe:	4621      	mov	r1, r4
   18900:	4632      	mov	r2, r6
   18902:	4628      	mov	r0, r5
   18904:	f7ff fe6b 	bl	185de <chunk_field>
   18908:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1890a:	4621      	mov	r1, r4
   1890c:	4628      	mov	r0, r5
}
   1890e:	b002      	add	sp, #8
   18910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
   18914:	f7ff bf60 	b.w	187d8 <free_list_add>

00018918 <sys_heap_free>:
{
   18918:	b507      	push	{r0, r1, r2, lr}
	if (mem == NULL) {
   1891a:	b199      	cbz	r1, 18944 <sys_heap_free+0x2c>
	struct z_heap *h = heap->heap;
   1891c:	6800      	ldr	r0, [r0, #0]
	set_chunk_used(h, c, false);
   1891e:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   18920:	6883      	ldr	r3, [r0, #8]
   18922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18926:	bf2c      	ite	cs
   18928:	2308      	movcs	r3, #8
   1892a:	2304      	movcc	r3, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1892c:	1ac9      	subs	r1, r1, r3
   1892e:	1a09      	subs	r1, r1, r0
   18930:	08c9      	lsrs	r1, r1, #3
	set_chunk_used(h, c, false);
   18932:	9101      	str	r1, [sp, #4]
   18934:	f7ff fe6f 	bl	18616 <set_chunk_used>
	free_chunk(h, c);
   18938:	9901      	ldr	r1, [sp, #4]
}
   1893a:	b003      	add	sp, #12
   1893c:	f85d eb04 	ldr.w	lr, [sp], #4
	free_chunk(h, c);
   18940:	f7ff bfa6 	b.w	18890 <free_chunk>
}
   18944:	b003      	add	sp, #12
   18946:	f85d fb04 	ldr.w	pc, [sp], #4

0001894a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1894a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1894c:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1894e:	b909      	cbnz	r1, 18954 <sys_heap_alloc+0xa>
		return NULL;
   18950:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   18952:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   18954:	68ab      	ldr	r3, [r5, #8]
   18956:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1895a:	d9f9      	bls.n	18950 <sys_heap_alloc+0x6>
   1895c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18960:	bf2c      	ite	cs
   18962:	2208      	movcs	r2, #8
   18964:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   18966:	1dcc      	adds	r4, r1, #7
   18968:	4414      	add	r4, r2
   1896a:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1896c:	4621      	mov	r1, r4
   1896e:	4628      	mov	r0, r5
   18970:	f7ff feef 	bl	18752 <alloc_chunk>
	if (c == 0U) {
   18974:	4606      	mov	r6, r0
   18976:	2800      	cmp	r0, #0
   18978:	d0ea      	beq.n	18950 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1897a:	4601      	mov	r1, r0
   1897c:	4628      	mov	r0, r5
   1897e:	f7ff fe44 	bl	1860a <chunk_size>
   18982:	42a0      	cmp	r0, r4
   18984:	d909      	bls.n	1899a <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   18986:	4434      	add	r4, r6
   18988:	4631      	mov	r1, r6
   1898a:	4628      	mov	r0, r5
   1898c:	4622      	mov	r2, r4
   1898e:	f7ff fe8a 	bl	186a6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   18992:	4621      	mov	r1, r4
   18994:	4628      	mov	r0, r5
   18996:	f7ff ff1f 	bl	187d8 <free_list_add>
	set_chunk_used(h, c, true);
   1899a:	4628      	mov	r0, r5
   1899c:	2201      	movs	r2, #1
   1899e:	4631      	mov	r1, r6
   189a0:	f7ff fe39 	bl	18616 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   189a4:	68ab      	ldr	r3, [r5, #8]
   189a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   189aa:	bf2c      	ite	cs
   189ac:	2008      	movcs	r0, #8
   189ae:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   189b0:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   189b4:	4428      	add	r0, r5
	return chunk_mem(h, c);
   189b6:	e7cc      	b.n	18952 <sys_heap_alloc+0x8>

000189b8 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   189b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap *h = heap->heap;
   189bc:	6805      	ldr	r5, [r0, #0]
{
   189be:	4614      	mov	r4, r2
   189c0:	68ab      	ldr	r3, [r5, #8]
   189c2:	460f      	mov	r7, r1
   189c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   189c8:	bf2c      	ite	cs
   189ca:	2208      	movcs	r2, #8
   189cc:	2204      	movcc	r2, #4

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (align <= chunk_header_bytes(h)) {
   189ce:	4291      	cmp	r1, r2
   189d0:	d804      	bhi.n	189dc <sys_heap_aligned_alloc+0x24>
		return sys_heap_alloc(heap, bytes);
   189d2:	4621      	mov	r1, r4
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   189d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sys_heap_alloc(heap, bytes);
   189d8:	f7ff bfb7 	b.w	1894a <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
   189dc:	b91c      	cbnz	r4, 189e6 <sys_heap_aligned_alloc+0x2e>
		return NULL;
   189de:	2600      	movs	r6, #0
}
   189e0:	4630      	mov	r0, r6
   189e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
   189e6:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   189ea:	d9f8      	bls.n	189de <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   189ec:	1de1      	adds	r1, r4, #7
   189ee:	4439      	add	r1, r7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   189f0:	4628      	mov	r0, r5
   189f2:	08c9      	lsrs	r1, r1, #3
   189f4:	f7ff fead 	bl	18752 <alloc_chunk>
	if (c0 == 0) {
   189f8:	4680      	mov	r8, r0
   189fa:	2800      	cmp	r0, #0
   189fc:	d0ef      	beq.n	189de <sys_heap_aligned_alloc+0x26>
	return big_heap(h) ? 8 : 4;
   189fe:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   18a00:	1e7a      	subs	r2, r7, #1
   18a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18a06:	bf2c      	ite	cs
   18a08:	2308      	movcs	r3, #8
   18a0a:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   18a0c:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
   18a10:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   18a12:	427f      	negs	r7, r7
   18a14:	4416      	add	r6, r2
   18a16:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   18a18:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   18a1a:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   18a1c:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   18a1e:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   18a20:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   18a24:	1b64      	subs	r4, r4, r5
	if (c > c0) {
   18a26:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   18a2a:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   18a2e:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   18a32:	d208      	bcs.n	18a46 <sys_heap_aligned_alloc+0x8e>
		split_chunks(h, c0, c);
   18a34:	4601      	mov	r1, r0
   18a36:	463a      	mov	r2, r7
   18a38:	4628      	mov	r0, r5
   18a3a:	f7ff fe34 	bl	186a6 <split_chunks>
		free_list_add(h, c0);
   18a3e:	4641      	mov	r1, r8
   18a40:	4628      	mov	r0, r5
   18a42:	f7ff fec9 	bl	187d8 <free_list_add>
	return c + chunk_size(h, c);
   18a46:	4639      	mov	r1, r7
   18a48:	4628      	mov	r0, r5
   18a4a:	f7ff fdde 	bl	1860a <chunk_size>
   18a4e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   18a50:	4284      	cmp	r4, r0
   18a52:	d208      	bcs.n	18a66 <sys_heap_aligned_alloc+0xae>
		split_chunks(h, c, c_end);
   18a54:	4639      	mov	r1, r7
   18a56:	4628      	mov	r0, r5
   18a58:	4622      	mov	r2, r4
   18a5a:	f7ff fe24 	bl	186a6 <split_chunks>
		free_list_add(h, c_end);
   18a5e:	4621      	mov	r1, r4
   18a60:	4628      	mov	r0, r5
   18a62:	f7ff feb9 	bl	187d8 <free_list_add>
	set_chunk_used(h, c, true);
   18a66:	2201      	movs	r2, #1
   18a68:	4639      	mov	r1, r7
   18a6a:	4628      	mov	r0, r5
   18a6c:	f7ff fdd3 	bl	18616 <set_chunk_used>
	return mem;
   18a70:	e7b6      	b.n	189e0 <sys_heap_aligned_alloc+0x28>

00018a72 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   18a72:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   18a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a78:	bf2c      	ite	cs
   18a7a:	2508      	movcs	r5, #8
   18a7c:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   18a7e:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   18a80:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   18a82:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   18a84:	1dcc      	adds	r4, r1, #7
   18a86:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   18a8a:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   18a8c:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   18a90:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   18a92:	440d      	add	r5, r1
   18a94:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   18a98:	1b2d      	subs	r5, r5, r4
   18a9a:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   18a9c:	4629      	mov	r1, r5
   18a9e:	4620      	mov	r0, r4
	h->len = buf_sz;
   18aa0:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   18aa2:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   18aa4:	f7ff fdd3 	bl	1864e <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   18aa8:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   18aaa:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   18aac:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   18aae:	361b      	adds	r6, #27
   18ab0:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   18ab2:	f104 0210 	add.w	r2, r4, #16
   18ab6:	428b      	cmp	r3, r1
   18ab8:	db29      	blt.n	18b0e <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   18aba:	4632      	mov	r2, r6
   18abc:	4620      	mov	r0, r4
   18abe:	2100      	movs	r1, #0
   18ac0:	f7ff fdc1 	bl	18646 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   18ac4:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   18ac6:	4620      	mov	r0, r4
   18ac8:	2201      	movs	r2, #1
   18aca:	2100      	movs	r1, #0
   18acc:	f7ff fda3 	bl	18616 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   18ad0:	463a      	mov	r2, r7
   18ad2:	4631      	mov	r1, r6
   18ad4:	f7ff fdb7 	bl	18646 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   18ad8:	4633      	mov	r3, r6
   18ada:	4631      	mov	r1, r6
   18adc:	4620      	mov	r0, r4
   18ade:	2200      	movs	r2, #0
   18ae0:	f7ff fd88 	bl	185f4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   18ae4:	4629      	mov	r1, r5
   18ae6:	4620      	mov	r0, r4
   18ae8:	2200      	movs	r2, #0
   18aea:	f7ff fdac 	bl	18646 <set_chunk_size>
   18aee:	463b      	mov	r3, r7
   18af0:	4629      	mov	r1, r5
   18af2:	4620      	mov	r0, r4
   18af4:	2200      	movs	r2, #0
   18af6:	f7ff fd7d 	bl	185f4 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   18afa:	4629      	mov	r1, r5
   18afc:	4620      	mov	r0, r4
   18afe:	2201      	movs	r2, #1
   18b00:	f7ff fd89 	bl	18616 <set_chunk_used>

	free_list_add(h, chunk0_size);
   18b04:	4631      	mov	r1, r6
}
   18b06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   18b0a:	f7ff be65 	b.w	187d8 <free_list_add>
		h->buckets[i].next = 0;
   18b0e:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   18b12:	3301      	adds	r3, #1
   18b14:	e7cf      	b.n	18ab6 <sys_heap_init+0x44>

00018b16 <_ldiv5>:
{
   18b16:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
   18b1a:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
   18b1e:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   18b22:	fba2 bc03 	umull	fp, ip, r2, r3
   18b26:	eb1b 0603 	adds.w	r6, fp, r3
   18b2a:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
   18b2e:	462f      	mov	r7, r5
   18b30:	2600      	movs	r6, #0
	result += (uint64_t)v_hi * m;
   18b32:	fba4 4503 	umull	r4, r5, r4, r3
   18b36:	eb1b 0204 	adds.w	r2, fp, r4
   18b3a:	eb4c 0105 	adc.w	r1, ip, r5
   18b3e:	19d2      	adds	r2, r2, r7
	result >>= 32;
   18b40:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
   18b42:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
   18b46:	1863      	adds	r3, r4, r1
   18b48:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
   18b4c:	e9c0 3200 	strd	r3, r2, [r0]
}
   18b50:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

00018b54 <_get_digit>:
	if (*digit_count > 0) {
   18b54:	680b      	ldr	r3, [r1, #0]
{
   18b56:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   18b58:	2b00      	cmp	r3, #0
   18b5a:	dd10      	ble.n	18b7e <_get_digit+0x2a>
		--*digit_count;
   18b5c:	3b01      	subs	r3, #1
   18b5e:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   18b60:	210a      	movs	r1, #10
   18b62:	6802      	ldr	r2, [r0, #0]
   18b64:	6844      	ldr	r4, [r0, #4]
   18b66:	fba2 5601 	umull	r5, r6, r2, r1
   18b6a:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= (BIT64(60) - 1U);
   18b6e:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   18b72:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   18b76:	0f31      	lsrs	r1, r6, #28
   18b78:	3130      	adds	r1, #48	; 0x30
}
   18b7a:	4608      	mov	r0, r1
   18b7c:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   18b7e:	2130      	movs	r1, #48	; 0x30
   18b80:	e7fb      	b.n	18b7a <_get_digit+0x26>

00018b82 <outs>:
{
   18b82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18b86:	4680      	mov	r8, r0
   18b88:	4689      	mov	r9, r1
   18b8a:	4616      	mov	r6, r2
   18b8c:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   18b8e:	4615      	mov	r5, r2
   18b90:	42bd      	cmp	r5, r7
   18b92:	eba5 0406 	sub.w	r4, r5, r6
   18b96:	d305      	bcc.n	18ba4 <outs+0x22>
   18b98:	b10f      	cbz	r7, 18b9e <outs+0x1c>
	return (int)count;
   18b9a:	4620      	mov	r0, r4
   18b9c:	e008      	b.n	18bb0 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   18b9e:	782b      	ldrb	r3, [r5, #0]
   18ba0:	2b00      	cmp	r3, #0
   18ba2:	d0fa      	beq.n	18b9a <outs+0x18>
		int rc = out((int)*sp++, ctx);
   18ba4:	4649      	mov	r1, r9
   18ba6:	f815 0b01 	ldrb.w	r0, [r5], #1
   18baa:	47c0      	blx	r8
		if (rc < 0) {
   18bac:	2800      	cmp	r0, #0
   18bae:	daef      	bge.n	18b90 <outs+0xe>
}
   18bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00018bb4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_MQTT_SIMPLE_LOG_LEVEL_DBG, 1);
GEN_ABSOLUTE_SYM(CONFIG_MQTT_SIMPLE_LOG_LEVEL, 4);

GEN_ABS_SYM_END
   18bb4:	4770      	bx	lr

00018bb6 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   18bb6:	f7fd badf 	b.w	16178 <SystemInit>

00018bba <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   18bba:	2300      	movs	r3, #0
	list->head = NULL;
   18bbc:	e9c0 3300 	strd	r3, r3, [r0]
}
   18bc0:	4770      	bx	lr

00018bc2 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   18bc2:	6803      	ldr	r3, [r0, #0]
   18bc4:	b923      	cbnz	r3, 18bd0 <log_list_add_tail+0xe>
		list->head = msg;
   18bc6:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   18bc8:	2300      	movs	r3, #0
	list->tail = msg;
   18bca:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   18bcc:	600b      	str	r3, [r1, #0]
}
   18bce:	4770      	bx	lr
		list->tail->next = msg;
   18bd0:	6843      	ldr	r3, [r0, #4]
   18bd2:	6019      	str	r1, [r3, #0]
   18bd4:	e7f8      	b.n	18bc8 <log_list_add_tail+0x6>

00018bd6 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   18bd6:	6800      	ldr	r0, [r0, #0]
   18bd8:	4770      	bx	lr

00018bda <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   18bda:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   18bdc:	b10b      	cbz	r3, 18be2 <log_list_head_get+0x8>
		list->head = list->head->next;
   18bde:	681a      	ldr	r2, [r3, #0]
   18be0:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   18be2:	4618      	mov	r0, r3
   18be4:	4770      	bx	lr

00018be6 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   18be6:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   18be8:	f7f6 fa18 	bl	f01c <log_msg_chunk_alloc>

	if (msg != NULL) {
   18bec:	b118      	cbz	r0, 18bf6 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   18bee:	2301      	movs	r3, #1
   18bf0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   18bf2:	2300      	movs	r3, #0
   18bf4:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   18bf6:	bd08      	pop	{r3, pc}

00018bf8 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   18bf8:	f7f6 bf66 	b.w	fac8 <z_timer_cycle_get_32>

00018bfc <dummy_timestamp>:
   18bfc:	2000      	movs	r0, #0
   18bfe:	4770      	bx	lr

00018c00 <log_0>:
{
   18c00:	b513      	push	{r0, r1, r4, lr}
   18c02:	4604      	mov	r4, r0
   18c04:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   18c06:	f7ff ffee 	bl	18be6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   18c0a:	b130      	cbz	r0, 18c1a <log_0+0x1a>
		msg_finalize(msg, src_level);
   18c0c:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   18c0e:	6104      	str	r4, [r0, #16]
}
   18c10:	b002      	add	sp, #8
   18c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   18c16:	f7f6 b923 	b.w	ee60 <msg_finalize>
}
   18c1a:	b002      	add	sp, #8
   18c1c:	bd10      	pop	{r4, pc}

00018c1e <log_1>:
{
   18c1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18c20:	460c      	mov	r4, r1
   18c22:	4611      	mov	r1, r2
   18c24:	4605      	mov	r5, r0
   18c26:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   18c28:	f7ff ffdd 	bl	18be6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   18c2c:	b160      	cbz	r0, 18c48 <log_1+0x2a>
		msg->str = str;
   18c2e:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   18c30:	2501      	movs	r5, #1
   18c32:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   18c34:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   18c36:	f365 1207 	bfi	r2, r5, #4, #4
   18c3a:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   18c3c:	9901      	ldr	r1, [sp, #4]
}
   18c3e:	b003      	add	sp, #12
   18c40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   18c44:	f7f6 b90c 	b.w	ee60 <msg_finalize>
}
   18c48:	b003      	add	sp, #12
   18c4a:	bd30      	pop	{r4, r5, pc}

00018c4c <log_2>:
{
   18c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18c4e:	460e      	mov	r6, r1
   18c50:	4619      	mov	r1, r3
   18c52:	4607      	mov	r7, r0
   18c54:	4615      	mov	r5, r2
   18c56:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   18c58:	f7ff ffc5 	bl	18be6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   18c5c:	b168      	cbz	r0, 18c7a <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   18c5e:	2202      	movs	r2, #2
   18c60:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   18c62:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   18c66:	f362 1307 	bfi	r3, r2, #4, #4
   18c6a:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   18c6c:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   18c6e:	6107      	str	r7, [r0, #16]
}
   18c70:	b003      	add	sp, #12
   18c72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   18c76:	f7f6 b8f3 	b.w	ee60 <msg_finalize>
}
   18c7a:	b003      	add	sp, #12
   18c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018c7e <log_3>:
{
   18c7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18c82:	460f      	mov	r7, r1
   18c84:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   18c88:	4680      	mov	r8, r0
   18c8a:	4616      	mov	r6, r2
   18c8c:	461d      	mov	r5, r3
   18c8e:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   18c90:	f7ff ffa9 	bl	18be6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   18c94:	b178      	cbz	r0, 18cb6 <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   18c96:	2203      	movs	r2, #3
   18c98:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   18c9a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   18c9e:	f362 1307 	bfi	r3, r2, #4, #4
   18ca2:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   18ca4:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   18ca6:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   18caa:	61c5      	str	r5, [r0, #28]
}
   18cac:	b002      	add	sp, #8
   18cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   18cb2:	f7f6 b8d5 	b.w	ee60 <msg_finalize>
}
   18cb6:	b002      	add	sp, #8
   18cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018cbc <log_n>:
{
   18cbc:	b510      	push	{r4, lr}
   18cbe:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   18cc0:	f000 f899 	bl	18df6 <log_msg_create_n>
		if (msg == NULL) {
   18cc4:	b120      	cbz	r0, 18cd0 <log_n+0x14>
		msg_finalize(msg, src_level);
   18cc6:	4621      	mov	r1, r4
}
   18cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   18ccc:	f7f6 b8c8 	b.w	ee60 <msg_finalize>
}
   18cd0:	bd10      	pop	{r4, pc}

00018cd2 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   18cd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18cd6:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   18cd8:	8903      	ldrh	r3, [r0, #8]
{
   18cda:	460e      	mov	r6, r1
	uint32_t available_len = msg->hdr.params.hexdump.length;
   18cdc:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   18ce0:	42a3      	cmp	r3, r4
{
   18ce2:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   18ce6:	d803      	bhi.n	18cf0 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   18ce8:	2300      	movs	r3, #0
   18cea:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   18cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   18cf0:	6811      	ldr	r1, [r2, #0]
   18cf2:	4421      	add	r1, r4
   18cf4:	4299      	cmp	r1, r3
		*length = available_len - offset;
   18cf6:	bf84      	itt	hi
   18cf8:	1b19      	subhi	r1, r3, r4
   18cfa:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   18cfc:	2b0c      	cmp	r3, #12
	req_len = *length;
   18cfe:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   18d02:	d92b      	bls.n	18d5c <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   18d04:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   18d06:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   18d0a:	d82e      	bhi.n	18d6a <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   18d0c:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   18d0e:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   18d10:	454b      	cmp	r3, r9
   18d12:	bf28      	it	cs
   18d14:	464b      	movcs	r3, r9
   18d16:	4420      	add	r0, r4
   18d18:	461d      	mov	r5, r3
   18d1a:	461a      	mov	r2, r3
		if (put_op) {
   18d1c:	b317      	cbz	r7, 18d64 <log_msg_hexdump_data_op+0x92>
   18d1e:	4631      	mov	r1, r6
   18d20:	f002 feb4 	bl	1ba8c <memcpy>
		req_len -= cpy_len;
   18d24:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   18d28:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   18d2a:	f1b9 0f00 	cmp.w	r9, #0
   18d2e:	d0dd      	beq.n	18cec <log_msg_hexdump_data_op+0x1a>
   18d30:	f1b8 0f00 	cmp.w	r8, #0
   18d34:	d0da      	beq.n	18cec <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   18d36:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   18d3a:	454d      	cmp	r5, r9
   18d3c:	bf28      	it	cs
   18d3e:	464d      	movcs	r5, r9
		if (put_op) {
   18d40:	1d20      	adds	r0, r4, #4
   18d42:	462a      	mov	r2, r5
   18d44:	4440      	add	r0, r8
   18d46:	b1bf      	cbz	r7, 18d78 <log_msg_hexdump_data_op+0xa6>
   18d48:	4631      	mov	r1, r6
   18d4a:	f002 fe9f 	bl	1ba8c <memcpy>
		offset = 0;
   18d4e:	2400      	movs	r4, #0
		cont = cont->next;
   18d50:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   18d54:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   18d58:	442e      	add	r6, r5
   18d5a:	e7e6      	b.n	18d2a <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   18d5c:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   18d60:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   18d62:	e7d5      	b.n	18d10 <log_msg_hexdump_data_op+0x3e>
   18d64:	4601      	mov	r1, r0
   18d66:	4630      	mov	r0, r6
   18d68:	e7da      	b.n	18d20 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   18d6a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   18d6c:	2c1b      	cmp	r4, #27
   18d6e:	d9dc      	bls.n	18d2a <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   18d70:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   18d74:	3c1c      	subs	r4, #28
   18d76:	e7f9      	b.n	18d6c <log_msg_hexdump_data_op+0x9a>
   18d78:	4601      	mov	r1, r0
   18d7a:	4630      	mov	r0, r6
   18d7c:	e7e5      	b.n	18d4a <log_msg_hexdump_data_op+0x78>

00018d7e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   18d7e:	3004      	adds	r0, #4
   18d80:	e8d0 3fef 	ldaex	r3, [r0]
   18d84:	3301      	adds	r3, #1
   18d86:	e8c0 3fe2 	stlex	r2, r3, [r0]
   18d8a:	2a00      	cmp	r2, #0
   18d8c:	d1f8      	bne.n	18d80 <log_msg_get+0x2>
}
   18d8e:	4770      	bx	lr

00018d90 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   18d90:	7a40      	ldrb	r0, [r0, #9]
}
   18d92:	0900      	lsrs	r0, r0, #4
   18d94:	4770      	bx	lr

00018d96 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   18d96:	7a43      	ldrb	r3, [r0, #9]
   18d98:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   18d9c:	ea4f 1213 	mov.w	r2, r3, lsr #4
   18da0:	d216      	bcs.n	18dd0 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   18da2:	2a03      	cmp	r2, #3
   18da4:	d803      	bhi.n	18dae <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   18da6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   18daa:	6948      	ldr	r0, [r1, #20]
   18dac:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   18dae:	2901      	cmp	r1, #1
   18db0:	d803      	bhi.n	18dba <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   18db2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   18db6:	6988      	ldr	r0, [r1, #24]
   18db8:	4770      	bx	lr
	cont = msg->payload.ext.next;
   18dba:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   18dbc:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   18dbe:	2906      	cmp	r1, #6
   18dc0:	d803      	bhi.n	18dca <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   18dc2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   18dc6:	6848      	ldr	r0, [r1, #4]
   18dc8:	4770      	bx	lr
		cont = cont->next;
   18dca:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   18dcc:	3907      	subs	r1, #7
		cont = cont->next;
   18dce:	e7f6      	b.n	18dbe <log_msg_arg_get+0x28>
		return 0;
   18dd0:	2000      	movs	r0, #0
}
   18dd2:	4770      	bx	lr

00018dd4 <log_msg_put>:
{
   18dd4:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   18dd6:	1d02      	adds	r2, r0, #4
   18dd8:	e8d2 1fef 	ldaex	r1, [r2]
   18ddc:	3901      	subs	r1, #1
   18dde:	e8c2 1fec 	stlex	ip, r1, [r2]
   18de2:	f1bc 0f00 	cmp.w	ip, #0
   18de6:	d1f7      	bne.n	18dd8 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   18de8:	685b      	ldr	r3, [r3, #4]
   18dea:	b90b      	cbnz	r3, 18df0 <log_msg_put+0x1c>
		msg_free(msg);
   18dec:	f7f6 b92a 	b.w	f044 <msg_free>
}
   18df0:	4770      	bx	lr

00018df2 <log_msg_str_get>:
}
   18df2:	6900      	ldr	r0, [r0, #16]
   18df4:	4770      	bx	lr

00018df6 <log_msg_create_n>:
{
   18df6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18dfa:	4681      	mov	r9, r0
   18dfc:	4688      	mov	r8, r1
   18dfe:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   18e00:	f7f6 f90c 	bl	f01c <log_msg_chunk_alloc>
	if (msg != NULL) {
   18e04:	4604      	mov	r4, r0
   18e06:	b330      	cbz	r0, 18e56 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   18e08:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   18e0a:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   18e0c:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   18e0e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   18e10:	8107      	strh	r7, [r0, #8]
   18e12:	d909      	bls.n	18e28 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   18e14:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   18e16:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   18e1a:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   18e1c:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   18e20:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   18e22:	f1ba 0f00 	cmp.w	sl, #0
   18e26:	dc0e      	bgt.n	18e46 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   18e28:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   18e2a:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   18e2c:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   18e30:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   18e34:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   18e36:	d818      	bhi.n	18e6a <log_msg_create_n+0x74>
   18e38:	4641      	mov	r1, r8
   18e3a:	00aa      	lsls	r2, r5, #2
   18e3c:	f104 0014 	add.w	r0, r4, #20
   18e40:	f002 fe24 	bl	1ba8c <memcpy>
	while (nargs != 0U) {
   18e44:	e007      	b.n	18e56 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   18e46:	f7f6 f8e9 	bl	f01c <log_msg_chunk_alloc>
		if (cont == NULL) {
   18e4a:	4606      	mov	r6, r0
   18e4c:	b930      	cbnz	r0, 18e5c <log_msg_create_n+0x66>
			msg_free(msg);
   18e4e:	4620      	mov	r0, r4
   18e50:	f7f6 f8f8 	bl	f044 <msg_free>
			return NULL;
   18e54:	4634      	mov	r4, r6
}
   18e56:	4620      	mov	r0, r4
   18e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   18e5c:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   18e60:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   18e64:	4683      	mov	fp, r0
		cont->next = NULL;
   18e66:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   18e68:	e7db      	b.n	18e22 <log_msg_create_n+0x2c>
   18e6a:	f8d8 3000 	ldr.w	r3, [r8]
	struct log_msg_cont *cont = msg->payload.ext.next;
   18e6e:	6967      	ldr	r7, [r4, #20]
   18e70:	61a3      	str	r3, [r4, #24]
   18e72:	f8d8 3004 	ldr.w	r3, [r8, #4]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   18e76:	3d02      	subs	r5, #2
   18e78:	61e3      	str	r3, [r4, #28]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   18e7a:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   18e7e:	2d07      	cmp	r5, #7
   18e80:	462e      	mov	r6, r5
   18e82:	bf28      	it	cs
   18e84:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   18e86:	ea4f 0986 	mov.w	r9, r6, lsl #2
   18e8a:	4641      	mov	r1, r8
   18e8c:	1d38      	adds	r0, r7, #4
   18e8e:	464a      	mov	r2, r9
   18e90:	f002 fdfc 	bl	1ba8c <memcpy>
	while (nargs != 0U) {
   18e94:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   18e96:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   18e98:	44c8      	add	r8, r9
	while (nargs != 0U) {
   18e9a:	d1f0      	bne.n	18e7e <log_msg_create_n+0x88>
   18e9c:	e7db      	b.n	18e56 <log_msg_create_n+0x60>

00018e9e <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   18e9e:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   18ea0:	2400      	movs	r4, #0
   18ea2:	9400      	str	r4, [sp, #0]
   18ea4:	f7ff ff15 	bl	18cd2 <log_msg_hexdump_data_op>
}
   18ea8:	b002      	add	sp, #8
   18eaa:	bd10      	pop	{r4, pc}

00018eac <buffer_write>:
{
   18eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18eae:	4606      	mov	r6, r0
   18eb0:	460d      	mov	r5, r1
   18eb2:	4614      	mov	r4, r2
   18eb4:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   18eb6:	4621      	mov	r1, r4
   18eb8:	4628      	mov	r0, r5
   18eba:	463a      	mov	r2, r7
   18ebc:	47b0      	blx	r6
	} while (len != 0);
   18ebe:	1a24      	subs	r4, r4, r0
		buf += processed;
   18ec0:	4405      	add	r5, r0
	} while (len != 0);
   18ec2:	d1f8      	bne.n	18eb6 <buffer_write+0xa>
}
   18ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018ec6 <std_print>:
{
   18ec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18eca:	b08e      	sub	sp, #56	; 0x38
   18ecc:	af0e      	add	r7, sp, #56	; 0x38
   18ece:	4680      	mov	r8, r0
   18ed0:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   18ed2:	f7ff ff8e 	bl	18df2 <log_msg_str_get>
   18ed6:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   18ed8:	4640      	mov	r0, r8
   18eda:	f7ff ff59 	bl	18d90 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   18ede:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   18ee2:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   18ee4:	0083      	lsls	r3, r0, #2
   18ee6:	3307      	adds	r3, #7
   18ee8:	f023 0307 	bic.w	r3, r3, #7
   18eec:	ebad 0d03 	sub.w	sp, sp, r3
   18ef0:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   18ef2:	45d1      	cmp	r9, sl
   18ef4:	d116      	bne.n	18f24 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   18ef6:	4640      	mov	r0, r8
   18ef8:	f7ff ff4a 	bl	18d90 <log_msg_nargs_get>
   18efc:	280f      	cmp	r0, #15
   18efe:	d81e      	bhi.n	18f3e <std_print+0x78>
   18f00:	e8df f010 	tbh	[pc, r0, lsl #1]
   18f04:	00200019 	.word	0x00200019
   18f08:	002d0026 	.word	0x002d0026
   18f0c:	00410036 	.word	0x00410036
   18f10:	005d004e 	.word	0x005d004e
   18f14:	0081006e 	.word	0x0081006e
   18f18:	00ad0096 	.word	0x00ad0096
   18f1c:	00e100c6 	.word	0x00e100c6
   18f20:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   18f24:	4649      	mov	r1, r9
   18f26:	4640      	mov	r0, r8
   18f28:	f7ff ff35 	bl	18d96 <log_msg_arg_get>
   18f2c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   18f30:	f109 0901 	add.w	r9, r9, #1
   18f34:	e7dd      	b.n	18ef2 <std_print+0x2c>
		print_formatted(log_output, str);
   18f36:	4631      	mov	r1, r6
   18f38:	4628      	mov	r0, r5
   18f3a:	f7f6 f8c1 	bl	f0c0 <print_formatted>
}
   18f3e:	46bd      	mov	sp, r7
   18f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   18f44:	4631      	mov	r1, r6
   18f46:	4628      	mov	r0, r5
   18f48:	6822      	ldr	r2, [r4, #0]
   18f4a:	f7f6 f8b9 	bl	f0c0 <print_formatted>
		break;
   18f4e:	e7f6      	b.n	18f3e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   18f50:	4631      	mov	r1, r6
   18f52:	e9d4 2300 	ldrd	r2, r3, [r4]
   18f56:	4628      	mov	r0, r5
   18f58:	f7f6 f8b2 	bl	f0c0 <print_formatted>
		break;
   18f5c:	e7ef      	b.n	18f3e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   18f5e:	68a3      	ldr	r3, [r4, #8]
   18f60:	4631      	mov	r1, r6
   18f62:	9300      	str	r3, [sp, #0]
   18f64:	4628      	mov	r0, r5
   18f66:	e9d4 2300 	ldrd	r2, r3, [r4]
   18f6a:	f7f6 f8a9 	bl	f0c0 <print_formatted>
		break;
   18f6e:	e7e6      	b.n	18f3e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   18f70:	68e3      	ldr	r3, [r4, #12]
   18f72:	4631      	mov	r1, r6
   18f74:	9301      	str	r3, [sp, #4]
   18f76:	68a3      	ldr	r3, [r4, #8]
   18f78:	4628      	mov	r0, r5
   18f7a:	9300      	str	r3, [sp, #0]
   18f7c:	e9d4 2300 	ldrd	r2, r3, [r4]
   18f80:	f7f6 f89e 	bl	f0c0 <print_formatted>
		break;
   18f84:	e7db      	b.n	18f3e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   18f86:	6923      	ldr	r3, [r4, #16]
   18f88:	4631      	mov	r1, r6
   18f8a:	9302      	str	r3, [sp, #8]
   18f8c:	68e3      	ldr	r3, [r4, #12]
   18f8e:	4628      	mov	r0, r5
   18f90:	9301      	str	r3, [sp, #4]
   18f92:	68a3      	ldr	r3, [r4, #8]
   18f94:	9300      	str	r3, [sp, #0]
   18f96:	e9d4 2300 	ldrd	r2, r3, [r4]
   18f9a:	f7f6 f891 	bl	f0c0 <print_formatted>
		break;
   18f9e:	e7ce      	b.n	18f3e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   18fa0:	6963      	ldr	r3, [r4, #20]
   18fa2:	4631      	mov	r1, r6
   18fa4:	9303      	str	r3, [sp, #12]
   18fa6:	6923      	ldr	r3, [r4, #16]
   18fa8:	4628      	mov	r0, r5
   18faa:	9302      	str	r3, [sp, #8]
   18fac:	68e3      	ldr	r3, [r4, #12]
   18fae:	9301      	str	r3, [sp, #4]
   18fb0:	68a3      	ldr	r3, [r4, #8]
   18fb2:	9300      	str	r3, [sp, #0]
   18fb4:	e9d4 2300 	ldrd	r2, r3, [r4]
   18fb8:	f7f6 f882 	bl	f0c0 <print_formatted>
		break;
   18fbc:	e7bf      	b.n	18f3e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   18fbe:	69a3      	ldr	r3, [r4, #24]
   18fc0:	4631      	mov	r1, r6
   18fc2:	9304      	str	r3, [sp, #16]
   18fc4:	6963      	ldr	r3, [r4, #20]
   18fc6:	4628      	mov	r0, r5
   18fc8:	9303      	str	r3, [sp, #12]
   18fca:	6923      	ldr	r3, [r4, #16]
   18fcc:	9302      	str	r3, [sp, #8]
   18fce:	68e3      	ldr	r3, [r4, #12]
   18fd0:	9301      	str	r3, [sp, #4]
   18fd2:	68a3      	ldr	r3, [r4, #8]
   18fd4:	9300      	str	r3, [sp, #0]
   18fd6:	e9d4 2300 	ldrd	r2, r3, [r4]
   18fda:	f7f6 f871 	bl	f0c0 <print_formatted>
		break;
   18fde:	e7ae      	b.n	18f3e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   18fe0:	69e3      	ldr	r3, [r4, #28]
   18fe2:	4631      	mov	r1, r6
   18fe4:	9305      	str	r3, [sp, #20]
   18fe6:	69a3      	ldr	r3, [r4, #24]
   18fe8:	4628      	mov	r0, r5
   18fea:	9304      	str	r3, [sp, #16]
   18fec:	6963      	ldr	r3, [r4, #20]
   18fee:	9303      	str	r3, [sp, #12]
   18ff0:	6923      	ldr	r3, [r4, #16]
   18ff2:	9302      	str	r3, [sp, #8]
   18ff4:	68e3      	ldr	r3, [r4, #12]
   18ff6:	9301      	str	r3, [sp, #4]
   18ff8:	68a3      	ldr	r3, [r4, #8]
   18ffa:	9300      	str	r3, [sp, #0]
   18ffc:	e9d4 2300 	ldrd	r2, r3, [r4]
   19000:	f7f6 f85e 	bl	f0c0 <print_formatted>
		break;
   19004:	e79b      	b.n	18f3e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19006:	6a23      	ldr	r3, [r4, #32]
   19008:	4631      	mov	r1, r6
   1900a:	9306      	str	r3, [sp, #24]
   1900c:	69e3      	ldr	r3, [r4, #28]
   1900e:	4628      	mov	r0, r5
   19010:	9305      	str	r3, [sp, #20]
   19012:	69a3      	ldr	r3, [r4, #24]
   19014:	9304      	str	r3, [sp, #16]
   19016:	6963      	ldr	r3, [r4, #20]
   19018:	9303      	str	r3, [sp, #12]
   1901a:	6923      	ldr	r3, [r4, #16]
   1901c:	9302      	str	r3, [sp, #8]
   1901e:	68e3      	ldr	r3, [r4, #12]
   19020:	9301      	str	r3, [sp, #4]
   19022:	68a3      	ldr	r3, [r4, #8]
   19024:	9300      	str	r3, [sp, #0]
   19026:	e9d4 2300 	ldrd	r2, r3, [r4]
   1902a:	f7f6 f849 	bl	f0c0 <print_formatted>
		break;
   1902e:	e786      	b.n	18f3e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19030:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19032:	4631      	mov	r1, r6
   19034:	9307      	str	r3, [sp, #28]
   19036:	6a23      	ldr	r3, [r4, #32]
   19038:	4628      	mov	r0, r5
   1903a:	9306      	str	r3, [sp, #24]
   1903c:	69e3      	ldr	r3, [r4, #28]
   1903e:	9305      	str	r3, [sp, #20]
   19040:	69a3      	ldr	r3, [r4, #24]
   19042:	9304      	str	r3, [sp, #16]
   19044:	6963      	ldr	r3, [r4, #20]
   19046:	9303      	str	r3, [sp, #12]
   19048:	6923      	ldr	r3, [r4, #16]
   1904a:	9302      	str	r3, [sp, #8]
   1904c:	68e3      	ldr	r3, [r4, #12]
   1904e:	9301      	str	r3, [sp, #4]
   19050:	68a3      	ldr	r3, [r4, #8]
   19052:	9300      	str	r3, [sp, #0]
   19054:	e9d4 2300 	ldrd	r2, r3, [r4]
   19058:	f7f6 f832 	bl	f0c0 <print_formatted>
		break;
   1905c:	e76f      	b.n	18f3e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1905e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19060:	4631      	mov	r1, r6
   19062:	9308      	str	r3, [sp, #32]
   19064:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19066:	4628      	mov	r0, r5
   19068:	9307      	str	r3, [sp, #28]
   1906a:	6a23      	ldr	r3, [r4, #32]
   1906c:	9306      	str	r3, [sp, #24]
   1906e:	69e3      	ldr	r3, [r4, #28]
   19070:	9305      	str	r3, [sp, #20]
   19072:	69a3      	ldr	r3, [r4, #24]
   19074:	9304      	str	r3, [sp, #16]
   19076:	6963      	ldr	r3, [r4, #20]
   19078:	9303      	str	r3, [sp, #12]
   1907a:	6923      	ldr	r3, [r4, #16]
   1907c:	9302      	str	r3, [sp, #8]
   1907e:	68e3      	ldr	r3, [r4, #12]
   19080:	9301      	str	r3, [sp, #4]
   19082:	68a3      	ldr	r3, [r4, #8]
   19084:	9300      	str	r3, [sp, #0]
   19086:	e9d4 2300 	ldrd	r2, r3, [r4]
   1908a:	f7f6 f819 	bl	f0c0 <print_formatted>
		break;
   1908e:	e756      	b.n	18f3e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19090:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19092:	4631      	mov	r1, r6
   19094:	9309      	str	r3, [sp, #36]	; 0x24
   19096:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19098:	4628      	mov	r0, r5
   1909a:	9308      	str	r3, [sp, #32]
   1909c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1909e:	9307      	str	r3, [sp, #28]
   190a0:	6a23      	ldr	r3, [r4, #32]
   190a2:	9306      	str	r3, [sp, #24]
   190a4:	69e3      	ldr	r3, [r4, #28]
   190a6:	9305      	str	r3, [sp, #20]
   190a8:	69a3      	ldr	r3, [r4, #24]
   190aa:	9304      	str	r3, [sp, #16]
   190ac:	6963      	ldr	r3, [r4, #20]
   190ae:	9303      	str	r3, [sp, #12]
   190b0:	6923      	ldr	r3, [r4, #16]
   190b2:	9302      	str	r3, [sp, #8]
   190b4:	68e3      	ldr	r3, [r4, #12]
   190b6:	9301      	str	r3, [sp, #4]
   190b8:	68a3      	ldr	r3, [r4, #8]
   190ba:	9300      	str	r3, [sp, #0]
   190bc:	e9d4 2300 	ldrd	r2, r3, [r4]
   190c0:	f7f5 fffe 	bl	f0c0 <print_formatted>
		break;
   190c4:	e73b      	b.n	18f3e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   190c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   190c8:	4631      	mov	r1, r6
   190ca:	930a      	str	r3, [sp, #40]	; 0x28
   190cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   190ce:	4628      	mov	r0, r5
   190d0:	9309      	str	r3, [sp, #36]	; 0x24
   190d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   190d4:	9308      	str	r3, [sp, #32]
   190d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   190d8:	9307      	str	r3, [sp, #28]
   190da:	6a23      	ldr	r3, [r4, #32]
   190dc:	9306      	str	r3, [sp, #24]
   190de:	69e3      	ldr	r3, [r4, #28]
   190e0:	9305      	str	r3, [sp, #20]
   190e2:	69a3      	ldr	r3, [r4, #24]
   190e4:	9304      	str	r3, [sp, #16]
   190e6:	6963      	ldr	r3, [r4, #20]
   190e8:	9303      	str	r3, [sp, #12]
   190ea:	6923      	ldr	r3, [r4, #16]
   190ec:	9302      	str	r3, [sp, #8]
   190ee:	68e3      	ldr	r3, [r4, #12]
   190f0:	9301      	str	r3, [sp, #4]
   190f2:	68a3      	ldr	r3, [r4, #8]
   190f4:	9300      	str	r3, [sp, #0]
   190f6:	e9d4 2300 	ldrd	r2, r3, [r4]
   190fa:	f7f5 ffe1 	bl	f0c0 <print_formatted>
		break;
   190fe:	e71e      	b.n	18f3e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19100:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19102:	4631      	mov	r1, r6
   19104:	930b      	str	r3, [sp, #44]	; 0x2c
   19106:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19108:	4628      	mov	r0, r5
   1910a:	930a      	str	r3, [sp, #40]	; 0x28
   1910c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1910e:	9309      	str	r3, [sp, #36]	; 0x24
   19110:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19112:	9308      	str	r3, [sp, #32]
   19114:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19116:	9307      	str	r3, [sp, #28]
   19118:	6a23      	ldr	r3, [r4, #32]
   1911a:	9306      	str	r3, [sp, #24]
   1911c:	69e3      	ldr	r3, [r4, #28]
   1911e:	9305      	str	r3, [sp, #20]
   19120:	69a3      	ldr	r3, [r4, #24]
   19122:	9304      	str	r3, [sp, #16]
   19124:	6963      	ldr	r3, [r4, #20]
   19126:	9303      	str	r3, [sp, #12]
   19128:	6923      	ldr	r3, [r4, #16]
   1912a:	9302      	str	r3, [sp, #8]
   1912c:	68e3      	ldr	r3, [r4, #12]
   1912e:	9301      	str	r3, [sp, #4]
   19130:	68a3      	ldr	r3, [r4, #8]
   19132:	9300      	str	r3, [sp, #0]
   19134:	e9d4 2300 	ldrd	r2, r3, [r4]
   19138:	f7f5 ffc2 	bl	f0c0 <print_formatted>
		break;
   1913c:	e6ff      	b.n	18f3e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1913e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19140:	4631      	mov	r1, r6
   19142:	930c      	str	r3, [sp, #48]	; 0x30
   19144:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19146:	4628      	mov	r0, r5
   19148:	930b      	str	r3, [sp, #44]	; 0x2c
   1914a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1914c:	930a      	str	r3, [sp, #40]	; 0x28
   1914e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19150:	9309      	str	r3, [sp, #36]	; 0x24
   19152:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19154:	9308      	str	r3, [sp, #32]
   19156:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19158:	9307      	str	r3, [sp, #28]
   1915a:	6a23      	ldr	r3, [r4, #32]
   1915c:	9306      	str	r3, [sp, #24]
   1915e:	69e3      	ldr	r3, [r4, #28]
   19160:	9305      	str	r3, [sp, #20]
   19162:	69a3      	ldr	r3, [r4, #24]
   19164:	9304      	str	r3, [sp, #16]
   19166:	6963      	ldr	r3, [r4, #20]
   19168:	9303      	str	r3, [sp, #12]
   1916a:	6923      	ldr	r3, [r4, #16]
   1916c:	9302      	str	r3, [sp, #8]
   1916e:	68e3      	ldr	r3, [r4, #12]
   19170:	9301      	str	r3, [sp, #4]
   19172:	68a3      	ldr	r3, [r4, #8]
   19174:	9300      	str	r3, [sp, #0]
   19176:	e9d4 2300 	ldrd	r2, r3, [r4]
   1917a:	f7f5 ffa1 	bl	f0c0 <print_formatted>
}
   1917e:	e6de      	b.n	18f3e <std_print+0x78>

00019180 <log_output_flush>:
		     log_output->control_block->offset,
   19180:	6842      	ldr	r2, [r0, #4]
{
   19182:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   19184:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   19188:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1918a:	6881      	ldr	r1, [r0, #8]
   1918c:	6800      	ldr	r0, [r0, #0]
   1918e:	f7ff fe8d 	bl	18eac <buffer_write>
	log_output->control_block->offset = 0;
   19192:	2200      	movs	r2, #0
   19194:	6863      	ldr	r3, [r4, #4]
   19196:	601a      	str	r2, [r3, #0]
}
   19198:	bd10      	pop	{r4, pc}

0001919a <out_func>:
{
   1919a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1919c:	684b      	ldr	r3, [r1, #4]
{
   1919e:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   191a0:	681a      	ldr	r2, [r3, #0]
   191a2:	68cb      	ldr	r3, [r1, #12]
{
   191a4:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   191a6:	429a      	cmp	r2, r3
   191a8:	d102      	bne.n	191b0 <out_func+0x16>
		log_output_flush(out_ctx);
   191aa:	4608      	mov	r0, r1
   191ac:	f7ff ffe8 	bl	19180 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   191b0:	6863      	ldr	r3, [r4, #4]
   191b2:	e8d3 2fef 	ldaex	r2, [r3]
   191b6:	1c51      	adds	r1, r2, #1
   191b8:	e8c3 1fe0 	stlex	r0, r1, [r3]
   191bc:	2800      	cmp	r0, #0
   191be:	d1f8      	bne.n	191b2 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   191c0:	68a3      	ldr	r3, [r4, #8]
}
   191c2:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   191c4:	549d      	strb	r5, [r3, r2]
}
   191c6:	bd38      	pop	{r3, r4, r5, pc}

000191c8 <z_impl_zsock_close>:

	return 0;
}

int z_impl_zsock_close(int sock)
{
   191c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   191ca:	a901      	add	r1, sp, #4
{
   191cc:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   191ce:	f7f4 fbbd 	bl	d94c <z_get_fd_obj_and_vtable>
	const struct socket_op_vtable *vtable;
	void *ctx = get_sock_vtable(sock, &vtable);
	int ret;

	if (ctx == NULL) {
   191d2:	b940      	cbnz	r0, 191e6 <z_impl_zsock_close+0x1e>
		errno = EBADF;
   191d4:	f000 f924 	bl	19420 <__errno>
   191d8:	2309      	movs	r3, #9
		return -1;
   191da:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   191de:	6003      	str	r3, [r0, #0]
	ret = vtable->fd_vtable.close(ctx);

	z_free_fd(sock);

	return ret;
}
   191e0:	4620      	mov	r0, r4
   191e2:	b003      	add	sp, #12
   191e4:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   191e6:	9b01      	ldr	r3, [sp, #4]
   191e8:	689b      	ldr	r3, [r3, #8]
   191ea:	4798      	blx	r3
   191ec:	4604      	mov	r4, r0
	z_free_fd(sock);
   191ee:	4628      	mov	r0, r5
   191f0:	f7f4 fbfc 	bl	d9ec <z_free_fd>
	return ret;
   191f4:	e7f4      	b.n	191e0 <z_impl_zsock_close+0x18>

000191f6 <z_impl_zsock_sendto>:
	return status;
}

ssize_t z_impl_zsock_sendto(int sock, const void *buf, size_t len, int flags,
			   const struct sockaddr *dest_addr, socklen_t addrlen)
{
   191f6:	b530      	push	{r4, r5, lr}
   191f8:	b087      	sub	sp, #28
   191fa:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   191fc:	a905      	add	r1, sp, #20
{
   191fe:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   19202:	f7f4 fba3 	bl	d94c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   19206:	b120      	cbz	r0, 19212 <z_impl_zsock_sendto+0x1c>
   19208:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1920c:	9905      	ldr	r1, [sp, #20]
   1920e:	6a0d      	ldr	r5, [r1, #32]
   19210:	b93d      	cbnz	r5, 19222 <z_impl_zsock_sendto+0x2c>
   19212:	f000 f905 	bl	19420 <__errno>
   19216:	2309      	movs	r3, #9
   19218:	6003      	str	r3, [r0, #0]
   1921a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1921e:	b007      	add	sp, #28
   19220:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   19222:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19224:	9101      	str	r1, [sp, #4]
   19226:	990a      	ldr	r1, [sp, #40]	; 0x28
   19228:	9100      	str	r1, [sp, #0]
   1922a:	4621      	mov	r1, r4
   1922c:	47a8      	blx	r5
   1922e:	e7f6      	b.n	1921e <z_impl_zsock_sendto+0x28>

00019230 <z_impl_zsock_recvfrom>:
	return 0;
}

ssize_t z_impl_zsock_recvfrom(int sock, void *buf, size_t max_len, int flags,
			     struct sockaddr *src_addr, socklen_t *addrlen)
{
   19230:	b530      	push	{r4, r5, lr}
   19232:	b087      	sub	sp, #28
   19234:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   19236:	a905      	add	r1, sp, #20
{
   19238:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   1923c:	f7f4 fb86 	bl	d94c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   19240:	b120      	cbz	r0, 1924c <z_impl_zsock_recvfrom+0x1c>
   19242:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   19246:	9905      	ldr	r1, [sp, #20]
   19248:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   1924a:	b93d      	cbnz	r5, 1925c <z_impl_zsock_recvfrom+0x2c>
   1924c:	f000 f8e8 	bl	19420 <__errno>
   19250:	2309      	movs	r3, #9
   19252:	6003      	str	r3, [r0, #0]
   19254:	f04f 30ff 	mov.w	r0, #4294967295
}
   19258:	b007      	add	sp, #28
   1925a:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1925c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1925e:	9101      	str	r1, [sp, #4]
   19260:	990a      	ldr	r1, [sp, #40]	; 0x28
   19262:	9100      	str	r1, [sp, #0]
   19264:	4621      	mov	r1, r4
   19266:	47a8      	blx	r5
   19268:	e7f6      	b.n	19258 <z_impl_zsock_recvfrom+0x28>

0001926a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1926a:	b2cb      	uxtb	r3, r1
   1926c:	210c      	movs	r1, #12
   1926e:	68c2      	ldr	r2, [r0, #12]
   19270:	fb03 2101 	mla	r1, r3, r1, r2
   19274:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   19276:	f000 0007 	and.w	r0, r0, #7
   1927a:	4770      	bx	lr

0001927c <set_off_state>:
	__asm__ volatile(
   1927c:	f04f 0320 	mov.w	r3, #32
   19280:	f3ef 8211 	mrs	r2, BASEPRI
   19284:	f383 8811 	msr	BASEPRI, r3
   19288:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1928c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1928e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   19292:	d001      	beq.n	19298 <set_off_state+0x1c>
   19294:	428b      	cmp	r3, r1
   19296:	d107      	bne.n	192a8 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   19298:	2301      	movs	r3, #1
   1929a:	6003      	str	r3, [r0, #0]
	int err = 0;
   1929c:	2000      	movs	r0, #0
	__asm__ volatile(
   1929e:	f382 8811 	msr	BASEPRI, r2
   192a2:	f3bf 8f6f 	isb	sy
}
   192a6:	4770      	bx	lr
		err = -EPERM;
   192a8:	f04f 30ff 	mov.w	r0, #4294967295
   192ac:	e7f7      	b.n	1929e <set_off_state+0x22>

000192ae <set_starting_state>:
{
   192ae:	b510      	push	{r4, lr}
	__asm__ volatile(
   192b0:	f04f 0320 	mov.w	r3, #32
   192b4:	f3ef 8211 	mrs	r2, BASEPRI
   192b8:	f383 8811 	msr	BASEPRI, r3
   192bc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   192c0:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   192c2:	f003 0407 	and.w	r4, r3, #7
   192c6:	2c01      	cmp	r4, #1
   192c8:	d106      	bne.n	192d8 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   192ca:	6001      	str	r1, [r0, #0]
	int err = 0;
   192cc:	2000      	movs	r0, #0
	__asm__ volatile(
   192ce:	f382 8811 	msr	BASEPRI, r2
   192d2:	f3bf 8f6f 	isb	sy
}
   192d6:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   192d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   192dc:	428b      	cmp	r3, r1
		err = -EALREADY;
   192de:	bf14      	ite	ne
   192e0:	f04f 30ff 	movne.w	r0, #4294967295
   192e4:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   192e8:	e7f1      	b.n	192ce <set_starting_state+0x20>

000192ea <set_on_state>:
	__asm__ volatile(
   192ea:	f04f 0320 	mov.w	r3, #32
   192ee:	f3ef 8211 	mrs	r2, BASEPRI
   192f2:	f383 8811 	msr	BASEPRI, r3
   192f6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   192fa:	6803      	ldr	r3, [r0, #0]
   192fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19300:	f043 0302 	orr.w	r3, r3, #2
   19304:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   19306:	f382 8811 	msr	BASEPRI, r2
   1930a:	f3bf 8f6f 	isb	sy
}
   1930e:	4770      	bx	lr

00019310 <onoff_started_callback>:
{
   19310:	b410      	push	{r4}
	notify(mgr, 0);
   19312:	241c      	movs	r4, #28
	return &data->mgr[type];
   19314:	68c0      	ldr	r0, [r0, #12]
   19316:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   19318:	fb03 0004 	mla	r0, r3, r4, r0
   1931c:	2100      	movs	r1, #0
}
   1931e:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   19322:	4710      	bx	r2

00019324 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   19324:	2000      	movs	r0, #0
   19326:	f7fc bf4d 	b.w	161c4 <nrfx_clock_start>

0001932a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1932a:	2000      	movs	r0, #0
   1932c:	f7fc bf7c 	b.w	16228 <nrfx_clock_stop>

00019330 <blocking_start_callback>:
{
   19330:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   19332:	f7fe b867 	b.w	17404 <z_impl_k_sem_give>

00019336 <api_stop>:
{
   19336:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   19338:	240c      	movs	r4, #12
   1933a:	b2c9      	uxtb	r1, r1
   1933c:	434c      	muls	r4, r1
{
   1933e:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   19340:	68c0      	ldr	r0, [r0, #12]
   19342:	f104 0340 	add.w	r3, r4, #64	; 0x40
   19346:	2180      	movs	r1, #128	; 0x80
   19348:	4418      	add	r0, r3
   1934a:	f7ff ff97 	bl	1927c <set_off_state>
	if (err < 0) {
   1934e:	2800      	cmp	r0, #0
   19350:	db04      	blt.n	1935c <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   19352:	6869      	ldr	r1, [r5, #4]
   19354:	440c      	add	r4, r1
   19356:	6863      	ldr	r3, [r4, #4]
   19358:	4798      	blx	r3
	return 0;
   1935a:	2000      	movs	r0, #0
}
   1935c:	bd38      	pop	{r3, r4, r5, pc}

0001935e <api_start>:
{
   1935e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   19362:	240c      	movs	r4, #12
   19364:	b2c9      	uxtb	r1, r1
   19366:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   19368:	68c5      	ldr	r5, [r0, #12]
{
   1936a:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1936c:	f104 0040 	add.w	r0, r4, #64	; 0x40
   19370:	2180      	movs	r1, #128	; 0x80
   19372:	4428      	add	r0, r5
{
   19374:	4690      	mov	r8, r2
   19376:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   19378:	f7ff ff99 	bl	192ae <set_starting_state>
	if (err < 0) {
   1937c:	2800      	cmp	r0, #0
   1937e:	db06      	blt.n	1938e <api_start+0x30>
	subdata->cb = cb;
   19380:	4425      	add	r5, r4
	subdata->user_data = user_data;
   19382:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   19386:	6873      	ldr	r3, [r6, #4]
   19388:	591b      	ldr	r3, [r3, r4]
   1938a:	4798      	blx	r3
	return 0;
   1938c:	2000      	movs	r0, #0
}
   1938e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019392 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   19392:	4770      	bx	lr

00019394 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   19394:	4770      	bx	lr

00019396 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   19396:	b510      	push	{r4, lr}
   19398:	b40f      	push	{r0, r1, r2, r3}
   1939a:	f7fd fce9 	bl	16d70 <k_sched_lock>
   1939e:	bc0f      	pop	{r0, r1, r2, r3}
   193a0:	f7ee fe22 	bl	7fe8 <spm_request_random_number_nse>
   193a4:	b40f      	push	{r0, r1, r2, r3}
   193a6:	f7fd fd35 	bl	16e14 <k_sched_unlock>
   193aa:	bc0f      	pop	{r0, r1, r2, r3}
   193ac:	bd10      	pop	{r4, pc}

000193ae <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   193ae:	2100      	movs	r1, #0
   193b0:	2001      	movs	r0, #1
   193b2:	f7f6 bc45 	b.w	fc40 <z_arm_fatal_error>

000193b6 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   193b6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   193b8:	f383 880b 	msr	PSPLIM, r3
}
   193bc:	4770      	bx	lr

000193be <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   193be:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   193c0:	6800      	ldr	r0, [r0, #0]
   193c2:	f7f6 bc3d 	b.w	fc40 <z_arm_fatal_error>

000193c6 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   193c6:	b508      	push	{r3, lr}
	handler();
   193c8:	f7f6 fd62 	bl	fe90 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   193cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   193d0:	f7f6 bda4 	b.w	ff1c <z_arm_exc_exit>

000193d4 <mpu_configure_region>:
{
   193d4:	b530      	push	{r4, r5, lr}
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   193d6:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   193d8:	680c      	ldr	r4, [r1, #0]
{
   193da:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   193dc:	890a      	ldrh	r2, [r1, #8]
   193de:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   193e0:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   193e2:	3b01      	subs	r3, #1
   193e4:	f024 041f 	bic.w	r4, r4, #31
   193e8:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   193ea:	f002 021f 	and.w	r2, r2, #31
   193ee:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   193f2:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   193f6:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   193f8:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   193fc:	9303      	str	r3, [sp, #12]
   193fe:	f7f7 f82d 	bl	1045c <region_allocate_and_init>
}
   19402:	b005      	add	sp, #20
   19404:	bd30      	pop	{r4, r5, pc}

00019406 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   19406:	e840 f000 	tt	r0, r0
   1940a:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1940c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   19410:	bf14      	ite	ne
   19412:	4618      	movne	r0, r3
   19414:	f06f 0015 	mvneq.w	r0, #21
   19418:	4770      	bx	lr

0001941a <_stdout_hook_default>:
}
   1941a:	f04f 30ff 	mov.w	r0, #4294967295
   1941e:	4770      	bx	lr

00019420 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   19420:	f7fd b8dc 	b.w	165dc <z_impl_z_errno>

00019424 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   19424:	b508      	push	{r3, lr}
	net_if_init();
   19426:	f7f7 f9d3 	bl	107d0 <net_if_init>
	net_if_post_init();
   1942a:	f7f7 f9e7 	bl	107fc <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1942e:	2000      	movs	r0, #0
   19430:	bd08      	pop	{r3, pc}

00019432 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   19432:	b110      	cbz	r0, 1943a <net_if_l2+0x8>
   19434:	6800      	ldr	r0, [r0, #0]
   19436:	b100      	cbz	r0, 1943a <net_if_l2+0x8>
	return iface->if_dev->l2;
   19438:	6840      	ldr	r0, [r0, #4]
}
   1943a:	4770      	bx	lr

0001943c <l2_flags_get>:
{
   1943c:	b510      	push	{r4, lr}
   1943e:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   19440:	f7ff fff7 	bl	19432 <net_if_l2>
   19444:	b128      	cbz	r0, 19452 <l2_flags_get+0x16>
   19446:	68c2      	ldr	r2, [r0, #12]
   19448:	b11a      	cbz	r2, 19452 <l2_flags_get+0x16>
}
   1944a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   1944e:	4618      	mov	r0, r3
   19450:	4710      	bx	r2
}
   19452:	2000      	movs	r0, #0
   19454:	bd10      	pop	{r4, pc}

00019456 <net_if_up>:
{
   19456:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19458:	6803      	ldr	r3, [r0, #0]
   1945a:	4604      	mov	r4, r0
   1945c:	330c      	adds	r3, #12
   1945e:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   19462:	f013 0301 	ands.w	r3, r3, #1
   19466:	d10b      	bne.n	19480 <net_if_up+0x2a>
	     net_if_is_socket_offloaded(iface))) {
   19468:	6802      	ldr	r2, [r0, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1946a:	7e91      	ldrb	r1, [r2, #26]
   1946c:	b151      	cbz	r1, 19484 <net_if_up+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1946e:	320c      	adds	r2, #12
   19470:	e8d2 1fef 	ldaex	r1, [r2]
   19474:	f041 0101 	orr.w	r1, r1, #1
   19478:	e8c2 1fe0 	stlex	r0, r1, [r2]
   1947c:	2800      	cmp	r0, #0
   1947e:	d1f7      	bne.n	19470 <net_if_up+0x1a>
		return 0;
   19480:	2000      	movs	r0, #0
   19482:	e018      	b.n	194b6 <net_if_up+0x60>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   19484:	f7ff ffd5 	bl	19432 <net_if_l2>
   19488:	b968      	cbnz	r0, 194a6 <net_if_up+0x50>
   1948a:	6823      	ldr	r3, [r4, #0]
   1948c:	330c      	adds	r3, #12
   1948e:	e8d3 2fef 	ldaex	r2, [r3]
   19492:	f042 0201 	orr.w	r2, r2, #1
   19496:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1949a:	2900      	cmp	r1, #0
   1949c:	d1f7      	bne.n	1948e <net_if_up+0x38>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1949e:	4620      	mov	r0, r4
   194a0:	f7ff ffcc 	bl	1943c <l2_flags_get>
   194a4:	e7ec      	b.n	19480 <net_if_up+0x2a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   194a6:	6883      	ldr	r3, [r0, #8]
   194a8:	2b00      	cmp	r3, #0
   194aa:	d0ee      	beq.n	1948a <net_if_up+0x34>
	status = net_if_l2(iface)->enable(iface, true);
   194ac:	2101      	movs	r1, #1
   194ae:	4620      	mov	r0, r4
   194b0:	4798      	blx	r3
	if (status < 0) {
   194b2:	2800      	cmp	r0, #0
   194b4:	dae9      	bge.n	1948a <net_if_up+0x34>
}
   194b6:	bd10      	pop	{r4, pc}

000194b8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   194b8:	6843      	ldr	r3, [r0, #4]
}
   194ba:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   194bc:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   194be:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   194c0:	600b      	str	r3, [r1, #0]
}
   194c2:	4770      	bx	lr

000194c4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   194c4:	6843      	ldr	r3, [r0, #4]
   194c6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   194c8:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   194ca:	4042      	eors	r2, r0
   194cc:	400a      	ands	r2, r1
   194ce:	4042      	eors	r2, r0
    p_reg->OUT = value;
   194d0:	605a      	str	r2, [r3, #4]
}
   194d2:	2000      	movs	r0, #0
   194d4:	4770      	bx	lr

000194d6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   194d6:	6843      	ldr	r3, [r0, #4]
}
   194d8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   194da:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   194dc:	6099      	str	r1, [r3, #8]
}
   194de:	4770      	bx	lr

000194e0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   194e0:	6843      	ldr	r3, [r0, #4]
}
   194e2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   194e4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   194e6:	60d9      	str	r1, [r3, #12]
}
   194e8:	4770      	bx	lr

000194ea <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   194ea:	6843      	ldr	r3, [r0, #4]
}
   194ec:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   194ee:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   194f0:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   194f2:	4059      	eors	r1, r3
    p_reg->OUT = value;
   194f4:	6051      	str	r1, [r2, #4]
}
   194f6:	4770      	bx	lr

000194f8 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   194f8:	68c3      	ldr	r3, [r0, #12]
{
   194fa:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   194fc:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   194fe:	b158      	cbz	r0, 19518 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19500:	2400      	movs	r4, #0
   19502:	4281      	cmp	r1, r0
   19504:	d113      	bne.n	1952e <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   19506:	6808      	ldr	r0, [r1, #0]
   19508:	b95c      	cbnz	r4, 19522 <gpio_nrfx_manage_callback+0x2a>
   1950a:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1950c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1950e:	42a1      	cmp	r1, r4
   19510:	d100      	bne.n	19514 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   19512:	6098      	str	r0, [r3, #8]
	parent->next = child;
   19514:	2000      	movs	r0, #0
   19516:	6008      	str	r0, [r1, #0]
	if (set) {
   19518:	b972      	cbnz	r2, 19538 <gpio_nrfx_manage_callback+0x40>
	return 0;
   1951a:	2000      	movs	r0, #0
}
   1951c:	bd30      	pop	{r4, r5, pc}
   1951e:	4628      	mov	r0, r5
   19520:	e7ef      	b.n	19502 <gpio_nrfx_manage_callback+0xa>
   19522:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   19524:	6898      	ldr	r0, [r3, #8]
   19526:	4281      	cmp	r1, r0
	list->tail = node;
   19528:	bf08      	it	eq
   1952a:	609c      	streq	r4, [r3, #8]
}
   1952c:	e7f2      	b.n	19514 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1952e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19530:	4604      	mov	r4, r0
   19532:	2d00      	cmp	r5, #0
   19534:	d1f3      	bne.n	1951e <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   19536:	b13a      	cbz	r2, 19548 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   19538:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1953a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1953c:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1953e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   19540:	2800      	cmp	r0, #0
   19542:	d1ea      	bne.n	1951a <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   19544:	6099      	str	r1, [r3, #8]
}
   19546:	e7e9      	b.n	1951c <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   19548:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1954c:	e7e6      	b.n	1951c <gpio_nrfx_manage_callback+0x24>

0001954e <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1954e:	6843      	ldr	r3, [r0, #4]
{
   19550:	b410      	push	{r4}
	return config->uarte_regs;
   19552:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   19554:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   19558:	05d2      	lsls	r2, r2, #23
   1955a:	d518      	bpl.n	1958e <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1955c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   19560:	b1aa      	cbz	r2, 1958e <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   19562:	f04f 0120 	mov.w	r1, #32
   19566:	f3ef 8211 	mrs	r2, BASEPRI
   1956a:	f381 8811 	msr	BASEPRI, r1
   1956e:	f3bf 8f6f 	isb	sy
   19572:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   19576:	b131      	cbz	r1, 19586 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19578:	2100      	movs	r1, #0
   1957a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1957e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19582:	2101      	movs	r1, #1
   19584:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   19586:	f382 8811 	msr	BASEPRI, r2
   1958a:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   1958e:	68c2      	ldr	r2, [r0, #12]
   19590:	68d2      	ldr	r2, [r2, #12]
   19592:	b15a      	cbz	r2, 195ac <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19594:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   19598:	b159      	cbz	r1, 195b2 <uarte_nrfx_isr_int+0x64>
		data->int_driven->fifo_fill_lock = 0;
   1959a:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   1959c:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   1959e:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   195a0:	b13c      	cbz	r4, 195b2 <uarte_nrfx_isr_int+0x64>
    p_reg->INTENCLR = mask;
   195a2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   195a6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   195aa:	7391      	strb	r1, [r2, #14]
}
   195ac:	f85d 4b04 	ldr.w	r4, [sp], #4
   195b0:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   195b2:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   195b6:	b121      	cbz	r1, 195c2 <uarte_nrfx_isr_int+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   195b8:	2100      	movs	r1, #0
   195ba:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   195be:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   195c2:	6813      	ldr	r3, [r2, #0]
   195c4:	2b00      	cmp	r3, #0
   195c6:	d0f1      	beq.n	195ac <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   195c8:	6851      	ldr	r1, [r2, #4]
}
   195ca:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   195ce:	4718      	bx	r3

000195d0 <uarte_nrfx_config_get>:
{
   195d0:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   195d2:	68c2      	ldr	r2, [r0, #12]
   195d4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   195d8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   195dc:	2000      	movs	r0, #0
   195de:	4770      	bx	lr

000195e0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   195e0:	6843      	ldr	r3, [r0, #4]
   195e2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   195e4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   195e8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   195ec:	4770      	bx	lr

000195ee <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   195ee:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   195f0:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   195f2:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   195f6:	b938      	cbnz	r0, 19608 <is_tx_ready+0x1a>
   195f8:	7992      	ldrb	r2, [r2, #6]
   195fa:	b932      	cbnz	r2, 1960a <is_tx_ready+0x1c>
   195fc:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   19600:	3800      	subs	r0, #0
   19602:	bf18      	it	ne
   19604:	2001      	movne	r0, #1
   19606:	4770      	bx	lr
   19608:	2001      	movs	r0, #1
}
   1960a:	4770      	bx	lr

0001960c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1960c:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1960e:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   19610:	681b      	ldr	r3, [r3, #0]
   19612:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   19616:	b148      	cbz	r0, 1962c <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19618:	2000      	movs	r0, #0
	*c = data->rx_data;
   1961a:	7d52      	ldrb	r2, [r2, #21]
   1961c:	700a      	strb	r2, [r1, #0]
   1961e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   19622:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19626:	2201      	movs	r2, #1
   19628:	601a      	str	r2, [r3, #0]
	return 0;
   1962a:	4770      	bx	lr
		return -1;
   1962c:	f04f 30ff 	mov.w	r0, #4294967295
}
   19630:	4770      	bx	lr

00019632 <uarte_nrfx_fifo_fill>:
{
   19632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   19634:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   19636:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   19638:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   1963a:	68f3      	ldr	r3, [r6, #12]
   1963c:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1963e:	3310      	adds	r3, #16
   19640:	4294      	cmp	r4, r2
   19642:	bfa8      	it	ge
   19644:	4614      	movge	r4, r2
   19646:	2201      	movs	r2, #1
   19648:	e8d3 7fef 	ldaex	r7, [r3]
   1964c:	2f00      	cmp	r7, #0
   1964e:	d104      	bne.n	1965a <uarte_nrfx_fifo_fill+0x28>
   19650:	e8c3 2fec 	stlex	ip, r2, [r3]
   19654:	f1bc 0f00 	cmp.w	ip, #0
   19658:	d1f6      	bne.n	19648 <uarte_nrfx_fifo_fill+0x16>
   1965a:	bf0c      	ite	eq
   1965c:	4613      	moveq	r3, r2
   1965e:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   19660:	d01c      	beq.n	1969c <uarte_nrfx_fifo_fill+0x6a>
		return 0;
   19662:	461c      	mov	r4, r3
}
   19664:	4620      	mov	r0, r4
   19666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   19668:	68f2      	ldr	r2, [r6, #12]
   1966a:	5ccf      	ldrb	r7, [r1, r3]
   1966c:	6892      	ldr	r2, [r2, #8]
   1966e:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   19670:	3301      	adds	r3, #1
   19672:	42a3      	cmp	r3, r4
   19674:	dbf8      	blt.n	19668 <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   19676:	f04f 0320 	mov.w	r3, #32
   1967a:	f3ef 8111 	mrs	r1, BASEPRI
   1967e:	f383 8811 	msr	BASEPRI, r3
   19682:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   19686:	f7ff ffb2 	bl	195ee <is_tx_ready>
   1968a:	68f3      	ldr	r3, [r6, #12]
   1968c:	b940      	cbnz	r0, 196a0 <uarte_nrfx_fifo_fill+0x6e>
		len = 0;
   1968e:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   19690:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   19692:	f381 8811 	msr	BASEPRI, r1
   19696:	f3bf 8f6f 	isb	sy
	return len;
   1969a:	e7e3      	b.n	19664 <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   1969c:	2300      	movs	r3, #0
   1969e:	e7e8      	b.n	19672 <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   196a0:	689b      	ldr	r3, [r3, #8]
   196a2:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   196a6:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   196a8:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   196ac:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   196b0:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   196b4:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   196b8:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   196bc:	2301      	movs	r3, #1
   196be:	60ab      	str	r3, [r5, #8]
}
   196c0:	e7e7      	b.n	19692 <uarte_nrfx_fifo_fill+0x60>

000196c2 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   196c2:	6843      	ldr	r3, [r0, #4]
   196c4:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   196c6:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   196ca:	b153      	cbz	r3, 196e2 <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   196cc:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   196ce:	2000      	movs	r0, #0
   196d0:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   196d4:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   196d8:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   196da:	7d5b      	ldrb	r3, [r3, #21]
   196dc:	700b      	strb	r3, [r1, #0]
   196de:	6010      	str	r0, [r2, #0]
}
   196e0:	4770      	bx	lr
	int num_rx = 0;
   196e2:	4618      	mov	r0, r3
}
   196e4:	4770      	bx	lr

000196e6 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   196e6:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   196e8:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   196ea:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   196ec:	f04f 0020 	mov.w	r0, #32
   196f0:	f3ef 8311 	mrs	r3, BASEPRI
   196f4:	f380 8811 	msr	BASEPRI, r0
   196f8:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   196fc:	2000      	movs	r0, #0
   196fe:	68c9      	ldr	r1, [r1, #12]
   19700:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   19702:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   19706:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1970a:	f383 8811 	msr	BASEPRI, r3
   1970e:	f3bf 8f6f 	isb	sy
}
   19712:	4770      	bx	lr

00019714 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   19714:	2201      	movs	r2, #1
   19716:	68c3      	ldr	r3, [r0, #12]
   19718:	68db      	ldr	r3, [r3, #12]
   1971a:	739a      	strb	r2, [r3, #14]
}
   1971c:	4770      	bx	lr

0001971e <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1971e:	68c3      	ldr	r3, [r0, #12]
   19720:	68db      	ldr	r3, [r3, #12]
   19722:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   19724:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   19728:	b962      	cbnz	r2, 19744 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1972a:	6842      	ldr	r2, [r0, #4]
   1972c:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1972e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   19732:	b140      	cbz	r0, 19746 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   19734:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   19738:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1973c:	d003      	beq.n	19746 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1973e:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   19740:	6119      	str	r1, [r3, #16]
   19742:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   19744:	2000      	movs	r0, #0
}
   19746:	4770      	bx	lr

00019748 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   19748:	6843      	ldr	r3, [r0, #4]
   1974a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1974c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   19750:	3800      	subs	r0, #0
   19752:	bf18      	it	ne
   19754:	2001      	movne	r0, #1
   19756:	4770      	bx	lr

00019758 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   19758:	2210      	movs	r2, #16
	return config->uarte_regs;
   1975a:	6843      	ldr	r3, [r0, #4]
   1975c:	681b      	ldr	r3, [r3, #0]
   1975e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   19762:	4770      	bx	lr

00019764 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   19764:	2210      	movs	r2, #16
	return config->uarte_regs;
   19766:	6843      	ldr	r3, [r0, #4]
   19768:	681b      	ldr	r3, [r3, #0]
   1976a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1976e:	4770      	bx	lr

00019770 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   19770:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   19774:	6843      	ldr	r3, [r0, #4]
   19776:	681b      	ldr	r3, [r3, #0]
   19778:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1977c:	4770      	bx	lr

0001977e <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1977e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   19782:	6843      	ldr	r3, [r0, #4]
   19784:	681b      	ldr	r3, [r3, #0]
   19786:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1978a:	4770      	bx	lr

0001978c <uarte_nrfx_irq_update>:
}
   1978c:	2001      	movs	r0, #1
   1978e:	4770      	bx	lr

00019790 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   19790:	68c3      	ldr	r3, [r0, #12]
   19792:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   19794:	e9c3 1200 	strd	r1, r2, [r3]
}
   19798:	4770      	bx	lr

0001979a <uarte_nrfx_irq_is_pending>:
{
   1979a:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1979c:	6843      	ldr	r3, [r0, #4]
{
   1979e:	4604      	mov	r4, r0
	return config->uarte_regs;
   197a0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   197a2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   197a6:	025b      	lsls	r3, r3, #9
   197a8:	d405      	bmi.n	197b6 <uarte_nrfx_irq_is_pending+0x1c>
   197aa:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   197ae:	f010 0010 	ands.w	r0, r0, #16
   197b2:	d106      	bne.n	197c2 <uarte_nrfx_irq_is_pending+0x28>
}
   197b4:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   197b6:	f7ff ffb2 	bl	1971e <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   197ba:	2800      	cmp	r0, #0
   197bc:	d0f5      	beq.n	197aa <uarte_nrfx_irq_is_pending+0x10>
		||
   197be:	2001      	movs	r0, #1
   197c0:	e7f8      	b.n	197b4 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   197c2:	4620      	mov	r0, r4
   197c4:	f7ff ffc0 	bl	19748 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   197c8:	3800      	subs	r0, #0
   197ca:	bf18      	it	ne
   197cc:	2001      	movne	r0, #1
   197ce:	e7f1      	b.n	197b4 <uarte_nrfx_irq_is_pending+0x1a>

000197d0 <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   197d0:	2000      	movs	r0, #0
   197d2:	4770      	bx	lr

000197d4 <entropy_cc3xx_rng_get_entropy>:
{
   197d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   197d8:	460f      	mov	r7, r1
   197da:	4614      	mov	r4, r2
	size_t offset = 0;
   197dc:	2600      	movs	r6, #0
	int res = -EINVAL;
   197de:	f06f 0515 	mvn.w	r5, #21
{
   197e2:	b0a6      	sub	sp, #152	; 0x98
	while (length > 0) {
   197e4:	b91c      	cbnz	r4, 197ee <entropy_cc3xx_rng_get_entropy+0x1a>
}
   197e6:	4628      	mov	r0, r5
   197e8:	b026      	add	sp, #152	; 0x98
   197ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   197ee:	2190      	movs	r1, #144	; 0x90
   197f0:	aa01      	add	r2, sp, #4
   197f2:	a802      	add	r0, sp, #8
   197f4:	f7ff fdcf 	bl	19396 <spm_request_random_number>
		if (res < 0) {
   197f8:	1e05      	subs	r5, r0, #0
   197fa:	dbf4      	blt.n	197e6 <entropy_cc3xx_rng_get_entropy+0x12>
		if (olen != sizeof(spm_buf)) {
   197fc:	9b01      	ldr	r3, [sp, #4]
   197fe:	2b90      	cmp	r3, #144	; 0x90
   19800:	d10e      	bne.n	19820 <entropy_cc3xx_rng_get_entropy+0x4c>
		to_copy = MIN(length, sizeof(spm_buf));
   19802:	2c90      	cmp	r4, #144	; 0x90
   19804:	46a0      	mov	r8, r4
   19806:	bf28      	it	cs
   19808:	f04f 0890 	movcs.w	r8, #144	; 0x90
   1980c:	19b8      	adds	r0, r7, r6
   1980e:	4642      	mov	r2, r8
   19810:	a902      	add	r1, sp, #8
		length -= to_copy;
   19812:	eba4 0408 	sub.w	r4, r4, r8
   19816:	f002 f939 	bl	1ba8c <memcpy>
   1981a:	b2a4      	uxth	r4, r4
		offset += to_copy;
   1981c:	4446      	add	r6, r8
   1981e:	e7e1      	b.n	197e4 <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   19820:	f06f 0515 	mvn.w	r5, #21
   19824:	e7df      	b.n	197e6 <entropy_cc3xx_rng_get_entropy+0x12>

00019826 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   19826:	4668      	mov	r0, sp
   19828:	f020 0107 	bic.w	r1, r0, #7
   1982c:	468d      	mov	sp, r1
   1982e:	b501      	push	{r0, lr}
	nrf_modem_os_trace_irq_handler();
   19830:	f7f9 f860 	bl	128f4 <nrf_modem_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   19834:	f7f6 f9b2 	bl	fb9c <_arch_isr_direct_pm>
   19838:	f7f6 fb70 	bl	ff1c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1983c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   19840:	4685      	mov	sp, r0
   19842:	4770      	bx	lr

00019844 <trace_task_create>:
{
   19844:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   19846:	201d      	movs	r0, #29
   19848:	2200      	movs	r2, #0
   1984a:	2106      	movs	r1, #6
   1984c:	f7f6 f990 	bl	fb70 <z_arm_irq_priority_set>
}
   19850:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   19854:	201d      	movs	r0, #29
   19856:	f7f6 b96d 	b.w	fb34 <arch_irq_enable>

0001985a <read_task_create>:
{
   1985a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   1985c:	201c      	movs	r0, #28
   1985e:	2200      	movs	r2, #0
   19860:	2106      	movs	r1, #6
   19862:	f7f6 f985 	bl	fb70 <z_arm_irq_priority_set>
}
   19866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   1986a:	201c      	movs	r0, #28
   1986c:	f7f6 b962 	b.w	fb34 <arch_irq_enable>

00019870 <nrf_modem_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   19870:	2000      	movs	r0, #0
   19872:	4770      	bx	lr

00019874 <z_to_nrf_flags>:
{
   19874:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   19876:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   1987a:	bf18      	it	ne
   1987c:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   1987e:	0799      	lsls	r1, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   19880:	bf48      	it	mi
   19882:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   19886:	06da      	lsls	r2, r3, #27
		nrf_flags |= NRF_MSG_TRUNC;
   19888:	bf48      	it	mi
   1988a:	f040 0020 	orrmi.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   1988e:	069b      	lsls	r3, r3, #26
		nrf_flags |= NRF_MSG_WAITALL;
   19890:	bf48      	it	mi
   19892:	f040 0010 	orrmi.w	r0, r0, #16
}
   19896:	4770      	bx	lr

00019898 <z_to_nrf_family>:
	switch (z_family) {
   19898:	2806      	cmp	r0, #6
   1989a:	d80a      	bhi.n	198b2 <z_to_nrf_family+0x1a>
   1989c:	b198      	cbz	r0, 198c6 <z_to_nrf_family+0x2e>
   1989e:	3801      	subs	r0, #1
   198a0:	2805      	cmp	r0, #5
   198a2:	d810      	bhi.n	198c6 <z_to_nrf_family+0x2e>
   198a4:	e8df f000 	tbb	[pc, r0]
   198a8:	0f0d0312 	.word	0x0f0d0312
   198ac:	0b0f      	.short	0x0b0f
   198ae:	200a      	movs	r0, #10
   198b0:	4770      	bx	lr
   198b2:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   198b4:	bf14      	ite	ne
   198b6:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   198ba:	2066      	moveq	r0, #102	; 0x66
   198bc:	4770      	bx	lr
		return NRF_AF_LOCAL;
   198be:	2001      	movs	r0, #1
   198c0:	4770      	bx	lr
		return NRF_AF_PACKET;
   198c2:	2005      	movs	r0, #5
   198c4:	4770      	bx	lr
		return -EAFNOSUPPORT;
   198c6:	f06f 0069 	mvn.w	r0, #105	; 0x69
   198ca:	4770      	bx	lr
		return NRF_AF_INET;
   198cc:	2002      	movs	r0, #2
}
   198ce:	4770      	bx	lr

000198d0 <z_to_nrf_protocol>:
	switch (proto) {
   198d0:	f240 1311 	movw	r3, #273	; 0x111
   198d4:	4298      	cmp	r0, r3
   198d6:	d023      	beq.n	19920 <z_to_nrf_protocol+0x50>
   198d8:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   198dc:	da11      	bge.n	19902 <z_to_nrf_protocol+0x32>
   198de:	2811      	cmp	r0, #17
   198e0:	d021      	beq.n	19926 <z_to_nrf_protocol+0x56>
   198e2:	dc06      	bgt.n	198f2 <z_to_nrf_protocol+0x22>
   198e4:	b300      	cbz	r0, 19928 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   198e6:	2806      	cmp	r0, #6
   198e8:	bf14      	ite	ne
   198ea:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   198ee:	2001      	moveq	r0, #1
   198f0:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   198f2:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   198f6:	bf14      	ite	ne
   198f8:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   198fc:	f44f 7082 	moveq.w	r0, #260	; 0x104
   19900:	4770      	bx	lr
	switch (proto) {
   19902:	f240 2302 	movw	r3, #514	; 0x202
   19906:	4298      	cmp	r0, r3
   19908:	d00e      	beq.n	19928 <z_to_nrf_protocol+0x58>
   1990a:	f240 2303 	movw	r3, #515	; 0x203
   1990e:	4298      	cmp	r0, r3
   19910:	d00a      	beq.n	19928 <z_to_nrf_protocol+0x58>
   19912:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   19916:	4298      	cmp	r0, r3
   19918:	bf18      	it	ne
   1991a:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   1991e:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   19920:	f44f 7087 	mov.w	r0, #270	; 0x10e
   19924:	4770      	bx	lr
	switch (proto) {
   19926:	2002      	movs	r0, #2
}
   19928:	4770      	bx	lr

0001992a <nrf91_socket_is_supported>:
}
   1992a:	2001      	movs	r0, #1
   1992c:	4770      	bx	lr

0001992e <nrf91_nrf_modem_lib_socket_offload_init>:
}
   1992e:	2000      	movs	r0, #0
   19930:	4770      	bx	lr

00019932 <nrf91_socket_offload_getsockopt>:
{
   19932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19936:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   19938:	2300      	movs	r3, #0
{
   1993a:	b086      	sub	sp, #24
   1993c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   19940:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   19944:	f8d8 3000 	ldr.w	r3, [r8]
{
   19948:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1994a:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1994c:	f240 2302 	movw	r3, #514	; 0x202
   19950:	4299      	cmp	r1, r3
{
   19952:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   19954:	f100 37ff 	add.w	r7, r0, #4294967295
	switch (z_in_level) {
   19958:	d005      	beq.n	19966 <nrf91_socket_offload_getsockopt+0x34>
   1995a:	dc31      	bgt.n	199c0 <nrf91_socket_offload_getsockopt+0x8e>
   1995c:	2901      	cmp	r1, #1
   1995e:	d002      	beq.n	19966 <nrf91_socket_offload_getsockopt+0x34>
   19960:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   19964:	d13d      	bne.n	199e2 <nrf91_socket_offload_getsockopt+0xb0>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   19966:	4631      	mov	r1, r6
   19968:	4620      	mov	r0, r4
   1996a:	aa02      	add	r2, sp, #8
   1996c:	f7f7 fe98 	bl	116a0 <z_to_nrf_optname>
   19970:	2800      	cmp	r0, #0
   19972:	db36      	blt.n	199e2 <nrf91_socket_offload_getsockopt+0xb0>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   19974:	2c01      	cmp	r4, #1
   19976:	d127      	bne.n	199c8 <nrf91_socket_offload_getsockopt+0x96>
   19978:	f1a6 0314 	sub.w	r3, r6, #20
   1997c:	2b01      	cmp	r3, #1
   1997e:	d823      	bhi.n	199c8 <nrf91_socket_offload_getsockopt+0x96>
		nrf_optlen = sizeof(struct nrf_timeval);
   19980:	2308      	movs	r3, #8
   19982:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   19984:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   19986:	aa03      	add	r2, sp, #12
   19988:	4638      	mov	r0, r7
   1998a:	9200      	str	r2, [sp, #0]
   1998c:	4621      	mov	r1, r4
   1998e:	9a02      	ldr	r2, [sp, #8]
   19990:	f001 fc8c 	bl	1b2ac <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   19994:	4607      	mov	r7, r0
   19996:	b978      	cbnz	r0, 199b8 <nrf91_socket_offload_getsockopt+0x86>
   19998:	b175      	cbz	r5, 199b8 <nrf91_socket_offload_getsockopt+0x86>
		*optlen = nrf_optlen;
   1999a:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1999c:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1999e:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   199a2:	d109      	bne.n	199b8 <nrf91_socket_offload_getsockopt+0x86>
			if (optname == SO_ERROR) {
   199a4:	2e04      	cmp	r6, #4
   199a6:	d111      	bne.n	199cc <nrf91_socket_offload_getsockopt+0x9a>
				if (*(int *)optval != 0) {
   199a8:	6828      	ldr	r0, [r5, #0]
   199aa:	b128      	cbz	r0, 199b8 <nrf91_socket_offload_getsockopt+0x86>
					nrf_modem_os_errno_set(*(int *)optval);
   199ac:	f7f7 fc90 	bl	112d0 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   199b0:	f7ff fd36 	bl	19420 <__errno>
   199b4:	6803      	ldr	r3, [r0, #0]
   199b6:	602b      	str	r3, [r5, #0]
}
   199b8:	4638      	mov	r0, r7
   199ba:	b006      	add	sp, #24
   199bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   199c0:	f240 2303 	movw	r3, #515	; 0x203
   199c4:	4299      	cmp	r1, r3
   199c6:	e7cd      	b.n	19964 <nrf91_socket_offload_getsockopt+0x32>
   199c8:	462b      	mov	r3, r5
   199ca:	e7dc      	b.n	19986 <nrf91_socket_offload_getsockopt+0x54>
			} else if ((optname == SO_RCVTIMEO) ||
   199cc:	3e14      	subs	r6, #20
   199ce:	2e01      	cmp	r6, #1
   199d0:	d8f2      	bhi.n	199b8 <nrf91_socket_offload_getsockopt+0x86>
				((struct timeval *)optval)->tv_sec =
   199d2:	9b04      	ldr	r3, [sp, #16]
   199d4:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   199d6:	9b05      	ldr	r3, [sp, #20]
   199d8:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   199da:	2308      	movs	r3, #8
   199dc:	f8c8 3000 	str.w	r3, [r8]
   199e0:	e7ea      	b.n	199b8 <nrf91_socket_offload_getsockopt+0x86>
	errno = ENOPROTOOPT;
   199e2:	f7ff fd1d 	bl	19420 <__errno>
   199e6:	236d      	movs	r3, #109	; 0x6d
	return retval;
   199e8:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   199ec:	6003      	str	r3, [r0, #0]
	return retval;
   199ee:	e7e3      	b.n	199b8 <nrf91_socket_offload_getsockopt+0x86>

000199f0 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   199f0:	3801      	subs	r0, #1
   199f2:	f001 bc09 	b.w	1b208 <nrf_listen>

000199f6 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   199f6:	3801      	subs	r0, #1
   199f8:	f001 bbb2 	b.w	1b160 <nrf_close>

000199fc <nrf91_socket_offload_freeaddrinfo>:
{
   199fc:	b538      	push	{r3, r4, r5, lr}
   199fe:	4604      	mov	r4, r0
	while (next != NULL) {
   19a00:	b904      	cbnz	r4, 19a04 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   19a02:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   19a04:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   19a06:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   19a08:	f002 f815 	bl	1ba36 <k_free>
		k_free(this);
   19a0c:	4620      	mov	r0, r4
   19a0e:	f002 f812 	bl	1ba36 <k_free>
		next = next->ai_next;
   19a12:	462c      	mov	r4, r5
   19a14:	e7f4      	b.n	19a00 <nrf91_socket_offload_freeaddrinfo+0x4>

00019a16 <z_to_nrf_addrinfo_hints>:
{
   19a16:	b538      	push	{r3, r4, r5, lr}
   19a18:	460c      	mov	r4, r1
   19a1a:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   19a1c:	221c      	movs	r2, #28
   19a1e:	2100      	movs	r1, #0
   19a20:	1d20      	adds	r0, r4, #4
   19a22:	f002 f840 	bl	1baa6 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   19a26:	2300      	movs	r3, #0
   19a28:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   19a2a:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   19a2c:	2b03      	cmp	r3, #3
   19a2e:	d003      	beq.n	19a38 <z_to_nrf_addrinfo_hints+0x22>
   19a30:	2b04      	cmp	r3, #4
   19a32:	bf08      	it	eq
   19a34:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   19a38:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   19a3a:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   19a3c:	f7ff ff2c 	bl	19898 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   19a40:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   19a44:	d00b      	beq.n	19a5e <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   19a46:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   19a48:	6928      	ldr	r0, [r5, #16]
   19a4a:	f7ff ff41 	bl	198d0 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   19a4e:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   19a52:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   19a54:	d003      	beq.n	19a5e <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   19a56:	69e8      	ldr	r0, [r5, #28]
   19a58:	b108      	cbz	r0, 19a5e <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   19a5a:	61a0      	str	r0, [r4, #24]
	return 0;
   19a5c:	2000      	movs	r0, #0
}
   19a5e:	bd38      	pop	{r3, r4, r5, pc}

00019a60 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   19a60:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   19a62:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   19a64:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   19a66:	4603      	mov	r3, r0
{
   19a68:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   19a6a:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19a6e:	f101 0420 	add.w	r4, r1, #32
   19a72:	f101 0210 	add.w	r2, r1, #16
   19a76:	f852 5b04 	ldr.w	r5, [r2], #4
   19a7a:	42a2      	cmp	r2, r4
   19a7c:	f843 5b04 	str.w	r5, [r3], #4
   19a80:	d1f9      	bne.n	19a76 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   19a82:	6a0b      	ldr	r3, [r1, #32]
   19a84:	7503      	strb	r3, [r0, #20]
}
   19a86:	bd30      	pop	{r4, r5, pc}

00019a88 <nrf91_socket_offload_recvfrom>:
{
   19a88:	b5f0      	push	{r4, r5, r6, r7, lr}
	int sd = OBJ_TO_SD(obj);
   19a8a:	1e45      	subs	r5, r0, #1
{
   19a8c:	b08f      	sub	sp, #60	; 0x3c
   19a8e:	4618      	mov	r0, r3
   19a90:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   19a94:	e9cd 2102 	strd	r2, r1, [sp, #8]
   19a98:	f7ff feec 	bl	19874 <z_to_nrf_flags>
	if (from == NULL) {
   19a9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   19aa0:	4603      	mov	r3, r0
   19aa2:	b944      	cbnz	r4, 19ab6 <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   19aa4:	4628      	mov	r0, r5
   19aa6:	e9cd 4400 	strd	r4, r4, [sp]
   19aaa:	f001 fb80 	bl	1b1ae <nrf_recvfrom>
   19aae:	4605      	mov	r5, r0
}
   19ab0:	4628      	mov	r0, r5
   19ab2:	b00f      	add	sp, #60	; 0x3c
   19ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   19ab6:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   19ab8:	af05      	add	r7, sp, #20
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   19aba:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   19abc:	a804      	add	r0, sp, #16
   19abe:	9001      	str	r0, [sp, #4]
   19ac0:	9700      	str	r7, [sp, #0]
   19ac2:	4628      	mov	r0, r5
   19ac4:	f001 fb73 	bl	1b1ae <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   19ac8:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   19aca:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   19acc:	2b02      	cmp	r3, #2
   19ace:	d109      	bne.n	19ae4 <nrf91_socket_offload_recvfrom+0x5c>
	ptr->sin_port = nrf_in->sin_port;
   19ad0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   19ad4:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   19ad6:	2301      	movs	r3, #1
   19ad8:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   19ada:	9b08      	ldr	r3, [sp, #32]
   19adc:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   19ade:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   19ae0:	6033      	str	r3, [r6, #0]
	return retval;
   19ae2:	e7e5      	b.n	19ab0 <nrf91_socket_offload_recvfrom+0x28>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   19ae4:	2b0a      	cmp	r3, #10
   19ae6:	d1e3      	bne.n	19ab0 <nrf91_socket_offload_recvfrom+0x28>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   19ae8:	4639      	mov	r1, r7
   19aea:	4620      	mov	r0, r4
   19aec:	f7ff ffb8 	bl	19a60 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   19af0:	2318      	movs	r3, #24
   19af2:	e7f5      	b.n	19ae0 <nrf91_socket_offload_recvfrom+0x58>

00019af4 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   19af4:	2300      	movs	r3, #0
{
   19af6:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   19af8:	e9cd 3300 	strd	r3, r3, [sp]
   19afc:	f7ff ffc4 	bl	19a88 <nrf91_socket_offload_recvfrom>
}
   19b00:	b003      	add	sp, #12
   19b02:	f85d fb04 	ldr.w	pc, [sp], #4

00019b06 <z_to_nrf_ipv6>:
{
   19b06:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   19b08:	2124      	movs	r1, #36	; 0x24
   19b0a:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   19b0c:	8841      	ldrh	r1, [r0, #2]
{
   19b0e:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   19b10:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   19b12:	210a      	movs	r1, #10
{
   19b14:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   19b16:	6059      	str	r1, [r3, #4]
   19b18:	1d04      	adds	r4, r0, #4
   19b1a:	f103 0610 	add.w	r6, r3, #16
   19b1e:	f100 0714 	add.w	r7, r0, #20
   19b22:	4635      	mov	r5, r6
   19b24:	6820      	ldr	r0, [r4, #0]
   19b26:	6861      	ldr	r1, [r4, #4]
   19b28:	3408      	adds	r4, #8
   19b2a:	c503      	stmia	r5!, {r0, r1}
   19b2c:	42bc      	cmp	r4, r7
   19b2e:	462e      	mov	r6, r5
   19b30:	d1f7      	bne.n	19b22 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   19b32:	7d12      	ldrb	r2, [r2, #20]
   19b34:	621a      	str	r2, [r3, #32]
}
   19b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019b38 <nrf91_socket_offload_sendto>:
{
   19b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b3c:	b08e      	sub	sp, #56	; 0x38
   19b3e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   19b40:	460e      	mov	r6, r1
   19b42:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   19b44:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   19b46:	b974      	cbnz	r4, 19b66 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   19b48:	4618      	mov	r0, r3
   19b4a:	9203      	str	r2, [sp, #12]
   19b4c:	f7ff fe92 	bl	19874 <z_to_nrf_flags>
   19b50:	4603      	mov	r3, r0
   19b52:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   19b56:	4631      	mov	r1, r6
   19b58:	4628      	mov	r0, r5
   19b5a:	9a03      	ldr	r2, [sp, #12]
   19b5c:	f001 fb0d 	bl	1b17a <nrf_sendto>
}
   19b60:	b00e      	add	sp, #56	; 0x38
   19b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   19b66:	8823      	ldrh	r3, [r4, #0]
   19b68:	9203      	str	r2, [sp, #12]
   19b6a:	2b01      	cmp	r3, #1
   19b6c:	d113      	bne.n	19b96 <nrf91_socket_offload_sendto+0x5e>
	nrf_out->sin_port = ptr->sin_port;
   19b6e:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   19b70:	f04f 0810 	mov.w	r8, #16
	nrf_out->sin_port = ptr->sin_port;
   19b74:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   19b78:	2302      	movs	r3, #2
   19b7a:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   19b7c:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   19b7e:	4638      	mov	r0, r7
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   19b80:	9308      	str	r3, [sp, #32]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   19b82:	f88d 8014 	strb.w	r8, [sp, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   19b86:	f7ff fe75 	bl	19874 <z_to_nrf_flags>
   19b8a:	a905      	add	r1, sp, #20
   19b8c:	4603      	mov	r3, r0
   19b8e:	f8cd 8004 	str.w	r8, [sp, #4]
   19b92:	9100      	str	r1, [sp, #0]
   19b94:	e7df      	b.n	19b56 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   19b96:	2b02      	cmp	r3, #2
   19b98:	d10d      	bne.n	19bb6 <nrf91_socket_offload_sendto+0x7e>
		z_to_nrf_ipv6(to, &ipv6);
   19b9a:	f10d 0814 	add.w	r8, sp, #20
   19b9e:	4641      	mov	r1, r8
   19ba0:	4620      	mov	r0, r4
   19ba2:	f7ff ffb0 	bl	19b06 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   19ba6:	4638      	mov	r0, r7
   19ba8:	f7ff fe64 	bl	19874 <z_to_nrf_flags>
   19bac:	2124      	movs	r1, #36	; 0x24
   19bae:	4603      	mov	r3, r0
   19bb0:	e9cd 8100 	strd	r8, r1, [sp]
   19bb4:	e7cf      	b.n	19b56 <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   19bb6:	f7ff fc33 	bl	19420 <__errno>
   19bba:	2386      	movs	r3, #134	; 0x86
   19bbc:	6003      	str	r3, [r0, #0]
	return retval;
   19bbe:	f04f 30ff 	mov.w	r0, #4294967295
   19bc2:	e7cd      	b.n	19b60 <nrf91_socket_offload_sendto+0x28>

00019bc4 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   19bc4:	2300      	movs	r3, #0
{
   19bc6:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   19bc8:	e9cd 3300 	strd	r3, r3, [sp]
   19bcc:	f7ff ffb4 	bl	19b38 <nrf91_socket_offload_sendto>
}
   19bd0:	b003      	add	sp, #12
   19bd2:	f85d fb04 	ldr.w	pc, [sp], #4

00019bd6 <nrf91_socket_offload_connect>:
{
   19bd6:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   19bd8:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   19bda:	8808      	ldrh	r0, [r1, #0]
{
   19bdc:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   19bde:	2801      	cmp	r0, #1
{
   19be0:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   19be2:	d10f      	bne.n	19c04 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   19be4:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   19be6:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   19be8:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   19bec:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   19bee:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   19bf0:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   19bf4:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   19bf6:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   19bf8:	4620      	mov	r0, r4
   19bfa:	a901      	add	r1, sp, #4
   19bfc:	f001 faf1 	bl	1b1e2 <nrf_connect>
}
   19c00:	b00a      	add	sp, #40	; 0x28
   19c02:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   19c04:	2802      	cmp	r0, #2
   19c06:	d105      	bne.n	19c14 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   19c08:	4618      	mov	r0, r3
   19c0a:	a901      	add	r1, sp, #4
   19c0c:	f7ff ff7b 	bl	19b06 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   19c10:	2224      	movs	r2, #36	; 0x24
   19c12:	e7f1      	b.n	19bf8 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   19c14:	4620      	mov	r0, r4
   19c16:	f001 fae4 	bl	1b1e2 <nrf_connect>
		if (retval < 0) {
   19c1a:	2800      	cmp	r0, #0
   19c1c:	daf0      	bge.n	19c00 <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   19c1e:	f7ff fbff 	bl	19420 <__errno>
   19c22:	2386      	movs	r3, #134	; 0x86
   19c24:	6003      	str	r3, [r0, #0]
   19c26:	f04f 30ff 	mov.w	r0, #4294967295
   19c2a:	e7e9      	b.n	19c00 <nrf91_socket_offload_connect+0x2a>

00019c2c <nrf91_socket_offload_setsockopt>:
{
   19c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c30:	461e      	mov	r6, r3
	switch (z_in_level) {
   19c32:	f240 2302 	movw	r3, #514	; 0x202
{
   19c36:	b086      	sub	sp, #24
	switch (z_in_level) {
   19c38:	4299      	cmp	r1, r3
{
   19c3a:	460c      	mov	r4, r1
   19c3c:	4615      	mov	r5, r2
   19c3e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   19c40:	f100 38ff 	add.w	r8, r0, #4294967295
	switch (z_in_level) {
   19c44:	d005      	beq.n	19c52 <nrf91_socket_offload_setsockopt+0x26>
   19c46:	dc20      	bgt.n	19c8a <nrf91_socket_offload_setsockopt+0x5e>
   19c48:	2901      	cmp	r1, #1
   19c4a:	d002      	beq.n	19c52 <nrf91_socket_offload_setsockopt+0x26>
   19c4c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   19c50:	d126      	bne.n	19ca0 <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   19c52:	4629      	mov	r1, r5
   19c54:	4620      	mov	r0, r4
   19c56:	aa03      	add	r2, sp, #12
   19c58:	f7f7 fd22 	bl	116a0 <z_to_nrf_optname>
   19c5c:	2800      	cmp	r0, #0
   19c5e:	db1f      	blt.n	19ca0 <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   19c60:	2c01      	cmp	r4, #1
   19c62:	d116      	bne.n	19c92 <nrf91_socket_offload_setsockopt+0x66>
   19c64:	3d14      	subs	r5, #20
   19c66:	2d01      	cmp	r5, #1
   19c68:	d805      	bhi.n	19c76 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   19c6a:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   19c6c:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   19c6e:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   19c70:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   19c72:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   19c74:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   19c76:	4633      	mov	r3, r6
   19c78:	4621      	mov	r1, r4
   19c7a:	4640      	mov	r0, r8
   19c7c:	9a03      	ldr	r2, [sp, #12]
   19c7e:	9700      	str	r7, [sp, #0]
   19c80:	f001 fafb 	bl	1b27a <nrf_setsockopt>
}
   19c84:	b006      	add	sp, #24
   19c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   19c8a:	f240 2303 	movw	r3, #515	; 0x203
   19c8e:	4299      	cmp	r1, r3
   19c90:	e7de      	b.n	19c50 <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   19c92:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   19c96:	d1ee      	bne.n	19c76 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   19c98:	2d08      	cmp	r5, #8
   19c9a:	bf08      	it	eq
   19c9c:	2701      	moveq	r7, #1
   19c9e:	e7ea      	b.n	19c76 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   19ca0:	f7ff fbbe 	bl	19420 <__errno>
   19ca4:	236d      	movs	r3, #109	; 0x6d
   19ca6:	6003      	str	r3, [r0, #0]
   19ca8:	f04f 30ff 	mov.w	r0, #4294967295
   19cac:	e7ea      	b.n	19c84 <nrf91_socket_offload_setsockopt+0x58>

00019cae <nrf91_socket_offload_bind>:
{
   19cae:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   19cb0:	880a      	ldrh	r2, [r1, #0]
{
   19cb2:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   19cb4:	2a01      	cmp	r2, #1
{
   19cb6:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   19cb8:	f100 34ff 	add.w	r4, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   19cbc:	d10f      	bne.n	19cde <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   19cbe:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   19cc0:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   19cc2:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   19cc6:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   19cc8:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   19cca:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   19cce:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   19cd0:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   19cd2:	4620      	mov	r0, r4
   19cd4:	a901      	add	r1, sp, #4
   19cd6:	f001 fabd 	bl	1b254 <nrf_bind>
}
   19cda:	b00a      	add	sp, #40	; 0x28
   19cdc:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   19cde:	2a02      	cmp	r2, #2
   19ce0:	d105      	bne.n	19cee <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   19ce2:	4618      	mov	r0, r3
   19ce4:	a901      	add	r1, sp, #4
   19ce6:	f7ff ff0e 	bl	19b06 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   19cea:	2224      	movs	r2, #36	; 0x24
   19cec:	e7f1      	b.n	19cd2 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   19cee:	f7ff fb97 	bl	19420 <__errno>
   19cf2:	2386      	movs	r3, #134	; 0x86
   19cf4:	6003      	str	r3, [r0, #0]
   19cf6:	f04f 30ff 	mov.w	r0, #4294967295
   19cfa:	e7ee      	b.n	19cda <nrf91_socket_offload_bind+0x2c>

00019cfc <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   19cfc:	6883      	ldr	r3, [r0, #8]
   19cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19d00:	b103      	cbz	r3, 19d04 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   19d02:	4718      	bx	r3
}
   19d04:	4770      	bx	lr

00019d06 <response_handler>:
	write_uart_string(response);
   19d06:	4608      	mov	r0, r1
   19d08:	f7f8 bb9c 	b.w	12444 <write_uart_string>

00019d0c <rpc_handle_ctrl_message>:
   19d0c:	2902      	cmp	r1, #2
   19d0e:	b510      	push	{r4, lr}
   19d10:	4604      	mov	r4, r0
   19d12:	d005      	beq.n	19d20 <rpc_handle_ctrl_message+0x14>
   19d14:	2904      	cmp	r1, #4
   19d16:	d001      	beq.n	19d1c <rpc_handle_ctrl_message+0x10>
   19d18:	2901      	cmp	r1, #1
   19d1a:	d107      	bne.n	19d2c <rpc_handle_ctrl_message+0x20>
   19d1c:	2000      	movs	r0, #0
   19d1e:	bd10      	pop	{r4, pc}
   19d20:	6880      	ldr	r0, [r0, #8]
   19d22:	2800      	cmp	r0, #0
   19d24:	d0fa      	beq.n	19d1c <rpc_handle_ctrl_message+0x10>
   19d26:	f000 f85b 	bl	19de0 <rpc_transport_data_free>
   19d2a:	e7f7      	b.n	19d1c <rpc_handle_ctrl_message+0x10>
   19d2c:	6880      	ldr	r0, [r0, #8]
   19d2e:	b108      	cbz	r0, 19d34 <rpc_handle_ctrl_message+0x28>
   19d30:	f000 f856 	bl	19de0 <rpc_transport_data_free>
   19d34:	4620      	mov	r0, r4
   19d36:	f000 f84f 	bl	19dd8 <rpc_transport_msg_free>
   19d3a:	e7ef      	b.n	19d1c <rpc_handle_ctrl_message+0x10>

00019d3c <rpc_message_send>:
   19d3c:	b150      	cbz	r0, 19d54 <rpc_message_send+0x18>
   19d3e:	b159      	cbz	r1, 19d58 <rpc_message_send+0x1c>
   19d40:	684b      	ldr	r3, [r1, #4]
   19d42:	8008      	strh	r0, [r1, #0]
   19d44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   19d48:	f043 0302 	orr.w	r3, r3, #2
   19d4c:	4608      	mov	r0, r1
   19d4e:	604b      	str	r3, [r1, #4]
   19d50:	f000 b848 	b.w	19de4 <rpc_transport_data_msg_send>
   19d54:	2016      	movs	r0, #22
   19d56:	4770      	bx	lr
   19d58:	200e      	movs	r0, #14
   19d5a:	4770      	bx	lr

00019d5c <rpc_message_alloc>:
   19d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d5e:	4607      	mov	r7, r0
   19d60:	460d      	mov	r5, r1
   19d62:	4616      	mov	r6, r2
   19d64:	b1d2      	cbz	r2, 19d9c <rpc_message_alloc+0x40>
   19d66:	b1d8      	cbz	r0, 19da0 <rpc_message_alloc+0x44>
   19d68:	2300      	movs	r3, #0
   19d6a:	6013      	str	r3, [r2, #0]
   19d6c:	b131      	cbz	r1, 19d7c <rpc_message_alloc+0x20>
   19d6e:	4608      	mov	r0, r1
   19d70:	f000 f834 	bl	19ddc <rpc_transport_data_alloc>
   19d74:	4604      	mov	r4, r0
   19d76:	b910      	cbnz	r0, 19d7e <rpc_message_alloc+0x22>
   19d78:	200c      	movs	r0, #12
   19d7a:	e008      	b.n	19d8e <rpc_message_alloc+0x32>
   19d7c:	460c      	mov	r4, r1
   19d7e:	f000 f829 	bl	19dd4 <rpc_transport_data_msg_alloc>
   19d82:	b128      	cbz	r0, 19d90 <rpc_message_alloc+0x34>
   19d84:	60c5      	str	r5, [r0, #12]
   19d86:	6084      	str	r4, [r0, #8]
   19d88:	8007      	strh	r7, [r0, #0]
   19d8a:	6030      	str	r0, [r6, #0]
   19d8c:	2000      	movs	r0, #0
   19d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19d90:	2c00      	cmp	r4, #0
   19d92:	d0f1      	beq.n	19d78 <rpc_message_alloc+0x1c>
   19d94:	4620      	mov	r0, r4
   19d96:	f000 f823 	bl	19de0 <rpc_transport_data_free>
   19d9a:	e7ed      	b.n	19d78 <rpc_message_alloc+0x1c>
   19d9c:	200e      	movs	r0, #14
   19d9e:	e7f6      	b.n	19d8e <rpc_message_alloc+0x32>
   19da0:	2016      	movs	r0, #22
   19da2:	e7f4      	b.n	19d8e <rpc_message_alloc+0x32>

00019da4 <rpc_message_free>:
   19da4:	b508      	push	{r3, lr}
   19da6:	b128      	cbz	r0, 19db4 <rpc_message_free+0x10>
   19da8:	b131      	cbz	r1, 19db8 <rpc_message_free+0x14>
   19daa:	4608      	mov	r0, r1
   19dac:	f000 f814 	bl	19dd8 <rpc_transport_msg_free>
   19db0:	2000      	movs	r0, #0
   19db2:	bd08      	pop	{r3, pc}
   19db4:	2016      	movs	r0, #22
   19db6:	e7fc      	b.n	19db2 <rpc_message_free+0xe>
   19db8:	200e      	movs	r0, #14
   19dba:	e7fa      	b.n	19db2 <rpc_message_free+0xe>

00019dbc <rpc_message_data_free>:
   19dbc:	b508      	push	{r3, lr}
   19dbe:	b128      	cbz	r0, 19dcc <rpc_message_data_free+0x10>
   19dc0:	b131      	cbz	r1, 19dd0 <rpc_message_data_free+0x14>
   19dc2:	4608      	mov	r0, r1
   19dc4:	f000 f80c 	bl	19de0 <rpc_transport_data_free>
   19dc8:	2000      	movs	r0, #0
   19dca:	bd08      	pop	{r3, pc}
   19dcc:	2016      	movs	r0, #22
   19dce:	e7fc      	b.n	19dca <rpc_message_data_free+0xe>
   19dd0:	200e      	movs	r0, #14
   19dd2:	e7fa      	b.n	19dca <rpc_message_data_free+0xe>

00019dd4 <rpc_transport_data_msg_alloc>:
   19dd4:	f7f8 beea 	b.w	12bac <rpc_transport_ipc_data_msg_alloc>

00019dd8 <rpc_transport_msg_free>:
   19dd8:	f7f8 bf20 	b.w	12c1c <rpc_transport_ipc_msg_free>

00019ddc <rpc_transport_data_alloc>:
   19ddc:	f7f8 bf04 	b.w	12be8 <rpc_transport_ipc_data_alloc>

00019de0 <rpc_transport_data_free>:
   19de0:	f7f8 bf42 	b.w	12c68 <rpc_transport_ipc_data_free>

00019de4 <rpc_transport_data_msg_send>:
   19de4:	f7f8 be8e 	b.w	12b04 <rpc_transport_ipc_data_msg_send>

00019de8 <trace_write>:
   19de8:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   19dec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19dee:	f8ad 3000 	strh.w	r3, [sp]
   19df2:	7803      	ldrb	r3, [r0, #0]
   19df4:	4604      	mov	r4, r0
   19df6:	f88d 3004 	strb.w	r3, [sp, #4]
   19dfa:	6843      	ldr	r3, [r0, #4]
   19dfc:	6882      	ldr	r2, [r0, #8]
   19dfe:	2105      	movs	r1, #5
   19e00:	4293      	cmp	r3, r2
   19e02:	bf96      	itet	ls
   19e04:	6906      	ldrls	r6, [r0, #16]
   19e06:	1a9e      	subhi	r6, r3, r2
   19e08:	1ab6      	subls	r6, r6, r2
   19e0a:	4293      	cmp	r3, r2
   19e0c:	bf2c      	ite	cs
   19e0e:	2500      	movcs	r5, #0
   19e10:	68c5      	ldrcc	r5, [r0, #12]
   19e12:	b2b6      	uxth	r6, r6
   19e14:	bf38      	it	cc
   19e16:	1b5b      	subcc	r3, r3, r5
   19e18:	4668      	mov	r0, sp
   19e1a:	bf38      	it	cc
   19e1c:	b29d      	uxthcc	r5, r3
   19e1e:	f8ad 6002 	strh.w	r6, [sp, #2]
   19e22:	f7ff fd25 	bl	19870 <nrf_modem_os_trace_put>
   19e26:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   19e2a:	68a0      	ldr	r0, [r4, #8]
   19e2c:	f7ff fd20 	bl	19870 <nrf_modem_os_trace_put>
   19e30:	68a3      	ldr	r3, [r4, #8]
   19e32:	441e      	add	r6, r3
   19e34:	6923      	ldr	r3, [r4, #16]
   19e36:	60a6      	str	r6, [r4, #8]
   19e38:	429e      	cmp	r6, r3
   19e3a:	bf04      	itt	eq
   19e3c:	68e3      	ldreq	r3, [r4, #12]
   19e3e:	60a3      	streq	r3, [r4, #8]
   19e40:	b17d      	cbz	r5, 19e62 <trace_write+0x7a>
   19e42:	2105      	movs	r1, #5
   19e44:	4668      	mov	r0, sp
   19e46:	f8ad 5002 	strh.w	r5, [sp, #2]
   19e4a:	f7ff fd11 	bl	19870 <nrf_modem_os_trace_put>
   19e4e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   19e52:	68e0      	ldr	r0, [r4, #12]
   19e54:	f7ff fd0c 	bl	19870 <nrf_modem_os_trace_put>
   19e58:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   19e5c:	68e3      	ldr	r3, [r4, #12]
   19e5e:	4413      	add	r3, r2
   19e60:	60a3      	str	r3, [r4, #8]
   19e62:	b002      	add	sp, #8
   19e64:	bd70      	pop	{r4, r5, r6, pc}

00019e66 <rpc_transport_ipc_msg_alloc>:
   19e66:	2300      	movs	r3, #0
   19e68:	b570      	push	{r4, r5, r6, lr}
   19e6a:	6806      	ldr	r6, [r0, #0]
   19e6c:	429e      	cmp	r6, r3
   19e6e:	d101      	bne.n	19e74 <rpc_transport_ipc_msg_alloc+0xe>
   19e70:	2000      	movs	r0, #0
   19e72:	e00d      	b.n	19e90 <rpc_transport_ipc_msg_alloc+0x2a>
   19e74:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
   19e78:	6865      	ldr	r5, [r4, #4]
   19e7a:	b2ed      	uxtb	r5, r5
   19e7c:	2d03      	cmp	r5, #3
   19e7e:	d108      	bne.n	19e92 <rpc_transport_ipc_msg_alloc+0x2c>
   19e80:	eb01 1083 	add.w	r0, r1, r3, lsl #6
   19e84:	60a0      	str	r0, [r4, #8]
   19e86:	6863      	ldr	r3, [r4, #4]
   19e88:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   19e8c:	6063      	str	r3, [r4, #4]
   19e8e:	7102      	strb	r2, [r0, #4]
   19e90:	bd70      	pop	{r4, r5, r6, pc}
   19e92:	b915      	cbnz	r5, 19e9a <rpc_transport_ipc_msg_alloc+0x34>
   19e94:	68a5      	ldr	r5, [r4, #8]
   19e96:	2d00      	cmp	r5, #0
   19e98:	d0f2      	beq.n	19e80 <rpc_transport_ipc_msg_alloc+0x1a>
   19e9a:	3301      	adds	r3, #1
   19e9c:	e7e6      	b.n	19e6c <rpc_transport_ipc_msg_alloc+0x6>

00019e9e <at_client_evt_handler>:
   19e9e:	b120      	cbz	r0, 19eaa <at_client_evt_handler+0xc>
   19ea0:	f850 1b08 	ldr.w	r1, [r0], #8
   19ea4:	0c09      	lsrs	r1, r1, #16
   19ea6:	f000 bec3 	b.w	1ac30 <rpc_at_event_handler>
   19eaa:	4770      	bx	lr

00019eac <rpc_at_client_request_alloc>:
   19eac:	b513      	push	{r0, r1, r4, lr}
   19eae:	4604      	mov	r4, r0
   19eb0:	b160      	cbz	r0, 19ecc <rpc_at_client_request_alloc+0x20>
   19eb2:	2300      	movs	r3, #0
   19eb4:	2003      	movs	r0, #3
   19eb6:	aa01      	add	r2, sp, #4
   19eb8:	9301      	str	r3, [sp, #4]
   19eba:	f7ff ff4f 	bl	19d5c <rpc_message_alloc>
   19ebe:	b918      	cbnz	r0, 19ec8 <rpc_at_client_request_alloc+0x1c>
   19ec0:	9b01      	ldr	r3, [sp, #4]
   19ec2:	b10b      	cbz	r3, 19ec8 <rpc_at_client_request_alloc+0x1c>
   19ec4:	3308      	adds	r3, #8
   19ec6:	6023      	str	r3, [r4, #0]
   19ec8:	b002      	add	sp, #8
   19eca:	bd10      	pop	{r4, pc}
   19ecc:	200e      	movs	r0, #14
   19ece:	e7fb      	b.n	19ec8 <rpc_at_client_request_alloc+0x1c>

00019ed0 <rpc_at_client_request_send>:
   19ed0:	b148      	cbz	r0, 19ee6 <rpc_at_client_request_send+0x16>
   19ed2:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   19ed6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   19eda:	4601      	mov	r1, r0
   19edc:	2003      	movs	r0, #3
   19ede:	f841 2d08 	str.w	r2, [r1, #-8]!
   19ee2:	f7ff bf2b 	b.w	19d3c <rpc_message_send>
   19ee6:	200e      	movs	r0, #14
   19ee8:	4770      	bx	lr

00019eea <rpc_at_client_message_free>:
   19eea:	b120      	cbz	r0, 19ef6 <rpc_at_client_message_free+0xc>
   19eec:	f1a0 0108 	sub.w	r1, r0, #8
   19ef0:	2003      	movs	r0, #3
   19ef2:	f7ff bf57 	b.w	19da4 <rpc_message_free>
   19ef6:	200e      	movs	r0, #14
   19ef8:	4770      	bx	lr

00019efa <rpc_at_client_data_free>:
   19efa:	4601      	mov	r1, r0
   19efc:	b110      	cbz	r0, 19f04 <rpc_at_client_data_free+0xa>
   19efe:	2003      	movs	r0, #3
   19f00:	f7ff bf5c 	b.w	19dbc <rpc_message_data_free>
   19f04:	200e      	movs	r0, #14
   19f06:	4770      	bx	lr

00019f08 <ip_client_event_handler>:
   19f08:	f850 1b08 	ldr.w	r1, [r0], #8
   19f0c:	0c09      	lsrs	r1, r1, #16
   19f0e:	f7f9 be87 	b.w	13c20 <rpc_ip_event_handler>

00019f12 <rpc_ip_client_request_alloc>:
   19f12:	2300      	movs	r3, #0
   19f14:	b513      	push	{r0, r1, r4, lr}
   19f16:	4604      	mov	r4, r0
   19f18:	9301      	str	r3, [sp, #4]
   19f1a:	b150      	cbz	r0, 19f32 <rpc_ip_client_request_alloc+0x20>
   19f1c:	2004      	movs	r0, #4
   19f1e:	aa01      	add	r2, sp, #4
   19f20:	f7ff ff1c 	bl	19d5c <rpc_message_alloc>
   19f24:	b918      	cbnz	r0, 19f2e <rpc_ip_client_request_alloc+0x1c>
   19f26:	9b01      	ldr	r3, [sp, #4]
   19f28:	b10b      	cbz	r3, 19f2e <rpc_ip_client_request_alloc+0x1c>
   19f2a:	3308      	adds	r3, #8
   19f2c:	6023      	str	r3, [r4, #0]
   19f2e:	b002      	add	sp, #8
   19f30:	bd10      	pop	{r4, pc}
   19f32:	200e      	movs	r0, #14
   19f34:	e7fb      	b.n	19f2e <rpc_ip_client_request_alloc+0x1c>

00019f36 <rpc_ip_client_request_send>:
   19f36:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   19f3a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   19f3e:	d10a      	bne.n	19f56 <rpc_ip_client_request_send+0x20>
   19f40:	b158      	cbz	r0, 19f5a <rpc_ip_client_request_send+0x24>
   19f42:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   19f46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   19f4a:	4601      	mov	r1, r0
   19f4c:	2004      	movs	r0, #4
   19f4e:	f841 3d08 	str.w	r3, [r1, #-8]!
   19f52:	f7ff bef3 	b.w	19d3c <rpc_message_send>
   19f56:	2001      	movs	r0, #1
   19f58:	4770      	bx	lr
   19f5a:	200e      	movs	r0, #14
   19f5c:	4770      	bx	lr

00019f5e <rpc_ip_client_message_free>:
   19f5e:	b120      	cbz	r0, 19f6a <rpc_ip_client_message_free+0xc>
   19f60:	f1a0 0108 	sub.w	r1, r0, #8
   19f64:	2004      	movs	r0, #4
   19f66:	f7ff bf1d 	b.w	19da4 <rpc_message_free>
   19f6a:	200e      	movs	r0, #14
   19f6c:	4770      	bx	lr

00019f6e <rpc_ip_client_data_free>:
   19f6e:	4601      	mov	r1, r0
   19f70:	b110      	cbz	r0, 19f78 <rpc_ip_client_data_free+0xa>
   19f72:	2004      	movs	r0, #4
   19f74:	f7ff bf22 	b.w	19dbc <rpc_message_data_free>
   19f78:	200e      	movs	r0, #14
   19f7a:	4770      	bx	lr

00019f7c <dfu_client_event_handler>:
   19f7c:	f850 1b08 	ldr.w	r1, [r0], #8
   19f80:	0c09      	lsrs	r1, r1, #16
   19f82:	f7fa bd19 	b.w	149b8 <rpc_dfu_event_handler>

00019f86 <rpc_dfu_client_request_alloc>:
   19f86:	2300      	movs	r3, #0
   19f88:	b513      	push	{r0, r1, r4, lr}
   19f8a:	4604      	mov	r4, r0
   19f8c:	9301      	str	r3, [sp, #4]
   19f8e:	b150      	cbz	r0, 19fa6 <rpc_dfu_client_request_alloc+0x20>
   19f90:	2006      	movs	r0, #6
   19f92:	aa01      	add	r2, sp, #4
   19f94:	f7ff fee2 	bl	19d5c <rpc_message_alloc>
   19f98:	b918      	cbnz	r0, 19fa2 <rpc_dfu_client_request_alloc+0x1c>
   19f9a:	9b01      	ldr	r3, [sp, #4]
   19f9c:	b10b      	cbz	r3, 19fa2 <rpc_dfu_client_request_alloc+0x1c>
   19f9e:	3308      	adds	r3, #8
   19fa0:	6023      	str	r3, [r4, #0]
   19fa2:	b002      	add	sp, #8
   19fa4:	bd10      	pop	{r4, pc}
   19fa6:	200e      	movs	r0, #14
   19fa8:	e7fb      	b.n	19fa2 <rpc_dfu_client_request_alloc+0x1c>

00019faa <rpc_dfu_client_request_send>:
   19faa:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   19fae:	d10a      	bne.n	19fc6 <rpc_dfu_client_request_send+0x1c>
   19fb0:	b158      	cbz	r0, 19fca <rpc_dfu_client_request_send+0x20>
   19fb2:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   19fb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   19fba:	4601      	mov	r1, r0
   19fbc:	2006      	movs	r0, #6
   19fbe:	f841 3d08 	str.w	r3, [r1, #-8]!
   19fc2:	f7ff bebb 	b.w	19d3c <rpc_message_send>
   19fc6:	2001      	movs	r0, #1
   19fc8:	4770      	bx	lr
   19fca:	200e      	movs	r0, #14
   19fcc:	4770      	bx	lr

00019fce <rpc_dfu_client_message_free>:
   19fce:	b120      	cbz	r0, 19fda <rpc_dfu_client_message_free+0xc>
   19fd0:	f1a0 0108 	sub.w	r1, r0, #8
   19fd4:	2006      	movs	r0, #6
   19fd6:	f7ff bee5 	b.w	19da4 <rpc_message_free>
   19fda:	200e      	movs	r0, #14
   19fdc:	4770      	bx	lr

00019fde <rpc_dfu_client_data_free>:
   19fde:	4601      	mov	r1, r0
   19fe0:	b110      	cbz	r0, 19fe8 <rpc_dfu_client_data_free+0xa>
   19fe2:	2006      	movs	r0, #6
   19fe4:	f7ff beea 	b.w	19dbc <rpc_message_data_free>
   19fe8:	200e      	movs	r0, #14
   19fea:	4770      	bx	lr

00019fec <gnss_client_event_handler>:
   19fec:	f850 1b08 	ldr.w	r1, [r0], #8
   19ff0:	0c09      	lsrs	r1, r1, #16
   19ff2:	f7fa be71 	b.w	14cd8 <rpc_gnss_event_handler>

00019ff6 <rpc_gnss_client_request_alloc>:
   19ff6:	2300      	movs	r3, #0
   19ff8:	b513      	push	{r0, r1, r4, lr}
   19ffa:	4604      	mov	r4, r0
   19ffc:	9301      	str	r3, [sp, #4]
   19ffe:	b150      	cbz	r0, 1a016 <rpc_gnss_client_request_alloc+0x20>
   1a000:	2007      	movs	r0, #7
   1a002:	aa01      	add	r2, sp, #4
   1a004:	f7ff feaa 	bl	19d5c <rpc_message_alloc>
   1a008:	b918      	cbnz	r0, 1a012 <rpc_gnss_client_request_alloc+0x1c>
   1a00a:	9b01      	ldr	r3, [sp, #4]
   1a00c:	b10b      	cbz	r3, 1a012 <rpc_gnss_client_request_alloc+0x1c>
   1a00e:	3308      	adds	r3, #8
   1a010:	6023      	str	r3, [r4, #0]
   1a012:	b002      	add	sp, #8
   1a014:	bd10      	pop	{r4, pc}
   1a016:	200e      	movs	r0, #14
   1a018:	e7fb      	b.n	1a012 <rpc_gnss_client_request_alloc+0x1c>

0001a01a <rpc_gnss_client_request_send>:
   1a01a:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1a01e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1a022:	d10a      	bne.n	1a03a <rpc_gnss_client_request_send+0x20>
   1a024:	b158      	cbz	r0, 1a03e <rpc_gnss_client_request_send+0x24>
   1a026:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   1a02a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1a02e:	4601      	mov	r1, r0
   1a030:	2007      	movs	r0, #7
   1a032:	f841 3d08 	str.w	r3, [r1, #-8]!
   1a036:	f7ff be81 	b.w	19d3c <rpc_message_send>
   1a03a:	2001      	movs	r0, #1
   1a03c:	4770      	bx	lr
   1a03e:	200e      	movs	r0, #14
   1a040:	4770      	bx	lr

0001a042 <rpc_gnss_client_message_free>:
   1a042:	b120      	cbz	r0, 1a04e <rpc_gnss_client_message_free+0xc>
   1a044:	f1a0 0108 	sub.w	r1, r0, #8
   1a048:	2007      	movs	r0, #7
   1a04a:	f7ff beab 	b.w	19da4 <rpc_message_free>
   1a04e:	200e      	movs	r0, #14
   1a050:	4770      	bx	lr

0001a052 <rpc_gnss_client_data_free>:
   1a052:	4601      	mov	r1, r0
   1a054:	b110      	cbz	r0, 1a05c <rpc_gnss_client_data_free+0xa>
   1a056:	2007      	movs	r0, #7
   1a058:	f7ff beb0 	b.w	19dbc <rpc_message_data_free>
   1a05c:	200e      	movs	r0, #14
   1a05e:	4770      	bx	lr

0001a060 <rpc_gnss_serialize_utc>:
   1a060:	b1c0      	cbz	r0, 1a094 <rpc_gnss_serialize_utc+0x34>
   1a062:	b1b9      	cbz	r1, 1a094 <rpc_gnss_serialize_utc+0x34>
   1a064:	2301      	movs	r3, #1
   1a066:	700b      	strb	r3, [r1, #0]
   1a068:	2300      	movs	r3, #0
   1a06a:	704b      	strb	r3, [r1, #1]
   1a06c:	6843      	ldr	r3, [r0, #4]
   1a06e:	f8c1 3006 	str.w	r3, [r1, #6]
   1a072:	6803      	ldr	r3, [r0, #0]
   1a074:	f8c1 3002 	str.w	r3, [r1, #2]
   1a078:	7a83      	ldrb	r3, [r0, #10]
   1a07a:	730b      	strb	r3, [r1, #12]
   1a07c:	7b43      	ldrb	r3, [r0, #13]
   1a07e:	73cb      	strb	r3, [r1, #15]
   1a080:	7b03      	ldrb	r3, [r0, #12]
   1a082:	738b      	strb	r3, [r1, #14]
   1a084:	7a03      	ldrb	r3, [r0, #8]
   1a086:	728b      	strb	r3, [r1, #10]
   1a088:	7ac3      	ldrb	r3, [r0, #11]
   1a08a:	734b      	strb	r3, [r1, #13]
   1a08c:	7a43      	ldrb	r3, [r0, #9]
   1a08e:	2010      	movs	r0, #16
   1a090:	72cb      	strb	r3, [r1, #11]
   1a092:	4770      	bx	lr
   1a094:	f04f 30ff 	mov.w	r0, #4294967295
   1a098:	4770      	bx	lr

0001a09a <rpc_gnss_serialize_ephe>:
   1a09a:	2800      	cmp	r0, #0
   1a09c:	d044      	beq.n	1a128 <rpc_gnss_serialize_ephe+0x8e>
   1a09e:	2900      	cmp	r1, #0
   1a0a0:	d042      	beq.n	1a128 <rpc_gnss_serialize_ephe+0x8e>
   1a0a2:	2302      	movs	r3, #2
   1a0a4:	700b      	strb	r3, [r1, #0]
   1a0a6:	2300      	movs	r3, #0
   1a0a8:	704b      	strb	r3, [r1, #1]
   1a0aa:	68c3      	ldr	r3, [r0, #12]
   1a0ac:	f8c1 300b 	str.w	r3, [r1, #11]
   1a0b0:	8903      	ldrh	r3, [r0, #8]
   1a0b2:	f8a1 3009 	strh.w	r3, [r1, #9]
   1a0b6:	7983      	ldrb	r3, [r0, #6]
   1a0b8:	720b      	strb	r3, [r1, #8]
   1a0ba:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   1a0be:	878b      	strh	r3, [r1, #60]	; 0x3c
   1a0c0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   1a0c2:	86cb      	strh	r3, [r1, #54]	; 0x36
   1a0c4:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   1a0c8:	874b      	strh	r3, [r1, #58]	; 0x3a
   1a0ca:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   1a0cc:	868b      	strh	r3, [r1, #52]	; 0x34
   1a0ce:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   1a0d2:	87cb      	strh	r3, [r1, #62]	; 0x3e
   1a0d4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   1a0d8:	870b      	strh	r3, [r1, #56]	; 0x38
   1a0da:	8b83      	ldrh	r3, [r0, #28]
   1a0dc:	830b      	strh	r3, [r1, #24]
   1a0de:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1a0e0:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   1a0e4:	7c83      	ldrb	r3, [r0, #18]
   1a0e6:	744b      	strb	r3, [r1, #17]
   1a0e8:	7843      	ldrb	r3, [r0, #1]
   1a0ea:	70cb      	strb	r3, [r1, #3]
   1a0ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1a0ee:	62cb      	str	r3, [r1, #44]	; 0x2c
   1a0f0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1a0f2:	84cb      	strh	r3, [r1, #38]	; 0x26
   1a0f4:	8843      	ldrh	r3, [r0, #2]
   1a0f6:	808b      	strh	r3, [r1, #4]
   1a0f8:	6a03      	ldr	r3, [r0, #32]
   1a0fa:	f8c1 301a 	str.w	r3, [r1, #26]
   1a0fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1a100:	630b      	str	r3, [r1, #48]	; 0x30
   1a102:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1a104:	f8c1 301e 	str.w	r3, [r1, #30]
   1a108:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1a10a:	628b      	str	r3, [r1, #40]	; 0x28
   1a10c:	7803      	ldrb	r3, [r0, #0]
   1a10e:	708b      	strb	r3, [r1, #2]
   1a110:	7c03      	ldrb	r3, [r0, #16]
   1a112:	73cb      	strb	r3, [r1, #15]
   1a114:	8883      	ldrh	r3, [r0, #4]
   1a116:	80cb      	strh	r3, [r1, #6]
   1a118:	8a83      	ldrh	r3, [r0, #20]
   1a11a:	824b      	strh	r3, [r1, #18]
   1a11c:	7c43      	ldrb	r3, [r0, #17]
   1a11e:	740b      	strb	r3, [r1, #16]
   1a120:	6983      	ldr	r3, [r0, #24]
   1a122:	2040      	movs	r0, #64	; 0x40
   1a124:	614b      	str	r3, [r1, #20]
   1a126:	4770      	bx	lr
   1a128:	f04f 30ff 	mov.w	r0, #4294967295
   1a12c:	4770      	bx	lr

0001a12e <rpc_gnss_serialize_alm>:
   1a12e:	b340      	cbz	r0, 1a182 <rpc_gnss_serialize_alm+0x54>
   1a130:	b339      	cbz	r1, 1a182 <rpc_gnss_serialize_alm+0x54>
   1a132:	2303      	movs	r3, #3
   1a134:	700b      	strb	r3, [r1, #0]
   1a136:	2300      	movs	r3, #0
   1a138:	704b      	strb	r3, [r1, #1]
   1a13a:	8b83      	ldrh	r3, [r0, #28]
   1a13c:	f8a1 301d 	strh.w	r3, [r1, #29]
   1a140:	8bc3      	ldrh	r3, [r0, #30]
   1a142:	f8a1 301f 	strh.w	r3, [r1, #31]
   1a146:	88c3      	ldrh	r3, [r0, #6]
   1a148:	810b      	strh	r3, [r1, #8]
   1a14a:	8883      	ldrh	r3, [r0, #4]
   1a14c:	80cb      	strh	r3, [r1, #6]
   1a14e:	78c3      	ldrb	r3, [r0, #3]
   1a150:	714b      	strb	r3, [r1, #5]
   1a152:	6983      	ldr	r3, [r0, #24]
   1a154:	f8c1 3019 	str.w	r3, [r1, #25]
   1a158:	6903      	ldr	r3, [r0, #16]
   1a15a:	f8c1 3011 	str.w	r3, [r1, #17]
   1a15e:	8903      	ldrh	r3, [r0, #8]
   1a160:	814b      	strh	r3, [r1, #10]
   1a162:	68c3      	ldr	r3, [r0, #12]
   1a164:	f8c1 300d 	str.w	r3, [r1, #13]
   1a168:	7a83      	ldrb	r3, [r0, #10]
   1a16a:	730b      	strb	r3, [r1, #12]
   1a16c:	7803      	ldrb	r3, [r0, #0]
   1a16e:	708b      	strb	r3, [r1, #2]
   1a170:	7883      	ldrb	r3, [r0, #2]
   1a172:	710b      	strb	r3, [r1, #4]
   1a174:	6943      	ldr	r3, [r0, #20]
   1a176:	f8c1 3015 	str.w	r3, [r1, #21]
   1a17a:	7843      	ldrb	r3, [r0, #1]
   1a17c:	2021      	movs	r0, #33	; 0x21
   1a17e:	70cb      	strb	r3, [r1, #3]
   1a180:	4770      	bx	lr
   1a182:	f04f 30ff 	mov.w	r0, #4294967295
   1a186:	4770      	bx	lr

0001a188 <rpc_gnss_serialize_klob>:
   1a188:	b1b0      	cbz	r0, 1a1b8 <rpc_gnss_serialize_klob+0x30>
   1a18a:	b1a9      	cbz	r1, 1a1b8 <rpc_gnss_serialize_klob+0x30>
   1a18c:	2304      	movs	r3, #4
   1a18e:	700b      	strb	r3, [r1, #0]
   1a190:	2300      	movs	r3, #0
   1a192:	704b      	strb	r3, [r1, #1]
   1a194:	7803      	ldrb	r3, [r0, #0]
   1a196:	708b      	strb	r3, [r1, #2]
   1a198:	7843      	ldrb	r3, [r0, #1]
   1a19a:	70cb      	strb	r3, [r1, #3]
   1a19c:	7883      	ldrb	r3, [r0, #2]
   1a19e:	710b      	strb	r3, [r1, #4]
   1a1a0:	78c3      	ldrb	r3, [r0, #3]
   1a1a2:	714b      	strb	r3, [r1, #5]
   1a1a4:	7903      	ldrb	r3, [r0, #4]
   1a1a6:	718b      	strb	r3, [r1, #6]
   1a1a8:	7943      	ldrb	r3, [r0, #5]
   1a1aa:	71cb      	strb	r3, [r1, #7]
   1a1ac:	7983      	ldrb	r3, [r0, #6]
   1a1ae:	720b      	strb	r3, [r1, #8]
   1a1b0:	79c3      	ldrb	r3, [r0, #7]
   1a1b2:	200a      	movs	r0, #10
   1a1b4:	724b      	strb	r3, [r1, #9]
   1a1b6:	4770      	bx	lr
   1a1b8:	f04f 30ff 	mov.w	r0, #4294967295
   1a1bc:	4770      	bx	lr

0001a1be <rpc_gnss_serialize_nequick>:
   1a1be:	b180      	cbz	r0, 1a1e2 <rpc_gnss_serialize_nequick+0x24>
   1a1c0:	b179      	cbz	r1, 1a1e2 <rpc_gnss_serialize_nequick+0x24>
   1a1c2:	2305      	movs	r3, #5
   1a1c4:	700b      	strb	r3, [r1, #0]
   1a1c6:	2300      	movs	r3, #0
   1a1c8:	704b      	strb	r3, [r1, #1]
   1a1ca:	8803      	ldrh	r3, [r0, #0]
   1a1cc:	804b      	strh	r3, [r1, #2]
   1a1ce:	8843      	ldrh	r3, [r0, #2]
   1a1d0:	808b      	strh	r3, [r1, #4]
   1a1d2:	8883      	ldrh	r3, [r0, #4]
   1a1d4:	80cb      	strh	r3, [r1, #6]
   1a1d6:	7983      	ldrb	r3, [r0, #6]
   1a1d8:	720b      	strb	r3, [r1, #8]
   1a1da:	79c3      	ldrb	r3, [r0, #7]
   1a1dc:	200a      	movs	r0, #10
   1a1de:	724b      	strb	r3, [r1, #9]
   1a1e0:	4770      	bx	lr
   1a1e2:	f04f 30ff 	mov.w	r0, #4294967295
   1a1e6:	4770      	bx	lr

0001a1e8 <rpc_gnss_serialize_time_and_sv_tow>:
   1a1e8:	b570      	push	{r4, r5, r6, lr}
   1a1ea:	b1e8      	cbz	r0, 1a228 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   1a1ec:	b1e1      	cbz	r1, 1a228 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   1a1ee:	2206      	movs	r2, #6
   1a1f0:	2300      	movs	r3, #0
   1a1f2:	700a      	strb	r2, [r1, #0]
   1a1f4:	8802      	ldrh	r2, [r0, #0]
   1a1f6:	704b      	strb	r3, [r1, #1]
   1a1f8:	804a      	strh	r2, [r1, #2]
   1a1fa:	68c2      	ldr	r2, [r0, #12]
   1a1fc:	f101 0410 	add.w	r4, r1, #16
   1a200:	f8c1 200a 	str.w	r2, [r1, #10]
   1a204:	8902      	ldrh	r2, [r0, #8]
   1a206:	810a      	strh	r2, [r1, #8]
   1a208:	6842      	ldr	r2, [r0, #4]
   1a20a:	604a      	str	r2, [r1, #4]
   1a20c:	8a06      	ldrh	r6, [r0, #16]
   1a20e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1a212:	188d      	adds	r5, r1, r2
   1a214:	81ee      	strh	r6, [r5, #14]
   1a216:	7c85      	ldrb	r5, [r0, #18]
   1a218:	3301      	adds	r3, #1
   1a21a:	2b20      	cmp	r3, #32
   1a21c:	54a5      	strb	r5, [r4, r2]
   1a21e:	f100 0004 	add.w	r0, r0, #4
   1a222:	d1f3      	bne.n	1a20c <rpc_gnss_serialize_time_and_sv_tow+0x24>
   1a224:	206e      	movs	r0, #110	; 0x6e
   1a226:	bd70      	pop	{r4, r5, r6, pc}
   1a228:	f04f 30ff 	mov.w	r0, #4294967295
   1a22c:	e7fb      	b.n	1a226 <rpc_gnss_serialize_time_and_sv_tow+0x3e>

0001a22e <rpc_gnss_serialize_location>:
   1a22e:	b1c0      	cbz	r0, 1a262 <rpc_gnss_serialize_location+0x34>
   1a230:	b1b9      	cbz	r1, 1a262 <rpc_gnss_serialize_location+0x34>
   1a232:	2307      	movs	r3, #7
   1a234:	700b      	strb	r3, [r1, #0]
   1a236:	2300      	movs	r3, #0
   1a238:	704b      	strb	r3, [r1, #1]
   1a23a:	8903      	ldrh	r3, [r0, #8]
   1a23c:	814b      	strh	r3, [r1, #10]
   1a23e:	7b83      	ldrb	r3, [r0, #14]
   1a240:	740b      	strb	r3, [r1, #16]
   1a242:	6803      	ldr	r3, [r0, #0]
   1a244:	f8c1 3002 	str.w	r3, [r1, #2]
   1a248:	6843      	ldr	r3, [r0, #4]
   1a24a:	f8c1 3006 	str.w	r3, [r1, #6]
   1a24e:	7b03      	ldrb	r3, [r0, #12]
   1a250:	738b      	strb	r3, [r1, #14]
   1a252:	7b43      	ldrb	r3, [r0, #13]
   1a254:	73cb      	strb	r3, [r1, #15]
   1a256:	7a83      	ldrb	r3, [r0, #10]
   1a258:	730b      	strb	r3, [r1, #12]
   1a25a:	7ac3      	ldrb	r3, [r0, #11]
   1a25c:	2011      	movs	r0, #17
   1a25e:	734b      	strb	r3, [r1, #13]
   1a260:	4770      	bx	lr
   1a262:	f04f 30ff 	mov.w	r0, #4294967295
   1a266:	4770      	bx	lr

0001a268 <rpc_gnss_serialize_integrity>:
   1a268:	b148      	cbz	r0, 1a27e <rpc_gnss_serialize_integrity+0x16>
   1a26a:	b141      	cbz	r1, 1a27e <rpc_gnss_serialize_integrity+0x16>
   1a26c:	2308      	movs	r3, #8
   1a26e:	700b      	strb	r3, [r1, #0]
   1a270:	2300      	movs	r3, #0
   1a272:	704b      	strb	r3, [r1, #1]
   1a274:	6803      	ldr	r3, [r0, #0]
   1a276:	2006      	movs	r0, #6
   1a278:	f8c1 3002 	str.w	r3, [r1, #2]
   1a27c:	4770      	bx	lr
   1a27e:	f04f 30ff 	mov.w	r0, #4294967295
   1a282:	4770      	bx	lr

0001a284 <packet_handler_alloc_and_init>:
   1a284:	b538      	push	{r3, r4, r5, lr}
   1a286:	4604      	mov	r4, r0
   1a288:	4608      	mov	r0, r1
   1a28a:	4611      	mov	r1, r2
   1a28c:	4622      	mov	r2, r4
   1a28e:	f7fb fe5f 	bl	15f50 <packet_handler_create>
   1a292:	61e0      	str	r0, [r4, #28]
   1a294:	b158      	cbz	r0, 1a2ae <packet_handler_alloc_and_init+0x2a>
   1a296:	6803      	ldr	r3, [r0, #0]
   1a298:	681b      	ldr	r3, [r3, #0]
   1a29a:	4798      	blx	r3
   1a29c:	4605      	mov	r5, r0
   1a29e:	b120      	cbz	r0, 1a2aa <packet_handler_alloc_and_init+0x26>
   1a2a0:	69e0      	ldr	r0, [r4, #28]
   1a2a2:	f000 feb6 	bl	1b012 <packet_handler_delete>
   1a2a6:	2300      	movs	r3, #0
   1a2a8:	61e3      	str	r3, [r4, #28]
   1a2aa:	4628      	mov	r0, r5
   1a2ac:	bd38      	pop	{r3, r4, r5, pc}
   1a2ae:	250c      	movs	r5, #12
   1a2b0:	e7fb      	b.n	1a2aa <packet_handler_alloc_and_init+0x26>

0001a2b2 <socket_free>:
   1a2b2:	b510      	push	{r4, lr}
   1a2b4:	4604      	mov	r4, r0
   1a2b6:	69c0      	ldr	r0, [r0, #28]
   1a2b8:	b108      	cbz	r0, 1a2be <socket_free+0xc>
   1a2ba:	f000 feaa 	bl	1b012 <packet_handler_delete>
   1a2be:	4620      	mov	r0, r4
   1a2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a2c4:	2228      	movs	r2, #40	; 0x28
   1a2c6:	2100      	movs	r1, #0
   1a2c8:	f001 bbed 	b.w	1baa6 <memset>

0001a2cc <interface_socket_event_get>:
   1a2cc:	b508      	push	{r3, lr}
   1a2ce:	b169      	cbz	r1, 1a2ec <interface_socket_event_get+0x20>
   1a2d0:	f7f8 fee0 	bl	13094 <interface_socket_from_handle_get>
   1a2d4:	b158      	cbz	r0, 1a2ee <interface_socket_event_get+0x22>
   1a2d6:	6803      	ldr	r3, [r0, #0]
   1a2d8:	0c1b      	lsrs	r3, r3, #16
   1a2da:	f003 020a 	and.w	r2, r3, #10
   1a2de:	2a0a      	cmp	r2, #10
   1a2e0:	bf14      	ite	ne
   1a2e2:	f003 030f 	andne.w	r3, r3, #15
   1a2e6:	f003 030d 	andeq.w	r3, r3, #13
   1a2ea:	600b      	str	r3, [r1, #0]
   1a2ec:	bd08      	pop	{r3, pc}
   1a2ee:	2310      	movs	r3, #16
   1a2f0:	e7fb      	b.n	1a2ea <interface_socket_event_get+0x1e>

0001a2f2 <ip_recvd_packet_free_cb>:
   1a2f2:	b510      	push	{r4, lr}
   1a2f4:	4604      	mov	r4, r0
   1a2f6:	6800      	ldr	r0, [r0, #0]
   1a2f8:	f7ff fe39 	bl	19f6e <rpc_ip_client_data_free>
   1a2fc:	68a0      	ldr	r0, [r4, #8]
   1a2fe:	b118      	cbz	r0, 1a308 <ip_recvd_packet_free_cb+0x16>
   1a300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a304:	f7f7 b988 	b.w	11618 <nrf_modem_os_free>
   1a308:	bd10      	pop	{r4, pc}

0001a30a <ip_addr_parse>:
   1a30a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a30c:	684d      	ldr	r5, [r1, #4]
   1a30e:	e9dd 7606 	ldrd	r7, r6, [sp, #24]
   1a312:	4285      	cmp	r5, r0
   1a314:	d11a      	bne.n	1a34c <ip_addr_parse+0x42>
   1a316:	780c      	ldrb	r4, [r1, #0]
   1a318:	4294      	cmp	r4, r2
   1a31a:	d119      	bne.n	1a350 <ip_addr_parse+0x46>
   1a31c:	2d02      	cmp	r5, #2
   1a31e:	d10b      	bne.n	1a338 <ip_addr_parse+0x2e>
   1a320:	2c10      	cmp	r4, #16
   1a322:	d115      	bne.n	1a350 <ip_addr_parse+0x46>
   1a324:	890a      	ldrh	r2, [r1, #8]
   1a326:	310c      	adds	r1, #12
   1a328:	803a      	strh	r2, [r7, #0]
   1a32a:	2204      	movs	r2, #4
   1a32c:	801a      	strh	r2, [r3, #0]
   1a32e:	4630      	mov	r0, r6
   1a330:	f001 fbac 	bl	1ba8c <memcpy>
   1a334:	2000      	movs	r0, #0
   1a336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a338:	2d0a      	cmp	r5, #10
   1a33a:	d109      	bne.n	1a350 <ip_addr_parse+0x46>
   1a33c:	2c24      	cmp	r4, #36	; 0x24
   1a33e:	d107      	bne.n	1a350 <ip_addr_parse+0x46>
   1a340:	890a      	ldrh	r2, [r1, #8]
   1a342:	803a      	strh	r2, [r7, #0]
   1a344:	2210      	movs	r2, #16
   1a346:	801a      	strh	r2, [r3, #0]
   1a348:	4411      	add	r1, r2
   1a34a:	e7f0      	b.n	1a32e <ip_addr_parse+0x24>
   1a34c:	202f      	movs	r0, #47	; 0x2f
   1a34e:	e7f2      	b.n	1a336 <ip_addr_parse+0x2c>
   1a350:	2016      	movs	r0, #22
   1a352:	e7f0      	b.n	1a336 <ip_addr_parse+0x2c>

0001a354 <ip_interface_request_create>:
   1a354:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a356:	4614      	mov	r4, r2
   1a358:	2200      	movs	r2, #0
   1a35a:	4606      	mov	r6, r0
   1a35c:	460d      	mov	r5, r1
   1a35e:	a801      	add	r0, sp, #4
   1a360:	4619      	mov	r1, r3
   1a362:	9201      	str	r2, [sp, #4]
   1a364:	f7ff fdd5 	bl	19f12 <rpc_ip_client_request_alloc>
   1a368:	9b01      	ldr	r3, [sp, #4]
   1a36a:	b940      	cbnz	r0, 1a37e <ip_interface_request_create+0x2a>
   1a36c:	2208      	movs	r2, #8
   1a36e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   1a372:	60dc      	str	r4, [r3, #12]
   1a374:	611d      	str	r5, [r3, #16]
   1a376:	721a      	strb	r2, [r3, #8]
   1a378:	7258      	strb	r0, [r3, #9]
   1a37a:	7298      	strb	r0, [r3, #10]
   1a37c:	72d8      	strb	r0, [r3, #11]
   1a37e:	4618      	mov	r0, r3
   1a380:	b002      	add	sp, #8
   1a382:	bd70      	pop	{r4, r5, r6, pc}

0001a384 <ip_interface_request_send>:
   1a384:	b570      	push	{r4, r5, r6, lr}
   1a386:	460c      	mov	r4, r1
   1a388:	4605      	mov	r5, r0
   1a38a:	4611      	mov	r1, r2
   1a38c:	4620      	mov	r0, r4
   1a38e:	461e      	mov	r6, r3
   1a390:	f7ff fdd1 	bl	19f36 <rpc_ip_client_request_send>
   1a394:	b140      	cbz	r0, 1a3a8 <ip_interface_request_send+0x24>
   1a396:	6820      	ldr	r0, [r4, #0]
   1a398:	b108      	cbz	r0, 1a39e <ip_interface_request_send+0x1a>
   1a39a:	f7ff fde8 	bl	19f6e <rpc_ip_client_data_free>
   1a39e:	4620      	mov	r0, r4
   1a3a0:	f7ff fddd 	bl	19f5e <rpc_ip_client_message_free>
   1a3a4:	2023      	movs	r0, #35	; 0x23
   1a3a6:	602e      	str	r6, [r5, #0]
   1a3a8:	bd70      	pop	{r4, r5, r6, pc}

0001a3aa <ip_interface_wait>:
   1a3aa:	b538      	push	{r3, r4, r5, lr}
   1a3ac:	4605      	mov	r5, r0
   1a3ae:	f7f8 fe33 	bl	13018 <interface_socket_wait>
   1a3b2:	4604      	mov	r4, r0
   1a3b4:	b938      	cbnz	r0, 1a3c6 <ip_interface_wait+0x1c>
   1a3b6:	4628      	mov	r0, r5
   1a3b8:	f7f8 fe6c 	bl	13094 <interface_socket_from_handle_get>
   1a3bc:	b118      	cbz	r0, 1a3c6 <ip_interface_wait+0x1c>
   1a3be:	6844      	ldr	r4, [r0, #4]
   1a3c0:	b10c      	cbz	r4, 1a3c6 <ip_interface_wait+0x1c>
   1a3c2:	2300      	movs	r3, #0
   1a3c4:	6043      	str	r3, [r0, #4]
   1a3c6:	4620      	mov	r0, r4
   1a3c8:	bd38      	pop	{r3, r4, r5, pc}

0001a3ca <ip_interface_recvfrom>:
   1a3ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3ce:	b087      	sub	sp, #28
   1a3d0:	4681      	mov	r9, r0
   1a3d2:	461e      	mov	r6, r3
   1a3d4:	4690      	mov	r8, r2
   1a3d6:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1a3d8:	9101      	str	r1, [sp, #4]
   1a3da:	2a00      	cmp	r2, #0
   1a3dc:	f000 80ee 	beq.w	1a5bc <ip_interface_recvfrom+0x1f2>
   1a3e0:	b11b      	cbz	r3, 1a3ea <ip_interface_recvfrom+0x20>
   1a3e2:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   1a3e6:	f000 80eb 	beq.w	1a5c0 <ip_interface_recvfrom+0x1f6>
   1a3ea:	4648      	mov	r0, r9
   1a3ec:	f7f8 fe52 	bl	13094 <interface_socket_from_handle_get>
   1a3f0:	4604      	mov	r4, r0
   1a3f2:	2800      	cmp	r0, #0
   1a3f4:	f000 80e6 	beq.w	1a5c4 <ip_interface_recvfrom+0x1fa>
   1a3f8:	6803      	ldr	r3, [r0, #0]
   1a3fa:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   1a3fe:	d10f      	bne.n	1a420 <ip_interface_recvfrom+0x56>
   1a400:	6802      	ldr	r2, [r0, #0]
   1a402:	b292      	uxth	r2, r2
   1a404:	2a06      	cmp	r2, #6
   1a406:	f000 8097 	beq.w	1a538 <ip_interface_recvfrom+0x16e>
   1a40a:	6802      	ldr	r2, [r0, #0]
   1a40c:	461e      	mov	r6, r3
   1a40e:	b292      	uxth	r2, r2
   1a410:	2a07      	cmp	r2, #7
   1a412:	469a      	mov	sl, r3
   1a414:	f000 8092 	beq.w	1a53c <ip_interface_recvfrom+0x172>
   1a418:	2239      	movs	r2, #57	; 0x39
   1a41a:	f04f 35ff 	mov.w	r5, #4294967295
   1a41e:	e07b      	b.n	1a518 <ip_interface_recvfrom+0x14e>
   1a420:	07b5      	lsls	r5, r6, #30
   1a422:	bf48      	it	mi
   1a424:	f04f 0a00 	movmi.w	sl, #0
   1a428:	f04f 35ff 	mov.w	r5, #4294967295
   1a42c:	bf58      	it	pl
   1a42e:	6803      	ldrpl	r3, [r0, #0]
   1a430:	f006 0b10 	and.w	fp, r6, #16
   1a434:	bf5c      	itt	pl
   1a436:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   1a43a:	f3c3 7a00 	ubfxpl	sl, r3, #28, #1
   1a43e:	6822      	ldr	r2, [r4, #0]
   1a440:	03d0      	lsls	r0, r2, #15
   1a442:	d532      	bpl.n	1a4aa <ip_interface_recvfrom+0xe0>
   1a444:	6822      	ldr	r2, [r4, #0]
   1a446:	69e0      	ldr	r0, [r4, #28]
   1a448:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   1a44c:	6022      	str	r2, [r4, #0]
   1a44e:	6802      	ldr	r2, [r0, #0]
   1a450:	68d2      	ldr	r2, [r2, #12]
   1a452:	4790      	blx	r2
   1a454:	1c41      	adds	r1, r0, #1
   1a456:	4605      	mov	r5, r0
   1a458:	d00d      	beq.n	1a476 <ip_interface_recvfrom+0xac>
   1a45a:	4580      	cmp	r8, r0
   1a45c:	dd08      	ble.n	1a470 <ip_interface_recvfrom+0xa6>
   1a45e:	6923      	ldr	r3, [r4, #16]
   1a460:	2b01      	cmp	r3, #1
   1a462:	d105      	bne.n	1a470 <ip_interface_recvfrom+0xa6>
   1a464:	f1bb 0f00 	cmp.w	fp, #0
   1a468:	d064      	beq.n	1a534 <ip_interface_recvfrom+0x16a>
   1a46a:	6823      	ldr	r3, [r4, #0]
   1a46c:	00da      	lsls	r2, r3, #3
   1a46e:	d520      	bpl.n	1a4b2 <ip_interface_recvfrom+0xe8>
   1a470:	f04f 0a00 	mov.w	sl, #0
   1a474:	e03b      	b.n	1a4ee <ip_interface_recvfrom+0x124>
   1a476:	6822      	ldr	r2, [r4, #0]
   1a478:	0313      	lsls	r3, r2, #12
   1a47a:	d516      	bpl.n	1a4aa <ip_interface_recvfrom+0xe0>
   1a47c:	6822      	ldr	r2, [r4, #0]
   1a47e:	b292      	uxth	r2, r2
   1a480:	2a0d      	cmp	r2, #13
   1a482:	d012      	beq.n	1a4aa <ip_interface_recvfrom+0xe0>
   1a484:	6923      	ldr	r3, [r4, #16]
   1a486:	2b01      	cmp	r3, #1
   1a488:	f000 80a4 	beq.w	1a5d4 <ip_interface_recvfrom+0x20a>
   1a48c:	f04f 0a00 	mov.w	sl, #0
   1a490:	2239      	movs	r2, #57	; 0x39
   1a492:	6823      	ldr	r3, [r4, #0]
   1a494:	0c1b      	lsrs	r3, r3, #16
   1a496:	041b      	lsls	r3, r3, #16
   1a498:	f043 030d 	orr.w	r3, r3, #13
   1a49c:	6023      	str	r3, [r4, #0]
   1a49e:	6823      	ldr	r3, [r4, #0]
   1a4a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1a4a4:	6023      	str	r3, [r4, #0]
   1a4a6:	2600      	movs	r6, #0
   1a4a8:	e036      	b.n	1a518 <ip_interface_recvfrom+0x14e>
   1a4aa:	f1ba 0f00 	cmp.w	sl, #0
   1a4ae:	f000 8092 	beq.w	1a5d6 <ip_interface_recvfrom+0x20c>
   1a4b2:	6a23      	ldr	r3, [r4, #32]
   1a4b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a4b8:	2b00      	cmp	r3, #0
   1a4ba:	bf08      	it	eq
   1a4bc:	f04f 33ff 	moveq.w	r3, #4294967295
   1a4c0:	4611      	mov	r1, r2
   1a4c2:	9302      	str	r3, [sp, #8]
   1a4c4:	4648      	mov	r0, r9
   1a4c6:	ab02      	add	r3, sp, #8
   1a4c8:	f7ff ff6f 	bl	1a3aa <ip_interface_wait>
   1a4cc:	4602      	mov	r2, r0
   1a4ce:	2800      	cmp	r0, #0
   1a4d0:	d07a      	beq.n	1a5c8 <ip_interface_recvfrom+0x1fe>
   1a4d2:	6823      	ldr	r3, [r4, #0]
   1a4d4:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   1a4d8:	d079      	beq.n	1a5ce <ip_interface_recvfrom+0x204>
   1a4da:	6823      	ldr	r3, [r4, #0]
   1a4dc:	b29b      	uxth	r3, r3
   1a4de:	2b0d      	cmp	r3, #13
   1a4e0:	d075      	beq.n	1a5ce <ip_interface_recvfrom+0x204>
   1a4e2:	6923      	ldr	r3, [r4, #16]
   1a4e4:	1e5d      	subs	r5, r3, #1
   1a4e6:	f1d5 0a00 	rsbs	sl, r5, #0
   1a4ea:	eb4a 0a05 	adc.w	sl, sl, r5
   1a4ee:	b107      	cbz	r7, 1a4f2 <ip_interface_recvfrom+0x128>
   1a4f0:	683f      	ldr	r7, [r7, #0]
   1a4f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1a4f4:	69e0      	ldr	r0, [r4, #28]
   1a4f6:	e9cd 2704 	strd	r2, r7, [sp, #16]
   1a4fa:	9b01      	ldr	r3, [sp, #4]
   1a4fc:	6802      	ldr	r2, [r0, #0]
   1a4fe:	e9cd 3802 	strd	r3, r8, [sp, #8]
   1a502:	6895      	ldr	r5, [r2, #8]
   1a504:	a902      	add	r1, sp, #8
   1a506:	4632      	mov	r2, r6
   1a508:	47a8      	blx	r5
   1a50a:	4605      	mov	r5, r0
   1a50c:	1c68      	adds	r0, r5, #1
   1a50e:	bf0b      	itete	eq
   1a510:	2600      	moveq	r6, #0
   1a512:	2601      	movne	r6, #1
   1a514:	2223      	moveq	r2, #35	; 0x23
   1a516:	2200      	movne	r2, #0
   1a518:	69e0      	ldr	r0, [r4, #28]
   1a51a:	9201      	str	r2, [sp, #4]
   1a51c:	6801      	ldr	r1, [r0, #0]
   1a51e:	68c9      	ldr	r1, [r1, #12]
   1a520:	4788      	blx	r1
   1a522:	3001      	adds	r0, #1
   1a524:	9a01      	ldr	r2, [sp, #4]
   1a526:	d00b      	beq.n	1a540 <ip_interface_recvfrom+0x176>
   1a528:	6823      	ldr	r3, [r4, #0]
   1a52a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1a52e:	6023      	str	r3, [r4, #0]
   1a530:	b1aa      	cbz	r2, 1a55e <ip_interface_recvfrom+0x194>
   1a532:	e032      	b.n	1a59a <ip_interface_recvfrom+0x1d0>
   1a534:	46da      	mov	sl, fp
   1a536:	e7da      	b.n	1a4ee <ip_interface_recvfrom+0x124>
   1a538:	461e      	mov	r6, r3
   1a53a:	469a      	mov	sl, r3
   1a53c:	2209      	movs	r2, #9
   1a53e:	e76c      	b.n	1a41a <ip_interface_recvfrom+0x50>
   1a540:	f1ba 0f00 	cmp.w	sl, #0
   1a544:	d00f      	beq.n	1a566 <ip_interface_recvfrom+0x19c>
   1a546:	b97e      	cbnz	r6, 1a568 <ip_interface_recvfrom+0x19e>
   1a548:	4635      	mov	r5, r6
   1a54a:	6823      	ldr	r3, [r4, #0]
   1a54c:	0c1b      	lsrs	r3, r3, #16
   1a54e:	041b      	lsls	r3, r3, #16
   1a550:	f043 030d 	orr.w	r3, r3, #13
   1a554:	6023      	str	r3, [r4, #0]
   1a556:	6823      	ldr	r3, [r4, #0]
   1a558:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1a55c:	6023      	str	r3, [r4, #0]
   1a55e:	4628      	mov	r0, r5
   1a560:	b007      	add	sp, #28
   1a562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a566:	b14e      	cbz	r6, 1a57c <ip_interface_recvfrom+0x1b2>
   1a568:	6823      	ldr	r3, [r4, #0]
   1a56a:	0319      	lsls	r1, r3, #12
   1a56c:	d506      	bpl.n	1a57c <ip_interface_recvfrom+0x1b2>
   1a56e:	6823      	ldr	r3, [r4, #0]
   1a570:	b29b      	uxth	r3, r3
   1a572:	2b0d      	cmp	r3, #13
   1a574:	d002      	beq.n	1a57c <ip_interface_recvfrom+0x1b2>
   1a576:	6923      	ldr	r3, [r4, #16]
   1a578:	2b01      	cmp	r3, #1
   1a57a:	d0d5      	beq.n	1a528 <ip_interface_recvfrom+0x15e>
   1a57c:	6823      	ldr	r3, [r4, #0]
   1a57e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1a582:	6823      	ldr	r3, [r4, #0]
   1a584:	d00f      	beq.n	1a5a6 <ip_interface_recvfrom+0x1dc>
   1a586:	2269      	movs	r2, #105	; 0x69
   1a588:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   1a58c:	6023      	str	r3, [r4, #0]
   1a58e:	6823      	ldr	r3, [r4, #0]
   1a590:	0c1b      	lsrs	r3, r3, #16
   1a592:	041b      	lsls	r3, r3, #16
   1a594:	f043 030d 	orr.w	r3, r3, #13
   1a598:	6023      	str	r3, [r4, #0]
   1a59a:	4610      	mov	r0, r2
   1a59c:	f7f6 fe98 	bl	112d0 <nrf_modem_os_errno_set>
   1a5a0:	f04f 35ff 	mov.w	r5, #4294967295
   1a5a4:	e7db      	b.n	1a55e <ip_interface_recvfrom+0x194>
   1a5a6:	031b      	lsls	r3, r3, #12
   1a5a8:	d5c2      	bpl.n	1a530 <ip_interface_recvfrom+0x166>
   1a5aa:	6823      	ldr	r3, [r4, #0]
   1a5ac:	b29b      	uxth	r3, r3
   1a5ae:	2b0d      	cmp	r3, #13
   1a5b0:	d1be      	bne.n	1a530 <ip_interface_recvfrom+0x166>
   1a5b2:	68a3      	ldr	r3, [r4, #8]
   1a5b4:	2b00      	cmp	r3, #0
   1a5b6:	d0bb      	beq.n	1a530 <ip_interface_recvfrom+0x166>
   1a5b8:	68a2      	ldr	r2, [r4, #8]
   1a5ba:	e7b9      	b.n	1a530 <ip_interface_recvfrom+0x166>
   1a5bc:	2216      	movs	r2, #22
   1a5be:	e7ec      	b.n	1a59a <ip_interface_recvfrom+0x1d0>
   1a5c0:	222d      	movs	r2, #45	; 0x2d
   1a5c2:	e7ea      	b.n	1a59a <ip_interface_recvfrom+0x1d0>
   1a5c4:	2209      	movs	r2, #9
   1a5c6:	e7e8      	b.n	1a59a <ip_interface_recvfrom+0x1d0>
   1a5c8:	f04f 0a01 	mov.w	sl, #1
   1a5cc:	e737      	b.n	1a43e <ip_interface_recvfrom+0x74>
   1a5ce:	2600      	movs	r6, #0
   1a5d0:	46b2      	mov	sl, r6
   1a5d2:	e7a1      	b.n	1a518 <ip_interface_recvfrom+0x14e>
   1a5d4:	469a      	mov	sl, r3
   1a5d6:	2223      	movs	r2, #35	; 0x23
   1a5d8:	e765      	b.n	1a4a6 <ip_interface_recvfrom+0xdc>

0001a5da <ip_interface_connect>:
   1a5da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a5de:	4606      	mov	r6, r0
   1a5e0:	4691      	mov	r9, r2
   1a5e2:	460f      	mov	r7, r1
   1a5e4:	b085      	sub	sp, #20
   1a5e6:	2900      	cmp	r1, #0
   1a5e8:	d065      	beq.n	1a6b6 <ip_interface_connect+0xdc>
   1a5ea:	2a00      	cmp	r2, #0
   1a5ec:	d063      	beq.n	1a6b6 <ip_interface_connect+0xdc>
   1a5ee:	f7f8 fd51 	bl	13094 <interface_socket_from_handle_get>
   1a5f2:	4604      	mov	r4, r0
   1a5f4:	2800      	cmp	r0, #0
   1a5f6:	d060      	beq.n	1a6ba <ip_interface_connect+0xe0>
   1a5f8:	6803      	ldr	r3, [r0, #0]
   1a5fa:	b29b      	uxth	r3, r3
   1a5fc:	2b02      	cmp	r3, #2
   1a5fe:	d003      	beq.n	1a608 <ip_interface_connect+0x2e>
   1a600:	6803      	ldr	r3, [r0, #0]
   1a602:	b29b      	uxth	r3, r3
   1a604:	2b04      	cmp	r3, #4
   1a606:	d14f      	bne.n	1a6a8 <ip_interface_connect+0xce>
   1a608:	6823      	ldr	r3, [r4, #0]
   1a60a:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   1a60e:	d156      	bne.n	1a6be <ip_interface_connect+0xe4>
   1a610:	f247 0202 	movw	r2, #28674	; 0x7002
   1a614:	4630      	mov	r0, r6
   1a616:	69a1      	ldr	r1, [r4, #24]
   1a618:	f7ff fe9c 	bl	1a354 <ip_interface_request_create>
   1a61c:	4605      	mov	r5, r0
   1a61e:	2800      	cmp	r0, #0
   1a620:	d04f      	beq.n	1a6c2 <ip_interface_connect+0xe8>
   1a622:	f247 0802 	movw	r8, #28674	; 0x7002
   1a626:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   1a62a:	60c3      	str	r3, [r0, #12]
   1a62c:	69a3      	ldr	r3, [r4, #24]
   1a62e:	464a      	mov	r2, r9
   1a630:	6103      	str	r3, [r0, #16]
   1a632:	6883      	ldr	r3, [r0, #8]
   1a634:	4639      	mov	r1, r7
   1a636:	3304      	adds	r3, #4
   1a638:	6083      	str	r3, [r0, #8]
   1a63a:	f100 0318 	add.w	r3, r0, #24
   1a63e:	9301      	str	r3, [sp, #4]
   1a640:	f100 0314 	add.w	r3, r0, #20
   1a644:	9300      	str	r3, [sp, #0]
   1a646:	f100 0316 	add.w	r3, r0, #22
   1a64a:	68e0      	ldr	r0, [r4, #12]
   1a64c:	f7ff fe5d 	bl	1a30a <ip_addr_parse>
   1a650:	bb18      	cbnz	r0, 1a69a <ip_interface_connect+0xc0>
   1a652:	68ab      	ldr	r3, [r5, #8]
   1a654:	8aea      	ldrh	r2, [r5, #22]
   1a656:	6827      	ldr	r7, [r4, #0]
   1a658:	4413      	add	r3, r2
   1a65a:	60ab      	str	r3, [r5, #8]
   1a65c:	6823      	ldr	r3, [r4, #0]
   1a65e:	4642      	mov	r2, r8
   1a660:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1a664:	6023      	str	r3, [r4, #0]
   1a666:	4629      	mov	r1, r5
   1a668:	463b      	mov	r3, r7
   1a66a:	4620      	mov	r0, r4
   1a66c:	f7ff fe8a 	bl	1a384 <ip_interface_request_send>
   1a670:	b998      	cbnz	r0, 1a69a <ip_interface_connect+0xc0>
   1a672:	6823      	ldr	r3, [r4, #0]
   1a674:	00db      	lsls	r3, r3, #3
   1a676:	d426      	bmi.n	1a6c6 <ip_interface_connect+0xec>
   1a678:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a67a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a67e:	2b00      	cmp	r3, #0
   1a680:	bf08      	it	eq
   1a682:	f04f 33ff 	moveq.w	r3, #4294967295
   1a686:	2105      	movs	r1, #5
   1a688:	9303      	str	r3, [sp, #12]
   1a68a:	4630      	mov	r0, r6
   1a68c:	ab03      	add	r3, sp, #12
   1a68e:	f7ff fe8c 	bl	1a3aa <ip_interface_wait>
   1a692:	b130      	cbz	r0, 1a6a2 <ip_interface_connect+0xc8>
   1a694:	2873      	cmp	r0, #115	; 0x73
   1a696:	d000      	beq.n	1a69a <ip_interface_connect+0xc0>
   1a698:	6027      	str	r7, [r4, #0]
   1a69a:	f7f6 fe19 	bl	112d0 <nrf_modem_os_errno_set>
   1a69e:	f04f 30ff 	mov.w	r0, #4294967295
   1a6a2:	b005      	add	sp, #20
   1a6a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a6a8:	6803      	ldr	r3, [r0, #0]
   1a6aa:	b29b      	uxth	r3, r3
   1a6ac:	2b05      	cmp	r3, #5
   1a6ae:	bf14      	ite	ne
   1a6b0:	2009      	movne	r0, #9
   1a6b2:	2038      	moveq	r0, #56	; 0x38
   1a6b4:	e7f1      	b.n	1a69a <ip_interface_connect+0xc0>
   1a6b6:	2016      	movs	r0, #22
   1a6b8:	e7ef      	b.n	1a69a <ip_interface_connect+0xc0>
   1a6ba:	2009      	movs	r0, #9
   1a6bc:	e7ed      	b.n	1a69a <ip_interface_connect+0xc0>
   1a6be:	2072      	movs	r0, #114	; 0x72
   1a6c0:	e7eb      	b.n	1a69a <ip_interface_connect+0xc0>
   1a6c2:	200c      	movs	r0, #12
   1a6c4:	e7e9      	b.n	1a69a <ip_interface_connect+0xc0>
   1a6c6:	2073      	movs	r0, #115	; 0x73
   1a6c8:	e7e7      	b.n	1a69a <ip_interface_connect+0xc0>

0001a6ca <getopt_check_and_send_int>:
   1a6ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a6cc:	4604      	mov	r4, r0
   1a6ce:	460d      	mov	r5, r1
   1a6d0:	4618      	mov	r0, r3
   1a6d2:	4611      	mov	r1, r2
   1a6d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a6d8:	b193      	cbz	r3, 1a700 <getopt_check_and_send_int+0x36>
   1a6da:	681e      	ldr	r6, [r3, #0]
   1a6dc:	2e04      	cmp	r6, #4
   1a6de:	d10f      	bne.n	1a700 <getopt_check_and_send_int+0x36>
   1a6e0:	b172      	cbz	r2, 1a700 <getopt_check_and_send_int+0x36>
   1a6e2:	e9cd 2300 	strd	r2, r3, [sp]
   1a6e6:	462b      	mov	r3, r5
   1a6e8:	4622      	mov	r2, r4
   1a6ea:	f7f8 ff95 	bl	13618 <ip_interface_socketoption_get>
   1a6ee:	4603      	mov	r3, r0
   1a6f0:	b118      	cbz	r0, 1a6fa <getopt_check_and_send_int+0x30>
   1a6f2:	f7f6 fded 	bl	112d0 <nrf_modem_os_errno_set>
   1a6f6:	f04f 33ff 	mov.w	r3, #4294967295
   1a6fa:	4618      	mov	r0, r3
   1a6fc:	b002      	add	sp, #8
   1a6fe:	bd70      	pop	{r4, r5, r6, pc}
   1a700:	2016      	movs	r0, #22
   1a702:	e7f6      	b.n	1a6f2 <getopt_check_and_send_int+0x28>

0001a704 <ip_interface_socketoption_send>:
   1a704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a708:	4699      	mov	r9, r3
   1a70a:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   1a70e:	f04f 33ff 	mov.w	r3, #4294967295
   1a712:	9301      	str	r3, [sp, #4]
   1a714:	680b      	ldr	r3, [r1, #0]
   1a716:	4606      	mov	r6, r0
   1a718:	025d      	lsls	r5, r3, #9
   1a71a:	460c      	mov	r4, r1
   1a71c:	4692      	mov	sl, r2
   1a71e:	d43c      	bmi.n	1a79a <ip_interface_socketoption_send+0x96>
   1a720:	680b      	ldr	r3, [r1, #0]
   1a722:	0219      	lsls	r1, r3, #8
   1a724:	d439      	bmi.n	1a79a <ip_interface_socketoption_send+0x96>
   1a726:	6823      	ldr	r3, [r4, #0]
   1a728:	01da      	lsls	r2, r3, #7
   1a72a:	d436      	bmi.n	1a79a <ip_interface_socketoption_send+0x96>
   1a72c:	6823      	ldr	r3, [r4, #0]
   1a72e:	019b      	lsls	r3, r3, #6
   1a730:	d433      	bmi.n	1a79a <ip_interface_socketoption_send+0x96>
   1a732:	f8d4 8000 	ldr.w	r8, [r4]
   1a736:	6823      	ldr	r3, [r4, #0]
   1a738:	f247 0203 	movw	r2, #28675	; 0x7003
   1a73c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1a740:	6023      	str	r3, [r4, #0]
   1a742:	69a1      	ldr	r1, [r4, #24]
   1a744:	463b      	mov	r3, r7
   1a746:	f7ff fe05 	bl	1a354 <ip_interface_request_create>
   1a74a:	4605      	mov	r5, r0
   1a74c:	b318      	cbz	r0, 1a796 <ip_interface_socketoption_send+0x92>
   1a74e:	6883      	ldr	r3, [r0, #8]
   1a750:	f8c0 a014 	str.w	sl, [r0, #20]
   1a754:	3308      	adds	r3, #8
   1a756:	6083      	str	r3, [r0, #8]
   1a758:	f8c0 9018 	str.w	r9, [r0, #24]
   1a75c:	b13f      	cbz	r7, 1a76e <ip_interface_socketoption_send+0x6a>
   1a75e:	f1bb 0f00 	cmp.w	fp, #0
   1a762:	d004      	beq.n	1a76e <ip_interface_socketoption_send+0x6a>
   1a764:	463a      	mov	r2, r7
   1a766:	4659      	mov	r1, fp
   1a768:	6800      	ldr	r0, [r0, #0]
   1a76a:	f001 f98f 	bl	1ba8c <memcpy>
   1a76e:	4643      	mov	r3, r8
   1a770:	f247 0203 	movw	r2, #28675	; 0x7003
   1a774:	4629      	mov	r1, r5
   1a776:	4620      	mov	r0, r4
   1a778:	f7ff fe04 	bl	1a384 <ip_interface_request_send>
   1a77c:	b930      	cbnz	r0, 1a78c <ip_interface_socketoption_send+0x88>
   1a77e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1a782:	4630      	mov	r0, r6
   1a784:	4611      	mov	r1, r2
   1a786:	ab01      	add	r3, sp, #4
   1a788:	f7ff fe0f 	bl	1a3aa <ip_interface_wait>
   1a78c:	f8c4 8000 	str.w	r8, [r4]
   1a790:	b003      	add	sp, #12
   1a792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a796:	200c      	movs	r0, #12
   1a798:	e7f8      	b.n	1a78c <ip_interface_socketoption_send+0x88>
   1a79a:	2023      	movs	r0, #35	; 0x23
   1a79c:	e7f8      	b.n	1a790 <ip_interface_socketoption_send+0x8c>

0001a79e <setopt_check_and_send_int>:
   1a79e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a7a0:	4604      	mov	r4, r0
   1a7a2:	460d      	mov	r5, r1
   1a7a4:	4618      	mov	r0, r3
   1a7a6:	4611      	mov	r1, r2
   1a7a8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   1a7ac:	2a04      	cmp	r2, #4
   1a7ae:	d10f      	bne.n	1a7d0 <setopt_check_and_send_int+0x32>
   1a7b0:	b173      	cbz	r3, 1a7d0 <setopt_check_and_send_int+0x32>
   1a7b2:	e9cd 3200 	strd	r3, r2, [sp]
   1a7b6:	462b      	mov	r3, r5
   1a7b8:	4622      	mov	r2, r4
   1a7ba:	f7ff ffa3 	bl	1a704 <ip_interface_socketoption_send>
   1a7be:	4603      	mov	r3, r0
   1a7c0:	b118      	cbz	r0, 1a7ca <setopt_check_and_send_int+0x2c>
   1a7c2:	f7f6 fd85 	bl	112d0 <nrf_modem_os_errno_set>
   1a7c6:	f04f 33ff 	mov.w	r3, #4294967295
   1a7ca:	4618      	mov	r0, r3
   1a7cc:	b003      	add	sp, #12
   1a7ce:	bd30      	pop	{r4, r5, pc}
   1a7d0:	2016      	movs	r0, #22
   1a7d2:	e7f6      	b.n	1a7c2 <setopt_check_and_send_int+0x24>

0001a7d4 <ip_interface_setopt>:
   1a7d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a7d8:	2901      	cmp	r1, #1
   1a7da:	4606      	mov	r6, r0
   1a7dc:	4690      	mov	r8, r2
   1a7de:	461c      	mov	r4, r3
   1a7e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1a7e2:	d007      	beq.n	1a7f4 <ip_interface_setopt+0x20>
   1a7e4:	202a      	movs	r0, #42	; 0x2a
   1a7e6:	f7f6 fd73 	bl	112d0 <nrf_modem_os_errno_set>
   1a7ea:	f04f 30ff 	mov.w	r0, #4294967295
   1a7ee:	b004      	add	sp, #16
   1a7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a7f4:	f7f8 fc4e 	bl	13094 <interface_socket_from_handle_get>
   1a7f8:	4605      	mov	r5, r0
   1a7fa:	b908      	cbnz	r0, 1a800 <ip_interface_setopt+0x2c>
   1a7fc:	2009      	movs	r0, #9
   1a7fe:	e7f2      	b.n	1a7e6 <ip_interface_setopt+0x12>
   1a800:	f1b8 0f19 	cmp.w	r8, #25
   1a804:	d00d      	beq.n	1a822 <ip_interface_setopt+0x4e>
   1a806:	f1a8 031e 	sub.w	r3, r8, #30
   1a80a:	2b0a      	cmp	r3, #10
   1a80c:	d84d      	bhi.n	1a8aa <ip_interface_setopt+0xd6>
   1a80e:	2b0a      	cmp	r3, #10
   1a810:	d84b      	bhi.n	1a8aa <ip_interface_setopt+0xd6>
   1a812:	e8df f003 	tbb	[pc, r3]
   1a816:	3429      	.short	0x3429
   1a818:	4a4a4a3b 	.word	0x4a4a4a3b
   1a81c:	4a4a4a4a 	.word	0x4a4a4a4a
   1a820:	42          	.byte	0x42
   1a821:	00          	.byte	0x00
   1a822:	b90c      	cbnz	r4, 1a828 <ip_interface_setopt+0x54>
   1a824:	200e      	movs	r0, #14
   1a826:	e7de      	b.n	1a7e6 <ip_interface_setopt+0x12>
   1a828:	4620      	mov	r0, r4
   1a82a:	f7f2 faa9 	bl	cd80 <strlen>
   1a82e:	42b8      	cmp	r0, r7
   1a830:	d1f8      	bne.n	1a824 <ip_interface_setopt+0x50>
   1a832:	682b      	ldr	r3, [r5, #0]
   1a834:	b29b      	uxth	r3, r3
   1a836:	2b02      	cmp	r3, #2
   1a838:	d1e0      	bne.n	1a7fc <ip_interface_setopt+0x28>
   1a83a:	4621      	mov	r1, r4
   1a83c:	68e8      	ldr	r0, [r5, #12]
   1a83e:	f7fb faa1 	bl	15d84 <pdn_interface_pdn_id_get>
   1a842:	9003      	str	r0, [sp, #12]
   1a844:	3001      	adds	r0, #1
   1a846:	d101      	bne.n	1a84c <ip_interface_setopt+0x78>
   1a848:	2016      	movs	r0, #22
   1a84a:	e7cc      	b.n	1a7e6 <ip_interface_setopt+0x12>
   1a84c:	2304      	movs	r3, #4
   1a84e:	9301      	str	r3, [sp, #4]
   1a850:	ab03      	add	r3, sp, #12
   1a852:	9300      	str	r3, [sp, #0]
   1a854:	2208      	movs	r2, #8
   1a856:	f243 0310 	movw	r3, #12304	; 0x3010
   1a85a:	4629      	mov	r1, r5
   1a85c:	4630      	mov	r0, r6
   1a85e:	f7ff ff51 	bl	1a704 <ip_interface_socketoption_send>
   1a862:	2800      	cmp	r0, #0
   1a864:	d0c3      	beq.n	1a7ee <ip_interface_setopt+0x1a>
   1a866:	e7be      	b.n	1a7e6 <ip_interface_setopt+0x12>
   1a868:	4633      	mov	r3, r6
   1a86a:	4602      	mov	r2, r0
   1a86c:	f248 0101 	movw	r1, #32769	; 0x8001
   1a870:	e9cd 4700 	strd	r4, r7, [sp]
   1a874:	f44f 7000 	mov.w	r0, #512	; 0x200
   1a878:	f7ff ff91 	bl	1a79e <setopt_check_and_send_int>
   1a87c:	e7b7      	b.n	1a7ee <ip_interface_setopt+0x1a>
   1a87e:	4633      	mov	r3, r6
   1a880:	4602      	mov	r2, r0
   1a882:	f244 0110 	movw	r1, #16400	; 0x4010
   1a886:	e9cd 4700 	strd	r4, r7, [sp]
   1a88a:	e7f3      	b.n	1a874 <ip_interface_setopt+0xa0>
   1a88c:	4633      	mov	r3, r6
   1a88e:	4602      	mov	r2, r0
   1a890:	f246 0110 	movw	r1, #24592	; 0x6010
   1a894:	e9cd 4700 	strd	r4, r7, [sp]
   1a898:	e7ec      	b.n	1a874 <ip_interface_setopt+0xa0>
   1a89a:	4602      	mov	r2, r0
   1a89c:	4633      	mov	r3, r6
   1a89e:	f241 0104 	movw	r1, #4100	; 0x1004
   1a8a2:	2008      	movs	r0, #8
   1a8a4:	e9cd 4700 	strd	r4, r7, [sp]
   1a8a8:	e7e6      	b.n	1a878 <ip_interface_setopt+0xa4>
   1a8aa:	4623      	mov	r3, r4
   1a8ac:	4642      	mov	r2, r8
   1a8ae:	2101      	movs	r1, #1
   1a8b0:	4630      	mov	r0, r6
   1a8b2:	9700      	str	r7, [sp, #0]
   1a8b4:	f7f8 fbfe 	bl	130b4 <interface_socket_setopt>
   1a8b8:	e799      	b.n	1a7ee <ip_interface_setopt+0x1a>

0001a8ba <ip_interface_getopt>:
   1a8ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a8bc:	2901      	cmp	r1, #1
   1a8be:	4604      	mov	r4, r0
   1a8c0:	4617      	mov	r7, r2
   1a8c2:	461d      	mov	r5, r3
   1a8c4:	9e08      	ldr	r6, [sp, #32]
   1a8c6:	d006      	beq.n	1a8d6 <ip_interface_getopt+0x1c>
   1a8c8:	202a      	movs	r0, #42	; 0x2a
   1a8ca:	f7f6 fd01 	bl	112d0 <nrf_modem_os_errno_set>
   1a8ce:	f04f 30ff 	mov.w	r0, #4294967295
   1a8d2:	b003      	add	sp, #12
   1a8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a8d6:	f7f8 fbdd 	bl	13094 <interface_socket_from_handle_get>
   1a8da:	4602      	mov	r2, r0
   1a8dc:	b908      	cbnz	r0, 1a8e2 <ip_interface_getopt+0x28>
   1a8de:	2009      	movs	r0, #9
   1a8e0:	e7f3      	b.n	1a8ca <ip_interface_getopt+0x10>
   1a8e2:	f1a7 031e 	sub.w	r3, r7, #30
   1a8e6:	2b0a      	cmp	r3, #10
   1a8e8:	d824      	bhi.n	1a934 <ip_interface_getopt+0x7a>
   1a8ea:	e8df f003 	tbb	[pc, r3]
   1a8ee:	1006      	.short	0x1006
   1a8f0:	23232316 	.word	0x23232316
   1a8f4:	23232323 	.word	0x23232323
   1a8f8:	1c          	.byte	0x1c
   1a8f9:	00          	.byte	0x00
   1a8fa:	4623      	mov	r3, r4
   1a8fc:	f248 0101 	movw	r1, #32769	; 0x8001
   1a900:	e9cd 5600 	strd	r5, r6, [sp]
   1a904:	f44f 7000 	mov.w	r0, #512	; 0x200
   1a908:	f7ff fedf 	bl	1a6ca <getopt_check_and_send_int>
   1a90c:	e7e1      	b.n	1a8d2 <ip_interface_getopt+0x18>
   1a90e:	4623      	mov	r3, r4
   1a910:	f244 0110 	movw	r1, #16400	; 0x4010
   1a914:	e9cd 5600 	strd	r5, r6, [sp]
   1a918:	e7f4      	b.n	1a904 <ip_interface_getopt+0x4a>
   1a91a:	4623      	mov	r3, r4
   1a91c:	f246 0110 	movw	r1, #24592	; 0x6010
   1a920:	e9cd 5600 	strd	r5, r6, [sp]
   1a924:	e7ee      	b.n	1a904 <ip_interface_getopt+0x4a>
   1a926:	4623      	mov	r3, r4
   1a928:	f241 0104 	movw	r1, #4100	; 0x1004
   1a92c:	2008      	movs	r0, #8
   1a92e:	e9cd 5600 	strd	r5, r6, [sp]
   1a932:	e7e9      	b.n	1a908 <ip_interface_getopt+0x4e>
   1a934:	462b      	mov	r3, r5
   1a936:	463a      	mov	r2, r7
   1a938:	2101      	movs	r1, #1
   1a93a:	4620      	mov	r0, r4
   1a93c:	9608      	str	r6, [sp, #32]
   1a93e:	b003      	add	sp, #12
   1a940:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1a944:	f7f8 bbea 	b.w	1311c <interface_socket_getopt>

0001a948 <attach_trigger_condition_verify>:
   1a948:	6903      	ldr	r3, [r0, #16]
   1a94a:	2b01      	cmp	r3, #1
   1a94c:	d105      	bne.n	1a95a <attach_trigger_condition_verify+0x12>
   1a94e:	6800      	ldr	r0, [r0, #0]
   1a950:	b280      	uxth	r0, r0
   1a952:	1f43      	subs	r3, r0, #5
   1a954:	4258      	negs	r0, r3
   1a956:	4158      	adcs	r0, r3
   1a958:	4770      	bx	lr
   1a95a:	2b02      	cmp	r3, #2
   1a95c:	d109      	bne.n	1a972 <attach_trigger_condition_verify+0x2a>
   1a95e:	6803      	ldr	r3, [r0, #0]
   1a960:	b29b      	uxth	r3, r3
   1a962:	2b02      	cmp	r3, #2
   1a964:	d003      	beq.n	1a96e <attach_trigger_condition_verify+0x26>
   1a966:	6803      	ldr	r3, [r0, #0]
   1a968:	b29b      	uxth	r3, r3
   1a96a:	2b04      	cmp	r3, #4
   1a96c:	d1ef      	bne.n	1a94e <attach_trigger_condition_verify+0x6>
   1a96e:	2001      	movs	r0, #1
   1a970:	4770      	bx	lr
   1a972:	2000      	movs	r0, #0
   1a974:	4770      	bx	lr

0001a976 <secure_client_socket>:
   1a976:	f04f 33ff 	mov.w	r3, #4294967295
   1a97a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a97c:	9301      	str	r3, [sp, #4]
   1a97e:	680b      	ldr	r3, [r1, #0]
   1a980:	4606      	mov	r6, r0
   1a982:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1a986:	600b      	str	r3, [r1, #0]
   1a988:	680b      	ldr	r3, [r1, #0]
   1a98a:	460c      	mov	r4, r1
   1a98c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1a990:	600b      	str	r3, [r1, #0]
   1a992:	680f      	ldr	r7, [r1, #0]
   1a994:	463a      	mov	r2, r7
   1a996:	f7f9 fb9b 	bl	140d0 <secure_socket_attach_initiate>
   1a99a:	4605      	mov	r5, r0
   1a99c:	b950      	cbnz	r0, 1a9b4 <secure_client_socket+0x3e>
   1a99e:	220c      	movs	r2, #12
   1a9a0:	4630      	mov	r0, r6
   1a9a2:	4611      	mov	r1, r2
   1a9a4:	ab01      	add	r3, sp, #4
   1a9a6:	f7ff fd00 	bl	1a3aa <ip_interface_wait>
   1a9aa:	4605      	mov	r5, r0
   1a9ac:	b128      	cbz	r0, 1a9ba <secure_client_socket+0x44>
   1a9ae:	2873      	cmp	r0, #115	; 0x73
   1a9b0:	d000      	beq.n	1a9b4 <secure_client_socket+0x3e>
   1a9b2:	6027      	str	r7, [r4, #0]
   1a9b4:	4628      	mov	r0, r5
   1a9b6:	b003      	add	sp, #12
   1a9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a9ba:	4630      	mov	r0, r6
   1a9bc:	f7f9 fb76 	bl	140ac <hostname_free>
   1a9c0:	6823      	ldr	r3, [r4, #0]
   1a9c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1a9c6:	6023      	str	r3, [r4, #0]
   1a9c8:	6823      	ldr	r3, [r4, #0]
   1a9ca:	0c1b      	lsrs	r3, r3, #16
   1a9cc:	041b      	lsls	r3, r3, #16
   1a9ce:	f043 030c 	orr.w	r3, r3, #12
   1a9d2:	6023      	str	r3, [r4, #0]
   1a9d4:	6823      	ldr	r3, [r4, #0]
   1a9d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1a9da:	6023      	str	r3, [r4, #0]
   1a9dc:	6823      	ldr	r3, [r4, #0]
   1a9de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1a9e2:	6023      	str	r3, [r4, #0]
   1a9e4:	e7e6      	b.n	1a9b4 <secure_client_socket+0x3e>

0001a9e6 <tls_interface_close>:
   1a9e6:	b510      	push	{r4, lr}
   1a9e8:	4604      	mov	r4, r0
   1a9ea:	f7f8 fb53 	bl	13094 <interface_socket_from_handle_get>
   1a9ee:	b138      	cbz	r0, 1aa00 <tls_interface_close+0x1a>
   1a9f0:	4620      	mov	r0, r4
   1a9f2:	f7f9 fb5b 	bl	140ac <hostname_free>
   1a9f6:	4620      	mov	r0, r4
   1a9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a9fc:	f7f8 bca2 	b.w	13344 <ip_interface_close>
   1aa00:	2009      	movs	r0, #9
   1aa02:	f7f6 fc65 	bl	112d0 <nrf_modem_os_errno_set>
   1aa06:	f04f 30ff 	mov.w	r0, #4294967295
   1aa0a:	bd10      	pop	{r4, pc}

0001aa0c <packet_free_cb>:
   1aa0c:	6800      	ldr	r0, [r0, #0]
   1aa0e:	f7ff ba74 	b.w	19efa <rpc_at_client_data_free>

0001aa12 <at_interface_wait>:
   1aa12:	b538      	push	{r3, r4, r5, lr}
   1aa14:	4605      	mov	r5, r0
   1aa16:	f7f8 faff 	bl	13018 <interface_socket_wait>
   1aa1a:	4604      	mov	r4, r0
   1aa1c:	b938      	cbnz	r0, 1aa2e <at_interface_wait+0x1c>
   1aa1e:	4628      	mov	r0, r5
   1aa20:	f7f8 fb38 	bl	13094 <interface_socket_from_handle_get>
   1aa24:	b118      	cbz	r0, 1aa2e <at_interface_wait+0x1c>
   1aa26:	6844      	ldr	r4, [r0, #4]
   1aa28:	b10c      	cbz	r4, 1aa2e <at_interface_wait+0x1c>
   1aa2a:	2300      	movs	r3, #0
   1aa2c:	6043      	str	r3, [r0, #4]
   1aa2e:	4620      	mov	r0, r4
   1aa30:	bd38      	pop	{r3, r4, r5, pc}

0001aa32 <send_message>:
   1aa32:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1aa36:	4606      	mov	r6, r0
   1aa38:	4668      	mov	r0, sp
   1aa3a:	460f      	mov	r7, r1
   1aa3c:	4692      	mov	sl, r2
   1aa3e:	4699      	mov	r9, r3
   1aa40:	f7ff fa34 	bl	19eac <rpc_at_client_request_alloc>
   1aa44:	4605      	mov	r5, r0
   1aa46:	4630      	mov	r0, r6
   1aa48:	f7f8 fb24 	bl	13094 <interface_socket_from_handle_get>
   1aa4c:	4680      	mov	r8, r0
   1aa4e:	bb5d      	cbnz	r5, 1aaa8 <send_message+0x76>
   1aa50:	2304      	movs	r3, #4
   1aa52:	9c00      	ldr	r4, [sp, #0]
   1aa54:	7223      	strb	r3, [r4, #8]
   1aa56:	7265      	strb	r5, [r4, #9]
   1aa58:	72a5      	strb	r5, [r4, #10]
   1aa5a:	72e5      	strb	r5, [r4, #11]
   1aa5c:	60e6      	str	r6, [r4, #12]
   1aa5e:	b127      	cbz	r7, 1aa6a <send_message+0x38>
   1aa60:	463a      	mov	r2, r7
   1aa62:	4651      	mov	r1, sl
   1aa64:	6820      	ldr	r0, [r4, #0]
   1aa66:	f001 f811 	bl	1ba8c <memcpy>
   1aa6a:	4649      	mov	r1, r9
   1aa6c:	9800      	ldr	r0, [sp, #0]
   1aa6e:	f7ff fa2f 	bl	19ed0 <rpc_at_client_request_send>
   1aa72:	b158      	cbz	r0, 1aa8c <send_message+0x5a>
   1aa74:	b11f      	cbz	r7, 1aa7e <send_message+0x4c>
   1aa76:	9b00      	ldr	r3, [sp, #0]
   1aa78:	6818      	ldr	r0, [r3, #0]
   1aa7a:	f7ff fa3e 	bl	19efa <rpc_at_client_data_free>
   1aa7e:	9800      	ldr	r0, [sp, #0]
   1aa80:	f7ff fa33 	bl	19eea <rpc_at_client_message_free>
   1aa84:	2023      	movs	r0, #35	; 0x23
   1aa86:	b002      	add	sp, #8
   1aa88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aa8c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   1aa90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1aa92:	2b00      	cmp	r3, #0
   1aa94:	bf08      	it	eq
   1aa96:	f04f 33ff 	moveq.w	r3, #4294967295
   1aa9a:	4611      	mov	r1, r2
   1aa9c:	9301      	str	r3, [sp, #4]
   1aa9e:	4630      	mov	r0, r6
   1aaa0:	ab01      	add	r3, sp, #4
   1aaa2:	f7ff ffb6 	bl	1aa12 <at_interface_wait>
   1aaa6:	e7ee      	b.n	1aa86 <send_message+0x54>
   1aaa8:	200c      	movs	r0, #12
   1aaaa:	e7ec      	b.n	1aa86 <send_message+0x54>

0001aaac <at_interface_write>:
   1aaac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1aab0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1aab2:	4607      	mov	r7, r0
   1aab4:	4688      	mov	r8, r1
   1aab6:	4615      	mov	r5, r2
   1aab8:	4699      	mov	r9, r3
   1aaba:	b146      	cbz	r6, 1aace <at_interface_write+0x22>
   1aabc:	2038      	movs	r0, #56	; 0x38
   1aabe:	f7f6 fc07 	bl	112d0 <nrf_modem_os_errno_set>
   1aac2:	f04f 35ff 	mov.w	r5, #4294967295
   1aac6:	4628      	mov	r0, r5
   1aac8:	b003      	add	sp, #12
   1aaca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1aace:	f7f8 fae1 	bl	13094 <interface_socket_from_handle_get>
   1aad2:	4604      	mov	r4, r0
   1aad4:	f1b9 0f00 	cmp.w	r9, #0
   1aad8:	d124      	bne.n	1ab24 <at_interface_write+0x78>
   1aada:	b908      	cbnz	r0, 1aae0 <at_interface_write+0x34>
   1aadc:	2016      	movs	r0, #22
   1aade:	e7ee      	b.n	1aabe <at_interface_write+0x12>
   1aae0:	2601      	movs	r6, #1
   1aae2:	6822      	ldr	r2, [r4, #0]
   1aae4:	0393      	lsls	r3, r2, #14
   1aae6:	d518      	bpl.n	1ab1a <at_interface_write+0x6e>
   1aae8:	b1f6      	cbz	r6, 1ab28 <at_interface_write+0x7c>
   1aaea:	6823      	ldr	r3, [r4, #0]
   1aaec:	4642      	mov	r2, r8
   1aaee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1aaf2:	6023      	str	r3, [r4, #0]
   1aaf4:	6823      	ldr	r3, [r4, #0]
   1aaf6:	4629      	mov	r1, r5
   1aaf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1aafc:	6023      	str	r3, [r4, #0]
   1aafe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1ab02:	4638      	mov	r0, r7
   1ab04:	9300      	str	r3, [sp, #0]
   1ab06:	2301      	movs	r3, #1
   1ab08:	f7ff ff93 	bl	1aa32 <send_message>
   1ab0c:	2800      	cmp	r0, #0
   1ab0e:	d0da      	beq.n	1aac6 <at_interface_write+0x1a>
   1ab10:	6823      	ldr	r3, [r4, #0]
   1ab12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1ab16:	6023      	str	r3, [r4, #0]
   1ab18:	e7d1      	b.n	1aabe <at_interface_write+0x12>
   1ab1a:	2e00      	cmp	r6, #0
   1ab1c:	bf14      	ite	ne
   1ab1e:	2016      	movne	r0, #22
   1ab20:	202d      	moveq	r0, #45	; 0x2d
   1ab22:	e7cc      	b.n	1aabe <at_interface_write+0x12>
   1ab24:	2800      	cmp	r0, #0
   1ab26:	d1dc      	bne.n	1aae2 <at_interface_write+0x36>
   1ab28:	202d      	movs	r0, #45	; 0x2d
   1ab2a:	e7c8      	b.n	1aabe <at_interface_write+0x12>

0001ab2c <at_interface_close>:
   1ab2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ab2e:	4606      	mov	r6, r0
   1ab30:	f7f8 fab0 	bl	13094 <interface_socket_from_handle_get>
   1ab34:	4604      	mov	r4, r0
   1ab36:	b308      	cbz	r0, 1ab7c <at_interface_close+0x50>
   1ab38:	230d      	movs	r3, #13
   1ab3a:	6807      	ldr	r7, [r0, #0]
   1ab3c:	6003      	str	r3, [r0, #0]
   1ab3e:	6803      	ldr	r3, [r0, #0]
   1ab40:	2200      	movs	r2, #0
   1ab42:	039b      	lsls	r3, r3, #14
   1ab44:	bf48      	it	mi
   1ab46:	6803      	ldrmi	r3, [r0, #0]
   1ab48:	4611      	mov	r1, r2
   1ab4a:	bf44      	itt	mi
   1ab4c:	f423 3300 	bicmi.w	r3, r3, #131072	; 0x20000
   1ab50:	6003      	strmi	r3, [r0, #0]
   1ab52:	230e      	movs	r3, #14
   1ab54:	4630      	mov	r0, r6
   1ab56:	9300      	str	r3, [sp, #0]
   1ab58:	2306      	movs	r3, #6
   1ab5a:	f7ff ff6a 	bl	1aa32 <send_message>
   1ab5e:	4605      	mov	r5, r0
   1ab60:	b130      	cbz	r0, 1ab70 <at_interface_close+0x44>
   1ab62:	6027      	str	r7, [r4, #0]
   1ab64:	4628      	mov	r0, r5
   1ab66:	f7f6 fbb3 	bl	112d0 <nrf_modem_os_errno_set>
   1ab6a:	f04f 35ff 	mov.w	r5, #4294967295
   1ab6e:	e002      	b.n	1ab76 <at_interface_close+0x4a>
   1ab70:	4630      	mov	r0, r6
   1ab72:	f7f8 fa2b 	bl	12fcc <interface_socket_free>
   1ab76:	4628      	mov	r0, r5
   1ab78:	b003      	add	sp, #12
   1ab7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ab7c:	2516      	movs	r5, #22
   1ab7e:	e7f1      	b.n	1ab64 <at_interface_close+0x38>

0001ab80 <at_interface_read>:
   1ab80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ab84:	b087      	sub	sp, #28
   1ab86:	4680      	mov	r8, r0
   1ab88:	460e      	mov	r6, r1
   1ab8a:	4614      	mov	r4, r2
   1ab8c:	461f      	mov	r7, r3
   1ab8e:	f7f8 fa81 	bl	13094 <interface_socket_from_handle_get>
   1ab92:	4605      	mov	r5, r0
   1ab94:	2800      	cmp	r0, #0
   1ab96:	d045      	beq.n	1ac24 <at_interface_read+0xa4>
   1ab98:	2300      	movs	r3, #0
   1ab9a:	e9cd 6402 	strd	r6, r4, [sp, #8]
   1ab9e:	9304      	str	r3, [sp, #16]
   1aba0:	b117      	cbz	r7, 1aba8 <at_interface_read+0x28>
   1aba2:	f017 0f2a 	tst.w	r7, #42	; 0x2a
   1aba6:	d022      	beq.n	1abee <at_interface_read+0x6e>
   1aba8:	2400      	movs	r4, #0
   1abaa:	9305      	str	r3, [sp, #20]
   1abac:	f007 0902 	and.w	r9, r7, #2
   1abb0:	682b      	ldr	r3, [r5, #0]
   1abb2:	69e8      	ldr	r0, [r5, #28]
   1abb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1abb8:	602b      	str	r3, [r5, #0]
   1abba:	6803      	ldr	r3, [r0, #0]
   1abbc:	463a      	mov	r2, r7
   1abbe:	689b      	ldr	r3, [r3, #8]
   1abc0:	a902      	add	r1, sp, #8
   1abc2:	4798      	blx	r3
   1abc4:	1e06      	subs	r6, r0, #0
   1abc6:	da1b      	bge.n	1ac00 <at_interface_read+0x80>
   1abc8:	f1b9 0f00 	cmp.w	r9, #0
   1abcc:	d113      	bne.n	1abf6 <at_interface_read+0x76>
   1abce:	b9bc      	cbnz	r4, 1ac00 <at_interface_read+0x80>
   1abd0:	6a2b      	ldr	r3, [r5, #32]
   1abd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1abd6:	2b00      	cmp	r3, #0
   1abd8:	bf08      	it	eq
   1abda:	f04f 33ff 	moveq.w	r3, #4294967295
   1abde:	4611      	mov	r1, r2
   1abe0:	9301      	str	r3, [sp, #4]
   1abe2:	4640      	mov	r0, r8
   1abe4:	ab01      	add	r3, sp, #4
   1abe6:	f7ff ff14 	bl	1aa12 <at_interface_wait>
   1abea:	4604      	mov	r4, r0
   1abec:	e7e0      	b.n	1abb0 <at_interface_read+0x30>
   1abee:	242d      	movs	r4, #45	; 0x2d
   1abf0:	f04f 36ff 	mov.w	r6, #4294967295
   1abf4:	e00f      	b.n	1ac16 <at_interface_read+0x96>
   1abf6:	1c73      	adds	r3, r6, #1
   1abf8:	d102      	bne.n	1ac00 <at_interface_read+0x80>
   1abfa:	2c00      	cmp	r4, #0
   1abfc:	bf08      	it	eq
   1abfe:	2423      	moveq	r4, #35	; 0x23
   1ac00:	69e8      	ldr	r0, [r5, #28]
   1ac02:	6803      	ldr	r3, [r0, #0]
   1ac04:	68db      	ldr	r3, [r3, #12]
   1ac06:	4798      	blx	r3
   1ac08:	3001      	adds	r0, #1
   1ac0a:	bf1e      	ittt	ne
   1ac0c:	682b      	ldrne	r3, [r5, #0]
   1ac0e:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
   1ac12:	602b      	strne	r3, [r5, #0]
   1ac14:	b114      	cbz	r4, 1ac1c <at_interface_read+0x9c>
   1ac16:	4620      	mov	r0, r4
   1ac18:	f7f6 fb5a 	bl	112d0 <nrf_modem_os_errno_set>
   1ac1c:	4630      	mov	r0, r6
   1ac1e:	b007      	add	sp, #28
   1ac20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ac24:	2416      	movs	r4, #22
   1ac26:	e7e3      	b.n	1abf0 <at_interface_read+0x70>

0001ac28 <at_interface_getopt>:
   1ac28:	f7f8 ba78 	b.w	1311c <interface_socket_getopt>

0001ac2c <at_interface_setopt>:
   1ac2c:	f7f8 ba42 	b.w	130b4 <interface_socket_setopt>

0001ac30 <rpc_at_event_handler>:
   1ac30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ac32:	4606      	mov	r6, r0
   1ac34:	68c0      	ldr	r0, [r0, #12]
   1ac36:	460d      	mov	r5, r1
   1ac38:	f7f8 fa2c 	bl	13094 <interface_socket_from_handle_get>
   1ac3c:	4604      	mov	r4, r0
   1ac3e:	2800      	cmp	r0, #0
   1ac40:	d03a      	beq.n	1acb8 <rpc_at_event_handler+0x88>
   1ac42:	6803      	ldr	r3, [r0, #0]
   1ac44:	b29b      	uxth	r3, r3
   1ac46:	2b01      	cmp	r3, #1
   1ac48:	d104      	bne.n	1ac54 <rpc_at_event_handler+0x24>
   1ac4a:	2d02      	cmp	r5, #2
   1ac4c:	d11c      	bne.n	1ac88 <rpc_at_event_handler+0x58>
   1ac4e:	6005      	str	r5, [r0, #0]
   1ac50:	2000      	movs	r0, #0
   1ac52:	e02b      	b.n	1acac <rpc_at_event_handler+0x7c>
   1ac54:	6803      	ldr	r3, [r0, #0]
   1ac56:	b29b      	uxth	r3, r3
   1ac58:	2b0d      	cmp	r3, #13
   1ac5a:	d104      	bne.n	1ac66 <rpc_at_event_handler+0x36>
   1ac5c:	2d02      	cmp	r5, #2
   1ac5e:	d113      	bne.n	1ac88 <rpc_at_event_handler+0x58>
   1ac60:	230e      	movs	r3, #14
   1ac62:	6023      	str	r3, [r4, #0]
   1ac64:	e7f4      	b.n	1ac50 <rpc_at_event_handler+0x20>
   1ac66:	6803      	ldr	r3, [r0, #0]
   1ac68:	b29b      	uxth	r3, r3
   1ac6a:	2b02      	cmp	r3, #2
   1ac6c:	d10c      	bne.n	1ac88 <rpc_at_event_handler+0x58>
   1ac6e:	6803      	ldr	r3, [r0, #0]
   1ac70:	029b      	lsls	r3, r3, #10
   1ac72:	d509      	bpl.n	1ac88 <rpc_at_event_handler+0x58>
   1ac74:	2d02      	cmp	r5, #2
   1ac76:	d107      	bne.n	1ac88 <rpc_at_event_handler+0x58>
   1ac78:	6803      	ldr	r3, [r0, #0]
   1ac7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1ac7e:	6003      	str	r3, [r0, #0]
   1ac80:	6803      	ldr	r3, [r0, #0]
   1ac82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1ac86:	e7ec      	b.n	1ac62 <rpc_at_event_handler+0x32>
   1ac88:	3d03      	subs	r5, #3
   1ac8a:	2d01      	cmp	r5, #1
   1ac8c:	d8e0      	bhi.n	1ac50 <rpc_at_event_handler+0x20>
   1ac8e:	2500      	movs	r5, #0
   1ac90:	6833      	ldr	r3, [r6, #0]
   1ac92:	69e0      	ldr	r0, [r4, #28]
   1ac94:	9300      	str	r3, [sp, #0]
   1ac96:	6873      	ldr	r3, [r6, #4]
   1ac98:	4669      	mov	r1, sp
   1ac9a:	9301      	str	r3, [sp, #4]
   1ac9c:	6803      	ldr	r3, [r0, #0]
   1ac9e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1aca2:	685b      	ldr	r3, [r3, #4]
   1aca4:	4798      	blx	r3
   1aca6:	3001      	adds	r0, #1
   1aca8:	d102      	bne.n	1acb0 <rpc_at_event_handler+0x80>
   1acaa:	2002      	movs	r0, #2
   1acac:	b004      	add	sp, #16
   1acae:	bd70      	pop	{r4, r5, r6, pc}
   1acb0:	6823      	ldr	r3, [r4, #0]
   1acb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1acb6:	e7d4      	b.n	1ac62 <rpc_at_event_handler+0x32>
   1acb8:	6830      	ldr	r0, [r6, #0]
   1acba:	2800      	cmp	r0, #0
   1acbc:	d0c8      	beq.n	1ac50 <rpc_at_event_handler+0x20>
   1acbe:	f7ff f91c 	bl	19efa <rpc_at_client_data_free>
   1acc2:	e7c5      	b.n	1ac50 <rpc_at_event_handler+0x20>

0001acc4 <packet_free_cb>:
   1acc4:	b510      	push	{r4, lr}
   1acc6:	4604      	mov	r4, r0
   1acc8:	b118      	cbz	r0, 1acd2 <packet_free_cb+0xe>
   1acca:	6800      	ldr	r0, [r0, #0]
   1accc:	b108      	cbz	r0, 1acd2 <packet_free_cb+0xe>
   1acce:	f7ff f9c0 	bl	1a052 <rpc_gnss_client_data_free>
   1acd2:	68a0      	ldr	r0, [r4, #8]
   1acd4:	b118      	cbz	r0, 1acde <packet_free_cb+0x1a>
   1acd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1acda:	f7f6 bc9d 	b.w	11618 <nrf_modem_os_free>
   1acde:	bd10      	pop	{r4, pc}

0001ace0 <spaces_remove>:
   1ace0:	2200      	movs	r2, #0
   1ace2:	b510      	push	{r4, lr}
   1ace4:	1e44      	subs	r4, r0, #1
   1ace6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1acea:	1881      	adds	r1, r0, r2
   1acec:	b90b      	cbnz	r3, 1acf2 <spaces_remove+0x12>
   1acee:	700b      	strb	r3, [r1, #0]
   1acf0:	bd10      	pop	{r4, pc}
   1acf2:	2b20      	cmp	r3, #32
   1acf4:	bf1c      	itt	ne
   1acf6:	700b      	strbne	r3, [r1, #0]
   1acf8:	3201      	addne	r2, #1
   1acfa:	e7f4      	b.n	1ace6 <spaces_remove+0x6>

0001acfc <ok_rsp_parser>:
   1acfc:	2000      	movs	r0, #0
   1acfe:	4770      	bx	lr

0001ad00 <context_query_parser>:
   1ad00:	f06f 0004 	mvn.w	r0, #4
   1ad04:	4770      	bx	lr

0001ad06 <null_handler_init>:
   1ad06:	2000      	movs	r0, #0
   1ad08:	4770      	bx	lr

0001ad0a <null_handler_put>:
   1ad0a:	b510      	push	{r4, lr}
   1ad0c:	460c      	mov	r4, r1
   1ad0e:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1ad12:	4620      	mov	r0, r4
   1ad14:	4798      	blx	r3
   1ad16:	6860      	ldr	r0, [r4, #4]
   1ad18:	bd10      	pop	{r4, pc}

0001ad1a <null_handler_get>:
   1ad1a:	f04f 30ff 	mov.w	r0, #4294967295
   1ad1e:	4770      	bx	lr

0001ad20 <null_handler_available>:
   1ad20:	f04f 30ff 	mov.w	r0, #4294967295
   1ad24:	4770      	bx	lr

0001ad26 <null_handler_flush>:
   1ad26:	2000      	movs	r0, #0
   1ad28:	4770      	bx	lr

0001ad2a <null_handler_free>:
   1ad2a:	4770      	bx	lr

0001ad2c <stream_handler_free_packet>:
   1ad2c:	b530      	push	{r4, r5, lr}
   1ad2e:	4605      	mov	r5, r0
   1ad30:	b085      	sub	sp, #20
   1ad32:	68c0      	ldr	r0, [r0, #12]
   1ad34:	f000 faf7 	bl	1b326 <linked_list_pop>
   1ad38:	4604      	mov	r4, r0
   1ad3a:	b170      	cbz	r0, 1ad5a <stream_handler_free_packet+0x2e>
   1ad3c:	6843      	ldr	r3, [r0, #4]
   1ad3e:	9300      	str	r3, [sp, #0]
   1ad40:	6883      	ldr	r3, [r0, #8]
   1ad42:	9301      	str	r3, [sp, #4]
   1ad44:	6903      	ldr	r3, [r0, #16]
   1ad46:	9302      	str	r3, [sp, #8]
   1ad48:	68c3      	ldr	r3, [r0, #12]
   1ad4a:	4668      	mov	r0, sp
   1ad4c:	9303      	str	r3, [sp, #12]
   1ad4e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1ad52:	4798      	blx	r3
   1ad54:	4620      	mov	r0, r4
   1ad56:	f7f6 fc5f 	bl	11618 <nrf_modem_os_free>
   1ad5a:	b005      	add	sp, #20
   1ad5c:	bd30      	pop	{r4, r5, pc}

0001ad5e <stream_handler_init>:
   1ad5e:	b510      	push	{r4, lr}
   1ad60:	4604      	mov	r4, r0
   1ad62:	200c      	movs	r0, #12
   1ad64:	f7f6 fc48 	bl	115f8 <nrf_modem_os_alloc>
   1ad68:	60e0      	str	r0, [r4, #12]
   1ad6a:	b128      	cbz	r0, 1ad78 <stream_handler_init+0x1a>
   1ad6c:	2300      	movs	r3, #0
   1ad6e:	6123      	str	r3, [r4, #16]
   1ad70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ad74:	f000 babb 	b.w	1b2ee <linked_list_init>
   1ad78:	200c      	movs	r0, #12
   1ad7a:	bd10      	pop	{r4, pc}

0001ad7c <stream_handler_put>:
   1ad7c:	b570      	push	{r4, r5, r6, lr}
   1ad7e:	4606      	mov	r6, r0
   1ad80:	2014      	movs	r0, #20
   1ad82:	460d      	mov	r5, r1
   1ad84:	f7f6 fc38 	bl	115f8 <nrf_modem_os_alloc>
   1ad88:	4604      	mov	r4, r0
   1ad8a:	b178      	cbz	r0, 1adac <stream_handler_put+0x30>
   1ad8c:	682b      	ldr	r3, [r5, #0]
   1ad8e:	4601      	mov	r1, r0
   1ad90:	6043      	str	r3, [r0, #4]
   1ad92:	686b      	ldr	r3, [r5, #4]
   1ad94:	6083      	str	r3, [r0, #8]
   1ad96:	68eb      	ldr	r3, [r5, #12]
   1ad98:	60c3      	str	r3, [r0, #12]
   1ad9a:	68ab      	ldr	r3, [r5, #8]
   1ad9c:	6103      	str	r3, [r0, #16]
   1ad9e:	68f0      	ldr	r0, [r6, #12]
   1ada0:	f000 faae 	bl	1b300 <linked_list_push>
   1ada4:	b128      	cbz	r0, 1adb2 <stream_handler_put+0x36>
   1ada6:	4620      	mov	r0, r4
   1ada8:	f7f6 fc36 	bl	11618 <nrf_modem_os_free>
   1adac:	f04f 30ff 	mov.w	r0, #4294967295
   1adb0:	e000      	b.n	1adb4 <stream_handler_put+0x38>
   1adb2:	6868      	ldr	r0, [r5, #4]
   1adb4:	bd70      	pop	{r4, r5, r6, pc}

0001adb6 <stream_handler_get>:
   1adb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1adba:	4606      	mov	r6, r0
   1adbc:	b085      	sub	sp, #20
   1adbe:	68c0      	ldr	r0, [r0, #12]
   1adc0:	468a      	mov	sl, r1
   1adc2:	4617      	mov	r7, r2
   1adc4:	f000 fab9 	bl	1b33a <linked_list_peek>
   1adc8:	4604      	mov	r4, r0
   1adca:	2800      	cmp	r0, #0
   1adcc:	d055      	beq.n	1ae7a <stream_handler_get+0xc4>
   1adce:	f8da 0008 	ldr.w	r0, [sl, #8]
   1add2:	2800      	cmp	r0, #0
   1add4:	d049      	beq.n	1ae6a <stream_handler_get+0xb4>
   1add6:	6921      	ldr	r1, [r4, #16]
   1add8:	2900      	cmp	r1, #0
   1adda:	d046      	beq.n	1ae6a <stream_handler_get+0xb4>
   1addc:	68e2      	ldr	r2, [r4, #12]
   1adde:	2a00      	cmp	r2, #0
   1ade0:	d043      	beq.n	1ae6a <stream_handler_get+0xb4>
   1ade2:	f8da 500c 	ldr.w	r5, [sl, #12]
   1ade6:	42aa      	cmp	r2, r5
   1ade8:	bf28      	it	cs
   1adea:	462a      	movcs	r2, r5
   1adec:	f8ca 200c 	str.w	r2, [sl, #12]
   1adf0:	f000 fe4c 	bl	1ba8c <memcpy>
   1adf4:	2500      	movs	r5, #0
   1adf6:	f8da 3004 	ldr.w	r3, [sl, #4]
   1adfa:	6931      	ldr	r1, [r6, #16]
   1adfc:	9301      	str	r3, [sp, #4]
   1adfe:	f8da 3000 	ldr.w	r3, [sl]
   1ae02:	9302      	str	r3, [sp, #8]
   1ae04:	f007 0320 	and.w	r3, r7, #32
   1ae08:	9303      	str	r3, [sp, #12]
   1ae0a:	f007 0708 	and.w	r7, r7, #8
   1ae0e:	9b01      	ldr	r3, [sp, #4]
   1ae10:	42ab      	cmp	r3, r5
   1ae12:	d924      	bls.n	1ae5e <stream_handler_get+0xa8>
   1ae14:	68a2      	ldr	r2, [r4, #8]
   1ae16:	9b01      	ldr	r3, [sp, #4]
   1ae18:	eba2 0801 	sub.w	r8, r2, r1
   1ae1c:	eba3 0b05 	sub.w	fp, r3, r5
   1ae20:	f8da 2000 	ldr.w	r2, [sl]
   1ae24:	45d8      	cmp	r8, fp
   1ae26:	46c1      	mov	r9, r8
   1ae28:	bf28      	it	cs
   1ae2a:	46d9      	movcs	r9, fp
   1ae2c:	b142      	cbz	r2, 1ae40 <stream_handler_get+0x8a>
   1ae2e:	9b03      	ldr	r3, [sp, #12]
   1ae30:	b933      	cbnz	r3, 1ae40 <stream_handler_get+0x8a>
   1ae32:	6860      	ldr	r0, [r4, #4]
   1ae34:	9b02      	ldr	r3, [sp, #8]
   1ae36:	4401      	add	r1, r0
   1ae38:	464a      	mov	r2, r9
   1ae3a:	1958      	adds	r0, r3, r5
   1ae3c:	f000 fe26 	bl	1ba8c <memcpy>
   1ae40:	4620      	mov	r0, r4
   1ae42:	f000 fa82 	bl	1b34a <linked_list_get_next>
   1ae46:	4604      	mov	r4, r0
   1ae48:	b92f      	cbnz	r7, 1ae56 <stream_handler_get+0xa0>
   1ae4a:	45d8      	cmp	r8, fp
   1ae4c:	d811      	bhi.n	1ae72 <stream_handler_get+0xbc>
   1ae4e:	4630      	mov	r0, r6
   1ae50:	f7ff ff6c 	bl	1ad2c <stream_handler_free_packet>
   1ae54:	6137      	str	r7, [r6, #16]
   1ae56:	2100      	movs	r1, #0
   1ae58:	444d      	add	r5, r9
   1ae5a:	2c00      	cmp	r4, #0
   1ae5c:	d1d7      	bne.n	1ae0e <stream_handler_get+0x58>
   1ae5e:	4628      	mov	r0, r5
   1ae60:	f8ca 5004 	str.w	r5, [sl, #4]
   1ae64:	b005      	add	sp, #20
   1ae66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae6a:	2200      	movs	r2, #0
   1ae6c:	f8ca 200c 	str.w	r2, [sl, #12]
   1ae70:	e7c0      	b.n	1adf4 <stream_handler_get+0x3e>
   1ae72:	6932      	ldr	r2, [r6, #16]
   1ae74:	444a      	add	r2, r9
   1ae76:	6132      	str	r2, [r6, #16]
   1ae78:	e7ed      	b.n	1ae56 <stream_handler_get+0xa0>
   1ae7a:	f04f 30ff 	mov.w	r0, #4294967295
   1ae7e:	e7f1      	b.n	1ae64 <stream_handler_get+0xae>

0001ae80 <stream_handler_available>:
   1ae80:	b510      	push	{r4, lr}
   1ae82:	4604      	mov	r4, r0
   1ae84:	68c0      	ldr	r0, [r0, #12]
   1ae86:	f000 fa58 	bl	1b33a <linked_list_peek>
   1ae8a:	b150      	cbz	r0, 1aea2 <stream_handler_available+0x22>
   1ae8c:	6924      	ldr	r4, [r4, #16]
   1ae8e:	4264      	negs	r4, r4
   1ae90:	6883      	ldr	r3, [r0, #8]
   1ae92:	441c      	add	r4, r3
   1ae94:	f000 fa59 	bl	1b34a <linked_list_get_next>
   1ae98:	2800      	cmp	r0, #0
   1ae9a:	d1f9      	bne.n	1ae90 <stream_handler_available+0x10>
   1ae9c:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1aea0:	bd10      	pop	{r4, pc}
   1aea2:	f04f 30ff 	mov.w	r0, #4294967295
   1aea6:	e7fb      	b.n	1aea0 <stream_handler_available+0x20>

0001aea8 <stream_handler_flush>:
   1aea8:	68c3      	ldr	r3, [r0, #12]
   1aeaa:	b510      	push	{r4, lr}
   1aeac:	4604      	mov	r4, r0
   1aeae:	b923      	cbnz	r3, 1aeba <stream_handler_flush+0x12>
   1aeb0:	2016      	movs	r0, #22
   1aeb2:	e007      	b.n	1aec4 <stream_handler_flush+0x1c>
   1aeb4:	4620      	mov	r0, r4
   1aeb6:	f7ff ff39 	bl	1ad2c <stream_handler_free_packet>
   1aeba:	68e0      	ldr	r0, [r4, #12]
   1aebc:	f000 fa43 	bl	1b346 <linked_list_size_get>
   1aec0:	2800      	cmp	r0, #0
   1aec2:	d1f7      	bne.n	1aeb4 <stream_handler_flush+0xc>
   1aec4:	bd10      	pop	{r4, pc}

0001aec6 <stream_handler_free>:
   1aec6:	68c3      	ldr	r3, [r0, #12]
   1aec8:	b510      	push	{r4, lr}
   1aeca:	4604      	mov	r4, r0
   1aecc:	b133      	cbz	r3, 1aedc <stream_handler_free+0x16>
   1aece:	f7ff ffeb 	bl	1aea8 <stream_handler_flush>
   1aed2:	68e0      	ldr	r0, [r4, #12]
   1aed4:	f7f6 fba0 	bl	11618 <nrf_modem_os_free>
   1aed8:	2300      	movs	r3, #0
   1aeda:	60e3      	str	r3, [r4, #12]
   1aedc:	bd10      	pop	{r4, pc}

0001aede <datagram_handler_free_packet>:
   1aede:	b530      	push	{r4, r5, lr}
   1aee0:	4605      	mov	r5, r0
   1aee2:	b085      	sub	sp, #20
   1aee4:	68c0      	ldr	r0, [r0, #12]
   1aee6:	f000 fa1e 	bl	1b326 <linked_list_pop>
   1aeea:	4604      	mov	r4, r0
   1aeec:	b170      	cbz	r0, 1af0c <datagram_handler_free_packet+0x2e>
   1aeee:	6843      	ldr	r3, [r0, #4]
   1aef0:	9300      	str	r3, [sp, #0]
   1aef2:	6883      	ldr	r3, [r0, #8]
   1aef4:	9301      	str	r3, [sp, #4]
   1aef6:	6903      	ldr	r3, [r0, #16]
   1aef8:	9302      	str	r3, [sp, #8]
   1aefa:	68c3      	ldr	r3, [r0, #12]
   1aefc:	4668      	mov	r0, sp
   1aefe:	9303      	str	r3, [sp, #12]
   1af00:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1af04:	4798      	blx	r3
   1af06:	4620      	mov	r0, r4
   1af08:	f7f6 fb86 	bl	11618 <nrf_modem_os_free>
   1af0c:	b005      	add	sp, #20
   1af0e:	bd30      	pop	{r4, r5, pc}

0001af10 <datagram_handler_init>:
   1af10:	b510      	push	{r4, lr}
   1af12:	4604      	mov	r4, r0
   1af14:	200c      	movs	r0, #12
   1af16:	f7f6 fb6f 	bl	115f8 <nrf_modem_os_alloc>
   1af1a:	60e0      	str	r0, [r4, #12]
   1af1c:	b118      	cbz	r0, 1af26 <datagram_handler_init+0x16>
   1af1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1af22:	f000 b9e4 	b.w	1b2ee <linked_list_init>
   1af26:	200c      	movs	r0, #12
   1af28:	bd10      	pop	{r4, pc}

0001af2a <datagram_handler_put>:
   1af2a:	b570      	push	{r4, r5, r6, lr}
   1af2c:	4606      	mov	r6, r0
   1af2e:	2014      	movs	r0, #20
   1af30:	460d      	mov	r5, r1
   1af32:	f7f6 fb61 	bl	115f8 <nrf_modem_os_alloc>
   1af36:	4604      	mov	r4, r0
   1af38:	b178      	cbz	r0, 1af5a <datagram_handler_put+0x30>
   1af3a:	682b      	ldr	r3, [r5, #0]
   1af3c:	4601      	mov	r1, r0
   1af3e:	6043      	str	r3, [r0, #4]
   1af40:	686b      	ldr	r3, [r5, #4]
   1af42:	6083      	str	r3, [r0, #8]
   1af44:	68eb      	ldr	r3, [r5, #12]
   1af46:	60c3      	str	r3, [r0, #12]
   1af48:	68ab      	ldr	r3, [r5, #8]
   1af4a:	6103      	str	r3, [r0, #16]
   1af4c:	68f0      	ldr	r0, [r6, #12]
   1af4e:	f000 f9d7 	bl	1b300 <linked_list_push>
   1af52:	b128      	cbz	r0, 1af60 <datagram_handler_put+0x36>
   1af54:	4620      	mov	r0, r4
   1af56:	f7f6 fb5f 	bl	11618 <nrf_modem_os_free>
   1af5a:	f04f 30ff 	mov.w	r0, #4294967295
   1af5e:	e000      	b.n	1af62 <datagram_handler_put+0x38>
   1af60:	6868      	ldr	r0, [r5, #4]
   1af62:	bd70      	pop	{r4, r5, r6, pc}

0001af64 <datagram_handler_get>:
   1af64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af66:	4607      	mov	r7, r0
   1af68:	68c0      	ldr	r0, [r0, #12]
   1af6a:	460c      	mov	r4, r1
   1af6c:	4616      	mov	r6, r2
   1af6e:	f000 f9e4 	bl	1b33a <linked_list_peek>
   1af72:	4605      	mov	r5, r0
   1af74:	b328      	cbz	r0, 1afc2 <datagram_handler_get+0x5e>
   1af76:	6882      	ldr	r2, [r0, #8]
   1af78:	6863      	ldr	r3, [r4, #4]
   1af7a:	6820      	ldr	r0, [r4, #0]
   1af7c:	429a      	cmp	r2, r3
   1af7e:	bf28      	it	cs
   1af80:	461a      	movcs	r2, r3
   1af82:	6062      	str	r2, [r4, #4]
   1af84:	b110      	cbz	r0, 1af8c <datagram_handler_get+0x28>
   1af86:	6869      	ldr	r1, [r5, #4]
   1af88:	f000 fd80 	bl	1ba8c <memcpy>
   1af8c:	68a0      	ldr	r0, [r4, #8]
   1af8e:	b1a8      	cbz	r0, 1afbc <datagram_handler_get+0x58>
   1af90:	6929      	ldr	r1, [r5, #16]
   1af92:	b199      	cbz	r1, 1afbc <datagram_handler_get+0x58>
   1af94:	68eb      	ldr	r3, [r5, #12]
   1af96:	b18b      	cbz	r3, 1afbc <datagram_handler_get+0x58>
   1af98:	68e2      	ldr	r2, [r4, #12]
   1af9a:	429a      	cmp	r2, r3
   1af9c:	bf28      	it	cs
   1af9e:	461a      	movcs	r2, r3
   1afa0:	60e2      	str	r2, [r4, #12]
   1afa2:	f000 fd73 	bl	1ba8c <memcpy>
   1afa6:	0732      	lsls	r2, r6, #28
   1afa8:	68ad      	ldr	r5, [r5, #8]
   1afaa:	d402      	bmi.n	1afb2 <datagram_handler_get+0x4e>
   1afac:	4638      	mov	r0, r7
   1afae:	f7ff ff96 	bl	1aede <datagram_handler_free_packet>
   1afb2:	06b3      	lsls	r3, r6, #26
   1afb4:	bf4c      	ite	mi
   1afb6:	4628      	movmi	r0, r5
   1afb8:	6860      	ldrpl	r0, [r4, #4]
   1afba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1afbc:	2300      	movs	r3, #0
   1afbe:	60e3      	str	r3, [r4, #12]
   1afc0:	e7f1      	b.n	1afa6 <datagram_handler_get+0x42>
   1afc2:	f04f 30ff 	mov.w	r0, #4294967295
   1afc6:	e7f8      	b.n	1afba <datagram_handler_get+0x56>

0001afc8 <datagram_handler_available>:
   1afc8:	b508      	push	{r3, lr}
   1afca:	68c0      	ldr	r0, [r0, #12]
   1afcc:	f000 f9b5 	bl	1b33a <linked_list_peek>
   1afd0:	b108      	cbz	r0, 1afd6 <datagram_handler_available+0xe>
   1afd2:	6880      	ldr	r0, [r0, #8]
   1afd4:	bd08      	pop	{r3, pc}
   1afd6:	f04f 30ff 	mov.w	r0, #4294967295
   1afda:	e7fb      	b.n	1afd4 <datagram_handler_available+0xc>

0001afdc <datagram_handler_flush>:
   1afdc:	68c3      	ldr	r3, [r0, #12]
   1afde:	b510      	push	{r4, lr}
   1afe0:	4604      	mov	r4, r0
   1afe2:	b923      	cbnz	r3, 1afee <datagram_handler_flush+0x12>
   1afe4:	2016      	movs	r0, #22
   1afe6:	e007      	b.n	1aff8 <datagram_handler_flush+0x1c>
   1afe8:	4620      	mov	r0, r4
   1afea:	f7ff ff78 	bl	1aede <datagram_handler_free_packet>
   1afee:	68e0      	ldr	r0, [r4, #12]
   1aff0:	f000 f9a9 	bl	1b346 <linked_list_size_get>
   1aff4:	2800      	cmp	r0, #0
   1aff6:	d1f7      	bne.n	1afe8 <datagram_handler_flush+0xc>
   1aff8:	bd10      	pop	{r4, pc}

0001affa <datagram_handler_free>:
   1affa:	68c3      	ldr	r3, [r0, #12]
   1affc:	b510      	push	{r4, lr}
   1affe:	4604      	mov	r4, r0
   1b000:	b133      	cbz	r3, 1b010 <datagram_handler_free+0x16>
   1b002:	f7ff ffeb 	bl	1afdc <datagram_handler_flush>
   1b006:	68e0      	ldr	r0, [r4, #12]
   1b008:	f7f6 fb06 	bl	11618 <nrf_modem_os_free>
   1b00c:	2300      	movs	r3, #0
   1b00e:	60e3      	str	r3, [r4, #12]
   1b010:	bd10      	pop	{r4, pc}

0001b012 <packet_handler_delete>:
   1b012:	b510      	push	{r4, lr}
   1b014:	4604      	mov	r4, r0
   1b016:	6803      	ldr	r3, [r0, #0]
   1b018:	691b      	ldr	r3, [r3, #16]
   1b01a:	4798      	blx	r3
   1b01c:	6823      	ldr	r3, [r4, #0]
   1b01e:	4620      	mov	r0, r4
   1b020:	695b      	ldr	r3, [r3, #20]
   1b022:	4798      	blx	r3
   1b024:	4620      	mov	r0, r4
   1b026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b02a:	f7f6 baf5 	b.w	11618 <nrf_modem_os_free>

0001b02e <nrf_modem_recoverable_error_handler>:
   1b02e:	4770      	bx	lr

0001b030 <nrf_modem_platform_error_handler>:
   1b030:	b508      	push	{r3, lr}
   1b032:	f7ff fffc 	bl	1b02e <nrf_modem_recoverable_error_handler>
   1b036:	bd08      	pop	{r3, pc}

0001b038 <unimplemented_method>:
   1b038:	b40f      	push	{r0, r1, r2, r3}
   1b03a:	b508      	push	{r3, lr}
   1b03c:	202d      	movs	r0, #45	; 0x2d
   1b03e:	f7f6 f947 	bl	112d0 <nrf_modem_os_errno_set>
   1b042:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b046:	f04f 30ff 	mov.w	r0, #4294967295
   1b04a:	b004      	add	sp, #16
   1b04c:	4770      	bx	lr

0001b04e <rpc_transport_ipc_fault_handler>:
   1b04e:	f7ff bfef 	b.w	1b030 <nrf_modem_platform_error_handler>

0001b052 <nrf_modem_platform_init>:
   1b052:	b513      	push	{r0, r1, r4, lr}
   1b054:	4604      	mov	r4, r0
   1b056:	f7f6 fafb 	bl	11650 <nrf_modem_os_init>
   1b05a:	6a23      	ldr	r3, [r4, #32]
   1b05c:	4668      	mov	r0, sp
   1b05e:	9400      	str	r4, [sp, #0]
   1b060:	f88d 3004 	strb.w	r3, [sp, #4]
   1b064:	f7f7 fe22 	bl	12cac <rpc_transport_ipc_init>
   1b068:	b920      	cbnz	r0, 1b074 <nrf_modem_platform_init+0x22>
   1b06a:	f7f7 ff7d 	bl	12f68 <interface_init>
   1b06e:	b118      	cbz	r0, 1b078 <nrf_modem_platform_init+0x26>
   1b070:	f04f 30ff 	mov.w	r0, #4294967295
   1b074:	b002      	add	sp, #8
   1b076:	bd10      	pop	{r4, pc}
   1b078:	f7f9 fc00 	bl	1487c <at_interface_init>
   1b07c:	2800      	cmp	r0, #0
   1b07e:	d1f7      	bne.n	1b070 <nrf_modem_platform_init+0x1e>
   1b080:	f7f8 f8c4 	bl	1320c <ip_interface_init>
   1b084:	2800      	cmp	r0, #0
   1b086:	d1f3      	bne.n	1b070 <nrf_modem_platform_init+0x1e>
   1b088:	f7f9 f870 	bl	1416c <tls_interface_init>
   1b08c:	2800      	cmp	r0, #0
   1b08e:	d1ef      	bne.n	1b070 <nrf_modem_platform_init+0x1e>
   1b090:	f7f9 fca8 	bl	149e4 <mfu_interface_init>
   1b094:	2800      	cmp	r0, #0
   1b096:	d1eb      	bne.n	1b070 <nrf_modem_platform_init+0x1e>
   1b098:	f7fa fb7c 	bl	15794 <pdn_interface_init>
   1b09c:	2800      	cmp	r0, #0
   1b09e:	d1e7      	bne.n	1b070 <nrf_modem_platform_init+0x1e>
   1b0a0:	f7fa f9f8 	bl	15494 <gnss_interface_init>
   1b0a4:	3800      	subs	r0, #0
   1b0a6:	bf18      	it	ne
   1b0a8:	2001      	movne	r0, #1
   1b0aa:	4240      	negs	r0, r0
   1b0ac:	e7e2      	b.n	1b074 <nrf_modem_platform_init+0x22>

0001b0ae <internal_poll>:
   1b0ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b0b2:	2600      	movs	r6, #0
   1b0b4:	4688      	mov	r8, r1
   1b0b6:	4605      	mov	r5, r0
   1b0b8:	4637      	mov	r7, r6
   1b0ba:	4546      	cmp	r6, r8
   1b0bc:	d103      	bne.n	1b0c6 <internal_poll+0x18>
   1b0be:	4638      	mov	r0, r7
   1b0c0:	b002      	add	sp, #8
   1b0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b0c6:	88ab      	ldrh	r3, [r5, #4]
   1b0c8:	6828      	ldr	r0, [r5, #0]
   1b0ca:	f003 0303 	and.w	r3, r3, #3
   1b0ce:	a901      	add	r1, sp, #4
   1b0d0:	f043 041c 	orr.w	r4, r3, #28
   1b0d4:	f7ff f8fa 	bl	1a2cc <interface_socket_event_get>
   1b0d8:	9b01      	ldr	r3, [sp, #4]
   1b0da:	4023      	ands	r3, r4
   1b0dc:	80eb      	strh	r3, [r5, #6]
   1b0de:	b103      	cbz	r3, 1b0e2 <internal_poll+0x34>
   1b0e0:	3701      	adds	r7, #1
   1b0e2:	3601      	adds	r6, #1
   1b0e4:	3508      	adds	r5, #8
   1b0e6:	e7e8      	b.n	1b0ba <internal_poll+0xc>

0001b0e8 <nrf_modem_platform_getaddrinfo>:
   1b0e8:	f7f8 bcac 	b.w	13a44 <ip_interface_getaddrinfo>

0001b0ec <nrf_modem_platform_freeaddrinfo>:
   1b0ec:	f7f8 bd7e 	b.w	13bec <ip_interface_freeaddrinfo>

0001b0f0 <nrf_modem_platform_poll>:
   1b0f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b0f2:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   1b0f6:	460e      	mov	r6, r1
   1b0f8:	4605      	mov	r5, r0
   1b0fa:	9201      	str	r2, [sp, #4]
   1b0fc:	b110      	cbz	r0, 1b104 <nrf_modem_platform_poll+0x14>
   1b0fe:	1e4b      	subs	r3, r1, #1
   1b100:	2b08      	cmp	r3, #8
   1b102:	d906      	bls.n	1b112 <nrf_modem_platform_poll+0x22>
   1b104:	2016      	movs	r0, #22
   1b106:	f7f6 f8e3 	bl	112d0 <nrf_modem_os_errno_set>
   1b10a:	f04f 30ff 	mov.w	r0, #4294967295
   1b10e:	b002      	add	sp, #8
   1b110:	bd70      	pop	{r4, r5, r6, pc}
   1b112:	f7ff ffcc 	bl	1b0ae <internal_poll>
   1b116:	2400      	movs	r4, #0
   1b118:	2800      	cmp	r0, #0
   1b11a:	d1f8      	bne.n	1b10e <nrf_modem_platform_poll+0x1e>
   1b11c:	2c00      	cmp	r4, #0
   1b11e:	d1f6      	bne.n	1b10e <nrf_modem_platform_poll+0x1e>
   1b120:	4628      	mov	r0, r5
   1b122:	a901      	add	r1, sp, #4
   1b124:	f7f6 f81c 	bl	11160 <nrf_modem_os_timedwait>
   1b128:	4604      	mov	r4, r0
   1b12a:	b118      	cbz	r0, 1b134 <nrf_modem_platform_poll+0x44>
   1b12c:	283c      	cmp	r0, #60	; 0x3c
   1b12e:	d001      	beq.n	1b134 <nrf_modem_platform_poll+0x44>
   1b130:	2023      	movs	r0, #35	; 0x23
   1b132:	e7e8      	b.n	1b106 <nrf_modem_platform_poll+0x16>
   1b134:	4631      	mov	r1, r6
   1b136:	4628      	mov	r0, r5
   1b138:	f7ff ffb9 	bl	1b0ae <internal_poll>
   1b13c:	e7ec      	b.n	1b118 <nrf_modem_platform_poll+0x28>

0001b13e <nrf_socket>:
   1b13e:	b570      	push	{r4, r5, r6, lr}
   1b140:	4604      	mov	r4, r0
   1b142:	460d      	mov	r5, r1
   1b144:	4616      	mov	r6, r2
   1b146:	f7fa ff67 	bl	16018 <nrf_modem_platform_af_method_table_get>
   1b14a:	b130      	cbz	r0, 1b15a <nrf_socket+0x1c>
   1b14c:	4632      	mov	r2, r6
   1b14e:	4629      	mov	r1, r5
   1b150:	6803      	ldr	r3, [r0, #0]
   1b152:	4620      	mov	r0, r4
   1b154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b158:	4718      	bx	r3
   1b15a:	f04f 30ff 	mov.w	r0, #4294967295
   1b15e:	bd70      	pop	{r4, r5, r6, pc}

0001b160 <nrf_close>:
   1b160:	b510      	push	{r4, lr}
   1b162:	4604      	mov	r4, r0
   1b164:	f7fa ffaa 	bl	160bc <nrf_modem_platform_fd_method_table_get>
   1b168:	b120      	cbz	r0, 1b174 <nrf_close+0x14>
   1b16a:	6843      	ldr	r3, [r0, #4]
   1b16c:	4620      	mov	r0, r4
   1b16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b172:	4718      	bx	r3
   1b174:	f04f 30ff 	mov.w	r0, #4294967295
   1b178:	bd10      	pop	{r4, pc}

0001b17a <nrf_sendto>:
   1b17a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1b17c:	4604      	mov	r4, r0
   1b17e:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   1b182:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1b186:	9301      	str	r3, [sp, #4]
   1b188:	f7fa ff98 	bl	160bc <nrf_modem_platform_fd_method_table_get>
   1b18c:	b158      	cbz	r0, 1b1a6 <nrf_sendto+0x2c>
   1b18e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   1b192:	e9cd 5608 	strd	r5, r6, [sp, #32]
   1b196:	6885      	ldr	r5, [r0, #8]
   1b198:	4620      	mov	r0, r4
   1b19a:	46ac      	mov	ip, r5
   1b19c:	9903      	ldr	r1, [sp, #12]
   1b19e:	b004      	add	sp, #16
   1b1a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b1a4:	4760      	bx	ip
   1b1a6:	f04f 30ff 	mov.w	r0, #4294967295
   1b1aa:	b004      	add	sp, #16
   1b1ac:	bd70      	pop	{r4, r5, r6, pc}

0001b1ae <nrf_recvfrom>:
   1b1ae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1b1b0:	4604      	mov	r4, r0
   1b1b2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   1b1b6:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1b1ba:	9301      	str	r3, [sp, #4]
   1b1bc:	f7fa ff7e 	bl	160bc <nrf_modem_platform_fd_method_table_get>
   1b1c0:	b158      	cbz	r0, 1b1da <nrf_recvfrom+0x2c>
   1b1c2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   1b1c6:	e9cd 5608 	strd	r5, r6, [sp, #32]
   1b1ca:	68c5      	ldr	r5, [r0, #12]
   1b1cc:	4620      	mov	r0, r4
   1b1ce:	46ac      	mov	ip, r5
   1b1d0:	9903      	ldr	r1, [sp, #12]
   1b1d2:	b004      	add	sp, #16
   1b1d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b1d8:	4760      	bx	ip
   1b1da:	f04f 30ff 	mov.w	r0, #4294967295
   1b1de:	b004      	add	sp, #16
   1b1e0:	bd70      	pop	{r4, r5, r6, pc}

0001b1e2 <nrf_connect>:
   1b1e2:	b513      	push	{r0, r1, r4, lr}
   1b1e4:	4604      	mov	r4, r0
   1b1e6:	e9cd 2100 	strd	r2, r1, [sp]
   1b1ea:	f7fa ff67 	bl	160bc <nrf_modem_platform_fd_method_table_get>
   1b1ee:	b138      	cbz	r0, 1b200 <nrf_connect+0x1e>
   1b1f0:	e9dd 2100 	ldrd	r2, r1, [sp]
   1b1f4:	6943      	ldr	r3, [r0, #20]
   1b1f6:	4620      	mov	r0, r4
   1b1f8:	b002      	add	sp, #8
   1b1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b1fe:	4718      	bx	r3
   1b200:	f04f 30ff 	mov.w	r0, #4294967295
   1b204:	b002      	add	sp, #8
   1b206:	bd10      	pop	{r4, pc}

0001b208 <nrf_listen>:
   1b208:	b513      	push	{r0, r1, r4, lr}
   1b20a:	4604      	mov	r4, r0
   1b20c:	9101      	str	r1, [sp, #4]
   1b20e:	f7fa ff55 	bl	160bc <nrf_modem_platform_fd_method_table_get>
   1b212:	b130      	cbz	r0, 1b222 <nrf_listen+0x1a>
   1b214:	6983      	ldr	r3, [r0, #24]
   1b216:	4620      	mov	r0, r4
   1b218:	9901      	ldr	r1, [sp, #4]
   1b21a:	b002      	add	sp, #8
   1b21c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b220:	4718      	bx	r3
   1b222:	f04f 30ff 	mov.w	r0, #4294967295
   1b226:	b002      	add	sp, #8
   1b228:	bd10      	pop	{r4, pc}

0001b22a <nrf_accept>:
   1b22a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b22c:	4604      	mov	r4, r0
   1b22e:	e9cd 2100 	strd	r2, r1, [sp]
   1b232:	f7fa ff43 	bl	160bc <nrf_modem_platform_fd_method_table_get>
   1b236:	b148      	cbz	r0, 1b24c <nrf_accept+0x22>
   1b238:	e9dd 2100 	ldrd	r2, r1, [sp]
   1b23c:	69c5      	ldr	r5, [r0, #28]
   1b23e:	2300      	movs	r3, #0
   1b240:	4620      	mov	r0, r4
   1b242:	46ac      	mov	ip, r5
   1b244:	b003      	add	sp, #12
   1b246:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1b24a:	4760      	bx	ip
   1b24c:	f04f 30ff 	mov.w	r0, #4294967295
   1b250:	b003      	add	sp, #12
   1b252:	bd30      	pop	{r4, r5, pc}

0001b254 <nrf_bind>:
   1b254:	b513      	push	{r0, r1, r4, lr}
   1b256:	4604      	mov	r4, r0
   1b258:	e9cd 2100 	strd	r2, r1, [sp]
   1b25c:	f7fa ff2e 	bl	160bc <nrf_modem_platform_fd_method_table_get>
   1b260:	b138      	cbz	r0, 1b272 <nrf_bind+0x1e>
   1b262:	e9dd 2100 	ldrd	r2, r1, [sp]
   1b266:	6903      	ldr	r3, [r0, #16]
   1b268:	4620      	mov	r0, r4
   1b26a:	b002      	add	sp, #8
   1b26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b270:	4718      	bx	r3
   1b272:	f04f 30ff 	mov.w	r0, #4294967295
   1b276:	b002      	add	sp, #8
   1b278:	bd10      	pop	{r4, pc}

0001b27a <nrf_setsockopt>:
   1b27a:	b530      	push	{r4, r5, lr}
   1b27c:	b085      	sub	sp, #20
   1b27e:	4604      	mov	r4, r0
   1b280:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1b284:	9d08      	ldr	r5, [sp, #32]
   1b286:	9301      	str	r3, [sp, #4]
   1b288:	f7fa ff18 	bl	160bc <nrf_modem_platform_fd_method_table_get>
   1b28c:	b150      	cbz	r0, 1b2a4 <nrf_setsockopt+0x2a>
   1b28e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   1b292:	9508      	str	r5, [sp, #32]
   1b294:	6a05      	ldr	r5, [r0, #32]
   1b296:	4620      	mov	r0, r4
   1b298:	46ac      	mov	ip, r5
   1b29a:	9903      	ldr	r1, [sp, #12]
   1b29c:	b005      	add	sp, #20
   1b29e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1b2a2:	4760      	bx	ip
   1b2a4:	f04f 30ff 	mov.w	r0, #4294967295
   1b2a8:	b005      	add	sp, #20
   1b2aa:	bd30      	pop	{r4, r5, pc}

0001b2ac <nrf_getsockopt>:
   1b2ac:	b530      	push	{r4, r5, lr}
   1b2ae:	b085      	sub	sp, #20
   1b2b0:	4604      	mov	r4, r0
   1b2b2:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1b2b6:	9d08      	ldr	r5, [sp, #32]
   1b2b8:	9301      	str	r3, [sp, #4]
   1b2ba:	f7fa feff 	bl	160bc <nrf_modem_platform_fd_method_table_get>
   1b2be:	b150      	cbz	r0, 1b2d6 <nrf_getsockopt+0x2a>
   1b2c0:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   1b2c4:	9508      	str	r5, [sp, #32]
   1b2c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1b2c8:	4620      	mov	r0, r4
   1b2ca:	46ac      	mov	ip, r5
   1b2cc:	9903      	ldr	r1, [sp, #12]
   1b2ce:	b005      	add	sp, #20
   1b2d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1b2d4:	4760      	bx	ip
   1b2d6:	f04f 30ff 	mov.w	r0, #4294967295
   1b2da:	b005      	add	sp, #20
   1b2dc:	bd30      	pop	{r4, r5, pc}

0001b2de <nrf_getaddrinfo>:
   1b2de:	f7ff bf03 	b.w	1b0e8 <nrf_modem_platform_getaddrinfo>

0001b2e2 <nrf_freeaddrinfo>:
   1b2e2:	f7ff bf03 	b.w	1b0ec <nrf_modem_platform_freeaddrinfo>

0001b2e6 <nrf_poll>:
   1b2e6:	f7ff bf03 	b.w	1b0f0 <nrf_modem_platform_poll>

0001b2ea <nrf_fcntl>:
   1b2ea:	f7fa bf17 	b.w	1611c <nrf_modem_platform_fcntl>

0001b2ee <linked_list_init>:
   1b2ee:	b128      	cbz	r0, 1b2fc <linked_list_init+0xe>
   1b2f0:	2300      	movs	r3, #0
   1b2f2:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1b2f6:	6003      	str	r3, [r0, #0]
   1b2f8:	4618      	mov	r0, r3
   1b2fa:	4770      	bx	lr
   1b2fc:	2016      	movs	r0, #22
   1b2fe:	4770      	bx	lr

0001b300 <linked_list_push>:
   1b300:	6803      	ldr	r3, [r0, #0]
   1b302:	3301      	adds	r3, #1
   1b304:	d00d      	beq.n	1b322 <linked_list_push+0x22>
   1b306:	2300      	movs	r3, #0
   1b308:	600b      	str	r3, [r1, #0]
   1b30a:	6803      	ldr	r3, [r0, #0]
   1b30c:	b933      	cbnz	r3, 1b31c <linked_list_push+0x1c>
   1b30e:	6041      	str	r1, [r0, #4]
   1b310:	6803      	ldr	r3, [r0, #0]
   1b312:	6081      	str	r1, [r0, #8]
   1b314:	3301      	adds	r3, #1
   1b316:	6003      	str	r3, [r0, #0]
   1b318:	2000      	movs	r0, #0
   1b31a:	4770      	bx	lr
   1b31c:	6883      	ldr	r3, [r0, #8]
   1b31e:	6019      	str	r1, [r3, #0]
   1b320:	e7f6      	b.n	1b310 <linked_list_push+0x10>
   1b322:	200c      	movs	r0, #12
   1b324:	4770      	bx	lr

0001b326 <linked_list_pop>:
   1b326:	4603      	mov	r3, r0
   1b328:	6800      	ldr	r0, [r0, #0]
   1b32a:	b128      	cbz	r0, 1b338 <linked_list_pop+0x12>
   1b32c:	6858      	ldr	r0, [r3, #4]
   1b32e:	6802      	ldr	r2, [r0, #0]
   1b330:	605a      	str	r2, [r3, #4]
   1b332:	681a      	ldr	r2, [r3, #0]
   1b334:	3a01      	subs	r2, #1
   1b336:	601a      	str	r2, [r3, #0]
   1b338:	4770      	bx	lr

0001b33a <linked_list_peek>:
   1b33a:	6803      	ldr	r3, [r0, #0]
   1b33c:	b10b      	cbz	r3, 1b342 <linked_list_peek+0x8>
   1b33e:	6840      	ldr	r0, [r0, #4]
   1b340:	4770      	bx	lr
   1b342:	4618      	mov	r0, r3
   1b344:	4770      	bx	lr

0001b346 <linked_list_size_get>:
   1b346:	6800      	ldr	r0, [r0, #0]
   1b348:	4770      	bx	lr

0001b34a <linked_list_get_next>:
   1b34a:	6800      	ldr	r0, [r0, #0]
   1b34c:	4770      	bx	lr

0001b34e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1b34e:	4700      	bx	r0

0001b350 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1b350:	f000 ba2c 	b.w	1b7ac <z_impl_k_busy_wait>

0001b354 <nrfx_clock_enable>:
{
   1b354:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1b356:	2005      	movs	r0, #5
   1b358:	f7f4 fbfc 	bl	fb54 <arch_irq_is_enabled>
   1b35c:	b920      	cbnz	r0, 1b368 <nrfx_clock_enable+0x14>
}
   1b35e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1b362:	2005      	movs	r0, #5
   1b364:	f7f4 bbe6 	b.w	fb34 <arch_irq_enable>
   1b368:	bd08      	pop	{r3, pc}

0001b36a <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   1b36a:	f7fe b813 	b.w	19394 <z_clock_idle_exit>

0001b36e <k_heap_init>:
{
   1b36e:	b410      	push	{r4}
   1b370:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1b374:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1b378:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   1b37c:	f7fd bb79 	b.w	18a72 <sys_heap_init>

0001b380 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1b380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b384:	b087      	sub	sp, #28
   1b386:	4604      	mov	r4, r0
   1b388:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   1b38a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   1b38e:	4617      	mov	r7, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   1b390:	f000 fa5c 	bl	1b84c <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1b394:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   1b398:	4605      	mov	r5, r0
   1b39a:	4688      	mov	r8, r1
	__asm__ volatile(
   1b39c:	f04f 0320 	mov.w	r3, #32
   1b3a0:	f3ef 8b11 	mrs	fp, BASEPRI
   1b3a4:	f383 8811 	msr	BASEPRI, r3
   1b3a8:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1b3ac:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1b3b0:	463a      	mov	r2, r7
   1b3b2:	4631      	mov	r1, r6
   1b3b4:	4620      	mov	r0, r4
   1b3b6:	f7fd faff 	bl	189b8 <sys_heap_aligned_alloc>
   1b3ba:	9005      	str	r0, [sp, #20]
		now = z_tick_get();
   1b3bc:	f7fc faee 	bl	1799c <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   1b3c0:	9b05      	ldr	r3, [sp, #20]
   1b3c2:	b13b      	cbz	r3, 1b3d4 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1b3c4:	f38b 8811 	msr	BASEPRI, fp
   1b3c8:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1b3cc:	4618      	mov	r0, r3
   1b3ce:	b007      	add	sp, #28
   1b3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   1b3d4:	1a2a      	subs	r2, r5, r0
   1b3d6:	9202      	str	r2, [sp, #8]
   1b3d8:	eb68 0201 	sbc.w	r2, r8, r1
   1b3dc:	9203      	str	r2, [sp, #12]
   1b3de:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1b3e2:	2901      	cmp	r1, #1
   1b3e4:	f172 0200 	sbcs.w	r2, r2, #0
   1b3e8:	dbec      	blt.n	1b3c4 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1b3ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b3ee:	4659      	mov	r1, fp
   1b3f0:	e9cd 2300 	strd	r2, r3, [sp]
   1b3f4:	4648      	mov	r0, r9
   1b3f6:	4652      	mov	r2, sl
   1b3f8:	f7fb fef0 	bl	171dc <z_pend_curr>
	__asm__ volatile(
   1b3fc:	f04f 0320 	mov.w	r3, #32
   1b400:	f3ef 8b11 	mrs	fp, BASEPRI
   1b404:	f383 8811 	msr	BASEPRI, r3
   1b408:	f3bf 8f6f 	isb	sy
   1b40c:	e7d0      	b.n	1b3b0 <k_heap_aligned_alloc+0x30>

0001b40e <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   1b40e:	b538      	push	{r3, r4, r5, lr}
   1b410:	4604      	mov	r4, r0
   1b412:	f04f 0320 	mov.w	r3, #32
   1b416:	f3ef 8511 	mrs	r5, BASEPRI
   1b41a:	f383 8811 	msr	BASEPRI, r3
   1b41e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1b422:	f7fd fa79 	bl	18918 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   1b426:	f104 000c 	add.w	r0, r4, #12
   1b42a:	f000 f999 	bl	1b760 <z_unpend_all>
   1b42e:	b130      	cbz	r0, 1b43e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1b430:	4629      	mov	r1, r5
   1b432:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1b436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1b43a:	f7fb bc87 	b.w	16d4c <z_reschedule>
	__asm__ volatile(
   1b43e:	f385 8811 	msr	BASEPRI, r5
   1b442:	f3bf 8f6f 	isb	sy
}
   1b446:	bd38      	pop	{r3, r4, r5, pc}

0001b448 <k_mem_slab_init>:
{
   1b448:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1b44a:	2400      	movs	r4, #0
   1b44c:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1b44e:	ea41 0402 	orr.w	r4, r1, r2
   1b452:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1b456:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1b45a:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1b45c:	d10c      	bne.n	1b478 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1b45e:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b460:	42a3      	cmp	r3, r4
   1b462:	d103      	bne.n	1b46c <k_mem_slab_init+0x24>
   1b464:	e9c0 0000 	strd	r0, r0, [r0]
}
   1b468:	2000      	movs	r0, #0
}
   1b46a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1b46c:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b46e:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   1b470:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   1b472:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1b474:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1b476:	e7f3      	b.n	1b460 <k_mem_slab_init+0x18>
		return -EINVAL;
   1b478:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1b47c:	e7f5      	b.n	1b46a <k_mem_slab_init+0x22>

0001b47e <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   1b47e:	2300      	movs	r3, #0
   1b480:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   1b484:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1b488:	4618      	mov	r0, r3
   1b48a:	4770      	bx	lr

0001b48c <queue_insert>:
{
   1b48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b490:	4699      	mov	r9, r3
   1b492:	4604      	mov	r4, r0
   1b494:	460d      	mov	r5, r1
   1b496:	4690      	mov	r8, r2
   1b498:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1b49c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1b4a0:	f04f 0220 	mov.w	r2, #32
   1b4a4:	f3ef 8711 	mrs	r7, BASEPRI
   1b4a8:	f382 8811 	msr	BASEPRI, r2
   1b4ac:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1b4b0:	b103      	cbz	r3, 1b4b4 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   1b4b2:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1b4b4:	4630      	mov	r0, r6
   1b4b6:	f000 f92e 	bl	1b716 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1b4ba:	b160      	cbz	r0, 1b4d6 <queue_insert+0x4a>
   1b4bc:	2400      	movs	r4, #0
   1b4be:	f8c0 8014 	str.w	r8, [r0, #20]
   1b4c2:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
	z_ready_thread(thread);
   1b4c6:	f000 f8cb 	bl	1b660 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1b4ca:	4630      	mov	r0, r6
   1b4cc:	4639      	mov	r1, r7
   1b4ce:	f7fb fc3d 	bl	16d4c <z_reschedule>
	return 0;
   1b4d2:	2000      	movs	r0, #0
   1b4d4:	e00c      	b.n	1b4f0 <queue_insert+0x64>
	if (alloc) {
   1b4d6:	f1b9 0f00 	cmp.w	r9, #0
   1b4da:	d01b      	beq.n	1b514 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   1b4dc:	2108      	movs	r1, #8
   1b4de:	f7fc fb29 	bl	17b34 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1b4e2:	b938      	cbnz	r0, 1b4f4 <queue_insert+0x68>
	__asm__ volatile(
   1b4e4:	f387 8811 	msr	BASEPRI, r7
   1b4e8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1b4ec:	f06f 000b 	mvn.w	r0, #11
}
   1b4f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1b4f4:	2301      	movs	r3, #1
		anode->data = data;
   1b4f6:	f8c0 8004 	str.w	r8, [r0, #4]
   1b4fa:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1b4fc:	6803      	ldr	r3, [r0, #0]
   1b4fe:	f003 0203 	and.w	r2, r3, #3
   1b502:	b95d      	cbnz	r5, 1b51c <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1b504:	6823      	ldr	r3, [r4, #0]
   1b506:	4313      	orrs	r3, r2
   1b508:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1b50a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1b50c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1b50e:	b973      	cbnz	r3, 1b52e <queue_insert+0xa2>
	list->tail = node;
   1b510:	6060      	str	r0, [r4, #4]
}
   1b512:	e00c      	b.n	1b52e <queue_insert+0xa2>
}
   1b514:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1b516:	f8c8 9000 	str.w	r9, [r8]
}
   1b51a:	e7ef      	b.n	1b4fc <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b51c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1b51e:	f033 0303 	bics.w	r3, r3, #3
   1b522:	d110      	bne.n	1b546 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1b524:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1b526:	6862      	ldr	r2, [r4, #4]
   1b528:	b93a      	cbnz	r2, 1b53a <queue_insert+0xae>
	list->head = node;
   1b52a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1b52e:	2104      	movs	r1, #4
   1b530:	f104 0010 	add.w	r0, r4, #16
   1b534:	f000 fa53 	bl	1b9de <z_handle_obj_poll_events>
   1b538:	e7c7      	b.n	1b4ca <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1b53a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1b53c:	f003 0303 	and.w	r3, r3, #3
   1b540:	4303      	orrs	r3, r0
   1b542:	6013      	str	r3, [r2, #0]
   1b544:	e7e4      	b.n	1b510 <queue_insert+0x84>
   1b546:	4313      	orrs	r3, r2
   1b548:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1b54a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1b54c:	f003 0303 	and.w	r3, r3, #3
   1b550:	4303      	orrs	r3, r0
   1b552:	602b      	str	r3, [r5, #0]
}
   1b554:	e7eb      	b.n	1b52e <queue_insert+0xa2>

0001b556 <z_queue_node_peek>:
{
   1b556:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1b558:	4604      	mov	r4, r0
   1b55a:	b130      	cbz	r0, 1b56a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1b55c:	6802      	ldr	r2, [r0, #0]
   1b55e:	0793      	lsls	r3, r2, #30
   1b560:	d003      	beq.n	1b56a <z_queue_node_peek+0x14>
		ret = anode->data;
   1b562:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1b564:	b109      	cbz	r1, 1b56a <z_queue_node_peek+0x14>
			k_free(anode);
   1b566:	f000 fa66 	bl	1ba36 <k_free>
}
   1b56a:	4620      	mov	r0, r4
   1b56c:	bd10      	pop	{r4, pc}

0001b56e <z_impl_k_queue_init>:
	list->head = NULL;
   1b56e:	2300      	movs	r3, #0
	list->tail = NULL;
   1b570:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   1b574:	f100 0308 	add.w	r3, r0, #8
   1b578:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1b57c:	f100 0310 	add.w	r3, r0, #16
   1b580:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1b584:	4770      	bx	lr

0001b586 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1b586:	2301      	movs	r3, #1
{
   1b588:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1b58a:	9300      	str	r3, [sp, #0]
   1b58c:	2300      	movs	r3, #0
{
   1b58e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1b590:	4619      	mov	r1, r3
   1b592:	f7ff ff7b 	bl	1b48c <queue_insert>
}
   1b596:	b003      	add	sp, #12
   1b598:	f85d fb04 	ldr.w	pc, [sp], #4

0001b59c <z_find_first_thread_to_unpend>:
{
   1b59c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b59e:	f04f 0320 	mov.w	r3, #32
   1b5a2:	f3ef 8411 	mrs	r4, BASEPRI
   1b5a6:	f383 8811 	msr	BASEPRI, r3
   1b5aa:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1b5ae:	f000 f84d 	bl	1b64c <z_priq_dumb_best>
	__asm__ volatile(
   1b5b2:	f384 8811 	msr	BASEPRI, r4
   1b5b6:	f3bf 8f6f 	isb	sy
}
   1b5ba:	bd10      	pop	{r4, pc}

0001b5bc <z_unpend_thread_no_timeout>:
{
   1b5bc:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b5be:	f04f 0320 	mov.w	r3, #32
   1b5c2:	f3ef 8411 	mrs	r4, BASEPRI
   1b5c6:	f383 8811 	msr	BASEPRI, r3
   1b5ca:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1b5ce:	f000 f81b 	bl	1b608 <unpend_thread_no_timeout>
	__asm__ volatile(
   1b5d2:	f384 8811 	msr	BASEPRI, r4
   1b5d6:	f3bf 8f6f 	isb	sy
}
   1b5da:	bd10      	pop	{r4, pc}

0001b5dc <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b5dc:	4603      	mov	r3, r0
   1b5de:	b920      	cbnz	r0, 1b5ea <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b5e0:	f3ef 8205 	mrs	r2, IPSR
   1b5e4:	b90a      	cbnz	r2, 1b5ea <z_reschedule_irqlock+0xe>
   1b5e6:	f7f4 ba89 	b.w	fafc <arch_swap>
   1b5ea:	f383 8811 	msr	BASEPRI, r3
   1b5ee:	f3bf 8f6f 	isb	sy
}
   1b5f2:	4770      	bx	lr

0001b5f4 <z_reschedule_unlocked>:
	__asm__ volatile(
   1b5f4:	f04f 0320 	mov.w	r3, #32
   1b5f8:	f3ef 8011 	mrs	r0, BASEPRI
   1b5fc:	f383 8811 	msr	BASEPRI, r3
   1b600:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1b604:	f7ff bfea 	b.w	1b5dc <z_reschedule_irqlock>

0001b608 <unpend_thread_no_timeout>:
{
   1b608:	4601      	mov	r1, r0
   1b60a:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1b60c:	6880      	ldr	r0, [r0, #8]
   1b60e:	f7fb fbc3 	bl	16d98 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1b612:	7b4b      	ldrb	r3, [r1, #13]
   1b614:	f023 0302 	bic.w	r3, r3, #2
   1b618:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   1b61a:	2300      	movs	r3, #0
   1b61c:	608b      	str	r3, [r1, #8]
}
   1b61e:	bd08      	pop	{r3, pc}

0001b620 <z_unpend_thread>:
{
   1b620:	b538      	push	{r3, r4, r5, lr}
   1b622:	4604      	mov	r4, r0
   1b624:	f04f 0320 	mov.w	r3, #32
   1b628:	f3ef 8511 	mrs	r5, BASEPRI
   1b62c:	f383 8811 	msr	BASEPRI, r3
   1b630:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1b634:	f7ff ffe8 	bl	1b608 <unpend_thread_no_timeout>
	__asm__ volatile(
   1b638:	f385 8811 	msr	BASEPRI, r5
   1b63c:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   1b640:	f104 0018 	add.w	r0, r4, #24
}
   1b644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b648:	f000 b8b9 	b.w	1b7be <z_abort_timeout>

0001b64c <z_priq_dumb_best>:
	return list->head == list;
   1b64c:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b64e:	4298      	cmp	r0, r3
   1b650:	d004      	beq.n	1b65c <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1b652:	2b00      	cmp	r3, #0
   1b654:	bf38      	it	cc
   1b656:	2300      	movcc	r3, #0
   1b658:	4618      	mov	r0, r3
   1b65a:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1b65c:	2000      	movs	r0, #0
}
   1b65e:	4770      	bx	lr

0001b660 <z_ready_thread>:
{
   1b660:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b662:	f04f 0320 	mov.w	r3, #32
   1b666:	f3ef 8411 	mrs	r4, BASEPRI
   1b66a:	f383 8811 	msr	BASEPRI, r3
   1b66e:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   1b672:	f7fb fbeb 	bl	16e4c <ready_thread>
	__asm__ volatile(
   1b676:	f384 8811 	msr	BASEPRI, r4
   1b67a:	f3bf 8f6f 	isb	sy
}
   1b67e:	bd10      	pop	{r4, pc}

0001b680 <z_thread_timeout>:
{
   1b680:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b682:	4604      	mov	r4, r0
	__asm__ volatile(
   1b684:	f04f 0320 	mov.w	r3, #32
   1b688:	f3ef 8511 	mrs	r5, BASEPRI
   1b68c:	f383 8811 	msr	BASEPRI, r3
   1b690:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1b694:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   1b698:	3818      	subs	r0, #24
		if (thread->base.pended_on != NULL) {
   1b69a:	b11b      	cbz	r3, 1b6a4 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   1b69c:	9001      	str	r0, [sp, #4]
   1b69e:	f7ff ffb3 	bl	1b608 <unpend_thread_no_timeout>
   1b6a2:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1b6a4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1b6a8:	f023 0314 	bic.w	r3, r3, #20
   1b6ac:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   1b6b0:	f7fb fbcc 	bl	16e4c <ready_thread>
	__asm__ volatile(
   1b6b4:	f385 8811 	msr	BASEPRI, r5
   1b6b8:	f3bf 8f6f 	isb	sy
}
   1b6bc:	b003      	add	sp, #12
   1b6be:	bd30      	pop	{r4, r5, pc}

0001b6c0 <add_to_waitq_locked>:
{
   1b6c0:	b538      	push	{r3, r4, r5, lr}
   1b6c2:	4604      	mov	r4, r0
   1b6c4:	460d      	mov	r5, r1
	unready_thread(thread);
   1b6c6:	f7fb fd49 	bl	1715c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1b6ca:	7b63      	ldrb	r3, [r4, #13]
   1b6cc:	f043 0302 	orr.w	r3, r3, #2
   1b6d0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1b6d2:	b1c5      	cbz	r5, 1b706 <add_to_waitq_locked+0x46>
	return list->head == list;
   1b6d4:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1b6d6:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b6d8:	429d      	cmp	r5, r3
   1b6da:	bf08      	it	eq
   1b6dc:	2300      	moveq	r3, #0
   1b6de:	2b00      	cmp	r3, #0
   1b6e0:	bf38      	it	cc
   1b6e2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b6e4:	b183      	cbz	r3, 1b708 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b6e6:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1b6ea:	f993 200e 	ldrsb.w	r2, [r3, #14]
   1b6ee:	4291      	cmp	r1, r2
   1b6f0:	db04      	blt.n	1b6fc <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   1b6f2:	686a      	ldr	r2, [r5, #4]
   1b6f4:	429a      	cmp	r2, r3
   1b6f6:	d007      	beq.n	1b708 <add_to_waitq_locked+0x48>
   1b6f8:	681b      	ldr	r3, [r3, #0]
   1b6fa:	e7f3      	b.n	1b6e4 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   1b6fc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b6fe:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b702:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b704:	605c      	str	r4, [r3, #4]
}
   1b706:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   1b708:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1b70a:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1b70c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1b70e:	686b      	ldr	r3, [r5, #4]
   1b710:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b712:	606c      	str	r4, [r5, #4]
   1b714:	e7f7      	b.n	1b706 <add_to_waitq_locked+0x46>

0001b716 <z_unpend_first_thread>:
{
   1b716:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1b718:	f04f 0320 	mov.w	r3, #32
   1b71c:	f3ef 8211 	mrs	r2, BASEPRI
   1b720:	f383 8811 	msr	BASEPRI, r3
   1b724:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1b728:	f7ff ff90 	bl	1b64c <z_priq_dumb_best>
   1b72c:	4604      	mov	r4, r0
	__asm__ volatile(
   1b72e:	f382 8811 	msr	BASEPRI, r2
   1b732:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1b736:	b188      	cbz	r0, 1b75c <z_unpend_first_thread+0x46>
	__asm__ volatile(
   1b738:	f04f 0320 	mov.w	r3, #32
   1b73c:	f3ef 8511 	mrs	r5, BASEPRI
   1b740:	f383 8811 	msr	BASEPRI, r3
   1b744:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1b748:	f7ff ff5e 	bl	1b608 <unpend_thread_no_timeout>
	__asm__ volatile(
   1b74c:	f385 8811 	msr	BASEPRI, r5
   1b750:	f3bf 8f6f 	isb	sy
   1b754:	f104 0018 	add.w	r0, r4, #24
   1b758:	f000 f831 	bl	1b7be <z_abort_timeout>
}
   1b75c:	4620      	mov	r0, r4
   1b75e:	bd38      	pop	{r3, r4, r5, pc}

0001b760 <z_unpend_all>:
{
   1b760:	b538      	push	{r3, r4, r5, lr}
   1b762:	4605      	mov	r5, r0
	int need_sched = 0;
   1b764:	2000      	movs	r0, #0
	return list->head == list;
   1b766:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b768:	42a5      	cmp	r5, r4
   1b76a:	d000      	beq.n	1b76e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1b76c:	b904      	cbnz	r4, 1b770 <z_unpend_all+0x10>
}
   1b76e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1b770:	4620      	mov	r0, r4
   1b772:	f7ff ff55 	bl	1b620 <z_unpend_thread>
		z_ready_thread(thread);
   1b776:	4620      	mov	r0, r4
   1b778:	f7ff ff72 	bl	1b660 <z_ready_thread>
		need_sched = 1;
   1b77c:	2001      	movs	r0, #1
   1b77e:	e7f2      	b.n	1b766 <z_unpend_all+0x6>

0001b780 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1b780:	b15a      	cbz	r2, 1b79a <z_impl_k_sem_init+0x1a>
   1b782:	428a      	cmp	r2, r1
   1b784:	d309      	bcc.n	1b79a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1b786:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1b78a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1b78e:	e9c0 0000 	strd	r0, r0, [r0]
   1b792:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1b796:	2000      	movs	r0, #0
   1b798:	4770      	bx	lr
		return -EINVAL;
   1b79a:	f06f 0015 	mvn.w	r0, #21
}
   1b79e:	4770      	bx	lr

0001b7a0 <k_is_in_isr>:
   1b7a0:	f3ef 8005 	mrs	r0, IPSR
}
   1b7a4:	3800      	subs	r0, #0
   1b7a6:	bf18      	it	ne
   1b7a8:	2001      	movne	r0, #1
   1b7aa:	4770      	bx	lr

0001b7ac <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1b7ac:	b108      	cbz	r0, 1b7b2 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1b7ae:	f7f3 b963 	b.w	ea78 <arch_busy_wait>
}
   1b7b2:	4770      	bx	lr

0001b7b4 <z_impl_k_thread_name_set>:
}
   1b7b4:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1b7b8:	4770      	bx	lr

0001b7ba <k_thread_name_get>:
}
   1b7ba:	2000      	movs	r0, #0
   1b7bc:	4770      	bx	lr

0001b7be <z_abort_timeout>:
{
   1b7be:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b7c0:	f04f 0220 	mov.w	r2, #32
   1b7c4:	f3ef 8411 	mrs	r4, BASEPRI
   1b7c8:	f382 8811 	msr	BASEPRI, r2
   1b7cc:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1b7d0:	6803      	ldr	r3, [r0, #0]
   1b7d2:	b13b      	cbz	r3, 1b7e4 <z_abort_timeout+0x26>
			remove_timeout(to);
   1b7d4:	f7fb ffa4 	bl	17720 <remove_timeout>
			ret = 0;
   1b7d8:	2000      	movs	r0, #0
	__asm__ volatile(
   1b7da:	f384 8811 	msr	BASEPRI, r4
   1b7de:	f3bf 8f6f 	isb	sy
}
   1b7e2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1b7e4:	f06f 0015 	mvn.w	r0, #21
   1b7e8:	e7f7      	b.n	1b7da <z_abort_timeout+0x1c>

0001b7ea <z_get_next_timeout_expiry>:
{
   1b7ea:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b7ec:	f04f 0320 	mov.w	r3, #32
   1b7f0:	f3ef 8411 	mrs	r4, BASEPRI
   1b7f4:	f383 8811 	msr	BASEPRI, r3
   1b7f8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1b7fc:	f7fb ffaa 	bl	17754 <next_timeout>
	__asm__ volatile(
   1b800:	f384 8811 	msr	BASEPRI, r4
   1b804:	f3bf 8f6f 	isb	sy
}
   1b808:	bd10      	pop	{r4, pc}

0001b80a <z_set_timeout_expiry>:
{
   1b80a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b80c:	4604      	mov	r4, r0
   1b80e:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   1b810:	f04f 0320 	mov.w	r3, #32
   1b814:	f3ef 8511 	mrs	r5, BASEPRI
   1b818:	f383 8811 	msr	BASEPRI, r3
   1b81c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1b820:	f7fb ff98 	bl	17754 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1b824:	2801      	cmp	r0, #1
   1b826:	dd05      	ble.n	1b834 <z_set_timeout_expiry+0x2a>
   1b828:	42a0      	cmp	r0, r4
   1b82a:	9901      	ldr	r1, [sp, #4]
   1b82c:	dd02      	ble.n	1b834 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   1b82e:	4620      	mov	r0, r4
   1b830:	f7f4 f8fe 	bl	fa30 <z_clock_set_timeout>
	__asm__ volatile(
   1b834:	f385 8811 	msr	BASEPRI, r5
   1b838:	f3bf 8f6f 	isb	sy
}
   1b83c:	b003      	add	sp, #12
   1b83e:	bd30      	pop	{r4, r5, pc}

0001b840 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1b840:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1b842:	f7fc f8ab 	bl	1799c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1b846:	bd08      	pop	{r3, pc}

0001b848 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1b848:	f7fc b8a8 	b.w	1799c <z_tick_get>

0001b84c <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   1b84c:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b84e:	1c4b      	adds	r3, r1, #1
   1b850:	bf08      	it	eq
   1b852:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1b856:	4604      	mov	r4, r0
   1b858:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b85a:	d013      	beq.n	1b884 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b85c:	ea54 0105 	orrs.w	r1, r4, r5
   1b860:	d103      	bne.n	1b86a <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   1b862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1b866:	f7fc b899 	b.w	1799c <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1b86a:	f06f 0101 	mvn.w	r1, #1
   1b86e:	1a0a      	subs	r2, r1, r0
   1b870:	f04f 31ff 	mov.w	r1, #4294967295
   1b874:	eb61 0305 	sbc.w	r3, r1, r5
   1b878:	2a00      	cmp	r2, #0
   1b87a:	f173 0100 	sbcs.w	r1, r3, #0
   1b87e:	db02      	blt.n	1b886 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   1b880:	4610      	mov	r0, r2
   1b882:	4619      	mov	r1, r3
}
   1b884:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   1b886:	f7fc f889 	bl	1799c <z_tick_get>
   1b88a:	2c01      	cmp	r4, #1
   1b88c:	f175 0300 	sbcs.w	r3, r5, #0
   1b890:	bfbc      	itt	lt
   1b892:	2401      	movlt	r4, #1
   1b894:	2500      	movlt	r5, #0
   1b896:	1820      	adds	r0, r4, r0
   1b898:	eb45 0101 	adc.w	r1, r5, r1
   1b89c:	e7f2      	b.n	1b884 <z_timeout_end_calc+0x38>

0001b89e <k_timer_init>:
	timer->status = 0U;
   1b89e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1b8a0:	e9c0 1208 	strd	r1, r2, [r0, #32]
   1b8a4:	f100 0218 	add.w	r2, r0, #24
   1b8a8:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1b8ac:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1b8b0:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1b8b2:	6343      	str	r3, [r0, #52]	; 0x34
}
   1b8b4:	4770      	bx	lr

0001b8b6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1b8b6:	b510      	push	{r4, lr}
   1b8b8:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1b8ba:	f7ff ff80 	bl	1b7be <z_abort_timeout>

	if (inactive) {
   1b8be:	b9d8      	cbnz	r0, 1b8f8 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   1b8c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b8c2:	b10b      	cbz	r3, 1b8c8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1b8c4:	4620      	mov	r0, r4
   1b8c6:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1b8c8:	f104 0018 	add.w	r0, r4, #24
   1b8cc:	2100      	movs	r1, #0
   1b8ce:	f7ff fe65 	bl	1b59c <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1b8d2:	4604      	mov	r4, r0
   1b8d4:	b180      	cbz	r0, 1b8f8 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   1b8d6:	f7ff fe71 	bl	1b5bc <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   1b8da:	4620      	mov	r0, r4
   1b8dc:	f7ff fec0 	bl	1b660 <z_ready_thread>
	__asm__ volatile(
   1b8e0:	f04f 0320 	mov.w	r3, #32
   1b8e4:	f3ef 8011 	mrs	r0, BASEPRI
   1b8e8:	f383 8811 	msr	BASEPRI, r3
   1b8ec:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   1b8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1b8f4:	f7ff be72 	b.w	1b5dc <z_reschedule_irqlock>
   1b8f8:	bd10      	pop	{r4, pc}

0001b8fa <k_work_submit_to_queue>:
{
   1b8fa:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b8fc:	f101 0308 	add.w	r3, r1, #8
   1b900:	e8d3 2fef 	ldaex	r2, [r3]
   1b904:	f042 0c01 	orr.w	ip, r2, #1
   1b908:	e8c3 cfee 	stlex	lr, ip, [r3]
   1b90c:	f1be 0f00 	cmp.w	lr, #0
   1b910:	d1f6      	bne.n	1b900 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1b912:	07d3      	lsls	r3, r2, #31
   1b914:	d403      	bmi.n	1b91e <k_work_submit_to_queue+0x24>
}
   1b916:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1b91a:	f7ff be34 	b.w	1b586 <k_queue_append>
}
   1b91e:	f85d fb04 	ldr.w	pc, [sp], #4

0001b922 <signal_poll_event>:
{
   1b922:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
   1b926:	6884      	ldr	r4, [r0, #8]
{
   1b928:	4605      	mov	r5, r0
   1b92a:	460e      	mov	r6, r1
	if (poller) {
   1b92c:	b144      	cbz	r4, 1b940 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1b92e:	7863      	ldrb	r3, [r4, #1]
   1b930:	2b01      	cmp	r3, #1
   1b932:	d139      	bne.n	1b9a8 <signal_poll_event+0x86>
	if (!z_is_thread_pending(thread)) {
   1b934:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   1b938:	f013 0302 	ands.w	r3, r3, #2
   1b93c:	d10a      	bne.n	1b954 <signal_poll_event+0x32>
		poller->is_polling = false;
   1b93e:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1b940:	2000      	movs	r0, #0
	event->state |= state;
   1b942:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1b944:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1b946:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1b94a:	430e      	orrs	r6, r1
   1b94c:	f366 3310 	bfi	r3, r6, #12, #5
   1b950:	60eb      	str	r3, [r5, #12]
	return retcode;
   1b952:	e00d      	b.n	1b970 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   1b954:	f04f 31ff 	mov.w	r1, #4294967295
   1b958:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   1b95c:	f06f 0001 	mvn.w	r0, #1
   1b960:	428b      	cmp	r3, r1
   1b962:	bf08      	it	eq
   1b964:	4282      	cmpeq	r2, r0
   1b966:	d106      	bne.n	1b976 <signal_poll_event+0x54>
		poller->is_polling = false;
   1b968:	2300      	movs	r3, #0
		return -EAGAIN;
   1b96a:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1b96e:	7023      	strb	r3, [r4, #0]
}
   1b970:	b002      	add	sp, #8
   1b972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1b976:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
	z_unpend_thread(thread);
   1b97a:	9001      	str	r0, [sp, #4]
   1b97c:	f7ff fe50 	bl	1b620 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1b980:	2e08      	cmp	r6, #8
   1b982:	bf0c      	ite	eq
   1b984:	f06f 0303 	mvneq.w	r3, #3
   1b988:	2300      	movne	r3, #0
   1b98a:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b98c:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   1b990:	06db      	lsls	r3, r3, #27
   1b992:	d103      	bne.n	1b99c <signal_poll_event+0x7a>
	if (!z_is_thread_ready(thread)) {
   1b994:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   1b998:	9801      	ldr	r0, [sp, #4]
   1b99a:	b10f      	cbz	r7, 1b9a0 <signal_poll_event+0x7e>
		poller->is_polling = false;
   1b99c:	2300      	movs	r3, #0
   1b99e:	e7ce      	b.n	1b93e <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1b9a0:	f7ff fe5e 	bl	1b660 <z_ready_thread>
		poller->is_polling = false;
   1b9a4:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1b9a6:	e7cb      	b.n	1b940 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1b9a8:	2b02      	cmp	r3, #2
   1b9aa:	d1f7      	bne.n	1b99c <signal_poll_event+0x7a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1b9ac:	7823      	ldrb	r3, [r4, #0]
   1b9ae:	2b00      	cmp	r3, #0
   1b9b0:	d0c6      	beq.n	1b940 <signal_poll_event+0x1e>
   1b9b2:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1b9b6:	2f00      	cmp	r7, #0
   1b9b8:	d0f4      	beq.n	1b9a4 <signal_poll_event+0x82>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1b9ba:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1b9be:	f1a4 0110 	sub.w	r1, r4, #16
   1b9c2:	f104 0010 	add.w	r0, r4, #16
   1b9c6:	9101      	str	r1, [sp, #4]
   1b9c8:	f7ff fef9 	bl	1b7be <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   1b9cc:	4638      	mov	r0, r7
   1b9ce:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
   1b9d0:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   1b9d4:	f7ff ff91 	bl	1b8fa <k_work_submit_to_queue>
		poller->is_polling = false;
   1b9d8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1b9dc:	e7b0      	b.n	1b940 <signal_poll_event+0x1e>

0001b9de <z_handle_obj_poll_events>:
{
   1b9de:	4603      	mov	r3, r0
	return list->head == list;
   1b9e0:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1b9e2:	4283      	cmp	r3, r0
   1b9e4:	d008      	beq.n	1b9f8 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1b9e6:	e9d0 3200 	ldrd	r3, r2, [r0]
   1b9ea:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b9ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b9ee:	2300      	movs	r3, #0
	node->prev = NULL;
   1b9f0:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1b9f4:	f7ff bf95 	b.w	1b922 <signal_poll_event>
}
   1b9f8:	4770      	bx	lr

0001b9fa <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1b9fa:	2904      	cmp	r1, #4
{
   1b9fc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1ba00:	460d      	mov	r5, r1
   1ba02:	bf38      	it	cc
   1ba04:	2504      	movcc	r5, #4
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   1ba06:	18aa      	adds	r2, r5, r2
{
   1ba08:	4606      	mov	r6, r0
   1ba0a:	d209      	bcs.n	1ba20 <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   1ba0c:	f04f 0800 	mov.w	r8, #0
   1ba10:	f04f 0900 	mov.w	r9, #0
   1ba14:	e9cd 8900 	strd	r8, r9, [sp]
   1ba18:	f7ff fcb2 	bl	1b380 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1ba1c:	4604      	mov	r4, r0
   1ba1e:	b918      	cbnz	r0, 1ba28 <z_heap_aligned_alloc+0x2e>
		return NULL;
   1ba20:	2000      	movs	r0, #0
}
   1ba22:	b002      	add	sp, #8
   1ba24:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
__ssp_bos_icheck3(memset, void *, int)
   1ba28:	462a      	mov	r2, r5
   1ba2a:	21ff      	movs	r1, #255	; 0xff
   1ba2c:	f000 f83b 	bl	1baa6 <memset>
	*heap_ref = heap;
   1ba30:	6026      	str	r6, [r4, #0]
	return mem + excess;
   1ba32:	1960      	adds	r0, r4, r5
   1ba34:	e7f5      	b.n	1ba22 <z_heap_aligned_alloc+0x28>

0001ba36 <k_free>:
	if (ptr != NULL) {
   1ba36:	b138      	cbz	r0, 1ba48 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1ba38:	1f03      	subs	r3, r0, #4
   1ba3a:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   1ba3c:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1ba40:	1c42      	adds	r2, r0, #1
   1ba42:	d0fa      	beq.n	1ba3a <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   1ba44:	f7ff bce3 	b.w	1b40e <k_heap_free>
}
   1ba48:	4770      	bx	lr

0001ba4a <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1ba4a:	4770      	bx	lr

0001ba4c <atoi>:
   1ba4c:	220a      	movs	r2, #10
   1ba4e:	2100      	movs	r1, #0
   1ba50:	f7fc b9f0 	b.w	17e34 <strtol>

0001ba54 <memchr>:
   1ba54:	b2c9      	uxtb	r1, r1
   1ba56:	4402      	add	r2, r0
   1ba58:	b510      	push	{r4, lr}
   1ba5a:	4290      	cmp	r0, r2
   1ba5c:	4603      	mov	r3, r0
   1ba5e:	d101      	bne.n	1ba64 <memchr+0x10>
   1ba60:	2300      	movs	r3, #0
   1ba62:	e003      	b.n	1ba6c <memchr+0x18>
   1ba64:	781c      	ldrb	r4, [r3, #0]
   1ba66:	3001      	adds	r0, #1
   1ba68:	428c      	cmp	r4, r1
   1ba6a:	d1f6      	bne.n	1ba5a <memchr+0x6>
   1ba6c:	4618      	mov	r0, r3
   1ba6e:	bd10      	pop	{r4, pc}

0001ba70 <memcmp>:
   1ba70:	b530      	push	{r4, r5, lr}
   1ba72:	3901      	subs	r1, #1
   1ba74:	2400      	movs	r4, #0
   1ba76:	42a2      	cmp	r2, r4
   1ba78:	d101      	bne.n	1ba7e <memcmp+0xe>
   1ba7a:	2000      	movs	r0, #0
   1ba7c:	e005      	b.n	1ba8a <memcmp+0x1a>
   1ba7e:	5d03      	ldrb	r3, [r0, r4]
   1ba80:	3401      	adds	r4, #1
   1ba82:	5d0d      	ldrb	r5, [r1, r4]
   1ba84:	42ab      	cmp	r3, r5
   1ba86:	d0f6      	beq.n	1ba76 <memcmp+0x6>
   1ba88:	1b58      	subs	r0, r3, r5
   1ba8a:	bd30      	pop	{r4, r5, pc}

0001ba8c <memcpy>:
   1ba8c:	440a      	add	r2, r1
   1ba8e:	1e43      	subs	r3, r0, #1
   1ba90:	4291      	cmp	r1, r2
   1ba92:	d100      	bne.n	1ba96 <memcpy+0xa>
   1ba94:	4770      	bx	lr
   1ba96:	b510      	push	{r4, lr}
   1ba98:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ba9c:	4291      	cmp	r1, r2
   1ba9e:	f803 4f01 	strb.w	r4, [r3, #1]!
   1baa2:	d1f9      	bne.n	1ba98 <memcpy+0xc>
   1baa4:	bd10      	pop	{r4, pc}

0001baa6 <memset>:
   1baa6:	4402      	add	r2, r0
   1baa8:	4603      	mov	r3, r0
   1baaa:	4293      	cmp	r3, r2
   1baac:	d100      	bne.n	1bab0 <memset+0xa>
   1baae:	4770      	bx	lr
   1bab0:	f803 1b01 	strb.w	r1, [r3], #1
   1bab4:	e7f9      	b.n	1baaa <memset+0x4>

0001bab6 <__sprintf_chk>:
   1bab6:	b408      	push	{r3}
   1bab8:	b517      	push	{r0, r1, r2, r4, lr}
   1baba:	ab05      	add	r3, sp, #20
   1babc:	1e14      	subs	r4, r2, #0
   1babe:	f853 1b04 	ldr.w	r1, [r3], #4
   1bac2:	9301      	str	r3, [sp, #4]
   1bac4:	da07      	bge.n	1bad6 <__sprintf_chk+0x20>
   1bac6:	461a      	mov	r2, r3
   1bac8:	f7fc f9e2 	bl	17e90 <vsiprintf>
   1bacc:	b003      	add	sp, #12
   1bace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bad2:	b001      	add	sp, #4
   1bad4:	4770      	bx	lr
   1bad6:	460a      	mov	r2, r1
   1bad8:	4621      	mov	r1, r4
   1bada:	f7fc f9b5 	bl	17e48 <vsniprintf>
   1bade:	2800      	cmp	r0, #0
   1bae0:	dbf4      	blt.n	1bacc <__sprintf_chk+0x16>
   1bae2:	42a0      	cmp	r0, r4
   1bae4:	d3f2      	bcc.n	1bacc <__sprintf_chk+0x16>
   1bae6:	f7f4 fe65 	bl	107b4 <__chk_fail>

0001baea <strchr>:
   1baea:	b2c9      	uxtb	r1, r1
   1baec:	4603      	mov	r3, r0
   1baee:	f810 2b01 	ldrb.w	r2, [r0], #1
   1baf2:	b11a      	cbz	r2, 1bafc <strchr+0x12>
   1baf4:	428a      	cmp	r2, r1
   1baf6:	d1f9      	bne.n	1baec <strchr+0x2>
   1baf8:	4618      	mov	r0, r3
   1bafa:	4770      	bx	lr
   1bafc:	2900      	cmp	r1, #0
   1bafe:	bf18      	it	ne
   1bb00:	2300      	movne	r3, #0
   1bb02:	e7f9      	b.n	1baf8 <strchr+0xe>

0001bb04 <strncmp>:
   1bb04:	b510      	push	{r4, lr}
   1bb06:	b16a      	cbz	r2, 1bb24 <strncmp+0x20>
   1bb08:	3901      	subs	r1, #1
   1bb0a:	1884      	adds	r4, r0, r2
   1bb0c:	f810 3b01 	ldrb.w	r3, [r0], #1
   1bb10:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1bb14:	4293      	cmp	r3, r2
   1bb16:	d103      	bne.n	1bb20 <strncmp+0x1c>
   1bb18:	42a0      	cmp	r0, r4
   1bb1a:	d001      	beq.n	1bb20 <strncmp+0x1c>
   1bb1c:	2b00      	cmp	r3, #0
   1bb1e:	d1f5      	bne.n	1bb0c <strncmp+0x8>
   1bb20:	1a98      	subs	r0, r3, r2
   1bb22:	bd10      	pop	{r4, pc}
   1bb24:	4610      	mov	r0, r2
   1bb26:	e7fc      	b.n	1bb22 <strncmp+0x1e>

0001bb28 <strncpy>:
   1bb28:	3901      	subs	r1, #1
   1bb2a:	4603      	mov	r3, r0
   1bb2c:	b510      	push	{r4, lr}
   1bb2e:	b132      	cbz	r2, 1bb3e <strncpy+0x16>
   1bb30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1bb34:	3a01      	subs	r2, #1
   1bb36:	f803 4b01 	strb.w	r4, [r3], #1
   1bb3a:	2c00      	cmp	r4, #0
   1bb3c:	d1f7      	bne.n	1bb2e <strncpy+0x6>
   1bb3e:	441a      	add	r2, r3
   1bb40:	2100      	movs	r1, #0
   1bb42:	4293      	cmp	r3, r2
   1bb44:	d100      	bne.n	1bb48 <strncpy+0x20>
   1bb46:	bd10      	pop	{r4, pc}
   1bb48:	f803 1b01 	strb.w	r1, [r3], #1
   1bb4c:	e7f9      	b.n	1bb42 <strncpy+0x1a>

0001bb4e <strnlen>:
   1bb4e:	4602      	mov	r2, r0
   1bb50:	4401      	add	r1, r0
   1bb52:	b510      	push	{r4, lr}
   1bb54:	428a      	cmp	r2, r1
   1bb56:	4613      	mov	r3, r2
   1bb58:	d101      	bne.n	1bb5e <strnlen+0x10>
   1bb5a:	1a18      	subs	r0, r3, r0
   1bb5c:	bd10      	pop	{r4, pc}
   1bb5e:	781c      	ldrb	r4, [r3, #0]
   1bb60:	3201      	adds	r2, #1
   1bb62:	2c00      	cmp	r4, #0
   1bb64:	d1f6      	bne.n	1bb54 <strnlen+0x6>
   1bb66:	e7f8      	b.n	1bb5a <strnlen+0xc>

0001bb68 <strstr>:
   1bb68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb6a:	780c      	ldrb	r4, [r1, #0]
   1bb6c:	b164      	cbz	r4, 1bb88 <strstr+0x20>
   1bb6e:	4603      	mov	r3, r0
   1bb70:	781a      	ldrb	r2, [r3, #0]
   1bb72:	4618      	mov	r0, r3
   1bb74:	1c5e      	adds	r6, r3, #1
   1bb76:	b90a      	cbnz	r2, 1bb7c <strstr+0x14>
   1bb78:	4610      	mov	r0, r2
   1bb7a:	e005      	b.n	1bb88 <strstr+0x20>
   1bb7c:	4294      	cmp	r4, r2
   1bb7e:	d108      	bne.n	1bb92 <strstr+0x2a>
   1bb80:	460d      	mov	r5, r1
   1bb82:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   1bb86:	b902      	cbnz	r2, 1bb8a <strstr+0x22>
   1bb88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bb8a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   1bb8e:	4297      	cmp	r7, r2
   1bb90:	d0f7      	beq.n	1bb82 <strstr+0x1a>
   1bb92:	4633      	mov	r3, r6
   1bb94:	e7ec      	b.n	1bb70 <strstr+0x8>

0001bb96 <_vsniprintf_r>:
   1bb96:	b530      	push	{r4, r5, lr}
   1bb98:	1e14      	subs	r4, r2, #0
   1bb9a:	4605      	mov	r5, r0
   1bb9c:	b09b      	sub	sp, #108	; 0x6c
   1bb9e:	4618      	mov	r0, r3
   1bba0:	da05      	bge.n	1bbae <_vsniprintf_r+0x18>
   1bba2:	238b      	movs	r3, #139	; 0x8b
   1bba4:	f04f 30ff 	mov.w	r0, #4294967295
   1bba8:	602b      	str	r3, [r5, #0]
   1bbaa:	b01b      	add	sp, #108	; 0x6c
   1bbac:	bd30      	pop	{r4, r5, pc}
   1bbae:	f44f 7302 	mov.w	r3, #520	; 0x208
   1bbb2:	4602      	mov	r2, r0
   1bbb4:	9100      	str	r1, [sp, #0]
   1bbb6:	4628      	mov	r0, r5
   1bbb8:	f8ad 300c 	strh.w	r3, [sp, #12]
   1bbbc:	bf14      	ite	ne
   1bbbe:	f104 33ff 	addne.w	r3, r4, #4294967295
   1bbc2:	4623      	moveq	r3, r4
   1bbc4:	9104      	str	r1, [sp, #16]
   1bbc6:	4669      	mov	r1, sp
   1bbc8:	9302      	str	r3, [sp, #8]
   1bbca:	9305      	str	r3, [sp, #20]
   1bbcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bbd0:	f8ad 300e 	strh.w	r3, [sp, #14]
   1bbd4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1bbd6:	f7fc f971 	bl	17ebc <_svfiprintf_r>
   1bbda:	1c43      	adds	r3, r0, #1
   1bbdc:	bfbc      	itt	lt
   1bbde:	238b      	movlt	r3, #139	; 0x8b
   1bbe0:	602b      	strlt	r3, [r5, #0]
   1bbe2:	2c00      	cmp	r4, #0
   1bbe4:	d0e1      	beq.n	1bbaa <_vsniprintf_r+0x14>
   1bbe6:	9b00      	ldr	r3, [sp, #0]
   1bbe8:	2200      	movs	r2, #0
   1bbea:	701a      	strb	r2, [r3, #0]
   1bbec:	e7dd      	b.n	1bbaa <_vsniprintf_r+0x14>

0001bbee <_realloc_r>:
   1bbee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bbf0:	4607      	mov	r7, r0
   1bbf2:	4614      	mov	r4, r2
   1bbf4:	460e      	mov	r6, r1
   1bbf6:	b921      	cbnz	r1, 1bc02 <_realloc_r+0x14>
   1bbf8:	4611      	mov	r1, r2
   1bbfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1bbfe:	f7fc b803 	b.w	17c08 <_malloc_r>
   1bc02:	b922      	cbnz	r2, 1bc0e <_realloc_r+0x20>
   1bc04:	4625      	mov	r5, r4
   1bc06:	f7fb ffaf 	bl	17b68 <_free_r>
   1bc0a:	4628      	mov	r0, r5
   1bc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bc0e:	f000 f8fb 	bl	1be08 <_malloc_usable_size_r>
   1bc12:	42a0      	cmp	r0, r4
   1bc14:	d20f      	bcs.n	1bc36 <_realloc_r+0x48>
   1bc16:	4621      	mov	r1, r4
   1bc18:	4638      	mov	r0, r7
   1bc1a:	f7fb fff5 	bl	17c08 <_malloc_r>
   1bc1e:	4605      	mov	r5, r0
   1bc20:	2800      	cmp	r0, #0
   1bc22:	d0f2      	beq.n	1bc0a <_realloc_r+0x1c>
   1bc24:	4631      	mov	r1, r6
   1bc26:	4622      	mov	r2, r4
   1bc28:	f7ff ff30 	bl	1ba8c <memcpy>
   1bc2c:	4631      	mov	r1, r6
   1bc2e:	4638      	mov	r0, r7
   1bc30:	f7fb ff9a 	bl	17b68 <_free_r>
   1bc34:	e7e9      	b.n	1bc0a <_realloc_r+0x1c>
   1bc36:	4635      	mov	r5, r6
   1bc38:	e7e7      	b.n	1bc0a <_realloc_r+0x1c>

0001bc3a <__ssputs_r>:
   1bc3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bc3e:	688e      	ldr	r6, [r1, #8]
   1bc40:	4682      	mov	sl, r0
   1bc42:	460c      	mov	r4, r1
   1bc44:	4690      	mov	r8, r2
   1bc46:	429e      	cmp	r6, r3
   1bc48:	461f      	mov	r7, r3
   1bc4a:	d838      	bhi.n	1bcbe <__ssputs_r+0x84>
   1bc4c:	898a      	ldrh	r2, [r1, #12]
   1bc4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
   1bc52:	d032      	beq.n	1bcba <__ssputs_r+0x80>
   1bc54:	6825      	ldr	r5, [r4, #0]
   1bc56:	3301      	adds	r3, #1
   1bc58:	6909      	ldr	r1, [r1, #16]
   1bc5a:	eba5 0901 	sub.w	r9, r5, r1
   1bc5e:	6965      	ldr	r5, [r4, #20]
   1bc60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1bc64:	444b      	add	r3, r9
   1bc66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1bc6a:	106d      	asrs	r5, r5, #1
   1bc6c:	429d      	cmp	r5, r3
   1bc6e:	bf38      	it	cc
   1bc70:	461d      	movcc	r5, r3
   1bc72:	0553      	lsls	r3, r2, #21
   1bc74:	d531      	bpl.n	1bcda <__ssputs_r+0xa0>
   1bc76:	4629      	mov	r1, r5
   1bc78:	f7fb ffc6 	bl	17c08 <_malloc_r>
   1bc7c:	4606      	mov	r6, r0
   1bc7e:	b950      	cbnz	r0, 1bc96 <__ssputs_r+0x5c>
   1bc80:	230c      	movs	r3, #12
   1bc82:	f04f 30ff 	mov.w	r0, #4294967295
   1bc86:	f8ca 3000 	str.w	r3, [sl]
   1bc8a:	89a3      	ldrh	r3, [r4, #12]
   1bc8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1bc90:	81a3      	strh	r3, [r4, #12]
   1bc92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bc96:	464a      	mov	r2, r9
   1bc98:	6921      	ldr	r1, [r4, #16]
   1bc9a:	f7ff fef7 	bl	1ba8c <memcpy>
   1bc9e:	89a3      	ldrh	r3, [r4, #12]
   1bca0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1bca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1bca8:	81a3      	strh	r3, [r4, #12]
   1bcaa:	6126      	str	r6, [r4, #16]
   1bcac:	444e      	add	r6, r9
   1bcae:	6165      	str	r5, [r4, #20]
   1bcb0:	eba5 0509 	sub.w	r5, r5, r9
   1bcb4:	6026      	str	r6, [r4, #0]
   1bcb6:	463e      	mov	r6, r7
   1bcb8:	60a5      	str	r5, [r4, #8]
   1bcba:	42be      	cmp	r6, r7
   1bcbc:	d900      	bls.n	1bcc0 <__ssputs_r+0x86>
   1bcbe:	463e      	mov	r6, r7
   1bcc0:	4632      	mov	r2, r6
   1bcc2:	4641      	mov	r1, r8
   1bcc4:	6820      	ldr	r0, [r4, #0]
   1bcc6:	f000 f885 	bl	1bdd4 <memmove>
   1bcca:	68a3      	ldr	r3, [r4, #8]
   1bccc:	6822      	ldr	r2, [r4, #0]
   1bcce:	2000      	movs	r0, #0
   1bcd0:	1b9b      	subs	r3, r3, r6
   1bcd2:	4432      	add	r2, r6
   1bcd4:	60a3      	str	r3, [r4, #8]
   1bcd6:	6022      	str	r2, [r4, #0]
   1bcd8:	e7db      	b.n	1bc92 <__ssputs_r+0x58>
   1bcda:	462a      	mov	r2, r5
   1bcdc:	f7ff ff87 	bl	1bbee <_realloc_r>
   1bce0:	4606      	mov	r6, r0
   1bce2:	2800      	cmp	r0, #0
   1bce4:	d1e1      	bne.n	1bcaa <__ssputs_r+0x70>
   1bce6:	6921      	ldr	r1, [r4, #16]
   1bce8:	4650      	mov	r0, sl
   1bcea:	f7fb ff3d 	bl	17b68 <_free_r>
   1bcee:	e7c7      	b.n	1bc80 <__ssputs_r+0x46>

0001bcf0 <_printf_common>:
   1bcf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bcf4:	4616      	mov	r6, r2
   1bcf6:	4699      	mov	r9, r3
   1bcf8:	688a      	ldr	r2, [r1, #8]
   1bcfa:	4607      	mov	r7, r0
   1bcfc:	690b      	ldr	r3, [r1, #16]
   1bcfe:	460c      	mov	r4, r1
   1bd00:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1bd04:	4293      	cmp	r3, r2
   1bd06:	bfb8      	it	lt
   1bd08:	4613      	movlt	r3, r2
   1bd0a:	6033      	str	r3, [r6, #0]
   1bd0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1bd10:	b10a      	cbz	r2, 1bd16 <_printf_common+0x26>
   1bd12:	3301      	adds	r3, #1
   1bd14:	6033      	str	r3, [r6, #0]
   1bd16:	6823      	ldr	r3, [r4, #0]
   1bd18:	0699      	lsls	r1, r3, #26
   1bd1a:	bf42      	ittt	mi
   1bd1c:	6833      	ldrmi	r3, [r6, #0]
   1bd1e:	3302      	addmi	r3, #2
   1bd20:	6033      	strmi	r3, [r6, #0]
   1bd22:	6825      	ldr	r5, [r4, #0]
   1bd24:	f015 0506 	ands.w	r5, r5, #6
   1bd28:	d106      	bne.n	1bd38 <_printf_common+0x48>
   1bd2a:	f104 0a19 	add.w	sl, r4, #25
   1bd2e:	68e3      	ldr	r3, [r4, #12]
   1bd30:	6832      	ldr	r2, [r6, #0]
   1bd32:	1a9b      	subs	r3, r3, r2
   1bd34:	42ab      	cmp	r3, r5
   1bd36:	dc29      	bgt.n	1bd8c <_printf_common+0x9c>
   1bd38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   1bd3c:	1e13      	subs	r3, r2, #0
   1bd3e:	6822      	ldr	r2, [r4, #0]
   1bd40:	bf18      	it	ne
   1bd42:	2301      	movne	r3, #1
   1bd44:	0692      	lsls	r2, r2, #26
   1bd46:	d42e      	bmi.n	1bda6 <_printf_common+0xb6>
   1bd48:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1bd4c:	4649      	mov	r1, r9
   1bd4e:	4638      	mov	r0, r7
   1bd50:	47c0      	blx	r8
   1bd52:	3001      	adds	r0, #1
   1bd54:	d021      	beq.n	1bd9a <_printf_common+0xaa>
   1bd56:	6823      	ldr	r3, [r4, #0]
   1bd58:	341a      	adds	r4, #26
   1bd5a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   1bd5e:	f003 0306 	and.w	r3, r3, #6
   1bd62:	6832      	ldr	r2, [r6, #0]
   1bd64:	2600      	movs	r6, #0
   1bd66:	2b04      	cmp	r3, #4
   1bd68:	f854 3c12 	ldr.w	r3, [r4, #-18]
   1bd6c:	bf08      	it	eq
   1bd6e:	1aad      	subeq	r5, r5, r2
   1bd70:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   1bd74:	bf14      	ite	ne
   1bd76:	2500      	movne	r5, #0
   1bd78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1bd7c:	4293      	cmp	r3, r2
   1bd7e:	bfc4      	itt	gt
   1bd80:	1a9b      	subgt	r3, r3, r2
   1bd82:	18ed      	addgt	r5, r5, r3
   1bd84:	42b5      	cmp	r5, r6
   1bd86:	d11a      	bne.n	1bdbe <_printf_common+0xce>
   1bd88:	2000      	movs	r0, #0
   1bd8a:	e008      	b.n	1bd9e <_printf_common+0xae>
   1bd8c:	2301      	movs	r3, #1
   1bd8e:	4652      	mov	r2, sl
   1bd90:	4649      	mov	r1, r9
   1bd92:	4638      	mov	r0, r7
   1bd94:	47c0      	blx	r8
   1bd96:	3001      	adds	r0, #1
   1bd98:	d103      	bne.n	1bda2 <_printf_common+0xb2>
   1bd9a:	f04f 30ff 	mov.w	r0, #4294967295
   1bd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bda2:	3501      	adds	r5, #1
   1bda4:	e7c3      	b.n	1bd2e <_printf_common+0x3e>
   1bda6:	18e1      	adds	r1, r4, r3
   1bda8:	1c5a      	adds	r2, r3, #1
   1bdaa:	2030      	movs	r0, #48	; 0x30
   1bdac:	3302      	adds	r3, #2
   1bdae:	4422      	add	r2, r4
   1bdb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1bdb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1bdb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1bdbc:	e7c4      	b.n	1bd48 <_printf_common+0x58>
   1bdbe:	2301      	movs	r3, #1
   1bdc0:	4622      	mov	r2, r4
   1bdc2:	4649      	mov	r1, r9
   1bdc4:	4638      	mov	r0, r7
   1bdc6:	47c0      	blx	r8
   1bdc8:	3001      	adds	r0, #1
   1bdca:	d0e6      	beq.n	1bd9a <_printf_common+0xaa>
   1bdcc:	3601      	adds	r6, #1
   1bdce:	e7d9      	b.n	1bd84 <_printf_common+0x94>

0001bdd0 <__retarget_lock_acquire_recursive>:
   1bdd0:	4770      	bx	lr

0001bdd2 <__retarget_lock_release_recursive>:
   1bdd2:	4770      	bx	lr

0001bdd4 <memmove>:
   1bdd4:	4288      	cmp	r0, r1
   1bdd6:	b510      	push	{r4, lr}
   1bdd8:	eb01 0402 	add.w	r4, r1, r2
   1bddc:	d902      	bls.n	1bde4 <memmove+0x10>
   1bdde:	4284      	cmp	r4, r0
   1bde0:	4623      	mov	r3, r4
   1bde2:	d807      	bhi.n	1bdf4 <memmove+0x20>
   1bde4:	1e43      	subs	r3, r0, #1
   1bde6:	42a1      	cmp	r1, r4
   1bde8:	d008      	beq.n	1bdfc <memmove+0x28>
   1bdea:	f811 2b01 	ldrb.w	r2, [r1], #1
   1bdee:	f803 2f01 	strb.w	r2, [r3, #1]!
   1bdf2:	e7f8      	b.n	1bde6 <memmove+0x12>
   1bdf4:	4402      	add	r2, r0
   1bdf6:	4601      	mov	r1, r0
   1bdf8:	428a      	cmp	r2, r1
   1bdfa:	d100      	bne.n	1bdfe <memmove+0x2a>
   1bdfc:	bd10      	pop	{r4, pc}
   1bdfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1be02:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1be06:	e7f7      	b.n	1bdf8 <memmove+0x24>

0001be08 <_malloc_usable_size_r>:
   1be08:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1be0c:	1f18      	subs	r0, r3, #4
   1be0e:	2b00      	cmp	r3, #0
   1be10:	bfbc      	itt	lt
   1be12:	580b      	ldrlt	r3, [r1, r0]
   1be14:	18c0      	addlt	r0, r0, r3
   1be16:	4770      	bx	lr
