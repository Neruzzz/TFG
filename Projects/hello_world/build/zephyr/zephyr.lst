
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000c18 	.word	0x20000c18
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00000e69 	.word	0x00000e69
   8:	000030b7 	.word	0x000030b7
   c:	00000e99 	.word	0x00000e99
  10:	00000e99 	.word	0x00000e99
		if (fdtable[fd].obj == NULL) {
  14:	00000e99 	.word	0x00000e99
  18:	00000e99 	.word	0x00000e99
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  1c:	00000e99 	.word	0x00000e99
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	00000cdd 	.word	0x00000cdd
  30:	00000e99 	.word	0x00000e99
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00000c95 	.word	0x00000c95
  3c:	0000309d 	.word	0x0000309d

00000040 <_irq_vector_table>:
  40:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
  50:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
  60:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
  70:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
  80:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
  90:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
  a0:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
  b0:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
  c0:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
  d0:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
  e0:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
  f0:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
 100:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
 110:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
 120:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
 130:	00000e29 00000e29 00000e29 00000e29     )...)...)...)...
 140:	00000e29                                )...

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295
     154:	f04f 30ff 	movne.w	r0, #4294967295
     158:	f000 b970 	b.w	43c <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f806 	bl	174 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__udivmoddi4>:
     174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     178:	9e08      	ldr	r6, [sp, #32]
     17a:	460d      	mov	r5, r1
     17c:	4604      	mov	r4, r0
     17e:	468a      	mov	sl, r1
     180:	2b00      	cmp	r3, #0
     182:	d17f      	bne.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     184:	428a      	cmp	r2, r1
     186:	4617      	mov	r7, r2
     188:	d941      	bls.n	20e <CONFIG_UART_MUX_RX_STACK_SIZE+0xe>
     18a:	fab2 f282 	clz	r2, r2
     18e:	b14a      	cbz	r2, 1a4 <__udivmoddi4+0x30>
     190:	f1c2 0120 	rsb	r1, r2, #32
     194:	fa05 f302 	lsl.w	r3, r5, r2
     198:	4097      	lsls	r7, r2
     19a:	4094      	lsls	r4, r2
     19c:	fa20 f101 	lsr.w	r1, r0, r1
     1a0:	ea41 0a03 	orr.w	sl, r1, r3
     1a4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1a8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1ac:	fa1f f987 	uxth.w	r9, r7
     1b0:	fbba fef8 	udiv	lr, sl, r8
     1b4:	fb08 a31e 	mls	r3, r8, lr, sl
     1b8:	fb0e f109 	mul.w	r1, lr, r9
     1bc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1c0:	4299      	cmp	r1, r3
     1c2:	d906      	bls.n	1d2 <__udivmoddi4+0x5e>
     1c4:	18fb      	adds	r3, r7, r3
     1c6:	d202      	bcs.n	1ce <__udivmoddi4+0x5a>
     1c8:	4299      	cmp	r1, r3
     1ca:	f200 8124 	bhi.w	416 <CONFIG_FLASH_SIZE+0x16>
     1ce:	f10e 3eff 	add.w	lr, lr, #4294967295
     1d2:	1a59      	subs	r1, r3, r1
     1d4:	b2a3      	uxth	r3, r4
     1d6:	fbb1 f0f8 	udiv	r0, r1, r8
     1da:	fb08 1110 	mls	r1, r8, r0, r1
     1de:	fb00 f909 	mul.w	r9, r0, r9
     1e2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1e6:	45a1      	cmp	r9, r4
     1e8:	d905      	bls.n	1f6 <__udivmoddi4+0x82>
     1ea:	193c      	adds	r4, r7, r4
     1ec:	d202      	bcs.n	1f4 <__udivmoddi4+0x80>
     1ee:	45a1      	cmp	r9, r4
     1f0:	f200 810e 	bhi.w	410 <CONFIG_FLASH_SIZE+0x10>
     1f4:	3801      	subs	r0, #1
     1f6:	eba4 0409 	sub.w	r4, r4, r9
     1fa:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     1fe:	2100      	movs	r1, #0
     200:	b11e      	cbz	r6, 20a <CONFIG_UART_MUX_RX_STACK_SIZE+0xa>
     202:	40d4      	lsrs	r4, r2
     204:	2300      	movs	r3, #0
     206:	e9c6 4300 	strd	r4, r3, [r6]
     20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     20e:	b902      	cbnz	r2, 212 <CONFIG_UART_MUX_RX_STACK_SIZE+0x12>
     210:	deff      	udf	#255	; 0xff
     212:	fab2 f282 	clz	r2, r2
     216:	2a00      	cmp	r2, #0
     218:	d14f      	bne.n	2ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x3a>
     21a:	1bcb      	subs	r3, r1, r7
     21c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     220:	fa1f f887 	uxth.w	r8, r7
     224:	2101      	movs	r1, #1
     226:	0c25      	lsrs	r5, r4, #16
     228:	fbb3 fcfe 	udiv	ip, r3, lr
     22c:	fb0e 301c 	mls	r0, lr, ip, r3
     230:	462b      	mov	r3, r5
     232:	fb08 f90c 	mul.w	r9, r8, ip
     236:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     23a:	45a9      	cmp	r9, r5
     23c:	d90a      	bls.n	254 <CONFIG_UART_MUX_RX_STACK_SIZE+0x54>
     23e:	197d      	adds	r5, r7, r5
     240:	bf2c      	ite	cs
     242:	2301      	movcs	r3, #1
     244:	2300      	movcc	r3, #0
     246:	45a9      	cmp	r9, r5
     248:	d902      	bls.n	250 <CONFIG_UART_MUX_RX_STACK_SIZE+0x50>
     24a:	2b00      	cmp	r3, #0
     24c:	f000 80d9 	beq.w	402 <CONFIG_FLASH_SIZE+0x2>
     250:	f10c 3cff 	add.w	ip, ip, #4294967295
     254:	eba5 0509 	sub.w	r5, r5, r9
     258:	b2a3      	uxth	r3, r4
     25a:	fbb5 f0fe 	udiv	r0, r5, lr
     25e:	fb0e 5510 	mls	r5, lr, r0, r5
     262:	fb08 f800 	mul.w	r8, r8, r0
     266:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     26a:	45a0      	cmp	r8, r4
     26c:	d905      	bls.n	27a <CONFIG_UART_MUX_RX_STACK_SIZE+0x7a>
     26e:	193c      	adds	r4, r7, r4
     270:	d202      	bcs.n	278 <CONFIG_UART_MUX_RX_STACK_SIZE+0x78>
     272:	45a0      	cmp	r8, r4
     274:	f200 80c9 	bhi.w	40a <CONFIG_FLASH_SIZE+0xa>
     278:	3801      	subs	r0, #1
     27a:	eba4 0408 	sub.w	r4, r4, r8
     27e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     282:	e7bd      	b.n	200 <CONFIG_UART_MUX_RX_STACK_SIZE>
     284:	428b      	cmp	r3, r1
     286:	d908      	bls.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     288:	2e00      	cmp	r6, #0
     28a:	f000 80b1 	beq.w	3f0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x170>
     28e:	2100      	movs	r1, #0
     290:	e9c6 0500 	strd	r0, r5, [r6]
     294:	4608      	mov	r0, r1
     296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     29a:	fab3 f183 	clz	r1, r3
     29e:	2900      	cmp	r1, #0
     2a0:	d146      	bne.n	330 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb0>
     2a2:	42ab      	cmp	r3, r5
     2a4:	f0c0 80a7 	bcc.w	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     2a8:	4282      	cmp	r2, r0
     2aa:	f240 80a4 	bls.w	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     2ae:	4608      	mov	r0, r1
     2b0:	2e00      	cmp	r6, #0
     2b2:	d0aa      	beq.n	20a <CONFIG_UART_MUX_RX_STACK_SIZE+0xa>
     2b4:	e9c6 4a00 	strd	r4, sl, [r6]
     2b8:	e7a7      	b.n	20a <CONFIG_UART_MUX_RX_STACK_SIZE+0xa>
     2ba:	f1c2 0020 	rsb	r0, r2, #32
     2be:	4097      	lsls	r7, r2
     2c0:	fa01 f302 	lsl.w	r3, r1, r2
     2c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2c8:	40c1      	lsrs	r1, r0
     2ca:	fa24 f500 	lsr.w	r5, r4, r0
     2ce:	fa1f f887 	uxth.w	r8, r7
     2d2:	4094      	lsls	r4, r2
     2d4:	431d      	orrs	r5, r3
     2d6:	fbb1 f0fe 	udiv	r0, r1, lr
     2da:	0c2b      	lsrs	r3, r5, #16
     2dc:	fb0e 1110 	mls	r1, lr, r0, r1
     2e0:	fb00 fc08 	mul.w	ip, r0, r8
     2e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2e8:	459c      	cmp	ip, r3
     2ea:	d909      	bls.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     2ec:	18fb      	adds	r3, r7, r3
     2ee:	bf2c      	ite	cs
     2f0:	2101      	movcs	r1, #1
     2f2:	2100      	movcc	r1, #0
     2f4:	459c      	cmp	ip, r3
     2f6:	d902      	bls.n	2fe <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7e>
     2f8:	2900      	cmp	r1, #0
     2fa:	f000 8095 	beq.w	428 <CONFIG_FLASH_SIZE+0x28>
     2fe:	3801      	subs	r0, #1
     300:	eba3 030c 	sub.w	r3, r3, ip
     304:	b2ad      	uxth	r5, r5
     306:	fbb3 f1fe 	udiv	r1, r3, lr
     30a:	fb0e 3311 	mls	r3, lr, r1, r3
     30e:	fb01 fc08 	mul.w	ip, r1, r8
     312:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     316:	45ac      	cmp	ip, r5
     318:	d905      	bls.n	326 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa6>
     31a:	197d      	adds	r5, r7, r5
     31c:	d202      	bcs.n	324 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa4>
     31e:	45ac      	cmp	ip, r5
     320:	f200 8089 	bhi.w	436 <CONFIG_FLASH_SIZE+0x36>
     324:	3901      	subs	r1, #1
     326:	eba5 030c 	sub.w	r3, r5, ip
     32a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     32e:	e77a      	b.n	226 <CONFIG_UART_MUX_RX_STACK_SIZE+0x26>
     330:	f1c1 0420 	rsb	r4, r1, #32
     334:	408b      	lsls	r3, r1
     336:	fa02 f701 	lsl.w	r7, r2, r1
     33a:	fa05 fc01 	lsl.w	ip, r5, r1
     33e:	40e2      	lsrs	r2, r4
     340:	fa20 f804 	lsr.w	r8, r0, r4
     344:	40e5      	lsrs	r5, r4
     346:	fa00 fe01 	lsl.w	lr, r0, r1
     34a:	4313      	orrs	r3, r2
     34c:	ea48 020c 	orr.w	r2, r8, ip
     350:	ea4f 4813 	mov.w	r8, r3, lsr #16
     354:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     358:	fa1f f983 	uxth.w	r9, r3
     35c:	fbb5 faf8 	udiv	sl, r5, r8
     360:	fb08 551a 	mls	r5, r8, sl, r5
     364:	fb0a f009 	mul.w	r0, sl, r9
     368:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     36c:	4560      	cmp	r0, ip
     36e:	d90a      	bls.n	386 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x106>
     370:	eb13 0c0c 	adds.w	ip, r3, ip
     374:	bf2c      	ite	cs
     376:	2501      	movcs	r5, #1
     378:	2500      	movcc	r5, #0
     37a:	4560      	cmp	r0, ip
     37c:	d901      	bls.n	382 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x102>
     37e:	2d00      	cmp	r5, #0
     380:	d055      	beq.n	42e <CONFIG_FLASH_SIZE+0x2e>
     382:	f10a 3aff 	add.w	sl, sl, #4294967295
     386:	ebac 0c00 	sub.w	ip, ip, r0
     38a:	b292      	uxth	r2, r2
     38c:	fbbc f0f8 	udiv	r0, ip, r8
     390:	fb08 cc10 	mls	ip, r8, r0, ip
     394:	fb00 f909 	mul.w	r9, r0, r9
     398:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     39c:	45e1      	cmp	r9, ip
     39e:	d905      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a0:	eb13 0c0c 	adds.w	ip, r3, ip
     3a4:	d201      	bcs.n	3aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12a>
     3a6:	45e1      	cmp	r9, ip
     3a8:	d83b      	bhi.n	422 <CONFIG_FLASH_SIZE+0x22>
     3aa:	3801      	subs	r0, #1
     3ac:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3b0:	ebac 0c09 	sub.w	ip, ip, r9
     3b4:	fba0 8907 	umull	r8, r9, r0, r7
     3b8:	45cc      	cmp	ip, r9
     3ba:	4645      	mov	r5, r8
     3bc:	464a      	mov	r2, r9
     3be:	d302      	bcc.n	3c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x146>
     3c0:	d106      	bne.n	3d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x150>
     3c2:	45c6      	cmp	lr, r8
     3c4:	d204      	bcs.n	3d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x150>
     3c6:	3801      	subs	r0, #1
     3c8:	ebb8 0507 	subs.w	r5, r8, r7
     3cc:	eb69 0203 	sbc.w	r2, r9, r3
     3d0:	b32e      	cbz	r6, 41e <CONFIG_FLASH_SIZE+0x1e>
     3d2:	ebbe 0305 	subs.w	r3, lr, r5
     3d6:	eb6c 0c02 	sbc.w	ip, ip, r2
     3da:	fa23 f201 	lsr.w	r2, r3, r1
     3de:	fa0c f404 	lsl.w	r4, ip, r4
     3e2:	fa2c f301 	lsr.w	r3, ip, r1
     3e6:	2100      	movs	r1, #0
     3e8:	4314      	orrs	r4, r2
     3ea:	e9c6 4300 	strd	r4, r3, [r6]
     3ee:	e70c      	b.n	20a <CONFIG_UART_MUX_RX_STACK_SIZE+0xa>
     3f0:	4631      	mov	r1, r6
     3f2:	4630      	mov	r0, r6
     3f4:	e709      	b.n	20a <CONFIG_UART_MUX_RX_STACK_SIZE+0xa>
     3f6:	1a84      	subs	r4, r0, r2
     3f8:	eb65 0303 	sbc.w	r3, r5, r3
     3fc:	2001      	movs	r0, #1
     3fe:	469a      	mov	sl, r3
     400:	e756      	b.n	2b0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x30>
     402:	f1ac 0c02 	sub.w	ip, ip, #2
     406:	443d      	add	r5, r7
     408:	e724      	b.n	254 <CONFIG_UART_MUX_RX_STACK_SIZE+0x54>
     40a:	3802      	subs	r0, #2
     40c:	443c      	add	r4, r7
     40e:	e734      	b.n	27a <CONFIG_UART_MUX_RX_STACK_SIZE+0x7a>
     410:	3802      	subs	r0, #2
     412:	443c      	add	r4, r7
     414:	e6ef      	b.n	1f6 <__udivmoddi4+0x82>
     416:	f1ae 0e02 	sub.w	lr, lr, #2
     41a:	443b      	add	r3, r7
     41c:	e6d9      	b.n	1d2 <__udivmoddi4+0x5e>
     41e:	4631      	mov	r1, r6
     420:	e6f3      	b.n	20a <CONFIG_UART_MUX_RX_STACK_SIZE+0xa>
     422:	3802      	subs	r0, #2
     424:	449c      	add	ip, r3
     426:	e7c1      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     428:	3802      	subs	r0, #2
     42a:	443b      	add	r3, r7
     42c:	e768      	b.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     42e:	f1aa 0a02 	sub.w	sl, sl, #2
     432:	449c      	add	ip, r3
     434:	e7a7      	b.n	386 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x106>
     436:	3902      	subs	r1, #2
     438:	443d      	add	r5, r7
     43a:	e774      	b.n	326 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa6>

0000043c <__aeabi_idiv0>:
     43c:	4770      	bx	lr
     43e:	bf00      	nop

00000440 <main>:
#include <zephyr.h>
#include <sys/printk.h>

void main(void)
{
	printk("Hola mundo!\n");
     440:	4801      	ldr	r0, [pc, #4]	; (448 <main+0x8>)
     442:	f002 bcaf 	b.w	2da4 <printk>
     446:	bf00      	nop
     448:	00003a2c 	.word	0x00003a2c

0000044c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     44c:	680b      	ldr	r3, [r1, #0]
     44e:	3301      	adds	r3, #1
     450:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     452:	4b01      	ldr	r3, [pc, #4]	; (458 <char_out+0xc>)
     454:	681b      	ldr	r3, [r3, #0]
     456:	4718      	bx	r3
     458:	20000000 	.word	0x20000000

0000045c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     460:	b085      	sub	sp, #20
     462:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     464:	469b      	mov	fp, r3
     466:	2c01      	cmp	r4, #1
     468:	bfb8      	it	lt
     46a:	2401      	movlt	r4, #1
     46c:	2b01      	cmp	r3, #1
     46e:	bf0c      	ite	eq
     470:	2330      	moveq	r3, #48	; 0x30
     472:	2320      	movne	r3, #32
     474:	4615      	mov	r5, r2
     476:	4606      	mov	r6, r0
     478:	468a      	mov	sl, r1
     47a:	2701      	movs	r7, #1
     47c:	f04f 080a 	mov.w	r8, #10
     480:	2200      	movs	r2, #0
     482:	f8df 9070 	ldr.w	r9, [pc, #112]	; 4f4 <_printk_dec_ulong+0x98>
     486:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     488:	fbb5 f3f9 	udiv	r3, r5, r9
     48c:	9301      	str	r3, [sp, #4]
     48e:	b90a      	cbnz	r2, 494 <_printk_dec_ulong+0x38>
     490:	45a9      	cmp	r9, r5
     492:	d81e      	bhi.n	4d2 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     494:	9b01      	ldr	r3, [sp, #4]
     496:	4651      	mov	r1, sl
     498:	f103 0030 	add.w	r0, r3, #48	; 0x30
     49c:	47b0      	blx	r6
			found_largest_digit = 1;
     49e:	2201      	movs	r2, #1
			digits++;
     4a0:	3701      	adds	r7, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     4a2:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     4a4:	f108 38ff 	add.w	r8, r8, #4294967295
		remainder %= pos;
     4a8:	fb09 5513 	mls	r5, r9, r3, r5
		pos /= 10;
     4ac:	230a      	movs	r3, #10
	while (pos >= 10) {
     4ae:	f1b8 0f01 	cmp.w	r8, #1
		pos /= 10;
     4b2:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     4b6:	d1e7      	bne.n	488 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     4b8:	4651      	mov	r1, sl
     4ba:	f105 0030 	add.w	r0, r5, #48	; 0x30
     4be:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
     4c0:	f1bb 0f03 	cmp.w	fp, #3
     4c4:	d102      	bne.n	4cc <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     4c6:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
     4c8:	2c00      	cmp	r4, #0
     4ca:	dc0e      	bgt.n	4ea <_printk_dec_ulong+0x8e>
			out(' ', ctx);
		}
	}
}
     4cc:	b005      	add	sp, #20
     4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     4d2:	4544      	cmp	r4, r8
     4d4:	dbe5      	blt.n	4a2 <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
     4d6:	f1bb 0f02 	cmp.w	fp, #2
     4da:	d8e2      	bhi.n	4a2 <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     4dc:	4651      	mov	r1, sl
     4de:	9802      	ldr	r0, [sp, #8]
     4e0:	9203      	str	r2, [sp, #12]
			digits++;
     4e2:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     4e4:	47b0      	blx	r6
			digits++;
     4e6:	9a03      	ldr	r2, [sp, #12]
     4e8:	e7db      	b.n	4a2 <_printk_dec_ulong+0x46>
			out(' ', ctx);
     4ea:	4651      	mov	r1, sl
     4ec:	2020      	movs	r0, #32
     4ee:	47b0      	blx	r6
     4f0:	3c01      	subs	r4, #1
     4f2:	e7e9      	b.n	4c8 <_printk_dec_ulong+0x6c>
     4f4:	3b9aca00 	.word	0x3b9aca00

000004f8 <__printk_hook_install>:
	_char_out = fn;
     4f8:	4b01      	ldr	r3, [pc, #4]	; (500 <__printk_hook_install+0x8>)
     4fa:	6018      	str	r0, [r3, #0]
}
     4fc:	4770      	bx	lr
     4fe:	bf00      	nop
     500:	20000000 	.word	0x20000000

00000504 <z_vprintk>:
{
     504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
     508:	2700      	movs	r7, #0
{
     50a:	4605      	mov	r5, r0
     50c:	468b      	mov	fp, r1
	int min_width = -1;
     50e:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
     512:	46b8      	mov	r8, r7
{
     514:	461c      	mov	r4, r3
     516:	b08d      	sub	sp, #52	; 0x34
     518:	1e53      	subs	r3, r2, #1
     51a:	9303      	str	r3, [sp, #12]
			might_format = 0;
     51c:	2600      	movs	r6, #0
					break;
     51e:	e005      	b.n	52c <z_vprintk+0x28>
		if (!might_format) {
     520:	b96e      	cbnz	r6, 53e <z_vprintk+0x3a>
			if (*fmt != '%') {
     522:	2825      	cmp	r0, #37	; 0x25
     524:	f000 8171 	beq.w	80a <CONFIG_ISR_STACK_SIZE+0xa>
				out((int)*fmt, ctx);
     528:	4659      	mov	r1, fp
     52a:	47a8      	blx	r5
	while (*fmt) {
     52c:	9b03      	ldr	r3, [sp, #12]
     52e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     532:	9303      	str	r3, [sp, #12]
     534:	2800      	cmp	r0, #0
     536:	d1f3      	bne.n	520 <z_vprintk+0x1c>
}
     538:	b00d      	add	sp, #52	; 0x34
     53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     53e:	287a      	cmp	r0, #122	; 0x7a
     540:	d80a      	bhi.n	558 <z_vprintk+0x54>
     542:	2862      	cmp	r0, #98	; 0x62
     544:	d810      	bhi.n	568 <z_vprintk+0x64>
     546:	2830      	cmp	r0, #48	; 0x30
     548:	d054      	beq.n	5f4 <z_vprintk+0xf0>
     54a:	d845      	bhi.n	5d8 <z_vprintk+0xd4>
     54c:	2825      	cmp	r0, #37	; 0x25
     54e:	f000 815a 	beq.w	806 <CONFIG_ISR_STACK_SIZE+0x6>
     552:	282d      	cmp	r0, #45	; 0x2d
     554:	f000 815f 	beq.w	816 <CONFIG_ISR_STACK_SIZE+0x16>
					out((int)'%', ctx);
     558:	4659      	mov	r1, fp
     55a:	2025      	movs	r0, #37	; 0x25
     55c:	47a8      	blx	r5
					out((int)*fmt, ctx);
     55e:	4659      	mov	r1, fp
     560:	9b03      	ldr	r3, [sp, #12]
     562:	7818      	ldrb	r0, [r3, #0]
     564:	47a8      	blx	r5
     566:	e7d9      	b.n	51c <z_vprintk+0x18>
     568:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
     56c:	2b17      	cmp	r3, #23
     56e:	d8f3      	bhi.n	558 <z_vprintk+0x54>
     570:	a201      	add	r2, pc, #4	; (adr r2, 578 <z_vprintk+0x74>)
     572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     576:	bf00      	nop
     578:	000007ff 	.word	0x000007ff
     57c:	00000643 	.word	0x00000643
     580:	00000559 	.word	0x00000559
     584:	00000559 	.word	0x00000559
     588:	00000559 	.word	0x00000559
     58c:	00000625 	.word	0x00000625
     590:	00000643 	.word	0x00000643
     594:	00000559 	.word	0x00000559
     598:	00000559 	.word	0x00000559
     59c:	00000625 	.word	0x00000625
     5a0:	00000559 	.word	0x00000559
     5a4:	00000559 	.word	0x00000559
     5a8:	00000559 	.word	0x00000559
     5ac:	000006e5 	.word	0x000006e5
     5b0:	00000559 	.word	0x00000559
     5b4:	00000559 	.word	0x00000559
     5b8:	000007cf 	.word	0x000007cf
     5bc:	00000559 	.word	0x00000559
     5c0:	000006b3 	.word	0x000006b3
     5c4:	00000559 	.word	0x00000559
     5c8:	00000559 	.word	0x00000559
     5cc:	000005e1 	.word	0x000005e1
     5d0:	00000559 	.word	0x00000559
     5d4:	00000625 	.word	0x00000625
			switch (*fmt) {
     5d8:	2839      	cmp	r0, #57	; 0x39
     5da:	d91a      	bls.n	612 <z_vprintk+0x10e>
     5dc:	2858      	cmp	r0, #88	; 0x58
     5de:	d1bb      	bne.n	558 <z_vprintk+0x54>
				if (*fmt == 'p') {
     5e0:	9b03      	ldr	r3, [sp, #12]
     5e2:	781b      	ldrb	r3, [r3, #0]
     5e4:	2b70      	cmp	r3, #112	; 0x70
     5e6:	f040 8088 	bne.w	6fa <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
     5ea:	f854 3b04 	ldr.w	r3, [r4], #4
     5ee:	2200      	movs	r2, #0
     5f0:	9306      	str	r3, [sp, #24]
     5f2:	e090      	b.n	716 <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
     5f4:	f1b9 0f00 	cmp.w	r9, #0
     5f8:	da0e      	bge.n	618 <z_vprintk+0x114>
     5fa:	f1b8 0f00 	cmp.w	r8, #0
     5fe:	f000 810d 	beq.w	81c <CONFIG_ISR_STACK_SIZE+0x1c>
					min_width = *fmt - '0';
     602:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     606:	f1b8 0f00 	cmp.w	r8, #0
     60a:	bf08      	it	eq
     60c:	f04f 0802 	moveq.w	r8, #2
     610:	e78c      	b.n	52c <z_vprintk+0x28>
				if (min_width < 0) {
     612:	f1b9 0f00 	cmp.w	r9, #0
     616:	dbf4      	blt.n	602 <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
     618:	230a      	movs	r3, #10
     61a:	fb03 0909 	mla	r9, r3, r9, r0
     61e:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     622:	e7f0      	b.n	606 <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
     624:	2868      	cmp	r0, #104	; 0x68
     626:	d103      	bne.n	630 <z_vprintk+0x12c>
     628:	2f68      	cmp	r7, #104	; 0x68
     62a:	d106      	bne.n	63a <z_vprintk+0x136>
					length_mod = 'H';
     62c:	2748      	movs	r7, #72	; 0x48
     62e:	e77d      	b.n	52c <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
     630:	286c      	cmp	r0, #108	; 0x6c
     632:	d102      	bne.n	63a <z_vprintk+0x136>
     634:	2f6c      	cmp	r7, #108	; 0x6c
     636:	f000 80f4 	beq.w	822 <CONFIG_ISR_STACK_SIZE+0x22>
				} else if (length_mod == 0) {
     63a:	2f00      	cmp	r7, #0
     63c:	d18c      	bne.n	558 <z_vprintk+0x54>
     63e:	4607      	mov	r7, r0
     640:	e774      	b.n	52c <z_vprintk+0x28>
				if (length_mod == 'z') {
     642:	2f7a      	cmp	r7, #122	; 0x7a
     644:	d102      	bne.n	64c <z_vprintk+0x148>
					d = va_arg(ap, int);
     646:	f854 6b04 	ldr.w	r6, [r4], #4
     64a:	e021      	b.n	690 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
     64c:	2f6c      	cmp	r7, #108	; 0x6c
     64e:	d0fa      	beq.n	646 <z_vprintk+0x142>
				} else if (length_mod == 'L') {
     650:	2f4c      	cmp	r7, #76	; 0x4c
     652:	d1f8      	bne.n	646 <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
     654:	3407      	adds	r4, #7
     656:	f024 0407 	bic.w	r4, r4, #7
     65a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     65e:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
     662:	9b04      	ldr	r3, [sp, #16]
     664:	f04f 30ff 	mov.w	r0, #4294967295
     668:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
     66c:	9b05      	ldr	r3, [sp, #20]
     66e:	9108      	str	r1, [sp, #32]
     670:	f143 0100 	adc.w	r1, r3, #0
     674:	9109      	str	r1, [sp, #36]	; 0x24
     676:	2100      	movs	r1, #0
     678:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     67c:	4299      	cmp	r1, r3
     67e:	bf08      	it	eq
     680:	4290      	cmpeq	r0, r2
     682:	d204      	bcs.n	68e <z_vprintk+0x18a>
						print_err(out, ctx);
     684:	4659      	mov	r1, fp
     686:	4628      	mov	r0, r5
     688:	f002 fb7e 	bl	2d88 <print_err>
						break;
     68c:	e746      	b.n	51c <z_vprintk+0x18>
					d = lld;
     68e:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
     690:	2e00      	cmp	r6, #0
     692:	da05      	bge.n	6a0 <z_vprintk+0x19c>
					out((int)'-', ctx);
     694:	4659      	mov	r1, fp
     696:	202d      	movs	r0, #45	; 0x2d
     698:	47a8      	blx	r5
					d = -d;
     69a:	4276      	negs	r6, r6
					min_width--;
     69c:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
     6a0:	4643      	mov	r3, r8
     6a2:	4632      	mov	r2, r6
     6a4:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
     6a8:	4659      	mov	r1, fp
     6aa:	4628      	mov	r0, r5
     6ac:	f7ff fed6 	bl	45c <_printk_dec_ulong>
				break;
     6b0:	e734      	b.n	51c <z_vprintk+0x18>
				if (length_mod == 'z') {
     6b2:	2f7a      	cmp	r7, #122	; 0x7a
     6b4:	d102      	bne.n	6bc <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
     6b6:	f854 2b04 	ldr.w	r2, [r4], #4
     6ba:	e00f      	b.n	6dc <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
     6bc:	2f6c      	cmp	r7, #108	; 0x6c
     6be:	d0fa      	beq.n	6b6 <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
     6c0:	2f4c      	cmp	r7, #76	; 0x4c
     6c2:	d1f8      	bne.n	6b6 <z_vprintk+0x1b2>
					if (llu > ~0UL) {
     6c4:	2100      	movs	r1, #0
     6c6:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
     6ca:	3407      	adds	r4, #7
     6cc:	f024 0407 	bic.w	r4, r4, #7
     6d0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
     6d4:	4299      	cmp	r1, r3
     6d6:	bf08      	it	eq
     6d8:	4290      	cmpeq	r0, r2
     6da:	d3d3      	bcc.n	684 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
     6dc:	4643      	mov	r3, r8
     6de:	f8cd 9000 	str.w	r9, [sp]
     6e2:	e7e1      	b.n	6a8 <z_vprintk+0x1a4>
				out('0', ctx);
     6e4:	4659      	mov	r1, fp
     6e6:	2030      	movs	r0, #48	; 0x30
     6e8:	47a8      	blx	r5
				out('x', ctx);
     6ea:	4659      	mov	r1, fp
     6ec:	2078      	movs	r0, #120	; 0x78
     6ee:	47a8      	blx	r5
					min_width = 8;
     6f0:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
     6f4:	f04f 0801 	mov.w	r8, #1
     6f8:	e772      	b.n	5e0 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
     6fa:	2f6c      	cmp	r7, #108	; 0x6c
     6fc:	f43f af75 	beq.w	5ea <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
     700:	2f4c      	cmp	r7, #76	; 0x4c
     702:	f47f af72 	bne.w	5ea <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
     706:	1de3      	adds	r3, r4, #7
     708:	f023 0307 	bic.w	r3, r3, #7
     70c:	461c      	mov	r4, r3
     70e:	f854 2b08 	ldr.w	r2, [r4], #8
     712:	9206      	str	r2, [sp, #24]
     714:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
     716:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
     718:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
     71a:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
     71e:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
     720:	9107      	str	r1, [sp, #28]
		shift -= 4;
     722:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
     726:	9906      	ldr	r1, [sp, #24]
     728:	f1ca 0e20 	rsb	lr, sl, #32
     72c:	f1aa 0c20 	sub.w	ip, sl, #32
     730:	fa21 f00a 	lsr.w	r0, r1, sl
     734:	fa02 fe0e 	lsl.w	lr, r2, lr
     738:	ea40 000e 	orr.w	r0, r0, lr
     73c:	fa22 fc0c 	lsr.w	ip, r2, ip
     740:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
     744:	f010 000f 	ands.w	r0, r0, #15
     748:	d107      	bne.n	75a <z_vprintk+0x256>
     74a:	9907      	ldr	r1, [sp, #28]
     74c:	b911      	cbnz	r1, 754 <z_vprintk+0x250>
     74e:	f1ba 0f00 	cmp.w	sl, #0
     752:	d125      	bne.n	7a0 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
     754:	f04f 0c30 	mov.w	ip, #48	; 0x30
     758:	e005      	b.n	766 <z_vprintk+0x262>
     75a:	2809      	cmp	r0, #9
     75c:	bf8c      	ite	hi
     75e:	f04f 0c57 	movhi.w	ip, #87	; 0x57
     762:	f04f 0c30 	movls.w	ip, #48	; 0x30
     766:	4460      	add	r0, ip
			out((int)nibble, ctx);
     768:	4659      	mov	r1, fp
     76a:	b240      	sxtb	r0, r0
     76c:	920a      	str	r2, [sp, #40]	; 0x28
     76e:	9307      	str	r3, [sp, #28]
     770:	47a8      	blx	r5
			digits++;
     772:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
     774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
     776:	3301      	adds	r3, #1
     778:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
     77a:	9b07      	ldr	r3, [sp, #28]
     77c:	f1ba 0f00 	cmp.w	sl, #0
     780:	d123      	bne.n	7ca <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
     782:	f1b8 0f03 	cmp.w	r8, #3
     786:	f47f aec9 	bne.w	51c <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
     78a:	9b04      	ldr	r3, [sp, #16]
     78c:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
     790:	2e00      	cmp	r6, #0
     792:	f77f aec3 	ble.w	51c <z_vprintk+0x18>
			out(' ', ctx);
     796:	4659      	mov	r1, fp
     798:	2020      	movs	r0, #32
     79a:	47a8      	blx	r5
     79c:	3e01      	subs	r6, #1
     79e:	e7f7      	b.n	790 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
     7a0:	1e59      	subs	r1, r3, #1
     7a2:	4599      	cmp	r9, r3
     7a4:	910a      	str	r1, [sp, #40]	; 0x28
     7a6:	db07      	blt.n	7b8 <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
     7a8:	f1b8 0f01 	cmp.w	r8, #1
     7ac:	d106      	bne.n	7bc <z_vprintk+0x2b8>
				out('0', ctx);
     7ae:	4659      	mov	r1, fp
     7b0:	2030      	movs	r0, #48	; 0x30
     7b2:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
     7b4:	47a8      	blx	r5
     7b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
     7b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     7ba:	e7b2      	b.n	722 <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
     7bc:	f1b8 0f02 	cmp.w	r8, #2
     7c0:	d1fa      	bne.n	7b8 <z_vprintk+0x2b4>
				out(' ', ctx);
     7c2:	4659      	mov	r1, fp
     7c4:	2020      	movs	r0, #32
     7c6:	920b      	str	r2, [sp, #44]	; 0x2c
     7c8:	e7f4      	b.n	7b4 <z_vprintk+0x2b0>
			found_largest_digit = 1;
     7ca:	9607      	str	r6, [sp, #28]
     7cc:	e7a9      	b.n	722 <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
     7ce:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
     7d2:	46b2      	mov	sl, r6
     7d4:	4653      	mov	r3, sl
     7d6:	f81a 0b01 	ldrb.w	r0, [sl], #1
     7da:	b968      	cbnz	r0, 7f8 <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
     7dc:	f1b8 0f03 	cmp.w	r8, #3
     7e0:	d121      	bne.n	826 <CONFIG_ISR_STACK_SIZE+0x26>
					int remaining = min_width - (s - start);
     7e2:	1b9e      	subs	r6, r3, r6
     7e4:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
     7e8:	2e00      	cmp	r6, #0
     7ea:	f77f ae97 	ble.w	51c <z_vprintk+0x18>
						out(' ', ctx);
     7ee:	4659      	mov	r1, fp
     7f0:	2020      	movs	r0, #32
     7f2:	47a8      	blx	r5
     7f4:	3e01      	subs	r6, #1
     7f6:	e7f7      	b.n	7e8 <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
     7f8:	4659      	mov	r1, fp
     7fa:	47a8      	blx	r5
     7fc:	e7ea      	b.n	7d4 <z_vprintk+0x2d0>
				out(c, ctx);
     7fe:	4659      	mov	r1, fp
     800:	f854 0b04 	ldr.w	r0, [r4], #4
     804:	e6ae      	b.n	564 <z_vprintk+0x60>
				out((int)'%', ctx);
     806:	4659      	mov	r1, fp
     808:	e6ac      	b.n	564 <z_vprintk+0x60>
				length_mod = 0;
     80a:	4637      	mov	r7, r6
				padding = PAD_NONE;
     80c:	46b0      	mov	r8, r6
				min_width = -1;
     80e:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
     812:	2601      	movs	r6, #1
     814:	e68a      	b.n	52c <z_vprintk+0x28>
			switch (*fmt) {
     816:	f04f 0803 	mov.w	r8, #3
     81a:	e687      	b.n	52c <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
     81c:	f04f 0801 	mov.w	r8, #1
     820:	e684      	b.n	52c <z_vprintk+0x28>
					length_mod = 'L';
     822:	274c      	movs	r7, #76	; 0x4c
     824:	e682      	b.n	52c <z_vprintk+0x28>
			might_format = 0;
     826:	4606      	mov	r6, r0
		++fmt;
     828:	e680      	b.n	52c <z_vprintk+0x28>
     82a:	bf00      	nop

0000082c <vprintk>:
{
     82c:	b507      	push	{r0, r1, r2, lr}
     82e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     830:	2100      	movs	r1, #0
{
     832:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     834:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     836:	4803      	ldr	r0, [pc, #12]	; (844 <vprintk+0x18>)
     838:	a901      	add	r1, sp, #4
     83a:	f7ff fe63 	bl	504 <z_vprintk>
}
     83e:	b003      	add	sp, #12
     840:	f85d fb04 	ldr.w	pc, [sp], #4
     844:	0000044d 	.word	0x0000044d

00000848 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     848:	f04f 0220 	mov.w	r2, #32
     84c:	f3ef 8311 	mrs	r3, BASEPRI
     850:	f382 8811 	msr	BASEPRI, r2
     854:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     858:	2101      	movs	r1, #1
     85a:	4a04      	ldr	r2, [pc, #16]	; (86c <nordicsemi_nrf91_init+0x24>)
     85c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     860:	f383 8811 	msr	BASEPRI, r3
     864:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     868:	2000      	movs	r0, #0
     86a:	4770      	bx	lr
     86c:	50039000 	.word	0x50039000

00000870 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     870:	b120      	cbz	r0, 87c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     872:	4b03      	ldr	r3, [pc, #12]	; (880 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     874:	0180      	lsls	r0, r0, #6
     876:	f043 0301 	orr.w	r3, r3, #1
     87a:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     87c:	4770      	bx	lr
     87e:	bf00      	nop
     880:	000038c0 	.word	0x000038c0

00000884 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     884:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     886:	4807      	ldr	r0, [pc, #28]	; (8a4 <uart_console_init+0x20>)
     888:	f001 f9a8 	bl	1bdc <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
     88c:	4c06      	ldr	r4, [pc, #24]	; (8a8 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     88e:	4b07      	ldr	r3, [pc, #28]	; (8ac <uart_console_init+0x28>)
     890:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
     892:	4620      	mov	r0, r4
     894:	f000 fd9c 	bl	13d0 <__stdout_hook_install>
	__printk_hook_install(console_out);
     898:	4620      	mov	r0, r4
     89a:	f7ff fe2d 	bl	4f8 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
     89e:	2000      	movs	r0, #0
     8a0:	bd10      	pop	{r4, pc}
     8a2:	bf00      	nop
     8a4:	00003a39 	.word	0x00003a39
     8a8:	000008b1 	.word	0x000008b1
     8ac:	20000160 	.word	0x20000160

000008b0 <console_out>:
	if ('\n' == c) {
     8b0:	280a      	cmp	r0, #10
{
     8b2:	b538      	push	{r3, r4, r5, lr}
     8b4:	4604      	mov	r4, r0
     8b6:	4d07      	ldr	r5, [pc, #28]	; (8d4 <console_out+0x24>)
	if ('\n' == c) {
     8b8:	d104      	bne.n	8c4 <console_out+0x14>
     8ba:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     8bc:	6883      	ldr	r3, [r0, #8]
     8be:	210d      	movs	r1, #13
     8c0:	685b      	ldr	r3, [r3, #4]
     8c2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
     8c4:	6828      	ldr	r0, [r5, #0]
     8c6:	6883      	ldr	r3, [r0, #8]
     8c8:	b2e1      	uxtb	r1, r4
     8ca:	685b      	ldr	r3, [r3, #4]
     8cc:	4798      	blx	r3
}
     8ce:	4620      	mov	r0, r4
     8d0:	bd38      	pop	{r3, r4, r5, pc}
     8d2:	bf00      	nop
     8d4:	20000160 	.word	0x20000160

000008d8 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
     8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
     8da:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
     8dc:	4e11      	ldr	r6, [pc, #68]	; (924 <clkstarted_handle.constprop.0+0x4c>)
static void clkstarted_handle(struct device *dev,
     8de:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
     8e0:	68f3      	ldr	r3, [r6, #12]
	sub_data->started = true;
     8e2:	fb04 3400 	mla	r4, r4, r0, r3
     8e6:	2301      	movs	r3, #1
     8e8:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
     8ea:	f04f 0320 	mov.w	r3, #32
     8ee:	f3ef 8111 	mrs	r1, BASEPRI
     8f2:	f383 8811 	msr	BASEPRI, r3
     8f6:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
     8fa:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
     8fc:	b12b      	cbz	r3, 90a <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     8fe:	6860      	ldr	r0, [r4, #4]
     900:	681a      	ldr	r2, [r3, #0]
     902:	4283      	cmp	r3, r0
	list->head = node;
     904:	6022      	str	r2, [r4, #0]
	list->tail = node;
     906:	bf08      	it	eq
     908:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
     90a:	f381 8811 	msr	BASEPRI, r1
     90e:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
     912:	b903      	cbnz	r3, 916 <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
     914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
     916:	4629      	mov	r1, r5
     918:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
     91c:	4630      	mov	r0, r6
     91e:	47b8      	blx	r7
     920:	e7e3      	b.n	8ea <clkstarted_handle.constprop.0+0x12>
     922:	bf00      	nop
     924:	20000094 	.word	0x20000094

00000928 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     928:	b508      	push	{r3, lr}
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     92a:	4b11      	ldr	r3, [pc, #68]	; (970 <nrf_power_clock_isr+0x48>)
     92c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     92e:	b16a      	cbz	r2, 94c <nrf_power_clock_isr+0x24>
    return p_reg->INTENSET & mask;
     930:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     934:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     938:	07d1      	lsls	r1, r2, #31
     93a:	d507      	bpl.n	94c <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     93c:	2200      	movs	r2, #0
     93e:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     940:	4b0c      	ldr	r3, [pc, #48]	; (974 <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     942:	68db      	ldr	r3, [r3, #12]
     944:	7a58      	ldrb	r0, [r3, #9]
     946:	b908      	cbnz	r0, 94c <nrf_power_clock_isr+0x24>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     948:	f7ff ffc6 	bl	8d8 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     94c:	4b0a      	ldr	r3, [pc, #40]	; (978 <nrf_power_clock_isr+0x50>)
     94e:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     950:	b162      	cbz	r2, 96c <nrf_power_clock_isr+0x44>
    return p_reg->INTENSET & mask;
     952:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     956:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     95a:	0792      	lsls	r2, r2, #30
     95c:	d506      	bpl.n	96c <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     95e:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     960:	2001      	movs	r0, #1
     962:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     968:	f7ff bfb6 	b.w	8d8 <clkstarted_handle.constprop.0>
}
     96c:	bd08      	pop	{r3, pc}
     96e:	bf00      	nop
     970:	50005100 	.word	0x50005100
     974:	20000094 	.word	0x20000094
     978:	50005104 	.word	0x50005104

0000097c <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
     97c:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
     97e:	4b08      	ldr	r3, [pc, #32]	; (9a0 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     980:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     984:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     988:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
     98c:	4290      	cmp	r0, r2
     98e:	d100      	bne.n	992 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
     990:	4770      	bx	lr
     992:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
     996:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     998:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     99c:	e7f2      	b.n	984 <handle_next_tick_case+0x8>
     99e:	bf00      	nop
     9a0:	50015000 	.word	0x50015000

000009a4 <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     9a4:	2200      	movs	r2, #0
     9a6:	4b06      	ldr	r3, [pc, #24]	; (9c0 <rtc1_nrf_isr+0x1c>)
     9a8:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     9aa:	4a06      	ldr	r2, [pc, #24]	; (9c4 <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
     9ac:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
     9b0:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     9b2:	1ac0      	subs	r0, r0, r3
     9b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     9b8:	4403      	add	r3, r0
     9ba:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     9bc:	f001 bfdc 	b.w	2978 <z_clock_announce>
     9c0:	50015140 	.word	0x50015140
     9c4:	2000017c 	.word	0x2000017c

000009c8 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     9c8:	b538      	push	{r3, r4, r5, lr}
     9ca:	4814      	ldr	r0, [pc, #80]	; (a1c <z_clock_driver_init+0x54>)
     9cc:	f001 f906 	bl	1bdc <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
     9d0:	b300      	cbz	r0, a14 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     9d2:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     9d4:	2400      	movs	r4, #0
     9d6:	2101      	movs	r1, #1
     9d8:	681b      	ldr	r3, [r3, #0]
     9da:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     9dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     9e0:	4d0f      	ldr	r5, [pc, #60]	; (a20 <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     9e2:	4b10      	ldr	r3, [pc, #64]	; (a24 <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
     9e4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     9e8:	601c      	str	r4, [r3, #0]
     9ea:	4b0f      	ldr	r3, [pc, #60]	; (a28 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     9ec:	2101      	movs	r1, #1
     9ee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
     9f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     9f6:	4622      	mov	r2, r4
     9f8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
     9fc:	2015      	movs	r0, #21
     9fe:	f000 f98d 	bl	d1c <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     a02:	2015      	movs	r0, #21
     a04:	f000 f97a 	bl	cfc <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     a08:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
     a0a:	4620      	mov	r0, r4
     a0c:	4a07      	ldr	r2, [pc, #28]	; (a2c <z_clock_driver_init+0x64>)
     a0e:	6013      	str	r3, [r2, #0]
     a10:	602b      	str	r3, [r5, #0]
}
     a12:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
     a14:	f04f 30ff 	mov.w	r0, #4294967295
     a18:	e7fb      	b.n	a12 <z_clock_driver_init+0x4a>
     a1a:	bf00      	nop
     a1c:	00003a40 	.word	0x00003a40
     a20:	50015000 	.word	0x50015000
     a24:	50015140 	.word	0x50015140
     a28:	e000e100 	.word	0xe000e100
     a2c:	50015008 	.word	0x50015008

00000a30 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
     a32:	4b2c      	ldr	r3, [pc, #176]	; (ae4 <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     a34:	4c2c      	ldr	r4, [pc, #176]	; (ae8 <z_clock_set_timeout+0xb8>)
     a36:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
     a3a:	4b2c      	ldr	r3, [pc, #176]	; (aec <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     a3c:	f1b0 3fff 	cmp.w	r0, #4294967295
     a40:	bf08      	it	eq
     a42:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
     a44:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
     a46:	1a52      	subs	r2, r2, r1
     a48:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
     a4c:	0212      	lsls	r2, r2, #8
     a4e:	d436      	bmi.n	abe <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     a50:	3801      	subs	r0, #1
     a52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     a56:	42a0      	cmp	r0, r4
     a58:	bfa8      	it	ge
     a5a:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
     a5c:	3301      	adds	r3, #1
     a5e:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
     a60:	42a0      	cmp	r0, r4
     a62:	bf94      	ite	ls
     a64:	180c      	addls	r4, r1, r0
     a66:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
     a68:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     a6c:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
     a6e:	4b1d      	ldr	r3, [pc, #116]	; (ae4 <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     a70:	4e1f      	ldr	r6, [pc, #124]	; (af0 <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
     a72:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
     a76:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
     a7a:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     a7e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
     a82:	1a52      	subs	r2, r2, r1
     a84:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
     a88:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     a8a:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
     a8c:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
     a90:	461d      	mov	r5, r3
     a92:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
     a96:	d103      	bne.n	aa0 <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
     a98:	200f      	movs	r0, #15
     a9a:	f002 fd7c 	bl	3596 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     a9e:	6037      	str	r7, [r6, #0]
     aa0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     aa4:	4b13      	ldr	r3, [pc, #76]	; (af4 <z_clock_set_timeout+0xc4>)
     aa6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
     aaa:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     aae:	1a23      	subs	r3, r4, r0
     ab0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
     ab4:	2b01      	cmp	r3, #1
     ab6:	d104      	bne.n	ac2 <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
     ab8:	f7ff ff60 	bl	97c <handle_next_tick_case>
     abc:	e00b      	b.n	ad6 <z_clock_set_timeout+0xa6>
		ticks = 0;
     abe:	2000      	movs	r0, #0
     ac0:	e7cc      	b.n	a5c <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     ac2:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     ac6:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
     aca:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     ace:	1a24      	subs	r4, r4, r0
     ad0:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
     ad2:	0223      	lsls	r3, r4, #8
     ad4:	d4f0      	bmi.n	ab8 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
     ad6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     ada:	4b02      	ldr	r3, [pc, #8]	; (ae4 <z_clock_set_timeout+0xb4>)
     adc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
     ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ae2:	bf00      	nop
     ae4:	50015000 	.word	0x50015000
     ae8:	007fffff 	.word	0x007fffff
     aec:	2000017c 	.word	0x2000017c
     af0:	50015140 	.word	0x50015140
     af4:	e000e100 	.word	0xe000e100

00000af8 <z_clock_elapsed>:
	__asm__ volatile(
     af8:	f04f 0220 	mov.w	r2, #32
     afc:	f3ef 8311 	mrs	r3, BASEPRI
     b00:	f382 8811 	msr	BASEPRI, r2
     b04:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     b08:	4a06      	ldr	r2, [pc, #24]	; (b24 <z_clock_elapsed+0x2c>)
     b0a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     b0e:	4a06      	ldr	r2, [pc, #24]	; (b28 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     b10:	6812      	ldr	r2, [r2, #0]
     b12:	1a80      	subs	r0, r0, r2
     b14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     b18:	f383 8811 	msr	BASEPRI, r3
     b1c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     b20:	4770      	bx	lr
     b22:	bf00      	nop
     b24:	50015000 	.word	0x50015000
     b28:	2000017c 	.word	0x2000017c

00000b2c <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
     b2c:	4801      	ldr	r0, [pc, #4]	; (b34 <nrf_cc310_platform_abort_init+0x8>)
     b2e:	f001 bfd5 	b.w	2adc <nrf_cc310_platform_set_abort>
     b32:	bf00      	nop
     b34:	000038dc 	.word	0x000038dc

00000b38 <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
     b38:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
     b3a:	b130      	cbz	r0, b4a <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     b3c:	6843      	ldr	r3, [r0, #4]
     b3e:	b13b      	cbz	r3, b50 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
     b40:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
     b42:	f001 fa47 	bl	1fd4 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
     b46:	2000      	movs	r0, #0
}
     b48:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     b4a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     b4e:	e7fb      	b.n	b48 <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     b50:	4800      	ldr	r0, [pc, #0]	; (b54 <mutex_unlock+0x1c>)
     b52:	e7f9      	b.n	b48 <mutex_unlock+0x10>
     b54:	ffff8fea 	.word	0xffff8fea

00000b58 <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
     b58:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
     b5a:	4604      	mov	r4, r0
     b5c:	b918      	cbnz	r0, b66 <mutex_free+0xe>
        platform_abort_apis.abort_fn(
     b5e:	4b0b      	ldr	r3, [pc, #44]	; (b8c <mutex_free+0x34>)
     b60:	480b      	ldr	r0, [pc, #44]	; (b90 <mutex_free+0x38>)
     b62:	685b      	ldr	r3, [r3, #4]
     b64:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     b66:	6865      	ldr	r5, [r4, #4]
     b68:	b155      	cbz	r5, b80 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
     b6a:	f015 0502 	ands.w	r5, r5, #2
     b6e:	6820      	ldr	r0, [r4, #0]
     b70:	d107      	bne.n	b82 <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
     b72:	4601      	mov	r1, r0
     b74:	4807      	ldr	r0, [pc, #28]	; (b94 <mutex_free+0x3c>)
     b76:	f001 f98b 	bl	1e90 <k_mem_slab_free>
        mutex->mutex = NULL;
     b7a:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
     b7c:	2300      	movs	r3, #0
     b7e:	6063      	str	r3, [r4, #4]
}
     b80:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     b82:	2214      	movs	r2, #20
     b84:	2100      	movs	r1, #0
     b86:	f002 fafd 	bl	3184 <memset>
     b8a:	e7f7      	b.n	b7c <mutex_free+0x24>
     b8c:	20000054 	.word	0x20000054
     b90:	00003a50 	.word	0x00003a50
     b94:	20000180 	.word	0x20000180

00000b98 <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
     b98:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     b9a:	4604      	mov	r4, r0
     b9c:	b918      	cbnz	r0, ba6 <mutex_init+0xe>
        platform_abort_apis.abort_fn(
     b9e:	4b14      	ldr	r3, [pc, #80]	; (bf0 <mutex_init+0x58>)
     ba0:	4814      	ldr	r0, [pc, #80]	; (bf4 <mutex_init+0x5c>)
     ba2:	685b      	ldr	r3, [r3, #4]
     ba4:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
     ba6:	6863      	ldr	r3, [r4, #4]
     ba8:	b9cb      	cbnz	r3, bde <mutex_init+0x46>
     baa:	6823      	ldr	r3, [r4, #0]
     bac:	b9bb      	cbnz	r3, bde <mutex_init+0x46>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
     bae:	f04f 32ff 	mov.w	r2, #4294967295
     bb2:	f04f 33ff 	mov.w	r3, #4294967295
     bb6:	4621      	mov	r1, r4
     bb8:	480f      	ldr	r0, [pc, #60]	; (bf8 <mutex_init+0x60>)
     bba:	f001 f937 	bl	1e2c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
     bbe:	b908      	cbnz	r0, bc4 <mutex_init+0x2c>
     bc0:	6823      	ldr	r3, [r4, #0]
     bc2:	b91b      	cbnz	r3, bcc <mutex_init+0x34>
            platform_abort_apis.abort_fn(
     bc4:	4b0a      	ldr	r3, [pc, #40]	; (bf0 <mutex_init+0x58>)
     bc6:	480d      	ldr	r0, [pc, #52]	; (bfc <mutex_init+0x64>)
     bc8:	685b      	ldr	r3, [r3, #4]
     bca:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     bcc:	2214      	movs	r2, #20
     bce:	2100      	movs	r1, #0
     bd0:	6820      	ldr	r0, [r4, #0]
     bd2:	f002 fad7 	bl	3184 <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
     bd6:	6863      	ldr	r3, [r4, #4]
     bd8:	f043 0302 	orr.w	r3, r3, #2
     bdc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
     bde:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
     be0:	f002 fbfe 	bl	33e0 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
     be4:	6863      	ldr	r3, [r4, #4]
     be6:	f043 0301 	orr.w	r3, r3, #1
     bea:	6063      	str	r3, [r4, #4]
}
     bec:	bd10      	pop	{r4, pc}
     bee:	bf00      	nop
     bf0:	20000054 	.word	0x20000054
     bf4:	00003a50 	.word	0x00003a50
     bf8:	20000180 	.word	0x20000180
     bfc:	00003a76 	.word	0x00003a76

00000c00 <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
     c00:	b508      	push	{r3, lr}
    if(mutex == NULL) {
     c02:	b168      	cbz	r0, c20 <mutex_lock+0x20>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     c04:	6843      	ldr	r3, [r0, #4]
     c06:	b173      	cbz	r3, c26 <mutex_lock+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
     c08:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
     c0a:	f04f 33ff 	mov.w	r3, #4294967295
     c0e:	f04f 32ff 	mov.w	r2, #4294967295
     c12:	f001 f967 	bl	1ee4 <z_impl_k_mutex_lock>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
     c16:	4b05      	ldr	r3, [pc, #20]	; (c2c <mutex_lock+0x2c>)
    if (ret == 0) {
     c18:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
     c1a:	bf18      	it	ne
     c1c:	4618      	movne	r0, r3
}
     c1e:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     c20:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     c24:	e7fb      	b.n	c1e <mutex_lock+0x1e>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     c26:	4802      	ldr	r0, [pc, #8]	; (c30 <mutex_lock+0x30>)
     c28:	e7f9      	b.n	c1e <mutex_lock+0x1e>
     c2a:	bf00      	nop
     c2c:	ffff8fe9 	.word	0xffff8fe9
     c30:	ffff8fea 	.word	0xffff8fea

00000c34 <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
     c34:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
     c36:	4906      	ldr	r1, [pc, #24]	; (c50 <nrf_cc310_platform_mutex_init+0x1c>)
     c38:	2340      	movs	r3, #64	; 0x40
     c3a:	2214      	movs	r2, #20
     c3c:	4805      	ldr	r0, [pc, #20]	; (c54 <nrf_cc310_platform_mutex_init+0x20>)
     c3e:	f002 fbb4 	bl	33aa <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
     c42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
     c46:	4904      	ldr	r1, [pc, #16]	; (c58 <nrf_cc310_platform_mutex_init+0x24>)
     c48:	4804      	ldr	r0, [pc, #16]	; (c5c <nrf_cc310_platform_mutex_init+0x28>)
     c4a:	f001 bf7f 	b.w	2b4c <nrf_cc310_platform_set_mutexes>
     c4e:	bf00      	nop
     c50:	2000019c 	.word	0x2000019c
     c54:	20000180 	.word	0x20000180
     c58:	000038f4 	.word	0x000038f4
     c5c:	000038e4 	.word	0x000038e4

00000c60 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     c60:	4a09      	ldr	r2, [pc, #36]	; (c88 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
     c62:	490a      	ldr	r1, [pc, #40]	; (c8c <arch_swap+0x2c>)
	_current->arch.basepri = key;
     c64:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     c66:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
     c68:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
     c6a:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     c6c:	4908      	ldr	r1, [pc, #32]	; (c90 <arch_swap+0x30>)
     c6e:	684b      	ldr	r3, [r1, #4]
     c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     c74:	604b      	str	r3, [r1, #4]
     c76:	2300      	movs	r3, #0
     c78:	f383 8811 	msr	BASEPRI, r3
     c7c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     c80:	6893      	ldr	r3, [r2, #8]
}
     c82:	6f18      	ldr	r0, [r3, #112]	; 0x70
     c84:	4770      	bx	lr
     c86:	bf00      	nop
     c88:	200007b8 	.word	0x200007b8
     c8c:	000039a0 	.word	0x000039a0
     c90:	e000ed00 	.word	0xe000ed00

00000c94 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     c94:	490f      	ldr	r1, [pc, #60]	; (cd4 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
     c96:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     c98:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
     c9c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
     c9e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     ca2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     ca6:	2020      	movs	r0, #32
    msr BASEPRI, r0
     ca8:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
     cac:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
     cb0:	4f09      	ldr	r7, [pc, #36]	; (cd8 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     cb2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     cb6:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
     cb8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
     cba:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     cbc:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
     cbe:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     cc0:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     cc2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     cc6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
     cca:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
     cce:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
     cd2:	4770      	bx	lr
    ldr r1, =_kernel
     cd4:	200007b8 	.word	0x200007b8
    ldr v4, =_SCS_ICSR
     cd8:	e000ed04 	.word	0xe000ed04

00000cdc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
     cdc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     ce0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     ce2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     ce6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     cea:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
     cec:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
     cf0:	2902      	cmp	r1, #2
    beq _oops
     cf2:	d0ff      	beq.n	cf4 <_oops>

00000cf4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
     cf4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
     cf6:	f002 f9da 	bl	30ae <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
     cfa:	bd01      	pop	{r0, pc}

00000cfc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     cfc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     cfe:	2b00      	cmp	r3, #0
     d00:	db08      	blt.n	d14 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d02:	2201      	movs	r2, #1
     d04:	f000 001f 	and.w	r0, r0, #31
     d08:	fa02 f000 	lsl.w	r0, r2, r0
     d0c:	4a02      	ldr	r2, [pc, #8]	; (d18 <arch_irq_enable+0x1c>)
     d0e:	095b      	lsrs	r3, r3, #5
     d10:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     d14:	4770      	bx	lr
     d16:	bf00      	nop
     d18:	e000e100 	.word	0xe000e100

00000d1c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     d1c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
     d1e:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
     d20:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d24:	bfac      	ite	ge
     d26:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d2a:	4b06      	ldrlt	r3, [pc, #24]	; (d44 <z_arm_irq_priority_set+0x28>)
     d2c:	ea4f 1141 	mov.w	r1, r1, lsl #5
     d30:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d32:	bfab      	itete	ge
     d34:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d38:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d3c:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d40:	5419      	strblt	r1, [r3, r0]
}
     d42:	4770      	bx	lr
     d44:	e000ed14 	.word	0xe000ed14

00000d48 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
     d48:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
     d4c:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
     d4e:	3a20      	subs	r2, #32
     d50:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
     d54:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
     d56:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
     d58:	4907      	ldr	r1, [pc, #28]	; (d78 <arch_new_thread+0x30>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
     d5a:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
     d5c:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
     d5e:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
     d62:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
     d64:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
     d66:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
     d68:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
     d6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     d6e:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
     d70:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
     d72:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
     d74:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
     d76:	4770      	bx	lr
     d78:	00002dbf 	.word	0x00002dbf

00000d7c <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
     d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d7e:	460c      	mov	r4, r1
     d80:	4617      	mov	r7, r2
     d82:	4606      	mov	r6, r0
     d84:	461d      	mov	r5, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
     d86:	f000 f9ab 	bl	10e0 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
     d8a:	4b09      	ldr	r3, [pc, #36]	; (db0 <arch_switch_to_main_thread+0x34>)
	start_of_main_stack =
     d8c:	443c      	add	r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
     d8e:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
     d92:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
     d94:	4628      	mov	r0, r5
     d96:	f384 8809 	msr	PSP, r4
     d9a:	2100      	movs	r1, #0
     d9c:	b663      	cpsie	if
     d9e:	f381 8811 	msr	BASEPRI, r1
     da2:	f3bf 8f6f 	isb	sy
     da6:	2200      	movs	r2, #0
     da8:	2300      	movs	r3, #0
     daa:	f002 f808 	bl	2dbe <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
     dae:	bf00      	nop
     db0:	200007b8 	.word	0x200007b8

00000db4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
     db4:	4901      	ldr	r1, [pc, #4]	; (dbc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
     db6:	2210      	movs	r2, #16
	str	r2, [r1]
     db8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
     dba:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
     dbc:	e000ed10 	.word	0xe000ed10

00000dc0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
     dc0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
     dc2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
     dc4:	f380 8811 	msr	BASEPRI, r0
	isb
     dc8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
     dcc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
     dd0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
     dd2:	b662      	cpsie	i
	isb
     dd4:	f3bf 8f6f 	isb	sy

	bx	lr
     dd8:	4770      	bx	lr
     dda:	bf00      	nop

00000ddc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
     ddc:	bf30      	wfi
    b z_SysNmiOnReset
     dde:	f7ff bffd 	b.w	ddc <z_SysNmiOnReset>
     de2:	bf00      	nop

00000de4 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     de4:	4a0e      	ldr	r2, [pc, #56]	; (e20 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
     de6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     de8:	4b0e      	ldr	r3, [pc, #56]	; (e24 <z_arm_prep_c+0x40>)
     dea:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     dee:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     df0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     df4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
     df8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     dfc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
     e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
     e04:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
     e08:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     e0c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
     e10:	f000 ff22 	bl	1c58 <z_bss_zero>
	z_data_copy();
     e14:	f000 ff2a 	bl	1c6c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
     e18:	f000 f930 	bl	107c <z_arm_interrupt_init>
	z_cstart();
     e1c:	f000 ff64 	bl	1ce8 <z_cstart>
     e20:	00000000 	.word	0x00000000
     e24:	e000ed00 	.word	0xe000ed00

00000e28 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
     e28:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
     e2a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     e2c:	4a0b      	ldr	r2, [pc, #44]	; (e5c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     e2e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
     e30:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     e32:	bf1e      	ittt	ne
	movne	r1, #0
     e34:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     e36:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
     e38:	f002 fab5 	blne	33a6 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     e3c:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
     e3e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     e42:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     e46:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
     e4a:	4905      	ldr	r1, [pc, #20]	; (e60 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     e4c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     e4e:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
     e50:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
     e52:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
     e56:	4903      	ldr	r1, [pc, #12]	; (e64 <_isr_wrapper+0x3c>)
	bx r1
     e58:	4708      	bx	r1
     e5a:	0000      	.short	0x0000
	ldr r2, =_kernel
     e5c:	200007b8 	.word	0x200007b8
	ldr r1, =_sw_isr_table
     e60:	00003694 	.word	0x00003694
	ldr r1, =z_arm_int_exit
     e64:	0000103d 	.word	0x0000103d

00000e68 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
     e68:	f002 f85e 	bl	2f28 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     e6c:	2020      	movs	r0, #32
    msr BASEPRI, r0
     e6e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
     e72:	4808      	ldr	r0, [pc, #32]	; (e94 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     e74:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     e78:	1840      	adds	r0, r0, r1
    msr PSP, r0
     e7a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
     e7e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
     e82:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
     e84:	4308      	orrs	r0, r1
    msr CONTROL, r0
     e86:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
     e8a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
     e8e:	f7ff ffa9 	bl	de4 <z_arm_prep_c>
     e92:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
     e94:	20000d58 	.word	0x20000d58

00000e98 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
     e98:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
     e9c:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
     ea0:	4672      	mov	r2, lr

	push {r0, lr}
     ea2:	b501      	push	{r0, lr}

	bl z_arm_fault
     ea4:	f000 f84e 	bl	f44 <z_arm_fault>

	pop {r0, pc}
     ea8:	bd01      	pop	{r0, pc}
     eaa:	bf00      	nop

00000eac <mem_manage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
     eac:	4b0c      	ldr	r3, [pc, #48]	; (ee0 <mem_manage_fault.isra.0+0x34>)
     eae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
     eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
     eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     eb4:	0792      	lsls	r2, r2, #30
     eb6:	d508      	bpl.n	eca <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
     eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
     eba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     ebc:	0612      	lsls	r2, r2, #24
     ebe:	d504      	bpl.n	eca <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
     ec0:	b118      	cbz	r0, eca <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
     ec8:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
     eca:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
     ecc:	4b04      	ldr	r3, [pc, #16]	; (ee0 <mem_manage_fault.isra.0+0x34>)
     ece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
     ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
     ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     ed6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
     eda:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
     edc:	7008      	strb	r0, [r1, #0]

	return reason;
}
     ede:	4770      	bx	lr
     ee0:	e000ed00 	.word	0xe000ed00

00000ee4 <bus_fault.isra.0>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     ee4:	4b0d      	ldr	r3, [pc, #52]	; (f1c <bus_fault.isra.0+0x38>)
     ee6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     eea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     eec:	0592      	lsls	r2, r2, #22
     eee:	d508      	bpl.n	f02 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
     ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
     ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     ef4:	0412      	lsls	r2, r2, #16
     ef6:	d504      	bpl.n	f02 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
     ef8:	b118      	cbz	r0, f02 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     efa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     efc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
     f00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
     f02:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     f04:	4b05      	ldr	r3, [pc, #20]	; (f1c <bus_fault.isra.0+0x38>)
     f06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
     f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     f0a:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     f0c:	bf58      	it	pl
     f0e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
     f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     f12:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
     f16:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
     f18:	7008      	strb	r0, [r1, #0]

	return reason;
}
     f1a:	4770      	bx	lr
     f1c:	e000ed00 	.word	0xe000ed00

00000f20 <usage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
     f20:	4b07      	ldr	r3, [pc, #28]	; (f40 <usage_fault.isra.0+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
     f22:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
     f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
     f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
     f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
     f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
     f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
     f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
     f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     f34:	ea6f 4202 	mvn.w	r2, r2, lsl #16
     f38:	ea6f 4212 	mvn.w	r2, r2, lsr #16
     f3c:	629a      	str	r2, [r3, #40]	; 0x28
}
     f3e:	4770      	bx	lr
     f40:	e000ed00 	.word	0xe000ed00

00000f44 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
     f44:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     f46:	4b36      	ldr	r3, [pc, #216]	; (1020 <z_arm_fault+0xdc>)
{
     f48:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     f4a:	685b      	ldr	r3, [r3, #4]
     f4c:	2500      	movs	r5, #0
{
     f4e:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
     f54:	f385 8811 	msr	BASEPRI, r5
     f58:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
     f5c:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
     f60:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
     f64:	d111      	bne.n	f8a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
     f66:	f002 010c 	and.w	r1, r2, #12
     f6a:	2908      	cmp	r1, #8
     f6c:	d00d      	beq.n	f8a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
     f6e:	0711      	lsls	r1, r2, #28
     f70:	d401      	bmi.n	f76 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
     f72:	4606      	mov	r6, r0
			*nested_exc = true;
     f74:	2501      	movs	r5, #1
	*recoverable = false;
     f76:	2200      	movs	r2, #0
     f78:	3b03      	subs	r3, #3
     f7a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
     f7e:	2b03      	cmp	r3, #3
     f80:	d847      	bhi.n	1012 <z_arm_fault+0xce>
     f82:	e8df f003 	tbb	[pc, r3]
     f86:	3e04      	.short	0x3e04
     f88:	3b42      	.short	0x3b42
		return NULL;
     f8a:	462e      	mov	r6, r5
     f8c:	e7f3      	b.n	f76 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
     f8e:	4b24      	ldr	r3, [pc, #144]	; (1020 <z_arm_fault+0xdc>)
     f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     f92:	0792      	lsls	r2, r2, #30
     f94:	d43d      	bmi.n	1012 <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
     f96:	6adc      	ldr	r4, [r3, #44]	; 0x2c
     f98:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
     f9c:	d008      	beq.n	fb0 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
     f9e:	3328      	adds	r3, #40	; 0x28
     fa0:	781b      	ldrb	r3, [r3, #0]
     fa2:	b1eb      	cbz	r3, fe0 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
     fa4:	2001      	movs	r0, #1
     fa6:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
     faa:	f7ff ff7f 	bl	eac <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
     fae:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
     fb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fb4:	b993      	cbnz	r3, fdc <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
     fb6:	2220      	movs	r2, #32
     fb8:	4631      	mov	r1, r6
     fba:	a802      	add	r0, sp, #8
     fbc:	f002 f8b7 	bl	312e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
     fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fc2:	b345      	cbz	r5, 1016 <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
     fc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
     fc8:	b922      	cbnz	r2, fd4 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
     fca:	ea6f 2353 	mvn.w	r3, r3, lsr #9
     fce:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
     fd2:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
     fd4:	4620      	mov	r0, r4
     fd6:	a902      	add	r1, sp, #8
     fd8:	f002 f867 	bl	30aa <z_arm_fatal_error>
}
     fdc:	b00a      	add	sp, #40	; 0x28
     fde:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
     fe0:	4b10      	ldr	r3, [pc, #64]	; (1024 <z_arm_fault+0xe0>)
     fe2:	781b      	ldrb	r3, [r3, #0]
     fe4:	b12b      	cbz	r3, ff2 <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
     fe6:	2001      	movs	r0, #1
     fe8:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
     fec:	f7ff ff7a 	bl	ee4 <bus_fault.isra.0>
     ff0:	e7dd      	b.n	fae <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
     ff2:	4b0d      	ldr	r3, [pc, #52]	; (1028 <z_arm_fault+0xe4>)
     ff4:	8818      	ldrh	r0, [r3, #0]
     ff6:	b284      	uxth	r4, r0
     ff8:	2c00      	cmp	r4, #0
     ffa:	d0d9      	beq.n	fb0 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
     ffc:	f7ff ff90 	bl	f20 <usage_fault.isra.0>
    1000:	e7d5      	b.n	fae <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
    1002:	2000      	movs	r0, #0
    1004:	f10d 0107 	add.w	r1, sp, #7
    1008:	e7cf      	b.n	faa <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    100a:	2000      	movs	r0, #0
    100c:	f10d 0107 	add.w	r1, sp, #7
    1010:	e7ec      	b.n	fec <z_arm_fault+0xa8>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    1012:	2400      	movs	r4, #0
    1014:	e7cc      	b.n	fb0 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1016:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    101a:	f023 0301 	bic.w	r3, r3, #1
    101e:	e7d8      	b.n	fd2 <z_arm_fault+0x8e>
    1020:	e000ed00 	.word	0xe000ed00
    1024:	e000ed29 	.word	0xe000ed29
    1028:	e000ed2a 	.word	0xe000ed2a

0000102c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    102c:	4a02      	ldr	r2, [pc, #8]	; (1038 <z_arm_fault_init+0xc>)
    102e:	6953      	ldr	r3, [r2, #20]
    1030:	f043 0310 	orr.w	r3, r3, #16
    1034:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1036:	4770      	bx	lr
    1038:	e000ed00 	.word	0xe000ed00

0000103c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    103c:	4b04      	ldr	r3, [pc, #16]	; (1050 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    103e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1040:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    1042:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1044:	d003      	beq.n	104e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1046:	4903      	ldr	r1, [pc, #12]	; (1054 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    104c:	600a      	str	r2, [r1, #0]

0000104e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    104e:	4770      	bx	lr
	ldr r3, =_kernel
    1050:	200007b8 	.word	0x200007b8
	ldr r1, =_SCS_ICSR
    1054:	e000ed04 	.word	0xe000ed04

00001058 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    1058:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    105c:	4905      	ldr	r1, [pc, #20]	; (1074 <sys_arch_reboot+0x1c>)
    105e:	4b06      	ldr	r3, [pc, #24]	; (1078 <sys_arch_reboot+0x20>)
    1060:	68ca      	ldr	r2, [r1, #12]
    1062:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1066:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1068:	60cb      	str	r3, [r1, #12]
    106a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    106e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1070:	e7fd      	b.n	106e <sys_arch_reboot+0x16>
    1072:	bf00      	nop
    1074:	e000ed00 	.word	0xe000ed00
    1078:	05fa0004 	.word	0x05fa0004

0000107c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    107c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    107e:	2120      	movs	r1, #32
    1080:	4803      	ldr	r0, [pc, #12]	; (1090 <z_arm_interrupt_init+0x14>)
    1082:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1084:	3301      	adds	r3, #1
    1086:	2b41      	cmp	r3, #65	; 0x41
    1088:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    108c:	d1f9      	bne.n	1082 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    108e:	4770      	bx	lr
    1090:	e000e100 	.word	0xe000e100

00001094 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    1094:	b538      	push	{r3, r4, r5, lr}
    1096:	4604      	mov	r4, r0
	__asm__ volatile(
    1098:	f04f 0320 	mov.w	r3, #32
    109c:	f3ef 8511 	mrs	r5, BASEPRI
    10a0:	f383 8811 	msr	BASEPRI, r3
    10a4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    10a8:	f001 f988 	bl	23bc <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    10ac:	4b0a      	ldr	r3, [pc, #40]	; (10d8 <z_impl_k_thread_abort+0x44>)
    10ae:	689b      	ldr	r3, [r3, #8]
    10b0:	42a3      	cmp	r3, r4
    10b2:	d10b      	bne.n	10cc <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    10b4:	4b09      	ldr	r3, [pc, #36]	; (10dc <z_impl_k_thread_abort+0x48>)
    10b6:	685a      	ldr	r2, [r3, #4]
    10b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
    10bc:	b912      	cbnz	r2, 10c4 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    10be:	4628      	mov	r0, r5
    10c0:	f7ff fdce 	bl	c60 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    10c4:	685a      	ldr	r2, [r3, #4]
    10c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    10ca:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    10cc:	4628      	mov	r0, r5
}
    10ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    10d2:	f002 b997 	b.w	3404 <z_reschedule_irqlock>
    10d6:	bf00      	nop
    10d8:	200007b8 	.word	0x200007b8
    10dc:	e000ed00 	.word	0xe000ed00

000010e0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    10e0:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    10e2:	4b0e      	ldr	r3, [pc, #56]	; (111c <z_arm_configure_static_mpu_regions+0x3c>)
{
    10e4:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    10e6:	9302      	str	r3, [sp, #8]
    10e8:	4b0d      	ldr	r3, [pc, #52]	; (1120 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    10ea:	4c0e      	ldr	r4, [pc, #56]	; (1124 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    10ec:	9303      	str	r3, [sp, #12]
    10ee:	4b0e      	ldr	r3, [pc, #56]	; (1128 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    10f0:	4a0e      	ldr	r2, [pc, #56]	; (112c <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    10f2:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    10f4:	ab02      	add	r3, sp, #8
    10f6:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    10f8:	a801      	add	r0, sp, #4
    10fa:	4623      	mov	r3, r4
    10fc:	2101      	movs	r1, #1
    10fe:	f000 f907 	bl	1310 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    1102:	2300      	movs	r3, #0
    1104:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1106:	4b0a      	ldr	r3, [pc, #40]	; (1130 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1108:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    110a:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    110c:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    110e:	9305      	str	r3, [sp, #20]
    1110:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1112:	f000 f907 	bl	1324 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1116:	b008      	add	sp, #32
    1118:	bd10      	pop	{r4, pc}
    111a:	bf00      	nop
    111c:	20000000 	.word	0x20000000
    1120:	00000000 	.word	0x00000000
    1124:	20010000 	.word	0x20010000
    1128:	00010006 	.word	0x00010006
    112c:	20000000 	.word	0x20000000
    1130:	20000158 	.word	0x20000158

00001134 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    1134:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1136:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    1138:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    113a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    113e:	f004 031f 	and.w	r3, r4, #31
    1142:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1144:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1146:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1148:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    114c:	4904      	ldr	r1, [pc, #16]	; (1160 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    114e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    1152:	f043 0301 	orr.w	r3, r3, #1
    1156:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    1158:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    115a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    115c:	bd10      	pop	{r4, pc}
    115e:	bf00      	nop
    1160:	e000ed90 	.word	0xe000ed90

00001164 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    1164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1168:	4607      	mov	r7, r0
    116a:	4688      	mov	r8, r1
    116c:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    116e:	2600      	movs	r6, #0
	MPU->RNR = index;
    1170:	4d4a      	ldr	r5, [pc, #296]	; (129c <mpu_configure_regions_and_partition.constprop.0+0x138>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    1172:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    1174:	4546      	cmp	r6, r8
    1176:	da0b      	bge.n	1190 <mpu_configure_regions_and_partition.constprop.0+0x2c>
		if (regions[i]->size == 0U) {
    1178:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    117c:	f8d3 9004 	ldr.w	r9, [r3, #4]
    1180:	f1b9 0f00 	cmp.w	r9, #0
    1184:	d03a      	beq.n	11fc <mpu_configure_regions_and_partition.constprop.0+0x98>
		&&
    1186:	f1b9 0f1f 	cmp.w	r9, #31
    118a:	d805      	bhi.n	1198 <mpu_configure_regions_and_partition.constprop.0+0x34>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    118c:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    1190:	4620      	mov	r0, r4
    1192:	b005      	add	sp, #20
    1194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    1198:	f019 0f1f 	tst.w	r9, #31
    119c:	d1f6      	bne.n	118c <mpu_configure_regions_and_partition.constprop.0+0x28>
		((part->start &
    119e:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    11a2:	f01a 0f1f 	tst.w	sl, #31
    11a6:	d1f1      	bne.n	118c <mpu_configure_regions_and_partition.constprop.0+0x28>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    11a8:	4650      	mov	r0, sl
    11aa:	f001 ffab 	bl	3104 <arm_cmse_mpu_region_get>
    11ae:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    11b0:	eb09 000a 	add.w	r0, r9, sl
    11b4:	3801      	subs	r0, #1
    11b6:	f001 ffa5 	bl	3104 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    11ba:	4583      	cmp	fp, r0
    11bc:	d1e6      	bne.n	118c <mpu_configure_regions_and_partition.constprop.0+0x28>
		if ((u_reg_index == -EINVAL) ||
    11be:	f11b 0f16 	cmn.w	fp, #22
    11c2:	d0e3      	beq.n	118c <mpu_configure_regions_and_partition.constprop.0+0x28>
			(u_reg_index > (reg_index - 1))) {
    11c4:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    11c6:	455b      	cmp	r3, fp
    11c8:	dbe0      	blt.n	118c <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
    11ca:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    11ce:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    11d0:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    11d4:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    11d6:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    11da:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    11de:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    11e2:	e9d1 3200 	ldrd	r3, r2, [r1]
    11e6:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    11e8:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    11ea:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    11ee:	d118      	bne.n	1222 <mpu_configure_regions_and_partition.constprop.0+0xbe>
    11f0:	45ca      	cmp	sl, r9
    11f2:	d105      	bne.n	1200 <mpu_configure_regions_and_partition.constprop.0+0x9c>
			mpu_configure_region(u_reg_index, regions[i]);
    11f4:	fa5f f08b 	uxtb.w	r0, fp
    11f8:	f001 ff64 	bl	30c4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    11fc:	3601      	adds	r6, #1
    11fe:	e7b9      	b.n	1174 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
    1200:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1204:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    1206:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    120a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    120e:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1210:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    1212:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    1214:	f001 ff56 	bl	30c4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1218:	f110 0f16 	cmn.w	r0, #22
    121c:	d0b6      	beq.n	118c <mpu_configure_regions_and_partition.constprop.0+0x28>
			reg_index++;
    121e:	1c44      	adds	r4, r0, #1
    1220:	e7ec      	b.n	11fc <mpu_configure_regions_and_partition.constprop.0+0x98>
	MPU->RNR = index;
    1222:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1226:	692a      	ldr	r2, [r5, #16]
    1228:	3b01      	subs	r3, #1
    122a:	f023 031f 	bic.w	r3, r3, #31
    122e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1232:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    1234:	45ca      	cmp	sl, r9
    1236:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1238:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    123a:	d0eb      	beq.n	1214 <mpu_configure_regions_and_partition.constprop.0+0xb0>
				mpu_configure_region(reg_index, regions[i]);
    123c:	f001 ff42 	bl	30c4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1240:	f110 0f16 	cmn.w	r0, #22
    1244:	d0a2      	beq.n	118c <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
    1246:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    124a:	68ea      	ldr	r2, [r5, #12]
    124c:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    1250:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
    1254:	f362 0304 	bfi	r3, r2, #0, #5
    1258:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    125c:	692b      	ldr	r3, [r5, #16]
    125e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1262:	085b      	lsrs	r3, r3, #1
    1264:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    1268:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    126c:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    1270:	e9d3 1300 	ldrd	r1, r3, [r3]
    1274:	440b      	add	r3, r1
    1276:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    1278:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    127c:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    127e:	4453      	add	r3, sl
    1280:	eba3 0309 	sub.w	r3, r3, r9
    1284:	b2c0      	uxtb	r0, r0
    1286:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    128a:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    128c:	9303      	str	r3, [sp, #12]
    128e:	f63f af7d 	bhi.w	118c <mpu_configure_regions_and_partition.constprop.0+0x28>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    1292:	4669      	mov	r1, sp
    1294:	f7ff ff4e 	bl	1134 <region_init>
    1298:	e7c1      	b.n	121e <mpu_configure_regions_and_partition.constprop.0+0xba>
    129a:	bf00      	nop
    129c:	e000ed90 	.word	0xe000ed90

000012a0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    12a0:	2205      	movs	r2, #5
    12a2:	4b03      	ldr	r3, [pc, #12]	; (12b0 <arm_core_mpu_enable+0x10>)
    12a4:	605a      	str	r2, [r3, #4]
    12a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12aa:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    12ae:	4770      	bx	lr
    12b0:	e000ed90 	.word	0xe000ed90

000012b4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    12b4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    12b8:	2200      	movs	r2, #0
    12ba:	4b01      	ldr	r3, [pc, #4]	; (12c0 <arm_core_mpu_disable+0xc>)
    12bc:	605a      	str	r2, [r3, #4]
}
    12be:	4770      	bx	lr
    12c0:	e000ed90 	.word	0xe000ed90

000012c4 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    12c4:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    12c6:	4c0e      	ldr	r4, [pc, #56]	; (1300 <arm_mpu_init+0x3c>)
    12c8:	6825      	ldr	r5, [r4, #0]
    12ca:	2d10      	cmp	r5, #16
    12cc:	d814      	bhi.n	12f8 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    12ce:	f7ff fff1 	bl	12b4 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    12d2:	2000      	movs	r0, #0
	MPU->MAIR0 =
    12d4:	4b0b      	ldr	r3, [pc, #44]	; (1304 <arm_mpu_init+0x40>)
    12d6:	4a0c      	ldr	r2, [pc, #48]	; (1308 <arm_mpu_init+0x44>)
    12d8:	631a      	str	r2, [r3, #48]	; 0x30
    12da:	4285      	cmp	r5, r0
    12dc:	d105      	bne.n	12ea <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    12de:	4b0b      	ldr	r3, [pc, #44]	; (130c <arm_mpu_init+0x48>)
    12e0:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    12e2:	f7ff ffdd 	bl	12a0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    12e6:	2000      	movs	r0, #0
}
    12e8:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    12ea:	6861      	ldr	r1, [r4, #4]
    12ec:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    12f0:	f7ff ff20 	bl	1134 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    12f4:	3001      	adds	r0, #1
    12f6:	e7f0      	b.n	12da <arm_mpu_init+0x16>
		return -1;
    12f8:	f04f 30ff 	mov.w	r0, #4294967295
    12fc:	e7f4      	b.n	12e8 <arm_mpu_init+0x24>
    12fe:	bf00      	nop
    1300:	00003908 	.word	0x00003908
    1304:	e000ed90 	.word	0xe000ed90
    1308:	0044ffaa 	.word	0x0044ffaa
    130c:	20000810 	.word	0x20000810

00001310 <arm_core_mpu_configure_static_mpu_regions>:
{
    1310:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1312:	4c03      	ldr	r4, [pc, #12]	; (1320 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1314:	7822      	ldrb	r2, [r4, #0]
    1316:	f7ff ff25 	bl	1164 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    131a:	7020      	strb	r0, [r4, #0]
}
    131c:	bd10      	pop	{r4, pc}
    131e:	bf00      	nop
    1320:	20000810 	.word	0x20000810

00001324 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    1324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1328:	4d26      	ldr	r5, [pc, #152]	; (13c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
    132a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    132c:	4606      	mov	r6, r0
    132e:	f04f 0800 	mov.w	r8, #0
    1332:	46ab      	mov	fp, r5
	MPU->RNR = index;
    1334:	4f24      	ldr	r7, [pc, #144]	; (13c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1336:	45d0      	cmp	r8, sl
    1338:	da1b      	bge.n	1372 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    133a:	f8d6 9004 	ldr.w	r9, [r6, #4]
    133e:	f1b9 0f00 	cmp.w	r9, #0
    1342:	d039      	beq.n	13b8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1344:	6831      	ldr	r1, [r6, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1346:	4608      	mov	r0, r1
    1348:	9101      	str	r1, [sp, #4]
    134a:	f001 fedb 	bl	3104 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    134e:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1350:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1352:	eb09 0001 	add.w	r0, r9, r1
    1356:	3801      	subs	r0, #1
    1358:	f001 fed4 	bl	3104 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    135c:	4284      	cmp	r4, r0
    135e:	f04f 0214 	mov.w	r2, #20
    1362:	4b1a      	ldr	r3, [pc, #104]	; (13cc <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
    1364:	d008      	beq.n	1378 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    1366:	f06f 0315 	mvn.w	r3, #21
    136a:	fb02 f808 	mul.w	r8, r2, r8
    136e:	f84b 3008 	str.w	r3, [fp, r8]
}
    1372:	b003      	add	sp, #12
    1374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1378:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    137c:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    137e:	d0f8      	beq.n	1372 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1380:	7819      	ldrb	r1, [r3, #0]
    1382:	42a1      	cmp	r1, r4
    1384:	ddf5      	ble.n	1372 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    1386:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    138a:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    138c:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    138e:	68fc      	ldr	r4, [r7, #12]
    1390:	f100 0108 	add.w	r1, r0, #8
    1394:	7b00      	ldrb	r0, [r0, #12]
    1396:	f364 0004 	bfi	r0, r4, #0, #5
    139a:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    139c:	6938      	ldr	r0, [r7, #16]
    139e:	790c      	ldrb	r4, [r1, #4]
    13a0:	0840      	lsrs	r0, r0, #1
    13a2:	f360 1447 	bfi	r4, r0, #5, #3
    13a6:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    13a8:	68f9      	ldr	r1, [r7, #12]
    13aa:	f021 011f 	bic.w	r1, r1, #31
    13ae:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    13b0:	6939      	ldr	r1, [r7, #16]
    13b2:	f021 011f 	bic.w	r1, r1, #31
    13b6:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    13b8:	f108 0801 	add.w	r8, r8, #1
    13bc:	3514      	adds	r5, #20
    13be:	360c      	adds	r6, #12
    13c0:	e7b9      	b.n	1336 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    13c2:	bf00      	nop
    13c4:	2000069c 	.word	0x2000069c
    13c8:	e000ed90 	.word	0xe000ed90
    13cc:	20000810 	.word	0x20000810

000013d0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    13d0:	4b01      	ldr	r3, [pc, #4]	; (13d8 <__stdout_hook_install+0x8>)
    13d2:	6018      	str	r0, [r3, #0]
}
    13d4:	4770      	bx	lr
    13d6:	bf00      	nop
    13d8:	20000024 	.word	0x20000024

000013dc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
    13dc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    13de:	4b09      	ldr	r3, [pc, #36]	; (1404 <gpio_nrfx_init+0x28>)
    13e0:	781a      	ldrb	r2, [r3, #0]
    13e2:	b96a      	cbnz	r2, 1400 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    13e4:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    13e6:	200d      	movs	r0, #13
		gpio_initialized = true;
    13e8:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    13ea:	2105      	movs	r1, #5
    13ec:	f7ff fc96 	bl	d1c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    13f0:	200d      	movs	r0, #13
    13f2:	f7ff fc83 	bl	cfc <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    13f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    13fa:	4b03      	ldr	r3, [pc, #12]	; (1408 <gpio_nrfx_init+0x2c>)
    13fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    1400:	2000      	movs	r0, #0
    1402:	bd08      	pop	{r3, pc}
    1404:	20000811 	.word	0x20000811
    1408:	5000d000 	.word	0x5000d000

0000140c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    140c:	4b29      	ldr	r3, [pc, #164]	; (14b4 <gpio_nrfx_config+0xa8>)
{
    140e:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1410:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1412:	4829      	ldr	r0, [pc, #164]	; (14b8 <gpio_nrfx_config+0xac>)
    1414:	4013      	ands	r3, r2
    1416:	4283      	cmp	r3, r0
    1418:	d03d      	beq.n	1496 <gpio_nrfx_config+0x8a>
    141a:	d80d      	bhi.n	1438 <gpio_nrfx_config+0x2c>
    141c:	2b06      	cmp	r3, #6
    141e:	d015      	beq.n	144c <gpio_nrfx_config+0x40>
    1420:	d805      	bhi.n	142e <gpio_nrfx_config+0x22>
    1422:	b19b      	cbz	r3, 144c <gpio_nrfx_config+0x40>
    1424:	2b02      	cmp	r3, #2
    1426:	d038      	beq.n	149a <gpio_nrfx_config+0x8e>
    1428:	f06f 0015 	mvn.w	r0, #21
    142c:	e032      	b.n	1494 <gpio_nrfx_config+0x88>
    142e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1432:	d1f9      	bne.n	1428 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    1434:	2301      	movs	r3, #1
    1436:	e009      	b.n	144c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1438:	4820      	ldr	r0, [pc, #128]	; (14bc <gpio_nrfx_config+0xb0>)
    143a:	4283      	cmp	r3, r0
    143c:	d02f      	beq.n	149e <gpio_nrfx_config+0x92>
    143e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    1442:	d02e      	beq.n	14a2 <gpio_nrfx_config+0x96>
    1444:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    1448:	d1ee      	bne.n	1428 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    144a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    144c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
    144e:	bf4c      	ite	mi
    1450:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
    1452:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1456:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    145a:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    145c:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1460:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    1464:	d506      	bpl.n	1474 <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1466:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    146a:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    146c:	d01b      	beq.n	14a6 <gpio_nrfx_config+0x9a>
			nrf_gpio_port_out_set(reg, BIT(pin));
    146e:	2201      	movs	r2, #1
    1470:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    1472:	60ba      	str	r2, [r7, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    1474:	7a32      	ldrb	r2, [r6, #8]
    1476:	f001 011f 	and.w	r1, r1, #31
    147a:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    147e:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
    1482:	2000      	movs	r0, #0
    1484:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1488:	4a0d      	ldr	r2, [pc, #52]	; (14c0 <gpio_nrfx_config+0xb4>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    148a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    148e:	3180      	adds	r1, #128	; 0x80
    1490:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1494:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    1496:	2307      	movs	r3, #7
    1498:	e7d8      	b.n	144c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    149a:	2304      	movs	r3, #4
    149c:	e7d6      	b.n	144c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    149e:	2305      	movs	r3, #5
    14a0:	e7d4      	b.n	144c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    14a2:	2303      	movs	r3, #3
    14a4:	e7d2      	b.n	144c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    14a6:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    14a8:	bf42      	ittt	mi
    14aa:	2201      	movmi	r2, #1
    14ac:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    14ae:	60fa      	strmi	r2, [r7, #12]
}
    14b0:	e7e0      	b.n	1474 <gpio_nrfx_config+0x68>
    14b2:	bf00      	nop
    14b4:	00f00006 	.word	0x00f00006
    14b8:	00100006 	.word	0x00100006
    14bc:	00400002 	.word	0x00400002
    14c0:	50842500 	.word	0x50842500

000014c4 <gpiote_pin_int_cfg>:
{
    14c4:	b570      	push	{r4, r5, r6, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    14c6:	6843      	ldr	r3, [r0, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    14c8:	4c4c      	ldr	r4, [pc, #304]	; (15fc <gpiote_pin_int_cfg+0x138>)
    14ca:	7a1a      	ldrb	r2, [r3, #8]
    14cc:	f001 031f 	and.w	r3, r1, #31
    14d0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    14d4:	2200      	movs	r2, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    14d6:	68c5      	ldr	r5, [r0, #12]
    14d8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    14dc:	b2c0      	uxtb	r0, r0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    14de:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    14e2:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
    14e6:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    14ea:	42b3      	cmp	r3, r6
    14ec:	d16d      	bne.n	15ca <gpiote_pin_int_cfg+0x106>
		    && (intenset & BIT(i))) {
    14ee:	fa20 f602 	lsr.w	r6, r0, r2
    14f2:	07f6      	lsls	r6, r6, #31
    14f4:	d569      	bpl.n	15ca <gpiote_pin_int_cfg+0x106>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    14f6:	0090      	lsls	r0, r2, #2
    14f8:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    14fc:	f500 4050 	add.w	r0, r0, #53248	; 0xd000
    1500:	f8d0 6510 	ldr.w	r6, [r0, #1296]	; 0x510
    1504:	f026 0601 	bic.w	r6, r6, #1
    1508:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    150c:	2001      	movs	r0, #1
    150e:	fa00 f202 	lsl.w	r2, r0, r2
    p_reg->INTENCLR = mask;
    1512:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    1516:	4c3a      	ldr	r4, [pc, #232]	; (1600 <gpiote_pin_int_cfg+0x13c>)
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    1518:	68e8      	ldr	r0, [r5, #12]
    151a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    151e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    1522:	40c8      	lsrs	r0, r1
    1524:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    1528:	f010 0001 	ands.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    152c:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    1530:	d04a      	beq.n	15c8 <gpiote_pin_int_cfg+0x104>
    1532:	6928      	ldr	r0, [r5, #16]
    1534:	40c8      	lsrs	r0, r1
    1536:	f010 0001 	ands.w	r0, r0, #1
    153a:	d045      	beq.n	15c8 <gpiote_pin_int_cfg+0x104>
		if (data->trig_edge & BIT(pin)) {
    153c:	69a8      	ldr	r0, [r5, #24]
    153e:	40c8      	lsrs	r0, r1
    1540:	f010 0001 	ands.w	r0, r0, #1
    1544:	d04b      	beq.n	15de <gpiote_pin_int_cfg+0x11a>
			if (data->double_edge & BIT(pin)) {
    1546:	69ea      	ldr	r2, [r5, #28]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    1548:	2400      	movs	r4, #0
			if (data->double_edge & BIT(pin)) {
    154a:	40ca      	lsrs	r2, r1
    154c:	07d2      	lsls	r2, r2, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    154e:	bf4c      	ite	mi
    1550:	2203      	movmi	r2, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1552:	696a      	ldrpl	r2, [r5, #20]
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    1554:	4d29      	ldr	r5, [pc, #164]	; (15fc <gpiote_pin_int_cfg+0x138>)
    1556:	bf5f      	itttt	pl
    1558:	40ca      	lsrpl	r2, r1
    155a:	f002 0201 	andpl.w	r2, r2, #1
    155e:	f1c2 0202 	rsbpl	r2, r2, #2
    1562:	b2d2      	uxtbpl	r2, r2
    1564:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    1568:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    156c:	f010 0003 	ands.w	r0, r0, #3
    1570:	d12f      	bne.n	15d2 <gpiote_pin_int_cfg+0x10e>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1572:	00a1      	lsls	r1, r4, #2
    1574:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    1578:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    157c:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1580:	021b      	lsls	r3, r3, #8
    1582:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1586:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
    158a:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    158e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
			nrf_gpiote_event_t evt =
    1592:	f104 0340 	add.w	r3, r4, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1596:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
    159a:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    159c:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    15a0:	b29b      	uxth	r3, r3
    15a2:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    15a6:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    15aa:	4332      	orrs	r2, r6
    15ac:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    15b0:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    15b2:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    15b6:	f043 0301 	orr.w	r3, r3, #1
    15ba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    15be:	2301      	movs	r3, #1
    15c0:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
    15c4:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
}
    15c8:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    15ca:	3201      	adds	r2, #1
    15cc:	2a08      	cmp	r2, #8
    15ce:	d186      	bne.n	14de <gpiote_pin_int_cfg+0x1a>
    15d0:	e7a1      	b.n	1516 <gpiote_pin_int_cfg+0x52>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    15d2:	3401      	adds	r4, #1
    15d4:	2c08      	cmp	r4, #8
    15d6:	d1c5      	bne.n	1564 <gpiote_pin_int_cfg+0xa0>
	return -ENODEV;
    15d8:	f06f 0012 	mvn.w	r0, #18
    15dc:	e7f4      	b.n	15c8 <gpiote_pin_int_cfg+0x104>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    15de:	696a      	ldr	r2, [r5, #20]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    15e0:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    15e4:	40ca      	lsrs	r2, r1
    15e6:	f002 0201 	and.w	r2, r2, #1
    15ea:	f1c2 0203 	rsb	r2, r2, #3
    15ee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    15f2:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
    15f6:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
}
    15fa:	e7e5      	b.n	15c8 <gpiote_pin_int_cfg+0x104>
    15fc:	5000d000 	.word	0x5000d000
    1600:	50842500 	.word	0x50842500

00001604 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
    1604:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
    1608:	b470      	push	{r4, r5, r6}
	struct gpio_nrfx_data *data = get_port_data(port);
    160a:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    160c:	d10f      	bne.n	162e <gpio_nrfx_pin_interrupt_configure+0x2a>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    160e:	6845      	ldr	r5, [r0, #4]
    1610:	7a2e      	ldrb	r6, [r5, #8]
    1612:	f001 051f 	and.w	r5, r1, #31
    1616:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    161a:	4e1d      	ldr	r6, [pc, #116]	; (1690 <gpio_nrfx_pin_interrupt_configure+0x8c>)
    161c:	3580      	adds	r5, #128	; 0x80
    161e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    1622:	07ed      	lsls	r5, r5, #31
    1624:	d507      	bpl.n	1636 <gpio_nrfx_pin_interrupt_configure+0x32>
}
    1626:	f06f 0022 	mvn.w	r0, #34	; 0x22
    162a:	bc70      	pop	{r4, r5, r6}
    162c:	4770      	bx	lr
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    162e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    1632:	68e5      	ldr	r5, [r4, #12]
    1634:	d026      	beq.n	1684 <gpio_nrfx_pin_interrupt_configure+0x80>
    1636:	2501      	movs	r5, #1
    1638:	68e6      	ldr	r6, [r4, #12]
    163a:	408d      	lsls	r5, r1
    163c:	4335      	orrs	r5, r6
    163e:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1640:	2501      	movs	r5, #1
    1642:	6926      	ldr	r6, [r4, #16]
    1644:	408d      	lsls	r5, r1
    1646:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    164a:	bf14      	ite	ne
    164c:	432e      	orrne	r6, r5
    164e:	43ae      	biceq	r6, r5
    1650:	6126      	str	r6, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1652:	69a6      	ldr	r6, [r4, #24]
    1654:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    1658:	69e2      	ldr	r2, [r4, #28]
    165a:	bf0c      	ite	eq
    165c:	432e      	orreq	r6, r5
    165e:	43ae      	bicne	r6, r5
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    1660:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    1664:	bf0c      	ite	eq
    1666:	432a      	orreq	r2, r5
    1668:	43aa      	bicne	r2, r5
    166a:	61e2      	str	r2, [r4, #28]
    166c:	6962      	ldr	r2, [r4, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    166e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1672:	bf0c      	ite	eq
    1674:	4315      	orreq	r5, r2
    1676:	ea22 0505 	bicne.w	r5, r2, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    167a:	61a6      	str	r6, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    167c:	6165      	str	r5, [r4, #20]
}
    167e:	bc70      	pop	{r4, r5, r6}
	return gpiote_pin_int_cfg(port, pin);
    1680:	f7ff bf20 	b.w	14c4 <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1684:	2601      	movs	r6, #1
    1686:	408e      	lsls	r6, r1
    1688:	ea25 0506 	bic.w	r5, r5, r6
    168c:	e7d7      	b.n	163e <gpio_nrfx_pin_interrupt_configure+0x3a>
    168e:	bf00      	nop
    1690:	50842500 	.word	0x50842500

00001694 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1694:	4950      	ldr	r1, [pc, #320]	; (17d8 <gpiote_event_handler+0x144>)
{
    1696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    169a:	680e      	ldr	r6, [r1, #0]
	if (port_event) {
    169c:	2e00      	cmp	r6, #0
    169e:	d05f      	beq.n	1760 <gpiote_event_handler+0xcc>
	struct gpio_nrfx_data *data = get_port_data(port);
    16a0:	4b4e      	ldr	r3, [pc, #312]	; (17dc <gpiote_event_handler+0x148>)
	u32_t pin = 0U;
    16a2:	2500      	movs	r5, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    16a4:	68da      	ldr	r2, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    16a6:	f8d3 c004 	ldr.w	ip, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
    16aa:	e9d2 0303 	ldrd	r0, r3, [r2, #12]
    16ae:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
    16b0:	e9d2 0406 	ldrd	r0, r4, [r2, #24]
    16b4:	4320      	orrs	r0, r4
    16b6:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    16ba:	f8dc 0004 	ldr.w	r0, [ip, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
    16be:	6952      	ldr	r2, [r2, #20]
    return p_reg->IN;
    16c0:	6904      	ldr	r4, [r0, #16]
	u32_t bit = 1U << pin;
    16c2:	2001      	movs	r0, #1
	u32_t pin_states = ~(port_in ^ data->int_active_level);
    16c4:	4054      	eors	r4, r2
    16c6:	f8df e11c 	ldr.w	lr, [pc, #284]	; 17e4 <gpiote_event_handler+0x150>
	u32_t out = pin_states & level_pins;
    16ca:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
    16ce:	bb93      	cbnz	r3, 1736 <gpiote_event_handler+0xa2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    16d0:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
    16d2:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    16d4:	2501      	movs	r5, #1
    16d6:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    16d8:	4841      	ldr	r0, [pc, #260]	; (17e0 <gpiote_event_handler+0x14c>)
    16da:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    16de:	fa05 f103 	lsl.w	r1, r5, r3
    16e2:	4211      	tst	r1, r2
    16e4:	d010      	beq.n	1708 <gpiote_event_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    16e6:	009a      	lsls	r2, r3, #2
    16e8:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    16ec:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
    16f0:	6811      	ldr	r1, [r2, #0]
    16f2:	b149      	cbz	r1, 1708 <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    16f4:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    16f8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    16fc:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    16fe:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    1702:	fa05 f101 	lsl.w	r1, r5, r1
    1706:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1708:	3301      	adds	r3, #1
    170a:	2b08      	cmp	r3, #8
    170c:	d1e5      	bne.n	16da <gpiote_event_handler+0x46>
	if (fired_triggers[0]) {
    170e:	bb4c      	cbnz	r4, 1764 <gpiote_event_handler+0xd0>
	if (port_event) {
    1710:	b17e      	cbz	r6, 1732 <gpiote_event_handler+0x9e>
	u32_t bit = 1U << pin;
    1712:	2401      	movs	r4, #1
	u32_t pin = 0U;
    1714:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    1716:	4b31      	ldr	r3, [pc, #196]	; (17dc <gpiote_event_handler+0x148>)
    1718:	4f32      	ldr	r7, [pc, #200]	; (17e4 <gpiote_event_handler+0x150>)
    171a:	68d8      	ldr	r0, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    171c:	685e      	ldr	r6, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
    171e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
    1722:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
    1724:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
    1728:	430a      	orrs	r2, r1
    172a:	ea23 0302 	bic.w	r3, r3, r2
	while (level_pins) {
    172e:	2b00      	cmp	r3, #0
    1730:	d135      	bne.n	179e <gpiote_event_handler+0x10a>
}
    1732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    1736:	4203      	tst	r3, r0
    1738:	d00f      	beq.n	175a <gpiote_event_handler+0xc6>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    173a:	f89c 7008 	ldrb.w	r7, [ip, #8]
    173e:	f005 021f 	and.w	r2, r5, #31
    1742:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
    1746:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    174a:	f8d2 7200 	ldr.w	r7, [r2, #512]	; 0x200
			level_pins &= ~bit;
    174e:	ea23 0300 	bic.w	r3, r3, r0
    1752:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1756:	f8c2 7200 	str.w	r7, [r2, #512]	; 0x200
		++pin;
    175a:	3501      	adds	r5, #1
		bit <<= 1;
    175c:	0040      	lsls	r0, r0, #1
    175e:	e7b6      	b.n	16ce <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    1760:	4634      	mov	r4, r6
    1762:	e7b6      	b.n	16d2 <gpiote_event_handler+0x3e>
	struct gpio_nrfx_data *data = get_port_data(port);
    1764:	4f1d      	ldr	r7, [pc, #116]	; (17dc <gpiote_event_handler+0x148>)
    1766:	f8d7 800c 	ldr.w	r8, [r7, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    176a:	f8d8 1004 	ldr.w	r1, [r8, #4]
    176e:	2900      	cmp	r1, #0
    1770:	d0ce      	beq.n	1710 <gpiote_event_handler+0x7c>
	return node->next;
    1772:	680d      	ldr	r5, [r1, #0]
    1774:	2d00      	cmp	r5, #0
    1776:	bf38      	it	cc
    1778:	2500      	movcc	r5, #0
		if ((cb->pin_mask & pins) & data->int_en) {
    177a:	688a      	ldr	r2, [r1, #8]
    177c:	f8d8 3010 	ldr.w	r3, [r8, #16]
    1780:	4022      	ands	r2, r4
    1782:	421a      	tst	r2, r3
    1784:	d002      	beq.n	178c <gpiote_event_handler+0xf8>
			cb->handler(port, cb, cb->pin_mask & pins);
    1786:	4638      	mov	r0, r7
    1788:	684b      	ldr	r3, [r1, #4]
    178a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    178c:	2d00      	cmp	r5, #0
    178e:	d0bf      	beq.n	1710 <gpiote_event_handler+0x7c>
    1790:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1792:	4629      	mov	r1, r5
    1794:	2b00      	cmp	r3, #0
    1796:	bf38      	it	cc
    1798:	2300      	movcc	r3, #0
    179a:	461d      	mov	r5, r3
    179c:	e7ed      	b.n	177a <gpiote_event_handler+0xe6>
		if (level_pins & bit) {
    179e:	421c      	tst	r4, r3
    17a0:	d016      	beq.n	17d0 <gpiote_event_handler+0x13c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    17a2:	7a32      	ldrb	r2, [r6, #8]
    17a4:	f005 011f 	and.w	r1, r5, #31
    17a8:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    17ac:	6942      	ldr	r2, [r0, #20]
    17ae:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    17b2:	f8d1 c200 	ldr.w	ip, [r1, #512]	; 0x200
    17b6:	40ea      	lsrs	r2, r5
    17b8:	f002 0201 	and.w	r2, r2, #1
    17bc:	f1c2 0203 	rsb	r2, r2, #3
    17c0:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    17c4:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
    17c8:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
			level_pins &= ~bit;
    17cc:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
    17d0:	3501      	adds	r5, #1
		bit <<= 1;
    17d2:	0064      	lsls	r4, r4, #1
    17d4:	e7ab      	b.n	172e <gpiote_event_handler+0x9a>
    17d6:	bf00      	nop
    17d8:	5000d17c 	.word	0x5000d17c
    17dc:	200000d4 	.word	0x200000d4
    17e0:	5000d000 	.word	0x5000d000
    17e4:	50842500 	.word	0x50842500

000017e8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    17e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    17ea:	794b      	ldrb	r3, [r1, #5]
    17ec:	2b01      	cmp	r3, #1
    17ee:	d029      	beq.n	1844 <uarte_nrfx_configure+0x5c>
    17f0:	2b03      	cmp	r3, #3
    17f2:	d124      	bne.n	183e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    17f4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    17f6:	798b      	ldrb	r3, [r1, #6]
    17f8:	2b03      	cmp	r3, #3
    17fa:	d120      	bne.n	183e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    17fc:	79cc      	ldrb	r4, [r1, #7]
    17fe:	b124      	cbz	r4, 180a <uarte_nrfx_configure+0x22>
    1800:	2c01      	cmp	r4, #1
    1802:	d11c      	bne.n	183e <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    1804:	6843      	ldr	r3, [r0, #4]
    1806:	791b      	ldrb	r3, [r3, #4]
    1808:	b1cb      	cbz	r3, 183e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    180a:	790a      	ldrb	r2, [r1, #4]
    180c:	b112      	cbz	r2, 1814 <uarte_nrfx_configure+0x2c>
    180e:	2a02      	cmp	r2, #2
    1810:	d115      	bne.n	183e <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    1812:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1814:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1816:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    1818:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    181c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    181e:	d064      	beq.n	18ea <uarte_nrfx_configure+0x102>
    1820:	d82d      	bhi.n	187e <uarte_nrfx_configure+0x96>
    1822:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1826:	d063      	beq.n	18f0 <uarte_nrfx_configure+0x108>
    1828:	d816      	bhi.n	1858 <uarte_nrfx_configure+0x70>
    182a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    182e:	d061      	beq.n	18f4 <uarte_nrfx_configure+0x10c>
    1830:	d80a      	bhi.n	1848 <uarte_nrfx_configure+0x60>
    1832:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1836:	d060      	beq.n	18fa <uarte_nrfx_configure+0x112>
    1838:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    183c:	d060      	beq.n	1900 <uarte_nrfx_configure+0x118>
    183e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1842:	e051      	b.n	18e8 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    1844:	2600      	movs	r6, #0
    1846:	e7d6      	b.n	17f6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    1848:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    184c:	d05b      	beq.n	1906 <uarte_nrfx_configure+0x11e>
    184e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1852:	d1f4      	bne.n	183e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1854:	4b36      	ldr	r3, [pc, #216]	; (1930 <uarte_nrfx_configure+0x148>)
    1856:	e03c      	b.n	18d2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1858:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    185c:	d056      	beq.n	190c <uarte_nrfx_configure+0x124>
    185e:	d807      	bhi.n	1870 <uarte_nrfx_configure+0x88>
    1860:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1864:	d054      	beq.n	1910 <uarte_nrfx_configure+0x128>
    1866:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    186a:	d1e8      	bne.n	183e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    186c:	4b31      	ldr	r3, [pc, #196]	; (1934 <uarte_nrfx_configure+0x14c>)
    186e:	e030      	b.n	18d2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1870:	f647 2712 	movw	r7, #31250	; 0x7a12
    1874:	42bb      	cmp	r3, r7
    1876:	d1e2      	bne.n	183e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1878:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    187c:	e029      	b.n	18d2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    187e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1882:	d047      	beq.n	1914 <uarte_nrfx_configure+0x12c>
    1884:	d813      	bhi.n	18ae <uarte_nrfx_configure+0xc6>
    1886:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    188a:	d046      	beq.n	191a <uarte_nrfx_configure+0x132>
    188c:	d809      	bhi.n	18a2 <uarte_nrfx_configure+0xba>
    188e:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    1892:	42bb      	cmp	r3, r7
    1894:	d043      	beq.n	191e <uarte_nrfx_configure+0x136>
    1896:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    189a:	d1d0      	bne.n	183e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    189c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    18a0:	e017      	b.n	18d2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    18a2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    18a6:	d1ca      	bne.n	183e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    18a8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    18ac:	e011      	b.n	18d2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    18ae:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    18b2:	d037      	beq.n	1924 <uarte_nrfx_configure+0x13c>
    18b4:	d808      	bhi.n	18c8 <uarte_nrfx_configure+0xe0>
    18b6:	4f20      	ldr	r7, [pc, #128]	; (1938 <uarte_nrfx_configure+0x150>)
    18b8:	42bb      	cmp	r3, r7
    18ba:	d036      	beq.n	192a <uarte_nrfx_configure+0x142>
    18bc:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    18c0:	d1bd      	bne.n	183e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    18c2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    18c6:	e004      	b.n	18d2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    18c8:	4f1c      	ldr	r7, [pc, #112]	; (193c <uarte_nrfx_configure+0x154>)
    18ca:	42bb      	cmp	r3, r7
    18cc:	d1b7      	bne.n	183e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    18ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    18d2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    18d6:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    18d8:	68c3      	ldr	r3, [r0, #12]
    18da:	4322      	orrs	r2, r4
    18dc:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    18de:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    18e2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    18e6:	2000      	movs	r0, #0
}
    18e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    18ea:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    18ee:	e7f0      	b.n	18d2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    18f0:	4b13      	ldr	r3, [pc, #76]	; (1940 <uarte_nrfx_configure+0x158>)
    18f2:	e7ee      	b.n	18d2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    18f4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    18f8:	e7eb      	b.n	18d2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
    18fa:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    18fe:	e7e8      	b.n	18d2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1900:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    1904:	e7e5      	b.n	18d2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1906:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    190a:	e7e2      	b.n	18d2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    190c:	4b0d      	ldr	r3, [pc, #52]	; (1944 <uarte_nrfx_configure+0x15c>)
    190e:	e7e0      	b.n	18d2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1910:	4b0d      	ldr	r3, [pc, #52]	; (1948 <uarte_nrfx_configure+0x160>)
    1912:	e7de      	b.n	18d2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1914:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1918:	e7db      	b.n	18d2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    191a:	4b0c      	ldr	r3, [pc, #48]	; (194c <uarte_nrfx_configure+0x164>)
    191c:	e7d9      	b.n	18d2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    191e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1922:	e7d6      	b.n	18d2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1924:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1928:	e7d3      	b.n	18d2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    192a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    192e:	e7d0      	b.n	18d2 <uarte_nrfx_configure+0xea>
    1930:	0013b000 	.word	0x0013b000
    1934:	004ea000 	.word	0x004ea000
    1938:	0003d090 	.word	0x0003d090
    193c:	000f4240 	.word	0x000f4240
    1940:	00275000 	.word	0x00275000
    1944:	0075c000 	.word	0x0075c000
    1948:	003af000 	.word	0x003af000
    194c:	013a9000 	.word	0x013a9000

00001950 <uarte_instance_init.isra.0>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1950:	2201      	movs	r2, #1
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
    1952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1954:	2703      	movs	r7, #3
    1956:	460d      	mov	r5, r1
	return config->uarte_regs;
    1958:	6843      	ldr	r3, [r0, #4]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
    195a:	6809      	ldr	r1, [r1, #0]
	return config->uarte_regs;
    195c:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
    195e:	4b21      	ldr	r3, [pc, #132]	; (19e4 <uarte_instance_init.isra.0+0x94>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1960:	408a      	lsls	r2, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    1962:	68c6      	ldr	r6, [r0, #12]
    p_reg->OUTSET = set_mask;
    1964:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1966:	f101 0280 	add.w	r2, r1, #128	; 0x80
    196a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    196e:	686a      	ldr	r2, [r5, #4]
    1970:	1c57      	adds	r7, r2, #1
    1972:	bf1e      	ittt	ne
    1974:	f04f 0c00 	movne.w	ip, #0
    1978:	f102 0780 	addne.w	r7, r2, #128	; 0x80
    197c:	f843 c027 	strne.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
    1980:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    1984:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
    1986:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    198a:	1c4a      	adds	r2, r1, #1
    198c:	d015      	beq.n	19ba <uarte_instance_init.isra.0+0x6a>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    198e:	68ea      	ldr	r2, [r5, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    1990:	1c57      	adds	r7, r2, #1
    1992:	d012      	beq.n	19ba <uarte_instance_init.isra.0+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1994:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1996:	f04f 0c03 	mov.w	ip, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    199a:	4097      	lsls	r7, r2
    p_reg->OUTSET = set_mask;
    199c:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    199e:	f102 0780 	add.w	r7, r2, #128	; 0x80
    19a2:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    19a6:	f04f 0c00 	mov.w	ip, #0
    19aa:	f101 0780 	add.w	r7, r1, #128	; 0x80
    19ae:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    19b2:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    19b6:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    19ba:	4631      	mov	r1, r6
    19bc:	f7ff ff14 	bl	17e8 <uarte_nrfx_configure>
	if (err) {
    19c0:	b970      	cbnz	r0, 19e0 <uarte_instance_init.isra.0+0x90>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    19c2:	2308      	movs	r3, #8
    19c4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    19c8:	686b      	ldr	r3, [r5, #4]
    19ca:	3301      	adds	r3, #1
    19cc:	d008      	beq.n	19e0 <uarte_instance_init.isra.0+0x90>
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    19ce:	2301      	movs	r3, #1
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    19d0:	360c      	adds	r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    19d2:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    19d6:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    19da:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    19de:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    19e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19e2:	bf00      	nop
    19e4:	50842500 	.word	0x50842500

000019e8 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    19e8:	b530      	push	{r4, r5, lr}
    19ea:	b085      	sub	sp, #20
    19ec:	4605      	mov	r5, r0
    19ee:	466c      	mov	r4, sp
    19f0:	4b04      	ldr	r3, [pc, #16]	; (1a04 <uarte_0_init+0x1c>)
    19f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    19f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    19f8:	4621      	mov	r1, r4
    19fa:	4628      	mov	r0, r5
    19fc:	f7ff ffa8 	bl	1950 <uarte_instance_init.isra.0>
    1a00:	b005      	add	sp, #20
    1a02:	bd30      	pop	{r4, r5, pc}
    1a04:	000038a0 	.word	0x000038a0

00001a08 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    1a08:	b530      	push	{r4, r5, lr}
    1a0a:	b085      	sub	sp, #20
    1a0c:	4605      	mov	r5, r0
    1a0e:	466c      	mov	r4, sp
    1a10:	4b04      	ldr	r3, [pc, #16]	; (1a24 <uarte_1_init+0x1c>)
    1a12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1a14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1a18:	4621      	mov	r1, r4
    1a1a:	4628      	mov	r0, r5
    1a1c:	f7ff ff98 	bl	1950 <uarte_instance_init.isra.0>
    1a20:	b005      	add	sp, #20
    1a22:	bd30      	pop	{r4, r5, pc}
    1a24:	000038b0 	.word	0x000038b0

00001a28 <nrf91_errata_31>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1a28:	4b06      	ldr	r3, [pc, #24]	; (1a44 <nrf91_errata_31+0x1c>)
    1a2a:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1a2c:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1a2e:	681b      	ldr	r3, [r3, #0]
    1a30:	2b09      	cmp	r3, #9
    1a32:	d105      	bne.n	1a40 <nrf91_errata_31+0x18>
            {
                switch(var2)
    1a34:	3801      	subs	r0, #1
    1a36:	2801      	cmp	r0, #1
    1a38:	bf8c      	ite	hi
    1a3a:	2000      	movhi	r0, #0
    1a3c:	2001      	movls	r0, #1
    1a3e:	4770      	bx	lr
                    case 0x02ul:
                        return true;
                }
            }
        #endif
        return false;
    1a40:	2000      	movs	r0, #0
    #endif
}
    1a42:	4770      	bx	lr
    1a44:	00ff0134 	.word	0x00ff0134

00001a48 <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1a48:	4b05      	ldr	r3, [pc, #20]	; (1a60 <nrf91_errata_14+0x18>)
    1a4a:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1a4c:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1a4e:	681b      	ldr	r3, [r3, #0]
    1a50:	2b09      	cmp	r3, #9
    1a52:	d103      	bne.n	1a5c <nrf91_errata_14+0x14>
            {
                switch(var2)
    1a54:	1e43      	subs	r3, r0, #1
    1a56:	4258      	negs	r0, r3
    1a58:	4158      	adcs	r0, r3
    1a5a:	4770      	bx	lr
                    case 0x02ul:
                        return false;
                }
            }
        #endif
        return false;
    1a5c:	2000      	movs	r0, #0
    #endif
}
    1a5e:	4770      	bx	lr
    1a60:	00ff0134 	.word	0x00ff0134

00001a64 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    1a64:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
    1a66:	f7ff ffdf 	bl	1a28 <nrf91_errata_31>
    1a6a:	b130      	cbz	r0, 1a7a <SystemInit+0x16>
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    1a6c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1a70:	2200      	movs	r2, #0
    1a72:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    1a76:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    1a7a:	f7ff ffe5 	bl	1a48 <nrf91_errata_14>
    1a7e:	b130      	cbz	r0, 1a8e <SystemInit+0x2a>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    1a80:	2301      	movs	r3, #1
    1a82:	4a3f      	ldr	r2, [pc, #252]	; (1b80 <SystemInit+0x11c>)
    1a84:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1a86:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    1a8a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1a8e:	4b3d      	ldr	r3, [pc, #244]	; (1b84 <SystemInit+0x120>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1a90:	681b      	ldr	r3, [r3, #0]
    1a92:	2b09      	cmp	r3, #9
    1a94:	d107      	bne.n	1aa6 <SystemInit+0x42>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1a96:	4b3c      	ldr	r3, [pc, #240]	; (1b88 <SystemInit+0x124>)
            {
                switch(var2)
    1a98:	681b      	ldr	r3, [r3, #0]
    1a9a:	2b02      	cmp	r3, #2
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1a9c:	bf02      	ittt	eq
    1a9e:	2201      	moveq	r2, #1
    1aa0:	4b3a      	ldreq	r3, [pc, #232]	; (1b8c <SystemInit+0x128>)
    1aa2:	f8c3 2578 	streq.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    1aa6:	f7ff ffcf 	bl	1a48 <nrf91_errata_14>
    1aaa:	b110      	cbz	r0, 1ab2 <SystemInit+0x4e>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    1aac:	220e      	movs	r2, #14
    1aae:	4b38      	ldr	r3, [pc, #224]	; (1b90 <SystemInit+0x12c>)
    1ab0:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
    1ab2:	f7ff ffb9 	bl	1a28 <nrf91_errata_31>
    1ab6:	b120      	cbz	r0, 1ac2 <SystemInit+0x5e>
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    1ab8:	2200      	movs	r2, #0
    1aba:	4b36      	ldr	r3, [pc, #216]	; (1b94 <SystemInit+0x130>)
    1abc:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    1abe:	2201      	movs	r2, #1
    1ac0:	605a      	str	r2, [r3, #4]
{
    1ac2:	2200      	movs	r2, #0
    1ac4:	00d3      	lsls	r3, r2, #3
    1ac6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1aca:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    1ace:	3101      	adds	r1, #1
    1ad0:	d008      	beq.n	1ae4 <SystemInit+0x80>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1ad2:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1ad6:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1ad8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1adc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1ae0:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1ae2:	d1ef      	bne.n	1ac4 <SystemInit+0x60>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1ae4:	4b2c      	ldr	r3, [pc, #176]	; (1b98 <SystemInit+0x134>)
    1ae6:	69da      	ldr	r2, [r3, #28]
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    1ae8:	07d1      	lsls	r1, r2, #31
    1aea:	d53b      	bpl.n	1b64 <SystemInit+0x100>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1aec:	4b2b      	ldr	r3, [pc, #172]	; (1b9c <SystemInit+0x138>)
    1aee:	4619      	mov	r1, r3
    1af0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1af4:	2a01      	cmp	r2, #1
    1af6:	d1fb      	bne.n	1af0 <SystemInit+0x8c>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    1af8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1afc:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    1b00:	2b01      	cmp	r3, #1
    1b02:	d1fb      	bne.n	1afc <SystemInit+0x98>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1b04:	4b24      	ldr	r3, [pc, #144]	; (1b98 <SystemInit+0x134>)
    1b06:	69da      	ldr	r2, [r3, #28]
          if (uicr_HFXOSRC_erased()){
    1b08:	07d2      	lsls	r2, r2, #31
    1b0a:	d508      	bpl.n	1b1e <SystemInit+0xba>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    1b0c:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1b0e:	4923      	ldr	r1, [pc, #140]	; (1b9c <SystemInit+0x138>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    1b10:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    1b14:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1b16:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    1b1a:	2a01      	cmp	r2, #1
    1b1c:	d1fb      	bne.n	1b16 <SystemInit+0xb2>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1b1e:	6a1a      	ldr	r2, [r3, #32]
    1b20:	3201      	adds	r2, #1
    1b22:	d10a      	bne.n	1b3a <SystemInit+0xd6>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    1b24:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    1b26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    1b2a:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    1b2e:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1b30:	4a1a      	ldr	r2, [pc, #104]	; (1b9c <SystemInit+0x138>)
    1b32:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1b36:	2b01      	cmp	r3, #1
    1b38:	d1fb      	bne.n	1b32 <SystemInit+0xce>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    1b3a:	2200      	movs	r2, #0
    1b3c:	4b17      	ldr	r3, [pc, #92]	; (1b9c <SystemInit+0x138>)
    1b3e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1b42:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1b46:	2a01      	cmp	r2, #1
    1b48:	d1fb      	bne.n	1b42 <SystemInit+0xde>
  __ASM volatile ("dsb 0xF":::"memory");
    1b4a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1b4e:	4914      	ldr	r1, [pc, #80]	; (1ba0 <SystemInit+0x13c>)
    1b50:	4b14      	ldr	r3, [pc, #80]	; (1ba4 <SystemInit+0x140>)
    1b52:	68ca      	ldr	r2, [r1, #12]
    1b54:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1b58:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1b5a:	60cb      	str	r3, [r1, #12]
    1b5c:	f3bf 8f4f 	dsb	sy
    __NOP();
    1b60:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1b62:	e7fd      	b.n	1b60 <SystemInit+0xfc>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1b64:	6a1b      	ldr	r3, [r3, #32]
    1b66:	3301      	adds	r3, #1
    1b68:	d0c0      	beq.n	1aec <SystemInit+0x88>
        SCB->NSACR |= (3UL << 10);
    1b6a:	4a0d      	ldr	r2, [pc, #52]	; (1ba0 <SystemInit+0x13c>)
    1b6c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    1b70:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    1b74:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    1b78:	4b0b      	ldr	r3, [pc, #44]	; (1ba8 <SystemInit+0x144>)
    1b7a:	4a0c      	ldr	r2, [pc, #48]	; (1bac <SystemInit+0x148>)
    1b7c:	601a      	str	r2, [r3, #0]
}
    1b7e:	bd08      	pop	{r3, pc}
    1b80:	50004a38 	.word	0x50004a38
    1b84:	00ff0130 	.word	0x00ff0130
    1b88:	00ff0134 	.word	0x00ff0134
    1b8c:	50004000 	.word	0x50004000
    1b90:	5003aee4 	.word	0x5003aee4
    1b94:	5000470c 	.word	0x5000470c
    1b98:	00ff8000 	.word	0x00ff8000
    1b9c:	50039000 	.word	0x50039000
    1ba0:	e000ed00 	.word	0xe000ed00
    1ba4:	05fa0004 	.word	0x05fa0004
    1ba8:	20000048 	.word	0x20000048
    1bac:	03d09000 	.word	0x03d09000

00001bb0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
    1bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    1bb2:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    1bb4:	4b08      	ldr	r3, [pc, #32]	; (1bd8 <z_sys_init_run_level+0x28>)
    1bb6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1bba:	3001      	adds	r0, #1
    1bbc:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    1bc0:	42a6      	cmp	r6, r4
    1bc2:	d800      	bhi.n	1bc6 <z_sys_init_run_level+0x16>
			}
		}
	}
}
    1bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    1bc6:	e9d4 3500 	ldrd	r3, r5, [r4]
    1bca:	4628      	mov	r0, r5
    1bcc:	4798      	blx	r3
		if (retval != 0) {
    1bce:	b108      	cbz	r0, 1bd4 <z_sys_init_run_level+0x24>
			if (dev) {
    1bd0:	b105      	cbz	r5, 1bd4 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
    1bd2:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    1bd4:	3408      	adds	r4, #8
    1bd6:	e7f3      	b.n	1bc0 <z_sys_init_run_level+0x10>
    1bd8:	0000398c 	.word	0x0000398c

00001bdc <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    1bdc:	4b0f      	ldr	r3, [pc, #60]	; (1c1c <z_impl_device_get_binding+0x40>)
{
    1bde:	b570      	push	{r4, r5, r6, lr}
    1be0:	4605      	mov	r5, r0
    1be2:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    1be4:	4c0e      	ldr	r4, [pc, #56]	; (1c20 <z_impl_device_get_binding+0x44>)
    1be6:	429c      	cmp	r4, r3
    1be8:	d104      	bne.n	1bf4 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    1bea:	4c0d      	ldr	r4, [pc, #52]	; (1c20 <z_impl_device_get_binding+0x44>)
    1bec:	42b4      	cmp	r4, r6
    1bee:	d108      	bne.n	1c02 <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    1bf0:	2400      	movs	r4, #0
    1bf2:	e010      	b.n	1c16 <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
    1bf4:	68a2      	ldr	r2, [r4, #8]
    1bf6:	b112      	cbz	r2, 1bfe <z_impl_device_get_binding+0x22>
    1bf8:	6822      	ldr	r2, [r4, #0]
    1bfa:	42aa      	cmp	r2, r5
    1bfc:	d00b      	beq.n	1c16 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
    1bfe:	3410      	adds	r4, #16
    1c00:	e7f1      	b.n	1be6 <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
    1c02:	68a3      	ldr	r3, [r4, #8]
    1c04:	b90b      	cbnz	r3, 1c0a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    1c06:	3410      	adds	r4, #16
    1c08:	e7f0      	b.n	1bec <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
    1c0a:	4628      	mov	r0, r5
    1c0c:	6821      	ldr	r1, [r4, #0]
    1c0e:	f001 fa82 	bl	3116 <strcmp>
		if ((dev->driver_api != NULL) &&
    1c12:	2800      	cmp	r0, #0
    1c14:	d1f7      	bne.n	1c06 <z_impl_device_get_binding+0x2a>
}
    1c16:	4620      	mov	r0, r4
    1c18:	bd70      	pop	{r4, r5, r6, pc}
    1c1a:	bf00      	nop
    1c1c:	200000f4 	.word	0x200000f4
    1c20:	20000094 	.word	0x20000094

00001c24 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    1c24:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    1c26:	4d0b      	ldr	r5, [pc, #44]	; (1c54 <idle+0x30>)
    1c28:	f04f 0220 	mov.w	r2, #32
    1c2c:	f3ef 8311 	mrs	r3, BASEPRI
    1c30:	f382 8811 	msr	BASEPRI, r2
    1c34:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    1c38:	f001 fcc5 	bl	35c6 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1c3c:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    1c3e:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1c40:	2802      	cmp	r0, #2
    1c42:	bfd8      	it	le
    1c44:	4608      	movle	r0, r1
    1c46:	f001 fcce 	bl	35e6 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    1c4a:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1c4c:	f7ff f8b8 	bl	dc0 <arch_cpu_idle>
}
    1c50:	e7ea      	b.n	1c28 <idle+0x4>
    1c52:	bf00      	nop
    1c54:	200007b8 	.word	0x200007b8

00001c58 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    1c58:	4802      	ldr	r0, [pc, #8]	; (1c64 <z_bss_zero+0xc>)
    1c5a:	4a03      	ldr	r2, [pc, #12]	; (1c68 <z_bss_zero+0x10>)
    1c5c:	2100      	movs	r1, #0
    1c5e:	1a12      	subs	r2, r2, r0
    1c60:	f001 ba90 	b.w	3184 <memset>
    1c64:	20000158 	.word	0x20000158
    1c68:	20000814 	.word	0x20000814

00001c6c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    1c6c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    1c6e:	4806      	ldr	r0, [pc, #24]	; (1c88 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    1c70:	4a06      	ldr	r2, [pc, #24]	; (1c8c <z_data_copy+0x20>)
    1c72:	4907      	ldr	r1, [pc, #28]	; (1c90 <z_data_copy+0x24>)
    1c74:	1a12      	subs	r2, r2, r0
    1c76:	f001 fa5a 	bl	312e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    1c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    1c7e:	4a05      	ldr	r2, [pc, #20]	; (1c94 <z_data_copy+0x28>)
    1c80:	4905      	ldr	r1, [pc, #20]	; (1c98 <z_data_copy+0x2c>)
    1c82:	4806      	ldr	r0, [pc, #24]	; (1c9c <z_data_copy+0x30>)
    1c84:	f001 ba53 	b.w	312e <memcpy>
    1c88:	20000000 	.word	0x20000000
    1c8c:	20000158 	.word	0x20000158
    1c90:	00003b08 	.word	0x00003b08
    1c94:	00000000 	.word	0x00000000
    1c98:	00003b08 	.word	0x00003b08
    1c9c:	20000000 	.word	0x20000000

00001ca0 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    1ca0:	2201      	movs	r2, #1
{
    1ca2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    1ca4:	4b0b      	ldr	r3, [pc, #44]	; (1cd4 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    1ca6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    1ca8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    1caa:	f7ff ff81 	bl	1bb0 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    1cae:	4a0a      	ldr	r2, [pc, #40]	; (1cd8 <bg_thread_main+0x38>)
    1cb0:	490a      	ldr	r1, [pc, #40]	; (1cdc <bg_thread_main+0x3c>)
    1cb2:	480b      	ldr	r0, [pc, #44]	; (1ce0 <bg_thread_main+0x40>)
    1cb4:	f001 f876 	bl	2da4 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    1cb8:	2003      	movs	r0, #3
    1cba:	f7ff ff79 	bl	1bb0 <z_sys_init_run_level>

	z_init_static_threads();
    1cbe:	f000 fd45 	bl	274c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    1cc2:	f7fe fbbd 	bl	440 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    1cc6:	4a07      	ldr	r2, [pc, #28]	; (1ce4 <bg_thread_main+0x44>)
    1cc8:	7b13      	ldrb	r3, [r2, #12]
    1cca:	f023 0301 	bic.w	r3, r3, #1
    1cce:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    1cd0:	bd08      	pop	{r3, pc}
    1cd2:	bf00      	nop
    1cd4:	20000812 	.word	0x20000812
    1cd8:	00003a38 	.word	0x00003a38
    1cdc:	00003acb 	.word	0x00003acb
    1ce0:	00003adb 	.word	0x00003adb
    1ce4:	20000744 	.word	0x20000744

00001ce8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    1ce8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    1cec:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 1ddc <z_cstart+0xf4>
    1cf0:	b0a5      	sub	sp, #148	; 0x94
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    1cf2:	f389 8808 	msr	MSP, r9
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1cf6:	2400      	movs	r4, #0
    1cf8:	23e0      	movs	r3, #224	; 0xe0
    1cfa:	4d31      	ldr	r5, [pc, #196]	; (1dc0 <z_cstart+0xd8>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1cfc:	f04f 0b01 	mov.w	fp, #1
    1d00:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    1d04:	77ec      	strb	r4, [r5, #31]
    1d06:	762c      	strb	r4, [r5, #24]
    1d08:	766c      	strb	r4, [r5, #25]
    1d0a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    1d0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    1d0e:	4e2d      	ldr	r6, [pc, #180]	; (1dc4 <z_cstart+0xdc>)
    1d10:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    1d14:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    1d16:	f7ff f989 	bl	102c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    1d1a:	f7ff f84b 	bl	db4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    1d1e:	f04f 33ff 	mov.w	r3, #4294967295
    1d22:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    1d24:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    1d26:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    1d2a:	4d27      	ldr	r5, [pc, #156]	; (1dc8 <z_cstart+0xe0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    1d2c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
    1d30:	ab07      	add	r3, sp, #28
    1d32:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    1d34:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    1d36:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
    1d3a:	f7ff ff39 	bl	1bb0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    1d3e:	2001      	movs	r0, #1
    1d40:	f7ff ff36 	bl	1bb0 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1d44:	f8df a098 	ldr.w	sl, [pc, #152]	; 1de0 <z_cstart+0xf8>
	z_sched_init();
    1d48:	f000 fc5a 	bl	2600 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1d4c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1de4 <z_cstart+0xfc>
    1d50:	4b1e      	ldr	r3, [pc, #120]	; (1dcc <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
    1d52:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1d54:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1d58:	4641      	mov	r1, r8
    1d5a:	4630      	mov	r0, r6
    1d5c:	9305      	str	r3, [sp, #20]
    1d5e:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    1d62:	4653      	mov	r3, sl
    1d64:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1d68:	9400      	str	r4, [sp, #0]
    1d6a:	f000 fcc9 	bl	2700 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1d6e:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    1d70:	4630      	mov	r0, r6
    1d72:	f023 0304 	bic.w	r3, r3, #4
    1d76:	7373      	strb	r3, [r6, #13]
    1d78:	f001 fb64 	bl	3444 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    1d7c:	230f      	movs	r3, #15
    1d7e:	4f14      	ldr	r7, [pc, #80]	; (1dd0 <z_cstart+0xe8>)
    1d80:	f44f 72a0 	mov.w	r2, #320	; 0x140
    1d84:	4638      	mov	r0, r7
    1d86:	e9cd 4302 	strd	r4, r3, [sp, #8]
    1d8a:	4912      	ldr	r1, [pc, #72]	; (1dd4 <z_cstart+0xec>)
    1d8c:	4b12      	ldr	r3, [pc, #72]	; (1dd8 <z_cstart+0xf0>)
    1d8e:	e9cd b404 	strd	fp, r4, [sp, #16]
    1d92:	e9cd 4400 	strd	r4, r4, [sp]
    1d96:	f000 fcb3 	bl	2700 <z_setup_new_thread>
    1d9a:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    1d9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1da0:	f023 0304 	bic.w	r3, r3, #4
    1da4:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    1da6:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    1daa:	e9c5 3306 	strd	r3, r3, [r5, #24]
    1dae:	4641      	mov	r1, r8
    1db0:	4653      	mov	r3, sl
    1db2:	4630      	mov	r0, r6
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    1db4:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    1db6:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    1db8:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    1dbc:	f7fe ffde 	bl	d7c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    1dc0:	e000ed00 	.word	0xe000ed00
    1dc4:	20000744 	.word	0x20000744
    1dc8:	200007b8 	.word	0x200007b8
    1dcc:	00003b02 	.word	0x00003b02
    1dd0:	200006d0 	.word	0x200006d0
    1dd4:	20000c18 	.word	0x20000c18
    1dd8:	00001c25 	.word	0x00001c25
    1ddc:	20001558 	.word	0x20001558
    1de0:	00001ca1 	.word	0x00001ca1
    1de4:	20000818 	.word	0x20000818

00001de8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    1de8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    1dea:	4b0e      	ldr	r3, [pc, #56]	; (1e24 <init_mem_slab_module+0x3c>)
    1dec:	4c0e      	ldr	r4, [pc, #56]	; (1e28 <init_mem_slab_module+0x40>)
    1dee:	42a3      	cmp	r3, r4
    1df0:	d301      	bcc.n	1df6 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    1df2:	2000      	movs	r0, #0
	return rc;
}
    1df4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    1df6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    1dfa:	ea41 0200 	orr.w	r2, r1, r0
    1dfe:	f012 0203 	ands.w	r2, r2, #3
    1e02:	d10b      	bne.n	1e1c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    1e04:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    1e06:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    1e08:	42aa      	cmp	r2, r5
    1e0a:	d101      	bne.n	1e10 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    1e0c:	331c      	adds	r3, #28
    1e0e:	e7ee      	b.n	1dee <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    1e10:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    1e12:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    1e14:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    1e16:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    1e18:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    1e1a:	e7f5      	b.n	1e08 <init_mem_slab_module+0x20>
		return -EINVAL;
    1e1c:	f06f 0015 	mvn.w	r0, #21
	return rc;
    1e20:	e7e8      	b.n	1df4 <init_mem_slab_module+0xc>
    1e22:	bf00      	nop
    1e24:	200000f4 	.word	0x200000f4
    1e28:	200000f4 	.word	0x200000f4

00001e2c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    1e2c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    1e2e:	460c      	mov	r4, r1
    1e30:	4616      	mov	r6, r2
    1e32:	461f      	mov	r7, r3
    1e34:	f04f 0320 	mov.w	r3, #32
    1e38:	f3ef 8111 	mrs	r1, BASEPRI
    1e3c:	f383 8811 	msr	BASEPRI, r3
    1e40:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    1e44:	6943      	ldr	r3, [r0, #20]
    1e46:	b15b      	cbz	r3, 1e60 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    1e48:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    1e4a:	681b      	ldr	r3, [r3, #0]
    1e4c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    1e4e:	6983      	ldr	r3, [r0, #24]
    1e50:	3301      	adds	r3, #1
    1e52:	6183      	str	r3, [r0, #24]
		result = 0;
    1e54:	2000      	movs	r0, #0
	__asm__ volatile(
    1e56:	f381 8811 	msr	BASEPRI, r1
    1e5a:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    1e5e:	e011      	b.n	1e84 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    1e60:	ea56 0207 	orrs.w	r2, r6, r7
    1e64:	d103      	bne.n	1e6e <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
    1e66:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    1e6a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    1e6c:	e7f3      	b.n	1e56 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    1e6e:	4602      	mov	r2, r0
    1e70:	e9cd 6700 	strd	r6, r7, [sp]
    1e74:	4804      	ldr	r0, [pc, #16]	; (1e88 <k_mem_slab_alloc+0x5c>)
    1e76:	f000 fb6b 	bl	2550 <z_pend_curr>
		if (result == 0) {
    1e7a:	b918      	cbnz	r0, 1e84 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    1e7c:	4b03      	ldr	r3, [pc, #12]	; (1e8c <k_mem_slab_alloc+0x60>)
    1e7e:	689b      	ldr	r3, [r3, #8]
    1e80:	695b      	ldr	r3, [r3, #20]
    1e82:	6023      	str	r3, [r4, #0]
}
    1e84:	b002      	add	sp, #8
    1e86:	bdd0      	pop	{r4, r6, r7, pc}
    1e88:	20000813 	.word	0x20000813
    1e8c:	200007b8 	.word	0x200007b8

00001e90 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    1e90:	b570      	push	{r4, r5, r6, lr}
    1e92:	4604      	mov	r4, r0
    1e94:	460d      	mov	r5, r1
	__asm__ volatile(
    1e96:	f04f 0320 	mov.w	r3, #32
    1e9a:	f3ef 8611 	mrs	r6, BASEPRI
    1e9e:	f383 8811 	msr	BASEPRI, r3
    1ea2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    1ea6:	f001 fb43 	bl	3530 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    1eaa:	b158      	cbz	r0, 1ec4 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    1eac:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    1eae:	682a      	ldr	r2, [r5, #0]
    1eb0:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    1eb2:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
    1eb4:	f001 fac6 	bl	3444 <z_ready_thread>
		z_reschedule(&lock, key);
    1eb8:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    1eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    1ebe:	4808      	ldr	r0, [pc, #32]	; (1ee0 <k_mem_slab_free+0x50>)
    1ec0:	f001 ba95 	b.w	33ee <z_reschedule>
		**(char ***)mem = slab->free_list;
    1ec4:	682b      	ldr	r3, [r5, #0]
    1ec6:	6962      	ldr	r2, [r4, #20]
    1ec8:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    1eca:	682b      	ldr	r3, [r5, #0]
    1ecc:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    1ece:	69a3      	ldr	r3, [r4, #24]
    1ed0:	3b01      	subs	r3, #1
    1ed2:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    1ed4:	f386 8811 	msr	BASEPRI, r6
    1ed8:	f3bf 8f6f 	isb	sy
}
    1edc:	bd70      	pop	{r4, r5, r6, pc}
    1ede:	bf00      	nop
    1ee0:	20000813 	.word	0x20000813

00001ee4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    1ee4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    1ee8:	4604      	mov	r4, r0
    1eea:	4616      	mov	r6, r2
    1eec:	461f      	mov	r7, r3
	__asm__ volatile(
    1eee:	f04f 0320 	mov.w	r3, #32
    1ef2:	f3ef 8811 	mrs	r8, BASEPRI
    1ef6:	f383 8811 	msr	BASEPRI, r3
    1efa:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    1efe:	68c3      	ldr	r3, [r0, #12]
    1f00:	4a32      	ldr	r2, [pc, #200]	; (1fcc <z_impl_k_mutex_lock+0xe8>)
    1f02:	b16b      	cbz	r3, 1f20 <z_impl_k_mutex_lock+0x3c>
    1f04:	6880      	ldr	r0, [r0, #8]
    1f06:	6891      	ldr	r1, [r2, #8]
    1f08:	4288      	cmp	r0, r1
    1f0a:	d019      	beq.n	1f40 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    1f0c:	ea56 0307 	orrs.w	r3, r6, r7
    1f10:	d118      	bne.n	1f44 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    1f12:	f388 8811 	msr	BASEPRI, r8
    1f16:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    1f1a:	f06f 000f 	mvn.w	r0, #15
    1f1e:	e00c      	b.n	1f3a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    1f20:	6891      	ldr	r1, [r2, #8]
    1f22:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    1f26:	3301      	adds	r3, #1
    1f28:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    1f2a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    1f2c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    1f2e:	60a3      	str	r3, [r4, #8]
    1f30:	f388 8811 	msr	BASEPRI, r8
    1f34:	f3bf 8f6f 	isb	sy
		return 0;
    1f38:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    1f3a:	b002      	add	sp, #8
    1f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    1f40:	6921      	ldr	r1, [r4, #16]
    1f42:	e7f0      	b.n	1f26 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    1f44:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1f48:	f991 100e 	ldrsb.w	r1, [r1, #14]
    1f4c:	4299      	cmp	r1, r3
    1f4e:	bfa8      	it	ge
    1f50:	4619      	movge	r1, r3
    1f52:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    1f56:	428b      	cmp	r3, r1
    1f58:	dd2c      	ble.n	1fb4 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    1f5a:	f000 fb0d 	bl	2578 <z_set_prio>
    1f5e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    1f60:	4622      	mov	r2, r4
    1f62:	4641      	mov	r1, r8
    1f64:	e9cd 6700 	strd	r6, r7, [sp]
    1f68:	4819      	ldr	r0, [pc, #100]	; (1fd0 <z_impl_k_mutex_lock+0xec>)
    1f6a:	f000 faf1 	bl	2550 <z_pend_curr>
	if (got_mutex == 0) {
    1f6e:	2800      	cmp	r0, #0
    1f70:	d0e3      	beq.n	1f3a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    1f72:	f04f 0320 	mov.w	r3, #32
    1f76:	f3ef 8611 	mrs	r6, BASEPRI
    1f7a:	f383 8811 	msr	BASEPRI, r3
    1f7e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    1f82:	6823      	ldr	r3, [r4, #0]
    1f84:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1f86:	429c      	cmp	r4, r3
    1f88:	d007      	beq.n	1f9a <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    1f8a:	b133      	cbz	r3, 1f9a <z_impl_k_mutex_lock+0xb6>
    1f8c:	f993 300e 	ldrsb.w	r3, [r3, #14]
    1f90:	4299      	cmp	r1, r3
    1f92:	bfa8      	it	ge
    1f94:	4619      	movge	r1, r3
    1f96:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    1f9a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    1f9c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1fa0:	4299      	cmp	r1, r3
    1fa2:	d109      	bne.n	1fb8 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    1fa4:	b16d      	cbz	r5, 1fc2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    1fa6:	4631      	mov	r1, r6
    1fa8:	4809      	ldr	r0, [pc, #36]	; (1fd0 <z_impl_k_mutex_lock+0xec>)
    1faa:	f001 fa20 	bl	33ee <z_reschedule>
	return -EAGAIN;
    1fae:	f06f 000a 	mvn.w	r0, #10
    1fb2:	e7c2      	b.n	1f3a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    1fb4:	2500      	movs	r5, #0
    1fb6:	e7d3      	b.n	1f60 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    1fb8:	f000 fade 	bl	2578 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    1fbc:	2800      	cmp	r0, #0
    1fbe:	d1f2      	bne.n	1fa6 <z_impl_k_mutex_lock+0xc2>
    1fc0:	e7f0      	b.n	1fa4 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    1fc2:	f386 8811 	msr	BASEPRI, r6
    1fc6:	f3bf 8f6f 	isb	sy
    1fca:	e7f0      	b.n	1fae <z_impl_k_mutex_lock+0xca>
    1fcc:	200007b8 	.word	0x200007b8
    1fd0:	20000813 	.word	0x20000813

00001fd4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    1fd4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
    1fd6:	6883      	ldr	r3, [r0, #8]
{
    1fd8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    1fda:	2b00      	cmp	r3, #0
    1fdc:	d036      	beq.n	204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    1fde:	4a1e      	ldr	r2, [pc, #120]	; (2058 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58>)
    1fe0:	6892      	ldr	r2, [r2, #8]
    1fe2:	4293      	cmp	r3, r2
    1fe4:	d135      	bne.n	2052 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x52>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    1fe6:	7bda      	ldrb	r2, [r3, #15]
    1fe8:	3a01      	subs	r2, #1
    1fea:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    1fec:	68c3      	ldr	r3, [r0, #12]
    1fee:	2b01      	cmp	r3, #1
    1ff0:	d005      	beq.n	1ffe <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    1ff2:	3b01      	subs	r3, #1
    1ff4:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    1ff6:	f000 f8c3 	bl	2180 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    1ffa:	2000      	movs	r0, #0
}
    1ffc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    1ffe:	f04f 0320 	mov.w	r3, #32
    2002:	f3ef 8511 	mrs	r5, BASEPRI
    2006:	f383 8811 	msr	BASEPRI, r3
    200a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    200e:	6901      	ldr	r1, [r0, #16]
    2010:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    2012:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2016:	4299      	cmp	r1, r3
    2018:	d001      	beq.n	201e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1e>
		return z_set_prio(mutex->owner, new_prio);
    201a:	f000 faad 	bl	2578 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    201e:	4620      	mov	r0, r4
    2020:	f001 fa86 	bl	3530 <z_unpend_first_thread>
	mutex->owner = new_owner;
    2024:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    2026:	b158      	cbz	r0, 2040 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40>
		mutex->owner_orig_prio = new_owner->base.prio;
    2028:	f990 200e 	ldrsb.w	r2, [r0, #14]
    202c:	6122      	str	r2, [r4, #16]
    202e:	2200      	movs	r2, #0
    2030:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
    2032:	f001 fa07 	bl	3444 <z_ready_thread>
		z_reschedule(&lock, key);
    2036:	4629      	mov	r1, r5
    2038:	4808      	ldr	r0, [pc, #32]	; (205c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5c>)
    203a:	f001 f9d8 	bl	33ee <z_reschedule>
    203e:	e7da      	b.n	1ff6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    2040:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    2042:	f385 8811 	msr	BASEPRI, r5
    2046:	f3bf 8f6f 	isb	sy
    204a:	e7d4      	b.n	1ff6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    204c:	f06f 0015 	mvn.w	r0, #21
    2050:	e7d4      	b.n	1ffc <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    2052:	f04f 30ff 	mov.w	r0, #4294967295
    2056:	e7d1      	b.n	1ffc <z_impl_k_mutex_unlock+0x28>
    2058:	200007b8 	.word	0x200007b8
    205c:	20000813 	.word	0x20000813

00002060 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    2060:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    2062:	4c08      	ldr	r4, [pc, #32]	; (2084 <z_reset_time_slice+0x24>)
    2064:	6823      	ldr	r3, [r4, #0]
    2066:	b15b      	cbz	r3, 2080 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    2068:	f7fe fd46 	bl	af8 <z_clock_elapsed>
    206c:	4603      	mov	r3, r0
    206e:	6820      	ldr	r0, [r4, #0]
    2070:	4a05      	ldr	r2, [pc, #20]	; (2088 <z_reset_time_slice+0x28>)
    2072:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    2074:	2100      	movs	r1, #0
	}
}
    2076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    207a:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    207c:	f001 bab3 	b.w	35e6 <z_set_timeout_expiry>
}
    2080:	bd10      	pop	{r4, pc}
    2082:	bf00      	nop
    2084:	200007f0 	.word	0x200007f0
    2088:	200007b8 	.word	0x200007b8

0000208c <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    208e:	4605      	mov	r5, r0
    2090:	460c      	mov	r4, r1
	__asm__ volatile(
    2092:	f04f 0320 	mov.w	r3, #32
    2096:	f3ef 8611 	mrs	r6, BASEPRI
    209a:	f383 8811 	msr	BASEPRI, r3
    209e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    20a2:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    20a4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    20a8:	f240 30e7 	movw	r0, #999	; 0x3e7
    20ac:	2100      	movs	r1, #0
    20ae:	4b0a      	ldr	r3, [pc, #40]	; (20d8 <k_sched_time_slice_set+0x4c>)
    20b0:	fbe7 0105 	umlal	r0, r1, r7, r5
    20b4:	611a      	str	r2, [r3, #16]
    20b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    20ba:	2300      	movs	r3, #0
    20bc:	f7fe f842 	bl	144 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    20c0:	4b06      	ldr	r3, [pc, #24]	; (20dc <k_sched_time_slice_set+0x50>)
    20c2:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    20c4:	4b06      	ldr	r3, [pc, #24]	; (20e0 <k_sched_time_slice_set+0x54>)
    20c6:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    20c8:	f7ff ffca 	bl	2060 <z_reset_time_slice>
	__asm__ volatile(
    20cc:	f386 8811 	msr	BASEPRI, r6
    20d0:	f3bf 8f6f 	isb	sy
	}
}
    20d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20d6:	bf00      	nop
    20d8:	200007b8 	.word	0x200007b8
    20dc:	200007f0 	.word	0x200007f0
    20e0:	200007ec 	.word	0x200007ec

000020e4 <k_sched_lock>:
	__asm__ volatile(
    20e4:	f04f 0320 	mov.w	r3, #32
    20e8:	f3ef 8111 	mrs	r1, BASEPRI
    20ec:	f383 8811 	msr	BASEPRI, r3
    20f0:	f3bf 8f6f 	isb	sy
    20f4:	4b04      	ldr	r3, [pc, #16]	; (2108 <k_sched_lock+0x24>)
    20f6:	689a      	ldr	r2, [r3, #8]
    20f8:	7bd3      	ldrb	r3, [r2, #15]
    20fa:	3b01      	subs	r3, #1
    20fc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    20fe:	f381 8811 	msr	BASEPRI, r1
    2102:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    2106:	4770      	bx	lr
    2108:	200007b8 	.word	0x200007b8

0000210c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    210c:	4b09      	ldr	r3, [pc, #36]	; (2134 <z_priq_dumb_remove+0x28>)
    210e:	f103 0228 	add.w	r2, r3, #40	; 0x28
    2112:	4282      	cmp	r2, r0
    2114:	d105      	bne.n	2122 <z_priq_dumb_remove+0x16>
    2116:	689b      	ldr	r3, [r3, #8]
    2118:	428b      	cmp	r3, r1
    211a:	d102      	bne.n	2122 <z_priq_dumb_remove+0x16>
    211c:	7b4b      	ldrb	r3, [r1, #13]
    211e:	06db      	lsls	r3, r3, #27
    2120:	d106      	bne.n	2130 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    2122:	e9d1 3200 	ldrd	r3, r2, [r1]
    2126:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2128:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    212a:	2300      	movs	r3, #0
	node->prev = NULL;
    212c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    2130:	4770      	bx	lr
    2132:	bf00      	nop
    2134:	200007b8 	.word	0x200007b8

00002138 <update_cache>:
{
    2138:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    213a:	4c10      	ldr	r4, [pc, #64]	; (217c <update_cache+0x44>)
{
    213c:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    213e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    2142:	f001 f975 	bl	3430 <z_priq_dumb_best>
    2146:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    2148:	68a3      	ldr	r3, [r4, #8]
    214a:	7b59      	ldrb	r1, [r3, #13]
    214c:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    214e:	bf44      	itt	mi
    2150:	f041 0108 	orrmi.w	r1, r1, #8
    2154:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    2156:	b905      	cbnz	r5, 215a <update_cache+0x22>
    2158:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    215a:	b94e      	cbnz	r6, 2170 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    215c:	7b5a      	ldrb	r2, [r3, #13]
    215e:	06d2      	lsls	r2, r2, #27
    2160:	d106      	bne.n	2170 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    2162:	69aa      	ldr	r2, [r5, #24]
    2164:	b922      	cbnz	r2, 2170 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    2166:	89da      	ldrh	r2, [r3, #14]
    2168:	2a7f      	cmp	r2, #127	; 0x7f
    216a:	d901      	bls.n	2170 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    216c:	6263      	str	r3, [r4, #36]	; 0x24
}
    216e:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    2170:	42ab      	cmp	r3, r5
    2172:	d001      	beq.n	2178 <update_cache+0x40>
			z_reset_time_slice();
    2174:	f7ff ff74 	bl	2060 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    2178:	6265      	str	r5, [r4, #36]	; 0x24
}
    217a:	e7f8      	b.n	216e <update_cache+0x36>
    217c:	200007b8 	.word	0x200007b8

00002180 <k_sched_unlock>:
{
    2180:	b510      	push	{r4, lr}
	__asm__ volatile(
    2182:	f04f 0320 	mov.w	r3, #32
    2186:	f3ef 8411 	mrs	r4, BASEPRI
    218a:	f383 8811 	msr	BASEPRI, r3
    218e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    2192:	4b08      	ldr	r3, [pc, #32]	; (21b4 <k_sched_unlock+0x34>)
		update_cache(0);
    2194:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    2196:	689a      	ldr	r2, [r3, #8]
    2198:	7bd3      	ldrb	r3, [r2, #15]
    219a:	3301      	adds	r3, #1
    219c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    219e:	f7ff ffcb 	bl	2138 <update_cache>
	__asm__ volatile(
    21a2:	f384 8811 	msr	BASEPRI, r4
    21a6:	f3bf 8f6f 	isb	sy
}
    21aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    21ae:	f001 b935 	b.w	341c <z_reschedule_unlocked>
    21b2:	bf00      	nop
    21b4:	200007b8 	.word	0x200007b8

000021b8 <ready_thread>:
{
    21b8:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    21ba:	7b43      	ldrb	r3, [r0, #13]
    21bc:	06db      	lsls	r3, r3, #27
    21be:	d12a      	bne.n	2216 <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    21c0:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
    21c2:	bb43      	cbnz	r3, 2216 <ready_thread+0x5e>
	return list->head == list;
    21c4:	4a15      	ldr	r2, [pc, #84]	; (221c <ready_thread+0x64>)
    21c6:	4611      	mov	r1, r2
    21c8:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    21cc:	428c      	cmp	r4, r1
    21ce:	bf18      	it	ne
    21d0:	4623      	movne	r3, r4
    21d2:	2b00      	cmp	r3, #0
    21d4:	bf38      	it	cc
    21d6:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    21d8:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    21da:	b1b3      	cbz	r3, 220a <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
    21dc:	f990 600e 	ldrsb.w	r6, [r0, #14]
    21e0:	f993 500e 	ldrsb.w	r5, [r3, #14]
    21e4:	42ae      	cmp	r6, r5
    21e6:	db03      	blt.n	21f0 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
    21e8:	42a3      	cmp	r3, r4
    21ea:	d00e      	beq.n	220a <ready_thread+0x52>
    21ec:	681b      	ldr	r3, [r3, #0]
    21ee:	e7f4      	b.n	21da <ready_thread+0x22>
	node->prev = successor->prev;
    21f0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    21f2:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    21f6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    21f8:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    21fa:	7b43      	ldrb	r3, [r0, #13]
    21fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2200:	7343      	strb	r3, [r0, #13]
}
    2202:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    2204:	2000      	movs	r0, #0
    2206:	f7ff bf97 	b.w	2138 <update_cache>
	node->prev = list->tail;
    220a:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    220e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2210:	6018      	str	r0, [r3, #0]
	list->tail = node;
    2212:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    2214:	e7f1      	b.n	21fa <ready_thread+0x42>
}
    2216:	bc70      	pop	{r4, r5, r6}
    2218:	4770      	bx	lr
    221a:	bf00      	nop
    221c:	200007b8 	.word	0x200007b8

00002220 <z_sched_start>:
{
    2220:	b510      	push	{r4, lr}
	__asm__ volatile(
    2222:	f04f 0220 	mov.w	r2, #32
    2226:	f3ef 8411 	mrs	r4, BASEPRI
    222a:	f382 8811 	msr	BASEPRI, r2
    222e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    2232:	7b42      	ldrb	r2, [r0, #13]
    2234:	0751      	lsls	r1, r2, #29
    2236:	d404      	bmi.n	2242 <z_sched_start+0x22>
	__asm__ volatile(
    2238:	f384 8811 	msr	BASEPRI, r4
    223c:	f3bf 8f6f 	isb	sy
}
    2240:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2242:	f022 0204 	bic.w	r2, r2, #4
    2246:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    2248:	f7ff ffb6 	bl	21b8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    224c:	4621      	mov	r1, r4
}
    224e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    2252:	4801      	ldr	r0, [pc, #4]	; (2258 <z_sched_start+0x38>)
    2254:	f001 b8cb 	b.w	33ee <z_reschedule>
    2258:	20000813 	.word	0x20000813

0000225c <z_move_thread_to_end_of_prio_q>:
{
    225c:	4601      	mov	r1, r0
    225e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    2260:	f04f 0320 	mov.w	r3, #32
    2264:	f3ef 8411 	mrs	r4, BASEPRI
    2268:	f383 8811 	msr	BASEPRI, r3
    226c:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2270:	f990 300d 	ldrsb.w	r3, [r0, #13]
    2274:	2b00      	cmp	r3, #0
    2276:	da02      	bge.n	227e <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2278:	4819      	ldr	r0, [pc, #100]	; (22e0 <z_move_thread_to_end_of_prio_q+0x84>)
    227a:	f7ff ff47 	bl	210c <z_priq_dumb_remove>
	return list->head == list;
    227e:	4a19      	ldr	r2, [pc, #100]	; (22e4 <z_move_thread_to_end_of_prio_q+0x88>)
    2280:	4610      	mov	r0, r2
    2282:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2286:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2288:	4283      	cmp	r3, r0
    228a:	bf08      	it	eq
    228c:	2300      	moveq	r3, #0
    228e:	2b00      	cmp	r3, #0
    2290:	bf38      	it	cc
    2292:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2294:	b1eb      	cbz	r3, 22d2 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
    2296:	f991 700e 	ldrsb.w	r7, [r1, #14]
    229a:	f993 600e 	ldrsb.w	r6, [r3, #14]
    229e:	42b7      	cmp	r7, r6
    22a0:	db03      	blt.n	22aa <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
    22a2:	429d      	cmp	r5, r3
    22a4:	d015      	beq.n	22d2 <z_move_thread_to_end_of_prio_q+0x76>
    22a6:	681b      	ldr	r3, [r3, #0]
    22a8:	e7f4      	b.n	2294 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
    22aa:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    22ac:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    22b0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    22b2:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    22b4:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
    22b6:	6890      	ldr	r0, [r2, #8]
    22b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    22bc:	734b      	strb	r3, [r1, #13]
    22be:	1a43      	subs	r3, r0, r1
    22c0:	4258      	negs	r0, r3
    22c2:	4158      	adcs	r0, r3
    22c4:	f7ff ff38 	bl	2138 <update_cache>
	__asm__ volatile(
    22c8:	f384 8811 	msr	BASEPRI, r4
    22cc:	f3bf 8f6f 	isb	sy
}
    22d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
    22d2:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
    22d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    22d8:	6019      	str	r1, [r3, #0]
	list->tail = node;
    22da:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    22dc:	e7ea      	b.n	22b4 <z_move_thread_to_end_of_prio_q+0x58>
    22de:	bf00      	nop
    22e0:	200007e0 	.word	0x200007e0
    22e4:	200007b8 	.word	0x200007b8

000022e8 <z_time_slice>:
{
    22e8:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    22ea:	4a15      	ldr	r2, [pc, #84]	; (2340 <z_time_slice+0x58>)
    22ec:	4b15      	ldr	r3, [pc, #84]	; (2344 <z_time_slice+0x5c>)
    22ee:	6814      	ldr	r4, [r2, #0]
{
    22f0:	4601      	mov	r1, r0
	if (pending_current == _current) {
    22f2:	6898      	ldr	r0, [r3, #8]
    22f4:	42a0      	cmp	r0, r4
    22f6:	461c      	mov	r4, r3
    22f8:	d103      	bne.n	2302 <z_time_slice+0x1a>
}
    22fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    22fe:	f7ff beaf 	b.w	2060 <z_reset_time_slice>
	pending_current = NULL;
    2302:	2500      	movs	r5, #0
    2304:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    2306:	4a10      	ldr	r2, [pc, #64]	; (2348 <z_time_slice+0x60>)
    2308:	6812      	ldr	r2, [r2, #0]
    230a:	b1b2      	cbz	r2, 233a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    230c:	89c2      	ldrh	r2, [r0, #14]
    230e:	2a7f      	cmp	r2, #127	; 0x7f
    2310:	d813      	bhi.n	233a <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    2312:	4a0e      	ldr	r2, [pc, #56]	; (234c <z_time_slice+0x64>)
    2314:	f990 500e 	ldrsb.w	r5, [r0, #14]
    2318:	6812      	ldr	r2, [r2, #0]
    231a:	4295      	cmp	r5, r2
    231c:	db0d      	blt.n	233a <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    231e:	4a0c      	ldr	r2, [pc, #48]	; (2350 <z_time_slice+0x68>)
    2320:	4290      	cmp	r0, r2
    2322:	d00a      	beq.n	233a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    2324:	6982      	ldr	r2, [r0, #24]
    2326:	b942      	cbnz	r2, 233a <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    2328:	691a      	ldr	r2, [r3, #16]
    232a:	428a      	cmp	r2, r1
    232c:	dc02      	bgt.n	2334 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    232e:	f7ff ff95 	bl	225c <z_move_thread_to_end_of_prio_q>
    2332:	e7e2      	b.n	22fa <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
    2334:	1a52      	subs	r2, r2, r1
    2336:	611a      	str	r2, [r3, #16]
}
    2338:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    233a:	2300      	movs	r3, #0
    233c:	6123      	str	r3, [r4, #16]
    233e:	e7fb      	b.n	2338 <z_time_slice+0x50>
    2340:	200007e8 	.word	0x200007e8
    2344:	200007b8 	.word	0x200007b8
    2348:	200007f0 	.word	0x200007f0
    234c:	200007ec 	.word	0x200007ec
    2350:	200006d0 	.word	0x200006d0

00002354 <z_impl_k_thread_suspend>:
{
    2354:	b570      	push	{r4, r5, r6, lr}
    2356:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    2358:	3018      	adds	r0, #24
    235a:	f001 f91e 	bl	359a <z_abort_timeout>
	__asm__ volatile(
    235e:	f04f 0320 	mov.w	r3, #32
    2362:	f3ef 8611 	mrs	r6, BASEPRI
    2366:	f383 8811 	msr	BASEPRI, r3
    236a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    236e:	f994 300d 	ldrsb.w	r3, [r4, #13]
    2372:	2b00      	cmp	r3, #0
    2374:	da07      	bge.n	2386 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2376:	4621      	mov	r1, r4
    2378:	480e      	ldr	r0, [pc, #56]	; (23b4 <z_impl_k_thread_suspend+0x60>)
    237a:	f7ff fec7 	bl	210c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    237e:	7b63      	ldrb	r3, [r4, #13]
    2380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2384:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    2386:	4d0c      	ldr	r5, [pc, #48]	; (23b8 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2388:	7b63      	ldrb	r3, [r4, #13]
    238a:	68a8      	ldr	r0, [r5, #8]
    238c:	f043 0310 	orr.w	r3, r3, #16
    2390:	7363      	strb	r3, [r4, #13]
    2392:	1b03      	subs	r3, r0, r4
    2394:	4258      	negs	r0, r3
    2396:	4158      	adcs	r0, r3
    2398:	f7ff fece 	bl	2138 <update_cache>
	__asm__ volatile(
    239c:	f386 8811 	msr	BASEPRI, r6
    23a0:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    23a4:	68ab      	ldr	r3, [r5, #8]
    23a6:	42a3      	cmp	r3, r4
    23a8:	d103      	bne.n	23b2 <z_impl_k_thread_suspend+0x5e>
}
    23aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    23ae:	f001 b835 	b.w	341c <z_reschedule_unlocked>
}
    23b2:	bd70      	pop	{r4, r5, r6, pc}
    23b4:	200007e0 	.word	0x200007e0
    23b8:	200007b8 	.word	0x200007b8

000023bc <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    23bc:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
    23be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23c2:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    23c4:	b103      	cbz	r3, 23c8 <z_thread_single_abort+0xc>
		thread->fn_abort();
    23c6:	4798      	blx	r3
    23c8:	f104 0018 	add.w	r0, r4, #24
    23cc:	f001 f8e5 	bl	359a <z_abort_timeout>
	__asm__ volatile(
    23d0:	f04f 0320 	mov.w	r3, #32
    23d4:	f3ef 8611 	mrs	r6, BASEPRI
    23d8:	f383 8811 	msr	BASEPRI, r3
    23dc:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    23e0:	7b63      	ldrb	r3, [r4, #13]
    23e2:	06d8      	lsls	r0, r3, #27
    23e4:	d123      	bne.n	242e <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
    23e6:	69a2      	ldr	r2, [r4, #24]
    23e8:	bb0a      	cbnz	r2, 242e <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
    23ea:	0619      	lsls	r1, r3, #24
    23ec:	d507      	bpl.n	23fe <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    23ee:	4621      	mov	r1, r4
    23f0:	481e      	ldr	r0, [pc, #120]	; (246c <z_thread_single_abort+0xb0>)
    23f2:	f7ff fe8b 	bl	210c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    23f6:	7b63      	ldrb	r3, [r4, #13]
    23f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    23fc:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    23fe:	4b1c      	ldr	r3, [pc, #112]	; (2470 <z_thread_single_abort+0xb4>)
    2400:	6898      	ldr	r0, [r3, #8]
    2402:	1b02      	subs	r2, r0, r4
    2404:	4250      	negs	r0, r2
    2406:	4150      	adcs	r0, r2
    2408:	f7ff fe96 	bl	2138 <update_cache>
			waiter->base.pended_on = NULL;
    240c:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
    240e:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    2410:	f104 0828 	add.w	r8, r4, #40	; 0x28
    2414:	f043 0308 	orr.w	r3, r3, #8
    2418:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    241a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    241c:	4545      	cmp	r5, r8
    241e:	d000      	beq.n	2422 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    2420:	b995      	cbnz	r5, 2448 <z_thread_single_abort+0x8c>
	__asm__ volatile(
    2422:	f386 8811 	msr	BASEPRI, r6
    2426:	f3bf 8f6f 	isb	sy
}
    242a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    242e:	079b      	lsls	r3, r3, #30
    2430:	d5ec      	bpl.n	240c <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    2432:	4621      	mov	r1, r4
    2434:	68a0      	ldr	r0, [r4, #8]
    2436:	f7ff fe69 	bl	210c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    243a:	7b63      	ldrb	r3, [r4, #13]
    243c:	f023 0302 	bic.w	r3, r3, #2
    2440:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    2442:	2300      	movs	r3, #0
    2444:	60a3      	str	r3, [r4, #8]
    2446:	e7e1      	b.n	240c <z_thread_single_abort+0x50>
    2448:	f105 0018 	add.w	r0, r5, #24
    244c:	f001 f8a5 	bl	359a <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    2450:	68a8      	ldr	r0, [r5, #8]
    2452:	4629      	mov	r1, r5
    2454:	f7ff fe5a 	bl	210c <z_priq_dumb_remove>
    2458:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
    245a:	4628      	mov	r0, r5
    245c:	f023 0302 	bic.w	r3, r3, #2
    2460:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    2462:	60af      	str	r7, [r5, #8]
    2464:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
    2466:	f7ff fea7 	bl	21b8 <ready_thread>
    246a:	e7d6      	b.n	241a <z_thread_single_abort+0x5e>
    246c:	200007e0 	.word	0x200007e0
    2470:	200007b8 	.word	0x200007b8

00002474 <unready_thread>:
{
    2474:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    2476:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    247a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    247c:	2b00      	cmp	r3, #0
    247e:	da06      	bge.n	248e <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    2480:	4807      	ldr	r0, [pc, #28]	; (24a0 <unready_thread+0x2c>)
    2482:	f7ff fe43 	bl	210c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2486:	7b4b      	ldrb	r3, [r1, #13]
    2488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    248c:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    248e:	4b05      	ldr	r3, [pc, #20]	; (24a4 <unready_thread+0x30>)
    2490:	6898      	ldr	r0, [r3, #8]
    2492:	1a43      	subs	r3, r0, r1
    2494:	4258      	negs	r0, r3
    2496:	4158      	adcs	r0, r3
}
    2498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    249c:	f7ff be4c 	b.w	2138 <update_cache>
    24a0:	200007e0 	.word	0x200007e0
    24a4:	200007b8 	.word	0x200007b8

000024a8 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    24a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24aa:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    24ac:	f001 f8b5 	bl	361a <z_tick_get_32>
    24b0:	182c      	adds	r4, r5, r0
	__asm__ volatile(
    24b2:	f04f 0320 	mov.w	r3, #32
    24b6:	f3ef 8711 	mrs	r7, BASEPRI
    24ba:	f383 8811 	msr	BASEPRI, r3
    24be:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    24c2:	4e0d      	ldr	r6, [pc, #52]	; (24f8 <z_tick_sleep.part.0+0x50>)
    24c4:	4b0d      	ldr	r3, [pc, #52]	; (24fc <z_tick_sleep.part.0+0x54>)
    24c6:	68b0      	ldr	r0, [r6, #8]
    24c8:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    24ca:	f000 fff6 	bl	34ba <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
    24ce:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    24d0:	490b      	ldr	r1, [pc, #44]	; (2500 <z_tick_sleep.part.0+0x58>)
    24d2:	462a      	mov	r2, r5
    24d4:	17eb      	asrs	r3, r5, #31
    24d6:	3018      	adds	r0, #24
    24d8:	f000 f9d4 	bl	2884 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    24dc:	68b2      	ldr	r2, [r6, #8]
	ret = arch_swap(key);
    24de:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
    24e0:	7b53      	ldrb	r3, [r2, #13]
    24e2:	f043 0310 	orr.w	r3, r3, #16
    24e6:	7353      	strb	r3, [r2, #13]
    24e8:	f7fe fbba 	bl	c60 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    24ec:	f001 f895 	bl	361a <z_tick_get_32>
    24f0:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    24f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    24f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24f8:	200007b8 	.word	0x200007b8
    24fc:	200007e8 	.word	0x200007e8
    2500:	00003465 	.word	0x00003465

00002504 <pend>:
{
    2504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2508:	4606      	mov	r6, r0
    250a:	4614      	mov	r4, r2
    250c:	461d      	mov	r5, r3
    250e:	f04f 0320 	mov.w	r3, #32
    2512:	f3ef 8711 	mrs	r7, BASEPRI
    2516:	f383 8811 	msr	BASEPRI, r3
    251a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    251e:	f000 ffdc 	bl	34da <add_to_waitq_locked>
	__asm__ volatile(
    2522:	f387 8811 	msr	BASEPRI, r7
    2526:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    252a:	1c6b      	adds	r3, r5, #1
    252c:	bf08      	it	eq
    252e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    2532:	d008      	beq.n	2546 <pend+0x42>
    2534:	4622      	mov	r2, r4
    2536:	462b      	mov	r3, r5
    2538:	f106 0018 	add.w	r0, r6, #24
    253c:	4903      	ldr	r1, [pc, #12]	; (254c <pend+0x48>)
}
    253e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2542:	f000 b99f 	b.w	2884 <z_add_timeout>
    2546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    254a:	bf00      	nop
    254c:	00003465 	.word	0x00003465

00002550 <z_pend_curr>:
{
    2550:	b510      	push	{r4, lr}
    2552:	460c      	mov	r4, r1
	pending_current = _current;
    2554:	4b06      	ldr	r3, [pc, #24]	; (2570 <z_pend_curr+0x20>)
{
    2556:	4611      	mov	r1, r2
	pending_current = _current;
    2558:	6898      	ldr	r0, [r3, #8]
    255a:	4b06      	ldr	r3, [pc, #24]	; (2574 <z_pend_curr+0x24>)
    255c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    255e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2562:	f7ff ffcf 	bl	2504 <pend>
    2566:	4620      	mov	r0, r4
}
    2568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    256c:	f7fe bb78 	b.w	c60 <arch_swap>
    2570:	200007b8 	.word	0x200007b8
    2574:	200007e8 	.word	0x200007e8

00002578 <z_set_prio>:
{
    2578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    257c:	4604      	mov	r4, r0
	__asm__ volatile(
    257e:	f04f 0320 	mov.w	r3, #32
    2582:	f3ef 8811 	mrs	r8, BASEPRI
    2586:	f383 8811 	msr	BASEPRI, r3
    258a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    258e:	7b43      	ldrb	r3, [r0, #13]
    2590:	b24e      	sxtb	r6, r1
    2592:	06db      	lsls	r3, r3, #27
    2594:	d12e      	bne.n	25f4 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
    2596:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    2598:	bb65      	cbnz	r5, 25f4 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    259a:	4f18      	ldr	r7, [pc, #96]	; (25fc <z_set_prio+0x84>)
    259c:	4621      	mov	r1, r4
    259e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    25a2:	f7ff fdb3 	bl	210c <z_priq_dumb_remove>
	return list->head == list;
    25a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    25a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    25aa:	4283      	cmp	r3, r0
    25ac:	bf18      	it	ne
    25ae:	461d      	movne	r5, r3
    25b0:	2d00      	cmp	r5, #0
    25b2:	bf38      	it	cc
    25b4:	2500      	movcc	r5, #0
				thread->base.prio = prio;
    25b6:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    25b8:	b1b5      	cbz	r5, 25e8 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    25ba:	f995 100e 	ldrsb.w	r1, [r5, #14]
    25be:	42b1      	cmp	r1, r6
    25c0:	dc03      	bgt.n	25ca <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
    25c2:	42aa      	cmp	r2, r5
    25c4:	d010      	beq.n	25e8 <z_set_prio+0x70>
    25c6:	682d      	ldr	r5, [r5, #0]
    25c8:	e7f6      	b.n	25b8 <z_set_prio+0x40>
	node->prev = successor->prev;
    25ca:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
    25cc:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
    25d0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    25d2:	606c      	str	r4, [r5, #4]
			update_cache(1);
    25d4:	2001      	movs	r0, #1
    25d6:	f7ff fdaf 	bl	2138 <update_cache>
    25da:	2001      	movs	r0, #1
	__asm__ volatile(
    25dc:	f388 8811 	msr	BASEPRI, r8
    25e0:	f3bf 8f6f 	isb	sy
}
    25e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
    25e8:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
    25ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    25ee:	601c      	str	r4, [r3, #0]
	list->tail = node;
    25f0:	62fc      	str	r4, [r7, #44]	; 0x2c
}
    25f2:	e7ef      	b.n	25d4 <z_set_prio+0x5c>
			thread->base.prio = prio;
    25f4:	2000      	movs	r0, #0
    25f6:	73a6      	strb	r6, [r4, #14]
    25f8:	e7f0      	b.n	25dc <z_set_prio+0x64>
    25fa:	bf00      	nop
    25fc:	200007b8 	.word	0x200007b8

00002600 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    2600:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    2602:	4b04      	ldr	r3, [pc, #16]	; (2614 <z_sched_init+0x14>)
    2604:	4608      	mov	r0, r1
    2606:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    260a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    260e:	f7ff bd3d 	b.w	208c <k_sched_time_slice_set>
    2612:	bf00      	nop
    2614:	200007b8 	.word	0x200007b8

00002618 <z_impl_k_yield>:
{
    2618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    261a:	4c24      	ldr	r4, [pc, #144]	; (26ac <z_impl_k_yield+0x94>)
    261c:	4b24      	ldr	r3, [pc, #144]	; (26b0 <z_impl_k_yield+0x98>)
    261e:	68a2      	ldr	r2, [r4, #8]
    2620:	429a      	cmp	r2, r3
    2622:	d030      	beq.n	2686 <z_impl_k_yield+0x6e>
	__asm__ volatile(
    2624:	f04f 0320 	mov.w	r3, #32
    2628:	f3ef 8511 	mrs	r5, BASEPRI
    262c:	f383 8811 	msr	BASEPRI, r3
    2630:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    2634:	68a1      	ldr	r1, [r4, #8]
    2636:	f104 0028 	add.w	r0, r4, #40	; 0x28
    263a:	f7ff fd67 	bl	210c <z_priq_dumb_remove>
	return list->head == list;
    263e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    2640:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2642:	4283      	cmp	r3, r0
    2644:	bf08      	it	eq
    2646:	2300      	moveq	r3, #0
    2648:	2b00      	cmp	r3, #0
    264a:	bf38      	it	cc
    264c:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    264e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2650:	b32b      	cbz	r3, 269e <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    2652:	f992 700e 	ldrsb.w	r7, [r2, #14]
    2656:	f993 600e 	ldrsb.w	r6, [r3, #14]
    265a:	42b7      	cmp	r7, r6
    265c:	db03      	blt.n	2666 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    265e:	428b      	cmp	r3, r1
    2660:	d01d      	beq.n	269e <z_impl_k_yield+0x86>
    2662:	681b      	ldr	r3, [r3, #0]
    2664:	e7f4      	b.n	2650 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    2666:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    2668:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    266c:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    266e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    2670:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
    2672:	2001      	movs	r0, #1
    2674:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2678:	7353      	strb	r3, [r2, #13]
    267a:	f7ff fd5d 	bl	2138 <update_cache>
	__asm__ volatile(
    267e:	f385 8811 	msr	BASEPRI, r5
    2682:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    2686:	f04f 0320 	mov.w	r3, #32
    268a:	f3ef 8011 	mrs	r0, BASEPRI
    268e:	f383 8811 	msr	BASEPRI, r3
    2692:	f3bf 8f6f 	isb	sy
}
    2696:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    269a:	f7fe bae1 	b.w	c60 <arch_swap>
	node->prev = list->tail;
    269e:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    26a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    26a4:	601a      	str	r2, [r3, #0]
	list->tail = node;
    26a6:	62e2      	str	r2, [r4, #44]	; 0x2c
}
    26a8:	e7e2      	b.n	2670 <z_impl_k_yield+0x58>
    26aa:	bf00      	nop
    26ac:	200007b8 	.word	0x200007b8
    26b0:	200006d0 	.word	0x200006d0

000026b4 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
    26b4:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    26b6:	3301      	adds	r3, #1
    26b8:	bf08      	it	eq
    26ba:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    26be:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    26c0:	d106      	bne.n	26d0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    26c2:	4b0b      	ldr	r3, [pc, #44]	; (26f0 <z_impl_k_sleep+0x3c>)
    26c4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    26c6:	f7ff fe45 	bl	2354 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
    26ca:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    26ce:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    26d0:	4604      	mov	r4, r0
	if (ticks == 0) {
    26d2:	b948      	cbnz	r0, 26e8 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
    26d4:	f7ff ffa0 	bl	2618 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    26d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    26dc:	fb84 3400 	smull	r3, r4, r4, r0
    26e0:	0bd8      	lsrs	r0, r3, #15
    26e2:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    26e6:	e7f2      	b.n	26ce <z_impl_k_sleep+0x1a>
    26e8:	f7ff fede 	bl	24a8 <z_tick_sleep.part.0>
    26ec:	4604      	mov	r4, r0
    26ee:	e7f3      	b.n	26d8 <z_impl_k_sleep+0x24>
    26f0:	200007b8 	.word	0x200007b8

000026f4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    26f4:	4b01      	ldr	r3, [pc, #4]	; (26fc <z_impl_k_current_get+0x8>)
    26f6:	6898      	ldr	r0, [r3, #8]
    26f8:	4770      	bx	lr
    26fa:	bf00      	nop
    26fc:	200007b8 	.word	0x200007b8

00002700 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    2700:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
    2702:	f100 0528 	add.w	r5, r0, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2706:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
    270a:	2504      	movs	r5, #4
    270c:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    270e:	2500      	movs	r5, #0
{
    2710:	4604      	mov	r4, r0
    2712:	b087      	sub	sp, #28
    2714:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2718:	e9cd 6703 	strd	r6, r7, [sp, #12]
	thread_base->prio = priority;
    271c:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    271e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	node->prev = NULL;
    2720:	e9c0 5506 	strd	r5, r5, [r0, #24]
    2724:	9602      	str	r6, [sp, #8]
    2726:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	thread_base->user_options = (u8_t)options;
    2728:	7307      	strb	r7, [r0, #12]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    272a:	9601      	str	r6, [sp, #4]
    272c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
    272e:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2730:	9600      	str	r6, [sp, #0]
    2732:	f7fe fb09 	bl	d48 <arch_new_thread>
	if (!_current) {
    2736:	4b04      	ldr	r3, [pc, #16]	; (2748 <z_setup_new_thread+0x48>)
	new_thread->fn_abort = NULL;
    2738:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
    273c:	689b      	ldr	r3, [r3, #8]
    273e:	b103      	cbz	r3, 2742 <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
    2740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2742:	66a3      	str	r3, [r4, #104]	; 0x68
}
    2744:	b007      	add	sp, #28
    2746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2748:	200007b8 	.word	0x200007b8

0000274c <z_init_static_threads>:
{
    274c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    2750:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2808 <z_init_static_threads+0xbc>
    2754:	4d2b      	ldr	r5, [pc, #172]	; (2804 <z_init_static_threads+0xb8>)
    2756:	46c8      	mov	r8, r9
{
    2758:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    275a:	454d      	cmp	r5, r9
    275c:	f105 0430 	add.w	r4, r5, #48	; 0x30
    2760:	d30d      	bcc.n	277e <z_init_static_threads+0x32>
	k_sched_lock();
    2762:	f7ff fcbf 	bl	20e4 <k_sched_lock>
			return (u32_t)((t * to_hz + off) / from_hz);
    2766:	f44f 4900 	mov.w	r9, #32768	; 0x8000
	_FOREACH_STATIC_THREAD(thread_data) {
    276a:	4c26      	ldr	r4, [pc, #152]	; (2804 <z_init_static_threads+0xb8>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    276c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 280c <z_init_static_threads+0xc0>
    2770:	4544      	cmp	r4, r8
    2772:	d321      	bcc.n	27b8 <z_init_static_threads+0x6c>
}
    2774:	b007      	add	sp, #28
    2776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    277a:	f7ff bd01 	b.w	2180 <k_sched_unlock>
		z_setup_new_thread(
    277e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2782:	9305      	str	r3, [sp, #20]
    2784:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2788:	9304      	str	r3, [sp, #16]
    278a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    278e:	9303      	str	r3, [sp, #12]
    2790:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2794:	9302      	str	r3, [sp, #8]
    2796:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    279a:	9301      	str	r3, [sp, #4]
    279c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    27a0:	9300      	str	r3, [sp, #0]
    27a2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    27a6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    27aa:	f7ff ffa9 	bl	2700 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    27ae:	f854 3c30 	ldr.w	r3, [r4, #-48]
    27b2:	655d      	str	r5, [r3, #84]	; 0x54
    27b4:	4625      	mov	r5, r4
    27b6:	e7d0      	b.n	275a <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    27b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    27ba:	1c4b      	adds	r3, r1, #1
    27bc:	d017      	beq.n	27ee <z_init_static_threads+0xa2>
    27be:	f240 3be7 	movw	fp, #999	; 0x3e7
    27c2:	f04f 0c00 	mov.w	ip, #0
					    K_MSEC(thread_data->init_delay));
    27c6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    27ca:	fbc9 bc01 	smlal	fp, ip, r9, r1
    27ce:	2300      	movs	r3, #0
    27d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    27d4:	4658      	mov	r0, fp
    27d6:	4661      	mov	r1, ip
    27d8:	f7fd fcb4 	bl	144 <__aeabi_uldivmod>
    27dc:	2700      	movs	r7, #0
    27de:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    27e0:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
    27e4:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    27e6:	d104      	bne.n	27f2 <z_init_static_threads+0xa6>
	z_sched_start(thread);
    27e8:	4628      	mov	r0, r5
    27ea:	f7ff fd19 	bl	2220 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    27ee:	3430      	adds	r4, #48	; 0x30
    27f0:	e7be      	b.n	2770 <z_init_static_threads+0x24>
    27f2:	4602      	mov	r2, r0
    27f4:	463b      	mov	r3, r7
    27f6:	4651      	mov	r1, sl
    27f8:	f105 0018 	add.w	r0, r5, #24
    27fc:	f000 f842 	bl	2884 <z_add_timeout>
    2800:	e7f5      	b.n	27ee <z_init_static_threads+0xa2>
    2802:	bf00      	nop
    2804:	200000f4 	.word	0x200000f4
    2808:	200000f4 	.word	0x200000f4
    280c:	00003465 	.word	0x00003465

00002810 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    2810:	4b03      	ldr	r3, [pc, #12]	; (2820 <elapsed+0x10>)
    2812:	681b      	ldr	r3, [r3, #0]
    2814:	b90b      	cbnz	r3, 281a <elapsed+0xa>
    2816:	f7fe b96f 	b.w	af8 <z_clock_elapsed>
}
    281a:	2000      	movs	r0, #0
    281c:	4770      	bx	lr
    281e:	bf00      	nop
    2820:	200007f4 	.word	0x200007f4

00002824 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2824:	6803      	ldr	r3, [r0, #0]
    2826:	b140      	cbz	r0, 283a <remove_timeout+0x16>
    2828:	4a07      	ldr	r2, [pc, #28]	; (2848 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    282a:	6852      	ldr	r2, [r2, #4]
    282c:	4290      	cmp	r0, r2
    282e:	d004      	beq.n	283a <remove_timeout+0x16>
	if (next(t) != NULL) {
    2830:	b11b      	cbz	r3, 283a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    2832:	689a      	ldr	r2, [r3, #8]
    2834:	6881      	ldr	r1, [r0, #8]
    2836:	440a      	add	r2, r1
    2838:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    283a:	6842      	ldr	r2, [r0, #4]
    283c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    283e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2840:	2300      	movs	r3, #0
	node->prev = NULL;
    2842:	e9c0 3300 	strd	r3, r3, [r0]
}
    2846:	4770      	bx	lr
    2848:	2000004c 	.word	0x2000004c

0000284c <next_timeout>:
	return list->head == list;
    284c:	4b0b      	ldr	r3, [pc, #44]	; (287c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    284e:	b510      	push	{r4, lr}
    2850:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2852:	429c      	cmp	r4, r3
    2854:	bf08      	it	eq
    2856:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    2858:	f7ff ffda 	bl	2810 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    285c:	b154      	cbz	r4, 2874 <next_timeout+0x28>
    285e:	68a3      	ldr	r3, [r4, #8]
    2860:	1a18      	subs	r0, r3, r0
    2862:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2866:	4b06      	ldr	r3, [pc, #24]	; (2880 <next_timeout+0x34>)
    2868:	691b      	ldr	r3, [r3, #16]
    286a:	b113      	cbz	r3, 2872 <next_timeout+0x26>
    286c:	4298      	cmp	r0, r3
    286e:	bfa8      	it	ge
    2870:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    2872:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2874:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2878:	e7f5      	b.n	2866 <next_timeout+0x1a>
    287a:	bf00      	nop
    287c:	2000004c 	.word	0x2000004c
    2880:	200007b8 	.word	0x200007b8

00002884 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    2884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2888:	9101      	str	r1, [sp, #4]
    288a:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    288c:	1c4b      	adds	r3, r1, #1
    288e:	bf08      	it	eq
    2890:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    2894:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2896:	d061      	beq.n	295c <z_add_timeout+0xd8>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    2898:	f06f 0301 	mvn.w	r3, #1
    289c:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
    28a0:	1c54      	adds	r4, r2, #1
    28a2:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    28a6:	ebb3 0804 	subs.w	r8, r3, r4
    28aa:	eb6b 0905 	sbc.w	r9, fp, r5
    28ae:	f1b8 0f00 	cmp.w	r8, #0
    28b2:	f179 0300 	sbcs.w	r3, r9, #0
    28b6:	db0f      	blt.n	28d8 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    28b8:	f7ff ffaa 	bl	2810 <elapsed>
    28bc:	f06f 0301 	mvn.w	r3, #1
    28c0:	4a2b      	ldr	r2, [pc, #172]	; (2970 <z_add_timeout+0xec>)
    28c2:	e9d2 1c00 	ldrd	r1, ip, [r2]
    28c6:	1a5b      	subs	r3, r3, r1
    28c8:	eb6b 020c 	sbc.w	r2, fp, ip
    28cc:	1b1e      	subs	r6, r3, r4
    28ce:	eb62 0705 	sbc.w	r7, r2, r5
    28d2:	1a34      	subs	r4, r6, r0
    28d4:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    28d8:	9b01      	ldr	r3, [sp, #4]
    28da:	f8ca 300c 	str.w	r3, [sl, #12]
    28de:	f04f 0320 	mov.w	r3, #32
    28e2:	f3ef 8611 	mrs	r6, BASEPRI
    28e6:	f383 8811 	msr	BASEPRI, r3
    28ea:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    28ee:	f7ff ff8f 	bl	2810 <elapsed>
	ticks = MAX(1, ticks);
    28f2:	2c01      	cmp	r4, #1
    28f4:	f175 0300 	sbcs.w	r3, r5, #0
    28f8:	bfb8      	it	lt
    28fa:	2401      	movlt	r4, #1
	return list->head == list;
    28fc:	4b1d      	ldr	r3, [pc, #116]	; (2974 <z_add_timeout+0xf0>)
		to->dticks = ticks + elapsed();
    28fe:	4404      	add	r4, r0
    2900:	681a      	ldr	r2, [r3, #0]
    2902:	f8ca 4008 	str.w	r4, [sl, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2906:	429a      	cmp	r2, r3
    2908:	d001      	beq.n	290e <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    290a:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    290c:	b952      	cbnz	r2, 2924 <z_add_timeout+0xa0>
	node->prev = list->tail;
    290e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2910:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    2914:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    2918:	685a      	ldr	r2, [r3, #4]
    291a:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    291e:	f8c3 a004 	str.w	sl, [r3, #4]
}
    2922:	e00d      	b.n	2940 <z_add_timeout+0xbc>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    2924:	6890      	ldr	r0, [r2, #8]
    2926:	f8da 1008 	ldr.w	r1, [sl, #8]
    292a:	4288      	cmp	r0, r1
    292c:	dd19      	ble.n	2962 <z_add_timeout+0xde>
				t->dticks -= to->dticks;
    292e:	1a41      	subs	r1, r0, r1
    2930:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    2932:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    2934:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    2938:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    293c:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    2940:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2942:	429a      	cmp	r2, r3
    2944:	d006      	beq.n	2954 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    2946:	4592      	cmp	sl, r2
    2948:	d104      	bne.n	2954 <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
    294a:	f7ff ff7f 	bl	284c <next_timeout>
    294e:	2100      	movs	r1, #0
    2950:	f7fe f86e 	bl	a30 <z_clock_set_timeout>
	__asm__ volatile(
    2954:	f386 8811 	msr	BASEPRI, r6
    2958:	f3bf 8f6f 	isb	sy
		}
	}
}
    295c:	b003      	add	sp, #12
    295e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    2962:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    2964:	4294      	cmp	r4, r2
    2966:	f8ca 1008 	str.w	r1, [sl, #8]
    296a:	d0d0      	beq.n	290e <z_add_timeout+0x8a>
    296c:	6812      	ldr	r2, [r2, #0]
    296e:	e7cd      	b.n	290c <z_add_timeout+0x88>
    2970:	20000158 	.word	0x20000158
    2974:	2000004c 	.word	0x2000004c

00002978 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    2978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    297c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    297e:	f7ff fcb3 	bl	22e8 <z_time_slice>
	__asm__ volatile(
    2982:	f04f 0320 	mov.w	r3, #32
    2986:	f3ef 8411 	mrs	r4, BASEPRI
    298a:	f383 8811 	msr	BASEPRI, r3
    298e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    2992:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2a18 <z_clock_announce+0xa0>
    2996:	4d1f      	ldr	r5, [pc, #124]	; (2a14 <z_clock_announce+0x9c>)
    2998:	46c1      	mov	r9, r8
	return list->head == list;
    299a:	f8df a080 	ldr.w	sl, [pc, #128]	; 2a1c <z_clock_announce+0xa4>
    299e:	602e      	str	r6, [r5, #0]
    29a0:	f8da 0000 	ldr.w	r0, [sl]
    29a4:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    29a6:	4550      	cmp	r0, sl
    29a8:	e9d8 6700 	ldrd	r6, r7, [r8]
    29ac:	d005      	beq.n	29ba <z_clock_announce+0x42>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    29ae:	b120      	cbz	r0, 29ba <z_clock_announce+0x42>
    29b0:	6883      	ldr	r3, [r0, #8]
    29b2:	4293      	cmp	r3, r2
    29b4:	dd13      	ble.n	29de <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    29b6:	1a9b      	subs	r3, r3, r2
    29b8:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
    29ba:	18b6      	adds	r6, r6, r2
    29bc:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
    29c0:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
    29c4:	2600      	movs	r6, #0
    29c6:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    29c8:	f7ff ff40 	bl	284c <next_timeout>
    29cc:	4631      	mov	r1, r6
    29ce:	f7fe f82f 	bl	a30 <z_clock_set_timeout>
	__asm__ volatile(
    29d2:	f384 8811 	msr	BASEPRI, r4
    29d6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    29da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
    29de:	18f6      	adds	r6, r6, r3
    29e0:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
    29e4:	1ad3      	subs	r3, r2, r3
    29e6:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
    29e8:	2300      	movs	r3, #0
    29ea:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
    29ec:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
    29f0:	f7ff ff18 	bl	2824 <remove_timeout>
    29f4:	f384 8811 	msr	BASEPRI, r4
    29f8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    29fc:	68c3      	ldr	r3, [r0, #12]
    29fe:	4798      	blx	r3
	__asm__ volatile(
    2a00:	f04f 0320 	mov.w	r3, #32
    2a04:	f3ef 8411 	mrs	r4, BASEPRI
    2a08:	f383 8811 	msr	BASEPRI, r3
    2a0c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    2a10:	e7c6      	b.n	29a0 <z_clock_announce+0x28>
    2a12:	bf00      	nop
    2a14:	200007f4 	.word	0x200007f4
    2a18:	20000158 	.word	0x20000158
    2a1c:	2000004c 	.word	0x2000004c

00002a20 <z_tick_get>:

s64_t z_tick_get(void)
{
    2a20:	b510      	push	{r4, lr}
    2a22:	f04f 0320 	mov.w	r3, #32
    2a26:	f3ef 8411 	mrs	r4, BASEPRI
    2a2a:	f383 8811 	msr	BASEPRI, r3
    2a2e:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    2a32:	f7fe f861 	bl	af8 <z_clock_elapsed>
    2a36:	4b06      	ldr	r3, [pc, #24]	; (2a50 <z_tick_get+0x30>)
    2a38:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a3c:	1812      	adds	r2, r2, r0
    2a3e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    2a42:	f384 8811 	msr	BASEPRI, r4
    2a46:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    2a4a:	4610      	mov	r0, r2
    2a4c:	4619      	mov	r1, r3
    2a4e:	bd10      	pop	{r4, pc}
    2a50:	20000158 	.word	0x20000158

00002a54 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    2a54:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    2a56:	4c06      	ldr	r4, [pc, #24]	; (2a70 <statics_init+0x1c>)
    2a58:	4d06      	ldr	r5, [pc, #24]	; (2a74 <statics_init+0x20>)
    2a5a:	42ac      	cmp	r4, r5
    2a5c:	d301      	bcc.n	2a62 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    2a5e:	2000      	movs	r0, #0
    2a60:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    2a62:	4620      	mov	r0, r4
    2a64:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    2a68:	f000 fddb 	bl	3622 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    2a6c:	3414      	adds	r4, #20
    2a6e:	e7f4      	b.n	2a5a <statics_init+0x6>
    2a70:	200000f4 	.word	0x200000f4
    2a74:	200000f4 	.word	0x200000f4

00002a78 <nrf_cc310_platform_init_no_rng>:
    2a78:	b510      	push	{r4, lr}
    2a7a:	4c09      	ldr	r4, [pc, #36]	; (2aa0 <nrf_cc310_platform_init_no_rng+0x28>)
    2a7c:	6823      	ldr	r3, [r4, #0]
    2a7e:	b11b      	cbz	r3, 2a88 <nrf_cc310_platform_init_no_rng+0x10>
    2a80:	2301      	movs	r3, #1
    2a82:	2000      	movs	r0, #0
    2a84:	6023      	str	r3, [r4, #0]
    2a86:	bd10      	pop	{r4, pc}
    2a88:	f000 f87c 	bl	2b84 <CC_LibInitNoRng>
    2a8c:	2800      	cmp	r0, #0
    2a8e:	d0f7      	beq.n	2a80 <nrf_cc310_platform_init_no_rng+0x8>
    2a90:	3801      	subs	r0, #1
    2a92:	2806      	cmp	r0, #6
    2a94:	bf96      	itet	ls
    2a96:	4b03      	ldrls	r3, [pc, #12]	; (2aa4 <nrf_cc310_platform_init_no_rng+0x2c>)
    2a98:	4803      	ldrhi	r0, [pc, #12]	; (2aa8 <nrf_cc310_platform_init_no_rng+0x30>)
    2a9a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    2a9e:	bd10      	pop	{r4, pc}
    2aa0:	200007f8 	.word	0x200007f8
    2aa4:	000039a4 	.word	0x000039a4
    2aa8:	ffff8ffe 	.word	0xffff8ffe

00002aac <nrf_cc310_platform_abort>:
    2aac:	f3bf 8f4f 	dsb	sy
    2ab0:	4905      	ldr	r1, [pc, #20]	; (2ac8 <nrf_cc310_platform_abort+0x1c>)
    2ab2:	4b06      	ldr	r3, [pc, #24]	; (2acc <nrf_cc310_platform_abort+0x20>)
    2ab4:	68ca      	ldr	r2, [r1, #12]
    2ab6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2aba:	4313      	orrs	r3, r2
    2abc:	60cb      	str	r3, [r1, #12]
    2abe:	f3bf 8f4f 	dsb	sy
    2ac2:	bf00      	nop
    2ac4:	e7fd      	b.n	2ac2 <nrf_cc310_platform_abort+0x16>
    2ac6:	bf00      	nop
    2ac8:	e000ed00 	.word	0xe000ed00
    2acc:	05fa0004 	.word	0x05fa0004

00002ad0 <CC_PalAbort>:
    2ad0:	4b01      	ldr	r3, [pc, #4]	; (2ad8 <CC_PalAbort+0x8>)
    2ad2:	685b      	ldr	r3, [r3, #4]
    2ad4:	4718      	bx	r3
    2ad6:	bf00      	nop
    2ad8:	20000054 	.word	0x20000054

00002adc <nrf_cc310_platform_set_abort>:
    2adc:	4b02      	ldr	r3, [pc, #8]	; (2ae8 <nrf_cc310_platform_set_abort+0xc>)
    2ade:	e9d0 1200 	ldrd	r1, r2, [r0]
    2ae2:	e9c3 1200 	strd	r1, r2, [r3]
    2ae6:	4770      	bx	lr
    2ae8:	20000054 	.word	0x20000054

00002aec <mutex_free>:
    2aec:	4770      	bx	lr
    2aee:	bf00      	nop

00002af0 <mutex_unlock>:
    2af0:	b510      	push	{r4, lr}
    2af2:	4604      	mov	r4, r0
    2af4:	b120      	cbz	r0, 2b00 <mutex_unlock+0x10>
    2af6:	f3bf 8f5f 	dmb	sy
    2afa:	2000      	movs	r0, #0
    2afc:	6020      	str	r0, [r4, #0]
    2afe:	bd10      	pop	{r4, pc}
    2b00:	4803      	ldr	r0, [pc, #12]	; (2b10 <mutex_unlock+0x20>)
    2b02:	f7ff ffe5 	bl	2ad0 <CC_PalAbort>
    2b06:	f3bf 8f5f 	dmb	sy
    2b0a:	2000      	movs	r0, #0
    2b0c:	6020      	str	r0, [r4, #0]
    2b0e:	bd10      	pop	{r4, pc}
    2b10:	000039e4 	.word	0x000039e4

00002b14 <mutex_init>:
    2b14:	b510      	push	{r4, lr}
    2b16:	4604      	mov	r4, r0
    2b18:	b110      	cbz	r0, 2b20 <mutex_init+0xc>
    2b1a:	2300      	movs	r3, #0
    2b1c:	6023      	str	r3, [r4, #0]
    2b1e:	bd10      	pop	{r4, pc}
    2b20:	4802      	ldr	r0, [pc, #8]	; (2b2c <mutex_init+0x18>)
    2b22:	f7ff ffd5 	bl	2ad0 <CC_PalAbort>
    2b26:	2300      	movs	r3, #0
    2b28:	6023      	str	r3, [r4, #0]
    2b2a:	bd10      	pop	{r4, pc}
    2b2c:	000039c0 	.word	0x000039c0

00002b30 <mutex_lock>:
    2b30:	b150      	cbz	r0, 2b48 <mutex_lock+0x18>
    2b32:	2201      	movs	r2, #1
    2b34:	e8d0 3fef 	ldaex	r3, [r0]
    2b38:	e8c0 2fe1 	stlex	r1, r2, [r0]
    2b3c:	2900      	cmp	r1, #0
    2b3e:	d1f9      	bne.n	2b34 <mutex_lock+0x4>
    2b40:	2b01      	cmp	r3, #1
    2b42:	d0f7      	beq.n	2b34 <mutex_lock+0x4>
    2b44:	f3bf 8f5f 	dmb	sy
    2b48:	2000      	movs	r0, #0
    2b4a:	4770      	bx	lr

00002b4c <nrf_cc310_platform_set_mutexes>:
    2b4c:	b470      	push	{r4, r5, r6}
    2b4e:	4b0b      	ldr	r3, [pc, #44]	; (2b7c <nrf_cc310_platform_set_mutexes+0x30>)
    2b50:	6806      	ldr	r6, [r0, #0]
    2b52:	68c2      	ldr	r2, [r0, #12]
    2b54:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    2b58:	e9c3 4202 	strd	r4, r2, [r3, #8]
    2b5c:	e9c3 6500 	strd	r6, r5, [r3]
    2b60:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    2b64:	680e      	ldr	r6, [r1, #0]
    2b66:	4b06      	ldr	r3, [pc, #24]	; (2b80 <nrf_cc310_platform_set_mutexes+0x34>)
    2b68:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    2b6c:	e9c3 6500 	strd	r6, r5, [r3]
    2b70:	e9c3 4002 	strd	r4, r0, [r3, #8]
    2b74:	611a      	str	r2, [r3, #16]
    2b76:	bc70      	pop	{r4, r5, r6}
    2b78:	4770      	bx	lr
    2b7a:	bf00      	nop
    2b7c:	2000005c 	.word	0x2000005c
    2b80:	2000006c 	.word	0x2000006c

00002b84 <CC_LibInitNoRng>:
    2b84:	b510      	push	{r4, lr}
    2b86:	f000 f833 	bl	2bf0 <CC_HalInit>
    2b8a:	b970      	cbnz	r0, 2baa <CC_LibInitNoRng+0x26>
    2b8c:	f000 f83a 	bl	2c04 <CC_PalInit>
    2b90:	b980      	cbnz	r0, 2bb4 <CC_LibInitNoRng+0x30>
    2b92:	f000 f8b5 	bl	2d00 <CC_PalPowerSaveModeSelect>
    2b96:	b980      	cbnz	r0, 2bba <CC_LibInitNoRng+0x36>
    2b98:	4b11      	ldr	r3, [pc, #68]	; (2be0 <CC_LibInitNoRng+0x5c>)
    2b9a:	681b      	ldr	r3, [r3, #0]
    2b9c:	0e1b      	lsrs	r3, r3, #24
    2b9e:	2bf0      	cmp	r3, #240	; 0xf0
    2ba0:	d00d      	beq.n	2bbe <CC_LibInitNoRng+0x3a>
    2ba2:	2406      	movs	r4, #6
    2ba4:	f000 f826 	bl	2bf4 <CC_HalTerminate>
    2ba8:	e000      	b.n	2bac <CC_LibInitNoRng+0x28>
    2baa:	2403      	movs	r4, #3
    2bac:	f000 f858 	bl	2c60 <CC_PalTerminate>
    2bb0:	4620      	mov	r0, r4
    2bb2:	bd10      	pop	{r4, pc}
    2bb4:	2404      	movs	r4, #4
    2bb6:	4620      	mov	r0, r4
    2bb8:	bd10      	pop	{r4, pc}
    2bba:	2400      	movs	r4, #0
    2bbc:	e7f2      	b.n	2ba4 <CC_LibInitNoRng+0x20>
    2bbe:	4a09      	ldr	r2, [pc, #36]	; (2be4 <CC_LibInitNoRng+0x60>)
    2bc0:	4b09      	ldr	r3, [pc, #36]	; (2be8 <CC_LibInitNoRng+0x64>)
    2bc2:	6812      	ldr	r2, [r2, #0]
    2bc4:	429a      	cmp	r2, r3
    2bc6:	d001      	beq.n	2bcc <CC_LibInitNoRng+0x48>
    2bc8:	2407      	movs	r4, #7
    2bca:	e7eb      	b.n	2ba4 <CC_LibInitNoRng+0x20>
    2bcc:	2001      	movs	r0, #1
    2bce:	f000 f897 	bl	2d00 <CC_PalPowerSaveModeSelect>
    2bd2:	2800      	cmp	r0, #0
    2bd4:	d1f1      	bne.n	2bba <CC_LibInitNoRng+0x36>
    2bd6:	4b05      	ldr	r3, [pc, #20]	; (2bec <CC_LibInitNoRng+0x68>)
    2bd8:	4604      	mov	r4, r0
    2bda:	6018      	str	r0, [r3, #0]
    2bdc:	e7e8      	b.n	2bb0 <CC_LibInitNoRng+0x2c>
    2bde:	bf00      	nop
    2be0:	50841928 	.word	0x50841928
    2be4:	50841a24 	.word	0x50841a24
    2be8:	20e00000 	.word	0x20e00000
    2bec:	50841a0c 	.word	0x50841a0c

00002bf0 <CC_HalInit>:
    2bf0:	2000      	movs	r0, #0
    2bf2:	4770      	bx	lr

00002bf4 <CC_HalTerminate>:
    2bf4:	2000      	movs	r0, #0
    2bf6:	4770      	bx	lr

00002bf8 <CC_HalMaskInterrupt>:
    2bf8:	4b01      	ldr	r3, [pc, #4]	; (2c00 <CC_HalMaskInterrupt+0x8>)
    2bfa:	6018      	str	r0, [r3, #0]
    2bfc:	4770      	bx	lr
    2bfe:	bf00      	nop
    2c00:	50841a04 	.word	0x50841a04

00002c04 <CC_PalInit>:
    2c04:	b510      	push	{r4, lr}
    2c06:	4811      	ldr	r0, [pc, #68]	; (2c4c <CC_PalInit+0x48>)
    2c08:	f000 f848 	bl	2c9c <CC_PalMutexCreate>
    2c0c:	b100      	cbz	r0, 2c10 <CC_PalInit+0xc>
    2c0e:	bd10      	pop	{r4, pc}
    2c10:	480f      	ldr	r0, [pc, #60]	; (2c50 <CC_PalInit+0x4c>)
    2c12:	f000 f843 	bl	2c9c <CC_PalMutexCreate>
    2c16:	2800      	cmp	r0, #0
    2c18:	d1f9      	bne.n	2c0e <CC_PalInit+0xa>
    2c1a:	4c0e      	ldr	r4, [pc, #56]	; (2c54 <CC_PalInit+0x50>)
    2c1c:	4620      	mov	r0, r4
    2c1e:	f000 f83d 	bl	2c9c <CC_PalMutexCreate>
    2c22:	2800      	cmp	r0, #0
    2c24:	d1f3      	bne.n	2c0e <CC_PalInit+0xa>
    2c26:	4b0c      	ldr	r3, [pc, #48]	; (2c58 <CC_PalInit+0x54>)
    2c28:	480c      	ldr	r0, [pc, #48]	; (2c5c <CC_PalInit+0x58>)
    2c2a:	601c      	str	r4, [r3, #0]
    2c2c:	f000 f836 	bl	2c9c <CC_PalMutexCreate>
    2c30:	4601      	mov	r1, r0
    2c32:	2800      	cmp	r0, #0
    2c34:	d1eb      	bne.n	2c0e <CC_PalInit+0xa>
    2c36:	f000 f82d 	bl	2c94 <CC_PalDmaInit>
    2c3a:	4604      	mov	r4, r0
    2c3c:	b108      	cbz	r0, 2c42 <CC_PalInit+0x3e>
    2c3e:	4620      	mov	r0, r4
    2c40:	bd10      	pop	{r4, pc}
    2c42:	f000 f83f 	bl	2cc4 <CC_PalPowerSaveModeInit>
    2c46:	4620      	mov	r0, r4
    2c48:	e7fa      	b.n	2c40 <CC_PalInit+0x3c>
    2c4a:	bf00      	nop
    2c4c:	2000008c 	.word	0x2000008c
    2c50:	20000080 	.word	0x20000080
    2c54:	20000088 	.word	0x20000088
    2c58:	20000090 	.word	0x20000090
    2c5c:	20000084 	.word	0x20000084

00002c60 <CC_PalTerminate>:
    2c60:	b508      	push	{r3, lr}
    2c62:	4808      	ldr	r0, [pc, #32]	; (2c84 <CC_PalTerminate+0x24>)
    2c64:	f000 f824 	bl	2cb0 <CC_PalMutexDestroy>
    2c68:	4807      	ldr	r0, [pc, #28]	; (2c88 <CC_PalTerminate+0x28>)
    2c6a:	f000 f821 	bl	2cb0 <CC_PalMutexDestroy>
    2c6e:	4807      	ldr	r0, [pc, #28]	; (2c8c <CC_PalTerminate+0x2c>)
    2c70:	f000 f81e 	bl	2cb0 <CC_PalMutexDestroy>
    2c74:	4806      	ldr	r0, [pc, #24]	; (2c90 <CC_PalTerminate+0x30>)
    2c76:	f000 f81b 	bl	2cb0 <CC_PalMutexDestroy>
    2c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2c7e:	f000 b80b 	b.w	2c98 <CC_PalDmaTerminate>
    2c82:	bf00      	nop
    2c84:	2000008c 	.word	0x2000008c
    2c88:	20000080 	.word	0x20000080
    2c8c:	20000088 	.word	0x20000088
    2c90:	20000084 	.word	0x20000084

00002c94 <CC_PalDmaInit>:
    2c94:	2000      	movs	r0, #0
    2c96:	4770      	bx	lr

00002c98 <CC_PalDmaTerminate>:
    2c98:	4770      	bx	lr
    2c9a:	bf00      	nop

00002c9c <CC_PalMutexCreate>:
    2c9c:	b508      	push	{r3, lr}
    2c9e:	4b03      	ldr	r3, [pc, #12]	; (2cac <CC_PalMutexCreate+0x10>)
    2ca0:	6802      	ldr	r2, [r0, #0]
    2ca2:	681b      	ldr	r3, [r3, #0]
    2ca4:	6810      	ldr	r0, [r2, #0]
    2ca6:	4798      	blx	r3
    2ca8:	2000      	movs	r0, #0
    2caa:	bd08      	pop	{r3, pc}
    2cac:	2000005c 	.word	0x2000005c

00002cb0 <CC_PalMutexDestroy>:
    2cb0:	b508      	push	{r3, lr}
    2cb2:	4b03      	ldr	r3, [pc, #12]	; (2cc0 <CC_PalMutexDestroy+0x10>)
    2cb4:	6802      	ldr	r2, [r0, #0]
    2cb6:	685b      	ldr	r3, [r3, #4]
    2cb8:	6810      	ldr	r0, [r2, #0]
    2cba:	4798      	blx	r3
    2cbc:	2000      	movs	r0, #0
    2cbe:	bd08      	pop	{r3, pc}
    2cc0:	2000005c 	.word	0x2000005c

00002cc4 <CC_PalPowerSaveModeInit>:
    2cc4:	b570      	push	{r4, r5, r6, lr}
    2cc6:	4c09      	ldr	r4, [pc, #36]	; (2cec <CC_PalPowerSaveModeInit+0x28>)
    2cc8:	4d09      	ldr	r5, [pc, #36]	; (2cf0 <CC_PalPowerSaveModeInit+0x2c>)
    2cca:	6920      	ldr	r0, [r4, #16]
    2ccc:	68ab      	ldr	r3, [r5, #8]
    2cce:	4798      	blx	r3
    2cd0:	b118      	cbz	r0, 2cda <CC_PalPowerSaveModeInit+0x16>
    2cd2:	4b08      	ldr	r3, [pc, #32]	; (2cf4 <CC_PalPowerSaveModeInit+0x30>)
    2cd4:	4808      	ldr	r0, [pc, #32]	; (2cf8 <CC_PalPowerSaveModeInit+0x34>)
    2cd6:	685b      	ldr	r3, [r3, #4]
    2cd8:	4798      	blx	r3
    2cda:	2100      	movs	r1, #0
    2cdc:	4a07      	ldr	r2, [pc, #28]	; (2cfc <CC_PalPowerSaveModeInit+0x38>)
    2cde:	68eb      	ldr	r3, [r5, #12]
    2ce0:	6011      	str	r1, [r2, #0]
    2ce2:	6920      	ldr	r0, [r4, #16]
    2ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2ce8:	4718      	bx	r3
    2cea:	bf00      	nop
    2cec:	2000006c 	.word	0x2000006c
    2cf0:	2000005c 	.word	0x2000005c
    2cf4:	20000054 	.word	0x20000054
    2cf8:	00003a04 	.word	0x00003a04
    2cfc:	2000080c 	.word	0x2000080c

00002d00 <CC_PalPowerSaveModeSelect>:
    2d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d02:	4c1a      	ldr	r4, [pc, #104]	; (2d6c <CC_PalPowerSaveModeSelect+0x6c>)
    2d04:	4d1a      	ldr	r5, [pc, #104]	; (2d70 <CC_PalPowerSaveModeSelect+0x70>)
    2d06:	4607      	mov	r7, r0
    2d08:	68ab      	ldr	r3, [r5, #8]
    2d0a:	6920      	ldr	r0, [r4, #16]
    2d0c:	4798      	blx	r3
    2d0e:	b9e8      	cbnz	r0, 2d4c <CC_PalPowerSaveModeSelect+0x4c>
    2d10:	4e18      	ldr	r6, [pc, #96]	; (2d74 <CC_PalPowerSaveModeSelect+0x74>)
    2d12:	6833      	ldr	r3, [r6, #0]
    2d14:	b97f      	cbnz	r7, 2d36 <CC_PalPowerSaveModeSelect+0x36>
    2d16:	b93b      	cbnz	r3, 2d28 <CC_PalPowerSaveModeSelect+0x28>
    2d18:	2001      	movs	r0, #1
    2d1a:	4a17      	ldr	r2, [pc, #92]	; (2d78 <CC_PalPowerSaveModeSelect+0x78>)
    2d1c:	4917      	ldr	r1, [pc, #92]	; (2d7c <CC_PalPowerSaveModeSelect+0x7c>)
    2d1e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    2d22:	680a      	ldr	r2, [r1, #0]
    2d24:	2a00      	cmp	r2, #0
    2d26:	d1fc      	bne.n	2d22 <CC_PalPowerSaveModeSelect+0x22>
    2d28:	3301      	adds	r3, #1
    2d2a:	6033      	str	r3, [r6, #0]
    2d2c:	68eb      	ldr	r3, [r5, #12]
    2d2e:	6920      	ldr	r0, [r4, #16]
    2d30:	4798      	blx	r3
    2d32:	2000      	movs	r0, #0
    2d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d36:	2b00      	cmp	r3, #0
    2d38:	d0f8      	beq.n	2d2c <CC_PalPowerSaveModeSelect+0x2c>
    2d3a:	2b01      	cmp	r3, #1
    2d3c:	d008      	beq.n	2d50 <CC_PalPowerSaveModeSelect+0x50>
    2d3e:	3b01      	subs	r3, #1
    2d40:	6033      	str	r3, [r6, #0]
    2d42:	6920      	ldr	r0, [r4, #16]
    2d44:	68eb      	ldr	r3, [r5, #12]
    2d46:	4798      	blx	r3
    2d48:	2000      	movs	r0, #0
    2d4a:	e7f3      	b.n	2d34 <CC_PalPowerSaveModeSelect+0x34>
    2d4c:	480c      	ldr	r0, [pc, #48]	; (2d80 <CC_PalPowerSaveModeSelect+0x80>)
    2d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d50:	4a0a      	ldr	r2, [pc, #40]	; (2d7c <CC_PalPowerSaveModeSelect+0x7c>)
    2d52:	6813      	ldr	r3, [r2, #0]
    2d54:	2b00      	cmp	r3, #0
    2d56:	d1fc      	bne.n	2d52 <CC_PalPowerSaveModeSelect+0x52>
    2d58:	4a07      	ldr	r2, [pc, #28]	; (2d78 <CC_PalPowerSaveModeSelect+0x78>)
    2d5a:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    2d5e:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    2d62:	f7ff ff49 	bl	2bf8 <CC_HalMaskInterrupt>
    2d66:	6833      	ldr	r3, [r6, #0]
    2d68:	e7e9      	b.n	2d3e <CC_PalPowerSaveModeSelect+0x3e>
    2d6a:	bf00      	nop
    2d6c:	2000006c 	.word	0x2000006c
    2d70:	2000005c 	.word	0x2000005c
    2d74:	2000080c 	.word	0x2000080c
    2d78:	50840000 	.word	0x50840000
    2d7c:	50841910 	.word	0x50841910
    2d80:	ffff8fe9 	.word	0xffff8fe9

00002d84 <arch_printk_char_out>:
}
    2d84:	2000      	movs	r0, #0
    2d86:	4770      	bx	lr

00002d88 <print_err>:
{
    2d88:	b570      	push	{r4, r5, r6, lr}
    2d8a:	460d      	mov	r5, r1
    2d8c:	4604      	mov	r4, r0
	out('E', ctx);
    2d8e:	2045      	movs	r0, #69	; 0x45
    2d90:	47a0      	blx	r4
	out('R', ctx);
    2d92:	4629      	mov	r1, r5
    2d94:	2052      	movs	r0, #82	; 0x52
    2d96:	47a0      	blx	r4
	out('R', ctx);
    2d98:	4629      	mov	r1, r5
    2d9a:	4623      	mov	r3, r4
}
    2d9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    2da0:	2052      	movs	r0, #82	; 0x52
    2da2:	4718      	bx	r3

00002da4 <printk>:
{
    2da4:	b40f      	push	{r0, r1, r2, r3}
    2da6:	b507      	push	{r0, r1, r2, lr}
    2da8:	a904      	add	r1, sp, #16
    2daa:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    2dae:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    2db0:	f7fd fd3c 	bl	82c <vprintk>
}
    2db4:	b003      	add	sp, #12
    2db6:	f85d eb04 	ldr.w	lr, [sp], #4
    2dba:	b004      	add	sp, #16
    2dbc:	4770      	bx	lr

00002dbe <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    2dbe:	4604      	mov	r4, r0
    2dc0:	b508      	push	{r3, lr}
    2dc2:	4608      	mov	r0, r1
    2dc4:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    2dc6:	461a      	mov	r2, r3
    2dc8:	47a0      	blx	r4
	return z_impl_k_current_get();
    2dca:	f7ff fc93 	bl	26f4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    2dce:	f7fe f961 	bl	1094 <z_impl_k_thread_abort>

00002dd2 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
    2dd2:	6803      	ldr	r3, [r0, #0]
    2dd4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
    2dd8:	6883      	ldr	r3, [r0, #8]
    2dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
    2dde:	bf2c      	ite	cs
    2de0:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
    2de4:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    2de8:	4770      	bx	lr

00002dea <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
    2dea:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
    2dec:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
    2dee:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
    2df0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
    2df4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
    2df8:	bf2c      	ite	cs
    2dfa:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
    2dfe:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    2e02:	bd10      	pop	{r4, pc}

00002e04 <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    2e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e08:	4604      	mov	r4, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
}

static ALWAYS_INLINE chunkid_t size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    2e0a:	2200      	movs	r2, #0
    2e0c:	460d      	mov	r5, r1
    2e0e:	f7ff ffe0 	bl	2dd2 <chunk_field>
    2e12:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    2e14:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    2e16:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    2e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    2e1c:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    2e20:	bf34      	ite	cc
    2e22:	2000      	movcc	r0, #0
    2e24:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
    2e26:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    2e28:	f1c0 001f 	rsb	r0, r0, #31
    2e2c:	1a80      	subs	r0, r0, r2
    2e2e:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    2e32:	684a      	ldr	r2, [r1, #4]
    2e34:	1c56      	adds	r6, r2, #1
    2e36:	604e      	str	r6, [r1, #4]
    2e38:	b9a2      	cbnz	r2, 2e64 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
    2e3a:	2201      	movs	r2, #1
    2e3c:	fa02 f100 	lsl.w	r1, r2, r0
    2e40:	6962      	ldr	r2, [r4, #20]
    2e42:	430a      	orrs	r2, r1
    2e44:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
    2e46:	4629      	mov	r1, r5
		h->buckets[b].next = c;
    2e48:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
    2e4c:	2202      	movs	r2, #2
    2e4e:	462b      	mov	r3, r5
    2e50:	4620      	mov	r0, r4
    2e52:	f7ff ffca 	bl	2dea <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
    2e56:	2203      	movs	r2, #3
    2e58:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
    2e5a:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
    2e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
    2e60:	f7ff bfc3 	b.w	2dea <chunk_set>
		chunkid_t second = h->buckets[b].next;
    2e64:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
    2e68:	2202      	movs	r2, #2
    2e6a:	4639      	mov	r1, r7
    2e6c:	4620      	mov	r0, r4
    2e6e:	f7ff ffb0 	bl	2dd2 <chunk_field>
    2e72:	4606      	mov	r6, r0
		chunk_set(h, c, FREE_PREV, first);
    2e74:	4603      	mov	r3, r0
    2e76:	2202      	movs	r2, #2
    2e78:	4629      	mov	r1, r5
    2e7a:	4620      	mov	r0, r4
    2e7c:	f7ff ffb5 	bl	2dea <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
    2e80:	463b      	mov	r3, r7
    2e82:	2203      	movs	r2, #3
    2e84:	4629      	mov	r1, r5
    2e86:	4620      	mov	r0, r4
    2e88:	f7ff ffaf 	bl	2dea <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
    2e8c:	2203      	movs	r2, #3
    2e8e:	4631      	mov	r1, r6
    2e90:	462b      	mov	r3, r5
    2e92:	4620      	mov	r0, r4
    2e94:	f7ff ffa9 	bl	2dea <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
    2e98:	2202      	movs	r2, #2
    2e9a:	4639      	mov	r1, r7
    2e9c:	e7dd      	b.n	2e5a <free_list_add+0x56>

00002e9e <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    2e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    2ea0:	188b      	adds	r3, r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    2ea2:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
    2ea6:	1dcc      	adds	r4, r1, #7
    2ea8:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    2eac:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    2eb0:	1b1b      	subs	r3, r3, r4
    2eb2:	08db      	lsrs	r3, r3, #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    2eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    2eb8:	bf2c      	ite	cs
    2eba:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
    2ebe:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
    2ec0:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
    2ec2:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    2ec4:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    2ec6:	60e1      	str	r1, [r4, #12]
    2ec8:	bf94      	ite	ls
    2eca:	2100      	movls	r1, #0
    2ecc:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    2ece:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    2ed2:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
    2ed4:	4684      	mov	ip, r0
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
    2ed6:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
    2eda:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
    2ede:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    2ee0:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
    2ee4:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    2ee8:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
    2eea:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
    2eec:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    2eee:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    2ef0:	68a2      	ldr	r2, [r4, #8]
    2ef2:	42ba      	cmp	r2, r7
    2ef4:	bf94      	ite	ls
    2ef6:	2200      	movls	r2, #0
    2ef8:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    2efa:	f1c2 021f 	rsb	r2, r2, #31
    2efe:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    2f00:	4290      	cmp	r0, r2
    2f02:	dd0a      	ble.n	2f1a <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
    2f04:	4620      	mov	r0, r4
    2f06:	1a5b      	subs	r3, r3, r1
    2f08:	2200      	movs	r2, #0
    2f0a:	f7ff ff6e 	bl	2dea <chunk_set>
	free_list_add(h, h->chunk0);
    2f0e:	4620      	mov	r0, r4
    2f10:	6921      	ldr	r1, [r4, #16]
}
    2f12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
    2f16:	f7ff bf75 	b.w	2e04 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
    2f1a:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    2f1e:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
    2f20:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    2f24:	e7e4      	b.n	2ef0 <sys_heap_init+0x52>

00002f26 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    2f26:	4770      	bx	lr

00002f28 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    2f28:	f7fe bd9c 	b.w	1a64 <SystemInit>

00002f2c <get_status>:
	if (data->started) {
    2f2c:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
    2f2e:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
    2f30:	b2c9      	uxtb	r1, r1
	if (data->started) {
    2f32:	fb02 3101 	mla	r1, r2, r1, r3
    2f36:	7a4b      	ldrb	r3, [r1, #9]
    2f38:	b923      	cbnz	r3, 2f44 <get_status+0x18>
	if (data->ref > 0) {
    2f3a:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    2f3c:	fab0 f080 	clz	r0, r0
    2f40:	0940      	lsrs	r0, r0, #5
    2f42:	4770      	bx	lr
    2f44:	2002      	movs	r0, #2
}
    2f46:	4770      	bx	lr

00002f48 <clock_stop>:
{
    2f48:	b570      	push	{r4, r5, r6, lr}
    2f4a:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
    2f4c:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
    2f4e:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
    2f50:	f04f 0320 	mov.w	r3, #32
    2f54:	f3ef 8611 	mrs	r6, BASEPRI
    2f58:	f383 8811 	msr	BASEPRI, r3
    2f5c:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    2f60:	220c      	movs	r2, #12
    2f62:	434a      	muls	r2, r1
    2f64:	18ab      	adds	r3, r5, r2
    2f66:	7a18      	ldrb	r0, [r3, #8]
    2f68:	b190      	cbz	r0, 2f90 <clock_stop+0x48>
	data->ref--;
    2f6a:	3801      	subs	r0, #1
    2f6c:	b2c0      	uxtb	r0, r0
    2f6e:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
    2f70:	b988      	cbnz	r0, 2f96 <clock_stop+0x4e>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    2f72:	eb04 0181 	add.w	r1, r4, r1, lsl #2
	list->head = NULL;
    2f76:	50a8      	str	r0, [r5, r2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f78:	78ca      	ldrb	r2, [r1, #3]
    2f7a:	2101      	movs	r1, #1
    2f7c:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
	list->tail = NULL;
    2f80:	6058      	str	r0, [r3, #4]
    2f82:	6011      	str	r1, [r2, #0]
		data->started = false;
    2f84:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
    2f86:	f386 8811 	msr	BASEPRI, r6
    2f8a:	f3bf 8f6f 	isb	sy
}
    2f8e:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
    2f90:	f06f 0044 	mvn.w	r0, #68	; 0x44
    2f94:	e7f7      	b.n	2f86 <clock_stop+0x3e>
	int err = 0;
    2f96:	2000      	movs	r0, #0
    2f98:	e7f5      	b.n	2f86 <clock_stop+0x3e>

00002f9a <clock_async_start>:
{
    2f9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	config = get_sub_config(dev, type);
    2f9e:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
    2fa0:	f8d0 e00c 	ldr.w	lr, [r0, #12]
    2fa4:	b2cf      	uxtb	r7, r1
	if ((data != NULL)
    2fa6:	b14a      	cbz	r2, 2fbc <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
    2fa8:	230c      	movs	r3, #12
    2faa:	437b      	muls	r3, r7
    2fac:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
    2fb0:	429a      	cmp	r2, r3
    2fb2:	d052      	beq.n	305a <clock_async_start+0xc0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    2fb4:	b113      	cbz	r3, 2fbc <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2fb6:	681b      	ldr	r3, [r3, #0]
	} while (item);
    2fb8:	2b00      	cmp	r3, #0
    2fba:	d1f9      	bne.n	2fb0 <clock_async_start+0x16>
	__asm__ volatile(
    2fbc:	f04f 0320 	mov.w	r3, #32
    2fc0:	f3ef 8c11 	mrs	ip, BASEPRI
    2fc4:	f383 8811 	msr	BASEPRI, r3
    2fc8:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    2fcc:	250c      	movs	r5, #12
    2fce:	437d      	muls	r5, r7
    2fd0:	eb0e 0305 	add.w	r3, lr, r5
    2fd4:	7a1c      	ldrb	r4, [r3, #8]
    2fd6:	3401      	adds	r4, #1
    2fd8:	b2e4      	uxtb	r4, r4
    2fda:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    2fdc:	f38c 8811 	msr	BASEPRI, ip
    2fe0:	f3bf 8f6f 	isb	sy
	if (data) {
    2fe4:	b35a      	cbz	r2, 303e <clock_async_start+0xa4>
    p_reg->INTENCLR = mask;
    2fe6:	f04f 2c50 	mov.w	ip, #1342197760	; 0x50005000
    2fea:	f04f 0803 	mov.w	r8, #3
    2fee:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		already_started = clk_data->started;
    2ff2:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
    2ff6:	f1bc 0f00 	cmp.w	ip, #0
    2ffa:	d115      	bne.n	3028 <clock_async_start+0x8e>
	__asm__ volatile(
    2ffc:	f04f 0820 	mov.w	r8, #32
    3000:	f3ef 8911 	mrs	r9, BASEPRI
    3004:	f388 8811 	msr	BASEPRI, r8
    3008:	f3bf 8f6f 	isb	sy
	parent->next = child;
    300c:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_APPEND(slist, snode)
    3010:	f8d3 8004 	ldr.w	r8, [r3, #4]
    3014:	f1b8 0f00 	cmp.w	r8, #0
    3018:	d11b      	bne.n	3052 <clock_async_start+0xb8>
	list->tail = node;
    301a:	605a      	str	r2, [r3, #4]
	list->head = node;
    301c:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
    3020:	f389 8811 	msr	BASEPRI, r9
    3024:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    3028:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    302c:	2503      	movs	r5, #3
    302e:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		if (already_started) {
    3032:	f1bc 0f00 	cmp.w	ip, #0
    3036:	d002      	beq.n	303e <clock_async_start+0xa4>
			data->cb(dev, subsys, data->user_data);
    3038:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
    303c:	4798      	blx	r3
	if (ref == 1) {
    303e:	2c01      	cmp	r4, #1
    3040:	d105      	bne.n	304e <clock_async_start+0xb4>
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    3042:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3046:	78b3      	ldrb	r3, [r6, #2]
    3048:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    304c:	601c      	str	r4, [r3, #0]
	return 0;
    304e:	2000      	movs	r0, #0
    3050:	e005      	b.n	305e <clock_async_start+0xc4>
	parent->next = child;
    3052:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
    3056:	605a      	str	r2, [r3, #4]
}
    3058:	e7e2      	b.n	3020 <clock_async_start+0x86>
		return -EBUSY;
    305a:	f06f 000f 	mvn.w	r0, #15
}
    305e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003062 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    3062:	2200      	movs	r2, #0
    3064:	f7ff bf99 	b.w	2f9a <clock_async_start>

00003068 <clk_init>:
{
    3068:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    306a:	2200      	movs	r2, #0
{
    306c:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    306e:	2101      	movs	r1, #1
    3070:	2005      	movs	r0, #5
    3072:	f7fd fe53 	bl	d1c <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
    3076:	2005      	movs	r0, #5
    3078:	f7fd fe40 	bl	cfc <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    307c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3080:	2202      	movs	r2, #2
    3082:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    3086:	2203      	movs	r2, #3
	list->head = NULL;
    3088:	2000      	movs	r0, #0
    308a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
    308e:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
    3090:	e9c3 0000 	strd	r0, r0, [r3]
    3094:	68e3      	ldr	r3, [r4, #12]
    3096:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
    309a:	bd10      	pop	{r4, pc}

0000309c <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    309c:	4770      	bx	lr

0000309e <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    309e:	4770      	bx	lr

000030a0 <abort_function>:
	while(1);
    30a0:	e7fe      	b.n	30a0 <abort_function>

000030a2 <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    30a2:	2100      	movs	r1, #0
    30a4:	2001      	movs	r0, #1
    30a6:	f000 b800 	b.w	30aa <z_arm_fatal_error>

000030aa <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    30aa:	f000 b961 	b.w	3370 <z_fatal_error>

000030ae <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    30ae:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    30b0:	6800      	ldr	r0, [r0, #0]
    30b2:	f000 b95d 	b.w	3370 <z_fatal_error>

000030b6 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    30b6:	b508      	push	{r3, lr}
	handler();
    30b8:	f7fd fe90 	bl	ddc <z_SysNmiOnReset>
	z_arm_int_exit();
}
    30bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    30c0:	f7fd bfbc 	b.w	103c <z_arm_exc_exit>

000030c4 <mpu_configure_region>:
{
    30c4:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    30c6:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    30c8:	680c      	ldr	r4, [r1, #0]
{
    30ca:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
    30cc:	890a      	ldrh	r2, [r1, #8]
    30ce:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    30d0:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    30d2:	3b01      	subs	r3, #1
    30d4:	f024 041f 	bic.w	r4, r4, #31
    30d8:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    30da:	f002 021f 	and.w	r2, r2, #31
    30de:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    30e2:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    30e6:	280f      	cmp	r0, #15
    30e8:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    30ea:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    30ee:	9303      	str	r3, [sp, #12]
    30f0:	d805      	bhi.n	30fe <mpu_configure_region+0x3a>
	region_init(index, region_conf);
    30f2:	4669      	mov	r1, sp
    30f4:	f7fe f81e 	bl	1134 <region_init>
}
    30f8:	4620      	mov	r0, r4
    30fa:	b005      	add	sp, #20
    30fc:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    30fe:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
    3102:	e7f9      	b.n	30f8 <mpu_configure_region+0x34>

00003104 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    3104:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    3108:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    310c:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    310e:	bf08      	it	eq
    3110:	f06f 0015 	mvneq.w	r0, #21
    3114:	4770      	bx	lr

00003116 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    3116:	1e43      	subs	r3, r0, #1
    3118:	3901      	subs	r1, #1
    311a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    311e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    3122:	4282      	cmp	r2, r0
    3124:	d101      	bne.n	312a <strcmp+0x14>
    3126:	2a00      	cmp	r2, #0
    3128:	d1f7      	bne.n	311a <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    312a:	1a10      	subs	r0, r2, r0
    312c:	4770      	bx	lr

0000312e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    312e:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    3130:	ea81 0400 	eor.w	r4, r1, r0
    3134:	07a5      	lsls	r5, r4, #30
    3136:	4603      	mov	r3, r0
    3138:	d00b      	beq.n	3152 <memcpy+0x24>
    313a:	3b01      	subs	r3, #1
    313c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    313e:	4291      	cmp	r1, r2
    3140:	d11b      	bne.n	317a <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    3142:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    3144:	2a00      	cmp	r2, #0
    3146:	d0fc      	beq.n	3142 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    3148:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    314c:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    314e:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    3152:	079c      	lsls	r4, r3, #30
    3154:	d1f6      	bne.n	3144 <memcpy+0x16>
    3156:	f022 0403 	bic.w	r4, r2, #3
    315a:	1f1d      	subs	r5, r3, #4
    315c:	0896      	lsrs	r6, r2, #2
    315e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    3160:	42b9      	cmp	r1, r7
    3162:	d105      	bne.n	3170 <memcpy+0x42>
    3164:	f06f 0503 	mvn.w	r5, #3
    3168:	4423      	add	r3, r4
    316a:	fb05 2206 	mla	r2, r5, r6, r2
    316e:	e7e4      	b.n	313a <memcpy+0xc>
			*(d_word++) = *(s_word++);
    3170:	f851 cb04 	ldr.w	ip, [r1], #4
    3174:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    3178:	e7f2      	b.n	3160 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    317a:	f811 4b01 	ldrb.w	r4, [r1], #1
    317e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    3182:	e7dc      	b.n	313e <memcpy+0x10>

00003184 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    3184:	4603      	mov	r3, r0
{
    3186:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    3188:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    318a:	079c      	lsls	r4, r3, #30
    318c:	d111      	bne.n	31b2 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    318e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    3192:	f022 0603 	bic.w	r6, r2, #3
    3196:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    319a:	441e      	add	r6, r3
    319c:	0894      	lsrs	r4, r2, #2
    319e:	42b3      	cmp	r3, r6
    31a0:	d10d      	bne.n	31be <memset+0x3a>
    31a2:	f06f 0503 	mvn.w	r5, #3
    31a6:	fb05 2204 	mla	r2, r5, r4, r2
    31aa:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    31ac:	4293      	cmp	r3, r2
    31ae:	d109      	bne.n	31c4 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    31b0:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    31b2:	2a00      	cmp	r2, #0
    31b4:	d0fc      	beq.n	31b0 <memset+0x2c>
		*(d_byte++) = c_byte;
    31b6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    31ba:	3a01      	subs	r2, #1
    31bc:	e7e5      	b.n	318a <memset+0x6>
		*(d_word++) = c_word;
    31be:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    31c2:	e7ec      	b.n	319e <memset+0x1a>
		*(d_byte++) = c_byte;
    31c4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    31c8:	e7f0      	b.n	31ac <memset+0x28>

000031ca <_stdout_hook_default>:
}
    31ca:	f04f 30ff 	mov.w	r0, #4294967295
    31ce:	4770      	bx	lr

000031d0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    31d0:	6843      	ldr	r3, [r0, #4]
}
    31d2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    31d4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    31d6:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    31d8:	600b      	str	r3, [r1, #0]
}
    31da:	4770      	bx	lr

000031dc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    31dc:	6843      	ldr	r3, [r0, #4]
    31de:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    31e0:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    31e2:	4042      	eors	r2, r0
    31e4:	400a      	ands	r2, r1
    31e6:	4042      	eors	r2, r0
    p_reg->OUT = value;
    31e8:	605a      	str	r2, [r3, #4]
}
    31ea:	2000      	movs	r0, #0
    31ec:	4770      	bx	lr

000031ee <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    31ee:	6843      	ldr	r3, [r0, #4]
}
    31f0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    31f2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    31f4:	6099      	str	r1, [r3, #8]
}
    31f6:	4770      	bx	lr

000031f8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    31f8:	6843      	ldr	r3, [r0, #4]
}
    31fa:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    31fc:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    31fe:	60d9      	str	r1, [r3, #12]
}
    3200:	4770      	bx	lr

00003202 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3202:	6843      	ldr	r3, [r0, #4]
}
    3204:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3206:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    3208:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    320a:	404b      	eors	r3, r1
    p_reg->OUT = value;
    320c:	6053      	str	r3, [r2, #4]
}
    320e:	4770      	bx	lr

00003210 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3210:	68c3      	ldr	r3, [r0, #12]
{
    3212:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
    3214:	6858      	ldr	r0, [r3, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    3216:	b158      	cbz	r0, 3230 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3218:	2400      	movs	r4, #0
    321a:	4281      	cmp	r1, r0
    321c:	d113      	bne.n	3246 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    321e:	6808      	ldr	r0, [r1, #0]
    3220:	b95c      	cbnz	r4, 323a <gpio_nrfx_manage_callback+0x2a>
    3222:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    3224:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    3226:	42a1      	cmp	r1, r4
    3228:	d100      	bne.n	322c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    322a:	6098      	str	r0, [r3, #8]
	parent->next = child;
    322c:	2000      	movs	r0, #0
    322e:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    3230:	b972      	cbnz	r2, 3250 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    3232:	2000      	movs	r0, #0
}
    3234:	bd30      	pop	{r4, r5, pc}
    3236:	4628      	mov	r0, r5
    3238:	e7ef      	b.n	321a <gpio_nrfx_manage_callback+0xa>
    323a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    323c:	6898      	ldr	r0, [r3, #8]
    323e:	4281      	cmp	r1, r0
	list->tail = node;
    3240:	bf08      	it	eq
    3242:	609c      	streq	r4, [r3, #8]
}
    3244:	e7f2      	b.n	322c <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3246:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3248:	4604      	mov	r4, r0
    324a:	2d00      	cmp	r5, #0
    324c:	d1f3      	bne.n	3236 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    324e:	b13a      	cbz	r2, 3260 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    3250:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    3252:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    3254:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    3256:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    3258:	2800      	cmp	r0, #0
    325a:	d1ea      	bne.n	3232 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    325c:	6099      	str	r1, [r3, #8]
}
    325e:	e7e9      	b.n	3234 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    3260:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3264:	e7e6      	b.n	3234 <gpio_nrfx_manage_callback+0x24>

00003266 <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
    3266:	2301      	movs	r3, #1
{
    3268:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
    326a:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
    326c:	fa03 f201 	lsl.w	r2, r3, r1
    3270:	6923      	ldr	r3, [r4, #16]
    3272:	ea23 0302 	bic.w	r3, r3, r2
    3276:	6123      	str	r3, [r4, #16]
}
    3278:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
    327a:	f7fe b923 	b.w	14c4 <gpiote_pin_int_cfg>

0000327e <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
    327e:	2301      	movs	r3, #1
{
    3280:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
    3282:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
    3284:	fa03 f201 	lsl.w	r2, r3, r1
    3288:	6923      	ldr	r3, [r4, #16]
    328a:	4313      	orrs	r3, r2
    328c:	6123      	str	r3, [r4, #16]
}
    328e:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
    3290:	f7fe b918 	b.w	14c4 <gpiote_pin_int_cfg>

00003294 <uarte_nrfx_config_get>:
{
    3294:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    3296:	68c2      	ldr	r2, [r0, #12]
    3298:	e892 0003 	ldmia.w	r2, {r0, r1}
    329c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    32a0:	2000      	movs	r0, #0
    32a2:	4770      	bx	lr

000032a4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    32a4:	6843      	ldr	r3, [r0, #4]
    32a6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    32a8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    32ac:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    32b0:	4770      	bx	lr

000032b2 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    32b2:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    32b4:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    32b6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    32b8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    32bc:	b138      	cbz	r0, 32ce <uarte_nrfx_poll_in+0x1c>
	*c = data->rx_data;
    32be:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32c0:	2000      	movs	r0, #0
    32c2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32c4:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32c6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32ca:	601a      	str	r2, [r3, #0]
	return 0;
    32cc:	4770      	bx	lr
		return -1;
    32ce:	f04f 30ff 	mov.w	r0, #4294967295
}
    32d2:	4770      	bx	lr

000032d4 <uarte_nrfx_poll_out>:
{
    32d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    32d8:	6843      	ldr	r3, [r0, #4]
{
    32da:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
    32de:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    32e0:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
    32e2:	f000 f952 	bl	358a <k_is_in_isr>
    32e6:	b9c0      	cbnz	r0, 331a <uarte_nrfx_poll_out+0x46>
		lock = &data->poll_out_lock;
    32e8:	2564      	movs	r5, #100	; 0x64
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    32ea:	f04f 0801 	mov.w	r8, #1
    32ee:	f106 0708 	add.w	r7, r6, #8
    32f2:	e8d7 3fef 	ldaex	r3, [r7]
    32f6:	2b00      	cmp	r3, #0
    32f8:	d103      	bne.n	3302 <uarte_nrfx_poll_out+0x2e>
    32fa:	e8c7 8fe2 	stlex	r2, r8, [r7]
    32fe:	2a00      	cmp	r2, #0
    3300:	d1f7      	bne.n	32f2 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
    3302:	d00c      	beq.n	331e <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
    3304:	2021      	movs	r0, #33	; 0x21
    3306:	2100      	movs	r1, #0
    3308:	3d01      	subs	r5, #1
    330a:	f7ff f9d3 	bl	26b4 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    330e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    3312:	d1ee      	bne.n	32f2 <uarte_nrfx_poll_out+0x1e>
}
    3314:	b002      	add	sp, #8
    3316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
    331a:	2301      	movs	r3, #1
    331c:	60b3      	str	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    331e:	2300      	movs	r3, #0
    3320:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3324:	f10d 0307 	add.w	r3, sp, #7
    3328:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    332c:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    332e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
    3332:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3336:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3338:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
    333c:	b923      	cbnz	r3, 3348 <uarte_nrfx_poll_out+0x74>
    333e:	2001      	movs	r0, #1
    3340:	f000 f814 	bl	336c <nrfx_busy_wait>
    3344:	3d01      	subs	r5, #1
    3346:	d1f7      	bne.n	3338 <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3348:	2301      	movs	r3, #1
    334a:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    334c:	2300      	movs	r3, #0
    334e:	60b3      	str	r3, [r6, #8]
    3350:	e7e0      	b.n	3314 <uarte_nrfx_poll_out+0x40>

00003352 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
    3352:	2000      	movs	r0, #0
{
    3354:	b508      	push	{r3, lr}
	sys_arch_reboot(0);
    3356:	f7fd fe7f 	bl	1058 <sys_arch_reboot>

0000335a <hw_cc310_init>:
#include <nrf_cc310_platform.h>

#if CONFIG_HW_CC310

static int hw_cc310_init(struct device *dev)
{
    335a:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
    335c:	f7fd fbe6 	bl	b2c <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
    3360:	f7fd fc68 	bl	c34 <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
    3364:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
    3368:	f7ff bb86 	b.w	2a78 <nrf_cc310_platform_init_no_rng>

0000336c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    336c:	f000 b913 	b.w	3596 <z_impl_k_busy_wait>

00003370 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3372:	4605      	mov	r5, r0
    3374:	460e      	mov	r6, r1
	__asm__ volatile(
    3376:	f04f 0320 	mov.w	r3, #32
    337a:	f3ef 8711 	mrs	r7, BASEPRI
    337e:	f383 8811 	msr	BASEPRI, r3
    3382:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    3386:	f7ff f9b5 	bl	26f4 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    338a:	4631      	mov	r1, r6
    338c:	4604      	mov	r4, r0
    338e:	4628      	mov	r0, r5
    3390:	f7ff ffdf 	bl	3352 <k_sys_fatal_error_handler>
	__asm__ volatile(
    3394:	f387 8811 	msr	BASEPRI, r7
    3398:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    339c:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    339e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    33a2:	f7fd be77 	b.w	1094 <z_impl_k_thread_abort>

000033a6 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    33a6:	f7ff be7a 	b.w	309e <z_clock_idle_exit>

000033aa <k_mem_slab_init>:
{
    33aa:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    33ac:	2400      	movs	r4, #0
    33ae:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    33b0:	ea41 0402 	orr.w	r4, r1, r2
    33b4:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    33b8:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    33bc:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    33be:	d10c      	bne.n	33da <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    33c0:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    33c2:	42a3      	cmp	r3, r4
    33c4:	d103      	bne.n	33ce <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    33c6:	e9c0 0000 	strd	r0, r0, [r0]
}
    33ca:	2000      	movs	r0, #0
}
    33cc:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    33ce:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    33d0:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    33d2:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    33d4:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    33d6:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    33d8:	e7f3      	b.n	33c2 <k_mem_slab_init+0x18>
		return -EINVAL;
    33da:	f06f 0015 	mvn.w	r0, #21
	return rc;
    33de:	e7f5      	b.n	33cc <k_mem_slab_init+0x22>

000033e0 <z_impl_k_mutex_init>:
{
    33e0:	4603      	mov	r3, r0
	mutex->owner = NULL;
    33e2:	2000      	movs	r0, #0
    33e4:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    33e8:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    33ec:	4770      	bx	lr

000033ee <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    33ee:	b921      	cbnz	r1, 33fa <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    33f0:	f3ef 8005 	mrs	r0, IPSR
    33f4:	b908      	cbnz	r0, 33fa <z_reschedule+0xc>
    33f6:	f7fd bc33 	b.w	c60 <arch_swap>
    33fa:	f381 8811 	msr	BASEPRI, r1
    33fe:	f3bf 8f6f 	isb	sy
}
    3402:	4770      	bx	lr

00003404 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3404:	4603      	mov	r3, r0
    3406:	b920      	cbnz	r0, 3412 <z_reschedule_irqlock+0xe>
    3408:	f3ef 8205 	mrs	r2, IPSR
    340c:	b90a      	cbnz	r2, 3412 <z_reschedule_irqlock+0xe>
    340e:	f7fd bc27 	b.w	c60 <arch_swap>
    3412:	f383 8811 	msr	BASEPRI, r3
    3416:	f3bf 8f6f 	isb	sy
}
    341a:	4770      	bx	lr

0000341c <z_reschedule_unlocked>:
	__asm__ volatile(
    341c:	f04f 0320 	mov.w	r3, #32
    3420:	f3ef 8011 	mrs	r0, BASEPRI
    3424:	f383 8811 	msr	BASEPRI, r3
    3428:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    342c:	f7ff bfea 	b.w	3404 <z_reschedule_irqlock>

00003430 <z_priq_dumb_best>:
{
    3430:	4603      	mov	r3, r0
	return list->head == list;
    3432:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3434:	4283      	cmp	r3, r0
    3436:	d003      	beq.n	3440 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    3438:	2800      	cmp	r0, #0
    343a:	bf38      	it	cc
    343c:	2000      	movcc	r0, #0
    343e:	4770      	bx	lr
	struct k_thread *thread = NULL;
    3440:	2000      	movs	r0, #0
}
    3442:	4770      	bx	lr

00003444 <z_ready_thread>:
{
    3444:	b510      	push	{r4, lr}
    3446:	f04f 0320 	mov.w	r3, #32
    344a:	f3ef 8411 	mrs	r4, BASEPRI
    344e:	f383 8811 	msr	BASEPRI, r3
    3452:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    3456:	f7fe feaf 	bl	21b8 <ready_thread>
	__asm__ volatile(
    345a:	f384 8811 	msr	BASEPRI, r4
    345e:	f3bf 8f6f 	isb	sy
}
    3462:	bd10      	pop	{r4, pc}

00003464 <z_thread_timeout>:
{
    3464:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
    3466:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    346a:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    346c:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
    3470:	b1c3      	cbz	r3, 34a4 <z_thread_timeout+0x40>
	__asm__ volatile(
    3472:	f04f 0320 	mov.w	r3, #32
    3476:	f3ef 8511 	mrs	r5, BASEPRI
    347a:	f383 8811 	msr	BASEPRI, r3
    347e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3482:	f850 0c10 	ldr.w	r0, [r0, #-16]
    3486:	f7fe fe41 	bl	210c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    348a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    348e:	f023 0302 	bic.w	r3, r3, #2
    3492:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
    3496:	2300      	movs	r3, #0
    3498:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
    349c:	f385 8811 	msr	BASEPRI, r5
    34a0:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    34a4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
    34a8:	4608      	mov	r0, r1
    34aa:	f023 0314 	bic.w	r3, r3, #20
    34ae:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
    34b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
    34b6:	f7ff bfc5 	b.w	3444 <z_ready_thread>

000034ba <z_remove_thread_from_ready_q>:
{
    34ba:	b510      	push	{r4, lr}
	__asm__ volatile(
    34bc:	f04f 0320 	mov.w	r3, #32
    34c0:	f3ef 8411 	mrs	r4, BASEPRI
    34c4:	f383 8811 	msr	BASEPRI, r3
    34c8:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
    34cc:	f7fe ffd2 	bl	2474 <unready_thread>
	__asm__ volatile(
    34d0:	f384 8811 	msr	BASEPRI, r4
    34d4:	f3bf 8f6f 	isb	sy
}
    34d8:	bd10      	pop	{r4, pc}

000034da <add_to_waitq_locked>:
{
    34da:	b538      	push	{r3, r4, r5, lr}
    34dc:	4604      	mov	r4, r0
    34de:	460d      	mov	r5, r1
	unready_thread(thread);
    34e0:	f7fe ffc8 	bl	2474 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    34e4:	7b63      	ldrb	r3, [r4, #13]
    34e6:	f043 0302 	orr.w	r3, r3, #2
    34ea:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    34ec:	b1c5      	cbz	r5, 3520 <add_to_waitq_locked+0x46>
	return list->head == list;
    34ee:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    34f0:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    34f2:	429d      	cmp	r5, r3
    34f4:	bf08      	it	eq
    34f6:	2300      	moveq	r3, #0
    34f8:	2b00      	cmp	r3, #0
    34fa:	bf38      	it	cc
    34fc:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    34fe:	b183      	cbz	r3, 3522 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    3500:	f994 100e 	ldrsb.w	r1, [r4, #14]
    3504:	f993 200e 	ldrsb.w	r2, [r3, #14]
    3508:	4291      	cmp	r1, r2
    350a:	db04      	blt.n	3516 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    350c:	686a      	ldr	r2, [r5, #4]
    350e:	429a      	cmp	r2, r3
    3510:	d007      	beq.n	3522 <add_to_waitq_locked+0x48>
    3512:	681b      	ldr	r3, [r3, #0]
    3514:	e7f3      	b.n	34fe <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    3516:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3518:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    351c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    351e:	605c      	str	r4, [r3, #4]
}
    3520:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    3522:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    3524:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    3526:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    3528:	686b      	ldr	r3, [r5, #4]
    352a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    352c:	606c      	str	r4, [r5, #4]
    352e:	e7f7      	b.n	3520 <add_to_waitq_locked+0x46>

00003530 <z_unpend_first_thread>:
{
    3530:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3532:	f04f 0320 	mov.w	r3, #32
    3536:	f3ef 8211 	mrs	r2, BASEPRI
    353a:	f383 8811 	msr	BASEPRI, r3
    353e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    3542:	f7ff ff75 	bl	3430 <z_priq_dumb_best>
    3546:	4604      	mov	r4, r0
	__asm__ volatile(
    3548:	f382 8811 	msr	BASEPRI, r2
    354c:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    3550:	b1c8      	cbz	r0, 3586 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    3552:	f04f 0320 	mov.w	r3, #32
    3556:	f3ef 8511 	mrs	r5, BASEPRI
    355a:	f383 8811 	msr	BASEPRI, r3
    355e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3562:	4601      	mov	r1, r0
    3564:	6880      	ldr	r0, [r0, #8]
    3566:	f7fe fdd1 	bl	210c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    356a:	7b63      	ldrb	r3, [r4, #13]
    356c:	f023 0302 	bic.w	r3, r3, #2
    3570:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    3572:	2300      	movs	r3, #0
    3574:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    3576:	f385 8811 	msr	BASEPRI, r5
    357a:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    357e:	f104 0018 	add.w	r0, r4, #24
    3582:	f000 f80a 	bl	359a <z_abort_timeout>
}
    3586:	4620      	mov	r0, r4
    3588:	bd38      	pop	{r3, r4, r5, pc}

0000358a <k_is_in_isr>:
    358a:	f3ef 8005 	mrs	r0, IPSR
}
    358e:	3800      	subs	r0, #0
    3590:	bf18      	it	ne
    3592:	2001      	movne	r0, #1
    3594:	4770      	bx	lr

00003596 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    3596:	f7fd b96b 	b.w	870 <arch_busy_wait>

0000359a <z_abort_timeout>:
{
    359a:	b510      	push	{r4, lr}
	__asm__ volatile(
    359c:	f04f 0220 	mov.w	r2, #32
    35a0:	f3ef 8411 	mrs	r4, BASEPRI
    35a4:	f382 8811 	msr	BASEPRI, r2
    35a8:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    35ac:	6803      	ldr	r3, [r0, #0]
    35ae:	b13b      	cbz	r3, 35c0 <z_abort_timeout+0x26>
			remove_timeout(to);
    35b0:	f7ff f938 	bl	2824 <remove_timeout>
			ret = 0;
    35b4:	2000      	movs	r0, #0
	__asm__ volatile(
    35b6:	f384 8811 	msr	BASEPRI, r4
    35ba:	f3bf 8f6f 	isb	sy
}
    35be:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    35c0:	f06f 0015 	mvn.w	r0, #21
    35c4:	e7f7      	b.n	35b6 <z_abort_timeout+0x1c>

000035c6 <z_get_next_timeout_expiry>:
{
    35c6:	b510      	push	{r4, lr}
	__asm__ volatile(
    35c8:	f04f 0320 	mov.w	r3, #32
    35cc:	f3ef 8411 	mrs	r4, BASEPRI
    35d0:	f383 8811 	msr	BASEPRI, r3
    35d4:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    35d8:	f7ff f938 	bl	284c <next_timeout>
	__asm__ volatile(
    35dc:	f384 8811 	msr	BASEPRI, r4
    35e0:	f3bf 8f6f 	isb	sy
}
    35e4:	bd10      	pop	{r4, pc}

000035e6 <z_set_timeout_expiry>:
{
    35e6:	b570      	push	{r4, r5, r6, lr}
    35e8:	4604      	mov	r4, r0
    35ea:	460d      	mov	r5, r1
	__asm__ volatile(
    35ec:	f04f 0320 	mov.w	r3, #32
    35f0:	f3ef 8611 	mrs	r6, BASEPRI
    35f4:	f383 8811 	msr	BASEPRI, r3
    35f8:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    35fc:	f7ff f926 	bl	284c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    3600:	2801      	cmp	r0, #1
    3602:	dd05      	ble.n	3610 <z_set_timeout_expiry+0x2a>
    3604:	42a0      	cmp	r0, r4
    3606:	dd03      	ble.n	3610 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    3608:	4629      	mov	r1, r5
    360a:	4620      	mov	r0, r4
    360c:	f7fd fa10 	bl	a30 <z_clock_set_timeout>
	__asm__ volatile(
    3610:	f386 8811 	msr	BASEPRI, r6
    3614:	f3bf 8f6f 	isb	sy
}
    3618:	bd70      	pop	{r4, r5, r6, pc}

0000361a <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    361a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    361c:	f7ff fa00 	bl	2a20 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    3620:	bd08      	pop	{r3, pc}

00003622 <k_heap_init>:
{
    3622:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    3624:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    3628:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    362c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    362e:	f7ff bc36 	b.w	2e9e <sys_heap_init>

00003632 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    3632:	4770      	bx	lr
