
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20000d00 	.word	0x20000d00
}
   4:	000017a5 	.word	0x000017a5
   8:	000042a1 	.word	0x000042a1
   c:	000017d5 	.word	0x000017d5
  10:	000017d5 	.word	0x000017d5
  14:	000017d5 	.word	0x000017d5
  18:	000017d5 	.word	0x000017d5
  1c:	000017d5 	.word	0x000017d5
	...
  2c:	00001701 	.word	0x00001701
  30:	000017d5 	.word	0x000017d5
  34:	00000000 	.word	0x00000000
  38:	000016a9 	.word	0x000016a9
  3c:	00004279 	.word	0x00004279

00000040 <_irq_vector_table>:
  40:	00001765 00001765 00001765 00001765     e...e...e...e...
  50:	00001765 00001765 00001765 00001765     e...e...e...e...
  60:	00001765 00001765 00001765 00001765     e...e...e...e...
  70:	00001765 00001765 00001765 00001765     e...e...e...e...
  80:	00001765 00001765 00001765 00001765     e...e...e...e...
  90:	00001765 00001765 00001765 00001765     e...e...e...e...
  a0:	00001765 00001765 00001765 00001765     e...e...e...e...
  b0:	00001765 00001765 00001765 00001765     e...e...e...e...
  c0:	00001765 00001765 00001765 00001765     e...e...e...e...
  d0:	00001765 00001765 00001765 00001765     e...e...e...e...
  e0:	00001765 00001765 00001765 00001765     e...e...e...e...
  f0:	00001765 00001765 00001765 00001765     e...e...e...e...
 100:	00001765 00001765 00001765 00001765     e...e...e...e...
 110:	00001765 00001765 00001765 00001765     e...e...e...e...
 120:	00001765 00001765 00001765 00001765     e...e...e...e...
 130:	00001765 00001765 00001765 00001765     e...e...e...e...
 140:	00001765                                e...

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295
     154:	f04f 30ff 	movne.w	r0, #4294967295
     158:	f000 b970 	b.w	43c <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f806 	bl	174 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__udivmoddi4>:
     174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     178:	9e08      	ldr	r6, [sp, #32]
     17a:	460d      	mov	r5, r1
     17c:	4604      	mov	r4, r0
     17e:	468a      	mov	sl, r1
     180:	2b00      	cmp	r3, #0
     182:	d17f      	bne.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     184:	428a      	cmp	r2, r1
     186:	4617      	mov	r7, r2
     188:	d941      	bls.n	20e <__udivmoddi4+0x9a>
     18a:	fab2 f282 	clz	r2, r2
     18e:	b14a      	cbz	r2, 1a4 <__udivmoddi4+0x30>
     190:	f1c2 0120 	rsb	r1, r2, #32
     194:	fa05 f302 	lsl.w	r3, r5, r2
     198:	4097      	lsls	r7, r2
     19a:	4094      	lsls	r4, r2
     19c:	fa20 f101 	lsr.w	r1, r0, r1
     1a0:	ea41 0a03 	orr.w	sl, r1, r3
     1a4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1a8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1ac:	fa1f f987 	uxth.w	r9, r7
     1b0:	fbba fef8 	udiv	lr, sl, r8
     1b4:	fb08 a31e 	mls	r3, r8, lr, sl
     1b8:	fb0e f109 	mul.w	r1, lr, r9
     1bc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1c0:	4299      	cmp	r1, r3
     1c2:	d906      	bls.n	1d2 <__udivmoddi4+0x5e>
     1c4:	18fb      	adds	r3, r7, r3
     1c6:	d202      	bcs.n	1ce <__udivmoddi4+0x5a>
     1c8:	4299      	cmp	r1, r3
     1ca:	f200 8124 	bhi.w	416 <CONFIG_FLASH_SIZE+0x16>
     1ce:	f10e 3eff 	add.w	lr, lr, #4294967295
     1d2:	1a59      	subs	r1, r3, r1
     1d4:	b2a3      	uxth	r3, r4
     1d6:	fbb1 f0f8 	udiv	r0, r1, r8
     1da:	fb08 1110 	mls	r1, r8, r0, r1
     1de:	fb00 f909 	mul.w	r9, r0, r9
     1e2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1e6:	45a1      	cmp	r9, r4
     1e8:	d905      	bls.n	1f6 <__udivmoddi4+0x82>
     1ea:	193c      	adds	r4, r7, r4
     1ec:	d202      	bcs.n	1f4 <__udivmoddi4+0x80>
     1ee:	45a1      	cmp	r9, r4
     1f0:	f200 810e 	bhi.w	410 <CONFIG_FLASH_SIZE+0x10>
     1f4:	3801      	subs	r0, #1
     1f6:	eba4 0409 	sub.w	r4, r4, r9
     1fa:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     1fe:	2100      	movs	r1, #0
     200:	b11e      	cbz	r6, 20a <__udivmoddi4+0x96>
     202:	40d4      	lsrs	r4, r2
     204:	2300      	movs	r3, #0
     206:	e9c6 4300 	strd	r4, r3, [r6]
     20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     20e:	b902      	cbnz	r2, 212 <__udivmoddi4+0x9e>
     210:	deff      	udf	#255	; 0xff
     212:	fab2 f282 	clz	r2, r2
     216:	2a00      	cmp	r2, #0
     218:	d14f      	bne.n	2ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x3a>
     21a:	1bcb      	subs	r3, r1, r7
     21c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     220:	fa1f f887 	uxth.w	r8, r7
     224:	2101      	movs	r1, #1
     226:	0c25      	lsrs	r5, r4, #16
     228:	fbb3 fcfe 	udiv	ip, r3, lr
     22c:	fb0e 301c 	mls	r0, lr, ip, r3
     230:	462b      	mov	r3, r5
     232:	fb08 f90c 	mul.w	r9, r8, ip
     236:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     23a:	45a9      	cmp	r9, r5
     23c:	d90a      	bls.n	254 <__udivmoddi4+0xe0>
     23e:	197d      	adds	r5, r7, r5
     240:	bf2c      	ite	cs
     242:	2301      	movcs	r3, #1
     244:	2300      	movcc	r3, #0
     246:	45a9      	cmp	r9, r5
     248:	d902      	bls.n	250 <__udivmoddi4+0xdc>
     24a:	2b00      	cmp	r3, #0
     24c:	f000 80d9 	beq.w	402 <CONFIG_FLASH_SIZE+0x2>
     250:	f10c 3cff 	add.w	ip, ip, #4294967295
     254:	eba5 0509 	sub.w	r5, r5, r9
     258:	b2a3      	uxth	r3, r4
     25a:	fbb5 f0fe 	udiv	r0, r5, lr
     25e:	fb0e 5510 	mls	r5, lr, r0, r5
     262:	fb08 f800 	mul.w	r8, r8, r0
     266:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     26a:	45a0      	cmp	r8, r4
     26c:	d905      	bls.n	27a <__udivmoddi4+0x106>
     26e:	193c      	adds	r4, r7, r4
     270:	d202      	bcs.n	278 <__udivmoddi4+0x104>
     272:	45a0      	cmp	r8, r4
     274:	f200 80c9 	bhi.w	40a <CONFIG_FLASH_SIZE+0xa>
     278:	3801      	subs	r0, #1
     27a:	eba4 0408 	sub.w	r4, r4, r8
     27e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     282:	e7bd      	b.n	200 <__udivmoddi4+0x8c>
     284:	428b      	cmp	r3, r1
     286:	d908      	bls.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     288:	2e00      	cmp	r6, #0
     28a:	f000 80b1 	beq.w	3f0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x170>
     28e:	2100      	movs	r1, #0
     290:	e9c6 0500 	strd	r0, r5, [r6]
     294:	4608      	mov	r0, r1
     296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     29a:	fab3 f183 	clz	r1, r3
     29e:	2900      	cmp	r1, #0
     2a0:	d146      	bne.n	330 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb0>
     2a2:	42ab      	cmp	r3, r5
     2a4:	f0c0 80a7 	bcc.w	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     2a8:	4282      	cmp	r2, r0
     2aa:	f240 80a4 	bls.w	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     2ae:	4608      	mov	r0, r1
     2b0:	2e00      	cmp	r6, #0
     2b2:	d0aa      	beq.n	20a <__udivmoddi4+0x96>
     2b4:	e9c6 4a00 	strd	r4, sl, [r6]
     2b8:	e7a7      	b.n	20a <__udivmoddi4+0x96>
     2ba:	f1c2 0020 	rsb	r0, r2, #32
     2be:	4097      	lsls	r7, r2
     2c0:	fa01 f302 	lsl.w	r3, r1, r2
     2c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2c8:	40c1      	lsrs	r1, r0
     2ca:	fa24 f500 	lsr.w	r5, r4, r0
     2ce:	fa1f f887 	uxth.w	r8, r7
     2d2:	4094      	lsls	r4, r2
     2d4:	431d      	orrs	r5, r3
     2d6:	fbb1 f0fe 	udiv	r0, r1, lr
     2da:	0c2b      	lsrs	r3, r5, #16
     2dc:	fb0e 1110 	mls	r1, lr, r0, r1
     2e0:	fb00 fc08 	mul.w	ip, r0, r8
     2e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2e8:	459c      	cmp	ip, r3
     2ea:	d909      	bls.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     2ec:	18fb      	adds	r3, r7, r3
     2ee:	bf2c      	ite	cs
     2f0:	2101      	movcs	r1, #1
     2f2:	2100      	movcc	r1, #0
     2f4:	459c      	cmp	ip, r3
     2f6:	d902      	bls.n	2fe <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7e>
     2f8:	2900      	cmp	r1, #0
     2fa:	f000 8095 	beq.w	428 <CONFIG_FLASH_SIZE+0x28>
     2fe:	3801      	subs	r0, #1
     300:	eba3 030c 	sub.w	r3, r3, ip
     304:	b2ad      	uxth	r5, r5
     306:	fbb3 f1fe 	udiv	r1, r3, lr
     30a:	fb0e 3311 	mls	r3, lr, r1, r3
     30e:	fb01 fc08 	mul.w	ip, r1, r8
     312:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     316:	45ac      	cmp	ip, r5
     318:	d905      	bls.n	326 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa6>
     31a:	197d      	adds	r5, r7, r5
     31c:	d202      	bcs.n	324 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa4>
     31e:	45ac      	cmp	ip, r5
     320:	f200 8089 	bhi.w	436 <CONFIG_FLASH_SIZE+0x36>
     324:	3901      	subs	r1, #1
     326:	eba5 030c 	sub.w	r3, r5, ip
     32a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     32e:	e77a      	b.n	226 <__udivmoddi4+0xb2>
     330:	f1c1 0420 	rsb	r4, r1, #32
     334:	408b      	lsls	r3, r1
     336:	fa02 f701 	lsl.w	r7, r2, r1
     33a:	fa05 fc01 	lsl.w	ip, r5, r1
     33e:	40e2      	lsrs	r2, r4
     340:	fa20 f804 	lsr.w	r8, r0, r4
     344:	40e5      	lsrs	r5, r4
     346:	fa00 fe01 	lsl.w	lr, r0, r1
     34a:	4313      	orrs	r3, r2
     34c:	ea48 020c 	orr.w	r2, r8, ip
     350:	ea4f 4813 	mov.w	r8, r3, lsr #16
     354:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     358:	fa1f f983 	uxth.w	r9, r3
     35c:	fbb5 faf8 	udiv	sl, r5, r8
     360:	fb08 551a 	mls	r5, r8, sl, r5
     364:	fb0a f009 	mul.w	r0, sl, r9
     368:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     36c:	4560      	cmp	r0, ip
     36e:	d90a      	bls.n	386 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x106>
     370:	eb13 0c0c 	adds.w	ip, r3, ip
     374:	bf2c      	ite	cs
     376:	2501      	movcs	r5, #1
     378:	2500      	movcc	r5, #0
     37a:	4560      	cmp	r0, ip
     37c:	d901      	bls.n	382 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x102>
     37e:	2d00      	cmp	r5, #0
     380:	d055      	beq.n	42e <CONFIG_FLASH_SIZE+0x2e>
     382:	f10a 3aff 	add.w	sl, sl, #4294967295
     386:	ebac 0c00 	sub.w	ip, ip, r0
     38a:	b292      	uxth	r2, r2
     38c:	fbbc f0f8 	udiv	r0, ip, r8
     390:	fb08 cc10 	mls	ip, r8, r0, ip
     394:	fb00 f909 	mul.w	r9, r0, r9
     398:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     39c:	45e1      	cmp	r9, ip
     39e:	d905      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a0:	eb13 0c0c 	adds.w	ip, r3, ip
     3a4:	d201      	bcs.n	3aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12a>
     3a6:	45e1      	cmp	r9, ip
     3a8:	d83b      	bhi.n	422 <CONFIG_FLASH_SIZE+0x22>
     3aa:	3801      	subs	r0, #1
     3ac:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3b0:	ebac 0c09 	sub.w	ip, ip, r9
     3b4:	fba0 8907 	umull	r8, r9, r0, r7
     3b8:	45cc      	cmp	ip, r9
     3ba:	4645      	mov	r5, r8
     3bc:	464a      	mov	r2, r9
     3be:	d302      	bcc.n	3c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x146>
     3c0:	d106      	bne.n	3d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x150>
     3c2:	45c6      	cmp	lr, r8
     3c4:	d204      	bcs.n	3d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x150>
     3c6:	3801      	subs	r0, #1
     3c8:	ebb8 0507 	subs.w	r5, r8, r7
     3cc:	eb69 0203 	sbc.w	r2, r9, r3
     3d0:	b32e      	cbz	r6, 41e <CONFIG_FLASH_SIZE+0x1e>
     3d2:	ebbe 0305 	subs.w	r3, lr, r5
     3d6:	eb6c 0c02 	sbc.w	ip, ip, r2
     3da:	fa23 f201 	lsr.w	r2, r3, r1
     3de:	fa0c f404 	lsl.w	r4, ip, r4
     3e2:	fa2c f301 	lsr.w	r3, ip, r1
     3e6:	2100      	movs	r1, #0
     3e8:	4314      	orrs	r4, r2
     3ea:	e9c6 4300 	strd	r4, r3, [r6]
     3ee:	e70c      	b.n	20a <__udivmoddi4+0x96>
     3f0:	4631      	mov	r1, r6
     3f2:	4630      	mov	r0, r6
     3f4:	e709      	b.n	20a <__udivmoddi4+0x96>
     3f6:	1a84      	subs	r4, r0, r2
     3f8:	eb65 0303 	sbc.w	r3, r5, r3
     3fc:	2001      	movs	r0, #1
     3fe:	469a      	mov	sl, r3
     400:	e756      	b.n	2b0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x30>
     402:	f1ac 0c02 	sub.w	ip, ip, #2
     406:	443d      	add	r5, r7
     408:	e724      	b.n	254 <__udivmoddi4+0xe0>
     40a:	3802      	subs	r0, #2
     40c:	443c      	add	r4, r7
     40e:	e734      	b.n	27a <__udivmoddi4+0x106>
     410:	3802      	subs	r0, #2
     412:	443c      	add	r4, r7
     414:	e6ef      	b.n	1f6 <__udivmoddi4+0x82>
     416:	f1ae 0e02 	sub.w	lr, lr, #2
     41a:	443b      	add	r3, r7
     41c:	e6d9      	b.n	1d2 <__udivmoddi4+0x5e>
     41e:	4631      	mov	r1, r6
     420:	e6f3      	b.n	20a <__udivmoddi4+0x96>
     422:	3802      	subs	r0, #2
     424:	449c      	add	ip, r3
     426:	e7c1      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     428:	3802      	subs	r0, #2
     42a:	443b      	add	r3, r7
     42c:	e768      	b.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     42e:	f1aa 0a02 	sub.w	sl, sl, #2
     432:	449c      	add	ip, r3
     434:	e7a7      	b.n	386 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x106>
     436:	3902      	subs	r1, #2
     438:	443d      	add	r5, r7
     43a:	e774      	b.n	326 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa6>

0000043c <__aeabi_idiv0>:
     43c:	4770      	bx	lr
     43e:	bf00      	nop

00000440 <main>:
/* 1000 msec = 1 sec */
#define SLEEP_TIME_MS   1000


void main(void)
{
     440:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     442:	4812      	ldr	r0, [pc, #72]	; (48c <main+0x4c>)
     444:	f002 fa32 	bl	28ac <z_impl_device_get_binding>
     448:	4604      	mov	r4, r0
  struct device *dev;
  dev = device_get_binding("GPIO_0");
  /* Set LED pin as output */
  gpio_pin_configure(dev, 2, GPIO_OUTPUT_ACTIVE); //p0.02 == LED1
     44a:	2102      	movs	r1, #2
     44c:	f003 fc4d 	bl	3cea <gpio_pin_configure.constprop.0>
  gpio_pin_configure(dev, 3, GPIO_OUTPUT_ACTIVE); //p0.03 == LED2
     450:	2103      	movs	r1, #3
     452:	4620      	mov	r0, r4
     454:	f003 fc49 	bl	3cea <gpio_pin_configure.constprop.0>
  gpio_pin_configure(dev, 4, GPIO_OUTPUT_ACTIVE); //p0.04 == LED3
     458:	2104      	movs	r1, #4
     45a:	4620      	mov	r0, r4
     45c:	f003 fc45 	bl	3cea <gpio_pin_configure.constprop.0>
  gpio_pin_configure(dev, 5, GPIO_OUTPUT_ACTIVE); //p0.05 == LED4
     460:	2105      	movs	r1, #5
     462:	4620      	mov	r0, r4
     464:	f003 fc41 	bl	3cea <gpio_pin_configure.constprop.0>

    gpio_pin_set(dev, 2, 1);
     468:	2102      	movs	r1, #2
     46a:	4620      	mov	r0, r4
     46c:	f003 fc32 	bl	3cd4 <gpio_pin_set.constprop.0>
    gpio_pin_set(dev, 3, 1);
     470:	2103      	movs	r1, #3
     472:	4620      	mov	r0, r4
     474:	f003 fc2e 	bl	3cd4 <gpio_pin_set.constprop.0>
    gpio_pin_set(dev, 4, 1);
     478:	2104      	movs	r1, #4
     47a:	4620      	mov	r0, r4
     47c:	f003 fc2a 	bl	3cd4 <gpio_pin_set.constprop.0>
    gpio_pin_set(dev, 5, 1);
     480:	4620      	mov	r0, r4

     482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gpio_pin_set(dev, 5, 1);
     486:	2105      	movs	r1, #5
     488:	f003 bc24 	b.w	3cd4 <gpio_pin_set.constprop.0>
     48c:	00004bdc 	.word	0x00004bdc

00000490 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     490:	680b      	ldr	r3, [r1, #0]
     492:	3301      	adds	r3, #1
     494:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     496:	4b01      	ldr	r3, [pc, #4]	; (49c <char_out+0xc>)
     498:	681b      	ldr	r3, [r3, #0]
     49a:	4718      	bx	r3
     49c:	20000000 	.word	0x20000000

000004a0 <__printk_hook_install>:
	_char_out = fn;
     4a0:	4b01      	ldr	r3, [pc, #4]	; (4a8 <__printk_hook_install+0x8>)
     4a2:	6018      	str	r0, [r3, #0]
}
     4a4:	4770      	bx	lr
     4a6:	bf00      	nop
     4a8:	20000000 	.word	0x20000000

000004ac <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     4ac:	b507      	push	{r0, r1, r2, lr}
     4ae:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     4b0:	2100      	movs	r1, #0
{
     4b2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     4b4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     4b6:	4803      	ldr	r0, [pc, #12]	; (4c4 <vprintk+0x18>)
     4b8:	a901      	add	r1, sp, #4
     4ba:	f000 f8eb 	bl	694 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     4be:	b003      	add	sp, #12
     4c0:	f85d fb04 	ldr.w	pc, [sp], #4
     4c4:	00000491 	.word	0x00000491

000004c8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     4c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4cc:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
     4d0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     4d2:	f019 0808 	ands.w	r8, r9, #8
{
     4d6:	4693      	mov	fp, r2
	if (processing) {
     4d8:	d00d      	beq.n	4f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe>
		if (evt == EVT_COMPLETE) {
     4da:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4dc:	bf0c      	ite	eq
     4de:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     4e2:	f049 0920 	orrne.w	r9, r9, #32
     4e6:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4ea:	f38b 8811 	msr	BASEPRI, fp
     4ee:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4f6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     4fa:	2902      	cmp	r1, #2
     4fc:	d107      	bne.n	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
			evt = process_recheck(mgr);
     4fe:	4620      	mov	r0, r4
     500:	f003 fc31 	bl	3d66 <process_recheck>
		if (evt == EVT_NOP) {
     504:	2800      	cmp	r0, #0
     506:	d0f0      	beq.n	4ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2>
		if (evt == EVT_COMPLETE) {
     508:	2801      	cmp	r0, #1
     50a:	8b23      	ldrh	r3, [r4, #24]
     50c:	d150      	bne.n	5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>
			res = mgr->last_res;
     50e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     510:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     512:	2f00      	cmp	r7, #0
     514:	da15      	bge.n	542 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5a>
		*clients = mgr->clients;
     516:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     518:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     51c:	e9c4 8800 	strd	r8, r8, [r4]
     520:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     524:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     526:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     528:	8b21      	ldrh	r1, [r4, #24]
     52a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     52e:	45ca      	cmp	sl, r9
     530:	d002      	beq.n	538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>
		if (do_monitors
     532:	68a3      	ldr	r3, [r4, #8]
     534:	2b00      	cmp	r3, #0
     536:	d15c      	bne.n	5f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10a>
		    || !sys_slist_is_empty(&clients)
     538:	b90d      	cbnz	r5, 53e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x56>
		    || (transit != NULL)) {
     53a:	2e00      	cmp	r6, #0
     53c:	d074      	beq.n	628 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x140>
     53e:	2300      	movs	r3, #0
     540:	e058      	b.n	5f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     542:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     546:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     548:	2a01      	cmp	r2, #1
     54a:	d820      	bhi.n	58e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa6>
		*clients = mgr->clients;
     54c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     550:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     552:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     554:	b289      	uxth	r1, r1
	list->tail = NULL;
     556:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     55a:	d10c      	bne.n	576 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8e>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     55c:	2d00      	cmp	r5, #0
     55e:	462b      	mov	r3, r5
     560:	bf38      	it	cc
     562:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     564:	b12b      	cbz	r3, 572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
				mgr->refs += 1U;
     566:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     568:	681b      	ldr	r3, [r3, #0]
     56a:	3201      	adds	r2, #1
     56c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     56e:	2b00      	cmp	r3, #0
     570:	d1f8      	bne.n	564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     572:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
     576:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     578:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     57a:	f003 fbf4 	bl	3d66 <process_recheck>
     57e:	4606      	mov	r6, r0
     580:	2800      	cmp	r0, #0
     582:	d0d1      	beq.n	528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     584:	8b23      	ldrh	r3, [r4, #24]
     586:	f043 0320 	orr.w	r3, r3, #32
     58a:	8323      	strh	r3, [r4, #24]
     58c:	e7cb      	b.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     58e:	2b04      	cmp	r3, #4
     590:	d10c      	bne.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     592:	f021 0107 	bic.w	r1, r1, #7
     596:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
     598:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     59a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     59c:	f003 fbe3 	bl	3d66 <process_recheck>
     5a0:	4605      	mov	r5, r0
     5a2:	2800      	cmp	r0, #0
     5a4:	d0bf      	beq.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     5a6:	f041 0120 	orr.w	r1, r1, #32
     5aa:	8321      	strh	r1, [r4, #24]
     5ac:	2500      	movs	r5, #0
     5ae:	e7ba      	b.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
		} else if (evt == EVT_START) {
     5b0:	2803      	cmp	r0, #3
     5b2:	d109      	bne.n	5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>
			transit = mgr->transitions->start;
     5b4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5b6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     5ba:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5bc:	f043 0306 	orr.w	r3, r3, #6
}
     5c0:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
     5c2:	8323      	strh	r3, [r4, #24]
		res = 0;
     5c4:	462f      	mov	r7, r5
     5c6:	e7af      	b.n	528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>
		} else if (evt == EVT_STOP) {
     5c8:	2804      	cmp	r0, #4
     5ca:	d106      	bne.n	5da <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf2>
			transit = mgr->transitions->stop;
     5cc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5ce:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     5d2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5d4:	f043 0304 	orr.w	r3, r3, #4
     5d8:	e7f2      	b.n	5c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd8>
		} else if (evt == EVT_RESET) {
     5da:	2805      	cmp	r0, #5
     5dc:	d106      	bne.n	5ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x104>
			transit = mgr->transitions->reset;
     5de:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5e0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     5e4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5e6:	f043 0305 	orr.w	r3, r3, #5
     5ea:	e7e9      	b.n	5c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd8>
     5ec:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     5ee:	462e      	mov	r6, r5
     5f0:	e7e8      	b.n	5c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xdc>
				   && !sys_slist_is_empty(&mgr->monitors);
     5f2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     5f4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     5f8:	8321      	strh	r1, [r4, #24]
     5fa:	f38b 8811 	msr	BASEPRI, fp
     5fe:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     602:	bb03      	cbnz	r3, 646 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x15e>
	while (!sys_slist_is_empty(list)) {
     604:	2d00      	cmp	r5, #0
     606:	d133      	bne.n	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
			if (transit != NULL) {
     608:	b116      	cbz	r6, 610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>
				transit(mgr, transition_complete);
     60a:	4620      	mov	r0, r4
     60c:	4920      	ldr	r1, [pc, #128]	; (690 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a8>)
     60e:	47b0      	blx	r6
	__asm__ volatile(
     610:	f04f 0320 	mov.w	r3, #32
     614:	f3ef 8b11 	mrs	fp, BASEPRI
     618:	f383 8811 	msr	BASEPRI, r3
     61c:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     620:	8b23      	ldrh	r3, [r4, #24]
     622:	f023 0308 	bic.w	r3, r3, #8
     626:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     628:	8b23      	ldrh	r3, [r4, #24]
     62a:	06da      	lsls	r2, r3, #27
     62c:	d528      	bpl.n	680 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x198>
			evt = EVT_COMPLETE;
     62e:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     630:	f023 0310 	bic.w	r3, r3, #16
     634:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     636:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     63a:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     63e:	2900      	cmp	r1, #0
     640:	f47f af5b 	bne.w	4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
out:
     644:	e751      	b.n	4ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     646:	68a1      	ldr	r1, [r4, #8]
     648:	2900      	cmp	r1, #0
     64a:	d0db      	beq.n	604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>
	return node->next;
     64c:	680b      	ldr	r3, [r1, #0]
     64e:	2b00      	cmp	r3, #0
     650:	bf38      	it	cc
     652:	2300      	movcc	r3, #0
     654:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
     656:	4652      	mov	r2, sl
     658:	463b      	mov	r3, r7
     65a:	4620      	mov	r0, r4
     65c:	f8d1 b004 	ldr.w	fp, [r1, #4]
     660:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     662:	f1b9 0f00 	cmp.w	r9, #0
     666:	d0cd      	beq.n	604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     668:	4649      	mov	r1, r9
     66a:	f8d9 3000 	ldr.w	r3, [r9]
     66e:	e7ee      	b.n	64e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x166>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     670:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     672:	463b      	mov	r3, r7
     674:	4652      	mov	r2, sl
     676:	4620      	mov	r0, r4
     678:	682d      	ldr	r5, [r5, #0]
     67a:	f003 fb90 	bl	3d9e <notify_one>
     67e:	e7c1      	b.n	604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     680:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     684:	bf1e      	ittt	ne
     686:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
     68a:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     68c:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     68e:	e7d2      	b.n	636 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14e>
     690:	00003dcb 	.word	0x00003dcb

00000694 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     698:	468b      	mov	fp, r1
     69a:	4692      	mov	sl, r2
     69c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     69e:	2500      	movs	r5, #0
{
     6a0:	b091      	sub	sp, #68	; 0x44
     6a2:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     6a4:	f89a 0000 	ldrb.w	r0, [sl]
     6a8:	b908      	cbnz	r0, 6ae <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     6aa:	4628      	mov	r0, r5
     6ac:	e35e      	b.n	d6c <CONFIG_ISR_STACK_SIZE+0x56c>
		if (*fp != '%') {
     6ae:	2825      	cmp	r0, #37	; 0x25
     6b0:	f10a 0701 	add.w	r7, sl, #1
     6b4:	d007      	beq.n	6c6 <cbvprintf+0x32>
			OUTC('%');
     6b6:	4659      	mov	r1, fp
     6b8:	9b02      	ldr	r3, [sp, #8]
     6ba:	4798      	blx	r3
     6bc:	2800      	cmp	r0, #0
     6be:	f2c0 8355 	blt.w	d6c <CONFIG_ISR_STACK_SIZE+0x56c>
     6c2:	3501      	adds	r5, #1
			break;
     6c4:	e210      	b.n	ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
		} state = {
     6c6:	2218      	movs	r2, #24
     6c8:	2100      	movs	r1, #0
     6ca:	a80a      	add	r0, sp, #40	; 0x28
     6cc:	f003 fe5c 	bl	4388 <memset>
	if (*sp == '%') {
     6d0:	f89a 3001 	ldrb.w	r3, [sl, #1]
     6d4:	2b25      	cmp	r3, #37	; 0x25
     6d6:	d078      	beq.n	7ca <cbvprintf+0x136>
     6d8:	2200      	movs	r2, #0
     6da:	4694      	mov	ip, r2
     6dc:	4616      	mov	r6, r2
     6de:	4696      	mov	lr, r2
     6e0:	4610      	mov	r0, r2
     6e2:	4639      	mov	r1, r7
		switch (*sp) {
     6e4:	f817 3b01 	ldrb.w	r3, [r7], #1
     6e8:	2b2b      	cmp	r3, #43	; 0x2b
     6ea:	f000 809d 	beq.w	828 <CONFIG_ISR_STACK_SIZE+0x28>
     6ee:	f200 8094 	bhi.w	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     6f2:	2b20      	cmp	r3, #32
     6f4:	f000 809b 	beq.w	82e <CONFIG_ISR_STACK_SIZE+0x2e>
     6f8:	2b23      	cmp	r3, #35	; 0x23
     6fa:	f000 809a 	beq.w	832 <CONFIG_ISR_STACK_SIZE+0x32>
     6fe:	b128      	cbz	r0, 70c <cbvprintf+0x78>
     700:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     704:	f040 0004 	orr.w	r0, r0, #4
     708:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     70c:	f1be 0f00 	cmp.w	lr, #0
     710:	d005      	beq.n	71e <cbvprintf+0x8a>
     712:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     716:	f040 0008 	orr.w	r0, r0, #8
     71a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     71e:	b12e      	cbz	r6, 72c <cbvprintf+0x98>
     720:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     724:	f040 0010 	orr.w	r0, r0, #16
     728:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     72c:	f1bc 0f00 	cmp.w	ip, #0
     730:	d005      	beq.n	73e <cbvprintf+0xaa>
     732:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     736:	f040 0020 	orr.w	r0, r0, #32
     73a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     73e:	b12a      	cbz	r2, 74c <cbvprintf+0xb8>
     740:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     748:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     74c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     750:	f002 0044 	and.w	r0, r2, #68	; 0x44
     754:	2844      	cmp	r0, #68	; 0x44
     756:	d103      	bne.n	760 <cbvprintf+0xcc>
		conv->flag_zero = false;
     758:	f36f 1286 	bfc	r2, #6, #1
     75c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     760:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     764:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     766:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     76a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     76e:	d17b      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
		conv->width_star = true;
     770:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     774:	1c4b      	adds	r3, r1, #1
     776:	f042 0201 	orr.w	r2, r2, #1
     77a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     77e:	781a      	ldrb	r2, [r3, #0]
     780:	2a2e      	cmp	r2, #46	; 0x2e
     782:	bf0c      	ite	eq
     784:	2101      	moveq	r1, #1
     786:	2100      	movne	r1, #0
     788:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     78c:	f361 0241 	bfi	r2, r1, #1, #1
     790:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     794:	d174      	bne.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
	if (*sp == '*') {
     796:	785a      	ldrb	r2, [r3, #1]
     798:	2a2a      	cmp	r2, #42	; 0x2a
     79a:	d06a      	beq.n	872 <CONFIG_ISR_STACK_SIZE+0x72>
	size_t val = 0;
     79c:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     79e:	260a      	movs	r6, #10
     7a0:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     7a2:	4618      	mov	r0, r3
     7a4:	f810 2b01 	ldrb.w	r2, [r0], #1
     7a8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     7ac:	2f09      	cmp	r7, #9
     7ae:	f240 808e 	bls.w	8ce <CONFIG_ISR_STACK_SIZE+0xce>
	conv->unsupported |= ((conv->prec_value < 0)
     7b2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     7b6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     7b8:	f3c2 0040 	ubfx	r0, r2, #1, #1
     7bc:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     7c0:	f361 0241 	bfi	r2, r1, #1, #1
     7c4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     7c8:	e05a      	b.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
		conv->specifier = *sp++;
     7ca:	f10a 0702 	add.w	r7, sl, #2
     7ce:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     7d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     7d6:	07d9      	lsls	r1, r3, #31
     7d8:	f140 8149 	bpl.w	a6e <CONFIG_ISR_STACK_SIZE+0x26e>
			width = va_arg(ap, int);
     7dc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     7e0:	f1b9 0f00 	cmp.w	r9, #0
     7e4:	da07      	bge.n	7f6 <cbvprintf+0x162>
				conv->flag_dash = true;
     7e6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
     7ea:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     7ee:	f042 0204 	orr.w	r2, r2, #4
     7f2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
     7f6:	075a      	lsls	r2, r3, #29
     7f8:	f140 8142 	bpl.w	a80 <CONFIG_ISR_STACK_SIZE+0x280>
			int arg = va_arg(ap, int);
     7fc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     800:	f1b8 0f00 	cmp.w	r8, #0
     804:	f280 8141 	bge.w	a8a <CONFIG_ISR_STACK_SIZE+0x28a>
				conv->prec_present = false;
     808:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     80c:	f36f 0341 	bfc	r3, #1, #1
     810:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     814:	f04f 38ff 	mov.w	r8, #4294967295
     818:	e137      	b.n	a8a <CONFIG_ISR_STACK_SIZE+0x28a>
		switch (*sp) {
     81a:	2b2d      	cmp	r3, #45	; 0x2d
     81c:	d00c      	beq.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
     81e:	2b30      	cmp	r3, #48	; 0x30
     820:	f47f af6d 	bne.w	6fe <cbvprintf+0x6a>
			conv->flag_zero = true;
     824:	2201      	movs	r2, #1
	} while (loop);
     826:	e75c      	b.n	6e2 <cbvprintf+0x4e>
			conv->flag_plus = true;
     828:	f04f 0e01 	mov.w	lr, #1
     82c:	e759      	b.n	6e2 <cbvprintf+0x4e>
			conv->flag_space = true;
     82e:	2601      	movs	r6, #1
     830:	e757      	b.n	6e2 <cbvprintf+0x4e>
			conv->flag_hash = true;
     832:	f04f 0c01 	mov.w	ip, #1
     836:	e754      	b.n	6e2 <cbvprintf+0x4e>
		switch (*sp) {
     838:	2001      	movs	r0, #1
     83a:	e752      	b.n	6e2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     83c:	4633      	mov	r3, r6
     83e:	fb0c 0202 	mla	r2, ip, r2, r0
     842:	3a30      	subs	r2, #48	; 0x30
     844:	461e      	mov	r6, r3
     846:	f816 0b01 	ldrb.w	r0, [r6], #1
     84a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     84e:	2f09      	cmp	r7, #9
     850:	d9f4      	bls.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
	if (sp != wp) {
     852:	4299      	cmp	r1, r3
     854:	d093      	beq.n	77e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     856:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     85a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     85c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     85e:	f362 0141 	bfi	r1, r2, #1, #1
     862:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     866:	e78a      	b.n	77e <cbvprintf+0xea>
     868:	460b      	mov	r3, r1
	size_t val = 0;
     86a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     86c:	f04f 0c0a 	mov.w	ip, #10
     870:	e7e8      	b.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
		conv->prec_star = true;
     872:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     876:	3302      	adds	r3, #2
		conv->prec_star = true;
     878:	f042 0204 	orr.w	r2, r2, #4
     87c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
     880:	461f      	mov	r7, r3
     882:	f817 2b01 	ldrb.w	r2, [r7], #1
     886:	2a6c      	cmp	r2, #108	; 0x6c
     888:	d041      	beq.n	90e <CONFIG_ISR_STACK_SIZE+0x10e>
     88a:	d825      	bhi.n	8d8 <CONFIG_ISR_STACK_SIZE+0xd8>
     88c:	2a68      	cmp	r2, #104	; 0x68
     88e:	d02b      	beq.n	8e8 <CONFIG_ISR_STACK_SIZE+0xe8>
     890:	2a6a      	cmp	r2, #106	; 0x6a
     892:	d046      	beq.n	922 <CONFIG_ISR_STACK_SIZE+0x122>
     894:	2a4c      	cmp	r2, #76	; 0x4c
     896:	d04c      	beq.n	932 <CONFIG_ISR_STACK_SIZE+0x132>
     898:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     89a:	f817 2b01 	ldrb.w	r2, [r7], #1
     89e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
     8a2:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     8a4:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     8a8:	f200 80d9 	bhi.w	a5e <CONFIG_ISR_STACK_SIZE+0x25e>
     8ac:	2a57      	cmp	r2, #87	; 0x57
     8ae:	d84d      	bhi.n	94c <CONFIG_ISR_STACK_SIZE+0x14c>
     8b0:	2a41      	cmp	r2, #65	; 0x41
     8b2:	d003      	beq.n	8bc <CONFIG_ISR_STACK_SIZE+0xbc>
     8b4:	3a45      	subs	r2, #69	; 0x45
     8b6:	2a02      	cmp	r2, #2
     8b8:	f200 80d1 	bhi.w	a5e <CONFIG_ISR_STACK_SIZE+0x25e>
		conv->specifier_cat = SPECIFIER_FP;
     8bc:	2204      	movs	r2, #4
     8be:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     8c2:	f362 0302 	bfi	r3, r2, #0, #3
     8c6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     8ca:	2301      	movs	r3, #1
			break;
     8cc:	e09e      	b.n	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
		val = 10U * val + *sp++ - '0';
     8ce:	fb06 2101 	mla	r1, r6, r1, r2
     8d2:	4603      	mov	r3, r0
     8d4:	3930      	subs	r1, #48	; 0x30
     8d6:	e764      	b.n	7a2 <cbvprintf+0x10e>
	switch (*sp) {
     8d8:	2a74      	cmp	r2, #116	; 0x74
     8da:	d026      	beq.n	92a <CONFIG_ISR_STACK_SIZE+0x12a>
     8dc:	2a7a      	cmp	r2, #122	; 0x7a
     8de:	d1db      	bne.n	898 <CONFIG_ISR_STACK_SIZE+0x98>
		conv->length_mod = LENGTH_Z;
     8e0:	2206      	movs	r2, #6
     8e2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8e6:	e00d      	b.n	904 <CONFIG_ISR_STACK_SIZE+0x104>
		if (*++sp == 'h') {
     8e8:	785a      	ldrb	r2, [r3, #1]
     8ea:	2a68      	cmp	r2, #104	; 0x68
     8ec:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     8f0:	d106      	bne.n	900 <CONFIG_ISR_STACK_SIZE+0x100>
			conv->length_mod = LENGTH_HH;
     8f2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     8f4:	f361 02c6 	bfi	r2, r1, #3, #4
     8f8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     8fc:	1c9f      	adds	r7, r3, #2
     8fe:	e7cc      	b.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
			conv->length_mod = LENGTH_H;
     900:	4613      	mov	r3, r2
     902:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     904:	f362 03c6 	bfi	r3, r2, #3, #4
     908:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     90c:	e7c5      	b.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
		if (*++sp == 'l') {
     90e:	785a      	ldrb	r2, [r3, #1]
     910:	2a6c      	cmp	r2, #108	; 0x6c
     912:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     916:	d101      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
			conv->length_mod = LENGTH_LL;
     918:	2104      	movs	r1, #4
     91a:	e7eb      	b.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
			conv->length_mod = LENGTH_L;
     91c:	4613      	mov	r3, r2
     91e:	2203      	movs	r2, #3
     920:	e7f0      	b.n	904 <CONFIG_ISR_STACK_SIZE+0x104>
		conv->length_mod = LENGTH_J;
     922:	2205      	movs	r2, #5
     924:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     928:	e7ec      	b.n	904 <CONFIG_ISR_STACK_SIZE+0x104>
		conv->length_mod = LENGTH_T;
     92a:	2207      	movs	r2, #7
     92c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     930:	e7e8      	b.n	904 <CONFIG_ISR_STACK_SIZE+0x104>
		conv->unsupported = true;
     932:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     936:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     93a:	f023 0302 	bic.w	r3, r3, #2
     93e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     942:	f043 0302 	orr.w	r3, r3, #2
     946:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     94a:	e7a6      	b.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
     94c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     950:	2920      	cmp	r1, #32
     952:	f200 8084 	bhi.w	a5e <CONFIG_ISR_STACK_SIZE+0x25e>
     956:	a001      	add	r0, pc, #4	; (adr r0, 95c <CONFIG_ISR_STACK_SIZE+0x15c>)
     958:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     95c:	00000a21 	.word	0x00000a21
     960:	00000a5f 	.word	0x00000a5f
     964:	00000a5f 	.word	0x00000a5f
     968:	00000a5f 	.word	0x00000a5f
     96c:	00000a5f 	.word	0x00000a5f
     970:	00000a5f 	.word	0x00000a5f
     974:	00000a5f 	.word	0x00000a5f
     978:	00000a5f 	.word	0x00000a5f
     97c:	00000a5f 	.word	0x00000a5f
     980:	000008bd 	.word	0x000008bd
     984:	00000a5f 	.word	0x00000a5f
     988:	00000a21 	.word	0x00000a21
     98c:	000009e1 	.word	0x000009e1
     990:	000008bd 	.word	0x000008bd
     994:	000008bd 	.word	0x000008bd
     998:	000008bd 	.word	0x000008bd
     99c:	00000a5f 	.word	0x00000a5f
     9a0:	000009e1 	.word	0x000009e1
     9a4:	00000a5f 	.word	0x00000a5f
     9a8:	00000a5f 	.word	0x00000a5f
     9ac:	00000a5f 	.word	0x00000a5f
     9b0:	00000a5f 	.word	0x00000a5f
     9b4:	00000a29 	.word	0x00000a29
     9b8:	00000a21 	.word	0x00000a21
     9bc:	00000a45 	.word	0x00000a45
     9c0:	00000a5f 	.word	0x00000a5f
     9c4:	00000a5f 	.word	0x00000a5f
     9c8:	00000a45 	.word	0x00000a45
     9cc:	00000a5f 	.word	0x00000a5f
     9d0:	00000a21 	.word	0x00000a21
     9d4:	00000a5f 	.word	0x00000a5f
     9d8:	00000a5f 	.word	0x00000a5f
     9dc:	00000a21 	.word	0x00000a21
		conv->specifier_cat = SPECIFIER_SINT;
     9e0:	2001      	movs	r0, #1
     9e2:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     9e6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     9ea:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9ee:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     9f0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     9f4:	bf02      	ittt	eq
     9f6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     9fa:	f041 0101 	orreq.w	r1, r1, #1
     9fe:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     a02:	2a63      	cmp	r2, #99	; 0x63
     a04:	d131      	bne.n	a6a <CONFIG_ISR_STACK_SIZE+0x26a>
			unsupported = (conv->length_mod != LENGTH_NONE);
     a06:	3b00      	subs	r3, #0
     a08:	bf18      	it	ne
     a0a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     a0c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     a10:	f3c2 0140 	ubfx	r1, r2, #1, #1
     a14:	430b      	orrs	r3, r1
     a16:	f363 0241 	bfi	r2, r3, #1, #1
     a1a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     a1e:	e6d8      	b.n	7d2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     a20:	2002      	movs	r0, #2
     a22:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     a26:	e7de      	b.n	9e6 <CONFIG_ISR_STACK_SIZE+0x1e6>
		conv->specifier_cat = SPECIFIER_PTR;
     a28:	2103      	movs	r1, #3
     a2a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     a2e:	f003 0378 	and.w	r3, r3, #120	; 0x78
     a32:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     a36:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     a3a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     a3c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     a40:	4143      	adcs	r3, r0
     a42:	e7e3      	b.n	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
		conv->specifier_cat = SPECIFIER_PTR;
     a44:	2103      	movs	r1, #3
     a46:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     a4a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     a4e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     a52:	bf14      	ite	ne
     a54:	2301      	movne	r3, #1
     a56:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
     a58:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     a5c:	e7d6      	b.n	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
		conv->invalid = true;
     a5e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     a62:	f043 0301 	orr.w	r3, r3, #1
     a66:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     a6a:	2300      	movs	r3, #0
     a6c:	e7ce      	b.n	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
		} else if (conv->width_present) {
     a6e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     a72:	2a00      	cmp	r2, #0
		int width = -1;
     a74:	bfac      	ite	ge
     a76:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
     a7a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
     a7e:	e6ba      	b.n	7f6 <cbvprintf+0x162>
		} else if (conv->prec_present) {
     a80:	079b      	lsls	r3, r3, #30
     a82:	f57f aec7 	bpl.w	814 <CONFIG_ISR_STACK_SIZE+0x14>
			precision = conv->prec_value;
     a86:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
     a8a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     a8c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     a90:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
     a94:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
     a98:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     a9c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     a9e:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     aa2:	d136      	bne.n	b12 <CONFIG_ISR_STACK_SIZE+0x312>
			switch (length_mod) {
     aa4:	1ed3      	subs	r3, r2, #3
     aa6:	2b04      	cmp	r3, #4
     aa8:	d820      	bhi.n	aec <CONFIG_ISR_STACK_SIZE+0x2ec>
     aaa:	e8df f003 	tbb	[pc, r3]
     aae:	0703      	.short	0x0703
     ab0:	1f07      	.short	0x1f07
     ab2:	1f          	.byte	0x1f
     ab3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     ab4:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     ab8:	17c1      	asrs	r1, r0, #31
     aba:	e004      	b.n	ac6 <CONFIG_ISR_STACK_SIZE+0x2c6>
					(sint_value_type)va_arg(ap, intmax_t);
     abc:	3407      	adds	r4, #7
     abe:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     ac2:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     ac6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     aca:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     ace:	f013 0603 	ands.w	r6, r3, #3
     ad2:	d054      	beq.n	b7e <CONFIG_ISR_STACK_SIZE+0x37e>
			OUTS(sp, fp);
     ad4:	463b      	mov	r3, r7
     ad6:	4652      	mov	r2, sl
     ad8:	4659      	mov	r1, fp
     ada:	9802      	ldr	r0, [sp, #8]
     adc:	f003 fb1f 	bl	411e <outs>
     ae0:	2800      	cmp	r0, #0
     ae2:	f2c0 8143 	blt.w	d6c <CONFIG_ISR_STACK_SIZE+0x56c>
     ae6:	4405      	add	r5, r0
			continue;
     ae8:	46ba      	mov	sl, r7
     aea:	e5db      	b.n	6a4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     aec:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     af0:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     af2:	ea4f 71e0 	mov.w	r1, r0, asr #31
     af6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     afa:	d105      	bne.n	b08 <CONFIG_ISR_STACK_SIZE+0x308>
				value->uint = (unsigned char)value->uint;
     afc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     b00:	930a      	str	r3, [sp, #40]	; 0x28
     b02:	2300      	movs	r3, #0
     b04:	930b      	str	r3, [sp, #44]	; 0x2c
     b06:	e7e0      	b.n	aca <CONFIG_ISR_STACK_SIZE+0x2ca>
			} else if (length_mod == LENGTH_H) {
     b08:	2a02      	cmp	r2, #2
     b0a:	d1de      	bne.n	aca <CONFIG_ISR_STACK_SIZE+0x2ca>
				value->sint = (short)value->sint;
     b0c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     b10:	e7d2      	b.n	ab8 <CONFIG_ISR_STACK_SIZE+0x2b8>
		} else if (specifier_cat == SPECIFIER_UINT) {
     b12:	2b02      	cmp	r3, #2
     b14:	d123      	bne.n	b5e <CONFIG_ISR_STACK_SIZE+0x35e>
			switch (length_mod) {
     b16:	1ed3      	subs	r3, r2, #3
     b18:	2b04      	cmp	r3, #4
     b1a:	d813      	bhi.n	b44 <CONFIG_ISR_STACK_SIZE+0x344>
     b1c:	e8df f003 	tbb	[pc, r3]
     b20:	120a0a03 	.word	0x120a0a03
     b24:	12          	.byte	0x12
     b25:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
     b26:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
     b28:	6820      	ldr	r0, [r4, #0]
     b2a:	1d23      	adds	r3, r4, #4
     b2c:	900a      	str	r0, [sp, #40]	; 0x28
     b2e:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     b30:	461c      	mov	r4, r3
     b32:	e7ca      	b.n	aca <CONFIG_ISR_STACK_SIZE+0x2ca>
					(uint_value_type)va_arg(ap,
     b34:	3407      	adds	r4, #7
     b36:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     b3a:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     b3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     b42:	e7f5      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
					(uint_value_type)va_arg(ap, size_t);
     b44:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     b48:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     b4a:	930a      	str	r3, [sp, #40]	; 0x28
     b4c:	f04f 0300 	mov.w	r3, #0
     b50:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     b52:	d0d3      	beq.n	afc <CONFIG_ISR_STACK_SIZE+0x2fc>
			} else if (length_mod == LENGTH_H) {
     b54:	2a02      	cmp	r2, #2
     b56:	d1b8      	bne.n	aca <CONFIG_ISR_STACK_SIZE+0x2ca>
				value->uint = (unsigned short)value->uint;
     b58:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     b5c:	e7d0      	b.n	b00 <CONFIG_ISR_STACK_SIZE+0x300>
		} else if (specifier_cat == SPECIFIER_FP) {
     b5e:	2b04      	cmp	r3, #4
     b60:	d107      	bne.n	b72 <CONFIG_ISR_STACK_SIZE+0x372>
			if (length_mod == LENGTH_UPPER_L) {
     b62:	3407      	adds	r4, #7
     b64:	f024 0407 	bic.w	r4, r4, #7
     b68:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     b6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     b70:	e7ab      	b.n	aca <CONFIG_ISR_STACK_SIZE+0x2ca>
		} else if (specifier_cat == SPECIFIER_PTR) {
     b72:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     b74:	bf04      	itt	eq
     b76:	f854 3b04 	ldreq.w	r3, [r4], #4
     b7a:	930a      	streq	r3, [sp, #40]	; 0x28
     b7c:	e7a5      	b.n	aca <CONFIG_ISR_STACK_SIZE+0x2ca>
		switch (conv->specifier) {
     b7e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     b82:	2878      	cmp	r0, #120	; 0x78
     b84:	d8b0      	bhi.n	ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
     b86:	2862      	cmp	r0, #98	; 0x62
     b88:	d822      	bhi.n	bd0 <CONFIG_ISR_STACK_SIZE+0x3d0>
     b8a:	2825      	cmp	r0, #37	; 0x25
     b8c:	f43f ad93 	beq.w	6b6 <cbvprintf+0x22>
     b90:	2858      	cmp	r0, #88	; 0x58
     b92:	d1a9      	bne.n	ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
			bps = encode_uint(value->uint, conv, buf, bpe);
     b94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     b98:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     b9c:	9300      	str	r3, [sp, #0]
     b9e:	aa0c      	add	r2, sp, #48	; 0x30
     ba0:	ab04      	add	r3, sp, #16
     ba2:	f003 fa71 	bl	4088 <encode_uint>
     ba6:	4682      	mov	sl, r0
			if (precision >= 0) {
     ba8:	f1b8 0f00 	cmp.w	r8, #0
     bac:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     bb0:	db0c      	blt.n	bcc <CONFIG_ISR_STACK_SIZE+0x3cc>
				conv->flag_zero = false;
     bb2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     bb6:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     bba:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     bbe:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     bc0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     bc4:	d902      	bls.n	bcc <CONFIG_ISR_STACK_SIZE+0x3cc>
					conv->pad0_value = precision - (int)len;
     bc6:	eba8 0303 	sub.w	r3, r8, r3
     bca:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     bcc:	4680      	mov	r8, r0
     bce:	e03d      	b.n	c4c <CONFIG_ISR_STACK_SIZE+0x44c>
     bd0:	3863      	subs	r0, #99	; 0x63
     bd2:	2815      	cmp	r0, #21
     bd4:	d888      	bhi.n	ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
     bd6:	a101      	add	r1, pc, #4	; (adr r1, bdc <CONFIG_ISR_STACK_SIZE+0x3dc>)
     bd8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     bdc:	00000c5d 	.word	0x00000c5d
     be0:	00000cc1 	.word	0x00000cc1
     be4:	00000ae9 	.word	0x00000ae9
     be8:	00000ae9 	.word	0x00000ae9
     bec:	00000ae9 	.word	0x00000ae9
     bf0:	00000ae9 	.word	0x00000ae9
     bf4:	00000cc1 	.word	0x00000cc1
     bf8:	00000ae9 	.word	0x00000ae9
     bfc:	00000ae9 	.word	0x00000ae9
     c00:	00000ae9 	.word	0x00000ae9
     c04:	00000ae9 	.word	0x00000ae9
     c08:	00000d1f 	.word	0x00000d1f
     c0c:	00000ced 	.word	0x00000ced
     c10:	00000cf1 	.word	0x00000cf1
     c14:	00000ae9 	.word	0x00000ae9
     c18:	00000ae9 	.word	0x00000ae9
     c1c:	00000c35 	.word	0x00000c35
     c20:	00000ae9 	.word	0x00000ae9
     c24:	00000ced 	.word	0x00000ced
     c28:	00000ae9 	.word	0x00000ae9
     c2c:	00000ae9 	.word	0x00000ae9
     c30:	00000ced 	.word	0x00000ced
			if (precision >= 0) {
     c34:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     c38:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     c3c:	db0a      	blt.n	c54 <CONFIG_ISR_STACK_SIZE+0x454>
				len = strnlen(bps, precision);
     c3e:	4641      	mov	r1, r8
     c40:	4650      	mov	r0, sl
     c42:	f003 fb61 	bl	4308 <strnlen>
		char sign = 0;
     c46:	2600      	movs	r6, #0
			bpe = bps + len;
     c48:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
     c4c:	f1ba 0f00 	cmp.w	sl, #0
     c50:	d10c      	bne.n	c6c <CONFIG_ISR_STACK_SIZE+0x46c>
     c52:	e749      	b.n	ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
				len = strlen(bps);
     c54:	4650      	mov	r0, sl
     c56:	f003 fb50 	bl	42fa <strlen>
     c5a:	e7f4      	b.n	c46 <CONFIG_ISR_STACK_SIZE+0x446>
			break;
     c5c:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
     c60:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c64:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
     c68:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     c6c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     c70:	b106      	cbz	r6, c74 <CONFIG_ISR_STACK_SIZE+0x474>
			nj_len += 1U;
     c72:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     c74:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     c78:	06d0      	lsls	r0, r2, #27
     c7a:	d56b      	bpl.n	d54 <CONFIG_ISR_STACK_SIZE+0x554>
			nj_len += 2U;
     c7c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     c7e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     c80:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     c82:	bf48      	it	mi
     c84:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     c86:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     c88:	bf48      	it	mi
     c8a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     c8c:	f1b9 0f00 	cmp.w	r9, #0
     c90:	dd79      	ble.n	d86 <CONFIG_ISR_STACK_SIZE+0x586>
			if (!conv->flag_dash) {
     c92:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     c96:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     c9a:	f3c2 0380 	ubfx	r3, r2, #2, #1
     c9e:	9303      	str	r3, [sp, #12]
     ca0:	0753      	lsls	r3, r2, #29
     ca2:	d470      	bmi.n	d86 <CONFIG_ISR_STACK_SIZE+0x586>
				if (conv->flag_zero) {
     ca4:	0650      	lsls	r0, r2, #25
     ca6:	d564      	bpl.n	d72 <CONFIG_ISR_STACK_SIZE+0x572>
					if (sign != 0) {
     ca8:	b146      	cbz	r6, cbc <CONFIG_ISR_STACK_SIZE+0x4bc>
						OUTC(sign);
     caa:	4659      	mov	r1, fp
     cac:	4630      	mov	r0, r6
     cae:	9b02      	ldr	r3, [sp, #8]
     cb0:	4798      	blx	r3
     cb2:	2800      	cmp	r0, #0
     cb4:	db5a      	blt.n	d6c <CONFIG_ISR_STACK_SIZE+0x56c>
						sign = 0;
     cb6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     cb8:	3501      	adds	r5, #1
						sign = 0;
     cba:	461e      	mov	r6, r3
					pad = '0';
     cbc:	2330      	movs	r3, #48	; 0x30
     cbe:	e059      	b.n	d74 <CONFIG_ISR_STACK_SIZE+0x574>
			if (conv->flag_plus) {
     cc0:	071e      	lsls	r6, r3, #28
     cc2:	d411      	bmi.n	ce8 <CONFIG_ISR_STACK_SIZE+0x4e8>
				sign = ' ';
     cc4:	f013 0610 	ands.w	r6, r3, #16
     cc8:	bf18      	it	ne
     cca:	2620      	movne	r6, #32
			if (value->sint < 0) {
     ccc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     cd0:	2a00      	cmp	r2, #0
     cd2:	f173 0100 	sbcs.w	r1, r3, #0
     cd6:	f6bf af5d 	bge.w	b94 <CONFIG_ISR_STACK_SIZE+0x394>
				value->uint = (uint_value_type)-value->sint;
     cda:	4252      	negs	r2, r2
     cdc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
     ce0:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
     ce2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     ce6:	e755      	b.n	b94 <CONFIG_ISR_STACK_SIZE+0x394>
				sign = '+';
     ce8:	262b      	movs	r6, #43	; 0x2b
     cea:	e7ef      	b.n	ccc <CONFIG_ISR_STACK_SIZE+0x4cc>
		switch (conv->specifier) {
     cec:	2600      	movs	r6, #0
     cee:	e751      	b.n	b94 <CONFIG_ISR_STACK_SIZE+0x394>
			if (value->ptr != NULL) {
     cf0:	980a      	ldr	r0, [sp, #40]	; 0x28
     cf2:	b348      	cbz	r0, d48 <CONFIG_ISR_STACK_SIZE+0x548>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     cf4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     cf8:	9300      	str	r3, [sp, #0]
     cfa:	2100      	movs	r1, #0
     cfc:	ab04      	add	r3, sp, #16
     cfe:	aa0c      	add	r2, sp, #48	; 0x30
     d00:	f003 f9c2 	bl	4088 <encode_uint>
				conv->altform_0c = true;
     d04:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d08:	4682      	mov	sl, r0
				conv->altform_0c = true;
     d0a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     d0e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     d12:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
     d16:	2600      	movs	r6, #0
				conv->altform_0c = true;
     d18:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
     d1c:	e744      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
				store_count(conv, value->ptr, count);
     d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     d20:	2a07      	cmp	r2, #7
     d22:	f63f aee1 	bhi.w	ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
     d26:	e8df f002 	tbb	[pc, r2]
     d2a:	040d      	.short	0x040d
     d2c:	08080d06 	.word	0x08080d06
     d30:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     d32:	701d      	strb	r5, [r3, #0]
		break;
     d34:	e6d8      	b.n	ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
		*(short *)dp = (short)count;
     d36:	801d      	strh	r5, [r3, #0]
		break;
     d38:	e6d6      	b.n	ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
		*(intmax_t *)dp = (intmax_t)count;
     d3a:	4628      	mov	r0, r5
     d3c:	17e9      	asrs	r1, r5, #31
     d3e:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     d42:	e6d1      	b.n	ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     d44:	601d      	str	r5, [r3, #0]
		break;
     d46:	e6cf      	b.n	ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
			bpe = bps + 5;
     d48:	f8df 80c4 	ldr.w	r8, [pc, #196]	; e10 <CONFIG_ISR_STACK_SIZE+0x610>
     d4c:	4606      	mov	r6, r0
			bps = "(nil)";
     d4e:	f1a8 0a05 	sub.w	sl, r8, #5
     d52:	e78b      	b.n	c6c <CONFIG_ISR_STACK_SIZE+0x46c>
		} else if (conv->altform_0) {
     d54:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     d56:	bf48      	it	mi
     d58:	3301      	addmi	r3, #1
     d5a:	e790      	b.n	c7e <CONFIG_ISR_STACK_SIZE+0x47e>
					OUTC(pad);
     d5c:	4618      	mov	r0, r3
     d5e:	9303      	str	r3, [sp, #12]
     d60:	4659      	mov	r1, fp
     d62:	9b02      	ldr	r3, [sp, #8]
     d64:	4798      	blx	r3
     d66:	2800      	cmp	r0, #0
     d68:	9b03      	ldr	r3, [sp, #12]
     d6a:	da04      	bge.n	d76 <CONFIG_ISR_STACK_SIZE+0x576>
#undef OUTS
#undef OUTC
}
     d6c:	b011      	add	sp, #68	; 0x44
     d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     d72:	2320      	movs	r3, #32
     d74:	444d      	add	r5, r9
     d76:	464a      	mov	r2, r9
				while (width-- > 0) {
     d78:	2a00      	cmp	r2, #0
     d7a:	eba5 0109 	sub.w	r1, r5, r9
     d7e:	f109 39ff 	add.w	r9, r9, #4294967295
     d82:	dceb      	bgt.n	d5c <CONFIG_ISR_STACK_SIZE+0x55c>
     d84:	460d      	mov	r5, r1
		if (sign != 0) {
     d86:	b136      	cbz	r6, d96 <CONFIG_ISR_STACK_SIZE+0x596>
			OUTC(sign);
     d88:	4659      	mov	r1, fp
     d8a:	4630      	mov	r0, r6
     d8c:	9b02      	ldr	r3, [sp, #8]
     d8e:	4798      	blx	r3
     d90:	2800      	cmp	r0, #0
     d92:	dbeb      	blt.n	d6c <CONFIG_ISR_STACK_SIZE+0x56c>
     d94:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     d96:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d9a:	06d9      	lsls	r1, r3, #27
     d9c:	d401      	bmi.n	da2 <CONFIG_ISR_STACK_SIZE+0x5a2>
     d9e:	071a      	lsls	r2, r3, #28
     da0:	d506      	bpl.n	db0 <CONFIG_ISR_STACK_SIZE+0x5b0>
				OUTC('0');
     da2:	4659      	mov	r1, fp
     da4:	2030      	movs	r0, #48	; 0x30
     da6:	9b02      	ldr	r3, [sp, #8]
     da8:	4798      	blx	r3
     daa:	2800      	cmp	r0, #0
     dac:	dbde      	blt.n	d6c <CONFIG_ISR_STACK_SIZE+0x56c>
     dae:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     db0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     db4:	06db      	lsls	r3, r3, #27
     db6:	d507      	bpl.n	dc8 <CONFIG_ISR_STACK_SIZE+0x5c8>
				OUTC(conv->specifier);
     db8:	4659      	mov	r1, fp
     dba:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     dbe:	9b02      	ldr	r3, [sp, #8]
     dc0:	4798      	blx	r3
     dc2:	2800      	cmp	r0, #0
     dc4:	dbd2      	blt.n	d6c <CONFIG_ISR_STACK_SIZE+0x56c>
     dc6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     dc8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     dca:	442e      	add	r6, r5
     dcc:	1b73      	subs	r3, r6, r5
     dce:	2b00      	cmp	r3, #0
     dd0:	dc16      	bgt.n	e00 <CONFIG_ISR_STACK_SIZE+0x600>
			OUTS(bps, bpe);
     dd2:	4643      	mov	r3, r8
     dd4:	4652      	mov	r2, sl
     dd6:	4659      	mov	r1, fp
     dd8:	9802      	ldr	r0, [sp, #8]
     dda:	f003 f9a0 	bl	411e <outs>
     dde:	2800      	cmp	r0, #0
     de0:	dbc4      	blt.n	d6c <CONFIG_ISR_STACK_SIZE+0x56c>
     de2:	4405      	add	r5, r0
		while (width > 0) {
     de4:	44a9      	add	r9, r5
     de6:	eba9 0305 	sub.w	r3, r9, r5
     dea:	2b00      	cmp	r3, #0
     dec:	f77f ae7c 	ble.w	ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
			OUTC(' ');
     df0:	4659      	mov	r1, fp
     df2:	2020      	movs	r0, #32
     df4:	9b02      	ldr	r3, [sp, #8]
     df6:	4798      	blx	r3
     df8:	2800      	cmp	r0, #0
     dfa:	dbb7      	blt.n	d6c <CONFIG_ISR_STACK_SIZE+0x56c>
     dfc:	3501      	adds	r5, #1
			--width;
     dfe:	e7f2      	b.n	de6 <CONFIG_ISR_STACK_SIZE+0x5e6>
				OUTC('0');
     e00:	4659      	mov	r1, fp
     e02:	2030      	movs	r0, #48	; 0x30
     e04:	9b02      	ldr	r3, [sp, #8]
     e06:	4798      	blx	r3
     e08:	2800      	cmp	r0, #0
     e0a:	dbaf      	blt.n	d6c <CONFIG_ISR_STACK_SIZE+0x56c>
     e0c:	3501      	adds	r5, #1
     e0e:	e7dd      	b.n	dcc <CONFIG_ISR_STACK_SIZE+0x5cc>
     e10:	00004be8 	.word	0x00004be8

00000e14 <nordicsemi_nrf91_init>:
     e14:	f04f 0220 	mov.w	r2, #32
     e18:	f3ef 8311 	mrs	r3, BASEPRI
     e1c:	f382 8811 	msr	BASEPRI, r2
     e20:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     e24:	2101      	movs	r1, #1
     e26:	4a04      	ldr	r2, [pc, #16]	; (e38 <nordicsemi_nrf91_init+0x24>)
     e28:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
     e2c:	f383 8811 	msr	BASEPRI, r3
     e30:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     e34:	2000      	movs	r0, #0
     e36:	4770      	bx	lr
     e38:	50039000 	.word	0x50039000

00000e3c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     e3c:	b120      	cbz	r0, e48 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     e3e:	4b03      	ldr	r3, [pc, #12]	; (e4c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     e40:	0180      	lsls	r0, r0, #6
     e42:	f043 0301 	orr.w	r3, r3, #1
     e46:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     e48:	4770      	bx	lr
     e4a:	bf00      	nop
     e4c:	00004a50 	.word	0x00004a50

00000e50 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
     e50:	4604      	mov	r4, r0
     e52:	b508      	push	{r3, lr}
	__asm__ volatile(
     e54:	f04f 0220 	mov.w	r2, #32
     e58:	f3ef 8311 	mrs	r3, BASEPRI
     e5c:	f382 8811 	msr	BASEPRI, r2
     e60:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
     e64:	f003 fa0a 	bl	427c <sys_clock_disable>
#endif

	sys_arch_reboot(type);
     e68:	4620      	mov	r0, r4
     e6a:	f000 fd9f 	bl	19ac <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     e6e:	4803      	ldr	r0, [pc, #12]	; (e7c <sys_reboot+0x2c>)
     e70:	f002 ff6c 	bl	3d4c <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     e74:	f000 fc5a 	bl	172c <arch_cpu_idle>
     e78:	e7fc      	b.n	e74 <sys_reboot+0x24>
     e7a:	bf00      	nop
     e7c:	00004be9 	.word	0x00004be9

00000e80 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
     e80:	b510      	push	{r4, lr}
     e82:	4807      	ldr	r0, [pc, #28]	; (ea0 <uart_console_init+0x20>)
     e84:	f001 fd12 	bl	28ac <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
     e88:	4c06      	ldr	r4, [pc, #24]	; (ea4 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     e8a:	4b07      	ldr	r3, [pc, #28]	; (ea8 <uart_console_init+0x28>)
     e8c:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
     e8e:	4620      	mov	r0, r4
     e90:	f000 ff36 	bl	1d00 <__stdout_hook_install>
	__printk_hook_install(console_out);
     e94:	4620      	mov	r0, r4
     e96:	f7ff fb03 	bl	4a0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
     e9a:	2000      	movs	r0, #0
     e9c:	bd10      	pop	{r4, pc}
     e9e:	bf00      	nop
     ea0:	00004c12 	.word	0x00004c12
     ea4:	00000ead 	.word	0x00000ead
     ea8:	20000278 	.word	0x20000278

00000eac <console_out>:
	if ('\n' == c) {
     eac:	280a      	cmp	r0, #10
{
     eae:	b538      	push	{r3, r4, r5, lr}
     eb0:	4604      	mov	r4, r0
     eb2:	4d07      	ldr	r5, [pc, #28]	; (ed0 <console_out+0x24>)
	if ('\n' == c) {
     eb4:	d104      	bne.n	ec0 <console_out+0x14>
     eb6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
     eb8:	6883      	ldr	r3, [r0, #8]
     eba:	210d      	movs	r1, #13
     ebc:	685b      	ldr	r3, [r3, #4]
     ebe:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
     ec0:	6828      	ldr	r0, [r5, #0]
     ec2:	6883      	ldr	r3, [r0, #8]
     ec4:	b2e1      	uxtb	r1, r4
     ec6:	685b      	ldr	r3, [r3, #4]
     ec8:	4798      	blx	r3
}
     eca:	4620      	mov	r0, r4
     ecc:	bd38      	pop	{r3, r4, r5, pc}
     ece:	bf00      	nop
     ed0:	20000278 	.word	0x20000278

00000ed4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
     ed4:	4a0e      	ldr	r2, [pc, #56]	; (f10 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     ed6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
     ed8:	1a84      	subs	r4, r0, r2
{
     eda:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
     edc:	200c      	movs	r0, #12
{
     ede:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
     ee0:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
     ee2:	10a3      	asrs	r3, r4, #2
     ee4:	4c0b      	ldr	r4, [pc, #44]	; (f14 <onoff_stop+0x40>)
     ee6:	435c      	muls	r4, r3
     ee8:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
     eea:	fb00 2004 	mla	r0, r0, r4, r2
     eee:	4408      	add	r0, r1
     ef0:	f003 f937 	bl	4162 <set_off_state>
	if (err < 0) {
     ef4:	1e01      	subs	r1, r0, #0
     ef6:	db05      	blt.n	f04 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
     ef8:	4b07      	ldr	r3, [pc, #28]	; (f18 <onoff_stop+0x44>)
     efa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
     efe:	6863      	ldr	r3, [r4, #4]
     f00:	4798      	blx	r3
	return 0;
     f02:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
     f04:	4628      	mov	r0, r5
     f06:	4633      	mov	r3, r6
}
     f08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
     f0c:	4718      	bx	r3
     f0e:	bf00      	nop
     f10:	2000028c 	.word	0x2000028c
     f14:	b6db6db7 	.word	0xb6db6db7
     f18:	00004a6c 	.word	0x00004a6c

00000f1c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
     f20:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
     f22:	4e10      	ldr	r6, [pc, #64]	; (f64 <onoff_start+0x48>)
{
     f24:	4680      	mov	r8, r0
	size_t offset = (size_t)(mgr - data->mgr);
     f26:	1b84      	subs	r4, r0, r6
     f28:	10a3      	asrs	r3, r4, #2
     f2a:	4c0f      	ldr	r4, [pc, #60]	; (f68 <onoff_start+0x4c>)
{
     f2c:	460f      	mov	r7, r1
	size_t offset = (size_t)(mgr - data->mgr);
     f2e:	435c      	muls	r4, r3
     f30:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
     f32:	4365      	muls	r5, r4
     f34:	f105 0040 	add.w	r0, r5, #64	; 0x40
     f38:	2140      	movs	r1, #64	; 0x40
     f3a:	4430      	add	r0, r6
     f3c:	f003 f92a 	bl	4194 <set_starting_state>
	if (err < 0) {
     f40:	1e01      	subs	r1, r0, #0
     f42:	db09      	blt.n	f58 <onoff_start+0x3c>
	subdata->cb = cb;
     f44:	4a09      	ldr	r2, [pc, #36]	; (f6c <onoff_start+0x50>)
     f46:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
     f48:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
     f4c:	4b08      	ldr	r3, [pc, #32]	; (f70 <onoff_start+0x54>)
     f4e:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
     f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
     f56:	4718      	bx	r3
		notify(mgr, err);
     f58:	4640      	mov	r0, r8
     f5a:	463b      	mov	r3, r7
}
     f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
     f60:	4718      	bx	r3
     f62:	bf00      	nop
     f64:	2000028c 	.word	0x2000028c
     f68:	b6db6db7 	.word	0xb6db6db7
     f6c:	000041f7 	.word	0x000041f7
     f70:	00004a6c 	.word	0x00004a6c

00000f74 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
     f74:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     f76:	2200      	movs	r2, #0
     f78:	2101      	movs	r1, #1
{
     f7a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     f7c:	2005      	movs	r0, #5
     f7e:	f000 fb25 	bl	15cc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
     f82:	2005      	movs	r0, #5
     f84:	f000 fb04 	bl	1590 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
     f88:	480f      	ldr	r0, [pc, #60]	; (fc8 <clk_init+0x54>)
     f8a:	f001 fb21 	bl	25d0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
     f8e:	4b0f      	ldr	r3, [pc, #60]	; (fcc <clk_init+0x58>)
     f90:	4298      	cmp	r0, r3
     f92:	d115      	bne.n	fc0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
     f94:	f003 faca 	bl	452c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
     f98:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
     f9a:	490d      	ldr	r1, [pc, #52]	; (fd0 <clk_init+0x5c>)
     f9c:	4630      	mov	r0, r6
     f9e:	f002 ff31 	bl	3e04 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
     fa2:	2800      	cmp	r0, #0
     fa4:	db0b      	blt.n	fbe <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     fa6:	2501      	movs	r5, #1
     fa8:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
     faa:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
     fac:	4908      	ldr	r1, [pc, #32]	; (fd0 <clk_init+0x5c>)
     fae:	f104 001c 	add.w	r0, r4, #28
     fb2:	f002 ff27 	bl	3e04 <onoff_manager_init>
		if (err < 0) {
     fb6:	2800      	cmp	r0, #0
     fb8:	db01      	blt.n	fbe <clk_init+0x4a>
	}

	return 0;
     fba:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     fbc:	64e5      	str	r5, [r4, #76]	; 0x4c
}
     fbe:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
     fc0:	f06f 0004 	mvn.w	r0, #4
     fc4:	e7fb      	b.n	fbe <clk_init+0x4a>
     fc6:	bf00      	nop
     fc8:	00001009 	.word	0x00001009
     fcc:	0bad0000 	.word	0x0bad0000
     fd0:	00004a7c 	.word	0x00004a7c

00000fd4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
     fd4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
     fd6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
     fd8:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
     fda:	434b      	muls	r3, r1
     fdc:	4808      	ldr	r0, [pc, #32]	; (1000 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
     fde:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
     fe0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
     fe2:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
     fe4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
     fe8:	4418      	add	r0, r3
	sub_data->cb = NULL;
     fea:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
     fec:	f003 f8f0 	bl	41d0 <set_on_state>
	if (callback) {
     ff0:	b12d      	cbz	r5, ffe <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
     ff2:	4632      	mov	r2, r6
     ff4:	462b      	mov	r3, r5
}
     ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
     ffa:	4802      	ldr	r0, [pc, #8]	; (1004 <clkstarted_handle.constprop.0+0x30>)
     ffc:	4718      	bx	r3
}
     ffe:	bd70      	pop	{r4, r5, r6, pc}
    1000:	2000028c 	.word	0x2000028c
    1004:	200000bc 	.word	0x200000bc

00001008 <clock_event_handler>:
	switch (event) {
    1008:	b110      	cbz	r0, 1010 <clock_event_handler+0x8>
    100a:	2801      	cmp	r0, #1
    100c:	d004      	beq.n	1018 <clock_event_handler+0x10>
    100e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1010:	4b03      	ldr	r3, [pc, #12]	; (1020 <clock_event_handler+0x18>)
    1012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1014:	075b      	lsls	r3, r3, #29
    1016:	d101      	bne.n	101c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1018:	f7ff bfdc 	b.w	fd4 <clkstarted_handle.constprop.0>
}
    101c:	4770      	bx	lr
    101e:	bf00      	nop
    1020:	2000028c 	.word	0x2000028c

00001024 <generic_hfclk_start>:
{
    1024:	b508      	push	{r3, lr}
    1026:	f04f 0320 	mov.w	r3, #32
    102a:	f3ef 8111 	mrs	r1, BASEPRI
    102e:	f383 8811 	msr	BASEPRI, r3
    1032:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1036:	4a12      	ldr	r2, [pc, #72]	; (1080 <generic_hfclk_start+0x5c>)
    1038:	6813      	ldr	r3, [r2, #0]
    103a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    103e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    1042:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1044:	d00c      	beq.n	1060 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1046:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    104a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    104e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1052:	f013 0301 	ands.w	r3, r3, #1
    1056:	d003      	beq.n	1060 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1058:	480a      	ldr	r0, [pc, #40]	; (1084 <generic_hfclk_start+0x60>)
    105a:	f003 f8b9 	bl	41d0 <set_on_state>
			already_started = true;
    105e:	2301      	movs	r3, #1
	__asm__ volatile(
    1060:	f381 8811 	msr	BASEPRI, r1
    1064:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1068:	b123      	cbz	r3, 1074 <generic_hfclk_start+0x50>
}
    106a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    106e:	2000      	movs	r0, #0
    1070:	f7ff bfb0 	b.w	fd4 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1074:	2001      	movs	r0, #1
}
    1076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    107a:	f001 bab9 	b.w	25f0 <nrfx_clock_start>
    107e:	bf00      	nop
    1080:	200002dc 	.word	0x200002dc
    1084:	200002cc 	.word	0x200002cc

00001088 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1088:	4b07      	ldr	r3, [pc, #28]	; (10a8 <generic_hfclk_stop+0x20>)
    108a:	e8d3 2fef 	ldaex	r2, [r3]
    108e:	f022 0102 	bic.w	r1, r2, #2
    1092:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1096:	2800      	cmp	r0, #0
    1098:	d1f7      	bne.n	108a <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    109a:	07d3      	lsls	r3, r2, #31
    109c:	d402      	bmi.n	10a4 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    109e:	2001      	movs	r0, #1
    10a0:	f001 bad8 	b.w	2654 <nrfx_clock_stop>
}
    10a4:	4770      	bx	lr
    10a6:	bf00      	nop
    10a8:	200002dc 	.word	0x200002dc

000010ac <api_blocking_start>:
{
    10ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    10ae:	2200      	movs	r2, #0
    10b0:	2301      	movs	r3, #1
    10b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    10b6:	466b      	mov	r3, sp
    10b8:	4a08      	ldr	r2, [pc, #32]	; (10dc <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    10ba:	f8cd d000 	str.w	sp, [sp]
    10be:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    10c2:	f003 f8be 	bl	4242 <api_start>
	if (err < 0) {
    10c6:	2800      	cmp	r0, #0
    10c8:	db05      	blt.n	10d6 <api_blocking_start+0x2a>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    10ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    10ce:	2300      	movs	r3, #0
    10d0:	4668      	mov	r0, sp
    10d2:	f002 f9e1 	bl	3498 <z_impl_k_sem_take>
}
    10d6:	b005      	add	sp, #20
    10d8:	f85d fb04 	ldr.w	pc, [sp], #4
    10dc:	00004215 	.word	0x00004215

000010e0 <z_nrf_clock_control_lf_on>:
{
    10e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    10e4:	2201      	movs	r2, #1
    10e6:	4606      	mov	r6, r0
    10e8:	4939      	ldr	r1, [pc, #228]	; (11d0 <z_nrf_clock_control_lf_on+0xf0>)
    10ea:	e8d1 3fef 	ldaex	r3, [r1]
    10ee:	e8c1 2fe0 	stlex	r0, r2, [r1]
    10f2:	2800      	cmp	r0, #0
    10f4:	d1f9      	bne.n	10ea <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    10f6:	b933      	cbnz	r3, 1106 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    10f8:	4936      	ldr	r1, [pc, #216]	; (11d4 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    10fa:	4837      	ldr	r0, [pc, #220]	; (11d8 <z_nrf_clock_control_lf_on+0xf8>)
    10fc:	604b      	str	r3, [r1, #4]
    10fe:	60cb      	str	r3, [r1, #12]
    1100:	608a      	str	r2, [r1, #8]
    1102:	f002 fe92 	bl	3e2a <onoff_request>
	switch (start_mode) {
    1106:	1e73      	subs	r3, r6, #1
    1108:	2b01      	cmp	r3, #1
    110a:	d832      	bhi.n	1172 <z_nrf_clock_control_lf_on+0x92>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    110c:	2e01      	cmp	r6, #1
    110e:	d107      	bne.n	1120 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1110:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1114:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1118:	f003 0303 	and.w	r3, r3, #3
    111c:	2b02      	cmp	r3, #2
    111e:	d028      	beq.n	1172 <z_nrf_clock_control_lf_on+0x92>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1120:	f003 fafa 	bl	4718 <k_is_in_isr>
    1124:	4604      	mov	r4, r0
    1126:	b918      	cbnz	r0, 1130 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    1128:	4b2c      	ldr	r3, [pc, #176]	; (11dc <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    112a:	781b      	ldrb	r3, [r3, #0]
    112c:	2b00      	cmp	r3, #0
    112e:	d147      	bne.n	11c0 <z_nrf_clock_control_lf_on+0xe0>
	__asm__ volatile(
    1130:	f04f 0320 	mov.w	r3, #32
    1134:	f3ef 8511 	mrs	r5, BASEPRI
    1138:	f383 8811 	msr	BASEPRI, r3
    113c:	f3bf 8f6f 	isb	sy
    1140:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1142:	4f27      	ldr	r7, [pc, #156]	; (11e0 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1144:	f8df 809c 	ldr.w	r8, [pc, #156]	; 11e4 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1148:	f8df 909c 	ldr.w	r9, [pc, #156]	; 11e8 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    114c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1150:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1154:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1158:	03d2      	lsls	r2, r2, #15
    115a:	d50c      	bpl.n	1176 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    115c:	f003 0303 	and.w	r3, r3, #3
    1160:	2b02      	cmp	r3, #2
    1162:	d001      	beq.n	1168 <z_nrf_clock_control_lf_on+0x88>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1164:	2e01      	cmp	r6, #1
    1166:	d106      	bne.n	1176 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    1168:	b324      	cbz	r4, 11b4 <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
    116a:	f385 8811 	msr	BASEPRI, r5
    116e:	f3bf 8f6f 	isb	sy
}
    1172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    1176:	b1c4      	cbz	r4, 11aa <z_nrf_clock_control_lf_on+0xca>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1178:	4628      	mov	r0, r5
    117a:	f000 fae5 	bl	1748 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    117e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1182:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1186:	b2db      	uxtb	r3, r3
    1188:	2b01      	cmp	r3, #1
    118a:	d1df      	bne.n	114c <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    118c:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    118e:	2900      	cmp	r1, #0
    1190:	d0dc      	beq.n	114c <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1192:	2100      	movs	r1, #0
    1194:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1196:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    1198:	2102      	movs	r1, #2
    119a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    119e:	2220      	movs	r2, #32
    11a0:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    11a4:	f8c9 3000 	str.w	r3, [r9]
}
    11a8:	e7d0      	b.n	114c <z_nrf_clock_control_lf_on+0x6c>
	return z_impl_k_sleep(timeout);
    11aa:	2100      	movs	r1, #0
    11ac:	2021      	movs	r0, #33	; 0x21
    11ae:	f002 f92b 	bl	3408 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    11b2:	e7e4      	b.n	117e <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    11b4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    11b8:	2202      	movs	r2, #2
    11ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    11be:	e7d8      	b.n	1172 <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENCLR = mask;
    11c0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    11c4:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    11c6:	4605      	mov	r5, r0
    11c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    11cc:	e7b9      	b.n	1142 <z_nrf_clock_control_lf_on+0x62>
    11ce:	bf00      	nop
    11d0:	200002e0 	.word	0x200002e0
    11d4:	2000027c 	.word	0x2000027c
    11d8:	200002a8 	.word	0x200002a8
    11dc:	200008fa 	.word	0x200008fa
    11e0:	50005104 	.word	0x50005104
    11e4:	e000e100 	.word	0xe000e100
    11e8:	50005008 	.word	0x50005008

000011ec <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    11ec:	4a04      	ldr	r2, [pc, #16]	; (1200 <sys_clock_timeout_handler+0x14>)
    11ee:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    11f0:	1ac8      	subs	r0, r1, r3
    11f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    11f6:	4403      	add	r3, r0
    11f8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    11fa:	f002 bb1d 	b.w	3838 <z_clock_announce>
    11fe:	bf00      	nop
    1200:	200002f0 	.word	0x200002f0

00001204 <set_absolute_alarm>:
{
    1204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1208:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    120c:	f04f 0900 	mov.w	r9, #0
    1210:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    1212:	f100 0450 	add.w	r4, r0, #80	; 0x50
    1216:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
    121a:	00a4      	lsls	r4, r4, #2
    121c:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    1220:	b2a4      	uxth	r4, r4
    1222:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    1226:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    122a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1298 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    122e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1232:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1236:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    1238:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    123c:	eba3 030a 	sub.w	r3, r3, sl
    1240:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1244:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    1248:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    124a:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    124e:	d102      	bne.n	1256 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    1250:	2013      	movs	r0, #19
    1252:	f003 fa67 	bl	4724 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    1256:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    125a:	1aab      	subs	r3, r5, r2
    125c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    1260:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1264:	bf88      	it	hi
    1266:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1268:	f8c4 9000 	str.w	r9, [r4]
    126c:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    126e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    1272:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    1276:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    127a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    127e:	459a      	cmp	sl, r3
    1280:	d006      	beq.n	1290 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    1282:	1aeb      	subs	r3, r5, r3
    1284:	3b02      	subs	r3, #2
    1286:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    128a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    128e:	d801      	bhi.n	1294 <set_absolute_alarm+0x90>
}
    1290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    1294:	462b      	mov	r3, r5
    1296:	e7cf      	b.n	1238 <set_absolute_alarm+0x34>
    1298:	50015000 	.word	0x50015000

0000129c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    129e:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    12a0:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    12a2:	4e0f      	ldr	r6, [pc, #60]	; (12e0 <rtc_nrf_isr+0x44>)
    12a4:	4b0f      	ldr	r3, [pc, #60]	; (12e4 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
    12a6:	4a10      	ldr	r2, [pc, #64]	; (12e8 <rtc_nrf_isr+0x4c>)
    12a8:	4618      	mov	r0, r3
    12aa:	681d      	ldr	r5, [r3, #0]
    12ac:	b104      	cbz	r4, 12b0 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    12ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12b0:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    12b4:	03c9      	lsls	r1, r1, #15
    12b6:	d5fa      	bpl.n	12ae <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    12b8:	6831      	ldr	r1, [r6, #0]
    12ba:	2900      	cmp	r1, #0
    12bc:	d0f7      	beq.n	12ae <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    12be:	6034      	str	r4, [r6, #0]
    12c0:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    12c2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    12c6:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    12ca:	2401      	movs	r4, #1
    return p_reg->CC[ch];
    12cc:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
    12d0:	b125      	cbz	r5, 12dc <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
    12d2:	2000      	movs	r0, #0
    12d4:	685a      	ldr	r2, [r3, #4]
    12d6:	601f      	str	r7, [r3, #0]
    12d8:	47a8      	blx	r5
    12da:	e7e3      	b.n	12a4 <rtc_nrf_isr+0x8>
    12dc:	6005      	str	r5, [r0, #0]
}
    12de:	e7e6      	b.n	12ae <rtc_nrf_isr+0x12>
    12e0:	50015140 	.word	0x50015140
    12e4:	200002e4 	.word	0x200002e4
    12e8:	50015000 	.word	0x50015000

000012ec <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    12ec:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    12ee:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    12f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    12f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    12f8:	4d0d      	ldr	r5, [pc, #52]	; (1330 <z_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    12fa:	2101      	movs	r1, #1
    12fc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    1300:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1304:	4b0b      	ldr	r3, [pc, #44]	; (1334 <z_clock_driver_init+0x48>)
    1306:	2015      	movs	r0, #21
    1308:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    130c:	4622      	mov	r2, r4
    130e:	f000 f95d 	bl	15cc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    1312:	2015      	movs	r0, #21
    1314:	f000 f93c 	bl	1590 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1318:	2301      	movs	r3, #1
    131a:	4a07      	ldr	r2, [pc, #28]	; (1338 <z_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    131c:	2002      	movs	r0, #2
    131e:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    1320:	4a06      	ldr	r2, [pc, #24]	; (133c <z_clock_driver_init+0x50>)
    1322:	602b      	str	r3, [r5, #0]
    1324:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    1326:	f7ff fedb 	bl	10e0 <z_nrf_clock_control_lf_on>

	return 0;
}
    132a:	4620      	mov	r0, r4
    132c:	bd38      	pop	{r3, r4, r5, pc}
    132e:	bf00      	nop
    1330:	50015000 	.word	0x50015000
    1334:	e000e100 	.word	0xe000e100
    1338:	50015008 	.word	0x50015008
    133c:	200002ec 	.word	0x200002ec

00001340 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1340:	4b13      	ldr	r3, [pc, #76]	; (1390 <z_clock_set_timeout+0x50>)
    1342:	f1b0 3fff 	cmp.w	r0, #4294967295
    1346:	bf08      	it	eq
    1348:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    134a:	3801      	subs	r0, #1
    134c:	2800      	cmp	r0, #0
    134e:	dd1c      	ble.n	138a <z_clock_set_timeout+0x4a>
    1350:	4298      	cmp	r0, r3
    1352:	bfa8      	it	ge
    1354:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    1356:	4b0f      	ldr	r3, [pc, #60]	; (1394 <z_clock_set_timeout+0x54>)
    1358:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    135c:	4b0e      	ldr	r3, [pc, #56]	; (1398 <z_clock_set_timeout+0x58>)
    135e:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    1360:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    1362:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    1366:	bf18      	it	ne
    1368:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
    136a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    136e:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
    1370:	4a0a      	ldr	r2, [pc, #40]	; (139c <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1372:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    1374:	480a      	ldr	r0, [pc, #40]	; (13a0 <z_clock_set_timeout+0x60>)
    1376:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    1378:	2000      	movs	r0, #0
    137a:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    137c:	4a04      	ldr	r2, [pc, #16]	; (1390 <z_clock_set_timeout+0x50>)
    137e:	4293      	cmp	r3, r2
    1380:	bf94      	ite	ls
    1382:	18c9      	addls	r1, r1, r3
    1384:	1889      	addhi	r1, r1, r2
    1386:	f7ff bf3d 	b.w	1204 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    138a:	2000      	movs	r0, #0
    138c:	e7e3      	b.n	1356 <z_clock_set_timeout+0x16>
    138e:	bf00      	nop
    1390:	007fffff 	.word	0x007fffff
    1394:	50015000 	.word	0x50015000
    1398:	200002f0 	.word	0x200002f0
    139c:	200002e4 	.word	0x200002e4
    13a0:	000011ed 	.word	0x000011ed

000013a4 <z_clock_elapsed>:
	__asm__ volatile(
    13a4:	f04f 0220 	mov.w	r2, #32
    13a8:	f3ef 8311 	mrs	r3, BASEPRI
    13ac:	f382 8811 	msr	BASEPRI, r2
    13b0:	f3bf 8f6f 	isb	sy
    13b4:	4a06      	ldr	r2, [pc, #24]	; (13d0 <z_clock_elapsed+0x2c>)
    13b6:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    13ba:	4a06      	ldr	r2, [pc, #24]	; (13d4 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    13bc:	6812      	ldr	r2, [r2, #0]
    13be:	1a80      	subs	r0, r0, r2
    13c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    13c4:	f383 8811 	msr	BASEPRI, r3
    13c8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    13cc:	4770      	bx	lr
    13ce:	bf00      	nop
    13d0:	50015000 	.word	0x50015000
    13d4:	200002f0 	.word	0x200002f0

000013d8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    13d8:	4801      	ldr	r0, [pc, #4]	; (13e0 <nrf_cc3xx_platform_abort_init+0x8>)
    13da:	f002 bb0d 	b.w	39f8 <nrf_cc3xx_platform_set_abort>
    13de:	bf00      	nop
    13e0:	00004a88 	.word	0x00004a88

000013e4 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    13e4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    13e6:	b1b0      	cbz	r0, 1416 <mutex_unlock_platform+0x32>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    13e8:	6843      	ldr	r3, [r0, #4]
    13ea:	2b04      	cmp	r3, #4
    13ec:	d10d      	bne.n	140a <mutex_unlock_platform+0x26>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    13ee:	2200      	movs	r2, #0
    13f0:	6803      	ldr	r3, [r0, #0]
    13f2:	e8d3 1fef 	ldaex	r1, [r3]
    13f6:	2901      	cmp	r1, #1
    13f8:	d103      	bne.n	1402 <mutex_unlock_platform+0x1e>
    13fa:	e8c3 2fe0 	stlex	r0, r2, [r3]
    13fe:	2800      	cmp	r0, #0
    1400:	d1f7      	bne.n	13f2 <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1402:	4807      	ldr	r0, [pc, #28]	; (1420 <mutex_unlock_platform+0x3c>)
    1404:	bf08      	it	eq
    1406:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1408:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    140a:	b13b      	cbz	r3, 141c <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
    140c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    140e:	f001 fc3f 	bl	2c90 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1412:	2000      	movs	r0, #0
    1414:	e7f8      	b.n	1408 <mutex_unlock_platform+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1416:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    141a:	e7f5      	b.n	1408 <mutex_unlock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    141c:	4801      	ldr	r0, [pc, #4]	; (1424 <mutex_unlock_platform+0x40>)
    141e:	e7f3      	b.n	1408 <mutex_unlock_platform+0x24>
    1420:	ffff8fe9 	.word	0xffff8fe9
    1424:	ffff8fea 	.word	0xffff8fea

00001428 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1428:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    142a:	4604      	mov	r4, r0
    142c:	b918      	cbnz	r0, 1436 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    142e:	4b0d      	ldr	r3, [pc, #52]	; (1464 <mutex_free_platform+0x3c>)
    1430:	480d      	ldr	r0, [pc, #52]	; (1468 <mutex_free_platform+0x40>)
    1432:	685b      	ldr	r3, [r3, #4]
    1434:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1436:	6861      	ldr	r1, [r4, #4]
    1438:	2908      	cmp	r1, #8
    143a:	d00d      	beq.n	1458 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    143c:	f031 0304 	bics.w	r3, r1, #4
    1440:	d00a      	beq.n	1458 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1442:	f011 0102 	ands.w	r1, r1, #2
    1446:	d008      	beq.n	145a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1448:	4621      	mov	r1, r4
    144a:	4808      	ldr	r0, [pc, #32]	; (146c <mutex_free_platform+0x44>)
    144c:	f001 fb7e 	bl	2b4c <k_mem_slab_free>
        mutex->mutex = NULL;
    1450:	2300      	movs	r3, #0
    1452:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1454:	2300      	movs	r3, #0
    1456:	6063      	str	r3, [r4, #4]
}
    1458:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    145a:	2214      	movs	r2, #20
    145c:	6820      	ldr	r0, [r4, #0]
    145e:	f002 ff93 	bl	4388 <memset>
    1462:	e7f7      	b.n	1454 <mutex_free_platform+0x2c>
    1464:	2000005c 	.word	0x2000005c
    1468:	00004c29 	.word	0x00004c29
    146c:	200002f4 	.word	0x200002f4

00001470 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1470:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1472:	4604      	mov	r4, r0
    1474:	b918      	cbnz	r0, 147e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1476:	4b16      	ldr	r3, [pc, #88]	; (14d0 <mutex_init_platform+0x60>)
    1478:	4816      	ldr	r0, [pc, #88]	; (14d4 <mutex_init_platform+0x64>)
    147a:	685b      	ldr	r3, [r3, #4]
    147c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    147e:	6863      	ldr	r3, [r4, #4]
    1480:	2b04      	cmp	r3, #4
    1482:	d023      	beq.n	14cc <mutex_init_platform+0x5c>
    1484:	2b08      	cmp	r3, #8
    1486:	d021      	beq.n	14cc <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1488:	b9cb      	cbnz	r3, 14be <mutex_init_platform+0x4e>
    148a:	6823      	ldr	r3, [r4, #0]
    148c:	b9bb      	cbnz	r3, 14be <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    148e:	f04f 32ff 	mov.w	r2, #4294967295
    1492:	f04f 33ff 	mov.w	r3, #4294967295
    1496:	4621      	mov	r1, r4
    1498:	480f      	ldr	r0, [pc, #60]	; (14d8 <mutex_init_platform+0x68>)
    149a:	f001 fb25 	bl	2ae8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    149e:	b908      	cbnz	r0, 14a4 <mutex_init_platform+0x34>
    14a0:	6823      	ldr	r3, [r4, #0]
    14a2:	b91b      	cbnz	r3, 14ac <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    14a4:	4b0a      	ldr	r3, [pc, #40]	; (14d0 <mutex_init_platform+0x60>)
    14a6:	480d      	ldr	r0, [pc, #52]	; (14dc <mutex_init_platform+0x6c>)
    14a8:	685b      	ldr	r3, [r3, #4]
    14aa:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    14ac:	2214      	movs	r2, #20
    14ae:	2100      	movs	r1, #0
    14b0:	6820      	ldr	r0, [r4, #0]
    14b2:	f002 ff69 	bl	4388 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    14b6:	6863      	ldr	r3, [r4, #4]
    14b8:	f043 0302 	orr.w	r3, r3, #2
    14bc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    14be:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    14c0:	f003 f877 	bl	45b2 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    14c4:	6863      	ldr	r3, [r4, #4]
    14c6:	f043 0301 	orr.w	r3, r3, #1
    14ca:	6063      	str	r3, [r4, #4]
}
    14cc:	bd10      	pop	{r4, pc}
    14ce:	bf00      	nop
    14d0:	2000005c 	.word	0x2000005c
    14d4:	00004c29 	.word	0x00004c29
    14d8:	200002f4 	.word	0x200002f4
    14dc:	00004c4f 	.word	0x00004c4f

000014e0 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    14e0:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    14e2:	b1e8      	cbz	r0, 1520 <mutex_lock_platform+0x40>
    switch (mutex->flags) {
    14e4:	6843      	ldr	r3, [r0, #4]
    14e6:	2b04      	cmp	r3, #4
    14e8:	d10c      	bne.n	1504 <mutex_lock_platform+0x24>
    14ea:	2201      	movs	r2, #1
    14ec:	6803      	ldr	r3, [r0, #0]
    14ee:	e8d3 1fef 	ldaex	r1, [r3]
    14f2:	2900      	cmp	r1, #0
    14f4:	d103      	bne.n	14fe <mutex_lock_platform+0x1e>
    14f6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    14fa:	2800      	cmp	r0, #0
    14fc:	d1f7      	bne.n	14ee <mutex_lock_platform+0xe>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    14fe:	d10b      	bne.n	1518 <mutex_lock_platform+0x38>
    1500:	2000      	movs	r0, #0
}
    1502:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1504:	b153      	cbz	r3, 151c <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1506:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1508:	f04f 32ff 	mov.w	r2, #4294967295
    150c:	f04f 33ff 	mov.w	r3, #4294967295
    1510:	f001 fb46 	bl	2ba0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1514:	2800      	cmp	r0, #0
    1516:	d0f3      	beq.n	1500 <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1518:	4803      	ldr	r0, [pc, #12]	; (1528 <mutex_lock_platform+0x48>)
    151a:	e7f2      	b.n	1502 <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    151c:	4803      	ldr	r0, [pc, #12]	; (152c <mutex_lock_platform+0x4c>)
    151e:	e7f0      	b.n	1502 <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1520:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1524:	e7ed      	b.n	1502 <mutex_lock_platform+0x22>
    1526:	bf00      	nop
    1528:	ffff8fe9 	.word	0xffff8fe9
    152c:	ffff8fea 	.word	0xffff8fea

00001530 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1530:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1532:	4906      	ldr	r1, [pc, #24]	; (154c <nrf_cc3xx_platform_mutex_init+0x1c>)
    1534:	2340      	movs	r3, #64	; 0x40
    1536:	2214      	movs	r2, #20
    1538:	4805      	ldr	r0, [pc, #20]	; (1550 <nrf_cc3xx_platform_mutex_init+0x20>)
    153a:	f003 f81f 	bl	457c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    153e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1542:	4904      	ldr	r1, [pc, #16]	; (1554 <nrf_cc3xx_platform_mutex_init+0x24>)
    1544:	4804      	ldr	r0, [pc, #16]	; (1558 <nrf_cc3xx_platform_mutex_init+0x28>)
    1546:	f002 baa9 	b.w	3a9c <nrf_cc3xx_platform_set_mutexes>
    154a:	bf00      	nop
    154c:	20000310 	.word	0x20000310
    1550:	200002f4 	.word	0x200002f4
    1554:	00004aa0 	.word	0x00004aa0
    1558:	00004a90 	.word	0x00004a90

0000155c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    155c:	4a09      	ldr	r2, [pc, #36]	; (1584 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    155e:	490a      	ldr	r1, [pc, #40]	; (1588 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1560:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1562:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1564:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    1566:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1568:	4908      	ldr	r1, [pc, #32]	; (158c <arch_swap+0x30>)
    156a:	684b      	ldr	r3, [r1, #4]
    156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1570:	604b      	str	r3, [r1, #4]
    1572:	2300      	movs	r3, #0
    1574:	f383 8811 	msr	BASEPRI, r3
    1578:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    157c:	6893      	ldr	r3, [r2, #8]
}
    157e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    1580:	4770      	bx	lr
    1582:	bf00      	nop
    1584:	2000089c 	.word	0x2000089c
    1588:	00004b50 	.word	0x00004b50
    158c:	e000ed00 	.word	0xe000ed00

00001590 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1590:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1592:	2b00      	cmp	r3, #0
    1594:	db08      	blt.n	15a8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1596:	2201      	movs	r2, #1
    1598:	f000 001f 	and.w	r0, r0, #31
    159c:	fa02 f000 	lsl.w	r0, r2, r0
    15a0:	4a02      	ldr	r2, [pc, #8]	; (15ac <arch_irq_enable+0x1c>)
    15a2:	095b      	lsrs	r3, r3, #5
    15a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    15a8:	4770      	bx	lr
    15aa:	bf00      	nop
    15ac:	e000e100 	.word	0xe000e100

000015b0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    15b0:	4b05      	ldr	r3, [pc, #20]	; (15c8 <arch_irq_is_enabled+0x18>)
    15b2:	0942      	lsrs	r2, r0, #5
    15b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    15b8:	2301      	movs	r3, #1
    15ba:	f000 001f 	and.w	r0, r0, #31
    15be:	fa03 f000 	lsl.w	r0, r3, r0
}
    15c2:	4010      	ands	r0, r2
    15c4:	4770      	bx	lr
    15c6:	bf00      	nop
    15c8:	e000e100 	.word	0xe000e100

000015cc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    15cc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    15ce:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    15d0:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15d4:	bfac      	ite	ge
    15d6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15da:	4b06      	ldrlt	r3, [pc, #24]	; (15f4 <z_arm_irq_priority_set+0x28>)
    15dc:	ea4f 1141 	mov.w	r1, r1, lsl #5
    15e0:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15e2:	bfab      	itete	ge
    15e4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15e8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15ec:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15f0:	5419      	strblt	r1, [r3, r0]
}
    15f2:	4770      	bx	lr
    15f4:	e000ed14 	.word	0xe000ed14

000015f8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    15f8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    15fc:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    15fe:	490b      	ldr	r1, [pc, #44]	; (162c <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    1600:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    1604:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    1606:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    160a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    160e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    1610:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    1614:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    161c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1620:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1622:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1624:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    1626:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1628:	4770      	bx	lr
    162a:	bf00      	nop
    162c:	00003ebd 	.word	0x00003ebd

00001630 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1630:	4604      	mov	r4, r0
    1632:	b508      	push	{r3, lr}
    1634:	460e      	mov	r6, r1
    1636:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    1638:	f000 f9f8 	bl	1a2c <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    163c:	4b08      	ldr	r3, [pc, #32]	; (1660 <arch_switch_to_main_thread+0x30>)
    163e:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1640:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    1642:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1646:	4628      	mov	r0, r5
    1648:	f386 8809 	msr	PSP, r6
    164c:	2100      	movs	r1, #0
    164e:	b663      	cpsie	if
    1650:	f381 8811 	msr	BASEPRI, r1
    1654:	f3bf 8f6f 	isb	sy
    1658:	2200      	movs	r2, #0
    165a:	2300      	movs	r3, #0
    165c:	f002 fc2e 	bl	3ebc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1660:	2000089c 	.word	0x2000089c

00001664 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1664:	4a0e      	ldr	r2, [pc, #56]	; (16a0 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1666:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1668:	4b0e      	ldr	r3, [pc, #56]	; (16a4 <z_arm_prep_c+0x40>)
    166a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    166e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1670:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1674:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1678:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    167c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1684:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1688:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    168c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1690:	f001 f964 	bl	295c <z_bss_zero>
	z_data_copy();
    1694:	f001 ffd8 	bl	3648 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1698:	f000 f99a 	bl	19d0 <z_arm_interrupt_init>
	z_cstart();
    169c:	f001 f982 	bl	29a4 <z_cstart>
    16a0:	00000000 	.word	0x00000000
    16a4:	e000ed00 	.word	0xe000ed00

000016a8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    16a8:	4913      	ldr	r1, [pc, #76]	; (16f8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    16aa:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    16ac:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    16b0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    16b2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    16b6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    16ba:	2020      	movs	r0, #32
    msr BASEPRI, r0
    16bc:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    16c0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    16c4:	4f0d      	ldr	r7, [pc, #52]	; (16fc <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    16c6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    16ca:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    16cc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    16ce:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    16d0:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    16d2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    16d4:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    16d6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    16da:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    16de:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    16e2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    16e6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    16ea:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    16ec:	f002 fdce 	bl	428c <configure_builtin_stack_guard>
    pop {r2, lr}
    16f0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    16f4:	4770      	bx	lr
    16f6:	0000      	.short	0x0000
    ldr r1, =_kernel
    16f8:	2000089c 	.word	0x2000089c
    ldr v4, =_SCS_ICSR
    16fc:	e000ed04 	.word	0xe000ed04

00001700 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    1700:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1704:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1706:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    170a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    170e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1710:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1714:	2902      	cmp	r1, #2
    beq _oops
    1716:	d0ff      	beq.n	1718 <_oops>

00001718 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1718:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    171a:	f002 fdbd 	bl	4298 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    171e:	bd01      	pop	{r0, pc}

00001720 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1720:	4901      	ldr	r1, [pc, #4]	; (1728 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1722:	2210      	movs	r2, #16
	str	r2, [r1]
    1724:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1726:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1728:	e000ed10 	.word	0xe000ed10

0000172c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    172c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    172e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1730:	f380 8811 	msr	BASEPRI, r0
	isb
    1734:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1738:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    173c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    173e:	b662      	cpsie	i
	isb
    1740:	f3bf 8f6f 	isb	sy

	bx	lr
    1744:	4770      	bx	lr
    1746:	bf00      	nop

00001748 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1748:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    174a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    174c:	f381 8811 	msr	BASEPRI, r1

	wfe
    1750:	bf20      	wfe

	msr	BASEPRI, r0
    1752:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1756:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1758:	4770      	bx	lr
    175a:	bf00      	nop

0000175c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    175c:	bf30      	wfi
    b z_SysNmiOnReset
    175e:	f7ff bffd 	b.w	175c <z_SysNmiOnReset>
    1762:	bf00      	nop

00001764 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1764:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1766:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1768:	4a0b      	ldr	r2, [pc, #44]	; (1798 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    176a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    176c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    176e:	bf1e      	ittt	ne
	movne	r1, #0
    1770:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1772:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    1774:	f002 ff00 	blne	4578 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1778:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    177a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    177e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1782:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1786:	4905      	ldr	r1, [pc, #20]	; (179c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1788:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    178a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    178c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    178e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1792:	4903      	ldr	r1, [pc, #12]	; (17a0 <_isr_wrapper+0x3c>)
	bx r1
    1794:	4708      	bx	r1
    1796:	0000      	.short	0x0000
	ldr r2, =_kernel
    1798:	2000089c 	.word	0x2000089c
	ldr r1, =_sw_isr_table
    179c:	00004828 	.word	0x00004828
	ldr r1, =z_arm_int_exit
    17a0:	000017e9 	.word	0x000017e9

000017a4 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    17a4:	f002 fcd2 	bl	414c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    17a8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    17aa:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    17ae:	4808      	ldr	r0, [pc, #32]	; (17d0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    17b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    17b4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    17b6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    17ba:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    17be:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    17c0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    17c2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    17c6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    17ca:	f7ff ff4b 	bl	1664 <z_arm_prep_c>
    17ce:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    17d0:	20000e40 	.word	0x20000e40

000017d4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    17d4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    17d8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    17dc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    17de:	4672      	mov	r2, lr
	bl z_arm_fault
    17e0:	f000 f864 	bl	18ac <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    17e4:	bd01      	pop	{r0, pc}
    17e6:	bf00      	nop

000017e8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    17e8:	4b04      	ldr	r3, [pc, #16]	; (17fc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    17ea:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    17ec:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    17ee:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    17f0:	d003      	beq.n	17fa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    17f2:	4903      	ldr	r1, [pc, #12]	; (1800 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    17f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    17f8:	600a      	str	r2, [r1, #0]

000017fa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    17fa:	4770      	bx	lr
	ldr r3, =_kernel
    17fc:	2000089c 	.word	0x2000089c
	ldr r1, =_SCS_ICSR
    1800:	e000ed04 	.word	0xe000ed04

00001804 <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1804:	4b0e      	ldr	r3, [pc, #56]	; (1840 <mem_manage_fault.isra.0+0x3c>)
    1806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    180a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    180c:	0792      	lsls	r2, r2, #30
    180e:	d508      	bpl.n	1822 <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1810:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1814:	0612      	lsls	r2, r2, #24
    1816:	d504      	bpl.n	1822 <mem_manage_fault.isra.0+0x1e>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    1818:	b118      	cbz	r0, 1822 <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    181a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    181c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1820:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    1822:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1824:	4b06      	ldr	r3, [pc, #24]	; (1840 <mem_manage_fault.isra.0+0x3c>)
    1826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    182a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    182c:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    182e:	bf58      	it	pl
    1830:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1834:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1838:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    183a:	7008      	strb	r0, [r1, #0]

	return reason;
}
    183c:	4770      	bx	lr
    183e:	bf00      	nop
    1840:	e000ed00 	.word	0xe000ed00

00001844 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1844:	4b0d      	ldr	r3, [pc, #52]	; (187c <bus_fault.isra.0+0x38>)
    1846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    184a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    184c:	0592      	lsls	r2, r2, #22
    184e:	d508      	bpl.n	1862 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1850:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1854:	0412      	lsls	r2, r2, #16
    1856:	d504      	bpl.n	1862 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    1858:	b118      	cbz	r0, 1862 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    185a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    185c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1860:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    1862:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1864:	4b05      	ldr	r3, [pc, #20]	; (187c <bus_fault.isra.0+0x38>)
    1866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    186a:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    186c:	bf58      	it	pl
    186e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1872:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1876:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1878:	7008      	strb	r0, [r1, #0]

	return reason;
}
    187a:	4770      	bx	lr
    187c:	e000ed00 	.word	0xe000ed00

00001880 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1880:	4b09      	ldr	r3, [pc, #36]	; (18a8 <usage_fault.isra.0+0x28>)
    1882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1886:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    188a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    188c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    188e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1892:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1896:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    189a:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    189e:	bf18      	it	ne
    18a0:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    18a2:	629a      	str	r2, [r3, #40]	; 0x28
}
    18a4:	4770      	bx	lr
    18a6:	bf00      	nop
    18a8:	e000ed00 	.word	0xe000ed00

000018ac <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    18ac:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    18ae:	4b36      	ldr	r3, [pc, #216]	; (1988 <z_arm_fault+0xdc>)
{
    18b0:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    18b2:	685b      	ldr	r3, [r3, #4]
    18b4:	2500      	movs	r5, #0
{
    18b6:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    18b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    18bc:	f385 8811 	msr	BASEPRI, r5
    18c0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    18c4:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    18c8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    18cc:	d111      	bne.n	18f2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    18ce:	f002 010c 	and.w	r1, r2, #12
    18d2:	2908      	cmp	r1, #8
    18d4:	d00d      	beq.n	18f2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    18d6:	0711      	lsls	r1, r2, #28
    18d8:	d401      	bmi.n	18de <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    18da:	4606      	mov	r6, r0
			*nested_exc = true;
    18dc:	2501      	movs	r5, #1
	*recoverable = false;
    18de:	2200      	movs	r2, #0
    18e0:	3b03      	subs	r3, #3
    18e2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    18e6:	2b03      	cmp	r3, #3
    18e8:	d847      	bhi.n	197a <z_arm_fault+0xce>
    18ea:	e8df f003 	tbb	[pc, r3]
    18ee:	3e04      	.short	0x3e04
    18f0:	3b42      	.short	0x3b42
		return NULL;
    18f2:	462e      	mov	r6, r5
    18f4:	e7f3      	b.n	18de <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    18f6:	4b24      	ldr	r3, [pc, #144]	; (1988 <z_arm_fault+0xdc>)
    18f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    18fa:	0792      	lsls	r2, r2, #30
    18fc:	d43d      	bmi.n	197a <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    18fe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1900:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    1904:	d008      	beq.n	1918 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
    1906:	3328      	adds	r3, #40	; 0x28
    1908:	781b      	ldrb	r3, [r3, #0]
    190a:	b1eb      	cbz	r3, 1948 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
    190c:	2001      	movs	r0, #1
    190e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    1912:	f7ff ff77 	bl	1804 <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
    1916:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1918:	f89d 3007 	ldrb.w	r3, [sp, #7]
    191c:	b993      	cbnz	r3, 1944 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    191e:	2220      	movs	r2, #32
    1920:	4631      	mov	r1, r6
    1922:	a802      	add	r0, sp, #8
    1924:	f002 fd05 	bl	4332 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1928:	9b09      	ldr	r3, [sp, #36]	; 0x24
    192a:	b345      	cbz	r5, 197e <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    192c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1930:	b922      	cbnz	r2, 193c <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1932:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1936:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    193a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    193c:	4620      	mov	r0, r4
    193e:	a902      	add	r1, sp, #8
    1940:	f002 fca8 	bl	4294 <z_arm_fatal_error>
}
    1944:	b00a      	add	sp, #40	; 0x28
    1946:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1948:	4b10      	ldr	r3, [pc, #64]	; (198c <z_arm_fault+0xe0>)
    194a:	781b      	ldrb	r3, [r3, #0]
    194c:	b12b      	cbz	r3, 195a <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
    194e:	2001      	movs	r0, #1
    1950:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    1954:	f7ff ff76 	bl	1844 <bus_fault.isra.0>
    1958:	e7dd      	b.n	1916 <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
    195a:	4b0d      	ldr	r3, [pc, #52]	; (1990 <z_arm_fault+0xe4>)
    195c:	8818      	ldrh	r0, [r3, #0]
    195e:	b284      	uxth	r4, r0
    1960:	2c00      	cmp	r4, #0
    1962:	d0d9      	beq.n	1918 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
    1964:	f7ff ff8c 	bl	1880 <usage_fault.isra.0>
    1968:	e7d5      	b.n	1916 <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
    196a:	2000      	movs	r0, #0
    196c:	f10d 0107 	add.w	r1, sp, #7
    1970:	e7cf      	b.n	1912 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    1972:	2000      	movs	r0, #0
    1974:	f10d 0107 	add.w	r1, sp, #7
    1978:	e7ec      	b.n	1954 <z_arm_fault+0xa8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    197a:	2400      	movs	r4, #0
    197c:	e7cc      	b.n	1918 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    197e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1982:	f023 0301 	bic.w	r3, r3, #1
    1986:	e7d8      	b.n	193a <z_arm_fault+0x8e>
    1988:	e000ed00 	.word	0xe000ed00
    198c:	e000ed29 	.word	0xe000ed29
    1990:	e000ed2a 	.word	0xe000ed2a

00001994 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1994:	4b04      	ldr	r3, [pc, #16]	; (19a8 <z_arm_fault_init+0x14>)
    1996:	695a      	ldr	r2, [r3, #20]
    1998:	f042 0210 	orr.w	r2, r2, #16
    199c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    199e:	695a      	ldr	r2, [r3, #20]
    19a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    19a4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    19a6:	4770      	bx	lr
    19a8:	e000ed00 	.word	0xe000ed00

000019ac <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    19ac:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    19b0:	4905      	ldr	r1, [pc, #20]	; (19c8 <sys_arch_reboot+0x1c>)
    19b2:	4b06      	ldr	r3, [pc, #24]	; (19cc <sys_arch_reboot+0x20>)
    19b4:	68ca      	ldr	r2, [r1, #12]
    19b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    19ba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    19bc:	60cb      	str	r3, [r1, #12]
    19be:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    19c2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    19c4:	e7fd      	b.n	19c2 <sys_arch_reboot+0x16>
    19c6:	bf00      	nop
    19c8:	e000ed00 	.word	0xe000ed00
    19cc:	05fa0004 	.word	0x05fa0004

000019d0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    19d0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19d2:	2120      	movs	r1, #32
    19d4:	4803      	ldr	r0, [pc, #12]	; (19e4 <z_arm_interrupt_init+0x14>)
    19d6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    19d8:	3301      	adds	r3, #1
    19da:	2b41      	cmp	r3, #65	; 0x41
    19dc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    19e0:	d1f9      	bne.n	19d6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    19e2:	4770      	bx	lr
    19e4:	e000e100 	.word	0xe000e100

000019e8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    19e8:	b508      	push	{r3, lr}
	if (_current == thread) {
    19ea:	4b0e      	ldr	r3, [pc, #56]	; (1a24 <z_impl_k_thread_abort+0x3c>)
    19ec:	689b      	ldr	r3, [r3, #8]
    19ee:	4283      	cmp	r3, r0
    19f0:	d107      	bne.n	1a02 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    19f2:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    19f6:	b193      	cbz	r3, 1a1e <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    19f8:	4a0b      	ldr	r2, [pc, #44]	; (1a28 <z_impl_k_thread_abort+0x40>)
    19fa:	6853      	ldr	r3, [r2, #4]
    19fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1a00:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    1a02:	f001 fb53 	bl	30ac <z_thread_single_abort>
	__asm__ volatile(
    1a06:	f04f 0320 	mov.w	r3, #32
    1a0a:	f3ef 8011 	mrs	r0, BASEPRI
    1a0e:	f383 8811 	msr	BASEPRI, r3
    1a12:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    1a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    1a1a:	f002 bdd1 	b.w	45c0 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    1a1e:	f001 fdf3 	bl	3608 <z_self_abort>
    1a22:	bf00      	nop
    1a24:	2000089c 	.word	0x2000089c
    1a28:	e000ed00 	.word	0xe000ed00

00001a2c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1a2e:	4c09      	ldr	r4, [pc, #36]	; (1a54 <z_arm_configure_static_mpu_regions+0x28>)
    1a30:	4a09      	ldr	r2, [pc, #36]	; (1a58 <z_arm_configure_static_mpu_regions+0x2c>)
    1a32:	4623      	mov	r3, r4
    1a34:	2101      	movs	r1, #1
    1a36:	4809      	ldr	r0, [pc, #36]	; (1a5c <z_arm_configure_static_mpu_regions+0x30>)
    1a38:	f000 f902 	bl	1c40 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1a3c:	2300      	movs	r3, #0
    1a3e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1a40:	4b07      	ldr	r3, [pc, #28]	; (1a60 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1a42:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1a44:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1a46:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1a48:	9301      	str	r3, [sp, #4]
    1a4a:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1a4c:	f000 f902 	bl	1c54 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1a50:	b004      	add	sp, #16
    1a52:	bd10      	pop	{r4, pc}
    1a54:	20010000 	.word	0x20010000
    1a58:	20000000 	.word	0x20000000
    1a5c:	00004ab4 	.word	0x00004ab4
    1a60:	20000170 	.word	0x20000170

00001a64 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    1a64:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1a66:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    1a68:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1a6a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    1a6e:	f004 031f 	and.w	r3, r4, #31
    1a72:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1a74:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1a76:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1a78:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    1a7c:	4904      	ldr	r1, [pc, #16]	; (1a90 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1a7e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    1a82:	f043 0301 	orr.w	r3, r3, #1
    1a86:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    1a88:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    1a8a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    1a8c:	bd10      	pop	{r4, pc}
    1a8e:	bf00      	nop
    1a90:	e000ed90 	.word	0xe000ed90

00001a94 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a98:	4688      	mov	r8, r1
    1a9a:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1a9c:	4606      	mov	r6, r0
    1a9e:	f04f 0900 	mov.w	r9, #0
	MPU->RNR = index;
    1aa2:	4d4a      	ldr	r5, [pc, #296]	; (1bcc <mpu_configure_regions_and_partition.constprop.0+0x138>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1aa4:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    1aa6:	45c1      	cmp	r9, r8
    1aa8:	da05      	bge.n	1ab6 <mpu_configure_regions_and_partition.constprop.0+0x22>
		if (regions[i].size == 0U) {
    1aaa:	6877      	ldr	r7, [r6, #4]
    1aac:	b3bf      	cbz	r7, 1b1e <mpu_configure_regions_and_partition.constprop.0+0x8a>
		&&
    1aae:	2f1f      	cmp	r7, #31
    1ab0:	d805      	bhi.n	1abe <mpu_configure_regions_and_partition.constprop.0+0x2a>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    1ab2:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    1ab6:	4620      	mov	r0, r4
    1ab8:	b005      	add	sp, #20
    1aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    1abe:	06fb      	lsls	r3, r7, #27
    1ac0:	d1f7      	bne.n	1ab2 <mpu_configure_regions_and_partition.constprop.0+0x1e>
		((part->start &
    1ac2:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    1ac6:	f01a 0f1f 	tst.w	sl, #31
    1aca:	d1f2      	bne.n	1ab2 <mpu_configure_regions_and_partition.constprop.0+0x1e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1acc:	4650      	mov	r0, sl
    1ace:	f002 fc0b 	bl	42e8 <arm_cmse_mpu_region_get>
    1ad2:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1ad4:	eb07 000a 	add.w	r0, r7, sl
    1ad8:	3801      	subs	r0, #1
    1ada:	f002 fc05 	bl	42e8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1ade:	4583      	cmp	fp, r0
    1ae0:	d1e7      	bne.n	1ab2 <mpu_configure_regions_and_partition.constprop.0+0x1e>
		if ((u_reg_index == -EINVAL) ||
    1ae2:	f11b 0f16 	cmn.w	fp, #22
    1ae6:	d0e4      	beq.n	1ab2 <mpu_configure_regions_and_partition.constprop.0+0x1e>
			(u_reg_index > (reg_index - 1))) {
    1ae8:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    1aea:	455b      	cmp	r3, fp
    1aec:	dbe1      	blt.n	1ab2 <mpu_configure_regions_and_partition.constprop.0+0x1e>
	MPU->RNR = index;
    1aee:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1af2:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    1af4:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1af8:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1afa:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1afe:	e9d6 3200 	ldrd	r3, r2, [r6]
    1b02:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    1b04:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1b06:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1b0a:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    1b0e:	d11c      	bne.n	1b4a <mpu_configure_regions_and_partition.constprop.0+0xb6>
    1b10:	4557      	cmp	r7, sl
    1b12:	d108      	bne.n	1b26 <mpu_configure_regions_and_partition.constprop.0+0x92>
			mpu_configure_region(u_reg_index, &regions[i]);
    1b14:	4631      	mov	r1, r6
    1b16:	fa5f f08b 	uxtb.w	r0, fp
    1b1a:	f002 fbc8 	bl	42ae <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    1b1e:	f109 0901 	add.w	r9, r9, #1
    1b22:	360c      	adds	r6, #12
    1b24:	e7bf      	b.n	1aa6 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    1b26:	4631      	mov	r1, r6
	MPU->RNR = index;
    1b28:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1b2c:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    1b2e:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1b32:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    1b36:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1b38:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    1b3a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    1b3c:	f002 fbb7 	bl	42ae <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1b40:	f110 0f16 	cmn.w	r0, #22
    1b44:	d0b5      	beq.n	1ab2 <mpu_configure_regions_and_partition.constprop.0+0x1e>
			reg_index++;
    1b46:	1c44      	adds	r4, r0, #1
    1b48:	e7e9      	b.n	1b1e <mpu_configure_regions_and_partition.constprop.0+0x8a>
		} else if (reg_last == u_reg_last) {
    1b4a:	3b01      	subs	r3, #1
    1b4c:	4557      	cmp	r7, sl
    1b4e:	b2e0      	uxtb	r0, r4
    1b50:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    1b54:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    1b58:	d106      	bne.n	1b68 <mpu_configure_regions_and_partition.constprop.0+0xd4>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1b5a:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    1b5c:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1b5e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1b62:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1b64:	612b      	str	r3, [r5, #16]
			reg_index =
    1b66:	e7e9      	b.n	1b3c <mpu_configure_regions_and_partition.constprop.0+0xa8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1b68:	6929      	ldr	r1, [r5, #16]
    1b6a:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1b6e:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1b70:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    1b72:	4631      	mov	r1, r6
    1b74:	f002 fb9b 	bl	42ae <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1b78:	f110 0f16 	cmn.w	r0, #22
    1b7c:	d099      	beq.n	1ab2 <mpu_configure_regions_and_partition.constprop.0+0x1e>
	MPU->RNR = index;
    1b7e:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    1b82:	68ea      	ldr	r2, [r5, #12]
    1b84:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    1b88:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    1b8a:	f362 0304 	bfi	r3, r2, #0, #5
    1b8e:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1b92:	692b      	ldr	r3, [r5, #16]
    1b94:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1b98:	085b      	lsrs	r3, r3, #1
    1b9a:	f363 1247 	bfi	r2, r3, #5, #3
    1b9e:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    1ba2:	e9d6 3200 	ldrd	r3, r2, [r6]
    1ba6:	4413      	add	r3, r2
    1ba8:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    1baa:	f023 031f 	bic.w	r3, r3, #31
    1bae:	443b      	add	r3, r7
			reg_index++;
    1bb0:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    1bb2:	eba3 0a0a 	sub.w	sl, r3, sl
    1bb6:	b2e0      	uxtb	r0, r4
    1bb8:	f02a 031f 	bic.w	r3, sl, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    1bbc:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    1bbe:	9303      	str	r3, [sp, #12]
    1bc0:	f63f af77 	bhi.w	1ab2 <mpu_configure_regions_and_partition.constprop.0+0x1e>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    1bc4:	4669      	mov	r1, sp
    1bc6:	f7ff ff4d 	bl	1a64 <region_init>
    1bca:	e7bc      	b.n	1b46 <mpu_configure_regions_and_partition.constprop.0+0xb2>
    1bcc:	e000ed90 	.word	0xe000ed90

00001bd0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1bd0:	2205      	movs	r2, #5
    1bd2:	4b03      	ldr	r3, [pc, #12]	; (1be0 <arm_core_mpu_enable+0x10>)
    1bd4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1bd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bda:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1bde:	4770      	bx	lr
    1be0:	e000ed90 	.word	0xe000ed90

00001be4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1be4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1be8:	2200      	movs	r2, #0
    1bea:	4b01      	ldr	r3, [pc, #4]	; (1bf0 <arm_core_mpu_disable+0xc>)
    1bec:	605a      	str	r2, [r3, #4]
}
    1bee:	4770      	bx	lr
    1bf0:	e000ed90 	.word	0xe000ed90

00001bf4 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    1bf4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1bf6:	4c0e      	ldr	r4, [pc, #56]	; (1c30 <arm_mpu_init+0x3c>)
    1bf8:	6825      	ldr	r5, [r4, #0]
    1bfa:	2d10      	cmp	r5, #16
    1bfc:	d814      	bhi.n	1c28 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1bfe:	f7ff fff1 	bl	1be4 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1c02:	2000      	movs	r0, #0
	MPU->MAIR0 =
    1c04:	4b0b      	ldr	r3, [pc, #44]	; (1c34 <arm_mpu_init+0x40>)
    1c06:	4a0c      	ldr	r2, [pc, #48]	; (1c38 <arm_mpu_init+0x44>)
    1c08:	631a      	str	r2, [r3, #48]	; 0x30
    1c0a:	4285      	cmp	r5, r0
    1c0c:	d105      	bne.n	1c1a <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1c0e:	4b0b      	ldr	r3, [pc, #44]	; (1c3c <arm_mpu_init+0x48>)
    1c10:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1c12:	f7ff ffdd 	bl	1bd0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1c16:	2000      	movs	r0, #0
}
    1c18:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1c1a:	6861      	ldr	r1, [r4, #4]
    1c1c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    1c20:	f7ff ff20 	bl	1a64 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1c24:	3001      	adds	r0, #1
    1c26:	e7f0      	b.n	1c0a <arm_mpu_init+0x16>
		return -1;
    1c28:	f04f 30ff 	mov.w	r0, #4294967295
    1c2c:	e7f4      	b.n	1c18 <arm_mpu_init+0x24>
    1c2e:	bf00      	nop
    1c30:	00004ac0 	.word	0x00004ac0
    1c34:	e000ed90 	.word	0xe000ed90
    1c38:	0044ffaa 	.word	0x0044ffaa
    1c3c:	200008f8 	.word	0x200008f8

00001c40 <arm_core_mpu_configure_static_mpu_regions>:
{
    1c40:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1c42:	4c03      	ldr	r4, [pc, #12]	; (1c50 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1c44:	7822      	ldrb	r2, [r4, #0]
    1c46:	f7ff ff25 	bl	1a94 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1c4a:	7020      	strb	r0, [r4, #0]
}
    1c4c:	bd10      	pop	{r4, pc}
    1c4e:	bf00      	nop
    1c50:	200008f8 	.word	0x200008f8

00001c54 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    1c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c58:	4d26      	ldr	r5, [pc, #152]	; (1cf4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
    1c5a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1c5c:	4606      	mov	r6, r0
    1c5e:	f04f 0800 	mov.w	r8, #0
    1c62:	46ab      	mov	fp, r5
	MPU->RNR = index;
    1c64:	4f24      	ldr	r7, [pc, #144]	; (1cf8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1c66:	45d0      	cmp	r8, sl
    1c68:	da1b      	bge.n	1ca2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1c6a:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1c6e:	f1b9 0f00 	cmp.w	r9, #0
    1c72:	d039      	beq.n	1ce8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1c74:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1c76:	4608      	mov	r0, r1
    1c78:	9101      	str	r1, [sp, #4]
    1c7a:	f002 fb35 	bl	42e8 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1c7e:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1c80:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1c82:	eb09 0001 	add.w	r0, r9, r1
    1c86:	3801      	subs	r0, #1
    1c88:	f002 fb2e 	bl	42e8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1c8c:	4284      	cmp	r4, r0
    1c8e:	f04f 0214 	mov.w	r2, #20
    1c92:	4b1a      	ldr	r3, [pc, #104]	; (1cfc <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
    1c94:	d008      	beq.n	1ca8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    1c96:	f06f 0315 	mvn.w	r3, #21
    1c9a:	fb02 f808 	mul.w	r8, r2, r8
    1c9e:	f84b 3008 	str.w	r3, [fp, r8]
}
    1ca2:	b003      	add	sp, #12
    1ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1ca8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    1cac:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    1cae:	d0f8      	beq.n	1ca2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1cb0:	7819      	ldrb	r1, [r3, #0]
    1cb2:	42a1      	cmp	r1, r4
    1cb4:	ddf5      	ble.n	1ca2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    1cb6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    1cba:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    1cbc:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    1cbe:	68fc      	ldr	r4, [r7, #12]
    1cc0:	f100 0108 	add.w	r1, r0, #8
    1cc4:	7b00      	ldrb	r0, [r0, #12]
    1cc6:	f364 0004 	bfi	r0, r4, #0, #5
    1cca:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1ccc:	6938      	ldr	r0, [r7, #16]
    1cce:	790c      	ldrb	r4, [r1, #4]
    1cd0:	0840      	lsrs	r0, r0, #1
    1cd2:	f360 1447 	bfi	r4, r0, #5, #3
    1cd6:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    1cd8:	68f9      	ldr	r1, [r7, #12]
    1cda:	f021 011f 	bic.w	r1, r1, #31
    1cde:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    1ce0:	6939      	ldr	r1, [r7, #16]
    1ce2:	f021 011f 	bic.w	r1, r1, #31
    1ce6:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1ce8:	f108 0801 	add.w	r8, r8, #1
    1cec:	3514      	adds	r5, #20
    1cee:	360c      	adds	r6, #12
    1cf0:	e7b9      	b.n	1c66 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    1cf2:	bf00      	nop
    1cf4:	20000810 	.word	0x20000810
    1cf8:	e000ed90 	.word	0xe000ed90
    1cfc:	200008f8 	.word	0x200008f8

00001d00 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1d00:	4b01      	ldr	r3, [pc, #4]	; (1d08 <__stdout_hook_install+0x8>)
    1d02:	6018      	str	r0, [r3, #0]
}
    1d04:	4770      	bx	lr
    1d06:	bf00      	nop
    1d08:	20000024 	.word	0x20000024

00001d0c <nrf_gpio_cfg_sense_set>:
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1d0c:	f000 021f 	and.w	r2, r0, #31
    1d10:	4805      	ldr	r0, [pc, #20]	; (1d28 <nrf_gpio_cfg_sense_set+0x1c>)
    1d12:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    1d16:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    1d1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1d1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    1d22:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    1d26:	4770      	bx	lr
    1d28:	50842500 	.word	0x50842500

00001d2c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1d2c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    1d2e:	4b09      	ldr	r3, [pc, #36]	; (1d54 <gpio_nrfx_init+0x28>)
    1d30:	781a      	ldrb	r2, [r3, #0]
    1d32:	b96a      	cbnz	r2, 1d50 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    1d34:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1d36:	200d      	movs	r0, #13
		gpio_initialized = true;
    1d38:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1d3a:	2105      	movs	r1, #5
    1d3c:	f7ff fc46 	bl	15cc <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    1d40:	200d      	movs	r0, #13
    1d42:	f7ff fc25 	bl	1590 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    1d46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1d4a:	4b03      	ldr	r3, [pc, #12]	; (1d58 <gpio_nrfx_init+0x2c>)
    1d4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    1d50:	2000      	movs	r0, #0
    1d52:	bd08      	pop	{r3, pc}
    1d54:	200008f9 	.word	0x200008f9
    1d58:	5000d000 	.word	0x5000d000

00001d5c <gpio_nrfx_pin_interrupt_configure>:
{
    1d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d5e:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1d60:	6841      	ldr	r1, [r0, #4]
    1d62:	f006 051f 	and.w	r5, r6, #31
    1d66:	7a09      	ldrb	r1, [r1, #8]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    1d68:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
    1d6c:	68c7      	ldr	r7, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    1d6e:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    1d72:	d10a      	bne.n	1d8a <gpio_nrfx_pin_interrupt_configure+0x2e>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1d74:	485c      	ldr	r0, [pc, #368]	; (1ee8 <gpio_nrfx_pin_interrupt_configure+0x18c>)
    *p_pin = pin_number & 0x1F;
    1d76:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1d7a:	3180      	adds	r1, #128	; 0x80
    1d7c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1d80:	07c8      	lsls	r0, r1, #31
    1d82:	d507      	bpl.n	1d94 <gpio_nrfx_pin_interrupt_configure+0x38>
		return -ENOTSUP;
    1d84:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1d88:	e093      	b.n	1eb2 <gpio_nrfx_pin_interrupt_configure+0x156>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1d8a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    1d8e:	68f9      	ldr	r1, [r7, #12]
    1d90:	f000 8091 	beq.w	1eb6 <gpio_nrfx_pin_interrupt_configure+0x15a>
    1d94:	2101      	movs	r1, #1
    1d96:	68f8      	ldr	r0, [r7, #12]
    1d98:	40b1      	lsls	r1, r6
    1d9a:	4301      	orrs	r1, r0
    1d9c:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1d9e:	2101      	movs	r1, #1
    1da0:	6978      	ldr	r0, [r7, #20]
    1da2:	40b1      	lsls	r1, r6
    1da4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    1da8:	bf0c      	ite	eq
    1daa:	4308      	orreq	r0, r1
    1dac:	4388      	bicne	r0, r1
    1dae:	6178      	str	r0, [r7, #20]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1db0:	2000      	movs	r0, #0
    1db2:	69ba      	ldr	r2, [r7, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    1db4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    1db8:	bf0c      	ite	eq
    1dba:	430a      	orreq	r2, r1
    1dbc:	438a      	bicne	r2, r1
    1dbe:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    1dc0:	693a      	ldr	r2, [r7, #16]
    1dc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1dc6:	bf0c      	ite	eq
    1dc8:	4311      	orreq	r1, r2
    1dca:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    1dce:	4a47      	ldr	r2, [pc, #284]	; (1eec <gpio_nrfx_pin_interrupt_configure+0x190>)
    1dd0:	6139      	str	r1, [r7, #16]
    1dd2:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    1dd6:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1dd8:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    1ddc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1de0:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    1de4:	428d      	cmp	r5, r1
    1de6:	d16b      	bne.n	1ec0 <gpio_nrfx_pin_interrupt_configure+0x164>
		    && (intenset & BIT(i))) {
    1de8:	fa23 f100 	lsr.w	r1, r3, r0
    1dec:	07c9      	lsls	r1, r1, #31
    1dee:	d567      	bpl.n	1ec0 <gpio_nrfx_pin_interrupt_configure+0x164>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    1df0:	0083      	lsls	r3, r0, #2
    1df2:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    1df6:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    1dfa:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    1dfe:	f021 0101 	bic.w	r1, r1, #1
    1e02:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    1e06:	2301      	movs	r3, #1
    1e08:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    1e0a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    1e0e:	b2c0      	uxtb	r0, r0
    1e10:	f000 fcb4 	bl	277c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    1e14:	4628      	mov	r0, r5
    1e16:	2100      	movs	r1, #0
    1e18:	f7ff ff78 	bl	1d0c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    1e1c:	68f8      	ldr	r0, [r7, #12]
    1e1e:	40f0      	lsrs	r0, r6
    1e20:	f010 0001 	ands.w	r0, r0, #1
    1e24:	d045      	beq.n	1eb2 <gpio_nrfx_pin_interrupt_configure+0x156>
		if (data->trig_edge & BIT(pin)) {
    1e26:	6978      	ldr	r0, [r7, #20]
    1e28:	40f0      	lsrs	r0, r6
    1e2a:	f010 0401 	ands.w	r4, r0, #1
    1e2e:	d04e      	beq.n	1ece <gpio_nrfx_pin_interrupt_configure+0x172>
			if (data->double_edge & BIT(pin)) {
    1e30:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    1e32:	f10d 0007 	add.w	r0, sp, #7
			if (data->double_edge & BIT(pin)) {
    1e36:	40f3      	lsrs	r3, r6
    1e38:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1e3a:	bf57      	itett	pl
    1e3c:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    1e3e:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1e40:	fa21 f606 	lsrpl.w	r6, r1, r6
    1e44:	f006 0601 	andpl.w	r6, r6, #1
    1e48:	bf5c      	itt	pl
    1e4a:	f1c6 0602 	rsbpl	r6, r6, #2
    1e4e:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    1e50:	f000 fcb6 	bl	27c0 <nrfx_gpiote_channel_alloc>
    1e54:	4b26      	ldr	r3, [pc, #152]	; (1ef0 <gpio_nrfx_pin_interrupt_configure+0x194>)
    1e56:	4298      	cmp	r0, r3
    1e58:	d136      	bne.n	1ec8 <gpio_nrfx_pin_interrupt_configure+0x16c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1e5a:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    1e5c:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1e60:	022d      	lsls	r5, r5, #8
    1e62:	008b      	lsls	r3, r1, #2
    1e64:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    1e68:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1e6c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1e70:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1e74:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    1e78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    1e7c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1e80:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    1e84:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    1e86:	008a      	lsls	r2, r1, #2
    1e88:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    1e8c:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1e90:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    1e94:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1e98:	6010      	str	r0, [r2, #0]
    1e9a:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    1e9c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    1ea0:	f042 0201 	orr.w	r2, r2, #1
    1ea4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    1ea8:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    1eaa:	4a10      	ldr	r2, [pc, #64]	; (1eec <gpio_nrfx_pin_interrupt_configure+0x190>)
    1eac:	408b      	lsls	r3, r1
    1eae:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    1eb2:	b003      	add	sp, #12
    1eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1eb6:	2001      	movs	r0, #1
    1eb8:	40b0      	lsls	r0, r6
    1eba:	ea21 0100 	bic.w	r1, r1, r0
    1ebe:	e76d      	b.n	1d9c <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1ec0:	3001      	adds	r0, #1
    1ec2:	2808      	cmp	r0, #8
    1ec4:	d188      	bne.n	1dd8 <gpio_nrfx_pin_interrupt_configure+0x7c>
    1ec6:	e7a5      	b.n	1e14 <gpio_nrfx_pin_interrupt_configure+0xb8>
		return -ENODEV;
    1ec8:	f06f 0012 	mvn.w	r0, #18
    1ecc:	e7f1      	b.n	1eb2 <gpio_nrfx_pin_interrupt_configure+0x156>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    1ece:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    1ed0:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    1ed2:	40f1      	lsrs	r1, r6
    1ed4:	f001 0101 	and.w	r1, r1, #1
    1ed8:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    1edc:	b2c9      	uxtb	r1, r1
    1ede:	f7ff ff15 	bl	1d0c <nrf_gpio_cfg_sense_set>
	int res = 0;
    1ee2:	4620      	mov	r0, r4
    1ee4:	e7e5      	b.n	1eb2 <gpio_nrfx_pin_interrupt_configure+0x156>
    1ee6:	bf00      	nop
    1ee8:	50842500 	.word	0x50842500
    1eec:	5000d000 	.word	0x5000d000
    1ef0:	0bad0000 	.word	0x0bad0000

00001ef4 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1ef4:	4b28      	ldr	r3, [pc, #160]	; (1f98 <gpio_nrfx_config+0xa4>)
{
    1ef6:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1ef8:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1efa:	4828      	ldr	r0, [pc, #160]	; (1f9c <gpio_nrfx_config+0xa8>)
    1efc:	4013      	ands	r3, r2
    1efe:	4283      	cmp	r3, r0
    1f00:	d03b      	beq.n	1f7a <gpio_nrfx_config+0x86>
    1f02:	d80d      	bhi.n	1f20 <gpio_nrfx_config+0x2c>
    1f04:	2b06      	cmp	r3, #6
    1f06:	d015      	beq.n	1f34 <gpio_nrfx_config+0x40>
    1f08:	d805      	bhi.n	1f16 <gpio_nrfx_config+0x22>
    1f0a:	b19b      	cbz	r3, 1f34 <gpio_nrfx_config+0x40>
    1f0c:	2b02      	cmp	r3, #2
    1f0e:	d036      	beq.n	1f7e <gpio_nrfx_config+0x8a>
    1f10:	f06f 0015 	mvn.w	r0, #21
    1f14:	e030      	b.n	1f78 <gpio_nrfx_config+0x84>
    1f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1f1a:	d1f9      	bne.n	1f10 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    1f1c:	2301      	movs	r3, #1
    1f1e:	e009      	b.n	1f34 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1f20:	481f      	ldr	r0, [pc, #124]	; (1fa0 <gpio_nrfx_config+0xac>)
    1f22:	4283      	cmp	r3, r0
    1f24:	d02d      	beq.n	1f82 <gpio_nrfx_config+0x8e>
    1f26:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    1f2a:	d02c      	beq.n	1f86 <gpio_nrfx_config+0x92>
    1f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    1f30:	d1ee      	bne.n	1f10 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    1f32:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    1f34:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
    1f36:	bf4c      	ite	mi
    1f38:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
    1f3a:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1f3e:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    1f42:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    1f46:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1f4a:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    1f4e:	d006      	beq.n	1f5e <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1f50:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1f54:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1f56:	d018      	beq.n	1f8a <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
    1f58:	2201      	movs	r2, #1
    1f5a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    1f5c:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1f5e:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
    1f62:	2000      	movs	r0, #0
    1f64:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
    1f68:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1f6c:	4a0d      	ldr	r2, [pc, #52]	; (1fa4 <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1f6e:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1f72:	3180      	adds	r1, #128	; 0x80
    1f74:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1f78:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    1f7a:	2307      	movs	r3, #7
    1f7c:	e7da      	b.n	1f34 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    1f7e:	2304      	movs	r3, #4
    1f80:	e7d8      	b.n	1f34 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    1f82:	2305      	movs	r3, #5
    1f84:	e7d6      	b.n	1f34 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    1f86:	2303      	movs	r3, #3
    1f88:	e7d4      	b.n	1f34 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    1f8a:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    1f8c:	bf42      	ittt	mi
    1f8e:	2201      	movmi	r2, #1
    1f90:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    1f92:	60f2      	strmi	r2, [r6, #12]
}
    1f94:	e7e3      	b.n	1f5e <gpio_nrfx_config+0x6a>
    1f96:	bf00      	nop
    1f98:	00f00006 	.word	0x00f00006
    1f9c:	00100006 	.word	0x00100006
    1fa0:	00400002 	.word	0x00400002
    1fa4:	50842500 	.word	0x50842500

00001fa8 <gpiote_event_handler>:
{
    1fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1fac:	4f3f      	ldr	r7, [pc, #252]	; (20ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xac>)
    1fae:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
    1fb0:	2e00      	cmp	r6, #0
    1fb2:	d04f      	beq.n	2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>
	uint32_t bit = 1U << pin;
    1fb4:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
    1fb8:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
    1fbc:	4b3c      	ldr	r3, [pc, #240]	; (20b0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb0>)
    1fbe:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    1fc0:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    1fc4:	430a      	orrs	r2, r1
    1fc6:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
    1fca:	4a3a      	ldr	r2, [pc, #232]	; (20b4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb4>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    1fcc:	691b      	ldr	r3, [r3, #16]
    1fce:	6914      	ldr	r4, [r2, #16]
    1fd0:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    1fd2:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
    1fd6:	bb75      	cbnz	r5, 2036 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x36>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1fd8:	603d      	str	r5, [r7, #0]
    1fda:	683b      	ldr	r3, [r7, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    1fdc:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    1fde:	2501      	movs	r5, #1
    1fe0:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    1fe2:	4835      	ldr	r0, [pc, #212]	; (20b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb8>)
    1fe4:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    1fe8:	fa05 f103 	lsl.w	r1, r5, r3
    1fec:	4211      	tst	r1, r2
    1fee:	d011      	beq.n	2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1ff0:	009a      	lsls	r2, r3, #2
    1ff2:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    1ff6:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
    1ffa:	6811      	ldr	r1, [r2, #0]
    1ffc:	b151      	cbz	r1, 2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1ffe:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    2002:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2006:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2008:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    200c:	fa05 f101 	lsl.w	r1, r5, r1
    2010:	6812      	ldr	r2, [r2, #0]
    2012:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2014:	3301      	adds	r3, #1
    2016:	2b08      	cmp	r3, #8
    2018:	d1e4      	bne.n	1fe4 <gpiote_event_handler+0x3c>
	if (fired_triggers[0]) {
    201a:	b9ec      	cbnz	r4, 2058 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58>
	if (port_event) {
    201c:	b14e      	cbz	r6, 2032 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x32>
	uint32_t bit = 1U << pin;
    201e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    2020:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
    2022:	4d23      	ldr	r5, [pc, #140]	; (20b0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb0>)
    2024:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    2026:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
    202a:	430a      	orrs	r2, r1
    202c:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
    2030:	bb54      	cbnz	r4, 2088 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x88>
}
    2032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
    2036:	ea15 0f08 	tst.w	r5, r8
    203a:	d006      	beq.n	204a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    203c:	2100      	movs	r1, #0
    203e:	f009 001f 	and.w	r0, r9, #31
    2042:	f7ff fe63 	bl	1d0c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    2046:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
    204a:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    204e:	ea4f 0848 	mov.w	r8, r8, lsl #1
    2052:	e7c0      	b.n	1fd6 <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2054:	4634      	mov	r4, r6
    2056:	e7c1      	b.n	1fdc <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2058:	4b15      	ldr	r3, [pc, #84]	; (20b0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb0>)
    205a:	6859      	ldr	r1, [r3, #4]
    205c:	2900      	cmp	r1, #0
    205e:	d0dd      	beq.n	201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
	return node->next;
    2060:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2062:	4f16      	ldr	r7, [pc, #88]	; (20bc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbc>)
    2064:	2d00      	cmp	r5, #0
    2066:	bf38      	it	cc
    2068:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    206a:	688a      	ldr	r2, [r1, #8]
    206c:	4022      	ands	r2, r4
    206e:	d002      	beq.n	2076 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x76>
			cb->handler(port, cb, cb->pin_mask & pins);
    2070:	4638      	mov	r0, r7
    2072:	684b      	ldr	r3, [r1, #4]
    2074:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2076:	2d00      	cmp	r5, #0
    2078:	d0d0      	beq.n	201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
    207a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    207c:	4629      	mov	r1, r5
    207e:	2b00      	cmp	r3, #0
    2080:	bf38      	it	cc
    2082:	2300      	movcc	r3, #0
    2084:	461d      	mov	r5, r3
    2086:	e7f0      	b.n	206a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6a>
		if (level_pins & bit) {
    2088:	4226      	tst	r6, r4
    208a:	d00c      	beq.n	20a6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa6>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    208c:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    208e:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2092:	40f9      	lsrs	r1, r7
    2094:	f001 0101 	and.w	r1, r1, #1
    2098:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    209c:	b2c9      	uxtb	r1, r1
    209e:	f7ff fe35 	bl	1d0c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    20a2:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    20a6:	3701      	adds	r7, #1
		bit <<= 1;
    20a8:	0076      	lsls	r6, r6, #1
    20aa:	e7c1      	b.n	2030 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x30>
    20ac:	5000d17c 	.word	0x5000d17c
    20b0:	20000824 	.word	0x20000824
    20b4:	50842500 	.word	0x50842500
    20b8:	5000d000 	.word	0x5000d000
    20bc:	200000fc 	.word	0x200000fc

000020c0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    20c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    20c2:	794b      	ldrb	r3, [r1, #5]
    20c4:	2b01      	cmp	r3, #1
    20c6:	d029      	beq.n	211c <uarte_nrfx_configure+0x5c>
    20c8:	2b03      	cmp	r3, #3
    20ca:	d124      	bne.n	2116 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    20cc:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    20ce:	798b      	ldrb	r3, [r1, #6]
    20d0:	2b03      	cmp	r3, #3
    20d2:	d120      	bne.n	2116 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    20d4:	79cc      	ldrb	r4, [r1, #7]
    20d6:	b124      	cbz	r4, 20e2 <uarte_nrfx_configure+0x22>
    20d8:	2c01      	cmp	r4, #1
    20da:	d11c      	bne.n	2116 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    20dc:	6843      	ldr	r3, [r0, #4]
    20de:	791b      	ldrb	r3, [r3, #4]
    20e0:	b1cb      	cbz	r3, 2116 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    20e2:	790a      	ldrb	r2, [r1, #4]
    20e4:	b112      	cbz	r2, 20ec <uarte_nrfx_configure+0x2c>
    20e6:	2a02      	cmp	r2, #2
    20e8:	d115      	bne.n	2116 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    20ea:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    20ec:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    20ee:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    20f0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    20f4:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    20f6:	d065      	beq.n	21c4 <uarte_nrfx_configure+0x104>
    20f8:	d82d      	bhi.n	2156 <uarte_nrfx_configure+0x96>
    20fa:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    20fe:	d064      	beq.n	21ca <uarte_nrfx_configure+0x10a>
    2100:	d816      	bhi.n	2130 <uarte_nrfx_configure+0x70>
    2102:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2106:	d062      	beq.n	21ce <uarte_nrfx_configure+0x10e>
    2108:	d80a      	bhi.n	2120 <uarte_nrfx_configure+0x60>
    210a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    210e:	d061      	beq.n	21d4 <uarte_nrfx_configure+0x114>
    2110:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2114:	d061      	beq.n	21da <uarte_nrfx_configure+0x11a>
    2116:	f06f 0022 	mvn.w	r0, #34	; 0x22
    211a:	e052      	b.n	21c2 <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
    211c:	2600      	movs	r6, #0
    211e:	e7d6      	b.n	20ce <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2120:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2124:	d05c      	beq.n	21e0 <uarte_nrfx_configure+0x120>
    2126:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    212a:	d1f4      	bne.n	2116 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    212c:	4b37      	ldr	r3, [pc, #220]	; (220c <uarte_nrfx_configure+0x14c>)
    212e:	e03c      	b.n	21aa <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2130:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2134:	d057      	beq.n	21e6 <uarte_nrfx_configure+0x126>
    2136:	d807      	bhi.n	2148 <uarte_nrfx_configure+0x88>
    2138:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    213c:	d055      	beq.n	21ea <uarte_nrfx_configure+0x12a>
    213e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2142:	d1e8      	bne.n	2116 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2144:	4b32      	ldr	r3, [pc, #200]	; (2210 <uarte_nrfx_configure+0x150>)
    2146:	e030      	b.n	21aa <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2148:	f647 2712 	movw	r7, #31250	; 0x7a12
    214c:	42bb      	cmp	r3, r7
    214e:	d1e2      	bne.n	2116 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2150:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2154:	e029      	b.n	21aa <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2156:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    215a:	d048      	beq.n	21ee <uarte_nrfx_configure+0x12e>
    215c:	d813      	bhi.n	2186 <uarte_nrfx_configure+0xc6>
    215e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2162:	d047      	beq.n	21f4 <uarte_nrfx_configure+0x134>
    2164:	d809      	bhi.n	217a <uarte_nrfx_configure+0xba>
    2166:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    216a:	42bb      	cmp	r3, r7
    216c:	d044      	beq.n	21f8 <uarte_nrfx_configure+0x138>
    216e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2172:	d1d0      	bne.n	2116 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2174:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2178:	e017      	b.n	21aa <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    217a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    217e:	d1ca      	bne.n	2116 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2180:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2184:	e011      	b.n	21aa <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2186:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    218a:	d038      	beq.n	21fe <uarte_nrfx_configure+0x13e>
    218c:	d808      	bhi.n	21a0 <uarte_nrfx_configure+0xe0>
    218e:	4f21      	ldr	r7, [pc, #132]	; (2214 <uarte_nrfx_configure+0x154>)
    2190:	42bb      	cmp	r3, r7
    2192:	d037      	beq.n	2204 <uarte_nrfx_configure+0x144>
    2194:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2198:	d1bd      	bne.n	2116 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    219a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    219e:	e004      	b.n	21aa <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    21a0:	4f1d      	ldr	r7, [pc, #116]	; (2218 <uarte_nrfx_configure+0x158>)
    21a2:	42bb      	cmp	r3, r7
    21a4:	d1b7      	bne.n	2116 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    21a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    21aa:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    21ae:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    21b0:	4334      	orrs	r4, r6
    21b2:	4322      	orrs	r2, r4
    21b4:	3304      	adds	r3, #4
    21b6:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    21b8:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    21bc:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    21c0:	2000      	movs	r0, #0
}
    21c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    21c4:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    21c8:	e7ef      	b.n	21aa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    21ca:	4b14      	ldr	r3, [pc, #80]	; (221c <uarte_nrfx_configure+0x15c>)
    21cc:	e7ed      	b.n	21aa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    21ce:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    21d2:	e7ea      	b.n	21aa <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
    21d4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    21d8:	e7e7      	b.n	21aa <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    21da:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    21de:	e7e4      	b.n	21aa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    21e0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    21e4:	e7e1      	b.n	21aa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    21e6:	4b0e      	ldr	r3, [pc, #56]	; (2220 <uarte_nrfx_configure+0x160>)
    21e8:	e7df      	b.n	21aa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    21ea:	4b0e      	ldr	r3, [pc, #56]	; (2224 <uarte_nrfx_configure+0x164>)
    21ec:	e7dd      	b.n	21aa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    21ee:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    21f2:	e7da      	b.n	21aa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    21f4:	4b0c      	ldr	r3, [pc, #48]	; (2228 <uarte_nrfx_configure+0x168>)
    21f6:	e7d8      	b.n	21aa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    21f8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    21fc:	e7d5      	b.n	21aa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    21fe:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2202:	e7d2      	b.n	21aa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2204:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2208:	e7cf      	b.n	21aa <uarte_nrfx_configure+0xea>
    220a:	bf00      	nop
    220c:	0013b000 	.word	0x0013b000
    2210:	004ea000 	.word	0x004ea000
    2214:	0003d090 	.word	0x0003d090
    2218:	000f4240 	.word	0x000f4240
    221c:	00275000 	.word	0x00275000
    2220:	0075c000 	.word	0x0075c000
    2224:	003af000 	.word	0x003af000
    2228:	013a9000 	.word	0x013a9000

0000222c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    222c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2230:	4606      	mov	r6, r0
    2232:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2234:	68c7      	ldr	r7, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2236:	f002 fa6f 	bl	4718 <k_is_in_isr>
    223a:	b9b8      	cbnz	r0, 226c <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    223c:	4b28      	ldr	r3, [pc, #160]	; (22e0 <uarte_nrfx_poll_out+0xb4>)
    223e:	781b      	ldrb	r3, [r3, #0]
    2240:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    2244:	6872      	ldr	r2, [r6, #4]
    2246:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    2248:	b193      	cbz	r3, 2270 <uarte_nrfx_poll_out+0x44>
    224a:	f04f 0320 	mov.w	r3, #32
    224e:	f3ef 8411 	mrs	r4, BASEPRI
    2252:	f383 8811 	msr	BASEPRI, r3
    2256:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    225a:	4630      	mov	r0, r6
    225c:	f002 f934 	bl	44c8 <is_tx_ready>
    2260:	bb38      	cbnz	r0, 22b2 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    2262:	f384 8811 	msr	BASEPRI, r4
    2266:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    226a:	e7ee      	b.n	224a <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    226c:	2301      	movs	r3, #1
    226e:	e7e9      	b.n	2244 <uarte_nrfx_poll_out+0x18>
    2270:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2272:	4630      	mov	r0, r6
    2274:	f002 f928 	bl	44c8 <is_tx_ready>
    2278:	b970      	cbnz	r0, 2298 <uarte_nrfx_poll_out+0x6c>
    227a:	2001      	movs	r0, #1
    227c:	f002 f954 	bl	4528 <nrfx_busy_wait>
    2280:	3c01      	subs	r4, #1
    2282:	d1f6      	bne.n	2272 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    2284:	2100      	movs	r1, #0
    2286:	2021      	movs	r0, #33	; 0x21
    2288:	f001 f8be 	bl	3408 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    228c:	e7f0      	b.n	2270 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    228e:	f384 8811 	msr	BASEPRI, r4
    2292:	f3bf 8f6f 	isb	sy
}
    2296:	e7f5      	b.n	2284 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    2298:	f04f 0320 	mov.w	r3, #32
    229c:	f3ef 8411 	mrs	r4, BASEPRI
    22a0:	f383 8811 	msr	BASEPRI, r3
    22a4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    22a8:	4630      	mov	r0, r6
    22aa:	f002 f90d 	bl	44c8 <is_tx_ready>
    22ae:	2800      	cmp	r0, #0
    22b0:	d0ed      	beq.n	228e <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    22b2:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    22b4:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    22b6:	f807 8f10 	strb.w	r8, [r7, #16]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    22ba:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    22be:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    22c2:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    22c6:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    22ca:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    22ce:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    22d2:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    22d4:	f384 8811 	msr	BASEPRI, r4
    22d8:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    22dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    22e0:	200008fa 	.word	0x200008fa

000022e4 <uarte_instance_init.isra.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    22e4:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
    22e8:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    22ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    22ee:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
    22f0:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
    22f2:	460f      	mov	r7, r1
    22f4:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
    22f8:	4605      	mov	r5, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
    22fa:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
    22fc:	6808      	ldr	r0, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    22fe:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
    2300:	4b3d      	ldr	r3, [pc, #244]	; (23f8 <uarte_instance_init.isra.0+0x114>)
    *p_pin = pin_number & 0x1F;
    2302:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2306:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
    2308:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    230a:	2103      	movs	r1, #3
    230c:	3280      	adds	r2, #128	; 0x80
    230e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    2312:	687a      	ldr	r2, [r7, #4]
    2314:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
    2316:	bf1e      	ittt	ne
    2318:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    231c:	3180      	addne	r1, #128	; 0x80
    231e:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    2322:	68b9      	ldr	r1, [r7, #8]
    p_reg->PSEL.TXD = pseltxd;
    2324:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    2328:	1c48      	adds	r0, r1, #1
    232a:	bf18      	it	ne
    232c:	2000      	movne	r0, #0
    p_reg->PSEL.RXD = pselrxd;
    232e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    2332:	bf1e      	ittt	ne
    2334:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2338:	3280      	addne	r2, #128	; 0x80
    233a:	f843 0022 	strne.w	r0, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    233e:	68f8      	ldr	r0, [r7, #12]
    2340:	1c42      	adds	r2, r0, #1
    2342:	d00c      	beq.n	235e <uarte_instance_init.isra.0+0x7a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2344:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
    2348:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    234c:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
    2350:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2354:	f04f 0c03 	mov.w	ip, #3
    2358:	3280      	adds	r2, #128	; 0x80
    235a:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    235e:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    2362:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2366:	68e9      	ldr	r1, [r5, #12]
    2368:	4628      	mov	r0, r5
    236a:	3104      	adds	r1, #4
    236c:	f7ff fea8 	bl	20c0 <uarte_nrfx_configure>
	if (err) {
    2370:	4680      	mov	r8, r0
    2372:	2800      	cmp	r0, #0
    2374:	d139      	bne.n	23ea <uarte_instance_init.isra.0+0x106>

#ifdef CONFIG_PM_DEVICE
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
    2376:	686b      	ldr	r3, [r5, #4]
    2378:	799b      	ldrb	r3, [r3, #6]
    237a:	b19b      	cbz	r3, 23a4 <uarte_instance_init.isra.0+0xc0>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    237c:	f106 0012 	add.w	r0, r6, #18
    2380:	f000 f9de 	bl	2740 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2384:	4b1d      	ldr	r3, [pc, #116]	; (23fc <uarte_instance_init.isra.0+0x118>)
    2386:	4298      	cmp	r0, r3
    2388:	d132      	bne.n	23f0 <uarte_instance_init.isra.0+0x10c>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    238a:	7cb3      	ldrb	r3, [r6, #18]
    238c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2390:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2394:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2398:	2301      	movs	r3, #1
    239a:	7cb2      	ldrb	r2, [r6, #18]
    239c:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    239e:	4a18      	ldr	r2, [pc, #96]	; (2400 <uarte_instance_init.isra.0+0x11c>)
    23a0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    23a4:	2308      	movs	r3, #8
    23a6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    23aa:	687b      	ldr	r3, [r7, #4]
    23ac:	3301      	adds	r3, #1
    23ae:	d00c      	beq.n	23ca <uarte_instance_init.isra.0+0xe6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    23b0:	2300      	movs	r3, #0
    23b2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    23b6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    23ba:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    23be:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    23c2:	2301      	movs	r3, #1
    23c4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    23c8:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!get_dev_config(dev)->ppi_endtx) {
    23ca:	686b      	ldr	r3, [r5, #4]
    23cc:	799b      	ldrb	r3, [r3, #6]
    23ce:	b91b      	cbnz	r3, 23d8 <uarte_instance_init.isra.0+0xf4>
    p_reg->INTENSET = mask;
    23d0:	f44f 7380 	mov.w	r3, #256	; 0x100
    23d4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    23d8:	2300      	movs	r3, #0

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    23da:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    23dc:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    23e0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    23e4:	2301      	movs	r3, #1
    23e6:	60a3      	str	r3, [r4, #8]
    23e8:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    23ea:	4640      	mov	r0, r8
    23ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
    23f0:	f06f 0804 	mvn.w	r8, #4
    23f4:	e7f9      	b.n	23ea <uarte_instance_init.isra.0+0x106>
    23f6:	bf00      	nop
    23f8:	50842500 	.word	0x50842500
    23fc:	0bad0000 	.word	0x0bad0000
    2400:	50017000 	.word	0x50017000

00002404 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    2404:	b530      	push	{r4, r5, lr}
    2406:	b085      	sub	sp, #20
    2408:	466c      	mov	r4, sp
    240a:	4605      	mov	r5, r0
    240c:	4b08      	ldr	r3, [pc, #32]	; (2430 <uarte_0_init+0x2c>)
    240e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2414:	2200      	movs	r2, #0
    2416:	2101      	movs	r1, #1
    2418:	2008      	movs	r0, #8
    241a:	f7ff f8d7 	bl	15cc <z_arm_irq_priority_set>
    241e:	2008      	movs	r0, #8
    2420:	f7ff f8b6 	bl	1590 <arch_irq_enable>
    2424:	4621      	mov	r1, r4
    2426:	4628      	mov	r0, r5
    2428:	f7ff ff5c 	bl	22e4 <uarte_instance_init.isra.0>
    242c:	b005      	add	sp, #20
    242e:	bd30      	pop	{r4, r5, pc}
    2430:	00004a30 	.word	0x00004a30

00002434 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    2434:	b530      	push	{r4, r5, lr}
    2436:	b085      	sub	sp, #20
    2438:	466c      	mov	r4, sp
    243a:	4605      	mov	r5, r0
    243c:	4b08      	ldr	r3, [pc, #32]	; (2460 <uarte_1_init+0x2c>)
    243e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2444:	2200      	movs	r2, #0
    2446:	2101      	movs	r1, #1
    2448:	2009      	movs	r0, #9
    244a:	f7ff f8bf 	bl	15cc <z_arm_irq_priority_set>
    244e:	2009      	movs	r0, #9
    2450:	f7ff f89e 	bl	1590 <arch_irq_enable>
    2454:	4621      	mov	r1, r4
    2456:	4628      	mov	r0, r5
    2458:	f7ff ff44 	bl	22e4 <uarte_instance_init.isra.0>
    245c:	b005      	add	sp, #20
    245e:	bd30      	pop	{r4, r5, pc}
    2460:	00004a40 	.word	0x00004a40

00002464 <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    2464:	4b05      	ldr	r3, [pc, #20]	; (247c <nrf91_errata_14+0x18>)
    2466:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    2468:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    246a:	681b      	ldr	r3, [r3, #0]
    246c:	2b09      	cmp	r3, #9
    246e:	d103      	bne.n	2478 <nrf91_errata_14+0x14>
            {
                switch(var2)
    2470:	1e43      	subs	r3, r0, #1
    2472:	4258      	negs	r0, r3
    2474:	4158      	adcs	r0, r3
    2476:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2478:	2000      	movs	r0, #0
    #endif
}
    247a:	4770      	bx	lr
    247c:	00ff0134 	.word	0x00ff0134

00002480 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    2480:	b508      	push	{r3, lr}
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    2482:	4b47      	ldr	r3, [pc, #284]	; (25a0 <SystemInit+0x120>)
            if (var1 == 0x09)
    2484:	681b      	ldr	r3, [r3, #0]
    2486:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    2488:	bf01      	itttt	eq
    248a:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    248e:	2200      	moveq	r2, #0
    2490:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    2494:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    2498:	f7ff ffe4 	bl	2464 <nrf91_errata_14>
    249c:	b130      	cbz	r0, 24ac <SystemInit+0x2c>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    249e:	2301      	movs	r3, #1
    24a0:	4a40      	ldr	r2, [pc, #256]	; (25a4 <SystemInit+0x124>)
    24a2:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    24a4:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    24a8:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    24ac:	4b3c      	ldr	r3, [pc, #240]	; (25a0 <SystemInit+0x120>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    24ae:	681b      	ldr	r3, [r3, #0]
    24b0:	2b09      	cmp	r3, #9
    24b2:	d107      	bne.n	24c4 <SystemInit+0x44>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    24b4:	4b3c      	ldr	r3, [pc, #240]	; (25a8 <SystemInit+0x128>)
            {
                switch(var2)
    24b6:	681b      	ldr	r3, [r3, #0]
    24b8:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    24ba:	bf1e      	ittt	ne
    24bc:	2201      	movne	r2, #1
    24be:	4b3b      	ldrne	r3, [pc, #236]	; (25ac <SystemInit+0x12c>)
    24c0:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    24c4:	f7ff ffce 	bl	2464 <nrf91_errata_14>
    24c8:	b110      	cbz	r0, 24d0 <SystemInit+0x50>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    24ca:	220e      	movs	r2, #14
    24cc:	4b38      	ldr	r3, [pc, #224]	; (25b0 <SystemInit+0x130>)
    24ce:	601a      	str	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    24d0:	4b33      	ldr	r3, [pc, #204]	; (25a0 <SystemInit+0x120>)
            if (var1 == 0x09)
    24d2:	681b      	ldr	r3, [r3, #0]
    24d4:	2b09      	cmp	r3, #9
    24d6:	d104      	bne.n	24e2 <SystemInit+0x62>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    24d8:	2200      	movs	r2, #0
    24da:	4b36      	ldr	r3, [pc, #216]	; (25b4 <SystemInit+0x134>)
    24dc:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    24de:	2201      	movs	r2, #1
    24e0:	605a      	str	r2, [r3, #4]
{
    24e2:	2200      	movs	r2, #0
    24e4:	00d3      	lsls	r3, r2, #3
    24e6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    24ea:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    24ee:	3101      	adds	r1, #1
    24f0:	d008      	beq.n	2504 <SystemInit+0x84>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    24f2:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    24f6:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    24f8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    24fc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2500:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    2502:	d1ef      	bne.n	24e4 <SystemInit+0x64>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    2504:	4b2c      	ldr	r3, [pc, #176]	; (25b8 <SystemInit+0x138>)
    2506:	69da      	ldr	r2, [r3, #28]
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    2508:	07d1      	lsls	r1, r2, #31
    250a:	d53b      	bpl.n	2584 <SystemInit+0x104>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    250c:	4b2b      	ldr	r3, [pc, #172]	; (25bc <SystemInit+0x13c>)
    250e:	4619      	mov	r1, r3
    2510:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2514:	2a01      	cmp	r2, #1
    2516:	d1fb      	bne.n	2510 <SystemInit+0x90>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    2518:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    251c:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    2520:	2b01      	cmp	r3, #1
    2522:	d1fb      	bne.n	251c <SystemInit+0x9c>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    2524:	4b24      	ldr	r3, [pc, #144]	; (25b8 <SystemInit+0x138>)
    2526:	69da      	ldr	r2, [r3, #28]
          if (uicr_HFXOSRC_erased()){
    2528:	07d2      	lsls	r2, r2, #31
    252a:	d508      	bpl.n	253e <SystemInit+0xbe>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    252c:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    252e:	4923      	ldr	r1, [pc, #140]	; (25bc <SystemInit+0x13c>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    2530:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    2534:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2536:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    253a:	2a01      	cmp	r2, #1
    253c:	d1fb      	bne.n	2536 <SystemInit+0xb6>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    253e:	6a1a      	ldr	r2, [r3, #32]
    2540:	3201      	adds	r2, #1
    2542:	d10a      	bne.n	255a <SystemInit+0xda>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    2544:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    2546:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    254a:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    254e:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2550:	4a1a      	ldr	r2, [pc, #104]	; (25bc <SystemInit+0x13c>)
    2552:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2556:	2b01      	cmp	r3, #1
    2558:	d1fb      	bne.n	2552 <SystemInit+0xd2>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    255a:	2200      	movs	r2, #0
    255c:	4b17      	ldr	r3, [pc, #92]	; (25bc <SystemInit+0x13c>)
    255e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2562:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2566:	2a01      	cmp	r2, #1
    2568:	d1fb      	bne.n	2562 <SystemInit+0xe2>
  __ASM volatile ("dsb 0xF":::"memory");
    256a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    256e:	4914      	ldr	r1, [pc, #80]	; (25c0 <SystemInit+0x140>)
    2570:	4b14      	ldr	r3, [pc, #80]	; (25c4 <SystemInit+0x144>)
    2572:	68ca      	ldr	r2, [r1, #12]
    2574:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2578:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    257a:	60cb      	str	r3, [r1, #12]
    257c:	f3bf 8f4f 	dsb	sy
    __NOP();
    2580:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2582:	e7fd      	b.n	2580 <SystemInit+0x100>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    2584:	6a1b      	ldr	r3, [r3, #32]
    2586:	3301      	adds	r3, #1
    2588:	d0c0      	beq.n	250c <SystemInit+0x8c>
        SCB->NSACR |= (3UL << 10);
    258a:	4a0d      	ldr	r2, [pc, #52]	; (25c0 <SystemInit+0x140>)
    258c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2590:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2594:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    2598:	4b0b      	ldr	r3, [pc, #44]	; (25c8 <SystemInit+0x148>)
    259a:	4a0c      	ldr	r2, [pc, #48]	; (25cc <SystemInit+0x14c>)
    259c:	601a      	str	r2, [r3, #0]
}
    259e:	bd08      	pop	{r3, pc}
    25a0:	00ff0130 	.word	0x00ff0130
    25a4:	50004a38 	.word	0x50004a38
    25a8:	00ff0134 	.word	0x00ff0134
    25ac:	50004000 	.word	0x50004000
    25b0:	5003aee4 	.word	0x5003aee4
    25b4:	5000470c 	.word	0x5000470c
    25b8:	00ff8000 	.word	0x00ff8000
    25bc:	50039000 	.word	0x50039000
    25c0:	e000ed00 	.word	0xe000ed00
    25c4:	05fa0004 	.word	0x05fa0004
    25c8:	20000050 	.word	0x20000050
    25cc:	03d09000 	.word	0x03d09000

000025d0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    25d0:	4b04      	ldr	r3, [pc, #16]	; (25e4 <nrfx_clock_init+0x14>)
    25d2:	791a      	ldrb	r2, [r3, #4]
    25d4:	b922      	cbnz	r2, 25e0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    25d6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    25d8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    25da:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    25dc:	4802      	ldr	r0, [pc, #8]	; (25e8 <nrfx_clock_init+0x18>)
    25de:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    25e0:	4802      	ldr	r0, [pc, #8]	; (25ec <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    25e2:	4770      	bx	lr
    25e4:	20000840 	.word	0x20000840
    25e8:	0bad0000 	.word	0x0bad0000
    25ec:	0bad000c 	.word	0x0bad000c

000025f0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    25f0:	b110      	cbz	r0, 25f8 <nrfx_clock_start+0x8>
    25f2:	2801      	cmp	r0, #1
    25f4:	d020      	beq.n	2638 <nrfx_clock_start+0x48>
    25f6:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    25f8:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    25fc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2600:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2604:	03c9      	lsls	r1, r1, #15
    2606:	d511      	bpl.n	262c <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    2608:	f003 0303 	and.w	r3, r3, #3
    260c:	2b02      	cmp	r3, #2
    260e:	d10d      	bne.n	262c <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2610:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2614:	2200      	movs	r2, #0
    2616:	4b0d      	ldr	r3, [pc, #52]	; (264c <nrfx_clock_start+0x5c>)
    2618:	601a      	str	r2, [r3, #0]
    261a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    261c:	2202      	movs	r2, #2
    261e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2622:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2626:	2201      	movs	r2, #1
    2628:	609a      	str	r2, [r3, #8]
}
    262a:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    262c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2630:	2201      	movs	r2, #1
    2632:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    2636:	e7ed      	b.n	2614 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2638:	2200      	movs	r2, #0
    263a:	4b05      	ldr	r3, [pc, #20]	; (2650 <nrfx_clock_start+0x60>)
    263c:	601a      	str	r2, [r3, #0]
    263e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2640:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2644:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2648:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    264a:	4770      	bx	lr
    264c:	50005104 	.word	0x50005104
    2650:	50005100 	.word	0x50005100

00002654 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    2654:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2656:	b110      	cbz	r0, 265e <nrfx_clock_stop+0xa>
    2658:	2801      	cmp	r0, #1
    265a:	d018      	beq.n	268e <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    265c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    265e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2662:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2664:	2101      	movs	r1, #1
    2666:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    266a:	461c      	mov	r4, r3
    p_reg->INTENCLR = mask;
    266c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2670:	4a15      	ldr	r2, [pc, #84]	; (26c8 <nrfx_clock_stop+0x74>)
    2672:	6010      	str	r0, [r2, #0]
    2674:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2676:	4a15      	ldr	r2, [pc, #84]	; (26cc <nrfx_clock_stop+0x78>)
    2678:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    267a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    267e:	03db      	lsls	r3, r3, #15
    2680:	d5ec      	bpl.n	265c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    2682:	2001      	movs	r0, #1
    2684:	f001 ff50 	bl	4528 <nrfx_busy_wait>
    2688:	3d01      	subs	r5, #1
    268a:	d1f6      	bne.n	267a <nrfx_clock_stop+0x26>
    268c:	e7e6      	b.n	265c <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    268e:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2692:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2694:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2698:	4b0d      	ldr	r3, [pc, #52]	; (26d0 <nrfx_clock_stop+0x7c>)
    p_reg->INTENCLR = mask;
    269a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    269e:	601a      	str	r2, [r3, #0]
    26a0:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    26a2:	4b0c      	ldr	r3, [pc, #48]	; (26d4 <nrfx_clock_stop+0x80>)
    26a4:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    26a6:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    26aa:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    26ae:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    26b2:	03d2      	lsls	r2, r2, #15
    26b4:	d5d2      	bpl.n	265c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    26b6:	2b00      	cmp	r3, #0
    26b8:	d0d0      	beq.n	265c <nrfx_clock_stop+0x8>
    26ba:	2001      	movs	r0, #1
    26bc:	f001 ff34 	bl	4528 <nrfx_busy_wait>
    26c0:	3d01      	subs	r5, #1
    26c2:	d1f0      	bne.n	26a6 <nrfx_clock_stop+0x52>
    26c4:	e7ca      	b.n	265c <nrfx_clock_stop+0x8>
    26c6:	bf00      	nop
    26c8:	50005104 	.word	0x50005104
    26cc:	5000500c 	.word	0x5000500c
    26d0:	50005100 	.word	0x50005100
    26d4:	50005004 	.word	0x50005004

000026d8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    26d8:	4b16      	ldr	r3, [pc, #88]	; (2734 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    26da:	b510      	push	{r4, lr}
    26dc:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    26de:	b152      	cbz	r2, 26f6 <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26e0:	2000      	movs	r0, #0
    26e2:	6018      	str	r0, [r3, #0]
    26e4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    26e6:	2201      	movs	r2, #1
    26e8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    26ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    26f0:	4b11      	ldr	r3, [pc, #68]	; (2738 <nrfx_power_clock_irq_handler+0x60>)
    26f2:	681b      	ldr	r3, [r3, #0]
    26f4:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    26f6:	4b11      	ldr	r3, [pc, #68]	; (273c <nrfx_power_clock_irq_handler+0x64>)
    26f8:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    26fa:	b18a      	cbz	r2, 2720 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26fc:	2200      	movs	r2, #0
    26fe:	601a      	str	r2, [r3, #0]
    2700:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2702:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2706:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    270a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    270e:	f002 0203 	and.w	r2, r2, #3
    2712:	2a01      	cmp	r2, #1
    2714:	f04f 0102 	mov.w	r1, #2
    2718:	d103      	bne.n	2722 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    271a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    271e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2720:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    2722:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2726:	4b04      	ldr	r3, [pc, #16]	; (2738 <nrfx_power_clock_irq_handler+0x60>)
    2728:	2001      	movs	r0, #1
}
    272a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    272e:	681b      	ldr	r3, [r3, #0]
    2730:	4718      	bx	r3
    2732:	bf00      	nop
    2734:	50005100 	.word	0x50005100
    2738:	20000840 	.word	0x20000840
    273c:	50005104 	.word	0x50005104

00002740 <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    2740:	4a0b      	ldr	r2, [pc, #44]	; (2770 <nrfx_dppi_channel_alloc+0x30>)
{
    2742:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    2744:	6816      	ldr	r6, [r2, #0]
    2746:	43f1      	mvns	r1, r6
    2748:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
    274a:	b171      	cbz	r1, 276a <nrfx_dppi_channel_alloc+0x2a>
    274c:	2500      	movs	r5, #0
    274e:	b2ec      	uxtb	r4, r5
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
    2750:	fa21 f304 	lsr.w	r3, r1, r4
    2754:	07db      	lsls	r3, r3, #31
    2756:	f105 0501 	add.w	r5, r5, #1
    275a:	d5f8      	bpl.n	274e <nrfx_dppi_channel_alloc+0xe>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
    275c:	2301      	movs	r3, #1
    275e:	40a3      	lsls	r3, r4
    2760:	4333      	orrs	r3, r6
    *p_channel = channel;
    2762:	7004      	strb	r4, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
    2764:	4803      	ldr	r0, [pc, #12]	; (2774 <nrfx_dppi_channel_alloc+0x34>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
    2766:	6013      	str	r3, [r2, #0]
}
    2768:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
    276a:	4803      	ldr	r0, [pc, #12]	; (2778 <nrfx_dppi_channel_alloc+0x38>)
    276c:	e7fc      	b.n	2768 <nrfx_dppi_channel_alloc+0x28>
    276e:	bf00      	nop
    2770:	20000848 	.word	0x20000848
    2774:	0bad0000 	.word	0x0bad0000
    2778:	0bad0002 	.word	0x0bad0002

0000277c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    277c:	2301      	movs	r3, #1
    277e:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    2782:	f010 0fff 	tst.w	r0, #255	; 0xff
    2786:	d012      	beq.n	27ae <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    2788:	f04f 0320 	mov.w	r3, #32
    278c:	f3ef 8111 	mrs	r1, BASEPRI
    2790:	f383 8811 	msr	BASEPRI, r3
    2794:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    2798:	4a06      	ldr	r2, [pc, #24]	; (27b4 <nrfx_gpiote_channel_free+0x38>)
    279a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    279c:	ea23 0000 	bic.w	r0, r3, r0
    27a0:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
    27a2:	f381 8811 	msr	BASEPRI, r1
    27a6:	f3bf 8f6f 	isb	sy
    27aa:	4803      	ldr	r0, [pc, #12]	; (27b8 <nrfx_gpiote_channel_free+0x3c>)
    27ac:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    27ae:	4803      	ldr	r0, [pc, #12]	; (27bc <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    27b0:	4770      	bx	lr
    27b2:	bf00      	nop
    27b4:	2000084c 	.word	0x2000084c
    27b8:	0bad0000 	.word	0x0bad0000
    27bc:	0bad0004 	.word	0x0bad0004

000027c0 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    27c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    27c4:	22ff      	movs	r2, #255	; 0xff
{
    27c6:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
    27c8:	2601      	movs	r6, #1
{
    27ca:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    27cc:	f8df e058 	ldr.w	lr, [pc, #88]	; 2828 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    27d0:	4814      	ldr	r0, [pc, #80]	; (2824 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    27d2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 282c <nrfx_gpiote_channel_alloc+0x6c>
    27d6:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    27d8:	f04f 0120 	mov.w	r1, #32
    27dc:	f3ef 8c11 	mrs	ip, BASEPRI
    27e0:	f381 8811 	msr	BASEPRI, r1
    27e4:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    27e8:	fa22 f103 	lsr.w	r1, r2, r3
    27ec:	07c9      	lsls	r1, r1, #31
    27ee:	d50a      	bpl.n	2806 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    27f0:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
    27f4:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    27f8:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
    27fa:	bf01      	itttt	eq
    27fc:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
    27fe:	4339      	orreq	r1, r7
    2800:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            *p_channel = ch_idx;
    2804:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    2806:	f38c 8811 	msr	BASEPRI, ip
    280a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    280e:	4540      	cmp	r0, r8
    2810:	d005      	beq.n	281e <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    2812:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    2816:	439a      	bics	r2, r3
    2818:	f104 0401 	add.w	r4, r4, #1
    281c:	d1db      	bne.n	27d6 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    281e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2822:	bf00      	nop
    2824:	0bad0002 	.word	0x0bad0002
    2828:	2000084c 	.word	0x2000084c
    282c:	0bad0000 	.word	0x0bad0000

00002830 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    2830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2832:	4b10      	ldr	r3, [pc, #64]	; (2874 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    2834:	4f10      	ldr	r7, [pc, #64]	; (2878 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2836:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    283a:	3001      	adds	r0, #1
    283c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    2840:	42ae      	cmp	r6, r5
    2842:	d800      	bhi.n	2846 <z_sys_init_run_level+0x16>
		}
	}
}
    2844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    2846:	e9d5 3400 	ldrd	r3, r4, [r5]
    284a:	4620      	mov	r0, r4
    284c:	4798      	blx	r3
    284e:	b170      	cbz	r0, 286e <z_sys_init_run_level+0x3e>
    2850:	b16c      	cbz	r4, 286e <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
    2852:	2301      	movs	r3, #1
				(dev - __device_start));
    2854:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    2856:	4a09      	ldr	r2, [pc, #36]	; (287c <z_sys_init_run_level+0x4c>)
    2858:	1124      	asrs	r4, r4, #4
    285a:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    285c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    2860:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
    2864:	fa03 f404 	lsl.w	r4, r3, r4
    2868:	4304      	orrs	r4, r0
    286a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    286e:	3508      	adds	r5, #8
    2870:	e7e6      	b.n	2840 <z_sys_init_run_level+0x10>
    2872:	bf00      	nop
    2874:	00004b3c 	.word	0x00004b3c
    2878:	200000bc 	.word	0x200000bc
    287c:	2000011c 	.word	0x2000011c

00002880 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    2880:	4b08      	ldr	r3, [pc, #32]	; (28a4 <z_device_ready+0x24>)
    2882:	1ac0      	subs	r0, r0, r3
    2884:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    2886:	4b08      	ldr	r3, [pc, #32]	; (28a8 <z_device_ready+0x28>)
    2888:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    288a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    288e:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    2890:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
    2894:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    2898:	4210      	tst	r0, r2
}
    289a:	bf0c      	ite	eq
    289c:	4618      	moveq	r0, r3
    289e:	2000      	movne	r0, #0
    28a0:	4770      	bx	lr
    28a2:	bf00      	nop
    28a4:	200000bc 	.word	0x200000bc
    28a8:	2000011c 	.word	0x2000011c

000028ac <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    28ac:	4911      	ldr	r1, [pc, #68]	; (28f4 <z_impl_device_get_binding+0x48>)
{
    28ae:	b570      	push	{r4, r5, r6, lr}
    28b0:	4605      	mov	r5, r0
    28b2:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    28b4:	4c10      	ldr	r4, [pc, #64]	; (28f8 <z_impl_device_get_binding+0x4c>)
    28b6:	428c      	cmp	r4, r1
    28b8:	d104      	bne.n	28c4 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    28ba:	4c0f      	ldr	r4, [pc, #60]	; (28f8 <z_impl_device_get_binding+0x4c>)
    28bc:	42b4      	cmp	r4, r6
    28be:	d10a      	bne.n	28d6 <z_impl_device_get_binding+0x2a>
	return NULL;
    28c0:	2400      	movs	r4, #0
    28c2:	e014      	b.n	28ee <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    28c4:	4620      	mov	r0, r4
    28c6:	f7ff ffdb 	bl	2880 <z_device_ready>
    28ca:	b110      	cbz	r0, 28d2 <z_impl_device_get_binding+0x26>
    28cc:	6823      	ldr	r3, [r4, #0]
    28ce:	42ab      	cmp	r3, r5
    28d0:	d00d      	beq.n	28ee <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    28d2:	3410      	adds	r4, #16
    28d4:	e7ef      	b.n	28b6 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    28d6:	4620      	mov	r0, r4
    28d8:	f7ff ffd2 	bl	2880 <z_device_ready>
    28dc:	b908      	cbnz	r0, 28e2 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    28de:	3410      	adds	r4, #16
    28e0:	e7ec      	b.n	28bc <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    28e2:	4628      	mov	r0, r5
    28e4:	6821      	ldr	r1, [r4, #0]
    28e6:	f001 fd18 	bl	431a <strcmp>
    28ea:	2800      	cmp	r0, #0
    28ec:	d1f7      	bne.n	28de <z_impl_device_get_binding+0x32>
}
    28ee:	4620      	mov	r0, r4
    28f0:	bd70      	pop	{r4, r5, r6, pc}
    28f2:	bf00      	nop
    28f4:	2000011c 	.word	0x2000011c
    28f8:	200000bc 	.word	0x200000bc

000028fc <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
    28fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28fe:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
    2900:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
    2902:	4e15      	ldr	r6, [pc, #84]	; (2958 <idle+0x5c>)
	__asm__ volatile(
    2904:	f04f 0220 	mov.w	r2, #32
    2908:	f3ef 8311 	mrs	r3, BASEPRI
    290c:	f382 8811 	msr	BASEPRI, r2
    2910:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
    2914:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
    2916:	b188      	cbz	r0, 293c <idle+0x40>
			cpu->pending_abort = NULL;
    2918:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
    291a:	f383 8811 	msr	BASEPRI, r3
    291e:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
    2922:	f000 fbc3 	bl	30ac <z_thread_single_abort>
	__asm__ volatile(
    2926:	f04f 0320 	mov.w	r3, #32
    292a:	f3ef 8011 	mrs	r0, BASEPRI
    292e:	f383 8811 	msr	BASEPRI, r3
    2932:	f3bf 8f6f 	isb	sy
    2936:	f001 fe43 	bl	45c0 <z_reschedule_irqlock>
			continue;
    293a:	e7e3      	b.n	2904 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
    293c:	f001 ff0c 	bl	4758 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2940:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
    2942:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2944:	2802      	cmp	r0, #2
    2946:	bfd8      	it	le
    2948:	4608      	movle	r0, r1
    294a:	f001 ff15 	bl	4778 <z_set_timeout_expiry>
		_kernel.idle = ticks;
    294e:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
    2950:	f7fe feec 	bl	172c <arch_cpu_idle>
}
    2954:	e7d6      	b.n	2904 <idle+0x8>
    2956:	bf00      	nop
    2958:	2000089c 	.word	0x2000089c

0000295c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    295c:	4802      	ldr	r0, [pc, #8]	; (2968 <z_bss_zero+0xc>)
    295e:	4a03      	ldr	r2, [pc, #12]	; (296c <z_bss_zero+0x10>)
    2960:	2100      	movs	r1, #0
    2962:	1a12      	subs	r2, r2, r0
    2964:	f001 bd10 	b.w	4388 <memset>
    2968:	20000170 	.word	0x20000170
    296c:	200008fc 	.word	0x200008fc

00002970 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
    2970:	2201      	movs	r2, #1
{
    2972:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    2974:	4b09      	ldr	r3, [pc, #36]	; (299c <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2976:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    2978:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    297a:	f7ff ff59 	bl	2830 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    297e:	f000 fe57 	bl	3630 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    2982:	2003      	movs	r0, #3
    2984:	f7ff ff54 	bl	2830 <z_sys_init_run_level>

	z_init_static_threads();
    2988:	f000 fde0 	bl	354c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    298c:	f7fd fd58 	bl	440 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    2990:	4a03      	ldr	r2, [pc, #12]	; (29a0 <bg_thread_main+0x30>)
    2992:	7b13      	ldrb	r3, [r2, #12]
    2994:	f023 0301 	bic.w	r3, r3, #1
    2998:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    299a:	bd08      	pop	{r3, pc}
    299c:	200008fa 	.word	0x200008fa
    29a0:	200001f0 	.word	0x200001f0

000029a4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    29a4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    29a8:	4b34      	ldr	r3, [pc, #208]	; (2a7c <z_cstart+0xd8>)
    29aa:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
    29ac:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    29b0:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    29b4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    29b8:	2400      	movs	r4, #0
    29ba:	23e0      	movs	r3, #224	; 0xe0
    29bc:	4d30      	ldr	r5, [pc, #192]	; (2a80 <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    29be:	f04f 0b01 	mov.w	fp, #1
    29c2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    29c6:	77ec      	strb	r4, [r5, #31]
    29c8:	762c      	strb	r4, [r5, #24]
    29ca:	766c      	strb	r4, [r5, #25]
    29cc:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    29ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    29d0:	4e2c      	ldr	r6, [pc, #176]	; (2a84 <z_cstart+0xe0>)
    29d2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    29d6:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    29d8:	f7fe ffdc 	bl	1994 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    29dc:	f7fe fea0 	bl	1720 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    29e0:	f04f 33ff 	mov.w	r3, #4294967295
    29e4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    29e6:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    29e8:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    29ec:	4d26      	ldr	r5, [pc, #152]	; (2a88 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    29ee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    29f2:	ab06      	add	r3, sp, #24
    29f4:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    29f6:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    29f8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    29fc:	f7ff ff18 	bl	2830 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    2a00:	2001      	movs	r0, #1
    2a02:	f7ff ff15 	bl	2830 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2a06:	f8df a098 	ldr.w	sl, [pc, #152]	; 2aa0 <z_cstart+0xfc>
	z_sched_init();
    2a0a:	f000 fca3 	bl	3354 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2a0e:	4b1f      	ldr	r3, [pc, #124]	; (2a8c <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
    2a10:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2a16:	491e      	ldr	r1, [pc, #120]	; (2a90 <z_cstart+0xec>)
    2a18:	9305      	str	r3, [sp, #20]
    2a1a:	4630      	mov	r0, r6
    2a1c:	4653      	mov	r3, sl
    2a1e:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    2a22:	e9cd 4401 	strd	r4, r4, [sp, #4]
    2a26:	9400      	str	r4, [sp, #0]
    2a28:	f000 fd60 	bl	34ec <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2a2c:	7b73      	ldrb	r3, [r6, #13]
    2a2e:	4680      	mov	r8, r0
    2a30:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    2a34:	4630      	mov	r0, r6
    2a36:	7373      	strb	r3, [r6, #13]
    2a38:	f001 fdee 	bl	4618 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    2a3c:	230f      	movs	r3, #15
    2a3e:	4f15      	ldr	r7, [pc, #84]	; (2a94 <z_cstart+0xf0>)
    2a40:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2a44:	e9cd 4302 	strd	r4, r3, [sp, #8]
    2a48:	4913      	ldr	r1, [pc, #76]	; (2a98 <z_cstart+0xf4>)
    2a4a:	4b14      	ldr	r3, [pc, #80]	; (2a9c <z_cstart+0xf8>)
    2a4c:	4638      	mov	r0, r7
    2a4e:	e9cd b404 	strd	fp, r4, [sp, #16]
    2a52:	e9cd 5400 	strd	r5, r4, [sp]
    2a56:	f000 fd49 	bl	34ec <z_setup_new_thread>
    2a5a:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    2a5c:	4652      	mov	r2, sl
    2a5e:	f023 0304 	bic.w	r3, r3, #4
    2a62:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    2a64:	f105 031c 	add.w	r3, r5, #28
    2a68:	4641      	mov	r1, r8
    2a6a:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
    2a6c:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    2a70:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    2a72:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
    2a74:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    2a78:	f7fe fdda 	bl	1630 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2a7c:	20000e40 	.word	0x20000e40
    2a80:	e000ed00 	.word	0xe000ed00
    2a84:	200001f0 	.word	0x200001f0
    2a88:	2000089c 	.word	0x2000089c
    2a8c:	00004c9d 	.word	0x00004c9d
    2a90:	20000900 	.word	0x20000900
    2a94:	20000170 	.word	0x20000170
    2a98:	20000d00 	.word	0x20000d00
    2a9c:	000028fd 	.word	0x000028fd
    2aa0:	00002971 	.word	0x00002971

00002aa4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    2aa4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    2aa6:	4b0e      	ldr	r3, [pc, #56]	; (2ae0 <init_mem_slab_module+0x3c>)
    2aa8:	4c0e      	ldr	r4, [pc, #56]	; (2ae4 <init_mem_slab_module+0x40>)
    2aaa:	42a3      	cmp	r3, r4
    2aac:	d301      	bcc.n	2ab2 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    2aae:	2000      	movs	r0, #0
	return rc;
}
    2ab0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    2ab2:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    2ab6:	ea41 0200 	orr.w	r2, r1, r0
    2aba:	f012 0203 	ands.w	r2, r2, #3
    2abe:	d10b      	bne.n	2ad8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    2ac0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    2ac2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    2ac4:	42aa      	cmp	r2, r5
    2ac6:	d101      	bne.n	2acc <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    2ac8:	331c      	adds	r3, #28
    2aca:	e7ee      	b.n	2aaa <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    2acc:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    2ace:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    2ad0:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    2ad2:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    2ad4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    2ad6:	e7f5      	b.n	2ac4 <init_mem_slab_module+0x20>
		return -EINVAL;
    2ad8:	f06f 0015 	mvn.w	r0, #21
	return rc;
    2adc:	e7e8      	b.n	2ab0 <init_mem_slab_module+0xc>
    2ade:	bf00      	nop
    2ae0:	20000120 	.word	0x20000120
    2ae4:	20000120 	.word	0x20000120

00002ae8 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    2ae8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    2aea:	460c      	mov	r4, r1
    2aec:	4616      	mov	r6, r2
    2aee:	461f      	mov	r7, r3
    2af0:	f04f 0320 	mov.w	r3, #32
    2af4:	f3ef 8111 	mrs	r1, BASEPRI
    2af8:	f383 8811 	msr	BASEPRI, r3
    2afc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    2b00:	6943      	ldr	r3, [r0, #20]
    2b02:	b15b      	cbz	r3, 2b1c <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    2b04:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    2b06:	681b      	ldr	r3, [r3, #0]
    2b08:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    2b0a:	6983      	ldr	r3, [r0, #24]
    2b0c:	3301      	adds	r3, #1
    2b0e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    2b10:	2000      	movs	r0, #0
	__asm__ volatile(
    2b12:	f381 8811 	msr	BASEPRI, r1
    2b16:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    2b1a:	e011      	b.n	2b40 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    2b1c:	ea56 0207 	orrs.w	r2, r6, r7
    2b20:	d103      	bne.n	2b2a <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
    2b22:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    2b26:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    2b28:	e7f3      	b.n	2b12 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    2b2a:	4602      	mov	r2, r0
    2b2c:	e9cd 6700 	strd	r6, r7, [sp]
    2b30:	4804      	ldr	r0, [pc, #16]	; (2b44 <k_mem_slab_alloc+0x5c>)
    2b32:	f000 fb7d 	bl	3230 <z_pend_curr>
		if (result == 0) {
    2b36:	b918      	cbnz	r0, 2b40 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    2b38:	4b03      	ldr	r3, [pc, #12]	; (2b48 <k_mem_slab_alloc+0x60>)
    2b3a:	689b      	ldr	r3, [r3, #8]
    2b3c:	695b      	ldr	r3, [r3, #20]
    2b3e:	6023      	str	r3, [r4, #0]
}
    2b40:	b002      	add	sp, #8
    2b42:	bdd0      	pop	{r4, r6, r7, pc}
    2b44:	200008fb 	.word	0x200008fb
    2b48:	2000089c 	.word	0x2000089c

00002b4c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    2b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b4e:	4604      	mov	r4, r0
    2b50:	460d      	mov	r5, r1
	__asm__ volatile(
    2b52:	f04f 0320 	mov.w	r3, #32
    2b56:	f3ef 8611 	mrs	r6, BASEPRI
    2b5a:	f383 8811 	msr	BASEPRI, r3
    2b5e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
    2b62:	6947      	ldr	r7, [r0, #20]
    2b64:	b96f      	cbnz	r7, 2b82 <k_mem_slab_free+0x36>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    2b66:	f001 fdb2 	bl	46ce <z_unpend_first_thread>

		if (pending_thread != NULL) {
    2b6a:	b150      	cbz	r0, 2b82 <k_mem_slab_free+0x36>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    2b6c:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    2b6e:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    2b70:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    2b72:	f001 fd51 	bl	4618 <z_ready_thread>
			z_reschedule(&lock, key);
    2b76:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
    2b78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
    2b7c:	4807      	ldr	r0, [pc, #28]	; (2b9c <k_mem_slab_free+0x50>)
    2b7e:	f000 b90f 	b.w	2da0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    2b82:	682b      	ldr	r3, [r5, #0]
    2b84:	6962      	ldr	r2, [r4, #20]
    2b86:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    2b88:	682b      	ldr	r3, [r5, #0]
    2b8a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    2b8c:	69a3      	ldr	r3, [r4, #24]
    2b8e:	3b01      	subs	r3, #1
    2b90:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    2b92:	f386 8811 	msr	BASEPRI, r6
    2b96:	f3bf 8f6f 	isb	sy
}
    2b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b9c:	200008fb 	.word	0x200008fb

00002ba0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    2ba0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2ba4:	4604      	mov	r4, r0
    2ba6:	4616      	mov	r6, r2
    2ba8:	461f      	mov	r7, r3
	__asm__ volatile(
    2baa:	f04f 0320 	mov.w	r3, #32
    2bae:	f3ef 8811 	mrs	r8, BASEPRI
    2bb2:	f383 8811 	msr	BASEPRI, r3
    2bb6:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    2bba:	68c3      	ldr	r3, [r0, #12]
    2bbc:	4a32      	ldr	r2, [pc, #200]	; (2c88 <z_impl_k_mutex_lock+0xe8>)
    2bbe:	b16b      	cbz	r3, 2bdc <z_impl_k_mutex_lock+0x3c>
    2bc0:	6880      	ldr	r0, [r0, #8]
    2bc2:	6891      	ldr	r1, [r2, #8]
    2bc4:	4288      	cmp	r0, r1
    2bc6:	d019      	beq.n	2bfc <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    2bc8:	ea56 0307 	orrs.w	r3, r6, r7
    2bcc:	d118      	bne.n	2c00 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    2bce:	f388 8811 	msr	BASEPRI, r8
    2bd2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    2bd6:	f06f 000f 	mvn.w	r0, #15
    2bda:	e00c      	b.n	2bf6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    2bdc:	6891      	ldr	r1, [r2, #8]
    2bde:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    2be2:	3301      	adds	r3, #1
    2be4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    2be6:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    2be8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    2bea:	60a3      	str	r3, [r4, #8]
    2bec:	f388 8811 	msr	BASEPRI, r8
    2bf0:	f3bf 8f6f 	isb	sy
		return 0;
    2bf4:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    2bf6:	b002      	add	sp, #8
    2bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    2bfc:	6921      	ldr	r1, [r4, #16]
    2bfe:	e7f0      	b.n	2be2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    2c00:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2c04:	f991 100e 	ldrsb.w	r1, [r1, #14]
    2c08:	4299      	cmp	r1, r3
    2c0a:	bfa8      	it	ge
    2c0c:	4619      	movge	r1, r3
    2c0e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    2c12:	4299      	cmp	r1, r3
    2c14:	da2c      	bge.n	2c70 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    2c16:	f000 fb59 	bl	32cc <z_set_prio>
    2c1a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    2c1c:	4622      	mov	r2, r4
    2c1e:	4641      	mov	r1, r8
    2c20:	e9cd 6700 	strd	r6, r7, [sp]
    2c24:	4819      	ldr	r0, [pc, #100]	; (2c8c <z_impl_k_mutex_lock+0xec>)
    2c26:	f000 fb03 	bl	3230 <z_pend_curr>
	if (got_mutex == 0) {
    2c2a:	2800      	cmp	r0, #0
    2c2c:	d0e3      	beq.n	2bf6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    2c2e:	f04f 0320 	mov.w	r3, #32
    2c32:	f3ef 8611 	mrs	r6, BASEPRI
    2c36:	f383 8811 	msr	BASEPRI, r3
    2c3a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    2c3e:	6823      	ldr	r3, [r4, #0]
    2c40:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2c42:	42a3      	cmp	r3, r4
    2c44:	d007      	beq.n	2c56 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    2c46:	b133      	cbz	r3, 2c56 <z_impl_k_mutex_lock+0xb6>
    2c48:	f993 300e 	ldrsb.w	r3, [r3, #14]
    2c4c:	4299      	cmp	r1, r3
    2c4e:	bfa8      	it	ge
    2c50:	4619      	movge	r1, r3
    2c52:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    2c56:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    2c58:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2c5c:	4299      	cmp	r1, r3
    2c5e:	d109      	bne.n	2c74 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    2c60:	b16d      	cbz	r5, 2c7e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    2c62:	4631      	mov	r1, r6
    2c64:	4809      	ldr	r0, [pc, #36]	; (2c8c <z_impl_k_mutex_lock+0xec>)
    2c66:	f000 f89b 	bl	2da0 <z_reschedule>
	return -EAGAIN;
    2c6a:	f06f 000a 	mvn.w	r0, #10
    2c6e:	e7c2      	b.n	2bf6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    2c70:	2500      	movs	r5, #0
    2c72:	e7d3      	b.n	2c1c <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    2c74:	f000 fb2a 	bl	32cc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    2c78:	2800      	cmp	r0, #0
    2c7a:	d1f2      	bne.n	2c62 <z_impl_k_mutex_lock+0xc2>
    2c7c:	e7f0      	b.n	2c60 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    2c7e:	f386 8811 	msr	BASEPRI, r6
    2c82:	f3bf 8f6f 	isb	sy
    2c86:	e7f0      	b.n	2c6a <z_impl_k_mutex_lock+0xca>
    2c88:	2000089c 	.word	0x2000089c
    2c8c:	200008fb 	.word	0x200008fb

00002c90 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    2c90:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    2c92:	6883      	ldr	r3, [r0, #8]
{
    2c94:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    2c96:	2b00      	cmp	r3, #0
    2c98:	d036      	beq.n	2d08 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    2c9a:	4a1e      	ldr	r2, [pc, #120]	; (2d14 <z_impl_k_mutex_unlock+0x84>)
    2c9c:	6892      	ldr	r2, [r2, #8]
    2c9e:	4293      	cmp	r3, r2
    2ca0:	d135      	bne.n	2d0e <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    2ca2:	7bda      	ldrb	r2, [r3, #15]
    2ca4:	3a01      	subs	r2, #1
    2ca6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    2ca8:	68c3      	ldr	r3, [r0, #12]
    2caa:	2b01      	cmp	r3, #1
    2cac:	d005      	beq.n	2cba <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    2cae:	3b01      	subs	r3, #1
    2cb0:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    2cb2:	f000 f8d9 	bl	2e68 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    2cb6:	2000      	movs	r0, #0
}
    2cb8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    2cba:	f04f 0320 	mov.w	r3, #32
    2cbe:	f3ef 8511 	mrs	r5, BASEPRI
    2cc2:	f383 8811 	msr	BASEPRI, r3
    2cc6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    2cca:	6901      	ldr	r1, [r0, #16]
    2ccc:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    2cce:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2cd2:	4299      	cmp	r1, r3
    2cd4:	d001      	beq.n	2cda <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    2cd6:	f000 faf9 	bl	32cc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    2cda:	4620      	mov	r0, r4
    2cdc:	f001 fcf7 	bl	46ce <z_unpend_first_thread>
	mutex->owner = new_owner;
    2ce0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    2ce2:	b158      	cbz	r0, 2cfc <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    2ce4:	f990 200e 	ldrsb.w	r2, [r0, #14]
    2ce8:	6122      	str	r2, [r4, #16]
    2cea:	2200      	movs	r2, #0
    2cec:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    2cee:	f001 fc93 	bl	4618 <z_ready_thread>
		z_reschedule(&lock, key);
    2cf2:	4629      	mov	r1, r5
    2cf4:	4808      	ldr	r0, [pc, #32]	; (2d18 <z_impl_k_mutex_unlock+0x88>)
    2cf6:	f000 f853 	bl	2da0 <z_reschedule>
    2cfa:	e7da      	b.n	2cb2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    2cfc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    2cfe:	f385 8811 	msr	BASEPRI, r5
    2d02:	f3bf 8f6f 	isb	sy
    2d06:	e7d4      	b.n	2cb2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    2d08:	f06f 0015 	mvn.w	r0, #21
    2d0c:	e7d4      	b.n	2cb8 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    2d0e:	f04f 30ff 	mov.w	r0, #4294967295
    2d12:	e7d1      	b.n	2cb8 <z_impl_k_mutex_unlock+0x28>
    2d14:	2000089c 	.word	0x2000089c
    2d18:	200008fb 	.word	0x200008fb

00002d1c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    2d1c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    2d1e:	4c08      	ldr	r4, [pc, #32]	; (2d40 <z_reset_time_slice+0x24>)
    2d20:	6823      	ldr	r3, [r4, #0]
    2d22:	b15b      	cbz	r3, 2d3c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    2d24:	f7fe fb3e 	bl	13a4 <z_clock_elapsed>
    2d28:	4603      	mov	r3, r0
    2d2a:	6820      	ldr	r0, [r4, #0]
    2d2c:	4a05      	ldr	r2, [pc, #20]	; (2d44 <z_reset_time_slice+0x28>)
    2d2e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    2d30:	2100      	movs	r1, #0
	}
}
    2d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    2d36:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
    2d38:	f001 bd1e 	b.w	4778 <z_set_timeout_expiry>
}
    2d3c:	bd10      	pop	{r4, pc}
    2d3e:	bf00      	nop
    2d40:	200008d8 	.word	0x200008d8
    2d44:	2000089c 	.word	0x2000089c

00002d48 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    2d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d4a:	4605      	mov	r5, r0
    2d4c:	460c      	mov	r4, r1
	__asm__ volatile(
    2d4e:	f04f 0320 	mov.w	r3, #32
    2d52:	f3ef 8611 	mrs	r6, BASEPRI
    2d56:	f383 8811 	msr	BASEPRI, r3
    2d5a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    2d5e:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2d60:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2d64:	f240 30e7 	movw	r0, #999	; 0x3e7
    2d68:	2100      	movs	r1, #0
    2d6a:	4b0a      	ldr	r3, [pc, #40]	; (2d94 <k_sched_time_slice_set+0x4c>)
    2d6c:	fbe7 0105 	umlal	r0, r1, r7, r5
    2d70:	615a      	str	r2, [r3, #20]
    2d72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2d76:	2300      	movs	r3, #0
    2d78:	f7fd f9e4 	bl	144 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    2d7c:	4b06      	ldr	r3, [pc, #24]	; (2d98 <k_sched_time_slice_set+0x50>)
    2d7e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    2d80:	4b06      	ldr	r3, [pc, #24]	; (2d9c <k_sched_time_slice_set+0x54>)
    2d82:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    2d84:	f7ff ffca 	bl	2d1c <z_reset_time_slice>
	__asm__ volatile(
    2d88:	f386 8811 	msr	BASEPRI, r6
    2d8c:	f3bf 8f6f 	isb	sy
	}
}
    2d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d92:	bf00      	nop
    2d94:	2000089c 	.word	0x2000089c
    2d98:	200008d8 	.word	0x200008d8
    2d9c:	200008d4 	.word	0x200008d4

00002da0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    2da0:	b949      	cbnz	r1, 2db6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2da2:	f3ef 8005 	mrs	r0, IPSR
    2da6:	b930      	cbnz	r0, 2db6 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    2da8:	4b05      	ldr	r3, [pc, #20]	; (2dc0 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    2daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2dac:	689b      	ldr	r3, [r3, #8]
    2dae:	429a      	cmp	r2, r3
    2db0:	d001      	beq.n	2db6 <z_reschedule+0x16>
	ret = arch_swap(key);
    2db2:	f7fe bbd3 	b.w	155c <arch_swap>
    2db6:	f381 8811 	msr	BASEPRI, r1
    2dba:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    2dbe:	4770      	bx	lr
    2dc0:	2000089c 	.word	0x2000089c

00002dc4 <k_sched_lock>:
	__asm__ volatile(
    2dc4:	f04f 0320 	mov.w	r3, #32
    2dc8:	f3ef 8111 	mrs	r1, BASEPRI
    2dcc:	f383 8811 	msr	BASEPRI, r3
    2dd0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    2dd4:	4b04      	ldr	r3, [pc, #16]	; (2de8 <k_sched_lock+0x24>)
    2dd6:	689a      	ldr	r2, [r3, #8]
    2dd8:	7bd3      	ldrb	r3, [r2, #15]
    2dda:	3b01      	subs	r3, #1
    2ddc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    2dde:	f381 8811 	msr	BASEPRI, r1
    2de2:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    2de6:	4770      	bx	lr
    2de8:	2000089c 	.word	0x2000089c

00002dec <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    2dec:	4b09      	ldr	r3, [pc, #36]	; (2e14 <z_priq_dumb_remove+0x28>)
    2dee:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    2df2:	4282      	cmp	r2, r0
    2df4:	d105      	bne.n	2e02 <z_priq_dumb_remove+0x16>
    2df6:	689b      	ldr	r3, [r3, #8]
    2df8:	428b      	cmp	r3, r1
    2dfa:	d102      	bne.n	2e02 <z_priq_dumb_remove+0x16>
    2dfc:	7b4b      	ldrb	r3, [r1, #13]
    2dfe:	06db      	lsls	r3, r3, #27
    2e00:	d106      	bne.n	2e10 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    2e02:	e9d1 3200 	ldrd	r3, r2, [r1]
    2e06:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2e08:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2e0a:	2300      	movs	r3, #0
	node->prev = NULL;
    2e0c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    2e10:	4770      	bx	lr
    2e12:	bf00      	nop
    2e14:	2000089c 	.word	0x2000089c

00002e18 <update_cache>:
{
    2e18:	b538      	push	{r3, r4, r5, lr}
    2e1a:	4c12      	ldr	r4, [pc, #72]	; (2e64 <update_cache+0x4c>)
    2e1c:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
    2e1e:	6923      	ldr	r3, [r4, #16]
    2e20:	68a2      	ldr	r2, [r4, #8]
    2e22:	b10b      	cbz	r3, 2e28 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
    2e24:	68e5      	ldr	r5, [r4, #12]
    2e26:	e00c      	b.n	2e42 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
    2e28:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    2e2c:	f001 fbea 	bl	4604 <z_priq_dumb_best>
    2e30:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    2e32:	7b53      	ldrb	r3, [r2, #13]
    2e34:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
    2e36:	bf44      	itt	mi
    2e38:	f043 0308 	orrmi.w	r3, r3, #8
    2e3c:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
    2e3e:	2d00      	cmp	r5, #0
    2e40:	d0f0      	beq.n	2e24 <update_cache+0xc>
	if (preempt_ok != 0) {
    2e42:	b949      	cbnz	r1, 2e58 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
    2e44:	7b53      	ldrb	r3, [r2, #13]
    2e46:	06db      	lsls	r3, r3, #27
    2e48:	d106      	bne.n	2e58 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    2e4a:	69ab      	ldr	r3, [r5, #24]
    2e4c:	b923      	cbnz	r3, 2e58 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    2e4e:	89d3      	ldrh	r3, [r2, #14]
    2e50:	2b7f      	cmp	r3, #127	; 0x7f
    2e52:	d901      	bls.n	2e58 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    2e54:	62a2      	str	r2, [r4, #40]	; 0x28
}
    2e56:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    2e58:	4295      	cmp	r5, r2
    2e5a:	d001      	beq.n	2e60 <update_cache+0x48>
			z_reset_time_slice();
    2e5c:	f7ff ff5e 	bl	2d1c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    2e60:	62a5      	str	r5, [r4, #40]	; 0x28
}
    2e62:	e7f8      	b.n	2e56 <update_cache+0x3e>
    2e64:	2000089c 	.word	0x2000089c

00002e68 <k_sched_unlock>:
{
    2e68:	b510      	push	{r4, lr}
	__asm__ volatile(
    2e6a:	f04f 0320 	mov.w	r3, #32
    2e6e:	f3ef 8411 	mrs	r4, BASEPRI
    2e72:	f383 8811 	msr	BASEPRI, r3
    2e76:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    2e7a:	4b08      	ldr	r3, [pc, #32]	; (2e9c <k_sched_unlock+0x34>)
		update_cache(0);
    2e7c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    2e7e:	689a      	ldr	r2, [r3, #8]
    2e80:	7bd3      	ldrb	r3, [r2, #15]
    2e82:	3301      	adds	r3, #1
    2e84:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    2e86:	f7ff ffc7 	bl	2e18 <update_cache>
	__asm__ volatile(
    2e8a:	f384 8811 	msr	BASEPRI, r4
    2e8e:	f3bf 8f6f 	isb	sy
}
    2e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    2e96:	f001 bb9f 	b.w	45d8 <z_reschedule_unlocked>
    2e9a:	bf00      	nop
    2e9c:	2000089c 	.word	0x2000089c

00002ea0 <ready_thread>:
{
    2ea0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    2ea2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    2ea6:	7b43      	ldrb	r3, [r0, #13]
    2ea8:	2a00      	cmp	r2, #0
    2eaa:	db2c      	blt.n	2f06 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    2eac:	06db      	lsls	r3, r3, #27
    2eae:	d12a      	bne.n	2f06 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    2eb0:	6983      	ldr	r3, [r0, #24]
    2eb2:	bb43      	cbnz	r3, 2f06 <ready_thread+0x66>
	return list->head == list;
    2eb4:	4a15      	ldr	r2, [pc, #84]	; (2f0c <ready_thread+0x6c>)
    2eb6:	4611      	mov	r1, r2
    2eb8:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2ebc:	428c      	cmp	r4, r1
    2ebe:	bf18      	it	ne
    2ec0:	4623      	movne	r3, r4
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	bf38      	it	cc
    2ec6:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2ec8:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2eca:	b1b3      	cbz	r3, 2efa <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
    2ecc:	f990 600e 	ldrsb.w	r6, [r0, #14]
    2ed0:	f993 500e 	ldrsb.w	r5, [r3, #14]
    2ed4:	42ae      	cmp	r6, r5
    2ed6:	db03      	blt.n	2ee0 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
    2ed8:	42a3      	cmp	r3, r4
    2eda:	d00e      	beq.n	2efa <ready_thread+0x5a>
    2edc:	681b      	ldr	r3, [r3, #0]
    2ede:	e7f4      	b.n	2eca <ready_thread+0x2a>
	node->prev = successor->prev;
    2ee0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2ee2:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    2ee6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    2ee8:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    2eea:	7b43      	ldrb	r3, [r0, #13]
    2eec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2ef0:	7343      	strb	r3, [r0, #13]
}
    2ef2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    2ef4:	2000      	movs	r0, #0
    2ef6:	f7ff bf8f 	b.w	2e18 <update_cache>
	node->prev = list->tail;
    2efa:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    2efe:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2f00:	6018      	str	r0, [r3, #0]
	list->tail = node;
    2f02:	6310      	str	r0, [r2, #48]	; 0x30
}
    2f04:	e7f1      	b.n	2eea <ready_thread+0x4a>
}
    2f06:	bc70      	pop	{r4, r5, r6}
    2f08:	4770      	bx	lr
    2f0a:	bf00      	nop
    2f0c:	2000089c 	.word	0x2000089c

00002f10 <z_sched_start>:
{
    2f10:	b510      	push	{r4, lr}
	__asm__ volatile(
    2f12:	f04f 0220 	mov.w	r2, #32
    2f16:	f3ef 8411 	mrs	r4, BASEPRI
    2f1a:	f382 8811 	msr	BASEPRI, r2
    2f1e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    2f22:	7b42      	ldrb	r2, [r0, #13]
    2f24:	0751      	lsls	r1, r2, #29
    2f26:	d404      	bmi.n	2f32 <z_sched_start+0x22>
	__asm__ volatile(
    2f28:	f384 8811 	msr	BASEPRI, r4
    2f2c:	f3bf 8f6f 	isb	sy
}
    2f30:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2f32:	f022 0204 	bic.w	r2, r2, #4
    2f36:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    2f38:	f7ff ffb2 	bl	2ea0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    2f3c:	4621      	mov	r1, r4
}
    2f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    2f42:	4801      	ldr	r0, [pc, #4]	; (2f48 <z_sched_start+0x38>)
    2f44:	f7ff bf2c 	b.w	2da0 <z_reschedule>
    2f48:	200008fb 	.word	0x200008fb

00002f4c <move_thread_to_end_of_prio_q>:
{
    2f4c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    2f4e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    2f52:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    2f54:	2b00      	cmp	r3, #0
    2f56:	da02      	bge.n	2f5e <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    2f58:	4817      	ldr	r0, [pc, #92]	; (2fb8 <move_thread_to_end_of_prio_q+0x6c>)
    2f5a:	f7ff ff47 	bl	2dec <z_priq_dumb_remove>
	return list->head == list;
    2f5e:	4a17      	ldr	r2, [pc, #92]	; (2fbc <move_thread_to_end_of_prio_q+0x70>)
    2f60:	4610      	mov	r0, r2
    2f62:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2f66:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2f68:	4283      	cmp	r3, r0
    2f6a:	bf08      	it	eq
    2f6c:	2300      	moveq	r3, #0
    2f6e:	2b00      	cmp	r3, #0
    2f70:	bf38      	it	cc
    2f72:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2f74:	b1d3      	cbz	r3, 2fac <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
    2f76:	f991 600e 	ldrsb.w	r6, [r1, #14]
    2f7a:	f993 500e 	ldrsb.w	r5, [r3, #14]
    2f7e:	42ae      	cmp	r6, r5
    2f80:	db03      	blt.n	2f8a <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    2f82:	42a3      	cmp	r3, r4
    2f84:	d012      	beq.n	2fac <move_thread_to_end_of_prio_q+0x60>
    2f86:	681b      	ldr	r3, [r3, #0]
    2f88:	e7f4      	b.n	2f74 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
    2f8a:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    2f8c:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    2f90:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    2f92:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    2f94:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
    2f96:	6890      	ldr	r0, [r2, #8]
    2f98:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2f9c:	734b      	strb	r3, [r1, #13]
    2f9e:	1a43      	subs	r3, r0, r1
    2fa0:	4258      	negs	r0, r3
    2fa2:	4158      	adcs	r0, r3
}
    2fa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    2fa8:	f7ff bf36 	b.w	2e18 <update_cache>
	node->prev = list->tail;
    2fac:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
    2fb0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2fb2:	6019      	str	r1, [r3, #0]
	list->tail = node;
    2fb4:	6311      	str	r1, [r2, #48]	; 0x30
}
    2fb6:	e7ed      	b.n	2f94 <move_thread_to_end_of_prio_q+0x48>
    2fb8:	200008c8 	.word	0x200008c8
    2fbc:	2000089c 	.word	0x2000089c

00002fc0 <z_time_slice>:
{
    2fc0:	4601      	mov	r1, r0
    2fc2:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    2fc4:	f04f 0320 	mov.w	r3, #32
    2fc8:	f3ef 8411 	mrs	r4, BASEPRI
    2fcc:	f383 8811 	msr	BASEPRI, r3
    2fd0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    2fd4:	4b16      	ldr	r3, [pc, #88]	; (3030 <z_time_slice+0x70>)
    2fd6:	4a17      	ldr	r2, [pc, #92]	; (3034 <z_time_slice+0x74>)
    2fd8:	6898      	ldr	r0, [r3, #8]
    2fda:	6815      	ldr	r5, [r2, #0]
    2fdc:	42a8      	cmp	r0, r5
    2fde:	461d      	mov	r5, r3
    2fe0:	d106      	bne.n	2ff0 <z_time_slice+0x30>
			z_reset_time_slice();
    2fe2:	f7ff fe9b 	bl	2d1c <z_reset_time_slice>
	__asm__ volatile(
    2fe6:	f384 8811 	msr	BASEPRI, r4
    2fea:	f3bf 8f6f 	isb	sy
}
    2fee:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    2ff0:	2600      	movs	r6, #0
    2ff2:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    2ff4:	4a10      	ldr	r2, [pc, #64]	; (3038 <z_time_slice+0x78>)
    2ff6:	6812      	ldr	r2, [r2, #0]
    2ff8:	b1ba      	cbz	r2, 302a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    2ffa:	89c2      	ldrh	r2, [r0, #14]
    2ffc:	2a7f      	cmp	r2, #127	; 0x7f
    2ffe:	d814      	bhi.n	302a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    3000:	7b42      	ldrb	r2, [r0, #13]
    3002:	06d2      	lsls	r2, r2, #27
    3004:	d111      	bne.n	302a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3006:	4a0d      	ldr	r2, [pc, #52]	; (303c <z_time_slice+0x7c>)
    3008:	f990 600e 	ldrsb.w	r6, [r0, #14]
    300c:	6812      	ldr	r2, [r2, #0]
    300e:	4296      	cmp	r6, r2
    3010:	db0b      	blt.n	302a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    3012:	4a0b      	ldr	r2, [pc, #44]	; (3040 <z_time_slice+0x80>)
    3014:	4290      	cmp	r0, r2
    3016:	d008      	beq.n	302a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    3018:	695a      	ldr	r2, [r3, #20]
    301a:	428a      	cmp	r2, r1
    301c:	dc02      	bgt.n	3024 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    301e:	f7ff ff95 	bl	2f4c <move_thread_to_end_of_prio_q>
    3022:	e7de      	b.n	2fe2 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    3024:	1a52      	subs	r2, r2, r1
    3026:	615a      	str	r2, [r3, #20]
    3028:	e7dd      	b.n	2fe6 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    302a:	2300      	movs	r3, #0
    302c:	616b      	str	r3, [r5, #20]
    302e:	e7da      	b.n	2fe6 <z_time_slice+0x26>
    3030:	2000089c 	.word	0x2000089c
    3034:	200008d0 	.word	0x200008d0
    3038:	200008d8 	.word	0x200008d8
    303c:	200008d4 	.word	0x200008d4
    3040:	20000170 	.word	0x20000170

00003044 <z_impl_k_thread_suspend>:
{
    3044:	b570      	push	{r4, r5, r6, lr}
    3046:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3048:	3018      	adds	r0, #24
    304a:	f001 fb6f 	bl	472c <z_abort_timeout>
	__asm__ volatile(
    304e:	f04f 0320 	mov.w	r3, #32
    3052:	f3ef 8611 	mrs	r6, BASEPRI
    3056:	f383 8811 	msr	BASEPRI, r3
    305a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    305e:	f994 300d 	ldrsb.w	r3, [r4, #13]
    3062:	2b00      	cmp	r3, #0
    3064:	da07      	bge.n	3076 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    3066:	4621      	mov	r1, r4
    3068:	480e      	ldr	r0, [pc, #56]	; (30a4 <z_impl_k_thread_suspend+0x60>)
    306a:	f7ff febf 	bl	2dec <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    306e:	7b63      	ldrb	r3, [r4, #13]
    3070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3074:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    3076:	4d0c      	ldr	r5, [pc, #48]	; (30a8 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3078:	7b63      	ldrb	r3, [r4, #13]
    307a:	68a8      	ldr	r0, [r5, #8]
    307c:	f043 0310 	orr.w	r3, r3, #16
    3080:	7363      	strb	r3, [r4, #13]
    3082:	1b03      	subs	r3, r0, r4
    3084:	4258      	negs	r0, r3
    3086:	4158      	adcs	r0, r3
    3088:	f7ff fec6 	bl	2e18 <update_cache>
	__asm__ volatile(
    308c:	f386 8811 	msr	BASEPRI, r6
    3090:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3094:	68ab      	ldr	r3, [r5, #8]
    3096:	42a3      	cmp	r3, r4
    3098:	d103      	bne.n	30a2 <z_impl_k_thread_suspend+0x5e>
}
    309a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    309e:	f001 ba9b 	b.w	45d8 <z_reschedule_unlocked>
}
    30a2:	bd70      	pop	{r4, r5, r6, pc}
    30a4:	200008c8 	.word	0x200008c8
    30a8:	2000089c 	.word	0x2000089c

000030ac <z_thread_single_abort>:
{
    30ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30b0:	4604      	mov	r4, r0
	__asm__ volatile(
    30b2:	f04f 0320 	mov.w	r3, #32
    30b6:	f3ef 8211 	mrs	r2, BASEPRI
    30ba:	f383 8811 	msr	BASEPRI, r3
    30be:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
    30c2:	7b43      	ldrb	r3, [r0, #13]
    30c4:	f013 0f28 	tst.w	r3, #40	; 0x28
    30c8:	d005      	beq.n	30d6 <z_thread_single_abort+0x2a>
	__asm__ volatile(
    30ca:	f382 8811 	msr	BASEPRI, r2
    30ce:	f3bf 8f6f 	isb	sy
}
    30d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
    30d6:	f043 0320 	orr.w	r3, r3, #32
    30da:	7343      	strb	r3, [r0, #13]
    30dc:	f382 8811 	msr	BASEPRI, r2
    30e0:	f3bf 8f6f 	isb	sy
    30e4:	3018      	adds	r0, #24
    30e6:	f001 fb21 	bl	472c <z_abort_timeout>
	__asm__ volatile(
    30ea:	f04f 0320 	mov.w	r3, #32
    30ee:	f3ef 8611 	mrs	r6, BASEPRI
    30f2:	f383 8811 	msr	BASEPRI, r3
    30f6:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    30fa:	7b63      	ldrb	r3, [r4, #13]
    30fc:	06d8      	lsls	r0, r3, #27
    30fe:	d116      	bne.n	312e <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
    3100:	69a2      	ldr	r2, [r4, #24]
    3102:	b9a2      	cbnz	r2, 312e <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
    3104:	0619      	lsls	r1, r3, #24
    3106:	d507      	bpl.n	3118 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
    3108:	4621      	mov	r1, r4
    310a:	4826      	ldr	r0, [pc, #152]	; (31a4 <z_thread_single_abort+0xf8>)
    310c:	f7ff fe6e 	bl	2dec <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    3110:	7b63      	ldrb	r3, [r4, #13]
    3112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3116:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    3118:	4b23      	ldr	r3, [pc, #140]	; (31a8 <z_thread_single_abort+0xfc>)
    311a:	6898      	ldr	r0, [r3, #8]
    311c:	1b02      	subs	r2, r0, r4
    311e:	4250      	negs	r0, r2
    3120:	4150      	adcs	r0, r2
    3122:	f7ff fe79 	bl	2e18 <update_cache>
			waiter->base.pended_on = NULL;
    3126:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    3128:	f104 0830 	add.w	r8, r4, #48	; 0x30
    312c:	e01d      	b.n	316a <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
    312e:	079b      	lsls	r3, r3, #30
    3130:	d5f9      	bpl.n	3126 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
    3132:	4621      	mov	r1, r4
    3134:	68a0      	ldr	r0, [r4, #8]
    3136:	f7ff fe59 	bl	2dec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    313a:	7b63      	ldrb	r3, [r4, #13]
    313c:	f023 0302 	bic.w	r3, r3, #2
    3140:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    3142:	2300      	movs	r3, #0
    3144:	60a3      	str	r3, [r4, #8]
    3146:	e7ee      	b.n	3126 <z_thread_single_abort+0x7a>
    3148:	f105 0018 	add.w	r0, r5, #24
    314c:	f001 faee 	bl	472c <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    3150:	68a8      	ldr	r0, [r5, #8]
    3152:	4629      	mov	r1, r5
    3154:	f7ff fe4a 	bl	2dec <z_priq_dumb_remove>
    3158:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
    315a:	4628      	mov	r0, r5
    315c:	f023 0302 	bic.w	r3, r3, #2
    3160:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    3162:	60af      	str	r7, [r5, #8]
    3164:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    3166:	f7ff fe9b 	bl	2ea0 <ready_thread>
	return list->head == list;
    316a:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    316c:	4545      	cmp	r5, r8
    316e:	d001      	beq.n	3174 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    3170:	2d00      	cmp	r5, #0
    3172:	d1e9      	bne.n	3148 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
    3174:	4b0c      	ldr	r3, [pc, #48]	; (31a8 <z_thread_single_abort+0xfc>)
    3176:	689a      	ldr	r2, [r3, #8]
    3178:	4b0c      	ldr	r3, [pc, #48]	; (31ac <z_thread_single_abort+0x100>)
    317a:	429a      	cmp	r2, r3
    317c:	d102      	bne.n	3184 <z_thread_single_abort+0xd8>
			update_cache(1);
    317e:	2001      	movs	r0, #1
    3180:	f7ff fe4a 	bl	2e18 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    3184:	7b63      	ldrb	r3, [r4, #13]
    3186:	f043 0308 	orr.w	r3, r3, #8
    318a:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
    318c:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
    318e:	f386 8811 	msr	BASEPRI, r6
    3192:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
    3196:	2b00      	cmp	r3, #0
    3198:	d09b      	beq.n	30d2 <z_thread_single_abort+0x26>
		fn_abort(thread);
    319a:	4620      	mov	r0, r4
}
    319c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
    31a0:	4718      	bx	r3
    31a2:	bf00      	nop
    31a4:	200008c8 	.word	0x200008c8
    31a8:	2000089c 	.word	0x2000089c
    31ac:	20000170 	.word	0x20000170

000031b0 <unready_thread>:
{
    31b0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    31b2:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    31b6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    31b8:	2b00      	cmp	r3, #0
    31ba:	da06      	bge.n	31ca <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    31bc:	4807      	ldr	r0, [pc, #28]	; (31dc <unready_thread+0x2c>)
    31be:	f7ff fe15 	bl	2dec <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    31c2:	7b4b      	ldrb	r3, [r1, #13]
    31c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    31c8:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    31ca:	4b05      	ldr	r3, [pc, #20]	; (31e0 <unready_thread+0x30>)
    31cc:	6898      	ldr	r0, [r3, #8]
    31ce:	1a43      	subs	r3, r0, r1
    31d0:	4258      	negs	r0, r3
    31d2:	4158      	adcs	r0, r3
}
    31d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    31d8:	f7ff be1e 	b.w	2e18 <update_cache>
    31dc:	200008c8 	.word	0x200008c8
    31e0:	2000089c 	.word	0x2000089c

000031e4 <pend>:
{
    31e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31e8:	4606      	mov	r6, r0
    31ea:	4614      	mov	r4, r2
    31ec:	461d      	mov	r5, r3
	__asm__ volatile(
    31ee:	f04f 0320 	mov.w	r3, #32
    31f2:	f3ef 8711 	mrs	r7, BASEPRI
    31f6:	f383 8811 	msr	BASEPRI, r3
    31fa:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    31fe:	f001 fa3b 	bl	4678 <add_to_waitq_locked>
	__asm__ volatile(
    3202:	f387 8811 	msr	BASEPRI, r7
    3206:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    320a:	1c6b      	adds	r3, r5, #1
    320c:	bf08      	it	eq
    320e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    3212:	d008      	beq.n	3226 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    3214:	4622      	mov	r2, r4
    3216:	462b      	mov	r3, r5
    3218:	f106 0018 	add.w	r0, r6, #24
    321c:	4903      	ldr	r1, [pc, #12]	; (322c <pend+0x48>)
}
    321e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3222:	f000 ba7b 	b.w	371c <z_add_timeout>
    3226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    322a:	bf00      	nop
    322c:	00004639 	.word	0x00004639

00003230 <z_pend_curr>:
{
    3230:	b510      	push	{r4, lr}
    3232:	460c      	mov	r4, r1
	pending_current = _current;
    3234:	4b06      	ldr	r3, [pc, #24]	; (3250 <z_pend_curr+0x20>)
{
    3236:	4611      	mov	r1, r2
	pending_current = _current;
    3238:	6898      	ldr	r0, [r3, #8]
    323a:	4b06      	ldr	r3, [pc, #24]	; (3254 <z_pend_curr+0x24>)
    323c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    323e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3242:	f7ff ffcf 	bl	31e4 <pend>
    3246:	4620      	mov	r0, r4
}
    3248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    324c:	f7fe b986 	b.w	155c <arch_swap>
    3250:	2000089c 	.word	0x2000089c
    3254:	200008d0 	.word	0x200008d0

00003258 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
    3258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    325c:	4605      	mov	r5, r0
    325e:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
    3260:	f001 faa4 	bl	47ac <z_tick_get_32>
    3264:	4604      	mov	r4, r0
	__asm__ volatile(
    3266:	f04f 0320 	mov.w	r3, #32
    326a:	f3ef 8811 	mrs	r8, BASEPRI
    326e:	f383 8811 	msr	BASEPRI, r3
    3272:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    3276:	4e12      	ldr	r6, [pc, #72]	; (32c0 <z_tick_sleep.part.0+0x68>)
    3278:	4b12      	ldr	r3, [pc, #72]	; (32c4 <z_tick_sleep.part.0+0x6c>)
    327a:	68b0      	ldr	r0, [r6, #8]
	expected_wakeup_ticks = ticks + z_tick_get_32();
    327c:	442c      	add	r4, r5
	pending_current = _current;
    327e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    3280:	f7ff ff96 	bl	31b0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    3284:	68b0      	ldr	r0, [r6, #8]
    3286:	4910      	ldr	r1, [pc, #64]	; (32c8 <z_tick_sleep.part.0+0x70>)
    3288:	462a      	mov	r2, r5
    328a:	463b      	mov	r3, r7
    328c:	3018      	adds	r0, #24
    328e:	f000 fa45 	bl	371c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3292:	68b2      	ldr	r2, [r6, #8]
    3294:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3296:	7b53      	ldrb	r3, [r2, #13]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
    3298:	2500      	movs	r5, #0
    329a:	f043 0310 	orr.w	r3, r3, #16
    329e:	7353      	strb	r3, [r2, #13]
    32a0:	f7fe f95c 	bl	155c <arch_swap>
    32a4:	f001 fa82 	bl	47ac <z_tick_get_32>
    32a8:	1a24      	subs	r4, r4, r0
    32aa:	f165 0500 	sbc.w	r5, r5, #0
    32ae:	2c00      	cmp	r4, #0
    32b0:	f175 0300 	sbcs.w	r3, r5, #0
    32b4:	bfb8      	it	lt
    32b6:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
    32b8:	4620      	mov	r0, r4
    32ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32be:	bf00      	nop
    32c0:	2000089c 	.word	0x2000089c
    32c4:	200008d0 	.word	0x200008d0
    32c8:	00004639 	.word	0x00004639

000032cc <z_set_prio>:
{
    32cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32d0:	4604      	mov	r4, r0
    32d2:	f04f 0320 	mov.w	r3, #32
    32d6:	f3ef 8811 	mrs	r8, BASEPRI
    32da:	f383 8811 	msr	BASEPRI, r3
    32de:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    32e2:	7b43      	ldrb	r3, [r0, #13]
    32e4:	b24e      	sxtb	r6, r1
    32e6:	06db      	lsls	r3, r3, #27
    32e8:	d12e      	bne.n	3348 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
    32ea:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    32ec:	bb65      	cbnz	r5, 3348 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    32ee:	4f18      	ldr	r7, [pc, #96]	; (3350 <z_set_prio+0x84>)
    32f0:	4621      	mov	r1, r4
    32f2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    32f6:	f7ff fd79 	bl	2dec <z_priq_dumb_remove>
	return list->head == list;
    32fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    32fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    32fe:	4283      	cmp	r3, r0
    3300:	bf18      	it	ne
    3302:	461d      	movne	r5, r3
    3304:	2d00      	cmp	r5, #0
    3306:	bf38      	it	cc
    3308:	2500      	movcc	r5, #0
				thread->base.prio = prio;
    330a:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    330c:	b1b5      	cbz	r5, 333c <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    330e:	f995 100e 	ldrsb.w	r1, [r5, #14]
    3312:	42b1      	cmp	r1, r6
    3314:	dc03      	bgt.n	331e <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
    3316:	42aa      	cmp	r2, r5
    3318:	d010      	beq.n	333c <z_set_prio+0x70>
    331a:	682d      	ldr	r5, [r5, #0]
    331c:	e7f6      	b.n	330c <z_set_prio+0x40>
	node->prev = successor->prev;
    331e:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
    3320:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
    3324:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3326:	606c      	str	r4, [r5, #4]
			update_cache(1);
    3328:	2001      	movs	r0, #1
    332a:	f7ff fd75 	bl	2e18 <update_cache>
    332e:	2001      	movs	r0, #1
	__asm__ volatile(
    3330:	f388 8811 	msr	BASEPRI, r8
    3334:	f3bf 8f6f 	isb	sy
}
    3338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
    333c:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
    3340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3342:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3344:	633c      	str	r4, [r7, #48]	; 0x30
}
    3346:	e7ef      	b.n	3328 <z_set_prio+0x5c>
			thread->base.prio = prio;
    3348:	2000      	movs	r0, #0
    334a:	73a6      	strb	r6, [r4, #14]
    334c:	e7f0      	b.n	3330 <z_set_prio+0x64>
    334e:	bf00      	nop
    3350:	2000089c 	.word	0x2000089c

00003354 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    3354:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    3356:	4b04      	ldr	r3, [pc, #16]	; (3368 <z_sched_init+0x14>)
    3358:	4608      	mov	r0, r1
    335a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
    335e:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
    3362:	f7ff bcf1 	b.w	2d48 <k_sched_time_slice_set>
    3366:	bf00      	nop
    3368:	2000089c 	.word	0x2000089c

0000336c <z_impl_k_yield>:
{
    336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    336e:	4c24      	ldr	r4, [pc, #144]	; (3400 <z_impl_k_yield+0x94>)
    3370:	4b24      	ldr	r3, [pc, #144]	; (3404 <z_impl_k_yield+0x98>)
    3372:	68a2      	ldr	r2, [r4, #8]
    3374:	429a      	cmp	r2, r3
    3376:	d030      	beq.n	33da <z_impl_k_yield+0x6e>
	__asm__ volatile(
    3378:	f04f 0320 	mov.w	r3, #32
    337c:	f3ef 8511 	mrs	r5, BASEPRI
    3380:	f383 8811 	msr	BASEPRI, r3
    3384:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    3388:	68a1      	ldr	r1, [r4, #8]
    338a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    338e:	f7ff fd2d 	bl	2dec <z_priq_dumb_remove>
	return list->head == list;
    3392:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
    3394:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3396:	4283      	cmp	r3, r0
    3398:	bf08      	it	eq
    339a:	2300      	moveq	r3, #0
    339c:	2b00      	cmp	r3, #0
    339e:	bf38      	it	cc
    33a0:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    33a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    33a4:	b32b      	cbz	r3, 33f2 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    33a6:	f992 700e 	ldrsb.w	r7, [r2, #14]
    33aa:	f993 600e 	ldrsb.w	r6, [r3, #14]
    33ae:	42b7      	cmp	r7, r6
    33b0:	db03      	blt.n	33ba <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    33b2:	428b      	cmp	r3, r1
    33b4:	d01d      	beq.n	33f2 <z_impl_k_yield+0x86>
    33b6:	681b      	ldr	r3, [r3, #0]
    33b8:	e7f4      	b.n	33a4 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    33ba:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    33bc:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    33c0:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    33c2:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    33c4:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
    33c6:	2001      	movs	r0, #1
    33c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    33cc:	7353      	strb	r3, [r2, #13]
    33ce:	f7ff fd23 	bl	2e18 <update_cache>
	__asm__ volatile(
    33d2:	f385 8811 	msr	BASEPRI, r5
    33d6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    33da:	f04f 0320 	mov.w	r3, #32
    33de:	f3ef 8011 	mrs	r0, BASEPRI
    33e2:	f383 8811 	msr	BASEPRI, r3
    33e6:	f3bf 8f6f 	isb	sy
}
    33ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    33ee:	f7fe b8b5 	b.w	155c <arch_swap>
	node->prev = list->tail;
    33f2:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    33f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    33f8:	601a      	str	r2, [r3, #0]
	list->tail = node;
    33fa:	6322      	str	r2, [r4, #48]	; 0x30
}
    33fc:	e7e2      	b.n	33c4 <z_impl_k_yield+0x58>
    33fe:	bf00      	nop
    3400:	2000089c 	.word	0x2000089c
    3404:	20000170 	.word	0x20000170

00003408 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3408:	f1b1 3fff 	cmp.w	r1, #4294967295
    340c:	bf08      	it	eq
    340e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    3412:	b508      	push	{r3, lr}
    3414:	4602      	mov	r2, r0
    3416:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3418:	d106      	bne.n	3428 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
    341a:	4b0b      	ldr	r3, [pc, #44]	; (3448 <z_impl_k_sleep+0x40>)
    341c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    341e:	f7ff fe11 	bl	3044 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    3422:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    3426:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
    3428:	4313      	orrs	r3, r2
    342a:	d10a      	bne.n	3442 <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
    342c:	f7ff ff9e 	bl	336c <z_impl_k_yield>
		return 0;
    3430:	2000      	movs	r0, #0
		} else {
			return (t * to_hz + off) / from_hz;
    3432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3436:	fb80 2303 	smull	r2, r3, r0, r3
    343a:	0bd0      	lsrs	r0, r2, #15
    343c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    3440:	e7f1      	b.n	3426 <z_impl_k_sleep+0x1e>
    3442:	f7ff ff09 	bl	3258 <z_tick_sleep.part.0>
    3446:	e7f4      	b.n	3432 <z_impl_k_sleep+0x2a>
    3448:	2000089c 	.word	0x2000089c

0000344c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    344c:	4b01      	ldr	r3, [pc, #4]	; (3454 <z_impl_k_current_get+0x8>)
    344e:	6898      	ldr	r0, [r3, #8]
    3450:	4770      	bx	lr
    3452:	bf00      	nop
    3454:	2000089c 	.word	0x2000089c

00003458 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3458:	b538      	push	{r3, r4, r5, lr}
    345a:	4604      	mov	r4, r0
    345c:	f04f 0320 	mov.w	r3, #32
    3460:	f3ef 8511 	mrs	r5, BASEPRI
    3464:	f383 8811 	msr	BASEPRI, r3
    3468:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    346c:	f001 f92f 	bl	46ce <z_unpend_first_thread>

	if (thread != NULL) {
    3470:	b148      	cbz	r0, 3486 <z_impl_k_sem_give+0x2e>
    3472:	2200      	movs	r2, #0
    3474:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3476:	f001 f8cf 	bl	4618 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    347a:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    347c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3480:	4804      	ldr	r0, [pc, #16]	; (3494 <z_impl_k_sem_give+0x3c>)
    3482:	f7ff bc8d 	b.w	2da0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3486:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    348a:	429a      	cmp	r2, r3
    348c:	bf18      	it	ne
    348e:	3301      	addne	r3, #1
    3490:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    3492:	e7f2      	b.n	347a <z_impl_k_sem_give+0x22>
    3494:	200008fb 	.word	0x200008fb

00003498 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3498:	b537      	push	{r0, r1, r2, r4, r5, lr}
    349a:	4614      	mov	r4, r2
    349c:	461d      	mov	r5, r3
    349e:	f04f 0320 	mov.w	r3, #32
    34a2:	f3ef 8111 	mrs	r1, BASEPRI
    34a6:	f383 8811 	msr	BASEPRI, r3
    34aa:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    34ae:	6883      	ldr	r3, [r0, #8]
    34b0:	b143      	cbz	r3, 34c4 <z_impl_k_sem_take+0x2c>
		sem->count--;
    34b2:	3b01      	subs	r3, #1
    34b4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    34b6:	f381 8811 	msr	BASEPRI, r1
    34ba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    34be:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    34c0:	b003      	add	sp, #12
    34c2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    34c4:	ea54 0305 	orrs.w	r3, r4, r5
    34c8:	d106      	bne.n	34d8 <z_impl_k_sem_take+0x40>
    34ca:	f381 8811 	msr	BASEPRI, r1
    34ce:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    34d2:	f06f 000f 	mvn.w	r0, #15
    34d6:	e7f3      	b.n	34c0 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    34d8:	4602      	mov	r2, r0
    34da:	e9cd 4500 	strd	r4, r5, [sp]
    34de:	4802      	ldr	r0, [pc, #8]	; (34e8 <z_impl_k_sem_take+0x50>)
    34e0:	f7ff fea6 	bl	3230 <z_pend_curr>
	return ret;
    34e4:	e7ec      	b.n	34c0 <z_impl_k_sem_take+0x28>
    34e6:	bf00      	nop
    34e8:	200008fb 	.word	0x200008fb

000034ec <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    34ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
    34f0:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
    34f4:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    34f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    34fa:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
    34fc:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    34fe:	2504      	movs	r5, #4
    3500:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
    3502:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3504:	1dd6      	adds	r6, r2, #7
	thread_base->prio = priority;
    3506:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
    3508:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    350a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    350c:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
    3510:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    3514:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->sched_locked = 0U;
    3518:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    351a:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    351c:	9202      	str	r2, [sp, #8]
    351e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    3520:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3524:	9201      	str	r2, [sp, #4]
    3526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3528:	9200      	str	r2, [sp, #0]
    352a:	4642      	mov	r2, r8
    352c:	f7fe f864 	bl	15f8 <arch_new_thread>
	if (!_current) {
    3530:	4b05      	ldr	r3, [pc, #20]	; (3548 <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
    3532:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    3536:	689b      	ldr	r3, [r3, #8]
    3538:	b103      	cbz	r3, 353c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    353a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
    353c:	4640      	mov	r0, r8
    353e:	6763      	str	r3, [r4, #116]	; 0x74
    3540:	b004      	add	sp, #16
    3542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3546:	bf00      	nop
    3548:	2000089c 	.word	0x2000089c

0000354c <z_init_static_threads>:
{
    354c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    3550:	4e2a      	ldr	r6, [pc, #168]	; (35fc <z_init_static_threads+0xb0>)
    3552:	4d2b      	ldr	r5, [pc, #172]	; (3600 <z_init_static_threads+0xb4>)
    3554:	46b0      	mov	r8, r6
{
    3556:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    3558:	42b5      	cmp	r5, r6
    355a:	f105 0430 	add.w	r4, r5, #48	; 0x30
    355e:	d310      	bcc.n	3582 <z_init_static_threads+0x36>
	k_sched_lock();
    3560:	f7ff fc30 	bl	2dc4 <k_sched_lock>
    3564:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    3568:	f240 36e7 	movw	r6, #999	; 0x3e7
    356c:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    356e:	4c24      	ldr	r4, [pc, #144]	; (3600 <z_init_static_threads+0xb4>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    3570:	f8df a090 	ldr.w	sl, [pc, #144]	; 3604 <z_init_static_threads+0xb8>
    3574:	4544      	cmp	r4, r8
    3576:	d321      	bcc.n	35bc <z_init_static_threads+0x70>
}
    3578:	b006      	add	sp, #24
    357a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    357e:	f7ff bc73 	b.w	2e68 <k_sched_unlock>
		z_setup_new_thread(
    3582:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3586:	9305      	str	r3, [sp, #20]
    3588:	f854 3c10 	ldr.w	r3, [r4, #-16]
    358c:	9304      	str	r3, [sp, #16]
    358e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3592:	9303      	str	r3, [sp, #12]
    3594:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3598:	9302      	str	r3, [sp, #8]
    359a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    359e:	9301      	str	r3, [sp, #4]
    35a0:	f854 3c20 	ldr.w	r3, [r4, #-32]
    35a4:	9300      	str	r3, [sp, #0]
    35a6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    35aa:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    35ae:	f7ff ff9d 	bl	34ec <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    35b2:	f854 3c30 	ldr.w	r3, [r4, #-48]
    35b6:	65dd      	str	r5, [r3, #92]	; 0x5c
    35b8:	4625      	mov	r5, r4
    35ba:	e7cd      	b.n	3558 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    35bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    35be:	1c5a      	adds	r2, r3, #1
    35c0:	d00d      	beq.n	35de <z_init_static_threads+0x92>
    35c2:	4630      	mov	r0, r6
    35c4:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
    35c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    35ca:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    35ce:	42b9      	cmp	r1, r7
    35d0:	bf08      	it	eq
    35d2:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    35d4:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    35d6:	d104      	bne.n	35e2 <z_init_static_threads+0x96>
	z_sched_start(thread);
    35d8:	4628      	mov	r0, r5
    35da:	f7ff fc99 	bl	2f10 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    35de:	3430      	adds	r4, #48	; 0x30
    35e0:	e7c8      	b.n	3574 <z_init_static_threads+0x28>
    35e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    35e6:	2300      	movs	r3, #0
    35e8:	f7fc fdac 	bl	144 <__aeabi_uldivmod>
    35ec:	4602      	mov	r2, r0
    35ee:	460b      	mov	r3, r1
    35f0:	f105 0018 	add.w	r0, r5, #24
    35f4:	4651      	mov	r1, sl
    35f6:	f000 f891 	bl	371c <z_add_timeout>
    35fa:	e7f0      	b.n	35de <z_init_static_threads+0x92>
    35fc:	20000120 	.word	0x20000120
    3600:	20000120 	.word	0x20000120
    3604:	00004639 	.word	0x00004639

00003608 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
    3608:	b508      	push	{r3, lr}
	__asm__ volatile(
    360a:	f04f 0320 	mov.w	r3, #32
    360e:	f3ef 8411 	mrs	r4, BASEPRI
    3612:	f383 8811 	msr	BASEPRI, r3
    3616:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
    361a:	4b04      	ldr	r3, [pc, #16]	; (362c <z_self_abort+0x24>)
    361c:	6898      	ldr	r0, [r3, #8]
    361e:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
    3620:	f7ff fd10 	bl	3044 <z_impl_k_thread_suspend>
    3624:	4620      	mov	r0, r4
    3626:	f7fd ff99 	bl	155c <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    362a:	bf00      	nop
    362c:	2000089c 	.word	0x2000089c

00003630 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    3630:	4a02      	ldr	r2, [pc, #8]	; (363c <boot_banner+0xc>)
    3632:	4903      	ldr	r1, [pc, #12]	; (3640 <boot_banner+0x10>)
    3634:	4803      	ldr	r0, [pc, #12]	; (3644 <boot_banner+0x14>)
    3636:	f000 bb89 	b.w	3d4c <printk>
    363a:	bf00      	nop
    363c:	00004cd5 	.word	0x00004cd5
    3640:	00004ca2 	.word	0x00004ca2
    3644:	00004caf 	.word	0x00004caf

00003648 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3648:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    364a:	4806      	ldr	r0, [pc, #24]	; (3664 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    364c:	4a06      	ldr	r2, [pc, #24]	; (3668 <z_data_copy+0x20>)
    364e:	4907      	ldr	r1, [pc, #28]	; (366c <z_data_copy+0x24>)
    3650:	1a12      	subs	r2, r2, r0
    3652:	f000 fe6e 	bl	4332 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    365a:	4a05      	ldr	r2, [pc, #20]	; (3670 <z_data_copy+0x28>)
    365c:	4905      	ldr	r1, [pc, #20]	; (3674 <z_data_copy+0x2c>)
    365e:	4806      	ldr	r0, [pc, #24]	; (3678 <z_data_copy+0x30>)
    3660:	f000 be67 	b.w	4332 <memcpy>
    3664:	20000000 	.word	0x20000000
    3668:	20000170 	.word	0x20000170
    366c:	00004cd8 	.word	0x00004cd8
    3670:	00000000 	.word	0x00000000
    3674:	00004cd8 	.word	0x00004cd8
    3678:	20000000 	.word	0x20000000

0000367c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    367c:	4b03      	ldr	r3, [pc, #12]	; (368c <elapsed+0x10>)
    367e:	681b      	ldr	r3, [r3, #0]
    3680:	b90b      	cbnz	r3, 3686 <elapsed+0xa>
    3682:	f7fd be8f 	b.w	13a4 <z_clock_elapsed>
}
    3686:	2000      	movs	r0, #0
    3688:	4770      	bx	lr
    368a:	bf00      	nop
    368c:	200008dc 	.word	0x200008dc

00003690 <remove_timeout>:
{
    3690:	b530      	push	{r4, r5, lr}
    3692:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3694:	b168      	cbz	r0, 36b2 <remove_timeout+0x22>
    3696:	4a0a      	ldr	r2, [pc, #40]	; (36c0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    3698:	6852      	ldr	r2, [r2, #4]
    369a:	4290      	cmp	r0, r2
    369c:	d009      	beq.n	36b2 <remove_timeout+0x22>
	if (next(t) != NULL) {
    369e:	b143      	cbz	r3, 36b2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    36a0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    36a4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    36a8:	1912      	adds	r2, r2, r4
    36aa:	eb45 0101 	adc.w	r1, r5, r1
    36ae:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    36b2:	6842      	ldr	r2, [r0, #4]
    36b4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    36b6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    36b8:	2300      	movs	r3, #0
	node->prev = NULL;
    36ba:	e9c0 3300 	strd	r3, r3, [r0]
}
    36be:	bd30      	pop	{r4, r5, pc}
    36c0:	20000054 	.word	0x20000054

000036c4 <next_timeout>:

static int32_t next_timeout(void)
{
    36c4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    36c6:	4b13      	ldr	r3, [pc, #76]	; (3714 <next_timeout+0x50>)
    36c8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    36ca:	429c      	cmp	r4, r3
    36cc:	bf08      	it	eq
    36ce:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    36d0:	f7ff ffd4 	bl	367c <elapsed>
    36d4:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    36d6:	b1bc      	cbz	r4, 3708 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    36d8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    36dc:	1b40      	subs	r0, r0, r5
    36de:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    36e2:	2801      	cmp	r0, #1
    36e4:	f171 0300 	sbcs.w	r3, r1, #0
    36e8:	db11      	blt.n	370e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    36ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    36ee:	2300      	movs	r3, #0
    36f0:	4282      	cmp	r2, r0
    36f2:	eb73 0401 	sbcs.w	r4, r3, r1
    36f6:	da00      	bge.n	36fa <next_timeout+0x36>
    36f8:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    36fa:	4b07      	ldr	r3, [pc, #28]	; (3718 <next_timeout+0x54>)
    36fc:	695b      	ldr	r3, [r3, #20]
    36fe:	b113      	cbz	r3, 3706 <next_timeout+0x42>
    3700:	4298      	cmp	r0, r3
    3702:	bfa8      	it	ge
    3704:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    3706:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    3708:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    370c:	e7f5      	b.n	36fa <next_timeout+0x36>
    370e:	2000      	movs	r0, #0
    3710:	e7f3      	b.n	36fa <next_timeout+0x36>
    3712:	bf00      	nop
    3714:	20000054 	.word	0x20000054
    3718:	2000089c 	.word	0x2000089c

0000371c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    371c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3720:	9101      	str	r1, [sp, #4]
    3722:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3724:	1c4b      	adds	r3, r1, #1
    3726:	bf08      	it	eq
    3728:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    372c:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    372e:	d070      	beq.n	3812 <z_add_timeout+0xf6>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    3730:	f06f 0301 	mvn.w	r3, #1
    3734:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
    3738:	1c54      	adds	r4, r2, #1
    373a:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    373e:	ebb3 0804 	subs.w	r8, r3, r4
    3742:	eb6b 0905 	sbc.w	r9, fp, r5
    3746:	f1b8 0f00 	cmp.w	r8, #0
    374a:	f179 0300 	sbcs.w	r3, r9, #0
    374e:	db0f      	blt.n	3770 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    3750:	f7ff ff94 	bl	367c <elapsed>
    3754:	f06f 0301 	mvn.w	r3, #1
    3758:	4a34      	ldr	r2, [pc, #208]	; (382c <z_add_timeout+0x110>)
    375a:	e9d2 1c00 	ldrd	r1, ip, [r2]
    375e:	1a5b      	subs	r3, r3, r1
    3760:	eb6b 020c 	sbc.w	r2, fp, ip
    3764:	1b1e      	subs	r6, r3, r4
    3766:	eb62 0705 	sbc.w	r7, r2, r5
    376a:	1a34      	subs	r4, r6, r0
    376c:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3770:	9b01      	ldr	r3, [sp, #4]
    3772:	f8ca 3008 	str.w	r3, [sl, #8]
    3776:	f04f 0320 	mov.w	r3, #32
    377a:	f3ef 8611 	mrs	r6, BASEPRI
    377e:	f383 8811 	msr	BASEPRI, r3
    3782:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    3786:	f7ff ff79 	bl	367c <elapsed>
	ticks = MAX(1, ticks);
    378a:	2c01      	cmp	r4, #1
    378c:	f175 0300 	sbcs.w	r3, r5, #0
    3790:	bfbc      	itt	lt
    3792:	2401      	movlt	r4, #1
    3794:	2500      	movlt	r5, #0
	return list->head == list;
    3796:	4b26      	ldr	r3, [pc, #152]	; (3830 <z_add_timeout+0x114>)
		to->dticks = ticks + elapsed();
    3798:	1824      	adds	r4, r4, r0
    379a:	681a      	ldr	r2, [r3, #0]
    379c:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    37a0:	429a      	cmp	r2, r3
    37a2:	e9ca 4504 	strd	r4, r5, [sl, #16]
    37a6:	d001      	beq.n	37ac <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    37a8:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    37aa:	b952      	cbnz	r2, 37c2 <z_add_timeout+0xa6>
	node->prev = list->tail;
    37ac:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    37ae:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    37b2:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    37b6:	685a      	ldr	r2, [r3, #4]
    37b8:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    37bc:	f8c3 a004 	str.w	sl, [r3, #4]
}
    37c0:	e014      	b.n	37ec <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
    37c2:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    37c6:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    37ca:	4544      	cmp	r4, r8
    37cc:	eb75 0109 	sbcs.w	r1, r5, r9
    37d0:	da22      	bge.n	3818 <z_add_timeout+0xfc>
				t->dticks -= to->dticks;
    37d2:	ebb8 0004 	subs.w	r0, r8, r4
    37d6:	eb69 0105 	sbc.w	r1, r9, r5
    37da:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    37de:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    37e0:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    37e4:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    37e8:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    37ec:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    37ee:	429a      	cmp	r2, r3
    37f0:	d00b      	beq.n	380a <z_add_timeout+0xee>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    37f2:	4592      	cmp	sl, r2
    37f4:	d109      	bne.n	380a <z_add_timeout+0xee>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    37f6:	f7ff ff65 	bl	36c4 <next_timeout>

			if (next_time == 0 ||
    37fa:	b118      	cbz	r0, 3804 <z_add_timeout+0xe8>
			    _current_cpu->slice_ticks != next_time) {
    37fc:	4b0d      	ldr	r3, [pc, #52]	; (3834 <z_add_timeout+0x118>)
			if (next_time == 0 ||
    37fe:	695b      	ldr	r3, [r3, #20]
    3800:	4283      	cmp	r3, r0
    3802:	d002      	beq.n	380a <z_add_timeout+0xee>
				z_clock_set_timeout(next_time, false);
    3804:	2100      	movs	r1, #0
    3806:	f7fd fd9b 	bl	1340 <z_clock_set_timeout>
	__asm__ volatile(
    380a:	f386 8811 	msr	BASEPRI, r6
    380e:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    3812:	b003      	add	sp, #12
    3814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    3818:	ebb4 0008 	subs.w	r0, r4, r8
    381c:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    3820:	42ba      	cmp	r2, r7
    3822:	e9ca 0104 	strd	r0, r1, [sl, #16]
    3826:	d0c1      	beq.n	37ac <z_add_timeout+0x90>
    3828:	6812      	ldr	r2, [r2, #0]
    382a:	e7be      	b.n	37aa <z_add_timeout+0x8e>
    382c:	20000270 	.word	0x20000270
    3830:	20000054 	.word	0x20000054
    3834:	2000089c 	.word	0x2000089c

00003838 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    3838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    383c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    383e:	f7ff fbbf 	bl	2fc0 <z_time_slice>
	__asm__ volatile(
    3842:	f04f 0320 	mov.w	r3, #32
    3846:	f3ef 8411 	mrs	r4, BASEPRI
    384a:	f383 8811 	msr	BASEPRI, r3
    384e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    3852:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 3904 <z_clock_announce+0xcc>
    3856:	4d2a      	ldr	r5, [pc, #168]	; (3900 <z_clock_announce+0xc8>)
    3858:	4651      	mov	r1, sl
	return list->head == list;
    385a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 3908 <z_clock_announce+0xd0>
    385e:	602e      	str	r6, [r5, #0]
    3860:	f8d5 c000 	ldr.w	ip, [r5]
    3864:	f8db 0000 	ldr.w	r0, [fp]
    3868:	4662      	mov	r2, ip
    386a:	e9da 8900 	ldrd	r8, r9, [sl]
    386e:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3870:	4558      	cmp	r0, fp
    3872:	e9cd 2300 	strd	r2, r3, [sp]
    3876:	d00d      	beq.n	3894 <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    3878:	b160      	cbz	r0, 3894 <z_clock_announce+0x5c>
    387a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    387e:	45b4      	cmp	ip, r6
    3880:	41bb      	sbcs	r3, r7
    3882:	da1d      	bge.n	38c0 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    3884:	9b00      	ldr	r3, [sp, #0]
    3886:	ebb6 0c03 	subs.w	ip, r6, r3
    388a:	9b01      	ldr	r3, [sp, #4]
    388c:	eb67 0603 	sbc.w	r6, r7, r3
    3890:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    3894:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
    3896:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
    3898:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
    389a:	eb13 0208 	adds.w	r2, r3, r8
    389e:	9b01      	ldr	r3, [sp, #4]
    38a0:	eb43 0309 	adc.w	r3, r3, r9
    38a4:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
    38a8:	f7ff ff0c 	bl	36c4 <next_timeout>
    38ac:	4631      	mov	r1, r6
    38ae:	f7fd fd47 	bl	1340 <z_clock_set_timeout>
	__asm__ volatile(
    38b2:	f384 8811 	msr	BASEPRI, r4
    38b6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    38ba:	b003      	add	sp, #12
    38bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    38c0:	2200      	movs	r2, #0
    38c2:	2300      	movs	r3, #0
		curr_tick += dt;
    38c4:	eb18 0806 	adds.w	r8, r8, r6
    38c8:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    38cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    38d0:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    38d4:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    38d8:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    38da:	f7ff fed9 	bl	3690 <remove_timeout>
    38de:	f384 8811 	msr	BASEPRI, r4
    38e2:	f3bf 8f6f 	isb	sy
		t->fn(t);
    38e6:	6883      	ldr	r3, [r0, #8]
    38e8:	4798      	blx	r3
	__asm__ volatile(
    38ea:	f04f 0320 	mov.w	r3, #32
    38ee:	f3ef 8411 	mrs	r4, BASEPRI
    38f2:	f383 8811 	msr	BASEPRI, r3
    38f6:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    38fa:	4902      	ldr	r1, [pc, #8]	; (3904 <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    38fc:	e7b0      	b.n	3860 <z_clock_announce+0x28>
    38fe:	bf00      	nop
    3900:	200008dc 	.word	0x200008dc
    3904:	20000270 	.word	0x20000270
    3908:	20000054 	.word	0x20000054

0000390c <z_tick_get>:

int64_t z_tick_get(void)
{
    390c:	b510      	push	{r4, lr}
    390e:	f04f 0320 	mov.w	r3, #32
    3912:	f3ef 8411 	mrs	r4, BASEPRI
    3916:	f383 8811 	msr	BASEPRI, r3
    391a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    391e:	f7fd fd41 	bl	13a4 <z_clock_elapsed>
    3922:	4b06      	ldr	r3, [pc, #24]	; (393c <z_tick_get+0x30>)
    3924:	e9d3 2300 	ldrd	r2, r3, [r3]
    3928:	1812      	adds	r2, r2, r0
    392a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    392e:	f384 8811 	msr	BASEPRI, r4
    3932:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3936:	4610      	mov	r0, r2
    3938:	4619      	mov	r1, r3
    393a:	bd10      	pop	{r4, pc}
    393c:	20000270 	.word	0x20000270

00003940 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    3940:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    3942:	4c06      	ldr	r4, [pc, #24]	; (395c <statics_init+0x1c>)
    3944:	4d06      	ldr	r5, [pc, #24]	; (3960 <statics_init+0x20>)
    3946:	42ac      	cmp	r4, r5
    3948:	d301      	bcc.n	394e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    394a:	2000      	movs	r0, #0
    394c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    394e:	4620      	mov	r0, r4
    3950:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    3954:	f000 ff2e 	bl	47b4 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    3958:	3414      	adds	r4, #20
    395a:	e7f4      	b.n	3946 <statics_init+0x6>
    395c:	20000120 	.word	0x20000120
    3960:	20000120 	.word	0x20000120

00003964 <nrf_cc3xx_platform_init_no_rng>:
    3964:	b510      	push	{r4, lr}
    3966:	4c0a      	ldr	r4, [pc, #40]	; (3990 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    3968:	6823      	ldr	r3, [r4, #0]
    396a:	b11b      	cbz	r3, 3974 <nrf_cc3xx_platform_init_no_rng+0x10>
    396c:	2301      	movs	r3, #1
    396e:	2000      	movs	r0, #0
    3970:	6023      	str	r3, [r4, #0]
    3972:	bd10      	pop	{r4, pc}
    3974:	f000 f8ae 	bl	3ad4 <CC_LibInitNoRng>
    3978:	2800      	cmp	r0, #0
    397a:	d0f7      	beq.n	396c <nrf_cc3xx_platform_init_no_rng+0x8>
    397c:	3801      	subs	r0, #1
    397e:	2806      	cmp	r0, #6
    3980:	d803      	bhi.n	398a <nrf_cc3xx_platform_init_no_rng+0x26>
    3982:	4b04      	ldr	r3, [pc, #16]	; (3994 <nrf_cc3xx_platform_init_no_rng+0x30>)
    3984:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3988:	bd10      	pop	{r4, pc}
    398a:	4803      	ldr	r0, [pc, #12]	; (3998 <nrf_cc3xx_platform_init_no_rng+0x34>)
    398c:	bd10      	pop	{r4, pc}
    398e:	bf00      	nop
    3990:	200008e0 	.word	0x200008e0
    3994:	00004b54 	.word	0x00004b54
    3998:	ffff8ffe 	.word	0xffff8ffe

0000399c <nrf_cc3xx_platform_abort>:
    399c:	f3bf 8f4f 	dsb	sy
    39a0:	4905      	ldr	r1, [pc, #20]	; (39b8 <nrf_cc3xx_platform_abort+0x1c>)
    39a2:	4b06      	ldr	r3, [pc, #24]	; (39bc <nrf_cc3xx_platform_abort+0x20>)
    39a4:	68ca      	ldr	r2, [r1, #12]
    39a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    39aa:	4313      	orrs	r3, r2
    39ac:	60cb      	str	r3, [r1, #12]
    39ae:	f3bf 8f4f 	dsb	sy
    39b2:	bf00      	nop
    39b4:	e7fd      	b.n	39b2 <nrf_cc3xx_platform_abort+0x16>
    39b6:	bf00      	nop
    39b8:	e000ed00 	.word	0xe000ed00
    39bc:	05fa0004 	.word	0x05fa0004

000039c0 <CC_PalAbort>:
    39c0:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    39c4:	2100      	movs	r1, #0
    39c6:	b430      	push	{r4, r5}
    39c8:	4a06      	ldr	r2, [pc, #24]	; (39e4 <CC_PalAbort+0x24>)
    39ca:	4d07      	ldr	r5, [pc, #28]	; (39e8 <CC_PalAbort+0x28>)
    39cc:	4c07      	ldr	r4, [pc, #28]	; (39ec <CC_PalAbort+0x2c>)
    39ce:	602b      	str	r3, [r5, #0]
    39d0:	6013      	str	r3, [r2, #0]
    39d2:	6023      	str	r3, [r4, #0]
    39d4:	4a06      	ldr	r2, [pc, #24]	; (39f0 <CC_PalAbort+0x30>)
    39d6:	4c07      	ldr	r4, [pc, #28]	; (39f4 <CC_PalAbort+0x34>)
    39d8:	60eb      	str	r3, [r5, #12]
    39da:	6863      	ldr	r3, [r4, #4]
    39dc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    39e0:	bc30      	pop	{r4, r5}
    39e2:	4718      	bx	r3
    39e4:	50841404 	.word	0x50841404
    39e8:	50841400 	.word	0x50841400
    39ec:	50841408 	.word	0x50841408
    39f0:	50840000 	.word	0x50840000
    39f4:	2000005c 	.word	0x2000005c

000039f8 <nrf_cc3xx_platform_set_abort>:
    39f8:	4b02      	ldr	r3, [pc, #8]	; (3a04 <nrf_cc3xx_platform_set_abort+0xc>)
    39fa:	e9d0 1200 	ldrd	r1, r2, [r0]
    39fe:	e9c3 1200 	strd	r1, r2, [r3]
    3a02:	4770      	bx	lr
    3a04:	2000005c 	.word	0x2000005c

00003a08 <mutex_unlock>:
    3a08:	b148      	cbz	r0, 3a1e <mutex_unlock+0x16>
    3a0a:	6843      	ldr	r3, [r0, #4]
    3a0c:	b12b      	cbz	r3, 3a1a <mutex_unlock+0x12>
    3a0e:	f3bf 8f5f 	dmb	sy
    3a12:	2300      	movs	r3, #0
    3a14:	6003      	str	r3, [r0, #0]
    3a16:	4618      	mov	r0, r3
    3a18:	4770      	bx	lr
    3a1a:	4802      	ldr	r0, [pc, #8]	; (3a24 <mutex_unlock+0x1c>)
    3a1c:	4770      	bx	lr
    3a1e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3a22:	4770      	bx	lr
    3a24:	ffff8fea 	.word	0xffff8fea

00003a28 <mutex_free>:
    3a28:	b510      	push	{r4, lr}
    3a2a:	4604      	mov	r4, r0
    3a2c:	b128      	cbz	r0, 3a3a <mutex_free+0x12>
    3a2e:	6863      	ldr	r3, [r4, #4]
    3a30:	b113      	cbz	r3, 3a38 <mutex_free+0x10>
    3a32:	2300      	movs	r3, #0
    3a34:	6023      	str	r3, [r4, #0]
    3a36:	6063      	str	r3, [r4, #4]
    3a38:	bd10      	pop	{r4, pc}
    3a3a:	4b02      	ldr	r3, [pc, #8]	; (3a44 <mutex_free+0x1c>)
    3a3c:	4802      	ldr	r0, [pc, #8]	; (3a48 <mutex_free+0x20>)
    3a3e:	685b      	ldr	r3, [r3, #4]
    3a40:	4798      	blx	r3
    3a42:	e7f4      	b.n	3a2e <mutex_free+0x6>
    3a44:	2000005c 	.word	0x2000005c
    3a48:	00004b70 	.word	0x00004b70

00003a4c <mutex_init>:
    3a4c:	b510      	push	{r4, lr}
    3a4e:	4604      	mov	r4, r0
    3a50:	b130      	cbz	r0, 3a60 <mutex_init+0x14>
    3a52:	2200      	movs	r2, #0
    3a54:	6863      	ldr	r3, [r4, #4]
    3a56:	6022      	str	r2, [r4, #0]
    3a58:	f043 0301 	orr.w	r3, r3, #1
    3a5c:	6063      	str	r3, [r4, #4]
    3a5e:	bd10      	pop	{r4, pc}
    3a60:	4801      	ldr	r0, [pc, #4]	; (3a68 <mutex_init+0x1c>)
    3a62:	f7ff ffad 	bl	39c0 <CC_PalAbort>
    3a66:	e7f4      	b.n	3a52 <mutex_init+0x6>
    3a68:	00004b98 	.word	0x00004b98

00003a6c <mutex_lock>:
    3a6c:	b180      	cbz	r0, 3a90 <mutex_lock+0x24>
    3a6e:	6843      	ldr	r3, [r0, #4]
    3a70:	b163      	cbz	r3, 3a8c <mutex_lock+0x20>
    3a72:	2201      	movs	r2, #1
    3a74:	e8d0 3fef 	ldaex	r3, [r0]
    3a78:	e8c0 2fe1 	stlex	r1, r2, [r0]
    3a7c:	2900      	cmp	r1, #0
    3a7e:	d1f9      	bne.n	3a74 <mutex_lock+0x8>
    3a80:	2b01      	cmp	r3, #1
    3a82:	d0f7      	beq.n	3a74 <mutex_lock+0x8>
    3a84:	f3bf 8f5f 	dmb	sy
    3a88:	2000      	movs	r0, #0
    3a8a:	4770      	bx	lr
    3a8c:	4802      	ldr	r0, [pc, #8]	; (3a98 <mutex_lock+0x2c>)
    3a8e:	4770      	bx	lr
    3a90:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3a94:	4770      	bx	lr
    3a96:	bf00      	nop
    3a98:	ffff8fea 	.word	0xffff8fea

00003a9c <nrf_cc3xx_platform_set_mutexes>:
    3a9c:	b470      	push	{r4, r5, r6}
    3a9e:	4b0b      	ldr	r3, [pc, #44]	; (3acc <nrf_cc3xx_platform_set_mutexes+0x30>)
    3aa0:	6806      	ldr	r6, [r0, #0]
    3aa2:	68c2      	ldr	r2, [r0, #12]
    3aa4:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    3aa8:	e9c3 4202 	strd	r4, r2, [r3, #8]
    3aac:	e9c3 6500 	strd	r6, r5, [r3]
    3ab0:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    3ab4:	680e      	ldr	r6, [r1, #0]
    3ab6:	4b06      	ldr	r3, [pc, #24]	; (3ad0 <nrf_cc3xx_platform_set_mutexes+0x34>)
    3ab8:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    3abc:	e9c3 6500 	strd	r6, r5, [r3]
    3ac0:	e9c3 4002 	strd	r4, r0, [r3, #8]
    3ac4:	611a      	str	r2, [r3, #16]
    3ac6:	bc70      	pop	{r4, r5, r6}
    3ac8:	4770      	bx	lr
    3aca:	bf00      	nop
    3acc:	2000006c 	.word	0x2000006c
    3ad0:	2000007c 	.word	0x2000007c

00003ad4 <CC_LibInitNoRng>:
    3ad4:	b510      	push	{r4, lr}
    3ad6:	f000 f833 	bl	3b40 <CC_HalInit>
    3ada:	b120      	cbz	r0, 3ae6 <CC_LibInitNoRng+0x12>
    3adc:	2403      	movs	r4, #3
    3ade:	f000 f867 	bl	3bb0 <CC_PalTerminate>
    3ae2:	4620      	mov	r0, r4
    3ae4:	bd10      	pop	{r4, pc}
    3ae6:	f000 f835 	bl	3b54 <CC_PalInit>
    3aea:	b990      	cbnz	r0, 3b12 <CC_LibInitNoRng+0x3e>
    3aec:	f000 f8b0 	bl	3c50 <CC_PalPowerSaveModeSelect>
    3af0:	b990      	cbnz	r0, 3b18 <CC_LibInitNoRng+0x44>
    3af2:	4b0f      	ldr	r3, [pc, #60]	; (3b30 <CC_LibInitNoRng+0x5c>)
    3af4:	681b      	ldr	r3, [r3, #0]
    3af6:	0e1b      	lsrs	r3, r3, #24
    3af8:	2bf0      	cmp	r3, #240	; 0xf0
    3afa:	d108      	bne.n	3b0e <CC_LibInitNoRng+0x3a>
    3afc:	4a0d      	ldr	r2, [pc, #52]	; (3b34 <CC_LibInitNoRng+0x60>)
    3afe:	4b0e      	ldr	r3, [pc, #56]	; (3b38 <CC_LibInitNoRng+0x64>)
    3b00:	6812      	ldr	r2, [r2, #0]
    3b02:	429a      	cmp	r2, r3
    3b04:	d00a      	beq.n	3b1c <CC_LibInitNoRng+0x48>
    3b06:	2407      	movs	r4, #7
    3b08:	f000 f81c 	bl	3b44 <CC_HalTerminate>
    3b0c:	e7e7      	b.n	3ade <CC_LibInitNoRng+0xa>
    3b0e:	2406      	movs	r4, #6
    3b10:	e7fa      	b.n	3b08 <CC_LibInitNoRng+0x34>
    3b12:	2404      	movs	r4, #4
    3b14:	4620      	mov	r0, r4
    3b16:	bd10      	pop	{r4, pc}
    3b18:	2400      	movs	r4, #0
    3b1a:	e7f5      	b.n	3b08 <CC_LibInitNoRng+0x34>
    3b1c:	2001      	movs	r0, #1
    3b1e:	f000 f897 	bl	3c50 <CC_PalPowerSaveModeSelect>
    3b22:	4604      	mov	r4, r0
    3b24:	2800      	cmp	r0, #0
    3b26:	d1f7      	bne.n	3b18 <CC_LibInitNoRng+0x44>
    3b28:	4b04      	ldr	r3, [pc, #16]	; (3b3c <CC_LibInitNoRng+0x68>)
    3b2a:	6018      	str	r0, [r3, #0]
    3b2c:	e7d9      	b.n	3ae2 <CC_LibInitNoRng+0xe>
    3b2e:	bf00      	nop
    3b30:	50841928 	.word	0x50841928
    3b34:	50841a24 	.word	0x50841a24
    3b38:	20e00000 	.word	0x20e00000
    3b3c:	50841a0c 	.word	0x50841a0c

00003b40 <CC_HalInit>:
    3b40:	2000      	movs	r0, #0
    3b42:	4770      	bx	lr

00003b44 <CC_HalTerminate>:
    3b44:	2000      	movs	r0, #0
    3b46:	4770      	bx	lr

00003b48 <CC_HalMaskInterrupt>:
    3b48:	4b01      	ldr	r3, [pc, #4]	; (3b50 <CC_HalMaskInterrupt+0x8>)
    3b4a:	6018      	str	r0, [r3, #0]
    3b4c:	4770      	bx	lr
    3b4e:	bf00      	nop
    3b50:	50841a04 	.word	0x50841a04

00003b54 <CC_PalInit>:
    3b54:	b510      	push	{r4, lr}
    3b56:	4811      	ldr	r0, [pc, #68]	; (3b9c <CC_PalInit+0x48>)
    3b58:	f000 f848 	bl	3bec <CC_PalMutexCreate>
    3b5c:	b100      	cbz	r0, 3b60 <CC_PalInit+0xc>
    3b5e:	bd10      	pop	{r4, pc}
    3b60:	480f      	ldr	r0, [pc, #60]	; (3ba0 <CC_PalInit+0x4c>)
    3b62:	f000 f843 	bl	3bec <CC_PalMutexCreate>
    3b66:	2800      	cmp	r0, #0
    3b68:	d1f9      	bne.n	3b5e <CC_PalInit+0xa>
    3b6a:	4c0e      	ldr	r4, [pc, #56]	; (3ba4 <CC_PalInit+0x50>)
    3b6c:	4620      	mov	r0, r4
    3b6e:	f000 f83d 	bl	3bec <CC_PalMutexCreate>
    3b72:	2800      	cmp	r0, #0
    3b74:	d1f3      	bne.n	3b5e <CC_PalInit+0xa>
    3b76:	4b0c      	ldr	r3, [pc, #48]	; (3ba8 <CC_PalInit+0x54>)
    3b78:	480c      	ldr	r0, [pc, #48]	; (3bac <CC_PalInit+0x58>)
    3b7a:	601c      	str	r4, [r3, #0]
    3b7c:	f000 f836 	bl	3bec <CC_PalMutexCreate>
    3b80:	4601      	mov	r1, r0
    3b82:	2800      	cmp	r0, #0
    3b84:	d1eb      	bne.n	3b5e <CC_PalInit+0xa>
    3b86:	f000 f82d 	bl	3be4 <CC_PalDmaInit>
    3b8a:	4604      	mov	r4, r0
    3b8c:	b108      	cbz	r0, 3b92 <CC_PalInit+0x3e>
    3b8e:	4620      	mov	r0, r4
    3b90:	bd10      	pop	{r4, pc}
    3b92:	f000 f83f 	bl	3c14 <CC_PalPowerSaveModeInit>
    3b96:	4620      	mov	r0, r4
    3b98:	e7fa      	b.n	3b90 <CC_PalInit+0x3c>
    3b9a:	bf00      	nop
    3b9c:	200000b4 	.word	0x200000b4
    3ba0:	200000a8 	.word	0x200000a8
    3ba4:	200000b0 	.word	0x200000b0
    3ba8:	200000b8 	.word	0x200000b8
    3bac:	200000ac 	.word	0x200000ac

00003bb0 <CC_PalTerminate>:
    3bb0:	b508      	push	{r3, lr}
    3bb2:	4808      	ldr	r0, [pc, #32]	; (3bd4 <CC_PalTerminate+0x24>)
    3bb4:	f000 f824 	bl	3c00 <CC_PalMutexDestroy>
    3bb8:	4807      	ldr	r0, [pc, #28]	; (3bd8 <CC_PalTerminate+0x28>)
    3bba:	f000 f821 	bl	3c00 <CC_PalMutexDestroy>
    3bbe:	4807      	ldr	r0, [pc, #28]	; (3bdc <CC_PalTerminate+0x2c>)
    3bc0:	f000 f81e 	bl	3c00 <CC_PalMutexDestroy>
    3bc4:	4806      	ldr	r0, [pc, #24]	; (3be0 <CC_PalTerminate+0x30>)
    3bc6:	f000 f81b 	bl	3c00 <CC_PalMutexDestroy>
    3bca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3bce:	f000 b80b 	b.w	3be8 <CC_PalDmaTerminate>
    3bd2:	bf00      	nop
    3bd4:	200000b4 	.word	0x200000b4
    3bd8:	200000a8 	.word	0x200000a8
    3bdc:	200000b0 	.word	0x200000b0
    3be0:	200000ac 	.word	0x200000ac

00003be4 <CC_PalDmaInit>:
    3be4:	2000      	movs	r0, #0
    3be6:	4770      	bx	lr

00003be8 <CC_PalDmaTerminate>:
    3be8:	4770      	bx	lr
    3bea:	bf00      	nop

00003bec <CC_PalMutexCreate>:
    3bec:	b508      	push	{r3, lr}
    3bee:	4b03      	ldr	r3, [pc, #12]	; (3bfc <CC_PalMutexCreate+0x10>)
    3bf0:	6802      	ldr	r2, [r0, #0]
    3bf2:	681b      	ldr	r3, [r3, #0]
    3bf4:	6810      	ldr	r0, [r2, #0]
    3bf6:	4798      	blx	r3
    3bf8:	2000      	movs	r0, #0
    3bfa:	bd08      	pop	{r3, pc}
    3bfc:	2000006c 	.word	0x2000006c

00003c00 <CC_PalMutexDestroy>:
    3c00:	b508      	push	{r3, lr}
    3c02:	4b03      	ldr	r3, [pc, #12]	; (3c10 <CC_PalMutexDestroy+0x10>)
    3c04:	6802      	ldr	r2, [r0, #0]
    3c06:	685b      	ldr	r3, [r3, #4]
    3c08:	6810      	ldr	r0, [r2, #0]
    3c0a:	4798      	blx	r3
    3c0c:	2000      	movs	r0, #0
    3c0e:	bd08      	pop	{r3, pc}
    3c10:	2000006c 	.word	0x2000006c

00003c14 <CC_PalPowerSaveModeInit>:
    3c14:	b570      	push	{r4, r5, r6, lr}
    3c16:	4c09      	ldr	r4, [pc, #36]	; (3c3c <CC_PalPowerSaveModeInit+0x28>)
    3c18:	4d09      	ldr	r5, [pc, #36]	; (3c40 <CC_PalPowerSaveModeInit+0x2c>)
    3c1a:	6920      	ldr	r0, [r4, #16]
    3c1c:	68ab      	ldr	r3, [r5, #8]
    3c1e:	4798      	blx	r3
    3c20:	b118      	cbz	r0, 3c2a <CC_PalPowerSaveModeInit+0x16>
    3c22:	4b08      	ldr	r3, [pc, #32]	; (3c44 <CC_PalPowerSaveModeInit+0x30>)
    3c24:	4808      	ldr	r0, [pc, #32]	; (3c48 <CC_PalPowerSaveModeInit+0x34>)
    3c26:	685b      	ldr	r3, [r3, #4]
    3c28:	4798      	blx	r3
    3c2a:	2100      	movs	r1, #0
    3c2c:	4a07      	ldr	r2, [pc, #28]	; (3c4c <CC_PalPowerSaveModeInit+0x38>)
    3c2e:	68eb      	ldr	r3, [r5, #12]
    3c30:	6011      	str	r1, [r2, #0]
    3c32:	6920      	ldr	r0, [r4, #16]
    3c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3c38:	4718      	bx	r3
    3c3a:	bf00      	nop
    3c3c:	2000007c 	.word	0x2000007c
    3c40:	2000006c 	.word	0x2000006c
    3c44:	2000005c 	.word	0x2000005c
    3c48:	00004bbc 	.word	0x00004bbc
    3c4c:	200008f4 	.word	0x200008f4

00003c50 <CC_PalPowerSaveModeSelect>:
    3c50:	b570      	push	{r4, r5, r6, lr}
    3c52:	4d1a      	ldr	r5, [pc, #104]	; (3cbc <CC_PalPowerSaveModeSelect+0x6c>)
    3c54:	4e1a      	ldr	r6, [pc, #104]	; (3cc0 <CC_PalPowerSaveModeSelect+0x70>)
    3c56:	4604      	mov	r4, r0
    3c58:	68b2      	ldr	r2, [r6, #8]
    3c5a:	6928      	ldr	r0, [r5, #16]
    3c5c:	4790      	blx	r2
    3c5e:	b9f0      	cbnz	r0, 3c9e <CC_PalPowerSaveModeSelect+0x4e>
    3c60:	b15c      	cbz	r4, 3c7a <CC_PalPowerSaveModeSelect+0x2a>
    3c62:	4c18      	ldr	r4, [pc, #96]	; (3cc4 <CC_PalPowerSaveModeSelect+0x74>)
    3c64:	6823      	ldr	r3, [r4, #0]
    3c66:	b1ab      	cbz	r3, 3c94 <CC_PalPowerSaveModeSelect+0x44>
    3c68:	2b01      	cmp	r3, #1
    3c6a:	d01a      	beq.n	3ca2 <CC_PalPowerSaveModeSelect+0x52>
    3c6c:	3b01      	subs	r3, #1
    3c6e:	6023      	str	r3, [r4, #0]
    3c70:	6928      	ldr	r0, [r5, #16]
    3c72:	68f3      	ldr	r3, [r6, #12]
    3c74:	4798      	blx	r3
    3c76:	2000      	movs	r0, #0
    3c78:	bd70      	pop	{r4, r5, r6, pc}
    3c7a:	4c12      	ldr	r4, [pc, #72]	; (3cc4 <CC_PalPowerSaveModeSelect+0x74>)
    3c7c:	6821      	ldr	r1, [r4, #0]
    3c7e:	b939      	cbnz	r1, 3c90 <CC_PalPowerSaveModeSelect+0x40>
    3c80:	2001      	movs	r0, #1
    3c82:	4b11      	ldr	r3, [pc, #68]	; (3cc8 <CC_PalPowerSaveModeSelect+0x78>)
    3c84:	4a11      	ldr	r2, [pc, #68]	; (3ccc <CC_PalPowerSaveModeSelect+0x7c>)
    3c86:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    3c8a:	6813      	ldr	r3, [r2, #0]
    3c8c:	2b00      	cmp	r3, #0
    3c8e:	d1fc      	bne.n	3c8a <CC_PalPowerSaveModeSelect+0x3a>
    3c90:	3101      	adds	r1, #1
    3c92:	6021      	str	r1, [r4, #0]
    3c94:	68f3      	ldr	r3, [r6, #12]
    3c96:	6928      	ldr	r0, [r5, #16]
    3c98:	4798      	blx	r3
    3c9a:	2000      	movs	r0, #0
    3c9c:	bd70      	pop	{r4, r5, r6, pc}
    3c9e:	480c      	ldr	r0, [pc, #48]	; (3cd0 <CC_PalPowerSaveModeSelect+0x80>)
    3ca0:	bd70      	pop	{r4, r5, r6, pc}
    3ca2:	4a0a      	ldr	r2, [pc, #40]	; (3ccc <CC_PalPowerSaveModeSelect+0x7c>)
    3ca4:	6813      	ldr	r3, [r2, #0]
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d1fc      	bne.n	3ca4 <CC_PalPowerSaveModeSelect+0x54>
    3caa:	4a07      	ldr	r2, [pc, #28]	; (3cc8 <CC_PalPowerSaveModeSelect+0x78>)
    3cac:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    3cb0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    3cb4:	f7ff ff48 	bl	3b48 <CC_HalMaskInterrupt>
    3cb8:	6823      	ldr	r3, [r4, #0]
    3cba:	e7d7      	b.n	3c6c <CC_PalPowerSaveModeSelect+0x1c>
    3cbc:	2000007c 	.word	0x2000007c
    3cc0:	2000006c 	.word	0x2000006c
    3cc4:	200008f4 	.word	0x200008f4
    3cc8:	50840000 	.word	0x50840000
    3ccc:	50841910 	.word	0x50841910
    3cd0:	ffff8fe9 	.word	0xffff8fe9

00003cd4 <gpio_pin_set.constprop.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    3cd4:	2301      	movs	r3, #1
    3cd6:	fa03 f101 	lsl.w	r1, r3, r1
    3cda:	68c3      	ldr	r3, [r0, #12]
    3cdc:	681b      	ldr	r3, [r3, #0]
    3cde:	4219      	tst	r1, r3
	return api->port_set_bits_raw(port, pins);
    3ce0:	6883      	ldr	r3, [r0, #8]
    3ce2:	bf0c      	ite	eq
    3ce4:	68db      	ldreq	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    3ce6:	691b      	ldrne	r3, [r3, #16]
    3ce8:	4718      	bx	r3

00003cea <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
    3cea:	b538      	push	{r3, r4, r5, lr}
    3cec:	460c      	mov	r4, r1
	struct gpio_driver_data *data =
    3cee:	68c5      	ldr	r5, [r0, #12]
	return api->pin_configure(port, pin, flags);
    3cf0:	6883      	ldr	r3, [r0, #8]
    3cf2:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
    3cf6:	681b      	ldr	r3, [r3, #0]
    3cf8:	4798      	blx	r3
	if (ret != 0) {
    3cfa:	b930      	cbnz	r0, 3d0a <gpio_pin_configure.constprop.0+0x20>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    3cfc:	2301      	movs	r3, #1
    3cfe:	fa03 f104 	lsl.w	r1, r3, r4
    3d02:	682b      	ldr	r3, [r5, #0]
    3d04:	ea23 0301 	bic.w	r3, r3, r1
    3d08:	602b      	str	r3, [r5, #0]
}
    3d0a:	bd38      	pop	{r3, r4, r5, pc}

00003d0c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    3d0c:	4603      	mov	r3, r0
    3d0e:	b158      	cbz	r0, 3d28 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3d10:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    3d12:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    3d16:	2a01      	cmp	r2, #1
    3d18:	d003      	beq.n	3d22 <sys_notify_validate+0x16>
    3d1a:	2a03      	cmp	r2, #3
    3d1c:	d104      	bne.n	3d28 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    3d1e:	6802      	ldr	r2, [r0, #0]
    3d20:	b112      	cbz	r2, 3d28 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    3d22:	2000      	movs	r0, #0
    3d24:	6098      	str	r0, [r3, #8]
    3d26:	4770      	bx	lr
		return -EINVAL;
    3d28:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    3d2c:	4770      	bx	lr

00003d2e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3d2e:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    3d30:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    3d32:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    3d36:	2a03      	cmp	r2, #3
    3d38:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    3d3c:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = 0;
    3d3e:	bf14      	ite	ne
    3d40:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3d42:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3d44:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    3d46:	4770      	bx	lr

00003d48 <arch_printk_char_out>:
}
    3d48:	2000      	movs	r0, #0
    3d4a:	4770      	bx	lr

00003d4c <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    3d4c:	b40f      	push	{r0, r1, r2, r3}
    3d4e:	b507      	push	{r0, r1, r2, lr}
    3d50:	a904      	add	r1, sp, #16
    3d52:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    3d56:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    3d58:	f7fc fba8 	bl	4ac <vprintk>
	}
	va_end(ap);
}
    3d5c:	b003      	add	sp, #12
    3d5e:	f85d eb04 	ldr.w	lr, [sp], #4
    3d62:	b004      	add	sp, #16
    3d64:	4770      	bx	lr

00003d66 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3d66:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    3d68:	f013 0307 	ands.w	r3, r3, #7
    3d6c:	d105      	bne.n	3d7a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    3d6e:	6803      	ldr	r3, [r0, #0]
    3d70:	2b00      	cmp	r3, #0
		evt = EVT_START;
    3d72:	bf0c      	ite	eq
    3d74:	2000      	moveq	r0, #0
    3d76:	2003      	movne	r0, #3
    3d78:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    3d7a:	2b02      	cmp	r3, #2
    3d7c:	d105      	bne.n	3d8a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    3d7e:	8b43      	ldrh	r3, [r0, #26]
    3d80:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    3d82:	bf14      	ite	ne
    3d84:	2000      	movne	r0, #0
    3d86:	2004      	moveq	r0, #4
    3d88:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    3d8a:	2b01      	cmp	r3, #1
    3d8c:	d105      	bne.n	3d9a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    3d8e:	6803      	ldr	r3, [r0, #0]
    3d90:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    3d92:	bf0c      	ite	eq
    3d94:	2000      	moveq	r0, #0
    3d96:	2005      	movne	r0, #5
    3d98:	4770      	bx	lr
	int evt = EVT_NOP;
    3d9a:	2000      	movs	r0, #0
}
    3d9c:	4770      	bx	lr

00003d9e <notify_one>:
{
    3d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3da2:	460d      	mov	r5, r1
    3da4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3da6:	4619      	mov	r1, r3
    3da8:	1d28      	adds	r0, r5, #4
{
    3daa:	4690      	mov	r8, r2
    3dac:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3dae:	f7ff ffbe 	bl	3d2e <sys_notify_finalize>
	if (cb) {
    3db2:	4604      	mov	r4, r0
    3db4:	b138      	cbz	r0, 3dc6 <notify_one+0x28>
		cb(mgr, cli, state, res);
    3db6:	4633      	mov	r3, r6
    3db8:	4642      	mov	r2, r8
    3dba:	4629      	mov	r1, r5
    3dbc:	4638      	mov	r0, r7
    3dbe:	46a4      	mov	ip, r4
}
    3dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    3dc4:	4760      	bx	ip
}
    3dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003dca <transition_complete>:
{
    3dca:	b410      	push	{r4}
	__asm__ volatile(
    3dcc:	f04f 0420 	mov.w	r4, #32
    3dd0:	f3ef 8211 	mrs	r2, BASEPRI
    3dd4:	f384 8811 	msr	BASEPRI, r4
    3dd8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    3ddc:	6141      	str	r1, [r0, #20]
}
    3dde:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    3de0:	2101      	movs	r1, #1
    3de2:	f7fc bb71 	b.w	4c8 <process_event>

00003de6 <validate_args>:
{
    3de6:	b510      	push	{r4, lr}
    3de8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    3dea:	b140      	cbz	r0, 3dfe <validate_args+0x18>
    3dec:	b139      	cbz	r1, 3dfe <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    3dee:	1d08      	adds	r0, r1, #4
    3df0:	f7ff ff8c 	bl	3d0c <sys_notify_validate>
	if ((rv == 0)
    3df4:	b928      	cbnz	r0, 3e02 <validate_args+0x1c>
	    && ((cli->notify.flags
    3df6:	68a3      	ldr	r3, [r4, #8]
    3df8:	f033 0303 	bics.w	r3, r3, #3
    3dfc:	d001      	beq.n	3e02 <validate_args+0x1c>
		rv = -EINVAL;
    3dfe:	f06f 0015 	mvn.w	r0, #21
}
    3e02:	bd10      	pop	{r4, pc}

00003e04 <onoff_manager_init>:
{
    3e04:	b538      	push	{r3, r4, r5, lr}
    3e06:	460c      	mov	r4, r1
	if ((mgr == NULL)
    3e08:	4605      	mov	r5, r0
    3e0a:	b158      	cbz	r0, 3e24 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    3e0c:	b151      	cbz	r1, 3e24 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    3e0e:	680b      	ldr	r3, [r1, #0]
    3e10:	b143      	cbz	r3, 3e24 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    3e12:	684b      	ldr	r3, [r1, #4]
    3e14:	b133      	cbz	r3, 3e24 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    3e16:	221c      	movs	r2, #28
    3e18:	2100      	movs	r1, #0
    3e1a:	f000 fab5 	bl	4388 <memset>
	return 0;
    3e1e:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    3e20:	612c      	str	r4, [r5, #16]
}
    3e22:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    3e24:	f06f 0015 	mvn.w	r0, #21
    3e28:	e7fb      	b.n	3e22 <onoff_manager_init+0x1e>

00003e2a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    3e2a:	b570      	push	{r4, r5, r6, lr}
    3e2c:	4604      	mov	r4, r0
    3e2e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    3e30:	f7ff ffd9 	bl	3de6 <validate_args>

	if (rv < 0) {
    3e34:	1e05      	subs	r5, r0, #0
    3e36:	db31      	blt.n	3e9c <onoff_request+0x72>
    3e38:	f04f 0320 	mov.w	r3, #32
    3e3c:	f3ef 8111 	mrs	r1, BASEPRI
    3e40:	f383 8811 	msr	BASEPRI, r3
    3e44:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    3e48:	f64f 75ff 	movw	r5, #65535	; 0xffff
    3e4c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3e4e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    3e50:	42ab      	cmp	r3, r5
    3e52:	f000 0207 	and.w	r2, r0, #7
    3e56:	d02e      	beq.n	3eb6 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    3e58:	2a02      	cmp	r2, #2
    3e5a:	d10e      	bne.n	3e7a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    3e5c:	3301      	adds	r3, #1
    3e5e:	8363      	strh	r3, [r4, #26]
	rv = state;
    3e60:	4615      	mov	r5, r2
		notify = true;
    3e62:	2301      	movs	r3, #1
	__asm__ volatile(
    3e64:	f381 8811 	msr	BASEPRI, r1
    3e68:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    3e6c:	b1b3      	cbz	r3, 3e9c <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    3e6e:	2300      	movs	r3, #0
    3e70:	4631      	mov	r1, r6
    3e72:	4620      	mov	r0, r4
    3e74:	f7ff ff93 	bl	3d9e <notify_one>
    3e78:	e010      	b.n	3e9c <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    3e7a:	0783      	lsls	r3, r0, #30
    3e7c:	d001      	beq.n	3e82 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    3e7e:	2a06      	cmp	r2, #6
    3e80:	d10e      	bne.n	3ea0 <onoff_request+0x76>
	parent->next = child;
    3e82:	2300      	movs	r3, #0
    3e84:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    3e86:	6863      	ldr	r3, [r4, #4]
    3e88:	b993      	cbnz	r3, 3eb0 <onoff_request+0x86>
	list->head = node;
    3e8a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    3e8e:	4615      	mov	r5, r2
    3e90:	b962      	cbnz	r2, 3eac <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    3e92:	460a      	mov	r2, r1
    3e94:	4620      	mov	r0, r4
    3e96:	2102      	movs	r1, #2
    3e98:	f7fc fb16 	bl	4c8 <process_event>
		}
	}

	return rv;
}
    3e9c:	4628      	mov	r0, r5
    3e9e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    3ea0:	2a05      	cmp	r2, #5
    3ea2:	bf0c      	ite	eq
    3ea4:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    3ea8:	f06f 0504 	mvnne.w	r5, #4
    3eac:	2300      	movs	r3, #0
    3eae:	e7d9      	b.n	3e64 <onoff_request+0x3a>
	parent->next = child;
    3eb0:	601e      	str	r6, [r3, #0]
	list->tail = node;
    3eb2:	6066      	str	r6, [r4, #4]
}
    3eb4:	e7eb      	b.n	3e8e <onoff_request+0x64>
		rv = -EAGAIN;
    3eb6:	f06f 050a 	mvn.w	r5, #10
    3eba:	e7f7      	b.n	3eac <onoff_request+0x82>

00003ebc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3ebc:	4604      	mov	r4, r0
    3ebe:	b508      	push	{r3, lr}
    3ec0:	4608      	mov	r0, r1
    3ec2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    3ec4:	461a      	mov	r2, r3
    3ec6:	47a0      	blx	r4
	return z_impl_k_current_get();
    3ec8:	f7ff fac0 	bl	344c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    3ecc:	f7fd fd8c 	bl	19e8 <z_impl_k_thread_abort>

00003ed0 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    3ed0:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    3ed2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    3ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    3eda:	bf2c      	ite	cs
    3edc:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    3ee0:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    3ee4:	4770      	bx	lr

00003ee6 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    3ee6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    3eea:	6880      	ldr	r0, [r0, #8]
    3eec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    3ef0:	bf2c      	ite	cs
    3ef2:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    3ef6:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    3efa:	4770      	bx	lr

00003efc <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    3efc:	2201      	movs	r2, #1
{
    3efe:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    3f00:	f7ff ffe6 	bl	3ed0 <chunk_field>
}
    3f04:	0840      	lsrs	r0, r0, #1
    3f06:	bd08      	pop	{r3, pc}

00003f08 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    3f08:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    3f0a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    3f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    3f12:	d308      	bcc.n	3f26 <set_chunk_used+0x1e>
		if (used) {
    3f14:	684b      	ldr	r3, [r1, #4]
    3f16:	b11a      	cbz	r2, 3f20 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    3f18:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    3f1c:	604b      	str	r3, [r1, #4]
    3f1e:	4770      	bx	lr
    3f20:	f023 0301 	bic.w	r3, r3, #1
    3f24:	e7fa      	b.n	3f1c <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    3f26:	884b      	ldrh	r3, [r1, #2]
    3f28:	b11a      	cbz	r2, 3f32 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    3f2a:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    3f2e:	804b      	strh	r3, [r1, #2]
		}
	}
}
    3f30:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    3f32:	f023 0301 	bic.w	r3, r3, #1
    3f36:	e7fa      	b.n	3f2e <set_chunk_used+0x26>

00003f38 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    3f38:	0053      	lsls	r3, r2, #1
    3f3a:	2201      	movs	r2, #1
    3f3c:	f7ff bfd3 	b.w	3ee6 <chunk_set>

00003f40 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    3f40:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    3f42:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    3f44:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    3f48:	bf2c      	ite	cs
    3f4a:	2002      	movcs	r0, #2
    3f4c:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    3f4e:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    3f50:	fab0 f080 	clz	r0, r0
}
    3f54:	f1c0 001f 	rsb	r0, r0, #31
    3f58:	4770      	bx	lr

00003f5a <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    3f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f5e:	4604      	mov	r4, r0
    3f60:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    3f62:	f7ff ffcb 	bl	3efc <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    3f66:	68a3      	ldr	r3, [r4, #8]
    3f68:	4601      	mov	r1, r0
    3f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    3f6e:	d301      	bcc.n	3f74 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    3f70:	2801      	cmp	r0, #1
    3f72:	d035      	beq.n	3fe0 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    3f74:	4620      	mov	r0, r4
    3f76:	f7ff ffe3 	bl	3f40 <bucket_idx>
	if (b->next == 0U) {
    3f7a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    3f7e:	6916      	ldr	r6, [r2, #16]
    3f80:	b99e      	cbnz	r6, 3faa <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    3f82:	2301      	movs	r3, #1
    3f84:	fa03 f000 	lsl.w	r0, r3, r0
    3f88:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    3f8a:	4629      	mov	r1, r5
    3f8c:	4303      	orrs	r3, r0
    3f8e:	60e3      	str	r3, [r4, #12]
    3f90:	4620      	mov	r0, r4
		b->next = c;
    3f92:	6115      	str	r5, [r2, #16]
    3f94:	462b      	mov	r3, r5
    3f96:	2202      	movs	r2, #2
    3f98:	f7ff ffa5 	bl	3ee6 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    3f9c:	2203      	movs	r2, #3
    3f9e:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    3fa0:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    3fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3fa6:	f7ff bf9e 	b.w	3ee6 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    3faa:	2202      	movs	r2, #2
    3fac:	4631      	mov	r1, r6
    3fae:	4620      	mov	r0, r4
    3fb0:	f7ff ff8e 	bl	3ed0 <chunk_field>
    3fb4:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    3fb6:	4603      	mov	r3, r0
    3fb8:	2202      	movs	r2, #2
    3fba:	4629      	mov	r1, r5
    3fbc:	4620      	mov	r0, r4
    3fbe:	f7ff ff92 	bl	3ee6 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    3fc2:	4633      	mov	r3, r6
    3fc4:	2203      	movs	r2, #3
    3fc6:	4629      	mov	r1, r5
    3fc8:	4620      	mov	r0, r4
    3fca:	f7ff ff8c 	bl	3ee6 <chunk_set>
    3fce:	2203      	movs	r2, #3
    3fd0:	4639      	mov	r1, r7
    3fd2:	462b      	mov	r3, r5
    3fd4:	4620      	mov	r0, r4
    3fd6:	f7ff ff86 	bl	3ee6 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    3fda:	2202      	movs	r2, #2
    3fdc:	4631      	mov	r1, r6
    3fde:	e7df      	b.n	3fa0 <free_list_add+0x46>
    3fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003fe4 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    3fe4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    3fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fea:	bf2c      	ite	cs
    3fec:	2508      	movcs	r5, #8
    3fee:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    3ff0:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
    3ff2:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
    3ff4:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    3ff6:	1dcc      	adds	r4, r1, #7
    3ff8:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
    3ffc:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
    3ffe:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    4002:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    4004:	440d      	add	r5, r1
    4006:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    400a:	1b2d      	subs	r5, r5, r4
    400c:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    400e:	4629      	mov	r1, r5
    4010:	4620      	mov	r0, r4
	h->len = buf_sz;
    4012:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    4014:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    4016:	f7ff ff93 	bl	3f40 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    401a:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    401c:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    401e:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4020:	361b      	adds	r6, #27
    4022:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
    4024:	f104 0210 	add.w	r2, r4, #16
    4028:	428b      	cmp	r3, r1
    402a:	db29      	blt.n	4080 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    402c:	4632      	mov	r2, r6
    402e:	4620      	mov	r0, r4
    4030:	2100      	movs	r1, #0
    4032:	f7ff ff81 	bl	3f38 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    4036:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    4038:	4620      	mov	r0, r4
    403a:	2201      	movs	r2, #1
    403c:	2100      	movs	r1, #0
    403e:	f7ff ff63 	bl	3f08 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    4042:	463a      	mov	r2, r7
    4044:	4631      	mov	r1, r6
    4046:	f7ff ff77 	bl	3f38 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    404a:	4633      	mov	r3, r6
    404c:	4631      	mov	r1, r6
    404e:	4620      	mov	r0, r4
    4050:	2200      	movs	r2, #0
    4052:	f7ff ff48 	bl	3ee6 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    4056:	4629      	mov	r1, r5
    4058:	4620      	mov	r0, r4
    405a:	2200      	movs	r2, #0
    405c:	f7ff ff6c 	bl	3f38 <set_chunk_size>
    4060:	463b      	mov	r3, r7
    4062:	4629      	mov	r1, r5
    4064:	4620      	mov	r0, r4
    4066:	2200      	movs	r2, #0
    4068:	f7ff ff3d 	bl	3ee6 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    406c:	4629      	mov	r1, r5
    406e:	4620      	mov	r0, r4
    4070:	2201      	movs	r2, #1
    4072:	f7ff ff49 	bl	3f08 <set_chunk_used>

	free_list_add(h, chunk0_size);
    4076:	4631      	mov	r1, r6
}
    4078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    407c:	f7ff bf6d 	b.w	3f5a <free_list_add>
		h->buckets[i].next = 0;
    4080:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    4084:	3301      	adds	r3, #1
    4086:	e7cf      	b.n	4028 <sys_heap_init+0x44>

00004088 <encode_uint>:
{
    4088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    408c:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    408e:	78d3      	ldrb	r3, [r2, #3]
{
    4090:	4614      	mov	r4, r2
	switch (specifier) {
    4092:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4094:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    4098:	4606      	mov	r6, r0
    409a:	460f      	mov	r7, r1
    409c:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    409e:	d02d      	beq.n	40fc <encode_uint+0x74>
    40a0:	d828      	bhi.n	40f4 <encode_uint+0x6c>
		return 16;
    40a2:	2b58      	cmp	r3, #88	; 0x58
    40a4:	bf14      	ite	ne
    40a6:	250a      	movne	r5, #10
    40a8:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
    40aa:	46aa      	mov	sl, r5
    40ac:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
    40b0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    40b4:	4652      	mov	r2, sl
    40b6:	465b      	mov	r3, fp
    40b8:	4630      	mov	r0, r6
    40ba:	4639      	mov	r1, r7
    40bc:	f7fc f842 	bl	144 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    40c0:	2a09      	cmp	r2, #9
    40c2:	b2d3      	uxtb	r3, r2
    40c4:	d81f      	bhi.n	4106 <encode_uint+0x7e>
    40c6:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    40c8:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    40ca:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    40cc:	bf08      	it	eq
    40ce:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    40d0:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    40d4:	d301      	bcc.n	40da <encode_uint+0x52>
    40d6:	45c8      	cmp	r8, r9
    40d8:	d812      	bhi.n	4100 <encode_uint+0x78>
	if (conv->flag_hash) {
    40da:	7823      	ldrb	r3, [r4, #0]
    40dc:	069b      	lsls	r3, r3, #26
    40de:	d505      	bpl.n	40ec <encode_uint+0x64>
		if (radix == 8) {
    40e0:	2d08      	cmp	r5, #8
    40e2:	d116      	bne.n	4112 <encode_uint+0x8a>
			conv->altform_0 = true;
    40e4:	78a3      	ldrb	r3, [r4, #2]
    40e6:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    40ea:	70a3      	strb	r3, [r4, #2]
}
    40ec:	4640      	mov	r0, r8
    40ee:	b003      	add	sp, #12
    40f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    40f4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    40f8:	2b70      	cmp	r3, #112	; 0x70
    40fa:	e7d3      	b.n	40a4 <encode_uint+0x1c>
	switch (specifier) {
    40fc:	2508      	movs	r5, #8
    40fe:	e7d4      	b.n	40aa <encode_uint+0x22>
		value /= radix;
    4100:	4606      	mov	r6, r0
    4102:	460f      	mov	r7, r1
    4104:	e7d6      	b.n	40b4 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4106:	9a01      	ldr	r2, [sp, #4]
    4108:	2a19      	cmp	r2, #25
    410a:	bf94      	ite	ls
    410c:	3337      	addls	r3, #55	; 0x37
    410e:	3357      	addhi	r3, #87	; 0x57
    4110:	e7da      	b.n	40c8 <encode_uint+0x40>
		} else if (radix == 16) {
    4112:	2d10      	cmp	r5, #16
    4114:	d1ea      	bne.n	40ec <encode_uint+0x64>
			conv->altform_0c = true;
    4116:	78a3      	ldrb	r3, [r4, #2]
    4118:	f043 0310 	orr.w	r3, r3, #16
    411c:	e7e5      	b.n	40ea <encode_uint+0x62>

0000411e <outs>:
{
    411e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4122:	4607      	mov	r7, r0
    4124:	4688      	mov	r8, r1
    4126:	4615      	mov	r5, r2
    4128:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    412a:	4614      	mov	r4, r2
    412c:	42b4      	cmp	r4, r6
    412e:	eba4 0005 	sub.w	r0, r4, r5
    4132:	d302      	bcc.n	413a <outs+0x1c>
    4134:	b93e      	cbnz	r6, 4146 <outs+0x28>
    4136:	7823      	ldrb	r3, [r4, #0]
    4138:	b12b      	cbz	r3, 4146 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    413a:	4641      	mov	r1, r8
    413c:	f814 0b01 	ldrb.w	r0, [r4], #1
    4140:	47b8      	blx	r7
		if (rc < 0) {
    4142:	2800      	cmp	r0, #0
    4144:	daf2      	bge.n	412c <outs+0xe>
}
    4146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000414a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    414a:	4770      	bx	lr

0000414c <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    414c:	f7fe b998 	b.w	2480 <SystemInit>

00004150 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4150:	b2cb      	uxtb	r3, r1
    4152:	210c      	movs	r1, #12
    4154:	68c2      	ldr	r2, [r0, #12]
    4156:	fb03 2101 	mla	r1, r3, r1, r2
    415a:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    415c:	f000 0007 	and.w	r0, r0, #7
    4160:	4770      	bx	lr

00004162 <set_off_state>:
	__asm__ volatile(
    4162:	f04f 0320 	mov.w	r3, #32
    4166:	f3ef 8211 	mrs	r2, BASEPRI
    416a:	f383 8811 	msr	BASEPRI, r3
    416e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4172:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4174:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    4178:	d001      	beq.n	417e <set_off_state+0x1c>
    417a:	428b      	cmp	r3, r1
    417c:	d107      	bne.n	418e <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    417e:	2301      	movs	r3, #1
    4180:	6003      	str	r3, [r0, #0]
	int err = 0;
    4182:	2000      	movs	r0, #0
	__asm__ volatile(
    4184:	f382 8811 	msr	BASEPRI, r2
    4188:	f3bf 8f6f 	isb	sy
}
    418c:	4770      	bx	lr
		err = -EPERM;
    418e:	f04f 30ff 	mov.w	r0, #4294967295
    4192:	e7f7      	b.n	4184 <set_off_state+0x22>

00004194 <set_starting_state>:
{
    4194:	b510      	push	{r4, lr}
	__asm__ volatile(
    4196:	f04f 0320 	mov.w	r3, #32
    419a:	f3ef 8211 	mrs	r2, BASEPRI
    419e:	f383 8811 	msr	BASEPRI, r3
    41a2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    41a6:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    41a8:	f003 0407 	and.w	r4, r3, #7
    41ac:	2c01      	cmp	r4, #1
    41ae:	d106      	bne.n	41be <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    41b0:	6001      	str	r1, [r0, #0]
	int err = 0;
    41b2:	2000      	movs	r0, #0
	__asm__ volatile(
    41b4:	f382 8811 	msr	BASEPRI, r2
    41b8:	f3bf 8f6f 	isb	sy
}
    41bc:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    41be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    41c2:	428b      	cmp	r3, r1
		err = -EALREADY;
    41c4:	bf14      	ite	ne
    41c6:	f04f 30ff 	movne.w	r0, #4294967295
    41ca:	f06f 0044 	mvneq.w	r0, #68	; 0x44
    41ce:	e7f1      	b.n	41b4 <set_starting_state+0x20>

000041d0 <set_on_state>:
	__asm__ volatile(
    41d0:	f04f 0320 	mov.w	r3, #32
    41d4:	f3ef 8211 	mrs	r2, BASEPRI
    41d8:	f383 8811 	msr	BASEPRI, r3
    41dc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    41e0:	6803      	ldr	r3, [r0, #0]
    41e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    41e6:	f043 0302 	orr.w	r3, r3, #2
    41ea:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    41ec:	f382 8811 	msr	BASEPRI, r2
    41f0:	f3bf 8f6f 	isb	sy
}
    41f4:	4770      	bx	lr

000041f6 <onoff_started_callback>:
{
    41f6:	b410      	push	{r4}
	notify(mgr, 0);
    41f8:	241c      	movs	r4, #28
	return &data->mgr[type];
    41fa:	68c0      	ldr	r0, [r0, #12]
    41fc:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    41fe:	fb03 0004 	mla	r0, r3, r4, r0
    4202:	2100      	movs	r1, #0
}
    4204:	bc10      	pop	{r4}
	notify(mgr, 0);
    4206:	4710      	bx	r2

00004208 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    4208:	2000      	movs	r0, #0
    420a:	f7fe b9f1 	b.w	25f0 <nrfx_clock_start>

0000420e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    420e:	2000      	movs	r0, #0
    4210:	f7fe ba20 	b.w	2654 <nrfx_clock_stop>

00004214 <blocking_start_callback>:
{
    4214:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4216:	f7ff b91f 	b.w	3458 <z_impl_k_sem_give>

0000421a <api_stop>:
{
    421a:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
    421c:	230c      	movs	r3, #12
    421e:	b2cc      	uxtb	r4, r1
    4220:	4363      	muls	r3, r4
{
    4222:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    4224:	68c0      	ldr	r0, [r0, #12]
    4226:	3340      	adds	r3, #64	; 0x40
    4228:	2180      	movs	r1, #128	; 0x80
    422a:	4418      	add	r0, r3
    422c:	f7ff ff99 	bl	4162 <set_off_state>
	if (err < 0) {
    4230:	2800      	cmp	r0, #0
    4232:	db05      	blt.n	4240 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    4234:	6869      	ldr	r1, [r5, #4]
    4236:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    423a:	6863      	ldr	r3, [r4, #4]
    423c:	4798      	blx	r3
	return 0;
    423e:	2000      	movs	r0, #0
}
    4240:	bd38      	pop	{r3, r4, r5, pc}

00004242 <api_start>:
{
    4242:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	err = set_starting_state(&subdata->flags, ctx);
    4246:	270c      	movs	r7, #12
    4248:	b2cd      	uxtb	r5, r1
    424a:	436f      	muls	r7, r5
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    424c:	68c4      	ldr	r4, [r0, #12]
{
    424e:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    4250:	f107 0040 	add.w	r0, r7, #64	; 0x40
    4254:	2180      	movs	r1, #128	; 0x80
    4256:	4420      	add	r0, r4
{
    4258:	4690      	mov	r8, r2
    425a:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    425c:	f7ff ff9a 	bl	4194 <set_starting_state>
	if (err < 0) {
    4260:	2800      	cmp	r0, #0
    4262:	db07      	blt.n	4274 <api_start+0x32>
	subdata->cb = cb;
    4264:	443c      	add	r4, r7
	subdata->user_data = user_data;
    4266:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    426a:	6873      	ldr	r3, [r6, #4]
    426c:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    4270:	4798      	blx	r3
	return 0;
    4272:	2000      	movs	r0, #0
}
    4274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004278 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    4278:	4770      	bx	lr

0000427a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    427a:	4770      	bx	lr

0000427c <sys_clock_disable>:
    427c:	4770      	bx	lr

0000427e <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    427e:	2000      	movs	r0, #0
    4280:	f7fc bde6 	b.w	e50 <sys_reboot>

00004284 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4284:	2100      	movs	r1, #0
    4286:	2001      	movs	r0, #1
    4288:	f000 b804 	b.w	4294 <z_arm_fatal_error>

0000428c <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    428c:	6e83      	ldr	r3, [r0, #104]	; 0x68
    428e:	f383 880b 	msr	PSPLIM, r3
}
    4292:	4770      	bx	lr

00004294 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4294:	f000 b955 	b.w	4542 <z_fatal_error>

00004298 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4298:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    429a:	6800      	ldr	r0, [r0, #0]
    429c:	f000 b951 	b.w	4542 <z_fatal_error>

000042a0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    42a0:	b508      	push	{r3, lr}
	handler();
    42a2:	f7fd fa5b 	bl	175c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    42a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    42aa:	f7fd ba9d 	b.w	17e8 <z_arm_exc_exit>

000042ae <mpu_configure_region>:
{
    42ae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    42b0:	890a      	ldrh	r2, [r1, #8]
    42b2:	7a8e      	ldrb	r6, [r1, #10]
	region_conf.base = new_region->start;
    42b4:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    42b6:	684d      	ldr	r5, [r1, #4]
    42b8:	f002 021f 	and.w	r2, r2, #31
    42bc:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    42c0:	9300      	str	r3, [sp, #0]
    42c2:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    42c6:	f023 031f 	bic.w	r3, r3, #31
    42ca:	1e6a      	subs	r2, r5, #1
    42cc:	4413      	add	r3, r2
    42ce:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    42d2:	280f      	cmp	r0, #15
    42d4:	9303      	str	r3, [sp, #12]
    42d6:	d804      	bhi.n	42e2 <mpu_configure_region+0x34>
	region_init(index, region_conf);
    42d8:	4669      	mov	r1, sp
    42da:	f7fd fbc3 	bl	1a64 <region_init>
}
    42de:	b004      	add	sp, #16
    42e0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    42e2:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    42e6:	e7fa      	b.n	42de <mpu_configure_region+0x30>

000042e8 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    42e8:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    42ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    42f0:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    42f2:	bf08      	it	eq
    42f4:	f06f 0015 	mvneq.w	r0, #21
    42f8:	4770      	bx	lr

000042fa <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    42fa:	4603      	mov	r3, r0
	size_t n = 0;
    42fc:	2000      	movs	r0, #0

	while (*s != '\0') {
    42fe:	5c1a      	ldrb	r2, [r3, r0]
    4300:	b902      	cbnz	r2, 4304 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    4302:	4770      	bx	lr
		n++;
    4304:	3001      	adds	r0, #1
    4306:	e7fa      	b.n	42fe <strlen+0x4>

00004308 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4308:	4603      	mov	r3, r0
	size_t n = 0;
    430a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    430c:	5c1a      	ldrb	r2, [r3, r0]
    430e:	b10a      	cbz	r2, 4314 <strnlen+0xc>
    4310:	4288      	cmp	r0, r1
    4312:	d100      	bne.n	4316 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    4314:	4770      	bx	lr
		n++;
    4316:	3001      	adds	r0, #1
    4318:	e7f8      	b.n	430c <strnlen+0x4>

0000431a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    431a:	1e43      	subs	r3, r0, #1
    431c:	3901      	subs	r1, #1
    431e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4322:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    4326:	4282      	cmp	r2, r0
    4328:	d101      	bne.n	432e <strcmp+0x14>
    432a:	2a00      	cmp	r2, #0
    432c:	d1f7      	bne.n	431e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    432e:	1a10      	subs	r0, r2, r0
    4330:	4770      	bx	lr

00004332 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    4332:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    4334:	ea81 0400 	eor.w	r4, r1, r0
    4338:	07a5      	lsls	r5, r4, #30
    433a:	4603      	mov	r3, r0
    433c:	d00b      	beq.n	4356 <memcpy+0x24>
    433e:	3b01      	subs	r3, #1
    4340:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    4342:	4291      	cmp	r1, r2
    4344:	d11b      	bne.n	437e <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4346:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    4348:	2a00      	cmp	r2, #0
    434a:	d0fc      	beq.n	4346 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    434c:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    4350:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    4352:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    4356:	079c      	lsls	r4, r3, #30
    4358:	d1f6      	bne.n	4348 <memcpy+0x16>
    435a:	f022 0403 	bic.w	r4, r2, #3
    435e:	1f1d      	subs	r5, r3, #4
    4360:	0896      	lsrs	r6, r2, #2
    4362:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    4364:	42b9      	cmp	r1, r7
    4366:	d105      	bne.n	4374 <memcpy+0x42>
    4368:	f06f 0503 	mvn.w	r5, #3
    436c:	4423      	add	r3, r4
    436e:	fb05 2206 	mla	r2, r5, r6, r2
    4372:	e7e4      	b.n	433e <memcpy+0xc>
			*(d_word++) = *(s_word++);
    4374:	f851 cb04 	ldr.w	ip, [r1], #4
    4378:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    437c:	e7f2      	b.n	4364 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    437e:	f811 4b01 	ldrb.w	r4, [r1], #1
    4382:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4386:	e7dc      	b.n	4342 <memcpy+0x10>

00004388 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    4388:	4603      	mov	r3, r0
{
    438a:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    438c:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    438e:	079c      	lsls	r4, r3, #30
    4390:	d111      	bne.n	43b6 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    4392:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    4396:	f022 0603 	bic.w	r6, r2, #3
    439a:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    439e:	441e      	add	r6, r3
    43a0:	0894      	lsrs	r4, r2, #2
    43a2:	42b3      	cmp	r3, r6
    43a4:	d10d      	bne.n	43c2 <memset+0x3a>
    43a6:	f06f 0503 	mvn.w	r5, #3
    43aa:	fb05 2204 	mla	r2, r5, r4, r2
    43ae:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    43b0:	4293      	cmp	r3, r2
    43b2:	d109      	bne.n	43c8 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    43b4:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    43b6:	2a00      	cmp	r2, #0
    43b8:	d0fc      	beq.n	43b4 <memset+0x2c>
		*(d_byte++) = c_byte;
    43ba:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    43be:	3a01      	subs	r2, #1
    43c0:	e7e5      	b.n	438e <memset+0x6>
		*(d_word++) = c_word;
    43c2:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    43c6:	e7ec      	b.n	43a2 <memset+0x1a>
		*(d_byte++) = c_byte;
    43c8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    43cc:	e7f0      	b.n	43b0 <memset+0x28>

000043ce <_stdout_hook_default>:
}
    43ce:	f04f 30ff 	mov.w	r0, #4294967295
    43d2:	4770      	bx	lr

000043d4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    43d4:	6843      	ldr	r3, [r0, #4]
}
    43d6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    43d8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    43da:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    43dc:	600b      	str	r3, [r1, #0]
}
    43de:	4770      	bx	lr

000043e0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    43e0:	6843      	ldr	r3, [r0, #4]
    43e2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    43e4:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    43e6:	4042      	eors	r2, r0
    43e8:	400a      	ands	r2, r1
    43ea:	4042      	eors	r2, r0
    p_reg->OUT = value;
    43ec:	605a      	str	r2, [r3, #4]
}
    43ee:	2000      	movs	r0, #0
    43f0:	4770      	bx	lr

000043f2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    43f2:	6843      	ldr	r3, [r0, #4]
}
    43f4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    43f6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    43f8:	6099      	str	r1, [r3, #8]
}
    43fa:	4770      	bx	lr

000043fc <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    43fc:	6843      	ldr	r3, [r0, #4]
}
    43fe:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4400:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    4402:	60d9      	str	r1, [r3, #12]
}
    4404:	4770      	bx	lr

00004406 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4406:	6843      	ldr	r3, [r0, #4]
}
    4408:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    440a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    440c:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    440e:	404b      	eors	r3, r1
    p_reg->OUT = value;
    4410:	6053      	str	r3, [r2, #4]
}
    4412:	4770      	bx	lr

00004414 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4414:	68c3      	ldr	r3, [r0, #12]
{
    4416:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
    4418:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    441a:	b158      	cbz	r0, 4434 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    441c:	2400      	movs	r4, #0
    441e:	4281      	cmp	r1, r0
    4420:	d113      	bne.n	444a <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    4422:	6808      	ldr	r0, [r1, #0]
    4424:	b95c      	cbnz	r4, 443e <gpio_nrfx_manage_callback+0x2a>
    4426:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    4428:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    442a:	42a1      	cmp	r1, r4
    442c:	d100      	bne.n	4430 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    442e:	6098      	str	r0, [r3, #8]
	parent->next = child;
    4430:	2000      	movs	r0, #0
    4432:	6008      	str	r0, [r1, #0]
	if (set) {
    4434:	b972      	cbnz	r2, 4454 <gpio_nrfx_manage_callback+0x40>
	return 0;
    4436:	2000      	movs	r0, #0
}
    4438:	bd30      	pop	{r4, r5, pc}
    443a:	4628      	mov	r0, r5
    443c:	e7ef      	b.n	441e <gpio_nrfx_manage_callback+0xa>
    443e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    4440:	6898      	ldr	r0, [r3, #8]
    4442:	4281      	cmp	r1, r0
	list->tail = node;
    4444:	bf08      	it	eq
    4446:	609c      	streq	r4, [r3, #8]
}
    4448:	e7f2      	b.n	4430 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    444a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    444c:	4604      	mov	r4, r0
    444e:	2d00      	cmp	r5, #0
    4450:	d1f3      	bne.n	443a <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    4452:	b13a      	cbz	r2, 4464 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    4454:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    4456:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    4458:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    445a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    445c:	2800      	cmp	r0, #0
    445e:	d1ea      	bne.n	4436 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    4460:	6099      	str	r1, [r3, #8]
}
    4462:	e7e9      	b.n	4438 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    4464:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4468:	e7e6      	b.n	4438 <gpio_nrfx_manage_callback+0x24>

0000446a <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    446a:	6843      	ldr	r3, [r0, #4]
    446c:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    446e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    4472:	05d2      	lsls	r2, r2, #23
    4474:	d518      	bpl.n	44a8 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4476:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    447a:	b1aa      	cbz	r2, 44a8 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    447c:	f04f 0120 	mov.w	r1, #32
    4480:	f3ef 8211 	mrs	r2, BASEPRI
    4484:	f381 8811 	msr	BASEPRI, r1
    4488:	f3bf 8f6f 	isb	sy
    448c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4490:	b131      	cbz	r1, 44a0 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4492:	2100      	movs	r1, #0
    4494:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    4498:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    449c:	2101      	movs	r1, #1
    449e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    44a0:	f382 8811 	msr	BASEPRI, r2
    44a4:	f3bf 8f6f 	isb	sy
}
    44a8:	4770      	bx	lr

000044aa <uarte_nrfx_config_get>:
{
    44aa:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    44ac:	68c2      	ldr	r2, [r0, #12]
    44ae:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    44b2:	e883 0003 	stmia.w	r3, {r0, r1}
}
    44b6:	2000      	movs	r0, #0
    44b8:	4770      	bx	lr

000044ba <uarte_nrfx_err_check>:
	return config->uarte_regs;
    44ba:	6843      	ldr	r3, [r0, #4]
    44bc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    44be:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    44c2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    44c6:	4770      	bx	lr

000044c8 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    44c8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    44ca:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    44cc:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    44d0:	b938      	cbnz	r0, 44e2 <is_tx_ready+0x1a>
    44d2:	7992      	ldrb	r2, [r2, #6]
    44d4:	b932      	cbnz	r2, 44e4 <is_tx_ready+0x1c>
    44d6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    44da:	3800      	subs	r0, #0
    44dc:	bf18      	it	ne
    44de:	2001      	movne	r0, #1
    44e0:	4770      	bx	lr
    44e2:	2001      	movs	r0, #1
}
    44e4:	4770      	bx	lr

000044e6 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    44e6:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    44e8:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    44ea:	681b      	ldr	r3, [r3, #0]
    44ec:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    44f0:	b148      	cbz	r0, 4506 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    44f2:	2000      	movs	r0, #0
	*c = data->rx_data;
    44f4:	7c52      	ldrb	r2, [r2, #17]
    44f6:	700a      	strb	r2, [r1, #0]
    44f8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    44fc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4500:	2201      	movs	r2, #1
    4502:	601a      	str	r2, [r3, #0]
	return 0;
    4504:	4770      	bx	lr
		return -1;
    4506:	f04f 30ff 	mov.w	r0, #4294967295
}
    450a:	4770      	bx	lr

0000450c <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
    450c:	2000      	movs	r0, #0
{
    450e:	b508      	push	{r3, lr}
	sys_arch_reboot(0);
    4510:	f7fd fa4c 	bl	19ac <sys_arch_reboot>

00004514 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
    4514:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    4516:	f7fc ff5f 	bl	13d8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    451a:	f7fd f809 	bl	1530 <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
    451e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    4522:	f7ff ba1f 	b.w	3964 <nrf_cc3xx_platform_init_no_rng>

00004526 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4526:	4700      	bx	r0

00004528 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4528:	f000 b8fc 	b.w	4724 <z_impl_k_busy_wait>

0000452c <nrfx_clock_enable>:
{
    452c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    452e:	2005      	movs	r0, #5
    4530:	f7fd f83e 	bl	15b0 <arch_irq_is_enabled>
    4534:	b920      	cbnz	r0, 4540 <nrfx_clock_enable+0x14>
}
    4536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    453a:	2005      	movs	r0, #5
    453c:	f7fd b828 	b.w	1590 <arch_irq_enable>
    4540:	bd08      	pop	{r3, pc}

00004542 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4544:	4605      	mov	r5, r0
    4546:	460e      	mov	r6, r1
	__asm__ volatile(
    4548:	f04f 0320 	mov.w	r3, #32
    454c:	f3ef 8711 	mrs	r7, BASEPRI
    4550:	f383 8811 	msr	BASEPRI, r3
    4554:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    4558:	f7fe ff78 	bl	344c <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    455c:	4631      	mov	r1, r6
    455e:	4604      	mov	r4, r0
    4560:	4628      	mov	r0, r5
    4562:	f7ff ffd3 	bl	450c <k_sys_fatal_error_handler>
	__asm__ volatile(
    4566:	f387 8811 	msr	BASEPRI, r7
    456a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    456e:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    4570:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4574:	f7fd ba38 	b.w	19e8 <z_impl_k_thread_abort>

00004578 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
    4578:	f7ff be7f 	b.w	427a <z_clock_idle_exit>

0000457c <k_mem_slab_init>:
{
    457c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    457e:	2400      	movs	r4, #0
    4580:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4582:	ea41 0402 	orr.w	r4, r1, r2
    4586:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    458a:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    458e:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4590:	d10c      	bne.n	45ac <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    4592:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4594:	42a3      	cmp	r3, r4
    4596:	d103      	bne.n	45a0 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    4598:	e9c0 0000 	strd	r0, r0, [r0]
}
    459c:	2000      	movs	r0, #0
}
    459e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    45a0:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    45a2:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    45a4:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    45a6:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    45a8:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    45aa:	e7f3      	b.n	4594 <k_mem_slab_init+0x18>
		return -EINVAL;
    45ac:	f06f 0015 	mvn.w	r0, #21
	return rc;
    45b0:	e7f5      	b.n	459e <k_mem_slab_init+0x22>

000045b2 <z_impl_k_mutex_init>:
{
    45b2:	4603      	mov	r3, r0
	mutex->owner = NULL;
    45b4:	2000      	movs	r0, #0
    45b6:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    45ba:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    45be:	4770      	bx	lr

000045c0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    45c0:	4603      	mov	r3, r0
    45c2:	b920      	cbnz	r0, 45ce <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    45c4:	f3ef 8205 	mrs	r2, IPSR
    45c8:	b90a      	cbnz	r2, 45ce <z_reschedule_irqlock+0xe>
    45ca:	f7fc bfc7 	b.w	155c <arch_swap>
    45ce:	f383 8811 	msr	BASEPRI, r3
    45d2:	f3bf 8f6f 	isb	sy
}
    45d6:	4770      	bx	lr

000045d8 <z_reschedule_unlocked>:
	__asm__ volatile(
    45d8:	f04f 0320 	mov.w	r3, #32
    45dc:	f3ef 8011 	mrs	r0, BASEPRI
    45e0:	f383 8811 	msr	BASEPRI, r3
    45e4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    45e8:	f7ff bfea 	b.w	45c0 <z_reschedule_irqlock>

000045ec <unpend_thread_no_timeout>:
{
    45ec:	4601      	mov	r1, r0
    45ee:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    45f0:	6880      	ldr	r0, [r0, #8]
    45f2:	f7fe fbfb 	bl	2dec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    45f6:	7b4b      	ldrb	r3, [r1, #13]
    45f8:	f023 0302 	bic.w	r3, r3, #2
    45fc:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
    45fe:	2300      	movs	r3, #0
    4600:	608b      	str	r3, [r1, #8]
}
    4602:	bd08      	pop	{r3, pc}

00004604 <z_priq_dumb_best>:
{
    4604:	4603      	mov	r3, r0
	return list->head == list;
    4606:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4608:	4283      	cmp	r3, r0
    460a:	d003      	beq.n	4614 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    460c:	2800      	cmp	r0, #0
    460e:	bf38      	it	cc
    4610:	2000      	movcc	r0, #0
    4612:	4770      	bx	lr
	struct k_thread *thread = NULL;
    4614:	2000      	movs	r0, #0
}
    4616:	4770      	bx	lr

00004618 <z_ready_thread>:
{
    4618:	b510      	push	{r4, lr}
    461a:	f04f 0320 	mov.w	r3, #32
    461e:	f3ef 8411 	mrs	r4, BASEPRI
    4622:	f383 8811 	msr	BASEPRI, r3
    4626:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    462a:	f7fe fc39 	bl	2ea0 <ready_thread>
	__asm__ volatile(
    462e:	f384 8811 	msr	BASEPRI, r4
    4632:	f3bf 8f6f 	isb	sy
}
    4636:	bd10      	pop	{r4, pc}

00004638 <z_thread_timeout>:
{
    4638:	b570      	push	{r4, r5, r6, lr}
    463a:	4604      	mov	r4, r0
	__asm__ volatile(
    463c:	f04f 0320 	mov.w	r3, #32
    4640:	f3ef 8611 	mrs	r6, BASEPRI
    4644:	f383 8811 	msr	BASEPRI, r3
    4648:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    464c:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    4650:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
    4654:	b113      	cbz	r3, 465c <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
    4656:	4628      	mov	r0, r5
    4658:	f7ff ffc8 	bl	45ec <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    465c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
    4660:	4628      	mov	r0, r5
    4662:	f023 0314 	bic.w	r3, r3, #20
    4666:	f804 3c0b 	strb.w	r3, [r4, #-11]
    466a:	f7fe fc19 	bl	2ea0 <ready_thread>
	__asm__ volatile(
    466e:	f386 8811 	msr	BASEPRI, r6
    4672:	f3bf 8f6f 	isb	sy
}
    4676:	bd70      	pop	{r4, r5, r6, pc}

00004678 <add_to_waitq_locked>:
{
    4678:	b538      	push	{r3, r4, r5, lr}
    467a:	4604      	mov	r4, r0
    467c:	460d      	mov	r5, r1
	unready_thread(thread);
    467e:	f7fe fd97 	bl	31b0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4682:	7b63      	ldrb	r3, [r4, #13]
    4684:	f043 0302 	orr.w	r3, r3, #2
    4688:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    468a:	b1c5      	cbz	r5, 46be <add_to_waitq_locked+0x46>
	return list->head == list;
    468c:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    468e:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4690:	429d      	cmp	r5, r3
    4692:	bf08      	it	eq
    4694:	2300      	moveq	r3, #0
    4696:	2b00      	cmp	r3, #0
    4698:	bf38      	it	cc
    469a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    469c:	b183      	cbz	r3, 46c0 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    469e:	f994 100e 	ldrsb.w	r1, [r4, #14]
    46a2:	f993 200e 	ldrsb.w	r2, [r3, #14]
    46a6:	4291      	cmp	r1, r2
    46a8:	db04      	blt.n	46b4 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    46aa:	686a      	ldr	r2, [r5, #4]
    46ac:	429a      	cmp	r2, r3
    46ae:	d007      	beq.n	46c0 <add_to_waitq_locked+0x48>
    46b0:	681b      	ldr	r3, [r3, #0]
    46b2:	e7f3      	b.n	469c <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    46b4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    46b6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    46ba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    46bc:	605c      	str	r4, [r3, #4]
}
    46be:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    46c0:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    46c2:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    46c4:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    46c6:	686b      	ldr	r3, [r5, #4]
    46c8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    46ca:	606c      	str	r4, [r5, #4]
    46cc:	e7f7      	b.n	46be <add_to_waitq_locked+0x46>

000046ce <z_unpend_first_thread>:
{
    46ce:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    46d0:	f04f 0320 	mov.w	r3, #32
    46d4:	f3ef 8211 	mrs	r2, BASEPRI
    46d8:	f383 8811 	msr	BASEPRI, r3
    46dc:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    46e0:	f7ff ff90 	bl	4604 <z_priq_dumb_best>
    46e4:	4604      	mov	r4, r0
	__asm__ volatile(
    46e6:	f382 8811 	msr	BASEPRI, r2
    46ea:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    46ee:	b188      	cbz	r0, 4714 <z_unpend_first_thread+0x46>
	__asm__ volatile(
    46f0:	f04f 0320 	mov.w	r3, #32
    46f4:	f3ef 8511 	mrs	r5, BASEPRI
    46f8:	f383 8811 	msr	BASEPRI, r3
    46fc:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    4700:	f7ff ff74 	bl	45ec <unpend_thread_no_timeout>
	__asm__ volatile(
    4704:	f385 8811 	msr	BASEPRI, r5
    4708:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    470c:	f104 0018 	add.w	r0, r4, #24
    4710:	f000 f80c 	bl	472c <z_abort_timeout>
}
    4714:	4620      	mov	r0, r4
    4716:	bd38      	pop	{r3, r4, r5, pc}

00004718 <k_is_in_isr>:
    4718:	f3ef 8005 	mrs	r0, IPSR
}
    471c:	3800      	subs	r0, #0
    471e:	bf18      	it	ne
    4720:	2001      	movne	r0, #1
    4722:	4770      	bx	lr

00004724 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
    4724:	b108      	cbz	r0, 472a <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
    4726:	f7fc bb89 	b.w	e3c <arch_busy_wait>
}
    472a:	4770      	bx	lr

0000472c <z_abort_timeout>:
{
    472c:	b510      	push	{r4, lr}
	__asm__ volatile(
    472e:	f04f 0220 	mov.w	r2, #32
    4732:	f3ef 8411 	mrs	r4, BASEPRI
    4736:	f382 8811 	msr	BASEPRI, r2
    473a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    473e:	6803      	ldr	r3, [r0, #0]
    4740:	b13b      	cbz	r3, 4752 <z_abort_timeout+0x26>
			remove_timeout(to);
    4742:	f7fe ffa5 	bl	3690 <remove_timeout>
			ret = 0;
    4746:	2000      	movs	r0, #0
	__asm__ volatile(
    4748:	f384 8811 	msr	BASEPRI, r4
    474c:	f3bf 8f6f 	isb	sy
}
    4750:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4752:	f06f 0015 	mvn.w	r0, #21
    4756:	e7f7      	b.n	4748 <z_abort_timeout+0x1c>

00004758 <z_get_next_timeout_expiry>:
{
    4758:	b510      	push	{r4, lr}
	__asm__ volatile(
    475a:	f04f 0320 	mov.w	r3, #32
    475e:	f3ef 8411 	mrs	r4, BASEPRI
    4762:	f383 8811 	msr	BASEPRI, r3
    4766:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    476a:	f7fe ffab 	bl	36c4 <next_timeout>
	__asm__ volatile(
    476e:	f384 8811 	msr	BASEPRI, r4
    4772:	f3bf 8f6f 	isb	sy
}
    4776:	bd10      	pop	{r4, pc}

00004778 <z_set_timeout_expiry>:
{
    4778:	b570      	push	{r4, r5, r6, lr}
    477a:	4604      	mov	r4, r0
    477c:	460d      	mov	r5, r1
	__asm__ volatile(
    477e:	f04f 0320 	mov.w	r3, #32
    4782:	f3ef 8611 	mrs	r6, BASEPRI
    4786:	f383 8811 	msr	BASEPRI, r3
    478a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    478e:	f7fe ff99 	bl	36c4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4792:	2801      	cmp	r0, #1
    4794:	dd05      	ble.n	47a2 <z_set_timeout_expiry+0x2a>
    4796:	42a0      	cmp	r0, r4
    4798:	dd03      	ble.n	47a2 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
    479a:	4629      	mov	r1, r5
    479c:	4620      	mov	r0, r4
    479e:	f7fc fdcf 	bl	1340 <z_clock_set_timeout>
	__asm__ volatile(
    47a2:	f386 8811 	msr	BASEPRI, r6
    47a6:	f3bf 8f6f 	isb	sy
}
    47aa:	bd70      	pop	{r4, r5, r6, pc}

000047ac <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    47ac:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    47ae:	f7ff f8ad 	bl	390c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    47b2:	bd08      	pop	{r3, pc}

000047b4 <k_heap_init>:
{
    47b4:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    47b6:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    47ba:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    47be:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    47c0:	f7ff bc10 	b.w	3fe4 <sys_heap_init>

000047c4 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    47c4:	4770      	bx	lr
